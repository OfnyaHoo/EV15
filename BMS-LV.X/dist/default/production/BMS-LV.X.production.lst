

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jun 07 13:30:28 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	smallconst
    74  000600                     __psmallconst:
    75                           	opt stack 0
    76  000600  00                 	db	0
    77  000601                     _dpowers:
    78                           	opt stack 0
    79  000601  0001               	dw	1
    80  000603  0000               	dw	0
    81  000605  000A               	dw	10
    82  000607  0000               	dw	0
    83  000609  0064               	dw	100
    84  00060B  0000               	dw	0
    85  00060D  03E8               	dw	1000
    86  00060F  0000               	dw	0
    87  000611  2710               	dw	10000
    88  000613  0000               	dw	0
    89  000615  86A0               	dw	34464
    90  000617  0001               	dw	1
    91  000619  4240               	dw	16960
    92  00061B  000F               	dw	15
    93  00061D  9680               	dw	38528
    94  00061F  0098               	dw	152
    95  000621  E100               	dw	57600
    96  000623  05F5               	dw	1525
    97  000625  CA00               	dw	51712
    98  000627  3B9A               	dw	15258
    99  000629                     __end_of_dpowers:
   100                           	opt stack 0
   101  000629                     __npowers_:
   102                           	opt stack 0
   103  000629  00                 	db	0
   104  00062A  80                 	db	128
   105  00062B  3F                 	db	63
   106  00062C  CD                 	db	205
   107  00062D  CC                 	db	204
   108  00062E  3D                 	db	61
   109  00062F  D7                 	db	215
   110  000630  23                 	db	35
   111  000631  3C                 	db	60
   112  000632  12                 	db	18
   113  000633  83                 	db	131
   114  000634  3A                 	db	58
   115  000635  B7                 	db	183
   116  000636  D1                 	db	209
   117  000637  38                 	db	56
   118  000638  C6                 	db	198
   119  000639  27                 	db	39
   120  00063A  37                 	db	55
   121  00063B  38                 	db	56
   122  00063C  86                 	db	134
   123  00063D  35                 	db	53
   124  00063E  C0                 	db	192
   125  00063F  D6                 	db	214
   126  000640  33                 	db	51
   127  000641  CC                 	db	204
   128  000642  2B                 	db	43
   129  000643  32                 	db	50
   130  000644  70                 	db	112
   131  000645  89                 	db	137
   132  000646  30                 	db	48
   133  000647  E7                 	db	231
   134  000648  DB                 	db	219
   135  000649  2E                 	db	46
   136  00064A  E5                 	db	229
   137  00064B  3C                 	db	60
   138  00064C  1E                 	db	30
   139  00064D  42                 	db	66
   140  00064E  A2                 	db	162
   141  00064F  0D                 	db	13
   142  000650                     __end_of__npowers_:
   143                           	opt stack 0
   144  000650                     __powers_:
   145                           	opt stack 0
   146  000650  00                 	db	0
   147  000651  80                 	db	128
   148  000652  3F                 	db	63
   149  000653  00                 	db	0
   150  000654  20                 	db	32
   151  000655  41                 	db	65
   152  000656  00                 	db	0
   153  000657  C8                 	db	200
   154  000658  42                 	db	66
   155  000659  00                 	db	0
   156  00065A  7A                 	db	122
   157  00065B  44                 	db	68
   158  00065C  40                 	db	64
   159  00065D  1C                 	db	28
   160  00065E  46                 	db	70
   161  00065F  50                 	db	80
   162  000660  C3                 	db	195
   163  000661  47                 	db	71
   164  000662  24                 	db	36
   165  000663  74                 	db	116
   166  000664  49                 	db	73
   167  000665  97                 	db	151
   168  000666  18                 	db	24
   169  000667  4B                 	db	75
   170  000668  BC                 	db	188
   171  000669  BE                 	db	190
   172  00066A  4C                 	db	76
   173  00066B  6B                 	db	107
   174  00066C  6E                 	db	110
   175  00066D  4E                 	db	78
   176  00066E  03                 	db	3
   177  00066F  15                 	db	21
   178  000670  50                 	db	80
   179  000671  79                 	db	121
   180  000672  AD                 	db	173
   181  000673  60                 	db	96
   182  000674  F3                 	db	243
   183  000675  49                 	db	73
   184  000676  71                 	db	113
   185  000677                     __end_of__powers_:
   186                           	opt stack 0
   187  000677                     log@coeff:
   188                           	opt stack 0
   189  000677  00                 	db	0
   190  000678  00                 	db	0
   191  000679  00                 	db	0
   192  00067A  00                 	db	0
   193  00067B  80                 	db	128
   194  00067C  3F                 	db	63
   195  00067D  F0                 	db	240
   196  00067E  FF                 	db	255
   197  00067F  BE                 	db	190
   198  000680  E2                 	db	226
   199  000681  A9                 	db	169
   200  000682  3E                 	db	62
   201  000683  83                 	db	131
   202  000684  76                 	db	118
   203  000685  BE                 	db	190
   204  000686  AE                 	db	174
   205  000687  2B                 	db	43
   206  000688  3E                 	db	62
   207  000689  3C                 	db	60
   208  00068A  C3                 	db	195
   209  00068B  BD                 	db	189
   210  00068C  D2                 	db	210
   211  00068D  13                 	db	19
   212  00068E  3D                 	db	61
   213  00068F  78                 	db	120
   214  000690  D3                 	db	211
   215  000691  BB                 	db	187
   216  000692                     __end_oflog@coeff:
   217                           	opt stack 0
   218  000692                     STR_4:
   219  000692  43                 	db	67	;'C'
   220  000693  75                 	db	117	;'u'
   221  000694  72                 	db	114	;'r'
   222  000695  72                 	db	114	;'r'
   223  000696  65                 	db	101	;'e'
   224  000697  6E                 	db	110	;'n'
   225  000698  74                 	db	116	;'t'
   226  000699  20                 	db	32
   227  00069A  25                 	db	37
   228  00069B  64                 	db	100	;'d'
   229  00069C  20                 	db	32
   230  00069D  3D                 	db	61	;'='
   231  00069E  20                 	db	32
   232  00069F  25                 	db	37
   233  0006A0  30                 	db	48	;'0'
   234  0006A1  2E                 	db	46
   235  0006A2  30                 	db	48	;'0'
   236  0006A3  32                 	db	50	;'2'
   237  0006A4  66                 	db	102	;'f'
   238  0006A5  20                 	db	32
   239  0006A6  0D                 	db	13
   240  0006A7  0A                 	db	10
   241  0006A8  00                 	db	0
   242  0006A9                     STR_3:
   243  0006A9  42                 	db	66	;'B'
   244  0006AA  61                 	db	97	;'a'
   245  0006AB  74                 	db	116	;'t'
   246  0006AC  74                 	db	116	;'t'
   247  0006AD  65                 	db	101	;'e'
   248  0006AE  72                 	db	114	;'r'
   249  0006AF  79                 	db	121	;'y'
   250  0006B0  20                 	db	32
   251  0006B1  25                 	db	37
   252  0006B2  64                 	db	100	;'d'
   253  0006B3  20                 	db	32
   254  0006B4  3D                 	db	61	;'='
   255  0006B5  20                 	db	32
   256  0006B6  25                 	db	37
   257  0006B7  30                 	db	48	;'0'
   258  0006B8  2E                 	db	46
   259  0006B9  30                 	db	48	;'0'
   260  0006BA  32                 	db	50	;'2'
   261  0006BB  66                 	db	102	;'f'
   262  0006BC  20                 	db	32
   263  0006BD  0D                 	db	13
   264  0006BE  0A                 	db	10
   265  0006BF  00                 	db	0
   266  0006C0                     STR_5:
   267  0006C0  46                 	db	70	;'F'
   268  0006C1  41                 	db	65	;'A'
   269  0006C2  55                 	db	85	;'U'
   270  0006C3  4C                 	db	76	;'L'
   271  0006C4  54                 	db	84	;'T'
   272  0006C5  20                 	db	32
   273  0006C6  0D                 	db	13
   274  0006C7  0A                 	db	10
   275  0006C8  00                 	db	0
   276  0006C9                     STR_1:
   277  0006C9  73                 	db	115	;'s'
   278  0006CA  74                 	db	116	;'t'
   279  0006CB  61                 	db	97	;'a'
   280  0006CC  72                 	db	114	;'r'
   281  0006CD  74                 	db	116	;'t'
   282  0006CE  00                 	db	0
   283  0000                     
   284                           ; #config settings
   285  0006CF  00                 	db	0	; dummy byte at the end
   286  0000                     
   287                           	psect	nvCOMRAM
   288  000048                     __pnvCOMRAM:
   289                           	opt stack 0
   290  000048                     _timer1ReloadVal:
   291                           	opt stack 0
   292  000048                     	ds	2
   293  0000                     _ANSELA	set	3896
   294  0000                     _ANSELB	set	3897
   295  0000                     _ANSELC	set	3898
   296  0000                     _ANSELD	set	3899
   297  0000                     _ANSELE	set	3900
   298  0000                     _TMR1	set	4046
   299  0000                     _ADCON0	set	4034
   300  0000                     _ADCON0bits	set	4034
   301  0000                     _ADCON1	set	4033
   302  0000                     _ADCON2	set	4032
   303  0000                     _ADRESH	set	4036
   304  0000                     _ADRESL	set	4035
   305  0000                     _INTCON2bits	set	4081
   306  0000                     _INTCONbits	set	4082
   307  0000                     _IPR1bits	set	3999
   308  0000                     _LATA	set	3977
   309  0000                     _LATB	set	3978
   310  0000                     _LATC	set	3979
   311  0000                     _LATCbits	set	3979
   312  0000                     _LATD	set	3980
   313  0000                     _LATE	set	3981
   314  0000                     _OSCCON	set	4051
   315  0000                     _OSCCON2	set	4050
   316  0000                     _OSCTUNE	set	3995
   317  0000                     _PIE1bits	set	3997
   318  0000                     _PIR1bits	set	3998
   319  0000                     _RCONbits	set	4048
   320  0000                     _T1CON	set	4045
   321  0000                     _T1CONbits	set	4045
   322  0000                     _T1GCON	set	4044
   323  0000                     _T1GCONbits	set	4044
   324  0000                     _TMR1H	set	4047
   325  0000                     _TMR1L	set	4046
   326  0000                     _TRISA	set	3986
   327  0000                     _TRISB	set	3987
   328  0000                     _TRISC	set	3988
   329  0000                     _TRISD	set	3989
   330  0000                     _TRISE	set	3990
   331  0000                     _WPUB	set	3937
   332  0000                     _LATA4	set	31820
   333  0000                     _LATA6	set	31822
   334  0000                     _LATA7	set	31823
   335  0000                     _LATB0	set	31824
   336  0000                     _LATB1	set	31825
   337  0000                     _LATB2	set	31826
   338  0000                     _LATC0	set	31832
   339  0000                     _LATD2	set	31842
   340  0000                     _LATD3	set	31843
   341  0000                     _LATD4	set	31844
   342  0000                     _LATD5	set	31845
   343  0000                     _LATD6	set	31846
   344  0000                     _LATD7	set	31847
   345                           
   346                           	psect	cinit
   347  003BA4                     __pcinit:
   348                           	opt stack 0
   349  003BA4                     start_initialization:
   350                           	opt stack 0
   351  003BA4                     __initialization:
   352                           	opt stack 0
   353                           
   354                           ; Clear objects allocated to BANK2 (30 bytes)
   355  003BA4  EE02  F000         	lfsr	0,__pbssBANK2
   356  003BA8  0E1E               	movlw	30
   357  003BAA                     clear_0:
   358  003BAA  6AEE               	clrf	postinc0,c
   359  003BAC  06E8               	decf	wreg,f,c
   360  003BAE  E1FD               	bnz	clear_0
   361                           
   362                           ; Clear objects allocated to BANK1 (240 bytes)
   363  003BB0  EE01  F000         	lfsr	0,__pbssBANK1
   364  003BB4  0EF0               	movlw	240
   365  003BB6                     clear_1:
   366  003BB6  6AEE               	clrf	postinc0,c
   367  003BB8  06E8               	decf	wreg,f,c
   368  003BBA  E1FD               	bnz	clear_1
   369                           
   370                           ; Clear objects allocated to BANK0 (70 bytes)
   371  003BBC  EE00  F0B8         	lfsr	0,__pbssBANK0
   372  003BC0  0E46               	movlw	70
   373  003BC2                     clear_2:
   374  003BC2  6AEE               	clrf	postinc0,c
   375  003BC4  06E8               	decf	wreg,f,c
   376  003BC6  E1FD               	bnz	clear_2
   377                           
   378                           ; Clear objects allocated to COMRAM (10 bytes)
   379  003BC8  EE00  F03E         	lfsr	0,__pbssCOMRAM
   380  003BCC  0E0A               	movlw	10
   381  003BCE                     clear_3:
   382  003BCE  6AEE               	clrf	postinc0,c
   383  003BD0  06E8               	decf	wreg,f,c
   384  003BD2  E1FD               	bnz	clear_3
   385  003BD4                     end_of_initialization:
   386                           	opt stack 0
   387  003BD4                     __end_of__initialization:
   388                           	opt stack 0
   389  003BD4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   390  003BD6  6EF8               	movwf	tblptru,c
   391  003BD8  0100               	movlb	0
   392  003BDA  EFB1  F011         	goto	_main	;jump to C main() function
   393                           tblptru	equ	0xFF8
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           
   397                           	psect	bssCOMRAM
   398  00003E                     __pbssCOMRAM:
   399                           	opt stack 0
   400  00003E                     _Current_Mean:
   401                           	opt stack 0
   402  00003E                     	ds	3
   403  000041                     TMR1_ISR@CountCallBack:
   404                           	opt stack 0
   405  000041                     	ds	2
   406  000043                     _ADC_Buffer_Point:
   407                           	opt stack 0
   408  000043                     	ds	2
   409  000045                     _Current_Aquire:
   410                           	opt stack 0
   411  000045                     	ds	1
   412  000046                     _Temp_Aquire:
   413                           	opt stack 0
   414  000046                     	ds	1
   415  000047                     _Volt_Aquire:
   416                           	opt stack 0
   417  000047                     	ds	1
   418                           tblptru	equ	0xFF8
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           
   422                           	psect	bssBANK0
   423  0000B8                     __pbssBANK0:
   424                           	opt stack 0
   425  0000B8                     _Battery_Adc:
   426                           	opt stack 0
   427  0000B8                     	ds	20
   428  0000CC                     _Current_Adc:
   429                           	opt stack 0
   430  0000CC                     	ds	20
   431  0000E0                     _Current_Done:
   432                           	opt stack 0
   433  0000E0                     	ds	2
   434  0000E2                     _Temp_Done:
   435                           	opt stack 0
   436  0000E2                     	ds	2
   437  0000E4                     _Volt_Done:
   438                           	opt stack 0
   439  0000E4                     	ds	2
   440  0000E6                     _errno:
   441                           	opt stack 0
   442  0000E6                     	ds	2
   443  0000E8                     _fault:
   444                           	opt stack 0
   445  0000E8                     	ds	1
   446  0000E9                     _infault:
   447                           	opt stack 0
   448  0000E9                     	ds	1
   449  0000EA                     _Temp_Adc:
   450                           	opt stack 0
   451  0000EA                     	ds	20
   452                           tblptru	equ	0xFF8
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           
   456                           	psect	bssBANK1
   457  000100                     __pbssBANK1:
   458                           	opt stack 0
   459  000100                     _Battery_Current:
   460                           	opt stack 0
   461  000100                     	ds	30
   462  00011E                     _Battery_Volt:
   463                           	opt stack 0
   464  00011E                     	ds	30
   465  00013C                     _PrevBattery_Current:
   466                           	opt stack 0
   467  00013C                     	ds	30
   468  00015A                     _PrevBattery_Volt:
   469                           	opt stack 0
   470  00015A                     	ds	30
   471  000178                     _PrevTemp_DegF:
   472                           	opt stack 0
   473  000178                     	ds	30
   474  000196                     _Temp_DegF:
   475                           	opt stack 0
   476  000196                     	ds	30
   477  0001B4                     _TempBattery_Current:
   478                           	opt stack 0
   479  0001B4                     	ds	30
   480  0001D2                     _TmpTemp_DegF:
   481                           	opt stack 0
   482  0001D2                     	ds	30
   483                           tblptru	equ	0xFF8
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           
   487                           	psect	bssBANK2
   488  000200                     __pbssBANK2:
   489                           	opt stack 0
   490  000200                     _TempBattery_Volt:
   491                           	opt stack 0
   492  000200                     	ds	30
   493                           tblptru	equ	0xFF8
   494                           postinc0	equ	0xFEE
   495                           wreg	equ	0xFE8
   496                           
   497                           	psect	cstackBANK0
   498  000060                     __pcstackBANK0:
   499                           	opt stack 0
   500  000060                     ?___ftmul:
   501                           	opt stack 0
   502  000060                     ___ftmul@f1:
   503                           	opt stack 0
   504                           
   505                           ; 3 bytes @ 0x0
   506  000060                     	ds	3
   507  000063                     ___ftmul@f2:
   508                           	opt stack 0
   509                           
   510                           ; 3 bytes @ 0x3
   511  000063                     	ds	3
   512  000066                     ??___ftmul:
   513                           
   514                           ; 0 bytes @ 0x6
   515  000066                     	ds	3
   516  000069                     ___ftmul@exp:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x9
   520  000069                     	ds	1
   521  00006A                     ___ftmul@f3_as_product:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0xA
   525  00006A                     	ds	3
   526  00006D                     ___ftmul@cntr:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0xD
   530  00006D                     	ds	1
   531  00006E                     ___ftmul@sign:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0xE
   535  00006E                     	ds	1
   536  00006F                     ?_fround:
   537                           	opt stack 0
   538  00006F                     ?_scale:
   539                           	opt stack 0
   540  00006F                     Battery_Convert@x:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0xF
   544  00006F                     	ds	3
   545  000072                     _fround$1696:
   546                           	opt stack 0
   547  000072                     _scale$1697:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x12
   551  000072                     	ds	3
   552  000075                     scale@scl:
   553                           	opt stack 0
   554  000075                     _fround$1695:
   555                           	opt stack 0
   556                           
   557                           ; 3 bytes @ 0x15
   558  000075                     	ds	1
   559  000076                     ?___fttol:
   560                           	opt stack 0
   561  000076                     ___fttol@f1:
   562                           	opt stack 0
   563                           
   564                           ; 3 bytes @ 0x16
   565  000076                     	ds	2
   566  000078                     fround@prec:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x18
   570  000078                     	ds	1
   571  000079                     ?___ftadd:
   572                           	opt stack 0
   573  000079                     ___ftadd@f1:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x19
   577  000079                     	ds	1
   578  00007A                     ??___fttol:
   579                           
   580                           ; 0 bytes @ 0x1A
   581  00007A                     	ds	2
   582  00007C                     ___ftadd@f2:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x1C
   586  00007C                     	ds	3
   587  00007F                     ??___ftadd:
   588  00007F                     ___fttol@sign1:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x1F
   592  00007F                     	ds	1
   593  000080                     ___fttol@lval:
   594                           	opt stack 0
   595                           
   596                           ; 4 bytes @ 0x20
   597  000080                     	ds	2
   598  000082                     ___ftadd@sign:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x22
   602  000082                     	ds	1
   603  000083                     ___ftadd@exp2:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x23
   607  000083                     	ds	1
   608  000084                     ___ftadd@exp1:
   609                           	opt stack 0
   610  000084                     ___fttol@exp1:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x24
   614  000084                     	ds	1
   615  000085                     ?___ftsub:
   616                           	opt stack 0
   617  000085                     ?_eval_poly:
   618                           	opt stack 0
   619  000085                     Temp_Filter@x:
   620                           	opt stack 0
   621  000085                     Current_Fault@fault:
   622                           	opt stack 0
   623  000085                     Current_Filter@x:
   624                           	opt stack 0
   625  000085                     ___ftsub@f1:
   626                           	opt stack 0
   627  000085                     eval_poly@x:
   628                           	opt stack 0
   629                           
   630                           ; 3 bytes @ 0x25
   631  000085                     	ds	2
   632  000087                     Current_Fault@i:
   633                           	opt stack 0
   634  000087                     _Current_Convert$1694:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x27
   638  000087                     	ds	1
   639  000088                     eval_poly@d:
   640                           	opt stack 0
   641  000088                     ___ftsub@f2:
   642                           	opt stack 0
   643                           
   644                           ; 3 bytes @ 0x28
   645  000088                     	ds	1
   646  000089                     Current_Fault@i_973:
   647                           	opt stack 0
   648  000089                     Current_Convert@x:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x29
   652  000089                     	ds	1
   653  00008A                     eval_poly@n:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x2A
   657  00008A                     	ds	1
   658  00008B                     ?_printf:
   659                           	opt stack 0
   660  00008B                     printf@f:
   661                           	opt stack 0
   662  00008B                     Current_Fault@temp:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x2B
   666  00008B                     	ds	1
   667  00008C                     ??_eval_poly:
   668                           
   669                           ; 0 bytes @ 0x2C
   670  00008C                     	ds	2
   671  00008E                     eval_poly@res:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x2E
   675  00008E                     	ds	3
   676  000091                     ?_log:
   677                           	opt stack 0
   678  000091                     log@x:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x31
   682  000091                     	ds	1
   683  000092                     ??_printf:
   684                           
   685                           ; 0 bytes @ 0x32
   686  000092                     	ds	2
   687  000094                     log@exponent:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x34
   691  000094                     	ds	2
   692  000096                     _Temp_Convert$1692:
   693                           	opt stack 0
   694                           
   695                           ; 3 bytes @ 0x36
   696  000096                     	ds	2
   697  000098                     _printf$1698:
   698                           	opt stack 0
   699                           
   700                           ; 3 bytes @ 0x38
   701  000098                     	ds	1
   702  000099                     _Temp_Convert$1693:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x39
   706  000099                     	ds	2
   707  00009B                     printf@ap:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x3B
   711  00009B                     	ds	1
   712  00009C                     Temp_Convert@x:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x3C
   716  00009C                     	ds	1
   717  00009D                     printf@tmpval:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0x3D
   721  00009D                     	ds	1
   722  00009E                     Temp_Convert@steinhart:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x3E
   726  00009E                     	ds	3
   727  0000A1                     printf@val:
   728                           	opt stack 0
   729                           
   730                           ; 4 bytes @ 0x41
   731  0000A1                     	ds	4
   732  0000A5                     printf@exp:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x45
   736  0000A5                     	ds	2
   737  0000A7                     printf@flag:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x47
   741  0000A7                     	ds	2
   742  0000A9                     printf@width:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x49
   746  0000A9                     	ds	2
   747  0000AB                     printf@fval:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x4B
   751  0000AB                     	ds	3
   752  0000AE                     printf@prec:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x4E
   756  0000AE                     	ds	2
   757  0000B0                     printf@c:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x50
   761  0000B0                     	ds	1
   762  0000B1                     
   763                           ; 2 bytes @ 0x51
   764  0000B1                     	ds	2
   765  0000B3                     
   766                           ; 3 bytes @ 0x53
   767  0000B3                     	ds	3
   768  0000B6                     main@x:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x56
   772  0000B6                     	ds	2
   773                           tblptru	equ	0xFF8
   774                           postinc0	equ	0xFEE
   775                           wreg	equ	0xFE8
   776                           
   777                           	psect	cstackCOMRAM
   778  000001                     __pcstackCOMRAM:
   779                           	opt stack 0
   780  000001                     ??_ADC_StartConversion:
   781  000001                     ??_ADC_GetConversion:
   782  000001                     ?_ADC_GetConversionResult:
   783                           	opt stack 0
   784  000001                     Set_4051@Channel:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x0
   788  000001                     	ds	1
   789  000002                     ADC_StartConversion@channel:
   790                           	opt stack 0
   791  000002                     ADC_GetConversion@channel:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x1
   795  000002                     	ds	1
   796  000003                     ??_Set_4051:
   797  000003                     ??_ADC_GetConversionResult:
   798                           
   799                           ; 0 bytes @ 0x2
   800  000003                     	ds	2
   801  000005                     ??_ADC_ISR:
   802                           
   803                           ; 0 bytes @ 0x4
   804  000005                     	ds	2
   805  000007                     ADC_ISR@ADC_Result:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x6
   809  000007                     	ds	2
   810  000009                     ??_INTERRUPT_InterruptManager:
   811                           
   812                           ; 0 bytes @ 0x8
   813  000009                     	ds	14
   814  000017                     ??_isdigit:
   815  000017                     ?___awmod:
   816                           	opt stack 0
   817  000017                     ?_Current_Get:
   818                           	opt stack 0
   819  000017                     ?___ftpack:
   820                           	opt stack 0
   821  000017                     ?_frexp:
   822                           	opt stack 0
   823  000017                     ?___ftneg:
   824                           	opt stack 0
   825  000017                     ?__tdiv_to_l_:
   826                           	opt stack 0
   827  000017                     ?__div_to_l_:
   828                           	opt stack 0
   829  000017                     ?___lldiv:
   830                           	opt stack 0
   831  000017                     Delay@wait:
   832                           	opt stack 0
   833  000017                     SetBypas@pin:
   834                           	opt stack 0
   835  000017                     ___awmod@dividend:
   836                           	opt stack 0
   837  000017                     __div_to_l_@f1:
   838                           	opt stack 0
   839  000017                     ___ftpack@arg:
   840                           	opt stack 0
   841  000017                     __tdiv_to_l_@f1:
   842                           	opt stack 0
   843  000017                     ___ftneg@f1:
   844                           	opt stack 0
   845  000017                     frexp@value:
   846                           	opt stack 0
   847  000017                     ___lldiv@dividend:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x16
   851  000017                     	ds	1
   852  000018                     _isdigit$1337:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x17
   856  000018                     	ds	1
   857  000019                     ??_Delay:
   858  000019                     isdigit@c:
   859                           	opt stack 0
   860  000019                     SetBypas@state:
   861                           	opt stack 0
   862  000019                     ___awmod@divisor:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x18
   866  000019                     	ds	1
   867  00001A                     ___ftpack@exp:
   868                           	opt stack 0
   869  00001A                     Delay@x:
   870                           	opt stack 0
   871  00001A                     frexp@eptr:
   872                           	opt stack 0
   873  00001A                     __div_to_l_@f2:
   874                           	opt stack 0
   875  00001A                     __tdiv_to_l_@f2:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0x19
   879  00001A                     	ds	1
   880  00001B                     ??_SetBypas:
   881  00001B                     ___awmod@counter:
   882                           	opt stack 0
   883  00001B                     ___ftpack@sign:
   884                           	opt stack 0
   885  00001B                     ___lldiv@divisor:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x1A
   889  00001B                     	ds	1
   890  00001C                     ??___ftpack:
   891  00001C                     ??_frexp:
   892  00001C                     ___awmod@sign:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x1B
   896  00001C                     	ds	1
   897  00001D                     ??__tdiv_to_l_:
   898  00001D                     ?___awdiv:
   899                           	opt stack 0
   900  00001D                     ___awdiv@dividend:
   901                           	opt stack 0
   902  00001D                     __div_to_l_@quot:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x1C
   906  00001D                     	ds	2
   907  00001F                     ?___lltoft:
   908                           	opt stack 0
   909  00001F                     ___awdiv@divisor:
   910                           	opt stack 0
   911  00001F                     ___lldiv@quotient:
   912                           	opt stack 0
   913  00001F                     ___lltoft@c:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x1E
   917  00001F                     	ds	1
   918  000020                     __tdiv_to_l_@quot:
   919                           	opt stack 0
   920                           
   921                           ; 4 bytes @ 0x1F
   922  000020                     	ds	1
   923  000021                     ___awdiv@counter:
   924                           	opt stack 0
   925  000021                     __div_to_l_@cntr:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x20
   929  000021                     	ds	1
   930  000022                     ___awdiv@sign:
   931                           	opt stack 0
   932  000022                     __div_to_l_@exp1:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x21
   936  000022                     	ds	1
   937  000023                     ??___lltoft:
   938  000023                     ___lldiv@counter:
   939                           	opt stack 0
   940  000023                     ___awdiv@quotient:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x22
   944  000023                     	ds	1
   945  000024                     ?___llmod:
   946                           	opt stack 0
   947  000024                     __tdiv_to_l_@cntr:
   948                           	opt stack 0
   949  000024                     ___llmod@dividend:
   950                           	opt stack 0
   951                           
   952                           ; 4 bytes @ 0x23
   953  000024                     	ds	1
   954  000025                     ?___wmul:
   955                           	opt stack 0
   956  000025                     __tdiv_to_l_@exp1:
   957                           	opt stack 0
   958  000025                     ___wmul@multiplier:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x24
   962  000025                     	ds	2
   963  000027                     ___lltoft@exp:
   964                           	opt stack 0
   965  000027                     ___wmul@multiplicand:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x26
   969  000027                     	ds	1
   970  000028                     ___llmod@divisor:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x27
   974  000028                     	ds	1
   975  000029                     ___wmul@product:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x28
   979  000029                     	ds	2
   980  00002B                     ?_Battery_Get:
   981                           	opt stack 0
   982  00002B                     ?___awtoft:
   983                           	opt stack 0
   984  00002B                     Battery_Get@channelnum:
   985                           	opt stack 0
   986  00002B                     ___awtoft@c:
   987                           	opt stack 0
   988  00002B                     ___ftge@ff1:
   989                           	opt stack 0
   990                           
   991                           ; 3 bytes @ 0x2A
   992  00002B                     	ds	1
   993  00002C                     ___llmod@counter:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x2B
   997  00002C                     	ds	2
   998  00002E                     ___awtoft@sign:
   999                           	opt stack 0
  1000  00002E                     ___ftge@ff2:
  1001                           	opt stack 0
  1002                           
  1003                           ; 3 bytes @ 0x2D
  1004  00002E                     	ds	1
  1005  00002F                     ?___ftdiv:
  1006                           	opt stack 0
  1007  00002F                     ___ftdiv@f1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 3 bytes @ 0x2E
  1011  00002F                     	ds	2
  1012  000031                     ??___ftge:
  1013                           
  1014                           ; 0 bytes @ 0x30
  1015  000031                     	ds	1
  1016  000032                     ___ftdiv@f2:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x31
  1020  000032                     	ds	2
  1021  000034                     Battery_Fault@fault:
  1022                           	opt stack 0
  1023  000034                     Temp_Fault@fault:
  1024                           	opt stack 0
  1025  000034                     RunBypas@cellbyp:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x33
  1029  000034                     	ds	1
  1030  000035                     ??___ftdiv:
  1031  000035                     Battery_Fault@i:
  1032                           	opt stack 0
  1033  000035                     Temp_Fault@i:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x34
  1037  000035                     	ds	1
  1038  000036                     RunBypas@batvolt:
  1039                           	opt stack 0
  1040                           
  1041                           ; 3 bytes @ 0x35
  1042  000036                     	ds	2
  1043  000038                     ___ftdiv@cntr:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x37
  1047  000038                     	ds	1
  1048  000039                     RunBypas@i:
  1049                           	opt stack 0
  1050  000039                     ___ftdiv@f3:
  1051                           	opt stack 0
  1052                           
  1053                           ; 3 bytes @ 0x38
  1054  000039                     	ds	3
  1055  00003C                     ___ftdiv@exp:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x3B
  1059  00003C                     	ds	1
  1060  00003D                     ___ftdiv@sign:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x3C
  1064  00003D                     	ds	1
  1065  00003E                     tblptru	equ	0xFF8
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           
  1069                           ; 0 bytes @ 0x3D
  1070 ;;
  1071 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1072 ;;
  1073 ;; *************** function _main *****************
  1074 ;; Defined at:
  1075 ;;		line 35 in file "Main.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;  argc            2   81[BANK0 ] int 
  1078 ;;  argv            3   83[BANK0 ] PTR PTR unsigned char 
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;  x               2   86[BANK0 ] int 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  2   81[BANK0 ] int 
  1083 ;; Registers used:
  1084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1090 ;;      Params:         0       5       0       0       0       0       0
  1091 ;;      Locals:         0       2       0       0       0       0       0
  1092 ;;      Temps:          0       0       0       0       0       0       0
  1093 ;;      Totals:         0       7       0       0       0       0       0
  1094 ;;Total ram usage:        7 bytes
  1095 ;; Hardware stack levels required when called:    9
  1096 ;; This function calls:
  1097 ;;		_Battery_Convert
  1098 ;;		_Battery_Fault
  1099 ;;		_Battery_Get
  1100 ;;		_Current_Convert
  1101 ;;		_Current_Fault
  1102 ;;		_Current_Get
  1103 ;;		_Delay
  1104 ;;		_RunBypas
  1105 ;;		_SYSTEM_Initialize
  1106 ;;		_Temp_Convert
  1107 ;;		_Temp_Fault
  1108 ;;		_printf
  1109 ;; This function is called by:
  1110 ;;		Startup code after reset
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text0
  1115  002362                     __ptext0:
  1116                           	opt stack 0
  1117  002362                     _main:
  1118                           	opt stack 22
  1119                           
  1120                           ;Main.c: 37: SYSTEM_Initialize();
  1121                           
  1122                           ;incstack = 0
  1123  002362  ECD4  F01E         	call	_SYSTEM_Initialize	;wreg free
  1124  002366  D000               	goto	l5583
  1125  002368                     l5583:
  1126  002368  868C               	bsf	3980,3,c	;volatile
  1127  00236A  D000               	goto	l5585
  1128  00236C                     l5585:
  1129                           
  1130                           ;Main.c: 40: Delay(120);
  1131  00236C  0E00               	movlw	0
  1132  00236E  6E18               	movwf	Delay@wait+1,c
  1133  002370  0E78               	movlw	120
  1134  002372  6E17               	movwf	Delay@wait,c
  1135  002374  EC0B  F01E         	call	_Delay	;wreg free
  1136  002378  D000               	goto	l5587
  1137  00237A                     l5587:
  1138  00237A  968C               	bcf	3980,3,c	;volatile
  1139  00237C  D000               	goto	l5589
  1140  00237E                     l5589:
  1141                           
  1142                           ;Main.c: 59: (INTCONbits.GIE = 1);
  1143  00237E  8EF2               	bsf	intcon,7,c	;volatile
  1144                           
  1145                           ;Main.c: 62: (INTCONbits.PEIE = 1);
  1146  002380  8CF2               	bsf	intcon,6,c	;volatile
  1147                           
  1148                           ;Main.c: 71: LATCbits.LATC5 =1;
  1149  002382  8A8B               	bsf	3979,5,c	;volatile
  1150                           
  1151                           ;Main.c: 72: printf("start");
  1152  002384  0EC9               	movlw	low STR_1
  1153  002386  0100               	movlb	0	; () banked
  1154  002388  6F8B               	movwf	printf@f& (0+255),b
  1155  00238A  0E06               	movlw	high STR_1
  1156  00238C  0100               	movlb	0	; () banked
  1157  00238E  6F8C               	movwf	(printf@f+1)& (0+255),b
  1158  002390  EC68  F003         	call	_printf	;wreg free
  1159  002394  D000               	goto	l5597
  1160  002396                     l5597:
  1161                           
  1162                           ;Main.c: 74: {
  1163                           ;Main.c: 76: printf("start");
  1164  002396  0EC9               	movlw	low STR_1
  1165  002398  0100               	movlb	0	; () banked
  1166  00239A  6F8B               	movwf	printf@f& (0+255),b
  1167  00239C  0E06               	movlw	high STR_1
  1168  00239E  0100               	movlb	0	; () banked
  1169  0023A0  6F8C               	movwf	(printf@f+1)& (0+255),b
  1170  0023A2  EC68  F003         	call	_printf	;wreg free
  1171                           
  1172                           ;Main.c: 78: if (Temp_Done)
  1173  0023A6  0100               	movlb	0	; () banked
  1174  0023A8  51E2               	movf	_Temp_Done& (0+255),w,b
  1175  0023AA  0100               	movlb	0	; () banked
  1176  0023AC  11E3               	iorwf	(_Temp_Done+1)& (0+255),w,b
  1177  0023AE  B4D8               	btfsc	status,2,c
  1178  0023B0  D00A               	goto	l5607
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;Main.c: 79: {
  1182                           ;Main.c: 80: Temp_Done = 0;
  1183  0023B2  0E00               	movlw	0
  1184  0023B4  0100               	movlb	0	; () banked
  1185  0023B6  6FE3               	movwf	(_Temp_Done+1)& (0+255),b
  1186  0023B8  0E00               	movlw	0
  1187  0023BA  6FE2               	movwf	_Temp_Done& (0+255),b
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;Main.c: 81: Temp_Convert();
  1191  0023BC  EC91  F010         	call	_Temp_Convert	;wreg free
  1192                           
  1193                           ;Main.c: 82: Temp_Fault();
  1194  0023C0  ECD1  F01C         	call	_Temp_Fault	;wreg free
  1195  0023C4  D000               	goto	l5607
  1196  0023C6                     l5607:
  1197                           
  1198                           ;Main.c: 89: }
  1199                           ;Main.c: 90: if (Volt_Done)
  1200  0023C6  0100               	movlb	0	; () banked
  1201  0023C8  51E4               	movf	_Volt_Done& (0+255),w,b
  1202  0023CA  0100               	movlb	0	; () banked
  1203  0023CC  11E5               	iorwf	(_Volt_Done+1)& (0+255),w,b
  1204  0023CE  B4D8               	btfsc	status,2,c
  1205  0023D0  D041               	goto	l5629
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;Main.c: 91: {
  1209                           ;Main.c: 92: Volt_Done = 0;
  1210  0023D2  0E00               	movlw	0
  1211  0023D4  0100               	movlb	0	; () banked
  1212  0023D6  6FE5               	movwf	(_Volt_Done+1)& (0+255),b
  1213  0023D8  0E00               	movlw	0
  1214  0023DA  6FE4               	movwf	_Volt_Done& (0+255),b
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;Main.c: 93: Battery_Convert();
  1218  0023DC  EC24  F01A         	call	_Battery_Convert	;wreg free
  1219                           
  1220                           ;Main.c: 94: Battery_Fault();
  1221  0023E0  ECDB  F01A         	call	_Battery_Fault	;wreg free
  1222                           
  1223                           ;Main.c: 96: for (int x = 0;x<7;x++)
  1224  0023E4  0E00               	movlw	0
  1225  0023E6  0100               	movlb	0	; () banked
  1226  0023E8  6FB7               	movwf	(main@x+1)& (0+255),b
  1227  0023EA  0E00               	movlw	0
  1228  0023EC  6FB6               	movwf	main@x& (0+255),b
  1229  0023EE                     l5617:
  1230                           
  1231                           ; BSR set to: 0
  1232  0023EE  0100               	movlb	0	; () banked
  1233  0023F0  BFB7               	btfsc	(main@x+1)& (0+255),7,b
  1234  0023F2  D00A               	goto	l5621
  1235  0023F4  0100               	movlb	0	; () banked
  1236  0023F6  51B7               	movf	(main@x+1)& (0+255),w,b
  1237  0023F8  E12A               	bnz	l5627
  1238  0023FA  0E07               	movlw	7
  1239  0023FC  0100               	movlb	0	; () banked
  1240  0023FE  5DB6               	subwf	main@x& (0+255),w,b
  1241  002400  B0D8               	btfsc	status,0,c
  1242  002402  D025               	goto	l5627
  1243  002404  D001               	goto	l5621
  1244                           
  1245                           ; BSR set to: 0
  1246  002406  D023               	goto	l5627
  1247  002408                     l5621:
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;Main.c: 97: {
  1251                           ;Main.c: 98: printf("Battery %d = %0.02f \r\n", x+1,Battery_Get(x));
  1252  002408  0EA9               	movlw	low STR_3
  1253  00240A  0100               	movlb	0	; () banked
  1254  00240C  6F8B               	movwf	printf@f& (0+255),b
  1255  00240E  0E06               	movlw	high STR_3
  1256  002410  0100               	movlb	0	; () banked
  1257  002412  6F8C               	movwf	(printf@f+1)& (0+255),b
  1258  002414  0E01               	movlw	1
  1259  002416  0100               	movlb	0	; () banked
  1260  002418  25B6               	addwf	main@x& (0+255),w,b
  1261  00241A  0100               	movlb	0	; () banked
  1262  00241C  6F8D               	movwf	(?_printf+2)& (0+255),b
  1263  00241E  0E00               	movlw	0
  1264  002420  0100               	movlb	0	; () banked
  1265  002422  21B7               	addwfc	(main@x+1)& (0+255),w,b
  1266  002424  0100               	movlb	0	; () banked
  1267  002426  6F8E               	movwf	(?_printf+3)& (0+255),b
  1268  002428  C0B6  F02B         	movff	main@x,Battery_Get@channelnum
  1269  00242C  C0B7  F02C         	movff	main@x+1,Battery_Get@channelnum+1
  1270  002430  EC24  F01E         	call	_Battery_Get	;wreg free
  1271  002434  C02B  F08F         	movff	?_Battery_Get,?_printf+4
  1272  002438  C02C  F090         	movff	?_Battery_Get+1,?_printf+5
  1273  00243C  C02D  F091         	movff	?_Battery_Get+2,?_printf+6
  1274  002440  EC68  F003         	call	_printf	;wreg free
  1275  002444  0100               	movlb	0	; () banked
  1276  002446  4BB6               	infsnz	main@x& (0+255),f,b
  1277  002448  2BB7               	incf	(main@x+1)& (0+255),f,b
  1278  00244A  D7D1               	goto	l5617
  1279                           
  1280                           ; BSR set to: 0
  1281  00244C  D000               	goto	l5627
  1282  00244E                     l5627:
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;Main.c: 99: }
  1286                           ;Main.c: 101: RunBypas();
  1287  00244E  ECEF  F018         	call	_RunBypas	;wreg free
  1288  002452  D000               	goto	l5629
  1289  002454                     l5629:
  1290                           
  1291                           ;Main.c: 102: }
  1292                           ;Main.c: 103: if (Current_Done)
  1293  002454  0100               	movlb	0	; () banked
  1294  002456  51E0               	movf	_Current_Done& (0+255),w,b
  1295  002458  0100               	movlb	0	; () banked
  1296  00245A  11E1               	iorwf	(_Current_Done+1)& (0+255),w,b
  1297  00245C  B4D8               	btfsc	status,2,c
  1298  00245E  D01C               	goto	l5639
  1299                           
  1300                           ; BSR set to: 0
  1301                           ;Main.c: 104: {
  1302                           ;Main.c: 105: Current_Done = 0;
  1303  002460  0E00               	movlw	0
  1304  002462  0100               	movlb	0	; () banked
  1305  002464  6FE1               	movwf	(_Current_Done+1)& (0+255),b
  1306  002466  0E00               	movlw	0
  1307  002468  6FE0               	movwf	_Current_Done& (0+255),b
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;Main.c: 106: Current_Convert();
  1311  00246A  EC5A  F019         	call	_Current_Convert	;wreg free
  1312                           
  1313                           ;Main.c: 107: fault = Current_Fault();
  1314  00246E  EC8F  F012         	call	_Current_Fault	;wreg free
  1315  002472  0100               	movlb	0	; () banked
  1316  002474  6FE8               	movwf	_fault& (0+255),b
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;Main.c: 108: printf("Current %d = %0.02f \r\n",Current_Get());
  1320  002476  0E92               	movlw	low STR_4
  1321  002478  0100               	movlb	0	; () banked
  1322  00247A  6F8B               	movwf	printf@f& (0+255),b
  1323  00247C  0E06               	movlw	high STR_4
  1324  00247E  0100               	movlb	0	; () banked
  1325  002480  6F8C               	movwf	(printf@f+1)& (0+255),b
  1326  002482  ECF1  F01E         	call	_Current_Get	;wreg free
  1327  002486  C017  F08D         	movff	?_Current_Get,?_printf+2
  1328  00248A  C018  F08E         	movff	?_Current_Get+1,?_printf+3
  1329  00248E  C019  F08F         	movff	?_Current_Get+2,?_printf+4
  1330  002492  EC68  F003         	call	_printf	;wreg free
  1331  002496  D000               	goto	l5639
  1332  002498                     l5639:
  1333                           
  1334                           ;Main.c: 109: }
  1335                           ;Main.c: 110: if((fault == 1) && (infault == 0))
  1336  002498  0100               	movlb	0	; () banked
  1337  00249A  05E8               	decf	_fault& (0+255),w,b
  1338  00249C  A4D8               	btfss	status,2,c
  1339  00249E  D023               	goto	l5655
  1340                           
  1341                           ; BSR set to: 0
  1342  0024A0  0100               	movlb	0	; () banked
  1343  0024A2  51E9               	movf	_infault& (0+255),w,b
  1344  0024A4  0100               	movlb	0	; () banked
  1345  0024A6  A4D8               	btfss	status,2,c
  1346  0024A8  D01E               	goto	l5655
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;Main.c: 111: {
  1350                           ;Main.c: 113: infault = 1;
  1351  0024AA  0E01               	movlw	1
  1352  0024AC  0100               	movlb	0	; () banked
  1353  0024AE  6FE9               	movwf	_infault& (0+255),b
  1354  0024B0  D000               	goto	l5645
  1355  0024B2                     l5645:
  1356                           
  1357                           ; BSR set to: 0
  1358  0024B2  848C               	bsf	3980,2,c	;volatile
  1359  0024B4  D000               	goto	l5647
  1360  0024B6                     l5647:
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;Main.c: 115: Delay(40);
  1364  0024B6  0E00               	movlw	0
  1365  0024B8  6E18               	movwf	Delay@wait+1,c
  1366  0024BA  0E28               	movlw	40
  1367  0024BC  6E17               	movwf	Delay@wait,c
  1368  0024BE  EC0B  F01E         	call	_Delay	;wreg free
  1369  0024C2  D000               	goto	l5649
  1370  0024C4                     l5649:
  1371  0024C4  948C               	bcf	3980,2,c	;volatile
  1372  0024C6  D000               	goto	l5651
  1373  0024C8                     l5651:
  1374                           
  1375                           ;Main.c: 117: Delay(40);
  1376  0024C8  0E00               	movlw	0
  1377  0024CA  6E18               	movwf	Delay@wait+1,c
  1378  0024CC  0E28               	movlw	40
  1379  0024CE  6E17               	movwf	Delay@wait,c
  1380  0024D0  EC0B  F01E         	call	_Delay	;wreg free
  1381                           
  1382                           ;Main.c: 118: printf("FAULT \r\n");
  1383  0024D4  0EC0               	movlw	low STR_5
  1384  0024D6  0100               	movlb	0	; () banked
  1385  0024D8  6F8B               	movwf	printf@f& (0+255),b
  1386  0024DA  0E06               	movlw	high STR_5
  1387  0024DC  0100               	movlb	0	; () banked
  1388  0024DE  6F8C               	movwf	(printf@f+1)& (0+255),b
  1389  0024E0  EC68  F003         	call	_printf	;wreg free
  1390  0024E4  D000               	goto	l5655
  1391  0024E6                     l5655:
  1392                           
  1393                           ;Main.c: 119: }
  1394                           ;Main.c: 120: if((fault == 0) && (infault == 1))
  1395  0024E6  0100               	movlb	0	; () banked
  1396  0024E8  51E8               	movf	_fault& (0+255),w,b
  1397  0024EA  0100               	movlb	0	; () banked
  1398  0024EC  A4D8               	btfss	status,2,c
  1399  0024EE  D753               	goto	l5597
  1400                           
  1401                           ; BSR set to: 0
  1402  0024F0  0100               	movlb	0	; () banked
  1403  0024F2  05E9               	decf	_infault& (0+255),w,b
  1404  0024F4  A4D8               	btfss	status,2,c
  1405  0024F6  D74F               	goto	l5597
  1406                           
  1407                           ; BSR set to: 0
  1408                           
  1409                           ;Main.c: 121: {
  1410                           ;Main.c: 123: do { LATD3 = 1; } while(0);
  1411  0024F8  868C               	bsf	3980,3,c	;volatile
  1412  0024FA  D000               	goto	l5659
  1413  0024FC                     l5659:
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;Main.c: 124: Delay(40);
  1417  0024FC  0E00               	movlw	0
  1418  0024FE  6E18               	movwf	Delay@wait+1,c
  1419  002500  0E28               	movlw	40
  1420  002502  6E17               	movwf	Delay@wait,c
  1421  002504  EC0B  F01E         	call	_Delay	;wreg free
  1422  002508  D000               	goto	l5661
  1423  00250A                     l5661:
  1424  00250A  968C               	bcf	3980,3,c	;volatile
  1425                           
  1426                           ;Main.c: 126: Delay(40);
  1427  00250C  0E00               	movlw	0
  1428  00250E  6E18               	movwf	Delay@wait+1,c
  1429  002510  0E28               	movlw	40
  1430  002512  6E17               	movwf	Delay@wait,c
  1431  002514  EC0B  F01E         	call	_Delay	;wreg free
  1432  002518  D73E               	goto	l5597
  1433                           
  1434                           ;Main.c: 127: }
  1435                           ;Main.c: 151: }
  1436                           ;Main.c: 152: return (0);
  1437                           ;	Return value of _main is never used
  1438  00251A  EF55  F000         	goto	start
  1439  00251E                     __end_of_main:
  1440                           	opt stack 0
  1441                           tblptru	equ	0xFF8
  1442                           intcon	equ	0xFF2
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           status	equ	0xFD8
  1446                           
  1447 ;; *************** function _printf *****************
  1448 ;; Defined at:
  1449 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;  f               2   43[BANK0 ] PTR const unsigned char 
  1452 ;;		 -> STR_5(9), STR_4(23), STR_3(23), STR_2(6), 
  1453 ;;		 -> STR_1(6), 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  val             4   65[BANK0 ] unsigned long 
  1456 ;;  tmpval          4   61[BANK0 ] struct .
  1457 ;;  fval            3   75[BANK0 ] struct .
  1458 ;;  cp              3    0        PTR const unsigned char 
  1459 ;;  prec            2   78[BANK0 ] int 
  1460 ;;  width           2   73[BANK0 ] int 
  1461 ;;  flag            2   71[BANK0 ] unsigned short 
  1462 ;;  exp             2   69[BANK0 ] int 
  1463 ;;  ap              2   59[BANK0 ] PTR void [1]
  1464 ;;		 -> ?_printf(2), 
  1465 ;;  len             2    0        unsigned int 
  1466 ;;  c               1   80[BANK0 ] char 
  1467 ;;  d               1    0        unsigned char 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  2   43[BANK0 ] int 
  1470 ;; Registers used:
  1471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1477 ;;      Params:         0       7       0       0       0       0       0
  1478 ;;      Locals:         0      25       0       0       0       0       0
  1479 ;;      Temps:          0       6       0       0       0       0       0
  1480 ;;      Totals:         0      38       0       0       0       0       0
  1481 ;;Total ram usage:       38 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    7
  1484 ;; This function calls:
  1485 ;;		___awdiv
  1486 ;;		___ftadd
  1487 ;;		___ftge
  1488 ;;		___ftmul
  1489 ;;		___ftneg
  1490 ;;		___ftsub
  1491 ;;		___fttol
  1492 ;;		___lldiv
  1493 ;;		___llmod
  1494 ;;		___lltoft
  1495 ;;		___wmul
  1496 ;;		__div_to_l_
  1497 ;;		__tdiv_to_l_
  1498 ;;		_fround
  1499 ;;		_isdigit
  1500 ;;		_putch
  1501 ;;		_scale
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text1
  1508  0006D0                     __ptext1:
  1509                           	opt stack 0
  1510  0006D0                     _printf:
  1511                           	opt stack 23
  1512                           
  1513                           ;doprnt.c: 466: va_list ap;
  1514                           ;doprnt.c: 499: signed char c;
  1515                           ;doprnt.c: 501: int width;
  1516                           ;doprnt.c: 504: int prec;
  1517                           ;doprnt.c: 508: unsigned short flag;
  1518                           ;doprnt.c: 515: char d;
  1519                           ;doprnt.c: 516: double fval;
  1520                           ;doprnt.c: 517: int exp;
  1521                           ;doprnt.c: 523: union {
  1522                           ;doprnt.c: 524: unsigned long vd;
  1523                           ;doprnt.c: 525: double integ;
  1524                           ;doprnt.c: 526: } tmpval;
  1525                           ;doprnt.c: 528: unsigned long val;
  1526                           ;doprnt.c: 529: unsigned len;
  1527                           ;doprnt.c: 530: const char * cp;
  1528                           ;doprnt.c: 533: *ap = __va_start();
  1529                           
  1530                           ;incstack = 0
  1531  0006D0  0E8D               	movlw	low (?_printf+2)
  1532  0006D2  0100               	movlb	0	; () banked
  1533  0006D4  6F9B               	movwf	printf@ap& (0+255),b
  1534  0006D6  0E00               	movlw	high (?_printf+2)
  1535  0006D8  0100               	movlb	0	; () banked
  1536  0006DA  6F9C               	movwf	(printf@ap+1)& (0+255),b
  1537                           
  1538                           ;doprnt.c: 536: while(c = *f++) {
  1539  0006DC  EF85  F009         	goto	l5475
  1540  0006E0                     l5183:
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;doprnt.c: 538: if(c != '%')
  1544  0006E0  0E25               	movlw	37
  1545  0006E2  0100               	movlb	0	; () banked
  1546  0006E4  19B0               	xorwf	printf@c& (0+255),w,b
  1547  0006E6  B4D8               	btfsc	status,2,c
  1548  0006E8  D006               	goto	l5187
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;doprnt.c: 540: {
  1552                           ;doprnt.c: 541: (putch(c) );
  1553  0006EA  0100               	movlb	0	; () banked
  1554  0006EC  51B0               	movf	printf@c& (0+255),w,b
  1555  0006EE  EC00  F01F         	call	_putch
  1556                           
  1557                           ;doprnt.c: 542: continue;
  1558  0006F2  EF85  F009         	goto	l5475
  1559  0006F6                     l5187:
  1560                           
  1561                           ;doprnt.c: 543: }
  1562                           ;doprnt.c: 546: width = 0;
  1563  0006F6  0E00               	movlw	0
  1564  0006F8  0100               	movlb	0	; () banked
  1565  0006FA  6FAA               	movwf	(printf@width+1)& (0+255),b
  1566  0006FC  0E00               	movlw	0
  1567  0006FE  6FA9               	movwf	printf@width& (0+255),b
  1568                           
  1569                           ;doprnt.c: 548: flag = 0;
  1570  000700  0E00               	movlw	0
  1571  000702  0100               	movlb	0	; () banked
  1572  000704  6FA8               	movwf	(printf@flag+1)& (0+255),b
  1573  000706  0E00               	movlw	0
  1574  000708  6FA7               	movwf	printf@flag& (0+255),b
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;doprnt.c: 551: switch(*f) {
  1578                           
  1579                           ;doprnt.c: 550: for(;;) {
  1580  00070A  D007               	goto	l5193
  1581  00070C                     l5189:
  1582                           
  1583                           ;doprnt.c: 580: flag |= 0x04;
  1584  00070C  0100               	movlb	0	; () banked
  1585  00070E  85A7               	bsf	printf@flag& (0+255),2,b
  1586                           
  1587                           ;doprnt.c: 581: f++;
  1588  000710  0100               	movlb	0	; () banked
  1589  000712  4B8B               	infsnz	printf@f& (0+255),f,b
  1590  000714  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1591                           
  1592                           ;doprnt.c: 582: continue;
  1593  000716  D001               	goto	l5193
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;doprnt.c: 584: }
  1597  000718  D00B               	goto	l5195
  1598  00071A                     l5193:
  1599  00071A  C08B  FFF6         	movff	printf@f,tblptrl
  1600  00071E  C08C  FFF7         	movff	printf@f+1,tblptrh
  1601  000722                     	if	0	;tblptru may be non-zero
  1602  000722                     	endif
  1603  000722                     	if	0	;tblptru may be non-zero
  1604  000722                     	endif
  1605  000722  0008               	tblrd		*
  1606  000724  50F5               	movf	tablat,w,c
  1607                           
  1608                           ; Switch size 1, requested type "space"
  1609                           ; Number of cases is 1, Range of values is 48 to 48
  1610                           ; switch strategies available:
  1611                           ; Name         Instructions Cycles
  1612                           ; simple_byte            4     3 (average)
  1613                           ;	Chosen strategy is simple_byte
  1614  000726  0A30               	xorlw	48	; case 48
  1615  000728  B4D8               	btfsc	status,2,c
  1616  00072A  D7F0               	goto	l5189
  1617                           
  1618                           ;doprnt.c: 585: break;
  1619  00072C  D001               	goto	l5195
  1620                           
  1621                           ;doprnt.c: 586: }
  1622  00072E  D7F5               	goto	l5193
  1623  000730                     l5195:
  1624                           
  1625                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1626  000730  C08B  FFF6         	movff	printf@f,tblptrl
  1627  000734  C08C  FFF7         	movff	printf@f+1,tblptrh
  1628  000738                     	if	0	;tblptru may be non-zero
  1629  000738                     	endif
  1630  000738                     	if	0	;tblptru may be non-zero
  1631  000738                     	endif
  1632  000738  0008               	tblrd		*
  1633  00073A  50F5               	movf	tablat,w,c
  1634  00073C  EC75  F01E         	call	_isdigit
  1635  000740  A0D8               	btfss	status,0,c
  1636  000742  D042               	goto	l5207
  1637                           
  1638                           ;doprnt.c: 598: width = 0;
  1639  000744  0E00               	movlw	0
  1640  000746  0100               	movlb	0	; () banked
  1641  000748  6FAA               	movwf	(printf@width+1)& (0+255),b
  1642  00074A  0E00               	movlw	0
  1643  00074C  6FA9               	movwf	printf@width& (0+255),b
  1644  00074E  D000               	goto	l5199
  1645  000750                     l5199:
  1646                           
  1647                           ;doprnt.c: 600: width *= 10;
  1648  000750  C0A9  F025         	movff	printf@width,___wmul@multiplier
  1649  000754  C0AA  F026         	movff	printf@width+1,___wmul@multiplier+1
  1650  000758  0E00               	movlw	0
  1651  00075A  6E28               	movwf	___wmul@multiplicand+1,c
  1652  00075C  0E0A               	movlw	10
  1653  00075E  6E27               	movwf	___wmul@multiplicand,c
  1654  000760  EC3C  F01E         	call	___wmul	;wreg free
  1655  000764  C025  F0A9         	movff	?___wmul,printf@width
  1656  000768  C026  F0AA         	movff	?___wmul+1,printf@width+1
  1657                           
  1658                           ;doprnt.c: 601: width += *f++ - '0';
  1659  00076C  0ED0               	movlw	208
  1660  00076E  0100               	movlb	0	; () banked
  1661  000770  6F92               	movwf	??_printf& (0+255),b
  1662  000772  0EFF               	movlw	255
  1663  000774  0100               	movlb	0	; () banked
  1664  000776  6F93               	movwf	(??_printf+1)& (0+255),b
  1665  000778  C08B  FFF6         	movff	printf@f,tblptrl
  1666  00077C  C08C  FFF7         	movff	printf@f+1,tblptrh
  1667  000780                     	if	0	;tblptru may be non-zero
  1668  000780                     	endif
  1669  000780                     	if	0	;tblptru may be non-zero
  1670  000780                     	endif
  1671  000780  0008               	tblrd		*
  1672  000782  50F5               	movf	tablat,w,c
  1673  000784  0100               	movlb	0	; () banked
  1674  000786  6F94               	movwf	(??_printf+2)& (0+255),b
  1675  000788  6B95               	clrf	(??_printf+3)& (0+255),b
  1676  00078A  0100               	movlb	0	; () banked
  1677  00078C  5192               	movf	??_printf& (0+255),w,b
  1678  00078E  0100               	movlb	0	; () banked
  1679  000790  2794               	addwf	(??_printf+2)& (0+255),f,b
  1680  000792  0100               	movlb	0	; () banked
  1681  000794  5193               	movf	(??_printf+1)& (0+255),w,b
  1682  000796  0100               	movlb	0	; () banked
  1683  000798  2395               	addwfc	(??_printf+3)& (0+255),f,b
  1684  00079A  0100               	movlb	0	; () banked
  1685  00079C  5194               	movf	(??_printf+2)& (0+255),w,b
  1686  00079E  0100               	movlb	0	; () banked
  1687  0007A0  27A9               	addwf	printf@width& (0+255),f,b
  1688  0007A2  0100               	movlb	0	; () banked
  1689  0007A4  5195               	movf	(??_printf+3)& (0+255),w,b
  1690  0007A6  0100               	movlb	0	; () banked
  1691  0007A8  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  1692                           
  1693                           ; BSR set to: 0
  1694  0007AA  0100               	movlb	0	; () banked
  1695  0007AC  4B8B               	infsnz	printf@f& (0+255),f,b
  1696  0007AE  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1700  0007B0  C08B  FFF6         	movff	printf@f,tblptrl
  1701  0007B4  C08C  FFF7         	movff	printf@f+1,tblptrh
  1702  0007B8                     	if	0	;tblptru may be non-zero
  1703  0007B8                     	endif
  1704  0007B8                     	if	0	;tblptru may be non-zero
  1705  0007B8                     	endif
  1706  0007B8  0008               	tblrd		*
  1707  0007BA  50F5               	movf	tablat,w,c
  1708  0007BC  EC75  F01E         	call	_isdigit
  1709  0007C0  A0D8               	btfss	status,0,c
  1710  0007C2  D002               	goto	l5207
  1711  0007C4  D7C5               	goto	l5199
  1712  0007C6  D000               	goto	l5207
  1713  0007C8                     l5207:
  1714                           
  1715                           ;doprnt.c: 608: }
  1716                           ;doprnt.c: 611: if(*f == '.') {
  1717  0007C8  C08B  FFF6         	movff	printf@f,tblptrl
  1718  0007CC  C08C  FFF7         	movff	printf@f+1,tblptrh
  1719  0007D0                     	if	0	;tblptru may be non-zero
  1720  0007D0                     	endif
  1721  0007D0                     	if	0	;tblptru may be non-zero
  1722  0007D0                     	endif
  1723  0007D0  0008               	tblrd		*
  1724  0007D2  50F5               	movf	tablat,w,c
  1725  0007D4  0A2E               	xorlw	46
  1726  0007D6  A4D8               	btfss	status,2,c
  1727  0007D8  D036               	goto	l5219
  1728                           
  1729                           ;doprnt.c: 612: flag |= 0x4000;
  1730  0007DA  0100               	movlb	0	; () banked
  1731  0007DC  8DA8               	bsf	(printf@flag+1)& (0+255),6,b
  1732                           
  1733                           ;doprnt.c: 613: f++;
  1734  0007DE  0100               	movlb	0	; () banked
  1735  0007E0  4B8B               	infsnz	printf@f& (0+255),f,b
  1736  0007E2  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;doprnt.c: 620: {
  1740                           ;doprnt.c: 621: prec = 0;
  1741  0007E4  0E00               	movlw	0
  1742  0007E6  0100               	movlb	0	; () banked
  1743  0007E8  6FAF               	movwf	(printf@prec+1)& (0+255),b
  1744  0007EA  0E00               	movlw	0
  1745  0007EC  6FAE               	movwf	printf@prec& (0+255),b
  1746                           
  1747                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1748  0007EE  D01F               	goto	l5217
  1749  0007F0                     l5213:
  1750                           
  1751                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1752  0007F0  C0AE  F025         	movff	printf@prec,___wmul@multiplier
  1753  0007F4  C0AF  F026         	movff	printf@prec+1,___wmul@multiplier+1
  1754  0007F8  0E00               	movlw	0
  1755  0007FA  6E28               	movwf	___wmul@multiplicand+1,c
  1756  0007FC  0E0A               	movlw	10
  1757  0007FE  6E27               	movwf	___wmul@multiplicand,c
  1758  000800  EC3C  F01E         	call	___wmul	;wreg free
  1759  000804  C08B  FFF6         	movff	printf@f,tblptrl
  1760  000808  C08C  FFF7         	movff	printf@f+1,tblptrh
  1761  00080C                     	if	0	;tblptru may be non-zero
  1762  00080C                     	endif
  1763  00080C                     	if	0	;tblptru may be non-zero
  1764  00080C                     	endif
  1765  00080C  0008               	tblrd		*
  1766  00080E  50F5               	movf	tablat,w,c
  1767  000810  2625               	addwf	?___wmul,f,c
  1768  000812  0E00               	movlw	0
  1769  000814  2226               	addwfc	?___wmul+1,f,c
  1770  000816  0ED0               	movlw	208
  1771  000818  2425               	addwf	?___wmul,w,c
  1772  00081A  0100               	movlb	0	; () banked
  1773  00081C  6FAE               	movwf	printf@prec& (0+255),b
  1774  00081E  0EFF               	movlw	255
  1775  000820  2026               	addwfc	?___wmul+1,w,c
  1776  000822  0100               	movlb	0	; () banked
  1777  000824  6FAF               	movwf	(printf@prec+1)& (0+255),b
  1778                           
  1779                           ; BSR set to: 0
  1780  000826  0100               	movlb	0	; () banked
  1781  000828  4B8B               	infsnz	printf@f& (0+255),f,b
  1782  00082A  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1783  00082C  D000               	goto	l5217
  1784  00082E                     l5217:
  1785                           
  1786                           ; BSR set to: 0
  1787  00082E  C08B  FFF6         	movff	printf@f,tblptrl
  1788  000832  C08C  FFF7         	movff	printf@f+1,tblptrh
  1789  000836                     	if	0	;tblptru may be non-zero
  1790  000836                     	endif
  1791  000836                     	if	0	;tblptru may be non-zero
  1792  000836                     	endif
  1793  000836  0008               	tblrd		*
  1794  000838  50F5               	movf	tablat,w,c
  1795  00083A  EC75  F01E         	call	_isdigit
  1796  00083E  A0D8               	btfss	status,0,c
  1797  000840  D011               	goto	l5227
  1798  000842  D7D6               	goto	l5213
  1799                           
  1800                           ;doprnt.c: 624: }
  1801                           ;doprnt.c: 625: } else {
  1802  000844  D00F               	goto	l5227
  1803  000846                     l5219:
  1804                           
  1805                           ;doprnt.c: 626: prec = 0;
  1806  000846  0E00               	movlw	0
  1807  000848  0100               	movlb	0	; () banked
  1808  00084A  6FAF               	movwf	(printf@prec+1)& (0+255),b
  1809  00084C  0E00               	movlw	0
  1810  00084E  6FAE               	movwf	printf@prec& (0+255),b
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;doprnt.c: 628: flag |= 0x1000;
  1814  000850  0100               	movlb	0	; () banked
  1815  000852  89A8               	bsf	(printf@flag+1)& (0+255),4,b
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;doprnt.c: 630: }
  1819                           ;doprnt.c: 635: switch(c = *f++) {
  1820  000854  D007               	goto	l5227
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 638: goto alldone;
  1824                           
  1825                           ;doprnt.c: 637: case 0:
  1826  000856  0012               	return	
  1827  000858                     l5223:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;doprnt.c: 663: flag |= 0x400;
  1831  000858  0100               	movlb	0	; () banked
  1832  00085A  85A8               	bsf	(printf@flag+1)& (0+255),2,b
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;doprnt.c: 698: case 'i':
  1836                           ;doprnt.c: 699: break;
  1837                           
  1838                           ; BSR set to: 0
  1839                           
  1840                           ;doprnt.c: 697: case 'd':
  1841                           
  1842                           ;doprnt.c: 664: break;
  1843  00085C  D01C               	goto	l5229
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;doprnt.c: 813: continue;
  1847                           
  1848                           ;doprnt.c: 802: default:
  1849  00085E  EF85  F009         	goto	l5475
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;doprnt.c: 822: }
  1853  000862  D019               	goto	l5229
  1854  000864                     l5227:
  1855  000864  C08B  FFF6         	movff	printf@f,tblptrl
  1856  000868  C08C  FFF7         	movff	printf@f+1,tblptrh
  1857  00086C  0100               	movlb	0	; () banked
  1858  00086E  4B8B               	infsnz	printf@f& (0+255),f,b
  1859  000870  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1860  000872                     	if	0	;tblptru may be non-zero
  1861  000872                     	endif
  1862  000872                     	if	0	;tblptru may be non-zero
  1863  000872                     	endif
  1864  000872  0008               	tblrd		*
  1865  000874  CFF5 F0B0          	movff	tablat,printf@c
  1866  000878  0100               	movlb	0	; () banked
  1867  00087A  51B0               	movf	printf@c& (0+255),w,b
  1868                           
  1869                           ; Switch size 1, requested type "space"
  1870                           ; Number of cases is 4, Range of values is 0 to 105
  1871                           ; switch strategies available:
  1872                           ; Name         Instructions Cycles
  1873                           ; simple_byte           13     7 (average)
  1874                           ;	Chosen strategy is simple_byte
  1875  00087C  0A00               	xorlw	0	; case 0
  1876  00087E  B4D8               	btfsc	status,2,c
  1877  000880  0012               	return	
  1878  000882  0A64               	xorlw	100	; case 100
  1879  000884  B4D8               	btfsc	status,2,c
  1880  000886  D007               	goto	l5229
  1881  000888  0A02               	xorlw	2	; case 102
  1882  00088A  B4D8               	btfsc	status,2,c
  1883  00088C  D7E5               	goto	l5223
  1884  00088E  0A0F               	xorlw	15	; case 105
  1885  000890  A4D8               	btfss	status,2,c
  1886  000892  EF85  F009         	goto	l5475
  1887  000896                     l5229:
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;doprnt.c: 825: if(flag & (0x700)) {
  1891  000896  0E07               	movlw	7
  1892  000898  0100               	movlb	0	; () banked
  1893  00089A  15A8               	andwf	(printf@flag+1)& (0+255),w,b
  1894  00089C  B4D8               	btfsc	status,2,c
  1895  00089E  D3A2               	goto	l5389
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;doprnt.c: 827: if(flag & 0x1000)
  1899  0008A0  0100               	movlb	0	; () banked
  1900  0008A2  A9A8               	btfss	(printf@flag+1)& (0+255),4,b
  1901  0008A4  D006               	goto	l5235
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;doprnt.c: 829: prec = 6;
  1905  0008A6  0E00               	movlw	0
  1906  0008A8  0100               	movlb	0	; () banked
  1907  0008AA  6FAF               	movwf	(printf@prec+1)& (0+255),b
  1908  0008AC  0E06               	movlw	6
  1909  0008AE  6FAE               	movwf	printf@prec& (0+255),b
  1910  0008B0  D000               	goto	l5235
  1911  0008B2                     l5235:
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1915  0008B2  C09B  FFD9         	movff	printf@ap,fsr2l
  1916  0008B6  C09C  FFDA         	movff	printf@ap+1,fsr2h
  1917  0008BA  CFDE F0AB          	movff	postinc2,printf@fval
  1918  0008BE  CFDE F0AC          	movff	postinc2,printf@fval+1
  1919  0008C2  CFDD F0AD          	movff	postdec2,printf@fval+2
  1920                           
  1921                           ; BSR set to: 0
  1922  0008C6  0E03               	movlw	3
  1923  0008C8  0100               	movlb	0	; () banked
  1924  0008CA  279B               	addwf	printf@ap& (0+255),f,b
  1925  0008CC  0E00               	movlw	0
  1926  0008CE  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;doprnt.c: 831: if(fval < 0.0) {
  1930  0008D0  0100               	movlb	0	; () banked
  1931  0008D2  AFAD               	btfss	(printf@fval+2)& (0+255),7,b
  1932  0008D4  D012               	goto	l5245
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;doprnt.c: 832: fval = -fval;
  1936  0008D6  C0AB  F017         	movff	printf@fval,___ftneg@f1
  1937  0008DA  C0AC  F018         	movff	printf@fval+1,___ftneg@f1+1
  1938  0008DE  C0AD  F019         	movff	printf@fval+2,___ftneg@f1+2
  1939  0008E2  EC63  F01E         	call	___ftneg	;wreg free
  1940  0008E6  C017  F0AB         	movff	?___ftneg,printf@fval
  1941  0008EA  C018  F0AC         	movff	?___ftneg+1,printf@fval+1
  1942  0008EE  C019  F0AD         	movff	?___ftneg+2,printf@fval+2
  1943                           
  1944                           ;doprnt.c: 833: flag |= 0x03;
  1945  0008F2  0E03               	movlw	3
  1946  0008F4  0100               	movlb	0	; () banked
  1947  0008F6  13A7               	iorwf	printf@flag& (0+255),f,b
  1948  0008F8  D000               	goto	l5245
  1949  0008FA                     l5245:
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;doprnt.c: 834: }
  1953                           ;doprnt.c: 835: exp = 0;
  1954  0008FA  0E00               	movlw	0
  1955  0008FC  0100               	movlb	0	; () banked
  1956  0008FE  6FA6               	movwf	(printf@exp+1)& (0+255),b
  1957  000900  0E00               	movlw	0
  1958  000902  6FA5               	movwf	printf@exp& (0+255),b
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;doprnt.c: 836: if( fval!=0) {
  1962  000904  0100               	movlb	0	; () banked
  1963  000906  51AB               	movf	printf@fval& (0+255),w,b
  1964  000908  0100               	movlb	0	; () banked
  1965  00090A  11AC               	iorwf	(printf@fval+1)& (0+255),w,b
  1966  00090C  0100               	movlb	0	; () banked
  1967  00090E  11AD               	iorwf	(printf@fval+2)& (0+255),w,b
  1968  000910  B4D8               	btfsc	status,2,c
  1969  000912  D093               	goto	l5273
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1973  000914  0E82               	movlw	130
  1974  000916  0100               	movlb	0	; () banked
  1975  000918  6F92               	movwf	??_printf& (0+255),b
  1976  00091A  0EFF               	movlw	255
  1977  00091C  0100               	movlb	0	; () banked
  1978  00091E  6F93               	movwf	(??_printf+1)& (0+255),b
  1979  000920  C0AB  F094         	movff	printf@fval,??_printf+2
  1980  000924  C0AC  F095         	movff	printf@fval+1,??_printf+3
  1981  000928  C0AD  F096         	movff	printf@fval+2,??_printf+4
  1982  00092C  C0AE  F097         	movff	printf@fval+3,??_printf+5
  1983  000930  0E10               	movlw	16
  1984  000932  D006               	goto	u5460
  1985  000934                     u5465:
  1986  000934  0100               	movlb	0	; () banked
  1987  000936  90D8               	bcf	status,0,c
  1988  000938  3397               	rrcf	(??_printf+5)& (0+255),f,b
  1989  00093A  3396               	rrcf	(??_printf+4)& (0+255),f,b
  1990  00093C  3395               	rrcf	(??_printf+3)& (0+255),f,b
  1991  00093E  3394               	rrcf	(??_printf+2)& (0+255),f,b
  1992  000940                     u5460:
  1993  000940  2EE8               	decfsz	wreg,f,c
  1994  000942  D7F8               	goto	u5465
  1995  000944  0100               	movlb	0	; () banked
  1996  000946  5194               	movf	(??_printf+2)& (0+255),w,b
  1997  000948  0100               	movlb	0	; () banked
  1998  00094A  2592               	addwf	??_printf& (0+255),w,b
  1999  00094C  0100               	movlb	0	; () banked
  2000  00094E  6FA5               	movwf	printf@exp& (0+255),b
  2001  000950  0E00               	movlw	0
  2002  000952  0100               	movlb	0	; () banked
  2003  000954  2193               	addwfc	(??_printf+1)& (0+255),w,b
  2004  000956  0100               	movlb	0	; () banked
  2005  000958  6FA6               	movwf	(printf@exp+1)& (0+255),b
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;doprnt.c: 838: exp--;
  2009  00095A  0100               	movlb	0	; () banked
  2010  00095C  07A5               	decf	printf@exp& (0+255),f,b
  2011  00095E  A0D8               	btfss	status,0,c
  2012  000960  07A6               	decf	(printf@exp+1)& (0+255),f,b
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;doprnt.c: 839: exp *= 3;
  2016  000962  C0A5  F025         	movff	printf@exp,___wmul@multiplier
  2017  000966  C0A6  F026         	movff	printf@exp+1,___wmul@multiplier+1
  2018  00096A  0E00               	movlw	0
  2019  00096C  6E28               	movwf	___wmul@multiplicand+1,c
  2020  00096E  0E03               	movlw	3
  2021  000970  6E27               	movwf	___wmul@multiplicand,c
  2022  000972  EC3C  F01E         	call	___wmul	;wreg free
  2023  000976  C025  F0A5         	movff	?___wmul,printf@exp
  2024  00097A  C026  F0A6         	movff	?___wmul+1,printf@exp+1
  2025                           
  2026                           ;doprnt.c: 840: exp /= 10;
  2027  00097E  C0A5  F01D         	movff	printf@exp,___awdiv@dividend
  2028  000982  C0A6  F01E         	movff	printf@exp+1,___awdiv@dividend+1
  2029  000986  0E00               	movlw	0
  2030  000988  6E20               	movwf	___awdiv@divisor+1,c
  2031  00098A  0E0A               	movlw	10
  2032  00098C  6E1F               	movwf	___awdiv@divisor,c
  2033  00098E  EC33  F01B         	call	___awdiv	;wreg free
  2034  000992  C01D  F0A5         	movff	?___awdiv,printf@exp
  2035  000996  C01E  F0A6         	movff	?___awdiv+1,printf@exp+1
  2036                           
  2037                           ;doprnt.c: 841: if(exp < 0)
  2038  00099A  0100               	movlb	0	; () banked
  2039  00099C  AFA6               	btfss	(printf@exp+1)& (0+255),7,b
  2040  00099E  D005               	goto	l5261
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;doprnt.c: 842: exp--;
  2044  0009A0  0100               	movlb	0	; () banked
  2045  0009A2  07A5               	decf	printf@exp& (0+255),f,b
  2046  0009A4  A0D8               	btfss	status,0,c
  2047  0009A6  07A6               	decf	(printf@exp+1)& (0+255),f,b
  2048  0009A8  D000               	goto	l5261
  2049  0009AA                     l5261:
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2053  0009AA  0100               	movlb	0	; () banked
  2054  0009AC  51A5               	movf	printf@exp& (0+255),w,b
  2055  0009AE  0800               	sublw	0
  2056  0009B0  EC0C  F00C         	call	_scale
  2057  0009B4  C06F  F09D         	movff	?_scale,printf@tmpval
  2058  0009B8  C070  F09E         	movff	?_scale+1,printf@tmpval+1
  2059  0009BC  C071  F09F         	movff	?_scale+2,printf@tmpval+2
  2060                           
  2061                           ;doprnt.c: 847: tmpval.integ *= fval;
  2062  0009C0  C09D  F060         	movff	printf@tmpval,___ftmul@f1
  2063  0009C4  C09E  F061         	movff	printf@tmpval+1,___ftmul@f1+1
  2064  0009C8  C09F  F062         	movff	printf@tmpval+2,___ftmul@f1+2
  2065  0009CC  C0AB  F063         	movff	printf@fval,___ftmul@f2
  2066  0009D0  C0AC  F064         	movff	printf@fval+1,___ftmul@f2+1
  2067  0009D4  C0AD  F065         	movff	printf@fval+2,___ftmul@f2+2
  2068  0009D8  ECCB  F014         	call	___ftmul	;wreg free
  2069  0009DC  C060  F09D         	movff	?___ftmul,printf@tmpval
  2070  0009E0  C061  F09E         	movff	?___ftmul+1,printf@tmpval+1
  2071  0009E4  C062  F09F         	movff	?___ftmul+2,printf@tmpval+2
  2072                           
  2073                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2074  0009E8  C09D  F02B         	movff	printf@tmpval,___ftge@ff1
  2075  0009EC  C09E  F02C         	movff	printf@tmpval+1,___ftge@ff1+1
  2076  0009F0  C09F  F02D         	movff	printf@tmpval+2,___ftge@ff1+2
  2077  0009F4  0E00               	movlw	0
  2078  0009F6  6E2E               	movwf	___ftge@ff2,c
  2079  0009F8  0E80               	movlw	128
  2080  0009FA  6E2F               	movwf	___ftge@ff2+1,c
  2081  0009FC  0E3F               	movlw	63
  2082  0009FE  6E30               	movwf	___ftge@ff2+2,c
  2083  000A00  EC7E  F01B         	call	___ftge	;wreg free
  2084  000A04  B0D8               	btfsc	status,0,c
  2085  000A06  D005               	goto	l5269
  2086                           
  2087                           ;doprnt.c: 849: exp--;
  2088  000A08  0100               	movlb	0	; () banked
  2089  000A0A  07A5               	decf	printf@exp& (0+255),f,b
  2090  000A0C  A0D8               	btfss	status,0,c
  2091  000A0E  07A6               	decf	(printf@exp+1)& (0+255),f,b
  2092  000A10  D014               	goto	l5273
  2093  000A12                     l5269:
  2094                           
  2095                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2096  000A12  C09D  F02B         	movff	printf@tmpval,___ftge@ff1
  2097  000A16  C09E  F02C         	movff	printf@tmpval+1,___ftge@ff1+1
  2098  000A1A  C09F  F02D         	movff	printf@tmpval+2,___ftge@ff1+2
  2099  000A1E  0E00               	movlw	0
  2100  000A20  6E2E               	movwf	___ftge@ff2,c
  2101  000A22  0E20               	movlw	32
  2102  000A24  6E2F               	movwf	___ftge@ff2+1,c
  2103  000A26  0E41               	movlw	65
  2104  000A28  6E30               	movwf	___ftge@ff2+2,c
  2105  000A2A  EC7E  F01B         	call	___ftge	;wreg free
  2106  000A2E  A0D8               	btfss	status,0,c
  2107  000A30  D004               	goto	l5273
  2108                           
  2109                           ;doprnt.c: 851: exp++;
  2110  000A32  0100               	movlb	0	; () banked
  2111  000A34  4BA5               	infsnz	printf@exp& (0+255),f,b
  2112  000A36  2BA6               	incf	(printf@exp+1)& (0+255),f,b
  2113                           
  2114                           ; BSR set to: 0
  2115                           
  2116                           ; BSR set to: 0
  2117  000A38  D000               	goto	l5273
  2118  000A3A                     l5273:
  2119                           
  2120                           ;doprnt.c: 852: }
  2121                           ;doprnt.c: 1112: if(prec <= 12)
  2122  000A3A  0100               	movlb	0	; () banked
  2123  000A3C  BFAF               	btfsc	(printf@prec+1)& (0+255),7,b
  2124  000A3E  D008               	goto	l5275
  2125  000A40  0100               	movlb	0	; () banked
  2126  000A42  51AF               	movf	(printf@prec+1)& (0+255),w,b
  2127  000A44  E11E               	bnz	l5277
  2128  000A46  0E0D               	movlw	13
  2129  000A48  0100               	movlb	0	; () banked
  2130  000A4A  5DAE               	subwf	printf@prec& (0+255),w,b
  2131  000A4C  B0D8               	btfsc	status,0,c
  2132  000A4E  D019               	goto	l5277
  2133  000A50                     l5275:
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;doprnt.c: 1113: fval += fround(prec);
  2137  000A50  C0AB  F079         	movff	printf@fval,___ftadd@f1
  2138  000A54  C0AC  F07A         	movff	printf@fval+1,___ftadd@f1+1
  2139  000A58  C0AD  F07B         	movff	printf@fval+2,___ftadd@f1+2
  2140  000A5C  0100               	movlb	0	; () banked
  2141  000A5E  51AE               	movf	printf@prec& (0+255),w,b
  2142  000A60  EC5D  F00F         	call	_fround
  2143  000A64  C06F  F07C         	movff	?_fround,___ftadd@f2
  2144  000A68  C070  F07D         	movff	?_fround+1,___ftadd@f2+1
  2145  000A6C  C071  F07E         	movff	?_fround+2,___ftadd@f2+2
  2146  000A70  EC1E  F00E         	call	___ftadd	;wreg free
  2147  000A74  C079  F0AB         	movff	?___ftadd,printf@fval
  2148  000A78  C07A  F0AC         	movff	?___ftadd+1,printf@fval+1
  2149  000A7C  C07B  F0AD         	movff	?___ftadd+2,printf@fval+2
  2150  000A80  D000               	goto	l5277
  2151  000A82                     l5277:
  2152                           
  2153                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2154  000A82  0100               	movlb	0	; () banked
  2155  000A84  BFA6               	btfsc	(printf@exp+1)& (0+255),7,b
  2156  000A86  D008               	goto	l5279
  2157  000A88  0100               	movlb	0	; () banked
  2158  000A8A  51A6               	movf	(printf@exp+1)& (0+255),w,b
  2159  000A8C  E12C               	bnz	l5285
  2160  000A8E  0E0A               	movlw	10
  2161  000A90  0100               	movlb	0	; () banked
  2162  000A92  5DA5               	subwf	printf@exp& (0+255),w,b
  2163  000A94  B0D8               	btfsc	status,0,c
  2164  000A96  D027               	goto	l5285
  2165  000A98                     l5279:
  2166                           
  2167                           ; BSR set to: 0
  2168  000A98  0100               	movlb	0	; () banked
  2169  000A9A  51AB               	movf	printf@fval& (0+255),w,b
  2170  000A9C  0100               	movlb	0	; () banked
  2171  000A9E  11AC               	iorwf	(printf@fval+1)& (0+255),w,b
  2172  000AA0  0100               	movlb	0	; () banked
  2173  000AA2  11AD               	iorwf	(printf@fval+2)& (0+255),w,b
  2174  000AA4  B4D8               	btfsc	status,2,c
  2175  000AA6  D07B               	goto	l5299
  2176                           
  2177                           ; BSR set to: 0
  2178  000AA8  C0AB  F076         	movff	printf@fval,___fttol@f1
  2179  000AAC  C0AC  F077         	movff	printf@fval+1,___fttol@f1+1
  2180  000AB0  C0AD  F078         	movff	printf@fval+2,___fttol@f1+2
  2181  000AB4  EC81  F015         	call	___fttol	;wreg free
  2182  000AB8  0100               	movlb	0	; () banked
  2183  000ABA  5176               	movf	?___fttol& (0+255),w,b
  2184  000ABC  0100               	movlb	0	; () banked
  2185  000ABE  1177               	iorwf	(?___fttol+1)& (0+255),w,b
  2186  000AC0  0100               	movlb	0	; () banked
  2187  000AC2  1178               	iorwf	(?___fttol+2)& (0+255),w,b
  2188  000AC4  0100               	movlb	0	; () banked
  2189  000AC6  1179               	iorwf	(?___fttol+3)& (0+255),w,b
  2190  000AC8  A4D8               	btfss	status,2,c
  2191  000ACA  D069               	goto	l5299
  2192                           
  2193                           ; BSR set to: 0
  2194  000ACC  0100               	movlb	0	; () banked
  2195  000ACE  BFA6               	btfsc	(printf@exp+1)& (0+255),7,b
  2196  000AD0  D066               	goto	l5299
  2197  000AD2  0100               	movlb	0	; () banked
  2198  000AD4  51A6               	movf	(printf@exp+1)& (0+255),w,b
  2199  000AD6  E107               	bnz	l5285
  2200  000AD8  0E02               	movlw	2
  2201  000ADA  0100               	movlb	0	; () banked
  2202  000ADC  5DA5               	subwf	printf@exp& (0+255),w,b
  2203  000ADE  B0D8               	btfsc	status,0,c
  2204  000AE0  D002               	goto	l5285
  2205  000AE2  D05D               	goto	l5299
  2206  000AE4  D000               	goto	l5285
  2207  000AE6                     l5285:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2211  000AE6  C09D  F02B         	movff	printf@tmpval,___ftge@ff1
  2212  000AEA  C09E  F02C         	movff	printf@tmpval+1,___ftge@ff1+1
  2213  000AEE  C09F  F02D         	movff	printf@tmpval+2,___ftge@ff1+2
  2214  000AF2  0E70               	movlw	112
  2215  000AF4  6E2E               	movwf	___ftge@ff2,c
  2216  000AF6  0E89               	movlw	137
  2217  000AF8  6E2F               	movwf	___ftge@ff2+1,c
  2218  000AFA  0E40               	movlw	64
  2219  000AFC  6E30               	movwf	___ftge@ff2+2,c
  2220  000AFE  EC7E  F01B         	call	___ftge	;wreg free
  2221  000B02  B0D8               	btfsc	status,0,c
  2222  000B04  D003               	goto	l5289
  2223                           
  2224                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2225  000B06  0100               	movlb	0	; () banked
  2226  000B08  0EF7               	movlw	247
  2227  000B0A  D002               	goto	L1
  2228  000B0C                     l5289:
  2229                           
  2230                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2231  000B0C  0100               	movlb	0	; () banked
  2232  000B0E  0EF8               	movlw	248
  2233  000B10                     L1:
  2234  000B10  27A5               	addwf	printf@exp& (0+255),f,b
  2235  000B12  0EFF               	movlw	255
  2236  000B14  23A6               	addwfc	(printf@exp+1)& (0+255),f,b
  2237  000B16  D000               	goto	l5291
  2238  000B18                     l5291:
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;doprnt.c: 1124: }
  2242                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2243  000B18  0100               	movlb	0	; () banked
  2244  000B1A  51A5               	movf	printf@exp& (0+255),w,b
  2245  000B1C  EC0C  F00C         	call	_scale
  2246  000B20  C06F  F09D         	movff	?_scale,printf@tmpval
  2247  000B24  C070  F09E         	movff	?_scale+1,printf@tmpval+1
  2248  000B28  C071  F09F         	movff	?_scale+2,printf@tmpval+2
  2249                           
  2250                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2251  000B2C  D017               	goto	l5295
  2252  000B2E  C0AB  F017         	movff	printf@fval,__div_to_l_@f1
  2253  000B32  C0AC  F018         	movff	printf@fval+1,__div_to_l_@f1+1
  2254  000B36  C0AD  F019         	movff	printf@fval+2,__div_to_l_@f1+2
  2255  000B3A  C09D  F01A         	movff	printf@tmpval,__div_to_l_@f2
  2256  000B3E  C09E  F01B         	movff	printf@tmpval+1,__div_to_l_@f2+1
  2257  000B42  C09F  F01C         	movff	printf@tmpval+2,__div_to_l_@f2+2
  2258  000B46  EC6E  F017         	call	__div_to_l_	;wreg free
  2259  000B4A  C017  F0A1         	movff	?__div_to_l_,printf@val
  2260  000B4E  C018  F0A2         	movff	?__div_to_l_+1,printf@val+1
  2261  000B52  C019  F0A3         	movff	?__div_to_l_+2,printf@val+2
  2262  000B56  C01A  F0A4         	movff	?__div_to_l_+3,printf@val+3
  2263  000B5A  D017               	goto	l5297
  2264  000B5C                     l5295:
  2265  000B5C  C0AB  F017         	movff	printf@fval,__tdiv_to_l_@f1
  2266  000B60  C0AC  F018         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2267  000B64  C0AD  F019         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2268  000B68  C09D  F01A         	movff	printf@tmpval,__tdiv_to_l_@f2
  2269  000B6C  C09E  F01B         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2270  000B70  C09F  F01C         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2271  000B74  ECD1  F016         	call	__tdiv_to_l_	;wreg free
  2272  000B78  C017  F0A1         	movff	?__tdiv_to_l_,printf@val
  2273  000B7C  C018  F0A2         	movff	?__tdiv_to_l_+1,printf@val+1
  2274  000B80  C019  F0A3         	movff	?__tdiv_to_l_+2,printf@val+2
  2275  000B84  C01A  F0A4         	movff	?__tdiv_to_l_+3,printf@val+3
  2276  000B88  D000               	goto	l5297
  2277  000B8A                     l5297:
  2278                           
  2279                           ;doprnt.c: 1129: fval = 0.0;
  2280  000B8A  0E00               	movlw	0
  2281  000B8C  0100               	movlb	0	; () banked
  2282  000B8E  6FAB               	movwf	printf@fval& (0+255),b
  2283  000B90  0E00               	movlw	0
  2284  000B92  0100               	movlb	0	; () banked
  2285  000B94  6FAC               	movwf	(printf@fval+1)& (0+255),b
  2286  000B96  0E00               	movlw	0
  2287  000B98  0100               	movlb	0	; () banked
  2288  000B9A  6FAD               	movwf	(printf@fval+2)& (0+255),b
  2289                           
  2290                           ;doprnt.c: 1130: } else {
  2291  000B9C  D034               	goto	l5303
  2292  000B9E                     l5299:
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2296  000B9E  C0AB  F076         	movff	printf@fval,___fttol@f1
  2297  000BA2  C0AC  F077         	movff	printf@fval+1,___fttol@f1+1
  2298  000BA6  C0AD  F078         	movff	printf@fval+2,___fttol@f1+2
  2299  000BAA  EC81  F015         	call	___fttol	;wreg free
  2300  000BAE  C076  F0A1         	movff	?___fttol,printf@val
  2301  000BB2  C077  F0A2         	movff	?___fttol+1,printf@val+1
  2302  000BB6  C078  F0A3         	movff	?___fttol+2,printf@val+2
  2303  000BBA  C079  F0A4         	movff	?___fttol+3,printf@val+3
  2304                           
  2305                           ;doprnt.c: 1132: fval -= (double)val;
  2306  000BBE  C0AB  F085         	movff	printf@fval,___ftsub@f1
  2307  000BC2  C0AC  F086         	movff	printf@fval+1,___ftsub@f1+1
  2308  000BC6  C0AD  F087         	movff	printf@fval+2,___ftsub@f1+2
  2309  000BCA  C0A1  F01F         	movff	printf@val,___lltoft@c
  2310  000BCE  C0A2  F020         	movff	printf@val+1,___lltoft@c+1
  2311  000BD2  C0A3  F021         	movff	printf@val+2,___lltoft@c+2
  2312  000BD6  C0A4  F022         	movff	printf@val+3,___lltoft@c+3
  2313  000BDA  EC09  F01D         	call	___lltoft	;wreg free
  2314  000BDE  C01F  F088         	movff	?___lltoft,___ftsub@f2
  2315  000BE2  C020  F089         	movff	?___lltoft+1,___ftsub@f2+1
  2316  000BE6  C021  F08A         	movff	?___lltoft+2,___ftsub@f2+2
  2317  000BEA  EC65  F01D         	call	___ftsub	;wreg free
  2318  000BEE  C085  F0AB         	movff	?___ftsub,printf@fval
  2319  000BF2  C086  F0AC         	movff	?___ftsub+1,printf@fval+1
  2320  000BF6  C087  F0AD         	movff	?___ftsub+2,printf@fval+2
  2321                           
  2322                           ;doprnt.c: 1133: exp = 0;
  2323  000BFA  0E00               	movlw	0
  2324  000BFC  0100               	movlb	0	; () banked
  2325  000BFE  6FA6               	movwf	(printf@exp+1)& (0+255),b
  2326  000C00  0E00               	movlw	0
  2327  000C02  6FA5               	movwf	printf@exp& (0+255),b
  2328  000C04  D000               	goto	l5303
  2329  000C06                     l5303:
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;doprnt.c: 1134: }
  2333                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2334  000C06  0E01               	movlw	1
  2335  000C08  0100               	movlb	0	; () banked
  2336  000C0A  6FB0               	movwf	printf@c& (0+255),b
  2337  000C0C                     l5305:
  2338                           
  2339                           ; BSR set to: 0
  2340  000C0C  0E0A               	movlw	10
  2341  000C0E  0100               	movlb	0	; () banked
  2342  000C10  19B0               	xorwf	printf@c& (0+255),w,b
  2343  000C12  B4D8               	btfsc	status,2,c
  2344  000C14  D022               	goto	l5317
  2345  000C16  D001               	goto	l5309
  2346                           
  2347                           ; BSR set to: 0
  2348  000C18  D020               	goto	l5317
  2349  000C1A                     l5309:
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;doprnt.c: 1137: if(val < dpowers[c])
  2353  000C1A  0100               	movlb	0	; () banked
  2354  000C1C  51B0               	movf	printf@c& (0+255),w,b
  2355  000C1E  0D04               	mullw	4
  2356  000C20  0E01               	movlw	low _dpowers
  2357  000C22  24F3               	addwf	prodl,w,c
  2358  000C24  6EF6               	movwf	tblptrl,c
  2359  000C26  0E06               	movlw	high _dpowers
  2360  000C28  20F4               	addwfc	prodh,w,c
  2361  000C2A  6EF7               	movwf	tblptrh,c
  2362  000C2C                     	if	0	;There are less than 3 active tblptr bytes
  2363  000C2C                     	endif
  2364  000C2C  0009               	tblrd		*+
  2365  000C2E  50F5               	movf	tablat,w,c
  2366  000C30  0100               	movlb	0	; () banked
  2367  000C32  5DA1               	subwf	printf@val& (0+255),w,b
  2368  000C34  0009               	tblrd		*+
  2369  000C36  50F5               	movf	tablat,w,c
  2370  000C38  0100               	movlb	0	; () banked
  2371  000C3A  59A2               	subwfb	(printf@val+1)& (0+255),w,b
  2372  000C3C  0009               	tblrd		*+
  2373  000C3E  50F5               	movf	tablat,w,c
  2374  000C40  0100               	movlb	0	; () banked
  2375  000C42  59A3               	subwfb	(printf@val+2)& (0+255),w,b
  2376  000C44  0009               	tblrd		*+
  2377  000C46  50F5               	movf	tablat,w,c
  2378  000C48  0100               	movlb	0	; () banked
  2379  000C4A  59A4               	subwfb	(printf@val+3)& (0+255),w,b
  2380  000C4C  A0D8               	btfss	status,0,c
  2381  000C4E  D005               	goto	l5317
  2382  000C50  D001               	goto	l5313
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;doprnt.c: 1138: break;
  2386  000C52  D003               	goto	l5317
  2387  000C54                     l5313:
  2388                           
  2389                           ; BSR set to: 0
  2390  000C54  0100               	movlb	0	; () banked
  2391  000C56  2BB0               	incf	printf@c& (0+255),f,b
  2392  000C58  D7D9               	goto	l5305
  2393  000C5A                     l5317:
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;doprnt.c: 1142: width -= prec + c + exp;
  2397  000C5A  C0B0  F092         	movff	printf@c,??_printf
  2398  000C5E  0100               	movlb	0	; () banked
  2399  000C60  6B93               	clrf	(??_printf+1)& (0+255),b
  2400  000C62  BF92               	btfsc	??_printf& (0+255),7,b
  2401  000C64  0793               	decf	(??_printf+1)& (0+255),f,b
  2402  000C66  0100               	movlb	0	; () banked
  2403  000C68  51AE               	movf	printf@prec& (0+255),w,b
  2404  000C6A  0100               	movlb	0	; () banked
  2405  000C6C  2792               	addwf	??_printf& (0+255),f,b
  2406  000C6E  0100               	movlb	0	; () banked
  2407  000C70  51AF               	movf	(printf@prec+1)& (0+255),w,b
  2408  000C72  0100               	movlb	0	; () banked
  2409  000C74  2393               	addwfc	(??_printf+1)& (0+255),f,b
  2410  000C76  0100               	movlb	0	; () banked
  2411  000C78  51A5               	movf	printf@exp& (0+255),w,b
  2412  000C7A  0100               	movlb	0	; () banked
  2413  000C7C  2792               	addwf	??_printf& (0+255),f,b
  2414  000C7E  0100               	movlb	0	; () banked
  2415  000C80  51A6               	movf	(printf@exp+1)& (0+255),w,b
  2416  000C82  0100               	movlb	0	; () banked
  2417  000C84  2393               	addwfc	(??_printf+1)& (0+255),f,b
  2418  000C86  0100               	movlb	0	; () banked
  2419  000C88  5192               	movf	??_printf& (0+255),w,b
  2420  000C8A  0100               	movlb	0	; () banked
  2421  000C8C  5FA9               	subwf	printf@width& (0+255),f,b
  2422  000C8E  0100               	movlb	0	; () banked
  2423  000C90  5193               	movf	(??_printf+1)& (0+255),w,b
  2424  000C92  0100               	movlb	0	; () banked
  2425  000C94  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  2426                           
  2427                           ;doprnt.c: 1143: if(
  2428                           ;doprnt.c: 1147: prec)
  2429  000C96  0100               	movlb	0	; () banked
  2430  000C98  51AE               	movf	printf@prec& (0+255),w,b
  2431  000C9A  0100               	movlb	0	; () banked
  2432  000C9C  11AF               	iorwf	(printf@prec+1)& (0+255),w,b
  2433  000C9E  B4D8               	btfsc	status,2,c
  2434  000CA0  D005               	goto	l5321
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;doprnt.c: 1148: width--;
  2438  000CA2  0100               	movlb	0	; () banked
  2439  000CA4  07A9               	decf	printf@width& (0+255),f,b
  2440  000CA6  A0D8               	btfss	status,0,c
  2441  000CA8  07AA               	decf	(printf@width+1)& (0+255),f,b
  2442  000CAA  D000               	goto	l5321
  2443  000CAC                     l5321:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;doprnt.c: 1149: if(flag & 0x03)
  2447  000CAC  0E03               	movlw	3
  2448  000CAE  0100               	movlb	0	; () banked
  2449  000CB0  15A7               	andwf	printf@flag& (0+255),w,b
  2450  000CB2  0100               	movlb	0	; () banked
  2451  000CB4  6F92               	movwf	??_printf& (0+255),b
  2452  000CB6  0E00               	movlw	0
  2453  000CB8  0100               	movlb	0	; () banked
  2454  000CBA  15A8               	andwf	(printf@flag+1)& (0+255),w,b
  2455  000CBC  0100               	movlb	0	; () banked
  2456  000CBE  6F93               	movwf	(??_printf+1)& (0+255),b
  2457  000CC0  0100               	movlb	0	; () banked
  2458  000CC2  5192               	movf	??_printf& (0+255),w,b
  2459  000CC4  0100               	movlb	0	; () banked
  2460  000CC6  1193               	iorwf	(??_printf+1)& (0+255),w,b
  2461  000CC8  B4D8               	btfsc	status,2,c
  2462  000CCA  D005               	goto	l5325
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;doprnt.c: 1150: width--;
  2466  000CCC  0100               	movlb	0	; () banked
  2467  000CCE  07A9               	decf	printf@width& (0+255),f,b
  2468  000CD0  A0D8               	btfss	status,0,c
  2469  000CD2  07AA               	decf	(printf@width+1)& (0+255),f,b
  2470  000CD4  D000               	goto	l5325
  2471  000CD6                     l5325:
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;doprnt.c: 1153: if(flag & 0x04) {
  2475  000CD6  0100               	movlb	0	; () banked
  2476  000CD8  A5A7               	btfss	printf@flag& (0+255),2,b
  2477  000CDA  D031               	goto	l5341
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;doprnt.c: 1157: if(flag & 0x03)
  2481  000CDC  0E03               	movlw	3
  2482  000CDE  0100               	movlb	0	; () banked
  2483  000CE0  15A7               	andwf	printf@flag& (0+255),w,b
  2484  000CE2  0100               	movlb	0	; () banked
  2485  000CE4  6F92               	movwf	??_printf& (0+255),b
  2486  000CE6  0E00               	movlw	0
  2487  000CE8  0100               	movlb	0	; () banked
  2488  000CEA  15A8               	andwf	(printf@flag+1)& (0+255),w,b
  2489  000CEC  0100               	movlb	0	; () banked
  2490  000CEE  6F93               	movwf	(??_printf+1)& (0+255),b
  2491  000CF0  0100               	movlb	0	; () banked
  2492  000CF2  5192               	movf	??_printf& (0+255),w,b
  2493  000CF4  0100               	movlb	0	; () banked
  2494  000CF6  1193               	iorwf	(??_printf+1)& (0+255),w,b
  2495  000CF8  B4D8               	btfsc	status,2,c
  2496  000CFA  D00C               	goto	l5335
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;doprnt.c: 1159: (putch('-') );
  2500  000CFC  0E2D               	movlw	45
  2501  000CFE  EC00  F01F         	call	_putch
  2502                           
  2503                           ;doprnt.c: 1168: while(width > 0) {
  2504  000D02  D008               	goto	l5335
  2505  000D04                     l5331:
  2506                           
  2507                           ;doprnt.c: 1169: (putch('0') );
  2508  000D04  0E30               	movlw	48
  2509  000D06  EC00  F01F         	call	_putch
  2510                           
  2511                           ;doprnt.c: 1170: width--;
  2512  000D0A  0100               	movlb	0	; () banked
  2513  000D0C  07A9               	decf	printf@width& (0+255),f,b
  2514  000D0E  A0D8               	btfss	status,0,c
  2515  000D10  07AA               	decf	(printf@width+1)& (0+255),f,b
  2516  000D12  D000               	goto	l5335
  2517  000D14                     l5335:
  2518  000D14  0100               	movlb	0	; () banked
  2519  000D16  BFAA               	btfsc	(printf@width+1)& (0+255),7,b
  2520  000D18  D077               	goto	l5353
  2521  000D1A  0100               	movlb	0	; () banked
  2522  000D1C  51AA               	movf	(printf@width+1)& (0+255),w,b
  2523  000D1E  E1F2               	bnz	l5331
  2524  000D20  0100               	movlb	0	; () banked
  2525  000D22  05A9               	decf	printf@width& (0+255),w,b
  2526  000D24  A0D8               	btfss	status,0,c
  2527  000D26  D070               	goto	l5353
  2528  000D28  D7ED               	goto	l5331
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;doprnt.c: 1171: }
  2532                           ;doprnt.c: 1173: } else
  2533  000D2A  D06E               	goto	l5353
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;doprnt.c: 1175: {
  2537                           ;doprnt.c: 1180: while(width > 0) {
  2538  000D2C  D008               	goto	l5341
  2539  000D2E                     l5337:
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;doprnt.c: 1181: (putch(' ') );
  2543  000D2E  0E20               	movlw	32
  2544  000D30  EC00  F01F         	call	_putch
  2545                           
  2546                           ;doprnt.c: 1182: width--;
  2547  000D34  0100               	movlb	0	; () banked
  2548  000D36  07A9               	decf	printf@width& (0+255),f,b
  2549  000D38  A0D8               	btfss	status,0,c
  2550  000D3A  07AA               	decf	(printf@width+1)& (0+255),f,b
  2551  000D3C  D000               	goto	l5341
  2552  000D3E                     l5341:
  2553                           
  2554                           ; BSR set to: 0
  2555  000D3E  0100               	movlb	0	; () banked
  2556  000D40  BFAA               	btfsc	(printf@width+1)& (0+255),7,b
  2557  000D42  D007               	goto	l5343
  2558  000D44  0100               	movlb	0	; () banked
  2559  000D46  51AA               	movf	(printf@width+1)& (0+255),w,b
  2560  000D48  E1F2               	bnz	l5337
  2561  000D4A  0100               	movlb	0	; () banked
  2562  000D4C  05A9               	decf	printf@width& (0+255),w,b
  2563  000D4E  B0D8               	btfsc	status,0,c
  2564  000D50  D7EE               	goto	l5337
  2565  000D52                     l5343:
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;doprnt.c: 1183: }
  2569                           ;doprnt.c: 1188: if(flag & 0x03)
  2570  000D52  0E03               	movlw	3
  2571  000D54  0100               	movlb	0	; () banked
  2572  000D56  15A7               	andwf	printf@flag& (0+255),w,b
  2573  000D58  0100               	movlb	0	; () banked
  2574  000D5A  6F92               	movwf	??_printf& (0+255),b
  2575  000D5C  0E00               	movlw	0
  2576  000D5E  0100               	movlb	0	; () banked
  2577  000D60  15A8               	andwf	(printf@flag+1)& (0+255),w,b
  2578  000D62  0100               	movlb	0	; () banked
  2579  000D64  6F93               	movwf	(??_printf+1)& (0+255),b
  2580  000D66  0100               	movlb	0	; () banked
  2581  000D68  5192               	movf	??_printf& (0+255),w,b
  2582  000D6A  0100               	movlb	0	; () banked
  2583  000D6C  1193               	iorwf	(??_printf+1)& (0+255),w,b
  2584  000D6E  B4D8               	btfsc	status,2,c
  2585  000D70  D04B               	goto	l5353
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;doprnt.c: 1190: (putch('-') );
  2589  000D72  0E2D               	movlw	45
  2590  000D74  EC00  F01F         	call	_putch
  2591                           
  2592                           ;doprnt.c: 1195: }
  2593                           ;doprnt.c: 1196: while(c--) {
  2594  000D78  D047               	goto	l5353
  2595  000D7A                     l5347:
  2596                           
  2597                           ;doprnt.c: 1200: {
  2598                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2599  000D7A  C0A1  F017         	movff	printf@val,___lldiv@dividend
  2600  000D7E  C0A2  F018         	movff	printf@val+1,___lldiv@dividend+1
  2601  000D82  C0A3  F019         	movff	printf@val+2,___lldiv@dividend+2
  2602  000D86  C0A4  F01A         	movff	printf@val+3,___lldiv@dividend+3
  2603  000D8A  0100               	movlb	0	; () banked
  2604  000D8C  51B0               	movf	printf@c& (0+255),w,b
  2605  000D8E  0D04               	mullw	4
  2606  000D90  0E01               	movlw	low _dpowers
  2607  000D92  24F3               	addwf	prodl,w,c
  2608  000D94  6EF6               	movwf	tblptrl,c
  2609  000D96  0E06               	movlw	high _dpowers
  2610  000D98  20F4               	addwfc	prodh,w,c
  2611  000D9A  6EF7               	movwf	tblptrh,c
  2612  000D9C                     	if	0	;There are less than 3 active tblptr bytes
  2613  000D9C                     	endif
  2614  000D9C  0009               	tblrd		*+
  2615  000D9E  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2616  000DA2  0009               	tblrd		*+
  2617  000DA4  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2618  000DA8  0009               	tblrd		*+
  2619  000DAA  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2620  000DAE  000A               	tblrd		*-
  2621  000DB0  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2622  000DB4  EC12  F01C         	call	___lldiv	;wreg free
  2623  000DB8  C017  F09D         	movff	?___lldiv,printf@tmpval
  2624  000DBC  C018  F09E         	movff	?___lldiv+1,printf@tmpval+1
  2625  000DC0  C019  F09F         	movff	?___lldiv+2,printf@tmpval+2
  2626  000DC4  C01A  F0A0         	movff	?___lldiv+3,printf@tmpval+3
  2627                           
  2628                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2629  000DC8  C09D  F024         	movff	printf@tmpval,___llmod@dividend
  2630  000DCC  C09E  F025         	movff	printf@tmpval+1,___llmod@dividend+1
  2631  000DD0  C09F  F026         	movff	printf@tmpval+2,___llmod@dividend+2
  2632  000DD4  C0A0  F027         	movff	printf@tmpval+3,___llmod@dividend+3
  2633  000DD8  0E0A               	movlw	10
  2634  000DDA  6E28               	movwf	___llmod@divisor,c
  2635  000DDC  0E00               	movlw	0
  2636  000DDE  6E29               	movwf	___llmod@divisor+1,c
  2637  000DE0  0E00               	movlw	0
  2638  000DE2  6E2A               	movwf	___llmod@divisor+2,c
  2639  000DE4  0E00               	movlw	0
  2640  000DE6  6E2B               	movwf	___llmod@divisor+3,c
  2641  000DE8  EC99  F01C         	call	___llmod	;wreg free
  2642  000DEC  C024  F09D         	movff	?___llmod,printf@tmpval
  2643  000DF0  C025  F09E         	movff	?___llmod+1,printf@tmpval+1
  2644  000DF4  C026  F09F         	movff	?___llmod+2,printf@tmpval+2
  2645  000DF8  C027  F0A0         	movff	?___llmod+3,printf@tmpval+3
  2646                           
  2647                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2648  000DFC  0100               	movlb	0	; () banked
  2649  000DFE  519D               	movf	printf@tmpval& (0+255),w,b
  2650  000E00  0F30               	addlw	48
  2651  000E02  EC00  F01F         	call	_putch
  2652  000E06  D000               	goto	l5353
  2653  000E08                     l5353:
  2654  000E08  0100               	movlb	0	; () banked
  2655  000E0A  07B0               	decf	printf@c& (0+255),f,b
  2656  000E0C  0100               	movlb	0	; () banked
  2657  000E0E  29B0               	incf	printf@c& (0+255),w,b
  2658  000E10  B4D8               	btfsc	status,2,c
  2659  000E12  D00A               	goto	l5359
  2660  000E14  D7B2               	goto	l5347
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;doprnt.c: 1204: }
  2664                           ;doprnt.c: 1206: }
  2665                           ;doprnt.c: 1207: while(exp > 0) {
  2666  000E16  D008               	goto	l5359
  2667  000E18                     l5355:
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;doprnt.c: 1208: (putch('0') );
  2671  000E18  0E30               	movlw	48
  2672  000E1A  EC00  F01F         	call	_putch
  2673                           
  2674                           ;doprnt.c: 1209: exp--;
  2675  000E1E  0100               	movlb	0	; () banked
  2676  000E20  07A5               	decf	printf@exp& (0+255),f,b
  2677  000E22  A0D8               	btfss	status,0,c
  2678  000E24  07A6               	decf	(printf@exp+1)& (0+255),f,b
  2679  000E26  D000               	goto	l5359
  2680  000E28                     l5359:
  2681                           
  2682                           ; BSR set to: 0
  2683  000E28  0100               	movlb	0	; () banked
  2684  000E2A  BFA6               	btfsc	(printf@exp+1)& (0+255),7,b
  2685  000E2C  D007               	goto	l5361
  2686  000E2E  0100               	movlb	0	; () banked
  2687  000E30  51A6               	movf	(printf@exp+1)& (0+255),w,b
  2688  000E32  E1F2               	bnz	l5355
  2689  000E34  0100               	movlb	0	; () banked
  2690  000E36  05A5               	decf	printf@exp& (0+255),w,b
  2691  000E38  B0D8               	btfsc	status,0,c
  2692  000E3A  D7EE               	goto	l5355
  2693  000E3C                     l5361:
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;doprnt.c: 1210: }
  2697                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2698  000E3C  0100               	movlb	0	; () banked
  2699  000E3E  BFAF               	btfsc	(printf@prec+1)& (0+255),7,b
  2700  000E40  D00C               	goto	l668
  2701  000E42  0100               	movlb	0	; () banked
  2702  000E44  51AF               	movf	(printf@prec+1)& (0+255),w,b
  2703  000E46  E105               	bnz	u5680
  2704  000E48  0E09               	movlw	9
  2705  000E4A  0100               	movlb	0	; () banked
  2706  000E4C  5DAE               	subwf	printf@prec& (0+255),w,b
  2707  000E4E  A0D8               	btfss	status,0,c
  2708  000E50  D004               	goto	l668
  2709  000E52                     u5680:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2713  000E52  0E08               	movlw	8
  2714  000E54  0100               	movlb	0	; () banked
  2715  000E56  6FB0               	movwf	printf@c& (0+255),b
  2716  000E58  D003               	goto	l5365
  2717  000E5A                     l668:
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;doprnt.c: 1213: else
  2721                           ;doprnt.c: 1214: c = prec;
  2722  000E5A  C0AE  F0B0         	movff	printf@prec,printf@c
  2723  000E5E  D000               	goto	l5365
  2724  000E60                     l5365:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;doprnt.c: 1215: prec -= c;
  2728  000E60  0100               	movlb	0	; () banked
  2729  000E62  51B0               	movf	printf@c& (0+255),w,b
  2730  000E64  0100               	movlb	0	; () banked
  2731  000E66  5FAE               	subwf	printf@prec& (0+255),f,b
  2732  000E68  0E00               	movlw	0
  2733  000E6A  0100               	movlb	0	; () banked
  2734  000E6C  BFB0               	btfsc	printf@c& (0+255),7,b
  2735  000E6E  0EFF               	movlw	255
  2736  000E70  0100               	movlb	0	; () banked
  2737  000E72  5BAF               	subwfb	(printf@prec+1)& (0+255),f,b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;doprnt.c: 1219: if(c)
  2741  000E74  0100               	movlb	0	; () banked
  2742  000E76  51B0               	movf	printf@c& (0+255),w,b
  2743  000E78  0100               	movlb	0	; () banked
  2744  000E7A  B4D8               	btfsc	status,2,c
  2745  000E7C  D004               	goto	l5371
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;doprnt.c: 1221: (putch('.') );
  2749  000E7E  0E2E               	movlw	46
  2750  000E80  EC00  F01F         	call	_putch
  2751  000E84  D000               	goto	l5371
  2752  000E86                     l5371:
  2753                           
  2754                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2755  000E86  0100               	movlb	0	; () banked
  2756  000E88  51B0               	movf	printf@c& (0+255),w,b
  2757  000E8A  EC0C  F00C         	call	_scale
  2758  000E8E  C06F  F098         	movff	?_scale,_printf$1698
  2759  000E92  C070  F099         	movff	?_scale+1,_printf$1698+1
  2760  000E96  C071  F09A         	movff	?_scale+2,_printf$1698+2
  2761                           
  2762                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2763  000E9A  C0AB  F063         	movff	printf@fval,___ftmul@f2
  2764  000E9E  C0AC  F064         	movff	printf@fval+1,___ftmul@f2+1
  2765  000EA2  C0AD  F065         	movff	printf@fval+2,___ftmul@f2+2
  2766  000EA6  C098  F060         	movff	_printf$1698,___ftmul@f1
  2767  000EAA  C099  F061         	movff	_printf$1698+1,___ftmul@f1+1
  2768  000EAE  C09A  F062         	movff	_printf$1698+2,___ftmul@f1+2
  2769  000EB2  ECCB  F014         	call	___ftmul	;wreg free
  2770  000EB6  C060  F076         	movff	?___ftmul,___fttol@f1
  2771  000EBA  C061  F077         	movff	?___ftmul+1,___fttol@f1+1
  2772  000EBE  C062  F078         	movff	?___ftmul+2,___fttol@f1+2
  2773  000EC2  EC81  F015         	call	___fttol	;wreg free
  2774  000EC6  C076  F0A1         	movff	?___fttol,printf@val
  2775  000ECA  C077  F0A2         	movff	?___fttol+1,printf@val+1
  2776  000ECE  C078  F0A3         	movff	?___fttol+2,printf@val+2
  2777  000ED2  C079  F0A4         	movff	?___fttol+3,printf@val+3
  2778                           
  2779                           ;doprnt.c: 1228: while(c--) {
  2780  000ED6  D06E               	goto	l5381
  2781  000ED8                     l5375:
  2782                           
  2783                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2784  000ED8  C0A1  F017         	movff	printf@val,___lldiv@dividend
  2785  000EDC  C0A2  F018         	movff	printf@val+1,___lldiv@dividend+1
  2786  000EE0  C0A3  F019         	movff	printf@val+2,___lldiv@dividend+2
  2787  000EE4  C0A4  F01A         	movff	printf@val+3,___lldiv@dividend+3
  2788  000EE8  0100               	movlb	0	; () banked
  2789  000EEA  51B0               	movf	printf@c& (0+255),w,b
  2790  000EEC  0D04               	mullw	4
  2791  000EEE  0E01               	movlw	low _dpowers
  2792  000EF0  24F3               	addwf	prodl,w,c
  2793  000EF2  6EF6               	movwf	tblptrl,c
  2794  000EF4  0E06               	movlw	high _dpowers
  2795  000EF6  20F4               	addwfc	prodh,w,c
  2796  000EF8  6EF7               	movwf	tblptrh,c
  2797  000EFA                     	if	0	;There are less than 3 active tblptr bytes
  2798  000EFA                     	endif
  2799  000EFA  0009               	tblrd		*+
  2800  000EFC  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2801  000F00  0009               	tblrd		*+
  2802  000F02  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2803  000F06  0009               	tblrd		*+
  2804  000F08  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2805  000F0C  000A               	tblrd		*-
  2806  000F0E  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2807  000F12  EC12  F01C         	call	___lldiv	;wreg free
  2808  000F16  C017  F09D         	movff	?___lldiv,printf@tmpval
  2809  000F1A  C018  F09E         	movff	?___lldiv+1,printf@tmpval+1
  2810  000F1E  C019  F09F         	movff	?___lldiv+2,printf@tmpval+2
  2811  000F22  C01A  F0A0         	movff	?___lldiv+3,printf@tmpval+3
  2812                           
  2813                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2814  000F26  C09D  F024         	movff	printf@tmpval,___llmod@dividend
  2815  000F2A  C09E  F025         	movff	printf@tmpval+1,___llmod@dividend+1
  2816  000F2E  C09F  F026         	movff	printf@tmpval+2,___llmod@dividend+2
  2817  000F32  C0A0  F027         	movff	printf@tmpval+3,___llmod@dividend+3
  2818  000F36  0E0A               	movlw	10
  2819  000F38  6E28               	movwf	___llmod@divisor,c
  2820  000F3A  0E00               	movlw	0
  2821  000F3C  6E29               	movwf	___llmod@divisor+1,c
  2822  000F3E  0E00               	movlw	0
  2823  000F40  6E2A               	movwf	___llmod@divisor+2,c
  2824  000F42  0E00               	movlw	0
  2825  000F44  6E2B               	movwf	___llmod@divisor+3,c
  2826  000F46  EC99  F01C         	call	___llmod	;wreg free
  2827  000F4A  C024  F09D         	movff	?___llmod,printf@tmpval
  2828  000F4E  C025  F09E         	movff	?___llmod+1,printf@tmpval+1
  2829  000F52  C026  F09F         	movff	?___llmod+2,printf@tmpval+2
  2830  000F56  C027  F0A0         	movff	?___llmod+3,printf@tmpval+3
  2831                           
  2832                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2833  000F5A  0100               	movlb	0	; () banked
  2834  000F5C  519D               	movf	printf@tmpval& (0+255),w,b
  2835  000F5E  0F30               	addlw	48
  2836  000F60  EC00  F01F         	call	_putch
  2837                           
  2838                           ;doprnt.c: 1232: val %= dpowers[c];
  2839  000F64  C0A1  F024         	movff	printf@val,___llmod@dividend
  2840  000F68  C0A2  F025         	movff	printf@val+1,___llmod@dividend+1
  2841  000F6C  C0A3  F026         	movff	printf@val+2,___llmod@dividend+2
  2842  000F70  C0A4  F027         	movff	printf@val+3,___llmod@dividend+3
  2843  000F74  0100               	movlb	0	; () banked
  2844  000F76  51B0               	movf	printf@c& (0+255),w,b
  2845  000F78  0D04               	mullw	4
  2846  000F7A  0E01               	movlw	low _dpowers
  2847  000F7C  24F3               	addwf	prodl,w,c
  2848  000F7E  6EF6               	movwf	tblptrl,c
  2849  000F80  0E06               	movlw	high _dpowers
  2850  000F82  20F4               	addwfc	prodh,w,c
  2851  000F84  6EF7               	movwf	tblptrh,c
  2852  000F86                     	if	0	;There are less than 3 active tblptr bytes
  2853  000F86                     	endif
  2854  000F86  0009               	tblrd		*+
  2855  000F88  CFF5 F028          	movff	tablat,___llmod@divisor
  2856  000F8C  0009               	tblrd		*+
  2857  000F8E  CFF5 F029          	movff	tablat,___llmod@divisor+1
  2858  000F92  0009               	tblrd		*+
  2859  000F94  CFF5 F02A          	movff	tablat,___llmod@divisor+2
  2860  000F98  000A               	tblrd		*-
  2861  000F9A  CFF5 F02B          	movff	tablat,___llmod@divisor+3
  2862  000F9E  EC99  F01C         	call	___llmod	;wreg free
  2863  000FA2  C024  F0A1         	movff	?___llmod,printf@val
  2864  000FA6  C025  F0A2         	movff	?___llmod+1,printf@val+1
  2865  000FAA  C026  F0A3         	movff	?___llmod+2,printf@val+2
  2866  000FAE  C027  F0A4         	movff	?___llmod+3,printf@val+3
  2867  000FB2  D000               	goto	l5381
  2868  000FB4                     l5381:
  2869  000FB4  0100               	movlb	0	; () banked
  2870  000FB6  07B0               	decf	printf@c& (0+255),f,b
  2871  000FB8  0100               	movlb	0	; () banked
  2872  000FBA  29B0               	incf	printf@c& (0+255),w,b
  2873  000FBC  B4D8               	btfsc	status,2,c
  2874  000FBE  D00A               	goto	l5387
  2875  000FC0  D78B               	goto	l5375
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;doprnt.c: 1233: }
  2879                           ;doprnt.c: 1235: while(prec) {
  2880  000FC2  D008               	goto	l5387
  2881  000FC4                     l5383:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;doprnt.c: 1236: (putch('0') );
  2885  000FC4  0E30               	movlw	48
  2886  000FC6  EC00  F01F         	call	_putch
  2887                           
  2888                           ;doprnt.c: 1237: prec--;
  2889  000FCA  0100               	movlb	0	; () banked
  2890  000FCC  07AE               	decf	printf@prec& (0+255),f,b
  2891  000FCE  A0D8               	btfss	status,0,c
  2892  000FD0  07AF               	decf	(printf@prec+1)& (0+255),f,b
  2893  000FD2  D000               	goto	l5387
  2894  000FD4                     l5387:
  2895                           
  2896                           ; BSR set to: 0
  2897  000FD4  0100               	movlb	0	; () banked
  2898  000FD6  51AE               	movf	printf@prec& (0+255),w,b
  2899  000FD8  0100               	movlb	0	; () banked
  2900  000FDA  11AF               	iorwf	(printf@prec+1)& (0+255),w,b
  2901  000FDC  B4D8               	btfsc	status,2,c
  2902  000FDE  D195               	goto	l5475
  2903  000FE0  D7F1               	goto	l5383
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;doprnt.c: 1238: }
  2907                           ;doprnt.c: 1245: continue;
  2908  000FE2  D193               	goto	l5475
  2909  000FE4                     l5389:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;doprnt.c: 1246: }
  2913                           ;doprnt.c: 1253: {
  2914                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2915  000FE4  C09B  FFD9         	movff	printf@ap,fsr2l
  2916  000FE8  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2917  000FEC  CFDE F0A1          	movff	postinc2,printf@val
  2918  000FF0  CFDD F0A2          	movff	postdec2,printf@val+1
  2919  000FF4  0100               	movlb	0	; () banked
  2920  000FF6  0E00               	movlw	0
  2921  000FF8  BFA2               	btfsc	(printf@val+1)& (0+255),7,b
  2922  000FFA  0EFF               	movlw	-1
  2923  000FFC  6FA3               	movwf	(printf@val+2)& (0+255),b
  2924  000FFE  6FA4               	movwf	(printf@val+3)& (0+255),b
  2925                           
  2926                           ; BSR set to: 0
  2927  001000  0E02               	movlw	2
  2928  001002  0100               	movlb	0	; () banked
  2929  001004  279B               	addwf	printf@ap& (0+255),f,b
  2930  001006  0E00               	movlw	0
  2931  001008  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;doprnt.c: 1261: if((long)val < 0) {
  2935  00100A  0100               	movlb	0	; () banked
  2936  00100C  AFA4               	btfss	(printf@val+3)& (0+255),7,b
  2937  00100E  D00D               	goto	l5399
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;doprnt.c: 1262: flag |= 0x03;
  2941  001010  0E03               	movlw	3
  2942  001012  0100               	movlb	0	; () banked
  2943  001014  13A7               	iorwf	printf@flag& (0+255),f,b
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;doprnt.c: 1263: val = -val;
  2947  001016  0100               	movlb	0	; () banked
  2948  001018  1FA4               	comf	(printf@val+3)& (0+255),f,b
  2949  00101A  1FA3               	comf	(printf@val+2)& (0+255),f,b
  2950  00101C  1FA2               	comf	(printf@val+1)& (0+255),f,b
  2951  00101E  6DA1               	negf	printf@val& (0+255),b
  2952  001020  0E00               	movlw	0
  2953  001022  23A2               	addwfc	(printf@val+1)& (0+255),f,b
  2954  001024  23A3               	addwfc	(printf@val+2)& (0+255),f,b
  2955  001026  23A4               	addwfc	(printf@val+3)& (0+255),f,b
  2956  001028  D000               	goto	l5399
  2957  00102A                     l5399:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;doprnt.c: 1264: }
  2961                           ;doprnt.c: 1266: }
  2962                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2963  00102A  0100               	movlb	0	; () banked
  2964  00102C  51AE               	movf	printf@prec& (0+255),w,b
  2965  00102E  0100               	movlb	0	; () banked
  2966  001030  11AF               	iorwf	(printf@prec+1)& (0+255),w,b
  2967  001032  A4D8               	btfss	status,2,c
  2968  001034  D00E               	goto	l5405
  2969                           
  2970                           ; BSR set to: 0
  2971  001036  0100               	movlb	0	; () banked
  2972  001038  51A1               	movf	printf@val& (0+255),w,b
  2973  00103A  0100               	movlb	0	; () banked
  2974  00103C  11A2               	iorwf	(printf@val+1)& (0+255),w,b
  2975  00103E  0100               	movlb	0	; () banked
  2976  001040  11A3               	iorwf	(printf@val+2)& (0+255),w,b
  2977  001042  0100               	movlb	0	; () banked
  2978  001044  11A4               	iorwf	(printf@val+3)& (0+255),w,b
  2979  001046  A4D8               	btfss	status,2,c
  2980  001048  D004               	goto	l5405
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;doprnt.c: 1291: prec++;
  2984  00104A  0100               	movlb	0	; () banked
  2985  00104C  4BAE               	infsnz	printf@prec& (0+255),f,b
  2986  00104E  2BAF               	incf	(printf@prec+1)& (0+255),f,b
  2987  001050  D000               	goto	l5405
  2988  001052                     l5405:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2992  001052  0E01               	movlw	1
  2993  001054  0100               	movlb	0	; () banked
  2994  001056  6FB0               	movwf	printf@c& (0+255),b
  2995  001058                     l5407:
  2996                           
  2997                           ; BSR set to: 0
  2998  001058  0E0A               	movlw	10
  2999  00105A  0100               	movlb	0	; () banked
  3000  00105C  19B0               	xorwf	printf@c& (0+255),w,b
  3001  00105E  B4D8               	btfsc	status,2,c
  3002  001060  D022               	goto	l5419
  3003  001062  D001               	goto	l5411
  3004                           
  3005                           ; BSR set to: 0
  3006  001064  D020               	goto	l5419
  3007  001066                     l5411:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;doprnt.c: 1306: if(val < dpowers[c])
  3011  001066  0100               	movlb	0	; () banked
  3012  001068  51B0               	movf	printf@c& (0+255),w,b
  3013  00106A  0D04               	mullw	4
  3014  00106C  0E01               	movlw	low _dpowers
  3015  00106E  24F3               	addwf	prodl,w,c
  3016  001070  6EF6               	movwf	tblptrl,c
  3017  001072  0E06               	movlw	high _dpowers
  3018  001074  20F4               	addwfc	prodh,w,c
  3019  001076  6EF7               	movwf	tblptrh,c
  3020  001078                     	if	0	;There are less than 3 active tblptr bytes
  3021  001078                     	endif
  3022  001078  0009               	tblrd		*+
  3023  00107A  50F5               	movf	tablat,w,c
  3024  00107C  0100               	movlb	0	; () banked
  3025  00107E  5DA1               	subwf	printf@val& (0+255),w,b
  3026  001080  0009               	tblrd		*+
  3027  001082  50F5               	movf	tablat,w,c
  3028  001084  0100               	movlb	0	; () banked
  3029  001086  59A2               	subwfb	(printf@val+1)& (0+255),w,b
  3030  001088  0009               	tblrd		*+
  3031  00108A  50F5               	movf	tablat,w,c
  3032  00108C  0100               	movlb	0	; () banked
  3033  00108E  59A3               	subwfb	(printf@val+2)& (0+255),w,b
  3034  001090  0009               	tblrd		*+
  3035  001092  50F5               	movf	tablat,w,c
  3036  001094  0100               	movlb	0	; () banked
  3037  001096  59A4               	subwfb	(printf@val+3)& (0+255),w,b
  3038  001098  A0D8               	btfss	status,0,c
  3039  00109A  D005               	goto	l5419
  3040  00109C  D001               	goto	l5415
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;doprnt.c: 1307: break;
  3044  00109E  D003               	goto	l5419
  3045  0010A0                     l5415:
  3046                           
  3047                           ; BSR set to: 0
  3048  0010A0  0100               	movlb	0	; () banked
  3049  0010A2  2BB0               	incf	printf@c& (0+255),f,b
  3050  0010A4  D7D9               	goto	l5407
  3051  0010A6                     l5419:
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;doprnt.c: 1339: if(c < prec)
  3055  0010A6  0E80               	movlw	128
  3056  0010A8  0100               	movlb	0	; () banked
  3057  0010AA  BFB0               	btfsc	printf@c& (0+255),7,b
  3058  0010AC  0E7F               	movlw	127
  3059  0010AE  0100               	movlb	0	; () banked
  3060  0010B0  6F92               	movwf	??_printf& (0+255),b
  3061  0010B2  0100               	movlb	0	; () banked
  3062  0010B4  51AE               	movf	printf@prec& (0+255),w,b
  3063  0010B6  0100               	movlb	0	; () banked
  3064  0010B8  5DB0               	subwf	printf@c& (0+255),w,b
  3065  0010BA  0100               	movlb	0	; () banked
  3066  0010BC  51AF               	movf	(printf@prec+1)& (0+255),w,b
  3067  0010BE  0A80               	xorlw	128
  3068  0010C0  0100               	movlb	0	; () banked
  3069  0010C2  5992               	subwfb	??_printf& (0+255),w,b
  3070  0010C4  B0D8               	btfsc	status,0,c
  3071  0010C6  D003               	goto	l5423
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;doprnt.c: 1340: c = prec;
  3075  0010C8  C0AE  F0B0         	movff	printf@prec,printf@c
  3076  0010CC  D019               	goto	l5427
  3077  0010CE                     l5423:
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;doprnt.c: 1341: else if(prec < c)
  3081  0010CE  0100               	movlb	0	; () banked
  3082  0010D0  51AF               	movf	(printf@prec+1)& (0+255),w,b
  3083  0010D2  0A80               	xorlw	128
  3084  0010D4  0100               	movlb	0	; () banked
  3085  0010D6  6F92               	movwf	??_printf& (0+255),b
  3086  0010D8  0100               	movlb	0	; () banked
  3087  0010DA  51B0               	movf	printf@c& (0+255),w,b
  3088  0010DC  0100               	movlb	0	; () banked
  3089  0010DE  5DAE               	subwf	printf@prec& (0+255),w,b
  3090  0010E0  0E80               	movlw	128
  3091  0010E2  0100               	movlb	0	; () banked
  3092  0010E4  BFB0               	btfsc	printf@c& (0+255),7,b
  3093  0010E6  0E7F               	movlw	127
  3094  0010E8  0100               	movlb	0	; () banked
  3095  0010EA  5992               	subwfb	??_printf& (0+255),w,b
  3096  0010EC  B0D8               	btfsc	status,0,c
  3097  0010EE  D008               	goto	l5427
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;doprnt.c: 1342: prec = c;
  3101  0010F0  0100               	movlb	0	; () banked
  3102  0010F2  51B0               	movf	printf@c& (0+255),w,b
  3103  0010F4  0100               	movlb	0	; () banked
  3104  0010F6  6FAE               	movwf	printf@prec& (0+255),b
  3105  0010F8  6BAF               	clrf	(printf@prec+1)& (0+255),b
  3106  0010FA  BFAE               	btfsc	printf@prec& (0+255),7,b
  3107  0010FC  07AF               	decf	(printf@prec+1)& (0+255),f,b
  3108                           
  3109                           ; BSR set to: 0
  3110  0010FE  D000               	goto	l5427
  3111  001100                     l5427:
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3115  001100  0100               	movlb	0	; () banked
  3116  001102  51A9               	movf	printf@width& (0+255),w,b
  3117  001104  0100               	movlb	0	; () banked
  3118  001106  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  3119  001108  B4D8               	btfsc	status,2,c
  3120  00110A  D015               	goto	l5433
  3121                           
  3122                           ; BSR set to: 0
  3123  00110C  0E03               	movlw	3
  3124  00110E  0100               	movlb	0	; () banked
  3125  001110  15A7               	andwf	printf@flag& (0+255),w,b
  3126  001112  0100               	movlb	0	; () banked
  3127  001114  6F92               	movwf	??_printf& (0+255),b
  3128  001116  0E00               	movlw	0
  3129  001118  0100               	movlb	0	; () banked
  3130  00111A  15A8               	andwf	(printf@flag+1)& (0+255),w,b
  3131  00111C  0100               	movlb	0	; () banked
  3132  00111E  6F93               	movwf	(??_printf+1)& (0+255),b
  3133  001120  0100               	movlb	0	; () banked
  3134  001122  5192               	movf	??_printf& (0+255),w,b
  3135  001124  0100               	movlb	0	; () banked
  3136  001126  1193               	iorwf	(??_printf+1)& (0+255),w,b
  3137  001128  B4D8               	btfsc	status,2,c
  3138  00112A  D005               	goto	l5433
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;doprnt.c: 1346: width--;
  3142  00112C  0100               	movlb	0	; () banked
  3143  00112E  07A9               	decf	printf@width& (0+255),f,b
  3144  001130  A0D8               	btfss	status,0,c
  3145  001132  07AA               	decf	(printf@width+1)& (0+255),f,b
  3146  001134  D000               	goto	l5433
  3147  001136                     l5433:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3151  001136  0100               	movlb	0	; () banked
  3152  001138  ADA8               	btfss	(printf@flag+1)& (0+255),6,b
  3153  00113A  D01F               	goto	l5441
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;doprnt.c: 1349: if(width > prec)
  3157  00113C  0100               	movlb	0	; () banked
  3158  00113E  51A9               	movf	printf@width& (0+255),w,b
  3159  001140  0100               	movlb	0	; () banked
  3160  001142  5DAE               	subwf	printf@prec& (0+255),w,b
  3161  001144  0100               	movlb	0	; () banked
  3162  001146  51AF               	movf	(printf@prec+1)& (0+255),w,b
  3163  001148  0A80               	xorlw	128
  3164  00114A  0100               	movlb	0	; () banked
  3165  00114C  6F92               	movwf	??_printf& (0+255),b
  3166  00114E  0100               	movlb	0	; () banked
  3167  001150  51AA               	movf	(printf@width+1)& (0+255),w,b
  3168  001152  0A80               	xorlw	128
  3169  001154  0100               	movlb	0	; () banked
  3170  001156  5992               	subwfb	??_printf& (0+255),w,b
  3171  001158  B0D8               	btfsc	status,0,c
  3172  00115A  D009               	goto	l5439
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;doprnt.c: 1350: width -= prec;
  3176  00115C  0100               	movlb	0	; () banked
  3177  00115E  51AE               	movf	printf@prec& (0+255),w,b
  3178  001160  0100               	movlb	0	; () banked
  3179  001162  5FA9               	subwf	printf@width& (0+255),f,b
  3180  001164  0100               	movlb	0	; () banked
  3181  001166  51AF               	movf	(printf@prec+1)& (0+255),w,b
  3182  001168  0100               	movlb	0	; () banked
  3183  00116A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  3184  00116C  D006               	goto	l5441
  3185  00116E                     l5439:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;doprnt.c: 1351: else
  3189                           ;doprnt.c: 1352: width = 0;
  3190  00116E  0E00               	movlw	0
  3191  001170  0100               	movlb	0	; () banked
  3192  001172  6FAA               	movwf	(printf@width+1)& (0+255),b
  3193  001174  0E00               	movlw	0
  3194  001176  6FA9               	movwf	printf@width& (0+255),b
  3195                           
  3196                           ; BSR set to: 0
  3197  001178  D000               	goto	l5441
  3198  00117A                     l5441:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;doprnt.c: 1353: }
  3202                           ;doprnt.c: 1381: if(width > c)
  3203  00117A  0E80               	movlw	128
  3204  00117C  0100               	movlb	0	; () banked
  3205  00117E  BFB0               	btfsc	printf@c& (0+255),7,b
  3206  001180  0E7F               	movlw	127
  3207  001182  0100               	movlb	0	; () banked
  3208  001184  6F92               	movwf	??_printf& (0+255),b
  3209  001186  0100               	movlb	0	; () banked
  3210  001188  51A9               	movf	printf@width& (0+255),w,b
  3211  00118A  0100               	movlb	0	; () banked
  3212  00118C  5DB0               	subwf	printf@c& (0+255),w,b
  3213  00118E  0100               	movlb	0	; () banked
  3214  001190  51AA               	movf	(printf@width+1)& (0+255),w,b
  3215  001192  0A80               	xorlw	128
  3216  001194  0100               	movlb	0	; () banked
  3217  001196  5992               	subwfb	??_printf& (0+255),w,b
  3218  001198  B0D8               	btfsc	status,0,c
  3219  00119A  D00B               	goto	l5445
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;doprnt.c: 1382: width -= c;
  3223  00119C  0100               	movlb	0	; () banked
  3224  00119E  51B0               	movf	printf@c& (0+255),w,b
  3225  0011A0  0100               	movlb	0	; () banked
  3226  0011A2  5FA9               	subwf	printf@width& (0+255),f,b
  3227  0011A4  0E00               	movlw	0
  3228  0011A6  0100               	movlb	0	; () banked
  3229  0011A8  BFB0               	btfsc	printf@c& (0+255),7,b
  3230  0011AA  0EFF               	movlw	255
  3231  0011AC  0100               	movlb	0	; () banked
  3232  0011AE  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  3233  0011B0  D006               	goto	l5447
  3234  0011B2                     l5445:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;doprnt.c: 1383: else
  3238                           ;doprnt.c: 1384: width = 0;
  3239  0011B2  0E00               	movlw	0
  3240  0011B4  0100               	movlb	0	; () banked
  3241  0011B6  6FAA               	movwf	(printf@width+1)& (0+255),b
  3242  0011B8  0E00               	movlw	0
  3243  0011BA  6FA9               	movwf	printf@width& (0+255),b
  3244  0011BC  D000               	goto	l5447
  3245  0011BE                     l5447:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;doprnt.c: 1387: if(flag & 0x04) {
  3249  0011BE  0100               	movlb	0	; () banked
  3250  0011C0  A5A7               	btfss	printf@flag& (0+255),2,b
  3251  0011C2  D029               	goto	l5459
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;doprnt.c: 1392: if(flag & 0x03)
  3255  0011C4  0E03               	movlw	3
  3256  0011C6  0100               	movlb	0	; () banked
  3257  0011C8  15A7               	andwf	printf@flag& (0+255),w,b
  3258  0011CA  0100               	movlb	0	; () banked
  3259  0011CC  6F92               	movwf	??_printf& (0+255),b
  3260  0011CE  0E00               	movlw	0
  3261  0011D0  0100               	movlb	0	; () banked
  3262  0011D2  15A8               	andwf	(printf@flag+1)& (0+255),w,b
  3263  0011D4  0100               	movlb	0	; () banked
  3264  0011D6  6F93               	movwf	(??_printf+1)& (0+255),b
  3265  0011D8  0100               	movlb	0	; () banked
  3266  0011DA  5192               	movf	??_printf& (0+255),w,b
  3267  0011DC  0100               	movlb	0	; () banked
  3268  0011DE  1193               	iorwf	(??_printf+1)& (0+255),w,b
  3269  0011E0  B4D8               	btfsc	status,2,c
  3270  0011E2  D004               	goto	l5453
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;doprnt.c: 1393: (putch('-') );
  3274  0011E4  0E2D               	movlw	45
  3275  0011E6  EC00  F01F         	call	_putch
  3276  0011EA  D000               	goto	l5453
  3277  0011EC                     l5453:
  3278                           
  3279                           ;doprnt.c: 1415: if(width)
  3280  0011EC  0100               	movlb	0	; () banked
  3281  0011EE  51A9               	movf	printf@width& (0+255),w,b
  3282  0011F0  0100               	movlb	0	; () banked
  3283  0011F2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  3284  0011F4  B4D8               	btfsc	status,2,c
  3285  0011F6  D07C               	goto	l5473
  3286  0011F8                     l5455:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;doprnt.c: 1417: (putch('0') );
  3290  0011F8  0E30               	movlw	48
  3291  0011FA  EC00  F01F         	call	_putch
  3292                           
  3293                           ;doprnt.c: 1418: while(--width);
  3294  0011FE  0100               	movlb	0	; () banked
  3295  001200  07A9               	decf	printf@width& (0+255),f,b
  3296  001202  A0D8               	btfss	status,0,c
  3297  001204  07AA               	decf	(printf@width+1)& (0+255),f,b
  3298  001206  0100               	movlb	0	; () banked
  3299  001208  51A9               	movf	printf@width& (0+255),w,b
  3300  00120A  0100               	movlb	0	; () banked
  3301  00120C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  3302  00120E  B4D8               	btfsc	status,2,c
  3303  001210  D06F               	goto	l5473
  3304  001212  D7F2               	goto	l5455
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;doprnt.c: 1420: } else
  3308                           
  3309                           ; BSR set to: 0
  3310  001214  D06D               	goto	l5473
  3311  001216                     l5459:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;doprnt.c: 1422: {
  3315                           ;doprnt.c: 1424: if(width
  3316                           ;doprnt.c: 1428: )
  3317  001216  0100               	movlb	0	; () banked
  3318  001218  51A9               	movf	printf@width& (0+255),w,b
  3319  00121A  0100               	movlb	0	; () banked
  3320  00121C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  3321  00121E  B4D8               	btfsc	status,2,c
  3322  001220  D00F               	goto	l5465
  3323  001222                     l5461:
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;doprnt.c: 1430: (putch(' ') );
  3327  001222  0E20               	movlw	32
  3328  001224  EC00  F01F         	call	_putch
  3329                           
  3330                           ;doprnt.c: 1431: while(--width);
  3331  001228  0100               	movlb	0	; () banked
  3332  00122A  07A9               	decf	printf@width& (0+255),f,b
  3333  00122C  A0D8               	btfss	status,0,c
  3334  00122E  07AA               	decf	(printf@width+1)& (0+255),f,b
  3335  001230  0100               	movlb	0	; () banked
  3336  001232  51A9               	movf	printf@width& (0+255),w,b
  3337  001234  0100               	movlb	0	; () banked
  3338  001236  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  3339  001238  B4D8               	btfsc	status,2,c
  3340  00123A  D002               	goto	l5465
  3341  00123C  D7F2               	goto	l5461
  3342                           
  3343                           ; BSR set to: 0
  3344  00123E  D000               	goto	l5465
  3345  001240                     l5465:
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;doprnt.c: 1438: if(flag & 0x03)
  3349  001240  0E03               	movlw	3
  3350  001242  0100               	movlb	0	; () banked
  3351  001244  15A7               	andwf	printf@flag& (0+255),w,b
  3352  001246  0100               	movlb	0	; () banked
  3353  001248  6F92               	movwf	??_printf& (0+255),b
  3354  00124A  0E00               	movlw	0
  3355  00124C  0100               	movlb	0	; () banked
  3356  00124E  15A8               	andwf	(printf@flag+1)& (0+255),w,b
  3357  001250  0100               	movlb	0	; () banked
  3358  001252  6F93               	movwf	(??_printf+1)& (0+255),b
  3359  001254  0100               	movlb	0	; () banked
  3360  001256  5192               	movf	??_printf& (0+255),w,b
  3361  001258  0100               	movlb	0	; () banked
  3362  00125A  1193               	iorwf	(??_printf+1)& (0+255),w,b
  3363  00125C  B4D8               	btfsc	status,2,c
  3364  00125E  D048               	goto	l5473
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;doprnt.c: 1439: (putch('-') );
  3368  001260  0E2D               	movlw	45
  3369  001262  EC00  F01F         	call	_putch
  3370                           
  3371                           ;doprnt.c: 1469: }
  3372                           ;doprnt.c: 1474: while(prec--) {
  3373  001266  D044               	goto	l5473
  3374  001268                     l5469:
  3375                           
  3376                           ;doprnt.c: 1478: {
  3377                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3378  001268  C0AE  F092         	movff	printf@prec,??_printf
  3379  00126C  C0AF  F093         	movff	printf@prec+1,??_printf+1
  3380  001270  0100               	movlb	0	; () banked
  3381  001272  90D8               	bcf	status,0,c
  3382  001274  3792               	rlcf	??_printf& (0+255),f,b
  3383  001276  3793               	rlcf	(??_printf+1)& (0+255),f,b
  3384  001278  0100               	movlb	0	; () banked
  3385  00127A  90D8               	bcf	status,0,c
  3386  00127C  3792               	rlcf	??_printf& (0+255),f,b
  3387  00127E  3793               	rlcf	(??_printf+1)& (0+255),f,b
  3388  001280  0E01               	movlw	low _dpowers
  3389  001282  0100               	movlb	0	; () banked
  3390  001284  2592               	addwf	??_printf& (0+255),w,b
  3391  001286  6EF6               	movwf	tblptrl,c
  3392  001288  0E06               	movlw	high _dpowers
  3393  00128A  2193               	addwfc	(??_printf+1)& (0+255),w,b
  3394  00128C  6EF7               	movwf	tblptrh,c
  3395  00128E                     	if	0	;There are less than 3 active tblptr bytes
  3396  00128E                     	endif
  3397  00128E  0009               	tblrd		*+
  3398  001290  CFF5 F01B          	movff	tablat,___lldiv@divisor
  3399  001294  0009               	tblrd		*+
  3400  001296  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  3401  00129A  0009               	tblrd		*+
  3402  00129C  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  3403  0012A0  000A               	tblrd		*-
  3404  0012A2  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  3405  0012A6  C0A1  F017         	movff	printf@val,___lldiv@dividend
  3406  0012AA  C0A2  F018         	movff	printf@val+1,___lldiv@dividend+1
  3407  0012AE  C0A3  F019         	movff	printf@val+2,___lldiv@dividend+2
  3408  0012B2  C0A4  F01A         	movff	printf@val+3,___lldiv@dividend+3
  3409  0012B6  EC12  F01C         	call	___lldiv	;wreg free
  3410  0012BA  C017  F024         	movff	?___lldiv,___llmod@dividend
  3411  0012BE  C018  F025         	movff	?___lldiv+1,___llmod@dividend+1
  3412  0012C2  C019  F026         	movff	?___lldiv+2,___llmod@dividend+2
  3413  0012C6  C01A  F027         	movff	?___lldiv+3,___llmod@dividend+3
  3414  0012CA  0E0A               	movlw	10
  3415  0012CC  6E28               	movwf	___llmod@divisor,c
  3416  0012CE  0E00               	movlw	0
  3417  0012D0  6E29               	movwf	___llmod@divisor+1,c
  3418  0012D2  0E00               	movlw	0
  3419  0012D4  6E2A               	movwf	___llmod@divisor+2,c
  3420  0012D6  0E00               	movlw	0
  3421  0012D8  6E2B               	movwf	___llmod@divisor+3,c
  3422  0012DA  EC99  F01C         	call	___llmod	;wreg free
  3423  0012DE  5024               	movf	?___llmod,w,c
  3424  0012E0  0F30               	addlw	48
  3425  0012E2  0100               	movlb	0	; () banked
  3426  0012E4  6FB0               	movwf	printf@c& (0+255),b
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;doprnt.c: 1523: }
  3430                           ;doprnt.c: 1524: (putch(c) );
  3431  0012E6  0100               	movlb	0	; () banked
  3432  0012E8  51B0               	movf	printf@c& (0+255),w,b
  3433  0012EA  EC00  F01F         	call	_putch
  3434  0012EE  D000               	goto	l5473
  3435  0012F0                     l5473:
  3436  0012F0  0100               	movlb	0	; () banked
  3437  0012F2  07AE               	decf	printf@prec& (0+255),f,b
  3438  0012F4  A0D8               	btfss	status,0,c
  3439  0012F6  07AF               	decf	(printf@prec+1)& (0+255),f,b
  3440  0012F8  0100               	movlb	0	; () banked
  3441  0012FA  29AE               	incf	printf@prec& (0+255),w,b
  3442  0012FC  E1B5               	bnz	l5469
  3443  0012FE  0100               	movlb	0	; () banked
  3444  001300  29AF               	incf	(printf@prec+1)& (0+255),w,b
  3445  001302  B4D8               	btfsc	status,2,c
  3446  001304  D002               	goto	l5475
  3447  001306  D7B0               	goto	l5469
  3448                           
  3449                           ; BSR set to: 0
  3450  001308  D000               	goto	l5475
  3451  00130A                     l5475:
  3452  00130A  C08B  FFF6         	movff	printf@f,tblptrl
  3453  00130E  C08C  FFF7         	movff	printf@f+1,tblptrh
  3454  001312  0100               	movlb	0	; () banked
  3455  001314  4B8B               	infsnz	printf@f& (0+255),f,b
  3456  001316  2B8C               	incf	(printf@f+1)& (0+255),f,b
  3457  001318                     	if	0	;tblptru may be non-zero
  3458  001318                     	endif
  3459  001318                     	if	0	;tblptru may be non-zero
  3460  001318                     	endif
  3461  001318  0008               	tblrd		*
  3462  00131A  CFF5 F0B0          	movff	tablat,printf@c
  3463  00131E  0100               	movlb	0	; () banked
  3464  001320  51B0               	movf	printf@c& (0+255),w,b
  3465  001322  B4D8               	btfsc	status,2,c
  3466  001324  0012               	return	
  3467  001326  EF70  F003         	goto	l5183
  3468                           
  3469                           ; BSR set to: 0
  3470  00132A  0012               	return	
  3471                           
  3472                           ; BSR set to: 0
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;doprnt.c: 1540: return 0;
  3476                           ;	Return value of _printf is never used
  3477                           
  3478                           ;doprnt.c: 1525: }
  3479                           ;doprnt.c: 1533: }
  3480                           ;doprnt.c: 1535: alldone:
  3481  00132C  0012               	return		;funcret
  3482  00132E                     __end_of_printf:
  3483                           	opt stack 0
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           postinc2	equ	0xFDE
  3494                           postdec2	equ	0xFDD
  3495                           fsr2h	equ	0xFDA
  3496                           fsr2l	equ	0xFD9
  3497                           status	equ	0xFD8
  3498                           
  3499 ;; *************** function _scale *****************
  3500 ;; Defined at:
  3501 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  scl             1    wreg     char 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  scl             1   21[BANK0 ] char 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  3   15[BANK0 ] char 
  3508 ;; Registers used:
  3509 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3515 ;;      Params:         0       3       0       0       0       0       0
  3516 ;;      Locals:         0       4       0       0       0       0       0
  3517 ;;      Temps:          0       0       0       0       0       0       0
  3518 ;;      Totals:         0       7       0       0       0       0       0
  3519 ;;Total ram usage:        7 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    6
  3522 ;; This function calls:
  3523 ;;		___awdiv
  3524 ;;		___awmod
  3525 ;;		___ftmul
  3526 ;;		___wmul
  3527 ;; This function is called by:
  3528 ;;		_printf
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text2
  3533  001818                     __ptext2:
  3534                           	opt stack 0
  3535  001818                     _scale:
  3536                           	opt stack 23
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;incstack = 0
  3540                           ;scale@scl stored from wreg
  3541  001818  0100               	movlb	0	; () banked
  3542  00181A  6F75               	movwf	scale@scl& (0+255),b
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;doprnt.c: 428: if(scl < 0) {
  3546  00181C  0100               	movlb	0	; () banked
  3547  00181E  AF75               	btfss	scale@scl& (0+255),7,b
  3548  001820  D107               	goto	l5025
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;doprnt.c: 429: scl = -scl;
  3552  001822  0100               	movlb	0	; () banked
  3553  001824  6D75               	negf	scale@scl& (0+255),b
  3554                           
  3555                           ;doprnt.c: 430: if(scl>=110)
  3556  001826  0100               	movlb	0	; () banked
  3557  001828  5175               	movf	scale@scl& (0+255),w,b
  3558  00182A  0A80               	xorlw	128
  3559  00182C  0F12               	addlw	-238
  3560  00182E  A0D8               	btfss	status,0,c
  3561  001830  D095               	goto	l5015
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3565  001832  0E00               	movlw	0
  3566  001834  6E28               	movwf	___wmul@multiplicand+1,c
  3567  001836  0E03               	movlw	3
  3568  001838  6E27               	movwf	___wmul@multiplicand,c
  3569  00183A  0E00               	movlw	0
  3570  00183C  6E20               	movwf	___awdiv@divisor+1,c
  3571  00183E  0E0A               	movlw	10
  3572  001840  6E1F               	movwf	___awdiv@divisor,c
  3573  001842  0E00               	movlw	0
  3574  001844  6E1A               	movwf	___awmod@divisor+1,c
  3575  001846  0E64               	movlw	100
  3576  001848  6E19               	movwf	___awmod@divisor,c
  3577  00184A  0100               	movlb	0	; () banked
  3578  00184C  5175               	movf	scale@scl& (0+255),w,b
  3579  00184E  6E17               	movwf	___awmod@dividend,c
  3580  001850  6A18               	clrf	___awmod@dividend+1,c
  3581  001852  BE17               	btfsc	___awmod@dividend,7,c
  3582  001854  0618               	decf	___awmod@dividend+1,f,c
  3583  001856  EC58  F01C         	call	___awmod	;wreg free
  3584  00185A  C017  F01D         	movff	?___awmod,___awdiv@dividend
  3585  00185E  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  3586  001862  EC33  F01B         	call	___awdiv	;wreg free
  3587  001866  0E09               	movlw	9
  3588  001868  241D               	addwf	?___awdiv,w,c
  3589  00186A  6E25               	movwf	___wmul@multiplier,c
  3590  00186C  0E00               	movlw	0
  3591  00186E  201E               	addwfc	?___awdiv+1,w,c
  3592  001870  6E26               	movwf	___wmul@multiplier+1,c
  3593  001872  EC3C  F01E         	call	___wmul	;wreg free
  3594  001876  0E29               	movlw	low __npowers_
  3595  001878  2425               	addwf	?___wmul,w,c
  3596  00187A  6EF6               	movwf	tblptrl,c
  3597  00187C  0E06               	movlw	high __npowers_
  3598  00187E  2026               	addwfc	?___wmul+1,w,c
  3599  001880  6EF7               	movwf	tblptrh,c
  3600  001882                     	if	0	;There are less than 3 active tblptr bytes
  3601  001882                     	endif
  3602  001882  0009               	tblrd		*+
  3603  001884  CFF5 F063          	movff	tablat,___ftmul@f2
  3604  001888  0009               	tblrd		*+
  3605  00188A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3606  00188E  000A               	tblrd		*-
  3607  001890  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3608  001894  0E00               	movlw	0
  3609  001896  6E20               	movwf	___awdiv@divisor+1,c
  3610  001898  0E64               	movlw	100
  3611  00189A  6E1F               	movwf	___awdiv@divisor,c
  3612  00189C  0100               	movlb	0	; () banked
  3613  00189E  5175               	movf	scale@scl& (0+255),w,b
  3614  0018A0  6E1D               	movwf	___awdiv@dividend,c
  3615  0018A2  6A1E               	clrf	___awdiv@dividend+1,c
  3616  0018A4  BE1D               	btfsc	___awdiv@dividend,7,c
  3617  0018A6  061E               	decf	___awdiv@dividend+1,f,c
  3618  0018A8  EC33  F01B         	call	___awdiv	;wreg free
  3619  0018AC  0E12               	movlw	18
  3620  0018AE  241D               	addwf	?___awdiv,w,c
  3621  0018B0  6E25               	movwf	___wmul@multiplier,c
  3622  0018B2  0E00               	movlw	0
  3623  0018B4  201E               	addwfc	?___awdiv+1,w,c
  3624  0018B6  6E26               	movwf	___wmul@multiplier+1,c
  3625  0018B8  0E00               	movlw	0
  3626  0018BA  6E28               	movwf	___wmul@multiplicand+1,c
  3627  0018BC  0E03               	movlw	3
  3628  0018BE  6E27               	movwf	___wmul@multiplicand,c
  3629  0018C0  EC3C  F01E         	call	___wmul	;wreg free
  3630  0018C4  0E29               	movlw	low __npowers_
  3631  0018C6  2425               	addwf	?___wmul,w,c
  3632  0018C8  6EF6               	movwf	tblptrl,c
  3633  0018CA  0E06               	movlw	high __npowers_
  3634  0018CC  2026               	addwfc	?___wmul+1,w,c
  3635  0018CE  6EF7               	movwf	tblptrh,c
  3636  0018D0                     	if	0	;There are less than 3 active tblptr bytes
  3637  0018D0                     	endif
  3638  0018D0  0009               	tblrd		*+
  3639  0018D2  CFF5 F060          	movff	tablat,___ftmul@f1
  3640  0018D6  0009               	tblrd		*+
  3641  0018D8  CFF5 F061          	movff	tablat,___ftmul@f1+1
  3642  0018DC  000A               	tblrd		*-
  3643  0018DE  CFF5 F062          	movff	tablat,___ftmul@f1+2
  3644  0018E2  ECCB  F014         	call	___ftmul	;wreg free
  3645  0018E6  C060  F072         	movff	?___ftmul,_scale$1697
  3646  0018EA  C061  F073         	movff	?___ftmul+1,_scale$1697+1
  3647  0018EE  C062  F074         	movff	?___ftmul+2,_scale$1697+2
  3648                           
  3649                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3650  0018F2  C072  F060         	movff	_scale$1697,___ftmul@f1
  3651  0018F6  C073  F061         	movff	_scale$1697+1,___ftmul@f1+1
  3652  0018FA  C074  F062         	movff	_scale$1697+2,___ftmul@f1+2
  3653  0018FE  0E00               	movlw	0
  3654  001900  6E28               	movwf	___wmul@multiplicand+1,c
  3655  001902  0E03               	movlw	3
  3656  001904  6E27               	movwf	___wmul@multiplicand,c
  3657  001906  0E00               	movlw	0
  3658  001908  6E1A               	movwf	___awmod@divisor+1,c
  3659  00190A  0E0A               	movlw	10
  3660  00190C  6E19               	movwf	___awmod@divisor,c
  3661  00190E  0100               	movlb	0	; () banked
  3662  001910  5175               	movf	scale@scl& (0+255),w,b
  3663  001912  6E17               	movwf	___awmod@dividend,c
  3664  001914  6A18               	clrf	___awmod@dividend+1,c
  3665  001916  BE17               	btfsc	___awmod@dividend,7,c
  3666  001918  0618               	decf	___awmod@dividend+1,f,c
  3667  00191A  EC58  F01C         	call	___awmod	;wreg free
  3668  00191E  C017  F025         	movff	?___awmod,___wmul@multiplier
  3669  001922  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3670  001926  EC3C  F01E         	call	___wmul	;wreg free
  3671  00192A  0E29               	movlw	low __npowers_
  3672  00192C  2425               	addwf	?___wmul,w,c
  3673  00192E  6EF6               	movwf	tblptrl,c
  3674  001930  0E06               	movlw	high __npowers_
  3675  001932  2026               	addwfc	?___wmul+1,w,c
  3676  001934  6EF7               	movwf	tblptrh,c
  3677  001936                     	if	0	;There are less than 3 active tblptr bytes
  3678  001936                     	endif
  3679  001936  0009               	tblrd		*+
  3680  001938  CFF5 F063          	movff	tablat,___ftmul@f2
  3681  00193C  0009               	tblrd		*+
  3682  00193E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3683  001942  000A               	tblrd		*-
  3684  001944  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3685  001948  ECCB  F014         	call	___ftmul	;wreg free
  3686  00194C  C060  F06F         	movff	?___ftmul,?_scale
  3687  001950  C061  F070         	movff	?___ftmul+1,?_scale+1
  3688  001954  C062  F071         	movff	?___ftmul+2,?_scale+2
  3689  001958  0012               	return	
  3690  00195A  D057               	goto	l5021
  3691  00195C                     l5015:
  3692                           
  3693                           ;doprnt.c: 432: else if(scl > 10)
  3694  00195C  0100               	movlb	0	; () banked
  3695  00195E  5175               	movf	scale@scl& (0+255),w,b
  3696  001960  0A80               	xorlw	128
  3697  001962  0F75               	addlw	-139
  3698  001964  A0D8               	btfss	status,0,c
  3699  001966  D051               	goto	l5021
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3703  001968  0E00               	movlw	0
  3704  00196A  6E20               	movwf	___awdiv@divisor+1,c
  3705  00196C  0E0A               	movlw	10
  3706  00196E  6E1F               	movwf	___awdiv@divisor,c
  3707  001970  0100               	movlb	0	; () banked
  3708  001972  5175               	movf	scale@scl& (0+255),w,b
  3709  001974  6E1D               	movwf	___awdiv@dividend,c
  3710  001976  6A1E               	clrf	___awdiv@dividend+1,c
  3711  001978  BE1D               	btfsc	___awdiv@dividend,7,c
  3712  00197A  061E               	decf	___awdiv@dividend+1,f,c
  3713  00197C  EC33  F01B         	call	___awdiv	;wreg free
  3714  001980  0E09               	movlw	9
  3715  001982  241D               	addwf	?___awdiv,w,c
  3716  001984  6E25               	movwf	___wmul@multiplier,c
  3717  001986  0E00               	movlw	0
  3718  001988  201E               	addwfc	?___awdiv+1,w,c
  3719  00198A  6E26               	movwf	___wmul@multiplier+1,c
  3720  00198C  0E00               	movlw	0
  3721  00198E  6E28               	movwf	___wmul@multiplicand+1,c
  3722  001990  0E03               	movlw	3
  3723  001992  6E27               	movwf	___wmul@multiplicand,c
  3724  001994  EC3C  F01E         	call	___wmul	;wreg free
  3725  001998  0E29               	movlw	low __npowers_
  3726  00199A  2425               	addwf	?___wmul,w,c
  3727  00199C  6EF6               	movwf	tblptrl,c
  3728  00199E  0E06               	movlw	high __npowers_
  3729  0019A0  2026               	addwfc	?___wmul+1,w,c
  3730  0019A2  6EF7               	movwf	tblptrh,c
  3731  0019A4                     	if	0	;There are less than 3 active tblptr bytes
  3732  0019A4                     	endif
  3733  0019A4  0009               	tblrd		*+
  3734  0019A6  CFF5 F060          	movff	tablat,___ftmul@f1
  3735  0019AA  0009               	tblrd		*+
  3736  0019AC  CFF5 F061          	movff	tablat,___ftmul@f1+1
  3737  0019B0  000A               	tblrd		*-
  3738  0019B2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  3739  0019B6  0E00               	movlw	0
  3740  0019B8  6E28               	movwf	___wmul@multiplicand+1,c
  3741  0019BA  0E03               	movlw	3
  3742  0019BC  6E27               	movwf	___wmul@multiplicand,c
  3743  0019BE  0E00               	movlw	0
  3744  0019C0  6E1A               	movwf	___awmod@divisor+1,c
  3745  0019C2  0E0A               	movlw	10
  3746  0019C4  6E19               	movwf	___awmod@divisor,c
  3747  0019C6  0100               	movlb	0	; () banked
  3748  0019C8  5175               	movf	scale@scl& (0+255),w,b
  3749  0019CA  6E17               	movwf	___awmod@dividend,c
  3750  0019CC  6A18               	clrf	___awmod@dividend+1,c
  3751  0019CE  BE17               	btfsc	___awmod@dividend,7,c
  3752  0019D0  0618               	decf	___awmod@dividend+1,f,c
  3753  0019D2  EC58  F01C         	call	___awmod	;wreg free
  3754  0019D6  C017  F025         	movff	?___awmod,___wmul@multiplier
  3755  0019DA  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3756  0019DE  EC3C  F01E         	call	___wmul	;wreg free
  3757  0019E2  0E29               	movlw	low __npowers_
  3758  0019E4  2425               	addwf	?___wmul,w,c
  3759  0019E6  6EF6               	movwf	tblptrl,c
  3760  0019E8  0E06               	movlw	high __npowers_
  3761  0019EA  2026               	addwfc	?___wmul+1,w,c
  3762  0019EC  6EF7               	movwf	tblptrh,c
  3763  0019EE                     	if	0	;There are less than 3 active tblptr bytes
  3764  0019EE                     	endif
  3765  0019EE  0009               	tblrd		*+
  3766  0019F0  CFF5 F063          	movff	tablat,___ftmul@f2
  3767  0019F4  0009               	tblrd		*+
  3768  0019F6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3769  0019FA  000A               	tblrd		*-
  3770  0019FC  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3771  001A00  ECCB  F014         	call	___ftmul	;wreg free
  3772  001A04  D7A3               	goto	L2
  3773  001A06  0012               	return	
  3774  001A08  D000               	goto	l5021
  3775  001A0A                     l5021:
  3776                           
  3777                           ;doprnt.c: 434: return _npowers_[scl];
  3778  001A0A  0100               	movlb	0	; () banked
  3779  001A0C  5175               	movf	scale@scl& (0+255),w,b
  3780  001A0E  0D03               	mullw	3
  3781  001A10  0E29               	movlw	low __npowers_
  3782  001A12  24F3               	addwf	prodl,w,c
  3783  001A14  6EF6               	movwf	tblptrl,c
  3784  001A16  0E06               	movlw	high __npowers_
  3785  001A18  20F4               	addwfc	prodh,w,c
  3786  001A1A  6EF7               	movwf	tblptrh,c
  3787  001A1C                     	if	0	;There are less than 3 active tblptr bytes
  3788  001A1C                     	endif
  3789  001A1C  0009               	tblrd		*+
  3790  001A1E  CFF5 F06F          	movff	tablat,?_scale
  3791  001A22  0009               	tblrd		*+
  3792  001A24  CFF5 F070          	movff	tablat,?_scale+1
  3793  001A28  000A               	tblrd		*-
  3794  001A2A  CFF5 F071          	movff	tablat,?_scale+2
  3795                           
  3796                           ; BSR set to: 0
  3797  001A2E  0012               	return	
  3798  001A30                     l5025:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;doprnt.c: 435: }
  3802                           ;doprnt.c: 436: if(scl>=110)
  3803  001A30  0100               	movlb	0	; () banked
  3804  001A32  5175               	movf	scale@scl& (0+255),w,b
  3805  001A34  0A80               	xorlw	128
  3806  001A36  0F12               	addlw	-238
  3807  001A38  A0D8               	btfss	status,0,c
  3808  001A3A  D095               	goto	l5033
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3812  001A3C  0E00               	movlw	0
  3813  001A3E  6E28               	movwf	___wmul@multiplicand+1,c
  3814  001A40  0E03               	movlw	3
  3815  001A42  6E27               	movwf	___wmul@multiplicand,c
  3816  001A44  0E00               	movlw	0
  3817  001A46  6E20               	movwf	___awdiv@divisor+1,c
  3818  001A48  0E0A               	movlw	10
  3819  001A4A  6E1F               	movwf	___awdiv@divisor,c
  3820  001A4C  0E00               	movlw	0
  3821  001A4E  6E1A               	movwf	___awmod@divisor+1,c
  3822  001A50  0E64               	movlw	100
  3823  001A52  6E19               	movwf	___awmod@divisor,c
  3824  001A54  0100               	movlb	0	; () banked
  3825  001A56  5175               	movf	scale@scl& (0+255),w,b
  3826  001A58  6E17               	movwf	___awmod@dividend,c
  3827  001A5A  6A18               	clrf	___awmod@dividend+1,c
  3828  001A5C  BE17               	btfsc	___awmod@dividend,7,c
  3829  001A5E  0618               	decf	___awmod@dividend+1,f,c
  3830  001A60  EC58  F01C         	call	___awmod	;wreg free
  3831  001A64  C017  F01D         	movff	?___awmod,___awdiv@dividend
  3832  001A68  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  3833  001A6C  EC33  F01B         	call	___awdiv	;wreg free
  3834  001A70  0E09               	movlw	9
  3835  001A72  241D               	addwf	?___awdiv,w,c
  3836  001A74  6E25               	movwf	___wmul@multiplier,c
  3837  001A76  0E00               	movlw	0
  3838  001A78  201E               	addwfc	?___awdiv+1,w,c
  3839  001A7A  6E26               	movwf	___wmul@multiplier+1,c
  3840  001A7C  EC3C  F01E         	call	___wmul	;wreg free
  3841  001A80  0E50               	movlw	low __powers_
  3842  001A82  2425               	addwf	?___wmul,w,c
  3843  001A84  6EF6               	movwf	tblptrl,c
  3844  001A86  0E06               	movlw	high __powers_
  3845  001A88  2026               	addwfc	?___wmul+1,w,c
  3846  001A8A  6EF7               	movwf	tblptrh,c
  3847  001A8C                     	if	0	;There are less than 3 active tblptr bytes
  3848  001A8C                     	endif
  3849  001A8C  0009               	tblrd		*+
  3850  001A8E  CFF5 F063          	movff	tablat,___ftmul@f2
  3851  001A92  0009               	tblrd		*+
  3852  001A94  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3853  001A98  000A               	tblrd		*-
  3854  001A9A  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3855  001A9E  0E00               	movlw	0
  3856  001AA0  6E20               	movwf	___awdiv@divisor+1,c
  3857  001AA2  0E64               	movlw	100
  3858  001AA4  6E1F               	movwf	___awdiv@divisor,c
  3859  001AA6  0100               	movlb	0	; () banked
  3860  001AA8  5175               	movf	scale@scl& (0+255),w,b
  3861  001AAA  6E1D               	movwf	___awdiv@dividend,c
  3862  001AAC  6A1E               	clrf	___awdiv@dividend+1,c
  3863  001AAE  BE1D               	btfsc	___awdiv@dividend,7,c
  3864  001AB0  061E               	decf	___awdiv@dividend+1,f,c
  3865  001AB2  EC33  F01B         	call	___awdiv	;wreg free
  3866  001AB6  0E12               	movlw	18
  3867  001AB8  241D               	addwf	?___awdiv,w,c
  3868  001ABA  6E25               	movwf	___wmul@multiplier,c
  3869  001ABC  0E00               	movlw	0
  3870  001ABE  201E               	addwfc	?___awdiv+1,w,c
  3871  001AC0  6E26               	movwf	___wmul@multiplier+1,c
  3872  001AC2  0E00               	movlw	0
  3873  001AC4  6E28               	movwf	___wmul@multiplicand+1,c
  3874  001AC6  0E03               	movlw	3
  3875  001AC8  6E27               	movwf	___wmul@multiplicand,c
  3876  001ACA  EC3C  F01E         	call	___wmul	;wreg free
  3877  001ACE  0E50               	movlw	low __powers_
  3878  001AD0  2425               	addwf	?___wmul,w,c
  3879  001AD2  6EF6               	movwf	tblptrl,c
  3880  001AD4  0E06               	movlw	high __powers_
  3881  001AD6  2026               	addwfc	?___wmul+1,w,c
  3882  001AD8  6EF7               	movwf	tblptrh,c
  3883  001ADA                     	if	0	;There are less than 3 active tblptr bytes
  3884  001ADA                     	endif
  3885  001ADA  0009               	tblrd		*+
  3886  001ADC  CFF5 F060          	movff	tablat,___ftmul@f1
  3887  001AE0  0009               	tblrd		*+
  3888  001AE2  CFF5 F061          	movff	tablat,___ftmul@f1+1
  3889  001AE6  000A               	tblrd		*-
  3890  001AE8  CFF5 F062          	movff	tablat,___ftmul@f1+2
  3891  001AEC  ECCB  F014         	call	___ftmul	;wreg free
  3892  001AF0  C060  F072         	movff	?___ftmul,_scale$1697
  3893  001AF4  C061  F073         	movff	?___ftmul+1,_scale$1697+1
  3894  001AF8  C062  F074         	movff	?___ftmul+2,_scale$1697+2
  3895                           
  3896                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3897  001AFC  C072  F060         	movff	_scale$1697,___ftmul@f1
  3898  001B00  C073  F061         	movff	_scale$1697+1,___ftmul@f1+1
  3899  001B04  C074  F062         	movff	_scale$1697+2,___ftmul@f1+2
  3900  001B08  0E00               	movlw	0
  3901  001B0A  6E28               	movwf	___wmul@multiplicand+1,c
  3902  001B0C  0E03               	movlw	3
  3903  001B0E  6E27               	movwf	___wmul@multiplicand,c
  3904  001B10  0E00               	movlw	0
  3905  001B12  6E1A               	movwf	___awmod@divisor+1,c
  3906  001B14  0E0A               	movlw	10
  3907  001B16  6E19               	movwf	___awmod@divisor,c
  3908  001B18  0100               	movlb	0	; () banked
  3909  001B1A  5175               	movf	scale@scl& (0+255),w,b
  3910  001B1C  6E17               	movwf	___awmod@dividend,c
  3911  001B1E  6A18               	clrf	___awmod@dividend+1,c
  3912  001B20  BE17               	btfsc	___awmod@dividend,7,c
  3913  001B22  0618               	decf	___awmod@dividend+1,f,c
  3914  001B24  EC58  F01C         	call	___awmod	;wreg free
  3915  001B28  C017  F025         	movff	?___awmod,___wmul@multiplier
  3916  001B2C  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3917  001B30  EC3C  F01E         	call	___wmul	;wreg free
  3918  001B34  0E50               	movlw	low __powers_
  3919  001B36  2425               	addwf	?___wmul,w,c
  3920  001B38  6EF6               	movwf	tblptrl,c
  3921  001B3A  0E06               	movlw	high __powers_
  3922  001B3C  2026               	addwfc	?___wmul+1,w,c
  3923  001B3E  6EF7               	movwf	tblptrh,c
  3924  001B40                     	if	0	;There are less than 3 active tblptr bytes
  3925  001B40                     	endif
  3926  001B40  0009               	tblrd		*+
  3927  001B42  CFF5 F063          	movff	tablat,___ftmul@f2
  3928  001B46  0009               	tblrd		*+
  3929  001B48  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3930  001B4C  000A               	tblrd		*-
  3931  001B4E  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3932  001B52  ECCB  F014         	call	___ftmul	;wreg free
  3933  001B56  C060  F06F         	movff	?___ftmul,?_scale
  3934  001B5A  C061  F070         	movff	?___ftmul+1,?_scale+1
  3935  001B5E  C062  F071         	movff	?___ftmul+2,?_scale+2
  3936  001B62  0012               	return	
  3937  001B64  D057               	goto	l5039
  3938  001B66                     l5033:
  3939                           
  3940                           ;doprnt.c: 438: else if(scl > 10)
  3941  001B66  0100               	movlb	0	; () banked
  3942  001B68  5175               	movf	scale@scl& (0+255),w,b
  3943  001B6A  0A80               	xorlw	128
  3944  001B6C  0F75               	addlw	-139
  3945  001B6E  A0D8               	btfss	status,0,c
  3946  001B70  D051               	goto	l5039
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3950  001B72  0E00               	movlw	0
  3951  001B74  6E20               	movwf	___awdiv@divisor+1,c
  3952  001B76  0E0A               	movlw	10
  3953  001B78  6E1F               	movwf	___awdiv@divisor,c
  3954  001B7A  0100               	movlb	0	; () banked
  3955  001B7C  5175               	movf	scale@scl& (0+255),w,b
  3956  001B7E  6E1D               	movwf	___awdiv@dividend,c
  3957  001B80  6A1E               	clrf	___awdiv@dividend+1,c
  3958  001B82  BE1D               	btfsc	___awdiv@dividend,7,c
  3959  001B84  061E               	decf	___awdiv@dividend+1,f,c
  3960  001B86  EC33  F01B         	call	___awdiv	;wreg free
  3961  001B8A  0E09               	movlw	9
  3962  001B8C  241D               	addwf	?___awdiv,w,c
  3963  001B8E  6E25               	movwf	___wmul@multiplier,c
  3964  001B90  0E00               	movlw	0
  3965  001B92  201E               	addwfc	?___awdiv+1,w,c
  3966  001B94  6E26               	movwf	___wmul@multiplier+1,c
  3967  001B96  0E00               	movlw	0
  3968  001B98  6E28               	movwf	___wmul@multiplicand+1,c
  3969  001B9A  0E03               	movlw	3
  3970  001B9C  6E27               	movwf	___wmul@multiplicand,c
  3971  001B9E  EC3C  F01E         	call	___wmul	;wreg free
  3972  001BA2  0E50               	movlw	low __powers_
  3973  001BA4  2425               	addwf	?___wmul,w,c
  3974  001BA6  6EF6               	movwf	tblptrl,c
  3975  001BA8  0E06               	movlw	high __powers_
  3976  001BAA  2026               	addwfc	?___wmul+1,w,c
  3977  001BAC  6EF7               	movwf	tblptrh,c
  3978  001BAE                     	if	0	;There are less than 3 active tblptr bytes
  3979  001BAE                     	endif
  3980  001BAE  0009               	tblrd		*+
  3981  001BB0  CFF5 F060          	movff	tablat,___ftmul@f1
  3982  001BB4  0009               	tblrd		*+
  3983  001BB6  CFF5 F061          	movff	tablat,___ftmul@f1+1
  3984  001BBA  000A               	tblrd		*-
  3985  001BBC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  3986  001BC0  0E00               	movlw	0
  3987  001BC2  6E28               	movwf	___wmul@multiplicand+1,c
  3988  001BC4  0E03               	movlw	3
  3989  001BC6  6E27               	movwf	___wmul@multiplicand,c
  3990  001BC8  0E00               	movlw	0
  3991  001BCA  6E1A               	movwf	___awmod@divisor+1,c
  3992  001BCC  0E0A               	movlw	10
  3993  001BCE  6E19               	movwf	___awmod@divisor,c
  3994  001BD0  0100               	movlb	0	; () banked
  3995  001BD2  5175               	movf	scale@scl& (0+255),w,b
  3996  001BD4  6E17               	movwf	___awmod@dividend,c
  3997  001BD6  6A18               	clrf	___awmod@dividend+1,c
  3998  001BD8  BE17               	btfsc	___awmod@dividend,7,c
  3999  001BDA  0618               	decf	___awmod@dividend+1,f,c
  4000  001BDC  EC58  F01C         	call	___awmod	;wreg free
  4001  001BE0  C017  F025         	movff	?___awmod,___wmul@multiplier
  4002  001BE4  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  4003  001BE8  EC3C  F01E         	call	___wmul	;wreg free
  4004  001BEC  0E50               	movlw	low __powers_
  4005  001BEE  2425               	addwf	?___wmul,w,c
  4006  001BF0  6EF6               	movwf	tblptrl,c
  4007  001BF2  0E06               	movlw	high __powers_
  4008  001BF4  2026               	addwfc	?___wmul+1,w,c
  4009  001BF6  6EF7               	movwf	tblptrh,c
  4010  001BF8                     	if	0	;There are less than 3 active tblptr bytes
  4011  001BF8                     	endif
  4012  001BF8  0009               	tblrd		*+
  4013  001BFA  CFF5 F063          	movff	tablat,___ftmul@f2
  4014  001BFE  0009               	tblrd		*+
  4015  001C00  CFF5 F064          	movff	tablat,___ftmul@f2+1
  4016  001C04  000A               	tblrd		*-
  4017  001C06  CFF5 F065          	movff	tablat,___ftmul@f2+2
  4018  001C0A  ECCB  F014         	call	___ftmul	;wreg free
  4019  001C0E  D7A3               	goto	L3
  4020  001C10  0012               	return	
  4021  001C12  D000               	goto	l5039
  4022  001C14                     l5039:
  4023                           
  4024                           ;doprnt.c: 440: return _powers_[scl];
  4025  001C14  0100               	movlb	0	; () banked
  4026  001C16  5175               	movf	scale@scl& (0+255),w,b
  4027  001C18  0D03               	mullw	3
  4028  001C1A  0E50               	movlw	low __powers_
  4029  001C1C  24F3               	addwf	prodl,w,c
  4030  001C1E  6EF6               	movwf	tblptrl,c
  4031  001C20  0E06               	movlw	high __powers_
  4032  001C22  20F4               	addwfc	prodh,w,c
  4033  001C24  6EF7               	movwf	tblptrh,c
  4034  001C26                     	if	0	;There are less than 3 active tblptr bytes
  4035  001C26                     	endif
  4036  001C26  0009               	tblrd		*+
  4037  001C28  CFF5 F06F          	movff	tablat,?_scale
  4038  001C2C  0009               	tblrd		*+
  4039  001C2E  CFF5 F070          	movff	tablat,?_scale+1
  4040  001C32  000A               	tblrd		*-
  4041  001C34  CFF5 F071          	movff	tablat,?_scale+2
  4042  001C38  0012               	return	
  4043                           
  4044                           ; BSR set to: 0
  4045  001C3A  0012               	return		;funcret
  4046  001C3C                     __end_of_scale:
  4047                           	opt stack 0
  4048                           tblptru	equ	0xFF8
  4049                           tblptrh	equ	0xFF7
  4050                           tblptrl	equ	0xFF6
  4051                           tablat	equ	0xFF5
  4052                           prodh	equ	0xFF4
  4053                           prodl	equ	0xFF3
  4054                           intcon	equ	0xFF2
  4055                           postinc0	equ	0xFEE
  4056                           wreg	equ	0xFE8
  4057                           postinc2	equ	0xFDE
  4058                           postdec2	equ	0xFDD
  4059                           fsr2h	equ	0xFDA
  4060                           fsr2l	equ	0xFD9
  4061                           status	equ	0xFD8
  4062                           
  4063 ;; *************** function _putch *****************
  4064 ;; Defined at:
  4065 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\putch.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;  c               1    wreg     unsigned char 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;  c               1    0[COMRAM] unsigned char 
  4070 ;; Return value:  Size  Location     Type
  4071 ;;		None               void
  4072 ;; Registers used:
  4073 ;;		wreg
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4079 ;;      Params:         0       0       0       0       0       0       0
  4080 ;;      Locals:         0       0       0       0       0       0       0
  4081 ;;      Temps:          0       0       0       0       0       0       0
  4082 ;;      Totals:         0       0       0       0       0       0       0
  4083 ;;Total ram usage:        0 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    4
  4086 ;; This function calls:
  4087 ;;		Nothing
  4088 ;; This function is called by:
  4089 ;;		_printf
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text3
  4094  003E00                     __ptext3:
  4095                           	opt stack 0
  4096  003E00                     _putch:
  4097                           	opt stack 25
  4098                           
  4099                           ;incstack = 0
  4100  003E00  0012               	return		;funcret
  4101  003E02                     __end_of_putch:
  4102                           	opt stack 0
  4103                           tblptru	equ	0xFF8
  4104                           tblptrh	equ	0xFF7
  4105                           tblptrl	equ	0xFF6
  4106                           tablat	equ	0xFF5
  4107                           prodh	equ	0xFF4
  4108                           prodl	equ	0xFF3
  4109                           intcon	equ	0xFF2
  4110                           postinc0	equ	0xFEE
  4111                           wreg	equ	0xFE8
  4112                           postinc2	equ	0xFDE
  4113                           postdec2	equ	0xFDD
  4114                           fsr2h	equ	0xFDA
  4115                           fsr2l	equ	0xFD9
  4116                           status	equ	0xFD8
  4117                           
  4118 ;; *************** function _isdigit *****************
  4119 ;; Defined at:
  4120 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  c               1    wreg     unsigned char 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;  c               1   24[COMRAM] unsigned char 
  4125 ;; Return value:  Size  Location     Type
  4126 ;;		None               void
  4127 ;; Registers used:
  4128 ;;		wreg, status,2, status,0
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4134 ;;      Params:         0       0       0       0       0       0       0
  4135 ;;      Locals:         2       0       0       0       0       0       0
  4136 ;;      Temps:          1       0       0       0       0       0       0
  4137 ;;      Totals:         3       0       0       0       0       0       0
  4138 ;;Total ram usage:        3 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; Hardware stack levels required when called:    4
  4141 ;; This function calls:
  4142 ;;		Nothing
  4143 ;; This function is called by:
  4144 ;;		_printf
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text4
  4149  003CEA                     __ptext4:
  4150                           	opt stack 0
  4151  003CEA                     _isdigit:
  4152                           	opt stack 25
  4153                           
  4154                           ;incstack = 0
  4155                           ;isdigit@c stored from wreg
  4156  003CEA  6E19               	movwf	isdigit@c,c
  4157  003CEC  0E00               	movlw	0
  4158  003CEE  6E18               	movwf	_isdigit$1337,c
  4159  003CF0  0E3A               	movlw	58
  4160  003CF2  6019               	cpfslt	isdigit@c,c
  4161  003CF4  D006               	goto	l3585
  4162  003CF6  0E2F               	movlw	47
  4163  003CF8  6419               	cpfsgt	isdigit@c,c
  4164  003CFA  D003               	goto	l3585
  4165  003CFC  0E01               	movlw	1
  4166  003CFE  6E18               	movwf	_isdigit$1337,c
  4167  003D00  D000               	goto	l3585
  4168  003D02                     l3585:
  4169  003D02  C018  F017         	movff	_isdigit$1337,??_isdigit
  4170  003D06  3017               	rrcf	??_isdigit,w,c
  4171  003D08  0012               	return	
  4172  003D0A  0012               	return		;funcret
  4173  003D0C                     __end_of_isdigit:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           postinc0	equ	0xFEE
  4183                           wreg	equ	0xFE8
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           fsr2h	equ	0xFDA
  4187                           fsr2l	equ	0xFD9
  4188                           status	equ	0xFD8
  4189                           
  4190 ;; *************** function _fround *****************
  4191 ;; Defined at:
  4192 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  prec            1    wreg     unsigned char 
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  prec            1   24[BANK0 ] unsigned char 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  3   15[BANK0 ] unsigned char 
  4199 ;; Registers used:
  4200 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4206 ;;      Params:         0       3       0       0       0       0       0
  4207 ;;      Locals:         0       7       0       0       0       0       0
  4208 ;;      Temps:          0       0       0       0       0       0       0
  4209 ;;      Totals:         0      10       0       0       0       0       0
  4210 ;;Total ram usage:       10 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    6
  4213 ;; This function calls:
  4214 ;;		___awdiv
  4215 ;;		___awmod
  4216 ;;		___ftmul
  4217 ;;		___wmul
  4218 ;; This function is called by:
  4219 ;;		_printf
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	text5
  4224  001EBA                     __ptext5:
  4225                           	opt stack 0
  4226  001EBA                     _fround:
  4227                           	opt stack 23
  4228                           
  4229                           ;incstack = 0
  4230                           ;fround@prec stored from wreg
  4231  001EBA  0100               	movlb	0	; () banked
  4232  001EBC  6F78               	movwf	fround@prec& (0+255),b
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;doprnt.c: 413: if(prec>=110)
  4236  001EBE  0E6D               	movlw	109
  4237  001EC0  0100               	movlb	0	; () banked
  4238  001EC2  6578               	cpfsgt	fround@prec& (0+255),b
  4239  001EC4  D0A3               	goto	l4993
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4243  001EC6  0E00               	movlw	0
  4244  001EC8  6E28               	movwf	___wmul@multiplicand+1,c
  4245  001ECA  0E03               	movlw	3
  4246  001ECC  6E27               	movwf	___wmul@multiplicand,c
  4247  001ECE  0E00               	movlw	0
  4248  001ED0  6E20               	movwf	___awdiv@divisor+1,c
  4249  001ED2  0E0A               	movlw	10
  4250  001ED4  6E1F               	movwf	___awdiv@divisor,c
  4251  001ED6  0E00               	movlw	0
  4252  001ED8  6E1A               	movwf	___awmod@divisor+1,c
  4253  001EDA  0E64               	movlw	100
  4254  001EDC  6E19               	movwf	___awmod@divisor,c
  4255  001EDE  C078  F017         	movff	fround@prec,___awmod@dividend
  4256  001EE2  6A18               	clrf	___awmod@dividend+1,c
  4257  001EE4  EC58  F01C         	call	___awmod	;wreg free
  4258  001EE8  C017  F01D         	movff	?___awmod,___awdiv@dividend
  4259  001EEC  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  4260  001EF0  EC33  F01B         	call	___awdiv	;wreg free
  4261  001EF4  0E09               	movlw	9
  4262  001EF6  241D               	addwf	?___awdiv,w,c
  4263  001EF8  6E25               	movwf	___wmul@multiplier,c
  4264  001EFA  0E00               	movlw	0
  4265  001EFC  201E               	addwfc	?___awdiv+1,w,c
  4266  001EFE  6E26               	movwf	___wmul@multiplier+1,c
  4267  001F00  EC3C  F01E         	call	___wmul	;wreg free
  4268  001F04  0E29               	movlw	low __npowers_
  4269  001F06  2425               	addwf	?___wmul,w,c
  4270  001F08  6EF6               	movwf	tblptrl,c
  4271  001F0A  0E06               	movlw	high __npowers_
  4272  001F0C  2026               	addwfc	?___wmul+1,w,c
  4273  001F0E  6EF7               	movwf	tblptrh,c
  4274  001F10                     	if	0	;There are less than 3 active tblptr bytes
  4275  001F10                     	endif
  4276  001F10  0009               	tblrd		*+
  4277  001F12  CFF5 F063          	movff	tablat,___ftmul@f2
  4278  001F16  0009               	tblrd		*+
  4279  001F18  CFF5 F064          	movff	tablat,___ftmul@f2+1
  4280  001F1C  000A               	tblrd		*-
  4281  001F1E  CFF5 F065          	movff	tablat,___ftmul@f2+2
  4282  001F22  0E00               	movlw	0
  4283  001F24  6E20               	movwf	___awdiv@divisor+1,c
  4284  001F26  0E64               	movlw	100
  4285  001F28  6E1F               	movwf	___awdiv@divisor,c
  4286  001F2A  C078  F01D         	movff	fround@prec,___awdiv@dividend
  4287  001F2E  6A1E               	clrf	___awdiv@dividend+1,c
  4288  001F30  EC33  F01B         	call	___awdiv	;wreg free
  4289  001F34  0E12               	movlw	18
  4290  001F36  241D               	addwf	?___awdiv,w,c
  4291  001F38  6E25               	movwf	___wmul@multiplier,c
  4292  001F3A  0E00               	movlw	0
  4293  001F3C  201E               	addwfc	?___awdiv+1,w,c
  4294  001F3E  6E26               	movwf	___wmul@multiplier+1,c
  4295  001F40  0E00               	movlw	0
  4296  001F42  6E28               	movwf	___wmul@multiplicand+1,c
  4297  001F44  0E03               	movlw	3
  4298  001F46  6E27               	movwf	___wmul@multiplicand,c
  4299  001F48  EC3C  F01E         	call	___wmul	;wreg free
  4300  001F4C  0E29               	movlw	low __npowers_
  4301  001F4E  2425               	addwf	?___wmul,w,c
  4302  001F50  6EF6               	movwf	tblptrl,c
  4303  001F52  0E06               	movlw	high __npowers_
  4304  001F54  2026               	addwfc	?___wmul+1,w,c
  4305  001F56  6EF7               	movwf	tblptrh,c
  4306  001F58                     	if	0	;There are less than 3 active tblptr bytes
  4307  001F58                     	endif
  4308  001F58  0009               	tblrd		*+
  4309  001F5A  CFF5 F060          	movff	tablat,___ftmul@f1
  4310  001F5E  0009               	tblrd		*+
  4311  001F60  CFF5 F061          	movff	tablat,___ftmul@f1+1
  4312  001F64  000A               	tblrd		*-
  4313  001F66  CFF5 F062          	movff	tablat,___ftmul@f1+2
  4314  001F6A  ECCB  F014         	call	___ftmul	;wreg free
  4315  001F6E  C060  F075         	movff	?___ftmul,_fround$1695
  4316  001F72  C061  F076         	movff	?___ftmul+1,_fround$1695+1
  4317  001F76  C062  F077         	movff	?___ftmul+2,_fround$1695+2
  4318                           
  4319                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4320  001F7A  0E00               	movlw	0
  4321  001F7C  6E28               	movwf	___wmul@multiplicand+1,c
  4322  001F7E  0E03               	movlw	3
  4323  001F80  6E27               	movwf	___wmul@multiplicand,c
  4324  001F82  0E00               	movlw	0
  4325  001F84  6E1A               	movwf	___awmod@divisor+1,c
  4326  001F86  0E0A               	movlw	10
  4327  001F88  6E19               	movwf	___awmod@divisor,c
  4328  001F8A  C078  F017         	movff	fround@prec,___awmod@dividend
  4329  001F8E  6A18               	clrf	___awmod@dividend+1,c
  4330  001F90  EC58  F01C         	call	___awmod	;wreg free
  4331  001F94  C017  F025         	movff	?___awmod,___wmul@multiplier
  4332  001F98  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  4333  001F9C  EC3C  F01E         	call	___wmul	;wreg free
  4334  001FA0  0E29               	movlw	low __npowers_
  4335  001FA2  2425               	addwf	?___wmul,w,c
  4336  001FA4  6EF6               	movwf	tblptrl,c
  4337  001FA6  0E06               	movlw	high __npowers_
  4338  001FA8  2026               	addwfc	?___wmul+1,w,c
  4339  001FAA  6EF7               	movwf	tblptrh,c
  4340  001FAC                     	if	0	;There are less than 3 active tblptr bytes
  4341  001FAC                     	endif
  4342  001FAC  0009               	tblrd		*+
  4343  001FAE  CFF5 F063          	movff	tablat,___ftmul@f2
  4344  001FB2  0009               	tblrd		*+
  4345  001FB4  CFF5 F064          	movff	tablat,___ftmul@f2+1
  4346  001FB8  000A               	tblrd		*-
  4347  001FBA  CFF5 F065          	movff	tablat,___ftmul@f2+2
  4348  001FBE  C075  F060         	movff	_fround$1695,___ftmul@f1
  4349  001FC2  C076  F061         	movff	_fround$1695+1,___ftmul@f1+1
  4350  001FC6  C077  F062         	movff	_fround$1695+2,___ftmul@f1+2
  4351  001FCA  ECCB  F014         	call	___ftmul	;wreg free
  4352  001FCE  C060  F072         	movff	?___ftmul,_fround$1696
  4353  001FD2  C061  F073         	movff	?___ftmul+1,_fround$1696+1
  4354  001FD6  C062  F074         	movff	?___ftmul+2,_fround$1696+2
  4355                           
  4356                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4357  001FDA  C072  F060         	movff	_fround$1696,___ftmul@f1
  4358  001FDE  C073  F061         	movff	_fround$1696+1,___ftmul@f1+1
  4359  001FE2  C074  F062         	movff	_fround$1696+2,___ftmul@f1+2
  4360  001FE6  0E00               	movlw	0
  4361  001FE8  0100               	movlb	0	; () banked
  4362  001FEA  6F63               	movwf	___ftmul@f2& (0+255),b
  4363  001FEC  0E00               	movlw	0
  4364  001FEE  0100               	movlb	0	; () banked
  4365  001FF0  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4366  001FF2  0E3F               	movlw	63
  4367  001FF4  0100               	movlb	0	; () banked
  4368  001FF6  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4369  001FF8  ECCB  F014         	call	___ftmul	;wreg free
  4370  001FFC  C060  F06F         	movff	?___ftmul,?_fround
  4371  002000  C061  F070         	movff	?___ftmul+1,?_fround+1
  4372  002004  C062  F071         	movff	?___ftmul+2,?_fround+2
  4373  002008  0012               	return	
  4374  00200A  D066               	goto	l5001
  4375  00200C                     l4993:
  4376                           
  4377                           ;doprnt.c: 415: else if(prec > 10)
  4378  00200C  0E0A               	movlw	10
  4379  00200E  0100               	movlb	0	; () banked
  4380  002010  6578               	cpfsgt	fround@prec& (0+255),b
  4381  002012  D062               	goto	l5001
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4385  002014  0E00               	movlw	0
  4386  002016  6E28               	movwf	___wmul@multiplicand+1,c
  4387  002018  0E03               	movlw	3
  4388  00201A  6E27               	movwf	___wmul@multiplicand,c
  4389  00201C  0E00               	movlw	0
  4390  00201E  6E1A               	movwf	___awmod@divisor+1,c
  4391  002020  0E0A               	movlw	10
  4392  002022  6E19               	movwf	___awmod@divisor,c
  4393  002024  C078  F017         	movff	fround@prec,___awmod@dividend
  4394  002028  6A18               	clrf	___awmod@dividend+1,c
  4395  00202A  EC58  F01C         	call	___awmod	;wreg free
  4396  00202E  C017  F025         	movff	?___awmod,___wmul@multiplier
  4397  002032  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  4398  002036  EC3C  F01E         	call	___wmul	;wreg free
  4399  00203A  0E29               	movlw	low __npowers_
  4400  00203C  2425               	addwf	?___wmul,w,c
  4401  00203E  6EF6               	movwf	tblptrl,c
  4402  002040  0E06               	movlw	high __npowers_
  4403  002042  2026               	addwfc	?___wmul+1,w,c
  4404  002044  6EF7               	movwf	tblptrh,c
  4405  002046                     	if	0	;There are less than 3 active tblptr bytes
  4406  002046                     	endif
  4407  002046  0009               	tblrd		*+
  4408  002048  CFF5 F063          	movff	tablat,___ftmul@f2
  4409  00204C  0009               	tblrd		*+
  4410  00204E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  4411  002052  000A               	tblrd		*-
  4412  002054  CFF5 F065          	movff	tablat,___ftmul@f2+2
  4413  002058  0E00               	movlw	0
  4414  00205A  6E20               	movwf	___awdiv@divisor+1,c
  4415  00205C  0E0A               	movlw	10
  4416  00205E  6E1F               	movwf	___awdiv@divisor,c
  4417  002060  C078  F01D         	movff	fround@prec,___awdiv@dividend
  4418  002064  6A1E               	clrf	___awdiv@dividend+1,c
  4419  002066  EC33  F01B         	call	___awdiv	;wreg free
  4420  00206A  0E09               	movlw	9
  4421  00206C  241D               	addwf	?___awdiv,w,c
  4422  00206E  6E25               	movwf	___wmul@multiplier,c
  4423  002070  0E00               	movlw	0
  4424  002072  201E               	addwfc	?___awdiv+1,w,c
  4425  002074  6E26               	movwf	___wmul@multiplier+1,c
  4426  002076  0E00               	movlw	0
  4427  002078  6E28               	movwf	___wmul@multiplicand+1,c
  4428  00207A  0E03               	movlw	3
  4429  00207C  6E27               	movwf	___wmul@multiplicand,c
  4430  00207E  EC3C  F01E         	call	___wmul	;wreg free
  4431  002082  0E29               	movlw	low __npowers_
  4432  002084  2425               	addwf	?___wmul,w,c
  4433  002086  6EF6               	movwf	tblptrl,c
  4434  002088  0E06               	movlw	high __npowers_
  4435  00208A  2026               	addwfc	?___wmul+1,w,c
  4436  00208C  6EF7               	movwf	tblptrh,c
  4437  00208E                     	if	0	;There are less than 3 active tblptr bytes
  4438  00208E                     	endif
  4439  00208E  0009               	tblrd		*+
  4440  002090  CFF5 F060          	movff	tablat,___ftmul@f1
  4441  002094  0009               	tblrd		*+
  4442  002096  CFF5 F061          	movff	tablat,___ftmul@f1+1
  4443  00209A  000A               	tblrd		*-
  4444  00209C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  4445  0020A0  ECCB  F014         	call	___ftmul	;wreg free
  4446  0020A4  C060  F075         	movff	?___ftmul,_fround$1695
  4447  0020A8  C061  F076         	movff	?___ftmul+1,_fround$1695+1
  4448  0020AC  C062  F077         	movff	?___ftmul+2,_fround$1695+2
  4449                           
  4450                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4451  0020B0  C075  F060         	movff	_fround$1695,___ftmul@f1
  4452  0020B4  C076  F061         	movff	_fround$1695+1,___ftmul@f1+1
  4453  0020B8  C077  F062         	movff	_fround$1695+2,___ftmul@f1+2
  4454  0020BC  0E00               	movlw	0
  4455  0020BE  0100               	movlb	0	; () banked
  4456  0020C0  6F63               	movwf	___ftmul@f2& (0+255),b
  4457  0020C2  0E00               	movlw	0
  4458  0020C4  0100               	movlb	0	; () banked
  4459  0020C6  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4460  0020C8  0E3F               	movlw	63
  4461  0020CA  0100               	movlb	0	; () banked
  4462  0020CC  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4463  0020CE  ECCB  F014         	call	___ftmul	;wreg free
  4464  0020D2  D794               	goto	L4
  4465  0020D4  0012               	return	
  4466  0020D6  D000               	goto	l5001
  4467  0020D8                     l5001:
  4468                           
  4469                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4470  0020D8  0100               	movlb	0	; () banked
  4471  0020DA  5178               	movf	fround@prec& (0+255),w,b
  4472  0020DC  0D03               	mullw	3
  4473  0020DE  0E29               	movlw	low __npowers_
  4474  0020E0  24F3               	addwf	prodl,w,c
  4475  0020E2  6EF6               	movwf	tblptrl,c
  4476  0020E4  0E06               	movlw	high __npowers_
  4477  0020E6  20F4               	addwfc	prodh,w,c
  4478  0020E8  6EF7               	movwf	tblptrh,c
  4479  0020EA                     	if	0	;There are less than 3 active tblptr bytes
  4480  0020EA                     	endif
  4481  0020EA  0009               	tblrd		*+
  4482  0020EC  CFF5 F060          	movff	tablat,___ftmul@f1
  4483  0020F0  0009               	tblrd		*+
  4484  0020F2  CFF5 F061          	movff	tablat,___ftmul@f1+1
  4485  0020F6  000A               	tblrd		*-
  4486  0020F8  CFF5 F062          	movff	tablat,___ftmul@f1+2
  4487  0020FC  0E00               	movlw	0
  4488  0020FE  0100               	movlb	0	; () banked
  4489  002100  6F63               	movwf	___ftmul@f2& (0+255),b
  4490  002102  0E00               	movlw	0
  4491  002104  0100               	movlb	0	; () banked
  4492  002106  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4493  002108  0E3F               	movlw	63
  4494  00210A  0100               	movlb	0	; () banked
  4495  00210C  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4496  00210E  ECCB  F014         	call	___ftmul	;wreg free
  4497  002112  C060  F06F         	movff	?___ftmul,?_fround
  4498  002116  C061  F070         	movff	?___ftmul+1,?_fround+1
  4499  00211A  C062  F071         	movff	?___ftmul+2,?_fround+2
  4500  00211E  0012               	return	
  4501  002120  0012               	return		;funcret
  4502  002122                     __end_of_fround:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           postinc0	equ	0xFEE
  4512                           wreg	equ	0xFE8
  4513                           postinc2	equ	0xFDE
  4514                           postdec2	equ	0xFDD
  4515                           fsr2h	equ	0xFDA
  4516                           fsr2l	equ	0xFD9
  4517                           status	equ	0xFD8
  4518                           
  4519 ;; *************** function ___awmod *****************
  4520 ;; Defined at:
  4521 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  dividend        2   22[COMRAM] int 
  4524 ;;  divisor         2   24[COMRAM] int 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  sign            1   27[COMRAM] unsigned char 
  4527 ;;  counter         1   26[COMRAM] unsigned char 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  2   22[COMRAM] int 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4537 ;;      Params:         4       0       0       0       0       0       0
  4538 ;;      Locals:         2       0       0       0       0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0
  4540 ;;      Totals:         6       0       0       0       0       0       0
  4541 ;;Total ram usage:        6 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    4
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_fround
  4548 ;;		_scale
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text6
  4553  0038B0                     __ptext6:
  4554                           	opt stack 0
  4555  0038B0                     ___awmod:
  4556                           	opt stack 24
  4557                           
  4558                           ;incstack = 0
  4559  0038B0  0E00               	movlw	0
  4560  0038B2  6E1C               	movwf	___awmod@sign,c
  4561  0038B4  AE18               	btfss	___awmod@dividend+1,7,c
  4562  0038B6  D007               	goto	l3313
  4563  0038B8  6C17               	negf	___awmod@dividend,c
  4564  0038BA  1E18               	comf	___awmod@dividend+1,f,c
  4565  0038BC  B0D8               	btfsc	status,0,c
  4566  0038BE  2A18               	incf	___awmod@dividend+1,f,c
  4567  0038C0  0E01               	movlw	1
  4568  0038C2  6E1C               	movwf	___awmod@sign,c
  4569  0038C4  D000               	goto	l3313
  4570  0038C6                     l3313:
  4571  0038C6  AE1A               	btfss	___awmod@divisor+1,7,c
  4572  0038C8  D005               	goto	l3317
  4573  0038CA  6C19               	negf	___awmod@divisor,c
  4574  0038CC  1E1A               	comf	___awmod@divisor+1,f,c
  4575  0038CE  B0D8               	btfsc	status,0,c
  4576  0038D0  2A1A               	incf	___awmod@divisor+1,f,c
  4577  0038D2  D000               	goto	l3317
  4578  0038D4                     l3317:
  4579  0038D4  5019               	movf	___awmod@divisor,w,c
  4580  0038D6  101A               	iorwf	___awmod@divisor+1,w,c
  4581  0038D8  B4D8               	btfsc	status,2,c
  4582  0038DA  D01D               	goto	l3333
  4583  0038DC  0E01               	movlw	1
  4584  0038DE  6E1B               	movwf	___awmod@counter,c
  4585  0038E0  D005               	goto	l3323
  4586  0038E2                     l3321:
  4587  0038E2  90D8               	bcf	status,0,c
  4588  0038E4  3619               	rlcf	___awmod@divisor,f,c
  4589  0038E6  361A               	rlcf	___awmod@divisor+1,f,c
  4590  0038E8  2A1B               	incf	___awmod@counter,f,c
  4591  0038EA  D000               	goto	l3323
  4592  0038EC                     l3323:
  4593  0038EC  BE1A               	btfsc	___awmod@divisor+1,7,c
  4594  0038EE  D002               	goto	l3325
  4595  0038F0  D7F8               	goto	l3321
  4596  0038F2  D000               	goto	l3325
  4597  0038F4                     l3325:
  4598  0038F4  5019               	movf	___awmod@divisor,w,c
  4599  0038F6  5C17               	subwf	___awmod@dividend,w,c
  4600  0038F8  501A               	movf	___awmod@divisor+1,w,c
  4601  0038FA  5818               	subwfb	___awmod@dividend+1,w,c
  4602  0038FC  A0D8               	btfss	status,0,c
  4603  0038FE  D005               	goto	l3329
  4604  003900  5019               	movf	___awmod@divisor,w,c
  4605  003902  5E17               	subwf	___awmod@dividend,f,c
  4606  003904  501A               	movf	___awmod@divisor+1,w,c
  4607  003906  5A18               	subwfb	___awmod@dividend+1,f,c
  4608  003908  D000               	goto	l3329
  4609  00390A                     l3329:
  4610  00390A  90D8               	bcf	status,0,c
  4611  00390C  321A               	rrcf	___awmod@divisor+1,f,c
  4612  00390E  3219               	rrcf	___awmod@divisor,f,c
  4613  003910  2E1B               	decfsz	___awmod@counter,f,c
  4614  003912  D7F0               	goto	l3325
  4615  003914  D000               	goto	l3333
  4616  003916                     l3333:
  4617  003916  501C               	movf	___awmod@sign,w,c
  4618  003918  B4D8               	btfsc	status,2,c
  4619  00391A  D005               	goto	l3337
  4620  00391C  6C17               	negf	___awmod@dividend,c
  4621  00391E  1E18               	comf	___awmod@dividend+1,f,c
  4622  003920  B0D8               	btfsc	status,0,c
  4623  003922  2A18               	incf	___awmod@dividend+1,f,c
  4624  003924  D000               	goto	l3337
  4625  003926                     l3337:
  4626  003926  C017  F017         	movff	___awmod@dividend,?___awmod
  4627  00392A  C018  F018         	movff	___awmod@dividend+1,?___awmod+1
  4628  00392E  0012               	return	
  4629  003930  0012               	return		;funcret
  4630  003932                     __end_of___awmod:
  4631                           	opt stack 0
  4632                           tblptru	equ	0xFF8
  4633                           tblptrh	equ	0xFF7
  4634                           tblptrl	equ	0xFF6
  4635                           tablat	equ	0xFF5
  4636                           prodh	equ	0xFF4
  4637                           prodl	equ	0xFF3
  4638                           intcon	equ	0xFF2
  4639                           postinc0	equ	0xFEE
  4640                           wreg	equ	0xFE8
  4641                           postinc2	equ	0xFDE
  4642                           postdec2	equ	0xFDD
  4643                           fsr2h	equ	0xFDA
  4644                           fsr2l	equ	0xFD9
  4645                           status	equ	0xFD8
  4646                           
  4647 ;; *************** function __tdiv_to_l_ *****************
  4648 ;; Defined at:
  4649 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  f1              3   22[COMRAM] float 
  4652 ;;  f2              3   25[COMRAM] float 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  quot            4   31[COMRAM] unsigned long 
  4655 ;;  exp1            1   36[COMRAM] unsigned char 
  4656 ;;  cntr            1   35[COMRAM] unsigned char 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  4   22[COMRAM] unsigned long 
  4659 ;; Registers used:
  4660 ;;		wreg, status,2, status,0
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4666 ;;      Params:         6       0       0       0       0       0       0
  4667 ;;      Locals:         6       0       0       0       0       0       0
  4668 ;;      Temps:          3       0       0       0       0       0       0
  4669 ;;      Totals:        15       0       0       0       0       0       0
  4670 ;;Total ram usage:       15 bytes
  4671 ;; Hardware stack levels used:    1
  4672 ;; Hardware stack levels required when called:    4
  4673 ;; This function calls:
  4674 ;;		Nothing
  4675 ;; This function is called by:
  4676 ;;		_printf
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           	psect	text7
  4681  002DA2                     __ptext7:
  4682                           	opt stack 0
  4683  002DA2                     __tdiv_to_l_:
  4684                           	opt stack 25
  4685                           
  4686                           ;incstack = 0
  4687  002DA2  C019  F01D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4688  002DA6  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4689  002DA8  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4690  002DAA  3418               	rlcf	__tdiv_to_l_@f1+1,w,c
  4691  002DAC  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4692  002DAE  E301               	bnc	u3141
  4693  002DB0  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4694  002DB2                     u3141:
  4695  002DB2  501D               	movf	??__tdiv_to_l_,w,c
  4696  002DB4  6E25               	movwf	__tdiv_to_l_@exp1,c
  4697  002DB6  5025               	movf	__tdiv_to_l_@exp1,w,c
  4698  002DB8  A4D8               	btfss	status,2,c
  4699  002DBA  D009               	goto	l3595
  4700  002DBC  0E00               	movlw	0
  4701  002DBE  6E17               	movwf	?__tdiv_to_l_,c
  4702  002DC0  0E00               	movlw	0
  4703  002DC2  6E18               	movwf	?__tdiv_to_l_+1,c
  4704  002DC4  0E00               	movlw	0
  4705  002DC6  6E19               	movwf	?__tdiv_to_l_+2,c
  4706  002DC8  0E00               	movlw	0
  4707  002DCA  6E1A               	movwf	?__tdiv_to_l_+3,c
  4708  002DCC  0012               	return	
  4709  002DCE                     l3595:
  4710  002DCE  C01C  F01D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4711  002DD2  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4712  002DD4  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4713  002DD6  341B               	rlcf	__tdiv_to_l_@f2+1,w,c
  4714  002DD8  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4715  002DDA  E301               	bnc	u3161
  4716  002DDC  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4717  002DDE                     u3161:
  4718  002DDE  501D               	movf	??__tdiv_to_l_,w,c
  4719  002DE0  6E24               	movwf	__tdiv_to_l_@cntr,c
  4720  002DE2  5024               	movf	__tdiv_to_l_@cntr,w,c
  4721  002DE4  A4D8               	btfss	status,2,c
  4722  002DE6  D009               	goto	l3601
  4723  002DE8  0E00               	movlw	0
  4724  002DEA  6E17               	movwf	?__tdiv_to_l_,c
  4725  002DEC  0E00               	movlw	0
  4726  002DEE  6E18               	movwf	?__tdiv_to_l_+1,c
  4727  002DF0  0E00               	movlw	0
  4728  002DF2  6E19               	movwf	?__tdiv_to_l_+2,c
  4729  002DF4  0E00               	movlw	0
  4730  002DF6  6E1A               	movwf	?__tdiv_to_l_+3,c
  4731  002DF8  0012               	return	
  4732  002DFA                     l3601:
  4733  002DFA  8E18               	bsf	__tdiv_to_l_@f1+1,7,c
  4734  002DFC  0EFF               	movlw	255
  4735  002DFE  1617               	andwf	__tdiv_to_l_@f1,f,c
  4736  002E00  0EFF               	movlw	255
  4737  002E02  1618               	andwf	__tdiv_to_l_@f1+1,f,c
  4738  002E04  0E00               	movlw	0
  4739  002E06  1619               	andwf	__tdiv_to_l_@f1+2,f,c
  4740  002E08  8E1B               	bsf	__tdiv_to_l_@f2+1,7,c
  4741  002E0A  0EFF               	movlw	255
  4742  002E0C  161A               	andwf	__tdiv_to_l_@f2,f,c
  4743  002E0E  0EFF               	movlw	255
  4744  002E10  161B               	andwf	__tdiv_to_l_@f2+1,f,c
  4745  002E12  0E00               	movlw	0
  4746  002E14  161C               	andwf	__tdiv_to_l_@f2+2,f,c
  4747  002E16  0E00               	movlw	0
  4748  002E18  6E20               	movwf	__tdiv_to_l_@quot,c
  4749  002E1A  0E00               	movlw	0
  4750  002E1C  6E21               	movwf	__tdiv_to_l_@quot+1,c
  4751  002E1E  0E00               	movlw	0
  4752  002E20  6E22               	movwf	__tdiv_to_l_@quot+2,c
  4753  002E22  0E00               	movlw	0
  4754  002E24  6E23               	movwf	__tdiv_to_l_@quot+3,c
  4755  002E26  0E7F               	movlw	127
  4756  002E28  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  4757  002E2A  5024               	movf	__tdiv_to_l_@cntr,w,c
  4758  002E2C  0F98               	addlw	152
  4759  002E2E  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  4760  002E30  0E18               	movlw	24
  4761  002E32  6E24               	movwf	__tdiv_to_l_@cntr,c
  4762  002E34                     l1115:
  4763  002E34  90D8               	bcf	status,0,c
  4764  002E36  3620               	rlcf	__tdiv_to_l_@quot,f,c
  4765  002E38  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  4766  002E3A  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  4767  002E3C  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  4768  002E3E  501A               	movf	__tdiv_to_l_@f2,w,c
  4769  002E40  5C17               	subwf	__tdiv_to_l_@f1,w,c
  4770  002E42  501B               	movf	__tdiv_to_l_@f2+1,w,c
  4771  002E44  5818               	subwfb	__tdiv_to_l_@f1+1,w,c
  4772  002E46  501C               	movf	__tdiv_to_l_@f2+2,w,c
  4773  002E48  5819               	subwfb	__tdiv_to_l_@f1+2,w,c
  4774  002E4A  A0D8               	btfss	status,0,c
  4775  002E4C  D007               	goto	l1116
  4776  002E4E  501A               	movf	__tdiv_to_l_@f2,w,c
  4777  002E50  5E17               	subwf	__tdiv_to_l_@f1,f,c
  4778  002E52  501B               	movf	__tdiv_to_l_@f2+1,w,c
  4779  002E54  5A18               	subwfb	__tdiv_to_l_@f1+1,f,c
  4780  002E56  501C               	movf	__tdiv_to_l_@f2+2,w,c
  4781  002E58  5A19               	subwfb	__tdiv_to_l_@f1+2,f,c
  4782  002E5A  8020               	bsf	__tdiv_to_l_@quot,0,c
  4783  002E5C                     l1116:
  4784  002E5C  90D8               	bcf	status,0,c
  4785  002E5E  3617               	rlcf	__tdiv_to_l_@f1,f,c
  4786  002E60  3618               	rlcf	__tdiv_to_l_@f1+1,f,c
  4787  002E62  3619               	rlcf	__tdiv_to_l_@f1+2,f,c
  4788  002E64  2E24               	decfsz	__tdiv_to_l_@cntr,f,c
  4789  002E66  D7E6               	goto	l1115
  4790  002E68  D000               	goto	l3623
  4791  002E6A                     l3623:
  4792  002E6A  AE25               	btfss	__tdiv_to_l_@exp1,7,c
  4793  002E6C  D017               	goto	l3635
  4794  002E6E  5025               	movf	__tdiv_to_l_@exp1,w,c
  4795  002E70  0A80               	xorlw	128
  4796  002E72  0F97               	addlw	151
  4797  002E74  B0D8               	btfsc	status,0,c
  4798  002E76  D00A               	goto	l3631
  4799  002E78  0E00               	movlw	0
  4800  002E7A  6E17               	movwf	?__tdiv_to_l_,c
  4801  002E7C  0E00               	movlw	0
  4802  002E7E  6E18               	movwf	?__tdiv_to_l_+1,c
  4803  002E80  0E00               	movlw	0
  4804  002E82  6E19               	movwf	?__tdiv_to_l_+2,c
  4805  002E84  0E00               	movlw	0
  4806  002E86  6E1A               	movwf	?__tdiv_to_l_+3,c
  4807  002E88  0012               	return	
  4808  002E8A  D000               	goto	l3631
  4809  002E8C                     l3631:
  4810  002E8C  90D8               	bcf	status,0,c
  4811  002E8E  3223               	rrcf	__tdiv_to_l_@quot+3,f,c
  4812  002E90  3222               	rrcf	__tdiv_to_l_@quot+2,f,c
  4813  002E92  3221               	rrcf	__tdiv_to_l_@quot+1,f,c
  4814  002E94  3220               	rrcf	__tdiv_to_l_@quot,f,c
  4815  002E96  3E25               	incfsz	__tdiv_to_l_@exp1,f,c
  4816  002E98  D7F9               	goto	l3631
  4817  002E9A  D017               	goto	l1122
  4818  002E9C                     l3635:
  4819  002E9C  0E17               	movlw	23
  4820  002E9E  6425               	cpfsgt	__tdiv_to_l_@exp1,c
  4821  002EA0  D011               	goto	l3643
  4822  002EA2  0E00               	movlw	0
  4823  002EA4  6E17               	movwf	?__tdiv_to_l_,c
  4824  002EA6  0E00               	movlw	0
  4825  002EA8  6E18               	movwf	?__tdiv_to_l_+1,c
  4826  002EAA  0E00               	movlw	0
  4827  002EAC  6E19               	movwf	?__tdiv_to_l_+2,c
  4828  002EAE  0E00               	movlw	0
  4829  002EB0  6E1A               	movwf	?__tdiv_to_l_+3,c
  4830  002EB2  0012               	return	
  4831  002EB4  D007               	goto	l3643
  4832  002EB6                     l3641:
  4833  002EB6  90D8               	bcf	status,0,c
  4834  002EB8  3620               	rlcf	__tdiv_to_l_@quot,f,c
  4835  002EBA  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  4836  002EBC  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  4837  002EBE  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  4838  002EC0  0625               	decf	__tdiv_to_l_@exp1,f,c
  4839  002EC2  D000               	goto	l3643
  4840  002EC4                     l3643:
  4841  002EC4  5025               	movf	__tdiv_to_l_@exp1,w,c
  4842  002EC6  A4D8               	btfss	status,2,c
  4843  002EC8  D7F6               	goto	l3641
  4844  002ECA                     l1122:
  4845  002ECA  C020  F017         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4846  002ECE  C021  F018         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4847  002ED2  C022  F019         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4848  002ED6  C023  F01A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4849  002EDA  0012               	return		;funcret
  4850  002EDC                     __end_of__tdiv_to_l_:
  4851                           	opt stack 0
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           postinc0	equ	0xFEE
  4860                           wreg	equ	0xFE8
  4861                           postinc2	equ	0xFDE
  4862                           postdec2	equ	0xFDD
  4863                           fsr2h	equ	0xFDA
  4864                           fsr2l	equ	0xFD9
  4865                           status	equ	0xFD8
  4866                           
  4867 ;; *************** function __div_to_l_ *****************
  4868 ;; Defined at:
  4869 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  f1              3   22[COMRAM] unsigned long 
  4872 ;;  f2              3   25[COMRAM] unsigned long 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  quot            4   28[COMRAM] unsigned long 
  4875 ;;  exp1            1   33[COMRAM] unsigned char 
  4876 ;;  cntr            1   32[COMRAM] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  4   22[COMRAM] unsigned long 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4886 ;;      Params:         6       0       0       0       0       0       0
  4887 ;;      Locals:         6       0       0       0       0       0       0
  4888 ;;      Temps:          0       0       0       0       0       0       0
  4889 ;;      Totals:        12       0       0       0       0       0       0
  4890 ;;Total ram usage:       12 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    4
  4893 ;; This function calls:
  4894 ;;		Nothing
  4895 ;; This function is called by:
  4896 ;;		_printf
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text8
  4901  002EDC                     __ptext8:
  4902                           	opt stack 0
  4903  002EDC                     __div_to_l_:
  4904                           	opt stack 25
  4905                           
  4906                           ;incstack = 0
  4907  002EDC  3419               	rlcf	__div_to_l_@f1+2,w,c
  4908  002EDE  341A               	rlcf	__div_to_l_@f1+3,w,c
  4909  002EE0  6E22               	movwf	__div_to_l_@exp1,c
  4910  002EE2  5022               	movf	__div_to_l_@exp1,w,c
  4911  002EE4  A4D8               	btfss	status,2,c
  4912  002EE6  D009               	goto	l3651
  4913  002EE8  0E00               	movlw	0
  4914  002EEA  6E17               	movwf	?__div_to_l_,c
  4915  002EEC  0E00               	movlw	0
  4916  002EEE  6E18               	movwf	?__div_to_l_+1,c
  4917  002EF0  0E00               	movlw	0
  4918  002EF2  6E19               	movwf	?__div_to_l_+2,c
  4919  002EF4  0E00               	movlw	0
  4920  002EF6  6E1A               	movwf	?__div_to_l_+3,c
  4921  002EF8  0012               	return	
  4922  002EFA                     l3651:
  4923  002EFA  341C               	rlcf	__div_to_l_@f2+2,w,c
  4924  002EFC  341D               	rlcf	__div_to_l_@f2+3,w,c
  4925  002EFE  6E21               	movwf	__div_to_l_@cntr,c
  4926  002F00  5021               	movf	__div_to_l_@cntr,w,c
  4927  002F02  A4D8               	btfss	status,2,c
  4928  002F04  D009               	goto	l3657
  4929  002F06  0E00               	movlw	0
  4930  002F08  6E17               	movwf	?__div_to_l_,c
  4931  002F0A  0E00               	movlw	0
  4932  002F0C  6E18               	movwf	?__div_to_l_+1,c
  4933  002F0E  0E00               	movlw	0
  4934  002F10  6E19               	movwf	?__div_to_l_+2,c
  4935  002F12  0E00               	movlw	0
  4936  002F14  6E1A               	movwf	?__div_to_l_+3,c
  4937  002F16  0012               	return	
  4938  002F18                     l3657:
  4939  002F18  8E19               	bsf	__div_to_l_@f1+2,7,c
  4940  002F1A  0EFF               	movlw	255
  4941  002F1C  1617               	andwf	__div_to_l_@f1,f,c
  4942  002F1E  0EFF               	movlw	255
  4943  002F20  1618               	andwf	__div_to_l_@f1+1,f,c
  4944  002F22  0EFF               	movlw	255
  4945  002F24  1619               	andwf	__div_to_l_@f1+2,f,c
  4946  002F26  0E00               	movlw	0
  4947  002F28  161A               	andwf	__div_to_l_@f1+3,f,c
  4948  002F2A  8E1C               	bsf	__div_to_l_@f2+2,7,c
  4949  002F2C  0EFF               	movlw	255
  4950  002F2E  161A               	andwf	__div_to_l_@f2,f,c
  4951  002F30  0EFF               	movlw	255
  4952  002F32  161B               	andwf	__div_to_l_@f2+1,f,c
  4953  002F34  0EFF               	movlw	255
  4954  002F36  161C               	andwf	__div_to_l_@f2+2,f,c
  4955  002F38  0E00               	movlw	0
  4956  002F3A  161D               	andwf	__div_to_l_@f2+3,f,c
  4957  002F3C  0E00               	movlw	0
  4958  002F3E  6E1D               	movwf	__div_to_l_@quot,c
  4959  002F40  0E00               	movlw	0
  4960  002F42  6E1E               	movwf	__div_to_l_@quot+1,c
  4961  002F44  0E00               	movlw	0
  4962  002F46  6E1F               	movwf	__div_to_l_@quot+2,c
  4963  002F48  0E00               	movlw	0
  4964  002F4A  6E20               	movwf	__div_to_l_@quot+3,c
  4965  002F4C  0E7F               	movlw	127
  4966  002F4E  5E22               	subwf	__div_to_l_@exp1,f,c
  4967  002F50  5021               	movf	__div_to_l_@cntr,w,c
  4968  002F52  0FA0               	addlw	160
  4969  002F54  5E22               	subwf	__div_to_l_@exp1,f,c
  4970  002F56  0E20               	movlw	32
  4971  002F58  6E21               	movwf	__div_to_l_@cntr,c
  4972  002F5A  D000               	goto	l3671
  4973  002F5C                     l3671:
  4974  002F5C  90D8               	bcf	status,0,c
  4975  002F5E  361D               	rlcf	__div_to_l_@quot,f,c
  4976  002F60  361E               	rlcf	__div_to_l_@quot+1,f,c
  4977  002F62  361F               	rlcf	__div_to_l_@quot+2,f,c
  4978  002F64  3620               	rlcf	__div_to_l_@quot+3,f,c
  4979  002F66  501A               	movf	__div_to_l_@f2,w,c
  4980  002F68  5C17               	subwf	__div_to_l_@f1,w,c
  4981  002F6A  501B               	movf	__div_to_l_@f2+1,w,c
  4982  002F6C  5818               	subwfb	__div_to_l_@f1+1,w,c
  4983  002F6E  501C               	movf	__div_to_l_@f2+2,w,c
  4984  002F70  5819               	subwfb	__div_to_l_@f1+2,w,c
  4985  002F72  501D               	movf	__div_to_l_@f2+3,w,c
  4986  002F74  581A               	subwfb	__div_to_l_@f1+3,w,c
  4987  002F76  A0D8               	btfss	status,0,c
  4988  002F78  D00A               	goto	l3679
  4989  002F7A  501A               	movf	__div_to_l_@f2,w,c
  4990  002F7C  5E17               	subwf	__div_to_l_@f1,f,c
  4991  002F7E  501B               	movf	__div_to_l_@f2+1,w,c
  4992  002F80  5A18               	subwfb	__div_to_l_@f1+1,f,c
  4993  002F82  501C               	movf	__div_to_l_@f2+2,w,c
  4994  002F84  5A19               	subwfb	__div_to_l_@f1+2,f,c
  4995  002F86  501D               	movf	__div_to_l_@f2+3,w,c
  4996  002F88  5A1A               	subwfb	__div_to_l_@f1+3,f,c
  4997  002F8A  801D               	bsf	__div_to_l_@quot,0,c
  4998  002F8C  D000               	goto	l3679
  4999  002F8E                     l3679:
  5000  002F8E  90D8               	bcf	status,0,c
  5001  002F90  3617               	rlcf	__div_to_l_@f1,f,c
  5002  002F92  3618               	rlcf	__div_to_l_@f1+1,f,c
  5003  002F94  3619               	rlcf	__div_to_l_@f1+2,f,c
  5004  002F96  361A               	rlcf	__div_to_l_@f1+3,f,c
  5005  002F98  2E21               	decfsz	__div_to_l_@cntr,f,c
  5006  002F9A  D7E0               	goto	l3671
  5007  002F9C  D000               	goto	l3683
  5008  002F9E                     l3683:
  5009  002F9E  AE22               	btfss	__div_to_l_@exp1,7,c
  5010  002FA0  D017               	goto	l3695
  5011  002FA2  5022               	movf	__div_to_l_@exp1,w,c
  5012  002FA4  0A80               	xorlw	128
  5013  002FA6  0F9F               	addlw	159
  5014  002FA8  B0D8               	btfsc	status,0,c
  5015  002FAA  D00A               	goto	l3691
  5016  002FAC  0E00               	movlw	0
  5017  002FAE  6E17               	movwf	?__div_to_l_,c
  5018  002FB0  0E00               	movlw	0
  5019  002FB2  6E18               	movwf	?__div_to_l_+1,c
  5020  002FB4  0E00               	movlw	0
  5021  002FB6  6E19               	movwf	?__div_to_l_+2,c
  5022  002FB8  0E00               	movlw	0
  5023  002FBA  6E1A               	movwf	?__div_to_l_+3,c
  5024  002FBC  0012               	return	
  5025  002FBE  D000               	goto	l3691
  5026  002FC0                     l3691:
  5027  002FC0  90D8               	bcf	status,0,c
  5028  002FC2  3220               	rrcf	__div_to_l_@quot+3,f,c
  5029  002FC4  321F               	rrcf	__div_to_l_@quot+2,f,c
  5030  002FC6  321E               	rrcf	__div_to_l_@quot+1,f,c
  5031  002FC8  321D               	rrcf	__div_to_l_@quot,f,c
  5032  002FCA  3E22               	incfsz	__div_to_l_@exp1,f,c
  5033  002FCC  D7F9               	goto	l3691
  5034  002FCE  D017               	goto	l1001
  5035  002FD0                     l3695:
  5036  002FD0  0E1F               	movlw	31
  5037  002FD2  6422               	cpfsgt	__div_to_l_@exp1,c
  5038  002FD4  D011               	goto	l3703
  5039  002FD6  0E00               	movlw	0
  5040  002FD8  6E17               	movwf	?__div_to_l_,c
  5041  002FDA  0E00               	movlw	0
  5042  002FDC  6E18               	movwf	?__div_to_l_+1,c
  5043  002FDE  0E00               	movlw	0
  5044  002FE0  6E19               	movwf	?__div_to_l_+2,c
  5045  002FE2  0E00               	movlw	0
  5046  002FE4  6E1A               	movwf	?__div_to_l_+3,c
  5047  002FE6  0012               	return	
  5048  002FE8  D007               	goto	l3703
  5049  002FEA                     l3701:
  5050  002FEA  90D8               	bcf	status,0,c
  5051  002FEC  361D               	rlcf	__div_to_l_@quot,f,c
  5052  002FEE  361E               	rlcf	__div_to_l_@quot+1,f,c
  5053  002FF0  361F               	rlcf	__div_to_l_@quot+2,f,c
  5054  002FF2  3620               	rlcf	__div_to_l_@quot+3,f,c
  5055  002FF4  0622               	decf	__div_to_l_@exp1,f,c
  5056  002FF6  D000               	goto	l3703
  5057  002FF8                     l3703:
  5058  002FF8  5022               	movf	__div_to_l_@exp1,w,c
  5059  002FFA  A4D8               	btfss	status,2,c
  5060  002FFC  D7F6               	goto	l3701
  5061  002FFE                     l1001:
  5062  002FFE  C01D  F017         	movff	__div_to_l_@quot,?__div_to_l_
  5063  003002  C01E  F018         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5064  003006  C01F  F019         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5065  00300A  C020  F01A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5066  00300E  0012               	return		;funcret
  5067  003010                     __end_of__div_to_l_:
  5068                           	opt stack 0
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           intcon	equ	0xFF2
  5076                           postinc0	equ	0xFEE
  5077                           wreg	equ	0xFE8
  5078                           postinc2	equ	0xFDE
  5079                           postdec2	equ	0xFDD
  5080                           fsr2h	equ	0xFDA
  5081                           fsr2l	equ	0xFD9
  5082                           status	equ	0xFD8
  5083                           
  5084 ;; *************** function ___lltoft *****************
  5085 ;; Defined at:
  5086 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  c               4   30[COMRAM] unsigned long 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  exp             1   38[COMRAM] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  3   30[COMRAM] float 
  5093 ;; Registers used:
  5094 ;;		wreg, status,2, status,0, cstack
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5100 ;;      Params:         4       0       0       0       0       0       0
  5101 ;;      Locals:         1       0       0       0       0       0       0
  5102 ;;      Temps:          4       0       0       0       0       0       0
  5103 ;;      Totals:         9       0       0       0       0       0       0
  5104 ;;Total ram usage:        9 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    5
  5107 ;; This function calls:
  5108 ;;		___ftpack
  5109 ;; This function is called by:
  5110 ;;		_printf
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text9
  5115  003A12                     __ptext9:
  5116                           	opt stack 0
  5117  003A12                     ___lltoft:
  5118                           	opt stack 24
  5119                           
  5120                           ;incstack = 0
  5121  003A12  0E8E               	movlw	142
  5122  003A14  6E27               	movwf	___lltoft@exp,c
  5123  003A16  D007               	goto	l5101
  5124  003A18                     l5099:
  5125  003A18  90D8               	bcf	status,0,c
  5126  003A1A  3222               	rrcf	___lltoft@c+3,f,c
  5127  003A1C  3221               	rrcf	___lltoft@c+2,f,c
  5128  003A1E  3220               	rrcf	___lltoft@c+1,f,c
  5129  003A20  321F               	rrcf	___lltoft@c,f,c
  5130  003A22  2A27               	incf	___lltoft@exp,f,c
  5131  003A24  D000               	goto	l5101
  5132  003A26                     l5101:
  5133  003A26  0E00               	movlw	0
  5134  003A28  141F               	andwf	___lltoft@c,w,c
  5135  003A2A  6E23               	movwf	??___lltoft& (0+255),c
  5136  003A2C  0E00               	movlw	0
  5137  003A2E  1420               	andwf	___lltoft@c+1,w,c
  5138  003A30  6E24               	movwf	(??___lltoft+1)& (0+255),c
  5139  003A32  0E00               	movlw	0
  5140  003A34  1421               	andwf	___lltoft@c+2,w,c
  5141  003A36  6E25               	movwf	(??___lltoft+2)& (0+255),c
  5142  003A38  0EFF               	movlw	255
  5143  003A3A  1422               	andwf	___lltoft@c+3,w,c
  5144  003A3C  6E26               	movwf	(??___lltoft+3)& (0+255),c
  5145  003A3E  5023               	movf	??___lltoft,w,c
  5146  003A40  1024               	iorwf	??___lltoft+1,w,c
  5147  003A42  1025               	iorwf	??___lltoft+2,w,c
  5148  003A44  1026               	iorwf	??___lltoft+3,w,c
  5149  003A46  A4D8               	btfss	status,2,c
  5150  003A48  D7E7               	goto	l5099
  5151  003A4A  C01F  F017         	movff	___lltoft@c,___ftpack@arg
  5152  003A4E  C020  F018         	movff	___lltoft@c+1,___ftpack@arg+1
  5153  003A52  C021  F019         	movff	___lltoft@c+2,___ftpack@arg+2
  5154  003A56  C027  F01A         	movff	___lltoft@exp,___ftpack@exp
  5155  003A5A  0E00               	movlw	0
  5156  003A5C  6E1B               	movwf	___ftpack@sign,c
  5157  003A5E  ECC1  F019         	call	___ftpack	;wreg free
  5158  003A62  C017  F01F         	movff	?___ftpack,?___lltoft
  5159  003A66  C018  F020         	movff	?___ftpack+1,?___lltoft+1
  5160  003A6A  C019  F021         	movff	?___ftpack+2,?___lltoft+2
  5161  003A6E  0012               	return	
  5162  003A70  0012               	return		;funcret
  5163  003A72                     __end_of___lltoft:
  5164                           	opt stack 0
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           intcon	equ	0xFF2
  5172                           postinc0	equ	0xFEE
  5173                           wreg	equ	0xFE8
  5174                           postinc2	equ	0xFDE
  5175                           postdec2	equ	0xFDD
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           
  5180 ;; *************** function ___llmod *****************
  5181 ;; Defined at:
  5182 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;  dividend        4   35[COMRAM] unsigned long 
  5185 ;;  divisor         4   39[COMRAM] unsigned long 
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;  counter         1   43[COMRAM] unsigned char 
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  4   35[COMRAM] unsigned long 
  5190 ;; Registers used:
  5191 ;;		wreg, status,2, status,0
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5197 ;;      Params:         8       0       0       0       0       0       0
  5198 ;;      Locals:         1       0       0       0       0       0       0
  5199 ;;      Temps:          0       0       0       0       0       0       0
  5200 ;;      Totals:         9       0       0       0       0       0       0
  5201 ;;Total ram usage:        9 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    4
  5204 ;; This function calls:
  5205 ;;		Nothing
  5206 ;; This function is called by:
  5207 ;;		_printf
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text10
  5212  003932                     __ptext10:
  5213                           	opt stack 0
  5214  003932                     ___llmod:
  5215                           	opt stack 25
  5216                           
  5217                           ;incstack = 0
  5218  003932  5028               	movf	___llmod@divisor,w,c
  5219  003934  1029               	iorwf	___llmod@divisor+1,w,c
  5220  003936  102A               	iorwf	___llmod@divisor+2,w,c
  5221  003938  102B               	iorwf	___llmod@divisor+3,w,c
  5222  00393A  B4D8               	btfsc	status,2,c
  5223  00393C  D029               	goto	l1212
  5224  00393E  0E01               	movlw	1
  5225  003940  6E2C               	movwf	___llmod@counter,c
  5226  003942  D007               	goto	l3855
  5227  003944                     l3853:
  5228  003944  90D8               	bcf	status,0,c
  5229  003946  3628               	rlcf	___llmod@divisor,f,c
  5230  003948  3629               	rlcf	___llmod@divisor+1,f,c
  5231  00394A  362A               	rlcf	___llmod@divisor+2,f,c
  5232  00394C  362B               	rlcf	___llmod@divisor+3,f,c
  5233  00394E  2A2C               	incf	___llmod@counter,f,c
  5234  003950  D000               	goto	l3855
  5235  003952                     l3855:
  5236  003952  BE2B               	btfsc	___llmod@divisor+3,7,c
  5237  003954  D002               	goto	l3857
  5238  003956  D7F6               	goto	l3853
  5239  003958  D000               	goto	l3857
  5240  00395A                     l3857:
  5241  00395A  5028               	movf	___llmod@divisor,w,c
  5242  00395C  5C24               	subwf	___llmod@dividend,w,c
  5243  00395E  5029               	movf	___llmod@divisor+1,w,c
  5244  003960  5825               	subwfb	___llmod@dividend+1,w,c
  5245  003962  502A               	movf	___llmod@divisor+2,w,c
  5246  003964  5826               	subwfb	___llmod@dividend+2,w,c
  5247  003966  502B               	movf	___llmod@divisor+3,w,c
  5248  003968  5827               	subwfb	___llmod@dividend+3,w,c
  5249  00396A  A0D8               	btfss	status,0,c
  5250  00396C  D009               	goto	l3861
  5251  00396E  5028               	movf	___llmod@divisor,w,c
  5252  003970  5E24               	subwf	___llmod@dividend,f,c
  5253  003972  5029               	movf	___llmod@divisor+1,w,c
  5254  003974  5A25               	subwfb	___llmod@dividend+1,f,c
  5255  003976  502A               	movf	___llmod@divisor+2,w,c
  5256  003978  5A26               	subwfb	___llmod@dividend+2,f,c
  5257  00397A  502B               	movf	___llmod@divisor+3,w,c
  5258  00397C  5A27               	subwfb	___llmod@dividend+3,f,c
  5259  00397E  D000               	goto	l3861
  5260  003980                     l3861:
  5261  003980  90D8               	bcf	status,0,c
  5262  003982  322B               	rrcf	___llmod@divisor+3,f,c
  5263  003984  322A               	rrcf	___llmod@divisor+2,f,c
  5264  003986  3229               	rrcf	___llmod@divisor+1,f,c
  5265  003988  3228               	rrcf	___llmod@divisor,f,c
  5266  00398A  2E2C               	decfsz	___llmod@counter,f,c
  5267  00398C  D7E6               	goto	l3857
  5268  00398E  D000               	goto	l1212
  5269  003990                     l1212:
  5270  003990  C024  F024         	movff	___llmod@dividend,?___llmod
  5271  003994  C025  F025         	movff	___llmod@dividend+1,?___llmod+1
  5272  003998  C026  F026         	movff	___llmod@dividend+2,?___llmod+2
  5273  00399C  C027  F027         	movff	___llmod@dividend+3,?___llmod+3
  5274  0039A0  0012               	return		;funcret
  5275  0039A2                     __end_of___llmod:
  5276                           	opt stack 0
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           intcon	equ	0xFF2
  5284                           postinc0	equ	0xFEE
  5285                           wreg	equ	0xFE8
  5286                           postinc2	equ	0xFDE
  5287                           postdec2	equ	0xFDD
  5288                           fsr2h	equ	0xFDA
  5289                           fsr2l	equ	0xFD9
  5290                           status	equ	0xFD8
  5291                           
  5292 ;; *************** function ___lldiv *****************
  5293 ;; Defined at:
  5294 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;  dividend        4   22[COMRAM] unsigned long 
  5297 ;;  divisor         4   26[COMRAM] unsigned long 
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;  quotient        4   30[COMRAM] unsigned long 
  5300 ;;  counter         1   34[COMRAM] unsigned char 
  5301 ;; Return value:  Size  Location     Type
  5302 ;;                  4   22[COMRAM] unsigned long 
  5303 ;; Registers used:
  5304 ;;		wreg, status,2, status,0
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5310 ;;      Params:         8       0       0       0       0       0       0
  5311 ;;      Locals:         5       0       0       0       0       0       0
  5312 ;;      Temps:          0       0       0       0       0       0       0
  5313 ;;      Totals:        13       0       0       0       0       0       0
  5314 ;;Total ram usage:       13 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    4
  5317 ;; This function calls:
  5318 ;;		Nothing
  5319 ;; This function is called by:
  5320 ;;		_printf
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           	psect	text11
  5325  003824                     __ptext11:
  5326                           	opt stack 0
  5327  003824                     ___lldiv:
  5328                           	opt stack 25
  5329                           
  5330                           ;incstack = 0
  5331  003824  0E00               	movlw	0
  5332  003826  6E1F               	movwf	___lldiv@quotient,c
  5333  003828  0E00               	movlw	0
  5334  00382A  6E20               	movwf	___lldiv@quotient+1,c
  5335  00382C  0E00               	movlw	0
  5336  00382E  6E21               	movwf	___lldiv@quotient+2,c
  5337  003830  0E00               	movlw	0
  5338  003832  6E22               	movwf	___lldiv@quotient+3,c
  5339  003834  501B               	movf	___lldiv@divisor,w,c
  5340  003836  101C               	iorwf	___lldiv@divisor+1,w,c
  5341  003838  101D               	iorwf	___lldiv@divisor+2,w,c
  5342  00383A  101E               	iorwf	___lldiv@divisor+3,w,c
  5343  00383C  B4D8               	btfsc	status,2,c
  5344  00383E  D02F               	goto	l1202
  5345  003840  0E01               	movlw	1
  5346  003842  6E23               	movwf	___lldiv@counter,c
  5347  003844  D007               	goto	l3835
  5348  003846                     l3833:
  5349  003846  90D8               	bcf	status,0,c
  5350  003848  361B               	rlcf	___lldiv@divisor,f,c
  5351  00384A  361C               	rlcf	___lldiv@divisor+1,f,c
  5352  00384C  361D               	rlcf	___lldiv@divisor+2,f,c
  5353  00384E  361E               	rlcf	___lldiv@divisor+3,f,c
  5354  003850  2A23               	incf	___lldiv@counter,f,c
  5355  003852  D000               	goto	l3835
  5356  003854                     l3835:
  5357  003854  BE1E               	btfsc	___lldiv@divisor+3,7,c
  5358  003856  D002               	goto	l3837
  5359  003858  D7F6               	goto	l3833
  5360  00385A  D000               	goto	l3837
  5361  00385C                     l3837:
  5362  00385C  90D8               	bcf	status,0,c
  5363  00385E  361F               	rlcf	___lldiv@quotient,f,c
  5364  003860  3620               	rlcf	___lldiv@quotient+1,f,c
  5365  003862  3621               	rlcf	___lldiv@quotient+2,f,c
  5366  003864  3622               	rlcf	___lldiv@quotient+3,f,c
  5367  003866  501B               	movf	___lldiv@divisor,w,c
  5368  003868  5C17               	subwf	___lldiv@dividend,w,c
  5369  00386A  501C               	movf	___lldiv@divisor+1,w,c
  5370  00386C  5818               	subwfb	___lldiv@dividend+1,w,c
  5371  00386E  501D               	movf	___lldiv@divisor+2,w,c
  5372  003870  5819               	subwfb	___lldiv@dividend+2,w,c
  5373  003872  501E               	movf	___lldiv@divisor+3,w,c
  5374  003874  581A               	subwfb	___lldiv@dividend+3,w,c
  5375  003876  A0D8               	btfss	status,0,c
  5376  003878  D00A               	goto	l3845
  5377  00387A  501B               	movf	___lldiv@divisor,w,c
  5378  00387C  5E17               	subwf	___lldiv@dividend,f,c
  5379  00387E  501C               	movf	___lldiv@divisor+1,w,c
  5380  003880  5A18               	subwfb	___lldiv@dividend+1,f,c
  5381  003882  501D               	movf	___lldiv@divisor+2,w,c
  5382  003884  5A19               	subwfb	___lldiv@dividend+2,f,c
  5383  003886  501E               	movf	___lldiv@divisor+3,w,c
  5384  003888  5A1A               	subwfb	___lldiv@dividend+3,f,c
  5385  00388A  801F               	bsf	___lldiv@quotient,0,c
  5386  00388C  D000               	goto	l3845
  5387  00388E                     l3845:
  5388  00388E  90D8               	bcf	status,0,c
  5389  003890  321E               	rrcf	___lldiv@divisor+3,f,c
  5390  003892  321D               	rrcf	___lldiv@divisor+2,f,c
  5391  003894  321C               	rrcf	___lldiv@divisor+1,f,c
  5392  003896  321B               	rrcf	___lldiv@divisor,f,c
  5393  003898  2E23               	decfsz	___lldiv@counter,f,c
  5394  00389A  D7E0               	goto	l3837
  5395  00389C  D000               	goto	l1202
  5396  00389E                     l1202:
  5397  00389E  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  5398  0038A2  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  5399  0038A6  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  5400  0038AA  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  5401  0038AE  0012               	return		;funcret
  5402  0038B0                     __end_of___lldiv:
  5403                           	opt stack 0
  5404                           tblptru	equ	0xFF8
  5405                           tblptrh	equ	0xFF7
  5406                           tblptrl	equ	0xFF6
  5407                           tablat	equ	0xFF5
  5408                           prodh	equ	0xFF4
  5409                           prodl	equ	0xFF3
  5410                           intcon	equ	0xFF2
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           postinc2	equ	0xFDE
  5414                           postdec2	equ	0xFDD
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419 ;; *************** function ___fttol *****************
  5420 ;; Defined at:
  5421 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  f1              3   22[BANK0 ] float 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  lval            4   32[BANK0 ] unsigned long 
  5426 ;;  exp1            1   36[BANK0 ] unsigned char 
  5427 ;;  sign1           1   31[BANK0 ] unsigned char 
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  4   22[BANK0 ] long 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5437 ;;      Params:         0       4       0       0       0       0       0
  5438 ;;      Locals:         0       6       0       0       0       0       0
  5439 ;;      Temps:          0       5       0       0       0       0       0
  5440 ;;      Totals:         0      15       0       0       0       0       0
  5441 ;;Total ram usage:       15 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    4
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		_printf
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	text12
  5452  002B02                     __ptext12:
  5453                           	opt stack 0
  5454  002B02                     ___fttol:
  5455                           	opt stack 25
  5456                           
  5457                           ;incstack = 0
  5458  002B02  C078  F07A         	movff	___fttol@f1+2,??___fttol
  5459  002B06  0100               	movlb	0	; () banked
  5460  002B08  6B7B               	clrf	(??___fttol+1)& (0+255),b
  5461  002B0A  6B7C               	clrf	(??___fttol+2)& (0+255),b
  5462  002B0C  0100               	movlb	0	; () banked
  5463  002B0E  3577               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5464  002B10  0100               	movlb	0	; () banked
  5465  002B12  377A               	rlcf	??___fttol& (0+255),f,b
  5466  002B14  E301               	bnc	u3401
  5467  002B16  817B               	bsf	(??___fttol+1)& (0+255),0,b
  5468  002B18                     u3401:
  5469  002B18  0100               	movlb	0	; () banked
  5470  002B1A  517A               	movf	??___fttol& (0+255),w,b
  5471  002B1C  0100               	movlb	0	; () banked
  5472  002B1E  6F84               	movwf	___fttol@exp1& (0+255),b
  5473  002B20  0100               	movlb	0	; () banked
  5474  002B22  5184               	movf	___fttol@exp1& (0+255),w,b
  5475  002B24  A4D8               	btfss	status,2,c
  5476  002B26  D00A               	goto	l3787
  5477                           
  5478                           ; BSR set to: 0
  5479  002B28  0E00               	movlw	0
  5480  002B2A  0100               	movlb	0	; () banked
  5481  002B2C  6F76               	movwf	?___fttol& (0+255),b
  5482  002B2E  0E00               	movlw	0
  5483  002B30  6F77               	movwf	(?___fttol+1)& (0+255),b
  5484  002B32  0E00               	movlw	0
  5485  002B34  6F78               	movwf	(?___fttol+2)& (0+255),b
  5486  002B36  0E00               	movlw	0
  5487  002B38  6F79               	movwf	(?___fttol+3)& (0+255),b
  5488                           
  5489                           ; BSR set to: 0
  5490  002B3A  0012               	return	
  5491  002B3C                     l3787:
  5492                           
  5493                           ; BSR set to: 0
  5494  002B3C  0E17               	movlw	23
  5495  002B3E  0100               	movlb	0	; () banked
  5496  002B40  6F7A               	movwf	??___fttol& (0+255),b
  5497  002B42  C076  F07B         	movff	___fttol@f1,??___fttol+1
  5498  002B46  C077  F07C         	movff	___fttol@f1+1,??___fttol+2
  5499  002B4A  C078  F07D         	movff	___fttol@f1+2,??___fttol+3
  5500  002B4E  0100               	movlb	0	; () banked
  5501  002B50  297A               	incf	??___fttol& (0+255),w,b
  5502  002B52  0100               	movlb	0	; () banked
  5503  002B54  6F7E               	movwf	(??___fttol+4)& (0+255),b
  5504  002B56  D005               	goto	u3420
  5505  002B58                     u3425:
  5506  002B58  0100               	movlb	0	; () banked
  5507  002B5A  90D8               	bcf	status,0,c
  5508  002B5C  337D               	rrcf	(??___fttol+3)& (0+255),f,b
  5509  002B5E  337C               	rrcf	(??___fttol+2)& (0+255),f,b
  5510  002B60  337B               	rrcf	(??___fttol+1)& (0+255),f,b
  5511  002B62                     u3420:
  5512  002B62  0100               	movlb	0	; () banked
  5513  002B64  2F7E               	decfsz	(??___fttol+4)& (0+255),f,b
  5514  002B66  D7F8               	goto	u3425
  5515  002B68  0100               	movlb	0	; () banked
  5516  002B6A  517B               	movf	(??___fttol+1)& (0+255),w,b
  5517  002B6C  0100               	movlb	0	; () banked
  5518  002B6E  6F7F               	movwf	___fttol@sign1& (0+255),b
  5519                           
  5520                           ; BSR set to: 0
  5521  002B70  0100               	movlb	0	; () banked
  5522  002B72  8F77               	bsf	(___fttol@f1+1)& (0+255),7,b
  5523                           
  5524                           ; BSR set to: 0
  5525  002B74  0EFF               	movlw	255
  5526  002B76  0100               	movlb	0	; () banked
  5527  002B78  1776               	andwf	___fttol@f1& (0+255),f,b
  5528  002B7A  0EFF               	movlw	255
  5529  002B7C  0100               	movlb	0	; () banked
  5530  002B7E  1777               	andwf	(___fttol@f1+1)& (0+255),f,b
  5531  002B80  0E00               	movlw	0
  5532  002B82  0100               	movlb	0	; () banked
  5533  002B84  1778               	andwf	(___fttol@f1+2)& (0+255),f,b
  5534                           
  5535                           ; BSR set to: 0
  5536  002B86  0100               	movlb	0	; () banked
  5537  002B88  5176               	movf	___fttol@f1& (0+255),w,b
  5538  002B8A  0100               	movlb	0	; () banked
  5539  002B8C  6F80               	movwf	___fttol@lval& (0+255),b
  5540  002B8E  0100               	movlb	0	; () banked
  5541  002B90  5177               	movf	(___fttol@f1+1)& (0+255),w,b
  5542  002B92  0100               	movlb	0	; () banked
  5543  002B94  6F81               	movwf	(___fttol@lval+1)& (0+255),b
  5544  002B96  0100               	movlb	0	; () banked
  5545  002B98  5178               	movf	(___fttol@f1+2)& (0+255),w,b
  5546  002B9A  0100               	movlb	0	; () banked
  5547  002B9C  6F82               	movwf	(___fttol@lval+2)& (0+255),b
  5548  002B9E  0100               	movlb	0	; () banked
  5549  002BA0  6B83               	clrf	(___fttol@lval+3)& (0+255),b
  5550                           
  5551                           ; BSR set to: 0
  5552  002BA2  0E8E               	movlw	142
  5553  002BA4  0100               	movlb	0	; () banked
  5554  002BA6  5F84               	subwf	___fttol@exp1& (0+255),f,b
  5555                           
  5556                           ; BSR set to: 0
  5557  002BA8  0100               	movlb	0	; () banked
  5558  002BAA  AF84               	btfss	___fttol@exp1& (0+255),7,b
  5559  002BAC  D01B               	goto	l3809
  5560                           
  5561                           ; BSR set to: 0
  5562  002BAE  0100               	movlb	0	; () banked
  5563  002BB0  5184               	movf	___fttol@exp1& (0+255),w,b
  5564  002BB2  0A80               	xorlw	128
  5565  002BB4  0F8F               	addlw	143
  5566  002BB6  B0D8               	btfsc	status,0,c
  5567  002BB8  D00B               	goto	l3805
  5568                           
  5569                           ; BSR set to: 0
  5570  002BBA  0E00               	movlw	0
  5571  002BBC  0100               	movlb	0	; () banked
  5572  002BBE  6F76               	movwf	?___fttol& (0+255),b
  5573  002BC0  0E00               	movlw	0
  5574  002BC2  6F77               	movwf	(?___fttol+1)& (0+255),b
  5575  002BC4  0E00               	movlw	0
  5576  002BC6  6F78               	movwf	(?___fttol+2)& (0+255),b
  5577  002BC8  0E00               	movlw	0
  5578  002BCA  6F79               	movwf	(?___fttol+3)& (0+255),b
  5579                           
  5580                           ; BSR set to: 0
  5581  002BCC  0012               	return	
  5582                           
  5583                           ; BSR set to: 0
  5584  002BCE  D000               	goto	l3805
  5585  002BD0                     l3805:
  5586                           
  5587                           ; BSR set to: 0
  5588  002BD0  0100               	movlb	0	; () banked
  5589  002BD2  90D8               	bcf	status,0,c
  5590  002BD4  3383               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5591  002BD6  3382               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5592  002BD8  3381               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5593  002BDA  3380               	rrcf	___fttol@lval& (0+255),f,b
  5594                           
  5595                           ; BSR set to: 0
  5596  002BDC  0100               	movlb	0	; () banked
  5597  002BDE  3F84               	incfsz	___fttol@exp1& (0+255),f,b
  5598  002BE0  D7F7               	goto	l3805
  5599                           
  5600                           ; BSR set to: 0
  5601  002BE2  D01F               	goto	l3819
  5602  002BE4                     l3809:
  5603                           
  5604                           ; BSR set to: 0
  5605  002BE4  0E17               	movlw	23
  5606  002BE6  0100               	movlb	0	; () banked
  5607  002BE8  6584               	cpfsgt	___fttol@exp1& (0+255),b
  5608  002BEA  D014               	goto	l3817
  5609                           
  5610                           ; BSR set to: 0
  5611  002BEC  0E00               	movlw	0
  5612  002BEE  0100               	movlb	0	; () banked
  5613  002BF0  6F76               	movwf	?___fttol& (0+255),b
  5614  002BF2  0E00               	movlw	0
  5615  002BF4  6F77               	movwf	(?___fttol+1)& (0+255),b
  5616  002BF6  0E00               	movlw	0
  5617  002BF8  6F78               	movwf	(?___fttol+2)& (0+255),b
  5618  002BFA  0E00               	movlw	0
  5619  002BFC  6F79               	movwf	(?___fttol+3)& (0+255),b
  5620                           
  5621                           ; BSR set to: 0
  5622  002BFE  0012               	return	
  5623                           
  5624                           ; BSR set to: 0
  5625  002C00  D009               	goto	l3817
  5626  002C02                     l3815:
  5627                           
  5628                           ; BSR set to: 0
  5629  002C02  0100               	movlb	0	; () banked
  5630  002C04  90D8               	bcf	status,0,c
  5631  002C06  3780               	rlcf	___fttol@lval& (0+255),f,b
  5632  002C08  3781               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5633  002C0A  3782               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5634  002C0C  3783               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5635  002C0E  0100               	movlb	0	; () banked
  5636  002C10  0784               	decf	___fttol@exp1& (0+255),f,b
  5637  002C12  D000               	goto	l3817
  5638  002C14                     l3817:
  5639                           
  5640                           ; BSR set to: 0
  5641  002C14  0100               	movlb	0	; () banked
  5642  002C16  5184               	movf	___fttol@exp1& (0+255),w,b
  5643  002C18  0100               	movlb	0	; () banked
  5644  002C1A  B4D8               	btfsc	status,2,c
  5645  002C1C  D002               	goto	l3819
  5646  002C1E  D7F1               	goto	l3815
  5647                           
  5648                           ; BSR set to: 0
  5649  002C20  D000               	goto	l3819
  5650  002C22                     l3819:
  5651                           
  5652                           ; BSR set to: 0
  5653  002C22  0100               	movlb	0	; () banked
  5654  002C24  517F               	movf	___fttol@sign1& (0+255),w,b
  5655  002C26  0100               	movlb	0	; () banked
  5656  002C28  B4D8               	btfsc	status,2,c
  5657  002C2A  D00A               	goto	l3823
  5658                           
  5659                           ; BSR set to: 0
  5660  002C2C  0100               	movlb	0	; () banked
  5661  002C2E  1F83               	comf	(___fttol@lval+3)& (0+255),f,b
  5662  002C30  1F82               	comf	(___fttol@lval+2)& (0+255),f,b
  5663  002C32  1F81               	comf	(___fttol@lval+1)& (0+255),f,b
  5664  002C34  6D80               	negf	___fttol@lval& (0+255),b
  5665  002C36  0E00               	movlw	0
  5666  002C38  2381               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5667  002C3A  2382               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5668  002C3C  2383               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5669  002C3E  D000               	goto	l3823
  5670  002C40                     l3823:
  5671                           
  5672                           ; BSR set to: 0
  5673  002C40  C080  F076         	movff	___fttol@lval,?___fttol
  5674  002C44  C081  F077         	movff	___fttol@lval+1,?___fttol+1
  5675  002C48  C082  F078         	movff	___fttol@lval+2,?___fttol+2
  5676  002C4C  C083  F079         	movff	___fttol@lval+3,?___fttol+3
  5677  002C50  0012               	return	
  5678                           
  5679                           ; BSR set to: 0
  5680                           
  5681                           ; BSR set to: 0
  5682  002C52  0012               	return		;funcret
  5683  002C54                     __end_of___fttol:
  5684                           	opt stack 0
  5685                           tblptru	equ	0xFF8
  5686                           tblptrh	equ	0xFF7
  5687                           tblptrl	equ	0xFF6
  5688                           tablat	equ	0xFF5
  5689                           prodh	equ	0xFF4
  5690                           prodl	equ	0xFF3
  5691                           intcon	equ	0xFF2
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           postinc2	equ	0xFDE
  5695                           postdec2	equ	0xFDD
  5696                           fsr2h	equ	0xFDA
  5697                           fsr2l	equ	0xFD9
  5698                           status	equ	0xFD8
  5699                           
  5700 ;; *************** function ___ftneg *****************
  5701 ;; Defined at:
  5702 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  f1              3   22[COMRAM] float 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;		None
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  3   22[COMRAM] float 
  5709 ;; Registers used:
  5710 ;;		wreg, status,2, status,0
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5716 ;;      Params:         3       0       0       0       0       0       0
  5717 ;;      Locals:         0       0       0       0       0       0       0
  5718 ;;      Temps:          0       0       0       0       0       0       0
  5719 ;;      Totals:         3       0       0       0       0       0       0
  5720 ;;Total ram usage:        3 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    4
  5723 ;; This function calls:
  5724 ;;		Nothing
  5725 ;; This function is called by:
  5726 ;;		_printf
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           	psect	text13
  5731  003CC6                     __ptext13:
  5732                           	opt stack 0
  5733  003CC6                     ___ftneg:
  5734                           	opt stack 25
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;incstack = 0
  5738  003CC6  5017               	movf	___ftneg@f1,w,c
  5739  003CC8  1018               	iorwf	___ftneg@f1+1,w,c
  5740  003CCA  1019               	iorwf	___ftneg@f1+2,w,c
  5741  003CCC  B4D8               	btfsc	status,2,c
  5742  003CCE  D006               	goto	l1147
  5743  003CD0  0E00               	movlw	0
  5744  003CD2  1A17               	xorwf	___ftneg@f1,f,c
  5745  003CD4  0E00               	movlw	0
  5746  003CD6  1A18               	xorwf	___ftneg@f1+1,f,c
  5747  003CD8  0E80               	movlw	128
  5748  003CDA  1A19               	xorwf	___ftneg@f1+2,f,c
  5749  003CDC                     l1147:
  5750  003CDC  C017  F017         	movff	___ftneg@f1,?___ftneg
  5751  003CE0  C018  F018         	movff	___ftneg@f1+1,?___ftneg+1
  5752  003CE4  C019  F019         	movff	___ftneg@f1+2,?___ftneg+2
  5753  003CE8  0012               	return		;funcret
  5754  003CEA                     __end_of___ftneg:
  5755                           	opt stack 0
  5756                           tblptru	equ	0xFF8
  5757                           tblptrh	equ	0xFF7
  5758                           tblptrl	equ	0xFF6
  5759                           tablat	equ	0xFF5
  5760                           prodh	equ	0xFF4
  5761                           prodl	equ	0xFF3
  5762                           intcon	equ	0xFF2
  5763                           postinc0	equ	0xFEE
  5764                           wreg	equ	0xFE8
  5765                           postinc2	equ	0xFDE
  5766                           postdec2	equ	0xFDD
  5767                           fsr2h	equ	0xFDA
  5768                           fsr2l	equ	0xFD9
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function _Temp_Fault *****************
  5772 ;; Defined at:
  5773 ;;		line 12 in file "Tempeture.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;		None
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;  i               2   52[COMRAM] int 
  5778 ;;  fault           1   51[COMRAM] unsigned char 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  1    wreg      unsigned char 
  5781 ;; Registers used:
  5782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5788 ;;      Params:         0       0       0       0       0       0       0
  5789 ;;      Locals:         3       0       0       0       0       0       0
  5790 ;;      Temps:          0       0       0       0       0       0       0
  5791 ;;      Totals:         3       0       0       0       0       0       0
  5792 ;;Total ram usage:        3 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    5
  5795 ;; This function calls:
  5796 ;;		___ftge
  5797 ;;		___wmul
  5798 ;; This function is called by:
  5799 ;;		_main
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text14
  5804  0039A2                     __ptext14:
  5805                           	opt stack 0
  5806  0039A2                     _Temp_Fault:
  5807                           	opt stack 25
  5808                           
  5809                           ;Tempeture.c: 15: char fault = 0;
  5810                           
  5811                           ;incstack = 0
  5812  0039A2  0E00               	movlw	0
  5813  0039A4  6E34               	movwf	Temp_Fault@fault,c
  5814                           
  5815                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
  5816  0039A6  0E00               	movlw	0
  5817  0039A8  6E36               	movwf	Temp_Fault@i+1,c
  5818  0039AA  0E00               	movlw	0
  5819  0039AC  6E35               	movwf	Temp_Fault@i,c
  5820  0039AE                     l5137:
  5821  0039AE  BE36               	btfsc	Temp_Fault@i+1,7,c
  5822  0039B0  D008               	goto	l5141
  5823  0039B2  5036               	movf	Temp_Fault@i+1,w,c
  5824  0039B4  E12D               	bnz	l358
  5825  0039B6  0E09               	movlw	9
  5826  0039B8  5C35               	subwf	Temp_Fault@i,w,c
  5827  0039BA  B0D8               	btfsc	status,0,c
  5828  0039BC  0012               	return	
  5829  0039BE  D001               	goto	l5141
  5830  0039C0  0012               	return	
  5831  0039C2                     l5141:
  5832                           
  5833                           ;Tempeture.c: 17: {
  5834                           ;Tempeture.c: 18: if (60.5 < Temp_DegF[i])
  5835  0039C2  0E00               	movlw	0
  5836  0039C4  6E2B               	movwf	___ftge@ff1,c
  5837  0039C6  0E72               	movlw	114
  5838  0039C8  6E2C               	movwf	___ftge@ff1+1,c
  5839  0039CA  0E42               	movlw	66
  5840  0039CC  6E2D               	movwf	___ftge@ff1+2,c
  5841  0039CE  C035  F025         	movff	Temp_Fault@i,___wmul@multiplier
  5842  0039D2  C036  F026         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  5843  0039D6  0E00               	movlw	0
  5844  0039D8  6E28               	movwf	___wmul@multiplicand+1,c
  5845  0039DA  0E03               	movlw	3
  5846  0039DC  6E27               	movwf	___wmul@multiplicand,c
  5847  0039DE  EC3C  F01E         	call	___wmul	;wreg free
  5848  0039E2  0E96               	movlw	low _Temp_DegF
  5849  0039E4  2425               	addwf	?___wmul,w,c
  5850  0039E6  6ED9               	movwf	fsr2l,c
  5851  0039E8  0E01               	movlw	high _Temp_DegF
  5852  0039EA  2026               	addwfc	?___wmul+1,w,c
  5853  0039EC  6EDA               	movwf	fsr2h,c
  5854  0039EE  CFDE F02E          	movff	postinc2,___ftge@ff2
  5855  0039F2  CFDE F02F          	movff	postinc2,___ftge@ff2+1
  5856  0039F6  CFDD F030          	movff	postdec2,___ftge@ff2+2
  5857  0039FA  EC7E  F01B         	call	___ftge	;wreg free
  5858  0039FE  B0D8               	btfsc	status,0,c
  5859  003A00  D003               	goto	l5145
  5860                           
  5861                           ;Tempeture.c: 19: {
  5862                           ;Tempeture.c: 20: fault = 1;
  5863  003A02  0E01               	movlw	1
  5864  003A04  6E34               	movwf	Temp_Fault@fault,c
  5865  003A06  D000               	goto	l5145
  5866  003A08                     l5145:
  5867  003A08  4A35               	infsnz	Temp_Fault@i,f,c
  5868  003A0A  2A36               	incf	Temp_Fault@i+1,f,c
  5869  003A0C  D7D0               	goto	l5137
  5870  003A0E  0012               	return	
  5871  003A10                     l358:
  5872  003A10  0012               	return		;funcret
  5873  003A12                     __end_of_Temp_Fault:
  5874                           	opt stack 0
  5875                           tblptru	equ	0xFF8
  5876                           tblptrh	equ	0xFF7
  5877                           tblptrl	equ	0xFF6
  5878                           tablat	equ	0xFF5
  5879                           prodh	equ	0xFF4
  5880                           prodl	equ	0xFF3
  5881                           intcon	equ	0xFF2
  5882                           postinc0	equ	0xFEE
  5883                           wreg	equ	0xFE8
  5884                           postinc2	equ	0xFDE
  5885                           postdec2	equ	0xFDD
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function _Temp_Convert *****************
  5891 ;; Defined at:
  5892 ;;		line 50 in file "Tempeture.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;		None
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  steinhart       3   62[BANK0 ] float 
  5897 ;;  x               2   60[BANK0 ] int 
  5898 ;; Return value:  Size  Location     Type
  5899 ;;		None               void
  5900 ;; Registers used:
  5901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5907 ;;      Params:         0       0       0       0       0       0       0
  5908 ;;      Locals:         0      11       0       0       0       0       0
  5909 ;;      Temps:          0       0       0       0       0       0       0
  5910 ;;      Totals:         0      11       0       0       0       0       0
  5911 ;;Total ram usage:       11 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    8
  5914 ;; This function calls:
  5915 ;;		_Temp_Filter
  5916 ;;		___awtoft
  5917 ;;		___ftadd
  5918 ;;		___ftdiv
  5919 ;;		___ftmul
  5920 ;;		___ftsub
  5921 ;;		___wmul
  5922 ;;		_log
  5923 ;; This function is called by:
  5924 ;;		_main
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text15
  5929  002122                     __ptext15:
  5930                           	opt stack 0
  5931  002122                     _Temp_Convert:
  5932                           	opt stack 22
  5933                           
  5934                           ;Tempeture.c: 52: int x;
  5935                           ;Tempeture.c: 53: float steinhart;
  5936                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
  5937                           
  5938                           ;incstack = 0
  5939  002122  0E00               	movlw	0
  5940  002124  0100               	movlb	0	; () banked
  5941  002126  6F9D               	movwf	(Temp_Convert@x+1)& (0+255),b
  5942  002128  0E00               	movlw	0
  5943  00212A  6F9C               	movwf	Temp_Convert@x& (0+255),b
  5944                           
  5945                           ; BSR set to: 0
  5946  00212C  0100               	movlb	0	; () banked
  5947  00212E  BF9D               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  5948  002130  D00A               	goto	l5155
  5949  002132  0100               	movlb	0	; () banked
  5950  002134  519D               	movf	(Temp_Convert@x+1)& (0+255),w,b
  5951  002136  E106               	bnz	u5350
  5952  002138  0E0A               	movlw	10
  5953  00213A  0100               	movlb	0	; () banked
  5954  00213C  5D9C               	subwf	Temp_Convert@x& (0+255),w,b
  5955  00213E  B0D8               	btfsc	status,0,c
  5956  002140  D10D               	goto	l5179
  5957  002142  D001               	goto	l5155
  5958  002144                     u5350:
  5959                           
  5960                           ; BSR set to: 0
  5961  002144  D10B               	goto	l5179
  5962  002146                     l5155:
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;Tempeture.c: 55: {
  5966                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  5967  002146  0E00               	movlw	0
  5968  002148  0100               	movlb	0	; () banked
  5969  00214A  6F7C               	movwf	___ftadd@f2& (0+255),b
  5970  00214C  0E80               	movlw	128
  5971  00214E  0100               	movlb	0	; () banked
  5972  002150  6F7D               	movwf	(___ftadd@f2+1)& (0+255),b
  5973  002152  0EBF               	movlw	191
  5974  002154  0100               	movlb	0	; () banked
  5975  002156  6F7E               	movwf	(___ftadd@f2+2)& (0+255),b
  5976  002158  90D8               	bcf	status,0,c
  5977  00215A  0100               	movlb	0	; () banked
  5978  00215C  359C               	rlcf	Temp_Convert@x& (0+255),w,b
  5979  00215E  6ED9               	movwf	fsr2l,c
  5980  002160  0100               	movlb	0	; () banked
  5981  002162  359D               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  5982  002164  6EDA               	movwf	fsr2h,c
  5983  002166  0EEA               	movlw	low _Temp_Adc
  5984  002168  26D9               	addwf	fsr2l,f,c
  5985  00216A  0E00               	movlw	high _Temp_Adc
  5986  00216C  22DA               	addwfc	fsr2h,f,c
  5987  00216E  CFDE F02B          	movff	postinc2,___awtoft@c
  5988  002172  CFDD F02C          	movff	postdec2,___awtoft@c+1
  5989  002176  ECB4  F01D         	call	___awtoft	;wreg free
  5990  00217A  C02B  F032         	movff	?___awtoft,___ftdiv@f2
  5991  00217E  C02C  F033         	movff	?___awtoft+1,___ftdiv@f2+1
  5992  002182  C02D  F034         	movff	?___awtoft+2,___ftdiv@f2+2
  5993  002186  0EC0               	movlw	192
  5994  002188  6E2F               	movwf	___ftdiv@f1,c
  5995  00218A  0E7F               	movlw	127
  5996  00218C  6E30               	movwf	___ftdiv@f1+1,c
  5997  00218E  0E44               	movlw	68
  5998  002190  6E31               	movwf	___ftdiv@f1+2,c
  5999  002192  EC08  F018         	call	___ftdiv	;wreg free
  6000  002196  C02F  F079         	movff	?___ftdiv,___ftadd@f1
  6001  00219A  C030  F07A         	movff	?___ftdiv+1,___ftadd@f1+1
  6002  00219E  C031  F07B         	movff	?___ftdiv+2,___ftadd@f1+2
  6003  0021A2  EC1E  F00E         	call	___ftadd	;wreg free
  6004  0021A6  C079  F096         	movff	?___ftadd,_Temp_Convert$1692
  6005  0021AA  C07A  F097         	movff	?___ftadd+1,_Temp_Convert$1692+1
  6006  0021AE  C07B  F098         	movff	?___ftadd+2,_Temp_Convert$1692+2
  6007                           
  6008                           ;Tempeture.c: 55: {
  6009                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  6010  0021B2  C096  F032         	movff	_Temp_Convert$1692,___ftdiv@f2
  6011  0021B6  C097  F033         	movff	_Temp_Convert$1692+1,___ftdiv@f2+1
  6012  0021BA  C098  F034         	movff	_Temp_Convert$1692+2,___ftdiv@f2+2
  6013  0021BE  0E40               	movlw	64
  6014  0021C0  6E2F               	movwf	___ftdiv@f1,c
  6015  0021C2  0E1C               	movlw	28
  6016  0021C4  6E30               	movwf	___ftdiv@f1+1,c
  6017  0021C6  0E46               	movlw	70
  6018  0021C8  6E31               	movwf	___ftdiv@f1+2,c
  6019  0021CA  EC08  F018         	call	___ftdiv	;wreg free
  6020  0021CE  C02F  F099         	movff	?___ftdiv,_Temp_Convert$1693
  6021  0021D2  C030  F09A         	movff	?___ftdiv+1,_Temp_Convert$1693+1
  6022  0021D6  C031  F09B         	movff	?___ftdiv+2,_Temp_Convert$1693+2
  6023                           
  6024                           ;Tempeture.c: 55: {
  6025                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  6026  0021DA  C099  F02F         	movff	_Temp_Convert$1693,___ftdiv@f1
  6027  0021DE  C09A  F030         	movff	_Temp_Convert$1693+1,___ftdiv@f1+1
  6028  0021E2  C09B  F031         	movff	_Temp_Convert$1693+2,___ftdiv@f1+2
  6029  0021E6  0E40               	movlw	64
  6030  0021E8  6E32               	movwf	___ftdiv@f2,c
  6031  0021EA  0E1C               	movlw	28
  6032  0021EC  6E33               	movwf	___ftdiv@f2+1,c
  6033  0021EE  0E46               	movlw	70
  6034  0021F0  6E34               	movwf	___ftdiv@f2+2,c
  6035  0021F2  EC08  F018         	call	___ftdiv	;wreg free
  6036  0021F6  C02F  F09E         	movff	?___ftdiv,Temp_Convert@steinhart
  6037  0021FA  C030  F09F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6038  0021FE  C031  F0A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6039                           
  6040                           ;Tempeture.c: 57: steinhart = log(steinhart);
  6041  002202  C09E  F091         	movff	Temp_Convert@steinhart,log@x
  6042  002206  C09F  F092         	movff	Temp_Convert@steinhart+1,log@x+1
  6043  00220A  C0A0  F093         	movff	Temp_Convert@steinhart+2,log@x+2
  6044  00220E  EC2A  F016         	call	_log	;wreg free
  6045  002212  C091  F09E         	movff	?_log,Temp_Convert@steinhart
  6046  002216  C092  F09F         	movff	?_log+1,Temp_Convert@steinhart+1
  6047  00221A  C093  F0A0         	movff	?_log+2,Temp_Convert@steinhart+2
  6048                           
  6049                           ;Tempeture.c: 58: steinhart /= 3950;
  6050  00221E  C09E  F02F         	movff	Temp_Convert@steinhart,___ftdiv@f1
  6051  002222  C09F  F030         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  6052  002226  C0A0  F031         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  6053  00222A  0EE0               	movlw	224
  6054  00222C  6E32               	movwf	___ftdiv@f2,c
  6055  00222E  0E76               	movlw	118
  6056  002230  6E33               	movwf	___ftdiv@f2+1,c
  6057  002232  0E45               	movlw	69
  6058  002234  6E34               	movwf	___ftdiv@f2+2,c
  6059  002236  EC08  F018         	call	___ftdiv	;wreg free
  6060  00223A  C02F  F09E         	movff	?___ftdiv,Temp_Convert@steinhart
  6061  00223E  C030  F09F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6062  002242  C031  F0A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6063                           
  6064                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  6065  002246  C09E  F079         	movff	Temp_Convert@steinhart,___ftadd@f1
  6066  00224A  C09F  F07A         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  6067  00224E  C0A0  F07B         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  6068  002252  0ECF               	movlw	207
  6069  002254  0100               	movlb	0	; () banked
  6070  002256  6F7C               	movwf	___ftadd@f2& (0+255),b
  6071  002258  0E5B               	movlw	91
  6072  00225A  0100               	movlb	0	; () banked
  6073  00225C  6F7D               	movwf	(___ftadd@f2+1)& (0+255),b
  6074  00225E  0E3B               	movlw	59
  6075  002260  0100               	movlb	0	; () banked
  6076  002262  6F7E               	movwf	(___ftadd@f2+2)& (0+255),b
  6077  002264  EC1E  F00E         	call	___ftadd	;wreg free
  6078  002268  C079  F09E         	movff	?___ftadd,Temp_Convert@steinhart
  6079  00226C  C07A  F09F         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6080  002270  C07B  F0A0         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6081                           
  6082                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  6083  002274  0E00               	movlw	0
  6084  002276  6E2F               	movwf	___ftdiv@f1,c
  6085  002278  0E80               	movlw	128
  6086  00227A  6E30               	movwf	___ftdiv@f1+1,c
  6087  00227C  0E3F               	movlw	63
  6088  00227E  6E31               	movwf	___ftdiv@f1+2,c
  6089  002280  C09E  F032         	movff	Temp_Convert@steinhart,___ftdiv@f2
  6090  002284  C09F  F033         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  6091  002288  C0A0  F034         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  6092  00228C  EC08  F018         	call	___ftdiv	;wreg free
  6093  002290  C02F  F09E         	movff	?___ftdiv,Temp_Convert@steinhart
  6094  002294  C030  F09F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6095  002298  C031  F0A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6096                           
  6097                           ;Tempeture.c: 61: steinhart -= 273.15;
  6098  00229C  C09E  F085         	movff	Temp_Convert@steinhart,___ftsub@f1
  6099  0022A0  C09F  F086         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  6100  0022A4  C0A0  F087         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  6101  0022A8  0E93               	movlw	147
  6102  0022AA  0100               	movlb	0	; () banked
  6103  0022AC  6F88               	movwf	___ftsub@f2& (0+255),b
  6104  0022AE  0E88               	movlw	136
  6105  0022B0  0100               	movlb	0	; () banked
  6106  0022B2  6F89               	movwf	(___ftsub@f2+1)& (0+255),b
  6107  0022B4  0E43               	movlw	67
  6108  0022B6  0100               	movlb	0	; () banked
  6109  0022B8  6F8A               	movwf	(___ftsub@f2+2)& (0+255),b
  6110  0022BA  EC65  F01D         	call	___ftsub	;wreg free
  6111  0022BE  C085  F09E         	movff	?___ftsub,Temp_Convert@steinhart
  6112  0022C2  C086  F09F         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  6113  0022C6  C087  F0A0         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  6114                           
  6115                           ;Tempeture.c: 62: steinhart = (steinhart*1.8) + 32.0;
  6116  0022CA  0E66               	movlw	102
  6117  0022CC  0100               	movlb	0	; () banked
  6118  0022CE  6F63               	movwf	___ftmul@f2& (0+255),b
  6119  0022D0  0EE6               	movlw	230
  6120  0022D2  0100               	movlb	0	; () banked
  6121  0022D4  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6122  0022D6  0E3F               	movlw	63
  6123  0022D8  0100               	movlb	0	; () banked
  6124  0022DA  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6125  0022DC  C09E  F060         	movff	Temp_Convert@steinhart,___ftmul@f1
  6126  0022E0  C09F  F061         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  6127  0022E4  C0A0  F062         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  6128  0022E8  ECCB  F014         	call	___ftmul	;wreg free
  6129  0022EC  C060  F079         	movff	?___ftmul,___ftadd@f1
  6130  0022F0  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6131  0022F4  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6132  0022F8  0E00               	movlw	0
  6133  0022FA  0100               	movlb	0	; () banked
  6134  0022FC  6F7C               	movwf	___ftadd@f2& (0+255),b
  6135  0022FE  0E00               	movlw	0
  6136  002300  0100               	movlb	0	; () banked
  6137  002302  6F7D               	movwf	(___ftadd@f2+1)& (0+255),b
  6138  002304  0E42               	movlw	66
  6139  002306  0100               	movlb	0	; () banked
  6140  002308  6F7E               	movwf	(___ftadd@f2+2)& (0+255),b
  6141  00230A  EC1E  F00E         	call	___ftadd	;wreg free
  6142  00230E  C079  F09E         	movff	?___ftadd,Temp_Convert@steinhart
  6143  002312  C07A  F09F         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6144  002316  C07B  F0A0         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6145                           
  6146                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  6147  00231A  C09C  F025         	movff	Temp_Convert@x,___wmul@multiplier
  6148  00231E  C09D  F026         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6149  002322  0E00               	movlw	0
  6150  002324  6E28               	movwf	___wmul@multiplicand+1,c
  6151  002326  0E03               	movlw	3
  6152  002328  6E27               	movwf	___wmul@multiplicand,c
  6153  00232A  EC3C  F01E         	call	___wmul	;wreg free
  6154  00232E  0ED2               	movlw	low _TmpTemp_DegF
  6155  002330  2425               	addwf	?___wmul,w,c
  6156  002332  6ED9               	movwf	fsr2l,c
  6157  002334  0E01               	movlw	high _TmpTemp_DegF
  6158  002336  2026               	addwfc	?___wmul+1,w,c
  6159  002338  6EDA               	movwf	fsr2h,c
  6160  00233A  C09E  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6161  00233E  C09F  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6162  002342  C0A0  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  6163  002346  0100               	movlb	0	; () banked
  6164  002348  4B9C               	infsnz	Temp_Convert@x& (0+255),f,b
  6165  00234A  2B9D               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6166                           
  6167                           ; BSR set to: 0
  6168  00234C  0100               	movlb	0	; () banked
  6169  00234E  BF9D               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6170  002350  D6FA               	goto	l5155
  6171  002352  0100               	movlb	0	; () banked
  6172  002354  519D               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6173  002356  E102               	bnz	l5179
  6174  002358  D6EF               	goto	L5
  6175  00235A  D000               	goto	l5179
  6176  00235C                     l5179:
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;Tempeture.c: 64: }
  6180                           ;Tempeture.c: 65: Temp_Filter();
  6181  00235C  EC55  F013         	call	_Temp_Filter	;wreg free
  6182  002360  0012               	return		;funcret
  6183  002362                     __end_of_Temp_Convert:
  6184                           	opt stack 0
  6185                           tblptru	equ	0xFF8
  6186                           tblptrh	equ	0xFF7
  6187                           tblptrl	equ	0xFF6
  6188                           tablat	equ	0xFF5
  6189                           prodh	equ	0xFF4
  6190                           prodl	equ	0xFF3
  6191                           intcon	equ	0xFF2
  6192                           postinc0	equ	0xFEE
  6193                           wreg	equ	0xFE8
  6194                           postinc2	equ	0xFDE
  6195                           postdec2	equ	0xFDD
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200 ;; *************** function _log *****************
  6201 ;; Defined at:
  6202 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  x               3   49[BANK0 ] int 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  exponent        2   52[BANK0 ] int 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  3   49[BANK0 ] int 
  6209 ;; Registers used:
  6210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6216 ;;      Params:         0       3       0       0       0       0       0
  6217 ;;      Locals:         0       2       0       0       0       0       0
  6218 ;;      Temps:          0       0       0       0       0       0       0
  6219 ;;      Totals:         0       5       0       0       0       0       0
  6220 ;;Total ram usage:        5 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    7
  6223 ;; This function calls:
  6224 ;;		___awtoft
  6225 ;;		___ftadd
  6226 ;;		___ftmul
  6227 ;;		_eval_poly
  6228 ;;		_frexp
  6229 ;; This function is called by:
  6230 ;;		_Temp_Convert
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234                           	psect	text16
  6235  002C54                     __ptext16:
  6236                           	opt stack 0
  6237  002C54                     _log:
  6238                           	opt stack 22
  6239                           
  6240                           ;incstack = 0
  6241  002C54  0100               	movlb	0	; () banked
  6242  002C56  AF93               	btfss	(log@x+2)& (0+255),7,b
  6243  002C58  D00F               	goto	l4943
  6244                           
  6245                           ; BSR set to: 0
  6246  002C5A  0E00               	movlw	0
  6247  002C5C  0100               	movlb	0	; () banked
  6248  002C5E  6FE7               	movwf	(_errno+1)& (0+255),b
  6249  002C60  0E21               	movlw	33
  6250  002C62  6FE6               	movwf	_errno& (0+255),b
  6251  002C64  0E00               	movlw	0
  6252  002C66  0100               	movlb	0	; () banked
  6253  002C68  6F91               	movwf	?_log& (0+255),b
  6254  002C6A  0E00               	movlw	0
  6255  002C6C  0100               	movlb	0	; () banked
  6256  002C6E  6F92               	movwf	(?_log+1)& (0+255),b
  6257  002C70  0E00               	movlw	0
  6258  002C72  0100               	movlb	0	; () banked
  6259  002C74  6F93               	movwf	(?_log+2)& (0+255),b
  6260                           
  6261                           ; BSR set to: 0
  6262  002C76  0012               	return	
  6263  002C78                     l4943:
  6264                           
  6265                           ; BSR set to: 0
  6266  002C78  0100               	movlb	0	; () banked
  6267  002C7A  5191               	movf	log@x& (0+255),w,b
  6268  002C7C  0100               	movlb	0	; () banked
  6269  002C7E  1192               	iorwf	(log@x+1)& (0+255),w,b
  6270  002C80  0100               	movlb	0	; () banked
  6271  002C82  1193               	iorwf	(log@x+2)& (0+255),w,b
  6272  002C84  A4D8               	btfss	status,2,c
  6273  002C86  D00F               	goto	l4949
  6274                           
  6275                           ; BSR set to: 0
  6276  002C88  0E00               	movlw	0
  6277  002C8A  0100               	movlb	0	; () banked
  6278  002C8C  6FE7               	movwf	(_errno+1)& (0+255),b
  6279  002C8E  0E22               	movlw	34
  6280  002C90  6FE6               	movwf	_errno& (0+255),b
  6281  002C92  0E00               	movlw	0
  6282  002C94  0100               	movlb	0	; () banked
  6283  002C96  6F91               	movwf	?_log& (0+255),b
  6284  002C98  0E00               	movlw	0
  6285  002C9A  0100               	movlb	0	; () banked
  6286  002C9C  6F92               	movwf	(?_log+1)& (0+255),b
  6287  002C9E  0E00               	movlw	0
  6288  002CA0  0100               	movlb	0	; () banked
  6289  002CA2  6F93               	movwf	(?_log+2)& (0+255),b
  6290                           
  6291                           ; BSR set to: 0
  6292  002CA4  0012               	return	
  6293  002CA6                     l4949:
  6294                           
  6295                           ; BSR set to: 0
  6296  002CA6  0E00               	movlw	0
  6297  002CA8  0100               	movlb	0	; () banked
  6298  002CAA  6F63               	movwf	___ftmul@f2& (0+255),b
  6299  002CAC  0E00               	movlw	0
  6300  002CAE  0100               	movlb	0	; () banked
  6301  002CB0  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6302  002CB2  0E40               	movlw	64
  6303  002CB4  0100               	movlb	0	; () banked
  6304  002CB6  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6305  002CB8  0E94               	movlw	low log@exponent
  6306  002CBA  6E1A               	movwf	frexp@eptr,c
  6307  002CBC  0E00               	movlw	high log@exponent
  6308  002CBE  6E1B               	movwf	frexp@eptr+1,c
  6309  002CC0  C091  F017         	movff	log@x,frexp@value
  6310  002CC4  C092  F018         	movff	log@x+1,frexp@value+1
  6311  002CC8  C093  F019         	movff	log@x+2,frexp@value+2
  6312  002CCC  ECC9  F01B         	call	_frexp	;wreg free
  6313  002CD0  C017  F060         	movff	?_frexp,___ftmul@f1
  6314  002CD4  C018  F061         	movff	?_frexp+1,___ftmul@f1+1
  6315  002CD8  C019  F062         	movff	?_frexp+2,___ftmul@f1+2
  6316  002CDC  ECCB  F014         	call	___ftmul	;wreg free
  6317  002CE0  C060  F079         	movff	?___ftmul,___ftadd@f1
  6318  002CE4  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6319  002CE8  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6320  002CEC  0E00               	movlw	0
  6321  002CEE  0100               	movlb	0	; () banked
  6322  002CF0  6F7C               	movwf	___ftadd@f2& (0+255),b
  6323  002CF2  0E80               	movlw	128
  6324  002CF4  0100               	movlb	0	; () banked
  6325  002CF6  6F7D               	movwf	(___ftadd@f2+1)& (0+255),b
  6326  002CF8  0EBF               	movlw	191
  6327  002CFA  0100               	movlb	0	; () banked
  6328  002CFC  6F7E               	movwf	(___ftadd@f2+2)& (0+255),b
  6329  002CFE  EC1E  F00E         	call	___ftadd	;wreg free
  6330  002D02  C079  F091         	movff	?___ftadd,log@x
  6331  002D06  C07A  F092         	movff	?___ftadd+1,log@x+1
  6332  002D0A  C07B  F093         	movff	?___ftadd+2,log@x+2
  6333  002D0E  0100               	movlb	0	; () banked
  6334  002D10  0794               	decf	log@exponent& (0+255),f,b
  6335  002D12  A0D8               	btfss	status,0,c
  6336  002D14  0795               	decf	(log@exponent+1)& (0+255),f,b
  6337                           
  6338                           ; BSR set to: 0
  6339  002D16  C091  F085         	movff	log@x,eval_poly@x
  6340  002D1A  C092  F086         	movff	log@x+1,eval_poly@x+1
  6341  002D1E  C093  F087         	movff	log@x+2,eval_poly@x+2
  6342  002D22  0E77               	movlw	low log@coeff
  6343  002D24  0100               	movlb	0	; () banked
  6344  002D26  6F88               	movwf	eval_poly@d& (0+255),b
  6345  002D28  0E06               	movlw	high log@coeff
  6346  002D2A  0100               	movlb	0	; () banked
  6347  002D2C  6F89               	movwf	(eval_poly@d+1)& (0+255),b
  6348  002D2E  0E00               	movlw	0
  6349  002D30  0100               	movlb	0	; () banked
  6350  002D32  6F8B               	movwf	(eval_poly@n+1)& (0+255),b
  6351  002D34  0E08               	movlw	8
  6352  002D36  6F8A               	movwf	eval_poly@n& (0+255),b
  6353  002D38  EC7E  F018         	call	_eval_poly	;wreg free
  6354  002D3C  C085  F091         	movff	?_eval_poly,log@x
  6355  002D40  C086  F092         	movff	?_eval_poly+1,log@x+1
  6356  002D44  C087  F093         	movff	?_eval_poly+2,log@x+2
  6357  002D48  0E72               	movlw	114
  6358  002D4A  0100               	movlb	0	; () banked
  6359  002D4C  6F63               	movwf	___ftmul@f2& (0+255),b
  6360  002D4E  0E31               	movlw	49
  6361  002D50  0100               	movlb	0	; () banked
  6362  002D52  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6363  002D54  0E3F               	movlw	63
  6364  002D56  0100               	movlb	0	; () banked
  6365  002D58  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6366  002D5A  C094  F02B         	movff	log@exponent,___awtoft@c
  6367  002D5E  C095  F02C         	movff	log@exponent+1,___awtoft@c+1
  6368  002D62  ECB4  F01D         	call	___awtoft	;wreg free
  6369  002D66  C02B  F060         	movff	?___awtoft,___ftmul@f1
  6370  002D6A  C02C  F061         	movff	?___awtoft+1,___ftmul@f1+1
  6371  002D6E  C02D  F062         	movff	?___awtoft+2,___ftmul@f1+2
  6372  002D72  ECCB  F014         	call	___ftmul	;wreg free
  6373  002D76  C060  F079         	movff	?___ftmul,___ftadd@f1
  6374  002D7A  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6375  002D7E  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6376  002D82  C091  F07C         	movff	log@x,___ftadd@f2
  6377  002D86  C092  F07D         	movff	log@x+1,___ftadd@f2+1
  6378  002D8A  C093  F07E         	movff	log@x+2,___ftadd@f2+2
  6379  002D8E  EC1E  F00E         	call	___ftadd	;wreg free
  6380  002D92  C079  F091         	movff	?___ftadd,?_log
  6381  002D96  C07A  F092         	movff	?___ftadd+1,?_log+1
  6382  002D9A  C07B  F093         	movff	?___ftadd+2,?_log+2
  6383  002D9E  0012               	return	
  6384  002DA0  0012               	return		;funcret
  6385  002DA2                     __end_of_log:
  6386                           	opt stack 0
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           intcon	equ	0xFF2
  6394                           postinc0	equ	0xFEE
  6395                           wreg	equ	0xFE8
  6396                           postinc2	equ	0xFDE
  6397                           postdec2	equ	0xFDD
  6398                           fsr2h	equ	0xFDA
  6399                           fsr2l	equ	0xFD9
  6400                           status	equ	0xFD8
  6401                           
  6402 ;; *************** function _frexp *****************
  6403 ;; Defined at:
  6404 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;  value           3   22[COMRAM] int 
  6407 ;;  eptr            2   25[COMRAM] PTR int 
  6408 ;;		 -> log@exponent(2), 
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  3   22[COMRAM] PTR int 
  6413 ;; Registers used:
  6414 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6420 ;;      Params:         5       0       0       0       0       0       0
  6421 ;;      Locals:         0       0       0       0       0       0       0
  6422 ;;      Temps:          2       0       0       0       0       0       0
  6423 ;;      Totals:         7       0       0       0       0       0       0
  6424 ;;Total ram usage:        7 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    4
  6427 ;; This function calls:
  6428 ;;		Nothing
  6429 ;; This function is called by:
  6430 ;;		_log
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text17
  6435  003792                     __ptext17:
  6436                           	opt stack 0
  6437  003792                     _frexp:
  6438                           	opt stack 24
  6439                           
  6440                           ;incstack = 0
  6441  003792  5017               	movf	frexp@value,w,c
  6442  003794  1018               	iorwf	frexp@value+1,w,c
  6443  003796  1019               	iorwf	frexp@value+2,w,c
  6444  003798  A4D8               	btfss	status,2,c
  6445  00379A  D00F               	goto	l3361
  6446  00379C  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6447  0037A0  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6448  0037A4  0E00               	movlw	0
  6449  0037A6  6EDE               	movwf	postinc2,c
  6450  0037A8  0E00               	movlw	0
  6451  0037AA  6EDD               	movwf	postdec2,c
  6452  0037AC  0E00               	movlw	0
  6453  0037AE  6E17               	movwf	?_frexp,c
  6454  0037B0  0E00               	movlw	0
  6455  0037B2  6E18               	movwf	?_frexp+1,c
  6456  0037B4  0E00               	movlw	0
  6457  0037B6  6E19               	movwf	?_frexp+2,c
  6458  0037B8  0012               	return	
  6459  0037BA                     l3361:
  6460  0037BA  5019               	movf	frexp@value+2,w,c
  6461  0037BC  0B7F               	andlw	127
  6462  0037BE  6E1C               	movwf	??_frexp& (0+255),c
  6463  0037C0  6A1D               	clrf	(??_frexp+1)& (0+255),c
  6464  0037C2  90D8               	bcf	status,0,c
  6465  0037C4  361C               	rlcf	??_frexp,f,c
  6466  0037C6  361D               	rlcf	??_frexp+1,f,c
  6467  0037C8  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6468  0037CC  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6469  0037D0  C01C  FFDE         	movff	??_frexp,postinc2
  6470  0037D4  C01D  FFDD         	movff	??_frexp+1,postdec2
  6471  0037D8  AE18               	btfss	frexp@value+1,7,c
  6472  0037DA  D003               	goto	u2830
  6473  0037DC  6A1C               	clrf	??_frexp& (0+255),c
  6474  0037DE  2A1C               	incf	??_frexp& (0+255),f,c
  6475  0037E0  D001               	goto	u2838
  6476  0037E2                     u2830:
  6477  0037E2  6A1C               	clrf	??_frexp& (0+255),c
  6478  0037E4                     u2838:
  6479  0037E4  501C               	movf	??_frexp,w,c
  6480  0037E6  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6481  0037EA  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6482  0037EE  12DE               	iorwf	postinc2,f,c
  6483  0037F0  0E00               	movlw	0
  6484  0037F2  12DD               	iorwf	postdec2,f,c
  6485  0037F4  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6486  0037F8  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6487  0037FC  0E82               	movlw	130
  6488  0037FE  26DE               	addwf	postinc2,f,c
  6489  003800  0EFF               	movlw	255
  6490  003802  22DD               	addwfc	postdec2,f,c
  6491  003804  8019               	bsf	frexp@value+2,0,c
  6492  003806  8219               	bsf	frexp@value+2,1,c
  6493  003808  8419               	bsf	frexp@value+2,2,c
  6494  00380A  8619               	bsf	frexp@value+2,3,c
  6495  00380C  8819               	bsf	frexp@value+2,4,c
  6496  00380E  8A19               	bsf	frexp@value+2,5,c
  6497  003810  9C19               	bcf	frexp@value+2,6,c
  6498  003812  9E18               	bcf	frexp@value+1,7,c
  6499  003814  C017  F017         	movff	frexp@value,?_frexp
  6500  003818  C018  F018         	movff	frexp@value+1,?_frexp+1
  6501  00381C  C019  F019         	movff	frexp@value+2,?_frexp+2
  6502  003820  0012               	return	
  6503  003822  0012               	return		;funcret
  6504  003824                     __end_of_frexp:
  6505                           	opt stack 0
  6506                           tblptru	equ	0xFF8
  6507                           tblptrh	equ	0xFF7
  6508                           tblptrl	equ	0xFF6
  6509                           tablat	equ	0xFF5
  6510                           prodh	equ	0xFF4
  6511                           prodl	equ	0xFF3
  6512                           intcon	equ	0xFF2
  6513                           postinc0	equ	0xFEE
  6514                           wreg	equ	0xFE8
  6515                           postinc2	equ	0xFDE
  6516                           postdec2	equ	0xFDD
  6517                           fsr2h	equ	0xFDA
  6518                           fsr2l	equ	0xFD9
  6519                           status	equ	0xFD8
  6520                           
  6521 ;; *************** function _eval_poly *****************
  6522 ;; Defined at:
  6523 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;  x               3   37[BANK0 ] PTR int 
  6526 ;;  d               2   40[BANK0 ] PTR const 
  6527 ;;		 -> log@coeff(27), 
  6528 ;;  n               2   42[BANK0 ] int 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;  res             3   46[BANK0 ] int 
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  3   37[BANK0 ] int 
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6540 ;;      Params:         0       7       0       0       0       0       0
  6541 ;;      Locals:         0       3       0       0       0       0       0
  6542 ;;      Temps:          0       2       0       0       0       0       0
  6543 ;;      Totals:         0      12       0       0       0       0       0
  6544 ;;Total ram usage:       12 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    6
  6547 ;; This function calls:
  6548 ;;		___ftadd
  6549 ;;		___ftmul
  6550 ;;		___wmul
  6551 ;; This function is called by:
  6552 ;;		_log
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           	psect	text18
  6557  0030FC                     __ptext18:
  6558                           	opt stack 0
  6559  0030FC                     _eval_poly:
  6560                           	opt stack 22
  6561                           
  6562                           ;incstack = 0
  6563  0030FC  C08A  F025         	movff	eval_poly@n,___wmul@multiplier
  6564  003100  C08B  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  6565  003104  0E00               	movlw	0
  6566  003106  6E28               	movwf	___wmul@multiplicand+1,c
  6567  003108  0E03               	movlw	3
  6568  00310A  6E27               	movwf	___wmul@multiplicand,c
  6569  00310C  EC3C  F01E         	call	___wmul	;wreg free
  6570  003110  C088  F08C         	movff	eval_poly@d,??_eval_poly
  6571  003114  C089  F08D         	movff	eval_poly@d+1,??_eval_poly+1
  6572  003118  5025               	movf	?___wmul,w,c
  6573  00311A  0100               	movlb	0	; () banked
  6574  00311C  278C               	addwf	??_eval_poly& (0+255),f,b
  6575  00311E  5026               	movf	?___wmul+1,w,c
  6576  003120  0100               	movlb	0	; () banked
  6577  003122  238D               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6578  003124  C08C  FFF6         	movff	??_eval_poly,tblptrl
  6579  003128  C08D  FFF7         	movff	??_eval_poly+1,tblptrh
  6580  00312C                     	if	0	;tblptru may be non-zero
  6581  00312C                     	endif
  6582  00312C                     	if	0	;tblptru may be non-zero
  6583  00312C                     	endif
  6584  00312C  0009               	tblrd		*+
  6585  00312E  CFF5 F08E          	movff	tablat,eval_poly@res
  6586  003132  0009               	tblrd		*+
  6587  003134  CFF5 F08F          	movff	tablat,eval_poly@res+1
  6588  003138  000A               	tblrd		*-
  6589  00313A  CFF5 F090          	movff	tablat,eval_poly@res+2
  6590  00313E  D042               	goto	l4907
  6591  003140                     l4905:
  6592                           
  6593                           ; BSR set to: 0
  6594  003140  C08E  F063         	movff	eval_poly@res,___ftmul@f2
  6595  003144  C08F  F064         	movff	eval_poly@res+1,___ftmul@f2+1
  6596  003148  C090  F065         	movff	eval_poly@res+2,___ftmul@f2+2
  6597  00314C  C085  F060         	movff	eval_poly@x,___ftmul@f1
  6598  003150  C086  F061         	movff	eval_poly@x+1,___ftmul@f1+1
  6599  003154  C087  F062         	movff	eval_poly@x+2,___ftmul@f1+2
  6600  003158  ECCB  F014         	call	___ftmul	;wreg free
  6601  00315C  C060  F079         	movff	?___ftmul,___ftadd@f1
  6602  003160  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6603  003164  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6604  003168  0E00               	movlw	0
  6605  00316A  6E28               	movwf	___wmul@multiplicand+1,c
  6606  00316C  0E03               	movlw	3
  6607  00316E  6E27               	movwf	___wmul@multiplicand,c
  6608  003170  0100               	movlb	0	; () banked
  6609  003172  078A               	decf	eval_poly@n& (0+255),f,b
  6610  003174  A0D8               	btfss	status,0,c
  6611  003176  078B               	decf	(eval_poly@n+1)& (0+255),f,b
  6612  003178  C08A  F025         	movff	eval_poly@n,___wmul@multiplier
  6613  00317C  C08B  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  6614  003180  EC3C  F01E         	call	___wmul	;wreg free
  6615  003184  C088  F08C         	movff	eval_poly@d,??_eval_poly
  6616  003188  C089  F08D         	movff	eval_poly@d+1,??_eval_poly+1
  6617  00318C  5025               	movf	?___wmul,w,c
  6618  00318E  0100               	movlb	0	; () banked
  6619  003190  278C               	addwf	??_eval_poly& (0+255),f,b
  6620  003192  5026               	movf	?___wmul+1,w,c
  6621  003194  0100               	movlb	0	; () banked
  6622  003196  238D               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6623  003198  C08C  FFF6         	movff	??_eval_poly,tblptrl
  6624  00319C  C08D  FFF7         	movff	??_eval_poly+1,tblptrh
  6625  0031A0                     	if	0	;tblptru may be non-zero
  6626  0031A0                     	endif
  6627  0031A0                     	if	0	;tblptru may be non-zero
  6628  0031A0                     	endif
  6629  0031A0  0009               	tblrd		*+
  6630  0031A2  CFF5 F07C          	movff	tablat,___ftadd@f2
  6631  0031A6  0009               	tblrd		*+
  6632  0031A8  CFF5 F07D          	movff	tablat,___ftadd@f2+1
  6633  0031AC  000A               	tblrd		*-
  6634  0031AE  CFF5 F07E          	movff	tablat,___ftadd@f2+2
  6635  0031B2  EC1E  F00E         	call	___ftadd	;wreg free
  6636  0031B6  C079  F08E         	movff	?___ftadd,eval_poly@res
  6637  0031BA  C07A  F08F         	movff	?___ftadd+1,eval_poly@res+1
  6638  0031BE  C07B  F090         	movff	?___ftadd+2,eval_poly@res+2
  6639  0031C2  D000               	goto	l4907
  6640  0031C4                     l4907:
  6641  0031C4  0100               	movlb	0	; () banked
  6642  0031C6  518A               	movf	eval_poly@n& (0+255),w,b
  6643  0031C8  0100               	movlb	0	; () banked
  6644  0031CA  118B               	iorwf	(eval_poly@n+1)& (0+255),w,b
  6645  0031CC  A4D8               	btfss	status,2,c
  6646  0031CE  D7B8               	goto	l4905
  6647                           
  6648                           ; BSR set to: 0
  6649  0031D0  C08E  F085         	movff	eval_poly@res,?_eval_poly
  6650  0031D4  C08F  F086         	movff	eval_poly@res+1,?_eval_poly+1
  6651  0031D8  C090  F087         	movff	eval_poly@res+2,?_eval_poly+2
  6652                           
  6653                           ; BSR set to: 0
  6654  0031DC  0012               	return		;funcret
  6655  0031DE                     __end_of_eval_poly:
  6656                           	opt stack 0
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           intcon	equ	0xFF2
  6664                           postinc0	equ	0xFEE
  6665                           wreg	equ	0xFE8
  6666                           postinc2	equ	0xFDE
  6667                           postdec2	equ	0xFDD
  6668                           fsr2h	equ	0xFDA
  6669                           fsr2l	equ	0xFD9
  6670                           status	equ	0xFD8
  6671                           
  6672 ;; *************** function ___ftsub *****************
  6673 ;; Defined at:
  6674 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  f1              3   37[BANK0 ] float 
  6677 ;;  f2              3   40[BANK0 ] float 
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;		None
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  3   37[BANK0 ] float 
  6682 ;; Registers used:
  6683 ;;		wreg, status,2, status,0, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6689 ;;      Params:         0       6       0       0       0       0       0
  6690 ;;      Locals:         0       0       0       0       0       0       0
  6691 ;;      Temps:          0       0       0       0       0       0       0
  6692 ;;      Totals:         0       6       0       0       0       0       0
  6693 ;;Total ram usage:        6 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:    6
  6696 ;; This function calls:
  6697 ;;		___ftadd
  6698 ;; This function is called by:
  6699 ;;		_Temp_Convert
  6700 ;;		_printf
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           	psect	text19
  6705  003ACA                     __ptext19:
  6706                           	opt stack 0
  6707  003ACA                     ___ftsub:
  6708                           	opt stack 23
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;incstack = 0
  6712  003ACA  0100               	movlb	0	; () banked
  6713  003ACC  5188               	movf	___ftsub@f2& (0+255),w,b
  6714  003ACE  0100               	movlb	0	; () banked
  6715  003AD0  1189               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6716  003AD2  0100               	movlb	0	; () banked
  6717  003AD4  118A               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6718  003AD6  B4D8               	btfsc	status,2,c
  6719  003AD8  D00A               	goto	l5093
  6720                           
  6721                           ; BSR set to: 0
  6722  003ADA  0E00               	movlw	0
  6723  003ADC  0100               	movlb	0	; () banked
  6724  003ADE  1B88               	xorwf	___ftsub@f2& (0+255),f,b
  6725  003AE0  0E00               	movlw	0
  6726  003AE2  0100               	movlb	0	; () banked
  6727  003AE4  1B89               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6728  003AE6  0E80               	movlw	128
  6729  003AE8  0100               	movlb	0	; () banked
  6730  003AEA  1B8A               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6731  003AEC  D000               	goto	l5093
  6732  003AEE                     l5093:
  6733                           
  6734                           ; BSR set to: 0
  6735  003AEE  C085  F079         	movff	___ftsub@f1,___ftadd@f1
  6736  003AF2  C086  F07A         	movff	___ftsub@f1+1,___ftadd@f1+1
  6737  003AF6  C087  F07B         	movff	___ftsub@f1+2,___ftadd@f1+2
  6738  003AFA  C088  F07C         	movff	___ftsub@f2,___ftadd@f2
  6739  003AFE  C089  F07D         	movff	___ftsub@f2+1,___ftadd@f2+1
  6740  003B02  C08A  F07E         	movff	___ftsub@f2+2,___ftadd@f2+2
  6741  003B06  EC1E  F00E         	call	___ftadd	;wreg free
  6742  003B0A  C079  F085         	movff	?___ftadd,?___ftsub
  6743  003B0E  C07A  F086         	movff	?___ftadd+1,?___ftsub+1
  6744  003B12  C07B  F087         	movff	?___ftadd+2,?___ftsub+2
  6745  003B16  0012               	return	
  6746  003B18  0012               	return		;funcret
  6747  003B1A                     __end_of___ftsub:
  6748                           	opt stack 0
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           postinc0	equ	0xFEE
  6757                           wreg	equ	0xFE8
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           fsr2h	equ	0xFDA
  6761                           fsr2l	equ	0xFD9
  6762                           status	equ	0xFD8
  6763                           
  6764 ;; *************** function _Temp_Filter *****************
  6765 ;; Defined at:
  6766 ;;		line 36 in file "Tempeture.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;  x               2   37[BANK0 ] int 
  6771 ;; Return value:  Size  Location     Type
  6772 ;;		None               void
  6773 ;; Registers used:
  6774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6780 ;;      Params:         0       0       0       0       0       0       0
  6781 ;;      Locals:         0       2       0       0       0       0       0
  6782 ;;      Temps:          0       0       0       0       0       0       0
  6783 ;;      Totals:         0       2       0       0       0       0       0
  6784 ;;Total ram usage:        2 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:    6
  6787 ;; This function calls:
  6788 ;;		___ftadd
  6789 ;;		___ftmul
  6790 ;;		___wmul
  6791 ;; This function is called by:
  6792 ;;		_Temp_Convert
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           	psect	text20
  6797  0026AA                     __ptext20:
  6798                           	opt stack 0
  6799  0026AA                     _Temp_Filter:
  6800                           	opt stack 23
  6801                           
  6802                           ;Tempeture.c: 39: int x;
  6803                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  6804                           
  6805                           ;incstack = 0
  6806  0026AA  0E00               	movlw	0
  6807  0026AC  0100               	movlb	0	; () banked
  6808  0026AE  6F86               	movwf	(Temp_Filter@x+1)& (0+255),b
  6809  0026B0  0E00               	movlw	0
  6810  0026B2  6F85               	movwf	Temp_Filter@x& (0+255),b
  6811  0026B4                     l4915:
  6812                           
  6813                           ; BSR set to: 0
  6814  0026B4  0100               	movlb	0	; () banked
  6815  0026B6  BF86               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  6816  0026B8  D00A               	goto	l4919
  6817  0026BA  0100               	movlb	0	; () banked
  6818  0026BC  5186               	movf	(Temp_Filter@x+1)& (0+255),w,b
  6819  0026BE  E172               	bnz	l4925
  6820  0026C0  0E0A               	movlw	10
  6821  0026C2  0100               	movlb	0	; () banked
  6822  0026C4  5D85               	subwf	Temp_Filter@x& (0+255),w,b
  6823  0026C6  B0D8               	btfsc	status,0,c
  6824  0026C8  D06D               	goto	l4925
  6825  0026CA  D001               	goto	l4919
  6826                           
  6827                           ; BSR set to: 0
  6828  0026CC  D06B               	goto	l4925
  6829  0026CE                     l4919:
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;Tempeture.c: 41: {
  6833                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  6834  0026CE  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6835  0026D2  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6836  0026D6  0E00               	movlw	0
  6837  0026D8  6E28               	movwf	___wmul@multiplicand+1,c
  6838  0026DA  0E03               	movlw	3
  6839  0026DC  6E27               	movwf	___wmul@multiplicand,c
  6840  0026DE  EC3C  F01E         	call	___wmul	;wreg free
  6841  0026E2  0E96               	movlw	low _Temp_DegF
  6842  0026E4  2425               	addwf	?___wmul,w,c
  6843  0026E6  6ED9               	movwf	fsr2l,c
  6844  0026E8  0E01               	movlw	high _Temp_DegF
  6845  0026EA  2026               	addwfc	?___wmul+1,w,c
  6846  0026EC  6EDA               	movwf	fsr2h,c
  6847  0026EE  0E48               	movlw	72
  6848  0026F0  0100               	movlb	0	; () banked
  6849  0026F2  6F63               	movwf	___ftmul@f2& (0+255),b
  6850  0026F4  0E61               	movlw	97
  6851  0026F6  0100               	movlb	0	; () banked
  6852  0026F8  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6853  0026FA  0E3F               	movlw	63
  6854  0026FC  0100               	movlb	0	; () banked
  6855  0026FE  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6856  002700  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6857  002704  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6858  002708  0E00               	movlw	0
  6859  00270A  6E28               	movwf	___wmul@multiplicand+1,c
  6860  00270C  0E03               	movlw	3
  6861  00270E  6E27               	movwf	___wmul@multiplicand,c
  6862  002710  EC3C  F01E         	call	___wmul	;wreg free
  6863  002714  0ED2               	movlw	low _TmpTemp_DegF
  6864  002716  2425               	addwf	?___wmul,w,c
  6865  002718  6EE1               	movwf	fsr1l,c
  6866  00271A  0E01               	movlw	high _TmpTemp_DegF
  6867  00271C  2026               	addwfc	?___wmul+1,w,c
  6868  00271E  6EE2               	movwf	fsr1h,c
  6869  002720  CFE6 F060          	movff	postinc1,___ftmul@f1
  6870  002724  CFE6 F061          	movff	postinc1,___ftmul@f1+1
  6871  002728  CFE5 F062          	movff	postdec1,___ftmul@f1+2
  6872  00272C  ECCB  F014         	call	___ftmul	;wreg free
  6873  002730  C060  F079         	movff	?___ftmul,___ftadd@f1
  6874  002734  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6875  002738  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6876  00273C  0EC3               	movlw	195
  6877  00273E  0100               	movlb	0	; () banked
  6878  002740  6F63               	movwf	___ftmul@f2& (0+255),b
  6879  002742  0EF5               	movlw	245
  6880  002744  0100               	movlb	0	; () banked
  6881  002746  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6882  002748  0E3D               	movlw	61
  6883  00274A  0100               	movlb	0	; () banked
  6884  00274C  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6885  00274E  0E00               	movlw	0
  6886  002750  6E28               	movwf	___wmul@multiplicand+1,c
  6887  002752  0E03               	movlw	3
  6888  002754  6E27               	movwf	___wmul@multiplicand,c
  6889  002756  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6890  00275A  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6891  00275E  EC3C  F01E         	call	___wmul	;wreg free
  6892  002762  0E78               	movlw	low _PrevTemp_DegF
  6893  002764  2425               	addwf	?___wmul,w,c
  6894  002766  6EE1               	movwf	fsr1l,c
  6895  002768  0E01               	movlw	high _PrevTemp_DegF
  6896  00276A  2026               	addwfc	?___wmul+1,w,c
  6897  00276C  6EE2               	movwf	fsr1h,c
  6898  00276E  CFE6 F060          	movff	postinc1,___ftmul@f1
  6899  002772  CFE6 F061          	movff	postinc1,___ftmul@f1+1
  6900  002776  CFE5 F062          	movff	postdec1,___ftmul@f1+2
  6901  00277A  ECCB  F014         	call	___ftmul	;wreg free
  6902  00277E  C060  F07C         	movff	?___ftmul,___ftadd@f2
  6903  002782  C061  F07D         	movff	?___ftmul+1,___ftadd@f2+1
  6904  002786  C062  F07E         	movff	?___ftmul+2,___ftadd@f2+2
  6905  00278A  EC1E  F00E         	call	___ftadd	;wreg free
  6906  00278E  C079  FFDE         	movff	?___ftadd,postinc2
  6907  002792  C07A  FFDE         	movff	?___ftadd+1,postinc2
  6908  002796  C07B  FFDE         	movff	?___ftadd+2,postinc2
  6909  00279A  0100               	movlb	0	; () banked
  6910  00279C  4B85               	infsnz	Temp_Filter@x& (0+255),f,b
  6911  00279E  2B86               	incf	(Temp_Filter@x+1)& (0+255),f,b
  6912  0027A0  D789               	goto	l4915
  6913                           
  6914                           ; BSR set to: 0
  6915  0027A2  D000               	goto	l4925
  6916  0027A4                     l4925:
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;Tempeture.c: 43: }
  6920                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  6921  0027A4  0E00               	movlw	0
  6922  0027A6  0100               	movlb	0	; () banked
  6923  0027A8  6F86               	movwf	(Temp_Filter@x+1)& (0+255),b
  6924  0027AA  0E00               	movlw	0
  6925  0027AC  6F85               	movwf	Temp_Filter@x& (0+255),b
  6926  0027AE                     l4927:
  6927                           
  6928                           ; BSR set to: 0
  6929  0027AE  0100               	movlb	0	; () banked
  6930  0027B0  BF86               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  6931  0027B2  D00A               	goto	l4931
  6932  0027B4  0100               	movlb	0	; () banked
  6933  0027B6  5186               	movf	(Temp_Filter@x+1)& (0+255),w,b
  6934  0027B8  E132               	bnz	l368
  6935  0027BA  0E0A               	movlw	10
  6936  0027BC  0100               	movlb	0	; () banked
  6937  0027BE  5D85               	subwf	Temp_Filter@x& (0+255),w,b
  6938  0027C0  B0D8               	btfsc	status,0,c
  6939  0027C2  0012               	return	
  6940  0027C4  D001               	goto	l4931
  6941                           
  6942                           ; BSR set to: 0
  6943  0027C6  0012               	return	
  6944  0027C8                     l4931:
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;Tempeture.c: 45: {
  6948                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  6949  0027C8  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6950  0027CC  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6951  0027D0  0E00               	movlw	0
  6952  0027D2  6E28               	movwf	___wmul@multiplicand+1,c
  6953  0027D4  0E03               	movlw	3
  6954  0027D6  6E27               	movwf	___wmul@multiplicand,c
  6955  0027D8  EC3C  F01E         	call	___wmul	;wreg free
  6956  0027DC  0E96               	movlw	low _Temp_DegF
  6957  0027DE  2425               	addwf	?___wmul,w,c
  6958  0027E0  6ED9               	movwf	fsr2l,c
  6959  0027E2  0E01               	movlw	high _Temp_DegF
  6960  0027E4  2026               	addwfc	?___wmul+1,w,c
  6961  0027E6  6EDA               	movwf	fsr2h,c
  6962  0027E8  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6963  0027EC  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6964  0027F0  0E00               	movlw	0
  6965  0027F2  6E28               	movwf	___wmul@multiplicand+1,c
  6966  0027F4  0E03               	movlw	3
  6967  0027F6  6E27               	movwf	___wmul@multiplicand,c
  6968  0027F8  EC3C  F01E         	call	___wmul	;wreg free
  6969  0027FC  0E78               	movlw	low _PrevTemp_DegF
  6970  0027FE  2425               	addwf	?___wmul,w,c
  6971  002800  6EE1               	movwf	fsr1l,c
  6972  002802  0E01               	movlw	high _PrevTemp_DegF
  6973  002804  2026               	addwfc	?___wmul+1,w,c
  6974  002806  6EE2               	movwf	fsr1h,c
  6975  002808  CFDE FFE6          	movff	postinc2,postinc1
  6976  00280C  CFDE FFE6          	movff	postinc2,postinc1
  6977  002810  CFDE FFE6          	movff	postinc2,postinc1
  6978  002814  0100               	movlb	0	; () banked
  6979  002816  4B85               	infsnz	Temp_Filter@x& (0+255),f,b
  6980  002818  2B86               	incf	(Temp_Filter@x+1)& (0+255),f,b
  6981  00281A  D7C9               	goto	l4927
  6982                           
  6983                           ; BSR set to: 0
  6984  00281C  0012               	return	
  6985  00281E                     l368:
  6986                           
  6987                           ; BSR set to: 0
  6988  00281E  0012               	return		;funcret
  6989  002820                     __end_of_Temp_Filter:
  6990                           	opt stack 0
  6991                           tblptru	equ	0xFF8
  6992                           tblptrh	equ	0xFF7
  6993                           tblptrl	equ	0xFF6
  6994                           tablat	equ	0xFF5
  6995                           prodh	equ	0xFF4
  6996                           prodl	equ	0xFF3
  6997                           intcon	equ	0xFF2
  6998                           postinc0	equ	0xFEE
  6999                           wreg	equ	0xFE8
  7000                           postinc1	equ	0xFE6
  7001                           postdec1	equ	0xFE5
  7002                           fsr1h	equ	0xFE2
  7003                           fsr1l	equ	0xFE1
  7004                           postinc2	equ	0xFDE
  7005                           postdec2	equ	0xFDD
  7006                           fsr2h	equ	0xFDA
  7007                           fsr2l	equ	0xFD9
  7008                           status	equ	0xFD8
  7009                           
  7010 ;; *************** function _SYSTEM_Initialize *****************
  7011 ;; Defined at:
  7012 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;		None
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;		None
  7017 ;; Return value:  Size  Location     Type
  7018 ;;		None               void
  7019 ;; Registers used:
  7020 ;;		wreg, status,2, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7026 ;;      Params:         0       0       0       0       0       0       0
  7027 ;;      Locals:         0       0       0       0       0       0       0
  7028 ;;      Temps:          0       0       0       0       0       0       0
  7029 ;;      Totals:         0       0       0       0       0       0       0
  7030 ;;Total ram usage:        0 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    6
  7033 ;; This function calls:
  7034 ;;		_ADC_Initialize
  7035 ;;		_INTERRUPT_Initialize
  7036 ;;		_OSCILLATOR_Initialize
  7037 ;;		_PIN_MANAGER_Initialize
  7038 ;;		_TMR1_Initialize
  7039 ;; This function is called by:
  7040 ;;		_main
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text21
  7045  003DA8                     __ptext21:
  7046                           	opt stack 0
  7047  003DA8                     _SYSTEM_Initialize:
  7048                           	opt stack 24
  7049                           
  7050                           ;mcc.c: 114: OSCILLATOR_Initialize();
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;incstack = 0
  7054  003DA8  ECEA  F01E         	call	_OSCILLATOR_Initialize	;wreg free
  7055                           
  7056                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7057  003DAC  EC8D  F01D         	call	_PIN_MANAGER_Initialize	;wreg free
  7058                           
  7059                           ;mcc.c: 116: INTERRUPT_Initialize();
  7060  003DB0  ECF8  F01E         	call	_INTERRUPT_Initialize	;wreg free
  7061                           
  7062                           ;mcc.c: 117: ADC_Initialize();
  7063  003DB4  ECA4  F01E         	call	_ADC_Initialize	;wreg free
  7064                           
  7065                           ;mcc.c: 119: TMR1_Initialize();
  7066  003DB8  EC86  F01E         	call	_TMR1_Initialize	;wreg free
  7067  003DBC  0012               	return		;funcret
  7068  003DBE                     __end_of_SYSTEM_Initialize:
  7069                           	opt stack 0
  7070                           tblptru	equ	0xFF8
  7071                           tblptrh	equ	0xFF7
  7072                           tblptrl	equ	0xFF6
  7073                           tablat	equ	0xFF5
  7074                           prodh	equ	0xFF4
  7075                           prodl	equ	0xFF3
  7076                           intcon	equ	0xFF2
  7077                           postinc0	equ	0xFEE
  7078                           wreg	equ	0xFE8
  7079                           postinc1	equ	0xFE6
  7080                           postdec1	equ	0xFE5
  7081                           fsr1h	equ	0xFE2
  7082                           fsr1l	equ	0xFE1
  7083                           postinc2	equ	0xFDE
  7084                           postdec2	equ	0xFDD
  7085                           fsr2h	equ	0xFDA
  7086                           fsr2l	equ	0xFD9
  7087                           status	equ	0xFD8
  7088                           
  7089 ;; *************** function _TMR1_Initialize *****************
  7090 ;; Defined at:
  7091 ;;		line 23 in file "mcc_generated_files/tmr1.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;		None
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;		None
  7096 ;; Return value:  Size  Location     Type
  7097 ;;		None               void
  7098 ;; Registers used:
  7099 ;;		wreg, status,2, cstack
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7105 ;;      Params:         0       0       0       0       0       0       0
  7106 ;;      Locals:         0       0       0       0       0       0       0
  7107 ;;      Temps:          0       0       0       0       0       0       0
  7108 ;;      Totals:         0       0       0       0       0       0       0
  7109 ;;Total ram usage:        0 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; Hardware stack levels required when called:    5
  7112 ;; This function calls:
  7113 ;;		_TMR1_StartTimer
  7114 ;; This function is called by:
  7115 ;;		_SYSTEM_Initialize
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text22
  7120  003D0C                     __ptext22:
  7121                           	opt stack 0
  7122  003D0C                     _TMR1_Initialize:
  7123                           	opt stack 24
  7124                           
  7125                           ;tmr1.c: 28: T1CON = 0x34;
  7126                           
  7127                           ;incstack = 0
  7128  003D0C  0E34               	movlw	52
  7129  003D0E  6ECD               	movwf	4045,c	;volatile
  7130                           
  7131                           ;tmr1.c: 31: T1GCON = 0x00;
  7132  003D10  0E00               	movlw	0
  7133  003D12  6ECC               	movwf	4044,c	;volatile
  7134                           
  7135                           ;tmr1.c: 34: TMR1H = 0x0B;
  7136  003D14  0E0B               	movlw	11
  7137  003D16  6ECF               	movwf	4047,c	;volatile
  7138                           
  7139                           ;tmr1.c: 37: TMR1L = 0xDC;
  7140  003D18  0EDC               	movlw	220
  7141  003D1A  6ECE               	movwf	4046,c	;volatile
  7142                           
  7143                           ;tmr1.c: 40: timer1ReloadVal=TMR1;
  7144  003D1C  CFCE F048          	movff	4046,_timer1ReloadVal	;volatile
  7145  003D20  CFCF F049          	movff	4047,_timer1ReloadVal+1	;volatile
  7146                           
  7147                           ;tmr1.c: 43: PIR1bits.TMR1IF = 0;
  7148  003D24  909E               	bcf	3998,0,c	;volatile
  7149                           
  7150                           ;tmr1.c: 46: PIE1bits.TMR1IE = 1;
  7151  003D26  809D               	bsf	3997,0,c	;volatile
  7152                           
  7153                           ;tmr1.c: 49: TMR1_StartTimer();
  7154  003D28  ECFE  F01E         	call	_TMR1_StartTimer	;wreg free
  7155  003D2C  0012               	return		;funcret
  7156  003D2E                     __end_of_TMR1_Initialize:
  7157                           	opt stack 0
  7158                           tblptru	equ	0xFF8
  7159                           tblptrh	equ	0xFF7
  7160                           tblptrl	equ	0xFF6
  7161                           tablat	equ	0xFF5
  7162                           prodh	equ	0xFF4
  7163                           prodl	equ	0xFF3
  7164                           intcon	equ	0xFF2
  7165                           postinc0	equ	0xFEE
  7166                           wreg	equ	0xFE8
  7167                           postinc1	equ	0xFE6
  7168                           postdec1	equ	0xFE5
  7169                           fsr1h	equ	0xFE2
  7170                           fsr1l	equ	0xFE1
  7171                           postinc2	equ	0xFDE
  7172                           postdec2	equ	0xFDD
  7173                           fsr2h	equ	0xFDA
  7174                           fsr2l	equ	0xFD9
  7175                           status	equ	0xFD8
  7176                           
  7177 ;; *************** function _TMR1_StartTimer *****************
  7178 ;; Defined at:
  7179 ;;		line 52 in file "mcc_generated_files/tmr1.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;		None               void
  7186 ;; Registers used:
  7187 ;;		None
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7193 ;;      Params:         0       0       0       0       0       0       0
  7194 ;;      Locals:         0       0       0       0       0       0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0
  7196 ;;      Totals:         0       0       0       0       0       0       0
  7197 ;;Total ram usage:        0 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    4
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_TMR1_Initialize
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text23
  7208  003DFC                     __ptext23:
  7209                           	opt stack 0
  7210  003DFC                     _TMR1_StartTimer:
  7211                           	opt stack 24
  7212                           
  7213                           ;tmr1.c: 55: T1CONbits.TMR1ON = 1;
  7214                           
  7215                           ;incstack = 0
  7216  003DFC  80CD               	bsf	4045,0,c	;volatile
  7217  003DFE  0012               	return		;funcret
  7218  003E00                     __end_of_TMR1_StartTimer:
  7219                           	opt stack 0
  7220                           tblptru	equ	0xFF8
  7221                           tblptrh	equ	0xFF7
  7222                           tblptrl	equ	0xFF6
  7223                           tablat	equ	0xFF5
  7224                           prodh	equ	0xFF4
  7225                           prodl	equ	0xFF3
  7226                           intcon	equ	0xFF2
  7227                           postinc0	equ	0xFEE
  7228                           wreg	equ	0xFE8
  7229                           postinc1	equ	0xFE6
  7230                           postdec1	equ	0xFE5
  7231                           fsr1h	equ	0xFE2
  7232                           fsr1l	equ	0xFE1
  7233                           postinc2	equ	0xFDE
  7234                           postdec2	equ	0xFDD
  7235                           fsr2h	equ	0xFDA
  7236                           fsr2l	equ	0xFD9
  7237                           status	equ	0xFD8
  7238                           
  7239 ;; *************** function _PIN_MANAGER_Initialize *****************
  7240 ;; Defined at:
  7241 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;		None
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;		None
  7246 ;; Return value:  Size  Location     Type
  7247 ;;		None               void
  7248 ;; Registers used:
  7249 ;;		wreg, status,2
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7255 ;;      Params:         0       0       0       0       0       0       0
  7256 ;;      Locals:         0       0       0       0       0       0       0
  7257 ;;      Temps:          0       0       0       0       0       0       0
  7258 ;;      Totals:         0       0       0       0       0       0       0
  7259 ;;Total ram usage:        0 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:    4
  7262 ;; This function calls:
  7263 ;;		Nothing
  7264 ;; This function is called by:
  7265 ;;		_SYSTEM_Initialize
  7266 ;; This function uses a non-reentrant model
  7267 ;;
  7268                           
  7269                           	psect	text24
  7270  003B1A                     __ptext24:
  7271                           	opt stack 0
  7272  003B1A                     _PIN_MANAGER_Initialize:
  7273                           	opt stack 25
  7274                           
  7275                           ;pin_manager.c: 52: LATA = 0x00;
  7276                           
  7277                           ;incstack = 0
  7278  003B1A  0E00               	movlw	0
  7279  003B1C  6E89               	movwf	3977,c	;volatile
  7280                           
  7281                           ;pin_manager.c: 53: TRISA = 0x2F;
  7282  003B1E  0E2F               	movlw	47
  7283  003B20  6E92               	movwf	3986,c	;volatile
  7284                           
  7285                           ;pin_manager.c: 54: ANSELA = 0x2F;
  7286  003B22  0E2F               	movlw	47
  7287  003B24  010F               	movlb	15	; () banked
  7288  003B26  6F38               	movwf	56,b	;volatile
  7289                           
  7290                           ;pin_manager.c: 56: LATB = 0x00;
  7291  003B28  0E00               	movlw	0
  7292  003B2A  6E8A               	movwf	3978,c	;volatile
  7293                           
  7294                           ;pin_manager.c: 57: TRISB = 0xF8;
  7295  003B2C  0EF8               	movlw	248
  7296  003B2E  6E93               	movwf	3987,c	;volatile
  7297                           
  7298                           ;pin_manager.c: 58: ANSELB = 0x38;
  7299  003B30  0E38               	movlw	56
  7300  003B32  010F               	movlb	15	; () banked
  7301  003B34  6F39               	movwf	57,b	;volatile
  7302                           
  7303                           ;pin_manager.c: 59: WPUB = 0x00;
  7304  003B36  0E00               	movlw	0
  7305  003B38  6E61               	movwf	3937,c	;volatile
  7306                           
  7307                           ;pin_manager.c: 61: LATC = 0x00;
  7308  003B3A  0E00               	movlw	0
  7309  003B3C  6E8B               	movwf	3979,c	;volatile
  7310                           
  7311                           ;pin_manager.c: 62: TRISC = 0xD6;
  7312  003B3E  0ED6               	movlw	214
  7313  003B40  6E94               	movwf	3988,c	;volatile
  7314                           
  7315                           ;pin_manager.c: 63: ANSELC = 0x14;
  7316  003B42  0E14               	movlw	20
  7317  003B44  010F               	movlb	15	; () banked
  7318  003B46  6F3A               	movwf	58,b	;volatile
  7319                           
  7320                           ;pin_manager.c: 65: LATD = 0x00;
  7321  003B48  0E00               	movlw	0
  7322  003B4A  6E8C               	movwf	3980,c	;volatile
  7323                           
  7324                           ;pin_manager.c: 66: TRISD = 0x03;
  7325  003B4C  0E03               	movlw	3
  7326  003B4E  6E95               	movwf	3989,c	;volatile
  7327                           
  7328                           ;pin_manager.c: 67: ANSELD = 0x03;
  7329  003B50  0E03               	movlw	3
  7330  003B52  010F               	movlb	15	; () banked
  7331  003B54  6F3B               	movwf	59,b	;volatile
  7332                           
  7333                           ;pin_manager.c: 69: LATE = 0x00;
  7334  003B56  0E00               	movlw	0
  7335  003B58  6E8D               	movwf	3981,c	;volatile
  7336                           
  7337                           ;pin_manager.c: 70: TRISE = 0x07;
  7338  003B5A  0E07               	movlw	7
  7339  003B5C  6E96               	movwf	3990,c	;volatile
  7340                           
  7341                           ;pin_manager.c: 71: ANSELE = 0x07;
  7342  003B5E  0E07               	movlw	7
  7343  003B60  010F               	movlb	15	; () banked
  7344  003B62  6F3C               	movwf	60,b	;volatile
  7345                           
  7346                           ; BSR set to: 15
  7347                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  7348  003B64  8EF1               	bsf	intcon2,7,c	;volatile
  7349                           
  7350                           ; BSR set to: 15
  7351  003B66  0012               	return		;funcret
  7352  003B68                     __end_of_PIN_MANAGER_Initialize:
  7353                           	opt stack 0
  7354                           tblptru	equ	0xFF8
  7355                           tblptrh	equ	0xFF7
  7356                           tblptrl	equ	0xFF6
  7357                           tablat	equ	0xFF5
  7358                           prodh	equ	0xFF4
  7359                           prodl	equ	0xFF3
  7360                           intcon	equ	0xFF2
  7361                           intcon2	equ	0xFF1
  7362                           postinc0	equ	0xFEE
  7363                           wreg	equ	0xFE8
  7364                           postinc1	equ	0xFE6
  7365                           postdec1	equ	0xFE5
  7366                           fsr1h	equ	0xFE2
  7367                           fsr1l	equ	0xFE1
  7368                           postinc2	equ	0xFDE
  7369                           postdec2	equ	0xFDD
  7370                           fsr2h	equ	0xFDA
  7371                           fsr2l	equ	0xFD9
  7372                           status	equ	0xFD8
  7373                           
  7374 ;; *************** function _OSCILLATOR_Initialize *****************
  7375 ;; Defined at:
  7376 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;		None
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;		None
  7381 ;; Return value:  Size  Location     Type
  7382 ;;		None               void
  7383 ;; Registers used:
  7384 ;;		wreg, status,2
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7390 ;;      Params:         0       0       0       0       0       0       0
  7391 ;;      Locals:         0       0       0       0       0       0       0
  7392 ;;      Temps:          0       0       0       0       0       0       0
  7393 ;;      Totals:         0       0       0       0       0       0       0
  7394 ;;Total ram usage:        0 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    4
  7397 ;; This function calls:
  7398 ;;		Nothing
  7399 ;; This function is called by:
  7400 ;;		_SYSTEM_Initialize
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           	psect	text25
  7405  003DD4                     __ptext25:
  7406                           	opt stack 0
  7407  003DD4                     _OSCILLATOR_Initialize:
  7408                           	opt stack 25
  7409                           
  7410                           ;mcc.c: 125: OSCCON = 0x62;
  7411                           
  7412                           ; BSR set to: 15
  7413                           ;incstack = 0
  7414  003DD4  0E62               	movlw	98
  7415  003DD6  6ED3               	movwf	4051,c	;volatile
  7416                           
  7417                           ;mcc.c: 127: OSCCON2 = 0x04;
  7418  003DD8  0E04               	movlw	4
  7419  003DDA  6ED2               	movwf	4050,c	;volatile
  7420                           
  7421                           ;mcc.c: 129: OSCTUNE = 0x00;
  7422  003DDC  0E00               	movlw	0
  7423  003DDE  6E9B               	movwf	3995,c	;volatile
  7424  003DE0  0012               	return		;funcret
  7425  003DE2                     __end_of_OSCILLATOR_Initialize:
  7426                           	opt stack 0
  7427                           tblptru	equ	0xFF8
  7428                           tblptrh	equ	0xFF7
  7429                           tblptrl	equ	0xFF6
  7430                           tablat	equ	0xFF5
  7431                           prodh	equ	0xFF4
  7432                           prodl	equ	0xFF3
  7433                           intcon	equ	0xFF2
  7434                           intcon2	equ	0xFF1
  7435                           postinc0	equ	0xFEE
  7436                           wreg	equ	0xFE8
  7437                           postinc1	equ	0xFE6
  7438                           postdec1	equ	0xFE5
  7439                           fsr1h	equ	0xFE2
  7440                           fsr1l	equ	0xFE1
  7441                           postinc2	equ	0xFDE
  7442                           postdec2	equ	0xFDD
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function _INTERRUPT_Initialize *****************
  7448 ;; Defined at:
  7449 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;		None
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;		None
  7454 ;; Return value:  Size  Location     Type
  7455 ;;		None               void
  7456 ;; Registers used:
  7457 ;;		None
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7463 ;;      Params:         0       0       0       0       0       0       0
  7464 ;;      Locals:         0       0       0       0       0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0
  7466 ;;      Totals:         0       0       0       0       0       0       0
  7467 ;;Total ram usage:        0 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; Hardware stack levels required when called:    4
  7470 ;; This function calls:
  7471 ;;		Nothing
  7472 ;; This function is called by:
  7473 ;;		_SYSTEM_Initialize
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           	psect	text26
  7478  003DF0                     __ptext26:
  7479                           	opt stack 0
  7480  003DF0                     _INTERRUPT_Initialize:
  7481                           	opt stack 25
  7482                           
  7483                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  7484                           
  7485                           ;incstack = 0
  7486  003DF0  9ED0               	bcf	4048,7,c	;volatile
  7487                           
  7488                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  7489  003DF2  9A9F               	bcf	3999,5,c	;volatile
  7490                           
  7491                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  7492  003DF4  9C9F               	bcf	3999,6,c	;volatile
  7493                           
  7494                           ;interrupt_manager.c: 64: IPR1bits.TX1IP = 0;
  7495  003DF6  989F               	bcf	3999,4,c	;volatile
  7496                           
  7497                           ;interrupt_manager.c: 66: IPR1bits.TMR1IP = 0;
  7498  003DF8  909F               	bcf	3999,0,c	;volatile
  7499  003DFA  0012               	return		;funcret
  7500  003DFC                     __end_of_INTERRUPT_Initialize:
  7501                           	opt stack 0
  7502                           tblptru	equ	0xFF8
  7503                           tblptrh	equ	0xFF7
  7504                           tblptrl	equ	0xFF6
  7505                           tablat	equ	0xFF5
  7506                           prodh	equ	0xFF4
  7507                           prodl	equ	0xFF3
  7508                           intcon	equ	0xFF2
  7509                           intcon2	equ	0xFF1
  7510                           postinc0	equ	0xFEE
  7511                           wreg	equ	0xFE8
  7512                           postinc1	equ	0xFE6
  7513                           postdec1	equ	0xFE5
  7514                           fsr1h	equ	0xFE2
  7515                           fsr1l	equ	0xFE1
  7516                           postinc2	equ	0xFDE
  7517                           postdec2	equ	0xFDD
  7518                           fsr2h	equ	0xFDA
  7519                           fsr2l	equ	0xFD9
  7520                           status	equ	0xFD8
  7521                           
  7522 ;; *************** function _ADC_Initialize *****************
  7523 ;; Defined at:
  7524 ;;		line 16 in file "mcc_generated_files/adc.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;		None               void
  7531 ;; Registers used:
  7532 ;;		wreg, status,2
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7538 ;;      Params:         0       0       0       0       0       0       0
  7539 ;;      Locals:         0       0       0       0       0       0       0
  7540 ;;      Temps:          0       0       0       0       0       0       0
  7541 ;;      Totals:         0       0       0       0       0       0       0
  7542 ;;Total ram usage:        0 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    4
  7545 ;; This function calls:
  7546 ;;		Nothing
  7547 ;; This function is called by:
  7548 ;;		_SYSTEM_Initialize
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           	psect	text27
  7553  003D48                     __ptext27:
  7554                           	opt stack 0
  7555  003D48                     _ADC_Initialize:
  7556                           	opt stack 25
  7557                           
  7558                           ;adc.c: 21: ADCON0 = 0x01;
  7559                           
  7560                           ;incstack = 0
  7561  003D48  0E01               	movlw	1
  7562  003D4A  6EC2               	movwf	4034,c	;volatile
  7563                           
  7564                           ;adc.c: 24: ADCON1 = 0x80;
  7565  003D4C  0E80               	movlw	128
  7566  003D4E  6EC1               	movwf	4033,c	;volatile
  7567                           
  7568                           ;adc.c: 27: ADCON2 = 0xA9;
  7569  003D50  0EA9               	movlw	169
  7570  003D52  6EC0               	movwf	4032,c	;volatile
  7571                           
  7572                           ;adc.c: 30: ADRESL = 0x00;
  7573  003D54  0E00               	movlw	0
  7574  003D56  6EC3               	movwf	4035,c	;volatile
  7575                           
  7576                           ;adc.c: 33: ADRESH = 0x00;
  7577  003D58  0E00               	movlw	0
  7578  003D5A  6EC4               	movwf	4036,c	;volatile
  7579                           
  7580                           ;adc.c: 36: PIE1bits.ADIE = 1;
  7581  003D5C  8C9D               	bsf	3997,6,c	;volatile
  7582  003D5E  0012               	return		;funcret
  7583  003D60                     __end_of_ADC_Initialize:
  7584                           	opt stack 0
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodh	equ	0xFF4
  7590                           prodl	equ	0xFF3
  7591                           intcon	equ	0xFF2
  7592                           intcon2	equ	0xFF1
  7593                           postinc0	equ	0xFEE
  7594                           wreg	equ	0xFE8
  7595                           postinc1	equ	0xFE6
  7596                           postdec1	equ	0xFE5
  7597                           fsr1h	equ	0xFE2
  7598                           fsr1l	equ	0xFE1
  7599                           postinc2	equ	0xFDE
  7600                           postdec2	equ	0xFDD
  7601                           fsr2h	equ	0xFDA
  7602                           fsr2l	equ	0xFD9
  7603                           status	equ	0xFD8
  7604                           
  7605 ;; *************** function _RunBypas *****************
  7606 ;; Defined at:
  7607 ;;		line 84 in file "Bypass.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;		None
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;  batvolt         3   53[COMRAM] float 
  7612 ;;  i               2   56[COMRAM] int 
  7613 ;;  cellbyp         2   51[COMRAM] int 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  2  404[None  ] int 
  7616 ;; Registers used:
  7617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7623 ;;      Params:         0       0       0       0       0       0       0
  7624 ;;      Locals:         7       0       0       0       0       0       0
  7625 ;;      Temps:          0       0       0       0       0       0       0
  7626 ;;      Totals:         7       0       0       0       0       0       0
  7627 ;;Total ram usage:        7 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    6
  7630 ;; This function calls:
  7631 ;;		_Battery_Get
  7632 ;;		_SetBypas
  7633 ;;		___ftge
  7634 ;; This function is called by:
  7635 ;;		_main
  7636 ;; This function uses a non-reentrant model
  7637 ;;
  7638                           
  7639                           	psect	text28
  7640  0031DE                     __ptext28:
  7641                           	opt stack 0
  7642  0031DE                     _RunBypas:
  7643                           	opt stack 24
  7644                           
  7645                           ;Bypass.c: 86: int cellbyp = 0;
  7646                           
  7647                           ;incstack = 0
  7648  0031DE  0E00               	movlw	0
  7649  0031E0  6E35               	movwf	RunBypas@cellbyp+1,c
  7650  0031E2  0E00               	movlw	0
  7651  0031E4  6E34               	movwf	RunBypas@cellbyp,c
  7652                           
  7653                           ;Bypass.c: 87: int i = 0;
  7654  0031E6  0E00               	movlw	0
  7655  0031E8  6E3A               	movwf	RunBypas@i+1,c
  7656  0031EA  0E00               	movlw	0
  7657  0031EC  6E39               	movwf	RunBypas@i,c
  7658                           
  7659                           ;Bypass.c: 88: float batvolt = 0;
  7660  0031EE  0E00               	movlw	0
  7661  0031F0  6E36               	movwf	RunBypas@batvolt,c
  7662  0031F2  0E00               	movlw	0
  7663  0031F4  6E37               	movwf	RunBypas@batvolt+1,c
  7664  0031F6  0E00               	movlw	0
  7665  0031F8  6E38               	movwf	RunBypas@batvolt+2,c
  7666                           
  7667                           ;Bypass.c: 90: for(i = 0; i<6;i++)
  7668  0031FA  0E00               	movlw	0
  7669  0031FC  6E3A               	movwf	RunBypas@i+1,c
  7670  0031FE  0E00               	movlw	0
  7671  003200  6E39               	movwf	RunBypas@i,c
  7672  003202                     l5479:
  7673  003202  BE3A               	btfsc	RunBypas@i+1,7,c
  7674  003204  D008               	goto	l5483
  7675  003206  503A               	movf	RunBypas@i+1,w,c
  7676  003208  E154               	bnz	l566
  7677  00320A  0E06               	movlw	6
  7678  00320C  5C39               	subwf	RunBypas@i,w,c
  7679  00320E  B0D8               	btfsc	status,0,c
  7680  003210  0012               	return	
  7681  003212  D001               	goto	l5483
  7682  003214  0012               	return	
  7683  003216                     l5483:
  7684                           
  7685                           ;Bypass.c: 91: {
  7686                           ;Bypass.c: 92: batvolt = Battery_Get(i);
  7687  003216  C039  F02B         	movff	RunBypas@i,Battery_Get@channelnum
  7688  00321A  C03A  F02C         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  7689  00321E  EC24  F01E         	call	_Battery_Get	;wreg free
  7690  003222  C02B  F036         	movff	?_Battery_Get,RunBypas@batvolt
  7691  003226  C02C  F037         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  7692  00322A  C02D  F038         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  7693                           
  7694                           ;Bypass.c: 94: if(batvolt >= 4.18)
  7695  00322E  C036  F02B         	movff	RunBypas@batvolt,___ftge@ff1
  7696  003232  C037  F02C         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  7697  003236  C038  F02D         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  7698  00323A  0EC3               	movlw	195
  7699  00323C  6E2E               	movwf	___ftge@ff2,c
  7700  00323E  0E85               	movlw	133
  7701  003240  6E2F               	movwf	___ftge@ff2+1,c
  7702  003242  0E40               	movlw	64
  7703  003244  6E30               	movwf	___ftge@ff2+2,c
  7704  003246  EC7E  F01B         	call	___ftge	;wreg free
  7705  00324A  A0D8               	btfss	status,0,c
  7706  00324C  D00F               	goto	l5491
  7707                           
  7708                           ;Bypass.c: 95: {
  7709                           ;Bypass.c: 96: SetBypas(i,1);
  7710  00324E  C039  F017         	movff	RunBypas@i,SetBypas@pin
  7711  003252  C03A  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  7712  003256  0E00               	movlw	0
  7713  003258  6E1A               	movwf	SetBypas@state+1,c
  7714  00325A  0E01               	movlw	1
  7715  00325C  6E19               	movwf	SetBypas@state,c
  7716  00325E  EC82  F01A         	call	_SetBypas	;wreg free
  7717                           
  7718                           ;Bypass.c: 97: cellbyp = 1;
  7719  003262  0E00               	movlw	0
  7720  003264  6E35               	movwf	RunBypas@cellbyp+1,c
  7721  003266  0E01               	movlw	1
  7722  003268  6E34               	movwf	RunBypas@cellbyp,c
  7723  00326A  D000               	goto	l5491
  7724  00326C                     l5491:
  7725                           
  7726                           ;Bypass.c: 98: }
  7727                           ;Bypass.c: 99: if(batvolt <= 4.15)
  7728  00326C  0ECD               	movlw	205
  7729  00326E  6E2B               	movwf	___ftge@ff1,c
  7730  003270  0E84               	movlw	132
  7731  003272  6E2C               	movwf	___ftge@ff1+1,c
  7732  003274  0E40               	movlw	64
  7733  003276  6E2D               	movwf	___ftge@ff1+2,c
  7734  003278  C036  F02E         	movff	RunBypas@batvolt,___ftge@ff2
  7735  00327C  C037  F02F         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  7736  003280  C038  F030         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  7737  003284  EC7E  F01B         	call	___ftge	;wreg free
  7738  003288  A0D8               	btfss	status,0,c
  7739  00328A  D00F               	goto	l5497
  7740                           
  7741                           ;Bypass.c: 100: {
  7742                           ;Bypass.c: 101: SetBypas(i,0);
  7743  00328C  C039  F017         	movff	RunBypas@i,SetBypas@pin
  7744  003290  C03A  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  7745  003294  0E00               	movlw	0
  7746  003296  6E1A               	movwf	SetBypas@state+1,c
  7747  003298  0E00               	movlw	0
  7748  00329A  6E19               	movwf	SetBypas@state,c
  7749  00329C  EC82  F01A         	call	_SetBypas	;wreg free
  7750                           
  7751                           ;Bypass.c: 102: cellbyp = 1;
  7752  0032A0  0E00               	movlw	0
  7753  0032A2  6E35               	movwf	RunBypas@cellbyp+1,c
  7754  0032A4  0E01               	movlw	1
  7755  0032A6  6E34               	movwf	RunBypas@cellbyp,c
  7756  0032A8  D000               	goto	l5497
  7757  0032AA                     l5497:
  7758  0032AA  4A39               	infsnz	RunBypas@i,f,c
  7759  0032AC  2A3A               	incf	RunBypas@i+1,f,c
  7760  0032AE  D7A9               	goto	l5479
  7761  0032B0  0012               	return	
  7762  0032B2                     l566:
  7763  0032B2  0012               	return		;funcret
  7764  0032B4                     __end_of_RunBypas:
  7765                           	opt stack 0
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           prodh	equ	0xFF4
  7771                           prodl	equ	0xFF3
  7772                           intcon	equ	0xFF2
  7773                           intcon2	equ	0xFF1
  7774                           postinc0	equ	0xFEE
  7775                           wreg	equ	0xFE8
  7776                           postinc1	equ	0xFE6
  7777                           postdec1	equ	0xFE5
  7778                           fsr1h	equ	0xFE2
  7779                           fsr1l	equ	0xFE1
  7780                           postinc2	equ	0xFDE
  7781                           postdec2	equ	0xFDD
  7782                           fsr2h	equ	0xFDA
  7783                           fsr2l	equ	0xFD9
  7784                           status	equ	0xFD8
  7785                           
  7786 ;; *************** function _SetBypas *****************
  7787 ;; Defined at:
  7788 ;;		line 8 in file "Bypass.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;  pin             2   22[COMRAM] int 
  7791 ;;  state           2   24[COMRAM] int 
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  2   22[COMRAM] int 
  7796 ;; Registers used:
  7797 ;;		wreg, status,2, status,0
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7803 ;;      Params:         4       0       0       0       0       0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0
  7805 ;;      Temps:          2       0       0       0       0       0       0
  7806 ;;      Totals:         6       0       0       0       0       0       0
  7807 ;;Total ram usage:        6 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; Hardware stack levels required when called:    4
  7810 ;; This function calls:
  7811 ;;		Nothing
  7812 ;; This function is called by:
  7813 ;;		_RunBypas
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           	psect	text29
  7818  003504                     __ptext29:
  7819                           	opt stack 0
  7820  003504                     _SetBypas:
  7821                           	opt stack 25
  7822                           
  7823                           ;Bypass.c: 10: switch (pin) {
  7824                           
  7825                           ;incstack = 0
  7826  003504  D038               	goto	l3511
  7827  003506                     l3495:
  7828                           
  7829                           ;Bypass.c: 12: if (state)
  7830  003506  5019               	movf	SetBypas@state,w,c
  7831  003508  101A               	iorwf	SetBypas@state+1,w,c
  7832  00350A  B4D8               	btfsc	status,2,c
  7833  00350C  D002               	goto	l514
  7834                           
  7835                           ;Bypass.c: 13: {
  7836                           ;Bypass.c: 14: do { LATD4 = 1; } while(0);
  7837  00350E  888C               	bsf	3980,4,c	;volatile
  7838                           
  7839                           ;Bypass.c: 15: }
  7840  003510  0012               	return	
  7841  003512                     l514:
  7842  003512  988C               	bcf	3980,4,c	;volatile
  7843                           
  7844                           ;Bypass.c: 19: }
  7845                           ;Bypass.c: 20: break;
  7846  003514  0012               	return	
  7847  003516                     l3497:
  7848                           
  7849                           ;Bypass.c: 22: if (state)
  7850  003516  5019               	movf	SetBypas@state,w,c
  7851  003518  101A               	iorwf	SetBypas@state+1,w,c
  7852  00351A  B4D8               	btfsc	status,2,c
  7853  00351C  D002               	goto	l522
  7854                           
  7855                           ;Bypass.c: 23: {
  7856                           ;Bypass.c: 24: do { LATD5 = 1; } while(0);
  7857  00351E  8A8C               	bsf	3980,5,c	;volatile
  7858                           
  7859                           ;Bypass.c: 25: }
  7860  003520  0012               	return	
  7861  003522                     l522:
  7862  003522  9A8C               	bcf	3980,5,c	;volatile
  7863                           
  7864                           ;Bypass.c: 29: }
  7865                           ;Bypass.c: 30: break;
  7866  003524  0012               	return	
  7867  003526                     l3499:
  7868                           
  7869                           ;Bypass.c: 32: if (state)
  7870  003526  5019               	movf	SetBypas@state,w,c
  7871  003528  101A               	iorwf	SetBypas@state+1,w,c
  7872  00352A  B4D8               	btfsc	status,2,c
  7873  00352C  D002               	goto	l529
  7874                           
  7875                           ;Bypass.c: 33: {
  7876                           ;Bypass.c: 34: do { LATD6 = 1; } while(0);
  7877  00352E  8C8C               	bsf	3980,6,c	;volatile
  7878                           
  7879                           ;Bypass.c: 35: }
  7880  003530  0012               	return	
  7881  003532                     l529:
  7882  003532  9C8C               	bcf	3980,6,c	;volatile
  7883                           
  7884                           ;Bypass.c: 39: }
  7885                           ;Bypass.c: 40: break;
  7886  003534  0012               	return	
  7887  003536                     l3501:
  7888                           
  7889                           ;Bypass.c: 42: if (state)
  7890  003536  5019               	movf	SetBypas@state,w,c
  7891  003538  101A               	iorwf	SetBypas@state+1,w,c
  7892  00353A  B4D8               	btfsc	status,2,c
  7893  00353C  D002               	goto	l536
  7894                           
  7895                           ;Bypass.c: 43: {
  7896                           ;Bypass.c: 44: do { LATD7 = 1; } while(0);
  7897  00353E  8E8C               	bsf	3980,7,c	;volatile
  7898                           
  7899                           ;Bypass.c: 45: }
  7900  003540  0012               	return	
  7901  003542                     l536:
  7902  003542  9E8C               	bcf	3980,7,c	;volatile
  7903                           
  7904                           ;Bypass.c: 49: }
  7905                           ;Bypass.c: 50: break;
  7906  003544  0012               	return	
  7907  003546                     l3503:
  7908                           
  7909                           ;Bypass.c: 52: if (state)
  7910  003546  5019               	movf	SetBypas@state,w,c
  7911  003548  101A               	iorwf	SetBypas@state+1,w,c
  7912  00354A  B4D8               	btfsc	status,2,c
  7913  00354C  D002               	goto	l543
  7914                           
  7915                           ;Bypass.c: 53: {
  7916                           ;Bypass.c: 54: do { LATB0 = 1; } while(0);
  7917  00354E  808A               	bsf	3978,0,c	;volatile
  7918                           
  7919                           ;Bypass.c: 55: }
  7920  003550  0012               	return	
  7921  003552                     l543:
  7922  003552  908A               	bcf	3978,0,c	;volatile
  7923                           
  7924                           ;Bypass.c: 59: }
  7925                           ;Bypass.c: 60: break;
  7926  003554  0012               	return	
  7927  003556                     l3505:
  7928                           
  7929                           ;Bypass.c: 62: if (state)
  7930  003556  5019               	movf	SetBypas@state,w,c
  7931  003558  101A               	iorwf	SetBypas@state+1,w,c
  7932  00355A  B4D8               	btfsc	status,2,c
  7933  00355C  D002               	goto	l550
  7934                           
  7935                           ;Bypass.c: 63: {
  7936                           ;Bypass.c: 64: do { LATB1 = 1; } while(0);
  7937  00355E  828A               	bsf	3978,1,c	;volatile
  7938                           
  7939                           ;Bypass.c: 65: }
  7940  003560  0012               	return	
  7941  003562                     l550:
  7942  003562  928A               	bcf	3978,1,c	;volatile
  7943                           
  7944                           ;Bypass.c: 69: }
  7945                           ;Bypass.c: 70: break;
  7946  003564  0012               	return	
  7947  003566                     l3507:
  7948                           
  7949                           ;Bypass.c: 72: if (state)
  7950  003566  5019               	movf	SetBypas@state,w,c
  7951  003568  101A               	iorwf	SetBypas@state+1,w,c
  7952  00356A  B4D8               	btfsc	status,2,c
  7953  00356C  D002               	goto	l557
  7954                           
  7955                           ;Bypass.c: 73: {
  7956                           ;Bypass.c: 74: do { LATB2 = 1; } while(0);
  7957  00356E  848A               	bsf	3978,2,c	;volatile
  7958                           
  7959                           ;Bypass.c: 75: }
  7960  003570  0012               	return	
  7961  003572                     l557:
  7962  003572  948A               	bcf	3978,2,c	;volatile
  7963                           
  7964                           ;Bypass.c: 81: }
  7965                           
  7966                           ;Bypass.c: 79: }
  7967                           ;Bypass.c: 80: break;
  7968  003574  0012               	return	
  7969  003576                     l3511:
  7970  003576  C017  F01B         	movff	SetBypas@pin,??_SetBypas
  7971  00357A  C018  F01C         	movff	SetBypas@pin+1,??_SetBypas+1
  7972                           
  7973                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7974                           ; Switch size 1, requested type "space"
  7975                           ; Number of cases is 1, Range of values is 0 to 0
  7976                           ; switch strategies available:
  7977                           ; Name         Instructions Cycles
  7978                           ; simple_byte            4     3 (average)
  7979                           ;	Chosen strategy is simple_byte
  7980  00357E  501C               	movf	??_SetBypas+1,w,c
  7981  003580  0A00               	xorlw	0	; case 0
  7982  003582  A4D8               	btfss	status,2,c
  7983  003584  0012               	return	
  7984                           
  7985                           ; Switch size 1, requested type "space"
  7986                           ; Number of cases is 7, Range of values is 0 to 6
  7987                           ; switch strategies available:
  7988                           ; Name         Instructions Cycles
  7989                           ; simple_byte           22    12 (average)
  7990                           ;	Chosen strategy is simple_byte
  7991  003586  501B               	movf	??_SetBypas,w,c
  7992  003588  0A00               	xorlw	0	; case 0
  7993  00358A  B4D8               	btfsc	status,2,c
  7994  00358C  D7BC               	goto	l3495
  7995  00358E  0A01               	xorlw	1	; case 1
  7996  003590  B4D8               	btfsc	status,2,c
  7997  003592  D7C1               	goto	l3497
  7998  003594  0A03               	xorlw	3	; case 2
  7999  003596  B4D8               	btfsc	status,2,c
  8000  003598  D7C6               	goto	l3499
  8001  00359A  0A01               	xorlw	1	; case 3
  8002  00359C  B4D8               	btfsc	status,2,c
  8003  00359E  D7CB               	goto	l3501
  8004  0035A0  0A07               	xorlw	7	; case 4
  8005  0035A2  B4D8               	btfsc	status,2,c
  8006  0035A4  D7D0               	goto	l3503
  8007  0035A6  0A01               	xorlw	1	; case 5
  8008  0035A8  B4D8               	btfsc	status,2,c
  8009  0035AA  D7D5               	goto	l3505
  8010  0035AC  0A03               	xorlw	3	; case 6
  8011  0035AE  A4D8               	btfss	status,2,c
  8012  0035B0  0012               	return	
  8013  0035B2  D7D9               	goto	l3507
  8014  0035B4  0012               	return		;funcret
  8015  0035B6                     __end_of_SetBypas:
  8016                           	opt stack 0
  8017                           tblptru	equ	0xFF8
  8018                           tblptrh	equ	0xFF7
  8019                           tblptrl	equ	0xFF6
  8020                           tablat	equ	0xFF5
  8021                           prodh	equ	0xFF4
  8022                           prodl	equ	0xFF3
  8023                           intcon	equ	0xFF2
  8024                           intcon2	equ	0xFF1
  8025                           postinc0	equ	0xFEE
  8026                           wreg	equ	0xFE8
  8027                           postinc1	equ	0xFE6
  8028                           postdec1	equ	0xFE5
  8029                           fsr1h	equ	0xFE2
  8030                           fsr1l	equ	0xFE1
  8031                           postinc2	equ	0xFDE
  8032                           postdec2	equ	0xFDD
  8033                           fsr2h	equ	0xFDA
  8034                           fsr2l	equ	0xFD9
  8035                           status	equ	0xFD8
  8036                           
  8037 ;; *************** function _Battery_Get *****************
  8038 ;; Defined at:
  8039 ;;		line 57 in file "Battery.c"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;  channelnum      2   42[COMRAM] int 
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;		None
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  3   42[COMRAM] float 
  8046 ;; Registers used:
  8047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8053 ;;      Params:         3       0       0       0       0       0       0
  8054 ;;      Locals:         0       0       0       0       0       0       0
  8055 ;;      Temps:          0       0       0       0       0       0       0
  8056 ;;      Totals:         3       0       0       0       0       0       0
  8057 ;;Total ram usage:        3 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    5
  8060 ;; This function calls:
  8061 ;;		___wmul
  8062 ;; This function is called by:
  8063 ;;		_main
  8064 ;;		_RunBypas
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text30
  8069  003C48                     __ptext30:
  8070                           	opt stack 0
  8071  003C48                     _Battery_Get:
  8072                           	opt stack 24
  8073                           
  8074                           ;Battery.c: 59: return Battery_Volt[channelnum];
  8075                           
  8076                           ;incstack = 0
  8077  003C48  C02B  F025         	movff	Battery_Get@channelnum,___wmul@multiplier
  8078  003C4C  C02C  F026         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  8079  003C50  0E00               	movlw	0
  8080  003C52  6E28               	movwf	___wmul@multiplicand+1,c
  8081  003C54  0E03               	movlw	3
  8082  003C56  6E27               	movwf	___wmul@multiplicand,c
  8083  003C58  EC3C  F01E         	call	___wmul	;wreg free
  8084  003C5C  0E1E               	movlw	low _Battery_Volt
  8085  003C5E  2425               	addwf	?___wmul,w,c
  8086  003C60  6ED9               	movwf	fsr2l,c
  8087  003C62  0E01               	movlw	high _Battery_Volt
  8088  003C64  2026               	addwfc	?___wmul+1,w,c
  8089  003C66  6EDA               	movwf	fsr2h,c
  8090  003C68  CFDE F02B          	movff	postinc2,?_Battery_Get
  8091  003C6C  CFDE F02C          	movff	postinc2,?_Battery_Get+1
  8092  003C70  CFDD F02D          	movff	postdec2,?_Battery_Get+2
  8093  003C74  0012               	return	
  8094  003C76  0012               	return		;funcret
  8095  003C78                     __end_of_Battery_Get:
  8096                           	opt stack 0
  8097                           tblptru	equ	0xFF8
  8098                           tblptrh	equ	0xFF7
  8099                           tblptrl	equ	0xFF6
  8100                           tablat	equ	0xFF5
  8101                           prodh	equ	0xFF4
  8102                           prodl	equ	0xFF3
  8103                           intcon	equ	0xFF2
  8104                           intcon2	equ	0xFF1
  8105                           postinc0	equ	0xFEE
  8106                           wreg	equ	0xFE8
  8107                           postinc1	equ	0xFE6
  8108                           postdec1	equ	0xFE5
  8109                           fsr1h	equ	0xFE2
  8110                           fsr1l	equ	0xFE1
  8111                           postinc2	equ	0xFDE
  8112                           postdec2	equ	0xFDD
  8113                           fsr2h	equ	0xFDA
  8114                           fsr2l	equ	0xFD9
  8115                           status	equ	0xFD8
  8116                           
  8117 ;; *************** function _Delay *****************
  8118 ;; Defined at:
  8119 ;;		line 24 in file "Functions.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  wait            2   22[COMRAM] int 
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;  x               2   25[COMRAM] int 
  8124 ;; Return value:  Size  Location     Type
  8125 ;;		None               void
  8126 ;; Registers used:
  8127 ;;		wreg, status,2, status,0
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8133 ;;      Params:         2       0       0       0       0       0       0
  8134 ;;      Locals:         2       0       0       0       0       0       0
  8135 ;;      Temps:          1       0       0       0       0       0       0
  8136 ;;      Totals:         5       0       0       0       0       0       0
  8137 ;;Total ram usage:        5 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    4
  8140 ;; This function calls:
  8141 ;;		Nothing
  8142 ;; This function is called by:
  8143 ;;		_main
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           	psect	text31
  8148  003C16                     __ptext31:
  8149                           	opt stack 0
  8150  003C16                     _Delay:
  8151                           	opt stack 26
  8152                           
  8153                           ;Functions.c: 26: int x;
  8154                           ;Functions.c: 27: for(x = 0;x<wait;x++)
  8155                           
  8156                           ;incstack = 0
  8157  003C16  0E00               	movlw	0
  8158  003C18  6E1B               	movwf	Delay@x+1,c
  8159  003C1A  0E00               	movlw	0
  8160  003C1C  6E1A               	movwf	Delay@x,c
  8161  003C1E  D009               	goto	l311
  8162  003C20                     l4099:
  8163                           
  8164                           ;Functions.c: 28: {
  8165                           ;Functions.c: 29: _delay((unsigned long)((1)*(8000000/4000.0)));
  8166  003C20  0E03               	movlw	3
  8167  003C22  6E19               	movwf	??_Delay& (0+255),c
  8168  003C24  0E98               	movlw	152
  8169  003C26                     u6207:
  8170  003C26  2EE8               	decfsz	wreg,f,c
  8171  003C28  D7FE               	goto	u6207
  8172  003C2A  2E19               	decfsz	??_Delay& (0+255),f,c
  8173  003C2C  D7FC               	goto	u6207
  8174  003C2E  4A1A               	infsnz	Delay@x,f,c
  8175  003C30  2A1B               	incf	Delay@x+1,f,c
  8176  003C32                     l311:
  8177  003C32  5017               	movf	Delay@wait,w,c
  8178  003C34  5C1A               	subwf	Delay@x,w,c
  8179  003C36  501B               	movf	Delay@x+1,w,c
  8180  003C38  0A80               	xorlw	128
  8181  003C3A  6E19               	movwf	??_Delay& (0+255),c
  8182  003C3C  5018               	movf	Delay@wait+1,w,c
  8183  003C3E  0A80               	xorlw	128
  8184  003C40  5819               	subwfb	??_Delay& (0+255),w,c
  8185  003C42  A0D8               	btfss	status,0,c
  8186  003C44  D7ED               	goto	l4099
  8187  003C46  0012               	return		;funcret
  8188  003C48                     __end_of_Delay:
  8189                           	opt stack 0
  8190                           tblptru	equ	0xFF8
  8191                           tblptrh	equ	0xFF7
  8192                           tblptrl	equ	0xFF6
  8193                           tablat	equ	0xFF5
  8194                           prodh	equ	0xFF4
  8195                           prodl	equ	0xFF3
  8196                           intcon	equ	0xFF2
  8197                           intcon2	equ	0xFF1
  8198                           postinc0	equ	0xFEE
  8199                           wreg	equ	0xFE8
  8200                           postinc1	equ	0xFE6
  8201                           postdec1	equ	0xFE5
  8202                           fsr1h	equ	0xFE2
  8203                           fsr1l	equ	0xFE1
  8204                           postinc2	equ	0xFDE
  8205                           postdec2	equ	0xFDD
  8206                           fsr2h	equ	0xFDA
  8207                           fsr2l	equ	0xFD9
  8208                           status	equ	0xFD8
  8209                           
  8210 ;; *************** function _Current_Get *****************
  8211 ;; Defined at:
  8212 ;;		line 73 in file "Current.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;		None
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;		None
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  3   22[COMRAM] float 
  8219 ;; Registers used:
  8220 ;;		None
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8226 ;;      Params:         3       0       0       0       0       0       0
  8227 ;;      Locals:         0       0       0       0       0       0       0
  8228 ;;      Temps:          0       0       0       0       0       0       0
  8229 ;;      Totals:         3       0       0       0       0       0       0
  8230 ;;Total ram usage:        3 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    4
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_main
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           	psect	text32
  8241  003DE2                     __ptext32:
  8242                           	opt stack 0
  8243  003DE2                     _Current_Get:
  8244                           	opt stack 26
  8245                           
  8246                           ;Current.c: 75: return Current_Mean;
  8247                           
  8248                           ;incstack = 0
  8249  003DE2  C03E  F017         	movff	_Current_Mean,?_Current_Get
  8250  003DE6  C03F  F018         	movff	_Current_Mean+1,?_Current_Get+1
  8251  003DEA  C040  F019         	movff	_Current_Mean+2,?_Current_Get+2
  8252  003DEE  0012               	return		;funcret
  8253  003DF0                     __end_of_Current_Get:
  8254                           	opt stack 0
  8255                           tblptru	equ	0xFF8
  8256                           tblptrh	equ	0xFF7
  8257                           tblptrl	equ	0xFF6
  8258                           tablat	equ	0xFF5
  8259                           prodh	equ	0xFF4
  8260                           prodl	equ	0xFF3
  8261                           intcon	equ	0xFF2
  8262                           intcon2	equ	0xFF1
  8263                           postinc0	equ	0xFEE
  8264                           wreg	equ	0xFE8
  8265                           postinc1	equ	0xFE6
  8266                           postdec1	equ	0xFE5
  8267                           fsr1h	equ	0xFE2
  8268                           fsr1l	equ	0xFE1
  8269                           postinc2	equ	0xFDE
  8270                           postdec2	equ	0xFDD
  8271                           fsr2h	equ	0xFDA
  8272                           fsr2l	equ	0xFD9
  8273                           status	equ	0xFD8
  8274                           
  8275 ;; *************** function _Current_Fault *****************
  8276 ;; Defined at:
  8277 ;;		line 12 in file "Current.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;		None
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;  i               2   41[BANK0 ] int 
  8282 ;;  i               2   39[BANK0 ] int 
  8283 ;;  temp            3   43[BANK0 ] float 
  8284 ;;  fault           2   37[BANK0 ] int 
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  1    wreg      unsigned char 
  8287 ;; Registers used:
  8288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8294 ;;      Params:         0       0       0       0       0       0       0
  8295 ;;      Locals:         0       9       0       0       0       0       0
  8296 ;;      Temps:          0       0       0       0       0       0       0
  8297 ;;      Totals:         0       9       0       0       0       0       0
  8298 ;;Total ram usage:        9 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:    6
  8301 ;; This function calls:
  8302 ;;		___ftadd
  8303 ;;		___ftdiv
  8304 ;;		___ftge
  8305 ;;		___wmul
  8306 ;; This function is called by:
  8307 ;;		_main
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           	psect	text33
  8312  00251E                     __ptext33:
  8313                           	opt stack 0
  8314  00251E                     _Current_Fault:
  8315                           	opt stack 24
  8316                           
  8317                           ;Current.c: 14: int fault = 0;
  8318                           
  8319                           ;incstack = 0
  8320  00251E  0E00               	movlw	0
  8321  002520  0100               	movlb	0	; () banked
  8322  002522  6F86               	movwf	(Current_Fault@fault+1)& (0+255),b
  8323  002524  0E00               	movlw	0
  8324  002526  6F85               	movwf	Current_Fault@fault& (0+255),b
  8325                           
  8326                           ;Current.c: 15: float temp = 0;
  8327  002528  0E00               	movlw	0
  8328  00252A  0100               	movlb	0	; () banked
  8329  00252C  6F8B               	movwf	Current_Fault@temp& (0+255),b
  8330  00252E  0E00               	movlw	0
  8331  002530  0100               	movlb	0	; () banked
  8332  002532  6F8C               	movwf	(Current_Fault@temp+1)& (0+255),b
  8333  002534  0E00               	movlw	0
  8334  002536  0100               	movlb	0	; () banked
  8335  002538  6F8D               	movwf	(Current_Fault@temp+2)& (0+255),b
  8336                           
  8337                           ;Current.c: 16: for(int i = 0;i<9;i++)
  8338  00253A  0E00               	movlw	0
  8339  00253C  0100               	movlb	0	; () banked
  8340  00253E  6F88               	movwf	(Current_Fault@i+1)& (0+255),b
  8341  002540  0E00               	movlw	0
  8342  002542  6F87               	movwf	Current_Fault@i& (0+255),b
  8343  002544                     l5517:
  8344                           
  8345                           ; BSR set to: 0
  8346  002544  0100               	movlb	0	; () banked
  8347  002546  BF88               	btfsc	(Current_Fault@i+1)& (0+255),7,b
  8348  002548  D00A               	goto	l5521
  8349  00254A  0100               	movlb	0	; () banked
  8350  00254C  5188               	movf	(Current_Fault@i+1)& (0+255),w,b
  8351  00254E  E130               	bnz	l5527
  8352  002550  0E09               	movlw	9
  8353  002552  0100               	movlb	0	; () banked
  8354  002554  5D87               	subwf	Current_Fault@i& (0+255),w,b
  8355  002556  B0D8               	btfsc	status,0,c
  8356  002558  D02B               	goto	l5527
  8357  00255A  D001               	goto	l5521
  8358                           
  8359                           ; BSR set to: 0
  8360  00255C  D029               	goto	l5527
  8361  00255E                     l5521:
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;Current.c: 17: {
  8365                           ;Current.c: 18: temp += Battery_Current[i];
  8366  00255E  C08B  F079         	movff	Current_Fault@temp,___ftadd@f1
  8367  002562  C08C  F07A         	movff	Current_Fault@temp+1,___ftadd@f1+1
  8368  002566  C08D  F07B         	movff	Current_Fault@temp+2,___ftadd@f1+2
  8369  00256A  C087  F025         	movff	Current_Fault@i,___wmul@multiplier
  8370  00256E  C088  F026         	movff	Current_Fault@i+1,___wmul@multiplier+1
  8371  002572  0E00               	movlw	0
  8372  002574  6E28               	movwf	___wmul@multiplicand+1,c
  8373  002576  0E03               	movlw	3
  8374  002578  6E27               	movwf	___wmul@multiplicand,c
  8375  00257A  EC3C  F01E         	call	___wmul	;wreg free
  8376  00257E  0E00               	movlw	low _Battery_Current
  8377  002580  2425               	addwf	?___wmul,w,c
  8378  002582  6ED9               	movwf	fsr2l,c
  8379  002584  0E01               	movlw	high _Battery_Current
  8380  002586  2026               	addwfc	?___wmul+1,w,c
  8381  002588  6EDA               	movwf	fsr2h,c
  8382  00258A  CFDE F07C          	movff	postinc2,___ftadd@f2
  8383  00258E  CFDE F07D          	movff	postinc2,___ftadd@f2+1
  8384  002592  CFDD F07E          	movff	postdec2,___ftadd@f2+2
  8385  002596  EC1E  F00E         	call	___ftadd	;wreg free
  8386  00259A  C079  F08B         	movff	?___ftadd,Current_Fault@temp
  8387  00259E  C07A  F08C         	movff	?___ftadd+1,Current_Fault@temp+1
  8388  0025A2  C07B  F08D         	movff	?___ftadd+2,Current_Fault@temp+2
  8389  0025A6  0100               	movlb	0	; () banked
  8390  0025A8  4B87               	infsnz	Current_Fault@i& (0+255),f,b
  8391  0025AA  2B88               	incf	(Current_Fault@i+1)& (0+255),f,b
  8392  0025AC  D7CB               	goto	l5517
  8393                           
  8394                           ; BSR set to: 0
  8395  0025AE  D000               	goto	l5527
  8396  0025B0                     l5527:
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;Current.c: 19: }
  8400                           ;Current.c: 20: temp = temp/10.0;
  8401  0025B0  C08B  F02F         	movff	Current_Fault@temp,___ftdiv@f1
  8402  0025B4  C08C  F030         	movff	Current_Fault@temp+1,___ftdiv@f1+1
  8403  0025B8  C08D  F031         	movff	Current_Fault@temp+2,___ftdiv@f1+2
  8404  0025BC  0E00               	movlw	0
  8405  0025BE  6E32               	movwf	___ftdiv@f2,c
  8406  0025C0  0E20               	movlw	32
  8407  0025C2  6E33               	movwf	___ftdiv@f2+1,c
  8408  0025C4  0E41               	movlw	65
  8409  0025C6  6E34               	movwf	___ftdiv@f2+2,c
  8410  0025C8  EC08  F018         	call	___ftdiv	;wreg free
  8411  0025CC  C02F  F08B         	movff	?___ftdiv,Current_Fault@temp
  8412  0025D0  C030  F08C         	movff	?___ftdiv+1,Current_Fault@temp+1
  8413  0025D4  C031  F08D         	movff	?___ftdiv+2,Current_Fault@temp+2
  8414                           
  8415                           ;Current.c: 21: Current_Mean = temp;
  8416  0025D8  C08B  F03E         	movff	Current_Fault@temp,_Current_Mean
  8417  0025DC  C08C  F03F         	movff	Current_Fault@temp+1,_Current_Mean+1
  8418  0025E0  C08D  F040         	movff	Current_Fault@temp+2,_Current_Mean+2
  8419                           
  8420                           ;Current.c: 22: for(int i = 0;i<9;i++)
  8421  0025E4  0E00               	movlw	0
  8422  0025E6  0100               	movlb	0	; () banked
  8423  0025E8  6F8A               	movwf	(Current_Fault@i_973+1)& (0+255),b
  8424  0025EA  0E00               	movlw	0
  8425  0025EC  6F89               	movwf	Current_Fault@i_973& (0+255),b
  8426  0025EE                     l5533:
  8427                           
  8428                           ; BSR set to: 0
  8429  0025EE  0100               	movlb	0	; () banked
  8430  0025F0  BF8A               	btfsc	(Current_Fault@i_973+1)& (0+255),7,b
  8431  0025F2  D00A               	goto	l5537
  8432  0025F4  0100               	movlb	0	; () banked
  8433  0025F6  518A               	movf	(Current_Fault@i_973+1)& (0+255),w,b
  8434  0025F8  E13F               	bnz	l5545
  8435  0025FA  0E09               	movlw	9
  8436  0025FC  0100               	movlb	0	; () banked
  8437  0025FE  5D89               	subwf	Current_Fault@i_973& (0+255),w,b
  8438  002600  B0D8               	btfsc	status,0,c
  8439  002602  D03A               	goto	l5545
  8440  002604  D001               	goto	l5537
  8441                           
  8442                           ; BSR set to: 0
  8443  002606  D038               	goto	l5545
  8444  002608                     l5537:
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;Current.c: 23: {
  8448                           ;Current.c: 24: if ((25 < Battery_Current[i]) && (25 < temp))
  8449  002608  0E00               	movlw	0
  8450  00260A  6E2B               	movwf	___ftge@ff1,c
  8451  00260C  0EC8               	movlw	200
  8452  00260E  6E2C               	movwf	___ftge@ff1+1,c
  8453  002610  0E41               	movlw	65
  8454  002612  6E2D               	movwf	___ftge@ff1+2,c
  8455  002614  C089  F025         	movff	Current_Fault@i_973,___wmul@multiplier
  8456  002618  C08A  F026         	movff	Current_Fault@i_973+1,___wmul@multiplier+1
  8457  00261C  0E00               	movlw	0
  8458  00261E  6E28               	movwf	___wmul@multiplicand+1,c
  8459  002620  0E03               	movlw	3
  8460  002622  6E27               	movwf	___wmul@multiplicand,c
  8461  002624  EC3C  F01E         	call	___wmul	;wreg free
  8462  002628  0E00               	movlw	low _Battery_Current
  8463  00262A  2425               	addwf	?___wmul,w,c
  8464  00262C  6ED9               	movwf	fsr2l,c
  8465  00262E  0E01               	movlw	high _Battery_Current
  8466  002630  2026               	addwfc	?___wmul+1,w,c
  8467  002632  6EDA               	movwf	fsr2h,c
  8468  002634  CFDE F02E          	movff	postinc2,___ftge@ff2
  8469  002638  CFDE F02F          	movff	postinc2,___ftge@ff2+1
  8470  00263C  CFDD F030          	movff	postdec2,___ftge@ff2+2
  8471  002640  EC7E  F01B         	call	___ftge	;wreg free
  8472  002644  B0D8               	btfsc	status,0,c
  8473  002646  D013               	goto	l468
  8474  002648  0E00               	movlw	0
  8475  00264A  6E2B               	movwf	___ftge@ff1,c
  8476  00264C  0EC8               	movlw	200
  8477  00264E  6E2C               	movwf	___ftge@ff1+1,c
  8478  002650  0E41               	movlw	65
  8479  002652  6E2D               	movwf	___ftge@ff1+2,c
  8480  002654  C08B  F02E         	movff	Current_Fault@temp,___ftge@ff2
  8481  002658  C08C  F02F         	movff	Current_Fault@temp+1,___ftge@ff2+1
  8482  00265C  C08D  F030         	movff	Current_Fault@temp+2,___ftge@ff2+2
  8483  002660  EC7E  F01B         	call	___ftge	;wreg free
  8484  002664  B0D8               	btfsc	status,0,c
  8485  002666  D003               	goto	l468
  8486                           
  8487                           ;Current.c: 25: {
  8488                           ;Current.c: 26: fault++;
  8489  002668  0100               	movlb	0	; () banked
  8490  00266A  4B85               	infsnz	Current_Fault@fault& (0+255),f,b
  8491  00266C  2B86               	incf	(Current_Fault@fault+1)& (0+255),f,b
  8492  00266E                     l468:
  8493  00266E  0100               	movlb	0	; () banked
  8494  002670  4B89               	infsnz	Current_Fault@i_973& (0+255),f,b
  8495  002672  2B8A               	incf	(Current_Fault@i_973+1)& (0+255),f,b
  8496  002674  D7BC               	goto	l5533
  8497                           
  8498                           ; BSR set to: 0
  8499  002676  D000               	goto	l5545
  8500  002678                     l5545:
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;Current.c: 27: }
  8504                           ;Current.c: 28: }
  8505                           ;Current.c: 29: if(fault > 6)
  8506  002678  0100               	movlb	0	; () banked
  8507  00267A  BF86               	btfsc	(Current_Fault@fault+1)& (0+255),7,b
  8508  00267C  D00D               	goto	l5549
  8509  00267E  0100               	movlb	0	; () banked
  8510  002680  5186               	movf	(Current_Fault@fault+1)& (0+255),w,b
  8511  002682  E105               	bnz	u6060
  8512  002684  0E07               	movlw	7
  8513  002686  0100               	movlb	0	; () banked
  8514  002688  5D85               	subwf	Current_Fault@fault& (0+255),w,b
  8515  00268A  A0D8               	btfss	status,0,c
  8516  00268C  D005               	goto	l5549
  8517  00268E                     u6060:
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;Current.c: 30: {
  8521                           ;Current.c: 31: fault = 1;
  8522  00268E  0E00               	movlw	0
  8523  002690  0100               	movlb	0	; () banked
  8524  002692  6F86               	movwf	(Current_Fault@fault+1)& (0+255),b
  8525  002694  0E01               	movlw	1
  8526  002696  D004               	goto	L7
  8527  002698                     l5549:
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;Current.c: 33: else
  8531                           ;Current.c: 34: {
  8532                           ;Current.c: 35: fault = 0;
  8533  002698  0E00               	movlw	0
  8534  00269A  0100               	movlb	0	; () banked
  8535  00269C  6F86               	movwf	(Current_Fault@fault+1)& (0+255),b
  8536  00269E  0E00               	movlw	0
  8537  0026A0                     L7:
  8538  0026A0  6F85               	movwf	Current_Fault@fault& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;Current.c: 36: }
  8542                           ;Current.c: 37: return fault;
  8543  0026A2  0100               	movlb	0	; () banked
  8544  0026A4  5185               	movf	Current_Fault@fault& (0+255),w,b
  8545  0026A6  0012               	return	
  8546                           
  8547                           ; BSR set to: 0
  8548                           
  8549                           ; BSR set to: 0
  8550  0026A8  0012               	return		;funcret
  8551  0026AA                     __end_of_Current_Fault:
  8552                           	opt stack 0
  8553                           tblptru	equ	0xFF8
  8554                           tblptrh	equ	0xFF7
  8555                           tblptrl	equ	0xFF6
  8556                           tablat	equ	0xFF5
  8557                           prodh	equ	0xFF4
  8558                           prodl	equ	0xFF3
  8559                           intcon	equ	0xFF2
  8560                           intcon2	equ	0xFF1
  8561                           postinc0	equ	0xFEE
  8562                           wreg	equ	0xFE8
  8563                           postinc1	equ	0xFE6
  8564                           postdec1	equ	0xFE5
  8565                           fsr1h	equ	0xFE2
  8566                           fsr1l	equ	0xFE1
  8567                           postinc2	equ	0xFDE
  8568                           postdec2	equ	0xFDD
  8569                           fsr2h	equ	0xFDA
  8570                           fsr2l	equ	0xFD9
  8571                           status	equ	0xFD8
  8572                           
  8573 ;; *************** function _Current_Convert *****************
  8574 ;; Defined at:
  8575 ;;		line 63 in file "Current.c"
  8576 ;; Parameters:    Size  Location     Type
  8577 ;;		None
  8578 ;; Auto vars:     Size  Location     Type
  8579 ;;  x               2   41[BANK0 ] int 
  8580 ;; Return value:  Size  Location     Type
  8581 ;;		None               void
  8582 ;; Registers used:
  8583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8589 ;;      Params:         0       0       0       0       0       0       0
  8590 ;;      Locals:         0       4       0       0       0       0       0
  8591 ;;      Temps:          0       0       0       0       0       0       0
  8592 ;;      Totals:         0       4       0       0       0       0       0
  8593 ;;Total ram usage:        4 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; Hardware stack levels required when called:    7
  8596 ;; This function calls:
  8597 ;;		_Current_Filter
  8598 ;;		___awdiv
  8599 ;;		___awtoft
  8600 ;;		___wmul
  8601 ;; This function is called by:
  8602 ;;		_main
  8603 ;; This function uses a non-reentrant model
  8604 ;;
  8605                           
  8606                           	psect	text34
  8607  0032B4                     __ptext34:
  8608                           	opt stack 0
  8609  0032B4                     _Current_Convert:
  8610                           	opt stack 23
  8611                           
  8612                           ;Current.c: 65: int x;
  8613                           ;Current.c: 66: for(x = 0; x < 10; x++)
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;incstack = 0
  8617  0032B4  0E00               	movlw	0
  8618  0032B6  0100               	movlb	0	; () banked
  8619  0032B8  6F8A               	movwf	(Current_Convert@x+1)& (0+255),b
  8620  0032BA  0E00               	movlw	0
  8621  0032BC  6F89               	movwf	Current_Convert@x& (0+255),b
  8622  0032BE                     l5503:
  8623                           
  8624                           ; BSR set to: 0
  8625  0032BE  0100               	movlb	0	; () banked
  8626  0032C0  BF8A               	btfsc	(Current_Convert@x+1)& (0+255),7,b
  8627  0032C2  D00A               	goto	l5507
  8628  0032C4  0100               	movlb	0	; () banked
  8629  0032C6  518A               	movf	(Current_Convert@x+1)& (0+255),w,b
  8630  0032C8  E159               	bnz	l5513
  8631  0032CA  0E0A               	movlw	10
  8632  0032CC  0100               	movlb	0	; () banked
  8633  0032CE  5D89               	subwf	Current_Convert@x& (0+255),w,b
  8634  0032D0  B0D8               	btfsc	status,0,c
  8635  0032D2  D054               	goto	l5513
  8636  0032D4  D001               	goto	l5507
  8637                           
  8638                           ; BSR set to: 0
  8639  0032D6  D052               	goto	l5513
  8640  0032D8                     l5507:
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;Current.c: 67: {
  8644                           ;Current.c: 68: TempBattery_Current[x] = ((((Current_Adc[x]/1024)*500)-2500)/66);
  8645  0032D8  0E04               	movlw	4
  8646  0032DA  6E20               	movwf	___awdiv@divisor+1,c
  8647  0032DC  0E00               	movlw	0
  8648  0032DE  6E1F               	movwf	___awdiv@divisor,c
  8649  0032E0  90D8               	bcf	status,0,c
  8650  0032E2  0100               	movlb	0	; () banked
  8651  0032E4  3589               	rlcf	Current_Convert@x& (0+255),w,b
  8652  0032E6  6ED9               	movwf	fsr2l,c
  8653  0032E8  0100               	movlb	0	; () banked
  8654  0032EA  358A               	rlcf	(Current_Convert@x+1)& (0+255),w,b
  8655  0032EC  6EDA               	movwf	fsr2h,c
  8656  0032EE  0ECC               	movlw	low _Current_Adc
  8657  0032F0  26D9               	addwf	fsr2l,f,c
  8658  0032F2  0E00               	movlw	high _Current_Adc
  8659  0032F4  22DA               	addwfc	fsr2h,f,c
  8660  0032F6  CFDE F01D          	movff	postinc2,___awdiv@dividend
  8661  0032FA  CFDD F01E          	movff	postdec2,___awdiv@dividend+1
  8662  0032FE  EC33  F01B         	call	___awdiv	;wreg free
  8663  003302  C01D  F025         	movff	?___awdiv,___wmul@multiplier
  8664  003306  C01E  F026         	movff	?___awdiv+1,___wmul@multiplier+1
  8665  00330A  0E01               	movlw	1
  8666  00330C  6E28               	movwf	___wmul@multiplicand+1,c
  8667  00330E  0EF4               	movlw	244
  8668  003310  6E27               	movwf	___wmul@multiplicand,c
  8669  003312  EC3C  F01E         	call	___wmul	;wreg free
  8670  003316  0E3C               	movlw	60
  8671  003318  2425               	addwf	?___wmul,w,c
  8672  00331A  0100               	movlb	0	; () banked
  8673  00331C  6F87               	movwf	_Current_Convert$1694& (0+255),b
  8674  00331E  0EF6               	movlw	246
  8675  003320  2026               	addwfc	?___wmul+1,w,c
  8676  003322  0100               	movlb	0	; () banked
  8677  003324  6F88               	movwf	(_Current_Convert$1694+1)& (0+255),b
  8678                           
  8679                           ;Current.c: 67: {
  8680                           ;Current.c: 68: TempBattery_Current[x] = ((((Current_Adc[x]/1024)*500)-2500)/66);
  8681  003326  C089  F025         	movff	Current_Convert@x,___wmul@multiplier
  8682  00332A  C08A  F026         	movff	Current_Convert@x+1,___wmul@multiplier+1
  8683  00332E  0E00               	movlw	0
  8684  003330  6E28               	movwf	___wmul@multiplicand+1,c
  8685  003332  0E03               	movlw	3
  8686  003334  6E27               	movwf	___wmul@multiplicand,c
  8687  003336  EC3C  F01E         	call	___wmul	;wreg free
  8688  00333A  0EB4               	movlw	low _TempBattery_Current
  8689  00333C  2425               	addwf	?___wmul,w,c
  8690  00333E  6ED9               	movwf	fsr2l,c
  8691  003340  0E01               	movlw	high _TempBattery_Current
  8692  003342  2026               	addwfc	?___wmul+1,w,c
  8693  003344  6EDA               	movwf	fsr2h,c
  8694  003346  0E00               	movlw	0
  8695  003348  6E20               	movwf	___awdiv@divisor+1,c
  8696  00334A  0E42               	movlw	66
  8697  00334C  6E1F               	movwf	___awdiv@divisor,c
  8698  00334E  C087  F01D         	movff	_Current_Convert$1694,___awdiv@dividend
  8699  003352  C088  F01E         	movff	_Current_Convert$1694+1,___awdiv@dividend+1
  8700  003356  EC33  F01B         	call	___awdiv	;wreg free
  8701  00335A  C01D  F02B         	movff	?___awdiv,___awtoft@c
  8702  00335E  C01E  F02C         	movff	?___awdiv+1,___awtoft@c+1
  8703  003362  ECB4  F01D         	call	___awtoft	;wreg free
  8704  003366  C02B  FFDE         	movff	?___awtoft,postinc2
  8705  00336A  C02C  FFDE         	movff	?___awtoft+1,postinc2
  8706  00336E  C02D  FFDE         	movff	?___awtoft+2,postinc2
  8707  003372  0100               	movlb	0	; () banked
  8708  003374  4B89               	infsnz	Current_Convert@x& (0+255),f,b
  8709  003376  2B8A               	incf	(Current_Convert@x+1)& (0+255),f,b
  8710  003378  D7A2               	goto	l5503
  8711                           
  8712                           ; BSR set to: 0
  8713  00337A  D000               	goto	l5513
  8714  00337C                     l5513:
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;Current.c: 69: }
  8718                           ;Current.c: 70: Current_Filter();
  8719  00337C  EC10  F014         	call	_Current_Filter	;wreg free
  8720  003380  0012               	return		;funcret
  8721  003382                     __end_of_Current_Convert:
  8722                           	opt stack 0
  8723                           tblptru	equ	0xFF8
  8724                           tblptrh	equ	0xFF7
  8725                           tblptrl	equ	0xFF6
  8726                           tablat	equ	0xFF5
  8727                           prodh	equ	0xFF4
  8728                           prodl	equ	0xFF3
  8729                           intcon	equ	0xFF2
  8730                           intcon2	equ	0xFF1
  8731                           postinc0	equ	0xFEE
  8732                           wreg	equ	0xFE8
  8733                           postinc1	equ	0xFE6
  8734                           postdec1	equ	0xFE5
  8735                           fsr1h	equ	0xFE2
  8736                           fsr1l	equ	0xFE1
  8737                           postinc2	equ	0xFDE
  8738                           postdec2	equ	0xFDD
  8739                           fsr2h	equ	0xFDA
  8740                           fsr2l	equ	0xFD9
  8741                           status	equ	0xFD8
  8742                           
  8743 ;; *************** function ___awdiv *****************
  8744 ;; Defined at:
  8745 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8746 ;; Parameters:    Size  Location     Type
  8747 ;;  dividend        2   28[COMRAM] int 
  8748 ;;  divisor         2   30[COMRAM] int 
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;  quotient        2   34[COMRAM] int 
  8751 ;;  sign            1   33[COMRAM] unsigned char 
  8752 ;;  counter         1   32[COMRAM] unsigned char 
  8753 ;; Return value:  Size  Location     Type
  8754 ;;                  2   28[COMRAM] int 
  8755 ;; Registers used:
  8756 ;;		wreg, status,2, status,0
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8762 ;;      Params:         4       0       0       0       0       0       0
  8763 ;;      Locals:         4       0       0       0       0       0       0
  8764 ;;      Temps:          0       0       0       0       0       0       0
  8765 ;;      Totals:         8       0       0       0       0       0       0
  8766 ;;Total ram usage:        8 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    4
  8769 ;; This function calls:
  8770 ;;		Nothing
  8771 ;; This function is called by:
  8772 ;;		_Current_Convert
  8773 ;;		_fround
  8774 ;;		_scale
  8775 ;;		_printf
  8776 ;; This function uses a non-reentrant model
  8777 ;;
  8778                           
  8779                           	psect	text35
  8780  003666                     __ptext35:
  8781                           	opt stack 0
  8782  003666                     ___awdiv:
  8783                           	opt stack 24
  8784                           
  8785                           ;incstack = 0
  8786  003666  0E00               	movlw	0
  8787  003668  6E22               	movwf	___awdiv@sign,c
  8788  00366A  AE20               	btfss	___awdiv@divisor+1,7,c
  8789  00366C  D007               	goto	l3269
  8790  00366E  6C1F               	negf	___awdiv@divisor,c
  8791  003670  1E20               	comf	___awdiv@divisor+1,f,c
  8792  003672  B0D8               	btfsc	status,0,c
  8793  003674  2A20               	incf	___awdiv@divisor+1,f,c
  8794  003676  0E01               	movlw	1
  8795  003678  6E22               	movwf	___awdiv@sign,c
  8796  00367A  D000               	goto	l3269
  8797  00367C                     l3269:
  8798  00367C  AE1E               	btfss	___awdiv@dividend+1,7,c
  8799  00367E  D007               	goto	l3275
  8800  003680  6C1D               	negf	___awdiv@dividend,c
  8801  003682  1E1E               	comf	___awdiv@dividend+1,f,c
  8802  003684  B0D8               	btfsc	status,0,c
  8803  003686  2A1E               	incf	___awdiv@dividend+1,f,c
  8804  003688  0E01               	movlw	1
  8805  00368A  1A22               	xorwf	___awdiv@sign,f,c
  8806  00368C  D000               	goto	l3275
  8807  00368E                     l3275:
  8808  00368E  0E00               	movlw	0
  8809  003690  6E24               	movwf	___awdiv@quotient+1,c
  8810  003692  0E00               	movlw	0
  8811  003694  6E23               	movwf	___awdiv@quotient,c
  8812  003696  501F               	movf	___awdiv@divisor,w,c
  8813  003698  1020               	iorwf	___awdiv@divisor+1,w,c
  8814  00369A  B4D8               	btfsc	status,2,c
  8815  00369C  D021               	goto	l3297
  8816  00369E  0E01               	movlw	1
  8817  0036A0  6E21               	movwf	___awdiv@counter,c
  8818  0036A2  D005               	goto	l3283
  8819  0036A4                     l3281:
  8820  0036A4  90D8               	bcf	status,0,c
  8821  0036A6  361F               	rlcf	___awdiv@divisor,f,c
  8822  0036A8  3620               	rlcf	___awdiv@divisor+1,f,c
  8823  0036AA  2A21               	incf	___awdiv@counter,f,c
  8824  0036AC  D000               	goto	l3283
  8825  0036AE                     l3283:
  8826  0036AE  BE20               	btfsc	___awdiv@divisor+1,7,c
  8827  0036B0  D002               	goto	l3285
  8828  0036B2  D7F8               	goto	l3281
  8829  0036B4  D000               	goto	l3285
  8830  0036B6                     l3285:
  8831  0036B6  90D8               	bcf	status,0,c
  8832  0036B8  3623               	rlcf	___awdiv@quotient,f,c
  8833  0036BA  3624               	rlcf	___awdiv@quotient+1,f,c
  8834  0036BC  501F               	movf	___awdiv@divisor,w,c
  8835  0036BE  5C1D               	subwf	___awdiv@dividend,w,c
  8836  0036C0  5020               	movf	___awdiv@divisor+1,w,c
  8837  0036C2  581E               	subwfb	___awdiv@dividend+1,w,c
  8838  0036C4  A0D8               	btfss	status,0,c
  8839  0036C6  D006               	goto	l3293
  8840  0036C8  501F               	movf	___awdiv@divisor,w,c
  8841  0036CA  5E1D               	subwf	___awdiv@dividend,f,c
  8842  0036CC  5020               	movf	___awdiv@divisor+1,w,c
  8843  0036CE  5A1E               	subwfb	___awdiv@dividend+1,f,c
  8844  0036D0  8023               	bsf	___awdiv@quotient,0,c
  8845  0036D2  D000               	goto	l3293
  8846  0036D4                     l3293:
  8847  0036D4  90D8               	bcf	status,0,c
  8848  0036D6  3220               	rrcf	___awdiv@divisor+1,f,c
  8849  0036D8  321F               	rrcf	___awdiv@divisor,f,c
  8850  0036DA  2E21               	decfsz	___awdiv@counter,f,c
  8851  0036DC  D7EC               	goto	l3285
  8852  0036DE  D000               	goto	l3297
  8853  0036E0                     l3297:
  8854  0036E0  5022               	movf	___awdiv@sign,w,c
  8855  0036E2  B4D8               	btfsc	status,2,c
  8856  0036E4  D005               	goto	l3301
  8857  0036E6  6C23               	negf	___awdiv@quotient,c
  8858  0036E8  1E24               	comf	___awdiv@quotient+1,f,c
  8859  0036EA  B0D8               	btfsc	status,0,c
  8860  0036EC  2A24               	incf	___awdiv@quotient+1,f,c
  8861  0036EE  D000               	goto	l3301
  8862  0036F0                     l3301:
  8863  0036F0  C023  F01D         	movff	___awdiv@quotient,?___awdiv
  8864  0036F4  C024  F01E         	movff	___awdiv@quotient+1,?___awdiv+1
  8865  0036F8  0012               	return	
  8866  0036FA  0012               	return		;funcret
  8867  0036FC                     __end_of___awdiv:
  8868                           	opt stack 0
  8869                           tblptru	equ	0xFF8
  8870                           tblptrh	equ	0xFF7
  8871                           tblptrl	equ	0xFF6
  8872                           tablat	equ	0xFF5
  8873                           prodh	equ	0xFF4
  8874                           prodl	equ	0xFF3
  8875                           intcon	equ	0xFF2
  8876                           intcon2	equ	0xFF1
  8877                           postinc0	equ	0xFEE
  8878                           wreg	equ	0xFE8
  8879                           postinc1	equ	0xFE6
  8880                           postdec1	equ	0xFE5
  8881                           fsr1h	equ	0xFE2
  8882                           fsr1l	equ	0xFE1
  8883                           postinc2	equ	0xFDE
  8884                           postdec2	equ	0xFDD
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function _Current_Filter *****************
  8890 ;; Defined at:
  8891 ;;		line 49 in file "Current.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  x               2   37[BANK0 ] int 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;		None               void
  8898 ;; Registers used:
  8899 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8905 ;;      Params:         0       0       0       0       0       0       0
  8906 ;;      Locals:         0       2       0       0       0       0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0
  8908 ;;      Totals:         0       2       0       0       0       0       0
  8909 ;;Total ram usage:        2 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    6
  8912 ;; This function calls:
  8913 ;;		___ftadd
  8914 ;;		___ftmul
  8915 ;;		___wmul
  8916 ;; This function is called by:
  8917 ;;		_Current_Convert
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           	psect	text36
  8922  002820                     __ptext36:
  8923                           	opt stack 0
  8924  002820                     _Current_Filter:
  8925                           	opt stack 23
  8926                           
  8927                           ;Current.c: 52: int x;
  8928                           ;Current.c: 53: for(x = 0; x < 10; x++)
  8929                           
  8930                           ;incstack = 0
  8931  002820  0E00               	movlw	0
  8932  002822  0100               	movlb	0	; () banked
  8933  002824  6F86               	movwf	(Current_Filter@x+1)& (0+255),b
  8934  002826  0E00               	movlw	0
  8935  002828  6F85               	movwf	Current_Filter@x& (0+255),b
  8936  00282A                     l4961:
  8937                           
  8938                           ; BSR set to: 0
  8939  00282A  0100               	movlb	0	; () banked
  8940  00282C  BF86               	btfsc	(Current_Filter@x+1)& (0+255),7,b
  8941  00282E  D00A               	goto	l4965
  8942  002830  0100               	movlb	0	; () banked
  8943  002832  5186               	movf	(Current_Filter@x+1)& (0+255),w,b
  8944  002834  E172               	bnz	l4971
  8945  002836  0E0A               	movlw	10
  8946  002838  0100               	movlb	0	; () banked
  8947  00283A  5D85               	subwf	Current_Filter@x& (0+255),w,b
  8948  00283C  B0D8               	btfsc	status,0,c
  8949  00283E  D06D               	goto	l4971
  8950  002840  D001               	goto	l4965
  8951                           
  8952                           ; BSR set to: 0
  8953  002842  D06B               	goto	l4971
  8954  002844                     l4965:
  8955                           
  8956                           ; BSR set to: 0
  8957                           ;Current.c: 54: {
  8958                           ;Current.c: 55: Battery_Current[x] = (0.88*TempBattery_Current[x] + ((1- 0.88)*PrevBatte
      +                          ry_Current[x]));
  8959  002844  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  8960  002848  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  8961  00284C  0E00               	movlw	0
  8962  00284E  6E28               	movwf	___wmul@multiplicand+1,c
  8963  002850  0E03               	movlw	3
  8964  002852  6E27               	movwf	___wmul@multiplicand,c
  8965  002854  EC3C  F01E         	call	___wmul	;wreg free
  8966  002858  0E00               	movlw	low _Battery_Current
  8967  00285A  2425               	addwf	?___wmul,w,c
  8968  00285C  6ED9               	movwf	fsr2l,c
  8969  00285E  0E01               	movlw	high _Battery_Current
  8970  002860  2026               	addwfc	?___wmul+1,w,c
  8971  002862  6EDA               	movwf	fsr2h,c
  8972  002864  0E48               	movlw	72
  8973  002866  0100               	movlb	0	; () banked
  8974  002868  6F63               	movwf	___ftmul@f2& (0+255),b
  8975  00286A  0E61               	movlw	97
  8976  00286C  0100               	movlb	0	; () banked
  8977  00286E  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  8978  002870  0E3F               	movlw	63
  8979  002872  0100               	movlb	0	; () banked
  8980  002874  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  8981  002876  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  8982  00287A  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  8983  00287E  0E00               	movlw	0
  8984  002880  6E28               	movwf	___wmul@multiplicand+1,c
  8985  002882  0E03               	movlw	3
  8986  002884  6E27               	movwf	___wmul@multiplicand,c
  8987  002886  EC3C  F01E         	call	___wmul	;wreg free
  8988  00288A  0EB4               	movlw	low _TempBattery_Current
  8989  00288C  2425               	addwf	?___wmul,w,c
  8990  00288E  6EE1               	movwf	fsr1l,c
  8991  002890  0E01               	movlw	high _TempBattery_Current
  8992  002892  2026               	addwfc	?___wmul+1,w,c
  8993  002894  6EE2               	movwf	fsr1h,c
  8994  002896  CFE6 F060          	movff	postinc1,___ftmul@f1
  8995  00289A  CFE6 F061          	movff	postinc1,___ftmul@f1+1
  8996  00289E  CFE5 F062          	movff	postdec1,___ftmul@f1+2
  8997  0028A2  ECCB  F014         	call	___ftmul	;wreg free
  8998  0028A6  C060  F079         	movff	?___ftmul,___ftadd@f1
  8999  0028AA  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  9000  0028AE  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  9001  0028B2  0EC3               	movlw	195
  9002  0028B4  0100               	movlb	0	; () banked
  9003  0028B6  6F63               	movwf	___ftmul@f2& (0+255),b
  9004  0028B8  0EF5               	movlw	245
  9005  0028BA  0100               	movlb	0	; () banked
  9006  0028BC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  9007  0028BE  0E3D               	movlw	61
  9008  0028C0  0100               	movlb	0	; () banked
  9009  0028C2  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  9010  0028C4  0E00               	movlw	0
  9011  0028C6  6E28               	movwf	___wmul@multiplicand+1,c
  9012  0028C8  0E03               	movlw	3
  9013  0028CA  6E27               	movwf	___wmul@multiplicand,c
  9014  0028CC  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  9015  0028D0  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  9016  0028D4  EC3C  F01E         	call	___wmul	;wreg free
  9017  0028D8  0E3C               	movlw	low _PrevBattery_Current
  9018  0028DA  2425               	addwf	?___wmul,w,c
  9019  0028DC  6EE1               	movwf	fsr1l,c
  9020  0028DE  0E01               	movlw	high _PrevBattery_Current
  9021  0028E0  2026               	addwfc	?___wmul+1,w,c
  9022  0028E2  6EE2               	movwf	fsr1h,c
  9023  0028E4  CFE6 F060          	movff	postinc1,___ftmul@f1
  9024  0028E8  CFE6 F061          	movff	postinc1,___ftmul@f1+1
  9025  0028EC  CFE5 F062          	movff	postdec1,___ftmul@f1+2
  9026  0028F0  ECCB  F014         	call	___ftmul	;wreg free
  9027  0028F4  C060  F07C         	movff	?___ftmul,___ftadd@f2
  9028  0028F8  C061  F07D         	movff	?___ftmul+1,___ftadd@f2+1
  9029  0028FC  C062  F07E         	movff	?___ftmul+2,___ftadd@f2+2
  9030  002900  EC1E  F00E         	call	___ftadd	;wreg free
  9031  002904  C079  FFDE         	movff	?___ftadd,postinc2
  9032  002908  C07A  FFDE         	movff	?___ftadd+1,postinc2
  9033  00290C  C07B  FFDE         	movff	?___ftadd+2,postinc2
  9034  002910  0100               	movlb	0	; () banked
  9035  002912  4B85               	infsnz	Current_Filter@x& (0+255),f,b
  9036  002914  2B86               	incf	(Current_Filter@x+1)& (0+255),f,b
  9037  002916  D789               	goto	l4961
  9038                           
  9039                           ; BSR set to: 0
  9040  002918  D000               	goto	l4971
  9041  00291A                     l4971:
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;Current.c: 56: }
  9045                           ;Current.c: 57: for(x = 0; x < 10; x++)
  9046  00291A  0E00               	movlw	0
  9047  00291C  0100               	movlb	0	; () banked
  9048  00291E  6F86               	movwf	(Current_Filter@x+1)& (0+255),b
  9049  002920  0E00               	movlw	0
  9050  002922  6F85               	movwf	Current_Filter@x& (0+255),b
  9051  002924                     l4973:
  9052                           
  9053                           ; BSR set to: 0
  9054  002924  0100               	movlb	0	; () banked
  9055  002926  BF86               	btfsc	(Current_Filter@x+1)& (0+255),7,b
  9056  002928  D00A               	goto	l4977
  9057  00292A  0100               	movlb	0	; () banked
  9058  00292C  5186               	movf	(Current_Filter@x+1)& (0+255),w,b
  9059  00292E  E132               	bnz	l481
  9060  002930  0E0A               	movlw	10
  9061  002932  0100               	movlb	0	; () banked
  9062  002934  5D85               	subwf	Current_Filter@x& (0+255),w,b
  9063  002936  B0D8               	btfsc	status,0,c
  9064  002938  0012               	return	
  9065  00293A  D001               	goto	l4977
  9066                           
  9067                           ; BSR set to: 0
  9068  00293C  0012               	return	
  9069  00293E                     l4977:
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;Current.c: 58: {
  9073                           ;Current.c: 59: PrevBattery_Current[x] = Battery_Current[x];
  9074  00293E  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  9075  002942  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  9076  002946  0E00               	movlw	0
  9077  002948  6E28               	movwf	___wmul@multiplicand+1,c
  9078  00294A  0E03               	movlw	3
  9079  00294C  6E27               	movwf	___wmul@multiplicand,c
  9080  00294E  EC3C  F01E         	call	___wmul	;wreg free
  9081  002952  0E00               	movlw	low _Battery_Current
  9082  002954  2425               	addwf	?___wmul,w,c
  9083  002956  6ED9               	movwf	fsr2l,c
  9084  002958  0E01               	movlw	high _Battery_Current
  9085  00295A  2026               	addwfc	?___wmul+1,w,c
  9086  00295C  6EDA               	movwf	fsr2h,c
  9087  00295E  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  9088  002962  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  9089  002966  0E00               	movlw	0
  9090  002968  6E28               	movwf	___wmul@multiplicand+1,c
  9091  00296A  0E03               	movlw	3
  9092  00296C  6E27               	movwf	___wmul@multiplicand,c
  9093  00296E  EC3C  F01E         	call	___wmul	;wreg free
  9094  002972  0E3C               	movlw	low _PrevBattery_Current
  9095  002974  2425               	addwf	?___wmul,w,c
  9096  002976  6EE1               	movwf	fsr1l,c
  9097  002978  0E01               	movlw	high _PrevBattery_Current
  9098  00297A  2026               	addwfc	?___wmul+1,w,c
  9099  00297C  6EE2               	movwf	fsr1h,c
  9100  00297E  CFDE FFE6          	movff	postinc2,postinc1
  9101  002982  CFDE FFE6          	movff	postinc2,postinc1
  9102  002986  CFDE FFE6          	movff	postinc2,postinc1
  9103  00298A  0100               	movlb	0	; () banked
  9104  00298C  4B85               	infsnz	Current_Filter@x& (0+255),f,b
  9105  00298E  2B86               	incf	(Current_Filter@x+1)& (0+255),f,b
  9106  002990  D7C9               	goto	l4973
  9107                           
  9108                           ; BSR set to: 0
  9109  002992  0012               	return	
  9110  002994                     l481:
  9111                           
  9112                           ; BSR set to: 0
  9113  002994  0012               	return		;funcret
  9114  002996                     __end_of_Current_Filter:
  9115                           	opt stack 0
  9116                           tblptru	equ	0xFF8
  9117                           tblptrh	equ	0xFF7
  9118                           tblptrl	equ	0xFF6
  9119                           tablat	equ	0xFF5
  9120                           prodh	equ	0xFF4
  9121                           prodl	equ	0xFF3
  9122                           intcon	equ	0xFF2
  9123                           intcon2	equ	0xFF1
  9124                           postinc0	equ	0xFEE
  9125                           wreg	equ	0xFE8
  9126                           postinc1	equ	0xFE6
  9127                           postdec1	equ	0xFE5
  9128                           fsr1h	equ	0xFE2
  9129                           fsr1l	equ	0xFE1
  9130                           postinc2	equ	0xFDE
  9131                           postdec2	equ	0xFDD
  9132                           fsr2h	equ	0xFDA
  9133                           fsr2l	equ	0xFD9
  9134                           status	equ	0xFD8
  9135                           
  9136 ;; *************** function ___ftadd *****************
  9137 ;; Defined at:
  9138 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;  f1              3   25[BANK0 ] float 
  9141 ;;  f2              3   28[BANK0 ] float 
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;  exp1            1   36[BANK0 ] unsigned char 
  9144 ;;  exp2            1   35[BANK0 ] unsigned char 
  9145 ;;  sign            1   34[BANK0 ] unsigned char 
  9146 ;; Return value:  Size  Location     Type
  9147 ;;                  3   25[BANK0 ] float 
  9148 ;; Registers used:
  9149 ;;		wreg, status,2, status,0, cstack
  9150 ;; Tracked objects:
  9151 ;;		On entry : 0/0
  9152 ;;		On exit  : 0/0
  9153 ;;		Unchanged: 0/0
  9154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9155 ;;      Params:         0       6       0       0       0       0       0
  9156 ;;      Locals:         0       3       0       0       0       0       0
  9157 ;;      Temps:          0       3       0       0       0       0       0
  9158 ;;      Totals:         0      12       0       0       0       0       0
  9159 ;;Total ram usage:       12 bytes
  9160 ;; Hardware stack levels used:    1
  9161 ;; Hardware stack levels required when called:    5
  9162 ;; This function calls:
  9163 ;;		___ftpack
  9164 ;; This function is called by:
  9165 ;;		_Temp_Filter
  9166 ;;		_Temp_Convert
  9167 ;;		_Current_Fault
  9168 ;;		_Current_Filter
  9169 ;;		_printf
  9170 ;;		___ftsub
  9171 ;;		_log
  9172 ;;		_eval_poly
  9173 ;;		_Battery_Filter
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           	psect	text37
  9178  001C3C                     __ptext37:
  9179                           	opt stack 0
  9180  001C3C                     ___ftadd:
  9181                           	opt stack 23
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;incstack = 0
  9185  001C3C  C07B  F07F         	movff	___ftadd@f1+2,??___ftadd
  9186  001C40  0100               	movlb	0	; () banked
  9187  001C42  6B80               	clrf	(??___ftadd+1)& (0+255),b
  9188  001C44  6B81               	clrf	(??___ftadd+2)& (0+255),b
  9189  001C46  0100               	movlb	0	; () banked
  9190  001C48  357A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9191  001C4A  0100               	movlb	0	; () banked
  9192  001C4C  377F               	rlcf	??___ftadd& (0+255),f,b
  9193  001C4E  E301               	bnc	u4731
  9194  001C50  8180               	bsf	(??___ftadd+1)& (0+255),0,b
  9195  001C52                     u4731:
  9196  001C52  0100               	movlb	0	; () banked
  9197  001C54  517F               	movf	??___ftadd& (0+255),w,b
  9198  001C56  0100               	movlb	0	; () banked
  9199  001C58  6F84               	movwf	___ftadd@exp1& (0+255),b
  9200  001C5A  C07E  F07F         	movff	___ftadd@f2+2,??___ftadd
  9201  001C5E  0100               	movlb	0	; () banked
  9202  001C60  6B80               	clrf	(??___ftadd+1)& (0+255),b
  9203  001C62  6B81               	clrf	(??___ftadd+2)& (0+255),b
  9204  001C64  0100               	movlb	0	; () banked
  9205  001C66  357D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9206  001C68  0100               	movlb	0	; () banked
  9207  001C6A  377F               	rlcf	??___ftadd& (0+255),f,b
  9208  001C6C  E301               	bnc	u4741
  9209  001C6E  8180               	bsf	(??___ftadd+1)& (0+255),0,b
  9210  001C70                     u4741:
  9211  001C70  0100               	movlb	0	; () banked
  9212  001C72  517F               	movf	??___ftadd& (0+255),w,b
  9213  001C74  0100               	movlb	0	; () banked
  9214  001C76  6F83               	movwf	___ftadd@exp2& (0+255),b
  9215                           
  9216                           ; BSR set to: 0
  9217  001C78  0100               	movlb	0	; () banked
  9218  001C7A  5184               	movf	___ftadd@exp1& (0+255),w,b
  9219  001C7C  0100               	movlb	0	; () banked
  9220  001C7E  B4D8               	btfsc	status,2,c
  9221  001C80  D011               	goto	l1073
  9222                           
  9223                           ; BSR set to: 0
  9224  001C82  0100               	movlb	0	; () banked
  9225  001C84  5183               	movf	___ftadd@exp2& (0+255),w,b
  9226  001C86  0100               	movlb	0	; () banked
  9227  001C88  5D84               	subwf	___ftadd@exp1& (0+255),w,b
  9228  001C8A  B0D8               	btfsc	status,0,c
  9229  001C8C  D012               	goto	l4781
  9230                           
  9231                           ; BSR set to: 0
  9232  001C8E  0100               	movlb	0	; () banked
  9233  001C90  5184               	movf	___ftadd@exp1& (0+255),w,b
  9234  001C92  0800               	sublw	0
  9235  001C94  0100               	movlb	0	; () banked
  9236  001C96  2583               	addwf	___ftadd@exp2& (0+255),w,b
  9237  001C98  0100               	movlb	0	; () banked
  9238  001C9A  6F7F               	movwf	??___ftadd& (0+255),b
  9239  001C9C  0E18               	movlw	24
  9240  001C9E  0100               	movlb	0	; () banked
  9241  001CA0  657F               	cpfsgt	??___ftadd& (0+255),b
  9242  001CA2  D007               	goto	l4781
  9243  001CA4                     l1073:
  9244                           
  9245                           ; BSR set to: 0
  9246  001CA4  C07C  F079         	movff	___ftadd@f2,?___ftadd
  9247  001CA8  C07D  F07A         	movff	___ftadd@f2+1,?___ftadd+1
  9248  001CAC  C07E  F07B         	movff	___ftadd@f2+2,?___ftadd+2
  9249  001CB0  0012               	return	
  9250  001CB2                     l4781:
  9251                           
  9252                           ; BSR set to: 0
  9253  001CB2  0100               	movlb	0	; () banked
  9254  001CB4  5183               	movf	___ftadd@exp2& (0+255),w,b
  9255  001CB6  0100               	movlb	0	; () banked
  9256  001CB8  B4D8               	btfsc	status,2,c
  9257  001CBA  D011               	goto	l1077
  9258                           
  9259                           ; BSR set to: 0
  9260  001CBC  0100               	movlb	0	; () banked
  9261  001CBE  5184               	movf	___ftadd@exp1& (0+255),w,b
  9262  001CC0  0100               	movlb	0	; () banked
  9263  001CC2  5D83               	subwf	___ftadd@exp2& (0+255),w,b
  9264  001CC4  B0D8               	btfsc	status,0,c
  9265  001CC6  D012               	goto	l4787
  9266                           
  9267                           ; BSR set to: 0
  9268  001CC8  0100               	movlb	0	; () banked
  9269  001CCA  5183               	movf	___ftadd@exp2& (0+255),w,b
  9270  001CCC  0800               	sublw	0
  9271  001CCE  0100               	movlb	0	; () banked
  9272  001CD0  2584               	addwf	___ftadd@exp1& (0+255),w,b
  9273  001CD2  0100               	movlb	0	; () banked
  9274  001CD4  6F7F               	movwf	??___ftadd& (0+255),b
  9275  001CD6  0E18               	movlw	24
  9276  001CD8  0100               	movlb	0	; () banked
  9277  001CDA  657F               	cpfsgt	??___ftadd& (0+255),b
  9278  001CDC  D007               	goto	l4787
  9279  001CDE                     l1077:
  9280                           
  9281                           ; BSR set to: 0
  9282  001CDE  C079  F079         	movff	___ftadd@f1,?___ftadd
  9283  001CE2  C07A  F07A         	movff	___ftadd@f1+1,?___ftadd+1
  9284  001CE6  C07B  F07B         	movff	___ftadd@f1+2,?___ftadd+2
  9285  001CEA  0012               	return	
  9286  001CEC                     l4787:
  9287                           
  9288                           ; BSR set to: 0
  9289  001CEC  0E06               	movlw	6
  9290  001CEE  0100               	movlb	0	; () banked
  9291  001CF0  6F82               	movwf	___ftadd@sign& (0+255),b
  9292                           
  9293                           ; BSR set to: 0
  9294  001CF2  0100               	movlb	0	; () banked
  9295  001CF4  AF7B               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9296  001CF6  D003               	goto	l4793
  9297                           
  9298                           ; BSR set to: 0
  9299  001CF8  0100               	movlb	0	; () banked
  9300  001CFA  8F82               	bsf	___ftadd@sign& (0+255),7,b
  9301  001CFC  D000               	goto	l4793
  9302  001CFE                     l4793:
  9303                           
  9304                           ; BSR set to: 0
  9305  001CFE  0100               	movlb	0	; () banked
  9306  001D00  AF7E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9307  001D02  D002               	goto	l1079
  9308                           
  9309                           ; BSR set to: 0
  9310  001D04  0100               	movlb	0	; () banked
  9311  001D06  8D82               	bsf	___ftadd@sign& (0+255),6,b
  9312  001D08                     l1079:
  9313                           
  9314                           ; BSR set to: 0
  9315  001D08  0100               	movlb	0	; () banked
  9316  001D0A  8F7A               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9317                           
  9318                           ; BSR set to: 0
  9319  001D0C  0EFF               	movlw	255
  9320  001D0E  0100               	movlb	0	; () banked
  9321  001D10  1779               	andwf	___ftadd@f1& (0+255),f,b
  9322  001D12  0EFF               	movlw	255
  9323  001D14  0100               	movlb	0	; () banked
  9324  001D16  177A               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9325  001D18  0E00               	movlw	0
  9326  001D1A  0100               	movlb	0	; () banked
  9327  001D1C  177B               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9328  001D1E  0100               	movlb	0	; () banked
  9329  001D20  8F7D               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9330                           
  9331                           ; BSR set to: 0
  9332  001D22  0EFF               	movlw	255
  9333  001D24  0100               	movlb	0	; () banked
  9334  001D26  177C               	andwf	___ftadd@f2& (0+255),f,b
  9335  001D28  0EFF               	movlw	255
  9336  001D2A  0100               	movlb	0	; () banked
  9337  001D2C  177D               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9338  001D2E  0E00               	movlw	0
  9339  001D30  0100               	movlb	0	; () banked
  9340  001D32  177E               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9341                           
  9342                           ; BSR set to: 0
  9343  001D34  0100               	movlb	0	; () banked
  9344  001D36  5183               	movf	___ftadd@exp2& (0+255),w,b
  9345  001D38  0100               	movlb	0	; () banked
  9346  001D3A  5D84               	subwf	___ftadd@exp1& (0+255),w,b
  9347  001D3C  B0D8               	btfsc	status,0,c
  9348  001D3E  D028               	goto	l4813
  9349  001D40                     l4803:
  9350                           
  9351                           ; BSR set to: 0
  9352  001D40  0100               	movlb	0	; () banked
  9353  001D42  90D8               	bcf	status,0,c
  9354  001D44  377C               	rlcf	___ftadd@f2& (0+255),f,b
  9355  001D46  377D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9356  001D48  377E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9357  001D4A  0100               	movlb	0	; () banked
  9358  001D4C  0783               	decf	___ftadd@exp2& (0+255),f,b
  9359                           
  9360                           ; BSR set to: 0
  9361  001D4E  0100               	movlb	0	; () banked
  9362  001D50  5184               	movf	___ftadd@exp1& (0+255),w,b
  9363  001D52  0100               	movlb	0	; () banked
  9364  001D54  1983               	xorwf	___ftadd@exp2& (0+255),w,b
  9365  001D56  B4D8               	btfsc	status,2,c
  9366  001D58  D013               	goto	l4811
  9367                           
  9368                           ; BSR set to: 0
  9369  001D5A  0100               	movlb	0	; () banked
  9370  001D5C  0782               	decf	___ftadd@sign& (0+255),f,b
  9371  001D5E  C082  F07F         	movff	___ftadd@sign,??___ftadd
  9372  001D62  0E07               	movlw	7
  9373  001D64  0100               	movlb	0	; () banked
  9374  001D66  177F               	andwf	??___ftadd& (0+255),f,b
  9375  001D68  B4D8               	btfsc	status,2,c
  9376  001D6A  D00A               	goto	l4811
  9377  001D6C  D7E9               	goto	l4803
  9378                           
  9379                           ; BSR set to: 0
  9380                           
  9381                           ; BSR set to: 0
  9382  001D6E  D008               	goto	l4811
  9383  001D70                     l4809:
  9384                           
  9385                           ; BSR set to: 0
  9386  001D70  0100               	movlb	0	; () banked
  9387  001D72  90D8               	bcf	status,0,c
  9388  001D74  337B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9389  001D76  337A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9390  001D78  3379               	rrcf	___ftadd@f1& (0+255),f,b
  9391  001D7A  0100               	movlb	0	; () banked
  9392  001D7C  2B84               	incf	___ftadd@exp1& (0+255),f,b
  9393  001D7E  D000               	goto	l4811
  9394  001D80                     l4811:
  9395                           
  9396                           ; BSR set to: 0
  9397  001D80  0100               	movlb	0	; () banked
  9398  001D82  5183               	movf	___ftadd@exp2& (0+255),w,b
  9399  001D84  0100               	movlb	0	; () banked
  9400  001D86  1984               	xorwf	___ftadd@exp1& (0+255),w,b
  9401  001D88  B4D8               	btfsc	status,2,c
  9402  001D8A  D030               	goto	l1088
  9403  001D8C  D7F1               	goto	l4809
  9404                           
  9405                           ; BSR set to: 0
  9406  001D8E  D02E               	goto	l1088
  9407  001D90                     l4813:
  9408                           
  9409                           ; BSR set to: 0
  9410  001D90  0100               	movlb	0	; () banked
  9411  001D92  5184               	movf	___ftadd@exp1& (0+255),w,b
  9412  001D94  0100               	movlb	0	; () banked
  9413  001D96  5D83               	subwf	___ftadd@exp2& (0+255),w,b
  9414  001D98  B0D8               	btfsc	status,0,c
  9415  001D9A  D028               	goto	l1088
  9416  001D9C                     l4815:
  9417                           
  9418                           ; BSR set to: 0
  9419  001D9C  0100               	movlb	0	; () banked
  9420  001D9E  90D8               	bcf	status,0,c
  9421  001DA0  3779               	rlcf	___ftadd@f1& (0+255),f,b
  9422  001DA2  377A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9423  001DA4  377B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9424  001DA6  0100               	movlb	0	; () banked
  9425  001DA8  0784               	decf	___ftadd@exp1& (0+255),f,b
  9426                           
  9427                           ; BSR set to: 0
  9428  001DAA  0100               	movlb	0	; () banked
  9429  001DAC  5184               	movf	___ftadd@exp1& (0+255),w,b
  9430  001DAE  0100               	movlb	0	; () banked
  9431  001DB0  1983               	xorwf	___ftadd@exp2& (0+255),w,b
  9432  001DB2  B4D8               	btfsc	status,2,c
  9433  001DB4  D013               	goto	l4823
  9434                           
  9435                           ; BSR set to: 0
  9436  001DB6  0100               	movlb	0	; () banked
  9437  001DB8  0782               	decf	___ftadd@sign& (0+255),f,b
  9438  001DBA  C082  F07F         	movff	___ftadd@sign,??___ftadd
  9439  001DBE  0E07               	movlw	7
  9440  001DC0  0100               	movlb	0	; () banked
  9441  001DC2  177F               	andwf	??___ftadd& (0+255),f,b
  9442  001DC4  B4D8               	btfsc	status,2,c
  9443  001DC6  D00A               	goto	l4823
  9444  001DC8  D7E9               	goto	l4815
  9445                           
  9446                           ; BSR set to: 0
  9447                           
  9448                           ; BSR set to: 0
  9449  001DCA  D008               	goto	l4823
  9450  001DCC                     l4821:
  9451                           
  9452                           ; BSR set to: 0
  9453  001DCC  0100               	movlb	0	; () banked
  9454  001DCE  90D8               	bcf	status,0,c
  9455  001DD0  337E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9456  001DD2  337D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9457  001DD4  337C               	rrcf	___ftadd@f2& (0+255),f,b
  9458  001DD6  0100               	movlb	0	; () banked
  9459  001DD8  2B83               	incf	___ftadd@exp2& (0+255),f,b
  9460  001DDA  D000               	goto	l4823
  9461  001DDC                     l4823:
  9462                           
  9463                           ; BSR set to: 0
  9464  001DDC  0100               	movlb	0	; () banked
  9465  001DDE  5183               	movf	___ftadd@exp2& (0+255),w,b
  9466  001DE0  0100               	movlb	0	; () banked
  9467  001DE2  1984               	xorwf	___ftadd@exp1& (0+255),w,b
  9468  001DE4  B4D8               	btfsc	status,2,c
  9469  001DE6  D002               	goto	l1088
  9470  001DE8  D7F1               	goto	l4821
  9471                           
  9472                           ; BSR set to: 0
  9473  001DEA  D000               	goto	l1088
  9474  001DEC                     l1088:
  9475                           
  9476                           ; BSR set to: 0
  9477  001DEC  0100               	movlb	0	; () banked
  9478  001DEE  AF82               	btfss	___ftadd@sign& (0+255),7,b
  9479  001DF0  D012               	goto	l1097
  9480                           
  9481                           ; BSR set to: 0
  9482  001DF2  0EFF               	movlw	255
  9483  001DF4  0100               	movlb	0	; () banked
  9484  001DF6  1B79               	xorwf	___ftadd@f1& (0+255),f,b
  9485  001DF8  0EFF               	movlw	255
  9486  001DFA  0100               	movlb	0	; () banked
  9487  001DFC  1B7A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9488  001DFE  0EFF               	movlw	255
  9489  001E00  0100               	movlb	0	; () banked
  9490  001E02  1B7B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9491  001E04  0E01               	movlw	1
  9492  001E06  0100               	movlb	0	; () banked
  9493  001E08  2779               	addwf	___ftadd@f1& (0+255),f,b
  9494  001E0A  0E00               	movlw	0
  9495  001E0C  0100               	movlb	0	; () banked
  9496  001E0E  237A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9497  001E10  0E00               	movlw	0
  9498  001E12  0100               	movlb	0	; () banked
  9499  001E14  237B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9500  001E16                     l1097:
  9501                           
  9502                           ; BSR set to: 0
  9503  001E16  0100               	movlb	0	; () banked
  9504  001E18  AD82               	btfss	___ftadd@sign& (0+255),6,b
  9505  001E1A  D013               	goto	l4829
  9506                           
  9507                           ; BSR set to: 0
  9508  001E1C  0EFF               	movlw	255
  9509  001E1E  0100               	movlb	0	; () banked
  9510  001E20  1B7C               	xorwf	___ftadd@f2& (0+255),f,b
  9511  001E22  0EFF               	movlw	255
  9512  001E24  0100               	movlb	0	; () banked
  9513  001E26  1B7D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9514  001E28  0EFF               	movlw	255
  9515  001E2A  0100               	movlb	0	; () banked
  9516  001E2C  1B7E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9517  001E2E  0E01               	movlw	1
  9518  001E30  0100               	movlb	0	; () banked
  9519  001E32  277C               	addwf	___ftadd@f2& (0+255),f,b
  9520  001E34  0E00               	movlw	0
  9521  001E36  0100               	movlb	0	; () banked
  9522  001E38  237D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9523  001E3A  0E00               	movlw	0
  9524  001E3C  0100               	movlb	0	; () banked
  9525  001E3E  237E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9526  001E40  D000               	goto	l4829
  9527  001E42                     l4829:
  9528                           
  9529                           ; BSR set to: 0
  9530  001E42  0E00               	movlw	0
  9531  001E44  0100               	movlb	0	; () banked
  9532  001E46  6F82               	movwf	___ftadd@sign& (0+255),b
  9533                           
  9534                           ; BSR set to: 0
  9535  001E48  0100               	movlb	0	; () banked
  9536  001E4A  5179               	movf	___ftadd@f1& (0+255),w,b
  9537  001E4C  0100               	movlb	0	; () banked
  9538  001E4E  277C               	addwf	___ftadd@f2& (0+255),f,b
  9539  001E50  0100               	movlb	0	; () banked
  9540  001E52  517A               	movf	(___ftadd@f1+1)& (0+255),w,b
  9541  001E54  0100               	movlb	0	; () banked
  9542  001E56  237D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9543  001E58  0100               	movlb	0	; () banked
  9544  001E5A  517B               	movf	(___ftadd@f1+2)& (0+255),w,b
  9545  001E5C  0100               	movlb	0	; () banked
  9546  001E5E  237E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9547                           
  9548                           ; BSR set to: 0
  9549  001E60  0100               	movlb	0	; () banked
  9550  001E62  AF7E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9551  001E64  D016               	goto	l4839
  9552                           
  9553                           ; BSR set to: 0
  9554  001E66  0EFF               	movlw	255
  9555  001E68  0100               	movlb	0	; () banked
  9556  001E6A  1B7C               	xorwf	___ftadd@f2& (0+255),f,b
  9557  001E6C  0EFF               	movlw	255
  9558  001E6E  0100               	movlb	0	; () banked
  9559  001E70  1B7D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9560  001E72  0EFF               	movlw	255
  9561  001E74  0100               	movlb	0	; () banked
  9562  001E76  1B7E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9563  001E78  0E01               	movlw	1
  9564  001E7A  0100               	movlb	0	; () banked
  9565  001E7C  277C               	addwf	___ftadd@f2& (0+255),f,b
  9566  001E7E  0E00               	movlw	0
  9567  001E80  0100               	movlb	0	; () banked
  9568  001E82  237D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9569  001E84  0E00               	movlw	0
  9570  001E86  0100               	movlb	0	; () banked
  9571  001E88  237E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9572                           
  9573                           ; BSR set to: 0
  9574  001E8A  0E01               	movlw	1
  9575  001E8C  0100               	movlb	0	; () banked
  9576  001E8E  6F82               	movwf	___ftadd@sign& (0+255),b
  9577  001E90  D000               	goto	l4839
  9578  001E92                     l4839:
  9579                           
  9580                           ; BSR set to: 0
  9581  001E92  C07C  F017         	movff	___ftadd@f2,___ftpack@arg
  9582  001E96  C07D  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  9583  001E9A  C07E  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  9584  001E9E  C084  F01A         	movff	___ftadd@exp1,___ftpack@exp
  9585  001EA2  C082  F01B         	movff	___ftadd@sign,___ftpack@sign
  9586  001EA6  ECC1  F019         	call	___ftpack	;wreg free
  9587  001EAA  C017  F079         	movff	?___ftpack,?___ftadd
  9588  001EAE  C018  F07A         	movff	?___ftpack+1,?___ftadd+1
  9589  001EB2  C019  F07B         	movff	?___ftpack+2,?___ftadd+2
  9590  001EB6  0012               	return	
  9591  001EB8  0012               	return		;funcret
  9592  001EBA                     __end_of___ftadd:
  9593                           	opt stack 0
  9594                           tblptru	equ	0xFF8
  9595                           tblptrh	equ	0xFF7
  9596                           tblptrl	equ	0xFF6
  9597                           tablat	equ	0xFF5
  9598                           prodh	equ	0xFF4
  9599                           prodl	equ	0xFF3
  9600                           intcon	equ	0xFF2
  9601                           intcon2	equ	0xFF1
  9602                           postinc0	equ	0xFEE
  9603                           wreg	equ	0xFE8
  9604                           postinc1	equ	0xFE6
  9605                           postdec1	equ	0xFE5
  9606                           fsr1h	equ	0xFE2
  9607                           fsr1l	equ	0xFE1
  9608                           postinc2	equ	0xFDE
  9609                           postdec2	equ	0xFDD
  9610                           fsr2h	equ	0xFDA
  9611                           fsr2l	equ	0xFD9
  9612                           status	equ	0xFD8
  9613                           
  9614 ;; *************** function _Battery_Fault *****************
  9615 ;; Defined at:
  9616 ;;		line 11 in file "Battery.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;  i               2   52[COMRAM] int 
  9621 ;;  fault           1   51[COMRAM] unsigned char 
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  1    wreg      unsigned char 
  9624 ;; Registers used:
  9625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9631 ;;      Params:         0       0       0       0       0       0       0
  9632 ;;      Locals:         3       0       0       0       0       0       0
  9633 ;;      Temps:          0       0       0       0       0       0       0
  9634 ;;      Totals:         3       0       0       0       0       0       0
  9635 ;;Total ram usage:        3 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    5
  9638 ;; This function calls:
  9639 ;;		___ftge
  9640 ;;		___wmul
  9641 ;; This function is called by:
  9642 ;;		_main
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           	psect	text38
  9647  0035B6                     __ptext38:
  9648                           	opt stack 0
  9649  0035B6                     _Battery_Fault:
  9650                           	opt stack 25
  9651                           
  9652                           ;Battery.c: 13: char fault = 0;
  9653                           
  9654                           ;incstack = 0
  9655  0035B6  0E00               	movlw	0
  9656  0035B8  6E34               	movwf	Battery_Fault@fault,c
  9657                           
  9658                           ;Battery.c: 14: for(int i = 0;i<9;i++)
  9659  0035BA  0E00               	movlw	0
  9660  0035BC  6E36               	movwf	Battery_Fault@i+1,c
  9661  0035BE  0E00               	movlw	0
  9662  0035C0  6E35               	movwf	Battery_Fault@i,c
  9663  0035C2                     l5109:
  9664  0035C2  BE36               	btfsc	Battery_Fault@i+1,7,c
  9665  0035C4  D008               	goto	l5113
  9666  0035C6  5036               	movf	Battery_Fault@i+1,w,c
  9667  0035C8  E14D               	bnz	l270
  9668  0035CA  0E09               	movlw	9
  9669  0035CC  5C35               	subwf	Battery_Fault@i,w,c
  9670  0035CE  B0D8               	btfsc	status,0,c
  9671  0035D0  0012               	return	
  9672  0035D2  D001               	goto	l5113
  9673  0035D4  0012               	return	
  9674  0035D6                     l5113:
  9675                           
  9676                           ;Battery.c: 15: {
  9677                           ;Battery.c: 16: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  9678  0035D6  0E00               	movlw	0
  9679  0035D8  6E2B               	movwf	___ftge@ff1,c
  9680  0035DA  0E40               	movlw	64
  9681  0035DC  6E2C               	movwf	___ftge@ff1+1,c
  9682  0035DE  0E40               	movlw	64
  9683  0035E0  6E2D               	movwf	___ftge@ff1+2,c
  9684  0035E2  C035  F025         	movff	Battery_Fault@i,___wmul@multiplier
  9685  0035E6  C036  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9686  0035EA  0E00               	movlw	0
  9687  0035EC  6E28               	movwf	___wmul@multiplicand+1,c
  9688  0035EE  0E03               	movlw	3
  9689  0035F0  6E27               	movwf	___wmul@multiplicand,c
  9690  0035F2  EC3C  F01E         	call	___wmul	;wreg free
  9691  0035F6  0E1E               	movlw	low _Battery_Volt
  9692  0035F8  2425               	addwf	?___wmul,w,c
  9693  0035FA  6ED9               	movwf	fsr2l,c
  9694  0035FC  0E01               	movlw	high _Battery_Volt
  9695  0035FE  2026               	addwfc	?___wmul+1,w,c
  9696  003600  6EDA               	movwf	fsr2h,c
  9697  003602  CFDE F02E          	movff	postinc2,___ftge@ff2
  9698  003606  CFDE F02F          	movff	postinc2,___ftge@ff2+1
  9699  00360A  CFDD F030          	movff	postdec2,___ftge@ff2+2
  9700  00360E  EC7E  F01B         	call	___ftge	;wreg free
  9701  003612  B0D8               	btfsc	status,0,c
  9702  003614  D023               	goto	l5119
  9703  003616  C035  F025         	movff	Battery_Fault@i,___wmul@multiplier
  9704  00361A  C036  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9705  00361E  0E00               	movlw	0
  9706  003620  6E28               	movwf	___wmul@multiplicand+1,c
  9707  003622  0E03               	movlw	3
  9708  003624  6E27               	movwf	___wmul@multiplicand,c
  9709  003626  EC3C  F01E         	call	___wmul	;wreg free
  9710  00362A  0E1E               	movlw	low _Battery_Volt
  9711  00362C  2425               	addwf	?___wmul,w,c
  9712  00362E  6ED9               	movwf	fsr2l,c
  9713  003630  0E01               	movlw	high _Battery_Volt
  9714  003632  2026               	addwfc	?___wmul+1,w,c
  9715  003634  6EDA               	movwf	fsr2h,c
  9716  003636  CFDE F02B          	movff	postinc2,___ftge@ff1
  9717  00363A  CFDE F02C          	movff	postinc2,___ftge@ff1+1
  9718  00363E  CFDD F02D          	movff	postdec2,___ftge@ff1+2
  9719  003642  0EB8               	movlw	184
  9720  003644  6E2E               	movwf	___ftge@ff2,c
  9721  003646  0E86               	movlw	134
  9722  003648  6E2F               	movwf	___ftge@ff2+1,c
  9723  00364A  0E40               	movlw	64
  9724  00364C  6E30               	movwf	___ftge@ff2+2,c
  9725  00364E  EC7E  F01B         	call	___ftge	;wreg free
  9726  003652  B0D8               	btfsc	status,0,c
  9727  003654  D003               	goto	l5119
  9728                           
  9729                           ;Battery.c: 17: {
  9730                           ;Battery.c: 18: fault = 1;
  9731  003656  0E01               	movlw	1
  9732  003658  6E34               	movwf	Battery_Fault@fault,c
  9733  00365A  D000               	goto	l5119
  9734  00365C                     l5119:
  9735  00365C  4A35               	infsnz	Battery_Fault@i,f,c
  9736  00365E  2A36               	incf	Battery_Fault@i+1,f,c
  9737  003660  D7B0               	goto	l5109
  9738  003662  0012               	return	
  9739  003664                     l270:
  9740  003664  0012               	return		;funcret
  9741  003666                     __end_of_Battery_Fault:
  9742                           	opt stack 0
  9743                           tblptru	equ	0xFF8
  9744                           tblptrh	equ	0xFF7
  9745                           tblptrl	equ	0xFF6
  9746                           tablat	equ	0xFF5
  9747                           prodh	equ	0xFF4
  9748                           prodl	equ	0xFF3
  9749                           intcon	equ	0xFF2
  9750                           intcon2	equ	0xFF1
  9751                           postinc0	equ	0xFEE
  9752                           wreg	equ	0xFE8
  9753                           postinc1	equ	0xFE6
  9754                           postdec1	equ	0xFE5
  9755                           fsr1h	equ	0xFE2
  9756                           fsr1l	equ	0xFE1
  9757                           postinc2	equ	0xFDE
  9758                           postdec2	equ	0xFDD
  9759                           fsr2h	equ	0xFDA
  9760                           fsr2l	equ	0xFD9
  9761                           status	equ	0xFD8
  9762                           
  9763 ;; *************** function ___ftge *****************
  9764 ;; Defined at:
  9765 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;  ff1             3   42[COMRAM] float 
  9768 ;;  ff2             3   45[COMRAM] float 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;		None
  9771 ;; Return value:  Size  Location     Type
  9772 ;;		None               void
  9773 ;; Registers used:
  9774 ;;		wreg, status,2, status,0
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9780 ;;      Params:         6       0       0       0       0       0       0
  9781 ;;      Locals:         0       0       0       0       0       0       0
  9782 ;;      Temps:          3       0       0       0       0       0       0
  9783 ;;      Totals:         9       0       0       0       0       0       0
  9784 ;;Total ram usage:        9 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    4
  9787 ;; This function calls:
  9788 ;;		Nothing
  9789 ;; This function is called by:
  9790 ;;		_Battery_Fault
  9791 ;;		_Temp_Fault
  9792 ;;		_Current_Fault
  9793 ;;		_RunBypas
  9794 ;;		_printf
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           	psect	text39
  9799  0036FC                     __ptext39:
  9800                           	opt stack 0
  9801  0036FC                     ___ftge:
  9802                           	opt stack 25
  9803                           
  9804                           ;incstack = 0
  9805  0036FC  AE2D               	btfss	___ftge@ff1+2,7,c
  9806  0036FE  D017               	goto	l3763
  9807  003700  C02B  F031         	movff	___ftge@ff1,??___ftge
  9808  003704  C02C  F032         	movff	___ftge@ff1+1,??___ftge+1
  9809  003708  C02D  F033         	movff	___ftge@ff1+2,??___ftge+2
  9810  00370C  1E31               	comf	??___ftge,f,c
  9811  00370E  1E32               	comf	??___ftge+1,f,c
  9812  003710  1E33               	comf	??___ftge+2,f,c
  9813  003712  2A31               	incf	??___ftge,f,c
  9814  003714  0E00               	movlw	0
  9815  003716  2232               	addwfc	??___ftge+1,f,c
  9816  003718  2233               	addwfc	??___ftge+2,f,c
  9817  00371A  0E00               	movlw	0
  9818  00371C  2431               	addwf	??___ftge,w,c
  9819  00371E  6E2B               	movwf	___ftge@ff1,c
  9820  003720  0E00               	movlw	0
  9821  003722  2032               	addwfc	??___ftge+1,w,c
  9822  003724  6E2C               	movwf	___ftge@ff1+1,c
  9823  003726  0E80               	movlw	128
  9824  003728  2033               	addwfc	??___ftge+2,w,c
  9825  00372A  6E2D               	movwf	___ftge@ff1+2,c
  9826  00372C  D000               	goto	l3763
  9827  00372E                     l3763:
  9828  00372E  AE30               	btfss	___ftge@ff2+2,7,c
  9829  003730  D017               	goto	l3767
  9830  003732  C02E  F031         	movff	___ftge@ff2,??___ftge
  9831  003736  C02F  F032         	movff	___ftge@ff2+1,??___ftge+1
  9832  00373A  C030  F033         	movff	___ftge@ff2+2,??___ftge+2
  9833  00373E  1E31               	comf	??___ftge,f,c
  9834  003740  1E32               	comf	??___ftge+1,f,c
  9835  003742  1E33               	comf	??___ftge+2,f,c
  9836  003744  2A31               	incf	??___ftge,f,c
  9837  003746  0E00               	movlw	0
  9838  003748  2232               	addwfc	??___ftge+1,f,c
  9839  00374A  2233               	addwfc	??___ftge+2,f,c
  9840  00374C  0E00               	movlw	0
  9841  00374E  2431               	addwf	??___ftge,w,c
  9842  003750  6E2E               	movwf	___ftge@ff2,c
  9843  003752  0E00               	movlw	0
  9844  003754  2032               	addwfc	??___ftge+1,w,c
  9845  003756  6E2F               	movwf	___ftge@ff2+1,c
  9846  003758  0E80               	movlw	128
  9847  00375A  2033               	addwfc	??___ftge+2,w,c
  9848  00375C  6E30               	movwf	___ftge@ff2+2,c
  9849  00375E  D000               	goto	l3767
  9850  003760                     l3767:
  9851  003760  0E00               	movlw	0
  9852  003762  1A2B               	xorwf	___ftge@ff1,f,c
  9853  003764  0E00               	movlw	0
  9854  003766  1A2C               	xorwf	___ftge@ff1+1,f,c
  9855  003768  0E80               	movlw	128
  9856  00376A  1A2D               	xorwf	___ftge@ff1+2,f,c
  9857  00376C  0E00               	movlw	0
  9858  00376E  1A2E               	xorwf	___ftge@ff2,f,c
  9859  003770  0E00               	movlw	0
  9860  003772  1A2F               	xorwf	___ftge@ff2+1,f,c
  9861  003774  0E80               	movlw	128
  9862  003776  1A30               	xorwf	___ftge@ff2+2,f,c
  9863  003778  502E               	movf	___ftge@ff2,w,c
  9864  00377A  5C2B               	subwf	___ftge@ff1,w,c
  9865  00377C  502F               	movf	___ftge@ff2+1,w,c
  9866  00377E  582C               	subwfb	___ftge@ff1+1,w,c
  9867  003780  5030               	movf	___ftge@ff2+2,w,c
  9868  003782  582D               	subwfb	___ftge@ff1+2,w,c
  9869  003784  B0D8               	btfsc	status,0,c
  9870  003786  D002               	goto	l3773
  9871  003788  90D8               	bcf	status,0,c
  9872  00378A  0012               	return	
  9873  00378C                     l3773:
  9874  00378C  80D8               	bsf	status,0,c
  9875  00378E  0012               	return	
  9876  003790  0012               	return		;funcret
  9877  003792                     __end_of___ftge:
  9878                           	opt stack 0
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           intcon	equ	0xFF2
  9886                           intcon2	equ	0xFF1
  9887                           postinc0	equ	0xFEE
  9888                           wreg	equ	0xFE8
  9889                           postinc1	equ	0xFE6
  9890                           postdec1	equ	0xFE5
  9891                           fsr1h	equ	0xFE2
  9892                           fsr1l	equ	0xFE1
  9893                           postinc2	equ	0xFDE
  9894                           postdec2	equ	0xFDD
  9895                           fsr2h	equ	0xFDA
  9896                           fsr2l	equ	0xFD9
  9897                           status	equ	0xFD8
  9898                           
  9899 ;; *************** function _Battery_Convert *****************
  9900 ;; Defined at:
  9901 ;;		line 47 in file "Battery.c"
  9902 ;; Parameters:    Size  Location     Type
  9903 ;;		None
  9904 ;; Auto vars:     Size  Location     Type
  9905 ;;  x               2   15[BANK0 ] int 
  9906 ;; Return value:  Size  Location     Type
  9907 ;;		None               void
  9908 ;; Registers used:
  9909 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9910 ;; Tracked objects:
  9911 ;;		On entry : 0/0
  9912 ;;		On exit  : 0/0
  9913 ;;		Unchanged: 0/0
  9914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9915 ;;      Params:         0       0       0       0       0       0       0
  9916 ;;      Locals:         0       2       0       0       0       0       0
  9917 ;;      Temps:          0       0       0       0       0       0       0
  9918 ;;      Totals:         0       2       0       0       0       0       0
  9919 ;;Total ram usage:        2 bytes
  9920 ;; Hardware stack levels used:    1
  9921 ;; Hardware stack levels required when called:    6
  9922 ;; This function calls:
  9923 ;;		___awtoft
  9924 ;;		___ftdiv
  9925 ;;		___ftmul
  9926 ;;		___wmul
  9927 ;; This function is called by:
  9928 ;;		_main
  9929 ;; This function uses a non-reentrant model
  9930 ;;
  9931                           
  9932                           	psect	text40
  9933  003448                     __ptext40:
  9934                           	opt stack 0
  9935  003448                     _Battery_Convert:
  9936                           	opt stack 24
  9937                           
  9938                           ;Battery.c: 49: int x;
  9939                           ;Battery.c: 50: for(x = 0; x < 7; x++)
  9940                           
  9941                           ;incstack = 0
  9942  003448  0E00               	movlw	0
  9943  00344A  0100               	movlb	0	; () banked
  9944  00344C  6F70               	movwf	(Battery_Convert@x+1)& (0+255),b
  9945  00344E  0E00               	movlw	0
  9946  003450  6F6F               	movwf	Battery_Convert@x& (0+255),b
  9947  003452                     l5125:
  9948                           
  9949                           ; BSR set to: 0
  9950  003452  0100               	movlb	0	; () banked
  9951  003454  BF70               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
  9952  003456  D00A               	goto	l5129
  9953  003458  0100               	movlb	0	; () banked
  9954  00345A  5170               	movf	(Battery_Convert@x+1)& (0+255),w,b
  9955  00345C  E152               	bnz	l285
  9956  00345E  0E07               	movlw	7
  9957  003460  0100               	movlb	0	; () banked
  9958  003462  5D6F               	subwf	Battery_Convert@x& (0+255),w,b
  9959  003464  B0D8               	btfsc	status,0,c
  9960  003466  0012               	return	
  9961  003468  D001               	goto	l5129
  9962                           
  9963                           ; BSR set to: 0
  9964  00346A  0012               	return	
  9965  00346C                     l5129:
  9966                           
  9967                           ; BSR set to: 0
  9968                           ;Battery.c: 51: {
  9969                           ;Battery.c: 52: Battery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0);
  9970  00346C  C06F  F025         	movff	Battery_Convert@x,___wmul@multiplier
  9971  003470  C070  F026         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  9972  003474  0E00               	movlw	0
  9973  003476  6E28               	movwf	___wmul@multiplicand+1,c
  9974  003478  0E03               	movlw	3
  9975  00347A  6E27               	movwf	___wmul@multiplicand,c
  9976  00347C  EC3C  F01E         	call	___wmul	;wreg free
  9977  003480  0E1E               	movlw	low _Battery_Volt
  9978  003482  2425               	addwf	?___wmul,w,c
  9979  003484  6ED9               	movwf	fsr2l,c
  9980  003486  0E01               	movlw	high _Battery_Volt
  9981  003488  2026               	addwfc	?___wmul+1,w,c
  9982  00348A  6EDA               	movwf	fsr2h,c
  9983  00348C  0E00               	movlw	0
  9984  00348E  6E32               	movwf	___ftdiv@f2,c
  9985  003490  0E80               	movlw	128
  9986  003492  6E33               	movwf	___ftdiv@f2+1,c
  9987  003494  0E44               	movlw	68
  9988  003496  6E34               	movwf	___ftdiv@f2+2,c
  9989  003498  90D8               	bcf	status,0,c
  9990  00349A  0100               	movlb	0	; () banked
  9991  00349C  356F               	rlcf	Battery_Convert@x& (0+255),w,b
  9992  00349E  6EE1               	movwf	fsr1l,c
  9993  0034A0  0100               	movlb	0	; () banked
  9994  0034A2  3570               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  9995  0034A4  6EE2               	movwf	fsr1h,c
  9996  0034A6  0EB8               	movlw	low _Battery_Adc
  9997  0034A8  26E1               	addwf	fsr1l,f,c
  9998  0034AA  0E00               	movlw	high _Battery_Adc
  9999  0034AC  22E2               	addwfc	fsr1h,f,c
 10000  0034AE  CFE6 F02B          	movff	postinc1,___awtoft@c
 10001  0034B2  CFE5 F02C          	movff	postdec1,___awtoft@c+1
 10002  0034B6  ECB4  F01D         	call	___awtoft	;wreg free
 10003  0034BA  C02B  F02F         	movff	?___awtoft,___ftdiv@f1
 10004  0034BE  C02C  F030         	movff	?___awtoft+1,___ftdiv@f1+1
 10005  0034C2  C02D  F031         	movff	?___awtoft+2,___ftdiv@f1+2
 10006  0034C6  EC08  F018         	call	___ftdiv	;wreg free
 10007  0034CA  C02F  F060         	movff	?___ftdiv,___ftmul@f1
 10008  0034CE  C030  F061         	movff	?___ftdiv+1,___ftmul@f1+1
 10009  0034D2  C031  F062         	movff	?___ftdiv+2,___ftmul@f1+2
 10010  0034D6  0E00               	movlw	0
 10011  0034D8  0100               	movlb	0	; () banked
 10012  0034DA  6F63               	movwf	___ftmul@f2& (0+255),b
 10013  0034DC  0EA0               	movlw	160
 10014  0034DE  0100               	movlb	0	; () banked
 10015  0034E0  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
 10016  0034E2  0E40               	movlw	64
 10017  0034E4  0100               	movlb	0	; () banked
 10018  0034E6  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
 10019  0034E8  ECCB  F014         	call	___ftmul	;wreg free
 10020  0034EC  C060  FFDE         	movff	?___ftmul,postinc2
 10021  0034F0  C061  FFDE         	movff	?___ftmul+1,postinc2
 10022  0034F4  C062  FFDE         	movff	?___ftmul+2,postinc2
 10023  0034F8  0100               	movlb	0	; () banked
 10024  0034FA  4B6F               	infsnz	Battery_Convert@x& (0+255),f,b
 10025  0034FC  2B70               	incf	(Battery_Convert@x+1)& (0+255),f,b
 10026  0034FE  D7A9               	goto	l5125
 10027                           
 10028                           ; BSR set to: 0
 10029  003500  0012               	return	
 10030  003502                     l285:
 10031                           
 10032                           ; BSR set to: 0
 10033  003502  0012               	return		;funcret
 10034  003504                     __end_of_Battery_Convert:
 10035                           	opt stack 0
 10036                           tblptru	equ	0xFF8
 10037                           tblptrh	equ	0xFF7
 10038                           tblptrl	equ	0xFF6
 10039                           tablat	equ	0xFF5
 10040                           prodh	equ	0xFF4
 10041                           prodl	equ	0xFF3
 10042                           intcon	equ	0xFF2
 10043                           intcon2	equ	0xFF1
 10044                           postinc0	equ	0xFEE
 10045                           wreg	equ	0xFE8
 10046                           postinc1	equ	0xFE6
 10047                           postdec1	equ	0xFE5
 10048                           fsr1h	equ	0xFE2
 10049                           fsr1l	equ	0xFE1
 10050                           postinc2	equ	0xFDE
 10051                           postdec2	equ	0xFDD
 10052                           fsr2h	equ	0xFDA
 10053                           fsr2l	equ	0xFD9
 10054                           status	equ	0xFD8
 10055                           
 10056 ;; *************** function ___wmul *****************
 10057 ;; Defined at:
 10058 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10059 ;; Parameters:    Size  Location     Type
 10060 ;;  multiplier      2   36[COMRAM] unsigned int 
 10061 ;;  multiplicand    2   38[COMRAM] unsigned int 
 10062 ;; Auto vars:     Size  Location     Type
 10063 ;;  product         2   40[COMRAM] unsigned int 
 10064 ;; Return value:  Size  Location     Type
 10065 ;;                  2   36[COMRAM] unsigned int 
 10066 ;; Registers used:
 10067 ;;		wreg, status,2, status,0, prodl, prodh
 10068 ;; Tracked objects:
 10069 ;;		On entry : 0/0
 10070 ;;		On exit  : 0/0
 10071 ;;		Unchanged: 0/0
 10072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10073 ;;      Params:         4       0       0       0       0       0       0
 10074 ;;      Locals:         2       0       0       0       0       0       0
 10075 ;;      Temps:          0       0       0       0       0       0       0
 10076 ;;      Totals:         6       0       0       0       0       0       0
 10077 ;;Total ram usage:        6 bytes
 10078 ;; Hardware stack levels used:    1
 10079 ;; Hardware stack levels required when called:    4
 10080 ;; This function calls:
 10081 ;;		Nothing
 10082 ;; This function is called by:
 10083 ;;		_Battery_Fault
 10084 ;;		_Battery_Convert
 10085 ;;		_Battery_Get
 10086 ;;		_Temp_Fault
 10087 ;;		_Temp_Filter
 10088 ;;		_Temp_Convert
 10089 ;;		_Current_Fault
 10090 ;;		_Current_Filter
 10091 ;;		_Current_Convert
 10092 ;;		_fround
 10093 ;;		_scale
 10094 ;;		_printf
 10095 ;;		_eval_poly
 10096 ;;		_Battery_Filter
 10097 ;;		_Tempeture_Get
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           	psect	text41
 10102  003C78                     __ptext41:
 10103                           	opt stack 0
 10104  003C78                     ___wmul:
 10105                           	opt stack 24
 10106                           
 10107                           ; BSR set to: 0
 10108                           ;incstack = 0
 10109  003C78  5025               	movf	___wmul@multiplier,w,c
 10110  003C7A  0227               	mulwf	___wmul@multiplicand,c
 10111  003C7C  CFF3 F029          	movff	prodl,___wmul@product
 10112  003C80  CFF4 F02A          	movff	prodh,___wmul@product+1
 10113  003C84  5025               	movf	___wmul@multiplier,w,c
 10114  003C86  0228               	mulwf	___wmul@multiplicand+1,c
 10115  003C88  50F3               	movf	prodl,w,c
 10116  003C8A  262A               	addwf	___wmul@product+1,f,c
 10117  003C8C  5026               	movf	___wmul@multiplier+1,w,c
 10118  003C8E  0227               	mulwf	___wmul@multiplicand,c
 10119  003C90  50F3               	movf	prodl,w,c
 10120  003C92  262A               	addwf	___wmul@product+1,f,c
 10121  003C94  C029  F025         	movff	___wmul@product,?___wmul
 10122  003C98  C02A  F026         	movff	___wmul@product+1,?___wmul+1
 10123  003C9C  0012               	return	
 10124  003C9E  0012               	return		;funcret
 10125  003CA0                     __end_of___wmul:
 10126                           	opt stack 0
 10127                           tblptru	equ	0xFF8
 10128                           tblptrh	equ	0xFF7
 10129                           tblptrl	equ	0xFF6
 10130                           tablat	equ	0xFF5
 10131                           prodh	equ	0xFF4
 10132                           prodl	equ	0xFF3
 10133                           intcon	equ	0xFF2
 10134                           intcon2	equ	0xFF1
 10135                           postinc0	equ	0xFEE
 10136                           wreg	equ	0xFE8
 10137                           postinc1	equ	0xFE6
 10138                           postdec1	equ	0xFE5
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           postinc2	equ	0xFDE
 10142                           postdec2	equ	0xFDD
 10143                           fsr2h	equ	0xFDA
 10144                           fsr2l	equ	0xFD9
 10145                           status	equ	0xFD8
 10146                           
 10147 ;; *************** function ___ftmul *****************
 10148 ;; Defined at:
 10149 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 10150 ;; Parameters:    Size  Location     Type
 10151 ;;  f1              3    0[BANK0 ] float 
 10152 ;;  f2              3    3[BANK0 ] float 
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
 10155 ;;  sign            1   14[BANK0 ] unsigned char 
 10156 ;;  cntr            1   13[BANK0 ] unsigned char 
 10157 ;;  exp             1    9[BANK0 ] unsigned char 
 10158 ;; Return value:  Size  Location     Type
 10159 ;;                  3    0[BANK0 ] float 
 10160 ;; Registers used:
 10161 ;;		wreg, status,2, status,0, cstack
 10162 ;; Tracked objects:
 10163 ;;		On entry : 0/0
 10164 ;;		On exit  : 0/0
 10165 ;;		Unchanged: 0/0
 10166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10167 ;;      Params:         0       6       0       0       0       0       0
 10168 ;;      Locals:         0       6       0       0       0       0       0
 10169 ;;      Temps:          0       3       0       0       0       0       0
 10170 ;;      Totals:         0      15       0       0       0       0       0
 10171 ;;Total ram usage:       15 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; Hardware stack levels required when called:    5
 10174 ;; This function calls:
 10175 ;;		___ftpack
 10176 ;; This function is called by:
 10177 ;;		_Battery_Convert
 10178 ;;		_Temp_Filter
 10179 ;;		_Temp_Convert
 10180 ;;		_Current_Filter
 10181 ;;		_fround
 10182 ;;		_scale
 10183 ;;		_printf
 10184 ;;		_log
 10185 ;;		_eval_poly
 10186 ;;		_Battery_Filter
 10187 ;; This function uses a non-reentrant model
 10188 ;;
 10189                           
 10190                           	psect	text42
 10191  002996                     __ptext42:
 10192                           	opt stack 0
 10193  002996                     ___ftmul:
 10194                           	opt stack 23
 10195                           
 10196                           ;incstack = 0
 10197  002996  C062  F066         	movff	___ftmul@f1+2,??___ftmul
 10198  00299A  0100               	movlb	0	; () banked
 10199  00299C  6B67               	clrf	(??___ftmul+1)& (0+255),b
 10200  00299E  6B68               	clrf	(??___ftmul+2)& (0+255),b
 10201  0029A0  0100               	movlb	0	; () banked
 10202  0029A2  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10203  0029A4  0100               	movlb	0	; () banked
 10204  0029A6  3766               	rlcf	??___ftmul& (0+255),f,b
 10205  0029A8  E301               	bnc	u4941
 10206  0029AA  8167               	bsf	(??___ftmul+1)& (0+255),0,b
 10207  0029AC                     u4941:
 10208  0029AC  0100               	movlb	0	; () banked
 10209  0029AE  5166               	movf	??___ftmul& (0+255),w,b
 10210  0029B0  0100               	movlb	0	; () banked
 10211  0029B2  6F69               	movwf	___ftmul@exp& (0+255),b
 10212  0029B4  0100               	movlb	0	; () banked
 10213  0029B6  5169               	movf	___ftmul@exp& (0+255),w,b
 10214  0029B8  A4D8               	btfss	status,2,c
 10215  0029BA  D00A               	goto	l4849
 10216                           
 10217                           ; BSR set to: 0
 10218  0029BC  0E00               	movlw	0
 10219  0029BE  0100               	movlb	0	; () banked
 10220  0029C0  6F60               	movwf	?___ftmul& (0+255),b
 10221  0029C2  0E00               	movlw	0
 10222  0029C4  0100               	movlb	0	; () banked
 10223  0029C6  6F61               	movwf	(?___ftmul+1)& (0+255),b
 10224  0029C8  0E00               	movlw	0
 10225  0029CA  0100               	movlb	0	; () banked
 10226  0029CC  6F62               	movwf	(?___ftmul+2)& (0+255),b
 10227                           
 10228                           ; BSR set to: 0
 10229  0029CE  0012               	return	
 10230  0029D0                     l4849:
 10231                           
 10232                           ; BSR set to: 0
 10233  0029D0  C065  F066         	movff	___ftmul@f2+2,??___ftmul
 10234  0029D4  0100               	movlb	0	; () banked
 10235  0029D6  6B67               	clrf	(??___ftmul+1)& (0+255),b
 10236  0029D8  6B68               	clrf	(??___ftmul+2)& (0+255),b
 10237  0029DA  0100               	movlb	0	; () banked
 10238  0029DC  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10239  0029DE  0100               	movlb	0	; () banked
 10240  0029E0  3766               	rlcf	??___ftmul& (0+255),f,b
 10241  0029E2  E301               	bnc	u4961
 10242  0029E4  8167               	bsf	(??___ftmul+1)& (0+255),0,b
 10243  0029E6                     u4961:
 10244  0029E6  0100               	movlb	0	; () banked
 10245  0029E8  5166               	movf	??___ftmul& (0+255),w,b
 10246  0029EA  0100               	movlb	0	; () banked
 10247  0029EC  6F6E               	movwf	___ftmul@sign& (0+255),b
 10248  0029EE  0100               	movlb	0	; () banked
 10249  0029F0  516E               	movf	___ftmul@sign& (0+255),w,b
 10250  0029F2  A4D8               	btfss	status,2,c
 10251  0029F4  D00A               	goto	l4855
 10252                           
 10253                           ; BSR set to: 0
 10254  0029F6  0E00               	movlw	0
 10255  0029F8  0100               	movlb	0	; () banked
 10256  0029FA  6F60               	movwf	?___ftmul& (0+255),b
 10257  0029FC  0E00               	movlw	0
 10258  0029FE  0100               	movlb	0	; () banked
 10259  002A00  6F61               	movwf	(?___ftmul+1)& (0+255),b
 10260  002A02  0E00               	movlw	0
 10261  002A04  0100               	movlb	0	; () banked
 10262  002A06  6F62               	movwf	(?___ftmul+2)& (0+255),b
 10263                           
 10264                           ; BSR set to: 0
 10265  002A08  0012               	return	
 10266  002A0A                     l4855:
 10267                           
 10268                           ; BSR set to: 0
 10269  002A0A  0100               	movlb	0	; () banked
 10270  002A0C  516E               	movf	___ftmul@sign& (0+255),w,b
 10271  002A0E  0F7B               	addlw	123
 10272  002A10  0100               	movlb	0	; () banked
 10273  002A12  2769               	addwf	___ftmul@exp& (0+255),f,b
 10274                           
 10275                           ; BSR set to: 0
 10276  002A14  C062  F06E         	movff	___ftmul@f1+2,___ftmul@sign
 10277  002A18  0100               	movlb	0	; () banked
 10278  002A1A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 10279  002A1C  0100               	movlb	0	; () banked
 10280  002A1E  1B6E               	xorwf	___ftmul@sign& (0+255),f,b
 10281  002A20  0E80               	movlw	128
 10282  002A22  0100               	movlb	0	; () banked
 10283  002A24  176E               	andwf	___ftmul@sign& (0+255),f,b
 10284                           
 10285                           ; BSR set to: 0
 10286  002A26  0100               	movlb	0	; () banked
 10287  002A28  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10288                           
 10289                           ; BSR set to: 0
 10290  002A2A  0100               	movlb	0	; () banked
 10291  002A2C  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10292                           
 10293                           ; BSR set to: 0
 10294  002A2E  0EFF               	movlw	255
 10295  002A30  0100               	movlb	0	; () banked
 10296  002A32  1763               	andwf	___ftmul@f2& (0+255),f,b
 10297  002A34  0EFF               	movlw	255
 10298  002A36  0100               	movlb	0	; () banked
 10299  002A38  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10300  002A3A  0E00               	movlw	0
 10301  002A3C  0100               	movlb	0	; () banked
 10302  002A3E  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10303                           
 10304                           ; BSR set to: 0
 10305  002A40  0E00               	movlw	0
 10306  002A42  0100               	movlb	0	; () banked
 10307  002A44  6F6A               	movwf	___ftmul@f3_as_product& (0+255),b
 10308  002A46  0E00               	movlw	0
 10309  002A48  0100               	movlb	0	; () banked
 10310  002A4A  6F6B               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10311  002A4C  0E00               	movlw	0
 10312  002A4E  0100               	movlb	0	; () banked
 10313  002A50  6F6C               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10314                           
 10315                           ; BSR set to: 0
 10316  002A52  0E07               	movlw	7
 10317  002A54  0100               	movlb	0	; () banked
 10318  002A56  6F6D               	movwf	___ftmul@cntr& (0+255),b
 10319  002A58  D000               	goto	l4869
 10320  002A5A                     l4869:
 10321                           
 10322                           ; BSR set to: 0
 10323  002A5A  0100               	movlb	0	; () banked
 10324  002A5C  A160               	btfss	___ftmul@f1& (0+255),0,b
 10325  002A5E  D00D               	goto	l4873
 10326                           
 10327                           ; BSR set to: 0
 10328  002A60  0100               	movlb	0	; () banked
 10329  002A62  5163               	movf	___ftmul@f2& (0+255),w,b
 10330  002A64  0100               	movlb	0	; () banked
 10331  002A66  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10332  002A68  0100               	movlb	0	; () banked
 10333  002A6A  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
 10334  002A6C  0100               	movlb	0	; () banked
 10335  002A6E  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10336  002A70  0100               	movlb	0	; () banked
 10337  002A72  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 10338  002A74  0100               	movlb	0	; () banked
 10339  002A76  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10340  002A78  D000               	goto	l4873
 10341  002A7A                     l4873:
 10342                           
 10343                           ; BSR set to: 0
 10344  002A7A  0100               	movlb	0	; () banked
 10345  002A7C  90D8               	bcf	status,0,c
 10346  002A7E  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10347  002A80  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10348  002A82  3360               	rrcf	___ftmul@f1& (0+255),f,b
 10349  002A84  0100               	movlb	0	; () banked
 10350  002A86  90D8               	bcf	status,0,c
 10351  002A88  3763               	rlcf	___ftmul@f2& (0+255),f,b
 10352  002A8A  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10353  002A8C  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10354                           
 10355                           ; BSR set to: 0
 10356  002A8E  0100               	movlb	0	; () banked
 10357  002A90  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
 10358  002A92  D7E3               	goto	l4869
 10359  002A94  D000               	goto	l4877
 10360  002A96                     l4877:
 10361                           
 10362                           ; BSR set to: 0
 10363  002A96  0E09               	movlw	9
 10364  002A98  0100               	movlb	0	; () banked
 10365  002A9A  6F6D               	movwf	___ftmul@cntr& (0+255),b
 10366  002A9C  D000               	goto	l4879
 10367  002A9E                     l4879:
 10368                           
 10369                           ; BSR set to: 0
 10370  002A9E  0100               	movlb	0	; () banked
 10371  002AA0  A160               	btfss	___ftmul@f1& (0+255),0,b
 10372  002AA2  D00D               	goto	l4883
 10373                           
 10374                           ; BSR set to: 0
 10375  002AA4  0100               	movlb	0	; () banked
 10376  002AA6  5163               	movf	___ftmul@f2& (0+255),w,b
 10377  002AA8  0100               	movlb	0	; () banked
 10378  002AAA  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10379  002AAC  0100               	movlb	0	; () banked
 10380  002AAE  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
 10381  002AB0  0100               	movlb	0	; () banked
 10382  002AB2  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10383  002AB4  0100               	movlb	0	; () banked
 10384  002AB6  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 10385  002AB8  0100               	movlb	0	; () banked
 10386  002ABA  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10387  002ABC  D000               	goto	l4883
 10388  002ABE                     l4883:
 10389                           
 10390                           ; BSR set to: 0
 10391  002ABE  0100               	movlb	0	; () banked
 10392  002AC0  90D8               	bcf	status,0,c
 10393  002AC2  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10394  002AC4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10395  002AC6  3360               	rrcf	___ftmul@f1& (0+255),f,b
 10396  002AC8  0100               	movlb	0	; () banked
 10397  002ACA  90D8               	bcf	status,0,c
 10398  002ACC  336C               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10399  002ACE  336B               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10400  002AD0  336A               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10401                           
 10402                           ; BSR set to: 0
 10403  002AD2  0100               	movlb	0	; () banked
 10404  002AD4  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
 10405  002AD6  D7E3               	goto	l4879
 10406  002AD8  D000               	goto	l4887
 10407  002ADA                     l4887:
 10408                           
 10409                           ; BSR set to: 0
 10410  002ADA  C06A  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
 10411  002ADE  C06B  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10412  002AE2  C06C  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10413  002AE6  C069  F01A         	movff	___ftmul@exp,___ftpack@exp
 10414  002AEA  C06E  F01B         	movff	___ftmul@sign,___ftpack@sign
 10415  002AEE  ECC1  F019         	call	___ftpack	;wreg free
 10416  002AF2  C017  F060         	movff	?___ftpack,?___ftmul
 10417  002AF6  C018  F061         	movff	?___ftpack+1,?___ftmul+1
 10418  002AFA  C019  F062         	movff	?___ftpack+2,?___ftmul+2
 10419  002AFE  0012               	return	
 10420  002B00  0012               	return		;funcret
 10421  002B02                     __end_of___ftmul:
 10422                           	opt stack 0
 10423                           tblptru	equ	0xFF8
 10424                           tblptrh	equ	0xFF7
 10425                           tblptrl	equ	0xFF6
 10426                           tablat	equ	0xFF5
 10427                           prodh	equ	0xFF4
 10428                           prodl	equ	0xFF3
 10429                           intcon	equ	0xFF2
 10430                           intcon2	equ	0xFF1
 10431                           postinc0	equ	0xFEE
 10432                           wreg	equ	0xFE8
 10433                           postinc1	equ	0xFE6
 10434                           postdec1	equ	0xFE5
 10435                           fsr1h	equ	0xFE2
 10436                           fsr1l	equ	0xFE1
 10437                           postinc2	equ	0xFDE
 10438                           postdec2	equ	0xFDD
 10439                           fsr2h	equ	0xFDA
 10440                           fsr2l	equ	0xFD9
 10441                           status	equ	0xFD8
 10442                           
 10443 ;; *************** function ___ftdiv *****************
 10444 ;; Defined at:
 10445 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10446 ;; Parameters:    Size  Location     Type
 10447 ;;  f1              3   46[COMRAM] float 
 10448 ;;  f2              3   49[COMRAM] float 
 10449 ;; Auto vars:     Size  Location     Type
 10450 ;;  f3              3   56[COMRAM] float 
 10451 ;;  sign            1   60[COMRAM] unsigned char 
 10452 ;;  exp             1   59[COMRAM] unsigned char 
 10453 ;;  cntr            1   55[COMRAM] unsigned char 
 10454 ;; Return value:  Size  Location     Type
 10455 ;;                  3   46[COMRAM] float 
 10456 ;; Registers used:
 10457 ;;		wreg, status,2, status,0, cstack
 10458 ;; Tracked objects:
 10459 ;;		On entry : 0/0
 10460 ;;		On exit  : 0/0
 10461 ;;		Unchanged: 0/0
 10462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10463 ;;      Params:         6       0       0       0       0       0       0
 10464 ;;      Locals:         6       0       0       0       0       0       0
 10465 ;;      Temps:          3       0       0       0       0       0       0
 10466 ;;      Totals:        15       0       0       0       0       0       0
 10467 ;;Total ram usage:       15 bytes
 10468 ;; Hardware stack levels used:    1
 10469 ;; Hardware stack levels required when called:    5
 10470 ;; This function calls:
 10471 ;;		___ftpack
 10472 ;; This function is called by:
 10473 ;;		_Battery_Convert
 10474 ;;		_Temp_Convert
 10475 ;;		_Current_Fault
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           	psect	text43
 10480  003010                     __ptext43:
 10481                           	opt stack 0
 10482  003010                     ___ftdiv:
 10483                           	opt stack 24
 10484                           
 10485                           ;incstack = 0
 10486  003010  C031  F035         	movff	___ftdiv@f1+2,??___ftdiv
 10487  003014  6A36               	clrf	(??___ftdiv+1)& (0+255),c
 10488  003016  6A37               	clrf	(??___ftdiv+2)& (0+255),c
 10489  003018  3430               	rlcf	___ftdiv@f1+1,w,c
 10490  00301A  3635               	rlcf	??___ftdiv& (0+255),f,c
 10491  00301C  E301               	bnc	u5191
 10492  00301E  8036               	bsf	(??___ftdiv+1)& (0+255),0,c
 10493  003020                     u5191:
 10494  003020  5035               	movf	??___ftdiv,w,c
 10495  003022  6E3C               	movwf	___ftdiv@exp,c
 10496  003024  503C               	movf	___ftdiv@exp,w,c
 10497  003026  A4D8               	btfss	status,2,c
 10498  003028  D007               	goto	l5049
 10499  00302A  0E00               	movlw	0
 10500  00302C  6E2F               	movwf	?___ftdiv,c
 10501  00302E  0E00               	movlw	0
 10502  003030  6E30               	movwf	?___ftdiv+1,c
 10503  003032  0E00               	movlw	0
 10504  003034  6E31               	movwf	?___ftdiv+2,c
 10505  003036  0012               	return	
 10506  003038                     l5049:
 10507  003038  C034  F035         	movff	___ftdiv@f2+2,??___ftdiv
 10508  00303C  6A36               	clrf	(??___ftdiv+1)& (0+255),c
 10509  00303E  6A37               	clrf	(??___ftdiv+2)& (0+255),c
 10510  003040  3433               	rlcf	___ftdiv@f2+1,w,c
 10511  003042  3635               	rlcf	??___ftdiv& (0+255),f,c
 10512  003044  E301               	bnc	u5211
 10513  003046  8036               	bsf	(??___ftdiv+1)& (0+255),0,c
 10514  003048                     u5211:
 10515  003048  5035               	movf	??___ftdiv,w,c
 10516  00304A  6E3D               	movwf	___ftdiv@sign,c
 10517  00304C  503D               	movf	___ftdiv@sign,w,c
 10518  00304E  A4D8               	btfss	status,2,c
 10519  003050  D007               	goto	l5055
 10520  003052  0E00               	movlw	0
 10521  003054  6E2F               	movwf	?___ftdiv,c
 10522  003056  0E00               	movlw	0
 10523  003058  6E30               	movwf	?___ftdiv+1,c
 10524  00305A  0E00               	movlw	0
 10525  00305C  6E31               	movwf	?___ftdiv+2,c
 10526  00305E  0012               	return	
 10527  003060                     l5055:
 10528  003060  0E00               	movlw	0
 10529  003062  6E39               	movwf	___ftdiv@f3,c
 10530  003064  0E00               	movlw	0
 10531  003066  6E3A               	movwf	___ftdiv@f3+1,c
 10532  003068  0E00               	movlw	0
 10533  00306A  6E3B               	movwf	___ftdiv@f3+2,c
 10534  00306C  503D               	movf	___ftdiv@sign,w,c
 10535  00306E  0F89               	addlw	137
 10536  003070  5E3C               	subwf	___ftdiv@exp,f,c
 10537  003072  C031  F03D         	movff	___ftdiv@f1+2,___ftdiv@sign
 10538  003076  5034               	movf	___ftdiv@f2+2,w,c
 10539  003078  1A3D               	xorwf	___ftdiv@sign,f,c
 10540  00307A  0E80               	movlw	128
 10541  00307C  163D               	andwf	___ftdiv@sign,f,c
 10542  00307E  8E30               	bsf	___ftdiv@f1+1,7,c
 10543  003080  0EFF               	movlw	255
 10544  003082  162F               	andwf	___ftdiv@f1,f,c
 10545  003084  0EFF               	movlw	255
 10546  003086  1630               	andwf	___ftdiv@f1+1,f,c
 10547  003088  0E00               	movlw	0
 10548  00308A  1631               	andwf	___ftdiv@f1+2,f,c
 10549  00308C  8E33               	bsf	___ftdiv@f2+1,7,c
 10550  00308E  0EFF               	movlw	255
 10551  003090  1632               	andwf	___ftdiv@f2,f,c
 10552  003092  0EFF               	movlw	255
 10553  003094  1633               	andwf	___ftdiv@f2+1,f,c
 10554  003096  0E00               	movlw	0
 10555  003098  1634               	andwf	___ftdiv@f2+2,f,c
 10556  00309A  0E18               	movlw	24
 10557  00309C  6E38               	movwf	___ftdiv@cntr,c
 10558  00309E  D000               	goto	l5075
 10559  0030A0                     l5075:
 10560  0030A0  90D8               	bcf	status,0,c
 10561  0030A2  3639               	rlcf	___ftdiv@f3,f,c
 10562  0030A4  363A               	rlcf	___ftdiv@f3+1,f,c
 10563  0030A6  363B               	rlcf	___ftdiv@f3+2,f,c
 10564  0030A8  5032               	movf	___ftdiv@f2,w,c
 10565  0030AA  5C2F               	subwf	___ftdiv@f1,w,c
 10566  0030AC  5033               	movf	___ftdiv@f2+1,w,c
 10567  0030AE  5830               	subwfb	___ftdiv@f1+1,w,c
 10568  0030B0  5034               	movf	___ftdiv@f2+2,w,c
 10569  0030B2  5831               	subwfb	___ftdiv@f1+2,w,c
 10570  0030B4  A0D8               	btfss	status,0,c
 10571  0030B6  D007               	goto	l1108
 10572  0030B8  5032               	movf	___ftdiv@f2,w,c
 10573  0030BA  5E2F               	subwf	___ftdiv@f1,f,c
 10574  0030BC  5033               	movf	___ftdiv@f2+1,w,c
 10575  0030BE  5A30               	subwfb	___ftdiv@f1+1,f,c
 10576  0030C0  5034               	movf	___ftdiv@f2+2,w,c
 10577  0030C2  5A31               	subwfb	___ftdiv@f1+2,f,c
 10578  0030C4  8039               	bsf	___ftdiv@f3,0,c
 10579  0030C6                     l1108:
 10580  0030C6  90D8               	bcf	status,0,c
 10581  0030C8  362F               	rlcf	___ftdiv@f1,f,c
 10582  0030CA  3630               	rlcf	___ftdiv@f1+1,f,c
 10583  0030CC  3631               	rlcf	___ftdiv@f1+2,f,c
 10584  0030CE  2E38               	decfsz	___ftdiv@cntr,f,c
 10585  0030D0  D7E7               	goto	l5075
 10586  0030D2  D000               	goto	l5085
 10587  0030D4                     l5085:
 10588  0030D4  C039  F017         	movff	___ftdiv@f3,___ftpack@arg
 10589  0030D8  C03A  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10590  0030DC  C03B  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10591  0030E0  C03C  F01A         	movff	___ftdiv@exp,___ftpack@exp
 10592  0030E4  C03D  F01B         	movff	___ftdiv@sign,___ftpack@sign
 10593  0030E8  ECC1  F019         	call	___ftpack	;wreg free
 10594  0030EC  C017  F02F         	movff	?___ftpack,?___ftdiv
 10595  0030F0  C018  F030         	movff	?___ftpack+1,?___ftdiv+1
 10596  0030F4  C019  F031         	movff	?___ftpack+2,?___ftdiv+2
 10597  0030F8  0012               	return	
 10598  0030FA  0012               	return		;funcret
 10599  0030FC                     __end_of___ftdiv:
 10600                           	opt stack 0
 10601                           tblptru	equ	0xFF8
 10602                           tblptrh	equ	0xFF7
 10603                           tblptrl	equ	0xFF6
 10604                           tablat	equ	0xFF5
 10605                           prodh	equ	0xFF4
 10606                           prodl	equ	0xFF3
 10607                           intcon	equ	0xFF2
 10608                           intcon2	equ	0xFF1
 10609                           postinc0	equ	0xFEE
 10610                           wreg	equ	0xFE8
 10611                           postinc1	equ	0xFE6
 10612                           postdec1	equ	0xFE5
 10613                           fsr1h	equ	0xFE2
 10614                           fsr1l	equ	0xFE1
 10615                           postinc2	equ	0xFDE
 10616                           postdec2	equ	0xFDD
 10617                           fsr2h	equ	0xFDA
 10618                           fsr2l	equ	0xFD9
 10619                           status	equ	0xFD8
 10620                           
 10621 ;; *************** function ___awtoft *****************
 10622 ;; Defined at:
 10623 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;  c               2   42[COMRAM] int 
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;  sign            1   45[COMRAM] unsigned char 
 10628 ;; Return value:  Size  Location     Type
 10629 ;;                  3   42[COMRAM] float 
 10630 ;; Registers used:
 10631 ;;		wreg, status,2, status,0, cstack
 10632 ;; Tracked objects:
 10633 ;;		On entry : 0/0
 10634 ;;		On exit  : 0/0
 10635 ;;		Unchanged: 0/0
 10636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10637 ;;      Params:         3       0       0       0       0       0       0
 10638 ;;      Locals:         1       0       0       0       0       0       0
 10639 ;;      Temps:          0       0       0       0       0       0       0
 10640 ;;      Totals:         4       0       0       0       0       0       0
 10641 ;;Total ram usage:        4 bytes
 10642 ;; Hardware stack levels used:    1
 10643 ;; Hardware stack levels required when called:    5
 10644 ;; This function calls:
 10645 ;;		___ftpack
 10646 ;; This function is called by:
 10647 ;;		_Battery_Convert
 10648 ;;		_Temp_Convert
 10649 ;;		_Current_Convert
 10650 ;;		_log
 10651 ;; This function uses a non-reentrant model
 10652 ;;
 10653                           
 10654                           	psect	text44
 10655  003B68                     __ptext44:
 10656                           	opt stack 0
 10657  003B68                     ___awtoft:
 10658                           	opt stack 23
 10659                           
 10660                           ;incstack = 0
 10661  003B68  0E00               	movlw	0
 10662  003B6A  6E2E               	movwf	___awtoft@sign,c
 10663  003B6C  AE2C               	btfss	___awtoft@c+1,7,c
 10664  003B6E  D007               	goto	l4899
 10665  003B70  6C2B               	negf	___awtoft@c,c
 10666  003B72  1E2C               	comf	___awtoft@c+1,f,c
 10667  003B74  B0D8               	btfsc	status,0,c
 10668  003B76  2A2C               	incf	___awtoft@c+1,f,c
 10669  003B78  0E01               	movlw	1
 10670  003B7A  6E2E               	movwf	___awtoft@sign,c
 10671  003B7C  D000               	goto	l4899
 10672  003B7E                     l4899:
 10673  003B7E  C02B  F017         	movff	___awtoft@c,___ftpack@arg
 10674  003B82  C02C  F018         	movff	___awtoft@c+1,___ftpack@arg+1
 10675  003B86  6A19               	clrf	___ftpack@arg+2,c
 10676  003B88  0E8E               	movlw	142
 10677  003B8A  6E1A               	movwf	___ftpack@exp,c
 10678  003B8C  C02E  F01B         	movff	___awtoft@sign,___ftpack@sign
 10679  003B90  ECC1  F019         	call	___ftpack	;wreg free
 10680  003B94  C017  F02B         	movff	?___ftpack,?___awtoft
 10681  003B98  C018  F02C         	movff	?___ftpack+1,?___awtoft+1
 10682  003B9C  C019  F02D         	movff	?___ftpack+2,?___awtoft+2
 10683  003BA0  0012               	return	
 10684  003BA2  0012               	return		;funcret
 10685  003BA4                     __end_of___awtoft:
 10686                           	opt stack 0
 10687                           tblptru	equ	0xFF8
 10688                           tblptrh	equ	0xFF7
 10689                           tblptrl	equ	0xFF6
 10690                           tablat	equ	0xFF5
 10691                           prodh	equ	0xFF4
 10692                           prodl	equ	0xFF3
 10693                           intcon	equ	0xFF2
 10694                           intcon2	equ	0xFF1
 10695                           postinc0	equ	0xFEE
 10696                           wreg	equ	0xFE8
 10697                           postinc1	equ	0xFE6
 10698                           postdec1	equ	0xFE5
 10699                           fsr1h	equ	0xFE2
 10700                           fsr1l	equ	0xFE1
 10701                           postinc2	equ	0xFDE
 10702                           postdec2	equ	0xFDD
 10703                           fsr2h	equ	0xFDA
 10704                           fsr2l	equ	0xFD9
 10705                           status	equ	0xFD8
 10706                           
 10707 ;; *************** function ___ftpack *****************
 10708 ;; Defined at:
 10709 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;  arg             3   22[COMRAM] unsigned um
 10712 ;;  exp             1   25[COMRAM] unsigned char 
 10713 ;;  sign            1   26[COMRAM] unsigned char 
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;		None
 10716 ;; Return value:  Size  Location     Type
 10717 ;;                  3   22[COMRAM] float 
 10718 ;; Registers used:
 10719 ;;		wreg, status,2, status,0
 10720 ;; Tracked objects:
 10721 ;;		On entry : 0/0
 10722 ;;		On exit  : 0/0
 10723 ;;		Unchanged: 0/0
 10724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10725 ;;      Params:         5       0       0       0       0       0       0
 10726 ;;      Locals:         0       0       0       0       0       0       0
 10727 ;;      Temps:          3       0       0       0       0       0       0
 10728 ;;      Totals:         8       0       0       0       0       0       0
 10729 ;;Total ram usage:        8 bytes
 10730 ;; Hardware stack levels used:    1
 10731 ;; Hardware stack levels required when called:    4
 10732 ;; This function calls:
 10733 ;;		Nothing
 10734 ;; This function is called by:
 10735 ;;		___awtoft
 10736 ;;		___ftadd
 10737 ;;		___ftdiv
 10738 ;;		___ftmul
 10739 ;;		___lltoft
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743                           	psect	text45
 10744  003382                     __ptext45:
 10745                           	opt stack 0
 10746  003382                     ___ftpack:
 10747                           	opt stack 23
 10748                           
 10749                           ;incstack = 0
 10750  003382  501A               	movf	___ftpack@exp,w,c
 10751  003384  B4D8               	btfsc	status,2,c
 10752  003386  D005               	goto	l4735
 10753  003388  5017               	movf	___ftpack@arg,w,c
 10754  00338A  1018               	iorwf	___ftpack@arg+1,w,c
 10755  00338C  1019               	iorwf	___ftpack@arg+2,w,c
 10756  00338E  A4D8               	btfss	status,2,c
 10757  003390  D00E               	goto	l4741
 10758  003392                     l4735:
 10759  003392  0E00               	movlw	0
 10760  003394  6E17               	movwf	?___ftpack,c
 10761  003396  0E00               	movlw	0
 10762  003398  6E18               	movwf	?___ftpack+1,c
 10763  00339A  0E00               	movlw	0
 10764  00339C  6E19               	movwf	?___ftpack+2,c
 10765  00339E  0012               	return	
 10766  0033A0  D006               	goto	l4741
 10767  0033A2                     l4739:
 10768  0033A2  2A1A               	incf	___ftpack@exp,f,c
 10769  0033A4  90D8               	bcf	status,0,c
 10770  0033A6  3219               	rrcf	___ftpack@arg+2,f,c
 10771  0033A8  3218               	rrcf	___ftpack@arg+1,f,c
 10772  0033AA  3217               	rrcf	___ftpack@arg,f,c
 10773  0033AC  D000               	goto	l4741
 10774  0033AE                     l4741:
 10775  0033AE  0E00               	movlw	0
 10776  0033B0  1417               	andwf	___ftpack@arg,w,c
 10777  0033B2  6E1C               	movwf	??___ftpack& (0+255),c
 10778  0033B4  0E00               	movlw	0
 10779  0033B6  1418               	andwf	___ftpack@arg+1,w,c
 10780  0033B8  6E1D               	movwf	(??___ftpack+1)& (0+255),c
 10781  0033BA  0EFE               	movlw	254
 10782  0033BC  1419               	andwf	___ftpack@arg+2,w,c
 10783  0033BE  6E1E               	movwf	(??___ftpack+2)& (0+255),c
 10784  0033C0  501C               	movf	??___ftpack,w,c
 10785  0033C2  101D               	iorwf	??___ftpack+1,w,c
 10786  0033C4  101E               	iorwf	??___ftpack+2,w,c
 10787  0033C6  B4D8               	btfsc	status,2,c
 10788  0033C8  D00E               	goto	l4747
 10789  0033CA  D7EB               	goto	l4739
 10790  0033CC  D00C               	goto	l4747
 10791  0033CE                     l4743:
 10792  0033CE  2A1A               	incf	___ftpack@exp,f,c
 10793  0033D0  0E01               	movlw	1
 10794  0033D2  2617               	addwf	___ftpack@arg,f,c
 10795  0033D4  0E00               	movlw	0
 10796  0033D6  2218               	addwfc	___ftpack@arg+1,f,c
 10797  0033D8  0E00               	movlw	0
 10798  0033DA  2219               	addwfc	___ftpack@arg+2,f,c
 10799  0033DC  90D8               	bcf	status,0,c
 10800  0033DE  3219               	rrcf	___ftpack@arg+2,f,c
 10801  0033E0  3218               	rrcf	___ftpack@arg+1,f,c
 10802  0033E2  3217               	rrcf	___ftpack@arg,f,c
 10803  0033E4  D000               	goto	l4747
 10804  0033E6                     l4747:
 10805  0033E6  0E00               	movlw	0
 10806  0033E8  1417               	andwf	___ftpack@arg,w,c
 10807  0033EA  6E1C               	movwf	??___ftpack& (0+255),c
 10808  0033EC  0E00               	movlw	0
 10809  0033EE  1418               	andwf	___ftpack@arg+1,w,c
 10810  0033F0  6E1D               	movwf	(??___ftpack+1)& (0+255),c
 10811  0033F2  0EFF               	movlw	255
 10812  0033F4  1419               	andwf	___ftpack@arg+2,w,c
 10813  0033F6  6E1E               	movwf	(??___ftpack+2)& (0+255),c
 10814  0033F8  501C               	movf	??___ftpack,w,c
 10815  0033FA  101D               	iorwf	??___ftpack+1,w,c
 10816  0033FC  101E               	iorwf	??___ftpack+2,w,c
 10817  0033FE  B4D8               	btfsc	status,2,c
 10818  003400  D008               	goto	l4751
 10819  003402  D7E5               	goto	l4743
 10820  003404  D006               	goto	l4751
 10821  003406                     l4749:
 10822  003406  061A               	decf	___ftpack@exp,f,c
 10823  003408  90D8               	bcf	status,0,c
 10824  00340A  3617               	rlcf	___ftpack@arg,f,c
 10825  00340C  3618               	rlcf	___ftpack@arg+1,f,c
 10826  00340E  3619               	rlcf	___ftpack@arg+2,f,c
 10827  003410  D000               	goto	l4751
 10828  003412                     l4751:
 10829  003412  BE18               	btfsc	___ftpack@arg+1,7,c
 10830  003414  D004               	goto	l1044
 10831  003416  0E02               	movlw	2
 10832  003418  601A               	cpfslt	___ftpack@exp,c
 10833  00341A  D7F5               	goto	l4749
 10834  00341C  D000               	goto	l1044
 10835  00341E                     l1044:
 10836  00341E  B01A               	btfsc	___ftpack@exp,0,c
 10837  003420  D002               	goto	l4757
 10838  003422  9E18               	bcf	___ftpack@arg+1,7,c
 10839  003424  D000               	goto	l4757
 10840  003426                     l4757:
 10841  003426  90D8               	bcf	status,0,c
 10842  003428  321A               	rrcf	___ftpack@exp,f,c
 10843  00342A  501A               	movf	___ftpack@exp,w,c
 10844  00342C  1219               	iorwf	___ftpack@arg+2,f,c
 10845  00342E  501B               	movf	___ftpack@sign,w,c
 10846  003430  B4D8               	btfsc	status,2,c
 10847  003432  D002               	goto	l4763
 10848  003434  8E19               	bsf	___ftpack@arg+2,7,c
 10849  003436  D000               	goto	l4763
 10850  003438                     l4763:
 10851  003438  C017  F017         	movff	___ftpack@arg,?___ftpack
 10852  00343C  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
 10853  003440  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
 10854  003444  0012               	return	
 10855  003446  0012               	return		;funcret
 10856  003448                     __end_of___ftpack:
 10857                           	opt stack 0
 10858                           tblptru	equ	0xFF8
 10859                           tblptrh	equ	0xFF7
 10860                           tblptrl	equ	0xFF6
 10861                           tablat	equ	0xFF5
 10862                           prodh	equ	0xFF4
 10863                           prodl	equ	0xFF3
 10864                           intcon	equ	0xFF2
 10865                           intcon2	equ	0xFF1
 10866                           postinc0	equ	0xFEE
 10867                           wreg	equ	0xFE8
 10868                           postinc1	equ	0xFE6
 10869                           postdec1	equ	0xFE5
 10870                           fsr1h	equ	0xFE2
 10871                           fsr1l	equ	0xFE1
 10872                           postinc2	equ	0xFDE
 10873                           postdec2	equ	0xFDD
 10874                           fsr2h	equ	0xFDA
 10875                           fsr2l	equ	0xFD9
 10876                           status	equ	0xFD8
 10877                           
 10878 ;; *************** function _INTERRUPT_InterruptManager *****************
 10879 ;; Defined at:
 10880 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;		None
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;		None
 10885 ;; Return value:  Size  Location     Type
 10886 ;;		None               void
 10887 ;; Registers used:
 10888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10889 ;; Tracked objects:
 10890 ;;		On entry : 0/0
 10891 ;;		On exit  : 0/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10894 ;;      Params:         0       0       0       0       0       0       0
 10895 ;;      Locals:         0       0       0       0       0       0       0
 10896 ;;      Temps:         14       0       0       0       0       0       0
 10897 ;;      Totals:        14       0       0       0       0       0       0
 10898 ;;Total ram usage:       14 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; Hardware stack levels required when called:    3
 10901 ;; This function calls:
 10902 ;;		_ADC_ISR
 10903 ;;		_TMR1_ISR
 10904 ;; This function is called by:
 10905 ;;		Interrupt level 2
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           	psect	intcode
 10910  000008                     __pintcode:
 10911                           	opt stack 0
 10912  000008                     _INTERRUPT_InterruptManager:
 10913                           	opt stack 22
 10914                           
 10915                           ;incstack = 0
 10916  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
 10917  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 10918  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 10919  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 10920  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 10921  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 10922  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 10923  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 10924  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
 10925  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
 10926  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 10927  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 10928  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 10929  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
 10930                           
 10931                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 10932  000040  AA9D               	btfss	3997,5,c	;volatile
 10933  000042  D004               	goto	i2l218
 10934  000044  BA9E               	btfsc	3998,5,c	;volatile
 10935  000046  D014               	goto	i2l226
 10936  000048  D001               	goto	i2l218
 10937                           
 10938                           ;interrupt_manager.c: 73: {
 10939                           ;interrupt_manager.c: 75: }
 10940  00004A  D012               	goto	i2l226
 10941  00004C                     i2l218:
 10942                           
 10943                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 10944  00004C  BC9D               	btfsc	3997,6,c	;volatile
 10945  00004E  AC9E               	btfss	3998,6,c	;volatile
 10946  000050  D003               	goto	i2l220
 10947                           
 10948                           ;interrupt_manager.c: 77: {
 10949                           ;interrupt_manager.c: 78: ADC_ISR();
 10950  000052  EC97  F009         	call	_ADC_ISR	;wreg free
 10951                           
 10952                           ;interrupt_manager.c: 79: }
 10953  000056  D00C               	goto	i2l226
 10954  000058                     i2l220:
 10955                           
 10956                           ;interrupt_manager.c: 80: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 10957  000058  A89D               	btfss	3997,4,c	;volatile
 10958  00005A  D004               	goto	i2l222
 10959  00005C  B89E               	btfsc	3998,4,c	;volatile
 10960  00005E  D008               	goto	i2l226
 10961  000060  D001               	goto	i2l222
 10962                           
 10963                           ;interrupt_manager.c: 81: {
 10964                           ;interrupt_manager.c: 83: }
 10965  000062  D006               	goto	i2l226
 10966  000064                     i2l222:
 10967                           
 10968                           ;interrupt_manager.c: 84: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 10969  000064  B09D               	btfsc	3997,0,c	;volatile
 10970  000066  A09E               	btfss	3998,0,c	;volatile
 10971  000068  D003               	goto	i2l226
 10972                           
 10973                           ;interrupt_manager.c: 85: {
 10974                           ;interrupt_manager.c: 86: TMR1_ISR();
 10975  00006A  EC39  F01D         	call	_TMR1_ISR	;wreg free
 10976                           
 10977                           ;interrupt_manager.c: 88: else
 10978                           ;interrupt_manager.c: 89: {
 10979                           
 10980                           ;interrupt_manager.c: 87: }
 10981  00006E  D000               	goto	i2l226
 10982  000070                     i2l226:
 10983  000070  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 10984  000074  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 10985  000078  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 10986  00007C  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 10987  000080  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 10988  000084  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 10989  000088  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 10990  00008C  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 10991  000090  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 10992  000094  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 10993  000098  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 10994  00009C  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 10995  0000A0  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 10996  0000A4  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 10997  0000A8  0011               	retfie		f
 10998  0000AA                     __end_of_INTERRUPT_InterruptManager:
 10999                           	opt stack 0
 11000                           pclatu	equ	0xFFB
 11001                           pclath	equ	0xFFA
 11002                           tblptru	equ	0xFF8
 11003                           tblptrh	equ	0xFF7
 11004                           tblptrl	equ	0xFF6
 11005                           tablat	equ	0xFF5
 11006                           prodh	equ	0xFF4
 11007                           prodl	equ	0xFF3
 11008                           intcon	equ	0xFF2
 11009                           intcon2	equ	0xFF1
 11010                           postinc0	equ	0xFEE
 11011                           fsr0h	equ	0xFEA
 11012                           fsr0l	equ	0xFE9
 11013                           wreg	equ	0xFE8
 11014                           postinc1	equ	0xFE6
 11015                           postdec1	equ	0xFE5
 11016                           fsr1h	equ	0xFE2
 11017                           fsr1l	equ	0xFE1
 11018                           postinc2	equ	0xFDE
 11019                           postdec2	equ	0xFDD
 11020                           fsr2h	equ	0xFDA
 11021                           fsr2l	equ	0xFD9
 11022                           status	equ	0xFD8
 11023                           
 11024 ;; *************** function _TMR1_ISR *****************
 11025 ;; Defined at:
 11026 ;;		line 117 in file "mcc_generated_files/tmr1.c"
 11027 ;; Parameters:    Size  Location     Type
 11028 ;;		None
 11029 ;; Auto vars:     Size  Location     Type
 11030 ;;		None
 11031 ;; Return value:  Size  Location     Type
 11032 ;;		None               void
 11033 ;; Registers used:
 11034 ;;		wreg, status,2, status,0, cstack
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11040 ;;      Params:         0       0       0       0       0       0       0
 11041 ;;      Locals:         0       0       0       0       0       0       0
 11042 ;;      Temps:          0       0       0       0       0       0       0
 11043 ;;      Totals:         0       0       0       0       0       0       0
 11044 ;;Total ram usage:        0 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; Hardware stack levels required when called:    2
 11047 ;; This function calls:
 11048 ;;		_Battery_Read
 11049 ;;		_Current_Read
 11050 ;;		_Temp_Read
 11051 ;; This function is called by:
 11052 ;;		_INTERRUPT_InterruptManager
 11053 ;; This function uses a non-reentrant model
 11054 ;;
 11055                           
 11056                           	psect	text47
 11057  003A72                     __ptext47:
 11058                           	opt stack 0
 11059  003A72                     _TMR1_ISR:
 11060                           	opt stack 22
 11061                           
 11062                           ;tmr1.c: 119: static volatile unsigned int CountCallBack = 0;
 11063                           ;tmr1.c: 123: PIR1bits.TMR1IF = 0;
 11064                           
 11065                           ;incstack = 0
 11066  003A72  909E               	bcf	3998,0,c	;volatile
 11067                           
 11068                           ;tmr1.c: 126: TMR1H = (timer1ReloadVal >> 8);
 11069  003A74  5049               	movf	_timer1ReloadVal+1,w,c	;volatile
 11070  003A76  6ECF               	movwf	4047,c	;volatile
 11071                           
 11072                           ;tmr1.c: 127: TMR1L = (uint8_t) timer1ReloadVal;
 11073  003A78  C048  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 11074                           
 11075                           ;tmr1.c: 130: if (++CountCallBack >= 4)
 11076  003A7C  4A41               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
 11077  003A7E  2A42               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
 11078  003A80  5042               	movf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 11079  003A82  E104               	bnz	i2u355_40
 11080  003A84  0E04               	movlw	4
 11081  003A86  5C41               	subwf	TMR1_ISR@CountCallBack,w,c	;volatile
 11082  003A88  A0D8               	btfss	status,0,c
 11083  003A8A  D007               	goto	i2l3885
 11084  003A8C                     i2u355_40:
 11085                           
 11086                           ;tmr1.c: 131: {
 11087                           ;tmr1.c: 133: do { LATA4 = ~LATA4; } while(0);
 11088  003A8C  7889               	btg	3977,4,c	;volatile
 11089  003A8E  D000               	goto	i2l3883
 11090  003A90                     i2l3883:
 11091                           
 11092                           ;tmr1.c: 136: CountCallBack = 0;
 11093  003A90  0E00               	movlw	0
 11094  003A92  6E42               	movwf	TMR1_ISR@CountCallBack+1,c	;volatile
 11095  003A94  0E00               	movlw	0
 11096  003A96  6E41               	movwf	TMR1_ISR@CountCallBack,c	;volatile
 11097  003A98  D000               	goto	i2l3885
 11098  003A9A                     i2l3885:
 11099                           
 11100                           ;tmr1.c: 137: }
 11101                           ;tmr1.c: 138: if(CountCallBack == 1)
 11102  003A9A  0441               	decf	TMR1_ISR@CountCallBack,w,c	;volatile
 11103  003A9C  1042               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 11104  003A9E  A4D8               	btfss	status,2,c
 11105  003AA0  D003               	goto	i2l3889
 11106                           
 11107                           ;tmr1.c: 139: {
 11108                           ;tmr1.c: 140: Current_Read();
 11109  003AA2  ECBC  F01E         	call	_Current_Read	;wreg free
 11110  003AA6  D000               	goto	i2l3889
 11111  003AA8                     i2l3889:
 11112                           
 11113                           ;tmr1.c: 141: }
 11114                           ;tmr1.c: 142: if(CountCallBack == 2)
 11115  003AA8  0E02               	movlw	2
 11116  003AAA  1841               	xorwf	TMR1_ISR@CountCallBack,w,c	;volatile
 11117  003AAC  1042               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 11118  003AAE  A4D8               	btfss	status,2,c
 11119  003AB0  D003               	goto	i2l3893
 11120                           
 11121                           ;tmr1.c: 143: {
 11122                           ;tmr1.c: 144: Battery_Read();
 11123  003AB2  ECC8  F01E         	call	_Battery_Read	;wreg free
 11124  003AB6  D000               	goto	i2l3893
 11125  003AB8                     i2l3893:
 11126                           
 11127                           ;tmr1.c: 145: }
 11128                           ;tmr1.c: 146: if(CountCallBack == 3)
 11129  003AB8  0E03               	movlw	3
 11130  003ABA  1841               	xorwf	TMR1_ISR@CountCallBack,w,c	;volatile
 11131  003ABC  1042               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 11132  003ABE  A4D8               	btfss	status,2,c
 11133  003AC0  0012               	return	
 11134                           
 11135                           ;tmr1.c: 147: {
 11136                           ;tmr1.c: 148: Temp_Read();
 11137  003AC2  ECB0  F01E         	call	_Temp_Read	;wreg free
 11138  003AC6  0012               	return	
 11139  003AC8  0012               	return		;funcret
 11140  003ACA                     __end_of_TMR1_ISR:
 11141                           	opt stack 0
 11142                           pclatu	equ	0xFFB
 11143                           pclath	equ	0xFFA
 11144                           tblptru	equ	0xFF8
 11145                           tblptrh	equ	0xFF7
 11146                           tblptrl	equ	0xFF6
 11147                           tablat	equ	0xFF5
 11148                           prodh	equ	0xFF4
 11149                           prodl	equ	0xFF3
 11150                           intcon	equ	0xFF2
 11151                           intcon2	equ	0xFF1
 11152                           postinc0	equ	0xFEE
 11153                           fsr0h	equ	0xFEA
 11154                           fsr0l	equ	0xFE9
 11155                           wreg	equ	0xFE8
 11156                           postinc1	equ	0xFE6
 11157                           postdec1	equ	0xFE5
 11158                           fsr1h	equ	0xFE2
 11159                           fsr1l	equ	0xFE1
 11160                           postinc2	equ	0xFDE
 11161                           postdec2	equ	0xFDD
 11162                           fsr2h	equ	0xFDA
 11163                           fsr2l	equ	0xFD9
 11164                           status	equ	0xFD8
 11165                           
 11166 ;; *************** function _Temp_Read *****************
 11167 ;; Defined at:
 11168 ;;		line 27 in file "Tempeture.c"
 11169 ;; Parameters:    Size  Location     Type
 11170 ;;		None
 11171 ;; Auto vars:     Size  Location     Type
 11172 ;;		None
 11173 ;; Return value:  Size  Location     Type
 11174 ;;		None               void
 11175 ;; Registers used:
 11176 ;;		wreg, status,2, status,0, cstack
 11177 ;; Tracked objects:
 11178 ;;		On entry : 0/0
 11179 ;;		On exit  : 0/0
 11180 ;;		Unchanged: 0/0
 11181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11182 ;;      Params:         0       0       0       0       0       0       0
 11183 ;;      Locals:         0       0       0       0       0       0       0
 11184 ;;      Temps:          0       0       0       0       0       0       0
 11185 ;;      Totals:         0       0       0       0       0       0       0
 11186 ;;Total ram usage:        0 bytes
 11187 ;; Hardware stack levels used:    1
 11188 ;; Hardware stack levels required when called:    1
 11189 ;; This function calls:
 11190 ;;		_ADC_StartConversion
 11191 ;; This function is called by:
 11192 ;;		_TMR1_ISR
 11193 ;; This function uses a non-reentrant model
 11194 ;;
 11195                           
 11196                           	psect	text48
 11197  003D60                     __ptext48:
 11198                           	opt stack 0
 11199  003D60                     _Temp_Read:
 11200                           	opt stack 22
 11201                           
 11202                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
 11203                           
 11204                           ;incstack = 0
 11205  003D60  0E00               	movlw	0
 11206  003D62  6E44               	movwf	_ADC_Buffer_Point+1,c
 11207  003D64  0E00               	movlw	0
 11208  003D66  6E43               	movwf	_ADC_Buffer_Point,c
 11209                           
 11210                           ;Tempeture.c: 31: Temp_Aquire = 1;
 11211  003D68  0E01               	movlw	1
 11212  003D6A  6E46               	movwf	_Temp_Aquire,c
 11213                           
 11214                           ;Tempeture.c: 32: ADCON1 = 0x80;
 11215  003D6C  0E80               	movlw	128
 11216  003D6E  6EC1               	movwf	4033,c	;volatile
 11217                           
 11218                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
 11219  003D70  0E0E               	movlw	14
 11220  003D72  EC97  F01E         	call	_ADC_StartConversion
 11221  003D76  0012               	return		;funcret
 11222  003D78                     __end_of_Temp_Read:
 11223                           	opt stack 0
 11224                           pclatu	equ	0xFFB
 11225                           pclath	equ	0xFFA
 11226                           tblptru	equ	0xFF8
 11227                           tblptrh	equ	0xFF7
 11228                           tblptrl	equ	0xFF6
 11229                           tablat	equ	0xFF5
 11230                           prodh	equ	0xFF4
 11231                           prodl	equ	0xFF3
 11232                           intcon	equ	0xFF2
 11233                           intcon2	equ	0xFF1
 11234                           postinc0	equ	0xFEE
 11235                           fsr0h	equ	0xFEA
 11236                           fsr0l	equ	0xFE9
 11237                           wreg	equ	0xFE8
 11238                           postinc1	equ	0xFE6
 11239                           postdec1	equ	0xFE5
 11240                           fsr1h	equ	0xFE2
 11241                           fsr1l	equ	0xFE1
 11242                           postinc2	equ	0xFDE
 11243                           postdec2	equ	0xFDD
 11244                           fsr2h	equ	0xFDA
 11245                           fsr2l	equ	0xFD9
 11246                           status	equ	0xFD8
 11247                           
 11248 ;; *************** function _Current_Read *****************
 11249 ;; Defined at:
 11250 ;;		line 40 in file "Current.c"
 11251 ;; Parameters:    Size  Location     Type
 11252 ;;		None
 11253 ;; Auto vars:     Size  Location     Type
 11254 ;;		None
 11255 ;; Return value:  Size  Location     Type
 11256 ;;		None               void
 11257 ;; Registers used:
 11258 ;;		wreg, status,2, status,0, cstack
 11259 ;; Tracked objects:
 11260 ;;		On entry : 0/0
 11261 ;;		On exit  : 0/0
 11262 ;;		Unchanged: 0/0
 11263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11264 ;;      Params:         0       0       0       0       0       0       0
 11265 ;;      Locals:         0       0       0       0       0       0       0
 11266 ;;      Temps:          0       0       0       0       0       0       0
 11267 ;;      Totals:         0       0       0       0       0       0       0
 11268 ;;Total ram usage:        0 bytes
 11269 ;; Hardware stack levels used:    1
 11270 ;; Hardware stack levels required when called:    1
 11271 ;; This function calls:
 11272 ;;		_ADC_GetConversion
 11273 ;; This function is called by:
 11274 ;;		_TMR1_ISR
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           	psect	text49
 11279  003D78                     __ptext49:
 11280                           	opt stack 0
 11281  003D78                     _Current_Read:
 11282                           	opt stack 22
 11283                           
 11284                           ;Current.c: 43: ADC_Buffer_Point = 0;
 11285                           
 11286                           ;incstack = 0
 11287  003D78  0E00               	movlw	0
 11288  003D7A  6E44               	movwf	_ADC_Buffer_Point+1,c
 11289  003D7C  0E00               	movlw	0
 11290  003D7E  6E43               	movwf	_ADC_Buffer_Point,c
 11291                           
 11292                           ;Current.c: 44: Current_Aquire = 1;
 11293  003D80  0E01               	movlw	1
 11294  003D82  6E45               	movwf	_Current_Aquire,c
 11295                           
 11296                           ;Current.c: 45: ADCON1 = 0x80;
 11297  003D84  0E80               	movlw	128
 11298  003D86  6EC1               	movwf	4033,c	;volatile
 11299                           
 11300                           ;Current.c: 46: ADC_GetConversion(Asen);
 11301  003D88  0E0B               	movlw	11
 11302  003D8A  EC50  F01E         	call	_ADC_GetConversion
 11303  003D8E  0012               	return		;funcret
 11304  003D90                     __end_of_Current_Read:
 11305                           	opt stack 0
 11306                           pclatu	equ	0xFFB
 11307                           pclath	equ	0xFFA
 11308                           tblptru	equ	0xFF8
 11309                           tblptrh	equ	0xFF7
 11310                           tblptrl	equ	0xFF6
 11311                           tablat	equ	0xFF5
 11312                           prodh	equ	0xFF4
 11313                           prodl	equ	0xFF3
 11314                           intcon	equ	0xFF2
 11315                           intcon2	equ	0xFF1
 11316                           postinc0	equ	0xFEE
 11317                           fsr0h	equ	0xFEA
 11318                           fsr0l	equ	0xFE9
 11319                           wreg	equ	0xFE8
 11320                           postinc1	equ	0xFE6
 11321                           postdec1	equ	0xFE5
 11322                           fsr1h	equ	0xFE2
 11323                           fsr1l	equ	0xFE1
 11324                           postinc2	equ	0xFDE
 11325                           postdec2	equ	0xFDD
 11326                           fsr2h	equ	0xFDA
 11327                           fsr2l	equ	0xFD9
 11328                           status	equ	0xFD8
 11329                           
 11330 ;; *************** function _ADC_GetConversion *****************
 11331 ;; Defined at:
 11332 ;;		line 64 in file "mcc_generated_files/adc.c"
 11333 ;; Parameters:    Size  Location     Type
 11334 ;;  channel         1    wreg     enum E8837
 11335 ;; Auto vars:     Size  Location     Type
 11336 ;;  channel         1    1[COMRAM] enum E8837
 11337 ;; Return value:  Size  Location     Type
 11338 ;;                  2  122[None  ] unsigned int 
 11339 ;; Registers used:
 11340 ;;		wreg, status,2, status,0
 11341 ;; Tracked objects:
 11342 ;;		On entry : 0/0
 11343 ;;		On exit  : 0/0
 11344 ;;		Unchanged: 0/0
 11345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11346 ;;      Params:         0       0       0       0       0       0       0
 11347 ;;      Locals:         1       0       0       0       0       0       0
 11348 ;;      Temps:          1       0       0       0       0       0       0
 11349 ;;      Totals:         2       0       0       0       0       0       0
 11350 ;;Total ram usage:        2 bytes
 11351 ;; Hardware stack levels used:    1
 11352 ;; This function calls:
 11353 ;;		Nothing
 11354 ;; This function is called by:
 11355 ;;		_Current_Read
 11356 ;; This function uses a non-reentrant model
 11357 ;;
 11358                           
 11359                           	psect	text50
 11360  003CA0                     __ptext50:
 11361                           	opt stack 0
 11362  003CA0                     _ADC_GetConversion:
 11363                           	opt stack 22
 11364                           
 11365                           ;incstack = 0
 11366                           ;ADC_GetConversion@channel stored from wreg
 11367  003CA0  6E02               	movwf	ADC_GetConversion@channel,c
 11368                           
 11369                           ;adc.c: 67: ADCON0bits.CHS = channel;
 11370  003CA2  C002  F001         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 11371  003CA6  4601               	rlncf	??_ADC_GetConversion,f,c
 11372  003CA8  4601               	rlncf	??_ADC_GetConversion,f,c
 11373  003CAA  50C2               	movf	4034,w,c	;volatile
 11374  003CAC  1801               	xorwf	??_ADC_GetConversion,w,c
 11375  003CAE  0B83               	andlw	-125
 11376  003CB0  1801               	xorwf	??_ADC_GetConversion,w,c
 11377  003CB2  6EC2               	movwf	4034,c	;volatile
 11378                           
 11379                           ;adc.c: 70: ADCON0bits.ADON = 1;
 11380  003CB4  80C2               	bsf	4034,0,c	;volatile
 11381                           
 11382                           ;adc.c: 74: ADCON0bits.GO_nDONE = 1;
 11383  003CB6  82C2               	bsf	4034,1,c	;volatile
 11384                           
 11385                           ;adc.c: 77: while (ADCON0bits.GO_nDONE)
 11386  003CB8  D000               	goto	i2l123
 11387  003CBA                     i2l123:
 11388  003CBA  B2C2               	btfsc	4034,1,c	;volatile
 11389  003CBC  D7FE               	goto	i2l123
 11390                           
 11391                           ;adc.c: 79: }
 11392                           ;adc.c: 82: return ((ADRESH << 8) + ADRESL);
 11393                           ;	Return value of _ADC_GetConversion is never used
 11394  003CBE  50C4               	movf	4036,w,c	;volatile
 11395  003CC0  50C3               	movf	4035,w,c	;volatile
 11396  003CC2  0012               	return	
 11397  003CC4  0012               	return		;funcret
 11398  003CC6                     __end_of_ADC_GetConversion:
 11399                           	opt stack 0
 11400                           pclatu	equ	0xFFB
 11401                           pclath	equ	0xFFA
 11402                           tblptru	equ	0xFF8
 11403                           tblptrh	equ	0xFF7
 11404                           tblptrl	equ	0xFF6
 11405                           tablat	equ	0xFF5
 11406                           prodh	equ	0xFF4
 11407                           prodl	equ	0xFF3
 11408                           intcon	equ	0xFF2
 11409                           intcon2	equ	0xFF1
 11410                           postinc0	equ	0xFEE
 11411                           fsr0h	equ	0xFEA
 11412                           fsr0l	equ	0xFE9
 11413                           wreg	equ	0xFE8
 11414                           postinc1	equ	0xFE6
 11415                           postdec1	equ	0xFE5
 11416                           fsr1h	equ	0xFE2
 11417                           fsr1l	equ	0xFE1
 11418                           postinc2	equ	0xFDE
 11419                           postdec2	equ	0xFDD
 11420                           fsr2h	equ	0xFDA
 11421                           fsr2l	equ	0xFD9
 11422                           status	equ	0xFD8
 11423                           
 11424 ;; *************** function _Battery_Read *****************
 11425 ;; Defined at:
 11426 ;;		line 24 in file "Battery.c"
 11427 ;; Parameters:    Size  Location     Type
 11428 ;;		None
 11429 ;; Auto vars:     Size  Location     Type
 11430 ;;		None
 11431 ;; Return value:  Size  Location     Type
 11432 ;;		None               void
 11433 ;; Registers used:
 11434 ;;		wreg, status,2, status,0, cstack
 11435 ;; Tracked objects:
 11436 ;;		On entry : 0/0
 11437 ;;		On exit  : 0/0
 11438 ;;		Unchanged: 0/0
 11439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11440 ;;      Params:         0       0       0       0       0       0       0
 11441 ;;      Locals:         0       0       0       0       0       0       0
 11442 ;;      Temps:          0       0       0       0       0       0       0
 11443 ;;      Totals:         0       0       0       0       0       0       0
 11444 ;;Total ram usage:        0 bytes
 11445 ;; Hardware stack levels used:    1
 11446 ;; Hardware stack levels required when called:    1
 11447 ;; This function calls:
 11448 ;;		_ADC_StartConversion
 11449 ;; This function is called by:
 11450 ;;		_TMR1_ISR
 11451 ;; This function uses a non-reentrant model
 11452 ;;
 11453                           
 11454                           	psect	text51
 11455  003D90                     __ptext51:
 11456                           	opt stack 0
 11457  003D90                     _Battery_Read:
 11458                           	opt stack 22
 11459                           
 11460                           ;Battery.c: 27: ADC_Buffer_Point = 0;
 11461                           
 11462                           ;incstack = 0
 11463  003D90  0E00               	movlw	0
 11464  003D92  6E44               	movwf	_ADC_Buffer_Point+1,c
 11465  003D94  0E00               	movlw	0
 11466  003D96  6E43               	movwf	_ADC_Buffer_Point,c
 11467                           
 11468                           ;Battery.c: 28: Volt_Aquire = 1;
 11469  003D98  0E01               	movlw	1
 11470  003D9A  6E47               	movwf	_Volt_Aquire,c
 11471                           
 11472                           ;Battery.c: 29: ADCON1 = 0x80;
 11473  003D9C  0E80               	movlw	128
 11474  003D9E  6EC1               	movwf	4033,c	;volatile
 11475                           
 11476                           ;Battery.c: 30: ADC_StartConversion(AN_CELL1);
 11477  003DA0  0E07               	movlw	7
 11478  003DA2  EC97  F01E         	call	_ADC_StartConversion
 11479  003DA6  0012               	return		;funcret
 11480  003DA8                     __end_of_Battery_Read:
 11481                           	opt stack 0
 11482                           pclatu	equ	0xFFB
 11483                           pclath	equ	0xFFA
 11484                           tblptru	equ	0xFF8
 11485                           tblptrh	equ	0xFF7
 11486                           tblptrl	equ	0xFF6
 11487                           tablat	equ	0xFF5
 11488                           prodh	equ	0xFF4
 11489                           prodl	equ	0xFF3
 11490                           intcon	equ	0xFF2
 11491                           intcon2	equ	0xFF1
 11492                           postinc0	equ	0xFEE
 11493                           fsr0h	equ	0xFEA
 11494                           fsr0l	equ	0xFE9
 11495                           wreg	equ	0xFE8
 11496                           postinc1	equ	0xFE6
 11497                           postdec1	equ	0xFE5
 11498                           fsr1h	equ	0xFE2
 11499                           fsr1l	equ	0xFE1
 11500                           postinc2	equ	0xFDE
 11501                           postdec2	equ	0xFDD
 11502                           fsr2h	equ	0xFDA
 11503                           fsr2l	equ	0xFD9
 11504                           status	equ	0xFD8
 11505                           
 11506 ;; *************** function _ADC_ISR *****************
 11507 ;; Defined at:
 11508 ;;		line 85 in file "mcc_generated_files/adc.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;		None
 11511 ;; Auto vars:     Size  Location     Type
 11512 ;;  ADC_Result      2    6[COMRAM] int 
 11513 ;; Return value:  Size  Location     Type
 11514 ;;		None               void
 11515 ;; Registers used:
 11516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11517 ;; Tracked objects:
 11518 ;;		On entry : 0/0
 11519 ;;		On exit  : 0/0
 11520 ;;		Unchanged: 0/0
 11521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11522 ;;      Params:         0       0       0       0       0       0       0
 11523 ;;      Locals:         2       0       0       0       0       0       0
 11524 ;;      Temps:          2       0       0       0       0       0       0
 11525 ;;      Totals:         4       0       0       0       0       0       0
 11526 ;;Total ram usage:        4 bytes
 11527 ;; Hardware stack levels used:    1
 11528 ;; Hardware stack levels required when called:    1
 11529 ;; This function calls:
 11530 ;;		_ADC_GetConversionResult
 11531 ;;		_ADC_StartConversion
 11532 ;;		_Set_4051
 11533 ;; This function is called by:
 11534 ;;		_INTERRUPT_InterruptManager
 11535 ;; This function uses a non-reentrant model
 11536 ;;
 11537                           
 11538                           	psect	text52
 11539  00132E                     __ptext52:
 11540                           	opt stack 0
 11541  00132E                     _ADC_ISR:
 11542                           	opt stack 23
 11543                           
 11544                           ;adc.c: 88: PIR1bits.ADIF = 0;
 11545                           
 11546                           ;incstack = 0
 11547  00132E  9C9E               	bcf	3998,6,c	;volatile
 11548                           
 11549                           ;adc.c: 89: int ADC_Result = 0;
 11550  001330  0E00               	movlw	0
 11551  001332  6E08               	movwf	ADC_ISR@ADC_Result+1,c
 11552  001334  0E00               	movlw	0
 11553  001336  6E07               	movwf	ADC_ISR@ADC_Result,c
 11554                           
 11555                           ;adc.c: 90: if (Temp_Aquire){
 11556  001338  5046               	movf	_Temp_Aquire,w,c
 11557  00133A  B4D8               	btfsc	status,2,c
 11558  00133C  D0E2               	goto	i2l3957
 11559                           
 11560                           ;adc.c: 92: ADC_Result = ADC_GetConversionResult();
 11561  00133E  ECDF  F01E         	call	_ADC_GetConversionResult	;wreg free
 11562  001342  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 11563  001346  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 11564                           
 11565                           ;adc.c: 93: switch ( ADC_Buffer_Point )
 11566  00134A  D0B6               	goto	i2l3953
 11567  00134C                     i2l3903:
 11568                           
 11569                           ;adc.c: 96: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11570  00134C  90D8               	bcf	status,0,c
 11571  00134E  3443               	rlcf	_ADC_Buffer_Point,w,c
 11572  001350  6ED9               	movwf	fsr2l,c
 11573  001352  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11574  001354  6EDA               	movwf	fsr2h,c
 11575  001356  0EEA               	movlw	low _Temp_Adc
 11576  001358  26D9               	addwf	fsr2l,f,c
 11577  00135A  0E00               	movlw	high _Temp_Adc
 11578  00135C  22DA               	addwfc	fsr2h,f,c
 11579  00135E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11580  001362  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11581                           
 11582                           ;adc.c: 97: Set_4051(1);
 11583  001366  0E00               	movlw	0
 11584  001368  6E02               	movwf	Set_4051@Channel+1,c
 11585  00136A  0E01               	movlw	1
 11586  00136C  6E01               	movwf	Set_4051@Channel,c
 11587  00136E  ECEF  F01D         	call	_Set_4051	;wreg free
 11588                           
 11589                           ;adc.c: 98: ADC_StartConversion(Temp1);
 11590  001372  0E0E               	movlw	14
 11591  001374  EC97  F01E         	call	_ADC_StartConversion
 11592                           
 11593                           ;adc.c: 99: break;
 11594  001378  D0C1               	goto	i2l3955
 11595  00137A                     i2l3909:
 11596                           
 11597                           ;adc.c: 101: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11598  00137A  90D8               	bcf	status,0,c
 11599  00137C  3443               	rlcf	_ADC_Buffer_Point,w,c
 11600  00137E  6ED9               	movwf	fsr2l,c
 11601  001380  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11602  001382  6EDA               	movwf	fsr2h,c
 11603  001384  0EEA               	movlw	low _Temp_Adc
 11604  001386  26D9               	addwf	fsr2l,f,c
 11605  001388  0E00               	movlw	high _Temp_Adc
 11606  00138A  22DA               	addwfc	fsr2h,f,c
 11607  00138C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11608  001390  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11609                           
 11610                           ;adc.c: 102: Set_4051(2);
 11611  001394  0E00               	movlw	0
 11612  001396  6E02               	movwf	Set_4051@Channel+1,c
 11613  001398  0E02               	movlw	2
 11614  00139A  6E01               	movwf	Set_4051@Channel,c
 11615  00139C  ECEF  F01D         	call	_Set_4051	;wreg free
 11616                           
 11617                           ;adc.c: 103: ADC_StartConversion(Temp1);
 11618  0013A0  0E0E               	movlw	14
 11619  0013A2  EC97  F01E         	call	_ADC_StartConversion
 11620                           
 11621                           ;adc.c: 104: break;
 11622  0013A6  D0AA               	goto	i2l3955
 11623  0013A8                     i2l3915:
 11624                           
 11625                           ;adc.c: 106: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11626  0013A8  90D8               	bcf	status,0,c
 11627  0013AA  3443               	rlcf	_ADC_Buffer_Point,w,c
 11628  0013AC  6ED9               	movwf	fsr2l,c
 11629  0013AE  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11630  0013B0  6EDA               	movwf	fsr2h,c
 11631  0013B2  0EEA               	movlw	low _Temp_Adc
 11632  0013B4  26D9               	addwf	fsr2l,f,c
 11633  0013B6  0E00               	movlw	high _Temp_Adc
 11634  0013B8  22DA               	addwfc	fsr2h,f,c
 11635  0013BA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11636  0013BE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11637                           
 11638                           ;adc.c: 107: Set_4051(3);
 11639  0013C2  0E00               	movlw	0
 11640  0013C4  6E02               	movwf	Set_4051@Channel+1,c
 11641  0013C6  0E03               	movlw	3
 11642  0013C8  6E01               	movwf	Set_4051@Channel,c
 11643  0013CA  ECEF  F01D         	call	_Set_4051	;wreg free
 11644                           
 11645                           ;adc.c: 108: ADC_StartConversion(Temp1);
 11646  0013CE  0E0E               	movlw	14
 11647  0013D0  EC97  F01E         	call	_ADC_StartConversion
 11648                           
 11649                           ;adc.c: 109: break;
 11650  0013D4  D093               	goto	i2l3955
 11651  0013D6                     i2l3921:
 11652                           
 11653                           ;adc.c: 111: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11654  0013D6  90D8               	bcf	status,0,c
 11655  0013D8  3443               	rlcf	_ADC_Buffer_Point,w,c
 11656  0013DA  6ED9               	movwf	fsr2l,c
 11657  0013DC  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11658  0013DE  6EDA               	movwf	fsr2h,c
 11659  0013E0  0EEA               	movlw	low _Temp_Adc
 11660  0013E2  26D9               	addwf	fsr2l,f,c
 11661  0013E4  0E00               	movlw	high _Temp_Adc
 11662  0013E6  22DA               	addwfc	fsr2h,f,c
 11663  0013E8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11664  0013EC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11665                           
 11666                           ;adc.c: 112: Set_4051(4);
 11667  0013F0  0E00               	movlw	0
 11668  0013F2  6E02               	movwf	Set_4051@Channel+1,c
 11669  0013F4  0E04               	movlw	4
 11670  0013F6  6E01               	movwf	Set_4051@Channel,c
 11671  0013F8  ECEF  F01D         	call	_Set_4051	;wreg free
 11672                           
 11673                           ;adc.c: 113: ADC_StartConversion(Temp1);
 11674  0013FC  0E0E               	movlw	14
 11675  0013FE  EC97  F01E         	call	_ADC_StartConversion
 11676                           
 11677                           ;adc.c: 114: break;
 11678  001402  D07C               	goto	i2l3955
 11679  001404                     i2l3927:
 11680                           
 11681                           ;adc.c: 116: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11682  001404  90D8               	bcf	status,0,c
 11683  001406  3443               	rlcf	_ADC_Buffer_Point,w,c
 11684  001408  6ED9               	movwf	fsr2l,c
 11685  00140A  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11686  00140C  6EDA               	movwf	fsr2h,c
 11687  00140E  0EEA               	movlw	low _Temp_Adc
 11688  001410  26D9               	addwf	fsr2l,f,c
 11689  001412  0E00               	movlw	high _Temp_Adc
 11690  001414  22DA               	addwfc	fsr2h,f,c
 11691  001416  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11692  00141A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11693                           
 11694                           ;adc.c: 117: Set_4051(5);
 11695  00141E  0E00               	movlw	0
 11696  001420  6E02               	movwf	Set_4051@Channel+1,c
 11697  001422  0E05               	movlw	5
 11698  001424  6E01               	movwf	Set_4051@Channel,c
 11699  001426  ECEF  F01D         	call	_Set_4051	;wreg free
 11700                           
 11701                           ;adc.c: 118: ADC_StartConversion(Temp1);
 11702  00142A  0E0E               	movlw	14
 11703  00142C  EC97  F01E         	call	_ADC_StartConversion
 11704                           
 11705                           ;adc.c: 119: break;
 11706  001430  D065               	goto	i2l3955
 11707  001432                     i2l3933:
 11708                           
 11709                           ;adc.c: 121: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11710  001432  90D8               	bcf	status,0,c
 11711  001434  3443               	rlcf	_ADC_Buffer_Point,w,c
 11712  001436  6ED9               	movwf	fsr2l,c
 11713  001438  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11714  00143A  6EDA               	movwf	fsr2h,c
 11715  00143C  0EEA               	movlw	low _Temp_Adc
 11716  00143E  26D9               	addwf	fsr2l,f,c
 11717  001440  0E00               	movlw	high _Temp_Adc
 11718  001442  22DA               	addwfc	fsr2h,f,c
 11719  001444  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11720  001448  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11721                           
 11722                           ;adc.c: 122: Set_4051(6);
 11723  00144C  0E00               	movlw	0
 11724  00144E  6E02               	movwf	Set_4051@Channel+1,c
 11725  001450  0E06               	movlw	6
 11726  001452  6E01               	movwf	Set_4051@Channel,c
 11727  001454  ECEF  F01D         	call	_Set_4051	;wreg free
 11728                           
 11729                           ;adc.c: 123: ADC_StartConversion(Temp1);
 11730  001458  0E0E               	movlw	14
 11731  00145A  EC97  F01E         	call	_ADC_StartConversion
 11732                           
 11733                           ;adc.c: 124: break;
 11734  00145E  D04E               	goto	i2l3955
 11735  001460                     i2l3939:
 11736                           
 11737                           ;adc.c: 126: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11738  001460  90D8               	bcf	status,0,c
 11739  001462  3443               	rlcf	_ADC_Buffer_Point,w,c
 11740  001464  6ED9               	movwf	fsr2l,c
 11741  001466  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11742  001468  6EDA               	movwf	fsr2h,c
 11743  00146A  0EEA               	movlw	low _Temp_Adc
 11744  00146C  26D9               	addwf	fsr2l,f,c
 11745  00146E  0E00               	movlw	high _Temp_Adc
 11746  001470  22DA               	addwfc	fsr2h,f,c
 11747  001472  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11748  001476  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11749                           
 11750                           ;adc.c: 127: Set_4051(7);
 11751  00147A  0E00               	movlw	0
 11752  00147C  6E02               	movwf	Set_4051@Channel+1,c
 11753  00147E  0E07               	movlw	7
 11754  001480  6E01               	movwf	Set_4051@Channel,c
 11755  001482  ECEF  F01D         	call	_Set_4051	;wreg free
 11756                           
 11757                           ;adc.c: 128: ADC_StartConversion(Temp1);
 11758  001486  0E0E               	movlw	14
 11759  001488  EC97  F01E         	call	_ADC_StartConversion
 11760                           
 11761                           ;adc.c: 129: break;
 11762  00148C  D037               	goto	i2l3955
 11763  00148E                     i2l3945:
 11764                           
 11765                           ;adc.c: 131: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11766  00148E  90D8               	bcf	status,0,c
 11767  001490  3443               	rlcf	_ADC_Buffer_Point,w,c
 11768  001492  6ED9               	movwf	fsr2l,c
 11769  001494  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11770  001496  6EDA               	movwf	fsr2h,c
 11771  001498  0EEA               	movlw	low _Temp_Adc
 11772  00149A  26D9               	addwf	fsr2l,f,c
 11773  00149C  0E00               	movlw	high _Temp_Adc
 11774  00149E  22DA               	addwfc	fsr2h,f,c
 11775  0014A0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11776  0014A4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11777                           
 11778                           ;adc.c: 132: Temp_Aquire = 0;
 11779  0014A8  0E00               	movlw	0
 11780  0014AA  6E46               	movwf	_Temp_Aquire,c
 11781                           
 11782                           ;adc.c: 133: Temp_Done = 1;
 11783  0014AC  0E00               	movlw	0
 11784  0014AE  0100               	movlb	0	; () banked
 11785  0014B0  6FE3               	movwf	(_Temp_Done+1)& (0+255),b
 11786  0014B2  0E01               	movlw	1
 11787  0014B4  6FE2               	movwf	_Temp_Done& (0+255),b
 11788                           
 11789                           ; BSR set to: 0
 11790                           ;adc.c: 135: }
 11791                           
 11792                           ;adc.c: 134: break;
 11793  0014B6  D022               	goto	i2l3955
 11794  0014B8                     i2l3953:
 11795  0014B8  C043  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 11796  0014BC  C044  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 11797                           
 11798                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11799                           ; Switch size 1, requested type "space"
 11800                           ; Number of cases is 1, Range of values is 0 to 0
 11801                           ; switch strategies available:
 11802                           ; Name         Instructions Cycles
 11803                           ; simple_byte            4     3 (average)
 11804                           ;	Chosen strategy is simple_byte
 11805  0014C0  5006               	movf	??_ADC_ISR+1,w,c
 11806  0014C2  0A00               	xorlw	0	; case 0
 11807  0014C4  A4D8               	btfss	status,2,c
 11808  0014C6  D01A               	goto	i2l3955
 11809                           
 11810                           ; Switch size 1, requested type "space"
 11811                           ; Number of cases is 8, Range of values is 0 to 7
 11812                           ; switch strategies available:
 11813                           ; Name         Instructions Cycles
 11814                           ; simple_byte           25    13 (average)
 11815                           ;	Chosen strategy is simple_byte
 11816  0014C8  5005               	movf	??_ADC_ISR,w,c
 11817  0014CA  0A00               	xorlw	0	; case 0
 11818  0014CC  B4D8               	btfsc	status,2,c
 11819  0014CE  D73E               	goto	i2l3903
 11820  0014D0  0A01               	xorlw	1	; case 1
 11821  0014D2  B4D8               	btfsc	status,2,c
 11822  0014D4  D752               	goto	i2l3909
 11823  0014D6  0A03               	xorlw	3	; case 2
 11824  0014D8  B4D8               	btfsc	status,2,c
 11825  0014DA  D766               	goto	i2l3915
 11826  0014DC  0A01               	xorlw	1	; case 3
 11827  0014DE  B4D8               	btfsc	status,2,c
 11828  0014E0  D77A               	goto	i2l3921
 11829  0014E2  0A07               	xorlw	7	; case 4
 11830  0014E4  B4D8               	btfsc	status,2,c
 11831  0014E6  D78E               	goto	i2l3927
 11832  0014E8  0A01               	xorlw	1	; case 5
 11833  0014EA  B4D8               	btfsc	status,2,c
 11834  0014EC  D7A2               	goto	i2l3933
 11835  0014EE  0A03               	xorlw	3	; case 6
 11836  0014F0  B4D8               	btfsc	status,2,c
 11837  0014F2  D7B6               	goto	i2l3939
 11838  0014F4  0A01               	xorlw	1	; case 7
 11839  0014F6  B4D8               	btfsc	status,2,c
 11840  0014F8  D7CA               	goto	i2l3945
 11841  0014FA  D000               	goto	i2l3955
 11842  0014FC                     i2l3955:
 11843                           
 11844                           ;adc.c: 136: ADC_Buffer_Point++;
 11845  0014FC  4A43               	infsnz	_ADC_Buffer_Point,f,c
 11846  0014FE  2A44               	incf	_ADC_Buffer_Point+1,f,c
 11847  001500  D000               	goto	i2l3957
 11848  001502                     i2l3957:
 11849                           
 11850                           ;adc.c: 137: }
 11851                           ;adc.c: 138: if (Current_Aquire){
 11852  001502  5045               	movf	_Current_Aquire,w,c
 11853  001504  B4D8               	btfsc	status,2,c
 11854  001506  D0E0               	goto	i2l4009
 11855                           
 11856                           ;adc.c: 140: ADC_Result = ADC_GetConversionResult();
 11857  001508  ECDF  F01E         	call	_ADC_GetConversionResult	;wreg free
 11858  00150C  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 11859  001510  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 11860                           
 11861                           ;adc.c: 141: switch ( ADC_Buffer_Point )
 11862  001514  D0AE               	goto	i2l4005
 11863  001516                     i2l3961:
 11864                           
 11865                           ;adc.c: 144: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11866  001516  90D8               	bcf	status,0,c
 11867  001518  3443               	rlcf	_ADC_Buffer_Point,w,c
 11868  00151A  6ED9               	movwf	fsr2l,c
 11869  00151C  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11870  00151E  6EDA               	movwf	fsr2h,c
 11871  001520  0ECC               	movlw	low _Current_Adc
 11872  001522  26D9               	addwf	fsr2l,f,c
 11873  001524  0E00               	movlw	high _Current_Adc
 11874  001526  22DA               	addwfc	fsr2h,f,c
 11875  001528  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11876  00152C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11877                           
 11878                           ;adc.c: 145: ADC_StartConversion(Asen);
 11879  001530  0E0B               	movlw	11
 11880  001532  EC97  F01E         	call	_ADC_StartConversion
 11881                           
 11882                           ;adc.c: 146: break;
 11883  001536  D0C5               	goto	i2l4007
 11884  001538                     i2l3965:
 11885                           
 11886                           ;adc.c: 148: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11887  001538  90D8               	bcf	status,0,c
 11888  00153A  3443               	rlcf	_ADC_Buffer_Point,w,c
 11889  00153C  6ED9               	movwf	fsr2l,c
 11890  00153E  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11891  001540  6EDA               	movwf	fsr2h,c
 11892  001542  0ECC               	movlw	low _Current_Adc
 11893  001544  26D9               	addwf	fsr2l,f,c
 11894  001546  0E00               	movlw	high _Current_Adc
 11895  001548  22DA               	addwfc	fsr2h,f,c
 11896  00154A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11897  00154E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11898                           
 11899                           ;adc.c: 149: ADC_StartConversion(Asen);
 11900  001552  0E0B               	movlw	11
 11901  001554  EC97  F01E         	call	_ADC_StartConversion
 11902                           
 11903                           ;adc.c: 150: break;
 11904  001558  D0B4               	goto	i2l4007
 11905  00155A                     i2l3969:
 11906                           
 11907                           ;adc.c: 152: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11908  00155A  90D8               	bcf	status,0,c
 11909  00155C  3443               	rlcf	_ADC_Buffer_Point,w,c
 11910  00155E  6ED9               	movwf	fsr2l,c
 11911  001560  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11912  001562  6EDA               	movwf	fsr2h,c
 11913  001564  0ECC               	movlw	low _Current_Adc
 11914  001566  26D9               	addwf	fsr2l,f,c
 11915  001568  0E00               	movlw	high _Current_Adc
 11916  00156A  22DA               	addwfc	fsr2h,f,c
 11917  00156C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11918  001570  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11919                           
 11920                           ;adc.c: 153: ADC_StartConversion(Asen);
 11921  001574  0E0B               	movlw	11
 11922  001576  EC97  F01E         	call	_ADC_StartConversion
 11923                           
 11924                           ;adc.c: 154: break;
 11925  00157A  D0A3               	goto	i2l4007
 11926  00157C                     i2l3973:
 11927                           
 11928                           ;adc.c: 156: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11929  00157C  90D8               	bcf	status,0,c
 11930  00157E  3443               	rlcf	_ADC_Buffer_Point,w,c
 11931  001580  6ED9               	movwf	fsr2l,c
 11932  001582  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11933  001584  6EDA               	movwf	fsr2h,c
 11934  001586  0ECC               	movlw	low _Current_Adc
 11935  001588  26D9               	addwf	fsr2l,f,c
 11936  00158A  0E00               	movlw	high _Current_Adc
 11937  00158C  22DA               	addwfc	fsr2h,f,c
 11938  00158E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11939  001592  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11940                           
 11941                           ;adc.c: 157: ADC_StartConversion(Asen);
 11942  001596  0E0B               	movlw	11
 11943  001598  EC97  F01E         	call	_ADC_StartConversion
 11944                           
 11945                           ;adc.c: 158: break;
 11946  00159C  D092               	goto	i2l4007
 11947  00159E                     i2l3977:
 11948                           
 11949                           ;adc.c: 160: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11950  00159E  90D8               	bcf	status,0,c
 11951  0015A0  3443               	rlcf	_ADC_Buffer_Point,w,c
 11952  0015A2  6ED9               	movwf	fsr2l,c
 11953  0015A4  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11954  0015A6  6EDA               	movwf	fsr2h,c
 11955  0015A8  0ECC               	movlw	low _Current_Adc
 11956  0015AA  26D9               	addwf	fsr2l,f,c
 11957  0015AC  0E00               	movlw	high _Current_Adc
 11958  0015AE  22DA               	addwfc	fsr2h,f,c
 11959  0015B0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11960  0015B4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11961                           
 11962                           ;adc.c: 161: ADC_StartConversion(Asen);
 11963  0015B8  0E0B               	movlw	11
 11964  0015BA  EC97  F01E         	call	_ADC_StartConversion
 11965                           
 11966                           ;adc.c: 162: break;
 11967  0015BE  D081               	goto	i2l4007
 11968  0015C0                     i2l3981:
 11969                           
 11970                           ;adc.c: 164: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11971  0015C0  90D8               	bcf	status,0,c
 11972  0015C2  3443               	rlcf	_ADC_Buffer_Point,w,c
 11973  0015C4  6ED9               	movwf	fsr2l,c
 11974  0015C6  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11975  0015C8  6EDA               	movwf	fsr2h,c
 11976  0015CA  0ECC               	movlw	low _Current_Adc
 11977  0015CC  26D9               	addwf	fsr2l,f,c
 11978  0015CE  0E00               	movlw	high _Current_Adc
 11979  0015D0  22DA               	addwfc	fsr2h,f,c
 11980  0015D2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11981  0015D6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11982                           
 11983                           ;adc.c: 165: ADC_StartConversion(Asen);
 11984  0015DA  0E0B               	movlw	11
 11985  0015DC  EC97  F01E         	call	_ADC_StartConversion
 11986                           
 11987                           ;adc.c: 166: break;
 11988  0015E0  D070               	goto	i2l4007
 11989  0015E2                     i2l3985:
 11990                           
 11991                           ;adc.c: 168: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11992  0015E2  90D8               	bcf	status,0,c
 11993  0015E4  3443               	rlcf	_ADC_Buffer_Point,w,c
 11994  0015E6  6ED9               	movwf	fsr2l,c
 11995  0015E8  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11996  0015EA  6EDA               	movwf	fsr2h,c
 11997  0015EC  0ECC               	movlw	low _Current_Adc
 11998  0015EE  26D9               	addwf	fsr2l,f,c
 11999  0015F0  0E00               	movlw	high _Current_Adc
 12000  0015F2  22DA               	addwfc	fsr2h,f,c
 12001  0015F4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12002  0015F8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12003                           
 12004                           ;adc.c: 169: ADC_StartConversion(Asen);
 12005  0015FC  0E0B               	movlw	11
 12006  0015FE  EC97  F01E         	call	_ADC_StartConversion
 12007                           
 12008                           ;adc.c: 170: break;
 12009  001602  D05F               	goto	i2l4007
 12010  001604                     i2l3989:
 12011                           
 12012                           ;adc.c: 172: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 12013  001604  90D8               	bcf	status,0,c
 12014  001606  3443               	rlcf	_ADC_Buffer_Point,w,c
 12015  001608  6ED9               	movwf	fsr2l,c
 12016  00160A  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12017  00160C  6EDA               	movwf	fsr2h,c
 12018  00160E  0ECC               	movlw	low _Current_Adc
 12019  001610  26D9               	addwf	fsr2l,f,c
 12020  001612  0E00               	movlw	high _Current_Adc
 12021  001614  22DA               	addwfc	fsr2h,f,c
 12022  001616  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12023  00161A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12024                           
 12025                           ;adc.c: 173: ADC_StartConversion(Asen);
 12026  00161E  0E0B               	movlw	11
 12027  001620  EC97  F01E         	call	_ADC_StartConversion
 12028                           
 12029                           ;adc.c: 174: break;
 12030  001624  D04E               	goto	i2l4007
 12031  001626                     i2l3993:
 12032                           
 12033                           ;adc.c: 176: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 12034  001626  90D8               	bcf	status,0,c
 12035  001628  3443               	rlcf	_ADC_Buffer_Point,w,c
 12036  00162A  6ED9               	movwf	fsr2l,c
 12037  00162C  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12038  00162E  6EDA               	movwf	fsr2h,c
 12039  001630  0ECC               	movlw	low _Current_Adc
 12040  001632  26D9               	addwf	fsr2l,f,c
 12041  001634  0E00               	movlw	high _Current_Adc
 12042  001636  22DA               	addwfc	fsr2h,f,c
 12043  001638  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12044  00163C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12045                           
 12046                           ;adc.c: 177: ADC_StartConversion(Asen);
 12047  001640  0E0B               	movlw	11
 12048  001642  EC97  F01E         	call	_ADC_StartConversion
 12049                           
 12050                           ;adc.c: 178: break;
 12051  001646  D03D               	goto	i2l4007
 12052  001648                     i2l3997:
 12053                           
 12054                           ;adc.c: 180: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 12055  001648  90D8               	bcf	status,0,c
 12056  00164A  3443               	rlcf	_ADC_Buffer_Point,w,c
 12057  00164C  6ED9               	movwf	fsr2l,c
 12058  00164E  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12059  001650  6EDA               	movwf	fsr2h,c
 12060  001652  0ECC               	movlw	low _Current_Adc
 12061  001654  26D9               	addwf	fsr2l,f,c
 12062  001656  0E00               	movlw	high _Current_Adc
 12063  001658  22DA               	addwfc	fsr2h,f,c
 12064  00165A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12065  00165E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12066                           
 12067                           ;adc.c: 181: Current_Aquire = 0;
 12068  001662  0E00               	movlw	0
 12069  001664  6E45               	movwf	_Current_Aquire,c
 12070                           
 12071                           ;adc.c: 182: Current_Done = 1;
 12072  001666  0E00               	movlw	0
 12073  001668  0100               	movlb	0	; () banked
 12074  00166A  6FE1               	movwf	(_Current_Done+1)& (0+255),b
 12075  00166C  0E01               	movlw	1
 12076  00166E  6FE0               	movwf	_Current_Done& (0+255),b
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;adc.c: 184: }
 12080                           
 12081                           ;adc.c: 183: break;
 12082  001670  D028               	goto	i2l4007
 12083  001672                     i2l4005:
 12084  001672  C043  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 12085  001676  C044  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 12086                           
 12087                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12088                           ; Switch size 1, requested type "space"
 12089                           ; Number of cases is 1, Range of values is 0 to 0
 12090                           ; switch strategies available:
 12091                           ; Name         Instructions Cycles
 12092                           ; simple_byte            4     3 (average)
 12093                           ;	Chosen strategy is simple_byte
 12094  00167A  5006               	movf	??_ADC_ISR+1,w,c
 12095  00167C  0A00               	xorlw	0	; case 0
 12096  00167E  A4D8               	btfss	status,2,c
 12097  001680  D020               	goto	i2l4007
 12098                           
 12099                           ; Switch size 1, requested type "space"
 12100                           ; Number of cases is 10, Range of values is 0 to 9
 12101                           ; switch strategies available:
 12102                           ; Name         Instructions Cycles
 12103                           ; simple_byte           31    16 (average)
 12104                           ;	Chosen strategy is simple_byte
 12105  001682  5005               	movf	??_ADC_ISR,w,c
 12106  001684  0A00               	xorlw	0	; case 0
 12107  001686  B4D8               	btfsc	status,2,c
 12108  001688  D746               	goto	i2l3961
 12109  00168A  0A01               	xorlw	1	; case 1
 12110  00168C  B4D8               	btfsc	status,2,c
 12111  00168E  D754               	goto	i2l3965
 12112  001690  0A03               	xorlw	3	; case 2
 12113  001692  B4D8               	btfsc	status,2,c
 12114  001694  D762               	goto	i2l3969
 12115  001696  0A01               	xorlw	1	; case 3
 12116  001698  B4D8               	btfsc	status,2,c
 12117  00169A  D770               	goto	i2l3973
 12118  00169C  0A07               	xorlw	7	; case 4
 12119  00169E  B4D8               	btfsc	status,2,c
 12120  0016A0  D77E               	goto	i2l3977
 12121  0016A2  0A01               	xorlw	1	; case 5
 12122  0016A4  B4D8               	btfsc	status,2,c
 12123  0016A6  D78C               	goto	i2l3981
 12124  0016A8  0A03               	xorlw	3	; case 6
 12125  0016AA  B4D8               	btfsc	status,2,c
 12126  0016AC  D79A               	goto	i2l3985
 12127  0016AE  0A01               	xorlw	1	; case 7
 12128  0016B0  B4D8               	btfsc	status,2,c
 12129  0016B2  D7A8               	goto	i2l3989
 12130  0016B4  0A0F               	xorlw	15	; case 8
 12131  0016B6  B4D8               	btfsc	status,2,c
 12132  0016B8  D7B6               	goto	i2l3993
 12133  0016BA  0A01               	xorlw	1	; case 9
 12134  0016BC  B4D8               	btfsc	status,2,c
 12135  0016BE  D7C4               	goto	i2l3997
 12136  0016C0  D000               	goto	i2l4007
 12137  0016C2                     i2l4007:
 12138                           
 12139                           ;adc.c: 185: ADC_Buffer_Point++;
 12140  0016C2  4A43               	infsnz	_ADC_Buffer_Point,f,c
 12141  0016C4  2A44               	incf	_ADC_Buffer_Point+1,f,c
 12142  0016C6  D000               	goto	i2l4009
 12143  0016C8                     i2l4009:
 12144                           
 12145                           ;adc.c: 186: }
 12146                           ;adc.c: 187: if (Volt_Aquire){
 12147  0016C8  5047               	movf	_Volt_Aquire,w,c
 12148  0016CA  B4D8               	btfsc	status,2,c
 12149  0016CC  0012               	return	
 12150                           
 12151                           ;adc.c: 189: ADC_Result = ADC_GetConversionResult();
 12152  0016CE  ECDF  F01E         	call	_ADC_GetConversionResult	;wreg free
 12153  0016D2  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12154  0016D6  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12155                           
 12156                           ;adc.c: 190: switch ( ADC_Buffer_Point )
 12157  0016DA  D07B               	goto	i2l4045
 12158  0016DC                     i2l4013:
 12159                           
 12160                           ;adc.c: 193: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12161  0016DC  90D8               	bcf	status,0,c
 12162  0016DE  3443               	rlcf	_ADC_Buffer_Point,w,c
 12163  0016E0  6ED9               	movwf	fsr2l,c
 12164  0016E2  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12165  0016E4  6EDA               	movwf	fsr2h,c
 12166  0016E6  0EB8               	movlw	low _Battery_Adc
 12167  0016E8  26D9               	addwf	fsr2l,f,c
 12168  0016EA  0E00               	movlw	high _Battery_Adc
 12169  0016EC  22DA               	addwfc	fsr2h,f,c
 12170  0016EE  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12171  0016F2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12172                           
 12173                           ;adc.c: 194: ADC_StartConversion(AN_CELL2);
 12174  0016F6  0E06               	movlw	6
 12175  0016F8  EC97  F01E         	call	_ADC_StartConversion
 12176                           
 12177                           ;adc.c: 195: break;
 12178  0016FC  D089               	goto	i2l4047
 12179  0016FE                     i2l4017:
 12180                           
 12181                           ;adc.c: 197: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12182  0016FE  90D8               	bcf	status,0,c
 12183  001700  3443               	rlcf	_ADC_Buffer_Point,w,c
 12184  001702  6ED9               	movwf	fsr2l,c
 12185  001704  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12186  001706  6EDA               	movwf	fsr2h,c
 12187  001708  0EB8               	movlw	low _Battery_Adc
 12188  00170A  26D9               	addwf	fsr2l,f,c
 12189  00170C  0E00               	movlw	high _Battery_Adc
 12190  00170E  22DA               	addwfc	fsr2h,f,c
 12191  001710  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12192  001714  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12193                           
 12194                           ;adc.c: 198: ADC_StartConversion(AN_CELL3);
 12195  001718  0E05               	movlw	5
 12196  00171A  EC97  F01E         	call	_ADC_StartConversion
 12197                           
 12198                           ;adc.c: 199: break;
 12199  00171E  D078               	goto	i2l4047
 12200  001720                     i2l4021:
 12201                           
 12202                           ;adc.c: 201: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12203  001720  90D8               	bcf	status,0,c
 12204  001722  3443               	rlcf	_ADC_Buffer_Point,w,c
 12205  001724  6ED9               	movwf	fsr2l,c
 12206  001726  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12207  001728  6EDA               	movwf	fsr2h,c
 12208  00172A  0EB8               	movlw	low _Battery_Adc
 12209  00172C  26D9               	addwf	fsr2l,f,c
 12210  00172E  0E00               	movlw	high _Battery_Adc
 12211  001730  22DA               	addwfc	fsr2h,f,c
 12212  001732  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12213  001736  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12214                           
 12215                           ;adc.c: 202: ADC_StartConversion(AN_CELL4);
 12216  00173A  0E04               	movlw	4
 12217  00173C  EC97  F01E         	call	_ADC_StartConversion
 12218                           
 12219                           ;adc.c: 203: break;
 12220  001740  D067               	goto	i2l4047
 12221  001742                     i2l4025:
 12222                           
 12223                           ;adc.c: 205: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12224  001742  90D8               	bcf	status,0,c
 12225  001744  3443               	rlcf	_ADC_Buffer_Point,w,c
 12226  001746  6ED9               	movwf	fsr2l,c
 12227  001748  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12228  00174A  6EDA               	movwf	fsr2h,c
 12229  00174C  0EB8               	movlw	low _Battery_Adc
 12230  00174E  26D9               	addwf	fsr2l,f,c
 12231  001750  0E00               	movlw	high _Battery_Adc
 12232  001752  22DA               	addwfc	fsr2h,f,c
 12233  001754  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12234  001758  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12235                           
 12236                           ;adc.c: 206: ADC_StartConversion(AN_CELL5);
 12237  00175C  0E03               	movlw	3
 12238  00175E  EC97  F01E         	call	_ADC_StartConversion
 12239                           
 12240                           ;adc.c: 207: break;
 12241  001762  D056               	goto	i2l4047
 12242  001764                     i2l4029:
 12243                           
 12244                           ;adc.c: 209: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12245  001764  90D8               	bcf	status,0,c
 12246  001766  3443               	rlcf	_ADC_Buffer_Point,w,c
 12247  001768  6ED9               	movwf	fsr2l,c
 12248  00176A  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12249  00176C  6EDA               	movwf	fsr2h,c
 12250  00176E  0EB8               	movlw	low _Battery_Adc
 12251  001770  26D9               	addwf	fsr2l,f,c
 12252  001772  0E00               	movlw	high _Battery_Adc
 12253  001774  22DA               	addwfc	fsr2h,f,c
 12254  001776  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12255  00177A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12256                           
 12257                           ;adc.c: 210: ADC_StartConversion(AN_CELL6);
 12258  00177E  0E01               	movlw	1
 12259  001780  EC97  F01E         	call	_ADC_StartConversion
 12260                           
 12261                           ;adc.c: 211: break;
 12262  001784  D045               	goto	i2l4047
 12263  001786                     i2l4033:
 12264                           
 12265                           ;adc.c: 213: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12266  001786  90D8               	bcf	status,0,c
 12267  001788  3443               	rlcf	_ADC_Buffer_Point,w,c
 12268  00178A  6ED9               	movwf	fsr2l,c
 12269  00178C  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12270  00178E  6EDA               	movwf	fsr2h,c
 12271  001790  0EB8               	movlw	low _Battery_Adc
 12272  001792  26D9               	addwf	fsr2l,f,c
 12273  001794  0E00               	movlw	high _Battery_Adc
 12274  001796  22DA               	addwfc	fsr2h,f,c
 12275  001798  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12276  00179C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12277                           
 12278                           ;adc.c: 214: ADC_StartConversion(AN_CELL7);
 12279  0017A0  0E00               	movlw	0
 12280  0017A2  EC97  F01E         	call	_ADC_StartConversion
 12281                           
 12282                           ;adc.c: 215: break;
 12283  0017A6  D034               	goto	i2l4047
 12284  0017A8                     i2l4037:
 12285                           
 12286                           ;adc.c: 217: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12287  0017A8  90D8               	bcf	status,0,c
 12288  0017AA  3443               	rlcf	_ADC_Buffer_Point,w,c
 12289  0017AC  6ED9               	movwf	fsr2l,c
 12290  0017AE  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12291  0017B0  6EDA               	movwf	fsr2h,c
 12292  0017B2  0EB8               	movlw	low _Battery_Adc
 12293  0017B4  26D9               	addwf	fsr2l,f,c
 12294  0017B6  0E00               	movlw	high _Battery_Adc
 12295  0017B8  22DA               	addwfc	fsr2h,f,c
 12296  0017BA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12297  0017BE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12298                           
 12299                           ;adc.c: 218: Volt_Aquire = 0;
 12300  0017C2  0E00               	movlw	0
 12301  0017C4  6E47               	movwf	_Volt_Aquire,c
 12302                           
 12303                           ;adc.c: 219: Volt_Done = 1;
 12304  0017C6  0E00               	movlw	0
 12305  0017C8  0100               	movlb	0	; () banked
 12306  0017CA  6FE5               	movwf	(_Volt_Done+1)& (0+255),b
 12307  0017CC  0E01               	movlw	1
 12308  0017CE  6FE4               	movwf	_Volt_Done& (0+255),b
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;adc.c: 221: }
 12312                           
 12313                           ;adc.c: 220: break;
 12314  0017D0  D01F               	goto	i2l4047
 12315  0017D2                     i2l4045:
 12316  0017D2  C043  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 12317  0017D6  C044  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 12318                           
 12319                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12320                           ; Switch size 1, requested type "space"
 12321                           ; Number of cases is 1, Range of values is 0 to 0
 12322                           ; switch strategies available:
 12323                           ; Name         Instructions Cycles
 12324                           ; simple_byte            4     3 (average)
 12325                           ;	Chosen strategy is simple_byte
 12326  0017DA  5006               	movf	??_ADC_ISR+1,w,c
 12327  0017DC  0A00               	xorlw	0	; case 0
 12328  0017DE  A4D8               	btfss	status,2,c
 12329  0017E0  D017               	goto	i2l4047
 12330                           
 12331                           ; Switch size 1, requested type "space"
 12332                           ; Number of cases is 7, Range of values is 0 to 6
 12333                           ; switch strategies available:
 12334                           ; Name         Instructions Cycles
 12335                           ; simple_byte           22    12 (average)
 12336                           ;	Chosen strategy is simple_byte
 12337  0017E2  5005               	movf	??_ADC_ISR,w,c
 12338  0017E4  0A00               	xorlw	0	; case 0
 12339  0017E6  B4D8               	btfsc	status,2,c
 12340  0017E8  D779               	goto	i2l4013
 12341  0017EA  0A01               	xorlw	1	; case 1
 12342  0017EC  B4D8               	btfsc	status,2,c
 12343  0017EE  D787               	goto	i2l4017
 12344  0017F0  0A03               	xorlw	3	; case 2
 12345  0017F2  B4D8               	btfsc	status,2,c
 12346  0017F4  D795               	goto	i2l4021
 12347  0017F6  0A01               	xorlw	1	; case 3
 12348  0017F8  B4D8               	btfsc	status,2,c
 12349  0017FA  D7A3               	goto	i2l4025
 12350  0017FC  0A07               	xorlw	7	; case 4
 12351  0017FE  B4D8               	btfsc	status,2,c
 12352  001800  D7B1               	goto	i2l4029
 12353  001802  0A01               	xorlw	1	; case 5
 12354  001804  B4D8               	btfsc	status,2,c
 12355  001806  D7BF               	goto	i2l4033
 12356  001808  0A03               	xorlw	3	; case 6
 12357  00180A  B4D8               	btfsc	status,2,c
 12358  00180C  D7CD               	goto	i2l4037
 12359  00180E  D000               	goto	i2l4047
 12360  001810                     i2l4047:
 12361                           
 12362                           ;adc.c: 222: ADC_Buffer_Point++;
 12363  001810  4A43               	infsnz	_ADC_Buffer_Point,f,c
 12364  001812  2A44               	incf	_ADC_Buffer_Point+1,f,c
 12365  001814  0012               	return	
 12366  001816  0012               	return		;funcret
 12367  001818                     __end_of_ADC_ISR:
 12368                           	opt stack 0
 12369                           pclatu	equ	0xFFB
 12370                           pclath	equ	0xFFA
 12371                           tblptru	equ	0xFF8
 12372                           tblptrh	equ	0xFF7
 12373                           tblptrl	equ	0xFF6
 12374                           tablat	equ	0xFF5
 12375                           prodh	equ	0xFF4
 12376                           prodl	equ	0xFF3
 12377                           intcon	equ	0xFF2
 12378                           intcon2	equ	0xFF1
 12379                           postinc0	equ	0xFEE
 12380                           fsr0h	equ	0xFEA
 12381                           fsr0l	equ	0xFE9
 12382                           wreg	equ	0xFE8
 12383                           postinc1	equ	0xFE6
 12384                           postdec1	equ	0xFE5
 12385                           fsr1h	equ	0xFE2
 12386                           fsr1l	equ	0xFE1
 12387                           postinc2	equ	0xFDE
 12388                           postdec2	equ	0xFDD
 12389                           fsr2h	equ	0xFDA
 12390                           fsr2l	equ	0xFD9
 12391                           status	equ	0xFD8
 12392                           
 12393 ;; *************** function _Set_4051 *****************
 12394 ;; Defined at:
 12395 ;;		line 8 in file "Functions.c"
 12396 ;; Parameters:    Size  Location     Type
 12397 ;;  Channel         2    0[COMRAM] int 
 12398 ;; Auto vars:     Size  Location     Type
 12399 ;;		None
 12400 ;; Return value:  Size  Location     Type
 12401 ;;		None               void
 12402 ;; Registers used:
 12403 ;;		wreg, status,2, status,0
 12404 ;; Tracked objects:
 12405 ;;		On entry : 0/0
 12406 ;;		On exit  : 0/0
 12407 ;;		Unchanged: 0/0
 12408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12409 ;;      Params:         2       0       0       0       0       0       0
 12410 ;;      Locals:         0       0       0       0       0       0       0
 12411 ;;      Temps:          2       0       0       0       0       0       0
 12412 ;;      Totals:         4       0       0       0       0       0       0
 12413 ;;Total ram usage:        4 bytes
 12414 ;; Hardware stack levels used:    1
 12415 ;; This function calls:
 12416 ;;		Nothing
 12417 ;; This function is called by:
 12418 ;;		_ADC_ISR
 12419 ;; This function uses a non-reentrant model
 12420 ;;
 12421                           
 12422                           	psect	text53
 12423  003BDE                     __ptext53:
 12424                           	opt stack 0
 12425  003BDE                     _Set_4051:
 12426                           	opt stack 23
 12427                           
 12428                           ;Functions.c: 10: if (Channel & 0x01)
 12429                           
 12430                           ;incstack = 0
 12431  003BDE  A001               	btfss	Set_4051@Channel,0,c
 12432  003BE0  D002               	goto	i2l3407
 12433                           
 12434                           ;Functions.c: 11: {
 12435                           ;Functions.c: 12: do { LATA7 = ~LATA7; } while(0);
 12436  003BE2  7E89               	btg	3977,7,c	;volatile
 12437  003BE4  D000               	goto	i2l3407
 12438  003BE6                     i2l3407:
 12439                           
 12440                           ;Functions.c: 13: }
 12441                           ;Functions.c: 14: if ((Channel>>1) & 0x01)
 12442  003BE6  3402               	rlcf	Set_4051@Channel+1,w,c
 12443  003BE8  3002               	rrcf	Set_4051@Channel+1,w,c
 12444  003BEA  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 12445  003BEC  3001               	rrcf	Set_4051@Channel,w,c
 12446  003BEE  6E03               	movwf	??_Set_4051& (0+255),c
 12447  003BF0  A003               	btfss	??_Set_4051,0,c
 12448  003BF2  D002               	goto	i2l3409
 12449                           
 12450                           ;Functions.c: 15: {
 12451                           ;Functions.c: 16: do { LATA6 = ~LATA6; } while(0);
 12452  003BF4  7C89               	btg	3977,6,c	;volatile
 12453  003BF6  D000               	goto	i2l3409
 12454  003BF8                     i2l3409:
 12455                           
 12456                           ;Functions.c: 17: }
 12457                           ;Functions.c: 18: if ((Channel>>2) & 0x01)
 12458  003BF8  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 12459  003BFC  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 12460  003C00  3404               	rlcf	??_Set_4051+1,w,c
 12461  003C02  3204               	rrcf	??_Set_4051+1,f,c
 12462  003C04  3203               	rrcf	??_Set_4051,f,c
 12463  003C06  3404               	rlcf	??_Set_4051+1,w,c
 12464  003C08  3204               	rrcf	??_Set_4051+1,f,c
 12465  003C0A  3203               	rrcf	??_Set_4051,f,c
 12466  003C0C  A003               	btfss	??_Set_4051,0,c
 12467  003C0E  0012               	return	
 12468                           
 12469                           ;Functions.c: 19: {
 12470                           ;Functions.c: 20: do { LATC0 = ~LATC0; } while(0);
 12471  003C10  708B               	btg	3979,0,c	;volatile
 12472  003C12  0012               	return	
 12473  003C14  0012               	return		;funcret
 12474  003C16                     __end_of_Set_4051:
 12475                           	opt stack 0
 12476                           pclatu	equ	0xFFB
 12477                           pclath	equ	0xFFA
 12478                           tblptru	equ	0xFF8
 12479                           tblptrh	equ	0xFF7
 12480                           tblptrl	equ	0xFF6
 12481                           tablat	equ	0xFF5
 12482                           prodh	equ	0xFF4
 12483                           prodl	equ	0xFF3
 12484                           intcon	equ	0xFF2
 12485                           intcon2	equ	0xFF1
 12486                           postinc0	equ	0xFEE
 12487                           fsr0h	equ	0xFEA
 12488                           fsr0l	equ	0xFE9
 12489                           wreg	equ	0xFE8
 12490                           postinc1	equ	0xFE6
 12491                           postdec1	equ	0xFE5
 12492                           fsr1h	equ	0xFE2
 12493                           fsr1l	equ	0xFE1
 12494                           postinc2	equ	0xFDE
 12495                           postdec2	equ	0xFDD
 12496                           fsr2h	equ	0xFDA
 12497                           fsr2l	equ	0xFD9
 12498                           status	equ	0xFD8
 12499                           
 12500 ;; *************** function _ADC_StartConversion *****************
 12501 ;; Defined at:
 12502 ;;		line 39 in file "mcc_generated_files/adc.c"
 12503 ;; Parameters:    Size  Location     Type
 12504 ;;  channel         1    wreg     enum E8837
 12505 ;; Auto vars:     Size  Location     Type
 12506 ;;  channel         1    1[COMRAM] enum E8837
 12507 ;; Return value:  Size  Location     Type
 12508 ;;		None               void
 12509 ;; Registers used:
 12510 ;;		wreg, status,2, status,0
 12511 ;; Tracked objects:
 12512 ;;		On entry : 0/0
 12513 ;;		On exit  : 0/0
 12514 ;;		Unchanged: 0/0
 12515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12516 ;;      Params:         0       0       0       0       0       0       0
 12517 ;;      Locals:         1       0       0       0       0       0       0
 12518 ;;      Temps:          1       0       0       0       0       0       0
 12519 ;;      Totals:         2       0       0       0       0       0       0
 12520 ;;Total ram usage:        2 bytes
 12521 ;; Hardware stack levels used:    1
 12522 ;; This function calls:
 12523 ;;		Nothing
 12524 ;; This function is called by:
 12525 ;;		_ADC_ISR
 12526 ;;		_Battery_Read
 12527 ;;		_Temp_Read
 12528 ;; This function uses a non-reentrant model
 12529 ;;
 12530                           
 12531                           	psect	text54
 12532  003D2E                     __ptext54:
 12533                           	opt stack 0
 12534  003D2E                     _ADC_StartConversion:
 12535                           	opt stack 22
 12536                           
 12537                           ;incstack = 0
 12538                           ;ADC_StartConversion@channel stored from wreg
 12539  003D2E  6E02               	movwf	ADC_StartConversion@channel,c
 12540                           
 12541                           ;adc.c: 42: ADCON0bits.CHS = channel;
 12542  003D30  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 12543  003D34  4601               	rlncf	??_ADC_StartConversion,f,c
 12544  003D36  4601               	rlncf	??_ADC_StartConversion,f,c
 12545  003D38  50C2               	movf	4034,w,c	;volatile
 12546  003D3A  1801               	xorwf	??_ADC_StartConversion,w,c
 12547  003D3C  0B83               	andlw	-125
 12548  003D3E  1801               	xorwf	??_ADC_StartConversion,w,c
 12549  003D40  6EC2               	movwf	4034,c	;volatile
 12550                           
 12551                           ;adc.c: 45: ADCON0bits.ADON = 1;
 12552  003D42  80C2               	bsf	4034,0,c	;volatile
 12553                           
 12554                           ;adc.c: 49: ADCON0bits.GO_nDONE = 1;
 12555  003D44  82C2               	bsf	4034,1,c	;volatile
 12556  003D46  0012               	return		;funcret
 12557  003D48                     __end_of_ADC_StartConversion:
 12558                           	opt stack 0
 12559                           pclatu	equ	0xFFB
 12560                           pclath	equ	0xFFA
 12561                           tblptru	equ	0xFF8
 12562                           tblptrh	equ	0xFF7
 12563                           tblptrl	equ	0xFF6
 12564                           tablat	equ	0xFF5
 12565                           prodh	equ	0xFF4
 12566                           prodl	equ	0xFF3
 12567                           intcon	equ	0xFF2
 12568                           intcon2	equ	0xFF1
 12569                           postinc0	equ	0xFEE
 12570                           fsr0h	equ	0xFEA
 12571                           fsr0l	equ	0xFE9
 12572                           wreg	equ	0xFE8
 12573                           postinc1	equ	0xFE6
 12574                           postdec1	equ	0xFE5
 12575                           fsr1h	equ	0xFE2
 12576                           fsr1l	equ	0xFE1
 12577                           postinc2	equ	0xFDE
 12578                           postdec2	equ	0xFDD
 12579                           fsr2h	equ	0xFDA
 12580                           fsr2l	equ	0xFD9
 12581                           status	equ	0xFD8
 12582                           
 12583 ;; *************** function _ADC_GetConversionResult *****************
 12584 ;; Defined at:
 12585 ;;		line 58 in file "mcc_generated_files/adc.c"
 12586 ;; Parameters:    Size  Location     Type
 12587 ;;		None
 12588 ;; Auto vars:     Size  Location     Type
 12589 ;;		None
 12590 ;; Return value:  Size  Location     Type
 12591 ;;                  2    0[COMRAM] unsigned int 
 12592 ;; Registers used:
 12593 ;;		wreg, status,2, status,0
 12594 ;; Tracked objects:
 12595 ;;		On entry : 0/0
 12596 ;;		On exit  : 0/0
 12597 ;;		Unchanged: 0/0
 12598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12599 ;;      Params:         2       0       0       0       0       0       0
 12600 ;;      Locals:         0       0       0       0       0       0       0
 12601 ;;      Temps:          2       0       0       0       0       0       0
 12602 ;;      Totals:         4       0       0       0       0       0       0
 12603 ;;Total ram usage:        4 bytes
 12604 ;; Hardware stack levels used:    1
 12605 ;; This function calls:
 12606 ;;		Nothing
 12607 ;; This function is called by:
 12608 ;;		_ADC_ISR
 12609 ;; This function uses a non-reentrant model
 12610 ;;
 12611                           
 12612                           	psect	text55
 12613  003DBE                     __ptext55:
 12614                           	opt stack 0
 12615  003DBE                     _ADC_GetConversionResult:
 12616                           	opt stack 23
 12617                           
 12618                           ;adc.c: 61: return ((ADRESH << 8) + ADRESL);
 12619                           
 12620                           ;incstack = 0
 12621  003DBE  50C4               	movf	4036,w,c	;volatile
 12622  003DC0  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 12623  003DC2  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 12624  003DC4  50C3               	movf	4035,w,c	;volatile
 12625  003DC6  2403               	addwf	??_ADC_GetConversionResult,w,c
 12626  003DC8  6E01               	movwf	?_ADC_GetConversionResult,c
 12627  003DCA  0E00               	movlw	0
 12628  003DCC  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 12629  003DCE  6E02               	movwf	?_ADC_GetConversionResult+1,c
 12630  003DD0  0012               	return	
 12631  003DD2  0012               	return		;funcret
 12632  003DD4                     __end_of_ADC_GetConversionResult:
 12633                           	opt stack 0
 12634                           pclatu	equ	0xFFB
 12635                           pclath	equ	0xFFA
 12636                           tblptru	equ	0xFF8
 12637                           tblptrh	equ	0xFF7
 12638                           tblptrl	equ	0xFF6
 12639                           tablat	equ	0xFF5
 12640                           prodh	equ	0xFF4
 12641                           prodl	equ	0xFF3
 12642                           intcon	equ	0xFF2
 12643                           intcon2	equ	0xFF1
 12644                           postinc0	equ	0xFEE
 12645                           fsr0h	equ	0xFEA
 12646                           fsr0l	equ	0xFE9
 12647                           wreg	equ	0xFE8
 12648                           postinc1	equ	0xFE6
 12649                           postdec1	equ	0xFE5
 12650                           fsr1h	equ	0xFE2
 12651                           fsr1l	equ	0xFE1
 12652                           postinc2	equ	0xFDE
 12653                           postdec2	equ	0xFDD
 12654                           fsr2h	equ	0xFDA
 12655                           fsr2l	equ	0xFD9
 12656                           status	equ	0xFD8
 12657                           pclatu	equ	0xFFB
 12658                           pclath	equ	0xFFA
 12659                           tblptru	equ	0xFF8
 12660                           tblptrh	equ	0xFF7
 12661                           tblptrl	equ	0xFF6
 12662                           tablat	equ	0xFF5
 12663                           prodh	equ	0xFF4
 12664                           prodl	equ	0xFF3
 12665                           intcon	equ	0xFF2
 12666                           intcon2	equ	0xFF1
 12667                           postinc0	equ	0xFEE
 12668                           fsr0h	equ	0xFEA
 12669                           fsr0l	equ	0xFE9
 12670                           wreg	equ	0xFE8
 12671                           postinc1	equ	0xFE6
 12672                           postdec1	equ	0xFE5
 12673                           fsr1h	equ	0xFE2
 12674                           fsr1l	equ	0xFE1
 12675                           postinc2	equ	0xFDE
 12676                           postdec2	equ	0xFDD
 12677                           fsr2h	equ	0xFDA
 12678                           fsr2l	equ	0xFD9
 12679                           status	equ	0xFD8
 12680                           
 12681                           	psect	rparam
 12682  0000                     pclatu	equ	0xFFB
 12683                           pclath	equ	0xFFA
 12684                           tblptru	equ	0xFF8
 12685                           tblptrh	equ	0xFF7
 12686                           tblptrl	equ	0xFF6
 12687                           tablat	equ	0xFF5
 12688                           prodh	equ	0xFF4
 12689                           prodl	equ	0xFF3
 12690                           intcon	equ	0xFF2
 12691                           intcon2	equ	0xFF1
 12692                           postinc0	equ	0xFEE
 12693                           fsr0h	equ	0xFEA
 12694                           fsr0l	equ	0xFE9
 12695                           wreg	equ	0xFE8
 12696                           postinc1	equ	0xFE6
 12697                           postdec1	equ	0xFE5
 12698                           fsr1h	equ	0xFE2
 12699                           fsr1l	equ	0xFE1
 12700                           postinc2	equ	0xFDE
 12701                           postdec2	equ	0xFDD
 12702                           fsr2h	equ	0xFDA
 12703                           fsr2l	equ	0xFD9
 12704                           status	equ	0xFD8


Data Sizes:
    Strings     61
    Constant    145
    Data        0
    BSS         350
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     61      73
    BANK0           160     88     158
    BANK1           256      0     240
    BANK2           256      0      30
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[9]), STR_4(CODE[23]), STR_3(CODE[23]), STR_2(CODE[6]), 
		 -> STR_1(CODE[6]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    ___lltoft->___ftpack
    ___llmod->___lldiv
    _Temp_Fault->___ftge
    _Temp_Convert->___ftdiv
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Current_Fault->___ftdiv
    ___awdiv->___awmod
    ___ftadd->___ftdiv
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___ftdiv
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Current_Read->_ADC_GetConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Current_Fault->___ftadd
    _Current_Convert->_Current_Filter
    _Current_Filter->___ftadd
    ___ftadd->_fround
    _Battery_Convert->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  275813
                                             81 BANK0      7     2      5
                    _Battery_Convert
                      _Battery_Fault
                        _Battery_Get
                    _Current_Convert
                      _Current_Fault
                        _Current_Get
                              _Delay
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              44    37      7   75795
                                             43 BANK0     38    31      7
                        _Battery_Get (ARG)
                        _Current_Get (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   18387
                                             15 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   18108
                                             15 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                             22 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                             22 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2703
                                             30 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             35 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             22 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                             22 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    8844
                                             51 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   91395
                                             54 BANK0     11    11      0
                        _Temp_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   37104
                                             49 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   20602
                                             37 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6229
                                             37 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   20408
                                             37 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    9597
                                             51 COMRAM     7     7      0
                        _Battery_Get
                           _SetBypas
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypas                                             6     2      4     432
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    7501
                                             42 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Delay                                                5     3      2     366
                                             22 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Current_Get                                          3     0      3       0
                                             22 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Current_Fault                                        9     9      0   18984
                                             37 BANK0      9     9      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Current_Convert                                      4     4      0   32689
                                             39 BANK0      4     4      0
                     _Current_Filter
                            ___awdiv
                           ___awtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1836
                                             28 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Current_Filter                                       2     2      0   20408
                                             37 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5711
                                             25 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    8875
                                             51 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1416
                                             42 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      2     2      0   21637
                                             15 BANK0      2     2      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    7316
                                             36 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    7090
                                              0 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4136
                                             46 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2965
                                             42 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1149
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0      59
                       _Battery_Read
                       _Current_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Current_Read                                         0     0      0      15
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversion                                    2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1090
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     514
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Get
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Current_Convert
     _Current_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Current_Fault
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Current_Get
   _Delay
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _SetBypas
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     _Battery_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _Current_Get (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Current_Read
       _ADC_GetConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      1E       8       11.7%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F0       6       93.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     58      9E       4       98.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3D      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F5       9        0.0%
DATA                 0      0     1F5      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jun 07 13:30:28 2015

                       ___awdiv@sign 0022                  ___wmul@multiplicand 0027  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 0084                         ___ftadd@exp2 0083  
                       ___ftadd@sign 0082                                  l311 3C32  
                                l270 3664                                  l522 3522  
                                l514 3512                                  l285 3502  
                                l550 3562                                  l358 3A10  
                                l543 3552                                  l536 3542  
                                l368 281E                                  l481 2994  
                                l529 3532                                  l468 266E  
                                l557 3572                                  l566 32B2  
                                l668 0E5A                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0048  
                                _log 2C54                      __end_of_ADC_ISR 1818  
                       ___awmod@sign 001C                                  wreg 000FE8  
             __size_of_Current_Fault 018C                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 0038                        SetBypas@state 0019  
                       ___ftdiv@sign 003D                                 l1001 2FFE  
                               l1202 389E                                 l1122 2ECA  
                               l1115 2E34                                 l1044 341E  
                               l1108 30C6                                 l1212 3990  
                               l1116 2E5C                                 l1073 1CA4  
                               l1147 3CDC                                 l1077 1CDE  
                               l1079 1D08                                 l1088 1DEC  
                               l1097 1E16                                 l3301 36F0  
                               l3321 38E2                                 l3313 38C6  
                               l5001 20D8                                 l3323 38EC  
                               l3501 3536                                 l5101 3A26  
                               l3325 38F4                                 l3333 3916  
                               l3317 38D4                                 l5021 1A0A  
                               l3503 3546                                 l3511 3576  
                               l5015 195C                                 l5113 35D6  
                               l3281 36A4                                 l3505 3556  
                               l3361 37BA                                 l3601 2DFA  
                               l3337 3926                                 l3329 390A  
                               l5033 1B66                                 l5025 1A30  
                               l3283 36AE                                 l3275 368E  
                               l3507 3566                                 l5125 3452  
                               l5109 35C2                                 l3293 36D4  
                               l3285 36B6                                 l3269 367C  
                               l5141 39C2                                 l3701 2FEA  
                               l5213 07F0                                 l5055 3060  
                               l5119 365C                                 l3703 2FF8  
                               l3631 2E8C                                 l3623 2E6A  
                               l5039 1C14                                 l5303 0C06  
                               l5223 0858                                 l5207 07C8  
                               l5049 3038                                 l5129 346C  
                               l3297 36E0                                 l5145 3A08  
                               l5137 39AE                                 l3641 2EB6  
                               l5321 0CAC                                 l5313 0C54  
                               l5305 0C0C                                 l5217 082E  
                               l5075 30A0                                 l4099 3C20  
                               l5155 2146                                 l3651 2EFA  
                               l3643 2EC4                                 l3635 2E9C  
                               l5411 1066                                 l5331 0D04  
                               l5235 08B2                                 l5227 0864  
                               l5219 0846                                 l5085 30D4  
                               l5093 3AEE                                 l3805 2BD0  
                               l5405 1052                                 l5341 0D3E  
                               l5325 0CD6                                 l5317 0C5A  
                               l5309 0C1A                                 l5261 09AA  
                               l5245 08FA                                 l5229 0896  
                               l5503 32BE                                 l3495 3506  
                               l3823 2C40                                 l3815 2C02  
                               l3671 2F5C                                 l5423 10CE  
                               l5415 10A0                                 l5407 1058  
                               l5343 0D52                                 l5335 0D14  
                               l5183 06E0                                 l5513 337C  
                               l5521 255E                                 l3497 3516  
                               l3817 2C14                                 l3809 2BE4  
                               l3833 3846                                 l3657 2F18  
                               l3585 3D02                                 l5441 117A  
                               l5433 1136                                 l5361 0E3C  
                               l5337 0D2E                                 l5353 0E08  
                               l5273 0A3A                                 l5193 071A  
                               l3763 372E                                 l4811 1D80  
                               l4803 1D40                                 l5507 32D8  
                               l3499 3526                                 l5179 235C  
                               l3819 2C22                                 l3835 3854  
                               l5099 3A18                                 l3691 2FC0  
                               l3683 2F9E                                 l3595 2DCE  
                               l5427 1100                                 l5419 10A6  
                               l5371 0E86                                 l5355 0E18  
                               l5347 0D7A                                 l5291 0B18  
                               l5275 0A50                                 l5195 0730  
                               l5187 06F6                                 l4741 33AE  
                               l3773 378C                                 l4821 1DCC  
                               l4813 1D90                                 l5533 25EE  
                               l5517 2544                                 l3845 388E  
                               l3837 385C                                 l3861 3980  
                               l3853 3944                                 l5461 1222  
                               l5453 11EC                                 l5445 11B2  
                               l5381 0FB4                                 l5365 0E60  
                               l5285 0AE6                                 l5277 0A82  
                               l5269 0A12                                 l5189 070C  
                               l5621 2408                                 l4751 3412  
                               l4743 33CE                                 l4735 3392  
                               l3767 3760                                 l4823 1DDC  
                               l4815 1D9C                                 l5527 25B0  
                               l3855 3952                                 l3695 2FD0  
                               l3679 2F8E                                 l5455 11F8  
                               l5447 11BE                                 l5439 116E  
                               l5383 0FC4                                 l5375 0ED8  
                               l5359 0E28                                 l5295 0B5C  
                               l5279 0A98                                 l5199 0750  
                               l5607 23C6                                 l4809 1D70  
                               l5545 2678                                 l5537 2608  
                               l4905 3140                                 l3857 395A  
                               l5465 1240                                 l5473 12F0  
                               l5297 0B8A                                 l5289 0B0C  
                               l5617 23EE                                 l4763 3438  
                               l4747 33E6                                 l4739 33A2  
                               l5491 326C                                 l5483 3216  
                               l4931 27C8                                 l4915 26B4  
                               l4907 31C4                                 l3787 2B3C  
                               l5459 1216                                 l5387 0FD4  
                               l5299 0B9E                                 l5475 130A  
                               l5651 24C8                                 l5627 244E  
                               l4757 3426                                 l4749 3406  
                               l4829 1E42                                 l4781 1CB2  
                               l5549 2698                                 l4925 27A4  
                               l5469 1268                                 l5389 0FE4  
                               l5661 250A                                 l5645 24B2  
                               l5629 2454                                 ?_log 0091  
                               l4855 2A0A                                 l4839 1E92  
                               l5479 3202                                 l4927 27AE  
                               l4919 26CE                                 l4943 2C78  
                               l5399 102A                                 l5647 24B6  
                               l5655 24E6                                 l5639 2498  
                               l5583 2368                                 l4873 2A7A  
                               l4849 29D0                                 l4793 1CFE  
                               l4961 282A                                 l5497 32AA  
                               l5649 24C4                                 l5585 236C  
                               l4883 2ABE                                 l4787 1CEC  
                               l4971 291A                                 l5659 24FC  
                               l5587 237A                                 l4877 2A96  
                               l4869 2A5A                                 l4973 2924  
                               l4965 2844                                 l4949 2CA6  
                               l5597 2396                                 l5589 237E  
                               l4887 2ADA                                 l4879 2A9E  
                               l4977 293E                                 l4993 200C  
                               l4899 3B7E                                 STR_1 06C9  
                               STR_2 06C9                                 STR_3 06A9  
                               STR_4 0692                                 STR_5 06C0  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u3141 2DB2  
                               u3401 2B18                                 u3161 2DDE  
                               u3420 2B62                                 u3425 2B58  
                               u5211 3048                         printf@tmpval 009D  
                               u2830 37E2                                 u6060 268E  
                               u2838 37E4                                 u5350 2144  
                               u5191 3020                                 u6207 3C26  
                               u4731 1C52                                 u5460 0940  
                               u4741 1C70                                 u5465 0934  
                               u4941 29AC                                 u5680 0E52  
                               u4961 29E6                                 _TMR1 000FCE  
                               _WPUB 000F61                                 _main 2362  
                       ___ftpack@arg 0017                         ___ftpack@exp 001A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 log@x 0091  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AA  
                      __CFG_IESO$OFF 000000                         ___ftmul@cntr 006D  
                       ___param_bank 000010                         ___ftmul@sign 006E  
                  ADC_ISR@ADC_Result 0007                         ___fttol@exp1 0084  
                              ??_log 003E                         ___fttol@lval 0080  
            __size_of_Current_Filter 0176                     ?_Battery_Convert 0001  
                      ??_Current_Get 001A       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 3DE2                       Current_Fault@i 0087  
                              ?_main 00B1                      __end_of___awdiv 36FC  
                    __end_of___ftadd 1EBA                      __end_of___awmod 3932  
                    __end_of___ftdiv 30FC                      _TMR1_StartTimer 3DFC  
                    __end_of___ftneg 3CEA                      __end_of___lldiv 38B0  
                    __end_of___ftmul 2B02                      ___awdiv@divisor 001F  
                              _T1CON 000FCD                      __end_of___llmod 39A2  
                    __end_of___ftsub 3B1A                      __end_of___fttol 2C54  
                              _LATB0 007C50                                _LATB1 007C51  
                              _LATC0 007C58                                _LATB2 007C52  
                              _LATA4 007C4C                                _LATA6 007C4E  
                              _LATA7 007C4F                                _LATD2 007C62  
                              _LATD3 007C63                                _LATD4 007C64  
                              _LATD5 007C65                                _LATD6 007C66  
                              _LATD7 007C67                       __CFG_DEBUG$OFF 000000  
                              i2l123 3CBA                                i2l220 0058  
                              i2l222 0064                                i2l226 0070  
                              i2l218 004C                      ___awdiv@counter 0021  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0016  
                              _Delay 3C16                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                         ___lltoft@exp 0027  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        ?_Current_Read 0001  
                   __end_of_TMR1_ISR 3ACA                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002E  
                              _fault 00E8                      __end_of_dpowers 0629  
                              _frexp 3792                                _errno 00E6  
                              _scale 1818                      __end_of_isdigit 3D0C  
                 __CFG_MCLRE$EXTMCLR 000000                        ___ftpack@sign 001B  
                              _putch 3E00                                main@x 00B6  
            __end_of_TMR1_Initialize 3D2E                          _Battery_Adc 00B8  
                              tablat 000FF5                          _Battery_Get 3C48  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                    RunBypas@cellbyp 0034                      RunBypas@batvolt 0036  
                     __CFG_PBADEN$ON 000000                      __initialization 3BA4  
                        log@exponent 0094                        _Current_Fault 251E  
                       __end_of_main 251E                     __end_of_Set_4051 3C16  
                          ??_ADC_ISR 0005          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 003E                        ___fttol@sign1 007F  
                   __end_of_SetBypas 35B6             __size_of_Current_Convert 00CE  
                      __activetblptr 000002           ADC_StartConversion@channel 0002  
               __size_of__tdiv_to_l_ 013A                               ?_Delay 0017  
                     ??_Current_Read 0003                     __end_of_RunBypas 32B4  
                __end_of_Current_Get 3DF0                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 0017                     ___llmod@dividend 0024  
                             ?_scale 006F                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 001D  
                   __end_of___awtoft 3BA4                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                     __end_of___ftpack 3448  
                    Current_Filter@x 0085                               _T1GCON 000FCC  
                   __end_of___lltoft 3A72                __size_of_Battery_Read 0018  
                             i2l4021 1720                               i2l4013 16DC  
                             i2l4005 1672                               i2l4007 16C2  
                             i2l4033 1786                               i2l4025 1742  
                             i2l4017 16FE                               i2l4009 16C8  
                             i2l4037 17A8                               i2l4029 1764  
                             i2l4045 17D2                       __CFG_WDTEN$OFF 000000  
                             i2l3407 3BE6                               i2l4047 1810  
                             i2l3409 3BF8                               Delay@x 001A  
                             i2l3903 134C                               i2l3921 13D6  
                             i2l3915 13A8                               i2l3933 1432  
                             i2l3909 137A                               i2l3927 1404  
                             i2l3961 1516                               i2l3945 148E  
                             i2l3953 14B8                               i2l3939 1460  
                             i2l3955 14FC                               i2l3883 3A90  
                             i2l3981 15C0                               i2l3973 157C  
                             i2l3965 1538                               i2l3957 1502  
                             i2l3893 3AB8                               i2l3885 3A9A  
                             i2l3993 1626                               i2l3985 15E2  
                             i2l3977 159E                               i2l3969 155A  
                             i2l3889 3AA8                               i2l3997 1648  
                             i2l3989 1604                        ??_Temp_Filter 003E  
                             _OSCCON 000FD3                           _Temp_Fault 39A2  
                     __CFG_XINST$OFF 000000                       ?_Current_Fault 0001  
                   __end_of__powers_ 0677                               ___ftge 36FC  
            __end_of_TMR1_StartTimer 3E00                               ___wmul 3C78  
                          ??___awdiv 0021                            ??___ftadd 007F  
                     __CFG_STVREN$ON 000000                            ??___awmod 001B  
                          ??___ftdiv 0035                            ??___ftneg 001A  
                          ??___lldiv 001F                            ??___ftmul 0066  
                          ??___llmod 002C                            ??___ftsub 003E  
                          ??___fttol 007A                               _fround 1EBA  
                             clear_0 3BAA                               clear_1 3BB6  
                             clear_2 3BC2                               clear_3 3BCE  
                   ___awdiv@quotient 0023                   __size_of_Temp_Read 0018  
                    ___awmod@divisor 0019                      ___awmod@counter 001B  
                             _printf 06D0                ___ftmul@f3_as_product 006A  
                          ??_isdigit 0017                         _Battery_Read 3D90  
                       _Battery_Volt 011E                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8             ADC_GetConversion@channel 0002  
                             putch@c 0001        __size_of_INTERRUPT_Initialize 000C  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 3DA8  
                   __end_oflog@coeff 0692                           __accesstop 0060  
            __end_of__initialization 3BD4                           ___ftadd@f1 0079  
                         ___ftadd@f2 007C                           ___ftge@ff1 002B  
                         ___ftge@ff2 002E                   ?_SYSTEM_Initialize 0001  
                       eval_poly@res 008E                        ___rparam_used 000001  
                         ___ftdiv@f1 002F                           ___ftdiv@f2 0032  
                         ___ftdiv@f3 0039                          SetBypas@pin 0017  
                         ___ftneg@f1 0017                           ___awtoft@c 002B  
                      __end_of_Delay 3C48                           ___ftmul@f1 0060  
                         ___ftmul@f2 0063                           ___ftsub@f1 0085  
                         ___ftsub@f2 0088                  __end_of_Temp_Filter 2820  
                         ___fttol@f1 0076         __size_of_ADC_StartConversion 001A  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 0017  
                          ?_TMR1_ISR 0001                           ___lltoft@c 001F  
                     _Current_Filter 2820                       _Current_Aquire 0045  
                      __end_of_frexp 3824                        __end_of_scale 1C3C  
                      __end_of_putch 3E02                          _Current_Adc 00CC  
                        _Current_Get 3DE2                Battery_Get@channelnum 002B  
            _ADC_GetConversionResult 3DBE                           __div_to_l_ 2EDC  
                            ??_Delay 0019                        ?_Temp_Convert 0001  
                  ??_Current_Convert 003E                      __div_to_l_@exp1 0022  
                    __div_to_l_@cntr 0021                              ??_frexp 001C  
                            ??_scale 003E            __end_of_SYSTEM_Initialize 3DBE  
                    __div_to_l_@quot 001D                              ??_putch 0017  
                         __pbssBANK0 00B8                           __pbssBANK1 0100  
                         __pbssBANK2 0200                   __size_of_eval_poly 00E2  
                    __CFG_PLLCFG$OFF 000000                    __end_of_Temp_Read 3D78  
                          ?_Set_4051 0001                           __pnvCOMRAM 0048  
              Temp_Convert@steinhart 009E                          ?_Temp_Fault 0001  
                      __div_to_l_@f1 0017                        __div_to_l_@f2 001A  
                    ??_Current_Fault 003E                            ?_SetBypas 0017  
                 __CFG_CCP2MX$PORTC1 000000               __end_of_Current_Filter 2996  
               __end_of_Current_Read 3D90                          Temp_Fault@i 0035  
                _TempBattery_Current 01B4                              ?___ftge 002B  
                          ?_RunBypas 0001                              ?___wmul 0025  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0003  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 132E  
                            ?_fround 006F                            ?___awtoft 002B  
                          ?___ftpack 0017                              ?_printf 008B  
                          ?___lltoft 001F              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 009C               __size_of_Battery_Fault 00B0  
                    Temp_Fault@fault 0034                     Current_Convert@x 0089  
                 Current_Fault@i_973 0089                       Battery_Fault@i 0035  
                            _OSCCON2 000FD2                       ??_Temp_Convert 003E  
                 Current_Fault@fault 0085                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                         ?_Battery_Get 002B  
                         ??_Set_4051 0003                          _Temp_Filter 26AA  
                        _Temp_Aquire 0046                           ??_SetBypas 001B  
                    __CFG_PWRTEN$OFF 000000                    __end_of__npowers_ 0650  
                            __Hparam 0000                           _scale$1697 0072  
                            __Lparam 0000                      ?_Current_Filter 0001  
                         ??_RunBypas 0034                      __size_of___ftge 0096  
                            ___awdiv 3666                              ___ftadd 1C3C  
                            ___awmod 38B0                              ___ftdiv 3010  
                            ___ftneg 3CC6                              ___lldiv 3824  
                    __size_of___wmul 0028                              ___ftmul 2996  
                            ___llmod 3932                              ___ftsub 3ACA  
                            ___fttol 2B02                         __psmallconst 0600  
          ??_ADC_GetConversionResult 0003                              __pcinit 3BA4  
                         ??___awtoft 002E                           ??___ftpack 001C  
                  __end_of_eval_poly 31DE                      __size_of_fround 0268  
                            __ramtop 0600                           ??___lltoft 0023  
                            __ptext0 2362                              __ptext1 06D0  
                            __ptext2 1818                              __ptext3 3E00  
                            __ptext4 3CEA                              __ptext5 1EBA  
                            __ptext6 38B0                              __ptext7 2DA2  
                            __ptext8 2EDC                              __ptext9 3A12  
                    __size_of_printf 0C5E                            _T1CONbits 000FCD  
                        ?__div_to_l_ 0017                              _infault 00E9  
                            _dpowers 0601                _OSCILLATOR_Initialize 3DD4  
                       __size_of_log 014E                              _isdigit 3CEA  
                   ___awmod@dividend 0017                  __size_of_Temp_Fault 0070  
           ??_PIN_MANAGER_Initialize 0017             __size_of_Battery_Convert 00BC  
         __size_of_SYSTEM_Initialize 0016                 end_of_initialization 3BD4  
                          Delay@wait 0017                        __Lmediumconst 0000  
                      _Battery_Fault 35B6                      ___lldiv@divisor 001B  
                    ___lldiv@counter 0023                              printf@c 00B0  
                            printf@f 008B                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                   Battery_Convert@x 006F                       __tdiv_to_l_@f1 0017  
                     __tdiv_to_l_@f2 001A                        ??__tdiv_to_l_ 001D  
                _ADC_StartConversion 3D2E                          _Volt_Aquire 0047  
                     ?_Battery_Fault 0001                __size_of_Current_Read 0018  
                        ___ftdiv@exp 003C                          printf@width 00A9  
                __size_of__div_to_l_ 0134                          ___ftmul@exp 0069  
               ?_ADC_StartConversion 0001                 __end_of_Temp_Convert 2362  
       __end_of_INTERRUPT_Initialize 3DFC                       __end_of___ftge 3792  
                     __end_of___wmul 3CA0                      _Current_Convert 32B4  
                       ?_Current_Get 0017                    __size_of_TMR1_ISR 0058  
                     _ADC_Initialize 3D48               ?_OSCILLATOR_Initialize 0001  
                     __end_of_fround 2122                       __end_of_printf 132E  
                start_initialization 3BA4                           eval_poly@d 0088  
                         eval_poly@n 008A                           eval_poly@x 0085  
               _Current_Convert$1694 0087      __size_of_PIN_MANAGER_Initialize 004E  
                __end_of__tdiv_to_l_ 2EDC                         _Current_Done 00E0  
                       _Current_Mean 003E                         _Current_Read 3D78  
                        __end_of_log 2DA2                           frexp@value 0017  
                  ??_Battery_Convert 003E                      ___llmod@divisor 0028  
               __size_of_Battery_Get 0030                      ___llmod@counter 002C  
                       ??_Temp_Fault 0034                    __size_of_Set_4051 0038  
                          _Temp_DegF 0196                     _PrevBattery_Volt 015A  
                          _Temp_Done 00E2                            _Temp_Read 3D60  
              ??_ADC_StartConversion 0001             __size_of_TMR1_Initialize 0022  
                  __size_of_SetBypas 00B2                             ??___ftge 0031  
                           ??___wmul 0029               __end_of_ADC_Initialize 3D60  
                          RunBypas@i 0039                             ?_ADC_ISR 0001  
                           ??_fround 003E                    __size_of_RunBypas 00D6  
                           ??_printf 0092                           fround@prec 0078  
                  __size_of___awtoft 003C                    __size_of___ftpack 00C6  
                          _Volt_Done 00E4                TMR1_ISR@CountCallBack 0041  
                  __size_of___lltoft 0060                          __pbssCOMRAM 003E  
                      __pcstackBANK0 0060                   __end_of_Temp_Fault 3A12  
                       _isdigit$1337 0018                        _PrevTemp_DegF 0178  
                    ??_Battery_Fault 0034                         ?_Temp_Filter 0001  
                   ??_Current_Filter 003E                           ?_Temp_Read 0001  
             _PIN_MANAGER_Initialize 3B1A                __end_of_Current_Fault 26AA  
            __end_of_Current_Convert 3382                            __pintcode 0008  
                  _Temp_Convert$1692 0096                    _Temp_Convert$1693 0099  
                           ?___awdiv 001D                             ?___ftadd 0079  
                           ?___awmod 0017                             ?___ftdiv 002F  
                           ?___ftneg 0017                             ?___lldiv 0017  
                           ?___ftmul 0060                             ?___llmod 0024  
                           ?___ftsub 0085                            __npowers_ 0629  
                           ?___fttol 0076                         Temp_Filter@x 0085  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 0009  
                        __tdiv_to_l_ 2DA2                    Current_Fault@temp 008B  
                       ??__div_to_l_ 001D                          __smallconst 0600  
           __size_of_TMR1_StartTimer 0004                             ?_isdigit 0001  
                          _eval_poly 30FC                       __size_of_Delay 0032  
                     __size_of_frexp 0092                       __size_of_scale 0424  
                     __size_of_putch 0002                 _INTERRUPT_Initialize 3DF0  
                     ___wmul@product 0029                             _LATCbits 000F8B  
              __size_of_Temp_Convert 0240                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A2  
                           _PIR1bits 000F9E                   __end_of__div_to_l_ 3010  
                           i2u355_40 3A8C                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 3A72  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 04EA  
                _PrevBattery_Current 013C                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0025                           printf@flag 00A7  
                         printf@fval 00AB                 __size_of_Current_Get 000E  
                         printf@prec 00AE                        ?_Battery_Read 0001  
                         ?_eval_poly 0085                         _Temp_Convert 2122  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                           _Set_4051 3BDE                            frexp@eptr 001A  
                           _SetBypas 3504                             __Hrparam 0000  
                        ??_Temp_Read 0003                             _Temp_Adc 00EA  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                  _ADC_GetConversion 3CA0                     ?_Current_Convert 0001  
                 __CFG_BOREN$SBORDIS 000000                             _RunBypas 31DE  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0017  
                 ?_ADC_GetConversion 0001                     __size_of___awdiv 0096  
                   __size_of___ftadd 027E                     __size_of___awmod 0082  
                   __size_of___ftdiv 00EC                     __size_of___ftneg 0024  
                   __size_of___lldiv 008C                     __size_of___ftmul 016C  
                   __size_of___llmod 0070                     __size_of___ftsub 0050  
                   __size_of___fttol 0152                             ___awtoft 3B68  
                           ___ftpack 3382                          _fround$1695 0075  
                        _fround$1696 0072                             ___lltoft 3A12  
                     ??_Battery_Read 0003                  ??_ADC_GetConversion 0001  
                    _Battery_Convert 3448                   Battery_Fault@fault 0034  
                   __size_of_isdigit 0022                      _Battery_Current 0100  
                           __ptext10 3932                             __ptext11 3824  
                           __ptext20 26AA                             __ptext12 2B02  
                           __ptext21 3DA8                             __ptext13 3CC6  
                         _T1GCONbits 000FCC                             __ptext30 3C48  
                           __ptext22 3D0C                             __ptext14 39A2  
                           __ptext31 3C16                             __ptext23 3DFC  
                           __ptext15 2122                             __ptext40 3448  
                           __ptext32 3DE2                             __ptext24 3B1A  
                           __ptext16 2C54                             __ptext41 3C78  
                           __ptext33 251E                             __ptext25 3DD4  
                           __ptext17 3792                             __ptext50 3CA0  
                           __ptext42 2996                             __ptext34 32B4  
                           __ptext26 3DF0                             __ptext18 30FC  
                           __ptext51 3D90                             __ptext43 3010  
                           __ptext35 3666                             __ptext27 3D48  
                           __ptext19 3ACA                             __ptext52 132E  
                           __ptext44 3B68                             __ptext36 2820  
                           __ptext28 31DE                             __ptext53 3BDE  
                           __ptext45 3382                             __ptext37 1C3C  
                           __ptext29 3504                             __ptext54 3D2E  
                           __ptext38 35B6                             __ptext55 3DBE  
                           __ptext47 3A72                             __ptext39 36FC  
                           __ptext48 3D60                             __ptext49 3D78  
                           __powers_ 0650                    ??_TMR1_StartTimer 0017  
                      __size_of_main 01BC            __end_of_ADC_GetConversion 3CC6  
                       _TmpTemp_DegF 01D2                 __size_of_Temp_Filter 0176  
 __end_of_INTERRUPT_InterruptManager 00AA           _INTERRUPT_InterruptManager 0008  
                           main@argc 00B1                            printf@exp 00A5  
                           main@argv 00B3                            printf@val 00A1  
                           log@coeff 0677                           _INTCONbits 000FF2  
                        ??_eval_poly 008C                             isdigit@c 0019  
             ??_INTERRUPT_Initialize 0017                             scale@scl 0075  
                      ??_Battery_Get 002E                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0025                     __tdiv_to_l_@cntr 0024  
                   __tdiv_to_l_@quot 0020          __end_of_ADC_StartConversion 3D48  
                   _TempBattery_Volt 0200                     ___lldiv@dividend 0017  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 3DD4  
                   ??_ADC_Initialize 0017                             printf@ap 009B  
            __end_of_Battery_Convert 3504                         ?__tdiv_to_l_ 0017  
                        _printf$1698 0098                     ___lldiv@quotient 001F  
                  __CFG_T3CMX$PORTC0 000000       __end_of_PIN_MANAGER_Initialize 3B68  
              __end_of_Battery_Fault 3666                    __CFG_FOSC$INTIO67 000000  
         __size_of_ADC_GetConversion 0026                 __end_of_Battery_Read 3DA8  
                    _TMR1_Initialize 3D0C                     _ADC_Buffer_Point 0043  
                __end_of_Battery_Get 3C78                      Set_4051@Channel 0001  
