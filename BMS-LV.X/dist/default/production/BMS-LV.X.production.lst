

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun May 31 22:32:20 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           	psect	smallconst
    72  000600                     __psmallconst:
    73                           	opt stack 0
    74  000600  00                 	db	0
    75  000601                     _dpowers:
    76                           	opt stack 0
    77  000601  0001               	dw	1
    78  000603  0000               	dw	0
    79  000605  000A               	dw	10
    80  000607  0000               	dw	0
    81  000609  0064               	dw	100
    82  00060B  0000               	dw	0
    83  00060D  03E8               	dw	1000
    84  00060F  0000               	dw	0
    85  000611  2710               	dw	10000
    86  000613  0000               	dw	0
    87  000615  86A0               	dw	34464
    88  000617  0001               	dw	1
    89  000619  4240               	dw	16960
    90  00061B  000F               	dw	15
    91  00061D  9680               	dw	38528
    92  00061F  0098               	dw	152
    93  000621  E100               	dw	57600
    94  000623  05F5               	dw	1525
    95  000625  CA00               	dw	51712
    96  000627  3B9A               	dw	15258
    97  000629                     __end_of_dpowers:
    98                           	opt stack 0
    99  000629                     __npowers_:
   100                           	opt stack 0
   101  000629  00                 	db	0
   102  00062A  80                 	db	128
   103  00062B  3F                 	db	63
   104  00062C  CD                 	db	205
   105  00062D  CC                 	db	204
   106  00062E  3D                 	db	61
   107  00062F  D7                 	db	215
   108  000630  23                 	db	35
   109  000631  3C                 	db	60
   110  000632  12                 	db	18
   111  000633  83                 	db	131
   112  000634  3A                 	db	58
   113  000635  B7                 	db	183
   114  000636  D1                 	db	209
   115  000637  38                 	db	56
   116  000638  C6                 	db	198
   117  000639  27                 	db	39
   118  00063A  37                 	db	55
   119  00063B  38                 	db	56
   120  00063C  86                 	db	134
   121  00063D  35                 	db	53
   122  00063E  C0                 	db	192
   123  00063F  D6                 	db	214
   124  000640  33                 	db	51
   125  000641  CC                 	db	204
   126  000642  2B                 	db	43
   127  000643  32                 	db	50
   128  000644  70                 	db	112
   129  000645  89                 	db	137
   130  000646  30                 	db	48
   131  000647  E7                 	db	231
   132  000648  DB                 	db	219
   133  000649  2E                 	db	46
   134  00064A  E5                 	db	229
   135  00064B  3C                 	db	60
   136  00064C  1E                 	db	30
   137  00064D  42                 	db	66
   138  00064E  A2                 	db	162
   139  00064F  0D                 	db	13
   140  000650                     __end_of__npowers_:
   141                           	opt stack 0
   142  000650                     __powers_:
   143                           	opt stack 0
   144  000650  00                 	db	0
   145  000651  80                 	db	128
   146  000652  3F                 	db	63
   147  000653  00                 	db	0
   148  000654  20                 	db	32
   149  000655  41                 	db	65
   150  000656  00                 	db	0
   151  000657  C8                 	db	200
   152  000658  42                 	db	66
   153  000659  00                 	db	0
   154  00065A  7A                 	db	122
   155  00065B  44                 	db	68
   156  00065C  40                 	db	64
   157  00065D  1C                 	db	28
   158  00065E  46                 	db	70
   159  00065F  50                 	db	80
   160  000660  C3                 	db	195
   161  000661  47                 	db	71
   162  000662  24                 	db	36
   163  000663  74                 	db	116
   164  000664  49                 	db	73
   165  000665  97                 	db	151
   166  000666  18                 	db	24
   167  000667  4B                 	db	75
   168  000668  BC                 	db	188
   169  000669  BE                 	db	190
   170  00066A  4C                 	db	76
   171  00066B  6B                 	db	107
   172  00066C  6E                 	db	110
   173  00066D  4E                 	db	78
   174  00066E  03                 	db	3
   175  00066F  15                 	db	21
   176  000670  50                 	db	80
   177  000671  79                 	db	121
   178  000672  AD                 	db	173
   179  000673  60                 	db	96
   180  000674  F3                 	db	243
   181  000675  49                 	db	73
   182  000676  71                 	db	113
   183  000677                     __end_of__powers_:
   184                           	opt stack 0
   185  000677                     log@coeff:
   186                           	opt stack 0
   187  000677  00                 	db	0
   188  000678  00                 	db	0
   189  000679  00                 	db	0
   190  00067A  00                 	db	0
   191  00067B  80                 	db	128
   192  00067C  3F                 	db	63
   193  00067D  F0                 	db	240
   194  00067E  FF                 	db	255
   195  00067F  BE                 	db	190
   196  000680  E2                 	db	226
   197  000681  A9                 	db	169
   198  000682  3E                 	db	62
   199  000683  83                 	db	131
   200  000684  76                 	db	118
   201  000685  BE                 	db	190
   202  000686  AE                 	db	174
   203  000687  2B                 	db	43
   204  000688  3E                 	db	62
   205  000689  3C                 	db	60
   206  00068A  C3                 	db	195
   207  00068B  BD                 	db	189
   208  00068C  D2                 	db	210
   209  00068D  13                 	db	19
   210  00068E  3D                 	db	61
   211  00068F  78                 	db	120
   212  000690  D3                 	db	211
   213  000691  BB                 	db	187
   214  000692                     __end_oflog@coeff:
   215                           	opt stack 0
   216  000692                     STR_1:
   217  000692  42                 	db	66	;'B'
   218  000693  61                 	db	97	;'a'
   219  000694  74                 	db	116	;'t'
   220  000695  74                 	db	116	;'t'
   221  000696  65                 	db	101	;'e'
   222  000697  72                 	db	114	;'r'
   223  000698  79                 	db	121	;'y'
   224  000699  20                 	db	32
   225  00069A  20                 	db	32
   226  00069B  74                 	db	116	;'t'
   227  00069C  65                 	db	101	;'e'
   228  00069D  6D                 	db	109	;'m'
   229  00069E  70                 	db	112	;'p'
   230  00069F  20                 	db	32
   231  0006A0  25                 	db	37
   232  0006A1  64                 	db	100	;'d'
   233  0006A2  20                 	db	32
   234  0006A3  3D                 	db	61	;'='
   235  0006A4  20                 	db	32
   236  0006A5  25                 	db	37
   237  0006A6  30                 	db	48	;'0'
   238  0006A7  2E                 	db	46
   239  0006A8  30                 	db	48	;'0'
   240  0006A9  32                 	db	50	;'2'
   241  0006AA  66                 	db	102	;'f'
   242  0006AB  20                 	db	32
   243  0006AC  0D                 	db	13
   244  0006AD  0A                 	db	10
   245  0006AE  00                 	db	0
   246  0006AF                     STR_2:
   247  0006AF  42                 	db	66	;'B'
   248  0006B0  61                 	db	97	;'a'
   249  0006B1  74                 	db	116	;'t'
   250  0006B2  74                 	db	116	;'t'
   251  0006B3  65                 	db	101	;'e'
   252  0006B4  72                 	db	114	;'r'
   253  0006B5  79                 	db	121	;'y'
   254  0006B6  20                 	db	32
   255  0006B7  25                 	db	37
   256  0006B8  64                 	db	100	;'d'
   257  0006B9  20                 	db	32
   258  0006BA  3D                 	db	61	;'='
   259  0006BB  20                 	db	32
   260  0006BC  25                 	db	37
   261  0006BD  30                 	db	48	;'0'
   262  0006BE  2E                 	db	46
   263  0006BF  30                 	db	48	;'0'
   264  0006C0  32                 	db	50	;'2'
   265  0006C1  66                 	db	102	;'f'
   266  0006C2  20                 	db	32
   267  0006C3  0D                 	db	13
   268  0006C4  0A                 	db	10
   269  0006C5  00                 	db	0
   270                           
   271                           ; #config settings
   272  0006C6  00                 	db	0	; dummy byte at the end
   273  0000                     
   274                           	psect	nvCOMRAM
   275  000047                     __pnvCOMRAM:
   276                           	opt stack 0
   277  000047                     _timer1ReloadVal:
   278                           	opt stack 0
   279  000047                     	ds	2
   280  000049                     _eusart1TxBufferRemaining:
   281                           	opt stack 0
   282  000049                     	ds	1
   283  0000                     _ANSELA	set	3896
   284  0000                     _ANSELB	set	3897
   285  0000                     _ANSELC	set	3898
   286  0000                     _ANSELD	set	3899
   287  0000                     _ANSELE	set	3900
   288  0000                     _TMR1	set	4046
   289  0000                     _ADCON0	set	4034
   290  0000                     _ADCON0bits	set	4034
   291  0000                     _ADCON1	set	4033
   292  0000                     _ADCON2	set	4032
   293  0000                     _ADRESH	set	4036
   294  0000                     _ADRESL	set	4035
   295  0000                     _BAUD1CON	set	4024
   296  0000                     _INTCON2bits	set	4081
   297  0000                     _INTCONbits	set	4082
   298  0000                     _IPR1bits	set	3999
   299  0000                     _LATA	set	3977
   300  0000                     _LATB	set	3978
   301  0000                     _LATC	set	3979
   302  0000                     _LATD	set	3980
   303  0000                     _LATE	set	3981
   304  0000                     _OSCCON	set	4051
   305  0000                     _OSCCON2	set	4050
   306  0000                     _OSCTUNE	set	3995
   307  0000                     _PIE1bits	set	3997
   308  0000                     _PIR1bits	set	3998
   309  0000                     _RC1REG	set	4014
   310  0000                     _RC1STA	set	4011
   311  0000                     _RC1STAbits	set	4011
   312  0000                     _RCONbits	set	4048
   313  0000                     _RCREG1	set	4014
   314  0000                     _SPBRG1	set	4015
   315  0000                     _SPBRGH1	set	4016
   316  0000                     _T1CON	set	4045
   317  0000                     _T1CONbits	set	4045
   318  0000                     _T1GCON	set	4044
   319  0000                     _T1GCONbits	set	4044
   320  0000                     _TMR1H	set	4047
   321  0000                     _TMR1L	set	4046
   322  0000                     _TRISA	set	3986
   323  0000                     _TRISB	set	3987
   324  0000                     _TRISC	set	3988
   325  0000                     _TRISD	set	3989
   326  0000                     _TRISE	set	3990
   327  0000                     _TX1REG	set	4013
   328  0000                     _TX1STA	set	4012
   329  0000                     _TXREG1	set	4013
   330  0000                     _WPUB	set	3937
   331  0000                     _LATA4	set	31820
   332  0000                     _LATA6	set	31822
   333  0000                     _LATA7	set	31823
   334  0000                     _LATB0	set	31824
   335  0000                     _LATB1	set	31825
   336  0000                     _LATB2	set	31826
   337  0000                     _LATC0	set	31832
   338  0000                     _LATD3	set	31843
   339  0000                     _LATD4	set	31844
   340  0000                     _LATD5	set	31845
   341  0000                     _LATD6	set	31846
   342  0000                     _LATD7	set	31847
   343                           
   344                           	psect	cinit
   345  003638                     __pcinit:
   346                           	opt stack 0
   347  003638                     start_initialization:
   348                           	opt stack 0
   349  003638                     __initialization:
   350                           	opt stack 0
   351                           
   352                           ; Clear objects allocated to BANK1 (240 bytes)
   353  003638  EE01  F000         	lfsr	0,__pbssBANK1
   354  00363C  0EF0               	movlw	240
   355  00363E                     clear_0:
   356  00363E  6AEE               	clrf	postinc0,c
   357  003640  06E8               	decf	wreg,f,c
   358  003642  E1FD               	bnz	clear_0
   359                           
   360                           ; Clear objects allocated to BANK0 (92 bytes)
   361  003644  EE00  F060         	lfsr	0,__pbssBANK0
   362  003648  0E5C               	movlw	92
   363  00364A                     clear_1:
   364  00364A  6AEE               	clrf	postinc0,c
   365  00364C  06E8               	decf	wreg,f,c
   366  00364E  E1FD               	bnz	clear_1
   367                           
   368                           ; Clear objects allocated to COMRAM (12 bytes)
   369  003650  EE00  F03B         	lfsr	0,__pbssCOMRAM
   370  003654  0E0C               	movlw	12
   371  003656                     clear_2:
   372  003656  6AEE               	clrf	postinc0,c
   373  003658  06E8               	decf	wreg,f,c
   374  00365A  E1FD               	bnz	clear_2
   375  00365C                     end_of_initialization:
   376                           	opt stack 0
   377  00365C                     __end_of__initialization:
   378                           	opt stack 0
   379  00365C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   380  00365E  6EF8               	movwf	tblptru,c
   381  003660  0100               	movlb	0
   382  003662  EF5A  F013         	goto	_main	;jump to C main() function
   383                           tblptru	equ	0xFF8
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           
   387                           	psect	bssCOMRAM
   388  00003B                     __pbssCOMRAM:
   389                           	opt stack 0
   390  00003B                     TMR1_ISR@CountCallBack:
   391                           	opt stack 0
   392  00003B                     	ds	2
   393  00003D                     _ADC_Buffer_Point:
   394                           	opt stack 0
   395  00003D                     	ds	2
   396  00003F                     _Current_Aquire:
   397                           	opt stack 0
   398  00003F                     	ds	1
   399  000040                     _Temp_Aquire:
   400                           	opt stack 0
   401  000040                     	ds	1
   402  000041                     _Volt_Aquire:
   403                           	opt stack 0
   404  000041                     	ds	1
   405  000042                     _eusart1RxCount:
   406                           	opt stack 0
   407  000042                     	ds	1
   408  000043                     _eusart1RxHead:
   409                           	opt stack 0
   410  000043                     	ds	1
   411  000044                     _eusart1RxTail:
   412                           	opt stack 0
   413  000044                     	ds	1
   414  000045                     _eusart1TxHead:
   415                           	opt stack 0
   416  000045                     	ds	1
   417  000046                     _eusart1TxTail:
   418                           	opt stack 0
   419  000046                     	ds	1
   420                           tblptru	equ	0xFF8
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           
   424                           	psect	bssBANK0
   425  000060                     __pbssBANK0:
   426                           	opt stack 0
   427  000060                     _Battery_Volt:
   428                           	opt stack 0
   429  000060                     	ds	30
   430  00007E                     _Battery_Adc:
   431                           	opt stack 0
   432  00007E                     	ds	20
   433  000092                     _eusart1RxBuffer:
   434                           	opt stack 0
   435  000092                     	ds	8
   436  00009A                     _eusart1TxBuffer:
   437                           	opt stack 0
   438  00009A                     	ds	8
   439  0000A2                     _Temp_Done:
   440                           	opt stack 0
   441  0000A2                     	ds	2
   442  0000A4                     _Volt_Done:
   443                           	opt stack 0
   444  0000A4                     	ds	2
   445  0000A6                     _errno:
   446                           	opt stack 0
   447  0000A6                     	ds	2
   448  0000A8                     _Temp_Adc:
   449                           	opt stack 0
   450  0000A8                     	ds	20
   451                           tblptru	equ	0xFF8
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           
   455                           	psect	bssBANK1
   456  000100                     __pbssBANK1:
   457                           	opt stack 0
   458  000100                     _Battery_Current:
   459                           	opt stack 0
   460  000100                     	ds	30
   461  00011E                     _PrevBattery_Current:
   462                           	opt stack 0
   463  00011E                     	ds	30
   464  00013C                     _PrevBattery_Volt:
   465                           	opt stack 0
   466  00013C                     	ds	30
   467  00015A                     _PrevTemp_DegF:
   468                           	opt stack 0
   469  00015A                     	ds	30
   470  000178                     _Temp_DegF:
   471                           	opt stack 0
   472  000178                     	ds	30
   473  000196                     _TempBattery_Current:
   474                           	opt stack 0
   475  000196                     	ds	30
   476  0001B4                     _TempBattery_Volt:
   477                           	opt stack 0
   478  0001B4                     	ds	30
   479  0001D2                     _TmpTemp_DegF:
   480                           	opt stack 0
   481  0001D2                     	ds	30
   482                           tblptru	equ	0xFF8
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           
   486                           	psect	cstackBANK2
   487  000200                     __pcstackBANK2:
   488                           	opt stack 0
   489  000200                     _printf$1743:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0x0
   493  000200                     	ds	3
   494  000203                     printf@ap:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x3
   498  000203                     	ds	2
   499  000205                     printf@tmpval:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x5
   503  000205                     	ds	4
   504  000209                     printf@val:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x9
   508  000209                     	ds	4
   509  00020D                     printf@exp:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0xD
   513  00020D                     	ds	2
   514  00020F                     printf@flag:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0xF
   518  00020F                     	ds	2
   519  000211                     printf@width:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x11
   523  000211                     	ds	2
   524  000213                     printf@fval:
   525                           	opt stack 0
   526                           
   527                           ; 3 bytes @ 0x13
   528  000213                     	ds	3
   529  000216                     printf@prec:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x16
   533  000216                     	ds	2
   534  000218                     printf@c:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x18
   538  000218                     	ds	1
   539                           tblptru	equ	0xFF8
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           
   543                           	psect	cstackBANK0
   544  0000BC                     __pcstackBANK0:
   545                           	opt stack 0
   546  0000BC                     ___ftmul@exp:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x0
   550  0000BC                     	ds	1
   551  0000BD                     ___ftmul@f3_as_product:
   552                           	opt stack 0
   553                           
   554                           ; 3 bytes @ 0x1
   555  0000BD                     	ds	3
   556  0000C0                     ___ftmul@cntr:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x4
   560  0000C0                     	ds	1
   561  0000C1                     ___ftmul@sign:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x5
   565  0000C1                     	ds	1
   566  0000C2                     ?_fround:
   567                           	opt stack 0
   568  0000C2                     ?_scale:
   569                           	opt stack 0
   570  0000C2                     Battery_Convert@x:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x6
   574  0000C2                     	ds	3
   575  0000C5                     _fround$1741:
   576                           	opt stack 0
   577  0000C5                     _scale$1742:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x9
   581  0000C5                     	ds	3
   582  0000C8                     scale@scl:
   583                           	opt stack 0
   584  0000C8                     _fround$1740:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0xC
   588  0000C8                     	ds	1
   589  0000C9                     ?___fttol:
   590                           	opt stack 0
   591  0000C9                     ___fttol@f1:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0xD
   595  0000C9                     	ds	2
   596  0000CB                     fround@prec:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0xF
   600  0000CB                     	ds	1
   601  0000CC                     ?___ftadd:
   602                           	opt stack 0
   603  0000CC                     ___ftadd@f1:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x10
   607  0000CC                     	ds	1
   608  0000CD                     ??___fttol:
   609                           
   610                           ; 0 bytes @ 0x11
   611  0000CD                     	ds	2
   612  0000CF                     ___ftadd@f2:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0x13
   616  0000CF                     	ds	3
   617  0000D2                     ??___ftadd:
   618  0000D2                     ___fttol@sign1:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x16
   622  0000D2                     	ds	1
   623  0000D3                     ___fttol@lval:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x17
   627  0000D3                     	ds	2
   628  0000D5                     ___ftadd@sign:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x19
   632  0000D5                     	ds	1
   633  0000D6                     ___ftadd@exp2:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x1A
   637  0000D6                     	ds	1
   638  0000D7                     ___ftadd@exp1:
   639                           	opt stack 0
   640  0000D7                     ___fttol@exp1:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x1B
   644  0000D7                     	ds	1
   645  0000D8                     ?___ftsub:
   646                           	opt stack 0
   647  0000D8                     ?_eval_poly:
   648                           	opt stack 0
   649  0000D8                     Temp_Filter@x:
   650                           	opt stack 0
   651  0000D8                     ___ftsub@f1:
   652                           	opt stack 0
   653  0000D8                     eval_poly@x:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x1C
   657  0000D8                     	ds	3
   658  0000DB                     eval_poly@d:
   659                           	opt stack 0
   660  0000DB                     ___ftsub@f2:
   661                           	opt stack 0
   662                           
   663                           ; 3 bytes @ 0x1F
   664  0000DB                     	ds	2
   665  0000DD                     eval_poly@n:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x21
   669  0000DD                     	ds	1
   670  0000DE                     ?_printf:
   671                           	opt stack 0
   672  0000DE                     printf@f:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x22
   676  0000DE                     	ds	1
   677  0000DF                     ??_eval_poly:
   678                           
   679                           ; 0 bytes @ 0x23
   680  0000DF                     	ds	2
   681  0000E1                     eval_poly@res:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x25
   685  0000E1                     	ds	3
   686  0000E4                     ?_log:
   687                           	opt stack 0
   688  0000E4                     log@x:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x28
   692  0000E4                     	ds	1
   693  0000E5                     ??_printf:
   694                           
   695                           ; 0 bytes @ 0x29
   696  0000E5                     	ds	2
   697  0000E7                     log@exponent:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x2B
   701  0000E7                     	ds	2
   702  0000E9                     _Temp_Convert$1738:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x2D
   706  0000E9                     	ds	3
   707  0000EC                     _Temp_Convert$1739:
   708                           	opt stack 0
   709                           
   710                           ; 3 bytes @ 0x30
   711  0000EC                     	ds	3
   712  0000EF                     Temp_Convert@x:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x33
   716  0000EF                     	ds	2
   717  0000F1                     Temp_Convert@steinhart:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x35
   721  0000F1                     	ds	3
   722  0000F4                     
   723                           ; 2 bytes @ 0x38
   724  0000F4                     	ds	2
   725  0000F6                     
   726                           ; 3 bytes @ 0x3A
   727  0000F6                     	ds	3
   728  0000F9                     main@x:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x3D
   732  0000F9                     	ds	2
   733  0000FB                     main@x_966:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x3F
   737  0000FB                     	ds	2
   738                           tblptru	equ	0xFF8
   739                           postinc0	equ	0xFEE
   740                           wreg	equ	0xFE8
   741                           
   742                           	psect	cstackCOMRAM
   743  000001                     __pcstackCOMRAM:
   744                           	opt stack 0
   745  000001                     ??_ADC_StartConversion:
   746  000001                     ?_ADC_GetConversionResult:
   747                           	opt stack 0
   748  000001                     Set_4051@Channel:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x0
   752  000001                     	ds	1
   753  000002                     ADC_StartConversion@channel:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x1
   757  000002                     	ds	1
   758  000003                     ??_Set_4051:
   759  000003                     ??_ADC_GetConversionResult:
   760                           
   761                           ; 0 bytes @ 0x2
   762  000003                     	ds	2
   763  000005                     ??_ADC_ISR:
   764                           
   765                           ; 0 bytes @ 0x4
   766  000005                     	ds	2
   767  000007                     ADC_ISR@ADC_Result:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x6
   771  000007                     	ds	2
   772  000009                     ??_INTERRUPT_InterruptManager:
   773                           
   774                           ; 0 bytes @ 0x8
   775  000009                     	ds	14
   776  000017                     ??_isdigit:
   777  000017                     ?___awmod:
   778                           	opt stack 0
   779  000017                     ?___ftpack:
   780                           	opt stack 0
   781  000017                     ?_frexp:
   782                           	opt stack 0
   783  000017                     ?___ftneg:
   784                           	opt stack 0
   785  000017                     ?__tdiv_to_l_:
   786                           	opt stack 0
   787  000017                     ?__div_to_l_:
   788                           	opt stack 0
   789  000017                     ?___lldiv:
   790                           	opt stack 0
   791  000017                     EUSART1_Write@txData:
   792                           	opt stack 0
   793  000017                     Delay@wait:
   794                           	opt stack 0
   795  000017                     SetBypas@pin:
   796                           	opt stack 0
   797  000017                     ___awmod@dividend:
   798                           	opt stack 0
   799  000017                     __div_to_l_@f1:
   800                           	opt stack 0
   801  000017                     ___ftpack@arg:
   802                           	opt stack 0
   803  000017                     __tdiv_to_l_@f1:
   804                           	opt stack 0
   805  000017                     ___ftneg@f1:
   806                           	opt stack 0
   807  000017                     frexp@value:
   808                           	opt stack 0
   809  000017                     ___lldiv@dividend:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0x16
   813  000017                     	ds	1
   814  000018                     putch@txData:
   815                           	opt stack 0
   816  000018                     _isdigit$1357:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x17
   820  000018                     	ds	1
   821  000019                     ??_Delay:
   822  000019                     isdigit@c:
   823                           	opt stack 0
   824  000019                     SetBypas@state:
   825                           	opt stack 0
   826  000019                     ___awmod@divisor:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x18
   830  000019                     	ds	1
   831  00001A                     ___ftpack@exp:
   832                           	opt stack 0
   833  00001A                     Delay@x:
   834                           	opt stack 0
   835  00001A                     frexp@eptr:
   836                           	opt stack 0
   837  00001A                     __div_to_l_@f2:
   838                           	opt stack 0
   839  00001A                     __tdiv_to_l_@f2:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x19
   843  00001A                     	ds	1
   844  00001B                     ??_SetBypas:
   845  00001B                     ___awmod@counter:
   846                           	opt stack 0
   847  00001B                     ___ftpack@sign:
   848                           	opt stack 0
   849  00001B                     ___lldiv@divisor:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0x1A
   853  00001B                     	ds	1
   854  00001C                     ??___ftpack:
   855  00001C                     ??_frexp:
   856  00001C                     ___awmod@sign:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x1B
   860  00001C                     	ds	1
   861  00001D                     ??__tdiv_to_l_:
   862  00001D                     ?___awdiv:
   863                           	opt stack 0
   864  00001D                     ___awdiv@dividend:
   865                           	opt stack 0
   866  00001D                     __div_to_l_@quot:
   867                           	opt stack 0
   868                           
   869                           ; 4 bytes @ 0x1C
   870  00001D                     	ds	2
   871  00001F                     ?___awtoft:
   872                           	opt stack 0
   873  00001F                     ?___lltoft:
   874                           	opt stack 0
   875  00001F                     ___awdiv@divisor:
   876                           	opt stack 0
   877  00001F                     ___awtoft@c:
   878                           	opt stack 0
   879  00001F                     ___lldiv@quotient:
   880                           	opt stack 0
   881  00001F                     ___lltoft@c:
   882                           	opt stack 0
   883                           
   884                           ; 4 bytes @ 0x1E
   885  00001F                     	ds	1
   886  000020                     __tdiv_to_l_@quot:
   887                           	opt stack 0
   888                           
   889                           ; 4 bytes @ 0x1F
   890  000020                     	ds	1
   891  000021                     ___awdiv@counter:
   892                           	opt stack 0
   893  000021                     __div_to_l_@cntr:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x20
   897  000021                     	ds	1
   898  000022                     ___awdiv@sign:
   899                           	opt stack 0
   900  000022                     ___awtoft@sign:
   901                           	opt stack 0
   902  000022                     __div_to_l_@exp1:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x21
   906  000022                     	ds	1
   907  000023                     ??___lltoft:
   908  000023                     ?___ftdiv:
   909                           	opt stack 0
   910  000023                     ___lldiv@counter:
   911                           	opt stack 0
   912  000023                     ___awdiv@quotient:
   913                           	opt stack 0
   914  000023                     ___ftdiv@f1:
   915                           	opt stack 0
   916                           
   917                           ; 3 bytes @ 0x22
   918  000023                     	ds	1
   919  000024                     ?___llmod:
   920                           	opt stack 0
   921  000024                     __tdiv_to_l_@cntr:
   922                           	opt stack 0
   923  000024                     ___llmod@dividend:
   924                           	opt stack 0
   925                           
   926                           ; 4 bytes @ 0x23
   927  000024                     	ds	1
   928  000025                     ?___wmul:
   929                           	opt stack 0
   930  000025                     __tdiv_to_l_@exp1:
   931                           	opt stack 0
   932  000025                     ___wmul@multiplier:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x24
   936  000025                     	ds	1
   937  000026                     ___ftdiv@f2:
   938                           	opt stack 0
   939                           
   940                           ; 3 bytes @ 0x25
   941  000026                     	ds	1
   942  000027                     ___lltoft@exp:
   943                           	opt stack 0
   944  000027                     ___wmul@multiplicand:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x26
   948  000027                     	ds	1
   949  000028                     ___llmod@divisor:
   950                           	opt stack 0
   951                           
   952                           ; 4 bytes @ 0x27
   953  000028                     	ds	1
   954  000029                     ??___ftdiv:
   955  000029                     ___wmul@product:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x28
   959  000029                     	ds	2
   960  00002B                     ?_Battery_Get:
   961                           	opt stack 0
   962  00002B                     ?_Tempeture_Get:
   963                           	opt stack 0
   964  00002B                     Battery_Get@channelnum:
   965                           	opt stack 0
   966  00002B                     Tempeture_Get@channelnum:
   967                           	opt stack 0
   968  00002B                     ___ftge@ff1:
   969                           	opt stack 0
   970                           
   971                           ; 3 bytes @ 0x2A
   972  00002B                     	ds	1
   973  00002C                     ___ftdiv@cntr:
   974                           	opt stack 0
   975  00002C                     ___llmod@counter:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x2B
   979  00002C                     	ds	1
   980  00002D                     ___ftdiv@f3:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x2C
   984  00002D                     	ds	1
   985  00002E                     ___ftge@ff2:
   986                           	opt stack 0
   987                           
   988                           ; 3 bytes @ 0x2D
   989  00002E                     	ds	2
   990  000030                     ___ftdiv@exp:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x2F
   994  000030                     	ds	1
   995  000031                     ??___ftge:
   996  000031                     ___ftdiv@sign:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x30
  1000  000031                     	ds	1
  1001  000032                     ?___ftmul:
  1002                           	opt stack 0
  1003  000032                     ___ftmul@f1:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x31
  1007  000032                     	ds	2
  1008  000034                     Battery_Fault@fault:
  1009                           	opt stack 0
  1010  000034                     RunBypas@cellbyp:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x33
  1014  000034                     	ds	1
  1015  000035                     Battery_Fault@i:
  1016                           	opt stack 0
  1017  000035                     ___ftmul@f2:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0x34
  1021  000035                     	ds	1
  1022  000036                     RunBypas@batvolt:
  1023                           	opt stack 0
  1024                           
  1025                           ; 3 bytes @ 0x35
  1026  000036                     	ds	2
  1027  000038                     ??___ftmul:
  1028                           
  1029                           ; 0 bytes @ 0x37
  1030  000038                     	ds	1
  1031  000039                     RunBypas@i:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x38
  1035  000039                     	ds	2
  1036  00003B                     tblptru	equ	0xFF8
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           
  1040                           ; 0 bytes @ 0x3A
  1041 ;;
  1042 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1043 ;;
  1044 ;; *************** function _main *****************
  1045 ;; Defined at:
  1046 ;;		line 33 in file "Main.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;  argc            2   56[BANK0 ] int 
  1049 ;;  argv            3   58[BANK0 ] PTR PTR unsigned char 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  x               2   63[BANK0 ] int 
  1052 ;;  x               2   61[BANK0 ] int 
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  2   56[BANK0 ] int 
  1055 ;; Registers used:
  1056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1062 ;;      Params:         0       5       0       0       0       0       0
  1063 ;;      Locals:         0       4       0       0       0       0       0
  1064 ;;      Temps:          0       0       0       0       0       0       0
  1065 ;;      Totals:         0       9       0       0       0       0       0
  1066 ;;Total ram usage:        9 bytes
  1067 ;; Hardware stack levels required when called:    9
  1068 ;; This function calls:
  1069 ;;		_Battery_Convert
  1070 ;;		_Battery_Fault
  1071 ;;		_Battery_Get
  1072 ;;		_Delay
  1073 ;;		_RunBypas
  1074 ;;		_SYSTEM_Initialize
  1075 ;;		_Temp_Convert
  1076 ;;		_Tempeture_Get
  1077 ;;		_printf
  1078 ;; This function is called by:
  1079 ;;		Startup code after reset
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text0
  1084  0026B4                     __ptext0:
  1085                           	opt stack 0
  1086  0026B4                     _main:
  1087                           	opt stack 22
  1088                           
  1089                           ;Main.c: 35: SYSTEM_Initialize();
  1090                           
  1091                           ;incstack = 0
  1092  0026B4  EC7B  F01B         	call	_SYSTEM_Initialize	;wreg free
  1093  0026B8  D000               	goto	l5856
  1094  0026BA                     l5856:
  1095  0026BA  868C               	bsf	3980,3,c	;volatile
  1096  0026BC  D000               	goto	l5858
  1097  0026BE                     l5858:
  1098                           
  1099                           ;Main.c: 38: Delay(120);
  1100  0026BE  0E00               	movlw	0
  1101  0026C0  6E18               	movwf	Delay@wait+1,c
  1102  0026C2  0E78               	movlw	120
  1103  0026C4  6E17               	movwf	Delay@wait,c
  1104  0026C6  ECA2  F01A         	call	_Delay	;wreg free
  1105  0026CA  D000               	goto	l5860
  1106  0026CC                     l5860:
  1107  0026CC  968C               	bcf	3980,3,c	;volatile
  1108  0026CE  D000               	goto	l5862
  1109  0026D0                     l5862:
  1110                           
  1111                           ;Main.c: 57: (INTCONbits.GIE = 1);
  1112  0026D0  8EF2               	bsf	intcon,7,c	;volatile
  1113                           
  1114                           ;Main.c: 60: (INTCONbits.PEIE = 1);
  1115  0026D2  8CF2               	bsf	intcon,6,c	;volatile
  1116  0026D4  D000               	goto	l5866
  1117  0026D6                     l5866:
  1118                           
  1119                           ;Main.c: 70: {
  1120                           ;Main.c: 71: if (Temp_Done)
  1121  0026D6  0100               	movlb	0	; () banked
  1122  0026D8  51A2               	movf	_Temp_Done& (0+255),w,b
  1123  0026DA  0100               	movlb	0	; () banked
  1124  0026DC  11A3               	iorwf	(_Temp_Done+1)& (0+255),w,b
  1125  0026DE  B4D8               	btfsc	status,2,c
  1126  0026E0  D03C               	goto	l5884
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;Main.c: 72: {
  1130                           ;Main.c: 73: Temp_Done = 0;
  1131  0026E2  0E00               	movlw	0
  1132  0026E4  0100               	movlb	0	; () banked
  1133  0026E6  6FA3               	movwf	(_Temp_Done+1)& (0+255),b
  1134  0026E8  0E00               	movlw	0
  1135  0026EA  6FA2               	movwf	_Temp_Done& (0+255),b
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;Main.c: 74: Temp_Convert();
  1139  0026EC  ECA1  F00F         	call	_Temp_Convert	;wreg free
  1140                           
  1141                           ;Main.c: 76: for (int x = 0;x<7;x++)
  1142  0026F0  0E00               	movlw	0
  1143  0026F2  0100               	movlb	0	; () banked
  1144  0026F4  6FFA               	movwf	(main@x+1)& (0+255),b
  1145  0026F6  0E00               	movlw	0
  1146  0026F8  6FF9               	movwf	main@x& (0+255),b
  1147  0026FA                     l5874:
  1148                           
  1149                           ; BSR set to: 0
  1150  0026FA  0100               	movlb	0	; () banked
  1151  0026FC  BFFA               	btfsc	(main@x+1)& (0+255),7,b
  1152  0026FE  D00A               	goto	l5878
  1153  002700  0100               	movlb	0	; () banked
  1154  002702  51FA               	movf	(main@x+1)& (0+255),w,b
  1155  002704  E12A               	bnz	l5884
  1156  002706  0E07               	movlw	7
  1157  002708  0100               	movlb	0	; () banked
  1158  00270A  5DF9               	subwf	main@x& (0+255),w,b
  1159  00270C  B0D8               	btfsc	status,0,c
  1160  00270E  D025               	goto	l5884
  1161  002710  D001               	goto	l5878
  1162                           
  1163                           ; BSR set to: 0
  1164  002712  D023               	goto	l5884
  1165  002714                     l5878:
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;Main.c: 77: {
  1169                           ;Main.c: 78: printf("Battery  temp %d = %0.02f \r\n", x+1,Tempeture_Get(x));
  1170  002714  0E92               	movlw	low STR_1
  1171  002716  0100               	movlb	0	; () banked
  1172  002718  6FDE               	movwf	printf@f& (0+255),b
  1173  00271A  0E06               	movlw	high STR_1
  1174  00271C  0100               	movlb	0	; () banked
  1175  00271E  6FDF               	movwf	(printf@f+1)& (0+255),b
  1176  002720  0E01               	movlw	1
  1177  002722  0100               	movlb	0	; () banked
  1178  002724  25F9               	addwf	main@x& (0+255),w,b
  1179  002726  0100               	movlb	0	; () banked
  1180  002728  6FE0               	movwf	(?_printf+2)& (0+255),b
  1181  00272A  0E00               	movlw	0
  1182  00272C  0100               	movlb	0	; () banked
  1183  00272E  21FA               	addwfc	(main@x+1)& (0+255),w,b
  1184  002730  0100               	movlb	0	; () banked
  1185  002732  6FE1               	movwf	(?_printf+3)& (0+255),b
  1186  002734  C0F9  F02B         	movff	main@x,Tempeture_Get@channelnum
  1187  002738  C0FA  F02C         	movff	main@x+1,Tempeture_Get@channelnum+1
  1188  00273C  ECD4  F01A         	call	_Tempeture_Get	;wreg free
  1189  002740  C02B  F0E2         	movff	?_Tempeture_Get,?_printf+4
  1190  002744  C02C  F0E3         	movff	?_Tempeture_Get+1,?_printf+5
  1191  002748  C02D  F0E4         	movff	?_Tempeture_Get+2,?_printf+6
  1192  00274C  EC64  F003         	call	_printf	;wreg free
  1193  002750  0100               	movlb	0	; () banked
  1194  002752  4BF9               	infsnz	main@x& (0+255),f,b
  1195  002754  2BFA               	incf	(main@x+1)& (0+255),f,b
  1196  002756  D7D1               	goto	l5874
  1197                           
  1198                           ; BSR set to: 0
  1199                           
  1200                           ; BSR set to: 0
  1201  002758  D000               	goto	l5884
  1202  00275A                     l5884:
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;Main.c: 79: }
  1206                           ;Main.c: 80: }
  1207                           ;Main.c: 81: if (Volt_Done)
  1208  00275A  0100               	movlb	0	; () banked
  1209  00275C  51A4               	movf	_Volt_Done& (0+255),w,b
  1210  00275E  0100               	movlb	0	; () banked
  1211  002760  11A5               	iorwf	(_Volt_Done+1)& (0+255),w,b
  1212  002762  B4D8               	btfsc	status,2,c
  1213  002764  D7B8               	goto	l5866
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;Main.c: 82: {
  1217                           ;Main.c: 83: Volt_Done = 0;
  1218  002766  0E00               	movlw	0
  1219  002768  0100               	movlb	0	; () banked
  1220  00276A  6FA5               	movwf	(_Volt_Done+1)& (0+255),b
  1221  00276C  0E00               	movlw	0
  1222  00276E  6FA4               	movwf	_Volt_Done& (0+255),b
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;Main.c: 84: Battery_Convert();
  1226  002770  ECDC  F016         	call	_Battery_Convert	;wreg free
  1227                           
  1228                           ;Main.c: 85: Battery_Fault();
  1229  002774  EC90  F017         	call	_Battery_Fault	;wreg free
  1230                           
  1231                           ;Main.c: 86: for (int x = 0;x<7;x++)
  1232  002778  0E00               	movlw	0
  1233  00277A  0100               	movlb	0	; () banked
  1234  00277C  6FFC               	movwf	(main@x_966+1)& (0+255),b
  1235  00277E  0E00               	movlw	0
  1236  002780  6FFB               	movwf	main@x_966& (0+255),b
  1237  002782                     l5894:
  1238                           
  1239                           ; BSR set to: 0
  1240  002782  0100               	movlb	0	; () banked
  1241  002784  BFFC               	btfsc	(main@x_966+1)& (0+255),7,b
  1242  002786  D00A               	goto	l5898
  1243  002788  0100               	movlb	0	; () banked
  1244  00278A  51FC               	movf	(main@x_966+1)& (0+255),w,b
  1245  00278C  E12A               	bnz	l5904
  1246  00278E  0E07               	movlw	7
  1247  002790  0100               	movlb	0	; () banked
  1248  002792  5DFB               	subwf	main@x_966& (0+255),w,b
  1249  002794  B0D8               	btfsc	status,0,c
  1250  002796  D025               	goto	l5904
  1251  002798  D001               	goto	l5898
  1252                           
  1253                           ; BSR set to: 0
  1254  00279A  D023               	goto	l5904
  1255  00279C                     l5898:
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;Main.c: 87: {
  1259                           ;Main.c: 88: printf("Battery %d = %0.02f \r\n", x+1,Battery_Get(x));
  1260  00279C  0EAF               	movlw	low STR_2
  1261  00279E  0100               	movlb	0	; () banked
  1262  0027A0  6FDE               	movwf	printf@f& (0+255),b
  1263  0027A2  0E06               	movlw	high STR_2
  1264  0027A4  0100               	movlb	0	; () banked
  1265  0027A6  6FDF               	movwf	(printf@f+1)& (0+255),b
  1266  0027A8  0E01               	movlw	1
  1267  0027AA  0100               	movlb	0	; () banked
  1268  0027AC  25FB               	addwf	main@x_966& (0+255),w,b
  1269  0027AE  0100               	movlb	0	; () banked
  1270  0027B0  6FE0               	movwf	(?_printf+2)& (0+255),b
  1271  0027B2  0E00               	movlw	0
  1272  0027B4  0100               	movlb	0	; () banked
  1273  0027B6  21FC               	addwfc	(main@x_966+1)& (0+255),w,b
  1274  0027B8  0100               	movlb	0	; () banked
  1275  0027BA  6FE1               	movwf	(?_printf+3)& (0+255),b
  1276  0027BC  C0FB  F02B         	movff	main@x_966,Battery_Get@channelnum
  1277  0027C0  C0FC  F02C         	movff	main@x_966+1,Battery_Get@channelnum+1
  1278  0027C4  ECEC  F01A         	call	_Battery_Get	;wreg free
  1279  0027C8  C02B  F0E2         	movff	?_Battery_Get,?_printf+4
  1280  0027CC  C02C  F0E3         	movff	?_Battery_Get+1,?_printf+5
  1281  0027D0  C02D  F0E4         	movff	?_Battery_Get+2,?_printf+6
  1282  0027D4  EC64  F003         	call	_printf	;wreg free
  1283  0027D8  0100               	movlb	0	; () banked
  1284  0027DA  4BFB               	infsnz	main@x_966& (0+255),f,b
  1285  0027DC  2BFC               	incf	(main@x_966+1)& (0+255),f,b
  1286  0027DE  D7D1               	goto	l5894
  1287                           
  1288                           ; BSR set to: 0
  1289  0027E0  D000               	goto	l5904
  1290  0027E2                     l5904:
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;Main.c: 89: }
  1294                           ;Main.c: 90: RunBypas();
  1295  0027E2  EC0E  F016         	call	_RunBypas	;wreg free
  1296  0027E6  D777               	goto	l5866
  1297                           
  1298                           ;Main.c: 91: }
  1299                           ;Main.c: 115: }
  1300                           ;Main.c: 116: return (0);
  1301                           ;	Return value of _main is never used
  1302  0027E8  EF55  F000         	goto	start
  1303  0027EC                     __end_of_main:
  1304                           	opt stack 0
  1305                           tblptru	equ	0xFF8
  1306                           intcon	equ	0xFF2
  1307                           postinc0	equ	0xFEE
  1308                           wreg	equ	0xFE8
  1309                           status	equ	0xFD8
  1310                           
  1311 ;; *************** function _printf *****************
  1312 ;; Defined at:
  1313 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  1316 ;;		 -> STR_2(23), STR_1(29), 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  val             4    9[BANK2 ] unsigned long 
  1319 ;;  tmpval          4    5[BANK2 ] struct .
  1320 ;;  fval            3   19[BANK2 ] struct .
  1321 ;;  cp              3    0        PTR const unsigned char 
  1322 ;;  prec            2   22[BANK2 ] int 
  1323 ;;  width           2   17[BANK2 ] int 
  1324 ;;  flag            2   15[BANK2 ] unsigned short 
  1325 ;;  exp             2   13[BANK2 ] int 
  1326 ;;  ap              2    3[BANK2 ] PTR void [1]
  1327 ;;		 -> ?_printf(2), 
  1328 ;;  len             2    0        unsigned int 
  1329 ;;  c               1   24[BANK2 ] char 
  1330 ;;  d               1    0        unsigned char 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  2   34[BANK0 ] int 
  1333 ;; Registers used:
  1334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1340 ;;      Params:         0       7       0       0       0       0       0
  1341 ;;      Locals:         0       0       0      25       0       0       0
  1342 ;;      Temps:          0       6       0       0       0       0       0
  1343 ;;      Totals:         0      13       0      25       0       0       0
  1344 ;;Total ram usage:       38 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    7
  1347 ;; This function calls:
  1348 ;;		___awdiv
  1349 ;;		___ftadd
  1350 ;;		___ftge
  1351 ;;		___ftmul
  1352 ;;		___ftneg
  1353 ;;		___ftsub
  1354 ;;		___fttol
  1355 ;;		___lldiv
  1356 ;;		___llmod
  1357 ;;		___lltoft
  1358 ;;		___wmul
  1359 ;;		__div_to_l_
  1360 ;;		__tdiv_to_l_
  1361 ;;		_fround
  1362 ;;		_isdigit
  1363 ;;		_putch
  1364 ;;		_scale
  1365 ;; This function is called by:
  1366 ;;		_main
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text1
  1371  0006C8                     __ptext1:
  1372                           	opt stack 0
  1373  0006C8                     _printf:
  1374                           	opt stack 23
  1375                           
  1376                           ;doprnt.c: 466: va_list ap;
  1377                           ;doprnt.c: 499: signed char c;
  1378                           ;doprnt.c: 501: int width;
  1379                           ;doprnt.c: 504: int prec;
  1380                           ;doprnt.c: 508: unsigned short flag;
  1381                           ;doprnt.c: 515: char d;
  1382                           ;doprnt.c: 516: double fval;
  1383                           ;doprnt.c: 517: int exp;
  1384                           ;doprnt.c: 523: union {
  1385                           ;doprnt.c: 524: unsigned long vd;
  1386                           ;doprnt.c: 525: double integ;
  1387                           ;doprnt.c: 526: } tmpval;
  1388                           ;doprnt.c: 528: unsigned long val;
  1389                           ;doprnt.c: 529: unsigned len;
  1390                           ;doprnt.c: 530: const char * cp;
  1391                           ;doprnt.c: 533: *ap = __va_start();
  1392                           
  1393                           ;incstack = 0
  1394  0006C8  0EE0               	movlw	low (?_printf+2)
  1395  0006CA  0102               	movlb	2	; () banked
  1396  0006CC  6F03               	movwf	printf@ap& (0+255),b
  1397  0006CE  0E00               	movlw	high (?_printf+2)
  1398  0006D0  0102               	movlb	2	; () banked
  1399  0006D2  6F04               	movwf	(printf@ap+1)& (0+255),b
  1400                           
  1401                           ;doprnt.c: 536: while(c = *f++) {
  1402  0006D4  EF81  F009         	goto	l5766
  1403  0006D8                     l5472:
  1404                           
  1405                           ; BSR set to: 2
  1406                           ;doprnt.c: 538: if(c != '%')
  1407  0006D8  0E25               	movlw	37
  1408  0006DA  0102               	movlb	2	; () banked
  1409  0006DC  1918               	xorwf	printf@c& (0+255),w,b
  1410  0006DE  B4D8               	btfsc	status,2,c
  1411  0006E0  D006               	goto	l5476
  1412                           
  1413                           ; BSR set to: 2
  1414                           ;doprnt.c: 540: {
  1415                           ;doprnt.c: 541: (putch(c) );
  1416  0006E2  0102               	movlb	2	; () banked
  1417  0006E4  5118               	movf	printf@c& (0+255),w,b
  1418  0006E6  ECD1  F01B         	call	_putch
  1419                           
  1420                           ;doprnt.c: 542: continue;
  1421  0006EA  EF81  F009         	goto	l5766
  1422  0006EE                     l5476:
  1423                           
  1424                           ;doprnt.c: 543: }
  1425                           ;doprnt.c: 546: width = 0;
  1426  0006EE  0E00               	movlw	0
  1427  0006F0  0102               	movlb	2	; () banked
  1428  0006F2  6F12               	movwf	(printf@width+1)& (0+255),b
  1429  0006F4  0E00               	movlw	0
  1430  0006F6  6F11               	movwf	printf@width& (0+255),b
  1431                           
  1432                           ;doprnt.c: 548: flag = 0;
  1433  0006F8  0E00               	movlw	0
  1434  0006FA  0102               	movlb	2	; () banked
  1435  0006FC  6F10               	movwf	(printf@flag+1)& (0+255),b
  1436  0006FE  0E00               	movlw	0
  1437  000700  6F0F               	movwf	printf@flag& (0+255),b
  1438                           
  1439                           ; BSR set to: 2
  1440                           ;doprnt.c: 551: switch(*f) {
  1441                           
  1442                           ;doprnt.c: 550: for(;;) {
  1443  000702  D007               	goto	l5482
  1444  000704                     l5478:
  1445                           
  1446                           ;doprnt.c: 580: flag |= 0x04;
  1447  000704  0102               	movlb	2	; () banked
  1448  000706  850F               	bsf	printf@flag& (0+255),2,b
  1449                           
  1450                           ;doprnt.c: 581: f++;
  1451  000708  0100               	movlb	0	; () banked
  1452  00070A  4BDE               	infsnz	printf@f& (0+255),f,b
  1453  00070C  2BDF               	incf	(printf@f+1)& (0+255),f,b
  1454                           
  1455                           ;doprnt.c: 582: continue;
  1456  00070E  D001               	goto	l5482
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;doprnt.c: 584: }
  1460  000710  D00B               	goto	l5484
  1461  000712                     l5482:
  1462  000712  C0DE  FFF6         	movff	printf@f,tblptrl
  1463  000716  C0DF  FFF7         	movff	printf@f+1,tblptrh
  1464  00071A                     	if	0	;tblptru may be non-zero
  1465  00071A                     	endif
  1466  00071A                     	if	0	;tblptru may be non-zero
  1467  00071A                     	endif
  1468  00071A  0008               	tblrd		*
  1469  00071C  50F5               	movf	tablat,w,c
  1470                           
  1471                           ; Switch size 1, requested type "space"
  1472                           ; Number of cases is 1, Range of values is 48 to 48
  1473                           ; switch strategies available:
  1474                           ; Name         Instructions Cycles
  1475                           ; simple_byte            4     3 (average)
  1476                           ;	Chosen strategy is simple_byte
  1477  00071E  0A30               	xorlw	48	; case 48
  1478  000720  B4D8               	btfsc	status,2,c
  1479  000722  D7F0               	goto	l5478
  1480                           
  1481                           ;doprnt.c: 585: break;
  1482  000724  D001               	goto	l5484
  1483                           
  1484                           ;doprnt.c: 586: }
  1485  000726  D7F5               	goto	l5482
  1486  000728                     l5484:
  1487                           
  1488                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1489  000728  C0DE  FFF6         	movff	printf@f,tblptrl
  1490  00072C  C0DF  FFF7         	movff	printf@f+1,tblptrh
  1491  000730                     	if	0	;tblptru may be non-zero
  1492  000730                     	endif
  1493  000730                     	if	0	;tblptru may be non-zero
  1494  000730                     	endif
  1495  000730  0008               	tblrd		*
  1496  000732  50F5               	movf	tablat,w,c
  1497  000734  EC59  F01B         	call	_isdigit
  1498  000738  A0D8               	btfss	status,0,c
  1499  00073A  D042               	goto	l5496
  1500                           
  1501                           ;doprnt.c: 598: width = 0;
  1502  00073C  0E00               	movlw	0
  1503  00073E  0102               	movlb	2	; () banked
  1504  000740  6F12               	movwf	(printf@width+1)& (0+255),b
  1505  000742  0E00               	movlw	0
  1506  000744  6F11               	movwf	printf@width& (0+255),b
  1507  000746  D000               	goto	l5488
  1508  000748                     l5488:
  1509                           
  1510                           ;doprnt.c: 600: width *= 10;
  1511  000748  C211  F025         	movff	printf@width,___wmul@multiplier
  1512  00074C  C212  F026         	movff	printf@width+1,___wmul@multiplier+1
  1513  000750  0E00               	movlw	0
  1514  000752  6E28               	movwf	___wmul@multiplicand+1,c
  1515  000754  0E0A               	movlw	10
  1516  000756  6E27               	movwf	___wmul@multiplicand,c
  1517  000758  EC33  F01B         	call	___wmul	;wreg free
  1518  00075C  C025  F211         	movff	?___wmul,printf@width
  1519  000760  C026  F212         	movff	?___wmul+1,printf@width+1
  1520                           
  1521                           ;doprnt.c: 601: width += *f++ - '0';
  1522  000764  0ED0               	movlw	208
  1523  000766  0100               	movlb	0	; () banked
  1524  000768  6FE5               	movwf	??_printf& (0+255),b
  1525  00076A  0EFF               	movlw	255
  1526  00076C  0100               	movlb	0	; () banked
  1527  00076E  6FE6               	movwf	(??_printf+1)& (0+255),b
  1528  000770  C0DE  FFF6         	movff	printf@f,tblptrl
  1529  000774  C0DF  FFF7         	movff	printf@f+1,tblptrh
  1530  000778                     	if	0	;tblptru may be non-zero
  1531  000778                     	endif
  1532  000778                     	if	0	;tblptru may be non-zero
  1533  000778                     	endif
  1534  000778  0008               	tblrd		*
  1535  00077A  50F5               	movf	tablat,w,c
  1536  00077C  0100               	movlb	0	; () banked
  1537  00077E  6FE7               	movwf	(??_printf+2)& (0+255),b
  1538  000780  6BE8               	clrf	(??_printf+3)& (0+255),b
  1539  000782  0100               	movlb	0	; () banked
  1540  000784  51E5               	movf	??_printf& (0+255),w,b
  1541  000786  0100               	movlb	0	; () banked
  1542  000788  27E7               	addwf	(??_printf+2)& (0+255),f,b
  1543  00078A  0100               	movlb	0	; () banked
  1544  00078C  51E6               	movf	(??_printf+1)& (0+255),w,b
  1545  00078E  0100               	movlb	0	; () banked
  1546  000790  23E8               	addwfc	(??_printf+3)& (0+255),f,b
  1547  000792  0100               	movlb	0	; () banked
  1548  000794  51E7               	movf	(??_printf+2)& (0+255),w,b
  1549  000796  0102               	movlb	2	; () banked
  1550  000798  2711               	addwf	printf@width& (0+255),f,b
  1551  00079A  0100               	movlb	0	; () banked
  1552  00079C  51E8               	movf	(??_printf+3)& (0+255),w,b
  1553  00079E  0102               	movlb	2	; () banked
  1554  0007A0  2312               	addwfc	(printf@width+1)& (0+255),f,b
  1555                           
  1556                           ; BSR set to: 2
  1557  0007A2  0100               	movlb	0	; () banked
  1558  0007A4  4BDE               	infsnz	printf@f& (0+255),f,b
  1559  0007A6  2BDF               	incf	(printf@f+1)& (0+255),f,b
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1563  0007A8  C0DE  FFF6         	movff	printf@f,tblptrl
  1564  0007AC  C0DF  FFF7         	movff	printf@f+1,tblptrh
  1565  0007B0                     	if	0	;tblptru may be non-zero
  1566  0007B0                     	endif
  1567  0007B0                     	if	0	;tblptru may be non-zero
  1568  0007B0                     	endif
  1569  0007B0  0008               	tblrd		*
  1570  0007B2  50F5               	movf	tablat,w,c
  1571  0007B4  EC59  F01B         	call	_isdigit
  1572  0007B8  A0D8               	btfss	status,0,c
  1573  0007BA  D002               	goto	l5496
  1574  0007BC  D7C5               	goto	l5488
  1575  0007BE  D000               	goto	l5496
  1576  0007C0                     l5496:
  1577                           
  1578                           ;doprnt.c: 608: }
  1579                           ;doprnt.c: 611: if(*f == '.') {
  1580  0007C0  C0DE  FFF6         	movff	printf@f,tblptrl
  1581  0007C4  C0DF  FFF7         	movff	printf@f+1,tblptrh
  1582  0007C8                     	if	0	;tblptru may be non-zero
  1583  0007C8                     	endif
  1584  0007C8                     	if	0	;tblptru may be non-zero
  1585  0007C8                     	endif
  1586  0007C8  0008               	tblrd		*
  1587  0007CA  50F5               	movf	tablat,w,c
  1588  0007CC  0A2E               	xorlw	46
  1589  0007CE  A4D8               	btfss	status,2,c
  1590  0007D0  D036               	goto	l5508
  1591                           
  1592                           ;doprnt.c: 612: flag |= 0x4000;
  1593  0007D2  0102               	movlb	2	; () banked
  1594  0007D4  8D10               	bsf	(printf@flag+1)& (0+255),6,b
  1595                           
  1596                           ;doprnt.c: 613: f++;
  1597  0007D6  0100               	movlb	0	; () banked
  1598  0007D8  4BDE               	infsnz	printf@f& (0+255),f,b
  1599  0007DA  2BDF               	incf	(printf@f+1)& (0+255),f,b
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;doprnt.c: 620: {
  1603                           ;doprnt.c: 621: prec = 0;
  1604  0007DC  0E00               	movlw	0
  1605  0007DE  0102               	movlb	2	; () banked
  1606  0007E0  6F17               	movwf	(printf@prec+1)& (0+255),b
  1607  0007E2  0E00               	movlw	0
  1608  0007E4  6F16               	movwf	printf@prec& (0+255),b
  1609                           
  1610                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1611  0007E6  D01F               	goto	l5506
  1612  0007E8                     l5502:
  1613                           
  1614                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1615  0007E8  C216  F025         	movff	printf@prec,___wmul@multiplier
  1616  0007EC  C217  F026         	movff	printf@prec+1,___wmul@multiplier+1
  1617  0007F0  0E00               	movlw	0
  1618  0007F2  6E28               	movwf	___wmul@multiplicand+1,c
  1619  0007F4  0E0A               	movlw	10
  1620  0007F6  6E27               	movwf	___wmul@multiplicand,c
  1621  0007F8  EC33  F01B         	call	___wmul	;wreg free
  1622  0007FC  C0DE  FFF6         	movff	printf@f,tblptrl
  1623  000800  C0DF  FFF7         	movff	printf@f+1,tblptrh
  1624  000804                     	if	0	;tblptru may be non-zero
  1625  000804                     	endif
  1626  000804                     	if	0	;tblptru may be non-zero
  1627  000804                     	endif
  1628  000804  0008               	tblrd		*
  1629  000806  50F5               	movf	tablat,w,c
  1630  000808  2625               	addwf	?___wmul,f,c
  1631  00080A  0E00               	movlw	0
  1632  00080C  2226               	addwfc	?___wmul+1,f,c
  1633  00080E  0ED0               	movlw	208
  1634  000810  2425               	addwf	?___wmul,w,c
  1635  000812  0102               	movlb	2	; () banked
  1636  000814  6F16               	movwf	printf@prec& (0+255),b
  1637  000816  0EFF               	movlw	255
  1638  000818  2026               	addwfc	?___wmul+1,w,c
  1639  00081A  0102               	movlb	2	; () banked
  1640  00081C  6F17               	movwf	(printf@prec+1)& (0+255),b
  1641                           
  1642                           ; BSR set to: 2
  1643  00081E  0100               	movlb	0	; () banked
  1644  000820  4BDE               	infsnz	printf@f& (0+255),f,b
  1645  000822  2BDF               	incf	(printf@f+1)& (0+255),f,b
  1646  000824  D000               	goto	l5506
  1647  000826                     l5506:
  1648  000826  C0DE  FFF6         	movff	printf@f,tblptrl
  1649  00082A  C0DF  FFF7         	movff	printf@f+1,tblptrh
  1650  00082E                     	if	0	;tblptru may be non-zero
  1651  00082E                     	endif
  1652  00082E                     	if	0	;tblptru may be non-zero
  1653  00082E                     	endif
  1654  00082E  0008               	tblrd		*
  1655  000830  50F5               	movf	tablat,w,c
  1656  000832  EC59  F01B         	call	_isdigit
  1657  000836  A0D8               	btfss	status,0,c
  1658  000838  D011               	goto	l5516
  1659  00083A  D7D6               	goto	l5502
  1660                           
  1661                           ;doprnt.c: 624: }
  1662                           ;doprnt.c: 625: } else {
  1663  00083C  D00F               	goto	l5516
  1664  00083E                     l5508:
  1665                           
  1666                           ;doprnt.c: 626: prec = 0;
  1667  00083E  0E00               	movlw	0
  1668  000840  0102               	movlb	2	; () banked
  1669  000842  6F17               	movwf	(printf@prec+1)& (0+255),b
  1670  000844  0E00               	movlw	0
  1671  000846  6F16               	movwf	printf@prec& (0+255),b
  1672                           
  1673                           ; BSR set to: 2
  1674                           ;doprnt.c: 628: flag |= 0x1000;
  1675  000848  0102               	movlb	2	; () banked
  1676  00084A  8910               	bsf	(printf@flag+1)& (0+255),4,b
  1677                           
  1678                           ; BSR set to: 2
  1679                           ;doprnt.c: 630: }
  1680                           ;doprnt.c: 635: switch(c = *f++) {
  1681  00084C  D007               	goto	l5516
  1682                           
  1683                           ; BSR set to: 2
  1684                           ;doprnt.c: 638: goto alldone;
  1685                           
  1686                           ;doprnt.c: 637: case 0:
  1687  00084E  0012               	return	
  1688  000850                     l5512:
  1689                           
  1690                           ; BSR set to: 2
  1691                           ;doprnt.c: 663: flag |= 0x400;
  1692  000850  0102               	movlb	2	; () banked
  1693  000852  8510               	bsf	(printf@flag+1)& (0+255),2,b
  1694                           
  1695                           ; BSR set to: 2
  1696                           ;doprnt.c: 698: case 'i':
  1697                           ;doprnt.c: 699: break;
  1698                           
  1699                           ; BSR set to: 2
  1700                           
  1701                           ;doprnt.c: 697: case 'd':
  1702                           
  1703                           ;doprnt.c: 664: break;
  1704  000854  D01C               	goto	l5518
  1705                           
  1706                           ; BSR set to: 2
  1707                           ;doprnt.c: 813: continue;
  1708                           
  1709                           ;doprnt.c: 802: default:
  1710  000856  EF81  F009         	goto	l5766
  1711                           
  1712                           ; BSR set to: 2
  1713                           ;doprnt.c: 822: }
  1714  00085A  D019               	goto	l5518
  1715  00085C                     l5516:
  1716  00085C  C0DE  FFF6         	movff	printf@f,tblptrl
  1717  000860  C0DF  FFF7         	movff	printf@f+1,tblptrh
  1718  000864  0100               	movlb	0	; () banked
  1719  000866  4BDE               	infsnz	printf@f& (0+255),f,b
  1720  000868  2BDF               	incf	(printf@f+1)& (0+255),f,b
  1721  00086A                     	if	0	;tblptru may be non-zero
  1722  00086A                     	endif
  1723  00086A                     	if	0	;tblptru may be non-zero
  1724  00086A                     	endif
  1725  00086A  0008               	tblrd		*
  1726  00086C  CFF5 F218          	movff	tablat,printf@c
  1727  000870  0102               	movlb	2	; () banked
  1728  000872  5118               	movf	printf@c& (0+255),w,b
  1729                           
  1730                           ; Switch size 1, requested type "space"
  1731                           ; Number of cases is 4, Range of values is 0 to 105
  1732                           ; switch strategies available:
  1733                           ; Name         Instructions Cycles
  1734                           ; simple_byte           13     7 (average)
  1735                           ;	Chosen strategy is simple_byte
  1736  000874  0A00               	xorlw	0	; case 0
  1737  000876  B4D8               	btfsc	status,2,c
  1738  000878  0012               	return	
  1739  00087A  0A64               	xorlw	100	; case 100
  1740  00087C  B4D8               	btfsc	status,2,c
  1741  00087E  D007               	goto	l5518
  1742  000880  0A02               	xorlw	2	; case 102
  1743  000882  B4D8               	btfsc	status,2,c
  1744  000884  D7E5               	goto	l5512
  1745  000886  0A0F               	xorlw	15	; case 105
  1746  000888  A4D8               	btfss	status,2,c
  1747  00088A  EF81  F009         	goto	l5766
  1748  00088E                     l5518:
  1749                           
  1750                           ; BSR set to: 2
  1751                           ;doprnt.c: 825: if(flag & (0x700)) {
  1752  00088E  0E07               	movlw	7
  1753  000890  0102               	movlb	2	; () banked
  1754  000892  1510               	andwf	(printf@flag+1)& (0+255),w,b
  1755  000894  B4D8               	btfsc	status,2,c
  1756  000896  D3A2               	goto	l5680
  1757                           
  1758                           ; BSR set to: 2
  1759                           ;doprnt.c: 827: if(flag & 0x1000)
  1760  000898  0102               	movlb	2	; () banked
  1761  00089A  A910               	btfss	(printf@flag+1)& (0+255),4,b
  1762  00089C  D006               	goto	l5524
  1763                           
  1764                           ; BSR set to: 2
  1765                           ;doprnt.c: 829: prec = 6;
  1766  00089E  0E00               	movlw	0
  1767  0008A0  0102               	movlb	2	; () banked
  1768  0008A2  6F17               	movwf	(printf@prec+1)& (0+255),b
  1769  0008A4  0E06               	movlw	6
  1770  0008A6  6F16               	movwf	printf@prec& (0+255),b
  1771  0008A8  D000               	goto	l5524
  1772  0008AA                     l5524:
  1773                           
  1774                           ; BSR set to: 2
  1775                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1776  0008AA  C203  FFD9         	movff	printf@ap,fsr2l
  1777  0008AE  C204  FFDA         	movff	printf@ap+1,fsr2h
  1778  0008B2  CFDE F213          	movff	postinc2,printf@fval
  1779  0008B6  CFDE F214          	movff	postinc2,printf@fval+1
  1780  0008BA  CFDD F215          	movff	postdec2,printf@fval+2
  1781                           
  1782                           ; BSR set to: 2
  1783  0008BE  0E03               	movlw	3
  1784  0008C0  0102               	movlb	2	; () banked
  1785  0008C2  2703               	addwf	printf@ap& (0+255),f,b
  1786  0008C4  0E00               	movlw	0
  1787  0008C6  2304               	addwfc	(printf@ap+1)& (0+255),f,b
  1788                           
  1789                           ; BSR set to: 2
  1790                           ;doprnt.c: 831: if(fval < 0.0) {
  1791  0008C8  0102               	movlb	2	; () banked
  1792  0008CA  AF15               	btfss	(printf@fval+2)& (0+255),7,b
  1793  0008CC  D012               	goto	l5534
  1794                           
  1795                           ; BSR set to: 2
  1796                           ;doprnt.c: 832: fval = -fval;
  1797  0008CE  C213  F017         	movff	printf@fval,___ftneg@f1
  1798  0008D2  C214  F018         	movff	printf@fval+1,___ftneg@f1+1
  1799  0008D6  C215  F019         	movff	printf@fval+2,___ftneg@f1+2
  1800  0008DA  EC47  F01B         	call	___ftneg	;wreg free
  1801  0008DE  C017  F213         	movff	?___ftneg,printf@fval
  1802  0008E2  C018  F214         	movff	?___ftneg+1,printf@fval+1
  1803  0008E6  C019  F215         	movff	?___ftneg+2,printf@fval+2
  1804                           
  1805                           ;doprnt.c: 833: flag |= 0x03;
  1806  0008EA  0E03               	movlw	3
  1807  0008EC  0102               	movlb	2	; () banked
  1808  0008EE  130F               	iorwf	printf@flag& (0+255),f,b
  1809  0008F0  D000               	goto	l5534
  1810  0008F2                     l5534:
  1811                           
  1812                           ; BSR set to: 2
  1813                           ;doprnt.c: 834: }
  1814                           ;doprnt.c: 835: exp = 0;
  1815  0008F2  0E00               	movlw	0
  1816  0008F4  0102               	movlb	2	; () banked
  1817  0008F6  6F0E               	movwf	(printf@exp+1)& (0+255),b
  1818  0008F8  0E00               	movlw	0
  1819  0008FA  6F0D               	movwf	printf@exp& (0+255),b
  1820                           
  1821                           ; BSR set to: 2
  1822                           ;doprnt.c: 836: if( fval!=0) {
  1823  0008FC  0102               	movlb	2	; () banked
  1824  0008FE  5113               	movf	printf@fval& (0+255),w,b
  1825  000900  0102               	movlb	2	; () banked
  1826  000902  1114               	iorwf	(printf@fval+1)& (0+255),w,b
  1827  000904  0102               	movlb	2	; () banked
  1828  000906  1115               	iorwf	(printf@fval+2)& (0+255),w,b
  1829  000908  B4D8               	btfsc	status,2,c
  1830  00090A  D093               	goto	l5562
  1831                           
  1832                           ; BSR set to: 2
  1833                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1834  00090C  0E82               	movlw	130
  1835  00090E  0100               	movlb	0	; () banked
  1836  000910  6FE5               	movwf	??_printf& (0+255),b
  1837  000912  0EFF               	movlw	255
  1838  000914  0100               	movlb	0	; () banked
  1839  000916  6FE6               	movwf	(??_printf+1)& (0+255),b
  1840  000918  C213  F0E7         	movff	printf@fval,??_printf+2
  1841  00091C  C214  F0E8         	movff	printf@fval+1,??_printf+3
  1842  000920  C215  F0E9         	movff	printf@fval+2,??_printf+4
  1843  000924  C216  F0EA         	movff	printf@fval+3,??_printf+5
  1844  000928  0E10               	movlw	16
  1845  00092A  D006               	goto	u6000
  1846  00092C                     u6005:
  1847  00092C  0100               	movlb	0	; () banked
  1848  00092E  90D8               	bcf	status,0,c
  1849  000930  33EA               	rrcf	(??_printf+5)& (0+255),f,b
  1850  000932  33E9               	rrcf	(??_printf+4)& (0+255),f,b
  1851  000934  33E8               	rrcf	(??_printf+3)& (0+255),f,b
  1852  000936  33E7               	rrcf	(??_printf+2)& (0+255),f,b
  1853  000938                     u6000:
  1854  000938  2EE8               	decfsz	wreg,f,c
  1855  00093A  D7F8               	goto	u6005
  1856  00093C  0100               	movlb	0	; () banked
  1857  00093E  51E7               	movf	(??_printf+2)& (0+255),w,b
  1858  000940  0100               	movlb	0	; () banked
  1859  000942  25E5               	addwf	??_printf& (0+255),w,b
  1860  000944  0102               	movlb	2	; () banked
  1861  000946  6F0D               	movwf	printf@exp& (0+255),b
  1862  000948  0E00               	movlw	0
  1863  00094A  0100               	movlb	0	; () banked
  1864  00094C  21E6               	addwfc	(??_printf+1)& (0+255),w,b
  1865  00094E  0102               	movlb	2	; () banked
  1866  000950  6F0E               	movwf	(printf@exp+1)& (0+255),b
  1867                           
  1868                           ; BSR set to: 2
  1869                           ;doprnt.c: 838: exp--;
  1870  000952  0102               	movlb	2	; () banked
  1871  000954  070D               	decf	printf@exp& (0+255),f,b
  1872  000956  A0D8               	btfss	status,0,c
  1873  000958  070E               	decf	(printf@exp+1)& (0+255),f,b
  1874                           
  1875                           ; BSR set to: 2
  1876                           ;doprnt.c: 839: exp *= 3;
  1877  00095A  C20D  F025         	movff	printf@exp,___wmul@multiplier
  1878  00095E  C20E  F026         	movff	printf@exp+1,___wmul@multiplier+1
  1879  000962  0E00               	movlw	0
  1880  000964  6E28               	movwf	___wmul@multiplicand+1,c
  1881  000966  0E03               	movlw	3
  1882  000968  6E27               	movwf	___wmul@multiplicand,c
  1883  00096A  EC33  F01B         	call	___wmul	;wreg free
  1884  00096E  C025  F20D         	movff	?___wmul,printf@exp
  1885  000972  C026  F20E         	movff	?___wmul+1,printf@exp+1
  1886                           
  1887                           ;doprnt.c: 840: exp /= 10;
  1888  000976  C20D  F01D         	movff	printf@exp,___awdiv@dividend
  1889  00097A  C20E  F01E         	movff	printf@exp+1,___awdiv@dividend+1
  1890  00097E  0E00               	movlw	0
  1891  000980  6E20               	movwf	___awdiv@divisor+1,c
  1892  000982  0E0A               	movlw	10
  1893  000984  6E1F               	movwf	___awdiv@divisor,c
  1894  000986  ECE8  F017         	call	___awdiv	;wreg free
  1895  00098A  C01D  F20D         	movff	?___awdiv,printf@exp
  1896  00098E  C01E  F20E         	movff	?___awdiv+1,printf@exp+1
  1897                           
  1898                           ;doprnt.c: 841: if(exp < 0)
  1899  000992  0102               	movlb	2	; () banked
  1900  000994  AF0E               	btfss	(printf@exp+1)& (0+255),7,b
  1901  000996  D005               	goto	l5550
  1902                           
  1903                           ; BSR set to: 2
  1904                           ;doprnt.c: 842: exp--;
  1905  000998  0102               	movlb	2	; () banked
  1906  00099A  070D               	decf	printf@exp& (0+255),f,b
  1907  00099C  A0D8               	btfss	status,0,c
  1908  00099E  070E               	decf	(printf@exp+1)& (0+255),f,b
  1909  0009A0  D000               	goto	l5550
  1910  0009A2                     l5550:
  1911                           
  1912                           ; BSR set to: 2
  1913                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1914  0009A2  0102               	movlb	2	; () banked
  1915  0009A4  510D               	movf	printf@exp& (0+255),w,b
  1916  0009A6  0800               	sublw	0
  1917  0009A8  EC93  F009         	call	_scale
  1918  0009AC  C0C2  F205         	movff	?_scale,printf@tmpval
  1919  0009B0  C0C3  F206         	movff	?_scale+1,printf@tmpval+1
  1920  0009B4  C0C4  F207         	movff	?_scale+2,printf@tmpval+2
  1921                           
  1922                           ;doprnt.c: 847: tmpval.integ *= fval;
  1923  0009B8  C205  F032         	movff	printf@tmpval,___ftmul@f1
  1924  0009BC  C206  F033         	movff	printf@tmpval+1,___ftmul@f1+1
  1925  0009C0  C207  F034         	movff	printf@tmpval+2,___ftmul@f1+2
  1926  0009C4  C213  F035         	movff	printf@fval,___ftmul@f2
  1927  0009C8  C214  F036         	movff	printf@fval+1,___ftmul@f2+1
  1928  0009CC  C215  F037         	movff	printf@fval+2,___ftmul@f2+2
  1929  0009D0  EC90  F014         	call	___ftmul	;wreg free
  1930  0009D4  C032  F205         	movff	?___ftmul,printf@tmpval
  1931  0009D8  C033  F206         	movff	?___ftmul+1,printf@tmpval+1
  1932  0009DC  C034  F207         	movff	?___ftmul+2,printf@tmpval+2
  1933                           
  1934                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1935  0009E0  C205  F02B         	movff	printf@tmpval,___ftge@ff1
  1936  0009E4  C206  F02C         	movff	printf@tmpval+1,___ftge@ff1+1
  1937  0009E8  C207  F02D         	movff	printf@tmpval+2,___ftge@ff1+2
  1938  0009EC  0E00               	movlw	0
  1939  0009EE  6E2E               	movwf	___ftge@ff2,c
  1940  0009F0  0E80               	movlw	128
  1941  0009F2  6E2F               	movwf	___ftge@ff2+1,c
  1942  0009F4  0E3F               	movlw	63
  1943  0009F6  6E30               	movwf	___ftge@ff2+2,c
  1944  0009F8  EC33  F018         	call	___ftge	;wreg free
  1945  0009FC  B0D8               	btfsc	status,0,c
  1946  0009FE  D005               	goto	l5558
  1947                           
  1948                           ;doprnt.c: 849: exp--;
  1949  000A00  0102               	movlb	2	; () banked
  1950  000A02  070D               	decf	printf@exp& (0+255),f,b
  1951  000A04  A0D8               	btfss	status,0,c
  1952  000A06  070E               	decf	(printf@exp+1)& (0+255),f,b
  1953  000A08  D014               	goto	l5562
  1954  000A0A                     l5558:
  1955                           
  1956                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1957  000A0A  C205  F02B         	movff	printf@tmpval,___ftge@ff1
  1958  000A0E  C206  F02C         	movff	printf@tmpval+1,___ftge@ff1+1
  1959  000A12  C207  F02D         	movff	printf@tmpval+2,___ftge@ff1+2
  1960  000A16  0E00               	movlw	0
  1961  000A18  6E2E               	movwf	___ftge@ff2,c
  1962  000A1A  0E20               	movlw	32
  1963  000A1C  6E2F               	movwf	___ftge@ff2+1,c
  1964  000A1E  0E41               	movlw	65
  1965  000A20  6E30               	movwf	___ftge@ff2+2,c
  1966  000A22  EC33  F018         	call	___ftge	;wreg free
  1967  000A26  A0D8               	btfss	status,0,c
  1968  000A28  D004               	goto	l5562
  1969                           
  1970                           ;doprnt.c: 851: exp++;
  1971  000A2A  0102               	movlb	2	; () banked
  1972  000A2C  4B0D               	infsnz	printf@exp& (0+255),f,b
  1973  000A2E  2B0E               	incf	(printf@exp+1)& (0+255),f,b
  1974                           
  1975                           ; BSR set to: 2
  1976                           
  1977                           ; BSR set to: 2
  1978  000A30  D000               	goto	l5562
  1979  000A32                     l5562:
  1980                           
  1981                           ;doprnt.c: 852: }
  1982                           ;doprnt.c: 1112: if(prec <= 12)
  1983  000A32  0102               	movlb	2	; () banked
  1984  000A34  BF17               	btfsc	(printf@prec+1)& (0+255),7,b
  1985  000A36  D008               	goto	l5564
  1986  000A38  0102               	movlb	2	; () banked
  1987  000A3A  5117               	movf	(printf@prec+1)& (0+255),w,b
  1988  000A3C  E11E               	bnz	l5566
  1989  000A3E  0E0D               	movlw	13
  1990  000A40  0102               	movlb	2	; () banked
  1991  000A42  5D16               	subwf	printf@prec& (0+255),w,b
  1992  000A44  B0D8               	btfsc	status,0,c
  1993  000A46  D019               	goto	l5566
  1994  000A48                     l5564:
  1995                           
  1996                           ; BSR set to: 2
  1997                           ;doprnt.c: 1113: fval += fround(prec);
  1998  000A48  C213  F0CC         	movff	printf@fval,___ftadd@f1
  1999  000A4C  C214  F0CD         	movff	printf@fval+1,___ftadd@f1+1
  2000  000A50  C215  F0CE         	movff	printf@fval+2,___ftadd@f1+2
  2001  000A54  0102               	movlb	2	; () banked
  2002  000A56  5116               	movf	printf@prec& (0+255),w,b
  2003  000A58  EC76  F00E         	call	_fround
  2004  000A5C  C0C2  F0CF         	movff	?_fround,___ftadd@f2
  2005  000A60  C0C3  F0D0         	movff	?_fround+1,___ftadd@f2+1
  2006  000A64  C0C4  F0D1         	movff	?_fround+2,___ftadd@f2+2
  2007  000A68  EC37  F00D         	call	___ftadd	;wreg free
  2008  000A6C  C0CC  F213         	movff	?___ftadd,printf@fval
  2009  000A70  C0CD  F214         	movff	?___ftadd+1,printf@fval+1
  2010  000A74  C0CE  F215         	movff	?___ftadd+2,printf@fval+2
  2011  000A78  D000               	goto	l5566
  2012  000A7A                     l5566:
  2013                           
  2014                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2015  000A7A  0102               	movlb	2	; () banked
  2016  000A7C  BF0E               	btfsc	(printf@exp+1)& (0+255),7,b
  2017  000A7E  D008               	goto	l5568
  2018  000A80  0102               	movlb	2	; () banked
  2019  000A82  510E               	movf	(printf@exp+1)& (0+255),w,b
  2020  000A84  E12C               	bnz	l5574
  2021  000A86  0E0A               	movlw	10
  2022  000A88  0102               	movlb	2	; () banked
  2023  000A8A  5D0D               	subwf	printf@exp& (0+255),w,b
  2024  000A8C  B0D8               	btfsc	status,0,c
  2025  000A8E  D027               	goto	l5574
  2026  000A90                     l5568:
  2027                           
  2028                           ; BSR set to: 2
  2029  000A90  0102               	movlb	2	; () banked
  2030  000A92  5113               	movf	printf@fval& (0+255),w,b
  2031  000A94  0102               	movlb	2	; () banked
  2032  000A96  1114               	iorwf	(printf@fval+1)& (0+255),w,b
  2033  000A98  0102               	movlb	2	; () banked
  2034  000A9A  1115               	iorwf	(printf@fval+2)& (0+255),w,b
  2035  000A9C  B4D8               	btfsc	status,2,c
  2036  000A9E  D07B               	goto	l5588
  2037                           
  2038                           ; BSR set to: 2
  2039  000AA0  C213  F0C9         	movff	printf@fval,___fttol@f1
  2040  000AA4  C214  F0CA         	movff	printf@fval+1,___fttol@f1+1
  2041  000AA8  C215  F0CB         	movff	printf@fval+2,___fttol@f1+2
  2042  000AAC  EC73  F011         	call	___fttol	;wreg free
  2043  000AB0  0100               	movlb	0	; () banked
  2044  000AB2  51C9               	movf	?___fttol& (0+255),w,b
  2045  000AB4  0100               	movlb	0	; () banked
  2046  000AB6  11CA               	iorwf	(?___fttol+1)& (0+255),w,b
  2047  000AB8  0100               	movlb	0	; () banked
  2048  000ABA  11CB               	iorwf	(?___fttol+2)& (0+255),w,b
  2049  000ABC  0100               	movlb	0	; () banked
  2050  000ABE  11CC               	iorwf	(?___fttol+3)& (0+255),w,b
  2051  000AC0  A4D8               	btfss	status,2,c
  2052  000AC2  D069               	goto	l5588
  2053                           
  2054                           ; BSR set to: 0
  2055  000AC4  0102               	movlb	2	; () banked
  2056  000AC6  BF0E               	btfsc	(printf@exp+1)& (0+255),7,b
  2057  000AC8  D066               	goto	l5588
  2058  000ACA  0102               	movlb	2	; () banked
  2059  000ACC  510E               	movf	(printf@exp+1)& (0+255),w,b
  2060  000ACE  E107               	bnz	l5574
  2061  000AD0  0E02               	movlw	2
  2062  000AD2  0102               	movlb	2	; () banked
  2063  000AD4  5D0D               	subwf	printf@exp& (0+255),w,b
  2064  000AD6  B0D8               	btfsc	status,0,c
  2065  000AD8  D002               	goto	l5574
  2066  000ADA  D05D               	goto	l5588
  2067  000ADC  D000               	goto	l5574
  2068  000ADE                     l5574:
  2069                           
  2070                           ; BSR set to: 2
  2071                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2072  000ADE  C205  F02B         	movff	printf@tmpval,___ftge@ff1
  2073  000AE2  C206  F02C         	movff	printf@tmpval+1,___ftge@ff1+1
  2074  000AE6  C207  F02D         	movff	printf@tmpval+2,___ftge@ff1+2
  2075  000AEA  0E70               	movlw	112
  2076  000AEC  6E2E               	movwf	___ftge@ff2,c
  2077  000AEE  0E89               	movlw	137
  2078  000AF0  6E2F               	movwf	___ftge@ff2+1,c
  2079  000AF2  0E40               	movlw	64
  2080  000AF4  6E30               	movwf	___ftge@ff2+2,c
  2081  000AF6  EC33  F018         	call	___ftge	;wreg free
  2082  000AFA  B0D8               	btfsc	status,0,c
  2083  000AFC  D003               	goto	l5578
  2084                           
  2085                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2086  000AFE  0102               	movlb	2	; () banked
  2087  000B00  0EF7               	movlw	247
  2088  000B02  D002               	goto	L1
  2089  000B04                     l5578:
  2090                           
  2091                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2092  000B04  0102               	movlb	2	; () banked
  2093  000B06  0EF8               	movlw	248
  2094  000B08                     L1:
  2095  000B08  270D               	addwf	printf@exp& (0+255),f,b
  2096  000B0A  0EFF               	movlw	255
  2097  000B0C  230E               	addwfc	(printf@exp+1)& (0+255),f,b
  2098  000B0E  D000               	goto	l5580
  2099  000B10                     l5580:
  2100                           
  2101                           ; BSR set to: 2
  2102                           ;doprnt.c: 1124: }
  2103                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2104  000B10  0102               	movlb	2	; () banked
  2105  000B12  510D               	movf	printf@exp& (0+255),w,b
  2106  000B14  EC93  F009         	call	_scale
  2107  000B18  C0C2  F205         	movff	?_scale,printf@tmpval
  2108  000B1C  C0C3  F206         	movff	?_scale+1,printf@tmpval+1
  2109  000B20  C0C4  F207         	movff	?_scale+2,printf@tmpval+2
  2110                           
  2111                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2112  000B24  D017               	goto	l5584
  2113  000B26  C213  F017         	movff	printf@fval,__div_to_l_@f1
  2114  000B2A  C214  F018         	movff	printf@fval+1,__div_to_l_@f1+1
  2115  000B2E  C215  F019         	movff	printf@fval+2,__div_to_l_@f1+2
  2116  000B32  C205  F01A         	movff	printf@tmpval,__div_to_l_@f2
  2117  000B36  C206  F01B         	movff	printf@tmpval+1,__div_to_l_@f2+1
  2118  000B3A  C207  F01C         	movff	printf@tmpval+2,__div_to_l_@f2+2
  2119  000B3E  ECF6  F013         	call	__div_to_l_	;wreg free
  2120  000B42  C017  F209         	movff	?__div_to_l_,printf@val
  2121  000B46  C018  F20A         	movff	?__div_to_l_+1,printf@val+1
  2122  000B4A  C019  F20B         	movff	?__div_to_l_+2,printf@val+2
  2123  000B4E  C01A  F20C         	movff	?__div_to_l_+3,printf@val+3
  2124  000B52  D017               	goto	l5586
  2125  000B54                     l5584:
  2126  000B54  C213  F017         	movff	printf@fval,__tdiv_to_l_@f1
  2127  000B58  C214  F018         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2128  000B5C  C215  F019         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2129  000B60  C205  F01A         	movff	printf@tmpval,__tdiv_to_l_@f2
  2130  000B64  C206  F01B         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2131  000B68  C207  F01C         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2132  000B6C  ECBD  F012         	call	__tdiv_to_l_	;wreg free
  2133  000B70  C017  F209         	movff	?__tdiv_to_l_,printf@val
  2134  000B74  C018  F20A         	movff	?__tdiv_to_l_+1,printf@val+1
  2135  000B78  C019  F20B         	movff	?__tdiv_to_l_+2,printf@val+2
  2136  000B7C  C01A  F20C         	movff	?__tdiv_to_l_+3,printf@val+3
  2137  000B80  D000               	goto	l5586
  2138  000B82                     l5586:
  2139                           
  2140                           ;doprnt.c: 1129: fval = 0.0;
  2141  000B82  0E00               	movlw	0
  2142  000B84  0102               	movlb	2	; () banked
  2143  000B86  6F13               	movwf	printf@fval& (0+255),b
  2144  000B88  0E00               	movlw	0
  2145  000B8A  0102               	movlb	2	; () banked
  2146  000B8C  6F14               	movwf	(printf@fval+1)& (0+255),b
  2147  000B8E  0E00               	movlw	0
  2148  000B90  0102               	movlb	2	; () banked
  2149  000B92  6F15               	movwf	(printf@fval+2)& (0+255),b
  2150                           
  2151                           ;doprnt.c: 1130: } else {
  2152  000B94  D034               	goto	l5592
  2153  000B96                     l5588:
  2154                           
  2155                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2156  000B96  C213  F0C9         	movff	printf@fval,___fttol@f1
  2157  000B9A  C214  F0CA         	movff	printf@fval+1,___fttol@f1+1
  2158  000B9E  C215  F0CB         	movff	printf@fval+2,___fttol@f1+2
  2159  000BA2  EC73  F011         	call	___fttol	;wreg free
  2160  000BA6  C0C9  F209         	movff	?___fttol,printf@val
  2161  000BAA  C0CA  F20A         	movff	?___fttol+1,printf@val+1
  2162  000BAE  C0CB  F20B         	movff	?___fttol+2,printf@val+2
  2163  000BB2  C0CC  F20C         	movff	?___fttol+3,printf@val+3
  2164                           
  2165                           ;doprnt.c: 1132: fval -= (double)val;
  2166  000BB6  C213  F0D8         	movff	printf@fval,___ftsub@f1
  2167  000BBA  C214  F0D9         	movff	printf@fval+1,___ftsub@f1+1
  2168  000BBE  C215  F0DA         	movff	printf@fval+2,___ftsub@f1+2
  2169  000BC2  C209  F01F         	movff	printf@val,___lltoft@c
  2170  000BC6  C20A  F020         	movff	printf@val+1,___lltoft@c+1
  2171  000BCA  C20B  F021         	movff	printf@val+2,___lltoft@c+2
  2172  000BCE  C20C  F022         	movff	printf@val+3,___lltoft@c+3
  2173  000BD2  EC86  F019         	call	___lltoft	;wreg free
  2174  000BD6  C01F  F0DB         	movff	?___lltoft,___ftsub@f2
  2175  000BDA  C020  F0DC         	movff	?___lltoft+1,___ftsub@f2+1
  2176  000BDE  C021  F0DD         	movff	?___lltoft+2,___ftsub@f2+2
  2177  000BE2  ECB6  F019         	call	___ftsub	;wreg free
  2178  000BE6  C0D8  F213         	movff	?___ftsub,printf@fval
  2179  000BEA  C0D9  F214         	movff	?___ftsub+1,printf@fval+1
  2180  000BEE  C0DA  F215         	movff	?___ftsub+2,printf@fval+2
  2181                           
  2182                           ;doprnt.c: 1133: exp = 0;
  2183  000BF2  0E00               	movlw	0
  2184  000BF4  0102               	movlb	2	; () banked
  2185  000BF6  6F0E               	movwf	(printf@exp+1)& (0+255),b
  2186  000BF8  0E00               	movlw	0
  2187  000BFA  6F0D               	movwf	printf@exp& (0+255),b
  2188  000BFC  D000               	goto	l5592
  2189  000BFE                     l5592:
  2190                           
  2191                           ; BSR set to: 2
  2192                           ;doprnt.c: 1134: }
  2193                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2194  000BFE  0E01               	movlw	1
  2195  000C00  0102               	movlb	2	; () banked
  2196  000C02  6F18               	movwf	printf@c& (0+255),b
  2197  000C04                     l5594:
  2198                           
  2199                           ; BSR set to: 2
  2200  000C04  0E0A               	movlw	10
  2201  000C06  0102               	movlb	2	; () banked
  2202  000C08  1918               	xorwf	printf@c& (0+255),w,b
  2203  000C0A  B4D8               	btfsc	status,2,c
  2204  000C0C  D022               	goto	l5606
  2205  000C0E  D001               	goto	l5598
  2206                           
  2207                           ; BSR set to: 2
  2208  000C10  D020               	goto	l5606
  2209  000C12                     l5598:
  2210                           
  2211                           ; BSR set to: 2
  2212                           ;doprnt.c: 1137: if(val < dpowers[c])
  2213  000C12  0102               	movlb	2	; () banked
  2214  000C14  5118               	movf	printf@c& (0+255),w,b
  2215  000C16  0D04               	mullw	4
  2216  000C18  0E01               	movlw	low _dpowers
  2217  000C1A  24F3               	addwf	prodl,w,c
  2218  000C1C  6EF6               	movwf	tblptrl,c
  2219  000C1E  0E06               	movlw	high _dpowers
  2220  000C20  20F4               	addwfc	prodh,w,c
  2221  000C22  6EF7               	movwf	tblptrh,c
  2222  000C24                     	if	0	;There are less than 3 active tblptr bytes
  2223  000C24                     	endif
  2224  000C24  0009               	tblrd		*+
  2225  000C26  50F5               	movf	tablat,w,c
  2226  000C28  0102               	movlb	2	; () banked
  2227  000C2A  5D09               	subwf	printf@val& (0+255),w,b
  2228  000C2C  0009               	tblrd		*+
  2229  000C2E  50F5               	movf	tablat,w,c
  2230  000C30  0102               	movlb	2	; () banked
  2231  000C32  590A               	subwfb	(printf@val+1)& (0+255),w,b
  2232  000C34  0009               	tblrd		*+
  2233  000C36  50F5               	movf	tablat,w,c
  2234  000C38  0102               	movlb	2	; () banked
  2235  000C3A  590B               	subwfb	(printf@val+2)& (0+255),w,b
  2236  000C3C  0009               	tblrd		*+
  2237  000C3E  50F5               	movf	tablat,w,c
  2238  000C40  0102               	movlb	2	; () banked
  2239  000C42  590C               	subwfb	(printf@val+3)& (0+255),w,b
  2240  000C44  A0D8               	btfss	status,0,c
  2241  000C46  D005               	goto	l5606
  2242  000C48  D001               	goto	l5602
  2243                           
  2244                           ; BSR set to: 2
  2245                           ;doprnt.c: 1138: break;
  2246  000C4A  D003               	goto	l5606
  2247  000C4C                     l5602:
  2248                           
  2249                           ; BSR set to: 2
  2250  000C4C  0102               	movlb	2	; () banked
  2251  000C4E  2B18               	incf	printf@c& (0+255),f,b
  2252  000C50  D7D9               	goto	l5594
  2253  000C52                     l5606:
  2254                           
  2255                           ; BSR set to: 2
  2256                           ;doprnt.c: 1142: width -= prec + c + exp;
  2257  000C52  C218  F0E5         	movff	printf@c,??_printf
  2258  000C56  0100               	movlb	0	; () banked
  2259  000C58  6BE6               	clrf	(??_printf+1)& (0+255),b
  2260  000C5A  BFE5               	btfsc	??_printf& (0+255),7,b
  2261  000C5C  07E6               	decf	(??_printf+1)& (0+255),f,b
  2262  000C5E  0102               	movlb	2	; () banked
  2263  000C60  5116               	movf	printf@prec& (0+255),w,b
  2264  000C62  0100               	movlb	0	; () banked
  2265  000C64  27E5               	addwf	??_printf& (0+255),f,b
  2266  000C66  0102               	movlb	2	; () banked
  2267  000C68  5117               	movf	(printf@prec+1)& (0+255),w,b
  2268  000C6A  0100               	movlb	0	; () banked
  2269  000C6C  23E6               	addwfc	(??_printf+1)& (0+255),f,b
  2270  000C6E  0102               	movlb	2	; () banked
  2271  000C70  510D               	movf	printf@exp& (0+255),w,b
  2272  000C72  0100               	movlb	0	; () banked
  2273  000C74  27E5               	addwf	??_printf& (0+255),f,b
  2274  000C76  0102               	movlb	2	; () banked
  2275  000C78  510E               	movf	(printf@exp+1)& (0+255),w,b
  2276  000C7A  0100               	movlb	0	; () banked
  2277  000C7C  23E6               	addwfc	(??_printf+1)& (0+255),f,b
  2278  000C7E  0100               	movlb	0	; () banked
  2279  000C80  51E5               	movf	??_printf& (0+255),w,b
  2280  000C82  0102               	movlb	2	; () banked
  2281  000C84  5F11               	subwf	printf@width& (0+255),f,b
  2282  000C86  0100               	movlb	0	; () banked
  2283  000C88  51E6               	movf	(??_printf+1)& (0+255),w,b
  2284  000C8A  0102               	movlb	2	; () banked
  2285  000C8C  5B12               	subwfb	(printf@width+1)& (0+255),f,b
  2286                           
  2287                           ;doprnt.c: 1143: if(
  2288                           ;doprnt.c: 1147: prec)
  2289  000C8E  0102               	movlb	2	; () banked
  2290  000C90  5116               	movf	printf@prec& (0+255),w,b
  2291  000C92  0102               	movlb	2	; () banked
  2292  000C94  1117               	iorwf	(printf@prec+1)& (0+255),w,b
  2293  000C96  B4D8               	btfsc	status,2,c
  2294  000C98  D005               	goto	l5610
  2295                           
  2296                           ; BSR set to: 2
  2297                           ;doprnt.c: 1148: width--;
  2298  000C9A  0102               	movlb	2	; () banked
  2299  000C9C  0711               	decf	printf@width& (0+255),f,b
  2300  000C9E  A0D8               	btfss	status,0,c
  2301  000CA0  0712               	decf	(printf@width+1)& (0+255),f,b
  2302  000CA2  D000               	goto	l5610
  2303  000CA4                     l5610:
  2304                           
  2305                           ; BSR set to: 2
  2306                           ;doprnt.c: 1149: if(flag & 0x03)
  2307  000CA4  0E03               	movlw	3
  2308  000CA6  0102               	movlb	2	; () banked
  2309  000CA8  150F               	andwf	printf@flag& (0+255),w,b
  2310  000CAA  0100               	movlb	0	; () banked
  2311  000CAC  6FE5               	movwf	??_printf& (0+255),b
  2312  000CAE  0E00               	movlw	0
  2313  000CB0  0102               	movlb	2	; () banked
  2314  000CB2  1510               	andwf	(printf@flag+1)& (0+255),w,b
  2315  000CB4  0100               	movlb	0	; () banked
  2316  000CB6  6FE6               	movwf	(??_printf+1)& (0+255),b
  2317  000CB8  0100               	movlb	0	; () banked
  2318  000CBA  51E5               	movf	??_printf& (0+255),w,b
  2319  000CBC  0100               	movlb	0	; () banked
  2320  000CBE  11E6               	iorwf	(??_printf+1)& (0+255),w,b
  2321  000CC0  B4D8               	btfsc	status,2,c
  2322  000CC2  D005               	goto	l5614
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;doprnt.c: 1150: width--;
  2326  000CC4  0102               	movlb	2	; () banked
  2327  000CC6  0711               	decf	printf@width& (0+255),f,b
  2328  000CC8  A0D8               	btfss	status,0,c
  2329  000CCA  0712               	decf	(printf@width+1)& (0+255),f,b
  2330  000CCC  D000               	goto	l5614
  2331  000CCE                     l5614:
  2332                           
  2333                           ;doprnt.c: 1153: if(flag & 0x04) {
  2334  000CCE  0102               	movlb	2	; () banked
  2335  000CD0  A50F               	btfss	printf@flag& (0+255),2,b
  2336  000CD2  D031               	goto	l5630
  2337                           
  2338                           ; BSR set to: 2
  2339                           ;doprnt.c: 1157: if(flag & 0x03)
  2340  000CD4  0E03               	movlw	3
  2341  000CD6  0102               	movlb	2	; () banked
  2342  000CD8  150F               	andwf	printf@flag& (0+255),w,b
  2343  000CDA  0100               	movlb	0	; () banked
  2344  000CDC  6FE5               	movwf	??_printf& (0+255),b
  2345  000CDE  0E00               	movlw	0
  2346  000CE0  0102               	movlb	2	; () banked
  2347  000CE2  1510               	andwf	(printf@flag+1)& (0+255),w,b
  2348  000CE4  0100               	movlb	0	; () banked
  2349  000CE6  6FE6               	movwf	(??_printf+1)& (0+255),b
  2350  000CE8  0100               	movlb	0	; () banked
  2351  000CEA  51E5               	movf	??_printf& (0+255),w,b
  2352  000CEC  0100               	movlb	0	; () banked
  2353  000CEE  11E6               	iorwf	(??_printf+1)& (0+255),w,b
  2354  000CF0  B4D8               	btfsc	status,2,c
  2355  000CF2  D00C               	goto	l5624
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;doprnt.c: 1159: (putch('-') );
  2359  000CF4  0E2D               	movlw	45
  2360  000CF6  ECD1  F01B         	call	_putch
  2361                           
  2362                           ;doprnt.c: 1168: while(width > 0) {
  2363  000CFA  D008               	goto	l5624
  2364  000CFC                     l5620:
  2365                           
  2366                           ;doprnt.c: 1169: (putch('0') );
  2367  000CFC  0E30               	movlw	48
  2368  000CFE  ECD1  F01B         	call	_putch
  2369                           
  2370                           ;doprnt.c: 1170: width--;
  2371  000D02  0102               	movlb	2	; () banked
  2372  000D04  0711               	decf	printf@width& (0+255),f,b
  2373  000D06  A0D8               	btfss	status,0,c
  2374  000D08  0712               	decf	(printf@width+1)& (0+255),f,b
  2375  000D0A  D000               	goto	l5624
  2376  000D0C                     l5624:
  2377  000D0C  0102               	movlb	2	; () banked
  2378  000D0E  BF12               	btfsc	(printf@width+1)& (0+255),7,b
  2379  000D10  D077               	goto	l5642
  2380  000D12  0102               	movlb	2	; () banked
  2381  000D14  5112               	movf	(printf@width+1)& (0+255),w,b
  2382  000D16  E1F2               	bnz	l5620
  2383  000D18  0102               	movlb	2	; () banked
  2384  000D1A  0511               	decf	printf@width& (0+255),w,b
  2385  000D1C  A0D8               	btfss	status,0,c
  2386  000D1E  D070               	goto	l5642
  2387  000D20  D7ED               	goto	l5620
  2388                           
  2389                           ; BSR set to: 2
  2390                           ;doprnt.c: 1171: }
  2391                           ;doprnt.c: 1173: } else
  2392  000D22  D06E               	goto	l5642
  2393                           
  2394                           ; BSR set to: 2
  2395                           ;doprnt.c: 1175: {
  2396                           ;doprnt.c: 1180: while(width > 0) {
  2397  000D24  D008               	goto	l5630
  2398  000D26                     l5626:
  2399                           
  2400                           ; BSR set to: 2
  2401                           ;doprnt.c: 1181: (putch(' ') );
  2402  000D26  0E20               	movlw	32
  2403  000D28  ECD1  F01B         	call	_putch
  2404                           
  2405                           ;doprnt.c: 1182: width--;
  2406  000D2C  0102               	movlb	2	; () banked
  2407  000D2E  0711               	decf	printf@width& (0+255),f,b
  2408  000D30  A0D8               	btfss	status,0,c
  2409  000D32  0712               	decf	(printf@width+1)& (0+255),f,b
  2410  000D34  D000               	goto	l5630
  2411  000D36                     l5630:
  2412                           
  2413                           ; BSR set to: 2
  2414  000D36  0102               	movlb	2	; () banked
  2415  000D38  BF12               	btfsc	(printf@width+1)& (0+255),7,b
  2416  000D3A  D007               	goto	l5632
  2417  000D3C  0102               	movlb	2	; () banked
  2418  000D3E  5112               	movf	(printf@width+1)& (0+255),w,b
  2419  000D40  E1F2               	bnz	l5626
  2420  000D42  0102               	movlb	2	; () banked
  2421  000D44  0511               	decf	printf@width& (0+255),w,b
  2422  000D46  B0D8               	btfsc	status,0,c
  2423  000D48  D7EE               	goto	l5626
  2424  000D4A                     l5632:
  2425                           
  2426                           ; BSR set to: 2
  2427                           ;doprnt.c: 1183: }
  2428                           ;doprnt.c: 1188: if(flag & 0x03)
  2429  000D4A  0E03               	movlw	3
  2430  000D4C  0102               	movlb	2	; () banked
  2431  000D4E  150F               	andwf	printf@flag& (0+255),w,b
  2432  000D50  0100               	movlb	0	; () banked
  2433  000D52  6FE5               	movwf	??_printf& (0+255),b
  2434  000D54  0E00               	movlw	0
  2435  000D56  0102               	movlb	2	; () banked
  2436  000D58  1510               	andwf	(printf@flag+1)& (0+255),w,b
  2437  000D5A  0100               	movlb	0	; () banked
  2438  000D5C  6FE6               	movwf	(??_printf+1)& (0+255),b
  2439  000D5E  0100               	movlb	0	; () banked
  2440  000D60  51E5               	movf	??_printf& (0+255),w,b
  2441  000D62  0100               	movlb	0	; () banked
  2442  000D64  11E6               	iorwf	(??_printf+1)& (0+255),w,b
  2443  000D66  B4D8               	btfsc	status,2,c
  2444  000D68  D04B               	goto	l5642
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;doprnt.c: 1190: (putch('-') );
  2448  000D6A  0E2D               	movlw	45
  2449  000D6C  ECD1  F01B         	call	_putch
  2450                           
  2451                           ;doprnt.c: 1195: }
  2452                           ;doprnt.c: 1196: while(c--) {
  2453  000D70  D047               	goto	l5642
  2454  000D72                     l5636:
  2455                           
  2456                           ;doprnt.c: 1200: {
  2457                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2458  000D72  C209  F017         	movff	printf@val,___lldiv@dividend
  2459  000D76  C20A  F018         	movff	printf@val+1,___lldiv@dividend+1
  2460  000D7A  C20B  F019         	movff	printf@val+2,___lldiv@dividend+2
  2461  000D7E  C20C  F01A         	movff	printf@val+3,___lldiv@dividend+3
  2462  000D82  0102               	movlb	2	; () banked
  2463  000D84  5118               	movf	printf@c& (0+255),w,b
  2464  000D86  0D04               	mullw	4
  2465  000D88  0E01               	movlw	low _dpowers
  2466  000D8A  24F3               	addwf	prodl,w,c
  2467  000D8C  6EF6               	movwf	tblptrl,c
  2468  000D8E  0E06               	movlw	high _dpowers
  2469  000D90  20F4               	addwfc	prodh,w,c
  2470  000D92  6EF7               	movwf	tblptrh,c
  2471  000D94                     	if	0	;There are less than 3 active tblptr bytes
  2472  000D94                     	endif
  2473  000D94  0009               	tblrd		*+
  2474  000D96  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2475  000D9A  0009               	tblrd		*+
  2476  000D9C  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2477  000DA0  0009               	tblrd		*+
  2478  000DA2  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2479  000DA6  000A               	tblrd		*-
  2480  000DA8  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2481  000DAC  ECC7  F018         	call	___lldiv	;wreg free
  2482  000DB0  C017  F205         	movff	?___lldiv,printf@tmpval
  2483  000DB4  C018  F206         	movff	?___lldiv+1,printf@tmpval+1
  2484  000DB8  C019  F207         	movff	?___lldiv+2,printf@tmpval+2
  2485  000DBC  C01A  F208         	movff	?___lldiv+3,printf@tmpval+3
  2486                           
  2487                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2488  000DC0  C205  F024         	movff	printf@tmpval,___llmod@dividend
  2489  000DC4  C206  F025         	movff	printf@tmpval+1,___llmod@dividend+1
  2490  000DC8  C207  F026         	movff	printf@tmpval+2,___llmod@dividend+2
  2491  000DCC  C208  F027         	movff	printf@tmpval+3,___llmod@dividend+3
  2492  000DD0  0E0A               	movlw	10
  2493  000DD2  6E28               	movwf	___llmod@divisor,c
  2494  000DD4  0E00               	movlw	0
  2495  000DD6  6E29               	movwf	___llmod@divisor+1,c
  2496  000DD8  0E00               	movlw	0
  2497  000DDA  6E2A               	movwf	___llmod@divisor+2,c
  2498  000DDC  0E00               	movlw	0
  2499  000DDE  6E2B               	movwf	___llmod@divisor+3,c
  2500  000DE0  EC4E  F019         	call	___llmod	;wreg free
  2501  000DE4  C024  F205         	movff	?___llmod,printf@tmpval
  2502  000DE8  C025  F206         	movff	?___llmod+1,printf@tmpval+1
  2503  000DEC  C026  F207         	movff	?___llmod+2,printf@tmpval+2
  2504  000DF0  C027  F208         	movff	?___llmod+3,printf@tmpval+3
  2505                           
  2506                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2507  000DF4  0102               	movlb	2	; () banked
  2508  000DF6  5105               	movf	printf@tmpval& (0+255),w,b
  2509  000DF8  0F30               	addlw	48
  2510  000DFA  ECD1  F01B         	call	_putch
  2511  000DFE  D000               	goto	l5642
  2512  000E00                     l5642:
  2513  000E00  0102               	movlb	2	; () banked
  2514  000E02  0718               	decf	printf@c& (0+255),f,b
  2515  000E04  0102               	movlb	2	; () banked
  2516  000E06  2918               	incf	printf@c& (0+255),w,b
  2517  000E08  B4D8               	btfsc	status,2,c
  2518  000E0A  D00A               	goto	l5648
  2519  000E0C  D7B2               	goto	l5636
  2520                           
  2521                           ; BSR set to: 2
  2522                           ;doprnt.c: 1204: }
  2523                           ;doprnt.c: 1206: }
  2524                           ;doprnt.c: 1207: while(exp > 0) {
  2525  000E0E  D008               	goto	l5648
  2526  000E10                     l5644:
  2527                           
  2528                           ; BSR set to: 2
  2529                           ;doprnt.c: 1208: (putch('0') );
  2530  000E10  0E30               	movlw	48
  2531  000E12  ECD1  F01B         	call	_putch
  2532                           
  2533                           ;doprnt.c: 1209: exp--;
  2534  000E16  0102               	movlb	2	; () banked
  2535  000E18  070D               	decf	printf@exp& (0+255),f,b
  2536  000E1A  A0D8               	btfss	status,0,c
  2537  000E1C  070E               	decf	(printf@exp+1)& (0+255),f,b
  2538  000E1E  D000               	goto	l5648
  2539  000E20                     l5648:
  2540                           
  2541                           ; BSR set to: 2
  2542  000E20  0102               	movlb	2	; () banked
  2543  000E22  BF0E               	btfsc	(printf@exp+1)& (0+255),7,b
  2544  000E24  D007               	goto	l5650
  2545  000E26  0102               	movlb	2	; () banked
  2546  000E28  510E               	movf	(printf@exp+1)& (0+255),w,b
  2547  000E2A  E1F2               	bnz	l5644
  2548  000E2C  0102               	movlb	2	; () banked
  2549  000E2E  050D               	decf	printf@exp& (0+255),w,b
  2550  000E30  B0D8               	btfsc	status,0,c
  2551  000E32  D7EE               	goto	l5644
  2552  000E34                     l5650:
  2553                           
  2554                           ; BSR set to: 2
  2555                           ;doprnt.c: 1210: }
  2556                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2557  000E34  0102               	movlb	2	; () banked
  2558  000E36  BF17               	btfsc	(printf@prec+1)& (0+255),7,b
  2559  000E38  D00C               	goto	l696
  2560  000E3A  0102               	movlb	2	; () banked
  2561  000E3C  5117               	movf	(printf@prec+1)& (0+255),w,b
  2562  000E3E  E105               	bnz	u6220
  2563  000E40  0E09               	movlw	9
  2564  000E42  0102               	movlb	2	; () banked
  2565  000E44  5D16               	subwf	printf@prec& (0+255),w,b
  2566  000E46  A0D8               	btfss	status,0,c
  2567  000E48  D004               	goto	l696
  2568  000E4A                     u6220:
  2569                           
  2570                           ; BSR set to: 2
  2571                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2572  000E4A  0E08               	movlw	8
  2573  000E4C  0102               	movlb	2	; () banked
  2574  000E4E  6F18               	movwf	printf@c& (0+255),b
  2575  000E50  D003               	goto	l5654
  2576  000E52                     l696:
  2577                           
  2578                           ; BSR set to: 2
  2579                           ;doprnt.c: 1213: else
  2580                           ;doprnt.c: 1214: c = prec;
  2581  000E52  C216  F218         	movff	printf@prec,printf@c
  2582  000E56  D000               	goto	l5654
  2583  000E58                     l5654:
  2584                           
  2585                           ; BSR set to: 2
  2586                           ;doprnt.c: 1215: prec -= c;
  2587  000E58  0102               	movlb	2	; () banked
  2588  000E5A  5118               	movf	printf@c& (0+255),w,b
  2589  000E5C  0102               	movlb	2	; () banked
  2590  000E5E  5F16               	subwf	printf@prec& (0+255),f,b
  2591  000E60  0E00               	movlw	0
  2592  000E62  0102               	movlb	2	; () banked
  2593  000E64  BF18               	btfsc	printf@c& (0+255),7,b
  2594  000E66  0EFF               	movlw	255
  2595  000E68  0102               	movlb	2	; () banked
  2596  000E6A  5B17               	subwfb	(printf@prec+1)& (0+255),f,b
  2597                           
  2598                           ; BSR set to: 2
  2599                           ;doprnt.c: 1219: if(c)
  2600  000E6C  0102               	movlb	2	; () banked
  2601  000E6E  5118               	movf	printf@c& (0+255),w,b
  2602  000E70  0102               	movlb	2	; () banked
  2603  000E72  B4D8               	btfsc	status,2,c
  2604  000E74  D004               	goto	l5660
  2605                           
  2606                           ; BSR set to: 2
  2607                           ;doprnt.c: 1221: (putch('.') );
  2608  000E76  0E2E               	movlw	46
  2609  000E78  ECD1  F01B         	call	_putch
  2610  000E7C  D000               	goto	l5660
  2611  000E7E                     l5660:
  2612                           
  2613                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2614  000E7E  0102               	movlb	2	; () banked
  2615  000E80  5118               	movf	printf@c& (0+255),w,b
  2616  000E82  EC93  F009         	call	_scale
  2617  000E86  C0C2  F200         	movff	?_scale,_printf$1743
  2618  000E8A  C0C3  F201         	movff	?_scale+1,_printf$1743+1
  2619  000E8E  C0C4  F202         	movff	?_scale+2,_printf$1743+2
  2620                           
  2621                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2622  000E92  C213  F035         	movff	printf@fval,___ftmul@f2
  2623  000E96  C214  F036         	movff	printf@fval+1,___ftmul@f2+1
  2624  000E9A  C215  F037         	movff	printf@fval+2,___ftmul@f2+2
  2625  000E9E  C200  F032         	movff	_printf$1743,___ftmul@f1
  2626  000EA2  C201  F033         	movff	_printf$1743+1,___ftmul@f1+1
  2627  000EA6  C202  F034         	movff	_printf$1743+2,___ftmul@f1+2
  2628  000EAA  EC90  F014         	call	___ftmul	;wreg free
  2629  000EAE  C032  F0C9         	movff	?___ftmul,___fttol@f1
  2630  000EB2  C033  F0CA         	movff	?___ftmul+1,___fttol@f1+1
  2631  000EB6  C034  F0CB         	movff	?___ftmul+2,___fttol@f1+2
  2632  000EBA  EC73  F011         	call	___fttol	;wreg free
  2633  000EBE  C0C9  F209         	movff	?___fttol,printf@val
  2634  000EC2  C0CA  F20A         	movff	?___fttol+1,printf@val+1
  2635  000EC6  C0CB  F20B         	movff	?___fttol+2,printf@val+2
  2636  000ECA  C0CC  F20C         	movff	?___fttol+3,printf@val+3
  2637                           
  2638                           ;doprnt.c: 1228: while(c--) {
  2639  000ECE  D06E               	goto	l5672
  2640  000ED0                     l5664:
  2641                           
  2642                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2643  000ED0  C209  F017         	movff	printf@val,___lldiv@dividend
  2644  000ED4  C20A  F018         	movff	printf@val+1,___lldiv@dividend+1
  2645  000ED8  C20B  F019         	movff	printf@val+2,___lldiv@dividend+2
  2646  000EDC  C20C  F01A         	movff	printf@val+3,___lldiv@dividend+3
  2647  000EE0  0102               	movlb	2	; () banked
  2648  000EE2  5118               	movf	printf@c& (0+255),w,b
  2649  000EE4  0D04               	mullw	4
  2650  000EE6  0E01               	movlw	low _dpowers
  2651  000EE8  24F3               	addwf	prodl,w,c
  2652  000EEA  6EF6               	movwf	tblptrl,c
  2653  000EEC  0E06               	movlw	high _dpowers
  2654  000EEE  20F4               	addwfc	prodh,w,c
  2655  000EF0  6EF7               	movwf	tblptrh,c
  2656  000EF2                     	if	0	;There are less than 3 active tblptr bytes
  2657  000EF2                     	endif
  2658  000EF2  0009               	tblrd		*+
  2659  000EF4  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2660  000EF8  0009               	tblrd		*+
  2661  000EFA  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2662  000EFE  0009               	tblrd		*+
  2663  000F00  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2664  000F04  000A               	tblrd		*-
  2665  000F06  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2666  000F0A  ECC7  F018         	call	___lldiv	;wreg free
  2667  000F0E  C017  F205         	movff	?___lldiv,printf@tmpval
  2668  000F12  C018  F206         	movff	?___lldiv+1,printf@tmpval+1
  2669  000F16  C019  F207         	movff	?___lldiv+2,printf@tmpval+2
  2670  000F1A  C01A  F208         	movff	?___lldiv+3,printf@tmpval+3
  2671                           
  2672                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2673  000F1E  C205  F024         	movff	printf@tmpval,___llmod@dividend
  2674  000F22  C206  F025         	movff	printf@tmpval+1,___llmod@dividend+1
  2675  000F26  C207  F026         	movff	printf@tmpval+2,___llmod@dividend+2
  2676  000F2A  C208  F027         	movff	printf@tmpval+3,___llmod@dividend+3
  2677  000F2E  0E0A               	movlw	10
  2678  000F30  6E28               	movwf	___llmod@divisor,c
  2679  000F32  0E00               	movlw	0
  2680  000F34  6E29               	movwf	___llmod@divisor+1,c
  2681  000F36  0E00               	movlw	0
  2682  000F38  6E2A               	movwf	___llmod@divisor+2,c
  2683  000F3A  0E00               	movlw	0
  2684  000F3C  6E2B               	movwf	___llmod@divisor+3,c
  2685  000F3E  EC4E  F019         	call	___llmod	;wreg free
  2686  000F42  C024  F205         	movff	?___llmod,printf@tmpval
  2687  000F46  C025  F206         	movff	?___llmod+1,printf@tmpval+1
  2688  000F4A  C026  F207         	movff	?___llmod+2,printf@tmpval+2
  2689  000F4E  C027  F208         	movff	?___llmod+3,printf@tmpval+3
  2690                           
  2691                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2692  000F52  0102               	movlb	2	; () banked
  2693  000F54  5105               	movf	printf@tmpval& (0+255),w,b
  2694  000F56  0F30               	addlw	48
  2695  000F58  ECD1  F01B         	call	_putch
  2696                           
  2697                           ;doprnt.c: 1232: val %= dpowers[c];
  2698  000F5C  C209  F024         	movff	printf@val,___llmod@dividend
  2699  000F60  C20A  F025         	movff	printf@val+1,___llmod@dividend+1
  2700  000F64  C20B  F026         	movff	printf@val+2,___llmod@dividend+2
  2701  000F68  C20C  F027         	movff	printf@val+3,___llmod@dividend+3
  2702  000F6C  0102               	movlb	2	; () banked
  2703  000F6E  5118               	movf	printf@c& (0+255),w,b
  2704  000F70  0D04               	mullw	4
  2705  000F72  0E01               	movlw	low _dpowers
  2706  000F74  24F3               	addwf	prodl,w,c
  2707  000F76  6EF6               	movwf	tblptrl,c
  2708  000F78  0E06               	movlw	high _dpowers
  2709  000F7A  20F4               	addwfc	prodh,w,c
  2710  000F7C  6EF7               	movwf	tblptrh,c
  2711  000F7E                     	if	0	;There are less than 3 active tblptr bytes
  2712  000F7E                     	endif
  2713  000F7E  0009               	tblrd		*+
  2714  000F80  CFF5 F028          	movff	tablat,___llmod@divisor
  2715  000F84  0009               	tblrd		*+
  2716  000F86  CFF5 F029          	movff	tablat,___llmod@divisor+1
  2717  000F8A  0009               	tblrd		*+
  2718  000F8C  CFF5 F02A          	movff	tablat,___llmod@divisor+2
  2719  000F90  000A               	tblrd		*-
  2720  000F92  CFF5 F02B          	movff	tablat,___llmod@divisor+3
  2721  000F96  EC4E  F019         	call	___llmod	;wreg free
  2722  000F9A  C024  F209         	movff	?___llmod,printf@val
  2723  000F9E  C025  F20A         	movff	?___llmod+1,printf@val+1
  2724  000FA2  C026  F20B         	movff	?___llmod+2,printf@val+2
  2725  000FA6  C027  F20C         	movff	?___llmod+3,printf@val+3
  2726  000FAA  D000               	goto	l5672
  2727  000FAC                     l5672:
  2728  000FAC  0102               	movlb	2	; () banked
  2729  000FAE  0718               	decf	printf@c& (0+255),f,b
  2730  000FB0  0102               	movlb	2	; () banked
  2731  000FB2  2918               	incf	printf@c& (0+255),w,b
  2732  000FB4  B4D8               	btfsc	status,2,c
  2733  000FB6  D00A               	goto	l5678
  2734  000FB8  D78B               	goto	l5664
  2735                           
  2736                           ; BSR set to: 2
  2737                           ;doprnt.c: 1233: }
  2738                           ;doprnt.c: 1235: while(prec) {
  2739  000FBA  D008               	goto	l5678
  2740  000FBC                     l5674:
  2741                           
  2742                           ; BSR set to: 2
  2743                           ;doprnt.c: 1236: (putch('0') );
  2744  000FBC  0E30               	movlw	48
  2745  000FBE  ECD1  F01B         	call	_putch
  2746                           
  2747                           ;doprnt.c: 1237: prec--;
  2748  000FC2  0102               	movlb	2	; () banked
  2749  000FC4  0716               	decf	printf@prec& (0+255),f,b
  2750  000FC6  A0D8               	btfss	status,0,c
  2751  000FC8  0717               	decf	(printf@prec+1)& (0+255),f,b
  2752  000FCA  D000               	goto	l5678
  2753  000FCC                     l5678:
  2754                           
  2755                           ; BSR set to: 2
  2756  000FCC  0102               	movlb	2	; () banked
  2757  000FCE  5116               	movf	printf@prec& (0+255),w,b
  2758  000FD0  0102               	movlb	2	; () banked
  2759  000FD2  1117               	iorwf	(printf@prec+1)& (0+255),w,b
  2760  000FD4  B4D8               	btfsc	status,2,c
  2761  000FD6  D195               	goto	l5766
  2762  000FD8  D7F1               	goto	l5674
  2763                           
  2764                           ; BSR set to: 2
  2765                           ;doprnt.c: 1238: }
  2766                           ;doprnt.c: 1245: continue;
  2767  000FDA  D193               	goto	l5766
  2768  000FDC                     l5680:
  2769                           
  2770                           ; BSR set to: 2
  2771                           ;doprnt.c: 1246: }
  2772                           ;doprnt.c: 1253: {
  2773                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2774  000FDC  C203  FFD9         	movff	printf@ap,fsr2l
  2775  000FE0  C204  FFDA         	movff	printf@ap+1,fsr2h
  2776  000FE4  CFDE F209          	movff	postinc2,printf@val
  2777  000FE8  CFDD F20A          	movff	postdec2,printf@val+1
  2778  000FEC  0102               	movlb	2	; () banked
  2779  000FEE  0E00               	movlw	0
  2780  000FF0  BF0A               	btfsc	(printf@val+1)& (0+255),7,b
  2781  000FF2  0EFF               	movlw	-1
  2782  000FF4  6F0B               	movwf	(printf@val+2)& (0+255),b
  2783  000FF6  6F0C               	movwf	(printf@val+3)& (0+255),b
  2784                           
  2785                           ; BSR set to: 2
  2786  000FF8  0E02               	movlw	2
  2787  000FFA  0102               	movlb	2	; () banked
  2788  000FFC  2703               	addwf	printf@ap& (0+255),f,b
  2789  000FFE  0E00               	movlw	0
  2790  001000  2304               	addwfc	(printf@ap+1)& (0+255),f,b
  2791                           
  2792                           ; BSR set to: 2
  2793                           ;doprnt.c: 1261: if((long)val < 0) {
  2794  001002  0102               	movlb	2	; () banked
  2795  001004  AF0C               	btfss	(printf@val+3)& (0+255),7,b
  2796  001006  D00D               	goto	l5690
  2797                           
  2798                           ; BSR set to: 2
  2799                           ;doprnt.c: 1262: flag |= 0x03;
  2800  001008  0E03               	movlw	3
  2801  00100A  0102               	movlb	2	; () banked
  2802  00100C  130F               	iorwf	printf@flag& (0+255),f,b
  2803                           
  2804                           ; BSR set to: 2
  2805                           ;doprnt.c: 1263: val = -val;
  2806  00100E  0102               	movlb	2	; () banked
  2807  001010  1F0C               	comf	(printf@val+3)& (0+255),f,b
  2808  001012  1F0B               	comf	(printf@val+2)& (0+255),f,b
  2809  001014  1F0A               	comf	(printf@val+1)& (0+255),f,b
  2810  001016  6D09               	negf	printf@val& (0+255),b
  2811  001018  0E00               	movlw	0
  2812  00101A  230A               	addwfc	(printf@val+1)& (0+255),f,b
  2813  00101C  230B               	addwfc	(printf@val+2)& (0+255),f,b
  2814  00101E  230C               	addwfc	(printf@val+3)& (0+255),f,b
  2815  001020  D000               	goto	l5690
  2816  001022                     l5690:
  2817                           
  2818                           ; BSR set to: 2
  2819                           ;doprnt.c: 1264: }
  2820                           ;doprnt.c: 1266: }
  2821                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2822  001022  0102               	movlb	2	; () banked
  2823  001024  5116               	movf	printf@prec& (0+255),w,b
  2824  001026  0102               	movlb	2	; () banked
  2825  001028  1117               	iorwf	(printf@prec+1)& (0+255),w,b
  2826  00102A  A4D8               	btfss	status,2,c
  2827  00102C  D00E               	goto	l5696
  2828                           
  2829                           ; BSR set to: 2
  2830  00102E  0102               	movlb	2	; () banked
  2831  001030  5109               	movf	printf@val& (0+255),w,b
  2832  001032  0102               	movlb	2	; () banked
  2833  001034  110A               	iorwf	(printf@val+1)& (0+255),w,b
  2834  001036  0102               	movlb	2	; () banked
  2835  001038  110B               	iorwf	(printf@val+2)& (0+255),w,b
  2836  00103A  0102               	movlb	2	; () banked
  2837  00103C  110C               	iorwf	(printf@val+3)& (0+255),w,b
  2838  00103E  A4D8               	btfss	status,2,c
  2839  001040  D004               	goto	l5696
  2840                           
  2841                           ; BSR set to: 2
  2842                           ;doprnt.c: 1291: prec++;
  2843  001042  0102               	movlb	2	; () banked
  2844  001044  4B16               	infsnz	printf@prec& (0+255),f,b
  2845  001046  2B17               	incf	(printf@prec+1)& (0+255),f,b
  2846  001048  D000               	goto	l5696
  2847  00104A                     l5696:
  2848                           
  2849                           ; BSR set to: 2
  2850                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2851  00104A  0E01               	movlw	1
  2852  00104C  0102               	movlb	2	; () banked
  2853  00104E  6F18               	movwf	printf@c& (0+255),b
  2854  001050                     l5698:
  2855                           
  2856                           ; BSR set to: 2
  2857  001050  0E0A               	movlw	10
  2858  001052  0102               	movlb	2	; () banked
  2859  001054  1918               	xorwf	printf@c& (0+255),w,b
  2860  001056  B4D8               	btfsc	status,2,c
  2861  001058  D022               	goto	l5710
  2862  00105A  D001               	goto	l5702
  2863                           
  2864                           ; BSR set to: 2
  2865  00105C  D020               	goto	l5710
  2866  00105E                     l5702:
  2867                           
  2868                           ; BSR set to: 2
  2869                           ;doprnt.c: 1306: if(val < dpowers[c])
  2870  00105E  0102               	movlb	2	; () banked
  2871  001060  5118               	movf	printf@c& (0+255),w,b
  2872  001062  0D04               	mullw	4
  2873  001064  0E01               	movlw	low _dpowers
  2874  001066  24F3               	addwf	prodl,w,c
  2875  001068  6EF6               	movwf	tblptrl,c
  2876  00106A  0E06               	movlw	high _dpowers
  2877  00106C  20F4               	addwfc	prodh,w,c
  2878  00106E  6EF7               	movwf	tblptrh,c
  2879  001070                     	if	0	;There are less than 3 active tblptr bytes
  2880  001070                     	endif
  2881  001070  0009               	tblrd		*+
  2882  001072  50F5               	movf	tablat,w,c
  2883  001074  0102               	movlb	2	; () banked
  2884  001076  5D09               	subwf	printf@val& (0+255),w,b
  2885  001078  0009               	tblrd		*+
  2886  00107A  50F5               	movf	tablat,w,c
  2887  00107C  0102               	movlb	2	; () banked
  2888  00107E  590A               	subwfb	(printf@val+1)& (0+255),w,b
  2889  001080  0009               	tblrd		*+
  2890  001082  50F5               	movf	tablat,w,c
  2891  001084  0102               	movlb	2	; () banked
  2892  001086  590B               	subwfb	(printf@val+2)& (0+255),w,b
  2893  001088  0009               	tblrd		*+
  2894  00108A  50F5               	movf	tablat,w,c
  2895  00108C  0102               	movlb	2	; () banked
  2896  00108E  590C               	subwfb	(printf@val+3)& (0+255),w,b
  2897  001090  A0D8               	btfss	status,0,c
  2898  001092  D005               	goto	l5710
  2899  001094  D001               	goto	l5706
  2900                           
  2901                           ; BSR set to: 2
  2902                           ;doprnt.c: 1307: break;
  2903  001096  D003               	goto	l5710
  2904  001098                     l5706:
  2905                           
  2906                           ; BSR set to: 2
  2907  001098  0102               	movlb	2	; () banked
  2908  00109A  2B18               	incf	printf@c& (0+255),f,b
  2909  00109C  D7D9               	goto	l5698
  2910  00109E                     l5710:
  2911                           
  2912                           ; BSR set to: 2
  2913                           ;doprnt.c: 1339: if(c < prec)
  2914  00109E  0E80               	movlw	128
  2915  0010A0  0102               	movlb	2	; () banked
  2916  0010A2  BF18               	btfsc	printf@c& (0+255),7,b
  2917  0010A4  0E7F               	movlw	127
  2918  0010A6  0100               	movlb	0	; () banked
  2919  0010A8  6FE5               	movwf	??_printf& (0+255),b
  2920  0010AA  0102               	movlb	2	; () banked
  2921  0010AC  5116               	movf	printf@prec& (0+255),w,b
  2922  0010AE  0102               	movlb	2	; () banked
  2923  0010B0  5D18               	subwf	printf@c& (0+255),w,b
  2924  0010B2  0102               	movlb	2	; () banked
  2925  0010B4  5117               	movf	(printf@prec+1)& (0+255),w,b
  2926  0010B6  0A80               	xorlw	128
  2927  0010B8  0100               	movlb	0	; () banked
  2928  0010BA  59E5               	subwfb	??_printf& (0+255),w,b
  2929  0010BC  B0D8               	btfsc	status,0,c
  2930  0010BE  D003               	goto	l5714
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;doprnt.c: 1340: c = prec;
  2934  0010C0  C216  F218         	movff	printf@prec,printf@c
  2935  0010C4  D019               	goto	l5718
  2936  0010C6                     l5714:
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;doprnt.c: 1341: else if(prec < c)
  2940  0010C6  0102               	movlb	2	; () banked
  2941  0010C8  5117               	movf	(printf@prec+1)& (0+255),w,b
  2942  0010CA  0A80               	xorlw	128
  2943  0010CC  0100               	movlb	0	; () banked
  2944  0010CE  6FE5               	movwf	??_printf& (0+255),b
  2945  0010D0  0102               	movlb	2	; () banked
  2946  0010D2  5118               	movf	printf@c& (0+255),w,b
  2947  0010D4  0102               	movlb	2	; () banked
  2948  0010D6  5D16               	subwf	printf@prec& (0+255),w,b
  2949  0010D8  0E80               	movlw	128
  2950  0010DA  0102               	movlb	2	; () banked
  2951  0010DC  BF18               	btfsc	printf@c& (0+255),7,b
  2952  0010DE  0E7F               	movlw	127
  2953  0010E0  0100               	movlb	0	; () banked
  2954  0010E2  59E5               	subwfb	??_printf& (0+255),w,b
  2955  0010E4  B0D8               	btfsc	status,0,c
  2956  0010E6  D008               	goto	l5718
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;doprnt.c: 1342: prec = c;
  2960  0010E8  0102               	movlb	2	; () banked
  2961  0010EA  5118               	movf	printf@c& (0+255),w,b
  2962  0010EC  0102               	movlb	2	; () banked
  2963  0010EE  6F16               	movwf	printf@prec& (0+255),b
  2964  0010F0  6B17               	clrf	(printf@prec+1)& (0+255),b
  2965  0010F2  BF16               	btfsc	printf@prec& (0+255),7,b
  2966  0010F4  0717               	decf	(printf@prec+1)& (0+255),f,b
  2967                           
  2968                           ; BSR set to: 2
  2969  0010F6  D000               	goto	l5718
  2970  0010F8                     l5718:
  2971                           
  2972                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2973  0010F8  0102               	movlb	2	; () banked
  2974  0010FA  5111               	movf	printf@width& (0+255),w,b
  2975  0010FC  0102               	movlb	2	; () banked
  2976  0010FE  1112               	iorwf	(printf@width+1)& (0+255),w,b
  2977  001100  B4D8               	btfsc	status,2,c
  2978  001102  D015               	goto	l5724
  2979                           
  2980                           ; BSR set to: 2
  2981  001104  0E03               	movlw	3
  2982  001106  0102               	movlb	2	; () banked
  2983  001108  150F               	andwf	printf@flag& (0+255),w,b
  2984  00110A  0100               	movlb	0	; () banked
  2985  00110C  6FE5               	movwf	??_printf& (0+255),b
  2986  00110E  0E00               	movlw	0
  2987  001110  0102               	movlb	2	; () banked
  2988  001112  1510               	andwf	(printf@flag+1)& (0+255),w,b
  2989  001114  0100               	movlb	0	; () banked
  2990  001116  6FE6               	movwf	(??_printf+1)& (0+255),b
  2991  001118  0100               	movlb	0	; () banked
  2992  00111A  51E5               	movf	??_printf& (0+255),w,b
  2993  00111C  0100               	movlb	0	; () banked
  2994  00111E  11E6               	iorwf	(??_printf+1)& (0+255),w,b
  2995  001120  B4D8               	btfsc	status,2,c
  2996  001122  D005               	goto	l5724
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;doprnt.c: 1346: width--;
  3000  001124  0102               	movlb	2	; () banked
  3001  001126  0711               	decf	printf@width& (0+255),f,b
  3002  001128  A0D8               	btfss	status,0,c
  3003  00112A  0712               	decf	(printf@width+1)& (0+255),f,b
  3004  00112C  D000               	goto	l5724
  3005  00112E                     l5724:
  3006                           
  3007                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3008  00112E  0102               	movlb	2	; () banked
  3009  001130  AD10               	btfss	(printf@flag+1)& (0+255),6,b
  3010  001132  D01F               	goto	l5732
  3011                           
  3012                           ; BSR set to: 2
  3013                           ;doprnt.c: 1349: if(width > prec)
  3014  001134  0102               	movlb	2	; () banked
  3015  001136  5111               	movf	printf@width& (0+255),w,b
  3016  001138  0102               	movlb	2	; () banked
  3017  00113A  5D16               	subwf	printf@prec& (0+255),w,b
  3018  00113C  0102               	movlb	2	; () banked
  3019  00113E  5117               	movf	(printf@prec+1)& (0+255),w,b
  3020  001140  0A80               	xorlw	128
  3021  001142  0100               	movlb	0	; () banked
  3022  001144  6FE5               	movwf	??_printf& (0+255),b
  3023  001146  0102               	movlb	2	; () banked
  3024  001148  5112               	movf	(printf@width+1)& (0+255),w,b
  3025  00114A  0A80               	xorlw	128
  3026  00114C  0100               	movlb	0	; () banked
  3027  00114E  59E5               	subwfb	??_printf& (0+255),w,b
  3028  001150  B0D8               	btfsc	status,0,c
  3029  001152  D009               	goto	l5730
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;doprnt.c: 1350: width -= prec;
  3033  001154  0102               	movlb	2	; () banked
  3034  001156  5116               	movf	printf@prec& (0+255),w,b
  3035  001158  0102               	movlb	2	; () banked
  3036  00115A  5F11               	subwf	printf@width& (0+255),f,b
  3037  00115C  0102               	movlb	2	; () banked
  3038  00115E  5117               	movf	(printf@prec+1)& (0+255),w,b
  3039  001160  0102               	movlb	2	; () banked
  3040  001162  5B12               	subwfb	(printf@width+1)& (0+255),f,b
  3041  001164  D006               	goto	l5732
  3042  001166                     l5730:
  3043                           
  3044                           ;doprnt.c: 1351: else
  3045                           ;doprnt.c: 1352: width = 0;
  3046  001166  0E00               	movlw	0
  3047  001168  0102               	movlb	2	; () banked
  3048  00116A  6F12               	movwf	(printf@width+1)& (0+255),b
  3049  00116C  0E00               	movlw	0
  3050  00116E  6F11               	movwf	printf@width& (0+255),b
  3051                           
  3052                           ; BSR set to: 2
  3053  001170  D000               	goto	l5732
  3054  001172                     l5732:
  3055                           
  3056                           ; BSR set to: 2
  3057                           ;doprnt.c: 1353: }
  3058                           ;doprnt.c: 1381: if(width > c)
  3059  001172  0E80               	movlw	128
  3060  001174  0102               	movlb	2	; () banked
  3061  001176  BF18               	btfsc	printf@c& (0+255),7,b
  3062  001178  0E7F               	movlw	127
  3063  00117A  0100               	movlb	0	; () banked
  3064  00117C  6FE5               	movwf	??_printf& (0+255),b
  3065  00117E  0102               	movlb	2	; () banked
  3066  001180  5111               	movf	printf@width& (0+255),w,b
  3067  001182  0102               	movlb	2	; () banked
  3068  001184  5D18               	subwf	printf@c& (0+255),w,b
  3069  001186  0102               	movlb	2	; () banked
  3070  001188  5112               	movf	(printf@width+1)& (0+255),w,b
  3071  00118A  0A80               	xorlw	128
  3072  00118C  0100               	movlb	0	; () banked
  3073  00118E  59E5               	subwfb	??_printf& (0+255),w,b
  3074  001190  B0D8               	btfsc	status,0,c
  3075  001192  D00B               	goto	l5736
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;doprnt.c: 1382: width -= c;
  3079  001194  0102               	movlb	2	; () banked
  3080  001196  5118               	movf	printf@c& (0+255),w,b
  3081  001198  0102               	movlb	2	; () banked
  3082  00119A  5F11               	subwf	printf@width& (0+255),f,b
  3083  00119C  0E00               	movlw	0
  3084  00119E  0102               	movlb	2	; () banked
  3085  0011A0  BF18               	btfsc	printf@c& (0+255),7,b
  3086  0011A2  0EFF               	movlw	255
  3087  0011A4  0102               	movlb	2	; () banked
  3088  0011A6  5B12               	subwfb	(printf@width+1)& (0+255),f,b
  3089  0011A8  D006               	goto	l5738
  3090  0011AA                     l5736:
  3091                           
  3092                           ;doprnt.c: 1383: else
  3093                           ;doprnt.c: 1384: width = 0;
  3094  0011AA  0E00               	movlw	0
  3095  0011AC  0102               	movlb	2	; () banked
  3096  0011AE  6F12               	movwf	(printf@width+1)& (0+255),b
  3097  0011B0  0E00               	movlw	0
  3098  0011B2  6F11               	movwf	printf@width& (0+255),b
  3099  0011B4  D000               	goto	l5738
  3100  0011B6                     l5738:
  3101                           
  3102                           ; BSR set to: 2
  3103                           ;doprnt.c: 1387: if(flag & 0x04) {
  3104  0011B6  0102               	movlb	2	; () banked
  3105  0011B8  A50F               	btfss	printf@flag& (0+255),2,b
  3106  0011BA  D029               	goto	l5750
  3107                           
  3108                           ; BSR set to: 2
  3109                           ;doprnt.c: 1392: if(flag & 0x03)
  3110  0011BC  0E03               	movlw	3
  3111  0011BE  0102               	movlb	2	; () banked
  3112  0011C0  150F               	andwf	printf@flag& (0+255),w,b
  3113  0011C2  0100               	movlb	0	; () banked
  3114  0011C4  6FE5               	movwf	??_printf& (0+255),b
  3115  0011C6  0E00               	movlw	0
  3116  0011C8  0102               	movlb	2	; () banked
  3117  0011CA  1510               	andwf	(printf@flag+1)& (0+255),w,b
  3118  0011CC  0100               	movlb	0	; () banked
  3119  0011CE  6FE6               	movwf	(??_printf+1)& (0+255),b
  3120  0011D0  0100               	movlb	0	; () banked
  3121  0011D2  51E5               	movf	??_printf& (0+255),w,b
  3122  0011D4  0100               	movlb	0	; () banked
  3123  0011D6  11E6               	iorwf	(??_printf+1)& (0+255),w,b
  3124  0011D8  B4D8               	btfsc	status,2,c
  3125  0011DA  D004               	goto	l5744
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;doprnt.c: 1393: (putch('-') );
  3129  0011DC  0E2D               	movlw	45
  3130  0011DE  ECD1  F01B         	call	_putch
  3131  0011E2  D000               	goto	l5744
  3132  0011E4                     l5744:
  3133                           
  3134                           ;doprnt.c: 1415: if(width)
  3135  0011E4  0102               	movlb	2	; () banked
  3136  0011E6  5111               	movf	printf@width& (0+255),w,b
  3137  0011E8  0102               	movlb	2	; () banked
  3138  0011EA  1112               	iorwf	(printf@width+1)& (0+255),w,b
  3139  0011EC  B4D8               	btfsc	status,2,c
  3140  0011EE  D07C               	goto	l5764
  3141  0011F0                     l5746:
  3142                           
  3143                           ; BSR set to: 2
  3144                           ;doprnt.c: 1417: (putch('0') );
  3145  0011F0  0E30               	movlw	48
  3146  0011F2  ECD1  F01B         	call	_putch
  3147                           
  3148                           ;doprnt.c: 1418: while(--width);
  3149  0011F6  0102               	movlb	2	; () banked
  3150  0011F8  0711               	decf	printf@width& (0+255),f,b
  3151  0011FA  A0D8               	btfss	status,0,c
  3152  0011FC  0712               	decf	(printf@width+1)& (0+255),f,b
  3153  0011FE  0102               	movlb	2	; () banked
  3154  001200  5111               	movf	printf@width& (0+255),w,b
  3155  001202  0102               	movlb	2	; () banked
  3156  001204  1112               	iorwf	(printf@width+1)& (0+255),w,b
  3157  001206  B4D8               	btfsc	status,2,c
  3158  001208  D06F               	goto	l5764
  3159  00120A  D7F2               	goto	l5746
  3160                           
  3161                           ; BSR set to: 2
  3162                           ;doprnt.c: 1420: } else
  3163                           
  3164                           ; BSR set to: 2
  3165  00120C  D06D               	goto	l5764
  3166  00120E                     l5750:
  3167                           
  3168                           ; BSR set to: 2
  3169                           ;doprnt.c: 1422: {
  3170                           ;doprnt.c: 1424: if(width
  3171                           ;doprnt.c: 1428: )
  3172  00120E  0102               	movlb	2	; () banked
  3173  001210  5111               	movf	printf@width& (0+255),w,b
  3174  001212  0102               	movlb	2	; () banked
  3175  001214  1112               	iorwf	(printf@width+1)& (0+255),w,b
  3176  001216  B4D8               	btfsc	status,2,c
  3177  001218  D00F               	goto	l5756
  3178  00121A                     l5752:
  3179                           
  3180                           ; BSR set to: 2
  3181                           ;doprnt.c: 1430: (putch(' ') );
  3182  00121A  0E20               	movlw	32
  3183  00121C  ECD1  F01B         	call	_putch
  3184                           
  3185                           ;doprnt.c: 1431: while(--width);
  3186  001220  0102               	movlb	2	; () banked
  3187  001222  0711               	decf	printf@width& (0+255),f,b
  3188  001224  A0D8               	btfss	status,0,c
  3189  001226  0712               	decf	(printf@width+1)& (0+255),f,b
  3190  001228  0102               	movlb	2	; () banked
  3191  00122A  5111               	movf	printf@width& (0+255),w,b
  3192  00122C  0102               	movlb	2	; () banked
  3193  00122E  1112               	iorwf	(printf@width+1)& (0+255),w,b
  3194  001230  B4D8               	btfsc	status,2,c
  3195  001232  D002               	goto	l5756
  3196  001234  D7F2               	goto	l5752
  3197                           
  3198                           ; BSR set to: 2
  3199  001236  D000               	goto	l5756
  3200  001238                     l5756:
  3201                           
  3202                           ; BSR set to: 2
  3203                           ;doprnt.c: 1438: if(flag & 0x03)
  3204  001238  0E03               	movlw	3
  3205  00123A  0102               	movlb	2	; () banked
  3206  00123C  150F               	andwf	printf@flag& (0+255),w,b
  3207  00123E  0100               	movlb	0	; () banked
  3208  001240  6FE5               	movwf	??_printf& (0+255),b
  3209  001242  0E00               	movlw	0
  3210  001244  0102               	movlb	2	; () banked
  3211  001246  1510               	andwf	(printf@flag+1)& (0+255),w,b
  3212  001248  0100               	movlb	0	; () banked
  3213  00124A  6FE6               	movwf	(??_printf+1)& (0+255),b
  3214  00124C  0100               	movlb	0	; () banked
  3215  00124E  51E5               	movf	??_printf& (0+255),w,b
  3216  001250  0100               	movlb	0	; () banked
  3217  001252  11E6               	iorwf	(??_printf+1)& (0+255),w,b
  3218  001254  B4D8               	btfsc	status,2,c
  3219  001256  D048               	goto	l5764
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;doprnt.c: 1439: (putch('-') );
  3223  001258  0E2D               	movlw	45
  3224  00125A  ECD1  F01B         	call	_putch
  3225                           
  3226                           ;doprnt.c: 1469: }
  3227                           ;doprnt.c: 1474: while(prec--) {
  3228  00125E  D044               	goto	l5764
  3229  001260                     l5760:
  3230                           
  3231                           ;doprnt.c: 1478: {
  3232                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3233  001260  C216  F0E5         	movff	printf@prec,??_printf
  3234  001264  C217  F0E6         	movff	printf@prec+1,??_printf+1
  3235  001268  0100               	movlb	0	; () banked
  3236  00126A  90D8               	bcf	status,0,c
  3237  00126C  37E5               	rlcf	??_printf& (0+255),f,b
  3238  00126E  37E6               	rlcf	(??_printf+1)& (0+255),f,b
  3239  001270  0100               	movlb	0	; () banked
  3240  001272  90D8               	bcf	status,0,c
  3241  001274  37E5               	rlcf	??_printf& (0+255),f,b
  3242  001276  37E6               	rlcf	(??_printf+1)& (0+255),f,b
  3243  001278  0E01               	movlw	low _dpowers
  3244  00127A  0100               	movlb	0	; () banked
  3245  00127C  25E5               	addwf	??_printf& (0+255),w,b
  3246  00127E  6EF6               	movwf	tblptrl,c
  3247  001280  0E06               	movlw	high _dpowers
  3248  001282  21E6               	addwfc	(??_printf+1)& (0+255),w,b
  3249  001284  6EF7               	movwf	tblptrh,c
  3250  001286                     	if	0	;There are less than 3 active tblptr bytes
  3251  001286                     	endif
  3252  001286  0009               	tblrd		*+
  3253  001288  CFF5 F01B          	movff	tablat,___lldiv@divisor
  3254  00128C  0009               	tblrd		*+
  3255  00128E  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  3256  001292  0009               	tblrd		*+
  3257  001294  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  3258  001298  000A               	tblrd		*-
  3259  00129A  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  3260  00129E  C209  F017         	movff	printf@val,___lldiv@dividend
  3261  0012A2  C20A  F018         	movff	printf@val+1,___lldiv@dividend+1
  3262  0012A6  C20B  F019         	movff	printf@val+2,___lldiv@dividend+2
  3263  0012AA  C20C  F01A         	movff	printf@val+3,___lldiv@dividend+3
  3264  0012AE  ECC7  F018         	call	___lldiv	;wreg free
  3265  0012B2  C017  F024         	movff	?___lldiv,___llmod@dividend
  3266  0012B6  C018  F025         	movff	?___lldiv+1,___llmod@dividend+1
  3267  0012BA  C019  F026         	movff	?___lldiv+2,___llmod@dividend+2
  3268  0012BE  C01A  F027         	movff	?___lldiv+3,___llmod@dividend+3
  3269  0012C2  0E0A               	movlw	10
  3270  0012C4  6E28               	movwf	___llmod@divisor,c
  3271  0012C6  0E00               	movlw	0
  3272  0012C8  6E29               	movwf	___llmod@divisor+1,c
  3273  0012CA  0E00               	movlw	0
  3274  0012CC  6E2A               	movwf	___llmod@divisor+2,c
  3275  0012CE  0E00               	movlw	0
  3276  0012D0  6E2B               	movwf	___llmod@divisor+3,c
  3277  0012D2  EC4E  F019         	call	___llmod	;wreg free
  3278  0012D6  5024               	movf	?___llmod,w,c
  3279  0012D8  0F30               	addlw	48
  3280  0012DA  0102               	movlb	2	; () banked
  3281  0012DC  6F18               	movwf	printf@c& (0+255),b
  3282                           
  3283                           ; BSR set to: 2
  3284                           ;doprnt.c: 1523: }
  3285                           ;doprnt.c: 1524: (putch(c) );
  3286  0012DE  0102               	movlb	2	; () banked
  3287  0012E0  5118               	movf	printf@c& (0+255),w,b
  3288  0012E2  ECD1  F01B         	call	_putch
  3289  0012E6  D000               	goto	l5764
  3290  0012E8                     l5764:
  3291  0012E8  0102               	movlb	2	; () banked
  3292  0012EA  0716               	decf	printf@prec& (0+255),f,b
  3293  0012EC  A0D8               	btfss	status,0,c
  3294  0012EE  0717               	decf	(printf@prec+1)& (0+255),f,b
  3295  0012F0  0102               	movlb	2	; () banked
  3296  0012F2  2916               	incf	printf@prec& (0+255),w,b
  3297  0012F4  E1B5               	bnz	l5760
  3298  0012F6  0102               	movlb	2	; () banked
  3299  0012F8  2917               	incf	(printf@prec+1)& (0+255),w,b
  3300  0012FA  B4D8               	btfsc	status,2,c
  3301  0012FC  D002               	goto	l5766
  3302  0012FE  D7B0               	goto	l5760
  3303                           
  3304                           ; BSR set to: 2
  3305  001300  D000               	goto	l5766
  3306  001302                     l5766:
  3307  001302  C0DE  FFF6         	movff	printf@f,tblptrl
  3308  001306  C0DF  FFF7         	movff	printf@f+1,tblptrh
  3309  00130A  0100               	movlb	0	; () banked
  3310  00130C  4BDE               	infsnz	printf@f& (0+255),f,b
  3311  00130E  2BDF               	incf	(printf@f+1)& (0+255),f,b
  3312  001310                     	if	0	;tblptru may be non-zero
  3313  001310                     	endif
  3314  001310                     	if	0	;tblptru may be non-zero
  3315  001310                     	endif
  3316  001310  0008               	tblrd		*
  3317  001312  CFF5 F218          	movff	tablat,printf@c
  3318  001316  0102               	movlb	2	; () banked
  3319  001318  5118               	movf	printf@c& (0+255),w,b
  3320  00131A  B4D8               	btfsc	status,2,c
  3321  00131C  0012               	return	
  3322  00131E  EF6C  F003         	goto	l5472
  3323                           
  3324                           ; BSR set to: 2
  3325  001322  0012               	return	
  3326                           
  3327                           ; BSR set to: 2
  3328                           
  3329                           ; BSR set to: 2
  3330                           ;doprnt.c: 1540: return 0;
  3331                           ;	Return value of _printf is never used
  3332                           
  3333                           ;doprnt.c: 1525: }
  3334                           ;doprnt.c: 1533: }
  3335                           ;doprnt.c: 1535: alldone:
  3336  001324  0012               	return		;funcret
  3337  001326                     __end_of_printf:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           postinc0	equ	0xFEE
  3347                           wreg	equ	0xFE8
  3348                           postinc2	equ	0xFDE
  3349                           postdec2	equ	0xFDD
  3350                           fsr2h	equ	0xFDA
  3351                           fsr2l	equ	0xFD9
  3352                           status	equ	0xFD8
  3353                           
  3354 ;; *************** function _scale *****************
  3355 ;; Defined at:
  3356 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  scl             1    wreg     char 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  scl             1   12[BANK0 ] char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  3    6[BANK0 ] char 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3370 ;;      Params:         0       3       0       0       0       0       0
  3371 ;;      Locals:         0       4       0       0       0       0       0
  3372 ;;      Temps:          0       0       0       0       0       0       0
  3373 ;;      Totals:         0       7       0       0       0       0       0
  3374 ;;Total ram usage:        7 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    6
  3377 ;; This function calls:
  3378 ;;		___awdiv
  3379 ;;		___awmod
  3380 ;;		___ftmul
  3381 ;;		___wmul
  3382 ;; This function is called by:
  3383 ;;		_printf
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           	psect	text2
  3388  001326                     __ptext2:
  3389                           	opt stack 0
  3390  001326                     _scale:
  3391                           	opt stack 23
  3392                           
  3393                           ; BSR set to: 2
  3394                           ;incstack = 0
  3395                           ;scale@scl stored from wreg
  3396  001326  0100               	movlb	0	; () banked
  3397  001328  6FC8               	movwf	scale@scl& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;doprnt.c: 428: if(scl < 0) {
  3401  00132A  0100               	movlb	0	; () banked
  3402  00132C  AFC8               	btfss	scale@scl& (0+255),7,b
  3403  00132E  D107               	goto	l5090
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;doprnt.c: 429: scl = -scl;
  3407  001330  0100               	movlb	0	; () banked
  3408  001332  6DC8               	negf	scale@scl& (0+255),b
  3409                           
  3410                           ;doprnt.c: 430: if(scl>=110)
  3411  001334  0100               	movlb	0	; () banked
  3412  001336  51C8               	movf	scale@scl& (0+255),w,b
  3413  001338  0A80               	xorlw	128
  3414  00133A  0F12               	addlw	-238
  3415  00133C  A0D8               	btfss	status,0,c
  3416  00133E  D095               	goto	l5080
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3420  001340  0E00               	movlw	0
  3421  001342  6E28               	movwf	___wmul@multiplicand+1,c
  3422  001344  0E03               	movlw	3
  3423  001346  6E27               	movwf	___wmul@multiplicand,c
  3424  001348  0E00               	movlw	0
  3425  00134A  6E20               	movwf	___awdiv@divisor+1,c
  3426  00134C  0E0A               	movlw	10
  3427  00134E  6E1F               	movwf	___awdiv@divisor,c
  3428  001350  0E00               	movlw	0
  3429  001352  6E1A               	movwf	___awmod@divisor+1,c
  3430  001354  0E64               	movlw	100
  3431  001356  6E19               	movwf	___awmod@divisor,c
  3432  001358  0100               	movlb	0	; () banked
  3433  00135A  51C8               	movf	scale@scl& (0+255),w,b
  3434  00135C  6E17               	movwf	___awmod@dividend,c
  3435  00135E  6A18               	clrf	___awmod@dividend+1,c
  3436  001360  BE17               	btfsc	___awmod@dividend,7,c
  3437  001362  0618               	decf	___awmod@dividend+1,f,c
  3438  001364  EC0D  F019         	call	___awmod	;wreg free
  3439  001368  C017  F01D         	movff	?___awmod,___awdiv@dividend
  3440  00136C  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  3441  001370  ECE8  F017         	call	___awdiv	;wreg free
  3442  001374  0E09               	movlw	9
  3443  001376  241D               	addwf	?___awdiv,w,c
  3444  001378  6E25               	movwf	___wmul@multiplier,c
  3445  00137A  0E00               	movlw	0
  3446  00137C  201E               	addwfc	?___awdiv+1,w,c
  3447  00137E  6E26               	movwf	___wmul@multiplier+1,c
  3448  001380  EC33  F01B         	call	___wmul	;wreg free
  3449  001384  0E29               	movlw	low __npowers_
  3450  001386  2425               	addwf	?___wmul,w,c
  3451  001388  6EF6               	movwf	tblptrl,c
  3452  00138A  0E06               	movlw	high __npowers_
  3453  00138C  2026               	addwfc	?___wmul+1,w,c
  3454  00138E  6EF7               	movwf	tblptrh,c
  3455  001390                     	if	0	;There are less than 3 active tblptr bytes
  3456  001390                     	endif
  3457  001390  0009               	tblrd		*+
  3458  001392  CFF5 F035          	movff	tablat,___ftmul@f2
  3459  001396  0009               	tblrd		*+
  3460  001398  CFF5 F036          	movff	tablat,___ftmul@f2+1
  3461  00139C  000A               	tblrd		*-
  3462  00139E  CFF5 F037          	movff	tablat,___ftmul@f2+2
  3463  0013A2  0E00               	movlw	0
  3464  0013A4  6E20               	movwf	___awdiv@divisor+1,c
  3465  0013A6  0E64               	movlw	100
  3466  0013A8  6E1F               	movwf	___awdiv@divisor,c
  3467  0013AA  0100               	movlb	0	; () banked
  3468  0013AC  51C8               	movf	scale@scl& (0+255),w,b
  3469  0013AE  6E1D               	movwf	___awdiv@dividend,c
  3470  0013B0  6A1E               	clrf	___awdiv@dividend+1,c
  3471  0013B2  BE1D               	btfsc	___awdiv@dividend,7,c
  3472  0013B4  061E               	decf	___awdiv@dividend+1,f,c
  3473  0013B6  ECE8  F017         	call	___awdiv	;wreg free
  3474  0013BA  0E12               	movlw	18
  3475  0013BC  241D               	addwf	?___awdiv,w,c
  3476  0013BE  6E25               	movwf	___wmul@multiplier,c
  3477  0013C0  0E00               	movlw	0
  3478  0013C2  201E               	addwfc	?___awdiv+1,w,c
  3479  0013C4  6E26               	movwf	___wmul@multiplier+1,c
  3480  0013C6  0E00               	movlw	0
  3481  0013C8  6E28               	movwf	___wmul@multiplicand+1,c
  3482  0013CA  0E03               	movlw	3
  3483  0013CC  6E27               	movwf	___wmul@multiplicand,c
  3484  0013CE  EC33  F01B         	call	___wmul	;wreg free
  3485  0013D2  0E29               	movlw	low __npowers_
  3486  0013D4  2425               	addwf	?___wmul,w,c
  3487  0013D6  6EF6               	movwf	tblptrl,c
  3488  0013D8  0E06               	movlw	high __npowers_
  3489  0013DA  2026               	addwfc	?___wmul+1,w,c
  3490  0013DC  6EF7               	movwf	tblptrh,c
  3491  0013DE                     	if	0	;There are less than 3 active tblptr bytes
  3492  0013DE                     	endif
  3493  0013DE  0009               	tblrd		*+
  3494  0013E0  CFF5 F032          	movff	tablat,___ftmul@f1
  3495  0013E4  0009               	tblrd		*+
  3496  0013E6  CFF5 F033          	movff	tablat,___ftmul@f1+1
  3497  0013EA  000A               	tblrd		*-
  3498  0013EC  CFF5 F034          	movff	tablat,___ftmul@f1+2
  3499  0013F0  EC90  F014         	call	___ftmul	;wreg free
  3500  0013F4  C032  F0C5         	movff	?___ftmul,_scale$1742
  3501  0013F8  C033  F0C6         	movff	?___ftmul+1,_scale$1742+1
  3502  0013FC  C034  F0C7         	movff	?___ftmul+2,_scale$1742+2
  3503                           
  3504                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3505  001400  C0C5  F032         	movff	_scale$1742,___ftmul@f1
  3506  001404  C0C6  F033         	movff	_scale$1742+1,___ftmul@f1+1
  3507  001408  C0C7  F034         	movff	_scale$1742+2,___ftmul@f1+2
  3508  00140C  0E00               	movlw	0
  3509  00140E  6E28               	movwf	___wmul@multiplicand+1,c
  3510  001410  0E03               	movlw	3
  3511  001412  6E27               	movwf	___wmul@multiplicand,c
  3512  001414  0E00               	movlw	0
  3513  001416  6E1A               	movwf	___awmod@divisor+1,c
  3514  001418  0E0A               	movlw	10
  3515  00141A  6E19               	movwf	___awmod@divisor,c
  3516  00141C  0100               	movlb	0	; () banked
  3517  00141E  51C8               	movf	scale@scl& (0+255),w,b
  3518  001420  6E17               	movwf	___awmod@dividend,c
  3519  001422  6A18               	clrf	___awmod@dividend+1,c
  3520  001424  BE17               	btfsc	___awmod@dividend,7,c
  3521  001426  0618               	decf	___awmod@dividend+1,f,c
  3522  001428  EC0D  F019         	call	___awmod	;wreg free
  3523  00142C  C017  F025         	movff	?___awmod,___wmul@multiplier
  3524  001430  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3525  001434  EC33  F01B         	call	___wmul	;wreg free
  3526  001438  0E29               	movlw	low __npowers_
  3527  00143A  2425               	addwf	?___wmul,w,c
  3528  00143C  6EF6               	movwf	tblptrl,c
  3529  00143E  0E06               	movlw	high __npowers_
  3530  001440  2026               	addwfc	?___wmul+1,w,c
  3531  001442  6EF7               	movwf	tblptrh,c
  3532  001444                     	if	0	;There are less than 3 active tblptr bytes
  3533  001444                     	endif
  3534  001444  0009               	tblrd		*+
  3535  001446  CFF5 F035          	movff	tablat,___ftmul@f2
  3536  00144A  0009               	tblrd		*+
  3537  00144C  CFF5 F036          	movff	tablat,___ftmul@f2+1
  3538  001450  000A               	tblrd		*-
  3539  001452  CFF5 F037          	movff	tablat,___ftmul@f2+2
  3540  001456  EC90  F014         	call	___ftmul	;wreg free
  3541  00145A  C032  F0C2         	movff	?___ftmul,?_scale
  3542  00145E  C033  F0C3         	movff	?___ftmul+1,?_scale+1
  3543  001462  C034  F0C4         	movff	?___ftmul+2,?_scale+2
  3544  001466  0012               	return	
  3545  001468  D057               	goto	l5086
  3546  00146A                     l5080:
  3547                           
  3548                           ;doprnt.c: 432: else if(scl > 10)
  3549  00146A  0100               	movlb	0	; () banked
  3550  00146C  51C8               	movf	scale@scl& (0+255),w,b
  3551  00146E  0A80               	xorlw	128
  3552  001470  0F75               	addlw	-139
  3553  001472  A0D8               	btfss	status,0,c
  3554  001474  D051               	goto	l5086
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3558  001476  0E00               	movlw	0
  3559  001478  6E20               	movwf	___awdiv@divisor+1,c
  3560  00147A  0E0A               	movlw	10
  3561  00147C  6E1F               	movwf	___awdiv@divisor,c
  3562  00147E  0100               	movlb	0	; () banked
  3563  001480  51C8               	movf	scale@scl& (0+255),w,b
  3564  001482  6E1D               	movwf	___awdiv@dividend,c
  3565  001484  6A1E               	clrf	___awdiv@dividend+1,c
  3566  001486  BE1D               	btfsc	___awdiv@dividend,7,c
  3567  001488  061E               	decf	___awdiv@dividend+1,f,c
  3568  00148A  ECE8  F017         	call	___awdiv	;wreg free
  3569  00148E  0E09               	movlw	9
  3570  001490  241D               	addwf	?___awdiv,w,c
  3571  001492  6E25               	movwf	___wmul@multiplier,c
  3572  001494  0E00               	movlw	0
  3573  001496  201E               	addwfc	?___awdiv+1,w,c
  3574  001498  6E26               	movwf	___wmul@multiplier+1,c
  3575  00149A  0E00               	movlw	0
  3576  00149C  6E28               	movwf	___wmul@multiplicand+1,c
  3577  00149E  0E03               	movlw	3
  3578  0014A0  6E27               	movwf	___wmul@multiplicand,c
  3579  0014A2  EC33  F01B         	call	___wmul	;wreg free
  3580  0014A6  0E29               	movlw	low __npowers_
  3581  0014A8  2425               	addwf	?___wmul,w,c
  3582  0014AA  6EF6               	movwf	tblptrl,c
  3583  0014AC  0E06               	movlw	high __npowers_
  3584  0014AE  2026               	addwfc	?___wmul+1,w,c
  3585  0014B0  6EF7               	movwf	tblptrh,c
  3586  0014B2                     	if	0	;There are less than 3 active tblptr bytes
  3587  0014B2                     	endif
  3588  0014B2  0009               	tblrd		*+
  3589  0014B4  CFF5 F032          	movff	tablat,___ftmul@f1
  3590  0014B8  0009               	tblrd		*+
  3591  0014BA  CFF5 F033          	movff	tablat,___ftmul@f1+1
  3592  0014BE  000A               	tblrd		*-
  3593  0014C0  CFF5 F034          	movff	tablat,___ftmul@f1+2
  3594  0014C4  0E00               	movlw	0
  3595  0014C6  6E28               	movwf	___wmul@multiplicand+1,c
  3596  0014C8  0E03               	movlw	3
  3597  0014CA  6E27               	movwf	___wmul@multiplicand,c
  3598  0014CC  0E00               	movlw	0
  3599  0014CE  6E1A               	movwf	___awmod@divisor+1,c
  3600  0014D0  0E0A               	movlw	10
  3601  0014D2  6E19               	movwf	___awmod@divisor,c
  3602  0014D4  0100               	movlb	0	; () banked
  3603  0014D6  51C8               	movf	scale@scl& (0+255),w,b
  3604  0014D8  6E17               	movwf	___awmod@dividend,c
  3605  0014DA  6A18               	clrf	___awmod@dividend+1,c
  3606  0014DC  BE17               	btfsc	___awmod@dividend,7,c
  3607  0014DE  0618               	decf	___awmod@dividend+1,f,c
  3608  0014E0  EC0D  F019         	call	___awmod	;wreg free
  3609  0014E4  C017  F025         	movff	?___awmod,___wmul@multiplier
  3610  0014E8  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3611  0014EC  EC33  F01B         	call	___wmul	;wreg free
  3612  0014F0  0E29               	movlw	low __npowers_
  3613  0014F2  2425               	addwf	?___wmul,w,c
  3614  0014F4  6EF6               	movwf	tblptrl,c
  3615  0014F6  0E06               	movlw	high __npowers_
  3616  0014F8  2026               	addwfc	?___wmul+1,w,c
  3617  0014FA  6EF7               	movwf	tblptrh,c
  3618  0014FC                     	if	0	;There are less than 3 active tblptr bytes
  3619  0014FC                     	endif
  3620  0014FC  0009               	tblrd		*+
  3621  0014FE  CFF5 F035          	movff	tablat,___ftmul@f2
  3622  001502  0009               	tblrd		*+
  3623  001504  CFF5 F036          	movff	tablat,___ftmul@f2+1
  3624  001508  000A               	tblrd		*-
  3625  00150A  CFF5 F037          	movff	tablat,___ftmul@f2+2
  3626  00150E  EC90  F014         	call	___ftmul	;wreg free
  3627  001512  D7A3               	goto	L2
  3628  001514  0012               	return	
  3629  001516  D000               	goto	l5086
  3630  001518                     l5086:
  3631                           
  3632                           ;doprnt.c: 434: return _npowers_[scl];
  3633  001518  0100               	movlb	0	; () banked
  3634  00151A  51C8               	movf	scale@scl& (0+255),w,b
  3635  00151C  0D03               	mullw	3
  3636  00151E  0E29               	movlw	low __npowers_
  3637  001520  24F3               	addwf	prodl,w,c
  3638  001522  6EF6               	movwf	tblptrl,c
  3639  001524  0E06               	movlw	high __npowers_
  3640  001526  20F4               	addwfc	prodh,w,c
  3641  001528  6EF7               	movwf	tblptrh,c
  3642  00152A                     	if	0	;There are less than 3 active tblptr bytes
  3643  00152A                     	endif
  3644  00152A  0009               	tblrd		*+
  3645  00152C  CFF5 F0C2          	movff	tablat,?_scale
  3646  001530  0009               	tblrd		*+
  3647  001532  CFF5 F0C3          	movff	tablat,?_scale+1
  3648  001536  000A               	tblrd		*-
  3649  001538  CFF5 F0C4          	movff	tablat,?_scale+2
  3650                           
  3651                           ; BSR set to: 0
  3652  00153C  0012               	return	
  3653  00153E                     l5090:
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;doprnt.c: 435: }
  3657                           ;doprnt.c: 436: if(scl>=110)
  3658  00153E  0100               	movlb	0	; () banked
  3659  001540  51C8               	movf	scale@scl& (0+255),w,b
  3660  001542  0A80               	xorlw	128
  3661  001544  0F12               	addlw	-238
  3662  001546  A0D8               	btfss	status,0,c
  3663  001548  D095               	goto	l5098
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3667  00154A  0E00               	movlw	0
  3668  00154C  6E28               	movwf	___wmul@multiplicand+1,c
  3669  00154E  0E03               	movlw	3
  3670  001550  6E27               	movwf	___wmul@multiplicand,c
  3671  001552  0E00               	movlw	0
  3672  001554  6E20               	movwf	___awdiv@divisor+1,c
  3673  001556  0E0A               	movlw	10
  3674  001558  6E1F               	movwf	___awdiv@divisor,c
  3675  00155A  0E00               	movlw	0
  3676  00155C  6E1A               	movwf	___awmod@divisor+1,c
  3677  00155E  0E64               	movlw	100
  3678  001560  6E19               	movwf	___awmod@divisor,c
  3679  001562  0100               	movlb	0	; () banked
  3680  001564  51C8               	movf	scale@scl& (0+255),w,b
  3681  001566  6E17               	movwf	___awmod@dividend,c
  3682  001568  6A18               	clrf	___awmod@dividend+1,c
  3683  00156A  BE17               	btfsc	___awmod@dividend,7,c
  3684  00156C  0618               	decf	___awmod@dividend+1,f,c
  3685  00156E  EC0D  F019         	call	___awmod	;wreg free
  3686  001572  C017  F01D         	movff	?___awmod,___awdiv@dividend
  3687  001576  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  3688  00157A  ECE8  F017         	call	___awdiv	;wreg free
  3689  00157E  0E09               	movlw	9
  3690  001580  241D               	addwf	?___awdiv,w,c
  3691  001582  6E25               	movwf	___wmul@multiplier,c
  3692  001584  0E00               	movlw	0
  3693  001586  201E               	addwfc	?___awdiv+1,w,c
  3694  001588  6E26               	movwf	___wmul@multiplier+1,c
  3695  00158A  EC33  F01B         	call	___wmul	;wreg free
  3696  00158E  0E50               	movlw	low __powers_
  3697  001590  2425               	addwf	?___wmul,w,c
  3698  001592  6EF6               	movwf	tblptrl,c
  3699  001594  0E06               	movlw	high __powers_
  3700  001596  2026               	addwfc	?___wmul+1,w,c
  3701  001598  6EF7               	movwf	tblptrh,c
  3702  00159A                     	if	0	;There are less than 3 active tblptr bytes
  3703  00159A                     	endif
  3704  00159A  0009               	tblrd		*+
  3705  00159C  CFF5 F035          	movff	tablat,___ftmul@f2
  3706  0015A0  0009               	tblrd		*+
  3707  0015A2  CFF5 F036          	movff	tablat,___ftmul@f2+1
  3708  0015A6  000A               	tblrd		*-
  3709  0015A8  CFF5 F037          	movff	tablat,___ftmul@f2+2
  3710  0015AC  0E00               	movlw	0
  3711  0015AE  6E20               	movwf	___awdiv@divisor+1,c
  3712  0015B0  0E64               	movlw	100
  3713  0015B2  6E1F               	movwf	___awdiv@divisor,c
  3714  0015B4  0100               	movlb	0	; () banked
  3715  0015B6  51C8               	movf	scale@scl& (0+255),w,b
  3716  0015B8  6E1D               	movwf	___awdiv@dividend,c
  3717  0015BA  6A1E               	clrf	___awdiv@dividend+1,c
  3718  0015BC  BE1D               	btfsc	___awdiv@dividend,7,c
  3719  0015BE  061E               	decf	___awdiv@dividend+1,f,c
  3720  0015C0  ECE8  F017         	call	___awdiv	;wreg free
  3721  0015C4  0E12               	movlw	18
  3722  0015C6  241D               	addwf	?___awdiv,w,c
  3723  0015C8  6E25               	movwf	___wmul@multiplier,c
  3724  0015CA  0E00               	movlw	0
  3725  0015CC  201E               	addwfc	?___awdiv+1,w,c
  3726  0015CE  6E26               	movwf	___wmul@multiplier+1,c
  3727  0015D0  0E00               	movlw	0
  3728  0015D2  6E28               	movwf	___wmul@multiplicand+1,c
  3729  0015D4  0E03               	movlw	3
  3730  0015D6  6E27               	movwf	___wmul@multiplicand,c
  3731  0015D8  EC33  F01B         	call	___wmul	;wreg free
  3732  0015DC  0E50               	movlw	low __powers_
  3733  0015DE  2425               	addwf	?___wmul,w,c
  3734  0015E0  6EF6               	movwf	tblptrl,c
  3735  0015E2  0E06               	movlw	high __powers_
  3736  0015E4  2026               	addwfc	?___wmul+1,w,c
  3737  0015E6  6EF7               	movwf	tblptrh,c
  3738  0015E8                     	if	0	;There are less than 3 active tblptr bytes
  3739  0015E8                     	endif
  3740  0015E8  0009               	tblrd		*+
  3741  0015EA  CFF5 F032          	movff	tablat,___ftmul@f1
  3742  0015EE  0009               	tblrd		*+
  3743  0015F0  CFF5 F033          	movff	tablat,___ftmul@f1+1
  3744  0015F4  000A               	tblrd		*-
  3745  0015F6  CFF5 F034          	movff	tablat,___ftmul@f1+2
  3746  0015FA  EC90  F014         	call	___ftmul	;wreg free
  3747  0015FE  C032  F0C5         	movff	?___ftmul,_scale$1742
  3748  001602  C033  F0C6         	movff	?___ftmul+1,_scale$1742+1
  3749  001606  C034  F0C7         	movff	?___ftmul+2,_scale$1742+2
  3750                           
  3751                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3752  00160A  C0C5  F032         	movff	_scale$1742,___ftmul@f1
  3753  00160E  C0C6  F033         	movff	_scale$1742+1,___ftmul@f1+1
  3754  001612  C0C7  F034         	movff	_scale$1742+2,___ftmul@f1+2
  3755  001616  0E00               	movlw	0
  3756  001618  6E28               	movwf	___wmul@multiplicand+1,c
  3757  00161A  0E03               	movlw	3
  3758  00161C  6E27               	movwf	___wmul@multiplicand,c
  3759  00161E  0E00               	movlw	0
  3760  001620  6E1A               	movwf	___awmod@divisor+1,c
  3761  001622  0E0A               	movlw	10
  3762  001624  6E19               	movwf	___awmod@divisor,c
  3763  001626  0100               	movlb	0	; () banked
  3764  001628  51C8               	movf	scale@scl& (0+255),w,b
  3765  00162A  6E17               	movwf	___awmod@dividend,c
  3766  00162C  6A18               	clrf	___awmod@dividend+1,c
  3767  00162E  BE17               	btfsc	___awmod@dividend,7,c
  3768  001630  0618               	decf	___awmod@dividend+1,f,c
  3769  001632  EC0D  F019         	call	___awmod	;wreg free
  3770  001636  C017  F025         	movff	?___awmod,___wmul@multiplier
  3771  00163A  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3772  00163E  EC33  F01B         	call	___wmul	;wreg free
  3773  001642  0E50               	movlw	low __powers_
  3774  001644  2425               	addwf	?___wmul,w,c
  3775  001646  6EF6               	movwf	tblptrl,c
  3776  001648  0E06               	movlw	high __powers_
  3777  00164A  2026               	addwfc	?___wmul+1,w,c
  3778  00164C  6EF7               	movwf	tblptrh,c
  3779  00164E                     	if	0	;There are less than 3 active tblptr bytes
  3780  00164E                     	endif
  3781  00164E  0009               	tblrd		*+
  3782  001650  CFF5 F035          	movff	tablat,___ftmul@f2
  3783  001654  0009               	tblrd		*+
  3784  001656  CFF5 F036          	movff	tablat,___ftmul@f2+1
  3785  00165A  000A               	tblrd		*-
  3786  00165C  CFF5 F037          	movff	tablat,___ftmul@f2+2
  3787  001660  EC90  F014         	call	___ftmul	;wreg free
  3788  001664  C032  F0C2         	movff	?___ftmul,?_scale
  3789  001668  C033  F0C3         	movff	?___ftmul+1,?_scale+1
  3790  00166C  C034  F0C4         	movff	?___ftmul+2,?_scale+2
  3791  001670  0012               	return	
  3792  001672  D057               	goto	l5104
  3793  001674                     l5098:
  3794                           
  3795                           ;doprnt.c: 438: else if(scl > 10)
  3796  001674  0100               	movlb	0	; () banked
  3797  001676  51C8               	movf	scale@scl& (0+255),w,b
  3798  001678  0A80               	xorlw	128
  3799  00167A  0F75               	addlw	-139
  3800  00167C  A0D8               	btfss	status,0,c
  3801  00167E  D051               	goto	l5104
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3805  001680  0E00               	movlw	0
  3806  001682  6E20               	movwf	___awdiv@divisor+1,c
  3807  001684  0E0A               	movlw	10
  3808  001686  6E1F               	movwf	___awdiv@divisor,c
  3809  001688  0100               	movlb	0	; () banked
  3810  00168A  51C8               	movf	scale@scl& (0+255),w,b
  3811  00168C  6E1D               	movwf	___awdiv@dividend,c
  3812  00168E  6A1E               	clrf	___awdiv@dividend+1,c
  3813  001690  BE1D               	btfsc	___awdiv@dividend,7,c
  3814  001692  061E               	decf	___awdiv@dividend+1,f,c
  3815  001694  ECE8  F017         	call	___awdiv	;wreg free
  3816  001698  0E09               	movlw	9
  3817  00169A  241D               	addwf	?___awdiv,w,c
  3818  00169C  6E25               	movwf	___wmul@multiplier,c
  3819  00169E  0E00               	movlw	0
  3820  0016A0  201E               	addwfc	?___awdiv+1,w,c
  3821  0016A2  6E26               	movwf	___wmul@multiplier+1,c
  3822  0016A4  0E00               	movlw	0
  3823  0016A6  6E28               	movwf	___wmul@multiplicand+1,c
  3824  0016A8  0E03               	movlw	3
  3825  0016AA  6E27               	movwf	___wmul@multiplicand,c
  3826  0016AC  EC33  F01B         	call	___wmul	;wreg free
  3827  0016B0  0E50               	movlw	low __powers_
  3828  0016B2  2425               	addwf	?___wmul,w,c
  3829  0016B4  6EF6               	movwf	tblptrl,c
  3830  0016B6  0E06               	movlw	high __powers_
  3831  0016B8  2026               	addwfc	?___wmul+1,w,c
  3832  0016BA  6EF7               	movwf	tblptrh,c
  3833  0016BC                     	if	0	;There are less than 3 active tblptr bytes
  3834  0016BC                     	endif
  3835  0016BC  0009               	tblrd		*+
  3836  0016BE  CFF5 F032          	movff	tablat,___ftmul@f1
  3837  0016C2  0009               	tblrd		*+
  3838  0016C4  CFF5 F033          	movff	tablat,___ftmul@f1+1
  3839  0016C8  000A               	tblrd		*-
  3840  0016CA  CFF5 F034          	movff	tablat,___ftmul@f1+2
  3841  0016CE  0E00               	movlw	0
  3842  0016D0  6E28               	movwf	___wmul@multiplicand+1,c
  3843  0016D2  0E03               	movlw	3
  3844  0016D4  6E27               	movwf	___wmul@multiplicand,c
  3845  0016D6  0E00               	movlw	0
  3846  0016D8  6E1A               	movwf	___awmod@divisor+1,c
  3847  0016DA  0E0A               	movlw	10
  3848  0016DC  6E19               	movwf	___awmod@divisor,c
  3849  0016DE  0100               	movlb	0	; () banked
  3850  0016E0  51C8               	movf	scale@scl& (0+255),w,b
  3851  0016E2  6E17               	movwf	___awmod@dividend,c
  3852  0016E4  6A18               	clrf	___awmod@dividend+1,c
  3853  0016E6  BE17               	btfsc	___awmod@dividend,7,c
  3854  0016E8  0618               	decf	___awmod@dividend+1,f,c
  3855  0016EA  EC0D  F019         	call	___awmod	;wreg free
  3856  0016EE  C017  F025         	movff	?___awmod,___wmul@multiplier
  3857  0016F2  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3858  0016F6  EC33  F01B         	call	___wmul	;wreg free
  3859  0016FA  0E50               	movlw	low __powers_
  3860  0016FC  2425               	addwf	?___wmul,w,c
  3861  0016FE  6EF6               	movwf	tblptrl,c
  3862  001700  0E06               	movlw	high __powers_
  3863  001702  2026               	addwfc	?___wmul+1,w,c
  3864  001704  6EF7               	movwf	tblptrh,c
  3865  001706                     	if	0	;There are less than 3 active tblptr bytes
  3866  001706                     	endif
  3867  001706  0009               	tblrd		*+
  3868  001708  CFF5 F035          	movff	tablat,___ftmul@f2
  3869  00170C  0009               	tblrd		*+
  3870  00170E  CFF5 F036          	movff	tablat,___ftmul@f2+1
  3871  001712  000A               	tblrd		*-
  3872  001714  CFF5 F037          	movff	tablat,___ftmul@f2+2
  3873  001718  EC90  F014         	call	___ftmul	;wreg free
  3874  00171C  D7A3               	goto	L3
  3875  00171E  0012               	return	
  3876  001720  D000               	goto	l5104
  3877  001722                     l5104:
  3878                           
  3879                           ;doprnt.c: 440: return _powers_[scl];
  3880  001722  0100               	movlb	0	; () banked
  3881  001724  51C8               	movf	scale@scl& (0+255),w,b
  3882  001726  0D03               	mullw	3
  3883  001728  0E50               	movlw	low __powers_
  3884  00172A  24F3               	addwf	prodl,w,c
  3885  00172C  6EF6               	movwf	tblptrl,c
  3886  00172E  0E06               	movlw	high __powers_
  3887  001730  20F4               	addwfc	prodh,w,c
  3888  001732  6EF7               	movwf	tblptrh,c
  3889  001734                     	if	0	;There are less than 3 active tblptr bytes
  3890  001734                     	endif
  3891  001734  0009               	tblrd		*+
  3892  001736  CFF5 F0C2          	movff	tablat,?_scale
  3893  00173A  0009               	tblrd		*+
  3894  00173C  CFF5 F0C3          	movff	tablat,?_scale+1
  3895  001740  000A               	tblrd		*-
  3896  001742  CFF5 F0C4          	movff	tablat,?_scale+2
  3897  001746  0012               	return	
  3898                           
  3899                           ; BSR set to: 0
  3900  001748  0012               	return		;funcret
  3901  00174A                     __end_of_scale:
  3902                           	opt stack 0
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           intcon	equ	0xFF2
  3910                           postinc0	equ	0xFEE
  3911                           wreg	equ	0xFE8
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _putch *****************
  3919 ;; Defined at:
  3920 ;;		line 168 in file "mcc_generated_files/eusart1.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  txData          1    wreg     unsigned char 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  txData          1   23[COMRAM] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;		None               void
  3927 ;; Registers used:
  3928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3934 ;;      Params:         0       0       0       0       0       0       0
  3935 ;;      Locals:         1       0       0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0
  3937 ;;      Totals:         1       0       0       0       0       0       0
  3938 ;;Total ram usage:        1 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    5
  3941 ;; This function calls:
  3942 ;;		_EUSART1_Write
  3943 ;; This function is called by:
  3944 ;;		_printf
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text3
  3949  0037A2                     __ptext3:
  3950                           	opt stack 0
  3951  0037A2                     _putch:
  3952                           	opt stack 24
  3953                           
  3954                           ;incstack = 0
  3955                           ;putch@txData stored from wreg
  3956  0037A2  6E18               	movwf	putch@txData,c
  3957                           
  3958                           ;eusart1.c: 170: EUSART1_Write(txData);
  3959  0037A4  5018               	movf	putch@txData,w,c
  3960  0037A6  EC2A  F01A         	call	_EUSART1_Write
  3961  0037AA  0012               	return		;funcret
  3962  0037AC                     __end_of_putch:
  3963                           	opt stack 0
  3964                           tblptru	equ	0xFF8
  3965                           tblptrh	equ	0xFF7
  3966                           tblptrl	equ	0xFF6
  3967                           tablat	equ	0xFF5
  3968                           prodh	equ	0xFF4
  3969                           prodl	equ	0xFF3
  3970                           intcon	equ	0xFF2
  3971                           postinc0	equ	0xFEE
  3972                           wreg	equ	0xFE8
  3973                           postinc2	equ	0xFDE
  3974                           postdec2	equ	0xFDD
  3975                           fsr2h	equ	0xFDA
  3976                           fsr2l	equ	0xFD9
  3977                           status	equ	0xFD8
  3978                           
  3979 ;; *************** function _EUSART1_Write *****************
  3980 ;; Defined at:
  3981 ;;		line 140 in file "mcc_generated_files/eusart1.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  txData          1    wreg     unsigned char 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  txData          1   22[COMRAM] unsigned char 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;		None               void
  3988 ;; Registers used:
  3989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3995 ;;      Params:         0       0       0       0       0       0       0
  3996 ;;      Locals:         1       0       0       0       0       0       0
  3997 ;;      Temps:          0       0       0       0       0       0       0
  3998 ;;      Totals:         1       0       0       0       0       0       0
  3999 ;;Total ram usage:        1 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    4
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_putch
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text4
  4010  003454                     __ptext4:
  4011                           	opt stack 0
  4012  003454                     _EUSART1_Write:
  4013                           	opt stack 24
  4014                           
  4015                           ;incstack = 0
  4016                           ;EUSART1_Write@txData stored from wreg
  4017  003454  6E17               	movwf	EUSART1_Write@txData,c
  4018                           
  4019                           ;eusart1.c: 142: while(0 == eusart1TxBufferRemaining)
  4020  003456  D000               	goto	l4882
  4021  003458                     l4882:
  4022  003458  5049               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  4023  00345A  B4D8               	btfsc	status,2,c
  4024  00345C  D7FD               	goto	l4882
  4025                           
  4026                           ;eusart1.c: 144: }
  4027                           ;eusart1.c: 146: if(0 == PIE1bits.TX1IE)
  4028  00345E  B89D               	btfsc	3997,4,c	;volatile
  4029  003460  D003               	goto	l122
  4030                           
  4031                           ;eusart1.c: 147: {
  4032                           ;eusart1.c: 148: TX1REG = txData;
  4033  003462  C017  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  4034                           
  4035                           ;eusart1.c: 149: }
  4036  003466  D014               	goto	l4896
  4037  003468                     l122:
  4038                           
  4039                           ;eusart1.c: 150: else
  4040                           ;eusart1.c: 151: {
  4041                           ;eusart1.c: 152: PIE1bits.TX1IE = 0;
  4042  003468  989D               	bcf	3997,4,c	;volatile
  4043                           
  4044                           ;eusart1.c: 153: eusart1TxBuffer[eusart1TxHead++] = txData;
  4045  00346A  5045               	movf	_eusart1TxHead,w,c
  4046  00346C  0D01               	mullw	1
  4047  00346E  0E9A               	movlw	low _eusart1TxBuffer
  4048  003470  24F3               	addwf	prodl,w,c
  4049  003472  6ED9               	movwf	fsr2l,c
  4050  003474  0E00               	movlw	high _eusart1TxBuffer
  4051  003476  20F4               	addwfc	prodh,w,c
  4052  003478  6EDA               	movwf	fsr2h,c
  4053  00347A  C017  FFDF         	movff	EUSART1_Write@txData,indf2
  4054  00347E  2A45               	incf	_eusart1TxHead,f,c
  4055                           
  4056                           ;eusart1.c: 154: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  4057  003480  0E07               	movlw	7
  4058  003482  6445               	cpfsgt	_eusart1TxHead,c
  4059  003484  D003               	goto	l4894
  4060                           
  4061                           ;eusart1.c: 155: {
  4062                           ;eusart1.c: 156: eusart1TxHead = 0;
  4063  003486  0E00               	movlw	0
  4064  003488  6E45               	movwf	_eusart1TxHead,c
  4065  00348A  D000               	goto	l4894
  4066  00348C                     l4894:
  4067                           
  4068                           ;eusart1.c: 157: }
  4069                           ;eusart1.c: 158: eusart1TxBufferRemaining--;
  4070  00348C  0649               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  4071  00348E  D000               	goto	l4896
  4072  003490                     l4896:
  4073                           
  4074                           ;eusart1.c: 159: }
  4075                           ;eusart1.c: 160: PIE1bits.TX1IE = 1;
  4076  003490  889D               	bsf	3997,4,c	;volatile
  4077  003492  0012               	return		;funcret
  4078  003494                     __end_of_EUSART1_Write:
  4079                           	opt stack 0
  4080                           tblptru	equ	0xFF8
  4081                           tblptrh	equ	0xFF7
  4082                           tblptrl	equ	0xFF6
  4083                           tablat	equ	0xFF5
  4084                           prodh	equ	0xFF4
  4085                           prodl	equ	0xFF3
  4086                           intcon	equ	0xFF2
  4087                           postinc0	equ	0xFEE
  4088                           wreg	equ	0xFE8
  4089                           indf2	equ	0xFDF
  4090                           postinc2	equ	0xFDE
  4091                           postdec2	equ	0xFDD
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function _isdigit *****************
  4097 ;; Defined at:
  4098 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  c               1    wreg     unsigned char 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  c               1   24[COMRAM] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;		None               void
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4112 ;;      Params:         0       0       0       0       0       0       0
  4113 ;;      Locals:         2       0       0       0       0       0       0
  4114 ;;      Temps:          1       0       0       0       0       0       0
  4115 ;;      Totals:         3       0       0       0       0       0       0
  4116 ;;Total ram usage:        3 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    4
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_printf
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text5
  4127  0036B2                     __ptext5:
  4128                           	opt stack 0
  4129  0036B2                     _isdigit:
  4130                           	opt stack 25
  4131                           
  4132                           ;incstack = 0
  4133                           ;isdigit@c stored from wreg
  4134  0036B2  6E19               	movwf	isdigit@c,c
  4135  0036B4  0E00               	movlw	0
  4136  0036B6  6E18               	movwf	_isdigit$1357,c
  4137  0036B8  0E3A               	movlw	58
  4138  0036BA  6019               	cpfslt	isdigit@c,c
  4139  0036BC  D006               	goto	l5116
  4140  0036BE  0E2F               	movlw	47
  4141  0036C0  6419               	cpfsgt	isdigit@c,c
  4142  0036C2  D003               	goto	l5116
  4143  0036C4  0E01               	movlw	1
  4144  0036C6  6E18               	movwf	_isdigit$1357,c
  4145  0036C8  D000               	goto	l5116
  4146  0036CA                     l5116:
  4147  0036CA  C018  F017         	movff	_isdigit$1357,??_isdigit
  4148  0036CE  3017               	rrcf	??_isdigit,w,c
  4149  0036D0  0012               	return	
  4150  0036D2  0012               	return		;funcret
  4151  0036D4                     __end_of_isdigit:
  4152                           	opt stack 0
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           prodh	equ	0xFF4
  4158                           prodl	equ	0xFF3
  4159                           intcon	equ	0xFF2
  4160                           postinc0	equ	0xFEE
  4161                           wreg	equ	0xFE8
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           postdec2	equ	0xFDD
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _fround *****************
  4170 ;; Defined at:
  4171 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  prec            1    wreg     unsigned char 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  prec            1   15[BANK0 ] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  3    6[BANK0 ] unsigned char 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4185 ;;      Params:         0       3       0       0       0       0       0
  4186 ;;      Locals:         0       7       0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0
  4188 ;;      Totals:         0      10       0       0       0       0       0
  4189 ;;Total ram usage:       10 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    6
  4192 ;; This function calls:
  4193 ;;		___awdiv
  4194 ;;		___awmod
  4195 ;;		___ftmul
  4196 ;;		___wmul
  4197 ;; This function is called by:
  4198 ;;		_printf
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           	psect	text6
  4203  001CEC                     __ptext6:
  4204                           	opt stack 0
  4205  001CEC                     _fround:
  4206                           	opt stack 23
  4207                           
  4208                           ;incstack = 0
  4209                           ;fround@prec stored from wreg
  4210  001CEC  0100               	movlb	0	; () banked
  4211  001CEE  6FCB               	movwf	fround@prec& (0+255),b
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;doprnt.c: 413: if(prec>=110)
  4215  001CF0  0E6D               	movlw	109
  4216  001CF2  0100               	movlb	0	; () banked
  4217  001CF4  65CB               	cpfsgt	fround@prec& (0+255),b
  4218  001CF6  D0A0               	goto	l5058
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4222  001CF8  0E00               	movlw	0
  4223  001CFA  6E28               	movwf	___wmul@multiplicand+1,c
  4224  001CFC  0E03               	movlw	3
  4225  001CFE  6E27               	movwf	___wmul@multiplicand,c
  4226  001D00  0E00               	movlw	0
  4227  001D02  6E20               	movwf	___awdiv@divisor+1,c
  4228  001D04  0E0A               	movlw	10
  4229  001D06  6E1F               	movwf	___awdiv@divisor,c
  4230  001D08  0E00               	movlw	0
  4231  001D0A  6E1A               	movwf	___awmod@divisor+1,c
  4232  001D0C  0E64               	movlw	100
  4233  001D0E  6E19               	movwf	___awmod@divisor,c
  4234  001D10  C0CB  F017         	movff	fround@prec,___awmod@dividend
  4235  001D14  6A18               	clrf	___awmod@dividend+1,c
  4236  001D16  EC0D  F019         	call	___awmod	;wreg free
  4237  001D1A  C017  F01D         	movff	?___awmod,___awdiv@dividend
  4238  001D1E  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  4239  001D22  ECE8  F017         	call	___awdiv	;wreg free
  4240  001D26  0E09               	movlw	9
  4241  001D28  241D               	addwf	?___awdiv,w,c
  4242  001D2A  6E25               	movwf	___wmul@multiplier,c
  4243  001D2C  0E00               	movlw	0
  4244  001D2E  201E               	addwfc	?___awdiv+1,w,c
  4245  001D30  6E26               	movwf	___wmul@multiplier+1,c
  4246  001D32  EC33  F01B         	call	___wmul	;wreg free
  4247  001D36  0E29               	movlw	low __npowers_
  4248  001D38  2425               	addwf	?___wmul,w,c
  4249  001D3A  6EF6               	movwf	tblptrl,c
  4250  001D3C  0E06               	movlw	high __npowers_
  4251  001D3E  2026               	addwfc	?___wmul+1,w,c
  4252  001D40  6EF7               	movwf	tblptrh,c
  4253  001D42                     	if	0	;There are less than 3 active tblptr bytes
  4254  001D42                     	endif
  4255  001D42  0009               	tblrd		*+
  4256  001D44  CFF5 F035          	movff	tablat,___ftmul@f2
  4257  001D48  0009               	tblrd		*+
  4258  001D4A  CFF5 F036          	movff	tablat,___ftmul@f2+1
  4259  001D4E  000A               	tblrd		*-
  4260  001D50  CFF5 F037          	movff	tablat,___ftmul@f2+2
  4261  001D54  0E00               	movlw	0
  4262  001D56  6E20               	movwf	___awdiv@divisor+1,c
  4263  001D58  0E64               	movlw	100
  4264  001D5A  6E1F               	movwf	___awdiv@divisor,c
  4265  001D5C  C0CB  F01D         	movff	fround@prec,___awdiv@dividend
  4266  001D60  6A1E               	clrf	___awdiv@dividend+1,c
  4267  001D62  ECE8  F017         	call	___awdiv	;wreg free
  4268  001D66  0E12               	movlw	18
  4269  001D68  241D               	addwf	?___awdiv,w,c
  4270  001D6A  6E25               	movwf	___wmul@multiplier,c
  4271  001D6C  0E00               	movlw	0
  4272  001D6E  201E               	addwfc	?___awdiv+1,w,c
  4273  001D70  6E26               	movwf	___wmul@multiplier+1,c
  4274  001D72  0E00               	movlw	0
  4275  001D74  6E28               	movwf	___wmul@multiplicand+1,c
  4276  001D76  0E03               	movlw	3
  4277  001D78  6E27               	movwf	___wmul@multiplicand,c
  4278  001D7A  EC33  F01B         	call	___wmul	;wreg free
  4279  001D7E  0E29               	movlw	low __npowers_
  4280  001D80  2425               	addwf	?___wmul,w,c
  4281  001D82  6EF6               	movwf	tblptrl,c
  4282  001D84  0E06               	movlw	high __npowers_
  4283  001D86  2026               	addwfc	?___wmul+1,w,c
  4284  001D88  6EF7               	movwf	tblptrh,c
  4285  001D8A                     	if	0	;There are less than 3 active tblptr bytes
  4286  001D8A                     	endif
  4287  001D8A  0009               	tblrd		*+
  4288  001D8C  CFF5 F032          	movff	tablat,___ftmul@f1
  4289  001D90  0009               	tblrd		*+
  4290  001D92  CFF5 F033          	movff	tablat,___ftmul@f1+1
  4291  001D96  000A               	tblrd		*-
  4292  001D98  CFF5 F034          	movff	tablat,___ftmul@f1+2
  4293  001D9C  EC90  F014         	call	___ftmul	;wreg free
  4294  001DA0  C032  F0C8         	movff	?___ftmul,_fround$1740
  4295  001DA4  C033  F0C9         	movff	?___ftmul+1,_fround$1740+1
  4296  001DA8  C034  F0CA         	movff	?___ftmul+2,_fround$1740+2
  4297                           
  4298                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4299  001DAC  0E00               	movlw	0
  4300  001DAE  6E28               	movwf	___wmul@multiplicand+1,c
  4301  001DB0  0E03               	movlw	3
  4302  001DB2  6E27               	movwf	___wmul@multiplicand,c
  4303  001DB4  0E00               	movlw	0
  4304  001DB6  6E1A               	movwf	___awmod@divisor+1,c
  4305  001DB8  0E0A               	movlw	10
  4306  001DBA  6E19               	movwf	___awmod@divisor,c
  4307  001DBC  C0CB  F017         	movff	fround@prec,___awmod@dividend
  4308  001DC0  6A18               	clrf	___awmod@dividend+1,c
  4309  001DC2  EC0D  F019         	call	___awmod	;wreg free
  4310  001DC6  C017  F025         	movff	?___awmod,___wmul@multiplier
  4311  001DCA  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  4312  001DCE  EC33  F01B         	call	___wmul	;wreg free
  4313  001DD2  0E29               	movlw	low __npowers_
  4314  001DD4  2425               	addwf	?___wmul,w,c
  4315  001DD6  6EF6               	movwf	tblptrl,c
  4316  001DD8  0E06               	movlw	high __npowers_
  4317  001DDA  2026               	addwfc	?___wmul+1,w,c
  4318  001DDC  6EF7               	movwf	tblptrh,c
  4319  001DDE                     	if	0	;There are less than 3 active tblptr bytes
  4320  001DDE                     	endif
  4321  001DDE  0009               	tblrd		*+
  4322  001DE0  CFF5 F035          	movff	tablat,___ftmul@f2
  4323  001DE4  0009               	tblrd		*+
  4324  001DE6  CFF5 F036          	movff	tablat,___ftmul@f2+1
  4325  001DEA  000A               	tblrd		*-
  4326  001DEC  CFF5 F037          	movff	tablat,___ftmul@f2+2
  4327  001DF0  C0C8  F032         	movff	_fround$1740,___ftmul@f1
  4328  001DF4  C0C9  F033         	movff	_fround$1740+1,___ftmul@f1+1
  4329  001DF8  C0CA  F034         	movff	_fround$1740+2,___ftmul@f1+2
  4330  001DFC  EC90  F014         	call	___ftmul	;wreg free
  4331  001E00  C032  F0C5         	movff	?___ftmul,_fround$1741
  4332  001E04  C033  F0C6         	movff	?___ftmul+1,_fround$1741+1
  4333  001E08  C034  F0C7         	movff	?___ftmul+2,_fround$1741+2
  4334                           
  4335                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4336  001E0C  C0C5  F032         	movff	_fround$1741,___ftmul@f1
  4337  001E10  C0C6  F033         	movff	_fround$1741+1,___ftmul@f1+1
  4338  001E14  C0C7  F034         	movff	_fround$1741+2,___ftmul@f1+2
  4339  001E18  0E00               	movlw	0
  4340  001E1A  6E35               	movwf	___ftmul@f2,c
  4341  001E1C  0E00               	movlw	0
  4342  001E1E  6E36               	movwf	___ftmul@f2+1,c
  4343  001E20  0E3F               	movlw	63
  4344  001E22  6E37               	movwf	___ftmul@f2+2,c
  4345  001E24  EC90  F014         	call	___ftmul	;wreg free
  4346  001E28  C032  F0C2         	movff	?___ftmul,?_fround
  4347  001E2C  C033  F0C3         	movff	?___ftmul+1,?_fround+1
  4348  001E30  C034  F0C4         	movff	?___ftmul+2,?_fround+2
  4349  001E34  0012               	return	
  4350  001E36  D063               	goto	l5066
  4351  001E38                     l5058:
  4352                           
  4353                           ;doprnt.c: 415: else if(prec > 10)
  4354  001E38  0E0A               	movlw	10
  4355  001E3A  0100               	movlb	0	; () banked
  4356  001E3C  65CB               	cpfsgt	fround@prec& (0+255),b
  4357  001E3E  D05F               	goto	l5066
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4361  001E40  0E00               	movlw	0
  4362  001E42  6E28               	movwf	___wmul@multiplicand+1,c
  4363  001E44  0E03               	movlw	3
  4364  001E46  6E27               	movwf	___wmul@multiplicand,c
  4365  001E48  0E00               	movlw	0
  4366  001E4A  6E1A               	movwf	___awmod@divisor+1,c
  4367  001E4C  0E0A               	movlw	10
  4368  001E4E  6E19               	movwf	___awmod@divisor,c
  4369  001E50  C0CB  F017         	movff	fround@prec,___awmod@dividend
  4370  001E54  6A18               	clrf	___awmod@dividend+1,c
  4371  001E56  EC0D  F019         	call	___awmod	;wreg free
  4372  001E5A  C017  F025         	movff	?___awmod,___wmul@multiplier
  4373  001E5E  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  4374  001E62  EC33  F01B         	call	___wmul	;wreg free
  4375  001E66  0E29               	movlw	low __npowers_
  4376  001E68  2425               	addwf	?___wmul,w,c
  4377  001E6A  6EF6               	movwf	tblptrl,c
  4378  001E6C  0E06               	movlw	high __npowers_
  4379  001E6E  2026               	addwfc	?___wmul+1,w,c
  4380  001E70  6EF7               	movwf	tblptrh,c
  4381  001E72                     	if	0	;There are less than 3 active tblptr bytes
  4382  001E72                     	endif
  4383  001E72  0009               	tblrd		*+
  4384  001E74  CFF5 F035          	movff	tablat,___ftmul@f2
  4385  001E78  0009               	tblrd		*+
  4386  001E7A  CFF5 F036          	movff	tablat,___ftmul@f2+1
  4387  001E7E  000A               	tblrd		*-
  4388  001E80  CFF5 F037          	movff	tablat,___ftmul@f2+2
  4389  001E84  0E00               	movlw	0
  4390  001E86  6E20               	movwf	___awdiv@divisor+1,c
  4391  001E88  0E0A               	movlw	10
  4392  001E8A  6E1F               	movwf	___awdiv@divisor,c
  4393  001E8C  C0CB  F01D         	movff	fround@prec,___awdiv@dividend
  4394  001E90  6A1E               	clrf	___awdiv@dividend+1,c
  4395  001E92  ECE8  F017         	call	___awdiv	;wreg free
  4396  001E96  0E09               	movlw	9
  4397  001E98  241D               	addwf	?___awdiv,w,c
  4398  001E9A  6E25               	movwf	___wmul@multiplier,c
  4399  001E9C  0E00               	movlw	0
  4400  001E9E  201E               	addwfc	?___awdiv+1,w,c
  4401  001EA0  6E26               	movwf	___wmul@multiplier+1,c
  4402  001EA2  0E00               	movlw	0
  4403  001EA4  6E28               	movwf	___wmul@multiplicand+1,c
  4404  001EA6  0E03               	movlw	3
  4405  001EA8  6E27               	movwf	___wmul@multiplicand,c
  4406  001EAA  EC33  F01B         	call	___wmul	;wreg free
  4407  001EAE  0E29               	movlw	low __npowers_
  4408  001EB0  2425               	addwf	?___wmul,w,c
  4409  001EB2  6EF6               	movwf	tblptrl,c
  4410  001EB4  0E06               	movlw	high __npowers_
  4411  001EB6  2026               	addwfc	?___wmul+1,w,c
  4412  001EB8  6EF7               	movwf	tblptrh,c
  4413  001EBA                     	if	0	;There are less than 3 active tblptr bytes
  4414  001EBA                     	endif
  4415  001EBA  0009               	tblrd		*+
  4416  001EBC  CFF5 F032          	movff	tablat,___ftmul@f1
  4417  001EC0  0009               	tblrd		*+
  4418  001EC2  CFF5 F033          	movff	tablat,___ftmul@f1+1
  4419  001EC6  000A               	tblrd		*-
  4420  001EC8  CFF5 F034          	movff	tablat,___ftmul@f1+2
  4421  001ECC  EC90  F014         	call	___ftmul	;wreg free
  4422  001ED0  C032  F0C8         	movff	?___ftmul,_fround$1740
  4423  001ED4  C033  F0C9         	movff	?___ftmul+1,_fround$1740+1
  4424  001ED8  C034  F0CA         	movff	?___ftmul+2,_fround$1740+2
  4425                           
  4426                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4427  001EDC  C0C8  F032         	movff	_fround$1740,___ftmul@f1
  4428  001EE0  C0C9  F033         	movff	_fround$1740+1,___ftmul@f1+1
  4429  001EE4  C0CA  F034         	movff	_fround$1740+2,___ftmul@f1+2
  4430  001EE8  0E00               	movlw	0
  4431  001EEA  6E35               	movwf	___ftmul@f2,c
  4432  001EEC  0E00               	movlw	0
  4433  001EEE  6E36               	movwf	___ftmul@f2+1,c
  4434  001EF0  0E3F               	movlw	63
  4435  001EF2  6E37               	movwf	___ftmul@f2+2,c
  4436  001EF4  EC90  F014         	call	___ftmul	;wreg free
  4437  001EF8  D797               	goto	L4
  4438  001EFA  0012               	return	
  4439  001EFC  D000               	goto	l5066
  4440  001EFE                     l5066:
  4441                           
  4442                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4443  001EFE  0100               	movlb	0	; () banked
  4444  001F00  51CB               	movf	fround@prec& (0+255),w,b
  4445  001F02  0D03               	mullw	3
  4446  001F04  0E29               	movlw	low __npowers_
  4447  001F06  24F3               	addwf	prodl,w,c
  4448  001F08  6EF6               	movwf	tblptrl,c
  4449  001F0A  0E06               	movlw	high __npowers_
  4450  001F0C  20F4               	addwfc	prodh,w,c
  4451  001F0E  6EF7               	movwf	tblptrh,c
  4452  001F10                     	if	0	;There are less than 3 active tblptr bytes
  4453  001F10                     	endif
  4454  001F10  0009               	tblrd		*+
  4455  001F12  CFF5 F032          	movff	tablat,___ftmul@f1
  4456  001F16  0009               	tblrd		*+
  4457  001F18  CFF5 F033          	movff	tablat,___ftmul@f1+1
  4458  001F1C  000A               	tblrd		*-
  4459  001F1E  CFF5 F034          	movff	tablat,___ftmul@f1+2
  4460  001F22  0E00               	movlw	0
  4461  001F24  6E35               	movwf	___ftmul@f2,c
  4462  001F26  0E00               	movlw	0
  4463  001F28  6E36               	movwf	___ftmul@f2+1,c
  4464  001F2A  0E3F               	movlw	63
  4465  001F2C  6E37               	movwf	___ftmul@f2+2,c
  4466  001F2E  EC90  F014         	call	___ftmul	;wreg free
  4467  001F32  C032  F0C2         	movff	?___ftmul,?_fround
  4468  001F36  C033  F0C3         	movff	?___ftmul+1,?_fround+1
  4469  001F3A  C034  F0C4         	movff	?___ftmul+2,?_fround+2
  4470  001F3E  0012               	return	
  4471  001F40  0012               	return		;funcret
  4472  001F42                     __end_of_fround:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           prodh	equ	0xFF4
  4479                           prodl	equ	0xFF3
  4480                           intcon	equ	0xFF2
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           indf2	equ	0xFDF
  4484                           postinc2	equ	0xFDE
  4485                           postdec2	equ	0xFDD
  4486                           fsr2h	equ	0xFDA
  4487                           fsr2l	equ	0xFD9
  4488                           status	equ	0xFD8
  4489                           
  4490 ;; *************** function ___awmod *****************
  4491 ;; Defined at:
  4492 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  dividend        2   22[COMRAM] int 
  4495 ;;  divisor         2   24[COMRAM] int 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  sign            1   27[COMRAM] unsigned char 
  4498 ;;  counter         1   26[COMRAM] unsigned char 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  2   22[COMRAM] int 
  4501 ;; Registers used:
  4502 ;;		wreg, status,2, status,0
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4508 ;;      Params:         4       0       0       0       0       0       0
  4509 ;;      Locals:         2       0       0       0       0       0       0
  4510 ;;      Temps:          0       0       0       0       0       0       0
  4511 ;;      Totals:         6       0       0       0       0       0       0
  4512 ;;Total ram usage:        6 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    4
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_fround
  4519 ;;		_scale
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           	psect	text7
  4524  00321A                     __ptext7:
  4525                           	opt stack 0
  4526  00321A                     ___awmod:
  4527                           	opt stack 24
  4528                           
  4529                           ;incstack = 0
  4530  00321A  0E00               	movlw	0
  4531  00321C  6E1C               	movwf	___awmod@sign,c
  4532  00321E  AE18               	btfss	___awmod@dividend+1,7,c
  4533  003220  D007               	goto	l4950
  4534  003222  6C17               	negf	___awmod@dividend,c
  4535  003224  1E18               	comf	___awmod@dividend+1,f,c
  4536  003226  B0D8               	btfsc	status,0,c
  4537  003228  2A18               	incf	___awmod@dividend+1,f,c
  4538  00322A  0E01               	movlw	1
  4539  00322C  6E1C               	movwf	___awmod@sign,c
  4540  00322E  D000               	goto	l4950
  4541  003230                     l4950:
  4542  003230  AE1A               	btfss	___awmod@divisor+1,7,c
  4543  003232  D005               	goto	l4954
  4544  003234  6C19               	negf	___awmod@divisor,c
  4545  003236  1E1A               	comf	___awmod@divisor+1,f,c
  4546  003238  B0D8               	btfsc	status,0,c
  4547  00323A  2A1A               	incf	___awmod@divisor+1,f,c
  4548  00323C  D000               	goto	l4954
  4549  00323E                     l4954:
  4550  00323E  5019               	movf	___awmod@divisor,w,c
  4551  003240  101A               	iorwf	___awmod@divisor+1,w,c
  4552  003242  B4D8               	btfsc	status,2,c
  4553  003244  D01D               	goto	l4970
  4554  003246  0E01               	movlw	1
  4555  003248  6E1B               	movwf	___awmod@counter,c
  4556  00324A  D005               	goto	l4960
  4557  00324C                     l4958:
  4558  00324C  90D8               	bcf	status,0,c
  4559  00324E  3619               	rlcf	___awmod@divisor,f,c
  4560  003250  361A               	rlcf	___awmod@divisor+1,f,c
  4561  003252  2A1B               	incf	___awmod@counter,f,c
  4562  003254  D000               	goto	l4960
  4563  003256                     l4960:
  4564  003256  BE1A               	btfsc	___awmod@divisor+1,7,c
  4565  003258  D002               	goto	l4962
  4566  00325A  D7F8               	goto	l4958
  4567  00325C  D000               	goto	l4962
  4568  00325E                     l4962:
  4569  00325E  5019               	movf	___awmod@divisor,w,c
  4570  003260  5C17               	subwf	___awmod@dividend,w,c
  4571  003262  501A               	movf	___awmod@divisor+1,w,c
  4572  003264  5818               	subwfb	___awmod@dividend+1,w,c
  4573  003266  A0D8               	btfss	status,0,c
  4574  003268  D005               	goto	l4966
  4575  00326A  5019               	movf	___awmod@divisor,w,c
  4576  00326C  5E17               	subwf	___awmod@dividend,f,c
  4577  00326E  501A               	movf	___awmod@divisor+1,w,c
  4578  003270  5A18               	subwfb	___awmod@dividend+1,f,c
  4579  003272  D000               	goto	l4966
  4580  003274                     l4966:
  4581  003274  90D8               	bcf	status,0,c
  4582  003276  321A               	rrcf	___awmod@divisor+1,f,c
  4583  003278  3219               	rrcf	___awmod@divisor,f,c
  4584  00327A  2E1B               	decfsz	___awmod@counter,f,c
  4585  00327C  D7F0               	goto	l4962
  4586  00327E  D000               	goto	l4970
  4587  003280                     l4970:
  4588  003280  501C               	movf	___awmod@sign,w,c
  4589  003282  B4D8               	btfsc	status,2,c
  4590  003284  D005               	goto	l4974
  4591  003286  6C17               	negf	___awmod@dividend,c
  4592  003288  1E18               	comf	___awmod@dividend+1,f,c
  4593  00328A  B0D8               	btfsc	status,0,c
  4594  00328C  2A18               	incf	___awmod@dividend+1,f,c
  4595  00328E  D000               	goto	l4974
  4596  003290                     l4974:
  4597  003290  C017  F017         	movff	___awmod@dividend,?___awmod
  4598  003294  C018  F018         	movff	___awmod@dividend+1,?___awmod+1
  4599  003298  0012               	return	
  4600  00329A  0012               	return		;funcret
  4601  00329C                     __end_of___awmod:
  4602                           	opt stack 0
  4603                           tblptru	equ	0xFF8
  4604                           tblptrh	equ	0xFF7
  4605                           tblptrl	equ	0xFF6
  4606                           tablat	equ	0xFF5
  4607                           prodh	equ	0xFF4
  4608                           prodl	equ	0xFF3
  4609                           intcon	equ	0xFF2
  4610                           postinc0	equ	0xFEE
  4611                           wreg	equ	0xFE8
  4612                           indf2	equ	0xFDF
  4613                           postinc2	equ	0xFDE
  4614                           postdec2	equ	0xFDD
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function ___awdiv *****************
  4620 ;; Defined at:
  4621 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;  dividend        2   28[COMRAM] int 
  4624 ;;  divisor         2   30[COMRAM] int 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;  quotient        2   34[COMRAM] int 
  4627 ;;  sign            1   33[COMRAM] unsigned char 
  4628 ;;  counter         1   32[COMRAM] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  2   28[COMRAM] int 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4638 ;;      Params:         4       0       0       0       0       0       0
  4639 ;;      Locals:         4       0       0       0       0       0       0
  4640 ;;      Temps:          0       0       0       0       0       0       0
  4641 ;;      Totals:         8       0       0       0       0       0       0
  4642 ;;Total ram usage:        8 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    4
  4645 ;; This function calls:
  4646 ;;		Nothing
  4647 ;; This function is called by:
  4648 ;;		_fround
  4649 ;;		_scale
  4650 ;;		_printf
  4651 ;;		_Current_Convert
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text8
  4656  002FD0                     __ptext8:
  4657                           	opt stack 0
  4658  002FD0                     ___awdiv:
  4659                           	opt stack 24
  4660                           
  4661                           ;incstack = 0
  4662  002FD0  0E00               	movlw	0
  4663  002FD2  6E22               	movwf	___awdiv@sign,c
  4664  002FD4  AE20               	btfss	___awdiv@divisor+1,7,c
  4665  002FD6  D007               	goto	l4906
  4666  002FD8  6C1F               	negf	___awdiv@divisor,c
  4667  002FDA  1E20               	comf	___awdiv@divisor+1,f,c
  4668  002FDC  B0D8               	btfsc	status,0,c
  4669  002FDE  2A20               	incf	___awdiv@divisor+1,f,c
  4670  002FE0  0E01               	movlw	1
  4671  002FE2  6E22               	movwf	___awdiv@sign,c
  4672  002FE4  D000               	goto	l4906
  4673  002FE6                     l4906:
  4674  002FE6  AE1E               	btfss	___awdiv@dividend+1,7,c
  4675  002FE8  D007               	goto	l4912
  4676  002FEA  6C1D               	negf	___awdiv@dividend,c
  4677  002FEC  1E1E               	comf	___awdiv@dividend+1,f,c
  4678  002FEE  B0D8               	btfsc	status,0,c
  4679  002FF0  2A1E               	incf	___awdiv@dividend+1,f,c
  4680  002FF2  0E01               	movlw	1
  4681  002FF4  1A22               	xorwf	___awdiv@sign,f,c
  4682  002FF6  D000               	goto	l4912
  4683  002FF8                     l4912:
  4684  002FF8  0E00               	movlw	0
  4685  002FFA  6E24               	movwf	___awdiv@quotient+1,c
  4686  002FFC  0E00               	movlw	0
  4687  002FFE  6E23               	movwf	___awdiv@quotient,c
  4688  003000  501F               	movf	___awdiv@divisor,w,c
  4689  003002  1020               	iorwf	___awdiv@divisor+1,w,c
  4690  003004  B4D8               	btfsc	status,2,c
  4691  003006  D021               	goto	l4934
  4692  003008  0E01               	movlw	1
  4693  00300A  6E21               	movwf	___awdiv@counter,c
  4694  00300C  D005               	goto	l4920
  4695  00300E                     l4918:
  4696  00300E  90D8               	bcf	status,0,c
  4697  003010  361F               	rlcf	___awdiv@divisor,f,c
  4698  003012  3620               	rlcf	___awdiv@divisor+1,f,c
  4699  003014  2A21               	incf	___awdiv@counter,f,c
  4700  003016  D000               	goto	l4920
  4701  003018                     l4920:
  4702  003018  BE20               	btfsc	___awdiv@divisor+1,7,c
  4703  00301A  D002               	goto	l4922
  4704  00301C  D7F8               	goto	l4918
  4705  00301E  D000               	goto	l4922
  4706  003020                     l4922:
  4707  003020  90D8               	bcf	status,0,c
  4708  003022  3623               	rlcf	___awdiv@quotient,f,c
  4709  003024  3624               	rlcf	___awdiv@quotient+1,f,c
  4710  003026  501F               	movf	___awdiv@divisor,w,c
  4711  003028  5C1D               	subwf	___awdiv@dividend,w,c
  4712  00302A  5020               	movf	___awdiv@divisor+1,w,c
  4713  00302C  581E               	subwfb	___awdiv@dividend+1,w,c
  4714  00302E  A0D8               	btfss	status,0,c
  4715  003030  D006               	goto	l4930
  4716  003032  501F               	movf	___awdiv@divisor,w,c
  4717  003034  5E1D               	subwf	___awdiv@dividend,f,c
  4718  003036  5020               	movf	___awdiv@divisor+1,w,c
  4719  003038  5A1E               	subwfb	___awdiv@dividend+1,f,c
  4720  00303A  8023               	bsf	___awdiv@quotient,0,c
  4721  00303C  D000               	goto	l4930
  4722  00303E                     l4930:
  4723  00303E  90D8               	bcf	status,0,c
  4724  003040  3220               	rrcf	___awdiv@divisor+1,f,c
  4725  003042  321F               	rrcf	___awdiv@divisor,f,c
  4726  003044  2E21               	decfsz	___awdiv@counter,f,c
  4727  003046  D7EC               	goto	l4922
  4728  003048  D000               	goto	l4934
  4729  00304A                     l4934:
  4730  00304A  5022               	movf	___awdiv@sign,w,c
  4731  00304C  B4D8               	btfsc	status,2,c
  4732  00304E  D005               	goto	l4938
  4733  003050  6C23               	negf	___awdiv@quotient,c
  4734  003052  1E24               	comf	___awdiv@quotient+1,f,c
  4735  003054  B0D8               	btfsc	status,0,c
  4736  003056  2A24               	incf	___awdiv@quotient+1,f,c
  4737  003058  D000               	goto	l4938
  4738  00305A                     l4938:
  4739  00305A  C023  F01D         	movff	___awdiv@quotient,?___awdiv
  4740  00305E  C024  F01E         	movff	___awdiv@quotient+1,?___awdiv+1
  4741  003062  0012               	return	
  4742  003064  0012               	return		;funcret
  4743  003066                     __end_of___awdiv:
  4744                           	opt stack 0
  4745                           tblptru	equ	0xFF8
  4746                           tblptrh	equ	0xFF7
  4747                           tblptrl	equ	0xFF6
  4748                           tablat	equ	0xFF5
  4749                           prodh	equ	0xFF4
  4750                           prodl	equ	0xFF3
  4751                           intcon	equ	0xFF2
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           indf2	equ	0xFDF
  4755                           postinc2	equ	0xFDE
  4756                           postdec2	equ	0xFDD
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function __tdiv_to_l_ *****************
  4762 ;; Defined at:
  4763 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  f1              3   22[COMRAM] float 
  4766 ;;  f2              3   25[COMRAM] float 
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;  quot            4   31[COMRAM] unsigned long 
  4769 ;;  exp1            1   36[COMRAM] unsigned char 
  4770 ;;  cntr            1   35[COMRAM] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  4   22[COMRAM] unsigned long 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4780 ;;      Params:         6       0       0       0       0       0       0
  4781 ;;      Locals:         6       0       0       0       0       0       0
  4782 ;;      Temps:          3       0       0       0       0       0       0
  4783 ;;      Totals:        15       0       0       0       0       0       0
  4784 ;;Total ram usage:       15 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    4
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_printf
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text9
  4795  00257A                     __ptext9:
  4796                           	opt stack 0
  4797  00257A                     __tdiv_to_l_:
  4798                           	opt stack 25
  4799                           
  4800                           ;incstack = 0
  4801  00257A  C019  F01D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4802  00257E  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4803  002580  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4804  002582  3418               	rlcf	__tdiv_to_l_@f1+1,w,c
  4805  002584  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4806  002586  E301               	bnc	u5421
  4807  002588  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4808  00258A                     u5421:
  4809  00258A  501D               	movf	??__tdiv_to_l_,w,c
  4810  00258C  6E25               	movwf	__tdiv_to_l_@exp1,c
  4811  00258E  5025               	movf	__tdiv_to_l_@exp1,w,c
  4812  002590  A4D8               	btfss	status,2,c
  4813  002592  D009               	goto	l5126
  4814  002594  0E00               	movlw	0
  4815  002596  6E17               	movwf	?__tdiv_to_l_,c
  4816  002598  0E00               	movlw	0
  4817  00259A  6E18               	movwf	?__tdiv_to_l_+1,c
  4818  00259C  0E00               	movlw	0
  4819  00259E  6E19               	movwf	?__tdiv_to_l_+2,c
  4820  0025A0  0E00               	movlw	0
  4821  0025A2  6E1A               	movwf	?__tdiv_to_l_+3,c
  4822  0025A4  0012               	return	
  4823  0025A6                     l5126:
  4824  0025A6  C01C  F01D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4825  0025AA  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4826  0025AC  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4827  0025AE  341B               	rlcf	__tdiv_to_l_@f2+1,w,c
  4828  0025B0  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4829  0025B2  E301               	bnc	u5441
  4830  0025B4  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4831  0025B6                     u5441:
  4832  0025B6  501D               	movf	??__tdiv_to_l_,w,c
  4833  0025B8  6E24               	movwf	__tdiv_to_l_@cntr,c
  4834  0025BA  5024               	movf	__tdiv_to_l_@cntr,w,c
  4835  0025BC  A4D8               	btfss	status,2,c
  4836  0025BE  D009               	goto	l5132
  4837  0025C0  0E00               	movlw	0
  4838  0025C2  6E17               	movwf	?__tdiv_to_l_,c
  4839  0025C4  0E00               	movlw	0
  4840  0025C6  6E18               	movwf	?__tdiv_to_l_+1,c
  4841  0025C8  0E00               	movlw	0
  4842  0025CA  6E19               	movwf	?__tdiv_to_l_+2,c
  4843  0025CC  0E00               	movlw	0
  4844  0025CE  6E1A               	movwf	?__tdiv_to_l_+3,c
  4845  0025D0  0012               	return	
  4846  0025D2                     l5132:
  4847  0025D2  8E18               	bsf	__tdiv_to_l_@f1+1,7,c
  4848  0025D4  0EFF               	movlw	255
  4849  0025D6  1617               	andwf	__tdiv_to_l_@f1,f,c
  4850  0025D8  0EFF               	movlw	255
  4851  0025DA  1618               	andwf	__tdiv_to_l_@f1+1,f,c
  4852  0025DC  0E00               	movlw	0
  4853  0025DE  1619               	andwf	__tdiv_to_l_@f1+2,f,c
  4854  0025E0  8E1B               	bsf	__tdiv_to_l_@f2+1,7,c
  4855  0025E2  0EFF               	movlw	255
  4856  0025E4  161A               	andwf	__tdiv_to_l_@f2,f,c
  4857  0025E6  0EFF               	movlw	255
  4858  0025E8  161B               	andwf	__tdiv_to_l_@f2+1,f,c
  4859  0025EA  0E00               	movlw	0
  4860  0025EC  161C               	andwf	__tdiv_to_l_@f2+2,f,c
  4861  0025EE  0E00               	movlw	0
  4862  0025F0  6E20               	movwf	__tdiv_to_l_@quot,c
  4863  0025F2  0E00               	movlw	0
  4864  0025F4  6E21               	movwf	__tdiv_to_l_@quot+1,c
  4865  0025F6  0E00               	movlw	0
  4866  0025F8  6E22               	movwf	__tdiv_to_l_@quot+2,c
  4867  0025FA  0E00               	movlw	0
  4868  0025FC  6E23               	movwf	__tdiv_to_l_@quot+3,c
  4869  0025FE  0E7F               	movlw	127
  4870  002600  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  4871  002602  5024               	movf	__tdiv_to_l_@cntr,w,c
  4872  002604  0F98               	addlw	152
  4873  002606  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  4874  002608  0E18               	movlw	24
  4875  00260A  6E24               	movwf	__tdiv_to_l_@cntr,c
  4876  00260C                     l1143:
  4877  00260C  90D8               	bcf	status,0,c
  4878  00260E  3620               	rlcf	__tdiv_to_l_@quot,f,c
  4879  002610  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  4880  002612  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  4881  002614  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  4882  002616  501A               	movf	__tdiv_to_l_@f2,w,c
  4883  002618  5C17               	subwf	__tdiv_to_l_@f1,w,c
  4884  00261A  501B               	movf	__tdiv_to_l_@f2+1,w,c
  4885  00261C  5818               	subwfb	__tdiv_to_l_@f1+1,w,c
  4886  00261E  501C               	movf	__tdiv_to_l_@f2+2,w,c
  4887  002620  5819               	subwfb	__tdiv_to_l_@f1+2,w,c
  4888  002622  A0D8               	btfss	status,0,c
  4889  002624  D007               	goto	l1144
  4890  002626  501A               	movf	__tdiv_to_l_@f2,w,c
  4891  002628  5E17               	subwf	__tdiv_to_l_@f1,f,c
  4892  00262A  501B               	movf	__tdiv_to_l_@f2+1,w,c
  4893  00262C  5A18               	subwfb	__tdiv_to_l_@f1+1,f,c
  4894  00262E  501C               	movf	__tdiv_to_l_@f2+2,w,c
  4895  002630  5A19               	subwfb	__tdiv_to_l_@f1+2,f,c
  4896  002632  8020               	bsf	__tdiv_to_l_@quot,0,c
  4897  002634                     l1144:
  4898  002634  90D8               	bcf	status,0,c
  4899  002636  3617               	rlcf	__tdiv_to_l_@f1,f,c
  4900  002638  3618               	rlcf	__tdiv_to_l_@f1+1,f,c
  4901  00263A  3619               	rlcf	__tdiv_to_l_@f1+2,f,c
  4902  00263C  2E24               	decfsz	__tdiv_to_l_@cntr,f,c
  4903  00263E  D7E6               	goto	l1143
  4904  002640  D000               	goto	l5154
  4905  002642                     l5154:
  4906  002642  AE25               	btfss	__tdiv_to_l_@exp1,7,c
  4907  002644  D017               	goto	l5166
  4908  002646  5025               	movf	__tdiv_to_l_@exp1,w,c
  4909  002648  0A80               	xorlw	128
  4910  00264A  0F97               	addlw	151
  4911  00264C  B0D8               	btfsc	status,0,c
  4912  00264E  D00A               	goto	l5162
  4913  002650  0E00               	movlw	0
  4914  002652  6E17               	movwf	?__tdiv_to_l_,c
  4915  002654  0E00               	movlw	0
  4916  002656  6E18               	movwf	?__tdiv_to_l_+1,c
  4917  002658  0E00               	movlw	0
  4918  00265A  6E19               	movwf	?__tdiv_to_l_+2,c
  4919  00265C  0E00               	movlw	0
  4920  00265E  6E1A               	movwf	?__tdiv_to_l_+3,c
  4921  002660  0012               	return	
  4922  002662  D000               	goto	l5162
  4923  002664                     l5162:
  4924  002664  90D8               	bcf	status,0,c
  4925  002666  3223               	rrcf	__tdiv_to_l_@quot+3,f,c
  4926  002668  3222               	rrcf	__tdiv_to_l_@quot+2,f,c
  4927  00266A  3221               	rrcf	__tdiv_to_l_@quot+1,f,c
  4928  00266C  3220               	rrcf	__tdiv_to_l_@quot,f,c
  4929  00266E  3E25               	incfsz	__tdiv_to_l_@exp1,f,c
  4930  002670  D7F9               	goto	l5162
  4931  002672  D017               	goto	l1150
  4932  002674                     l5166:
  4933  002674  0E17               	movlw	23
  4934  002676  6425               	cpfsgt	__tdiv_to_l_@exp1,c
  4935  002678  D011               	goto	l5174
  4936  00267A  0E00               	movlw	0
  4937  00267C  6E17               	movwf	?__tdiv_to_l_,c
  4938  00267E  0E00               	movlw	0
  4939  002680  6E18               	movwf	?__tdiv_to_l_+1,c
  4940  002682  0E00               	movlw	0
  4941  002684  6E19               	movwf	?__tdiv_to_l_+2,c
  4942  002686  0E00               	movlw	0
  4943  002688  6E1A               	movwf	?__tdiv_to_l_+3,c
  4944  00268A  0012               	return	
  4945  00268C  D007               	goto	l5174
  4946  00268E                     l5172:
  4947  00268E  90D8               	bcf	status,0,c
  4948  002690  3620               	rlcf	__tdiv_to_l_@quot,f,c
  4949  002692  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  4950  002694  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  4951  002696  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  4952  002698  0625               	decf	__tdiv_to_l_@exp1,f,c
  4953  00269A  D000               	goto	l5174
  4954  00269C                     l5174:
  4955  00269C  5025               	movf	__tdiv_to_l_@exp1,w,c
  4956  00269E  A4D8               	btfss	status,2,c
  4957  0026A0  D7F6               	goto	l5172
  4958  0026A2                     l1150:
  4959  0026A2  C020  F017         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4960  0026A6  C021  F018         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4961  0026AA  C022  F019         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4962  0026AE  C023  F01A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4963  0026B2  0012               	return		;funcret
  4964  0026B4                     __end_of__tdiv_to_l_:
  4965                           	opt stack 0
  4966                           tblptru	equ	0xFF8
  4967                           tblptrh	equ	0xFF7
  4968                           tblptrl	equ	0xFF6
  4969                           tablat	equ	0xFF5
  4970                           prodh	equ	0xFF4
  4971                           prodl	equ	0xFF3
  4972                           intcon	equ	0xFF2
  4973                           postinc0	equ	0xFEE
  4974                           wreg	equ	0xFE8
  4975                           indf2	equ	0xFDF
  4976                           postinc2	equ	0xFDE
  4977                           postdec2	equ	0xFDD
  4978                           fsr2h	equ	0xFDA
  4979                           fsr2l	equ	0xFD9
  4980                           status	equ	0xFD8
  4981                           
  4982 ;; *************** function __div_to_l_ *****************
  4983 ;; Defined at:
  4984 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;  f1              3   22[COMRAM] unsigned long 
  4987 ;;  f2              3   25[COMRAM] unsigned long 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  quot            4   28[COMRAM] unsigned long 
  4990 ;;  exp1            1   33[COMRAM] unsigned char 
  4991 ;;  cntr            1   32[COMRAM] unsigned char 
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  4   22[COMRAM] unsigned long 
  4994 ;; Registers used:
  4995 ;;		wreg, status,2, status,0
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5001 ;;      Params:         6       0       0       0       0       0       0
  5002 ;;      Locals:         6       0       0       0       0       0       0
  5003 ;;      Temps:          0       0       0       0       0       0       0
  5004 ;;      Totals:        12       0       0       0       0       0       0
  5005 ;;Total ram usage:       12 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    4
  5008 ;; This function calls:
  5009 ;;		Nothing
  5010 ;; This function is called by:
  5011 ;;		_printf
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           	psect	text10
  5016  0027EC                     __ptext10:
  5017                           	opt stack 0
  5018  0027EC                     __div_to_l_:
  5019                           	opt stack 25
  5020                           
  5021                           ;incstack = 0
  5022  0027EC  3419               	rlcf	__div_to_l_@f1+2,w,c
  5023  0027EE  341A               	rlcf	__div_to_l_@f1+3,w,c
  5024  0027F0  6E22               	movwf	__div_to_l_@exp1,c
  5025  0027F2  5022               	movf	__div_to_l_@exp1,w,c
  5026  0027F4  A4D8               	btfss	status,2,c
  5027  0027F6  D009               	goto	l5182
  5028  0027F8  0E00               	movlw	0
  5029  0027FA  6E17               	movwf	?__div_to_l_,c
  5030  0027FC  0E00               	movlw	0
  5031  0027FE  6E18               	movwf	?__div_to_l_+1,c
  5032  002800  0E00               	movlw	0
  5033  002802  6E19               	movwf	?__div_to_l_+2,c
  5034  002804  0E00               	movlw	0
  5035  002806  6E1A               	movwf	?__div_to_l_+3,c
  5036  002808  0012               	return	
  5037  00280A                     l5182:
  5038  00280A  341C               	rlcf	__div_to_l_@f2+2,w,c
  5039  00280C  341D               	rlcf	__div_to_l_@f2+3,w,c
  5040  00280E  6E21               	movwf	__div_to_l_@cntr,c
  5041  002810  5021               	movf	__div_to_l_@cntr,w,c
  5042  002812  A4D8               	btfss	status,2,c
  5043  002814  D009               	goto	l5188
  5044  002816  0E00               	movlw	0
  5045  002818  6E17               	movwf	?__div_to_l_,c
  5046  00281A  0E00               	movlw	0
  5047  00281C  6E18               	movwf	?__div_to_l_+1,c
  5048  00281E  0E00               	movlw	0
  5049  002820  6E19               	movwf	?__div_to_l_+2,c
  5050  002822  0E00               	movlw	0
  5051  002824  6E1A               	movwf	?__div_to_l_+3,c
  5052  002826  0012               	return	
  5053  002828                     l5188:
  5054  002828  8E19               	bsf	__div_to_l_@f1+2,7,c
  5055  00282A  0EFF               	movlw	255
  5056  00282C  1617               	andwf	__div_to_l_@f1,f,c
  5057  00282E  0EFF               	movlw	255
  5058  002830  1618               	andwf	__div_to_l_@f1+1,f,c
  5059  002832  0EFF               	movlw	255
  5060  002834  1619               	andwf	__div_to_l_@f1+2,f,c
  5061  002836  0E00               	movlw	0
  5062  002838  161A               	andwf	__div_to_l_@f1+3,f,c
  5063  00283A  8E1C               	bsf	__div_to_l_@f2+2,7,c
  5064  00283C  0EFF               	movlw	255
  5065  00283E  161A               	andwf	__div_to_l_@f2,f,c
  5066  002840  0EFF               	movlw	255
  5067  002842  161B               	andwf	__div_to_l_@f2+1,f,c
  5068  002844  0EFF               	movlw	255
  5069  002846  161C               	andwf	__div_to_l_@f2+2,f,c
  5070  002848  0E00               	movlw	0
  5071  00284A  161D               	andwf	__div_to_l_@f2+3,f,c
  5072  00284C  0E00               	movlw	0
  5073  00284E  6E1D               	movwf	__div_to_l_@quot,c
  5074  002850  0E00               	movlw	0
  5075  002852  6E1E               	movwf	__div_to_l_@quot+1,c
  5076  002854  0E00               	movlw	0
  5077  002856  6E1F               	movwf	__div_to_l_@quot+2,c
  5078  002858  0E00               	movlw	0
  5079  00285A  6E20               	movwf	__div_to_l_@quot+3,c
  5080  00285C  0E7F               	movlw	127
  5081  00285E  5E22               	subwf	__div_to_l_@exp1,f,c
  5082  002860  5021               	movf	__div_to_l_@cntr,w,c
  5083  002862  0FA0               	addlw	160
  5084  002864  5E22               	subwf	__div_to_l_@exp1,f,c
  5085  002866  0E20               	movlw	32
  5086  002868  6E21               	movwf	__div_to_l_@cntr,c
  5087  00286A  D000               	goto	l5202
  5088  00286C                     l5202:
  5089  00286C  90D8               	bcf	status,0,c
  5090  00286E  361D               	rlcf	__div_to_l_@quot,f,c
  5091  002870  361E               	rlcf	__div_to_l_@quot+1,f,c
  5092  002872  361F               	rlcf	__div_to_l_@quot+2,f,c
  5093  002874  3620               	rlcf	__div_to_l_@quot+3,f,c
  5094  002876  501A               	movf	__div_to_l_@f2,w,c
  5095  002878  5C17               	subwf	__div_to_l_@f1,w,c
  5096  00287A  501B               	movf	__div_to_l_@f2+1,w,c
  5097  00287C  5818               	subwfb	__div_to_l_@f1+1,w,c
  5098  00287E  501C               	movf	__div_to_l_@f2+2,w,c
  5099  002880  5819               	subwfb	__div_to_l_@f1+2,w,c
  5100  002882  501D               	movf	__div_to_l_@f2+3,w,c
  5101  002884  581A               	subwfb	__div_to_l_@f1+3,w,c
  5102  002886  A0D8               	btfss	status,0,c
  5103  002888  D00A               	goto	l5210
  5104  00288A  501A               	movf	__div_to_l_@f2,w,c
  5105  00288C  5E17               	subwf	__div_to_l_@f1,f,c
  5106  00288E  501B               	movf	__div_to_l_@f2+1,w,c
  5107  002890  5A18               	subwfb	__div_to_l_@f1+1,f,c
  5108  002892  501C               	movf	__div_to_l_@f2+2,w,c
  5109  002894  5A19               	subwfb	__div_to_l_@f1+2,f,c
  5110  002896  501D               	movf	__div_to_l_@f2+3,w,c
  5111  002898  5A1A               	subwfb	__div_to_l_@f1+3,f,c
  5112  00289A  801D               	bsf	__div_to_l_@quot,0,c
  5113  00289C  D000               	goto	l5210
  5114  00289E                     l5210:
  5115  00289E  90D8               	bcf	status,0,c
  5116  0028A0  3617               	rlcf	__div_to_l_@f1,f,c
  5117  0028A2  3618               	rlcf	__div_to_l_@f1+1,f,c
  5118  0028A4  3619               	rlcf	__div_to_l_@f1+2,f,c
  5119  0028A6  361A               	rlcf	__div_to_l_@f1+3,f,c
  5120  0028A8  2E21               	decfsz	__div_to_l_@cntr,f,c
  5121  0028AA  D7E0               	goto	l5202
  5122  0028AC  D000               	goto	l5214
  5123  0028AE                     l5214:
  5124  0028AE  AE22               	btfss	__div_to_l_@exp1,7,c
  5125  0028B0  D017               	goto	l5226
  5126  0028B2  5022               	movf	__div_to_l_@exp1,w,c
  5127  0028B4  0A80               	xorlw	128
  5128  0028B6  0F9F               	addlw	159
  5129  0028B8  B0D8               	btfsc	status,0,c
  5130  0028BA  D00A               	goto	l5222
  5131  0028BC  0E00               	movlw	0
  5132  0028BE  6E17               	movwf	?__div_to_l_,c
  5133  0028C0  0E00               	movlw	0
  5134  0028C2  6E18               	movwf	?__div_to_l_+1,c
  5135  0028C4  0E00               	movlw	0
  5136  0028C6  6E19               	movwf	?__div_to_l_+2,c
  5137  0028C8  0E00               	movlw	0
  5138  0028CA  6E1A               	movwf	?__div_to_l_+3,c
  5139  0028CC  0012               	return	
  5140  0028CE  D000               	goto	l5222
  5141  0028D0                     l5222:
  5142  0028D0  90D8               	bcf	status,0,c
  5143  0028D2  3220               	rrcf	__div_to_l_@quot+3,f,c
  5144  0028D4  321F               	rrcf	__div_to_l_@quot+2,f,c
  5145  0028D6  321E               	rrcf	__div_to_l_@quot+1,f,c
  5146  0028D8  321D               	rrcf	__div_to_l_@quot,f,c
  5147  0028DA  3E22               	incfsz	__div_to_l_@exp1,f,c
  5148  0028DC  D7F9               	goto	l5222
  5149  0028DE  D017               	goto	l1029
  5150  0028E0                     l5226:
  5151  0028E0  0E1F               	movlw	31
  5152  0028E2  6422               	cpfsgt	__div_to_l_@exp1,c
  5153  0028E4  D011               	goto	l5234
  5154  0028E6  0E00               	movlw	0
  5155  0028E8  6E17               	movwf	?__div_to_l_,c
  5156  0028EA  0E00               	movlw	0
  5157  0028EC  6E18               	movwf	?__div_to_l_+1,c
  5158  0028EE  0E00               	movlw	0
  5159  0028F0  6E19               	movwf	?__div_to_l_+2,c
  5160  0028F2  0E00               	movlw	0
  5161  0028F4  6E1A               	movwf	?__div_to_l_+3,c
  5162  0028F6  0012               	return	
  5163  0028F8  D007               	goto	l5234
  5164  0028FA                     l5232:
  5165  0028FA  90D8               	bcf	status,0,c
  5166  0028FC  361D               	rlcf	__div_to_l_@quot,f,c
  5167  0028FE  361E               	rlcf	__div_to_l_@quot+1,f,c
  5168  002900  361F               	rlcf	__div_to_l_@quot+2,f,c
  5169  002902  3620               	rlcf	__div_to_l_@quot+3,f,c
  5170  002904  0622               	decf	__div_to_l_@exp1,f,c
  5171  002906  D000               	goto	l5234
  5172  002908                     l5234:
  5173  002908  5022               	movf	__div_to_l_@exp1,w,c
  5174  00290A  A4D8               	btfss	status,2,c
  5175  00290C  D7F6               	goto	l5232
  5176  00290E                     l1029:
  5177  00290E  C01D  F017         	movff	__div_to_l_@quot,?__div_to_l_
  5178  002912  C01E  F018         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5179  002916  C01F  F019         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5180  00291A  C020  F01A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5181  00291E  0012               	return		;funcret
  5182  002920                     __end_of__div_to_l_:
  5183                           	opt stack 0
  5184                           tblptru	equ	0xFF8
  5185                           tblptrh	equ	0xFF7
  5186                           tblptrl	equ	0xFF6
  5187                           tablat	equ	0xFF5
  5188                           prodh	equ	0xFF4
  5189                           prodl	equ	0xFF3
  5190                           intcon	equ	0xFF2
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           indf2	equ	0xFDF
  5194                           postinc2	equ	0xFDE
  5195                           postdec2	equ	0xFDD
  5196                           fsr2h	equ	0xFDA
  5197                           fsr2l	equ	0xFD9
  5198                           status	equ	0xFD8
  5199                           
  5200 ;; *************** function ___lltoft *****************
  5201 ;; Defined at:
  5202 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;  c               4   30[COMRAM] unsigned long 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  exp             1   38[COMRAM] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  3   30[COMRAM] float 
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5216 ;;      Params:         4       0       0       0       0       0       0
  5217 ;;      Locals:         1       0       0       0       0       0       0
  5218 ;;      Temps:          4       0       0       0       0       0       0
  5219 ;;      Totals:         9       0       0       0       0       0       0
  5220 ;;Total ram usage:        9 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    5
  5223 ;; This function calls:
  5224 ;;		___ftpack
  5225 ;; This function is called by:
  5226 ;;		_printf
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text11
  5231  00330C                     __ptext11:
  5232                           	opt stack 0
  5233  00330C                     ___lltoft:
  5234                           	opt stack 24
  5235                           
  5236                           ;incstack = 0
  5237  00330C  0E8E               	movlw	142
  5238  00330E  6E27               	movwf	___lltoft@exp,c
  5239  003310  D007               	goto	l5400
  5240  003312                     l5398:
  5241  003312  90D8               	bcf	status,0,c
  5242  003314  3222               	rrcf	___lltoft@c+3,f,c
  5243  003316  3221               	rrcf	___lltoft@c+2,f,c
  5244  003318  3220               	rrcf	___lltoft@c+1,f,c
  5245  00331A  321F               	rrcf	___lltoft@c,f,c
  5246  00331C  2A27               	incf	___lltoft@exp,f,c
  5247  00331E  D000               	goto	l5400
  5248  003320                     l5400:
  5249  003320  0E00               	movlw	0
  5250  003322  141F               	andwf	___lltoft@c,w,c
  5251  003324  6E23               	movwf	??___lltoft& (0+255),c
  5252  003326  0E00               	movlw	0
  5253  003328  1420               	andwf	___lltoft@c+1,w,c
  5254  00332A  6E24               	movwf	(??___lltoft+1)& (0+255),c
  5255  00332C  0E00               	movlw	0
  5256  00332E  1421               	andwf	___lltoft@c+2,w,c
  5257  003330  6E25               	movwf	(??___lltoft+2)& (0+255),c
  5258  003332  0EFF               	movlw	255
  5259  003334  1422               	andwf	___lltoft@c+3,w,c
  5260  003336  6E26               	movwf	(??___lltoft+3)& (0+255),c
  5261  003338  5023               	movf	??___lltoft,w,c
  5262  00333A  1024               	iorwf	??___lltoft+1,w,c
  5263  00333C  1025               	iorwf	??___lltoft+2,w,c
  5264  00333E  1026               	iorwf	??___lltoft+3,w,c
  5265  003340  A4D8               	btfss	status,2,c
  5266  003342  D7E7               	goto	l5398
  5267  003344  C01F  F017         	movff	___lltoft@c,___ftpack@arg
  5268  003348  C020  F018         	movff	___lltoft@c+1,___ftpack@arg+1
  5269  00334C  C021  F019         	movff	___lltoft@c+2,___ftpack@arg+2
  5270  003350  C027  F01A         	movff	___lltoft@exp,___ftpack@exp
  5271  003354  0E00               	movlw	0
  5272  003356  6E1B               	movwf	___ftpack@sign,c
  5273  003358  EC79  F016         	call	___ftpack	;wreg free
  5274  00335C  C017  F01F         	movff	?___ftpack,?___lltoft
  5275  003360  C018  F020         	movff	?___ftpack+1,?___lltoft+1
  5276  003364  C019  F021         	movff	?___ftpack+2,?___lltoft+2
  5277  003368  0012               	return	
  5278  00336A  0012               	return		;funcret
  5279  00336C                     __end_of___lltoft:
  5280                           	opt stack 0
  5281                           tblptru	equ	0xFF8
  5282                           tblptrh	equ	0xFF7
  5283                           tblptrl	equ	0xFF6
  5284                           tablat	equ	0xFF5
  5285                           prodh	equ	0xFF4
  5286                           prodl	equ	0xFF3
  5287                           intcon	equ	0xFF2
  5288                           postinc0	equ	0xFEE
  5289                           wreg	equ	0xFE8
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function ___llmod *****************
  5298 ;; Defined at:
  5299 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  dividend        4   35[COMRAM] unsigned long 
  5302 ;;  divisor         4   39[COMRAM] unsigned long 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  counter         1   43[COMRAM] unsigned char 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  4   35[COMRAM] unsigned long 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2, status,0
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5314 ;;      Params:         8       0       0       0       0       0       0
  5315 ;;      Locals:         1       0       0       0       0       0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0
  5317 ;;      Totals:         9       0       0       0       0       0       0
  5318 ;;Total ram usage:        9 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    4
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_printf
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           	psect	text12
  5329  00329C                     __ptext12:
  5330                           	opt stack 0
  5331  00329C                     ___llmod:
  5332                           	opt stack 25
  5333                           
  5334                           ;incstack = 0
  5335  00329C  5028               	movf	___llmod@divisor,w,c
  5336  00329E  1029               	iorwf	___llmod@divisor+1,w,c
  5337  0032A0  102A               	iorwf	___llmod@divisor+2,w,c
  5338  0032A2  102B               	iorwf	___llmod@divisor+3,w,c
  5339  0032A4  B4D8               	btfsc	status,2,c
  5340  0032A6  D029               	goto	l1240
  5341  0032A8  0E01               	movlw	1
  5342  0032AA  6E2C               	movwf	___llmod@counter,c
  5343  0032AC  D007               	goto	l5386
  5344  0032AE                     l5384:
  5345  0032AE  90D8               	bcf	status,0,c
  5346  0032B0  3628               	rlcf	___llmod@divisor,f,c
  5347  0032B2  3629               	rlcf	___llmod@divisor+1,f,c
  5348  0032B4  362A               	rlcf	___llmod@divisor+2,f,c
  5349  0032B6  362B               	rlcf	___llmod@divisor+3,f,c
  5350  0032B8  2A2C               	incf	___llmod@counter,f,c
  5351  0032BA  D000               	goto	l5386
  5352  0032BC                     l5386:
  5353  0032BC  BE2B               	btfsc	___llmod@divisor+3,7,c
  5354  0032BE  D002               	goto	l5388
  5355  0032C0  D7F6               	goto	l5384
  5356  0032C2  D000               	goto	l5388
  5357  0032C4                     l5388:
  5358  0032C4  5028               	movf	___llmod@divisor,w,c
  5359  0032C6  5C24               	subwf	___llmod@dividend,w,c
  5360  0032C8  5029               	movf	___llmod@divisor+1,w,c
  5361  0032CA  5825               	subwfb	___llmod@dividend+1,w,c
  5362  0032CC  502A               	movf	___llmod@divisor+2,w,c
  5363  0032CE  5826               	subwfb	___llmod@dividend+2,w,c
  5364  0032D0  502B               	movf	___llmod@divisor+3,w,c
  5365  0032D2  5827               	subwfb	___llmod@dividend+3,w,c
  5366  0032D4  A0D8               	btfss	status,0,c
  5367  0032D6  D009               	goto	l5392
  5368  0032D8  5028               	movf	___llmod@divisor,w,c
  5369  0032DA  5E24               	subwf	___llmod@dividend,f,c
  5370  0032DC  5029               	movf	___llmod@divisor+1,w,c
  5371  0032DE  5A25               	subwfb	___llmod@dividend+1,f,c
  5372  0032E0  502A               	movf	___llmod@divisor+2,w,c
  5373  0032E2  5A26               	subwfb	___llmod@dividend+2,f,c
  5374  0032E4  502B               	movf	___llmod@divisor+3,w,c
  5375  0032E6  5A27               	subwfb	___llmod@dividend+3,f,c
  5376  0032E8  D000               	goto	l5392
  5377  0032EA                     l5392:
  5378  0032EA  90D8               	bcf	status,0,c
  5379  0032EC  322B               	rrcf	___llmod@divisor+3,f,c
  5380  0032EE  322A               	rrcf	___llmod@divisor+2,f,c
  5381  0032F0  3229               	rrcf	___llmod@divisor+1,f,c
  5382  0032F2  3228               	rrcf	___llmod@divisor,f,c
  5383  0032F4  2E2C               	decfsz	___llmod@counter,f,c
  5384  0032F6  D7E6               	goto	l5388
  5385  0032F8  D000               	goto	l1240
  5386  0032FA                     l1240:
  5387  0032FA  C024  F024         	movff	___llmod@dividend,?___llmod
  5388  0032FE  C025  F025         	movff	___llmod@dividend+1,?___llmod+1
  5389  003302  C026  F026         	movff	___llmod@dividend+2,?___llmod+2
  5390  003306  C027  F027         	movff	___llmod@dividend+3,?___llmod+3
  5391  00330A  0012               	return		;funcret
  5392  00330C                     __end_of___llmod:
  5393                           	opt stack 0
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           indf2	equ	0xFDF
  5404                           postinc2	equ	0xFDE
  5405                           postdec2	equ	0xFDD
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function ___lldiv *****************
  5411 ;; Defined at:
  5412 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  dividend        4   22[COMRAM] unsigned long 
  5415 ;;  divisor         4   26[COMRAM] unsigned long 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  quotient        4   30[COMRAM] unsigned long 
  5418 ;;  counter         1   34[COMRAM] unsigned char 
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  4   22[COMRAM] unsigned long 
  5421 ;; Registers used:
  5422 ;;		wreg, status,2, status,0
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5428 ;;      Params:         8       0       0       0       0       0       0
  5429 ;;      Locals:         5       0       0       0       0       0       0
  5430 ;;      Temps:          0       0       0       0       0       0       0
  5431 ;;      Totals:        13       0       0       0       0       0       0
  5432 ;;Total ram usage:       13 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    4
  5435 ;; This function calls:
  5436 ;;		Nothing
  5437 ;; This function is called by:
  5438 ;;		_printf
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text13
  5443  00318E                     __ptext13:
  5444                           	opt stack 0
  5445  00318E                     ___lldiv:
  5446                           	opt stack 25
  5447                           
  5448                           ;incstack = 0
  5449  00318E  0E00               	movlw	0
  5450  003190  6E1F               	movwf	___lldiv@quotient,c
  5451  003192  0E00               	movlw	0
  5452  003194  6E20               	movwf	___lldiv@quotient+1,c
  5453  003196  0E00               	movlw	0
  5454  003198  6E21               	movwf	___lldiv@quotient+2,c
  5455  00319A  0E00               	movlw	0
  5456  00319C  6E22               	movwf	___lldiv@quotient+3,c
  5457  00319E  501B               	movf	___lldiv@divisor,w,c
  5458  0031A0  101C               	iorwf	___lldiv@divisor+1,w,c
  5459  0031A2  101D               	iorwf	___lldiv@divisor+2,w,c
  5460  0031A4  101E               	iorwf	___lldiv@divisor+3,w,c
  5461  0031A6  B4D8               	btfsc	status,2,c
  5462  0031A8  D02F               	goto	l1230
  5463  0031AA  0E01               	movlw	1
  5464  0031AC  6E23               	movwf	___lldiv@counter,c
  5465  0031AE  D007               	goto	l5366
  5466  0031B0                     l5364:
  5467  0031B0  90D8               	bcf	status,0,c
  5468  0031B2  361B               	rlcf	___lldiv@divisor,f,c
  5469  0031B4  361C               	rlcf	___lldiv@divisor+1,f,c
  5470  0031B6  361D               	rlcf	___lldiv@divisor+2,f,c
  5471  0031B8  361E               	rlcf	___lldiv@divisor+3,f,c
  5472  0031BA  2A23               	incf	___lldiv@counter,f,c
  5473  0031BC  D000               	goto	l5366
  5474  0031BE                     l5366:
  5475  0031BE  BE1E               	btfsc	___lldiv@divisor+3,7,c
  5476  0031C0  D002               	goto	l5368
  5477  0031C2  D7F6               	goto	l5364
  5478  0031C4  D000               	goto	l5368
  5479  0031C6                     l5368:
  5480  0031C6  90D8               	bcf	status,0,c
  5481  0031C8  361F               	rlcf	___lldiv@quotient,f,c
  5482  0031CA  3620               	rlcf	___lldiv@quotient+1,f,c
  5483  0031CC  3621               	rlcf	___lldiv@quotient+2,f,c
  5484  0031CE  3622               	rlcf	___lldiv@quotient+3,f,c
  5485  0031D0  501B               	movf	___lldiv@divisor,w,c
  5486  0031D2  5C17               	subwf	___lldiv@dividend,w,c
  5487  0031D4  501C               	movf	___lldiv@divisor+1,w,c
  5488  0031D6  5818               	subwfb	___lldiv@dividend+1,w,c
  5489  0031D8  501D               	movf	___lldiv@divisor+2,w,c
  5490  0031DA  5819               	subwfb	___lldiv@dividend+2,w,c
  5491  0031DC  501E               	movf	___lldiv@divisor+3,w,c
  5492  0031DE  581A               	subwfb	___lldiv@dividend+3,w,c
  5493  0031E0  A0D8               	btfss	status,0,c
  5494  0031E2  D00A               	goto	l5376
  5495  0031E4  501B               	movf	___lldiv@divisor,w,c
  5496  0031E6  5E17               	subwf	___lldiv@dividend,f,c
  5497  0031E8  501C               	movf	___lldiv@divisor+1,w,c
  5498  0031EA  5A18               	subwfb	___lldiv@dividend+1,f,c
  5499  0031EC  501D               	movf	___lldiv@divisor+2,w,c
  5500  0031EE  5A19               	subwfb	___lldiv@dividend+2,f,c
  5501  0031F0  501E               	movf	___lldiv@divisor+3,w,c
  5502  0031F2  5A1A               	subwfb	___lldiv@dividend+3,f,c
  5503  0031F4  801F               	bsf	___lldiv@quotient,0,c
  5504  0031F6  D000               	goto	l5376
  5505  0031F8                     l5376:
  5506  0031F8  90D8               	bcf	status,0,c
  5507  0031FA  321E               	rrcf	___lldiv@divisor+3,f,c
  5508  0031FC  321D               	rrcf	___lldiv@divisor+2,f,c
  5509  0031FE  321C               	rrcf	___lldiv@divisor+1,f,c
  5510  003200  321B               	rrcf	___lldiv@divisor,f,c
  5511  003202  2E23               	decfsz	___lldiv@counter,f,c
  5512  003204  D7E0               	goto	l5368
  5513  003206  D000               	goto	l1230
  5514  003208                     l1230:
  5515  003208  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  5516  00320C  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  5517  003210  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  5518  003214  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  5519  003218  0012               	return		;funcret
  5520  00321A                     __end_of___lldiv:
  5521                           	opt stack 0
  5522                           tblptru	equ	0xFF8
  5523                           tblptrh	equ	0xFF7
  5524                           tblptrl	equ	0xFF6
  5525                           tablat	equ	0xFF5
  5526                           prodh	equ	0xFF4
  5527                           prodl	equ	0xFF3
  5528                           intcon	equ	0xFF2
  5529                           postinc0	equ	0xFEE
  5530                           wreg	equ	0xFE8
  5531                           indf2	equ	0xFDF
  5532                           postinc2	equ	0xFDE
  5533                           postdec2	equ	0xFDD
  5534                           fsr2h	equ	0xFDA
  5535                           fsr2l	equ	0xFD9
  5536                           status	equ	0xFD8
  5537                           
  5538 ;; *************** function ___fttol *****************
  5539 ;; Defined at:
  5540 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  f1              3   13[BANK0 ] float 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  lval            4   23[BANK0 ] unsigned long 
  5545 ;;  exp1            1   27[BANK0 ] unsigned char 
  5546 ;;  sign1           1   22[BANK0 ] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  4   13[BANK0 ] long 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5556 ;;      Params:         0       4       0       0       0       0       0
  5557 ;;      Locals:         0       6       0       0       0       0       0
  5558 ;;      Temps:          0       5       0       0       0       0       0
  5559 ;;      Totals:         0      15       0       0       0       0       0
  5560 ;;Total ram usage:       15 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    4
  5563 ;; This function calls:
  5564 ;;		Nothing
  5565 ;; This function is called by:
  5566 ;;		_printf
  5567 ;; This function uses a non-reentrant model
  5568 ;;
  5569                           
  5570                           	psect	text14
  5571  0022E6                     __ptext14:
  5572                           	opt stack 0
  5573  0022E6                     ___fttol:
  5574                           	opt stack 25
  5575                           
  5576                           ;incstack = 0
  5577  0022E6  C0CB  F0CD         	movff	___fttol@f1+2,??___fttol
  5578  0022EA  0100               	movlb	0	; () banked
  5579  0022EC  6BCE               	clrf	(??___fttol+1)& (0+255),b
  5580  0022EE  6BCF               	clrf	(??___fttol+2)& (0+255),b
  5581  0022F0  0100               	movlb	0	; () banked
  5582  0022F2  35CA               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5583  0022F4  0100               	movlb	0	; () banked
  5584  0022F6  37CD               	rlcf	??___fttol& (0+255),f,b
  5585  0022F8  E301               	bnc	u5681
  5586  0022FA  81CE               	bsf	(??___fttol+1)& (0+255),0,b
  5587  0022FC                     u5681:
  5588  0022FC  0100               	movlb	0	; () banked
  5589  0022FE  51CD               	movf	??___fttol& (0+255),w,b
  5590  002300  0100               	movlb	0	; () banked
  5591  002302  6FD7               	movwf	___fttol@exp1& (0+255),b
  5592  002304  0100               	movlb	0	; () banked
  5593  002306  51D7               	movf	___fttol@exp1& (0+255),w,b
  5594  002308  A4D8               	btfss	status,2,c
  5595  00230A  D00A               	goto	l5318
  5596                           
  5597                           ; BSR set to: 0
  5598  00230C  0E00               	movlw	0
  5599  00230E  0100               	movlb	0	; () banked
  5600  002310  6FC9               	movwf	?___fttol& (0+255),b
  5601  002312  0E00               	movlw	0
  5602  002314  6FCA               	movwf	(?___fttol+1)& (0+255),b
  5603  002316  0E00               	movlw	0
  5604  002318  6FCB               	movwf	(?___fttol+2)& (0+255),b
  5605  00231A  0E00               	movlw	0
  5606  00231C  6FCC               	movwf	(?___fttol+3)& (0+255),b
  5607                           
  5608                           ; BSR set to: 0
  5609  00231E  0012               	return	
  5610  002320                     l5318:
  5611                           
  5612                           ; BSR set to: 0
  5613  002320  0E17               	movlw	23
  5614  002322  0100               	movlb	0	; () banked
  5615  002324  6FCD               	movwf	??___fttol& (0+255),b
  5616  002326  C0C9  F0CE         	movff	___fttol@f1,??___fttol+1
  5617  00232A  C0CA  F0CF         	movff	___fttol@f1+1,??___fttol+2
  5618  00232E  C0CB  F0D0         	movff	___fttol@f1+2,??___fttol+3
  5619  002332  0100               	movlb	0	; () banked
  5620  002334  29CD               	incf	??___fttol& (0+255),w,b
  5621  002336  0100               	movlb	0	; () banked
  5622  002338  6FD1               	movwf	(??___fttol+4)& (0+255),b
  5623  00233A  D005               	goto	u5700
  5624  00233C                     u5705:
  5625  00233C  0100               	movlb	0	; () banked
  5626  00233E  90D8               	bcf	status,0,c
  5627  002340  33D0               	rrcf	(??___fttol+3)& (0+255),f,b
  5628  002342  33CF               	rrcf	(??___fttol+2)& (0+255),f,b
  5629  002344  33CE               	rrcf	(??___fttol+1)& (0+255),f,b
  5630  002346                     u5700:
  5631  002346  0100               	movlb	0	; () banked
  5632  002348  2FD1               	decfsz	(??___fttol+4)& (0+255),f,b
  5633  00234A  D7F8               	goto	u5705
  5634  00234C  0100               	movlb	0	; () banked
  5635  00234E  51CE               	movf	(??___fttol+1)& (0+255),w,b
  5636  002350  0100               	movlb	0	; () banked
  5637  002352  6FD2               	movwf	___fttol@sign1& (0+255),b
  5638                           
  5639                           ; BSR set to: 0
  5640  002354  0100               	movlb	0	; () banked
  5641  002356  8FCA               	bsf	(___fttol@f1+1)& (0+255),7,b
  5642                           
  5643                           ; BSR set to: 0
  5644  002358  0EFF               	movlw	255
  5645  00235A  0100               	movlb	0	; () banked
  5646  00235C  17C9               	andwf	___fttol@f1& (0+255),f,b
  5647  00235E  0EFF               	movlw	255
  5648  002360  0100               	movlb	0	; () banked
  5649  002362  17CA               	andwf	(___fttol@f1+1)& (0+255),f,b
  5650  002364  0E00               	movlw	0
  5651  002366  0100               	movlb	0	; () banked
  5652  002368  17CB               	andwf	(___fttol@f1+2)& (0+255),f,b
  5653                           
  5654                           ; BSR set to: 0
  5655  00236A  0100               	movlb	0	; () banked
  5656  00236C  51C9               	movf	___fttol@f1& (0+255),w,b
  5657  00236E  0100               	movlb	0	; () banked
  5658  002370  6FD3               	movwf	___fttol@lval& (0+255),b
  5659  002372  0100               	movlb	0	; () banked
  5660  002374  51CA               	movf	(___fttol@f1+1)& (0+255),w,b
  5661  002376  0100               	movlb	0	; () banked
  5662  002378  6FD4               	movwf	(___fttol@lval+1)& (0+255),b
  5663  00237A  0100               	movlb	0	; () banked
  5664  00237C  51CB               	movf	(___fttol@f1+2)& (0+255),w,b
  5665  00237E  0100               	movlb	0	; () banked
  5666  002380  6FD5               	movwf	(___fttol@lval+2)& (0+255),b
  5667  002382  0100               	movlb	0	; () banked
  5668  002384  6BD6               	clrf	(___fttol@lval+3)& (0+255),b
  5669                           
  5670                           ; BSR set to: 0
  5671  002386  0E8E               	movlw	142
  5672  002388  0100               	movlb	0	; () banked
  5673  00238A  5FD7               	subwf	___fttol@exp1& (0+255),f,b
  5674                           
  5675                           ; BSR set to: 0
  5676  00238C  0100               	movlb	0	; () banked
  5677  00238E  AFD7               	btfss	___fttol@exp1& (0+255),7,b
  5678  002390  D01B               	goto	l5340
  5679                           
  5680                           ; BSR set to: 0
  5681  002392  0100               	movlb	0	; () banked
  5682  002394  51D7               	movf	___fttol@exp1& (0+255),w,b
  5683  002396  0A80               	xorlw	128
  5684  002398  0F8F               	addlw	143
  5685  00239A  B0D8               	btfsc	status,0,c
  5686  00239C  D00B               	goto	l5336
  5687                           
  5688                           ; BSR set to: 0
  5689  00239E  0E00               	movlw	0
  5690  0023A0  0100               	movlb	0	; () banked
  5691  0023A2  6FC9               	movwf	?___fttol& (0+255),b
  5692  0023A4  0E00               	movlw	0
  5693  0023A6  6FCA               	movwf	(?___fttol+1)& (0+255),b
  5694  0023A8  0E00               	movlw	0
  5695  0023AA  6FCB               	movwf	(?___fttol+2)& (0+255),b
  5696  0023AC  0E00               	movlw	0
  5697  0023AE  6FCC               	movwf	(?___fttol+3)& (0+255),b
  5698                           
  5699                           ; BSR set to: 0
  5700  0023B0  0012               	return	
  5701                           
  5702                           ; BSR set to: 0
  5703  0023B2  D000               	goto	l5336
  5704  0023B4                     l5336:
  5705                           
  5706                           ; BSR set to: 0
  5707  0023B4  0100               	movlb	0	; () banked
  5708  0023B6  90D8               	bcf	status,0,c
  5709  0023B8  33D6               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5710  0023BA  33D5               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5711  0023BC  33D4               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5712  0023BE  33D3               	rrcf	___fttol@lval& (0+255),f,b
  5713                           
  5714                           ; BSR set to: 0
  5715  0023C0  0100               	movlb	0	; () banked
  5716  0023C2  3FD7               	incfsz	___fttol@exp1& (0+255),f,b
  5717  0023C4  D7F7               	goto	l5336
  5718                           
  5719                           ; BSR set to: 0
  5720  0023C6  D01F               	goto	l5350
  5721  0023C8                     l5340:
  5722                           
  5723                           ; BSR set to: 0
  5724  0023C8  0E17               	movlw	23
  5725  0023CA  0100               	movlb	0	; () banked
  5726  0023CC  65D7               	cpfsgt	___fttol@exp1& (0+255),b
  5727  0023CE  D014               	goto	l5348
  5728                           
  5729                           ; BSR set to: 0
  5730  0023D0  0E00               	movlw	0
  5731  0023D2  0100               	movlb	0	; () banked
  5732  0023D4  6FC9               	movwf	?___fttol& (0+255),b
  5733  0023D6  0E00               	movlw	0
  5734  0023D8  6FCA               	movwf	(?___fttol+1)& (0+255),b
  5735  0023DA  0E00               	movlw	0
  5736  0023DC  6FCB               	movwf	(?___fttol+2)& (0+255),b
  5737  0023DE  0E00               	movlw	0
  5738  0023E0  6FCC               	movwf	(?___fttol+3)& (0+255),b
  5739                           
  5740                           ; BSR set to: 0
  5741  0023E2  0012               	return	
  5742                           
  5743                           ; BSR set to: 0
  5744  0023E4  D009               	goto	l5348
  5745  0023E6                     l5346:
  5746                           
  5747                           ; BSR set to: 0
  5748  0023E6  0100               	movlb	0	; () banked
  5749  0023E8  90D8               	bcf	status,0,c
  5750  0023EA  37D3               	rlcf	___fttol@lval& (0+255),f,b
  5751  0023EC  37D4               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5752  0023EE  37D5               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5753  0023F0  37D6               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5754  0023F2  0100               	movlb	0	; () banked
  5755  0023F4  07D7               	decf	___fttol@exp1& (0+255),f,b
  5756  0023F6  D000               	goto	l5348
  5757  0023F8                     l5348:
  5758                           
  5759                           ; BSR set to: 0
  5760  0023F8  0100               	movlb	0	; () banked
  5761  0023FA  51D7               	movf	___fttol@exp1& (0+255),w,b
  5762  0023FC  0100               	movlb	0	; () banked
  5763  0023FE  B4D8               	btfsc	status,2,c
  5764  002400  D002               	goto	l5350
  5765  002402  D7F1               	goto	l5346
  5766                           
  5767                           ; BSR set to: 0
  5768  002404  D000               	goto	l5350
  5769  002406                     l5350:
  5770                           
  5771                           ; BSR set to: 0
  5772  002406  0100               	movlb	0	; () banked
  5773  002408  51D2               	movf	___fttol@sign1& (0+255),w,b
  5774  00240A  0100               	movlb	0	; () banked
  5775  00240C  B4D8               	btfsc	status,2,c
  5776  00240E  D00A               	goto	l5354
  5777                           
  5778                           ; BSR set to: 0
  5779  002410  0100               	movlb	0	; () banked
  5780  002412  1FD6               	comf	(___fttol@lval+3)& (0+255),f,b
  5781  002414  1FD5               	comf	(___fttol@lval+2)& (0+255),f,b
  5782  002416  1FD4               	comf	(___fttol@lval+1)& (0+255),f,b
  5783  002418  6DD3               	negf	___fttol@lval& (0+255),b
  5784  00241A  0E00               	movlw	0
  5785  00241C  23D4               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5786  00241E  23D5               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5787  002420  23D6               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5788  002422  D000               	goto	l5354
  5789  002424                     l5354:
  5790                           
  5791                           ; BSR set to: 0
  5792  002424  C0D3  F0C9         	movff	___fttol@lval,?___fttol
  5793  002428  C0D4  F0CA         	movff	___fttol@lval+1,?___fttol+1
  5794  00242C  C0D5  F0CB         	movff	___fttol@lval+2,?___fttol+2
  5795  002430  C0D6  F0CC         	movff	___fttol@lval+3,?___fttol+3
  5796  002434  0012               	return	
  5797                           
  5798                           ; BSR set to: 0
  5799                           
  5800                           ; BSR set to: 0
  5801  002436  0012               	return		;funcret
  5802  002438                     __end_of___fttol:
  5803                           	opt stack 0
  5804                           tblptru	equ	0xFF8
  5805                           tblptrh	equ	0xFF7
  5806                           tblptrl	equ	0xFF6
  5807                           tablat	equ	0xFF5
  5808                           prodh	equ	0xFF4
  5809                           prodl	equ	0xFF3
  5810                           intcon	equ	0xFF2
  5811                           postinc0	equ	0xFEE
  5812                           wreg	equ	0xFE8
  5813                           indf2	equ	0xFDF
  5814                           postinc2	equ	0xFDE
  5815                           postdec2	equ	0xFDD
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function ___ftneg *****************
  5821 ;; Defined at:
  5822 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  f1              3   22[COMRAM] float 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;		None
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  3   22[COMRAM] float 
  5829 ;; Registers used:
  5830 ;;		wreg, status,2, status,0
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5836 ;;      Params:         3       0       0       0       0       0       0
  5837 ;;      Locals:         0       0       0       0       0       0       0
  5838 ;;      Temps:          0       0       0       0       0       0       0
  5839 ;;      Totals:         3       0       0       0       0       0       0
  5840 ;;Total ram usage:        3 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    4
  5843 ;; This function calls:
  5844 ;;		Nothing
  5845 ;; This function is called by:
  5846 ;;		_printf
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text15
  5851  00368E                     __ptext15:
  5852                           	opt stack 0
  5853  00368E                     ___ftneg:
  5854                           	opt stack 25
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;incstack = 0
  5858  00368E  5017               	movf	___ftneg@f1,w,c
  5859  003690  1018               	iorwf	___ftneg@f1+1,w,c
  5860  003692  1019               	iorwf	___ftneg@f1+2,w,c
  5861  003694  B4D8               	btfsc	status,2,c
  5862  003696  D006               	goto	l1175
  5863  003698  0E00               	movlw	0
  5864  00369A  1A17               	xorwf	___ftneg@f1,f,c
  5865  00369C  0E00               	movlw	0
  5866  00369E  1A18               	xorwf	___ftneg@f1+1,f,c
  5867  0036A0  0E80               	movlw	128
  5868  0036A2  1A19               	xorwf	___ftneg@f1+2,f,c
  5869  0036A4                     l1175:
  5870  0036A4  C017  F017         	movff	___ftneg@f1,?___ftneg
  5871  0036A8  C018  F018         	movff	___ftneg@f1+1,?___ftneg+1
  5872  0036AC  C019  F019         	movff	___ftneg@f1+2,?___ftneg+2
  5873  0036B0  0012               	return		;funcret
  5874  0036B2                     __end_of___ftneg:
  5875                           	opt stack 0
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           indf2	equ	0xFDF
  5886                           postinc2	equ	0xFDE
  5887                           postdec2	equ	0xFDD
  5888                           fsr2h	equ	0xFDA
  5889                           fsr2l	equ	0xFD9
  5890                           status	equ	0xFD8
  5891                           
  5892 ;; *************** function _Tempeture_Get *****************
  5893 ;; Defined at:
  5894 ;;		line 68 in file "Tempeture.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;  channelnum      2   42[COMRAM] int 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;		None
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  3   42[COMRAM] float 
  5901 ;; Registers used:
  5902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5908 ;;      Params:         3       0       0       0       0       0       0
  5909 ;;      Locals:         0       0       0       0       0       0       0
  5910 ;;      Temps:          0       0       0       0       0       0       0
  5911 ;;      Totals:         3       0       0       0       0       0       0
  5912 ;;Total ram usage:        3 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    5
  5915 ;; This function calls:
  5916 ;;		___wmul
  5917 ;; This function is called by:
  5918 ;;		_main
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text16
  5923  0035A8                     __ptext16:
  5924                           	opt stack 0
  5925  0035A8                     _Tempeture_Get:
  5926                           	opt stack 25
  5927                           
  5928                           ;Tempeture.c: 70: return Temp_DegF[channelnum];
  5929                           
  5930                           ;incstack = 0
  5931  0035A8  C02B  F025         	movff	Tempeture_Get@channelnum,___wmul@multiplier
  5932  0035AC  C02C  F026         	movff	Tempeture_Get@channelnum+1,___wmul@multiplier+1
  5933  0035B0  0E00               	movlw	0
  5934  0035B2  6E28               	movwf	___wmul@multiplicand+1,c
  5935  0035B4  0E03               	movlw	3
  5936  0035B6  6E27               	movwf	___wmul@multiplicand,c
  5937  0035B8  EC33  F01B         	call	___wmul	;wreg free
  5938  0035BC  0E78               	movlw	low _Temp_DegF
  5939  0035BE  2425               	addwf	?___wmul,w,c
  5940  0035C0  6ED9               	movwf	fsr2l,c
  5941  0035C2  0E01               	movlw	high _Temp_DegF
  5942  0035C4  2026               	addwfc	?___wmul+1,w,c
  5943  0035C6  6EDA               	movwf	fsr2h,c
  5944  0035C8  CFDE F02B          	movff	postinc2,?_Tempeture_Get
  5945  0035CC  CFDE F02C          	movff	postinc2,?_Tempeture_Get+1
  5946  0035D0  CFDD F02D          	movff	postdec2,?_Tempeture_Get+2
  5947  0035D4  0012               	return	
  5948  0035D6  0012               	return		;funcret
  5949  0035D8                     __end_of_Tempeture_Get:
  5950                           	opt stack 0
  5951                           tblptru	equ	0xFF8
  5952                           tblptrh	equ	0xFF7
  5953                           tblptrl	equ	0xFF6
  5954                           tablat	equ	0xFF5
  5955                           prodh	equ	0xFF4
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           indf2	equ	0xFDF
  5961                           postinc2	equ	0xFDE
  5962                           postdec2	equ	0xFDD
  5963                           fsr2h	equ	0xFDA
  5964                           fsr2l	equ	0xFD9
  5965                           status	equ	0xFD8
  5966                           
  5967 ;; *************** function _Temp_Convert *****************
  5968 ;; Defined at:
  5969 ;;		line 50 in file "Tempeture.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  steinhart       3   53[BANK0 ] float 
  5974 ;;  x               2   51[BANK0 ] int 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;		None               void
  5977 ;; Registers used:
  5978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5984 ;;      Params:         0       0       0       0       0       0       0
  5985 ;;      Locals:         0      11       0       0       0       0       0
  5986 ;;      Temps:          0       0       0       0       0       0       0
  5987 ;;      Totals:         0      11       0       0       0       0       0
  5988 ;;Total ram usage:       11 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; Hardware stack levels required when called:    8
  5991 ;; This function calls:
  5992 ;;		_Temp_Filter
  5993 ;;		___awtoft
  5994 ;;		___ftadd
  5995 ;;		___ftdiv
  5996 ;;		___ftmul
  5997 ;;		___ftsub
  5998 ;;		___wmul
  5999 ;;		_log
  6000 ;; This function is called by:
  6001 ;;		_main
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005                           	psect	text17
  6006  001F42                     __ptext17:
  6007                           	opt stack 0
  6008  001F42                     _Temp_Convert:
  6009                           	opt stack 22
  6010                           
  6011                           ;Tempeture.c: 52: int x;
  6012                           ;Tempeture.c: 53: float steinhart;
  6013                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
  6014                           
  6015                           ;incstack = 0
  6016  001F42  0E00               	movlw	0
  6017  001F44  0100               	movlb	0	; () banked
  6018  001F46  6FF0               	movwf	(Temp_Convert@x+1)& (0+255),b
  6019  001F48  0E00               	movlw	0
  6020  001F4A  6FEF               	movwf	Temp_Convert@x& (0+255),b
  6021                           
  6022                           ; BSR set to: 0
  6023  001F4C  0100               	movlb	0	; () banked
  6024  001F4E  BFF0               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6025  001F50  D00A               	goto	l5440
  6026  001F52  0100               	movlb	0	; () banked
  6027  001F54  51F0               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6028  001F56  E106               	bnz	u5890
  6029  001F58  0E0A               	movlw	10
  6030  001F5A  0100               	movlb	0	; () banked
  6031  001F5C  5DEF               	subwf	Temp_Convert@x& (0+255),w,b
  6032  001F5E  B0D8               	btfsc	status,0,c
  6033  001F60  D10A               	goto	l5464
  6034  001F62  D001               	goto	l5440
  6035  001F64                     u5890:
  6036                           
  6037                           ; BSR set to: 0
  6038  001F64  D108               	goto	l5464
  6039  001F66                     l5440:
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;Tempeture.c: 55: {
  6043                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  6044  001F66  0E00               	movlw	0
  6045  001F68  0100               	movlb	0	; () banked
  6046  001F6A  6FCF               	movwf	___ftadd@f2& (0+255),b
  6047  001F6C  0E80               	movlw	128
  6048  001F6E  0100               	movlb	0	; () banked
  6049  001F70  6FD0               	movwf	(___ftadd@f2+1)& (0+255),b
  6050  001F72  0EBF               	movlw	191
  6051  001F74  0100               	movlb	0	; () banked
  6052  001F76  6FD1               	movwf	(___ftadd@f2+2)& (0+255),b
  6053  001F78  90D8               	bcf	status,0,c
  6054  001F7A  0100               	movlb	0	; () banked
  6055  001F7C  35EF               	rlcf	Temp_Convert@x& (0+255),w,b
  6056  001F7E  6ED9               	movwf	fsr2l,c
  6057  001F80  0100               	movlb	0	; () banked
  6058  001F82  35F0               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  6059  001F84  6EDA               	movwf	fsr2h,c
  6060  001F86  0EA8               	movlw	low _Temp_Adc
  6061  001F88  26D9               	addwf	fsr2l,f,c
  6062  001F8A  0E00               	movlw	high _Temp_Adc
  6063  001F8C  22DA               	addwfc	fsr2h,f,c
  6064  001F8E  CFDE F01F          	movff	postinc2,___awtoft@c
  6065  001F92  CFDD F020          	movff	postdec2,___awtoft@c+1
  6066  001F96  EC68  F01A         	call	___awtoft	;wreg free
  6067  001F9A  C01F  F026         	movff	?___awtoft,___ftdiv@f2
  6068  001F9E  C020  F027         	movff	?___awtoft+1,___ftdiv@f2+1
  6069  001FA2  C021  F028         	movff	?___awtoft+2,___ftdiv@f2+2
  6070  001FA6  0EC0               	movlw	192
  6071  001FA8  6E23               	movwf	___ftdiv@f1,c
  6072  001FAA  0E7F               	movlw	127
  6073  001FAC  6E24               	movwf	___ftdiv@f1+1,c
  6074  001FAE  0E44               	movlw	68
  6075  001FB0  6E25               	movwf	___ftdiv@f1+2,c
  6076  001FB2  EC27  F015         	call	___ftdiv	;wreg free
  6077  001FB6  C023  F0CC         	movff	?___ftdiv,___ftadd@f1
  6078  001FBA  C024  F0CD         	movff	?___ftdiv+1,___ftadd@f1+1
  6079  001FBE  C025  F0CE         	movff	?___ftdiv+2,___ftadd@f1+2
  6080  001FC2  EC37  F00D         	call	___ftadd	;wreg free
  6081  001FC6  C0CC  F0E9         	movff	?___ftadd,_Temp_Convert$1738
  6082  001FCA  C0CD  F0EA         	movff	?___ftadd+1,_Temp_Convert$1738+1
  6083  001FCE  C0CE  F0EB         	movff	?___ftadd+2,_Temp_Convert$1738+2
  6084                           
  6085                           ;Tempeture.c: 55: {
  6086                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  6087  001FD2  C0E9  F026         	movff	_Temp_Convert$1738,___ftdiv@f2
  6088  001FD6  C0EA  F027         	movff	_Temp_Convert$1738+1,___ftdiv@f2+1
  6089  001FDA  C0EB  F028         	movff	_Temp_Convert$1738+2,___ftdiv@f2+2
  6090  001FDE  0E40               	movlw	64
  6091  001FE0  6E23               	movwf	___ftdiv@f1,c
  6092  001FE2  0E1C               	movlw	28
  6093  001FE4  6E24               	movwf	___ftdiv@f1+1,c
  6094  001FE6  0E46               	movlw	70
  6095  001FE8  6E25               	movwf	___ftdiv@f1+2,c
  6096  001FEA  EC27  F015         	call	___ftdiv	;wreg free
  6097  001FEE  C023  F0EC         	movff	?___ftdiv,_Temp_Convert$1739
  6098  001FF2  C024  F0ED         	movff	?___ftdiv+1,_Temp_Convert$1739+1
  6099  001FF6  C025  F0EE         	movff	?___ftdiv+2,_Temp_Convert$1739+2
  6100                           
  6101                           ;Tempeture.c: 55: {
  6102                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  6103  001FFA  C0EC  F023         	movff	_Temp_Convert$1739,___ftdiv@f1
  6104  001FFE  C0ED  F024         	movff	_Temp_Convert$1739+1,___ftdiv@f1+1
  6105  002002  C0EE  F025         	movff	_Temp_Convert$1739+2,___ftdiv@f1+2
  6106  002006  0E40               	movlw	64
  6107  002008  6E26               	movwf	___ftdiv@f2,c
  6108  00200A  0E1C               	movlw	28
  6109  00200C  6E27               	movwf	___ftdiv@f2+1,c
  6110  00200E  0E46               	movlw	70
  6111  002010  6E28               	movwf	___ftdiv@f2+2,c
  6112  002012  EC27  F015         	call	___ftdiv	;wreg free
  6113  002016  C023  F0F1         	movff	?___ftdiv,Temp_Convert@steinhart
  6114  00201A  C024  F0F2         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6115  00201E  C025  F0F3         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6116                           
  6117                           ;Tempeture.c: 57: steinhart = log(steinhart);
  6118  002022  C0F1  F0E4         	movff	Temp_Convert@steinhart,log@x
  6119  002026  C0F2  F0E5         	movff	Temp_Convert@steinhart+1,log@x+1
  6120  00202A  C0F3  F0E6         	movff	Temp_Convert@steinhart+2,log@x+2
  6121  00202E  EC1C  F012         	call	_log	;wreg free
  6122  002032  C0E4  F0F1         	movff	?_log,Temp_Convert@steinhart
  6123  002036  C0E5  F0F2         	movff	?_log+1,Temp_Convert@steinhart+1
  6124  00203A  C0E6  F0F3         	movff	?_log+2,Temp_Convert@steinhart+2
  6125                           
  6126                           ;Tempeture.c: 58: steinhart /= 3950;
  6127  00203E  C0F1  F023         	movff	Temp_Convert@steinhart,___ftdiv@f1
  6128  002042  C0F2  F024         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  6129  002046  C0F3  F025         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  6130  00204A  0EE0               	movlw	224
  6131  00204C  6E26               	movwf	___ftdiv@f2,c
  6132  00204E  0E76               	movlw	118
  6133  002050  6E27               	movwf	___ftdiv@f2+1,c
  6134  002052  0E45               	movlw	69
  6135  002054  6E28               	movwf	___ftdiv@f2+2,c
  6136  002056  EC27  F015         	call	___ftdiv	;wreg free
  6137  00205A  C023  F0F1         	movff	?___ftdiv,Temp_Convert@steinhart
  6138  00205E  C024  F0F2         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6139  002062  C025  F0F3         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6140                           
  6141                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  6142  002066  C0F1  F0CC         	movff	Temp_Convert@steinhart,___ftadd@f1
  6143  00206A  C0F2  F0CD         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  6144  00206E  C0F3  F0CE         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  6145  002072  0ECF               	movlw	207
  6146  002074  0100               	movlb	0	; () banked
  6147  002076  6FCF               	movwf	___ftadd@f2& (0+255),b
  6148  002078  0E5B               	movlw	91
  6149  00207A  0100               	movlb	0	; () banked
  6150  00207C  6FD0               	movwf	(___ftadd@f2+1)& (0+255),b
  6151  00207E  0E3B               	movlw	59
  6152  002080  0100               	movlb	0	; () banked
  6153  002082  6FD1               	movwf	(___ftadd@f2+2)& (0+255),b
  6154  002084  EC37  F00D         	call	___ftadd	;wreg free
  6155  002088  C0CC  F0F1         	movff	?___ftadd,Temp_Convert@steinhart
  6156  00208C  C0CD  F0F2         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6157  002090  C0CE  F0F3         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6158                           
  6159                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  6160  002094  0E00               	movlw	0
  6161  002096  6E23               	movwf	___ftdiv@f1,c
  6162  002098  0E80               	movlw	128
  6163  00209A  6E24               	movwf	___ftdiv@f1+1,c
  6164  00209C  0E3F               	movlw	63
  6165  00209E  6E25               	movwf	___ftdiv@f1+2,c
  6166  0020A0  C0F1  F026         	movff	Temp_Convert@steinhart,___ftdiv@f2
  6167  0020A4  C0F2  F027         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  6168  0020A8  C0F3  F028         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  6169  0020AC  EC27  F015         	call	___ftdiv	;wreg free
  6170  0020B0  C023  F0F1         	movff	?___ftdiv,Temp_Convert@steinhart
  6171  0020B4  C024  F0F2         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6172  0020B8  C025  F0F3         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6173                           
  6174                           ;Tempeture.c: 61: steinhart -= 273.15;
  6175  0020BC  C0F1  F0D8         	movff	Temp_Convert@steinhart,___ftsub@f1
  6176  0020C0  C0F2  F0D9         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  6177  0020C4  C0F3  F0DA         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  6178  0020C8  0E93               	movlw	147
  6179  0020CA  0100               	movlb	0	; () banked
  6180  0020CC  6FDB               	movwf	___ftsub@f2& (0+255),b
  6181  0020CE  0E88               	movlw	136
  6182  0020D0  0100               	movlb	0	; () banked
  6183  0020D2  6FDC               	movwf	(___ftsub@f2+1)& (0+255),b
  6184  0020D4  0E43               	movlw	67
  6185  0020D6  0100               	movlb	0	; () banked
  6186  0020D8  6FDD               	movwf	(___ftsub@f2+2)& (0+255),b
  6187  0020DA  ECB6  F019         	call	___ftsub	;wreg free
  6188  0020DE  C0D8  F0F1         	movff	?___ftsub,Temp_Convert@steinhart
  6189  0020E2  C0D9  F0F2         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  6190  0020E6  C0DA  F0F3         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  6191                           
  6192                           ;Tempeture.c: 62: steinhart = (steinhart*1.8) + 32.0;
  6193  0020EA  0E66               	movlw	102
  6194  0020EC  6E35               	movwf	___ftmul@f2,c
  6195  0020EE  0EE6               	movlw	230
  6196  0020F0  6E36               	movwf	___ftmul@f2+1,c
  6197  0020F2  0E3F               	movlw	63
  6198  0020F4  6E37               	movwf	___ftmul@f2+2,c
  6199  0020F6  C0F1  F032         	movff	Temp_Convert@steinhart,___ftmul@f1
  6200  0020FA  C0F2  F033         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  6201  0020FE  C0F3  F034         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  6202  002102  EC90  F014         	call	___ftmul	;wreg free
  6203  002106  C032  F0CC         	movff	?___ftmul,___ftadd@f1
  6204  00210A  C033  F0CD         	movff	?___ftmul+1,___ftadd@f1+1
  6205  00210E  C034  F0CE         	movff	?___ftmul+2,___ftadd@f1+2
  6206  002112  0E00               	movlw	0
  6207  002114  0100               	movlb	0	; () banked
  6208  002116  6FCF               	movwf	___ftadd@f2& (0+255),b
  6209  002118  0E00               	movlw	0
  6210  00211A  0100               	movlb	0	; () banked
  6211  00211C  6FD0               	movwf	(___ftadd@f2+1)& (0+255),b
  6212  00211E  0E42               	movlw	66
  6213  002120  0100               	movlb	0	; () banked
  6214  002122  6FD1               	movwf	(___ftadd@f2+2)& (0+255),b
  6215  002124  EC37  F00D         	call	___ftadd	;wreg free
  6216  002128  C0CC  F0F1         	movff	?___ftadd,Temp_Convert@steinhart
  6217  00212C  C0CD  F0F2         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6218  002130  C0CE  F0F3         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6219                           
  6220                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  6221  002134  C0EF  F025         	movff	Temp_Convert@x,___wmul@multiplier
  6222  002138  C0F0  F026         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6223  00213C  0E00               	movlw	0
  6224  00213E  6E28               	movwf	___wmul@multiplicand+1,c
  6225  002140  0E03               	movlw	3
  6226  002142  6E27               	movwf	___wmul@multiplicand,c
  6227  002144  EC33  F01B         	call	___wmul	;wreg free
  6228  002148  0ED2               	movlw	low _TmpTemp_DegF
  6229  00214A  2425               	addwf	?___wmul,w,c
  6230  00214C  6ED9               	movwf	fsr2l,c
  6231  00214E  0E01               	movlw	high _TmpTemp_DegF
  6232  002150  2026               	addwfc	?___wmul+1,w,c
  6233  002152  6EDA               	movwf	fsr2h,c
  6234  002154  C0F1  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6235  002158  C0F2  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6236  00215C  C0F3  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  6237  002160  0100               	movlb	0	; () banked
  6238  002162  4BEF               	infsnz	Temp_Convert@x& (0+255),f,b
  6239  002164  2BF0               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6240                           
  6241                           ; BSR set to: 0
  6242  002166  0100               	movlb	0	; () banked
  6243  002168  BFF0               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6244  00216A  D6FD               	goto	l5440
  6245  00216C  0100               	movlb	0	; () banked
  6246  00216E  51F0               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6247  002170  E102               	bnz	l5464
  6248  002172  D6F2               	goto	L5
  6249  002174  D000               	goto	l5464
  6250  002176                     l5464:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;Tempeture.c: 64: }
  6254                           ;Tempeture.c: 65: Temp_Filter();
  6255  002176  ECBE  F010         	call	_Temp_Filter	;wreg free
  6256  00217A  0012               	return		;funcret
  6257  00217C                     __end_of_Temp_Convert:
  6258                           	opt stack 0
  6259                           tblptru	equ	0xFF8
  6260                           tblptrh	equ	0xFF7
  6261                           tblptrl	equ	0xFF6
  6262                           tablat	equ	0xFF5
  6263                           prodh	equ	0xFF4
  6264                           prodl	equ	0xFF3
  6265                           intcon	equ	0xFF2
  6266                           postinc0	equ	0xFEE
  6267                           wreg	equ	0xFE8
  6268                           indf2	equ	0xFDF
  6269                           postinc2	equ	0xFDE
  6270                           postdec2	equ	0xFDD
  6271                           fsr2h	equ	0xFDA
  6272                           fsr2l	equ	0xFD9
  6273                           status	equ	0xFD8
  6274                           
  6275 ;; *************** function _log *****************
  6276 ;; Defined at:
  6277 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;  x               3   40[BANK0 ] int 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  exponent        2   43[BANK0 ] int 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  3   40[BANK0 ] int 
  6284 ;; Registers used:
  6285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6291 ;;      Params:         0       3       0       0       0       0       0
  6292 ;;      Locals:         0       2       0       0       0       0       0
  6293 ;;      Temps:          0       0       0       0       0       0       0
  6294 ;;      Totals:         0       5       0       0       0       0       0
  6295 ;;Total ram usage:        5 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    7
  6298 ;; This function calls:
  6299 ;;		___awtoft
  6300 ;;		___ftadd
  6301 ;;		___ftmul
  6302 ;;		_eval_poly
  6303 ;;		_frexp
  6304 ;; This function is called by:
  6305 ;;		_Temp_Convert
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           	psect	text18
  6310  002438                     __ptext18:
  6311                           	opt stack 0
  6312  002438                     _log:
  6313                           	opt stack 22
  6314                           
  6315                           ;incstack = 0
  6316  002438  0100               	movlb	0	; () banked
  6317  00243A  AFE6               	btfss	(log@x+2)& (0+255),7,b
  6318  00243C  D00F               	goto	l5032
  6319                           
  6320                           ; BSR set to: 0
  6321  00243E  0E00               	movlw	0
  6322  002440  0100               	movlb	0	; () banked
  6323  002442  6FA7               	movwf	(_errno+1)& (0+255),b
  6324  002444  0E21               	movlw	33
  6325  002446  6FA6               	movwf	_errno& (0+255),b
  6326  002448  0E00               	movlw	0
  6327  00244A  0100               	movlb	0	; () banked
  6328  00244C  6FE4               	movwf	?_log& (0+255),b
  6329  00244E  0E00               	movlw	0
  6330  002450  0100               	movlb	0	; () banked
  6331  002452  6FE5               	movwf	(?_log+1)& (0+255),b
  6332  002454  0E00               	movlw	0
  6333  002456  0100               	movlb	0	; () banked
  6334  002458  6FE6               	movwf	(?_log+2)& (0+255),b
  6335                           
  6336                           ; BSR set to: 0
  6337  00245A  0012               	return	
  6338  00245C                     l5032:
  6339                           
  6340                           ; BSR set to: 0
  6341  00245C  0100               	movlb	0	; () banked
  6342  00245E  51E4               	movf	log@x& (0+255),w,b
  6343  002460  0100               	movlb	0	; () banked
  6344  002462  11E5               	iorwf	(log@x+1)& (0+255),w,b
  6345  002464  0100               	movlb	0	; () banked
  6346  002466  11E6               	iorwf	(log@x+2)& (0+255),w,b
  6347  002468  A4D8               	btfss	status,2,c
  6348  00246A  D00F               	goto	l5038
  6349                           
  6350                           ; BSR set to: 0
  6351  00246C  0E00               	movlw	0
  6352  00246E  0100               	movlb	0	; () banked
  6353  002470  6FA7               	movwf	(_errno+1)& (0+255),b
  6354  002472  0E22               	movlw	34
  6355  002474  6FA6               	movwf	_errno& (0+255),b
  6356  002476  0E00               	movlw	0
  6357  002478  0100               	movlb	0	; () banked
  6358  00247A  6FE4               	movwf	?_log& (0+255),b
  6359  00247C  0E00               	movlw	0
  6360  00247E  0100               	movlb	0	; () banked
  6361  002480  6FE5               	movwf	(?_log+1)& (0+255),b
  6362  002482  0E00               	movlw	0
  6363  002484  0100               	movlb	0	; () banked
  6364  002486  6FE6               	movwf	(?_log+2)& (0+255),b
  6365                           
  6366                           ; BSR set to: 0
  6367  002488  0012               	return	
  6368  00248A                     l5038:
  6369                           
  6370                           ; BSR set to: 0
  6371  00248A  0E00               	movlw	0
  6372  00248C  6E35               	movwf	___ftmul@f2,c
  6373  00248E  0E00               	movlw	0
  6374  002490  6E36               	movwf	___ftmul@f2+1,c
  6375  002492  0E40               	movlw	64
  6376  002494  6E37               	movwf	___ftmul@f2+2,c
  6377  002496  0EE7               	movlw	low log@exponent
  6378  002498  6E1A               	movwf	frexp@eptr,c
  6379  00249A  0E00               	movlw	high log@exponent
  6380  00249C  6E1B               	movwf	frexp@eptr+1,c
  6381  00249E  C0E4  F017         	movff	log@x,frexp@value
  6382  0024A2  C0E5  F018         	movff	log@x+1,frexp@value+1
  6383  0024A6  C0E6  F019         	movff	log@x+2,frexp@value+2
  6384  0024AA  EC7E  F018         	call	_frexp	;wreg free
  6385  0024AE  C017  F032         	movff	?_frexp,___ftmul@f1
  6386  0024B2  C018  F033         	movff	?_frexp+1,___ftmul@f1+1
  6387  0024B6  C019  F034         	movff	?_frexp+2,___ftmul@f1+2
  6388  0024BA  EC90  F014         	call	___ftmul	;wreg free
  6389  0024BE  C032  F0CC         	movff	?___ftmul,___ftadd@f1
  6390  0024C2  C033  F0CD         	movff	?___ftmul+1,___ftadd@f1+1
  6391  0024C6  C034  F0CE         	movff	?___ftmul+2,___ftadd@f1+2
  6392  0024CA  0E00               	movlw	0
  6393  0024CC  0100               	movlb	0	; () banked
  6394  0024CE  6FCF               	movwf	___ftadd@f2& (0+255),b
  6395  0024D0  0E80               	movlw	128
  6396  0024D2  0100               	movlb	0	; () banked
  6397  0024D4  6FD0               	movwf	(___ftadd@f2+1)& (0+255),b
  6398  0024D6  0EBF               	movlw	191
  6399  0024D8  0100               	movlb	0	; () banked
  6400  0024DA  6FD1               	movwf	(___ftadd@f2+2)& (0+255),b
  6401  0024DC  EC37  F00D         	call	___ftadd	;wreg free
  6402  0024E0  C0CC  F0E4         	movff	?___ftadd,log@x
  6403  0024E4  C0CD  F0E5         	movff	?___ftadd+1,log@x+1
  6404  0024E8  C0CE  F0E6         	movff	?___ftadd+2,log@x+2
  6405  0024EC  0100               	movlb	0	; () banked
  6406  0024EE  07E7               	decf	log@exponent& (0+255),f,b
  6407  0024F0  A0D8               	btfss	status,0,c
  6408  0024F2  07E8               	decf	(log@exponent+1)& (0+255),f,b
  6409                           
  6410                           ; BSR set to: 0
  6411  0024F4  C0E4  F0D8         	movff	log@x,eval_poly@x
  6412  0024F8  C0E5  F0D9         	movff	log@x+1,eval_poly@x+1
  6413  0024FC  C0E6  F0DA         	movff	log@x+2,eval_poly@x+2
  6414  002500  0E77               	movlw	low log@coeff
  6415  002502  0100               	movlb	0	; () banked
  6416  002504  6FDB               	movwf	eval_poly@d& (0+255),b
  6417  002506  0E06               	movlw	high log@coeff
  6418  002508  0100               	movlb	0	; () banked
  6419  00250A  6FDC               	movwf	(eval_poly@d+1)& (0+255),b
  6420  00250C  0E00               	movlw	0
  6421  00250E  0100               	movlb	0	; () banked
  6422  002510  6FDE               	movwf	(eval_poly@n+1)& (0+255),b
  6423  002512  0E08               	movlw	8
  6424  002514  6FDD               	movwf	eval_poly@n& (0+255),b
  6425  002516  EC9D  F015         	call	_eval_poly	;wreg free
  6426  00251A  C0D8  F0E4         	movff	?_eval_poly,log@x
  6427  00251E  C0D9  F0E5         	movff	?_eval_poly+1,log@x+1
  6428  002522  C0DA  F0E6         	movff	?_eval_poly+2,log@x+2
  6429  002526  0E72               	movlw	114
  6430  002528  6E35               	movwf	___ftmul@f2,c
  6431  00252A  0E31               	movlw	49
  6432  00252C  6E36               	movwf	___ftmul@f2+1,c
  6433  00252E  0E3F               	movlw	63
  6434  002530  6E37               	movwf	___ftmul@f2+2,c
  6435  002532  C0E7  F01F         	movff	log@exponent,___awtoft@c
  6436  002536  C0E8  F020         	movff	log@exponent+1,___awtoft@c+1
  6437  00253A  EC68  F01A         	call	___awtoft	;wreg free
  6438  00253E  C01F  F032         	movff	?___awtoft,___ftmul@f1
  6439  002542  C020  F033         	movff	?___awtoft+1,___ftmul@f1+1
  6440  002546  C021  F034         	movff	?___awtoft+2,___ftmul@f1+2
  6441  00254A  EC90  F014         	call	___ftmul	;wreg free
  6442  00254E  C032  F0CC         	movff	?___ftmul,___ftadd@f1
  6443  002552  C033  F0CD         	movff	?___ftmul+1,___ftadd@f1+1
  6444  002556  C034  F0CE         	movff	?___ftmul+2,___ftadd@f1+2
  6445  00255A  C0E4  F0CF         	movff	log@x,___ftadd@f2
  6446  00255E  C0E5  F0D0         	movff	log@x+1,___ftadd@f2+1
  6447  002562  C0E6  F0D1         	movff	log@x+2,___ftadd@f2+2
  6448  002566  EC37  F00D         	call	___ftadd	;wreg free
  6449  00256A  C0CC  F0E4         	movff	?___ftadd,?_log
  6450  00256E  C0CD  F0E5         	movff	?___ftadd+1,?_log+1
  6451  002572  C0CE  F0E6         	movff	?___ftadd+2,?_log+2
  6452  002576  0012               	return	
  6453  002578  0012               	return		;funcret
  6454  00257A                     __end_of_log:
  6455                           	opt stack 0
  6456                           tblptru	equ	0xFF8
  6457                           tblptrh	equ	0xFF7
  6458                           tblptrl	equ	0xFF6
  6459                           tablat	equ	0xFF5
  6460                           prodh	equ	0xFF4
  6461                           prodl	equ	0xFF3
  6462                           intcon	equ	0xFF2
  6463                           postinc0	equ	0xFEE
  6464                           wreg	equ	0xFE8
  6465                           indf2	equ	0xFDF
  6466                           postinc2	equ	0xFDE
  6467                           postdec2	equ	0xFDD
  6468                           fsr2h	equ	0xFDA
  6469                           fsr2l	equ	0xFD9
  6470                           status	equ	0xFD8
  6471                           
  6472 ;; *************** function _frexp *****************
  6473 ;; Defined at:
  6474 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;  value           3   22[COMRAM] int 
  6477 ;;  eptr            2   25[COMRAM] PTR int 
  6478 ;;		 -> log@exponent(2), 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  3   22[COMRAM] PTR int 
  6483 ;; Registers used:
  6484 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6490 ;;      Params:         5       0       0       0       0       0       0
  6491 ;;      Locals:         0       0       0       0       0       0       0
  6492 ;;      Temps:          2       0       0       0       0       0       0
  6493 ;;      Totals:         7       0       0       0       0       0       0
  6494 ;;Total ram usage:        7 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    4
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_log
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text19
  6505  0030FC                     __ptext19:
  6506                           	opt stack 0
  6507  0030FC                     _frexp:
  6508                           	opt stack 24
  6509                           
  6510                           ;incstack = 0
  6511  0030FC  5017               	movf	frexp@value,w,c
  6512  0030FE  1018               	iorwf	frexp@value+1,w,c
  6513  003100  1019               	iorwf	frexp@value+2,w,c
  6514  003102  A4D8               	btfss	status,2,c
  6515  003104  D00F               	goto	l3382
  6516  003106  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6517  00310A  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6518  00310E  0E00               	movlw	0
  6519  003110  6EDE               	movwf	postinc2,c
  6520  003112  0E00               	movlw	0
  6521  003114  6EDD               	movwf	postdec2,c
  6522  003116  0E00               	movlw	0
  6523  003118  6E17               	movwf	?_frexp,c
  6524  00311A  0E00               	movlw	0
  6525  00311C  6E18               	movwf	?_frexp+1,c
  6526  00311E  0E00               	movlw	0
  6527  003120  6E19               	movwf	?_frexp+2,c
  6528  003122  0012               	return	
  6529  003124                     l3382:
  6530  003124  5019               	movf	frexp@value+2,w,c
  6531  003126  0B7F               	andlw	127
  6532  003128  6E1C               	movwf	??_frexp& (0+255),c
  6533  00312A  6A1D               	clrf	(??_frexp+1)& (0+255),c
  6534  00312C  90D8               	bcf	status,0,c
  6535  00312E  361C               	rlcf	??_frexp,f,c
  6536  003130  361D               	rlcf	??_frexp+1,f,c
  6537  003132  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6538  003136  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6539  00313A  C01C  FFDE         	movff	??_frexp,postinc2
  6540  00313E  C01D  FFDD         	movff	??_frexp+1,postdec2
  6541  003142  AE18               	btfss	frexp@value+1,7,c
  6542  003144  D003               	goto	u2910
  6543  003146  6A1C               	clrf	??_frexp& (0+255),c
  6544  003148  2A1C               	incf	??_frexp& (0+255),f,c
  6545  00314A  D001               	goto	u2918
  6546  00314C                     u2910:
  6547  00314C  6A1C               	clrf	??_frexp& (0+255),c
  6548  00314E                     u2918:
  6549  00314E  501C               	movf	??_frexp,w,c
  6550  003150  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6551  003154  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6552  003158  12DE               	iorwf	postinc2,f,c
  6553  00315A  0E00               	movlw	0
  6554  00315C  12DD               	iorwf	postdec2,f,c
  6555  00315E  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6556  003162  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6557  003166  0E82               	movlw	130
  6558  003168  26DE               	addwf	postinc2,f,c
  6559  00316A  0EFF               	movlw	255
  6560  00316C  22DD               	addwfc	postdec2,f,c
  6561  00316E  8019               	bsf	frexp@value+2,0,c
  6562  003170  8219               	bsf	frexp@value+2,1,c
  6563  003172  8419               	bsf	frexp@value+2,2,c
  6564  003174  8619               	bsf	frexp@value+2,3,c
  6565  003176  8819               	bsf	frexp@value+2,4,c
  6566  003178  8A19               	bsf	frexp@value+2,5,c
  6567  00317A  9C19               	bcf	frexp@value+2,6,c
  6568  00317C  9E18               	bcf	frexp@value+1,7,c
  6569  00317E  C017  F017         	movff	frexp@value,?_frexp
  6570  003182  C018  F018         	movff	frexp@value+1,?_frexp+1
  6571  003186  C019  F019         	movff	frexp@value+2,?_frexp+2
  6572  00318A  0012               	return	
  6573  00318C  0012               	return		;funcret
  6574  00318E                     __end_of_frexp:
  6575                           	opt stack 0
  6576                           tblptru	equ	0xFF8
  6577                           tblptrh	equ	0xFF7
  6578                           tblptrl	equ	0xFF6
  6579                           tablat	equ	0xFF5
  6580                           prodh	equ	0xFF4
  6581                           prodl	equ	0xFF3
  6582                           intcon	equ	0xFF2
  6583                           postinc0	equ	0xFEE
  6584                           wreg	equ	0xFE8
  6585                           indf2	equ	0xFDF
  6586                           postinc2	equ	0xFDE
  6587                           postdec2	equ	0xFDD
  6588                           fsr2h	equ	0xFDA
  6589                           fsr2l	equ	0xFD9
  6590                           status	equ	0xFD8
  6591                           
  6592 ;; *************** function _eval_poly *****************
  6593 ;; Defined at:
  6594 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  x               3   28[BANK0 ] PTR int 
  6597 ;;  d               2   31[BANK0 ] PTR const 
  6598 ;;		 -> log@coeff(27), 
  6599 ;;  n               2   33[BANK0 ] int 
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;  res             3   37[BANK0 ] int 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  3   28[BANK0 ] int 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6611 ;;      Params:         0       7       0       0       0       0       0
  6612 ;;      Locals:         0       3       0       0       0       0       0
  6613 ;;      Temps:          0       2       0       0       0       0       0
  6614 ;;      Totals:         0      12       0       0       0       0       0
  6615 ;;Total ram usage:       12 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    6
  6618 ;; This function calls:
  6619 ;;		___ftadd
  6620 ;;		___ftmul
  6621 ;;		___wmul
  6622 ;; This function is called by:
  6623 ;;		_log
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text20
  6628  002B3A                     __ptext20:
  6629                           	opt stack 0
  6630  002B3A                     _eval_poly:
  6631                           	opt stack 22
  6632                           
  6633                           ;incstack = 0
  6634  002B3A  C0DD  F025         	movff	eval_poly@n,___wmul@multiplier
  6635  002B3E  C0DE  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  6636  002B42  0E00               	movlw	0
  6637  002B44  6E28               	movwf	___wmul@multiplicand+1,c
  6638  002B46  0E03               	movlw	3
  6639  002B48  6E27               	movwf	___wmul@multiplicand,c
  6640  002B4A  EC33  F01B         	call	___wmul	;wreg free
  6641  002B4E  C0DB  F0DF         	movff	eval_poly@d,??_eval_poly
  6642  002B52  C0DC  F0E0         	movff	eval_poly@d+1,??_eval_poly+1
  6643  002B56  5025               	movf	?___wmul,w,c
  6644  002B58  0100               	movlb	0	; () banked
  6645  002B5A  27DF               	addwf	??_eval_poly& (0+255),f,b
  6646  002B5C  5026               	movf	?___wmul+1,w,c
  6647  002B5E  0100               	movlb	0	; () banked
  6648  002B60  23E0               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6649  002B62  C0DF  FFF6         	movff	??_eval_poly,tblptrl
  6650  002B66  C0E0  FFF7         	movff	??_eval_poly+1,tblptrh
  6651  002B6A                     	if	0	;tblptru may be non-zero
  6652  002B6A                     	endif
  6653  002B6A                     	if	0	;tblptru may be non-zero
  6654  002B6A                     	endif
  6655  002B6A  0009               	tblrd		*+
  6656  002B6C  CFF5 F0E1          	movff	tablat,eval_poly@res
  6657  002B70  0009               	tblrd		*+
  6658  002B72  CFF5 F0E2          	movff	tablat,eval_poly@res+1
  6659  002B76  000A               	tblrd		*-
  6660  002B78  CFF5 F0E3          	movff	tablat,eval_poly@res+2
  6661  002B7C  D042               	goto	l4994
  6662  002B7E                     l4992:
  6663                           
  6664                           ; BSR set to: 0
  6665  002B7E  C0E1  F035         	movff	eval_poly@res,___ftmul@f2
  6666  002B82  C0E2  F036         	movff	eval_poly@res+1,___ftmul@f2+1
  6667  002B86  C0E3  F037         	movff	eval_poly@res+2,___ftmul@f2+2
  6668  002B8A  C0D8  F032         	movff	eval_poly@x,___ftmul@f1
  6669  002B8E  C0D9  F033         	movff	eval_poly@x+1,___ftmul@f1+1
  6670  002B92  C0DA  F034         	movff	eval_poly@x+2,___ftmul@f1+2
  6671  002B96  EC90  F014         	call	___ftmul	;wreg free
  6672  002B9A  C032  F0CC         	movff	?___ftmul,___ftadd@f1
  6673  002B9E  C033  F0CD         	movff	?___ftmul+1,___ftadd@f1+1
  6674  002BA2  C034  F0CE         	movff	?___ftmul+2,___ftadd@f1+2
  6675  002BA6  0E00               	movlw	0
  6676  002BA8  6E28               	movwf	___wmul@multiplicand+1,c
  6677  002BAA  0E03               	movlw	3
  6678  002BAC  6E27               	movwf	___wmul@multiplicand,c
  6679  002BAE  0100               	movlb	0	; () banked
  6680  002BB0  07DD               	decf	eval_poly@n& (0+255),f,b
  6681  002BB2  A0D8               	btfss	status,0,c
  6682  002BB4  07DE               	decf	(eval_poly@n+1)& (0+255),f,b
  6683  002BB6  C0DD  F025         	movff	eval_poly@n,___wmul@multiplier
  6684  002BBA  C0DE  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  6685  002BBE  EC33  F01B         	call	___wmul	;wreg free
  6686  002BC2  C0DB  F0DF         	movff	eval_poly@d,??_eval_poly
  6687  002BC6  C0DC  F0E0         	movff	eval_poly@d+1,??_eval_poly+1
  6688  002BCA  5025               	movf	?___wmul,w,c
  6689  002BCC  0100               	movlb	0	; () banked
  6690  002BCE  27DF               	addwf	??_eval_poly& (0+255),f,b
  6691  002BD0  5026               	movf	?___wmul+1,w,c
  6692  002BD2  0100               	movlb	0	; () banked
  6693  002BD4  23E0               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6694  002BD6  C0DF  FFF6         	movff	??_eval_poly,tblptrl
  6695  002BDA  C0E0  FFF7         	movff	??_eval_poly+1,tblptrh
  6696  002BDE                     	if	0	;tblptru may be non-zero
  6697  002BDE                     	endif
  6698  002BDE                     	if	0	;tblptru may be non-zero
  6699  002BDE                     	endif
  6700  002BDE  0009               	tblrd		*+
  6701  002BE0  CFF5 F0CF          	movff	tablat,___ftadd@f2
  6702  002BE4  0009               	tblrd		*+
  6703  002BE6  CFF5 F0D0          	movff	tablat,___ftadd@f2+1
  6704  002BEA  000A               	tblrd		*-
  6705  002BEC  CFF5 F0D1          	movff	tablat,___ftadd@f2+2
  6706  002BF0  EC37  F00D         	call	___ftadd	;wreg free
  6707  002BF4  C0CC  F0E1         	movff	?___ftadd,eval_poly@res
  6708  002BF8  C0CD  F0E2         	movff	?___ftadd+1,eval_poly@res+1
  6709  002BFC  C0CE  F0E3         	movff	?___ftadd+2,eval_poly@res+2
  6710  002C00  D000               	goto	l4994
  6711  002C02                     l4994:
  6712  002C02  0100               	movlb	0	; () banked
  6713  002C04  51DD               	movf	eval_poly@n& (0+255),w,b
  6714  002C06  0100               	movlb	0	; () banked
  6715  002C08  11DE               	iorwf	(eval_poly@n+1)& (0+255),w,b
  6716  002C0A  A4D8               	btfss	status,2,c
  6717  002C0C  D7B8               	goto	l4992
  6718                           
  6719                           ; BSR set to: 0
  6720  002C0E  C0E1  F0D8         	movff	eval_poly@res,?_eval_poly
  6721  002C12  C0E2  F0D9         	movff	eval_poly@res+1,?_eval_poly+1
  6722  002C16  C0E3  F0DA         	movff	eval_poly@res+2,?_eval_poly+2
  6723                           
  6724                           ; BSR set to: 0
  6725  002C1A  0012               	return		;funcret
  6726  002C1C                     __end_of_eval_poly:
  6727                           	opt stack 0
  6728                           tblptru	equ	0xFF8
  6729                           tblptrh	equ	0xFF7
  6730                           tblptrl	equ	0xFF6
  6731                           tablat	equ	0xFF5
  6732                           prodh	equ	0xFF4
  6733                           prodl	equ	0xFF3
  6734                           intcon	equ	0xFF2
  6735                           postinc0	equ	0xFEE
  6736                           wreg	equ	0xFE8
  6737                           indf2	equ	0xFDF
  6738                           postinc2	equ	0xFDE
  6739                           postdec2	equ	0xFDD
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function ___ftsub *****************
  6745 ;; Defined at:
  6746 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  f1              3   28[BANK0 ] float 
  6749 ;;  f2              3   31[BANK0 ] float 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;		None
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  3   28[BANK0 ] float 
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6761 ;;      Params:         0       6       0       0       0       0       0
  6762 ;;      Locals:         0       0       0       0       0       0       0
  6763 ;;      Temps:          0       0       0       0       0       0       0
  6764 ;;      Totals:         0       6       0       0       0       0       0
  6765 ;;Total ram usage:        6 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    6
  6768 ;; This function calls:
  6769 ;;		___ftadd
  6770 ;; This function is called by:
  6771 ;;		_Temp_Convert
  6772 ;;		_printf
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text21
  6777  00336C                     __ptext21:
  6778                           	opt stack 0
  6779  00336C                     ___ftsub:
  6780                           	opt stack 23
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;incstack = 0
  6784  00336C  0100               	movlb	0	; () banked
  6785  00336E  51DB               	movf	___ftsub@f2& (0+255),w,b
  6786  003370  0100               	movlb	0	; () banked
  6787  003372  11DC               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6788  003374  0100               	movlb	0	; () banked
  6789  003376  11DD               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6790  003378  B4D8               	btfsc	status,2,c
  6791  00337A  D00A               	goto	l5286
  6792                           
  6793                           ; BSR set to: 0
  6794  00337C  0E00               	movlw	0
  6795  00337E  0100               	movlb	0	; () banked
  6796  003380  1BDB               	xorwf	___ftsub@f2& (0+255),f,b
  6797  003382  0E00               	movlw	0
  6798  003384  0100               	movlb	0	; () banked
  6799  003386  1BDC               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6800  003388  0E80               	movlw	128
  6801  00338A  0100               	movlb	0	; () banked
  6802  00338C  1BDD               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6803  00338E  D000               	goto	l5286
  6804  003390                     l5286:
  6805                           
  6806                           ; BSR set to: 0
  6807  003390  C0D8  F0CC         	movff	___ftsub@f1,___ftadd@f1
  6808  003394  C0D9  F0CD         	movff	___ftsub@f1+1,___ftadd@f1+1
  6809  003398  C0DA  F0CE         	movff	___ftsub@f1+2,___ftadd@f1+2
  6810  00339C  C0DB  F0CF         	movff	___ftsub@f2,___ftadd@f2
  6811  0033A0  C0DC  F0D0         	movff	___ftsub@f2+1,___ftadd@f2+1
  6812  0033A4  C0DD  F0D1         	movff	___ftsub@f2+2,___ftadd@f2+2
  6813  0033A8  EC37  F00D         	call	___ftadd	;wreg free
  6814  0033AC  C0CC  F0D8         	movff	?___ftadd,?___ftsub
  6815  0033B0  C0CD  F0D9         	movff	?___ftadd+1,?___ftsub+1
  6816  0033B4  C0CE  F0DA         	movff	?___ftadd+2,?___ftsub+2
  6817  0033B8  0012               	return	
  6818  0033BA  0012               	return		;funcret
  6819  0033BC                     __end_of___ftsub:
  6820                           	opt stack 0
  6821                           tblptru	equ	0xFF8
  6822                           tblptrh	equ	0xFF7
  6823                           tblptrl	equ	0xFF6
  6824                           tablat	equ	0xFF5
  6825                           prodh	equ	0xFF4
  6826                           prodl	equ	0xFF3
  6827                           intcon	equ	0xFF2
  6828                           postinc0	equ	0xFEE
  6829                           wreg	equ	0xFE8
  6830                           indf2	equ	0xFDF
  6831                           postinc2	equ	0xFDE
  6832                           postdec2	equ	0xFDD
  6833                           fsr2h	equ	0xFDA
  6834                           fsr2l	equ	0xFD9
  6835                           status	equ	0xFD8
  6836                           
  6837 ;; *************** function _Temp_Filter *****************
  6838 ;; Defined at:
  6839 ;;		line 36 in file "Tempeture.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;		None
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;  x               2   28[BANK0 ] int 
  6844 ;; Return value:  Size  Location     Type
  6845 ;;		None               void
  6846 ;; Registers used:
  6847 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6848 ;; Tracked objects:
  6849 ;;		On entry : 0/0
  6850 ;;		On exit  : 0/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6853 ;;      Params:         0       0       0       0       0       0       0
  6854 ;;      Locals:         0       2       0       0       0       0       0
  6855 ;;      Temps:          0       0       0       0       0       0       0
  6856 ;;      Totals:         0       2       0       0       0       0       0
  6857 ;;Total ram usage:        2 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; Hardware stack levels required when called:    6
  6860 ;; This function calls:
  6861 ;;		___ftadd
  6862 ;;		___ftmul
  6863 ;;		___wmul
  6864 ;; This function is called by:
  6865 ;;		_Temp_Convert
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text22
  6870  00217C                     __ptext22:
  6871                           	opt stack 0
  6872  00217C                     _Temp_Filter:
  6873                           	opt stack 23
  6874                           
  6875                           ;Tempeture.c: 39: int x;
  6876                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  6877                           
  6878                           ;incstack = 0
  6879  00217C  0E00               	movlw	0
  6880  00217E  0100               	movlb	0	; () banked
  6881  002180  6FD9               	movwf	(Temp_Filter@x+1)& (0+255),b
  6882  002182  0E00               	movlw	0
  6883  002184  6FD8               	movwf	Temp_Filter@x& (0+255),b
  6884  002186                     l5004:
  6885                           
  6886                           ; BSR set to: 0
  6887  002186  0100               	movlb	0	; () banked
  6888  002188  BFD9               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  6889  00218A  D00A               	goto	l5008
  6890  00218C  0100               	movlb	0	; () banked
  6891  00218E  51D9               	movf	(Temp_Filter@x+1)& (0+255),w,b
  6892  002190  E16C               	bnz	l5014
  6893  002192  0E0A               	movlw	10
  6894  002194  0100               	movlb	0	; () banked
  6895  002196  5DD8               	subwf	Temp_Filter@x& (0+255),w,b
  6896  002198  B0D8               	btfsc	status,0,c
  6897  00219A  D067               	goto	l5014
  6898  00219C  D001               	goto	l5008
  6899                           
  6900                           ; BSR set to: 0
  6901  00219E  D065               	goto	l5014
  6902  0021A0                     l5008:
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;Tempeture.c: 41: {
  6906                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  6907  0021A0  C0D8  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6908  0021A4  C0D9  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6909  0021A8  0E00               	movlw	0
  6910  0021AA  6E28               	movwf	___wmul@multiplicand+1,c
  6911  0021AC  0E03               	movlw	3
  6912  0021AE  6E27               	movwf	___wmul@multiplicand,c
  6913  0021B0  EC33  F01B         	call	___wmul	;wreg free
  6914  0021B4  0E78               	movlw	low _Temp_DegF
  6915  0021B6  2425               	addwf	?___wmul,w,c
  6916  0021B8  6ED9               	movwf	fsr2l,c
  6917  0021BA  0E01               	movlw	high _Temp_DegF
  6918  0021BC  2026               	addwfc	?___wmul+1,w,c
  6919  0021BE  6EDA               	movwf	fsr2h,c
  6920  0021C0  0E48               	movlw	72
  6921  0021C2  6E35               	movwf	___ftmul@f2,c
  6922  0021C4  0E61               	movlw	97
  6923  0021C6  6E36               	movwf	___ftmul@f2+1,c
  6924  0021C8  0E3F               	movlw	63
  6925  0021CA  6E37               	movwf	___ftmul@f2+2,c
  6926  0021CC  C0D8  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6927  0021D0  C0D9  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6928  0021D4  0E00               	movlw	0
  6929  0021D6  6E28               	movwf	___wmul@multiplicand+1,c
  6930  0021D8  0E03               	movlw	3
  6931  0021DA  6E27               	movwf	___wmul@multiplicand,c
  6932  0021DC  EC33  F01B         	call	___wmul	;wreg free
  6933  0021E0  0ED2               	movlw	low _TmpTemp_DegF
  6934  0021E2  2425               	addwf	?___wmul,w,c
  6935  0021E4  6EE1               	movwf	fsr1l,c
  6936  0021E6  0E01               	movlw	high _TmpTemp_DegF
  6937  0021E8  2026               	addwfc	?___wmul+1,w,c
  6938  0021EA  6EE2               	movwf	fsr1h,c
  6939  0021EC  CFE6 F032          	movff	postinc1,___ftmul@f1
  6940  0021F0  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  6941  0021F4  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  6942  0021F8  EC90  F014         	call	___ftmul	;wreg free
  6943  0021FC  C032  F0CC         	movff	?___ftmul,___ftadd@f1
  6944  002200  C033  F0CD         	movff	?___ftmul+1,___ftadd@f1+1
  6945  002204  C034  F0CE         	movff	?___ftmul+2,___ftadd@f1+2
  6946  002208  0EC3               	movlw	195
  6947  00220A  6E35               	movwf	___ftmul@f2,c
  6948  00220C  0EF5               	movlw	245
  6949  00220E  6E36               	movwf	___ftmul@f2+1,c
  6950  002210  0E3D               	movlw	61
  6951  002212  6E37               	movwf	___ftmul@f2+2,c
  6952  002214  0E00               	movlw	0
  6953  002216  6E28               	movwf	___wmul@multiplicand+1,c
  6954  002218  0E03               	movlw	3
  6955  00221A  6E27               	movwf	___wmul@multiplicand,c
  6956  00221C  C0D8  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6957  002220  C0D9  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6958  002224  EC33  F01B         	call	___wmul	;wreg free
  6959  002228  0E5A               	movlw	low _PrevTemp_DegF
  6960  00222A  2425               	addwf	?___wmul,w,c
  6961  00222C  6EE1               	movwf	fsr1l,c
  6962  00222E  0E01               	movlw	high _PrevTemp_DegF
  6963  002230  2026               	addwfc	?___wmul+1,w,c
  6964  002232  6EE2               	movwf	fsr1h,c
  6965  002234  CFE6 F032          	movff	postinc1,___ftmul@f1
  6966  002238  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  6967  00223C  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  6968  002240  EC90  F014         	call	___ftmul	;wreg free
  6969  002244  C032  F0CF         	movff	?___ftmul,___ftadd@f2
  6970  002248  C033  F0D0         	movff	?___ftmul+1,___ftadd@f2+1
  6971  00224C  C034  F0D1         	movff	?___ftmul+2,___ftadd@f2+2
  6972  002250  EC37  F00D         	call	___ftadd	;wreg free
  6973  002254  C0CC  FFDE         	movff	?___ftadd,postinc2
  6974  002258  C0CD  FFDE         	movff	?___ftadd+1,postinc2
  6975  00225C  C0CE  FFDE         	movff	?___ftadd+2,postinc2
  6976  002260  0100               	movlb	0	; () banked
  6977  002262  4BD8               	infsnz	Temp_Filter@x& (0+255),f,b
  6978  002264  2BD9               	incf	(Temp_Filter@x+1)& (0+255),f,b
  6979  002266  D78F               	goto	l5004
  6980                           
  6981                           ; BSR set to: 0
  6982  002268  D000               	goto	l5014
  6983  00226A                     l5014:
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;Tempeture.c: 43: }
  6987                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  6988  00226A  0E00               	movlw	0
  6989  00226C  0100               	movlb	0	; () banked
  6990  00226E  6FD9               	movwf	(Temp_Filter@x+1)& (0+255),b
  6991  002270  0E00               	movlw	0
  6992  002272  6FD8               	movwf	Temp_Filter@x& (0+255),b
  6993  002274                     l5016:
  6994                           
  6995                           ; BSR set to: 0
  6996  002274  0100               	movlb	0	; () banked
  6997  002276  BFD9               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  6998  002278  D00A               	goto	l5020
  6999  00227A  0100               	movlb	0	; () banked
  7000  00227C  51D9               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7001  00227E  E132               	bnz	l423
  7002  002280  0E0A               	movlw	10
  7003  002282  0100               	movlb	0	; () banked
  7004  002284  5DD8               	subwf	Temp_Filter@x& (0+255),w,b
  7005  002286  B0D8               	btfsc	status,0,c
  7006  002288  0012               	return	
  7007  00228A  D001               	goto	l5020
  7008                           
  7009                           ; BSR set to: 0
  7010  00228C  0012               	return	
  7011  00228E                     l5020:
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;Tempeture.c: 45: {
  7015                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  7016  00228E  C0D8  F025         	movff	Temp_Filter@x,___wmul@multiplier
  7017  002292  C0D9  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7018  002296  0E00               	movlw	0
  7019  002298  6E28               	movwf	___wmul@multiplicand+1,c
  7020  00229A  0E03               	movlw	3
  7021  00229C  6E27               	movwf	___wmul@multiplicand,c
  7022  00229E  EC33  F01B         	call	___wmul	;wreg free
  7023  0022A2  0E78               	movlw	low _Temp_DegF
  7024  0022A4  2425               	addwf	?___wmul,w,c
  7025  0022A6  6ED9               	movwf	fsr2l,c
  7026  0022A8  0E01               	movlw	high _Temp_DegF
  7027  0022AA  2026               	addwfc	?___wmul+1,w,c
  7028  0022AC  6EDA               	movwf	fsr2h,c
  7029  0022AE  C0D8  F025         	movff	Temp_Filter@x,___wmul@multiplier
  7030  0022B2  C0D9  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7031  0022B6  0E00               	movlw	0
  7032  0022B8  6E28               	movwf	___wmul@multiplicand+1,c
  7033  0022BA  0E03               	movlw	3
  7034  0022BC  6E27               	movwf	___wmul@multiplicand,c
  7035  0022BE  EC33  F01B         	call	___wmul	;wreg free
  7036  0022C2  0E5A               	movlw	low _PrevTemp_DegF
  7037  0022C4  2425               	addwf	?___wmul,w,c
  7038  0022C6  6EE1               	movwf	fsr1l,c
  7039  0022C8  0E01               	movlw	high _PrevTemp_DegF
  7040  0022CA  2026               	addwfc	?___wmul+1,w,c
  7041  0022CC  6EE2               	movwf	fsr1h,c
  7042  0022CE  CFDE FFE6          	movff	postinc2,postinc1
  7043  0022D2  CFDE FFE6          	movff	postinc2,postinc1
  7044  0022D6  CFDE FFE6          	movff	postinc2,postinc1
  7045  0022DA  0100               	movlb	0	; () banked
  7046  0022DC  4BD8               	infsnz	Temp_Filter@x& (0+255),f,b
  7047  0022DE  2BD9               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7048  0022E0  D7C9               	goto	l5016
  7049                           
  7050                           ; BSR set to: 0
  7051  0022E2  0012               	return	
  7052  0022E4                     l423:
  7053                           
  7054                           ; BSR set to: 0
  7055  0022E4  0012               	return		;funcret
  7056  0022E6                     __end_of_Temp_Filter:
  7057                           	opt stack 0
  7058                           tblptru	equ	0xFF8
  7059                           tblptrh	equ	0xFF7
  7060                           tblptrl	equ	0xFF6
  7061                           tablat	equ	0xFF5
  7062                           prodh	equ	0xFF4
  7063                           prodl	equ	0xFF3
  7064                           intcon	equ	0xFF2
  7065                           postinc0	equ	0xFEE
  7066                           wreg	equ	0xFE8
  7067                           postinc1	equ	0xFE6
  7068                           postdec1	equ	0xFE5
  7069                           fsr1h	equ	0xFE2
  7070                           fsr1l	equ	0xFE1
  7071                           indf2	equ	0xFDF
  7072                           postinc2	equ	0xFDE
  7073                           postdec2	equ	0xFDD
  7074                           fsr2h	equ	0xFDA
  7075                           fsr2l	equ	0xFD9
  7076                           status	equ	0xFD8
  7077                           
  7078 ;; *************** function ___ftadd *****************
  7079 ;; Defined at:
  7080 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;  f1              3   16[BANK0 ] float 
  7083 ;;  f2              3   19[BANK0 ] float 
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  exp1            1   27[BANK0 ] unsigned char 
  7086 ;;  exp2            1   26[BANK0 ] unsigned char 
  7087 ;;  sign            1   25[BANK0 ] unsigned char 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  3   16[BANK0 ] float 
  7090 ;; Registers used:
  7091 ;;		wreg, status,2, status,0, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7097 ;;      Params:         0       6       0       0       0       0       0
  7098 ;;      Locals:         0       3       0       0       0       0       0
  7099 ;;      Temps:          0       3       0       0       0       0       0
  7100 ;;      Totals:         0      12       0       0       0       0       0
  7101 ;;Total ram usage:       12 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    5
  7104 ;; This function calls:
  7105 ;;		___ftpack
  7106 ;; This function is called by:
  7107 ;;		_Temp_Filter
  7108 ;;		_Temp_Convert
  7109 ;;		_printf
  7110 ;;		___ftsub
  7111 ;;		_log
  7112 ;;		_eval_poly
  7113 ;;		_Battery_Filter
  7114 ;;		_Current_Fault
  7115 ;;		_Current_Filter
  7116 ;;		_Current_Convert
  7117 ;;		_Current_Get
  7118 ;; This function uses a non-reentrant model
  7119 ;;
  7120                           
  7121                           	psect	text23
  7122  001A6E                     __ptext23:
  7123                           	opt stack 0
  7124  001A6E                     ___ftadd:
  7125                           	opt stack 23
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;incstack = 0
  7129  001A6E  C0CE  F0D2         	movff	___ftadd@f1+2,??___ftadd
  7130  001A72  0100               	movlb	0	; () banked
  7131  001A74  6BD3               	clrf	(??___ftadd+1)& (0+255),b
  7132  001A76  6BD4               	clrf	(??___ftadd+2)& (0+255),b
  7133  001A78  0100               	movlb	0	; () banked
  7134  001A7A  35CD               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7135  001A7C  0100               	movlb	0	; () banked
  7136  001A7E  37D2               	rlcf	??___ftadd& (0+255),f,b
  7137  001A80  E301               	bnc	u4831
  7138  001A82  81D3               	bsf	(??___ftadd+1)& (0+255),0,b
  7139  001A84                     u4831:
  7140  001A84  0100               	movlb	0	; () banked
  7141  001A86  51D2               	movf	??___ftadd& (0+255),w,b
  7142  001A88  0100               	movlb	0	; () banked
  7143  001A8A  6FD7               	movwf	___ftadd@exp1& (0+255),b
  7144  001A8C  C0D1  F0D2         	movff	___ftadd@f2+2,??___ftadd
  7145  001A90  0100               	movlb	0	; () banked
  7146  001A92  6BD3               	clrf	(??___ftadd+1)& (0+255),b
  7147  001A94  6BD4               	clrf	(??___ftadd+2)& (0+255),b
  7148  001A96  0100               	movlb	0	; () banked
  7149  001A98  35D0               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7150  001A9A  0100               	movlb	0	; () banked
  7151  001A9C  37D2               	rlcf	??___ftadd& (0+255),f,b
  7152  001A9E  E301               	bnc	u4841
  7153  001AA0  81D3               	bsf	(??___ftadd+1)& (0+255),0,b
  7154  001AA2                     u4841:
  7155  001AA2  0100               	movlb	0	; () banked
  7156  001AA4  51D2               	movf	??___ftadd& (0+255),w,b
  7157  001AA6  0100               	movlb	0	; () banked
  7158  001AA8  6FD6               	movwf	___ftadd@exp2& (0+255),b
  7159                           
  7160                           ; BSR set to: 0
  7161  001AAA  0100               	movlb	0	; () banked
  7162  001AAC  51D7               	movf	___ftadd@exp1& (0+255),w,b
  7163  001AAE  0100               	movlb	0	; () banked
  7164  001AB0  B4D8               	btfsc	status,2,c
  7165  001AB2  D011               	goto	l1101
  7166                           
  7167                           ; BSR set to: 0
  7168  001AB4  0100               	movlb	0	; () banked
  7169  001AB6  51D6               	movf	___ftadd@exp2& (0+255),w,b
  7170  001AB8  0100               	movlb	0	; () banked
  7171  001ABA  5DD7               	subwf	___ftadd@exp1& (0+255),w,b
  7172  001ABC  B0D8               	btfsc	status,0,c
  7173  001ABE  D012               	goto	l4770
  7174                           
  7175                           ; BSR set to: 0
  7176  001AC0  0100               	movlb	0	; () banked
  7177  001AC2  51D7               	movf	___ftadd@exp1& (0+255),w,b
  7178  001AC4  0800               	sublw	0
  7179  001AC6  0100               	movlb	0	; () banked
  7180  001AC8  25D6               	addwf	___ftadd@exp2& (0+255),w,b
  7181  001ACA  0100               	movlb	0	; () banked
  7182  001ACC  6FD2               	movwf	??___ftadd& (0+255),b
  7183  001ACE  0E18               	movlw	24
  7184  001AD0  0100               	movlb	0	; () banked
  7185  001AD2  65D2               	cpfsgt	??___ftadd& (0+255),b
  7186  001AD4  D007               	goto	l4770
  7187  001AD6                     l1101:
  7188                           
  7189                           ; BSR set to: 0
  7190  001AD6  C0CF  F0CC         	movff	___ftadd@f2,?___ftadd
  7191  001ADA  C0D0  F0CD         	movff	___ftadd@f2+1,?___ftadd+1
  7192  001ADE  C0D1  F0CE         	movff	___ftadd@f2+2,?___ftadd+2
  7193  001AE2  0012               	return	
  7194  001AE4                     l4770:
  7195                           
  7196                           ; BSR set to: 0
  7197  001AE4  0100               	movlb	0	; () banked
  7198  001AE6  51D6               	movf	___ftadd@exp2& (0+255),w,b
  7199  001AE8  0100               	movlb	0	; () banked
  7200  001AEA  B4D8               	btfsc	status,2,c
  7201  001AEC  D011               	goto	l1105
  7202                           
  7203                           ; BSR set to: 0
  7204  001AEE  0100               	movlb	0	; () banked
  7205  001AF0  51D7               	movf	___ftadd@exp1& (0+255),w,b
  7206  001AF2  0100               	movlb	0	; () banked
  7207  001AF4  5DD6               	subwf	___ftadd@exp2& (0+255),w,b
  7208  001AF6  B0D8               	btfsc	status,0,c
  7209  001AF8  D012               	goto	l4776
  7210                           
  7211                           ; BSR set to: 0
  7212  001AFA  0100               	movlb	0	; () banked
  7213  001AFC  51D6               	movf	___ftadd@exp2& (0+255),w,b
  7214  001AFE  0800               	sublw	0
  7215  001B00  0100               	movlb	0	; () banked
  7216  001B02  25D7               	addwf	___ftadd@exp1& (0+255),w,b
  7217  001B04  0100               	movlb	0	; () banked
  7218  001B06  6FD2               	movwf	??___ftadd& (0+255),b
  7219  001B08  0E18               	movlw	24
  7220  001B0A  0100               	movlb	0	; () banked
  7221  001B0C  65D2               	cpfsgt	??___ftadd& (0+255),b
  7222  001B0E  D007               	goto	l4776
  7223  001B10                     l1105:
  7224                           
  7225                           ; BSR set to: 0
  7226  001B10  C0CC  F0CC         	movff	___ftadd@f1,?___ftadd
  7227  001B14  C0CD  F0CD         	movff	___ftadd@f1+1,?___ftadd+1
  7228  001B18  C0CE  F0CE         	movff	___ftadd@f1+2,?___ftadd+2
  7229  001B1C  0012               	return	
  7230  001B1E                     l4776:
  7231                           
  7232                           ; BSR set to: 0
  7233  001B1E  0E06               	movlw	6
  7234  001B20  0100               	movlb	0	; () banked
  7235  001B22  6FD5               	movwf	___ftadd@sign& (0+255),b
  7236                           
  7237                           ; BSR set to: 0
  7238  001B24  0100               	movlb	0	; () banked
  7239  001B26  AFCE               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7240  001B28  D003               	goto	l4782
  7241                           
  7242                           ; BSR set to: 0
  7243  001B2A  0100               	movlb	0	; () banked
  7244  001B2C  8FD5               	bsf	___ftadd@sign& (0+255),7,b
  7245  001B2E  D000               	goto	l4782
  7246  001B30                     l4782:
  7247                           
  7248                           ; BSR set to: 0
  7249  001B30  0100               	movlb	0	; () banked
  7250  001B32  AFD1               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7251  001B34  D002               	goto	l1107
  7252                           
  7253                           ; BSR set to: 0
  7254  001B36  0100               	movlb	0	; () banked
  7255  001B38  8DD5               	bsf	___ftadd@sign& (0+255),6,b
  7256  001B3A                     l1107:
  7257                           
  7258                           ; BSR set to: 0
  7259  001B3A  0100               	movlb	0	; () banked
  7260  001B3C  8FCD               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7261                           
  7262                           ; BSR set to: 0
  7263  001B3E  0EFF               	movlw	255
  7264  001B40  0100               	movlb	0	; () banked
  7265  001B42  17CC               	andwf	___ftadd@f1& (0+255),f,b
  7266  001B44  0EFF               	movlw	255
  7267  001B46  0100               	movlb	0	; () banked
  7268  001B48  17CD               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7269  001B4A  0E00               	movlw	0
  7270  001B4C  0100               	movlb	0	; () banked
  7271  001B4E  17CE               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7272  001B50  0100               	movlb	0	; () banked
  7273  001B52  8FD0               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7274                           
  7275                           ; BSR set to: 0
  7276  001B54  0EFF               	movlw	255
  7277  001B56  0100               	movlb	0	; () banked
  7278  001B58  17CF               	andwf	___ftadd@f2& (0+255),f,b
  7279  001B5A  0EFF               	movlw	255
  7280  001B5C  0100               	movlb	0	; () banked
  7281  001B5E  17D0               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7282  001B60  0E00               	movlw	0
  7283  001B62  0100               	movlb	0	; () banked
  7284  001B64  17D1               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7285                           
  7286                           ; BSR set to: 0
  7287  001B66  0100               	movlb	0	; () banked
  7288  001B68  51D6               	movf	___ftadd@exp2& (0+255),w,b
  7289  001B6A  0100               	movlb	0	; () banked
  7290  001B6C  5DD7               	subwf	___ftadd@exp1& (0+255),w,b
  7291  001B6E  B0D8               	btfsc	status,0,c
  7292  001B70  D028               	goto	l4802
  7293  001B72                     l4792:
  7294                           
  7295                           ; BSR set to: 0
  7296  001B72  0100               	movlb	0	; () banked
  7297  001B74  90D8               	bcf	status,0,c
  7298  001B76  37CF               	rlcf	___ftadd@f2& (0+255),f,b
  7299  001B78  37D0               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7300  001B7A  37D1               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7301  001B7C  0100               	movlb	0	; () banked
  7302  001B7E  07D6               	decf	___ftadd@exp2& (0+255),f,b
  7303                           
  7304                           ; BSR set to: 0
  7305  001B80  0100               	movlb	0	; () banked
  7306  001B82  51D7               	movf	___ftadd@exp1& (0+255),w,b
  7307  001B84  0100               	movlb	0	; () banked
  7308  001B86  19D6               	xorwf	___ftadd@exp2& (0+255),w,b
  7309  001B88  B4D8               	btfsc	status,2,c
  7310  001B8A  D013               	goto	l4800
  7311                           
  7312                           ; BSR set to: 0
  7313  001B8C  0100               	movlb	0	; () banked
  7314  001B8E  07D5               	decf	___ftadd@sign& (0+255),f,b
  7315  001B90  C0D5  F0D2         	movff	___ftadd@sign,??___ftadd
  7316  001B94  0E07               	movlw	7
  7317  001B96  0100               	movlb	0	; () banked
  7318  001B98  17D2               	andwf	??___ftadd& (0+255),f,b
  7319  001B9A  B4D8               	btfsc	status,2,c
  7320  001B9C  D00A               	goto	l4800
  7321  001B9E  D7E9               	goto	l4792
  7322                           
  7323                           ; BSR set to: 0
  7324                           
  7325                           ; BSR set to: 0
  7326  001BA0  D008               	goto	l4800
  7327  001BA2                     l4798:
  7328                           
  7329                           ; BSR set to: 0
  7330  001BA2  0100               	movlb	0	; () banked
  7331  001BA4  90D8               	bcf	status,0,c
  7332  001BA6  33CE               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7333  001BA8  33CD               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7334  001BAA  33CC               	rrcf	___ftadd@f1& (0+255),f,b
  7335  001BAC  0100               	movlb	0	; () banked
  7336  001BAE  2BD7               	incf	___ftadd@exp1& (0+255),f,b
  7337  001BB0  D000               	goto	l4800
  7338  001BB2                     l4800:
  7339                           
  7340                           ; BSR set to: 0
  7341  001BB2  0100               	movlb	0	; () banked
  7342  001BB4  51D6               	movf	___ftadd@exp2& (0+255),w,b
  7343  001BB6  0100               	movlb	0	; () banked
  7344  001BB8  19D7               	xorwf	___ftadd@exp1& (0+255),w,b
  7345  001BBA  B4D8               	btfsc	status,2,c
  7346  001BBC  D030               	goto	l1116
  7347  001BBE  D7F1               	goto	l4798
  7348                           
  7349                           ; BSR set to: 0
  7350  001BC0  D02E               	goto	l1116
  7351  001BC2                     l4802:
  7352                           
  7353                           ; BSR set to: 0
  7354  001BC2  0100               	movlb	0	; () banked
  7355  001BC4  51D7               	movf	___ftadd@exp1& (0+255),w,b
  7356  001BC6  0100               	movlb	0	; () banked
  7357  001BC8  5DD6               	subwf	___ftadd@exp2& (0+255),w,b
  7358  001BCA  B0D8               	btfsc	status,0,c
  7359  001BCC  D028               	goto	l1116
  7360  001BCE                     l4804:
  7361                           
  7362                           ; BSR set to: 0
  7363  001BCE  0100               	movlb	0	; () banked
  7364  001BD0  90D8               	bcf	status,0,c
  7365  001BD2  37CC               	rlcf	___ftadd@f1& (0+255),f,b
  7366  001BD4  37CD               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7367  001BD6  37CE               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7368  001BD8  0100               	movlb	0	; () banked
  7369  001BDA  07D7               	decf	___ftadd@exp1& (0+255),f,b
  7370                           
  7371                           ; BSR set to: 0
  7372  001BDC  0100               	movlb	0	; () banked
  7373  001BDE  51D7               	movf	___ftadd@exp1& (0+255),w,b
  7374  001BE0  0100               	movlb	0	; () banked
  7375  001BE2  19D6               	xorwf	___ftadd@exp2& (0+255),w,b
  7376  001BE4  B4D8               	btfsc	status,2,c
  7377  001BE6  D013               	goto	l4812
  7378                           
  7379                           ; BSR set to: 0
  7380  001BE8  0100               	movlb	0	; () banked
  7381  001BEA  07D5               	decf	___ftadd@sign& (0+255),f,b
  7382  001BEC  C0D5  F0D2         	movff	___ftadd@sign,??___ftadd
  7383  001BF0  0E07               	movlw	7
  7384  001BF2  0100               	movlb	0	; () banked
  7385  001BF4  17D2               	andwf	??___ftadd& (0+255),f,b
  7386  001BF6  B4D8               	btfsc	status,2,c
  7387  001BF8  D00A               	goto	l4812
  7388  001BFA  D7E9               	goto	l4804
  7389                           
  7390                           ; BSR set to: 0
  7391                           
  7392                           ; BSR set to: 0
  7393  001BFC  D008               	goto	l4812
  7394  001BFE                     l4810:
  7395                           
  7396                           ; BSR set to: 0
  7397  001BFE  0100               	movlb	0	; () banked
  7398  001C00  90D8               	bcf	status,0,c
  7399  001C02  33D1               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7400  001C04  33D0               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7401  001C06  33CF               	rrcf	___ftadd@f2& (0+255),f,b
  7402  001C08  0100               	movlb	0	; () banked
  7403  001C0A  2BD6               	incf	___ftadd@exp2& (0+255),f,b
  7404  001C0C  D000               	goto	l4812
  7405  001C0E                     l4812:
  7406                           
  7407                           ; BSR set to: 0
  7408  001C0E  0100               	movlb	0	; () banked
  7409  001C10  51D6               	movf	___ftadd@exp2& (0+255),w,b
  7410  001C12  0100               	movlb	0	; () banked
  7411  001C14  19D7               	xorwf	___ftadd@exp1& (0+255),w,b
  7412  001C16  B4D8               	btfsc	status,2,c
  7413  001C18  D002               	goto	l1116
  7414  001C1A  D7F1               	goto	l4810
  7415                           
  7416                           ; BSR set to: 0
  7417  001C1C  D000               	goto	l1116
  7418  001C1E                     l1116:
  7419                           
  7420                           ; BSR set to: 0
  7421  001C1E  0100               	movlb	0	; () banked
  7422  001C20  AFD5               	btfss	___ftadd@sign& (0+255),7,b
  7423  001C22  D012               	goto	l1125
  7424                           
  7425                           ; BSR set to: 0
  7426  001C24  0EFF               	movlw	255
  7427  001C26  0100               	movlb	0	; () banked
  7428  001C28  1BCC               	xorwf	___ftadd@f1& (0+255),f,b
  7429  001C2A  0EFF               	movlw	255
  7430  001C2C  0100               	movlb	0	; () banked
  7431  001C2E  1BCD               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7432  001C30  0EFF               	movlw	255
  7433  001C32  0100               	movlb	0	; () banked
  7434  001C34  1BCE               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7435  001C36  0E01               	movlw	1
  7436  001C38  0100               	movlb	0	; () banked
  7437  001C3A  27CC               	addwf	___ftadd@f1& (0+255),f,b
  7438  001C3C  0E00               	movlw	0
  7439  001C3E  0100               	movlb	0	; () banked
  7440  001C40  23CD               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7441  001C42  0E00               	movlw	0
  7442  001C44  0100               	movlb	0	; () banked
  7443  001C46  23CE               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7444  001C48                     l1125:
  7445                           
  7446                           ; BSR set to: 0
  7447  001C48  0100               	movlb	0	; () banked
  7448  001C4A  ADD5               	btfss	___ftadd@sign& (0+255),6,b
  7449  001C4C  D013               	goto	l4818
  7450                           
  7451                           ; BSR set to: 0
  7452  001C4E  0EFF               	movlw	255
  7453  001C50  0100               	movlb	0	; () banked
  7454  001C52  1BCF               	xorwf	___ftadd@f2& (0+255),f,b
  7455  001C54  0EFF               	movlw	255
  7456  001C56  0100               	movlb	0	; () banked
  7457  001C58  1BD0               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7458  001C5A  0EFF               	movlw	255
  7459  001C5C  0100               	movlb	0	; () banked
  7460  001C5E  1BD1               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7461  001C60  0E01               	movlw	1
  7462  001C62  0100               	movlb	0	; () banked
  7463  001C64  27CF               	addwf	___ftadd@f2& (0+255),f,b
  7464  001C66  0E00               	movlw	0
  7465  001C68  0100               	movlb	0	; () banked
  7466  001C6A  23D0               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7467  001C6C  0E00               	movlw	0
  7468  001C6E  0100               	movlb	0	; () banked
  7469  001C70  23D1               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7470  001C72  D000               	goto	l4818
  7471  001C74                     l4818:
  7472                           
  7473                           ; BSR set to: 0
  7474  001C74  0E00               	movlw	0
  7475  001C76  0100               	movlb	0	; () banked
  7476  001C78  6FD5               	movwf	___ftadd@sign& (0+255),b
  7477                           
  7478                           ; BSR set to: 0
  7479  001C7A  0100               	movlb	0	; () banked
  7480  001C7C  51CC               	movf	___ftadd@f1& (0+255),w,b
  7481  001C7E  0100               	movlb	0	; () banked
  7482  001C80  27CF               	addwf	___ftadd@f2& (0+255),f,b
  7483  001C82  0100               	movlb	0	; () banked
  7484  001C84  51CD               	movf	(___ftadd@f1+1)& (0+255),w,b
  7485  001C86  0100               	movlb	0	; () banked
  7486  001C88  23D0               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7487  001C8A  0100               	movlb	0	; () banked
  7488  001C8C  51CE               	movf	(___ftadd@f1+2)& (0+255),w,b
  7489  001C8E  0100               	movlb	0	; () banked
  7490  001C90  23D1               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7491                           
  7492                           ; BSR set to: 0
  7493  001C92  0100               	movlb	0	; () banked
  7494  001C94  AFD1               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7495  001C96  D016               	goto	l4828
  7496                           
  7497                           ; BSR set to: 0
  7498  001C98  0EFF               	movlw	255
  7499  001C9A  0100               	movlb	0	; () banked
  7500  001C9C  1BCF               	xorwf	___ftadd@f2& (0+255),f,b
  7501  001C9E  0EFF               	movlw	255
  7502  001CA0  0100               	movlb	0	; () banked
  7503  001CA2  1BD0               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7504  001CA4  0EFF               	movlw	255
  7505  001CA6  0100               	movlb	0	; () banked
  7506  001CA8  1BD1               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7507  001CAA  0E01               	movlw	1
  7508  001CAC  0100               	movlb	0	; () banked
  7509  001CAE  27CF               	addwf	___ftadd@f2& (0+255),f,b
  7510  001CB0  0E00               	movlw	0
  7511  001CB2  0100               	movlb	0	; () banked
  7512  001CB4  23D0               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7513  001CB6  0E00               	movlw	0
  7514  001CB8  0100               	movlb	0	; () banked
  7515  001CBA  23D1               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7516                           
  7517                           ; BSR set to: 0
  7518  001CBC  0E01               	movlw	1
  7519  001CBE  0100               	movlb	0	; () banked
  7520  001CC0  6FD5               	movwf	___ftadd@sign& (0+255),b
  7521  001CC2  D000               	goto	l4828
  7522  001CC4                     l4828:
  7523                           
  7524                           ; BSR set to: 0
  7525  001CC4  C0CF  F017         	movff	___ftadd@f2,___ftpack@arg
  7526  001CC8  C0D0  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  7527  001CCC  C0D1  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  7528  001CD0  C0D7  F01A         	movff	___ftadd@exp1,___ftpack@exp
  7529  001CD4  C0D5  F01B         	movff	___ftadd@sign,___ftpack@sign
  7530  001CD8  EC79  F016         	call	___ftpack	;wreg free
  7531  001CDC  C017  F0CC         	movff	?___ftpack,?___ftadd
  7532  001CE0  C018  F0CD         	movff	?___ftpack+1,?___ftadd+1
  7533  001CE4  C019  F0CE         	movff	?___ftpack+2,?___ftadd+2
  7534  001CE8  0012               	return	
  7535  001CEA  0012               	return		;funcret
  7536  001CEC                     __end_of___ftadd:
  7537                           	opt stack 0
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           postinc0	equ	0xFEE
  7546                           wreg	equ	0xFE8
  7547                           postinc1	equ	0xFE6
  7548                           postdec1	equ	0xFE5
  7549                           fsr1h	equ	0xFE2
  7550                           fsr1l	equ	0xFE1
  7551                           indf2	equ	0xFDF
  7552                           postinc2	equ	0xFDE
  7553                           postdec2	equ	0xFDD
  7554                           fsr2h	equ	0xFDA
  7555                           fsr2l	equ	0xFD9
  7556                           status	equ	0xFD8
  7557                           
  7558 ;; *************** function _SYSTEM_Initialize *****************
  7559 ;; Defined at:
  7560 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;		None
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;		None
  7565 ;; Return value:  Size  Location     Type
  7566 ;;		None               void
  7567 ;; Registers used:
  7568 ;;		wreg, status,2, cstack
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7574 ;;      Params:         0       0       0       0       0       0       0
  7575 ;;      Locals:         0       0       0       0       0       0       0
  7576 ;;      Temps:          0       0       0       0       0       0       0
  7577 ;;      Totals:         0       0       0       0       0       0       0
  7578 ;;Total ram usage:        0 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    6
  7581 ;; This function calls:
  7582 ;;		_ADC_Initialize
  7583 ;;		_EUSART1_Initialize
  7584 ;;		_INTERRUPT_Initialize
  7585 ;;		_OSCILLATOR_Initialize
  7586 ;;		_PIN_MANAGER_Initialize
  7587 ;;		_TMR1_Initialize
  7588 ;; This function is called by:
  7589 ;;		_main
  7590 ;; This function uses a non-reentrant model
  7591 ;;
  7592                           
  7593                           	psect	text24
  7594  0036F6                     __ptext24:
  7595                           	opt stack 0
  7596  0036F6                     _SYSTEM_Initialize:
  7597                           	opt stack 24
  7598                           
  7599                           ;mcc.c: 114: OSCILLATOR_Initialize();
  7600                           
  7601                           ;incstack = 0
  7602  0036F6  ECC4  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  7603                           
  7604                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7605  0036FA  ECDE  F019         	call	_PIN_MANAGER_Initialize	;wreg free
  7606                           
  7607                           ;mcc.c: 116: INTERRUPT_Initialize();
  7608  0036FE  ECCB  F01B         	call	_INTERRUPT_Initialize	;wreg free
  7609                           
  7610                           ;mcc.c: 117: ADC_Initialize();
  7611  003702  EC95  F01B         	call	_ADC_Initialize	;wreg free
  7612                           
  7613                           ;mcc.c: 118: EUSART1_Initialize();
  7614  003706  EC4A  F01A         	call	_EUSART1_Initialize	;wreg free
  7615                           
  7616                           ;mcc.c: 119: TMR1_Initialize();
  7617  00370A  EC6A  F01B         	call	_TMR1_Initialize	;wreg free
  7618  00370E  0012               	return		;funcret
  7619  003710                     __end_of_SYSTEM_Initialize:
  7620                           	opt stack 0
  7621                           tblptru	equ	0xFF8
  7622                           tblptrh	equ	0xFF7
  7623                           tblptrl	equ	0xFF6
  7624                           tablat	equ	0xFF5
  7625                           prodh	equ	0xFF4
  7626                           prodl	equ	0xFF3
  7627                           intcon	equ	0xFF2
  7628                           postinc0	equ	0xFEE
  7629                           wreg	equ	0xFE8
  7630                           postinc1	equ	0xFE6
  7631                           postdec1	equ	0xFE5
  7632                           fsr1h	equ	0xFE2
  7633                           fsr1l	equ	0xFE1
  7634                           indf2	equ	0xFDF
  7635                           postinc2	equ	0xFDE
  7636                           postdec2	equ	0xFDD
  7637                           fsr2h	equ	0xFDA
  7638                           fsr2l	equ	0xFD9
  7639                           status	equ	0xFD8
  7640                           
  7641 ;; *************** function _TMR1_Initialize *****************
  7642 ;; Defined at:
  7643 ;;		line 23 in file "mcc_generated_files/tmr1.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;		None
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;		None               void
  7650 ;; Registers used:
  7651 ;;		wreg, status,2, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7657 ;;      Params:         0       0       0       0       0       0       0
  7658 ;;      Locals:         0       0       0       0       0       0       0
  7659 ;;      Temps:          0       0       0       0       0       0       0
  7660 ;;      Totals:         0       0       0       0       0       0       0
  7661 ;;Total ram usage:        0 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    5
  7664 ;; This function calls:
  7665 ;;		_TMR1_StartTimer
  7666 ;; This function is called by:
  7667 ;;		_SYSTEM_Initialize
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           	psect	text25
  7672  0036D4                     __ptext25:
  7673                           	opt stack 0
  7674  0036D4                     _TMR1_Initialize:
  7675                           	opt stack 24
  7676                           
  7677                           ;tmr1.c: 28: T1CON = 0x34;
  7678                           
  7679                           ;incstack = 0
  7680  0036D4  0E34               	movlw	52
  7681  0036D6  6ECD               	movwf	4045,c	;volatile
  7682                           
  7683                           ;tmr1.c: 31: T1GCON = 0x00;
  7684  0036D8  0E00               	movlw	0
  7685  0036DA  6ECC               	movwf	4044,c	;volatile
  7686                           
  7687                           ;tmr1.c: 34: TMR1H = 0x0B;
  7688  0036DC  0E0B               	movlw	11
  7689  0036DE  6ECF               	movwf	4047,c	;volatile
  7690                           
  7691                           ;tmr1.c: 37: TMR1L = 0xDC;
  7692  0036E0  0EDC               	movlw	220
  7693  0036E2  6ECE               	movwf	4046,c	;volatile
  7694                           
  7695                           ;tmr1.c: 40: timer1ReloadVal=TMR1;
  7696  0036E4  CFCE F047          	movff	4046,_timer1ReloadVal	;volatile
  7697  0036E8  CFCF F048          	movff	4047,_timer1ReloadVal+1	;volatile
  7698                           
  7699                           ;tmr1.c: 43: PIR1bits.TMR1IF = 0;
  7700  0036EC  909E               	bcf	3998,0,c	;volatile
  7701                           
  7702                           ;tmr1.c: 46: PIE1bits.TMR1IE = 1;
  7703  0036EE  809D               	bsf	3997,0,c	;volatile
  7704                           
  7705                           ;tmr1.c: 49: TMR1_StartTimer();
  7706  0036F0  ECD6  F01B         	call	_TMR1_StartTimer	;wreg free
  7707  0036F4  0012               	return		;funcret
  7708  0036F6                     __end_of_TMR1_Initialize:
  7709                           	opt stack 0
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           postinc0	equ	0xFEE
  7718                           wreg	equ	0xFE8
  7719                           postinc1	equ	0xFE6
  7720                           postdec1	equ	0xFE5
  7721                           fsr1h	equ	0xFE2
  7722                           fsr1l	equ	0xFE1
  7723                           indf2	equ	0xFDF
  7724                           postinc2	equ	0xFDE
  7725                           postdec2	equ	0xFDD
  7726                           fsr2h	equ	0xFDA
  7727                           fsr2l	equ	0xFD9
  7728                           status	equ	0xFD8
  7729                           
  7730 ;; *************** function _TMR1_StartTimer *****************
  7731 ;; Defined at:
  7732 ;;		line 52 in file "mcc_generated_files/tmr1.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;		None
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;		None
  7737 ;; Return value:  Size  Location     Type
  7738 ;;		None               void
  7739 ;; Registers used:
  7740 ;;		None
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7746 ;;      Params:         0       0       0       0       0       0       0
  7747 ;;      Locals:         0       0       0       0       0       0       0
  7748 ;;      Temps:          0       0       0       0       0       0       0
  7749 ;;      Totals:         0       0       0       0       0       0       0
  7750 ;;Total ram usage:        0 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; Hardware stack levels required when called:    4
  7753 ;; This function calls:
  7754 ;;		Nothing
  7755 ;; This function is called by:
  7756 ;;		_TMR1_Initialize
  7757 ;; This function uses a non-reentrant model
  7758 ;;
  7759                           
  7760                           	psect	text26
  7761  0037AC                     __ptext26:
  7762                           	opt stack 0
  7763  0037AC                     _TMR1_StartTimer:
  7764                           	opt stack 24
  7765                           
  7766                           ;tmr1.c: 55: T1CONbits.TMR1ON = 1;
  7767                           
  7768                           ;incstack = 0
  7769  0037AC  80CD               	bsf	4045,0,c	;volatile
  7770  0037AE  0012               	return		;funcret
  7771  0037B0                     __end_of_TMR1_StartTimer:
  7772                           	opt stack 0
  7773                           tblptru	equ	0xFF8
  7774                           tblptrh	equ	0xFF7
  7775                           tblptrl	equ	0xFF6
  7776                           tablat	equ	0xFF5
  7777                           prodh	equ	0xFF4
  7778                           prodl	equ	0xFF3
  7779                           intcon	equ	0xFF2
  7780                           postinc0	equ	0xFEE
  7781                           wreg	equ	0xFE8
  7782                           postinc1	equ	0xFE6
  7783                           postdec1	equ	0xFE5
  7784                           fsr1h	equ	0xFE2
  7785                           fsr1l	equ	0xFE1
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           fsr2h	equ	0xFDA
  7790                           fsr2l	equ	0xFD9
  7791                           status	equ	0xFD8
  7792                           
  7793 ;; *************** function _PIN_MANAGER_Initialize *****************
  7794 ;; Defined at:
  7795 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;		None
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;		None               void
  7802 ;; Registers used:
  7803 ;;		wreg, status,2
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7809 ;;      Params:         0       0       0       0       0       0       0
  7810 ;;      Locals:         0       0       0       0       0       0       0
  7811 ;;      Temps:          0       0       0       0       0       0       0
  7812 ;;      Totals:         0       0       0       0       0       0       0
  7813 ;;Total ram usage:        0 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    4
  7816 ;; This function calls:
  7817 ;;		Nothing
  7818 ;; This function is called by:
  7819 ;;		_SYSTEM_Initialize
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           	psect	text27
  7824  0033BC                     __ptext27:
  7825                           	opt stack 0
  7826  0033BC                     _PIN_MANAGER_Initialize:
  7827                           	opt stack 25
  7828                           
  7829                           ;pin_manager.c: 52: LATA = 0x00;
  7830                           
  7831                           ;incstack = 0
  7832  0033BC  0E00               	movlw	0
  7833  0033BE  6E89               	movwf	3977,c	;volatile
  7834                           
  7835                           ;pin_manager.c: 53: TRISA = 0x2F;
  7836  0033C0  0E2F               	movlw	47
  7837  0033C2  6E92               	movwf	3986,c	;volatile
  7838                           
  7839                           ;pin_manager.c: 54: ANSELA = 0x2F;
  7840  0033C4  0E2F               	movlw	47
  7841  0033C6  010F               	movlb	15	; () banked
  7842  0033C8  6F38               	movwf	56,b	;volatile
  7843                           
  7844                           ;pin_manager.c: 56: LATB = 0x00;
  7845  0033CA  0E00               	movlw	0
  7846  0033CC  6E8A               	movwf	3978,c	;volatile
  7847                           
  7848                           ;pin_manager.c: 57: TRISB = 0xF8;
  7849  0033CE  0EF8               	movlw	248
  7850  0033D0  6E93               	movwf	3987,c	;volatile
  7851                           
  7852                           ;pin_manager.c: 58: ANSELB = 0x38;
  7853  0033D2  0E38               	movlw	56
  7854  0033D4  010F               	movlb	15	; () banked
  7855  0033D6  6F39               	movwf	57,b	;volatile
  7856                           
  7857                           ;pin_manager.c: 59: WPUB = 0x00;
  7858  0033D8  0E00               	movlw	0
  7859  0033DA  6E61               	movwf	3937,c	;volatile
  7860                           
  7861                           ;pin_manager.c: 61: LATC = 0x00;
  7862  0033DC  0E00               	movlw	0
  7863  0033DE  6E8B               	movwf	3979,c	;volatile
  7864                           
  7865                           ;pin_manager.c: 62: TRISC = 0xD6;
  7866  0033E0  0ED6               	movlw	214
  7867  0033E2  6E94               	movwf	3988,c	;volatile
  7868                           
  7869                           ;pin_manager.c: 63: ANSELC = 0x14;
  7870  0033E4  0E14               	movlw	20
  7871  0033E6  010F               	movlb	15	; () banked
  7872  0033E8  6F3A               	movwf	58,b	;volatile
  7873                           
  7874                           ;pin_manager.c: 65: LATD = 0x00;
  7875  0033EA  0E00               	movlw	0
  7876  0033EC  6E8C               	movwf	3980,c	;volatile
  7877                           
  7878                           ;pin_manager.c: 66: TRISD = 0x03;
  7879  0033EE  0E03               	movlw	3
  7880  0033F0  6E95               	movwf	3989,c	;volatile
  7881                           
  7882                           ;pin_manager.c: 67: ANSELD = 0x03;
  7883  0033F2  0E03               	movlw	3
  7884  0033F4  010F               	movlb	15	; () banked
  7885  0033F6  6F3B               	movwf	59,b	;volatile
  7886                           
  7887                           ;pin_manager.c: 69: LATE = 0x00;
  7888  0033F8  0E00               	movlw	0
  7889  0033FA  6E8D               	movwf	3981,c	;volatile
  7890                           
  7891                           ;pin_manager.c: 70: TRISE = 0x07;
  7892  0033FC  0E07               	movlw	7
  7893  0033FE  6E96               	movwf	3990,c	;volatile
  7894                           
  7895                           ;pin_manager.c: 71: ANSELE = 0x07;
  7896  003400  0E07               	movlw	7
  7897  003402  010F               	movlb	15	; () banked
  7898  003404  6F3C               	movwf	60,b	;volatile
  7899                           
  7900                           ; BSR set to: 15
  7901                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  7902  003406  8EF1               	bsf	intcon2,7,c	;volatile
  7903                           
  7904                           ; BSR set to: 15
  7905  003408  0012               	return		;funcret
  7906  00340A                     __end_of_PIN_MANAGER_Initialize:
  7907                           	opt stack 0
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon	equ	0xFF2
  7915                           intcon2	equ	0xFF1
  7916                           postinc0	equ	0xFEE
  7917                           wreg	equ	0xFE8
  7918                           postinc1	equ	0xFE6
  7919                           postdec1	equ	0xFE5
  7920                           fsr1h	equ	0xFE2
  7921                           fsr1l	equ	0xFE1
  7922                           indf2	equ	0xFDF
  7923                           postinc2	equ	0xFDE
  7924                           postdec2	equ	0xFDD
  7925                           fsr2h	equ	0xFDA
  7926                           fsr2l	equ	0xFD9
  7927                           status	equ	0xFD8
  7928                           
  7929 ;; *************** function _OSCILLATOR_Initialize *****************
  7930 ;; Defined at:
  7931 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;		None
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;		None
  7936 ;; Return value:  Size  Location     Type
  7937 ;;		None               void
  7938 ;; Registers used:
  7939 ;;		wreg, status,2
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7945 ;;      Params:         0       0       0       0       0       0       0
  7946 ;;      Locals:         0       0       0       0       0       0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0
  7948 ;;      Totals:         0       0       0       0       0       0       0
  7949 ;;Total ram usage:        0 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    4
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_SYSTEM_Initialize
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text28
  7960  003788                     __ptext28:
  7961                           	opt stack 0
  7962  003788                     _OSCILLATOR_Initialize:
  7963                           	opt stack 25
  7964                           
  7965                           ;mcc.c: 125: OSCCON = 0x62;
  7966                           
  7967                           ; BSR set to: 15
  7968                           ;incstack = 0
  7969  003788  0E62               	movlw	98
  7970  00378A  6ED3               	movwf	4051,c	;volatile
  7971                           
  7972                           ;mcc.c: 127: OSCCON2 = 0x04;
  7973  00378C  0E04               	movlw	4
  7974  00378E  6ED2               	movwf	4050,c	;volatile
  7975                           
  7976                           ;mcc.c: 129: OSCTUNE = 0x00;
  7977  003790  0E00               	movlw	0
  7978  003792  6E9B               	movwf	3995,c	;volatile
  7979  003794  0012               	return		;funcret
  7980  003796                     __end_of_OSCILLATOR_Initialize:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           intcon2	equ	0xFF1
  7990                           postinc0	equ	0xFEE
  7991                           wreg	equ	0xFE8
  7992                           postinc1	equ	0xFE6
  7993                           postdec1	equ	0xFE5
  7994                           fsr1h	equ	0xFE2
  7995                           fsr1l	equ	0xFE1
  7996                           indf2	equ	0xFDF
  7997                           postinc2	equ	0xFDE
  7998                           postdec2	equ	0xFDD
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003 ;; *************** function _INTERRUPT_Initialize *****************
  8004 ;; Defined at:
  8005 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;		None
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;		None
  8010 ;; Return value:  Size  Location     Type
  8011 ;;		None               void
  8012 ;; Registers used:
  8013 ;;		None
  8014 ;; Tracked objects:
  8015 ;;		On entry : 0/0
  8016 ;;		On exit  : 0/0
  8017 ;;		Unchanged: 0/0
  8018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8019 ;;      Params:         0       0       0       0       0       0       0
  8020 ;;      Locals:         0       0       0       0       0       0       0
  8021 ;;      Temps:          0       0       0       0       0       0       0
  8022 ;;      Totals:         0       0       0       0       0       0       0
  8023 ;;Total ram usage:        0 bytes
  8024 ;; Hardware stack levels used:    1
  8025 ;; Hardware stack levels required when called:    4
  8026 ;; This function calls:
  8027 ;;		Nothing
  8028 ;; This function is called by:
  8029 ;;		_SYSTEM_Initialize
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           	psect	text29
  8034  003796                     __ptext29:
  8035                           	opt stack 0
  8036  003796                     _INTERRUPT_Initialize:
  8037                           	opt stack 25
  8038                           
  8039                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  8040                           
  8041                           ;incstack = 0
  8042  003796  9ED0               	bcf	4048,7,c	;volatile
  8043                           
  8044                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  8045  003798  9A9F               	bcf	3999,5,c	;volatile
  8046                           
  8047                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  8048  00379A  9C9F               	bcf	3999,6,c	;volatile
  8049                           
  8050                           ;interrupt_manager.c: 64: IPR1bits.TX1IP = 0;
  8051  00379C  989F               	bcf	3999,4,c	;volatile
  8052                           
  8053                           ;interrupt_manager.c: 66: IPR1bits.TMR1IP = 0;
  8054  00379E  909F               	bcf	3999,0,c	;volatile
  8055  0037A0  0012               	return		;funcret
  8056  0037A2                     __end_of_INTERRUPT_Initialize:
  8057                           	opt stack 0
  8058                           tblptru	equ	0xFF8
  8059                           tblptrh	equ	0xFF7
  8060                           tblptrl	equ	0xFF6
  8061                           tablat	equ	0xFF5
  8062                           prodh	equ	0xFF4
  8063                           prodl	equ	0xFF3
  8064                           intcon	equ	0xFF2
  8065                           intcon2	equ	0xFF1
  8066                           postinc0	equ	0xFEE
  8067                           wreg	equ	0xFE8
  8068                           postinc1	equ	0xFE6
  8069                           postdec1	equ	0xFE5
  8070                           fsr1h	equ	0xFE2
  8071                           fsr1l	equ	0xFE1
  8072                           indf2	equ	0xFDF
  8073                           postinc2	equ	0xFDE
  8074                           postdec2	equ	0xFDD
  8075                           fsr2h	equ	0xFDA
  8076                           fsr2l	equ	0xFD9
  8077                           status	equ	0xFD8
  8078                           
  8079 ;; *************** function _EUSART1_Initialize *****************
  8080 ;; Defined at:
  8081 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;		None
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;		None
  8086 ;; Return value:  Size  Location     Type
  8087 ;;		None               void
  8088 ;; Registers used:
  8089 ;;		wreg, status,2
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8095 ;;      Params:         0       0       0       0       0       0       0
  8096 ;;      Locals:         0       0       0       0       0       0       0
  8097 ;;      Temps:          0       0       0       0       0       0       0
  8098 ;;      Totals:         0       0       0       0       0       0       0
  8099 ;;Total ram usage:        0 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    4
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_SYSTEM_Initialize
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text30
  8110  003494                     __ptext30:
  8111                           	opt stack 0
  8112  003494                     _EUSART1_Initialize:
  8113                           	opt stack 25
  8114                           
  8115                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  8116                           
  8117                           ;incstack = 0
  8118  003494  9A9D               	bcf	3997,5,c	;volatile
  8119                           
  8120                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  8121  003496  989D               	bcf	3997,4,c	;volatile
  8122                           
  8123                           ;eusart1.c: 85: BAUD1CON = 0x48;
  8124  003498  0E48               	movlw	72
  8125  00349A  6EB8               	movwf	4024,c	;volatile
  8126                           
  8127                           ;eusart1.c: 88: RC1STA = 0x98;
  8128  00349C  0E98               	movlw	152
  8129  00349E  6EAB               	movwf	4011,c	;volatile
  8130                           
  8131                           ;eusart1.c: 91: TX1STA = 0x26;
  8132  0034A0  0E26               	movlw	38
  8133  0034A2  6EAC               	movwf	4012,c	;volatile
  8134                           
  8135                           ;eusart1.c: 94: SPBRG1 = 0x67;
  8136  0034A4  0E67               	movlw	103
  8137  0034A6  6EAF               	movwf	4015,c	;volatile
  8138                           
  8139                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  8140  0034A8  0E00               	movlw	0
  8141  0034AA  6EB0               	movwf	4016,c	;volatile
  8142                           
  8143                           ;eusart1.c: 100: TXREG1 = 0x00;
  8144  0034AC  0E00               	movlw	0
  8145  0034AE  6EAD               	movwf	4013,c	;volatile
  8146                           
  8147                           ;eusart1.c: 103: RCREG1 = 0x00;
  8148  0034B0  0E00               	movlw	0
  8149  0034B2  6EAE               	movwf	4014,c	;volatile
  8150                           
  8151                           ;eusart1.c: 107: eusart1TxHead = 0;
  8152  0034B4  0E00               	movlw	0
  8153  0034B6  6E45               	movwf	_eusart1TxHead,c
  8154                           
  8155                           ;eusart1.c: 108: eusart1TxTail = 0;
  8156  0034B8  0E00               	movlw	0
  8157  0034BA  6E46               	movwf	_eusart1TxTail,c
  8158                           
  8159                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8160  0034BC  0E08               	movlw	8
  8161  0034BE  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  8162                           
  8163                           ;eusart1.c: 111: eusart1RxHead = 0;
  8164  0034C0  0E00               	movlw	0
  8165  0034C2  6E43               	movwf	_eusart1RxHead,c
  8166                           
  8167                           ;eusart1.c: 112: eusart1RxTail = 0;
  8168  0034C4  0E00               	movlw	0
  8169  0034C6  6E44               	movwf	_eusart1RxTail,c
  8170                           
  8171                           ;eusart1.c: 113: eusart1RxCount = 0;
  8172  0034C8  0E00               	movlw	0
  8173  0034CA  6E42               	movwf	_eusart1RxCount,c	;volatile
  8174                           
  8175                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  8176  0034CC  8A9D               	bsf	3997,5,c	;volatile
  8177  0034CE  0012               	return		;funcret
  8178  0034D0                     __end_of_EUSART1_Initialize:
  8179                           	opt stack 0
  8180                           tblptru	equ	0xFF8
  8181                           tblptrh	equ	0xFF7
  8182                           tblptrl	equ	0xFF6
  8183                           tablat	equ	0xFF5
  8184                           prodh	equ	0xFF4
  8185                           prodl	equ	0xFF3
  8186                           intcon	equ	0xFF2
  8187                           intcon2	equ	0xFF1
  8188                           postinc0	equ	0xFEE
  8189                           wreg	equ	0xFE8
  8190                           postinc1	equ	0xFE6
  8191                           postdec1	equ	0xFE5
  8192                           fsr1h	equ	0xFE2
  8193                           fsr1l	equ	0xFE1
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function _ADC_Initialize *****************
  8202 ;; Defined at:
  8203 ;;		line 17 in file "mcc_generated_files/adc.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;		None
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;		None
  8208 ;; Return value:  Size  Location     Type
  8209 ;;		None               void
  8210 ;; Registers used:
  8211 ;;		wreg, status,2
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8217 ;;      Params:         0       0       0       0       0       0       0
  8218 ;;      Locals:         0       0       0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0
  8220 ;;      Totals:         0       0       0       0       0       0       0
  8221 ;;Total ram usage:        0 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    4
  8224 ;; This function calls:
  8225 ;;		Nothing
  8226 ;; This function is called by:
  8227 ;;		_SYSTEM_Initialize
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text31
  8232  00372A                     __ptext31:
  8233                           	opt stack 0
  8234  00372A                     _ADC_Initialize:
  8235                           	opt stack 25
  8236                           
  8237                           ;adc.c: 22: ADCON0 = 0x01;
  8238                           
  8239                           ;incstack = 0
  8240  00372A  0E01               	movlw	1
  8241  00372C  6EC2               	movwf	4034,c	;volatile
  8242                           
  8243                           ;adc.c: 25: ADCON1 = 0x80;
  8244  00372E  0E80               	movlw	128
  8245  003730  6EC1               	movwf	4033,c	;volatile
  8246                           
  8247                           ;adc.c: 28: ADCON2 = 0xA9;
  8248  003732  0EA9               	movlw	169
  8249  003734  6EC0               	movwf	4032,c	;volatile
  8250                           
  8251                           ;adc.c: 31: ADRESL = 0x00;
  8252  003736  0E00               	movlw	0
  8253  003738  6EC3               	movwf	4035,c	;volatile
  8254                           
  8255                           ;adc.c: 34: ADRESH = 0x00;
  8256  00373A  0E00               	movlw	0
  8257  00373C  6EC4               	movwf	4036,c	;volatile
  8258                           
  8259                           ;adc.c: 37: PIE1bits.ADIE = 1;
  8260  00373E  8C9D               	bsf	3997,6,c	;volatile
  8261  003740  0012               	return		;funcret
  8262  003742                     __end_of_ADC_Initialize:
  8263                           	opt stack 0
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           intcon	equ	0xFF2
  8271                           intcon2	equ	0xFF1
  8272                           postinc0	equ	0xFEE
  8273                           wreg	equ	0xFE8
  8274                           postinc1	equ	0xFE6
  8275                           postdec1	equ	0xFE5
  8276                           fsr1h	equ	0xFE2
  8277                           fsr1l	equ	0xFE1
  8278                           indf2	equ	0xFDF
  8279                           postinc2	equ	0xFDE
  8280                           postdec2	equ	0xFDD
  8281                           fsr2h	equ	0xFDA
  8282                           fsr2l	equ	0xFD9
  8283                           status	equ	0xFD8
  8284                           
  8285 ;; *************** function _RunBypas *****************
  8286 ;; Defined at:
  8287 ;;		line 84 in file "Bypass.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;		None
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;  batvolt         3   53[COMRAM] float 
  8292 ;;  i               2   56[COMRAM] int 
  8293 ;;  cellbyp         2   51[COMRAM] int 
  8294 ;; Return value:  Size  Location     Type
  8295 ;;                  2  457[None  ] int 
  8296 ;; Registers used:
  8297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8303 ;;      Params:         0       0       0       0       0       0       0
  8304 ;;      Locals:         7       0       0       0       0       0       0
  8305 ;;      Temps:          0       0       0       0       0       0       0
  8306 ;;      Totals:         7       0       0       0       0       0       0
  8307 ;;Total ram usage:        7 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    6
  8310 ;; This function calls:
  8311 ;;		_Battery_Get
  8312 ;;		_SetBypas
  8313 ;;		___ftge
  8314 ;; This function is called by:
  8315 ;;		_main
  8316 ;; This function uses a non-reentrant model
  8317 ;;
  8318                           
  8319                           	psect	text32
  8320  002C1C                     __ptext32:
  8321                           	opt stack 0
  8322  002C1C                     _RunBypas:
  8323                           	opt stack 24
  8324                           
  8325                           ;Bypass.c: 86: int cellbyp = 0;
  8326                           
  8327                           ;incstack = 0
  8328  002C1C  0E00               	movlw	0
  8329  002C1E  6E35               	movwf	RunBypas@cellbyp+1,c
  8330  002C20  0E00               	movlw	0
  8331  002C22  6E34               	movwf	RunBypas@cellbyp,c
  8332                           
  8333                           ;Bypass.c: 87: int i = 0;
  8334  002C24  0E00               	movlw	0
  8335  002C26  6E3A               	movwf	RunBypas@i+1,c
  8336  002C28  0E00               	movlw	0
  8337  002C2A  6E39               	movwf	RunBypas@i,c
  8338                           
  8339                           ;Bypass.c: 88: float batvolt = 0;
  8340  002C2C  0E00               	movlw	0
  8341  002C2E  6E36               	movwf	RunBypas@batvolt,c
  8342  002C30  0E00               	movlw	0
  8343  002C32  6E37               	movwf	RunBypas@batvolt+1,c
  8344  002C34  0E00               	movlw	0
  8345  002C36  6E38               	movwf	RunBypas@batvolt+2,c
  8346                           
  8347                           ;Bypass.c: 90: for(i = 0; i<6;i++)
  8348  002C38  0E00               	movlw	0
  8349  002C3A  6E3A               	movwf	RunBypas@i+1,c
  8350  002C3C  0E00               	movlw	0
  8351  002C3E  6E39               	movwf	RunBypas@i,c
  8352  002C40                     l5770:
  8353  002C40  BE3A               	btfsc	RunBypas@i+1,7,c
  8354  002C42  D008               	goto	l5774
  8355  002C44  503A               	movf	RunBypas@i+1,w,c
  8356  002C46  E154               	bnz	l594
  8357  002C48  0E06               	movlw	6
  8358  002C4A  5C39               	subwf	RunBypas@i,w,c
  8359  002C4C  B0D8               	btfsc	status,0,c
  8360  002C4E  0012               	return	
  8361  002C50  D001               	goto	l5774
  8362  002C52  0012               	return	
  8363  002C54                     l5774:
  8364                           
  8365                           ;Bypass.c: 91: {
  8366                           ;Bypass.c: 92: batvolt = Battery_Get(i);
  8367  002C54  C039  F02B         	movff	RunBypas@i,Battery_Get@channelnum
  8368  002C58  C03A  F02C         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  8369  002C5C  ECEC  F01A         	call	_Battery_Get	;wreg free
  8370  002C60  C02B  F036         	movff	?_Battery_Get,RunBypas@batvolt
  8371  002C64  C02C  F037         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  8372  002C68  C02D  F038         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  8373                           
  8374                           ;Bypass.c: 94: if(batvolt >= 4.18)
  8375  002C6C  C036  F02B         	movff	RunBypas@batvolt,___ftge@ff1
  8376  002C70  C037  F02C         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  8377  002C74  C038  F02D         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  8378  002C78  0EC3               	movlw	195
  8379  002C7A  6E2E               	movwf	___ftge@ff2,c
  8380  002C7C  0E85               	movlw	133
  8381  002C7E  6E2F               	movwf	___ftge@ff2+1,c
  8382  002C80  0E40               	movlw	64
  8383  002C82  6E30               	movwf	___ftge@ff2+2,c
  8384  002C84  EC33  F018         	call	___ftge	;wreg free
  8385  002C88  A0D8               	btfss	status,0,c
  8386  002C8A  D00F               	goto	l5782
  8387                           
  8388                           ;Bypass.c: 95: {
  8389                           ;Bypass.c: 96: SetBypas(i,1);
  8390  002C8C  C039  F017         	movff	RunBypas@i,SetBypas@pin
  8391  002C90  C03A  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  8392  002C94  0E00               	movlw	0
  8393  002C96  6E1A               	movwf	SetBypas@state+1,c
  8394  002C98  0E01               	movlw	1
  8395  002C9A  6E19               	movwf	SetBypas@state,c
  8396  002C9C  EC37  F017         	call	_SetBypas	;wreg free
  8397                           
  8398                           ;Bypass.c: 97: cellbyp = 1;
  8399  002CA0  0E00               	movlw	0
  8400  002CA2  6E35               	movwf	RunBypas@cellbyp+1,c
  8401  002CA4  0E01               	movlw	1
  8402  002CA6  6E34               	movwf	RunBypas@cellbyp,c
  8403  002CA8  D000               	goto	l5782
  8404  002CAA                     l5782:
  8405                           
  8406                           ;Bypass.c: 98: }
  8407                           ;Bypass.c: 99: if(batvolt <= 4.15)
  8408  002CAA  0ECD               	movlw	205
  8409  002CAC  6E2B               	movwf	___ftge@ff1,c
  8410  002CAE  0E84               	movlw	132
  8411  002CB0  6E2C               	movwf	___ftge@ff1+1,c
  8412  002CB2  0E40               	movlw	64
  8413  002CB4  6E2D               	movwf	___ftge@ff1+2,c
  8414  002CB6  C036  F02E         	movff	RunBypas@batvolt,___ftge@ff2
  8415  002CBA  C037  F02F         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  8416  002CBE  C038  F030         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  8417  002CC2  EC33  F018         	call	___ftge	;wreg free
  8418  002CC6  A0D8               	btfss	status,0,c
  8419  002CC8  D00F               	goto	l5788
  8420                           
  8421                           ;Bypass.c: 100: {
  8422                           ;Bypass.c: 101: SetBypas(i,0);
  8423  002CCA  C039  F017         	movff	RunBypas@i,SetBypas@pin
  8424  002CCE  C03A  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  8425  002CD2  0E00               	movlw	0
  8426  002CD4  6E1A               	movwf	SetBypas@state+1,c
  8427  002CD6  0E00               	movlw	0
  8428  002CD8  6E19               	movwf	SetBypas@state,c
  8429  002CDA  EC37  F017         	call	_SetBypas	;wreg free
  8430                           
  8431                           ;Bypass.c: 102: cellbyp = 1;
  8432  002CDE  0E00               	movlw	0
  8433  002CE0  6E35               	movwf	RunBypas@cellbyp+1,c
  8434  002CE2  0E01               	movlw	1
  8435  002CE4  6E34               	movwf	RunBypas@cellbyp,c
  8436  002CE6  D000               	goto	l5788
  8437  002CE8                     l5788:
  8438  002CE8  4A39               	infsnz	RunBypas@i,f,c
  8439  002CEA  2A3A               	incf	RunBypas@i+1,f,c
  8440  002CEC  D7A9               	goto	l5770
  8441  002CEE  0012               	return	
  8442  002CF0                     l594:
  8443  002CF0  0012               	return		;funcret
  8444  002CF2                     __end_of_RunBypas:
  8445                           	opt stack 0
  8446                           tblptru	equ	0xFF8
  8447                           tblptrh	equ	0xFF7
  8448                           tblptrl	equ	0xFF6
  8449                           tablat	equ	0xFF5
  8450                           prodh	equ	0xFF4
  8451                           prodl	equ	0xFF3
  8452                           intcon	equ	0xFF2
  8453                           intcon2	equ	0xFF1
  8454                           postinc0	equ	0xFEE
  8455                           wreg	equ	0xFE8
  8456                           postinc1	equ	0xFE6
  8457                           postdec1	equ	0xFE5
  8458                           fsr1h	equ	0xFE2
  8459                           fsr1l	equ	0xFE1
  8460                           indf2	equ	0xFDF
  8461                           postinc2	equ	0xFDE
  8462                           postdec2	equ	0xFDD
  8463                           fsr2h	equ	0xFDA
  8464                           fsr2l	equ	0xFD9
  8465                           status	equ	0xFD8
  8466                           
  8467 ;; *************** function _SetBypas *****************
  8468 ;; Defined at:
  8469 ;;		line 8 in file "Bypass.c"
  8470 ;; Parameters:    Size  Location     Type
  8471 ;;  pin             2   22[COMRAM] int 
  8472 ;;  state           2   24[COMRAM] int 
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;		None
  8475 ;; Return value:  Size  Location     Type
  8476 ;;                  2   22[COMRAM] int 
  8477 ;; Registers used:
  8478 ;;		wreg, status,2, status,0
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/0
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8484 ;;      Params:         4       0       0       0       0       0       0
  8485 ;;      Locals:         0       0       0       0       0       0       0
  8486 ;;      Temps:          2       0       0       0       0       0       0
  8487 ;;      Totals:         6       0       0       0       0       0       0
  8488 ;;Total ram usage:        6 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; Hardware stack levels required when called:    4
  8491 ;; This function calls:
  8492 ;;		Nothing
  8493 ;; This function is called by:
  8494 ;;		_RunBypas
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           	psect	text33
  8499  002E6E                     __ptext33:
  8500                           	opt stack 0
  8501  002E6E                     _SetBypas:
  8502                           	opt stack 25
  8503                           
  8504                           ;Bypass.c: 10: switch (pin) {
  8505                           
  8506                           ;incstack = 0
  8507  002E6E  D038               	goto	l3516
  8508  002E70                     l3500:
  8509                           
  8510                           ;Bypass.c: 12: if (state)
  8511  002E70  5019               	movf	SetBypas@state,w,c
  8512  002E72  101A               	iorwf	SetBypas@state+1,w,c
  8513  002E74  B4D8               	btfsc	status,2,c
  8514  002E76  D002               	goto	l542
  8515                           
  8516                           ;Bypass.c: 13: {
  8517                           ;Bypass.c: 14: do { LATD4 = 1; } while(0);
  8518  002E78  888C               	bsf	3980,4,c	;volatile
  8519                           
  8520                           ;Bypass.c: 15: }
  8521  002E7A  0012               	return	
  8522  002E7C                     l542:
  8523  002E7C  988C               	bcf	3980,4,c	;volatile
  8524                           
  8525                           ;Bypass.c: 19: }
  8526                           ;Bypass.c: 20: break;
  8527  002E7E  0012               	return	
  8528  002E80                     l3502:
  8529                           
  8530                           ;Bypass.c: 22: if (state)
  8531  002E80  5019               	movf	SetBypas@state,w,c
  8532  002E82  101A               	iorwf	SetBypas@state+1,w,c
  8533  002E84  B4D8               	btfsc	status,2,c
  8534  002E86  D002               	goto	l550
  8535                           
  8536                           ;Bypass.c: 23: {
  8537                           ;Bypass.c: 24: do { LATD5 = 1; } while(0);
  8538  002E88  8A8C               	bsf	3980,5,c	;volatile
  8539                           
  8540                           ;Bypass.c: 25: }
  8541  002E8A  0012               	return	
  8542  002E8C                     l550:
  8543  002E8C  9A8C               	bcf	3980,5,c	;volatile
  8544                           
  8545                           ;Bypass.c: 29: }
  8546                           ;Bypass.c: 30: break;
  8547  002E8E  0012               	return	
  8548  002E90                     l3504:
  8549                           
  8550                           ;Bypass.c: 32: if (state)
  8551  002E90  5019               	movf	SetBypas@state,w,c
  8552  002E92  101A               	iorwf	SetBypas@state+1,w,c
  8553  002E94  B4D8               	btfsc	status,2,c
  8554  002E96  D002               	goto	l557
  8555                           
  8556                           ;Bypass.c: 33: {
  8557                           ;Bypass.c: 34: do { LATD6 = 1; } while(0);
  8558  002E98  8C8C               	bsf	3980,6,c	;volatile
  8559                           
  8560                           ;Bypass.c: 35: }
  8561  002E9A  0012               	return	
  8562  002E9C                     l557:
  8563  002E9C  9C8C               	bcf	3980,6,c	;volatile
  8564                           
  8565                           ;Bypass.c: 39: }
  8566                           ;Bypass.c: 40: break;
  8567  002E9E  0012               	return	
  8568  002EA0                     l3506:
  8569                           
  8570                           ;Bypass.c: 42: if (state)
  8571  002EA0  5019               	movf	SetBypas@state,w,c
  8572  002EA2  101A               	iorwf	SetBypas@state+1,w,c
  8573  002EA4  B4D8               	btfsc	status,2,c
  8574  002EA6  D002               	goto	l564
  8575                           
  8576                           ;Bypass.c: 43: {
  8577                           ;Bypass.c: 44: do { LATD7 = 1; } while(0);
  8578  002EA8  8E8C               	bsf	3980,7,c	;volatile
  8579                           
  8580                           ;Bypass.c: 45: }
  8581  002EAA  0012               	return	
  8582  002EAC                     l564:
  8583  002EAC  9E8C               	bcf	3980,7,c	;volatile
  8584                           
  8585                           ;Bypass.c: 49: }
  8586                           ;Bypass.c: 50: break;
  8587  002EAE  0012               	return	
  8588  002EB0                     l3508:
  8589                           
  8590                           ;Bypass.c: 52: if (state)
  8591  002EB0  5019               	movf	SetBypas@state,w,c
  8592  002EB2  101A               	iorwf	SetBypas@state+1,w,c
  8593  002EB4  B4D8               	btfsc	status,2,c
  8594  002EB6  D002               	goto	l571
  8595                           
  8596                           ;Bypass.c: 53: {
  8597                           ;Bypass.c: 54: do { LATB0 = 1; } while(0);
  8598  002EB8  808A               	bsf	3978,0,c	;volatile
  8599                           
  8600                           ;Bypass.c: 55: }
  8601  002EBA  0012               	return	
  8602  002EBC                     l571:
  8603  002EBC  908A               	bcf	3978,0,c	;volatile
  8604                           
  8605                           ;Bypass.c: 59: }
  8606                           ;Bypass.c: 60: break;
  8607  002EBE  0012               	return	
  8608  002EC0                     l3510:
  8609                           
  8610                           ;Bypass.c: 62: if (state)
  8611  002EC0  5019               	movf	SetBypas@state,w,c
  8612  002EC2  101A               	iorwf	SetBypas@state+1,w,c
  8613  002EC4  B4D8               	btfsc	status,2,c
  8614  002EC6  D002               	goto	l578
  8615                           
  8616                           ;Bypass.c: 63: {
  8617                           ;Bypass.c: 64: do { LATB1 = 1; } while(0);
  8618  002EC8  828A               	bsf	3978,1,c	;volatile
  8619                           
  8620                           ;Bypass.c: 65: }
  8621  002ECA  0012               	return	
  8622  002ECC                     l578:
  8623  002ECC  928A               	bcf	3978,1,c	;volatile
  8624                           
  8625                           ;Bypass.c: 69: }
  8626                           ;Bypass.c: 70: break;
  8627  002ECE  0012               	return	
  8628  002ED0                     l3512:
  8629                           
  8630                           ;Bypass.c: 72: if (state)
  8631  002ED0  5019               	movf	SetBypas@state,w,c
  8632  002ED2  101A               	iorwf	SetBypas@state+1,w,c
  8633  002ED4  B4D8               	btfsc	status,2,c
  8634  002ED6  D002               	goto	l585
  8635                           
  8636                           ;Bypass.c: 73: {
  8637                           ;Bypass.c: 74: do { LATB2 = 1; } while(0);
  8638  002ED8  848A               	bsf	3978,2,c	;volatile
  8639                           
  8640                           ;Bypass.c: 75: }
  8641  002EDA  0012               	return	
  8642  002EDC                     l585:
  8643  002EDC  948A               	bcf	3978,2,c	;volatile
  8644                           
  8645                           ;Bypass.c: 81: }
  8646                           
  8647                           ;Bypass.c: 79: }
  8648                           ;Bypass.c: 80: break;
  8649  002EDE  0012               	return	
  8650  002EE0                     l3516:
  8651  002EE0  C017  F01B         	movff	SetBypas@pin,??_SetBypas
  8652  002EE4  C018  F01C         	movff	SetBypas@pin+1,??_SetBypas+1
  8653                           
  8654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8655                           ; Switch size 1, requested type "space"
  8656                           ; Number of cases is 1, Range of values is 0 to 0
  8657                           ; switch strategies available:
  8658                           ; Name         Instructions Cycles
  8659                           ; simple_byte            4     3 (average)
  8660                           ;	Chosen strategy is simple_byte
  8661  002EE8  501C               	movf	??_SetBypas+1,w,c
  8662  002EEA  0A00               	xorlw	0	; case 0
  8663  002EEC  A4D8               	btfss	status,2,c
  8664  002EEE  0012               	return	
  8665                           
  8666                           ; Switch size 1, requested type "space"
  8667                           ; Number of cases is 7, Range of values is 0 to 6
  8668                           ; switch strategies available:
  8669                           ; Name         Instructions Cycles
  8670                           ; simple_byte           22    12 (average)
  8671                           ;	Chosen strategy is simple_byte
  8672  002EF0  501B               	movf	??_SetBypas,w,c
  8673  002EF2  0A00               	xorlw	0	; case 0
  8674  002EF4  B4D8               	btfsc	status,2,c
  8675  002EF6  D7BC               	goto	l3500
  8676  002EF8  0A01               	xorlw	1	; case 1
  8677  002EFA  B4D8               	btfsc	status,2,c
  8678  002EFC  D7C1               	goto	l3502
  8679  002EFE  0A03               	xorlw	3	; case 2
  8680  002F00  B4D8               	btfsc	status,2,c
  8681  002F02  D7C6               	goto	l3504
  8682  002F04  0A01               	xorlw	1	; case 3
  8683  002F06  B4D8               	btfsc	status,2,c
  8684  002F08  D7CB               	goto	l3506
  8685  002F0A  0A07               	xorlw	7	; case 4
  8686  002F0C  B4D8               	btfsc	status,2,c
  8687  002F0E  D7D0               	goto	l3508
  8688  002F10  0A01               	xorlw	1	; case 5
  8689  002F12  B4D8               	btfsc	status,2,c
  8690  002F14  D7D5               	goto	l3510
  8691  002F16  0A03               	xorlw	3	; case 6
  8692  002F18  A4D8               	btfss	status,2,c
  8693  002F1A  0012               	return	
  8694  002F1C  D7D9               	goto	l3512
  8695  002F1E  0012               	return		;funcret
  8696  002F20                     __end_of_SetBypas:
  8697                           	opt stack 0
  8698                           tblptru	equ	0xFF8
  8699                           tblptrh	equ	0xFF7
  8700                           tblptrl	equ	0xFF6
  8701                           tablat	equ	0xFF5
  8702                           prodh	equ	0xFF4
  8703                           prodl	equ	0xFF3
  8704                           intcon	equ	0xFF2
  8705                           intcon2	equ	0xFF1
  8706                           postinc0	equ	0xFEE
  8707                           wreg	equ	0xFE8
  8708                           postinc1	equ	0xFE6
  8709                           postdec1	equ	0xFE5
  8710                           fsr1h	equ	0xFE2
  8711                           fsr1l	equ	0xFE1
  8712                           indf2	equ	0xFDF
  8713                           postinc2	equ	0xFDE
  8714                           postdec2	equ	0xFDD
  8715                           fsr2h	equ	0xFDA
  8716                           fsr2l	equ	0xFD9
  8717                           status	equ	0xFD8
  8718                           
  8719 ;; *************** function _Battery_Get *****************
  8720 ;; Defined at:
  8721 ;;		line 57 in file "Battery.c"
  8722 ;; Parameters:    Size  Location     Type
  8723 ;;  channelnum      2   42[COMRAM] int 
  8724 ;; Auto vars:     Size  Location     Type
  8725 ;;		None
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  3   42[COMRAM] float 
  8728 ;; Registers used:
  8729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8730 ;; Tracked objects:
  8731 ;;		On entry : 0/0
  8732 ;;		On exit  : 0/0
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8735 ;;      Params:         3       0       0       0       0       0       0
  8736 ;;      Locals:         0       0       0       0       0       0       0
  8737 ;;      Temps:          0       0       0       0       0       0       0
  8738 ;;      Totals:         3       0       0       0       0       0       0
  8739 ;;Total ram usage:        3 bytes
  8740 ;; Hardware stack levels used:    1
  8741 ;; Hardware stack levels required when called:    5
  8742 ;; This function calls:
  8743 ;;		___wmul
  8744 ;; This function is called by:
  8745 ;;		_main
  8746 ;;		_RunBypas
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text34
  8751  0035D8                     __ptext34:
  8752                           	opt stack 0
  8753  0035D8                     _Battery_Get:
  8754                           	opt stack 24
  8755                           
  8756                           ;Battery.c: 59: return Battery_Volt[channelnum];
  8757                           
  8758                           ;incstack = 0
  8759  0035D8  C02B  F025         	movff	Battery_Get@channelnum,___wmul@multiplier
  8760  0035DC  C02C  F026         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  8761  0035E0  0E00               	movlw	0
  8762  0035E2  6E28               	movwf	___wmul@multiplicand+1,c
  8763  0035E4  0E03               	movlw	3
  8764  0035E6  6E27               	movwf	___wmul@multiplicand,c
  8765  0035E8  EC33  F01B         	call	___wmul	;wreg free
  8766  0035EC  0E60               	movlw	low _Battery_Volt
  8767  0035EE  2425               	addwf	?___wmul,w,c
  8768  0035F0  6ED9               	movwf	fsr2l,c
  8769  0035F2  0E00               	movlw	high _Battery_Volt
  8770  0035F4  2026               	addwfc	?___wmul+1,w,c
  8771  0035F6  6EDA               	movwf	fsr2h,c
  8772  0035F8  CFDE F02B          	movff	postinc2,?_Battery_Get
  8773  0035FC  CFDE F02C          	movff	postinc2,?_Battery_Get+1
  8774  003600  CFDD F02D          	movff	postdec2,?_Battery_Get+2
  8775  003604  0012               	return	
  8776  003606  0012               	return		;funcret
  8777  003608                     __end_of_Battery_Get:
  8778                           	opt stack 0
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           intcon	equ	0xFF2
  8786                           intcon2	equ	0xFF1
  8787                           postinc0	equ	0xFEE
  8788                           wreg	equ	0xFE8
  8789                           postinc1	equ	0xFE6
  8790                           postdec1	equ	0xFE5
  8791                           fsr1h	equ	0xFE2
  8792                           fsr1l	equ	0xFE1
  8793                           indf2	equ	0xFDF
  8794                           postinc2	equ	0xFDE
  8795                           postdec2	equ	0xFDD
  8796                           fsr2h	equ	0xFDA
  8797                           fsr2l	equ	0xFD9
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function _Delay *****************
  8801 ;; Defined at:
  8802 ;;		line 24 in file "Functions.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  wait            2   22[COMRAM] int 
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;  x               2   25[COMRAM] int 
  8807 ;; Return value:  Size  Location     Type
  8808 ;;		None               void
  8809 ;; Registers used:
  8810 ;;		wreg, status,2, status,0
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8816 ;;      Params:         2       0       0       0       0       0       0
  8817 ;;      Locals:         2       0       0       0       0       0       0
  8818 ;;      Temps:          1       0       0       0       0       0       0
  8819 ;;      Totals:         5       0       0       0       0       0       0
  8820 ;;Total ram usage:        5 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    4
  8823 ;; This function calls:
  8824 ;;		Nothing
  8825 ;; This function is called by:
  8826 ;;		_main
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           	psect	text35
  8831  003544                     __ptext35:
  8832                           	opt stack 0
  8833  003544                     _Delay:
  8834                           	opt stack 26
  8835                           
  8836                           ;Functions.c: 26: int x;
  8837                           ;Functions.c: 27: for(x = 0;x<wait;x++)
  8838                           
  8839                           ;incstack = 0
  8840  003544  0E00               	movlw	0
  8841  003546  6E1B               	movwf	Delay@x+1,c
  8842  003548  0E00               	movlw	0
  8843  00354A  6E1A               	movwf	Delay@x,c
  8844  00354C  D009               	goto	l370
  8845  00354E                     l4094:
  8846                           
  8847                           ;Functions.c: 28: {
  8848                           ;Functions.c: 29: _delay((unsigned long)((1)*(8000000/4000.0)));
  8849  00354E  0E03               	movlw	3
  8850  003550  6E19               	movwf	??_Delay& (0+255),c
  8851  003552  0E98               	movlw	152
  8852  003554                     u6797:
  8853  003554  2EE8               	decfsz	wreg,f,c
  8854  003556  D7FE               	goto	u6797
  8855  003558  2E19               	decfsz	??_Delay& (0+255),f,c
  8856  00355A  D7FC               	goto	u6797
  8857  00355C  4A1A               	infsnz	Delay@x,f,c
  8858  00355E  2A1B               	incf	Delay@x+1,f,c
  8859  003560                     l370:
  8860  003560  5017               	movf	Delay@wait,w,c
  8861  003562  5C1A               	subwf	Delay@x,w,c
  8862  003564  501B               	movf	Delay@x+1,w,c
  8863  003566  0A80               	xorlw	128
  8864  003568  6E19               	movwf	??_Delay& (0+255),c
  8865  00356A  5018               	movf	Delay@wait+1,w,c
  8866  00356C  0A80               	xorlw	128
  8867  00356E  5819               	subwfb	??_Delay& (0+255),w,c
  8868  003570  A0D8               	btfss	status,0,c
  8869  003572  D7ED               	goto	l4094
  8870  003574  0012               	return		;funcret
  8871  003576                     __end_of_Delay:
  8872                           	opt stack 0
  8873                           tblptru	equ	0xFF8
  8874                           tblptrh	equ	0xFF7
  8875                           tblptrl	equ	0xFF6
  8876                           tablat	equ	0xFF5
  8877                           prodh	equ	0xFF4
  8878                           prodl	equ	0xFF3
  8879                           intcon	equ	0xFF2
  8880                           intcon2	equ	0xFF1
  8881                           postinc0	equ	0xFEE
  8882                           wreg	equ	0xFE8
  8883                           postinc1	equ	0xFE6
  8884                           postdec1	equ	0xFE5
  8885                           fsr1h	equ	0xFE2
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _Battery_Fault *****************
  8895 ;; Defined at:
  8896 ;;		line 11 in file "Battery.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  i               2   52[COMRAM] int 
  8901 ;;  fault           1   51[COMRAM] unsigned char 
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  1    wreg      unsigned char 
  8904 ;; Registers used:
  8905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8911 ;;      Params:         0       0       0       0       0       0       0
  8912 ;;      Locals:         3       0       0       0       0       0       0
  8913 ;;      Temps:          0       0       0       0       0       0       0
  8914 ;;      Totals:         3       0       0       0       0       0       0
  8915 ;;Total ram usage:        3 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; Hardware stack levels required when called:    5
  8918 ;; This function calls:
  8919 ;;		___ftge
  8920 ;;		___wmul
  8921 ;; This function is called by:
  8922 ;;		_main
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           	psect	text36
  8927  002F20                     __ptext36:
  8928                           	opt stack 0
  8929  002F20                     _Battery_Fault:
  8930                           	opt stack 25
  8931                           
  8932                           ;Battery.c: 13: char fault = 0;
  8933                           
  8934                           ;incstack = 0
  8935  002F20  0E00               	movlw	0
  8936  002F22  6E34               	movwf	Battery_Fault@fault,c
  8937                           
  8938                           ;Battery.c: 14: for(int i = 0;i<9;i++)
  8939  002F24  0E00               	movlw	0
  8940  002F26  6E36               	movwf	Battery_Fault@i+1,c
  8941  002F28  0E00               	movlw	0
  8942  002F2A  6E35               	movwf	Battery_Fault@i,c
  8943  002F2C                     l5408:
  8944  002F2C  BE36               	btfsc	Battery_Fault@i+1,7,c
  8945  002F2E  D008               	goto	l5412
  8946  002F30  5036               	movf	Battery_Fault@i+1,w,c
  8947  002F32  E14D               	bnz	l329
  8948  002F34  0E09               	movlw	9
  8949  002F36  5C35               	subwf	Battery_Fault@i,w,c
  8950  002F38  B0D8               	btfsc	status,0,c
  8951  002F3A  0012               	return	
  8952  002F3C  D001               	goto	l5412
  8953  002F3E  0012               	return	
  8954  002F40                     l5412:
  8955                           
  8956                           ;Battery.c: 15: {
  8957                           ;Battery.c: 16: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  8958  002F40  0E00               	movlw	0
  8959  002F42  6E2B               	movwf	___ftge@ff1,c
  8960  002F44  0E40               	movlw	64
  8961  002F46  6E2C               	movwf	___ftge@ff1+1,c
  8962  002F48  0E40               	movlw	64
  8963  002F4A  6E2D               	movwf	___ftge@ff1+2,c
  8964  002F4C  C035  F025         	movff	Battery_Fault@i,___wmul@multiplier
  8965  002F50  C036  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  8966  002F54  0E00               	movlw	0
  8967  002F56  6E28               	movwf	___wmul@multiplicand+1,c
  8968  002F58  0E03               	movlw	3
  8969  002F5A  6E27               	movwf	___wmul@multiplicand,c
  8970  002F5C  EC33  F01B         	call	___wmul	;wreg free
  8971  002F60  0E60               	movlw	low _Battery_Volt
  8972  002F62  2425               	addwf	?___wmul,w,c
  8973  002F64  6ED9               	movwf	fsr2l,c
  8974  002F66  0E00               	movlw	high _Battery_Volt
  8975  002F68  2026               	addwfc	?___wmul+1,w,c
  8976  002F6A  6EDA               	movwf	fsr2h,c
  8977  002F6C  CFDE F02E          	movff	postinc2,___ftge@ff2
  8978  002F70  CFDE F02F          	movff	postinc2,___ftge@ff2+1
  8979  002F74  CFDD F030          	movff	postdec2,___ftge@ff2+2
  8980  002F78  EC33  F018         	call	___ftge	;wreg free
  8981  002F7C  B0D8               	btfsc	status,0,c
  8982  002F7E  D023               	goto	l5418
  8983  002F80  C035  F025         	movff	Battery_Fault@i,___wmul@multiplier
  8984  002F84  C036  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  8985  002F88  0E00               	movlw	0
  8986  002F8A  6E28               	movwf	___wmul@multiplicand+1,c
  8987  002F8C  0E03               	movlw	3
  8988  002F8E  6E27               	movwf	___wmul@multiplicand,c
  8989  002F90  EC33  F01B         	call	___wmul	;wreg free
  8990  002F94  0E60               	movlw	low _Battery_Volt
  8991  002F96  2425               	addwf	?___wmul,w,c
  8992  002F98  6ED9               	movwf	fsr2l,c
  8993  002F9A  0E00               	movlw	high _Battery_Volt
  8994  002F9C  2026               	addwfc	?___wmul+1,w,c
  8995  002F9E  6EDA               	movwf	fsr2h,c
  8996  002FA0  CFDE F02B          	movff	postinc2,___ftge@ff1
  8997  002FA4  CFDE F02C          	movff	postinc2,___ftge@ff1+1
  8998  002FA8  CFDD F02D          	movff	postdec2,___ftge@ff1+2
  8999  002FAC  0EB8               	movlw	184
  9000  002FAE  6E2E               	movwf	___ftge@ff2,c
  9001  002FB0  0E86               	movlw	134
  9002  002FB2  6E2F               	movwf	___ftge@ff2+1,c
  9003  002FB4  0E40               	movlw	64
  9004  002FB6  6E30               	movwf	___ftge@ff2+2,c
  9005  002FB8  EC33  F018         	call	___ftge	;wreg free
  9006  002FBC  B0D8               	btfsc	status,0,c
  9007  002FBE  D003               	goto	l5418
  9008                           
  9009                           ;Battery.c: 17: {
  9010                           ;Battery.c: 18: fault = 1;
  9011  002FC0  0E01               	movlw	1
  9012  002FC2  6E34               	movwf	Battery_Fault@fault,c
  9013  002FC4  D000               	goto	l5418
  9014  002FC6                     l5418:
  9015  002FC6  4A35               	infsnz	Battery_Fault@i,f,c
  9016  002FC8  2A36               	incf	Battery_Fault@i+1,f,c
  9017  002FCA  D7B0               	goto	l5408
  9018  002FCC  0012               	return	
  9019  002FCE                     l329:
  9020  002FCE  0012               	return		;funcret
  9021  002FD0                     __end_of_Battery_Fault:
  9022                           	opt stack 0
  9023                           tblptru	equ	0xFF8
  9024                           tblptrh	equ	0xFF7
  9025                           tblptrl	equ	0xFF6
  9026                           tablat	equ	0xFF5
  9027                           prodh	equ	0xFF4
  9028                           prodl	equ	0xFF3
  9029                           intcon	equ	0xFF2
  9030                           intcon2	equ	0xFF1
  9031                           postinc0	equ	0xFEE
  9032                           wreg	equ	0xFE8
  9033                           postinc1	equ	0xFE6
  9034                           postdec1	equ	0xFE5
  9035                           fsr1h	equ	0xFE2
  9036                           fsr1l	equ	0xFE1
  9037                           indf2	equ	0xFDF
  9038                           postinc2	equ	0xFDE
  9039                           postdec2	equ	0xFDD
  9040                           fsr2h	equ	0xFDA
  9041                           fsr2l	equ	0xFD9
  9042                           status	equ	0xFD8
  9043                           
  9044 ;; *************** function ___ftge *****************
  9045 ;; Defined at:
  9046 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;  ff1             3   42[COMRAM] float 
  9049 ;;  ff2             3   45[COMRAM] float 
  9050 ;; Auto vars:     Size  Location     Type
  9051 ;;		None
  9052 ;; Return value:  Size  Location     Type
  9053 ;;		None               void
  9054 ;; Registers used:
  9055 ;;		wreg, status,2, status,0
  9056 ;; Tracked objects:
  9057 ;;		On entry : 0/0
  9058 ;;		On exit  : 0/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9061 ;;      Params:         6       0       0       0       0       0       0
  9062 ;;      Locals:         0       0       0       0       0       0       0
  9063 ;;      Temps:          3       0       0       0       0       0       0
  9064 ;;      Totals:         9       0       0       0       0       0       0
  9065 ;;Total ram usage:        9 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; Hardware stack levels required when called:    4
  9068 ;; This function calls:
  9069 ;;		Nothing
  9070 ;; This function is called by:
  9071 ;;		_Battery_Fault
  9072 ;;		_RunBypas
  9073 ;;		_printf
  9074 ;;		_Temp_Fault
  9075 ;;		_Current_Fault
  9076 ;; This function uses a non-reentrant model
  9077 ;;
  9078                           
  9079                           	psect	text37
  9080  003066                     __ptext37:
  9081                           	opt stack 0
  9082  003066                     ___ftge:
  9083                           	opt stack 25
  9084                           
  9085                           ;incstack = 0
  9086  003066  AE2D               	btfss	___ftge@ff1+2,7,c
  9087  003068  D017               	goto	l5294
  9088  00306A  C02B  F031         	movff	___ftge@ff1,??___ftge
  9089  00306E  C02C  F032         	movff	___ftge@ff1+1,??___ftge+1
  9090  003072  C02D  F033         	movff	___ftge@ff1+2,??___ftge+2
  9091  003076  1E31               	comf	??___ftge,f,c
  9092  003078  1E32               	comf	??___ftge+1,f,c
  9093  00307A  1E33               	comf	??___ftge+2,f,c
  9094  00307C  2A31               	incf	??___ftge,f,c
  9095  00307E  0E00               	movlw	0
  9096  003080  2232               	addwfc	??___ftge+1,f,c
  9097  003082  2233               	addwfc	??___ftge+2,f,c
  9098  003084  0E00               	movlw	0
  9099  003086  2431               	addwf	??___ftge,w,c
  9100  003088  6E2B               	movwf	___ftge@ff1,c
  9101  00308A  0E00               	movlw	0
  9102  00308C  2032               	addwfc	??___ftge+1,w,c
  9103  00308E  6E2C               	movwf	___ftge@ff1+1,c
  9104  003090  0E80               	movlw	128
  9105  003092  2033               	addwfc	??___ftge+2,w,c
  9106  003094  6E2D               	movwf	___ftge@ff1+2,c
  9107  003096  D000               	goto	l5294
  9108  003098                     l5294:
  9109  003098  AE30               	btfss	___ftge@ff2+2,7,c
  9110  00309A  D017               	goto	l5298
  9111  00309C  C02E  F031         	movff	___ftge@ff2,??___ftge
  9112  0030A0  C02F  F032         	movff	___ftge@ff2+1,??___ftge+1
  9113  0030A4  C030  F033         	movff	___ftge@ff2+2,??___ftge+2
  9114  0030A8  1E31               	comf	??___ftge,f,c
  9115  0030AA  1E32               	comf	??___ftge+1,f,c
  9116  0030AC  1E33               	comf	??___ftge+2,f,c
  9117  0030AE  2A31               	incf	??___ftge,f,c
  9118  0030B0  0E00               	movlw	0
  9119  0030B2  2232               	addwfc	??___ftge+1,f,c
  9120  0030B4  2233               	addwfc	??___ftge+2,f,c
  9121  0030B6  0E00               	movlw	0
  9122  0030B8  2431               	addwf	??___ftge,w,c
  9123  0030BA  6E2E               	movwf	___ftge@ff2,c
  9124  0030BC  0E00               	movlw	0
  9125  0030BE  2032               	addwfc	??___ftge+1,w,c
  9126  0030C0  6E2F               	movwf	___ftge@ff2+1,c
  9127  0030C2  0E80               	movlw	128
  9128  0030C4  2033               	addwfc	??___ftge+2,w,c
  9129  0030C6  6E30               	movwf	___ftge@ff2+2,c
  9130  0030C8  D000               	goto	l5298
  9131  0030CA                     l5298:
  9132  0030CA  0E00               	movlw	0
  9133  0030CC  1A2B               	xorwf	___ftge@ff1,f,c
  9134  0030CE  0E00               	movlw	0
  9135  0030D0  1A2C               	xorwf	___ftge@ff1+1,f,c
  9136  0030D2  0E80               	movlw	128
  9137  0030D4  1A2D               	xorwf	___ftge@ff1+2,f,c
  9138  0030D6  0E00               	movlw	0
  9139  0030D8  1A2E               	xorwf	___ftge@ff2,f,c
  9140  0030DA  0E00               	movlw	0
  9141  0030DC  1A2F               	xorwf	___ftge@ff2+1,f,c
  9142  0030DE  0E80               	movlw	128
  9143  0030E0  1A30               	xorwf	___ftge@ff2+2,f,c
  9144  0030E2  502E               	movf	___ftge@ff2,w,c
  9145  0030E4  5C2B               	subwf	___ftge@ff1,w,c
  9146  0030E6  502F               	movf	___ftge@ff2+1,w,c
  9147  0030E8  582C               	subwfb	___ftge@ff1+1,w,c
  9148  0030EA  5030               	movf	___ftge@ff2+2,w,c
  9149  0030EC  582D               	subwfb	___ftge@ff1+2,w,c
  9150  0030EE  B0D8               	btfsc	status,0,c
  9151  0030F0  D002               	goto	l5304
  9152  0030F2  90D8               	bcf	status,0,c
  9153  0030F4  0012               	return	
  9154  0030F6                     l5304:
  9155  0030F6  80D8               	bsf	status,0,c
  9156  0030F8  0012               	return	
  9157  0030FA  0012               	return		;funcret
  9158  0030FC                     __end_of___ftge:
  9159                           	opt stack 0
  9160                           tblptru	equ	0xFF8
  9161                           tblptrh	equ	0xFF7
  9162                           tblptrl	equ	0xFF6
  9163                           tablat	equ	0xFF5
  9164                           prodh	equ	0xFF4
  9165                           prodl	equ	0xFF3
  9166                           intcon	equ	0xFF2
  9167                           intcon2	equ	0xFF1
  9168                           postinc0	equ	0xFEE
  9169                           wreg	equ	0xFE8
  9170                           postinc1	equ	0xFE6
  9171                           postdec1	equ	0xFE5
  9172                           fsr1h	equ	0xFE2
  9173                           fsr1l	equ	0xFE1
  9174                           indf2	equ	0xFDF
  9175                           postinc2	equ	0xFDE
  9176                           postdec2	equ	0xFDD
  9177                           fsr2h	equ	0xFDA
  9178                           fsr2l	equ	0xFD9
  9179                           status	equ	0xFD8
  9180                           
  9181 ;; *************** function _Battery_Convert *****************
  9182 ;; Defined at:
  9183 ;;		line 47 in file "Battery.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;		None
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  x               2    6[BANK0 ] int 
  9188 ;; Return value:  Size  Location     Type
  9189 ;;		None               void
  9190 ;; Registers used:
  9191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9197 ;;      Params:         0       0       0       0       0       0       0
  9198 ;;      Locals:         0       2       0       0       0       0       0
  9199 ;;      Temps:          0       0       0       0       0       0       0
  9200 ;;      Totals:         0       2       0       0       0       0       0
  9201 ;;Total ram usage:        2 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    6
  9204 ;; This function calls:
  9205 ;;		___awtoft
  9206 ;;		___ftdiv
  9207 ;;		___ftmul
  9208 ;;		___wmul
  9209 ;; This function is called by:
  9210 ;;		_main
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           	psect	text38
  9215  002DB8                     __ptext38:
  9216                           	opt stack 0
  9217  002DB8                     _Battery_Convert:
  9218                           	opt stack 24
  9219                           
  9220                           ;Battery.c: 49: int x;
  9221                           ;Battery.c: 50: for(x = 0; x < 7; x++)
  9222                           
  9223                           ;incstack = 0
  9224  002DB8  0E00               	movlw	0
  9225  002DBA  0100               	movlb	0	; () banked
  9226  002DBC  6FC3               	movwf	(Battery_Convert@x+1)& (0+255),b
  9227  002DBE  0E00               	movlw	0
  9228  002DC0  6FC2               	movwf	Battery_Convert@x& (0+255),b
  9229  002DC2                     l5424:
  9230                           
  9231                           ; BSR set to: 0
  9232  002DC2  0100               	movlb	0	; () banked
  9233  002DC4  BFC3               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
  9234  002DC6  D00A               	goto	l5428
  9235  002DC8  0100               	movlb	0	; () banked
  9236  002DCA  51C3               	movf	(Battery_Convert@x+1)& (0+255),w,b
  9237  002DCC  E14F               	bnz	l344
  9238  002DCE  0E07               	movlw	7
  9239  002DD0  0100               	movlb	0	; () banked
  9240  002DD2  5DC2               	subwf	Battery_Convert@x& (0+255),w,b
  9241  002DD4  B0D8               	btfsc	status,0,c
  9242  002DD6  0012               	return	
  9243  002DD8  D001               	goto	l5428
  9244                           
  9245                           ; BSR set to: 0
  9246  002DDA  0012               	return	
  9247  002DDC                     l5428:
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;Battery.c: 51: {
  9251                           ;Battery.c: 52: Battery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0);
  9252  002DDC  C0C2  F025         	movff	Battery_Convert@x,___wmul@multiplier
  9253  002DE0  C0C3  F026         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  9254  002DE4  0E00               	movlw	0
  9255  002DE6  6E28               	movwf	___wmul@multiplicand+1,c
  9256  002DE8  0E03               	movlw	3
  9257  002DEA  6E27               	movwf	___wmul@multiplicand,c
  9258  002DEC  EC33  F01B         	call	___wmul	;wreg free
  9259  002DF0  0E60               	movlw	low _Battery_Volt
  9260  002DF2  2425               	addwf	?___wmul,w,c
  9261  002DF4  6ED9               	movwf	fsr2l,c
  9262  002DF6  0E00               	movlw	high _Battery_Volt
  9263  002DF8  2026               	addwfc	?___wmul+1,w,c
  9264  002DFA  6EDA               	movwf	fsr2h,c
  9265  002DFC  0E00               	movlw	0
  9266  002DFE  6E26               	movwf	___ftdiv@f2,c
  9267  002E00  0E80               	movlw	128
  9268  002E02  6E27               	movwf	___ftdiv@f2+1,c
  9269  002E04  0E44               	movlw	68
  9270  002E06  6E28               	movwf	___ftdiv@f2+2,c
  9271  002E08  90D8               	bcf	status,0,c
  9272  002E0A  0100               	movlb	0	; () banked
  9273  002E0C  35C2               	rlcf	Battery_Convert@x& (0+255),w,b
  9274  002E0E  6EE1               	movwf	fsr1l,c
  9275  002E10  0100               	movlb	0	; () banked
  9276  002E12  35C3               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  9277  002E14  6EE2               	movwf	fsr1h,c
  9278  002E16  0E7E               	movlw	low _Battery_Adc
  9279  002E18  26E1               	addwf	fsr1l,f,c
  9280  002E1A  0E00               	movlw	high _Battery_Adc
  9281  002E1C  22E2               	addwfc	fsr1h,f,c
  9282  002E1E  CFE6 F01F          	movff	postinc1,___awtoft@c
  9283  002E22  CFE5 F020          	movff	postdec1,___awtoft@c+1
  9284  002E26  EC68  F01A         	call	___awtoft	;wreg free
  9285  002E2A  C01F  F023         	movff	?___awtoft,___ftdiv@f1
  9286  002E2E  C020  F024         	movff	?___awtoft+1,___ftdiv@f1+1
  9287  002E32  C021  F025         	movff	?___awtoft+2,___ftdiv@f1+2
  9288  002E36  EC27  F015         	call	___ftdiv	;wreg free
  9289  002E3A  C023  F032         	movff	?___ftdiv,___ftmul@f1
  9290  002E3E  C024  F033         	movff	?___ftdiv+1,___ftmul@f1+1
  9291  002E42  C025  F034         	movff	?___ftdiv+2,___ftmul@f1+2
  9292  002E46  0E00               	movlw	0
  9293  002E48  6E35               	movwf	___ftmul@f2,c
  9294  002E4A  0EA0               	movlw	160
  9295  002E4C  6E36               	movwf	___ftmul@f2+1,c
  9296  002E4E  0E40               	movlw	64
  9297  002E50  6E37               	movwf	___ftmul@f2+2,c
  9298  002E52  EC90  F014         	call	___ftmul	;wreg free
  9299  002E56  C032  FFDE         	movff	?___ftmul,postinc2
  9300  002E5A  C033  FFDE         	movff	?___ftmul+1,postinc2
  9301  002E5E  C034  FFDE         	movff	?___ftmul+2,postinc2
  9302  002E62  0100               	movlb	0	; () banked
  9303  002E64  4BC2               	infsnz	Battery_Convert@x& (0+255),f,b
  9304  002E66  2BC3               	incf	(Battery_Convert@x+1)& (0+255),f,b
  9305  002E68  D7AC               	goto	l5424
  9306                           
  9307                           ; BSR set to: 0
  9308  002E6A  0012               	return	
  9309  002E6C                     l344:
  9310                           
  9311                           ; BSR set to: 0
  9312  002E6C  0012               	return		;funcret
  9313  002E6E                     __end_of_Battery_Convert:
  9314                           	opt stack 0
  9315                           tblptru	equ	0xFF8
  9316                           tblptrh	equ	0xFF7
  9317                           tblptrl	equ	0xFF6
  9318                           tablat	equ	0xFF5
  9319                           prodh	equ	0xFF4
  9320                           prodl	equ	0xFF3
  9321                           intcon	equ	0xFF2
  9322                           intcon2	equ	0xFF1
  9323                           postinc0	equ	0xFEE
  9324                           wreg	equ	0xFE8
  9325                           postinc1	equ	0xFE6
  9326                           postdec1	equ	0xFE5
  9327                           fsr1h	equ	0xFE2
  9328                           fsr1l	equ	0xFE1
  9329                           indf2	equ	0xFDF
  9330                           postinc2	equ	0xFDE
  9331                           postdec2	equ	0xFDD
  9332                           fsr2h	equ	0xFDA
  9333                           fsr2l	equ	0xFD9
  9334                           status	equ	0xFD8
  9335                           
  9336 ;; *************** function ___wmul *****************
  9337 ;; Defined at:
  9338 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;  multiplier      2   36[COMRAM] unsigned int 
  9341 ;;  multiplicand    2   38[COMRAM] unsigned int 
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;  product         2   40[COMRAM] unsigned int 
  9344 ;; Return value:  Size  Location     Type
  9345 ;;                  2   36[COMRAM] unsigned int 
  9346 ;; Registers used:
  9347 ;;		wreg, status,2, status,0, prodl, prodh
  9348 ;; Tracked objects:
  9349 ;;		On entry : 0/0
  9350 ;;		On exit  : 0/0
  9351 ;;		Unchanged: 0/0
  9352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9353 ;;      Params:         4       0       0       0       0       0       0
  9354 ;;      Locals:         2       0       0       0       0       0       0
  9355 ;;      Temps:          0       0       0       0       0       0       0
  9356 ;;      Totals:         6       0       0       0       0       0       0
  9357 ;;Total ram usage:        6 bytes
  9358 ;; Hardware stack levels used:    1
  9359 ;; Hardware stack levels required when called:    4
  9360 ;; This function calls:
  9361 ;;		Nothing
  9362 ;; This function is called by:
  9363 ;;		_Battery_Fault
  9364 ;;		_Battery_Convert
  9365 ;;		_Battery_Get
  9366 ;;		_Temp_Filter
  9367 ;;		_Temp_Convert
  9368 ;;		_Tempeture_Get
  9369 ;;		_fround
  9370 ;;		_scale
  9371 ;;		_printf
  9372 ;;		_eval_poly
  9373 ;;		_Battery_Filter
  9374 ;;		_Temp_Fault
  9375 ;;		_Current_Fault
  9376 ;;		_Current_Filter
  9377 ;;		_Current_Convert
  9378 ;;		_Current_Get
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           	psect	text39
  9383  003666                     __ptext39:
  9384                           	opt stack 0
  9385  003666                     ___wmul:
  9386                           	opt stack 24
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;incstack = 0
  9390  003666  5025               	movf	___wmul@multiplier,w,c
  9391  003668  0227               	mulwf	___wmul@multiplicand,c
  9392  00366A  CFF3 F029          	movff	prodl,___wmul@product
  9393  00366E  CFF4 F02A          	movff	prodh,___wmul@product+1
  9394  003672  5025               	movf	___wmul@multiplier,w,c
  9395  003674  0228               	mulwf	___wmul@multiplicand+1,c
  9396  003676  50F3               	movf	prodl,w,c
  9397  003678  262A               	addwf	___wmul@product+1,f,c
  9398  00367A  5026               	movf	___wmul@multiplier+1,w,c
  9399  00367C  0227               	mulwf	___wmul@multiplicand,c
  9400  00367E  50F3               	movf	prodl,w,c
  9401  003680  262A               	addwf	___wmul@product+1,f,c
  9402  003682  C029  F025         	movff	___wmul@product,?___wmul
  9403  003686  C02A  F026         	movff	___wmul@product+1,?___wmul+1
  9404  00368A  0012               	return	
  9405  00368C  0012               	return		;funcret
  9406  00368E                     __end_of___wmul:
  9407                           	opt stack 0
  9408                           tblptru	equ	0xFF8
  9409                           tblptrh	equ	0xFF7
  9410                           tblptrl	equ	0xFF6
  9411                           tablat	equ	0xFF5
  9412                           prodh	equ	0xFF4
  9413                           prodl	equ	0xFF3
  9414                           intcon	equ	0xFF2
  9415                           intcon2	equ	0xFF1
  9416                           postinc0	equ	0xFEE
  9417                           wreg	equ	0xFE8
  9418                           postinc1	equ	0xFE6
  9419                           postdec1	equ	0xFE5
  9420                           fsr1h	equ	0xFE2
  9421                           fsr1l	equ	0xFE1
  9422                           indf2	equ	0xFDF
  9423                           postinc2	equ	0xFDE
  9424                           postdec2	equ	0xFDD
  9425                           fsr2h	equ	0xFDA
  9426                           fsr2l	equ	0xFD9
  9427                           status	equ	0xFD8
  9428                           
  9429 ;; *************** function ___ftmul *****************
  9430 ;; Defined at:
  9431 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;  f1              3   49[COMRAM] float 
  9434 ;;  f2              3   52[COMRAM] float 
  9435 ;; Auto vars:     Size  Location     Type
  9436 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  9437 ;;  sign            1    5[BANK0 ] unsigned char 
  9438 ;;  cntr            1    4[BANK0 ] unsigned char 
  9439 ;;  exp             1    0[BANK0 ] unsigned char 
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  3   49[COMRAM] float 
  9442 ;; Registers used:
  9443 ;;		wreg, status,2, status,0, cstack
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9449 ;;      Params:         6       0       0       0       0       0       0
  9450 ;;      Locals:         0       6       0       0       0       0       0
  9451 ;;      Temps:          3       0       0       0       0       0       0
  9452 ;;      Totals:         9       6       0       0       0       0       0
  9453 ;;Total ram usage:       15 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    5
  9456 ;; This function calls:
  9457 ;;		___ftpack
  9458 ;; This function is called by:
  9459 ;;		_Battery_Convert
  9460 ;;		_Temp_Filter
  9461 ;;		_Temp_Convert
  9462 ;;		_fround
  9463 ;;		_scale
  9464 ;;		_printf
  9465 ;;		_log
  9466 ;;		_eval_poly
  9467 ;;		_Battery_Filter
  9468 ;;		_Current_Filter
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           	psect	text40
  9473  002920                     __ptext40:
  9474                           	opt stack 0
  9475  002920                     ___ftmul:
  9476                           	opt stack 23
  9477                           
  9478                           ;incstack = 0
  9479  002920  C034  F038         	movff	___ftmul@f1+2,??___ftmul
  9480  002924  6A39               	clrf	(??___ftmul+1)& (0+255),c
  9481  002926  6A3A               	clrf	(??___ftmul+2)& (0+255),c
  9482  002928  3433               	rlcf	___ftmul@f1+1,w,c
  9483  00292A  3638               	rlcf	??___ftmul& (0+255),f,c
  9484  00292C  E301               	bnc	u5041
  9485  00292E  8039               	bsf	(??___ftmul+1)& (0+255),0,c
  9486  002930                     u5041:
  9487  002930  5038               	movf	??___ftmul,w,c
  9488  002932  0100               	movlb	0	; () banked
  9489  002934  6FBC               	movwf	___ftmul@exp& (0+255),b
  9490  002936  0100               	movlb	0	; () banked
  9491  002938  51BC               	movf	___ftmul@exp& (0+255),w,b
  9492  00293A  A4D8               	btfss	status,2,c
  9493  00293C  D007               	goto	l4838
  9494                           
  9495                           ; BSR set to: 0
  9496  00293E  0E00               	movlw	0
  9497  002940  6E32               	movwf	?___ftmul,c
  9498  002942  0E00               	movlw	0
  9499  002944  6E33               	movwf	?___ftmul+1,c
  9500  002946  0E00               	movlw	0
  9501  002948  6E34               	movwf	?___ftmul+2,c
  9502                           
  9503                           ; BSR set to: 0
  9504  00294A  0012               	return	
  9505  00294C                     l4838:
  9506                           
  9507                           ; BSR set to: 0
  9508  00294C  C037  F038         	movff	___ftmul@f2+2,??___ftmul
  9509  002950  6A39               	clrf	(??___ftmul+1)& (0+255),c
  9510  002952  6A3A               	clrf	(??___ftmul+2)& (0+255),c
  9511  002954  3436               	rlcf	___ftmul@f2+1,w,c
  9512  002956  3638               	rlcf	??___ftmul& (0+255),f,c
  9513  002958  E301               	bnc	u5061
  9514  00295A  8039               	bsf	(??___ftmul+1)& (0+255),0,c
  9515  00295C                     u5061:
  9516  00295C  5038               	movf	??___ftmul,w,c
  9517  00295E  0100               	movlb	0	; () banked
  9518  002960  6FC1               	movwf	___ftmul@sign& (0+255),b
  9519  002962  0100               	movlb	0	; () banked
  9520  002964  51C1               	movf	___ftmul@sign& (0+255),w,b
  9521  002966  A4D8               	btfss	status,2,c
  9522  002968  D007               	goto	l4844
  9523                           
  9524                           ; BSR set to: 0
  9525  00296A  0E00               	movlw	0
  9526  00296C  6E32               	movwf	?___ftmul,c
  9527  00296E  0E00               	movlw	0
  9528  002970  6E33               	movwf	?___ftmul+1,c
  9529  002972  0E00               	movlw	0
  9530  002974  6E34               	movwf	?___ftmul+2,c
  9531                           
  9532                           ; BSR set to: 0
  9533  002976  0012               	return	
  9534  002978                     l4844:
  9535                           
  9536                           ; BSR set to: 0
  9537  002978  0100               	movlb	0	; () banked
  9538  00297A  51C1               	movf	___ftmul@sign& (0+255),w,b
  9539  00297C  0F7B               	addlw	123
  9540  00297E  0100               	movlb	0	; () banked
  9541  002980  27BC               	addwf	___ftmul@exp& (0+255),f,b
  9542                           
  9543                           ; BSR set to: 0
  9544  002982  C034  F0C1         	movff	___ftmul@f1+2,___ftmul@sign
  9545  002986  5037               	movf	___ftmul@f2+2,w,c
  9546  002988  0100               	movlb	0	; () banked
  9547  00298A  1BC1               	xorwf	___ftmul@sign& (0+255),f,b
  9548  00298C  0E80               	movlw	128
  9549  00298E  0100               	movlb	0	; () banked
  9550  002990  17C1               	andwf	___ftmul@sign& (0+255),f,b
  9551                           
  9552                           ; BSR set to: 0
  9553  002992  8E33               	bsf	___ftmul@f1+1,7,c
  9554                           
  9555                           ; BSR set to: 0
  9556  002994  8E36               	bsf	___ftmul@f2+1,7,c
  9557                           
  9558                           ; BSR set to: 0
  9559  002996  0EFF               	movlw	255
  9560  002998  1635               	andwf	___ftmul@f2,f,c
  9561  00299A  0EFF               	movlw	255
  9562  00299C  1636               	andwf	___ftmul@f2+1,f,c
  9563  00299E  0E00               	movlw	0
  9564  0029A0  1637               	andwf	___ftmul@f2+2,f,c
  9565                           
  9566                           ; BSR set to: 0
  9567  0029A2  0E00               	movlw	0
  9568  0029A4  0100               	movlb	0	; () banked
  9569  0029A6  6FBD               	movwf	___ftmul@f3_as_product& (0+255),b
  9570  0029A8  0E00               	movlw	0
  9571  0029AA  0100               	movlb	0	; () banked
  9572  0029AC  6FBE               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9573  0029AE  0E00               	movlw	0
  9574  0029B0  0100               	movlb	0	; () banked
  9575  0029B2  6FBF               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9576                           
  9577                           ; BSR set to: 0
  9578  0029B4  0E07               	movlw	7
  9579  0029B6  0100               	movlb	0	; () banked
  9580  0029B8  6FC0               	movwf	___ftmul@cntr& (0+255),b
  9581  0029BA  D000               	goto	l4858
  9582  0029BC                     l4858:
  9583                           
  9584                           ; BSR set to: 0
  9585  0029BC  A032               	btfss	___ftmul@f1,0,c
  9586  0029BE  D00A               	goto	l4862
  9587                           
  9588                           ; BSR set to: 0
  9589  0029C0  5035               	movf	___ftmul@f2,w,c
  9590  0029C2  0100               	movlb	0	; () banked
  9591  0029C4  27BD               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9592  0029C6  5036               	movf	___ftmul@f2+1,w,c
  9593  0029C8  0100               	movlb	0	; () banked
  9594  0029CA  23BE               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9595  0029CC  5037               	movf	___ftmul@f2+2,w,c
  9596  0029CE  0100               	movlb	0	; () banked
  9597  0029D0  23BF               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9598  0029D2  D000               	goto	l4862
  9599  0029D4                     l4862:
  9600                           
  9601                           ; BSR set to: 0
  9602  0029D4  90D8               	bcf	status,0,c
  9603  0029D6  3234               	rrcf	___ftmul@f1+2,f,c
  9604  0029D8  3233               	rrcf	___ftmul@f1+1,f,c
  9605  0029DA  3232               	rrcf	___ftmul@f1,f,c
  9606  0029DC  90D8               	bcf	status,0,c
  9607  0029DE  3635               	rlcf	___ftmul@f2,f,c
  9608  0029E0  3636               	rlcf	___ftmul@f2+1,f,c
  9609  0029E2  3637               	rlcf	___ftmul@f2+2,f,c
  9610                           
  9611                           ; BSR set to: 0
  9612  0029E4  0100               	movlb	0	; () banked
  9613  0029E6  2FC0               	decfsz	___ftmul@cntr& (0+255),f,b
  9614  0029E8  D7E9               	goto	l4858
  9615  0029EA  D000               	goto	l4866
  9616  0029EC                     l4866:
  9617                           
  9618                           ; BSR set to: 0
  9619  0029EC  0E09               	movlw	9
  9620  0029EE  0100               	movlb	0	; () banked
  9621  0029F0  6FC0               	movwf	___ftmul@cntr& (0+255),b
  9622  0029F2  D000               	goto	l4868
  9623  0029F4                     l4868:
  9624                           
  9625                           ; BSR set to: 0
  9626  0029F4  A032               	btfss	___ftmul@f1,0,c
  9627  0029F6  D00A               	goto	l4872
  9628                           
  9629                           ; BSR set to: 0
  9630  0029F8  5035               	movf	___ftmul@f2,w,c
  9631  0029FA  0100               	movlb	0	; () banked
  9632  0029FC  27BD               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9633  0029FE  5036               	movf	___ftmul@f2+1,w,c
  9634  002A00  0100               	movlb	0	; () banked
  9635  002A02  23BE               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9636  002A04  5037               	movf	___ftmul@f2+2,w,c
  9637  002A06  0100               	movlb	0	; () banked
  9638  002A08  23BF               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9639  002A0A  D000               	goto	l4872
  9640  002A0C                     l4872:
  9641                           
  9642                           ; BSR set to: 0
  9643  002A0C  90D8               	bcf	status,0,c
  9644  002A0E  3234               	rrcf	___ftmul@f1+2,f,c
  9645  002A10  3233               	rrcf	___ftmul@f1+1,f,c
  9646  002A12  3232               	rrcf	___ftmul@f1,f,c
  9647  002A14  0100               	movlb	0	; () banked
  9648  002A16  90D8               	bcf	status,0,c
  9649  002A18  33BF               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9650  002A1A  33BE               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9651  002A1C  33BD               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9652                           
  9653                           ; BSR set to: 0
  9654  002A1E  0100               	movlb	0	; () banked
  9655  002A20  2FC0               	decfsz	___ftmul@cntr& (0+255),f,b
  9656  002A22  D7E8               	goto	l4868
  9657  002A24  D000               	goto	l4876
  9658  002A26                     l4876:
  9659                           
  9660                           ; BSR set to: 0
  9661  002A26  C0BD  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  9662  002A2A  C0BE  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9663  002A2E  C0BF  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9664  002A32  C0BC  F01A         	movff	___ftmul@exp,___ftpack@exp
  9665  002A36  C0C1  F01B         	movff	___ftmul@sign,___ftpack@sign
  9666  002A3A  EC79  F016         	call	___ftpack	;wreg free
  9667  002A3E  C017  F032         	movff	?___ftpack,?___ftmul
  9668  002A42  C018  F033         	movff	?___ftpack+1,?___ftmul+1
  9669  002A46  C019  F034         	movff	?___ftpack+2,?___ftmul+2
  9670  002A4A  0012               	return	
  9671  002A4C  0012               	return		;funcret
  9672  002A4E                     __end_of___ftmul:
  9673                           	opt stack 0
  9674                           tblptru	equ	0xFF8
  9675                           tblptrh	equ	0xFF7
  9676                           tblptrl	equ	0xFF6
  9677                           tablat	equ	0xFF5
  9678                           prodh	equ	0xFF4
  9679                           prodl	equ	0xFF3
  9680                           intcon	equ	0xFF2
  9681                           intcon2	equ	0xFF1
  9682                           postinc0	equ	0xFEE
  9683                           wreg	equ	0xFE8
  9684                           postinc1	equ	0xFE6
  9685                           postdec1	equ	0xFE5
  9686                           fsr1h	equ	0xFE2
  9687                           fsr1l	equ	0xFE1
  9688                           indf2	equ	0xFDF
  9689                           postinc2	equ	0xFDE
  9690                           postdec2	equ	0xFDD
  9691                           fsr2h	equ	0xFDA
  9692                           fsr2l	equ	0xFD9
  9693                           status	equ	0xFD8
  9694                           
  9695 ;; *************** function ___ftdiv *****************
  9696 ;; Defined at:
  9697 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;  f1              3   34[COMRAM] float 
  9700 ;;  f2              3   37[COMRAM] float 
  9701 ;; Auto vars:     Size  Location     Type
  9702 ;;  f3              3   44[COMRAM] float 
  9703 ;;  sign            1   48[COMRAM] unsigned char 
  9704 ;;  exp             1   47[COMRAM] unsigned char 
  9705 ;;  cntr            1   43[COMRAM] unsigned char 
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  3   34[COMRAM] float 
  9708 ;; Registers used:
  9709 ;;		wreg, status,2, status,0, cstack
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9715 ;;      Params:         6       0       0       0       0       0       0
  9716 ;;      Locals:         6       0       0       0       0       0       0
  9717 ;;      Temps:          3       0       0       0       0       0       0
  9718 ;;      Totals:        15       0       0       0       0       0       0
  9719 ;;Total ram usage:       15 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    5
  9722 ;; This function calls:
  9723 ;;		___ftpack
  9724 ;; This function is called by:
  9725 ;;		_Battery_Convert
  9726 ;;		_Temp_Convert
  9727 ;;		_Current_Fault
  9728 ;;		_Current_Get
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           	psect	text41
  9733  002A4E                     __ptext41:
  9734                           	opt stack 0
  9735  002A4E                     ___ftdiv:
  9736                           	opt stack 24
  9737                           
  9738                           ;incstack = 0
  9739  002A4E  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
  9740  002A52  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
  9741  002A54  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
  9742  002A56  3424               	rlcf	___ftdiv@f1+1,w,c
  9743  002A58  3629               	rlcf	??___ftdiv& (0+255),f,c
  9744  002A5A  E301               	bnc	u5581
  9745  002A5C  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
  9746  002A5E                     u5581:
  9747  002A5E  5029               	movf	??___ftdiv,w,c
  9748  002A60  6E30               	movwf	___ftdiv@exp,c
  9749  002A62  5030               	movf	___ftdiv@exp,w,c
  9750  002A64  A4D8               	btfss	status,2,c
  9751  002A66  D007               	goto	l5242
  9752  002A68  0E00               	movlw	0
  9753  002A6A  6E23               	movwf	?___ftdiv,c
  9754  002A6C  0E00               	movlw	0
  9755  002A6E  6E24               	movwf	?___ftdiv+1,c
  9756  002A70  0E00               	movlw	0
  9757  002A72  6E25               	movwf	?___ftdiv+2,c
  9758  002A74  0012               	return	
  9759  002A76                     l5242:
  9760  002A76  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
  9761  002A7A  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
  9762  002A7C  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
  9763  002A7E  3427               	rlcf	___ftdiv@f2+1,w,c
  9764  002A80  3629               	rlcf	??___ftdiv& (0+255),f,c
  9765  002A82  E301               	bnc	u5601
  9766  002A84  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
  9767  002A86                     u5601:
  9768  002A86  5029               	movf	??___ftdiv,w,c
  9769  002A88  6E31               	movwf	___ftdiv@sign,c
  9770  002A8A  5031               	movf	___ftdiv@sign,w,c
  9771  002A8C  A4D8               	btfss	status,2,c
  9772  002A8E  D007               	goto	l5248
  9773  002A90  0E00               	movlw	0
  9774  002A92  6E23               	movwf	?___ftdiv,c
  9775  002A94  0E00               	movlw	0
  9776  002A96  6E24               	movwf	?___ftdiv+1,c
  9777  002A98  0E00               	movlw	0
  9778  002A9A  6E25               	movwf	?___ftdiv+2,c
  9779  002A9C  0012               	return	
  9780  002A9E                     l5248:
  9781  002A9E  0E00               	movlw	0
  9782  002AA0  6E2D               	movwf	___ftdiv@f3,c
  9783  002AA2  0E00               	movlw	0
  9784  002AA4  6E2E               	movwf	___ftdiv@f3+1,c
  9785  002AA6  0E00               	movlw	0
  9786  002AA8  6E2F               	movwf	___ftdiv@f3+2,c
  9787  002AAA  5031               	movf	___ftdiv@sign,w,c
  9788  002AAC  0F89               	addlw	137
  9789  002AAE  5E30               	subwf	___ftdiv@exp,f,c
  9790  002AB0  C025  F031         	movff	___ftdiv@f1+2,___ftdiv@sign
  9791  002AB4  5028               	movf	___ftdiv@f2+2,w,c
  9792  002AB6  1A31               	xorwf	___ftdiv@sign,f,c
  9793  002AB8  0E80               	movlw	128
  9794  002ABA  1631               	andwf	___ftdiv@sign,f,c
  9795  002ABC  8E24               	bsf	___ftdiv@f1+1,7,c
  9796  002ABE  0EFF               	movlw	255
  9797  002AC0  1623               	andwf	___ftdiv@f1,f,c
  9798  002AC2  0EFF               	movlw	255
  9799  002AC4  1624               	andwf	___ftdiv@f1+1,f,c
  9800  002AC6  0E00               	movlw	0
  9801  002AC8  1625               	andwf	___ftdiv@f1+2,f,c
  9802  002ACA  8E27               	bsf	___ftdiv@f2+1,7,c
  9803  002ACC  0EFF               	movlw	255
  9804  002ACE  1626               	andwf	___ftdiv@f2,f,c
  9805  002AD0  0EFF               	movlw	255
  9806  002AD2  1627               	andwf	___ftdiv@f2+1,f,c
  9807  002AD4  0E00               	movlw	0
  9808  002AD6  1628               	andwf	___ftdiv@f2+2,f,c
  9809  002AD8  0E18               	movlw	24
  9810  002ADA  6E2C               	movwf	___ftdiv@cntr,c
  9811  002ADC  D000               	goto	l5268
  9812  002ADE                     l5268:
  9813  002ADE  90D8               	bcf	status,0,c
  9814  002AE0  362D               	rlcf	___ftdiv@f3,f,c
  9815  002AE2  362E               	rlcf	___ftdiv@f3+1,f,c
  9816  002AE4  362F               	rlcf	___ftdiv@f3+2,f,c
  9817  002AE6  5026               	movf	___ftdiv@f2,w,c
  9818  002AE8  5C23               	subwf	___ftdiv@f1,w,c
  9819  002AEA  5027               	movf	___ftdiv@f2+1,w,c
  9820  002AEC  5824               	subwfb	___ftdiv@f1+1,w,c
  9821  002AEE  5028               	movf	___ftdiv@f2+2,w,c
  9822  002AF0  5825               	subwfb	___ftdiv@f1+2,w,c
  9823  002AF2  A0D8               	btfss	status,0,c
  9824  002AF4  D007               	goto	l1136
  9825  002AF6  5026               	movf	___ftdiv@f2,w,c
  9826  002AF8  5E23               	subwf	___ftdiv@f1,f,c
  9827  002AFA  5027               	movf	___ftdiv@f2+1,w,c
  9828  002AFC  5A24               	subwfb	___ftdiv@f1+1,f,c
  9829  002AFE  5028               	movf	___ftdiv@f2+2,w,c
  9830  002B00  5A25               	subwfb	___ftdiv@f1+2,f,c
  9831  002B02  802D               	bsf	___ftdiv@f3,0,c
  9832  002B04                     l1136:
  9833  002B04  90D8               	bcf	status,0,c
  9834  002B06  3623               	rlcf	___ftdiv@f1,f,c
  9835  002B08  3624               	rlcf	___ftdiv@f1+1,f,c
  9836  002B0A  3625               	rlcf	___ftdiv@f1+2,f,c
  9837  002B0C  2E2C               	decfsz	___ftdiv@cntr,f,c
  9838  002B0E  D7E7               	goto	l5268
  9839  002B10  D000               	goto	l5278
  9840  002B12                     l5278:
  9841  002B12  C02D  F017         	movff	___ftdiv@f3,___ftpack@arg
  9842  002B16  C02E  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9843  002B1A  C02F  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9844  002B1E  C030  F01A         	movff	___ftdiv@exp,___ftpack@exp
  9845  002B22  C031  F01B         	movff	___ftdiv@sign,___ftpack@sign
  9846  002B26  EC79  F016         	call	___ftpack	;wreg free
  9847  002B2A  C017  F023         	movff	?___ftpack,?___ftdiv
  9848  002B2E  C018  F024         	movff	?___ftpack+1,?___ftdiv+1
  9849  002B32  C019  F025         	movff	?___ftpack+2,?___ftdiv+2
  9850  002B36  0012               	return	
  9851  002B38  0012               	return		;funcret
  9852  002B3A                     __end_of___ftdiv:
  9853                           	opt stack 0
  9854                           tblptru	equ	0xFF8
  9855                           tblptrh	equ	0xFF7
  9856                           tblptrl	equ	0xFF6
  9857                           tablat	equ	0xFF5
  9858                           prodh	equ	0xFF4
  9859                           prodl	equ	0xFF3
  9860                           intcon	equ	0xFF2
  9861                           intcon2	equ	0xFF1
  9862                           postinc0	equ	0xFEE
  9863                           wreg	equ	0xFE8
  9864                           postinc1	equ	0xFE6
  9865                           postdec1	equ	0xFE5
  9866                           fsr1h	equ	0xFE2
  9867                           fsr1l	equ	0xFE1
  9868                           indf2	equ	0xFDF
  9869                           postinc2	equ	0xFDE
  9870                           postdec2	equ	0xFDD
  9871                           fsr2h	equ	0xFDA
  9872                           fsr2l	equ	0xFD9
  9873                           status	equ	0xFD8
  9874                           
  9875 ;; *************** function ___awtoft *****************
  9876 ;; Defined at:
  9877 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;  c               2   30[COMRAM] int 
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;  sign            1   33[COMRAM] unsigned char 
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  3   30[COMRAM] float 
  9884 ;; Registers used:
  9885 ;;		wreg, status,2, status,0, cstack
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9891 ;;      Params:         3       0       0       0       0       0       0
  9892 ;;      Locals:         1       0       0       0       0       0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0
  9894 ;;      Totals:         4       0       0       0       0       0       0
  9895 ;;Total ram usage:        4 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    5
  9898 ;; This function calls:
  9899 ;;		___ftpack
  9900 ;; This function is called by:
  9901 ;;		_Battery_Convert
  9902 ;;		_Temp_Convert
  9903 ;;		_log
  9904 ;;		_Current_Convert
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           	psect	text42
  9909  0034D0                     __ptext42:
  9910                           	opt stack 0
  9911  0034D0                     ___awtoft:
  9912                           	opt stack 23
  9913                           
  9914                           ;incstack = 0
  9915  0034D0  0E00               	movlw	0
  9916  0034D2  6E22               	movwf	___awtoft@sign,c
  9917  0034D4  AE20               	btfss	___awtoft@c+1,7,c
  9918  0034D6  D007               	goto	l4986
  9919  0034D8  6C1F               	negf	___awtoft@c,c
  9920  0034DA  1E20               	comf	___awtoft@c+1,f,c
  9921  0034DC  B0D8               	btfsc	status,0,c
  9922  0034DE  2A20               	incf	___awtoft@c+1,f,c
  9923  0034E0  0E01               	movlw	1
  9924  0034E2  6E22               	movwf	___awtoft@sign,c
  9925  0034E4  D000               	goto	l4986
  9926  0034E6                     l4986:
  9927  0034E6  C01F  F017         	movff	___awtoft@c,___ftpack@arg
  9928  0034EA  C020  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  9929  0034EE  6A19               	clrf	___ftpack@arg+2,c
  9930  0034F0  0E8E               	movlw	142
  9931  0034F2  6E1A               	movwf	___ftpack@exp,c
  9932  0034F4  C022  F01B         	movff	___awtoft@sign,___ftpack@sign
  9933  0034F8  EC79  F016         	call	___ftpack	;wreg free
  9934  0034FC  C017  F01F         	movff	?___ftpack,?___awtoft
  9935  003500  C018  F020         	movff	?___ftpack+1,?___awtoft+1
  9936  003504  C019  F021         	movff	?___ftpack+2,?___awtoft+2
  9937  003508  0012               	return	
  9938  00350A  0012               	return		;funcret
  9939  00350C                     __end_of___awtoft:
  9940                           	opt stack 0
  9941                           tblptru	equ	0xFF8
  9942                           tblptrh	equ	0xFF7
  9943                           tblptrl	equ	0xFF6
  9944                           tablat	equ	0xFF5
  9945                           prodh	equ	0xFF4
  9946                           prodl	equ	0xFF3
  9947                           intcon	equ	0xFF2
  9948                           intcon2	equ	0xFF1
  9949                           postinc0	equ	0xFEE
  9950                           wreg	equ	0xFE8
  9951                           postinc1	equ	0xFE6
  9952                           postdec1	equ	0xFE5
  9953                           fsr1h	equ	0xFE2
  9954                           fsr1l	equ	0xFE1
  9955                           indf2	equ	0xFDF
  9956                           postinc2	equ	0xFDE
  9957                           postdec2	equ	0xFDD
  9958                           fsr2h	equ	0xFDA
  9959                           fsr2l	equ	0xFD9
  9960                           status	equ	0xFD8
  9961                           
  9962 ;; *************** function ___ftpack *****************
  9963 ;; Defined at:
  9964 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  arg             3   22[COMRAM] unsigned um
  9967 ;;  exp             1   25[COMRAM] unsigned char 
  9968 ;;  sign            1   26[COMRAM] unsigned char 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  3   22[COMRAM] float 
  9973 ;; Registers used:
  9974 ;;		wreg, status,2, status,0
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9980 ;;      Params:         5       0       0       0       0       0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0
  9982 ;;      Temps:          3       0       0       0       0       0       0
  9983 ;;      Totals:         8       0       0       0       0       0       0
  9984 ;;Total ram usage:        8 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    4
  9987 ;; This function calls:
  9988 ;;		Nothing
  9989 ;; This function is called by:
  9990 ;;		___awtoft
  9991 ;;		___ftadd
  9992 ;;		___ftdiv
  9993 ;;		___ftmul
  9994 ;;		___lltoft
  9995 ;; This function uses a non-reentrant model
  9996 ;;
  9997                           
  9998                           	psect	text43
  9999  002CF2                     __ptext43:
 10000                           	opt stack 0
 10001  002CF2                     ___ftpack:
 10002                           	opt stack 23
 10003                           
 10004                           ;incstack = 0
 10005  002CF2  501A               	movf	___ftpack@exp,w,c
 10006  002CF4  B4D8               	btfsc	status,2,c
 10007  002CF6  D005               	goto	l4724
 10008  002CF8  5017               	movf	___ftpack@arg,w,c
 10009  002CFA  1018               	iorwf	___ftpack@arg+1,w,c
 10010  002CFC  1019               	iorwf	___ftpack@arg+2,w,c
 10011  002CFE  A4D8               	btfss	status,2,c
 10012  002D00  D00E               	goto	l4730
 10013  002D02                     l4724:
 10014  002D02  0E00               	movlw	0
 10015  002D04  6E17               	movwf	?___ftpack,c
 10016  002D06  0E00               	movlw	0
 10017  002D08  6E18               	movwf	?___ftpack+1,c
 10018  002D0A  0E00               	movlw	0
 10019  002D0C  6E19               	movwf	?___ftpack+2,c
 10020  002D0E  0012               	return	
 10021  002D10  D006               	goto	l4730
 10022  002D12                     l4728:
 10023  002D12  2A1A               	incf	___ftpack@exp,f,c
 10024  002D14  90D8               	bcf	status,0,c
 10025  002D16  3219               	rrcf	___ftpack@arg+2,f,c
 10026  002D18  3218               	rrcf	___ftpack@arg+1,f,c
 10027  002D1A  3217               	rrcf	___ftpack@arg,f,c
 10028  002D1C  D000               	goto	l4730
 10029  002D1E                     l4730:
 10030  002D1E  0E00               	movlw	0
 10031  002D20  1417               	andwf	___ftpack@arg,w,c
 10032  002D22  6E1C               	movwf	??___ftpack& (0+255),c
 10033  002D24  0E00               	movlw	0
 10034  002D26  1418               	andwf	___ftpack@arg+1,w,c
 10035  002D28  6E1D               	movwf	(??___ftpack+1)& (0+255),c
 10036  002D2A  0EFE               	movlw	254
 10037  002D2C  1419               	andwf	___ftpack@arg+2,w,c
 10038  002D2E  6E1E               	movwf	(??___ftpack+2)& (0+255),c
 10039  002D30  501C               	movf	??___ftpack,w,c
 10040  002D32  101D               	iorwf	??___ftpack+1,w,c
 10041  002D34  101E               	iorwf	??___ftpack+2,w,c
 10042  002D36  B4D8               	btfsc	status,2,c
 10043  002D38  D00E               	goto	l4736
 10044  002D3A  D7EB               	goto	l4728
 10045  002D3C  D00C               	goto	l4736
 10046  002D3E                     l4732:
 10047  002D3E  2A1A               	incf	___ftpack@exp,f,c
 10048  002D40  0E01               	movlw	1
 10049  002D42  2617               	addwf	___ftpack@arg,f,c
 10050  002D44  0E00               	movlw	0
 10051  002D46  2218               	addwfc	___ftpack@arg+1,f,c
 10052  002D48  0E00               	movlw	0
 10053  002D4A  2219               	addwfc	___ftpack@arg+2,f,c
 10054  002D4C  90D8               	bcf	status,0,c
 10055  002D4E  3219               	rrcf	___ftpack@arg+2,f,c
 10056  002D50  3218               	rrcf	___ftpack@arg+1,f,c
 10057  002D52  3217               	rrcf	___ftpack@arg,f,c
 10058  002D54  D000               	goto	l4736
 10059  002D56                     l4736:
 10060  002D56  0E00               	movlw	0
 10061  002D58  1417               	andwf	___ftpack@arg,w,c
 10062  002D5A  6E1C               	movwf	??___ftpack& (0+255),c
 10063  002D5C  0E00               	movlw	0
 10064  002D5E  1418               	andwf	___ftpack@arg+1,w,c
 10065  002D60  6E1D               	movwf	(??___ftpack+1)& (0+255),c
 10066  002D62  0EFF               	movlw	255
 10067  002D64  1419               	andwf	___ftpack@arg+2,w,c
 10068  002D66  6E1E               	movwf	(??___ftpack+2)& (0+255),c
 10069  002D68  501C               	movf	??___ftpack,w,c
 10070  002D6A  101D               	iorwf	??___ftpack+1,w,c
 10071  002D6C  101E               	iorwf	??___ftpack+2,w,c
 10072  002D6E  B4D8               	btfsc	status,2,c
 10073  002D70  D008               	goto	l4740
 10074  002D72  D7E5               	goto	l4732
 10075  002D74  D006               	goto	l4740
 10076  002D76                     l4738:
 10077  002D76  061A               	decf	___ftpack@exp,f,c
 10078  002D78  90D8               	bcf	status,0,c
 10079  002D7A  3617               	rlcf	___ftpack@arg,f,c
 10080  002D7C  3618               	rlcf	___ftpack@arg+1,f,c
 10081  002D7E  3619               	rlcf	___ftpack@arg+2,f,c
 10082  002D80  D000               	goto	l4740
 10083  002D82                     l4740:
 10084  002D82  BE18               	btfsc	___ftpack@arg+1,7,c
 10085  002D84  D004               	goto	l1072
 10086  002D86  0E02               	movlw	2
 10087  002D88  601A               	cpfslt	___ftpack@exp,c
 10088  002D8A  D7F5               	goto	l4738
 10089  002D8C  D000               	goto	l1072
 10090  002D8E                     l1072:
 10091  002D8E  B01A               	btfsc	___ftpack@exp,0,c
 10092  002D90  D002               	goto	l4746
 10093  002D92  9E18               	bcf	___ftpack@arg+1,7,c
 10094  002D94  D000               	goto	l4746
 10095  002D96                     l4746:
 10096  002D96  90D8               	bcf	status,0,c
 10097  002D98  321A               	rrcf	___ftpack@exp,f,c
 10098  002D9A  501A               	movf	___ftpack@exp,w,c
 10099  002D9C  1219               	iorwf	___ftpack@arg+2,f,c
 10100  002D9E  501B               	movf	___ftpack@sign,w,c
 10101  002DA0  B4D8               	btfsc	status,2,c
 10102  002DA2  D002               	goto	l4752
 10103  002DA4  8E19               	bsf	___ftpack@arg+2,7,c
 10104  002DA6  D000               	goto	l4752
 10105  002DA8                     l4752:
 10106  002DA8  C017  F017         	movff	___ftpack@arg,?___ftpack
 10107  002DAC  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
 10108  002DB0  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
 10109  002DB4  0012               	return	
 10110  002DB6  0012               	return		;funcret
 10111  002DB8                     __end_of___ftpack:
 10112                           	opt stack 0
 10113                           tblptru	equ	0xFF8
 10114                           tblptrh	equ	0xFF7
 10115                           tblptrl	equ	0xFF6
 10116                           tablat	equ	0xFF5
 10117                           prodh	equ	0xFF4
 10118                           prodl	equ	0xFF3
 10119                           intcon	equ	0xFF2
 10120                           intcon2	equ	0xFF1
 10121                           postinc0	equ	0xFEE
 10122                           wreg	equ	0xFE8
 10123                           postinc1	equ	0xFE6
 10124                           postdec1	equ	0xFE5
 10125                           fsr1h	equ	0xFE2
 10126                           fsr1l	equ	0xFE1
 10127                           indf2	equ	0xFDF
 10128                           postinc2	equ	0xFDE
 10129                           postdec2	equ	0xFDD
 10130                           fsr2h	equ	0xFDA
 10131                           fsr2l	equ	0xFD9
 10132                           status	equ	0xFD8
 10133                           
 10134 ;; *************** function _INTERRUPT_InterruptManager *****************
 10135 ;; Defined at:
 10136 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;		None
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;		None
 10141 ;; Return value:  Size  Location     Type
 10142 ;;		None               void
 10143 ;; Registers used:
 10144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10150 ;;      Params:         0       0       0       0       0       0       0
 10151 ;;      Locals:         0       0       0       0       0       0       0
 10152 ;;      Temps:         14       0       0       0       0       0       0
 10153 ;;      Totals:        14       0       0       0       0       0       0
 10154 ;;Total ram usage:       14 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    3
 10157 ;; This function calls:
 10158 ;;		_ADC_ISR
 10159 ;;		_EUSART1_Receive_ISR
 10160 ;;		_EUSART1_Transmit_ISR
 10161 ;;		_TMR1_ISR
 10162 ;; This function is called by:
 10163 ;;		Interrupt level 2
 10164 ;; This function uses a non-reentrant model
 10165 ;;
 10166                           
 10167                           	psect	intcode
 10168  000008                     __pintcode:
 10169                           	opt stack 0
 10170  000008                     _INTERRUPT_InterruptManager:
 10171                           	opt stack 22
 10172                           
 10173                           ;incstack = 0
 10174  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
 10175  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 10176  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 10177  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 10178  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 10179  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 10180  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 10181  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 10182  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
 10183  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
 10184  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 10185  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 10186  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 10187  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
 10188                           
 10189                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 10190  000040  BA9D               	btfsc	3997,5,c	;volatile
 10191  000042  AA9E               	btfss	3998,5,c	;volatile
 10192  000044  D003               	goto	i2l275
 10193                           
 10194                           ;interrupt_manager.c: 73: {
 10195                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
 10196  000046  EC04  F01B         	call	_EUSART1_Receive_ISR	;wreg free
 10197                           
 10198                           ;interrupt_manager.c: 75: }
 10199  00004A  D012               	goto	i2l283
 10200  00004C                     i2l275:
 10201                           
 10202                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 10203  00004C  BC9D               	btfsc	3997,6,c	;volatile
 10204  00004E  AC9E               	btfss	3998,6,c	;volatile
 10205  000050  D003               	goto	i2l277
 10206                           
 10207                           ;interrupt_manager.c: 77: {
 10208                           ;interrupt_manager.c: 78: ADC_ISR();
 10209  000052  ECA5  F00B         	call	_ADC_ISR	;wreg free
 10210                           
 10211                           ;interrupt_manager.c: 79: }
 10212  000056  D00C               	goto	i2l283
 10213  000058                     i2l277:
 10214                           
 10215                           ;interrupt_manager.c: 80: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 10216  000058  B89D               	btfsc	3997,4,c	;volatile
 10217  00005A  A89E               	btfss	3998,4,c	;volatile
 10218  00005C  D003               	goto	i2l279
 10219                           
 10220                           ;interrupt_manager.c: 81: {
 10221                           ;interrupt_manager.c: 82: EUSART1_Transmit_ISR();
 10222  00005E  ECBB  F01A         	call	_EUSART1_Transmit_ISR	;wreg free
 10223                           
 10224                           ;interrupt_manager.c: 83: }
 10225  000062  D006               	goto	i2l283
 10226  000064                     i2l279:
 10227                           
 10228                           ;interrupt_manager.c: 84: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 10229  000064  B09D               	btfsc	3997,0,c	;volatile
 10230  000066  A09E               	btfss	3998,0,c	;volatile
 10231  000068  D003               	goto	i2l283
 10232                           
 10233                           ;interrupt_manager.c: 85: {
 10234                           ;interrupt_manager.c: 86: TMR1_ISR();
 10235  00006A  EC05  F01A         	call	_TMR1_ISR	;wreg free
 10236                           
 10237                           ;interrupt_manager.c: 88: else
 10238                           ;interrupt_manager.c: 89: {
 10239                           
 10240                           ;interrupt_manager.c: 87: }
 10241  00006E  D000               	goto	i2l283
 10242  000070                     i2l283:
 10243  000070  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 10244  000074  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 10245  000078  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 10246  00007C  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 10247  000080  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 10248  000084  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 10249  000088  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 10250  00008C  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 10251  000090  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 10252  000094  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 10253  000098  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 10254  00009C  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 10255  0000A0  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 10256  0000A4  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 10257  0000A8  0011               	retfie		f
 10258  0000AA                     __end_of_INTERRUPT_InterruptManager:
 10259                           	opt stack 0
 10260                           pclatu	equ	0xFFB
 10261                           pclath	equ	0xFFA
 10262                           tblptru	equ	0xFF8
 10263                           tblptrh	equ	0xFF7
 10264                           tblptrl	equ	0xFF6
 10265                           tablat	equ	0xFF5
 10266                           prodh	equ	0xFF4
 10267                           prodl	equ	0xFF3
 10268                           intcon	equ	0xFF2
 10269                           intcon2	equ	0xFF1
 10270                           postinc0	equ	0xFEE
 10271                           fsr0h	equ	0xFEA
 10272                           fsr0l	equ	0xFE9
 10273                           wreg	equ	0xFE8
 10274                           postinc1	equ	0xFE6
 10275                           postdec1	equ	0xFE5
 10276                           fsr1h	equ	0xFE2
 10277                           fsr1l	equ	0xFE1
 10278                           indf2	equ	0xFDF
 10279                           postinc2	equ	0xFDE
 10280                           postdec2	equ	0xFDD
 10281                           fsr2h	equ	0xFDA
 10282                           fsr2l	equ	0xFD9
 10283                           status	equ	0xFD8
 10284                           
 10285 ;; *************** function _TMR1_ISR *****************
 10286 ;; Defined at:
 10287 ;;		line 117 in file "mcc_generated_files/tmr1.c"
 10288 ;; Parameters:    Size  Location     Type
 10289 ;;		None
 10290 ;; Auto vars:     Size  Location     Type
 10291 ;;		None
 10292 ;; Return value:  Size  Location     Type
 10293 ;;		None               void
 10294 ;; Registers used:
 10295 ;;		wreg, status,2, status,0, cstack
 10296 ;; Tracked objects:
 10297 ;;		On entry : 0/0
 10298 ;;		On exit  : 0/0
 10299 ;;		Unchanged: 0/0
 10300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10301 ;;      Params:         0       0       0       0       0       0       0
 10302 ;;      Locals:         0       0       0       0       0       0       0
 10303 ;;      Temps:          0       0       0       0       0       0       0
 10304 ;;      Totals:         0       0       0       0       0       0       0
 10305 ;;Total ram usage:        0 bytes
 10306 ;; Hardware stack levels used:    1
 10307 ;; Hardware stack levels required when called:    2
 10308 ;; This function calls:
 10309 ;;		_Battery_Read
 10310 ;;		_Temp_Read
 10311 ;; This function is called by:
 10312 ;;		_INTERRUPT_InterruptManager
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           	psect	text45
 10317  00340A                     __ptext45:
 10318                           	opt stack 0
 10319  00340A                     _TMR1_ISR:
 10320                           	opt stack 22
 10321                           
 10322                           ;tmr1.c: 119: static volatile unsigned int CountCallBack = 0;
 10323                           ;tmr1.c: 123: PIR1bits.TMR1IF = 0;
 10324                           
 10325                           ;incstack = 0
 10326  00340A  909E               	bcf	3998,0,c	;volatile
 10327                           
 10328                           ;tmr1.c: 126: TMR1H = (timer1ReloadVal >> 8);
 10329  00340C  5048               	movf	_timer1ReloadVal+1,w,c	;volatile
 10330  00340E  6ECF               	movwf	4047,c	;volatile
 10331                           
 10332                           ;tmr1.c: 127: TMR1L = (uint8_t) timer1ReloadVal;
 10333  003410  C047  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 10334                           
 10335                           ;tmr1.c: 130: if (++CountCallBack >= 4)
 10336  003414  4A3B               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
 10337  003416  2A3C               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
 10338  003418  503C               	movf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 10339  00341A  E104               	bnz	i2u359_40
 10340  00341C  0E04               	movlw	4
 10341  00341E  5C3B               	subwf	TMR1_ISR@CountCallBack,w,c	;volatile
 10342  003420  A0D8               	btfss	status,0,c
 10343  003422  D007               	goto	i2l3892
 10344  003424                     i2u359_40:
 10345                           
 10346                           ;tmr1.c: 131: {
 10347                           ;tmr1.c: 133: do { LATA4 = ~LATA4; } while(0);
 10348  003424  7889               	btg	3977,4,c	;volatile
 10349  003426  D000               	goto	i2l3888
 10350  003428                     i2l3888:
 10351                           
 10352                           ;tmr1.c: 136: CountCallBack = 0;
 10353  003428  0E00               	movlw	0
 10354  00342A  6E3C               	movwf	TMR1_ISR@CountCallBack+1,c	;volatile
 10355  00342C  0E00               	movlw	0
 10356  00342E  6E3B               	movwf	TMR1_ISR@CountCallBack,c	;volatile
 10357  003430  D000               	goto	i2l3892
 10358  003432                     i2l3892:
 10359                           
 10360                           ;tmr1.c: 141: }
 10361                           ;tmr1.c: 142: if(CountCallBack == 2)
 10362  003432  0E02               	movlw	2
 10363  003434  183B               	xorwf	TMR1_ISR@CountCallBack,w,c	;volatile
 10364  003436  103C               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 10365  003438  A4D8               	btfss	status,2,c
 10366  00343A  D003               	goto	i2l3896
 10367                           
 10368                           ;tmr1.c: 143: {
 10369                           ;tmr1.c: 144: Battery_Read();
 10370  00343C  ECAD  F01B         	call	_Battery_Read	;wreg free
 10371  003440  D000               	goto	i2l3896
 10372  003442                     i2l3896:
 10373                           
 10374                           ;tmr1.c: 145: }
 10375                           ;tmr1.c: 146: if(CountCallBack == 3)
 10376  003442  0E03               	movlw	3
 10377  003444  183B               	xorwf	TMR1_ISR@CountCallBack,w,c	;volatile
 10378  003446  103C               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 10379  003448  A4D8               	btfss	status,2,c
 10380  00344A  0012               	return	
 10381                           
 10382                           ;tmr1.c: 147: {
 10383                           ;tmr1.c: 148: Temp_Read();
 10384  00344C  ECA1  F01B         	call	_Temp_Read	;wreg free
 10385  003450  0012               	return	
 10386  003452  0012               	return		;funcret
 10387  003454                     __end_of_TMR1_ISR:
 10388                           	opt stack 0
 10389                           pclatu	equ	0xFFB
 10390                           pclath	equ	0xFFA
 10391                           tblptru	equ	0xFF8
 10392                           tblptrh	equ	0xFF7
 10393                           tblptrl	equ	0xFF6
 10394                           tablat	equ	0xFF5
 10395                           prodh	equ	0xFF4
 10396                           prodl	equ	0xFF3
 10397                           intcon	equ	0xFF2
 10398                           intcon2	equ	0xFF1
 10399                           postinc0	equ	0xFEE
 10400                           fsr0h	equ	0xFEA
 10401                           fsr0l	equ	0xFE9
 10402                           wreg	equ	0xFE8
 10403                           postinc1	equ	0xFE6
 10404                           postdec1	equ	0xFE5
 10405                           fsr1h	equ	0xFE2
 10406                           fsr1l	equ	0xFE1
 10407                           indf2	equ	0xFDF
 10408                           postinc2	equ	0xFDE
 10409                           postdec2	equ	0xFDD
 10410                           fsr2h	equ	0xFDA
 10411                           fsr2l	equ	0xFD9
 10412                           status	equ	0xFD8
 10413                           
 10414 ;; *************** function _Temp_Read *****************
 10415 ;; Defined at:
 10416 ;;		line 27 in file "Tempeture.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;		None
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;		None
 10421 ;; Return value:  Size  Location     Type
 10422 ;;		None               void
 10423 ;; Registers used:
 10424 ;;		wreg, status,2, status,0, cstack
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10430 ;;      Params:         0       0       0       0       0       0       0
 10431 ;;      Locals:         0       0       0       0       0       0       0
 10432 ;;      Temps:          0       0       0       0       0       0       0
 10433 ;;      Totals:         0       0       0       0       0       0       0
 10434 ;;Total ram usage:        0 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    1
 10437 ;; This function calls:
 10438 ;;		_ADC_StartConversion
 10439 ;; This function is called by:
 10440 ;;		_TMR1_ISR
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           	psect	text46
 10445  003742                     __ptext46:
 10446                           	opt stack 0
 10447  003742                     _Temp_Read:
 10448                           	opt stack 22
 10449                           
 10450                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
 10451                           
 10452                           ;incstack = 0
 10453  003742  0E00               	movlw	0
 10454  003744  6E3E               	movwf	_ADC_Buffer_Point+1,c
 10455  003746  0E00               	movlw	0
 10456  003748  6E3D               	movwf	_ADC_Buffer_Point,c
 10457                           
 10458                           ;Tempeture.c: 31: Temp_Aquire = 1;
 10459  00374A  0E01               	movlw	1
 10460  00374C  6E40               	movwf	_Temp_Aquire,c
 10461                           
 10462                           ;Tempeture.c: 32: ADCON1 = 0x80;
 10463  00374E  0E80               	movlw	128
 10464  003750  6EC1               	movwf	4033,c	;volatile
 10465                           
 10466                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
 10467  003752  0E0E               	movlw	14
 10468  003754  EC88  F01B         	call	_ADC_StartConversion
 10469  003758  0012               	return		;funcret
 10470  00375A                     __end_of_Temp_Read:
 10471                           	opt stack 0
 10472                           pclatu	equ	0xFFB
 10473                           pclath	equ	0xFFA
 10474                           tblptru	equ	0xFF8
 10475                           tblptrh	equ	0xFF7
 10476                           tblptrl	equ	0xFF6
 10477                           tablat	equ	0xFF5
 10478                           prodh	equ	0xFF4
 10479                           prodl	equ	0xFF3
 10480                           intcon	equ	0xFF2
 10481                           intcon2	equ	0xFF1
 10482                           postinc0	equ	0xFEE
 10483                           fsr0h	equ	0xFEA
 10484                           fsr0l	equ	0xFE9
 10485                           wreg	equ	0xFE8
 10486                           postinc1	equ	0xFE6
 10487                           postdec1	equ	0xFE5
 10488                           fsr1h	equ	0xFE2
 10489                           fsr1l	equ	0xFE1
 10490                           indf2	equ	0xFDF
 10491                           postinc2	equ	0xFDE
 10492                           postdec2	equ	0xFDD
 10493                           fsr2h	equ	0xFDA
 10494                           fsr2l	equ	0xFD9
 10495                           status	equ	0xFD8
 10496                           
 10497 ;; *************** function _Battery_Read *****************
 10498 ;; Defined at:
 10499 ;;		line 24 in file "Battery.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;		None
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;		None
 10504 ;; Return value:  Size  Location     Type
 10505 ;;		None               void
 10506 ;; Registers used:
 10507 ;;		wreg, status,2, status,0, cstack
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10513 ;;      Params:         0       0       0       0       0       0       0
 10514 ;;      Locals:         0       0       0       0       0       0       0
 10515 ;;      Temps:          0       0       0       0       0       0       0
 10516 ;;      Totals:         0       0       0       0       0       0       0
 10517 ;;Total ram usage:        0 bytes
 10518 ;; Hardware stack levels used:    1
 10519 ;; Hardware stack levels required when called:    1
 10520 ;; This function calls:
 10521 ;;		_ADC_StartConversion
 10522 ;; This function is called by:
 10523 ;;		_TMR1_ISR
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           	psect	text47
 10528  00375A                     __ptext47:
 10529                           	opt stack 0
 10530  00375A                     _Battery_Read:
 10531                           	opt stack 22
 10532                           
 10533                           ;Battery.c: 27: ADC_Buffer_Point = 0;
 10534                           
 10535                           ;incstack = 0
 10536  00375A  0E00               	movlw	0
 10537  00375C  6E3E               	movwf	_ADC_Buffer_Point+1,c
 10538  00375E  0E00               	movlw	0
 10539  003760  6E3D               	movwf	_ADC_Buffer_Point,c
 10540                           
 10541                           ;Battery.c: 28: Volt_Aquire = 1;
 10542  003762  0E01               	movlw	1
 10543  003764  6E41               	movwf	_Volt_Aquire,c
 10544                           
 10545                           ;Battery.c: 29: ADCON1 = 0x80;
 10546  003766  0E80               	movlw	128
 10547  003768  6EC1               	movwf	4033,c	;volatile
 10548                           
 10549                           ;Battery.c: 30: ADC_StartConversion(AN_CELL1);
 10550  00376A  0E07               	movlw	7
 10551  00376C  EC88  F01B         	call	_ADC_StartConversion
 10552  003770  0012               	return		;funcret
 10553  003772                     __end_of_Battery_Read:
 10554                           	opt stack 0
 10555                           pclatu	equ	0xFFB
 10556                           pclath	equ	0xFFA
 10557                           tblptru	equ	0xFF8
 10558                           tblptrh	equ	0xFF7
 10559                           tblptrl	equ	0xFF6
 10560                           tablat	equ	0xFF5
 10561                           prodh	equ	0xFF4
 10562                           prodl	equ	0xFF3
 10563                           intcon	equ	0xFF2
 10564                           intcon2	equ	0xFF1
 10565                           postinc0	equ	0xFEE
 10566                           fsr0h	equ	0xFEA
 10567                           fsr0l	equ	0xFE9
 10568                           wreg	equ	0xFE8
 10569                           postinc1	equ	0xFE6
 10570                           postdec1	equ	0xFE5
 10571                           fsr1h	equ	0xFE2
 10572                           fsr1l	equ	0xFE1
 10573                           indf2	equ	0xFDF
 10574                           postinc2	equ	0xFDE
 10575                           postdec2	equ	0xFDD
 10576                           fsr2h	equ	0xFDA
 10577                           fsr2l	equ	0xFD9
 10578                           status	equ	0xFD8
 10579                           
 10580 ;; *************** function _EUSART1_Transmit_ISR *****************
 10581 ;; Defined at:
 10582 ;;		line 173 in file "mcc_generated_files/eusart1.c"
 10583 ;; Parameters:    Size  Location     Type
 10584 ;;		None
 10585 ;; Auto vars:     Size  Location     Type
 10586 ;;		None
 10587 ;; Return value:  Size  Location     Type
 10588 ;;		None               void
 10589 ;; Registers used:
 10590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10591 ;; Tracked objects:
 10592 ;;		On entry : 0/0
 10593 ;;		On exit  : 0/0
 10594 ;;		Unchanged: 0/0
 10595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10596 ;;      Params:         0       0       0       0       0       0       0
 10597 ;;      Locals:         0       0       0       0       0       0       0
 10598 ;;      Temps:          0       0       0       0       0       0       0
 10599 ;;      Totals:         0       0       0       0       0       0       0
 10600 ;;Total ram usage:        0 bytes
 10601 ;; Hardware stack levels used:    1
 10602 ;; This function calls:
 10603 ;;		Nothing
 10604 ;; This function is called by:
 10605 ;;		_INTERRUPT_InterruptManager
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           	psect	text48
 10610  003576                     __ptext48:
 10611                           	opt stack 0
 10612  003576                     _EUSART1_Transmit_ISR:
 10613                           	opt stack 24
 10614                           
 10615                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 10616                           
 10617                           ;incstack = 0
 10618  003576  0E08               	movlw	8
 10619  003578  6049               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 10620  00357A  D013               	goto	i2l134
 10621                           
 10622                           ;eusart1.c: 178: {
 10623                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
 10624  00357C  5046               	movf	_eusart1TxTail,w,c
 10625  00357E  0D01               	mullw	1
 10626  003580  0E9A               	movlw	low _eusart1TxBuffer
 10627  003582  24F3               	addwf	prodl,w,c
 10628  003584  6ED9               	movwf	fsr2l,c
 10629  003586  0E00               	movlw	high _eusart1TxBuffer
 10630  003588  20F4               	addwfc	prodh,w,c
 10631  00358A  6EDA               	movwf	fsr2h,c
 10632  00358C  50DF               	movf	indf2,w,c
 10633  00358E  6EAD               	movwf	4013,c	;volatile
 10634  003590  2A46               	incf	_eusart1TxTail,f,c
 10635                           
 10636                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 10637  003592  0E07               	movlw	7
 10638  003594  6446               	cpfsgt	_eusart1TxTail,c
 10639  003596  D003               	goto	i2l3930
 10640                           
 10641                           ;eusart1.c: 181: {
 10642                           ;eusart1.c: 182: eusart1TxTail = 0;
 10643  003598  0E00               	movlw	0
 10644  00359A  6E46               	movwf	_eusart1TxTail,c
 10645  00359C  D000               	goto	i2l3930
 10646  00359E                     i2l3930:
 10647                           
 10648                           ;eusart1.c: 183: }
 10649                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
 10650  00359E  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 10651                           
 10652                           ;eusart1.c: 185: }
 10653  0035A0  0012               	return	
 10654  0035A2                     i2l134:
 10655                           
 10656                           ;eusart1.c: 186: else
 10657                           ;eusart1.c: 187: {
 10658                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
 10659  0035A2  989D               	bcf	3997,4,c	;volatile
 10660  0035A4  0012               	return	
 10661  0035A6  0012               	return		;funcret
 10662  0035A8                     __end_of_EUSART1_Transmit_ISR:
 10663                           	opt stack 0
 10664                           pclatu	equ	0xFFB
 10665                           pclath	equ	0xFFA
 10666                           tblptru	equ	0xFF8
 10667                           tblptrh	equ	0xFF7
 10668                           tblptrl	equ	0xFF6
 10669                           tablat	equ	0xFF5
 10670                           prodh	equ	0xFF4
 10671                           prodl	equ	0xFF3
 10672                           intcon	equ	0xFF2
 10673                           intcon2	equ	0xFF1
 10674                           postinc0	equ	0xFEE
 10675                           fsr0h	equ	0xFEA
 10676                           fsr0l	equ	0xFE9
 10677                           wreg	equ	0xFE8
 10678                           postinc1	equ	0xFE6
 10679                           postdec1	equ	0xFE5
 10680                           fsr1h	equ	0xFE2
 10681                           fsr1l	equ	0xFE1
 10682                           indf2	equ	0xFDF
 10683                           postinc2	equ	0xFDE
 10684                           postdec2	equ	0xFDD
 10685                           fsr2h	equ	0xFDA
 10686                           fsr2l	equ	0xFD9
 10687                           status	equ	0xFD8
 10688                           
 10689 ;; *************** function _EUSART1_Receive_ISR *****************
 10690 ;; Defined at:
 10691 ;;		line 192 in file "mcc_generated_files/eusart1.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;		None
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;		None
 10696 ;; Return value:  Size  Location     Type
 10697 ;;		None               void
 10698 ;; Registers used:
 10699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10705 ;;      Params:         0       0       0       0       0       0       0
 10706 ;;      Locals:         0       0       0       0       0       0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0
 10708 ;;      Totals:         0       0       0       0       0       0       0
 10709 ;;Total ram usage:        0 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; This function calls:
 10712 ;;		Nothing
 10713 ;; This function is called by:
 10714 ;;		_INTERRUPT_InterruptManager
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           	psect	text49
 10719  003608                     __ptext49:
 10720                           	opt stack 0
 10721  003608                     _EUSART1_Receive_ISR:
 10722                           	opt stack 24
 10723                           
 10724                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
 10725                           
 10726                           ;incstack = 0
 10727  003608  A2AB               	btfss	4011,1,c	;volatile
 10728  00360A  D003               	goto	i2l3936
 10729                           
 10730                           ;eusart1.c: 195: {
 10731                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
 10732  00360C  98AB               	bcf	4011,4,c	;volatile
 10733                           
 10734                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
 10735  00360E  88AB               	bsf	4011,4,c	;volatile
 10736  003610  D000               	goto	i2l3936
 10737  003612                     i2l3936:
 10738                           
 10739                           ;eusart1.c: 200: }
 10740                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
 10741  003612  5043               	movf	_eusart1RxHead,w,c
 10742  003614  0D01               	mullw	1
 10743  003616  0E92               	movlw	low _eusart1RxBuffer
 10744  003618  24F3               	addwf	prodl,w,c
 10745  00361A  6ED9               	movwf	fsr2l,c
 10746  00361C  0E00               	movlw	high _eusart1RxBuffer
 10747  00361E  20F4               	addwfc	prodh,w,c
 10748  003620  6EDA               	movwf	fsr2h,c
 10749  003622  CFAE FFDF          	movff	4014,indf2	;volatile
 10750  003626  2A43               	incf	_eusart1RxHead,f,c
 10751                           
 10752                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 10753  003628  0E07               	movlw	7
 10754  00362A  6443               	cpfsgt	_eusart1RxHead,c
 10755  00362C  D003               	goto	i2l3944
 10756                           
 10757                           ;eusart1.c: 205: {
 10758                           ;eusart1.c: 206: eusart1RxHead = 0;
 10759  00362E  0E00               	movlw	0
 10760  003630  6E43               	movwf	_eusart1RxHead,c
 10761  003632  D000               	goto	i2l3944
 10762  003634                     i2l3944:
 10763                           
 10764                           ;eusart1.c: 207: }
 10765                           ;eusart1.c: 208: eusart1RxCount++;
 10766  003634  2A42               	incf	_eusart1RxCount,f,c	;volatile
 10767  003636  0012               	return		;funcret
 10768  003638                     __end_of_EUSART1_Receive_ISR:
 10769                           	opt stack 0
 10770                           pclatu	equ	0xFFB
 10771                           pclath	equ	0xFFA
 10772                           tblptru	equ	0xFF8
 10773                           tblptrh	equ	0xFF7
 10774                           tblptrl	equ	0xFF6
 10775                           tablat	equ	0xFF5
 10776                           prodh	equ	0xFF4
 10777                           prodl	equ	0xFF3
 10778                           intcon	equ	0xFF2
 10779                           intcon2	equ	0xFF1
 10780                           postinc0	equ	0xFEE
 10781                           fsr0h	equ	0xFEA
 10782                           fsr0l	equ	0xFE9
 10783                           wreg	equ	0xFE8
 10784                           postinc1	equ	0xFE6
 10785                           postdec1	equ	0xFE5
 10786                           fsr1h	equ	0xFE2
 10787                           fsr1l	equ	0xFE1
 10788                           indf2	equ	0xFDF
 10789                           postinc2	equ	0xFDE
 10790                           postdec2	equ	0xFDD
 10791                           fsr2h	equ	0xFDA
 10792                           fsr2l	equ	0xFD9
 10793                           status	equ	0xFD8
 10794                           
 10795 ;; *************** function _ADC_ISR *****************
 10796 ;; Defined at:
 10797 ;;		line 86 in file "mcc_generated_files/adc.c"
 10798 ;; Parameters:    Size  Location     Type
 10799 ;;		None
 10800 ;; Auto vars:     Size  Location     Type
 10801 ;;  ADC_Result      2    6[COMRAM] int 
 10802 ;; Return value:  Size  Location     Type
 10803 ;;		None               void
 10804 ;; Registers used:
 10805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10806 ;; Tracked objects:
 10807 ;;		On entry : 0/0
 10808 ;;		On exit  : 0/0
 10809 ;;		Unchanged: 0/0
 10810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10811 ;;      Params:         0       0       0       0       0       0       0
 10812 ;;      Locals:         2       0       0       0       0       0       0
 10813 ;;      Temps:          2       0       0       0       0       0       0
 10814 ;;      Totals:         4       0       0       0       0       0       0
 10815 ;;Total ram usage:        4 bytes
 10816 ;; Hardware stack levels used:    1
 10817 ;; Hardware stack levels required when called:    1
 10818 ;; This function calls:
 10819 ;;		_ADC_GetConversionResult
 10820 ;;		_ADC_StartConversion
 10821 ;;		_Set_4051
 10822 ;; This function is called by:
 10823 ;;		_INTERRUPT_InterruptManager
 10824 ;; This function uses a non-reentrant model
 10825 ;;
 10826                           
 10827                           	psect	text50
 10828  00174A                     __ptext50:
 10829                           	opt stack 0
 10830  00174A                     _ADC_ISR:
 10831                           	opt stack 23
 10832                           
 10833                           ;adc.c: 89: PIR1bits.ADIF = 0;
 10834                           
 10835                           ;incstack = 0
 10836  00174A  9C9E               	bcf	3998,6,c	;volatile
 10837                           
 10838                           ;adc.c: 90: int ADC_Result = 0;
 10839  00174C  0E00               	movlw	0
 10840  00174E  6E08               	movwf	ADC_ISR@ADC_Result+1,c
 10841  001750  0E00               	movlw	0
 10842  001752  6E07               	movwf	ADC_ISR@ADC_Result,c
 10843                           
 10844                           ;adc.c: 91: if (Temp_Aquire){
 10845  001754  5040               	movf	_Temp_Aquire,w,c
 10846  001756  B4D8               	btfsc	status,2,c
 10847  001758  D0E2               	goto	i2l4006
 10848                           
 10849                           ;adc.c: 93: ADC_Result = ADC_GetConversionResult();
 10850  00175A  ECB9  F01B         	call	_ADC_GetConversionResult	;wreg free
 10851  00175E  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 10852  001762  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 10853                           
 10854                           ;adc.c: 94: switch ( ADC_Buffer_Point )
 10855  001766  D0B6               	goto	i2l4002
 10856  001768                     i2l3952:
 10857                           
 10858                           ;adc.c: 97: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10859  001768  90D8               	bcf	status,0,c
 10860  00176A  343D               	rlcf	_ADC_Buffer_Point,w,c
 10861  00176C  6ED9               	movwf	fsr2l,c
 10862  00176E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 10863  001770  6EDA               	movwf	fsr2h,c
 10864  001772  0EA8               	movlw	low _Temp_Adc
 10865  001774  26D9               	addwf	fsr2l,f,c
 10866  001776  0E00               	movlw	high _Temp_Adc
 10867  001778  22DA               	addwfc	fsr2h,f,c
 10868  00177A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10869  00177E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10870                           
 10871                           ;adc.c: 98: Set_4051(1);
 10872  001782  0E00               	movlw	0
 10873  001784  6E02               	movwf	Set_4051@Channel+1,c
 10874  001786  0E01               	movlw	1
 10875  001788  6E01               	movwf	Set_4051@Channel,c
 10876  00178A  EC86  F01A         	call	_Set_4051	;wreg free
 10877                           
 10878                           ;adc.c: 99: ADC_StartConversion(Temp1);
 10879  00178E  0E0E               	movlw	14
 10880  001790  EC88  F01B         	call	_ADC_StartConversion
 10881                           
 10882                           ;adc.c: 100: break;
 10883  001794  D0C1               	goto	i2l4004
 10884  001796                     i2l3958:
 10885                           
 10886                           ;adc.c: 102: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10887  001796  90D8               	bcf	status,0,c
 10888  001798  343D               	rlcf	_ADC_Buffer_Point,w,c
 10889  00179A  6ED9               	movwf	fsr2l,c
 10890  00179C  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 10891  00179E  6EDA               	movwf	fsr2h,c
 10892  0017A0  0EA8               	movlw	low _Temp_Adc
 10893  0017A2  26D9               	addwf	fsr2l,f,c
 10894  0017A4  0E00               	movlw	high _Temp_Adc
 10895  0017A6  22DA               	addwfc	fsr2h,f,c
 10896  0017A8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10897  0017AC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10898                           
 10899                           ;adc.c: 103: Set_4051(2);
 10900  0017B0  0E00               	movlw	0
 10901  0017B2  6E02               	movwf	Set_4051@Channel+1,c
 10902  0017B4  0E02               	movlw	2
 10903  0017B6  6E01               	movwf	Set_4051@Channel,c
 10904  0017B8  EC86  F01A         	call	_Set_4051	;wreg free
 10905                           
 10906                           ;adc.c: 104: ADC_StartConversion(Temp1);
 10907  0017BC  0E0E               	movlw	14
 10908  0017BE  EC88  F01B         	call	_ADC_StartConversion
 10909                           
 10910                           ;adc.c: 105: break;
 10911  0017C2  D0AA               	goto	i2l4004
 10912  0017C4                     i2l3964:
 10913                           
 10914                           ;adc.c: 107: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10915  0017C4  90D8               	bcf	status,0,c
 10916  0017C6  343D               	rlcf	_ADC_Buffer_Point,w,c
 10917  0017C8  6ED9               	movwf	fsr2l,c
 10918  0017CA  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 10919  0017CC  6EDA               	movwf	fsr2h,c
 10920  0017CE  0EA8               	movlw	low _Temp_Adc
 10921  0017D0  26D9               	addwf	fsr2l,f,c
 10922  0017D2  0E00               	movlw	high _Temp_Adc
 10923  0017D4  22DA               	addwfc	fsr2h,f,c
 10924  0017D6  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10925  0017DA  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10926                           
 10927                           ;adc.c: 108: Set_4051(3);
 10928  0017DE  0E00               	movlw	0
 10929  0017E0  6E02               	movwf	Set_4051@Channel+1,c
 10930  0017E2  0E03               	movlw	3
 10931  0017E4  6E01               	movwf	Set_4051@Channel,c
 10932  0017E6  EC86  F01A         	call	_Set_4051	;wreg free
 10933                           
 10934                           ;adc.c: 109: ADC_StartConversion(Temp1);
 10935  0017EA  0E0E               	movlw	14
 10936  0017EC  EC88  F01B         	call	_ADC_StartConversion
 10937                           
 10938                           ;adc.c: 110: break;
 10939  0017F0  D093               	goto	i2l4004
 10940  0017F2                     i2l3970:
 10941                           
 10942                           ;adc.c: 112: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10943  0017F2  90D8               	bcf	status,0,c
 10944  0017F4  343D               	rlcf	_ADC_Buffer_Point,w,c
 10945  0017F6  6ED9               	movwf	fsr2l,c
 10946  0017F8  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 10947  0017FA  6EDA               	movwf	fsr2h,c
 10948  0017FC  0EA8               	movlw	low _Temp_Adc
 10949  0017FE  26D9               	addwf	fsr2l,f,c
 10950  001800  0E00               	movlw	high _Temp_Adc
 10951  001802  22DA               	addwfc	fsr2h,f,c
 10952  001804  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10953  001808  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10954                           
 10955                           ;adc.c: 113: Set_4051(4);
 10956  00180C  0E00               	movlw	0
 10957  00180E  6E02               	movwf	Set_4051@Channel+1,c
 10958  001810  0E04               	movlw	4
 10959  001812  6E01               	movwf	Set_4051@Channel,c
 10960  001814  EC86  F01A         	call	_Set_4051	;wreg free
 10961                           
 10962                           ;adc.c: 114: ADC_StartConversion(Temp1);
 10963  001818  0E0E               	movlw	14
 10964  00181A  EC88  F01B         	call	_ADC_StartConversion
 10965                           
 10966                           ;adc.c: 115: break;
 10967  00181E  D07C               	goto	i2l4004
 10968  001820                     i2l3976:
 10969                           
 10970                           ;adc.c: 117: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10971  001820  90D8               	bcf	status,0,c
 10972  001822  343D               	rlcf	_ADC_Buffer_Point,w,c
 10973  001824  6ED9               	movwf	fsr2l,c
 10974  001826  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 10975  001828  6EDA               	movwf	fsr2h,c
 10976  00182A  0EA8               	movlw	low _Temp_Adc
 10977  00182C  26D9               	addwf	fsr2l,f,c
 10978  00182E  0E00               	movlw	high _Temp_Adc
 10979  001830  22DA               	addwfc	fsr2h,f,c
 10980  001832  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10981  001836  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10982                           
 10983                           ;adc.c: 118: Set_4051(5);
 10984  00183A  0E00               	movlw	0
 10985  00183C  6E02               	movwf	Set_4051@Channel+1,c
 10986  00183E  0E05               	movlw	5
 10987  001840  6E01               	movwf	Set_4051@Channel,c
 10988  001842  EC86  F01A         	call	_Set_4051	;wreg free
 10989                           
 10990                           ;adc.c: 119: ADC_StartConversion(Temp1);
 10991  001846  0E0E               	movlw	14
 10992  001848  EC88  F01B         	call	_ADC_StartConversion
 10993                           
 10994                           ;adc.c: 120: break;
 10995  00184C  D065               	goto	i2l4004
 10996  00184E                     i2l3982:
 10997                           
 10998                           ;adc.c: 122: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10999  00184E  90D8               	bcf	status,0,c
 11000  001850  343D               	rlcf	_ADC_Buffer_Point,w,c
 11001  001852  6ED9               	movwf	fsr2l,c
 11002  001854  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11003  001856  6EDA               	movwf	fsr2h,c
 11004  001858  0EA8               	movlw	low _Temp_Adc
 11005  00185A  26D9               	addwf	fsr2l,f,c
 11006  00185C  0E00               	movlw	high _Temp_Adc
 11007  00185E  22DA               	addwfc	fsr2h,f,c
 11008  001860  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11009  001864  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11010                           
 11011                           ;adc.c: 123: Set_4051(6);
 11012  001868  0E00               	movlw	0
 11013  00186A  6E02               	movwf	Set_4051@Channel+1,c
 11014  00186C  0E06               	movlw	6
 11015  00186E  6E01               	movwf	Set_4051@Channel,c
 11016  001870  EC86  F01A         	call	_Set_4051	;wreg free
 11017                           
 11018                           ;adc.c: 124: ADC_StartConversion(Temp1);
 11019  001874  0E0E               	movlw	14
 11020  001876  EC88  F01B         	call	_ADC_StartConversion
 11021                           
 11022                           ;adc.c: 125: break;
 11023  00187A  D04E               	goto	i2l4004
 11024  00187C                     i2l3988:
 11025                           
 11026                           ;adc.c: 127: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11027  00187C  90D8               	bcf	status,0,c
 11028  00187E  343D               	rlcf	_ADC_Buffer_Point,w,c
 11029  001880  6ED9               	movwf	fsr2l,c
 11030  001882  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11031  001884  6EDA               	movwf	fsr2h,c
 11032  001886  0EA8               	movlw	low _Temp_Adc
 11033  001888  26D9               	addwf	fsr2l,f,c
 11034  00188A  0E00               	movlw	high _Temp_Adc
 11035  00188C  22DA               	addwfc	fsr2h,f,c
 11036  00188E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11037  001892  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11038                           
 11039                           ;adc.c: 128: Set_4051(7);
 11040  001896  0E00               	movlw	0
 11041  001898  6E02               	movwf	Set_4051@Channel+1,c
 11042  00189A  0E07               	movlw	7
 11043  00189C  6E01               	movwf	Set_4051@Channel,c
 11044  00189E  EC86  F01A         	call	_Set_4051	;wreg free
 11045                           
 11046                           ;adc.c: 129: ADC_StartConversion(Temp1);
 11047  0018A2  0E0E               	movlw	14
 11048  0018A4  EC88  F01B         	call	_ADC_StartConversion
 11049                           
 11050                           ;adc.c: 130: break;
 11051  0018A8  D037               	goto	i2l4004
 11052  0018AA                     i2l3994:
 11053                           
 11054                           ;adc.c: 132: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11055  0018AA  90D8               	bcf	status,0,c
 11056  0018AC  343D               	rlcf	_ADC_Buffer_Point,w,c
 11057  0018AE  6ED9               	movwf	fsr2l,c
 11058  0018B0  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11059  0018B2  6EDA               	movwf	fsr2h,c
 11060  0018B4  0EA8               	movlw	low _Temp_Adc
 11061  0018B6  26D9               	addwf	fsr2l,f,c
 11062  0018B8  0E00               	movlw	high _Temp_Adc
 11063  0018BA  22DA               	addwfc	fsr2h,f,c
 11064  0018BC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11065  0018C0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11066                           
 11067                           ;adc.c: 133: Temp_Aquire = 0;
 11068  0018C4  0E00               	movlw	0
 11069  0018C6  6E40               	movwf	_Temp_Aquire,c
 11070                           
 11071                           ;adc.c: 134: Temp_Done = 1;
 11072  0018C8  0E00               	movlw	0
 11073  0018CA  0100               	movlb	0	; () banked
 11074  0018CC  6FA3               	movwf	(_Temp_Done+1)& (0+255),b
 11075  0018CE  0E01               	movlw	1
 11076  0018D0  6FA2               	movwf	_Temp_Done& (0+255),b
 11077                           
 11078                           ; BSR set to: 0
 11079                           ;adc.c: 136: }
 11080                           
 11081                           ;adc.c: 135: break;
 11082  0018D2  D022               	goto	i2l4004
 11083  0018D4                     i2l4002:
 11084  0018D4  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 11085  0018D8  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 11086                           
 11087                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11088                           ; Switch size 1, requested type "space"
 11089                           ; Number of cases is 1, Range of values is 0 to 0
 11090                           ; switch strategies available:
 11091                           ; Name         Instructions Cycles
 11092                           ; simple_byte            4     3 (average)
 11093                           ;	Chosen strategy is simple_byte
 11094  0018DC  5006               	movf	??_ADC_ISR+1,w,c
 11095  0018DE  0A00               	xorlw	0	; case 0
 11096  0018E0  A4D8               	btfss	status,2,c
 11097  0018E2  D01A               	goto	i2l4004
 11098                           
 11099                           ; Switch size 1, requested type "space"
 11100                           ; Number of cases is 8, Range of values is 0 to 7
 11101                           ; switch strategies available:
 11102                           ; Name         Instructions Cycles
 11103                           ; simple_byte           25    13 (average)
 11104                           ;	Chosen strategy is simple_byte
 11105  0018E4  5005               	movf	??_ADC_ISR,w,c
 11106  0018E6  0A00               	xorlw	0	; case 0
 11107  0018E8  B4D8               	btfsc	status,2,c
 11108  0018EA  D73E               	goto	i2l3952
 11109  0018EC  0A01               	xorlw	1	; case 1
 11110  0018EE  B4D8               	btfsc	status,2,c
 11111  0018F0  D752               	goto	i2l3958
 11112  0018F2  0A03               	xorlw	3	; case 2
 11113  0018F4  B4D8               	btfsc	status,2,c
 11114  0018F6  D766               	goto	i2l3964
 11115  0018F8  0A01               	xorlw	1	; case 3
 11116  0018FA  B4D8               	btfsc	status,2,c
 11117  0018FC  D77A               	goto	i2l3970
 11118  0018FE  0A07               	xorlw	7	; case 4
 11119  001900  B4D8               	btfsc	status,2,c
 11120  001902  D78E               	goto	i2l3976
 11121  001904  0A01               	xorlw	1	; case 5
 11122  001906  B4D8               	btfsc	status,2,c
 11123  001908  D7A2               	goto	i2l3982
 11124  00190A  0A03               	xorlw	3	; case 6
 11125  00190C  B4D8               	btfsc	status,2,c
 11126  00190E  D7B6               	goto	i2l3988
 11127  001910  0A01               	xorlw	1	; case 7
 11128  001912  B4D8               	btfsc	status,2,c
 11129  001914  D7CA               	goto	i2l3994
 11130  001916  D000               	goto	i2l4004
 11131  001918                     i2l4004:
 11132                           
 11133                           ;adc.c: 137: ADC_Buffer_Point++;
 11134  001918  4A3D               	infsnz	_ADC_Buffer_Point,f,c
 11135  00191A  2A3E               	incf	_ADC_Buffer_Point+1,f,c
 11136  00191C  D000               	goto	i2l4006
 11137  00191E                     i2l4006:
 11138                           
 11139                           ;adc.c: 138: }
 11140                           ;adc.c: 139: if (Volt_Aquire){
 11141  00191E  5041               	movf	_Volt_Aquire,w,c
 11142  001920  B4D8               	btfsc	status,2,c
 11143  001922  0012               	return	
 11144                           
 11145                           ;adc.c: 141: ADC_Result = ADC_GetConversionResult();
 11146  001924  ECB9  F01B         	call	_ADC_GetConversionResult	;wreg free
 11147  001928  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 11148  00192C  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 11149                           
 11150                           ;adc.c: 142: switch ( ADC_Buffer_Point )
 11151  001930  D07B               	goto	i2l4042
 11152  001932                     i2l4010:
 11153                           
 11154                           ;adc.c: 145: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11155  001932  90D8               	bcf	status,0,c
 11156  001934  343D               	rlcf	_ADC_Buffer_Point,w,c
 11157  001936  6ED9               	movwf	fsr2l,c
 11158  001938  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11159  00193A  6EDA               	movwf	fsr2h,c
 11160  00193C  0E7E               	movlw	low _Battery_Adc
 11161  00193E  26D9               	addwf	fsr2l,f,c
 11162  001940  0E00               	movlw	high _Battery_Adc
 11163  001942  22DA               	addwfc	fsr2h,f,c
 11164  001944  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11165  001948  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11166                           
 11167                           ;adc.c: 146: ADC_StartConversion(AN_CELL2);
 11168  00194C  0E06               	movlw	6
 11169  00194E  EC88  F01B         	call	_ADC_StartConversion
 11170                           
 11171                           ;adc.c: 147: break;
 11172  001952  D089               	goto	i2l4044
 11173  001954                     i2l4014:
 11174                           
 11175                           ;adc.c: 149: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11176  001954  90D8               	bcf	status,0,c
 11177  001956  343D               	rlcf	_ADC_Buffer_Point,w,c
 11178  001958  6ED9               	movwf	fsr2l,c
 11179  00195A  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11180  00195C  6EDA               	movwf	fsr2h,c
 11181  00195E  0E7E               	movlw	low _Battery_Adc
 11182  001960  26D9               	addwf	fsr2l,f,c
 11183  001962  0E00               	movlw	high _Battery_Adc
 11184  001964  22DA               	addwfc	fsr2h,f,c
 11185  001966  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11186  00196A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11187                           
 11188                           ;adc.c: 150: ADC_StartConversion(AN_CELL3);
 11189  00196E  0E05               	movlw	5
 11190  001970  EC88  F01B         	call	_ADC_StartConversion
 11191                           
 11192                           ;adc.c: 151: break;
 11193  001974  D078               	goto	i2l4044
 11194  001976                     i2l4018:
 11195                           
 11196                           ;adc.c: 153: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11197  001976  90D8               	bcf	status,0,c
 11198  001978  343D               	rlcf	_ADC_Buffer_Point,w,c
 11199  00197A  6ED9               	movwf	fsr2l,c
 11200  00197C  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11201  00197E  6EDA               	movwf	fsr2h,c
 11202  001980  0E7E               	movlw	low _Battery_Adc
 11203  001982  26D9               	addwf	fsr2l,f,c
 11204  001984  0E00               	movlw	high _Battery_Adc
 11205  001986  22DA               	addwfc	fsr2h,f,c
 11206  001988  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11207  00198C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11208                           
 11209                           ;adc.c: 154: ADC_StartConversion(AN_CELL4);
 11210  001990  0E04               	movlw	4
 11211  001992  EC88  F01B         	call	_ADC_StartConversion
 11212                           
 11213                           ;adc.c: 155: break;
 11214  001996  D067               	goto	i2l4044
 11215  001998                     i2l4022:
 11216                           
 11217                           ;adc.c: 157: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11218  001998  90D8               	bcf	status,0,c
 11219  00199A  343D               	rlcf	_ADC_Buffer_Point,w,c
 11220  00199C  6ED9               	movwf	fsr2l,c
 11221  00199E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11222  0019A0  6EDA               	movwf	fsr2h,c
 11223  0019A2  0E7E               	movlw	low _Battery_Adc
 11224  0019A4  26D9               	addwf	fsr2l,f,c
 11225  0019A6  0E00               	movlw	high _Battery_Adc
 11226  0019A8  22DA               	addwfc	fsr2h,f,c
 11227  0019AA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11228  0019AE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11229                           
 11230                           ;adc.c: 158: ADC_StartConversion(AN_CELL5);
 11231  0019B2  0E03               	movlw	3
 11232  0019B4  EC88  F01B         	call	_ADC_StartConversion
 11233                           
 11234                           ;adc.c: 159: break;
 11235  0019B8  D056               	goto	i2l4044
 11236  0019BA                     i2l4026:
 11237                           
 11238                           ;adc.c: 161: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11239  0019BA  90D8               	bcf	status,0,c
 11240  0019BC  343D               	rlcf	_ADC_Buffer_Point,w,c
 11241  0019BE  6ED9               	movwf	fsr2l,c
 11242  0019C0  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11243  0019C2  6EDA               	movwf	fsr2h,c
 11244  0019C4  0E7E               	movlw	low _Battery_Adc
 11245  0019C6  26D9               	addwf	fsr2l,f,c
 11246  0019C8  0E00               	movlw	high _Battery_Adc
 11247  0019CA  22DA               	addwfc	fsr2h,f,c
 11248  0019CC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11249  0019D0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11250                           
 11251                           ;adc.c: 162: ADC_StartConversion(AN_CELL6);
 11252  0019D4  0E01               	movlw	1
 11253  0019D6  EC88  F01B         	call	_ADC_StartConversion
 11254                           
 11255                           ;adc.c: 163: break;
 11256  0019DA  D045               	goto	i2l4044
 11257  0019DC                     i2l4030:
 11258                           
 11259                           ;adc.c: 165: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11260  0019DC  90D8               	bcf	status,0,c
 11261  0019DE  343D               	rlcf	_ADC_Buffer_Point,w,c
 11262  0019E0  6ED9               	movwf	fsr2l,c
 11263  0019E2  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11264  0019E4  6EDA               	movwf	fsr2h,c
 11265  0019E6  0E7E               	movlw	low _Battery_Adc
 11266  0019E8  26D9               	addwf	fsr2l,f,c
 11267  0019EA  0E00               	movlw	high _Battery_Adc
 11268  0019EC  22DA               	addwfc	fsr2h,f,c
 11269  0019EE  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11270  0019F2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11271                           
 11272                           ;adc.c: 166: ADC_StartConversion(AN_CELL7);
 11273  0019F6  0E00               	movlw	0
 11274  0019F8  EC88  F01B         	call	_ADC_StartConversion
 11275                           
 11276                           ;adc.c: 167: break;
 11277  0019FC  D034               	goto	i2l4044
 11278  0019FE                     i2l4034:
 11279                           
 11280                           ;adc.c: 169: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11281  0019FE  90D8               	bcf	status,0,c
 11282  001A00  343D               	rlcf	_ADC_Buffer_Point,w,c
 11283  001A02  6ED9               	movwf	fsr2l,c
 11284  001A04  343E               	rlcf	_ADC_Buffer_Point+1,w,c
 11285  001A06  6EDA               	movwf	fsr2h,c
 11286  001A08  0E7E               	movlw	low _Battery_Adc
 11287  001A0A  26D9               	addwf	fsr2l,f,c
 11288  001A0C  0E00               	movlw	high _Battery_Adc
 11289  001A0E  22DA               	addwfc	fsr2h,f,c
 11290  001A10  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11291  001A14  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11292                           
 11293                           ;adc.c: 170: Volt_Aquire = 0;
 11294  001A18  0E00               	movlw	0
 11295  001A1A  6E41               	movwf	_Volt_Aquire,c
 11296                           
 11297                           ;adc.c: 171: Volt_Done = 1;
 11298  001A1C  0E00               	movlw	0
 11299  001A1E  0100               	movlb	0	; () banked
 11300  001A20  6FA5               	movwf	(_Volt_Done+1)& (0+255),b
 11301  001A22  0E01               	movlw	1
 11302  001A24  6FA4               	movwf	_Volt_Done& (0+255),b
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;adc.c: 173: }
 11306                           
 11307                           ;adc.c: 172: break;
 11308  001A26  D01F               	goto	i2l4044
 11309  001A28                     i2l4042:
 11310  001A28  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 11311  001A2C  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 11312                           
 11313                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11314                           ; Switch size 1, requested type "space"
 11315                           ; Number of cases is 1, Range of values is 0 to 0
 11316                           ; switch strategies available:
 11317                           ; Name         Instructions Cycles
 11318                           ; simple_byte            4     3 (average)
 11319                           ;	Chosen strategy is simple_byte
 11320  001A30  5006               	movf	??_ADC_ISR+1,w,c
 11321  001A32  0A00               	xorlw	0	; case 0
 11322  001A34  A4D8               	btfss	status,2,c
 11323  001A36  D017               	goto	i2l4044
 11324                           
 11325                           ; Switch size 1, requested type "space"
 11326                           ; Number of cases is 7, Range of values is 0 to 6
 11327                           ; switch strategies available:
 11328                           ; Name         Instructions Cycles
 11329                           ; simple_byte           22    12 (average)
 11330                           ;	Chosen strategy is simple_byte
 11331  001A38  5005               	movf	??_ADC_ISR,w,c
 11332  001A3A  0A00               	xorlw	0	; case 0
 11333  001A3C  B4D8               	btfsc	status,2,c
 11334  001A3E  D779               	goto	i2l4010
 11335  001A40  0A01               	xorlw	1	; case 1
 11336  001A42  B4D8               	btfsc	status,2,c
 11337  001A44  D787               	goto	i2l4014
 11338  001A46  0A03               	xorlw	3	; case 2
 11339  001A48  B4D8               	btfsc	status,2,c
 11340  001A4A  D795               	goto	i2l4018
 11341  001A4C  0A01               	xorlw	1	; case 3
 11342  001A4E  B4D8               	btfsc	status,2,c
 11343  001A50  D7A3               	goto	i2l4022
 11344  001A52  0A07               	xorlw	7	; case 4
 11345  001A54  B4D8               	btfsc	status,2,c
 11346  001A56  D7B1               	goto	i2l4026
 11347  001A58  0A01               	xorlw	1	; case 5
 11348  001A5A  B4D8               	btfsc	status,2,c
 11349  001A5C  D7BF               	goto	i2l4030
 11350  001A5E  0A03               	xorlw	3	; case 6
 11351  001A60  B4D8               	btfsc	status,2,c
 11352  001A62  D7CD               	goto	i2l4034
 11353  001A64  D000               	goto	i2l4044
 11354  001A66                     i2l4044:
 11355                           
 11356                           ;adc.c: 174: ADC_Buffer_Point++;
 11357  001A66  4A3D               	infsnz	_ADC_Buffer_Point,f,c
 11358  001A68  2A3E               	incf	_ADC_Buffer_Point+1,f,c
 11359  001A6A  0012               	return	
 11360  001A6C  0012               	return		;funcret
 11361  001A6E                     __end_of_ADC_ISR:
 11362                           	opt stack 0
 11363                           pclatu	equ	0xFFB
 11364                           pclath	equ	0xFFA
 11365                           tblptru	equ	0xFF8
 11366                           tblptrh	equ	0xFF7
 11367                           tblptrl	equ	0xFF6
 11368                           tablat	equ	0xFF5
 11369                           prodh	equ	0xFF4
 11370                           prodl	equ	0xFF3
 11371                           intcon	equ	0xFF2
 11372                           intcon2	equ	0xFF1
 11373                           postinc0	equ	0xFEE
 11374                           fsr0h	equ	0xFEA
 11375                           fsr0l	equ	0xFE9
 11376                           wreg	equ	0xFE8
 11377                           postinc1	equ	0xFE6
 11378                           postdec1	equ	0xFE5
 11379                           fsr1h	equ	0xFE2
 11380                           fsr1l	equ	0xFE1
 11381                           indf2	equ	0xFDF
 11382                           postinc2	equ	0xFDE
 11383                           postdec2	equ	0xFDD
 11384                           fsr2h	equ	0xFDA
 11385                           fsr2l	equ	0xFD9
 11386                           status	equ	0xFD8
 11387                           
 11388 ;; *************** function _Set_4051 *****************
 11389 ;; Defined at:
 11390 ;;		line 8 in file "Functions.c"
 11391 ;; Parameters:    Size  Location     Type
 11392 ;;  Channel         2    0[COMRAM] int 
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;		None
 11395 ;; Return value:  Size  Location     Type
 11396 ;;		None               void
 11397 ;; Registers used:
 11398 ;;		wreg, status,2, status,0
 11399 ;; Tracked objects:
 11400 ;;		On entry : 0/0
 11401 ;;		On exit  : 0/0
 11402 ;;		Unchanged: 0/0
 11403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11404 ;;      Params:         2       0       0       0       0       0       0
 11405 ;;      Locals:         0       0       0       0       0       0       0
 11406 ;;      Temps:          2       0       0       0       0       0       0
 11407 ;;      Totals:         4       0       0       0       0       0       0
 11408 ;;Total ram usage:        4 bytes
 11409 ;; Hardware stack levels used:    1
 11410 ;; This function calls:
 11411 ;;		Nothing
 11412 ;; This function is called by:
 11413 ;;		_ADC_ISR
 11414 ;; This function uses a non-reentrant model
 11415 ;;
 11416                           
 11417                           	psect	text51
 11418  00350C                     __ptext51:
 11419                           	opt stack 0
 11420  00350C                     _Set_4051:
 11421                           	opt stack 23
 11422                           
 11423                           ;Functions.c: 10: if (Channel & 0x01)
 11424                           
 11425                           ;incstack = 0
 11426  00350C  A001               	btfss	Set_4051@Channel,0,c
 11427  00350E  D002               	goto	i2l3436
 11428                           
 11429                           ;Functions.c: 11: {
 11430                           ;Functions.c: 12: do { LATA7 = ~LATA7; } while(0);
 11431  003510  7E89               	btg	3977,7,c	;volatile
 11432  003512  D000               	goto	i2l3436
 11433  003514                     i2l3436:
 11434                           
 11435                           ;Functions.c: 13: }
 11436                           ;Functions.c: 14: if ((Channel>>1) & 0x01)
 11437  003514  3402               	rlcf	Set_4051@Channel+1,w,c
 11438  003516  3002               	rrcf	Set_4051@Channel+1,w,c
 11439  003518  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 11440  00351A  3001               	rrcf	Set_4051@Channel,w,c
 11441  00351C  6E03               	movwf	??_Set_4051& (0+255),c
 11442  00351E  A003               	btfss	??_Set_4051,0,c
 11443  003520  D002               	goto	i2l3438
 11444                           
 11445                           ;Functions.c: 15: {
 11446                           ;Functions.c: 16: do { LATA6 = ~LATA6; } while(0);
 11447  003522  7C89               	btg	3977,6,c	;volatile
 11448  003524  D000               	goto	i2l3438
 11449  003526                     i2l3438:
 11450                           
 11451                           ;Functions.c: 17: }
 11452                           ;Functions.c: 18: if ((Channel>>2) & 0x01)
 11453  003526  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 11454  00352A  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 11455  00352E  3404               	rlcf	??_Set_4051+1,w,c
 11456  003530  3204               	rrcf	??_Set_4051+1,f,c
 11457  003532  3203               	rrcf	??_Set_4051,f,c
 11458  003534  3404               	rlcf	??_Set_4051+1,w,c
 11459  003536  3204               	rrcf	??_Set_4051+1,f,c
 11460  003538  3203               	rrcf	??_Set_4051,f,c
 11461  00353A  A003               	btfss	??_Set_4051,0,c
 11462  00353C  0012               	return	
 11463                           
 11464                           ;Functions.c: 19: {
 11465                           ;Functions.c: 20: do { LATC0 = ~LATC0; } while(0);
 11466  00353E  708B               	btg	3979,0,c	;volatile
 11467  003540  0012               	return	
 11468  003542  0012               	return		;funcret
 11469  003544                     __end_of_Set_4051:
 11470                           	opt stack 0
 11471                           pclatu	equ	0xFFB
 11472                           pclath	equ	0xFFA
 11473                           tblptru	equ	0xFF8
 11474                           tblptrh	equ	0xFF7
 11475                           tblptrl	equ	0xFF6
 11476                           tablat	equ	0xFF5
 11477                           prodh	equ	0xFF4
 11478                           prodl	equ	0xFF3
 11479                           intcon	equ	0xFF2
 11480                           intcon2	equ	0xFF1
 11481                           postinc0	equ	0xFEE
 11482                           fsr0h	equ	0xFEA
 11483                           fsr0l	equ	0xFE9
 11484                           wreg	equ	0xFE8
 11485                           postinc1	equ	0xFE6
 11486                           postdec1	equ	0xFE5
 11487                           fsr1h	equ	0xFE2
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           fsr2h	equ	0xFDA
 11493                           fsr2l	equ	0xFD9
 11494                           status	equ	0xFD8
 11495                           
 11496 ;; *************** function _ADC_StartConversion *****************
 11497 ;; Defined at:
 11498 ;;		line 40 in file "mcc_generated_files/adc.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;  channel         1    wreg     enum E8837
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;  channel         1    1[COMRAM] enum E8837
 11503 ;; Return value:  Size  Location     Type
 11504 ;;		None               void
 11505 ;; Registers used:
 11506 ;;		wreg, status,2, status,0
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11512 ;;      Params:         0       0       0       0       0       0       0
 11513 ;;      Locals:         1       0       0       0       0       0       0
 11514 ;;      Temps:          1       0       0       0       0       0       0
 11515 ;;      Totals:         2       0       0       0       0       0       0
 11516 ;;Total ram usage:        2 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; This function calls:
 11519 ;;		Nothing
 11520 ;; This function is called by:
 11521 ;;		_ADC_ISR
 11522 ;;		_Battery_Read
 11523 ;;		_Temp_Read
 11524 ;;		_Current_Read
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           	psect	text52
 11529  003710                     __ptext52:
 11530                           	opt stack 0
 11531  003710                     _ADC_StartConversion:
 11532                           	opt stack 22
 11533                           
 11534                           ;incstack = 0
 11535                           ;ADC_StartConversion@channel stored from wreg
 11536  003710  6E02               	movwf	ADC_StartConversion@channel,c
 11537                           
 11538                           ;adc.c: 43: ADCON0bits.CHS = channel;
 11539  003712  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 11540  003716  4601               	rlncf	??_ADC_StartConversion,f,c
 11541  003718  4601               	rlncf	??_ADC_StartConversion,f,c
 11542  00371A  50C2               	movf	4034,w,c	;volatile
 11543  00371C  1801               	xorwf	??_ADC_StartConversion,w,c
 11544  00371E  0B83               	andlw	-125
 11545  003720  1801               	xorwf	??_ADC_StartConversion,w,c
 11546  003722  6EC2               	movwf	4034,c	;volatile
 11547                           
 11548                           ;adc.c: 46: ADCON0bits.ADON = 1;
 11549  003724  80C2               	bsf	4034,0,c	;volatile
 11550                           
 11551                           ;adc.c: 50: ADCON0bits.GO_nDONE = 1;
 11552  003726  82C2               	bsf	4034,1,c	;volatile
 11553  003728  0012               	return		;funcret
 11554  00372A                     __end_of_ADC_StartConversion:
 11555                           	opt stack 0
 11556                           pclatu	equ	0xFFB
 11557                           pclath	equ	0xFFA
 11558                           tblptru	equ	0xFF8
 11559                           tblptrh	equ	0xFF7
 11560                           tblptrl	equ	0xFF6
 11561                           tablat	equ	0xFF5
 11562                           prodh	equ	0xFF4
 11563                           prodl	equ	0xFF3
 11564                           intcon	equ	0xFF2
 11565                           intcon2	equ	0xFF1
 11566                           postinc0	equ	0xFEE
 11567                           fsr0h	equ	0xFEA
 11568                           fsr0l	equ	0xFE9
 11569                           wreg	equ	0xFE8
 11570                           postinc1	equ	0xFE6
 11571                           postdec1	equ	0xFE5
 11572                           fsr1h	equ	0xFE2
 11573                           fsr1l	equ	0xFE1
 11574                           indf2	equ	0xFDF
 11575                           postinc2	equ	0xFDE
 11576                           postdec2	equ	0xFDD
 11577                           fsr2h	equ	0xFDA
 11578                           fsr2l	equ	0xFD9
 11579                           status	equ	0xFD8
 11580                           
 11581 ;; *************** function _ADC_GetConversionResult *****************
 11582 ;; Defined at:
 11583 ;;		line 59 in file "mcc_generated_files/adc.c"
 11584 ;; Parameters:    Size  Location     Type
 11585 ;;		None
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;		None
 11588 ;; Return value:  Size  Location     Type
 11589 ;;                  2    0[COMRAM] unsigned int 
 11590 ;; Registers used:
 11591 ;;		wreg, status,2, status,0
 11592 ;; Tracked objects:
 11593 ;;		On entry : 0/0
 11594 ;;		On exit  : 0/0
 11595 ;;		Unchanged: 0/0
 11596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11597 ;;      Params:         2       0       0       0       0       0       0
 11598 ;;      Locals:         0       0       0       0       0       0       0
 11599 ;;      Temps:          2       0       0       0       0       0       0
 11600 ;;      Totals:         4       0       0       0       0       0       0
 11601 ;;Total ram usage:        4 bytes
 11602 ;; Hardware stack levels used:    1
 11603 ;; This function calls:
 11604 ;;		Nothing
 11605 ;; This function is called by:
 11606 ;;		_ADC_ISR
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           	psect	text53
 11611  003772                     __ptext53:
 11612                           	opt stack 0
 11613  003772                     _ADC_GetConversionResult:
 11614                           	opt stack 23
 11615                           
 11616                           ;adc.c: 62: return ((ADRESH << 8) + ADRESL);
 11617                           
 11618                           ;incstack = 0
 11619  003772  50C4               	movf	4036,w,c	;volatile
 11620  003774  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 11621  003776  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 11622  003778  50C3               	movf	4035,w,c	;volatile
 11623  00377A  2403               	addwf	??_ADC_GetConversionResult,w,c
 11624  00377C  6E01               	movwf	?_ADC_GetConversionResult,c
 11625  00377E  0E00               	movlw	0
 11626  003780  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 11627  003782  6E02               	movwf	?_ADC_GetConversionResult+1,c
 11628  003784  0012               	return	
 11629  003786  0012               	return		;funcret
 11630  003788                     __end_of_ADC_GetConversionResult:
 11631                           	opt stack 0
 11632                           pclatu	equ	0xFFB
 11633                           pclath	equ	0xFFA
 11634                           tblptru	equ	0xFF8
 11635                           tblptrh	equ	0xFF7
 11636                           tblptrl	equ	0xFF6
 11637                           tablat	equ	0xFF5
 11638                           prodh	equ	0xFF4
 11639                           prodl	equ	0xFF3
 11640                           intcon	equ	0xFF2
 11641                           intcon2	equ	0xFF1
 11642                           postinc0	equ	0xFEE
 11643                           fsr0h	equ	0xFEA
 11644                           fsr0l	equ	0xFE9
 11645                           wreg	equ	0xFE8
 11646                           postinc1	equ	0xFE6
 11647                           postdec1	equ	0xFE5
 11648                           fsr1h	equ	0xFE2
 11649                           fsr1l	equ	0xFE1
 11650                           indf2	equ	0xFDF
 11651                           postinc2	equ	0xFDE
 11652                           postdec2	equ	0xFDD
 11653                           fsr2h	equ	0xFDA
 11654                           fsr2l	equ	0xFD9
 11655                           status	equ	0xFD8
 11656                           pclatu	equ	0xFFB
 11657                           pclath	equ	0xFFA
 11658                           tblptru	equ	0xFF8
 11659                           tblptrh	equ	0xFF7
 11660                           tblptrl	equ	0xFF6
 11661                           tablat	equ	0xFF5
 11662                           prodh	equ	0xFF4
 11663                           prodl	equ	0xFF3
 11664                           intcon	equ	0xFF2
 11665                           intcon2	equ	0xFF1
 11666                           postinc0	equ	0xFEE
 11667                           fsr0h	equ	0xFEA
 11668                           fsr0l	equ	0xFE9
 11669                           wreg	equ	0xFE8
 11670                           postinc1	equ	0xFE6
 11671                           postdec1	equ	0xFE5
 11672                           fsr1h	equ	0xFE2
 11673                           fsr1l	equ	0xFE1
 11674                           indf2	equ	0xFDF
 11675                           postinc2	equ	0xFDE
 11676                           postdec2	equ	0xFDD
 11677                           fsr2h	equ	0xFDA
 11678                           fsr2l	equ	0xFD9
 11679                           status	equ	0xFD8
 11680                           
 11681                           	psect	rparam
 11682  0000                     pclatu	equ	0xFFB
 11683                           pclath	equ	0xFFA
 11684                           tblptru	equ	0xFF8
 11685                           tblptrh	equ	0xFF7
 11686                           tblptrl	equ	0xFF6
 11687                           tablat	equ	0xFF5
 11688                           prodh	equ	0xFF4
 11689                           prodl	equ	0xFF3
 11690                           intcon	equ	0xFF2
 11691                           intcon2	equ	0xFF1
 11692                           postinc0	equ	0xFEE
 11693                           fsr0h	equ	0xFEA
 11694                           fsr0l	equ	0xFE9
 11695                           wreg	equ	0xFE8
 11696                           postinc1	equ	0xFE6
 11697                           postdec1	equ	0xFE5
 11698                           fsr1h	equ	0xFE2
 11699                           fsr1l	equ	0xFE1
 11700                           indf2	equ	0xFDF
 11701                           postinc2	equ	0xFDE
 11702                           postdec2	equ	0xFDD
 11703                           fsr2h	equ	0xFDA
 11704                           fsr2l	equ	0xFD9
 11705                           status	equ	0xFD8


Data Sizes:
    Strings     52
    Constant    145
    Data        0
    BSS         344
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     58      73
    BANK0           160     65     157
    BANK1           256      0     240
    BANK2           256     25      25
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 29
		 -> STR_2(CODE[23]), STR_1(CODE[29]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_RunBypas
    _printf->___ftmul
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Tempeture_Get->___wmul
    _Temp_Convert->___ftmul
    _log->___ftmul
    _eval_poly->___ftmul
    _Temp_Filter->___ftmul
    ___ftadd->___ftmul
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    ___ftadd->_fround
    _Battery_Convert->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5  230217
                                             56 BANK0      9     4      5
                    _Battery_Convert
                      _Battery_Fault
                        _Battery_Get
                              _Delay
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                      _Tempeture_Get
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              44    37      7   79694
                                             34 BANK0     13     6      7
                                              0 BANK2     25    25      0
                        _Battery_Get (ARG)
                      _Tempeture_Get (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   19215
                                              6 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             23 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   18936
                                              6 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2139
                                             28 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             22 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     827
                                             22 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2703
                                             30 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             35 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     703
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             13 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             22 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Tempeture_Get                                        3     0      3    7578
                                             42 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   93551
                                             45 BANK0     11    11      0
                        _Temp_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   37874
                                             40 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   21064
                                             28 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6537
                                             28 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   20870
                                             28 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    6019
                                             16 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0   10073
                                             51 COMRAM     7     7      0
                        _Battery_Get
                           _SetBypas
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypas                                             6     2      4     432
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    7655
                                             42 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Delay                                                5     3      2     110
                                             22 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    9351
                                             51 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1738
                                             42 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      2     2      0   21945
                                              6 BANK0      2     2      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    7470
                                             36 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    7090
                                             49 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4290
                                             34 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2965
                                             30 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0     913
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0      44
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0     869
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     514
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Get
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Delay
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _SetBypas
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _Tempeture_Get
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     _Battery_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _Tempeture_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _EUSART1_Write
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     19      19       8        9.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F0       6       93.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     41      9D       4       98.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3A      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1EF       9        0.0%
DATA                 0      0     1EF      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun May 31 22:32:20 2015

           _eusart1TxBufferRemaining 0049                         ___awdiv@sign 0022  
                ___wmul@multiplicand 0027                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         ___ftadd@exp1 00D7  
                       ___ftadd@exp2 00D6                         ___ftadd@sign 00D5  
                                l122 3468                                  l423 22E4  
                                l344 2E6C                                  l329 2FCE  
                                l370 3560                                  l550 2E8C  
                                l542 2E7C                                  l571 2EBC  
                                l564 2EAC                                  l557 2E9C  
                                l585 2EDC                                  l578 2ECC  
                                l594 2CF0                                  l696 0E52  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0047                                  _log 2438  
                    __end_of_ADC_ISR 1A6E                         ___awmod@sign 001C  
                                prod 000FF3                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 002C  
                      SetBypas@state 0019                         ___ftdiv@sign 0031  
                               l1101 1AD6                                 l1105 1B10  
                               l1107 1B3A                                 l1116 1C1E  
                               l1125 1C48                                 l1029 290E  
                               l1230 3208                                 l1150 26A2  
                               l1143 260C                                 l1072 2D8E  
                               l1136 2B04                                 l1240 32FA  
                               l1144 2634                                 l1175 36A4  
                               l3500 2E70                                 l5020 228E  
                               l5004 2186                                 l3510 2EC0  
                               l3502 2E80                                 l5014 226A  
                               l3512 2ED0                                 l3504 2E90  
                               l5016 2274                                 l5008 21A0  
                               l5032 245C                                 l5104 1722  
                               l3506 2EA0                                 l5210 289E  
                               l5202 286C                                 l3508 2EB0  
                               l3516 2EE0                                 l5132 25D2  
                               l5116 36CA                                 l4094 354E  
                               l3382 3124                                 l5038 248A  
                               l5222 28D0                                 l5214 28AE  
                               l5126 25A6                                 l5304 30F6  
                               l5400 3320                                 l5232 28FA  
                               l5080 146A                                 l5242 2A76  
                               l5234 2908                                 l5226 28E0  
                               l5162 2664                                 l5154 2642  
                               l5066 1EFE                                 l5058 1E38  
                               l5090 153E                                 l5412 2F40  
                               l5340 23C8                                 l5172 268E  
                               l5350 2406                                 l5318 2320  
                               l5182 280A                                 l5174 269C  
                               l5166 2674                                 l5086 1518  
                               l5502 07E8                                 l5248 2A9E  
                               l5424 2DC2                                 l5408 2F2C  
                               l4800 1BB2                                 l5440 1F66  
                               l5336 23B4                                 l5512 0850  
                               l4730 2D1E                                 l5418 2FC6  
                               l4810 1BFE                                 l4802 1BC2  
                               l5354 2424                                 l5346 23E6  
                               l5098 1674                                 l5610 0CA4  
                               l5602 0C4C                                 l5506 0826  
                               l4740 2D82                                 l4732 2D3E  
                               l4724 2D02                                 l5268 2ADE  
                               l5428 2DDC                                 l4812 1C0E  
                               l4804 1BCE                                 l5348 23F8  
                               l5364 31B0                                 l5188 2828  
                               l5620 0CFC                                 l5524 08AA  
                               l5516 085C                                 l5508 083E  
                               l5278 2B12                                 l5294 3098  
                               l5286 3390                                 l5366 31BE  
                               l5710 109E                                 l5702 105E  
                               l5630 0D36                                 l5614 0CCE  
                               l5606 0C52                                 l5550 09A2  
                               l5534 08F2                                 l5518 088E  
                               l4752 2DA8                                 l4736 2D56  
                               l4728 2D12                                 l5464 2176  
                               l5376 31F8                                 l5368 31C6  
                               l5392 32EA                                 l5384 32AE  
                               l4920 3018                                 l4912 2FF8  
                               l5632 0D4A                                 l5624 0D0C  
                               l5472 06D8                                 l4746 2D96  
                               l4738 2D76                                 l5298 30CA  
                               l4818 1C74                                 l4770 1AE4  
                               l5386 32BC                                 l4930 303E  
                               l4922 3020                                 l4906 2FE6  
                               l5730 1166                                 l5714 10C6  
                               l5706 1098                                 l5650 0E34  
                               l5626 0D26                                 l5642 0E00  
                               l5562 0A32                                 l5482 0712  
                               l4844 2978                                 l4828 1CC4  
                               l5388 32C4                                 l5732 1172  
                               l5724 112E                                 l5660 0E7E  
                               l5644 0E10                                 l5636 0D72  
                               l5580 0B10                                 l5564 0A48  
                               l5484 0728                                 l5476 06EE  
                               ?_log 00E4                                 l4862 29D4  
                               l4838 294C                                 l4782 1B30  
                               l5398 3312                                 l4918 300E  
                               l4934 304A                                 l4950 3230  
                               l5750 120E                                 l5718 10F8  
                               l5654 0E58                                 l5574 0ADE  
                               l5566 0A7A                                 l5558 0A0A  
                               l5478 0704                                 l4872 2A0C  
                               l4792 1B72                                 l4776 1B1E  
                               l4960 3256                                 l5760 1260  
                               l5752 121A                                 l5744 11E4  
                               l5736 11AA                                 l5664 0ED0  
                               l5672 0FAC                                 l5648 0E20  
                               l5592 0BFE                                 l5584 0B54  
                               l5568 0A90                                 l5680 0FDC  
                               l5488 0748                                 l5496 07C0  
                               l5904 27E2                                 l4866 29EC  
                               l4858 29BC                                 l5770 2C40  
                               l4938 305A                                 l4962 325E  
                               l4970 3280                                 l4954 323E  
                               l4882 3458                                 l5746 11F0  
                               l5738 11B6                                 l5690 1022  
                               l5674 0FBC                                 l5594 0C04  
                               l5586 0B82                                 l5578 0B04  
                               l4876 2A26                                 l4868 29F4  
                               l5756 1238                                 l5764 12E8  
                               l5588 0B96                                 l5860 26CC  
                               l5782 2CAA                                 l5774 2C54  
                               l4798 1BA2                                 l4974 3290  
                               l4966 3274                                 l4958 324C  
                               l4894 348C                                 l5678 0FCC  
                               l5598 0C12                                 l5766 1302  
                               l5862 26D0                                 l4992 2B7E  
                               l4896 3490                                 l5696 104A  
                               l5856 26BA                                 l4986 34E6  
                               l4994 2C02                                 l5698 1050  
                               l5874 26FA                                 l5866 26D6  
                               l5858 26BE                                 l5788 2CE8  
                               l5884 275A                                 l5894 2782  
                               l5878 2714                                 l5898 279C  
                               STR_1 0692                                 STR_2 06AF  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u6000 0938  
                               u5041 2930                         printf@tmpval 0205  
                               u5061 295C                                 u6005 092C  
                               u2910 314C                                 u6220 0E4A  
                               u5421 258A                                 u2918 314E  
                               u5601 2A86                                 u5441 25B6  
                               u5700 2346                                 u4831 1A84  
                               u4841 1AA2                                 u5705 233C  
                               u5581 2A5E                                 u5681 22FC  
                               u5890 1F64                                 u6797 3554  
                               _TMR1 000FCE                                 _WPUB 000F61  
            Tempeture_Get@channelnum 002B                        _EUSART1_Write 3454  
                               _main 26B4                         ___ftpack@arg 0017  
                       ___ftpack@exp 001A                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 log@x 00E4  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AA  
                      __CFG_IESO$OFF 000000                         ___ftmul@cntr 00C0  
                       ___param_bank 000010                         ___ftmul@sign 00C1  
                  ADC_ISR@ADC_Result 0007                         ___fttol@exp1 00D7  
                              ??_log 003B                         ___fttol@lval 00D3  
                   ?_Battery_Convert 0001       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 3796                                ?_main 00F4  
                    __end_of___awdiv 3066                      __end_of___ftadd 1CEC  
                    __end_of___awmod 329C                      __end_of___ftdiv 2B3A  
                    _TMR1_StartTimer 37AC                      __end_of___ftneg 36B2  
                    __end_of___lldiv 321A                      __end_of___ftmul 2A4E  
                    ___awdiv@divisor 001F                                _T1CON 000FCD  
                    __end_of___llmod 330C                      __end_of___ftsub 33BC  
                    __end_of___fttol 2438                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATB2 007C52                                _LATA4 007C4C  
                              _LATA6 007C4E                                _LATA7 007C4F  
                              _LATD3 007C63                                _LATD4 007C64  
                              _LATD5 007C65                                _LATD6 007C66  
                              _LATD7 007C67                       __CFG_DEBUG$OFF 000000  
                              i2l134 35A2                                i2l283 0070  
                              i2l275 004C                                i2l277 0058  
                              i2l279 0064                      ___awdiv@counter 0021  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0016  
                              _Delay 3544                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                         ___lltoft@exp 0027  
               _EUSART1_Transmit_ISR 3576                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR1_ISR 3454                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 0022  
                    __end_of_dpowers 0629                                _frexp 30FC  
                              _errno 00A6                                _scale 1326  
                    __end_of_isdigit 36D4                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001B                                _putch 37A2  
                              main@x 00F9                       ?_EUSART1_Write 0001  
            __end_of_TMR1_Initialize 36F6                          _Battery_Adc 007E  
                              tablat 000FF5                          _Battery_Get 35D8  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                    RunBypas@cellbyp 0034                      RunBypas@batvolt 0036  
                     __CFG_PBADEN$ON 000000                      __initialization 3638  
                        log@exponent 00E7           __end_of_EUSART1_Initialize 34D0  
                       __end_of_main 27EC                     __end_of_Set_4051 3544  
                          ??_ADC_ISR 0005          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 003B                        ___fttol@sign1 00D2  
                   __end_of_SetBypas 2F20                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                 __size_of__tdiv_to_l_ 013A  
                             ?_Delay 0017                ?_EUSART1_Transmit_ISR 0001  
                   __end_of_RunBypas 2CF2                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 0017                     ___llmod@dividend 0024  
                             ?_scale 00C2                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 001D  
                   __end_of___awtoft 350C                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                     __end_of___ftpack 2DB8  
                             _T1GCON 000FCC                               _RC1REG 000FAE  
                             _RC1STA 000FAB                     __end_of___lltoft 336C  
              __size_of_Battery_Read 0018                               i2l4010 1932  
                             i2l4002 18D4                               i2l4004 1918  
                             i2l4030 19DC                               i2l4022 1998  
                             i2l4014 1954                               i2l4006 191E  
                             i2l4034 19FE                               i2l4026 19BA  
                             i2l4018 1976                               i2l4042 1A28  
                             i2l4044 1A66                       __CFG_WDTEN$OFF 000000  
                             i2l3436 3514                               Delay@x 001A  
                             i2l3438 3526                               i2l3930 359E  
                             i2l3952 1768                               i2l3944 3634  
                             i2l3936 3612                               i2l3970 17F2  
                             i2l3964 17C4                               i2l3892 3432  
                             i2l3982 184E                               i2l3958 1796  
                             i2l3976 1820                               i2l3896 3442  
                             i2l3888 3428                               i2l3994 18AA  
                             i2l3988 187C                               _RCREG1 000FAE  
                      ??_Temp_Filter 003B                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _TX1REG 000FAD  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                     __CFG_XINST$OFF 000000                     __end_of__powers_ 0677  
              __end_of_Tempeture_Get 35D8                               ___ftge 3066  
            __end_of_TMR1_StartTimer 37B0                               ___wmul 3666  
                          ??___awdiv 0021                            ??___ftadd 00D2  
                     __CFG_STVREN$ON 000000                            ??___awmod 001B  
                          ??___ftdiv 0029                            ??___ftneg 001A  
                          ??___lldiv 001F                            ??___ftmul 0038  
                          ??___llmod 002C                            ??___ftsub 003B  
                          ??___fttol 00CD                               _fround 1CEC  
                             clear_0 363E                               clear_1 364A  
                             clear_2 3656                     ___awdiv@quotient 0023  
                 __size_of_Temp_Read 0018                      ___awmod@divisor 0019  
                    ___awmod@counter 001B                               _printf 06C8  
              ___ftmul@f3_as_product 00BD                            ??_isdigit 0017  
                       _Battery_Read 375A                         _Battery_Volt 0060  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    ??_EUSART1_Write 0017                      _eusart1RxBuffer 0092  
      __size_of_INTERRUPT_Initialize 000C                      _eusart1TxBuffer 009A  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 36F6  
                   __end_oflog@coeff 0692                           __accesstop 0060  
            __end_of__initialization 365C                           ___ftadd@f1 00CC  
                         ___ftadd@f2 00CF                           ___ftge@ff1 002B  
                         ___ftge@ff2 002E                   ?_SYSTEM_Initialize 0001  
                       eval_poly@res 00E1                        ___rparam_used 000001  
                         ___ftdiv@f1 0023                           ___ftdiv@f2 0026  
                         ___ftdiv@f3 002D                          SetBypas@pin 0017  
                         ___ftneg@f1 0017                           ___awtoft@c 001F  
                      __end_of_Delay 3576                           ___ftmul@f1 0032  
                         ___ftmul@f2 0035                           ___ftsub@f1 00D8  
                         ___ftsub@f2 00DB                  __end_of_Temp_Filter 22E6  
                         ___fttol@f1 00C9         __size_of_ADC_StartConversion 001A  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 0017  
                          ?_TMR1_ISR 0001                           ___lltoft@c 001F  
                     _Current_Aquire 003F                        __end_of_frexp 318E  
                      __end_of_scale 174A                        __end_of_putch 37AC  
              Battery_Get@channelnum 002B               ??_EUSART1_Transmit_ISR 0001  
            _ADC_GetConversionResult 3772                           __div_to_l_ 27EC  
                            ??_Delay 0019          __end_of_EUSART1_Receive_ISR 3638  
                      ?_Temp_Convert 0001                      __div_to_l_@exp1 0022  
                    __div_to_l_@cntr 0021                              ??_frexp 001C  
                            ??_scale 003B            __end_of_SYSTEM_Initialize 3710  
                    __div_to_l_@quot 001D                              ??_putch 0018  
                      _eusart1RxHead 0043                        _eusart1TxHead 0045  
                      _eusart1RxTail 0044                           __pbssBANK0 0060  
                         __pbssBANK1 0100                        _eusart1TxTail 0046  
                 __size_of_eval_poly 00E2                      __CFG_PLLCFG$OFF 000000  
                  __end_of_Temp_Read 375A                            ?_Set_4051 0001  
                         __pnvCOMRAM 0047                Temp_Convert@steinhart 00F1  
                      __div_to_l_@f1 0017                        __div_to_l_@f2 001A  
                          ?_SetBypas 0017                   __CFG_CCP2MX$PORTC1 000000  
                _TempBattery_Current 0196                              ?___ftge 002B  
                          ?_RunBypas 0001                              ?___wmul 0025  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0003  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 174A  
                            ?_fround 00C2                            ?___awtoft 001F  
                          ?___ftpack 0017                              ?_printf 00DE  
                          ?___lltoft 001F              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 00EF               __size_of_Battery_Fault 00B0  
                     Battery_Fault@i 0035                              _OSCCON2 000FD2  
                     ??_Temp_Convert 003B                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                       ?_Battery_Get 002B                           ??_Set_4051 0003  
                        _Temp_Filter 217C                          _Temp_Aquire 0040  
                         ??_SetBypas 001B                      __CFG_PWRTEN$OFF 000000  
                  __end_of__npowers_ 0650                              __Hparam 0000  
                         _scale$1742 00C5                              __Lparam 0000  
                         ??_RunBypas 0034                      __size_of___ftge 0096  
                            ___awdiv 2FD0                              ___ftadd 1A6E  
                            ___awmod 321A                              ___ftdiv 2A4E  
                            ___ftneg 368E                              ___lldiv 318E  
                    __size_of___wmul 0028                              ___ftmul 2920  
                            ___llmod 329C                              ___ftsub 336C  
                            ___fttol 22E6                         __psmallconst 0600  
          ??_ADC_GetConversionResult 0003                              __pcinit 3638  
                         ??___awtoft 0022                           ??___ftpack 001C  
                  __end_of_eval_poly 2C1C                      __size_of_fround 0256  
                            __ramtop 0600                           ??___lltoft 0023  
                            __ptext0 26B4                              __ptext1 06C8  
                            __ptext2 1326                              __ptext3 37A2  
                            __ptext4 3454                              __ptext5 36B2  
                            __ptext6 1CEC                              __ptext7 321A  
                            __ptext8 2FD0                              __ptext9 257A  
                    __size_of_printf 0C5E                            _T1CONbits 000FCD  
                        ?__div_to_l_ 0017                              _dpowers 0601  
              _OSCILLATOR_Initialize 3788                         __size_of_log 0142  
                            _isdigit 36B2                     ___awmod@dividend 0017  
                 _EUSART1_Initialize 3494             ??_PIN_MANAGER_Initialize 0017  
           __size_of_Battery_Convert 00B6           __size_of_SYSTEM_Initialize 001A  
               end_of_initialization 365C                            Delay@wait 0017  
                ?_EUSART1_Initialize 0001                        __Lmediumconst 0000  
                      _Battery_Fault 2F20                      ___lldiv@divisor 001B  
                    ___lldiv@counter 0023                              printf@c 0218  
                            printf@f 00DE                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                   Battery_Convert@x 00C2                       __tdiv_to_l_@f1 0017  
                     __tdiv_to_l_@f2 001A                 ??_EUSART1_Initialize 0017  
                      ??__tdiv_to_l_ 001D                  _ADC_StartConversion 3710  
                EUSART1_Write@txData 0017                          _Volt_Aquire 0041  
                     ?_Battery_Fault 0001                          ___ftdiv@exp 0030  
                        printf@width 0211                  __size_of__div_to_l_ 0134  
                        ___ftmul@exp 00BC                 ?_ADC_StartConversion 0001  
               __end_of_Temp_Convert 217C         __end_of_INTERRUPT_Initialize 37A2  
                     __end_of___ftge 30FC                       __end_of___wmul 368E  
                  __size_of_TMR1_ISR 004A                       _ADC_Initialize 372A  
             ?_OSCILLATOR_Initialize 0001                       __end_of_fround 1F42  
                     __end_of_printf 1326                  start_initialization 3638  
                         eval_poly@d 00DB                           eval_poly@n 00DD  
                         eval_poly@x 00D8      __size_of_PIN_MANAGER_Initialize 004E  
                __end_of__tdiv_to_l_ 26B4                          __end_of_log 257A  
             __size_of_Tempeture_Get 0030                          putch@txData 0018  
              __end_of_EUSART1_Write 3494                           frexp@value 0017  
                  ??_Battery_Convert 003B                      ___llmod@divisor 0028  
               __size_of_Battery_Get 0030                      ___llmod@counter 002C  
                  __size_of_Set_4051 0038                            _Temp_DegF 0178  
                   _PrevBattery_Volt 013C                            _Temp_Done 00A2  
                          _Temp_Read 3742                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                    __size_of_SetBypas 00B2  
                           ??___ftge 0031                             ??___wmul 0029  
             __end_of_ADC_Initialize 3742                            RunBypas@i 0039  
                           ?_ADC_ISR 0001                             ??_fround 003B  
                  __size_of_RunBypas 00D6                             ??_printf 00E5  
                     _eusart1RxCount 0042                           fround@prec 00CB  
                  __size_of___awtoft 003C                    __size_of___ftpack 00C6  
                          _Volt_Done 00A4                TMR1_ISR@CountCallBack 003B  
                  __size_of___lltoft 0060                          __pbssCOMRAM 003B  
      __size_of_EUSART1_Transmit_ISR 0032                        __pcstackBANK0 00BC  
                      __pcstackBANK2 0200                         _isdigit$1357 0018  
                      _PrevTemp_DegF 015A                      ??_Battery_Fault 0034  
       __size_of_EUSART1_Receive_ISR 0030                         ?_Temp_Filter 0001  
                         ?_Temp_Read 0001               _PIN_MANAGER_Initialize 33BC  
                          __pintcode 0008                    _Temp_Convert$1738 00E9  
                  _Temp_Convert$1739 00EC                        _Tempeture_Get 35A8  
                           ?___awdiv 001D                             ?___ftadd 00CC  
                           ?___awmod 0017                             ?___ftdiv 0023  
                           ?___ftneg 0017                             ?___lldiv 0017  
                           ?___ftmul 0032                             ?___llmod 0024  
                           ?___ftsub 00D8                            __npowers_ 0629  
                           ?___fttol 00C9                         Temp_Filter@x 00D8  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 0009  
                        __tdiv_to_l_ 257A                         ??__div_to_l_ 001D  
                           _BAUD1CON 000FB8                          __smallconst 0600  
           __size_of_TMR1_StartTimer 0004                             ?_isdigit 0001  
                          _eval_poly 2B3A                       __size_of_Delay 0032  
                     __size_of_frexp 0092                       __size_of_scale 0424  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 3796  
                     ___wmul@product 0029                __size_of_Temp_Convert 023A  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 00A2                             _PIR1bits 000F9E  
                 __end_of__div_to_l_ 2920                             i2u359_40 3424  
                     ?_Tempeture_Get 002B                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 340A  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 0324  
                _PrevBattery_Current 011E                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0025                            main@x_966 00FB  
                         printf@flag 020F                           printf@fval 0213  
                         printf@prec 0216                        ?_Battery_Read 0001  
                         ?_eval_poly 00D8                         _Temp_Convert 1F42  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                           _Set_4051 350C                            frexp@eptr 001A  
                           _SetBypas 2E6E                             __Hrparam 0000  
                        ??_Temp_Read 0003                             _Temp_Adc 00A8  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                 __CFG_BOREN$SBORDIS 000000                             _RunBypas 2C1C  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0017  
                   __size_of___awdiv 0096                     __size_of___ftadd 027E  
                   __size_of___awmod 0082                     __size_of___ftdiv 00EC  
                   __size_of___ftneg 0024                     __size_of___lldiv 008C  
                   __size_of___ftmul 012E                     __size_of___llmod 0070  
                   __size_of___ftsub 0050                     __size_of___fttol 0152  
        __size_of_EUSART1_Initialize 003C                             ___awtoft 34D0  
                           ___ftpack 2CF2                          _fround$1740 00C8  
                        _fround$1741 00C5                             ___lltoft 330C  
                     ??_Battery_Read 0003                      _Battery_Convert 2DB8  
                 Battery_Fault@fault 0034                     __size_of_isdigit 0022  
                    _Battery_Current 0100                             __ptext10 27EC  
                           __ptext11 330C                             __ptext20 2B3A  
                           __ptext12 329C                             __ptext21 336C  
                           __ptext13 318E                           _T1GCONbits 000FCC  
                           __ptext30 3494                             __ptext22 217C  
                           __ptext14 22E6                             __ptext31 372A  
                           __ptext23 1A6E                             __ptext15 368E  
                           __ptext40 2920                             __ptext32 2C1C  
                           __ptext24 36F6                             __ptext16 35A8  
                           __ptext41 2A4E                             __ptext33 2E6E  
                           __ptext25 36D4                             __ptext17 1F42  
                           __ptext50 174A                             __ptext42 34D0  
                           __ptext34 35D8                             __ptext26 37AC  
                           __ptext18 2438                             __ptext51 350C  
                           __ptext43 2CF2                             __ptext35 3544  
                           __ptext27 33BC                             __ptext19 30FC  
                           __ptext52 3710                             __ptext36 2F20  
                           __ptext28 3788                             __ptext53 3772  
                           __ptext45 340A                             __ptext37 3066  
                           __ptext29 3796                             __ptext46 3742  
                           __ptext38 2DB8                             __ptext47 375A  
                           __ptext39 3666                             __ptext48 3576  
                           __ptext49 3608                             __powers_ 0650  
                  ??_TMR1_StartTimer 0017                        __size_of_main 0138  
                       _TmpTemp_DegF 01D2                 __size_of_Temp_Filter 016A  
                    ??_Tempeture_Get 002E                           _RC1STAbits 000FAB  
 __end_of_INTERRUPT_InterruptManager 00AA           _INTERRUPT_InterruptManager 0008  
                           main@argc 00F4                            printf@exp 020D  
                           main@argv 00F6                            printf@val 0209  
                _EUSART1_Receive_ISR 3608                             log@coeff 0677  
                         _INTCONbits 000FF2                          ??_eval_poly 00DF  
                           isdigit@c 0019               ??_INTERRUPT_Initialize 0017  
                           scale@scl 00C8                        ??_Battery_Get 002E  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0025  
                   __tdiv_to_l_@cntr 0024                     __tdiv_to_l_@quot 0020  
               ?_EUSART1_Receive_ISR 0001          __end_of_ADC_StartConversion 372A  
                   _TempBattery_Volt 01B4                     ___lldiv@dividend 0017  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 3788  
       __end_of_EUSART1_Transmit_ISR 35A8                     ??_ADC_Initialize 0017  
                           printf@ap 0203              __end_of_Battery_Convert 2E6E  
             __size_of_EUSART1_Write 0040                         ?__tdiv_to_l_ 0017  
                        _printf$1743 0200                     ___lldiv@quotient 001F  
                  __CFG_T3CMX$PORTC0 000000                ??_EUSART1_Receive_ISR 0001  
     __end_of_PIN_MANAGER_Initialize 340A                __end_of_Battery_Fault 2FD0  
                  __CFG_FOSC$INTIO67 000000                 __end_of_Battery_Read 3772  
                    _TMR1_Initialize 36D4                     _ADC_Buffer_Point 003D  
                __end_of_Battery_Get 3608                      Set_4051@Channel 0001  
