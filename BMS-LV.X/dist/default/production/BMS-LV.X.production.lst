

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Jun 05 02:57:54 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           	psect	smallconst
    59  000600                     __psmallconst:
    60                           	opt stack 0
    61  000600  00                 	db	0
    62  000601                     log@coeff:
    63                           	opt stack 0
    64  000601  00                 	db	0
    65  000602  00                 	db	0
    66  000603  00                 	db	0
    67  000604  00                 	db	0
    68  000605  80                 	db	128
    69  000606  3F                 	db	63
    70  000607  F0                 	db	240
    71  000608  FF                 	db	255
    72  000609  BE                 	db	190
    73  00060A  E2                 	db	226
    74  00060B  A9                 	db	169
    75  00060C  3E                 	db	62
    76  00060D  83                 	db	131
    77  00060E  76                 	db	118
    78  00060F  BE                 	db	190
    79  000610  AE                 	db	174
    80  000611  2B                 	db	43
    81  000612  3E                 	db	62
    82  000613  3C                 	db	60
    83  000614  C3                 	db	195
    84  000615  BD                 	db	189
    85  000616  D2                 	db	210
    86  000617  13                 	db	19
    87  000618  3D                 	db	61
    88  000619  78                 	db	120
    89  00061A  D3                 	db	211
    90  00061B  BB                 	db	187
    91  00061C                     __end_oflog@coeff:
    92                           	opt stack 0
    93  0000                     _TMR1	set	4046
    94  0000                     _ADCON0	set	4034
    95  0000                     _ADCON0bits	set	4034
    96  0000                     _ADCON1	set	4033
    97  0000                     _ADCON2	set	4032
    98  0000                     _ADRESH	set	4036
    99  0000                     _ADRESL	set	4035
   100  0000                     _ANSELA	set	3896
   101  0000                     _ANSELB	set	3897
   102  0000                     _ANSELC	set	3898
   103  0000                     _ANSELD	set	3899
   104  0000                     _ANSELE	set	3900
   105  0000                     _INTCON2bits	set	4081
   106  0000                     _INTCONbits	set	4082
   107  0000                     _IPR1bits	set	3999
   108  0000                     _LATA	set	3977
   109  0000                     _LATB	set	3978
   110  0000                     _LATC	set	3979
   111  0000                     _LATD	set	3980
   112  0000                     _LATE	set	3981
   113  0000                     _OSCCON	set	4051
   114  0000                     _OSCCON2	set	4050
   115  0000                     _OSCTUNE	set	3995
   116  0000                     _PIE1bits	set	3997
   117  0000                     _PIR1bits	set	3998
   118  0000                     _RCONbits	set	4048
   119  0000                     _T1CON	set	4045
   120  0000                     _T1CONbits	set	4045
   121  0000                     _T1GCON	set	4044
   122  0000                     _T1GCONbits	set	4044
   123  0000                     _TMR1H	set	4047
   124  0000                     _TMR1L	set	4046
   125  0000                     _TRISA	set	3986
   126  0000                     _TRISB	set	3987
   127  0000                     _TRISC	set	3988
   128  0000                     _TRISD	set	3989
   129  0000                     _TRISE	set	3990
   130  0000                     _WPUB	set	3937
   131  0000                     _LATA4	set	31820
   132  0000                     _LATA6	set	31822
   133  0000                     _LATA7	set	31823
   134  0000                     _LATB0	set	31824
   135  0000                     _LATB1	set	31825
   136  0000                     _LATB2	set	31826
   137  0000                     _LATC0	set	31832
   138  0000                     _LATD2	set	31842
   139  0000                     _LATD3	set	31843
   140  0000                     _LATD4	set	31844
   141  0000                     _LATD5	set	31845
   142  0000                     _LATD6	set	31846
   143  0000                     _LATD7	set	31847
   144  00061C  00                 	db	0	; dummy byte at the end
   145  0000                     
   146                           	psect	nvCOMRAM
   147  000048                     __pnvCOMRAM:
   148                           	opt stack 0
   149  000048                     _timer1ReloadVal:
   150                           	opt stack 0
   151  000048                     	ds	2
   152                           
   153                           ; #config settings
   154  0000                     
   155                           	psect	cinit
   156  002246                     __pcinit:
   157                           	opt stack 0
   158  002246                     start_initialization:
   159                           	opt stack 0
   160  002246                     __initialization:
   161                           	opt stack 0
   162                           
   163                           ; Clear objects allocated to BANK1 (240 bytes)
   164  002246  EE01  F000         	lfsr	0,__pbssBANK1
   165  00224A  0EF0               	movlw	240
   166  00224C                     clear_0:
   167  00224C  6AEE               	clrf	postinc0,c
   168  00224E  06E8               	decf	wreg,f,c
   169  002250  E1FD               	bnz	clear_0
   170                           
   171                           ; Clear objects allocated to BANK0 (103 bytes)
   172  002252  EE00  F060         	lfsr	0,__pbssBANK0
   173  002256  0E67               	movlw	103
   174  002258                     clear_1:
   175  002258  6AEE               	clrf	postinc0,c
   176  00225A  06E8               	decf	wreg,f,c
   177  00225C  E1FD               	bnz	clear_1
   178                           
   179                           ; Clear objects allocated to COMRAM (7 bytes)
   180  00225E  EE00  F041         	lfsr	0,__pbssCOMRAM
   181  002262  0E07               	movlw	7
   182  002264                     clear_2:
   183  002264  6AEE               	clrf	postinc0,c
   184  002266  06E8               	decf	wreg,f,c
   185  002268  E1FD               	bnz	clear_2
   186  00226A                     end_of_initialization:
   187                           	opt stack 0
   188  00226A                     __end_of__initialization:
   189                           	opt stack 0
   190  00226A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   191  00226C  6EF8               	movwf	tblptru,c
   192  00226E  0100               	movlb	0
   193  002270  EFA4  F00C         	goto	_main	;jump to C main() function
   194                           tblptru	equ	0xFF8
   195                           postinc0	equ	0xFEE
   196                           wreg	equ	0xFE8
   197                           
   198                           	psect	bssCOMRAM
   199  000041                     __pbssCOMRAM:
   200                           	opt stack 0
   201  000041                     TMR1_ISR@CountCallBack:
   202                           	opt stack 0
   203  000041                     	ds	2
   204  000043                     _ADC_Buffer_Point:
   205                           	opt stack 0
   206  000043                     	ds	2
   207  000045                     _Current_Aquire:
   208                           	opt stack 0
   209  000045                     	ds	1
   210  000046                     _Temp_Aquire:
   211                           	opt stack 0
   212  000046                     	ds	1
   213  000047                     _Volt_Aquire:
   214                           	opt stack 0
   215  000047                     	ds	1
   216                           tblptru	equ	0xFF8
   217                           postinc0	equ	0xFEE
   218                           wreg	equ	0xFE8
   219                           
   220                           	psect	bssBANK0
   221  000060                     __pbssBANK0:
   222                           	opt stack 0
   223  000060                     _Battery_Volt:
   224                           	opt stack 0
   225  000060                     	ds	30
   226  00007E                     _Battery_Adc:
   227                           	opt stack 0
   228  00007E                     	ds	20
   229  000092                     _Current_Adc:
   230                           	opt stack 0
   231  000092                     	ds	20
   232  0000A6                     _Current_Mean:
   233                           	opt stack 0
   234  0000A6                     	ds	3
   235  0000A9                     _Current_Done:
   236                           	opt stack 0
   237  0000A9                     	ds	2
   238  0000AB                     _Temp_Done:
   239                           	opt stack 0
   240  0000AB                     	ds	2
   241  0000AD                     _Volt_Done:
   242                           	opt stack 0
   243  0000AD                     	ds	2
   244  0000AF                     _errno:
   245                           	opt stack 0
   246  0000AF                     	ds	2
   247  0000B1                     _fault:
   248                           	opt stack 0
   249  0000B1                     	ds	1
   250  0000B2                     _infault:
   251                           	opt stack 0
   252  0000B2                     	ds	1
   253  0000B3                     _Temp_Adc:
   254                           	opt stack 0
   255  0000B3                     	ds	20
   256                           tblptru	equ	0xFF8
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	bssBANK1
   261  000100                     __pbssBANK1:
   262                           	opt stack 0
   263  000100                     _Battery_Current:
   264                           	opt stack 0
   265  000100                     	ds	30
   266  00011E                     _PrevBattery_Current:
   267                           	opt stack 0
   268  00011E                     	ds	30
   269  00013C                     _PrevBattery_Volt:
   270                           	opt stack 0
   271  00013C                     	ds	30
   272  00015A                     _PrevTemp_DegF:
   273                           	opt stack 0
   274  00015A                     	ds	30
   275  000178                     _Temp_DegF:
   276                           	opt stack 0
   277  000178                     	ds	30
   278  000196                     _TempBattery_Current:
   279                           	opt stack 0
   280  000196                     	ds	30
   281  0001B4                     _TempBattery_Volt:
   282                           	opt stack 0
   283  0001B4                     	ds	30
   284  0001D2                     _TmpTemp_DegF:
   285                           	opt stack 0
   286  0001D2                     	ds	30
   287                           tblptru	equ	0xFF8
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	cstackBANK0
   292  0000C7                     __pcstackBANK0:
   293                           	opt stack 0
   294  0000C7                     ___ftmul@exp:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x0
   298  0000C7                     	ds	1
   299  0000C8                     ___ftmul@f3_as_product:
   300                           	opt stack 0
   301                           
   302                           ; 3 bytes @ 0x1
   303  0000C8                     	ds	3
   304  0000CB                     ___ftmul@cntr:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x4
   308  0000CB                     	ds	1
   309  0000CC                     ___ftmul@sign:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x5
   313  0000CC                     	ds	1
   314  0000CD                     ??_Battery_Convert:
   315  0000CD                     ?___ftadd:
   316                           	opt stack 0
   317  0000CD                     ___ftadd@f1:
   318                           	opt stack 0
   319                           
   320                           ; 3 bytes @ 0x6
   321  0000CD                     	ds	2
   322  0000CF                     Battery_Convert@x:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x8
   326  0000CF                     	ds	1
   327  0000D0                     ___ftadd@f2:
   328                           	opt stack 0
   329                           
   330                           ; 3 bytes @ 0x9
   331  0000D0                     	ds	3
   332  0000D3                     ??___ftadd:
   333                           
   334                           ; 0 bytes @ 0xC
   335  0000D3                     	ds	3
   336  0000D6                     ___ftadd@sign:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0xF
   340  0000D6                     	ds	1
   341  0000D7                     ___ftadd@exp2:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x10
   345  0000D7                     	ds	1
   346  0000D8                     ___ftadd@exp1:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0x11
   350  0000D8                     	ds	1
   351  0000D9                     ?___ftsub:
   352                           	opt stack 0
   353  0000D9                     ?_eval_poly:
   354                           	opt stack 0
   355  0000D9                     Temp_Filter@x:
   356                           	opt stack 0
   357  0000D9                     Current_Fault@fault:
   358                           	opt stack 0
   359  0000D9                     Current_Filter@x:
   360                           	opt stack 0
   361  0000D9                     ___ftsub@f1:
   362                           	opt stack 0
   363  0000D9                     eval_poly@x:
   364                           	opt stack 0
   365                           
   366                           ; 3 bytes @ 0x12
   367  0000D9                     	ds	2
   368  0000DB                     ??_Current_Convert:
   369  0000DB                     Current_Fault@i:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x14
   373  0000DB                     	ds	1
   374  0000DC                     eval_poly@d:
   375                           	opt stack 0
   376  0000DC                     ___ftsub@f2:
   377                           	opt stack 0
   378                           
   379                           ; 3 bytes @ 0x15
   380  0000DC                     	ds	1
   381  0000DD                     Current_Fault@i_873:
   382                           	opt stack 0
   383  0000DD                     _Current_Convert$1516:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x16
   387  0000DD                     	ds	1
   388  0000DE                     eval_poly@n:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x17
   392  0000DE                     	ds	1
   393  0000DF                     Current_Convert@x:
   394                           	opt stack 0
   395  0000DF                     Current_Fault@temp:
   396                           	opt stack 0
   397                           
   398                           ; 3 bytes @ 0x18
   399  0000DF                     	ds	1
   400  0000E0                     ??_eval_poly:
   401                           
   402                           ; 0 bytes @ 0x19
   403  0000E0                     	ds	2
   404  0000E2                     eval_poly@res:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x1B
   408  0000E2                     	ds	3
   409  0000E5                     ?_log:
   410                           	opt stack 0
   411  0000E5                     log@x:
   412                           	opt stack 0
   413                           
   414                           ; 3 bytes @ 0x1E
   415  0000E5                     	ds	3
   416  0000E8                     log@exponent:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x21
   420  0000E8                     	ds	2
   421  0000EA                     ??_Temp_Convert:
   422                           
   423                           ; 0 bytes @ 0x23
   424  0000EA                     	ds	2
   425  0000EC                     _Temp_Convert$1514:
   426                           	opt stack 0
   427                           
   428                           ; 3 bytes @ 0x25
   429  0000EC                     	ds	3
   430  0000EF                     _Temp_Convert$1515:
   431                           	opt stack 0
   432                           
   433                           ; 3 bytes @ 0x28
   434  0000EF                     	ds	3
   435  0000F2                     Temp_Convert@x:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x2B
   439  0000F2                     	ds	2
   440  0000F4                     Temp_Convert@steinhart:
   441                           	opt stack 0
   442                           
   443                           ; 3 bytes @ 0x2D
   444  0000F4                     	ds	3
   445  0000F7                     
   446                           ; 2 bytes @ 0x30
   447  0000F7                     	ds	2
   448  0000F9                     
   449                           ; 3 bytes @ 0x32
   450  0000F9                     	ds	3
   451                           tblptru	equ	0xFF8
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           
   455                           	psect	cstackCOMRAM
   456  000001                     __pcstackCOMRAM:
   457                           	opt stack 0
   458  000001                     ??_ADC_StartConversion:
   459  000001                     ??_ADC_GetConversion:
   460  000001                     ?_ADC_GetConversionResult:
   461                           	opt stack 0
   462  000001                     Set_4051@Channel:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x0
   466  000001                     	ds	1
   467  000002                     ADC_StartConversion@channel:
   468                           	opt stack 0
   469  000002                     ADC_GetConversion@channel:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x1
   473  000002                     	ds	1
   474  000003                     ??_Set_4051:
   475  000003                     ??_TMR1_ISR:
   476  000003                     ??_ADC_GetConversionResult:
   477                           
   478                           ; 0 bytes @ 0x2
   479  000003                     	ds	2
   480  000005                     ??_ADC_ISR:
   481                           
   482                           ; 0 bytes @ 0x4
   483  000005                     	ds	2
   484  000007                     ADC_ISR@ADC_Result:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x6
   488  000007                     	ds	2
   489  000009                     ??_INTERRUPT_InterruptManager:
   490                           
   491                           ; 0 bytes @ 0x8
   492  000009                     	ds	14
   493  000017                     ?___awdiv:
   494                           	opt stack 0
   495  000017                     ?___ftpack:
   496                           	opt stack 0
   497  000017                     ?_frexp:
   498                           	opt stack 0
   499  000017                     Delay@wait:
   500                           	opt stack 0
   501  000017                     SetBypas@pin:
   502                           	opt stack 0
   503  000017                     ___awdiv@dividend:
   504                           	opt stack 0
   505  000017                     ___ftpack@arg:
   506                           	opt stack 0
   507  000017                     frexp@value:
   508                           	opt stack 0
   509                           
   510                           ; 3 bytes @ 0x16
   511  000017                     	ds	2
   512  000019                     ??_Delay:
   513  000019                     SetBypas@state:
   514                           	opt stack 0
   515  000019                     ___awdiv@divisor:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x18
   519  000019                     	ds	1
   520  00001A                     ___ftpack@exp:
   521                           	opt stack 0
   522  00001A                     Delay@x:
   523                           	opt stack 0
   524  00001A                     frexp@eptr:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x19
   528  00001A                     	ds	1
   529  00001B                     ??_SetBypas:
   530  00001B                     ___awdiv@counter:
   531                           	opt stack 0
   532  00001B                     ___ftpack@sign:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x1A
   536  00001B                     	ds	1
   537  00001C                     ??___ftpack:
   538  00001C                     ??_frexp:
   539  00001C                     ___awdiv@sign:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x1B
   543  00001C                     	ds	1
   544  00001D                     ___awdiv@quotient:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x1C
   548  00001D                     	ds	2
   549  00001F                     ?___wmul:
   550                           	opt stack 0
   551  00001F                     ___wmul@multiplier:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x1E
   555  00001F                     	ds	2
   556  000021                     ___wmul@multiplicand:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x20
   560  000021                     	ds	2
   561  000023                     ___wmul@product:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x22
   565  000023                     	ds	2
   566  000025                     ?_Battery_Get:
   567                           	opt stack 0
   568  000025                     ?___awtoft:
   569                           	opt stack 0
   570  000025                     Battery_Get@channelnum:
   571                           	opt stack 0
   572  000025                     ___awtoft@c:
   573                           	opt stack 0
   574  000025                     ___ftge@ff1:
   575                           	opt stack 0
   576                           
   577                           ; 3 bytes @ 0x24
   578  000025                     	ds	3
   579  000028                     ___awtoft@sign:
   580                           	opt stack 0
   581  000028                     ___ftge@ff2:
   582                           	opt stack 0
   583                           
   584                           ; 3 bytes @ 0x27
   585  000028                     	ds	1
   586  000029                     ?___ftdiv:
   587                           	opt stack 0
   588  000029                     ___ftdiv@f1:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x28
   592  000029                     	ds	2
   593  00002B                     ??___ftge:
   594                           
   595                           ; 0 bytes @ 0x2A
   596  00002B                     	ds	1
   597  00002C                     ___ftdiv@f2:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x2B
   601  00002C                     	ds	2
   602  00002E                     Battery_Fault@fault:
   603                           	opt stack 0
   604  00002E                     Temp_Fault@fault:
   605                           	opt stack 0
   606  00002E                     RunBypas@cellbyp:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x2D
   610  00002E                     	ds	1
   611  00002F                     ??___ftdiv:
   612  00002F                     Battery_Fault@i:
   613                           	opt stack 0
   614  00002F                     Temp_Fault@i:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x2E
   618  00002F                     	ds	1
   619  000030                     RunBypas@batvolt:
   620                           	opt stack 0
   621                           
   622                           ; 3 bytes @ 0x2F
   623  000030                     	ds	2
   624  000032                     ___ftdiv@cntr:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x31
   628  000032                     	ds	1
   629  000033                     RunBypas@i:
   630                           	opt stack 0
   631  000033                     ___ftdiv@f3:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x32
   635  000033                     	ds	3
   636  000036                     ___ftdiv@exp:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x35
   640  000036                     	ds	1
   641  000037                     ___ftdiv@sign:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x36
   645  000037                     	ds	1
   646  000038                     ?___ftmul:
   647                           	opt stack 0
   648  000038                     ___ftmul@f1:
   649                           	opt stack 0
   650                           
   651                           ; 3 bytes @ 0x37
   652  000038                     	ds	3
   653  00003B                     ___ftmul@f2:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x3A
   657  00003B                     	ds	3
   658  00003E                     ??___ftmul:
   659                           
   660                           ; 0 bytes @ 0x3D
   661  00003E                     	ds	3
   662  000041                     tblptru	equ	0xFF8
   663                           postinc0	equ	0xFEE
   664                           wreg	equ	0xFE8
   665                           
   666                           ; 0 bytes @ 0x40
   667 ;;
   668 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   669 ;;
   670 ;; *************** function _main *****************
   671 ;; Defined at:
   672 ;;		line 35 in file "Main.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;  argc            2   48[BANK0 ] int 
   675 ;;  argv            3   50[BANK0 ] PTR PTR unsigned char 
   676 ;; Auto vars:     Size  Location     Type
   677 ;;		None
   678 ;; Return value:  Size  Location     Type
   679 ;;                  2   48[BANK0 ] int 
   680 ;; Registers used:
   681 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   687 ;;      Params:         0       5       0       0       0       0       0
   688 ;;      Locals:         0       0       0       0       0       0       0
   689 ;;      Temps:          0       0       0       0       0       0       0
   690 ;;      Totals:         0       5       0       0       0       0       0
   691 ;;Total ram usage:        5 bytes
   692 ;; Hardware stack levels required when called:    9
   693 ;; This function calls:
   694 ;;		_Battery_Convert
   695 ;;		_Battery_Fault
   696 ;;		_Current_Convert
   697 ;;		_Current_Fault
   698 ;;		_Delay
   699 ;;		_RunBypas
   700 ;;		_SYSTEM_Initialize
   701 ;;		_Temp_Convert
   702 ;;		_Temp_Fault
   703 ;; This function is called by:
   704 ;;		Startup code after reset
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           	psect	text0
   709  001948                     __ptext0:
   710                           	opt stack 0
   711  001948                     _main:
   712                           	opt stack 22
   713                           
   714                           ;Main.c: 37: SYSTEM_Initialize();
   715                           
   716                           ;incstack = 0
   717  001948  ECC3  F011         	call	_SYSTEM_Initialize	;wreg free
   718                           
   719                           ;Main.c: 39: do { LATD3 = 1; } while(0);
   720  00194C  868C               	bsf	3980,3,c	;volatile
   721                           
   722                           ;Main.c: 40: Delay(120);
   723  00194E  0E00               	movlw	0
   724  001950  6E18               	movwf	Delay@wait+1,c
   725  001952  0E78               	movlw	120
   726  001954  6E17               	movwf	Delay@wait,c
   727  001956  EC0A  F011         	call	_Delay	;wreg free
   728                           
   729                           ;Main.c: 41: do { LATD3 = 0; } while(0);
   730  00195A  968C               	bcf	3980,3,c	;volatile
   731                           
   732                           ;Main.c: 59: (INTCONbits.GIE = 1);
   733  00195C  8EF2               	bsf	intcon,7,c	;volatile
   734                           
   735                           ;Main.c: 62: (INTCONbits.PEIE = 1);
   736  00195E  8CF2               	bsf	intcon,6,c	;volatile
   737  001960                     l3668:
   738                           
   739                           ;Main.c: 72: {
   740                           ;Main.c: 73: if (Temp_Done)
   741  001960  0100               	movlb	0	; () banked
   742  001962  51AC               	movf	(_Temp_Done+1)& (0+255),w,b
   743  001964  11AB               	iorwf	_Temp_Done& (0+255),w,b
   744  001966  B4D8               	btfsc	status,2,c
   745  001968  D00A               	goto	l3676
   746                           
   747                           ; BSR set to: 0
   748                           ;Main.c: 74: {
   749                           ;Main.c: 75: Temp_Done = 0;
   750  00196A  0E00               	movlw	0
   751  00196C  0100               	movlb	0	; () banked
   752  00196E  6FAC               	movwf	(_Temp_Done+1)& (0+255),b
   753  001970  0E00               	movlw	0
   754  001972  0100               	movlb	0	; () banked
   755  001974  6FAB               	movwf	_Temp_Done& (0+255),b
   756                           
   757                           ; BSR set to: 0
   758                           ;Main.c: 76: Temp_Convert();
   759  001976  EC25  F007         	call	_Temp_Convert	;wreg free
   760                           
   761                           ;Main.c: 77: Temp_Fault();
   762  00197A  EC29  F010         	call	_Temp_Fault	;wreg free
   763  00197E                     l3676:
   764                           
   765                           ;Main.c: 84: }
   766                           ;Main.c: 85: if (Volt_Done)
   767  00197E  0100               	movlb	0	; () banked
   768  001980  51AE               	movf	(_Volt_Done+1)& (0+255),w,b
   769  001982  11AD               	iorwf	_Volt_Done& (0+255),w,b
   770  001984  B4D8               	btfsc	status,2,c
   771  001986  D00C               	goto	l3686
   772                           
   773                           ; BSR set to: 0
   774                           ;Main.c: 86: {
   775                           ;Main.c: 87: Volt_Done = 0;
   776  001988  0E00               	movlw	0
   777  00198A  0100               	movlb	0	; () banked
   778  00198C  6FAE               	movwf	(_Volt_Done+1)& (0+255),b
   779  00198E  0E00               	movlw	0
   780  001990  0100               	movlb	0	; () banked
   781  001992  6FAD               	movwf	_Volt_Done& (0+255),b
   782                           
   783                           ; BSR set to: 0
   784                           ;Main.c: 88: Battery_Convert();
   785  001994  ECE3  F00D         	call	_Battery_Convert	;wreg free
   786                           
   787                           ;Main.c: 89: Battery_Fault();
   788  001998  EC9B  F00E         	call	_Battery_Fault	;wreg free
   789                           
   790                           ;Main.c: 96: RunBypas();
   791  00199C  EC7E  F00D         	call	_RunBypas	;wreg free
   792  0019A0                     l3686:
   793                           
   794                           ;Main.c: 97: }
   795                           ;Main.c: 98: if (Current_Done)
   796  0019A0  0100               	movlb	0	; () banked
   797  0019A2  51AA               	movf	(_Current_Done+1)& (0+255),w,b
   798  0019A4  11A9               	iorwf	_Current_Done& (0+255),w,b
   799  0019A6  B4D8               	btfsc	status,2,c
   800  0019A8  D00E               	goto	l3696
   801                           
   802                           ; BSR set to: 0
   803                           ;Main.c: 99: {
   804                           ;Main.c: 100: Current_Done = 0;
   805  0019AA  0E00               	movlw	0
   806  0019AC  0100               	movlb	0	; () banked
   807  0019AE  6FAA               	movwf	(_Current_Done+1)& (0+255),b
   808  0019B0  0E00               	movlw	0
   809  0019B2  0100               	movlb	0	; () banked
   810  0019B4  6FA9               	movwf	_Current_Done& (0+255),b
   811                           
   812                           ; BSR set to: 0
   813                           ;Main.c: 101: Current_Convert();
   814  0019B6  EC11  F00D         	call	_Current_Convert	;wreg free
   815                           
   816                           ;Main.c: 102: Current_Fault();
   817  0019BA  EC44  F008         	call	_Current_Fault	;wreg free
   818                           
   819                           ;Main.c: 109: fault = Current_Fault();
   820  0019BE  EC44  F008         	call	_Current_Fault	;wreg free
   821  0019C2  0100               	movlb	0	; () banked
   822  0019C4  6FB1               	movwf	_fault& (0+255),b
   823  0019C6                     l3696:
   824                           
   825                           ; BSR set to: 0
   826                           ;Main.c: 110: }
   827                           ;Main.c: 111: if((fault == 1) && (infault == 0))
   828  0019C6  0100               	movlb	0	; () banked
   829  0019C8  05B1               	decf	_fault& (0+255),w,b
   830  0019CA  A4D8               	btfss	status,2,c
   831  0019CC  D014               	goto	l3710
   832                           
   833                           ; BSR set to: 0
   834  0019CE  0100               	movlb	0	; () banked
   835  0019D0  67B2               	tstfsz	_infault& (0+255),b
   836  0019D2  D011               	goto	l3710
   837                           
   838                           ; BSR set to: 0
   839                           ;Main.c: 112: {
   840                           ;Main.c: 114: infault = 1;
   841  0019D4  0E01               	movlw	1
   842  0019D6  0100               	movlb	0	; () banked
   843  0019D8  6FB2               	movwf	_infault& (0+255),b
   844                           
   845                           ; BSR set to: 0
   846                           
   847                           ; BSR set to: 0
   848                           
   849                           ;Main.c: 115: do { LATD2 = 1; } while(0);
   850  0019DA  848C               	bsf	3980,2,c	;volatile
   851                           
   852                           ; BSR set to: 0
   853                           ;Main.c: 116: Delay(40);
   854                           
   855                           ; BSR set to: 0
   856  0019DC  0E00               	movlw	0
   857  0019DE  6E18               	movwf	Delay@wait+1,c
   858  0019E0  0E28               	movlw	40
   859  0019E2  6E17               	movwf	Delay@wait,c
   860  0019E4  EC0A  F011         	call	_Delay	;wreg free
   861                           
   862                           ;Main.c: 117: do { LATD2 = 0; } while(0);
   863  0019E8  948C               	bcf	3980,2,c	;volatile
   864                           
   865                           ;Main.c: 118: Delay(40);
   866  0019EA  0E00               	movlw	0
   867  0019EC  6E18               	movwf	Delay@wait+1,c
   868  0019EE  0E28               	movlw	40
   869  0019F0  6E17               	movwf	Delay@wait,c
   870  0019F2  EC0A  F011         	call	_Delay	;wreg free
   871  0019F6                     l3710:
   872                           
   873                           ;Main.c: 119: }
   874                           ;Main.c: 120: if((fault == 0) && (infault == 1))
   875  0019F6  0100               	movlb	0	; () banked
   876  0019F8  67B1               	tstfsz	_fault& (0+255),b
   877  0019FA  D7B2               	goto	l3668
   878                           
   879                           ; BSR set to: 0
   880  0019FC  0100               	movlb	0	; () banked
   881  0019FE  05B2               	decf	_infault& (0+255),w,b
   882  001A00  A4D8               	btfss	status,2,c
   883  001A02  D7AE               	goto	l3668
   884                           
   885                           ; BSR set to: 0
   886                           
   887                           ;Main.c: 121: {
   888                           ;Main.c: 123: do { LATD3 = 1; } while(0);
   889  001A04  868C               	bsf	3980,3,c	;volatile
   890                           
   891                           ; BSR set to: 0
   892                           ;Main.c: 124: Delay(40);
   893                           
   894                           ; BSR set to: 0
   895  001A06  0E00               	movlw	0
   896  001A08  6E18               	movwf	Delay@wait+1,c
   897  001A0A  0E28               	movlw	40
   898  001A0C  6E17               	movwf	Delay@wait,c
   899  001A0E  EC0A  F011         	call	_Delay	;wreg free
   900                           
   901                           ;Main.c: 125: do { LATD3 = 0; } while(0);
   902  001A12  968C               	bcf	3980,3,c	;volatile
   903                           
   904                           ;Main.c: 126: Delay(40);
   905  001A14  0E00               	movlw	0
   906  001A16  6E18               	movwf	Delay@wait+1,c
   907  001A18  0E28               	movlw	40
   908  001A1A  6E17               	movwf	Delay@wait,c
   909  001A1C  EC0A  F011         	call	_Delay	;wreg free
   910  001A20  D79F               	goto	l3668
   911  001A22                     __end_of_main:
   912                           	opt stack 0
   913                           tblptru	equ	0xFF8
   914                           intcon	equ	0xFF2
   915                           postinc0	equ	0xFEE
   916                           wreg	equ	0xFE8
   917                           status	equ	0xFD8
   918                           
   919 ;; *************** function _Temp_Fault *****************
   920 ;; Defined at:
   921 ;;		line 12 in file "Tempeture.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  i               2   46[COMRAM] int 
   926 ;;  fault           1   45[COMRAM] unsigned char 
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      unsigned char 
   929 ;; Registers used:
   930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   936 ;;      Params:         0       0       0       0       0       0       0
   937 ;;      Locals:         3       0       0       0       0       0       0
   938 ;;      Temps:          0       0       0       0       0       0       0
   939 ;;      Totals:         3       0       0       0       0       0       0
   940 ;;Total ram usage:        3 bytes
   941 ;; Hardware stack levels used:    1
   942 ;; Hardware stack levels required when called:    5
   943 ;; This function calls:
   944 ;;		___ftge
   945 ;;		___wmul
   946 ;; This function is called by:
   947 ;;		_main
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text1
   952  002052                     __ptext1:
   953                           	opt stack 0
   954  002052                     _Temp_Fault:
   955                           	opt stack 25
   956                           
   957                           ;Tempeture.c: 15: char fault = 0;
   958                           
   959                           ;incstack = 0
   960  002052  0E00               	movlw	0
   961  002054  6E2E               	movwf	Temp_Fault@fault,c
   962                           
   963                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
   964  002056  0E00               	movlw	0
   965  002058  6E30               	movwf	Temp_Fault@i+1,c
   966  00205A  0E00               	movlw	0
   967  00205C  6E2F               	movwf	Temp_Fault@i,c
   968  00205E  5030               	movf	Temp_Fault@i+1,w,c
   969  002060  0A80               	xorlw	128
   970  002062  0F80               	addlw	-128
   971  002064  0E09               	movlw	9
   972  002066  B4D8               	btfsc	status,2,c
   973  002068  5C2F               	subwf	Temp_Fault@i,w,c
   974  00206A  B0D8               	btfsc	status,0,c
   975  00206C  0012               	return	
   976                           
   977                           ;Tempeture.c: 17: {
   978                           ;Tempeture.c: 18: if (60.5 < Temp_DegF[i])
   979  00206E  0E00               	movlw	0
   980  002070  6E25               	movwf	___ftge@ff1,c
   981  002072  0E72               	movlw	114
   982  002074  6E26               	movwf	___ftge@ff1+1,c
   983  002076  0E42               	movlw	66
   984  002078  6E27               	movwf	___ftge@ff1+2,c
   985  00207A  C02F  F01F         	movff	Temp_Fault@i,___wmul@multiplier
   986  00207E  C030  F020         	movff	Temp_Fault@i+1,___wmul@multiplier+1
   987  002082  0E00               	movlw	0
   988  002084  6E22               	movwf	___wmul@multiplicand+1,c
   989  002086  0E03               	movlw	3
   990  002088  6E21               	movwf	___wmul@multiplicand,c
   991  00208A  EC51  F011         	call	___wmul	;wreg free
   992  00208E  0101               	movlb	1	; () banked
   993  002090  0E78               	movlw	low _Temp_DegF
   994  002092  241F               	addwf	?___wmul,w,c
   995  002094  6ED9               	movwf	fsr2l,c
   996  002096  0101               	movlb	1	; () banked
   997  002098  0E01               	movlw	high _Temp_DegF
   998  00209A  2020               	addwfc	?___wmul+1,w,c
   999  00209C  6EDA               	movwf	fsr2h,c
  1000  00209E  CFDE F028          	movff	postinc2,___ftge@ff2
  1001  0020A2  CFDE F029          	movff	postinc2,___ftge@ff2+1
  1002  0020A6  CFDD F02A          	movff	postdec2,___ftge@ff2+2
  1003  0020AA  ECE1  F00F         	call	___ftge	;wreg free
  1004  0020AE  B0D8               	btfsc	status,0,c
  1005  0020B0  D002               	goto	l2944
  1006                           
  1007                           ;Tempeture.c: 19: {
  1008                           ;Tempeture.c: 20: fault = 1;
  1009  0020B2  0E01               	movlw	1
  1010  0020B4  6E2E               	movwf	Temp_Fault@fault,c
  1011  0020B6                     l2944:
  1012  0020B6  4A2F               	infsnz	Temp_Fault@i,f,c
  1013  0020B8  2A30               	incf	Temp_Fault@i+1,f,c
  1014  0020BA  D7D1               	goto	L1
  1015  0020BC                     __end_of_Temp_Fault:
  1016                           	opt stack 0
  1017                           tblptru	equ	0xFF8
  1018                           intcon	equ	0xFF2
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           postinc2	equ	0xFDE
  1022                           postdec2	equ	0xFDD
  1023                           fsr2h	equ	0xFDA
  1024                           fsr2l	equ	0xFD9
  1025                           status	equ	0xFD8
  1026                           
  1027 ;; *************** function _Temp_Convert *****************
  1028 ;; Defined at:
  1029 ;;		line 50 in file "Tempeture.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;		None
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;  steinhart       3   45[BANK0 ] float 
  1034 ;;  x               2   43[BANK0 ] int 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;		None               void
  1037 ;; Registers used:
  1038 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1044 ;;      Params:         0       0       0       0       0       0       0
  1045 ;;      Locals:         0      11       0       0       0       0       0
  1046 ;;      Temps:          0       2       0       0       0       0       0
  1047 ;;      Totals:         0      13       0       0       0       0       0
  1048 ;;Total ram usage:       13 bytes
  1049 ;; Hardware stack levels used:    1
  1050 ;; Hardware stack levels required when called:    8
  1051 ;; This function calls:
  1052 ;;		_Temp_Filter
  1053 ;;		___awtoft
  1054 ;;		___ftadd
  1055 ;;		___ftdiv
  1056 ;;		___ftmul
  1057 ;;		___ftsub
  1058 ;;		___wmul
  1059 ;;		_log
  1060 ;; This function is called by:
  1061 ;;		_main
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text2
  1066  000E4A                     __ptext2:
  1067                           	opt stack 0
  1068  000E4A                     _Temp_Convert:
  1069                           	opt stack 22
  1070                           
  1071                           ;Tempeture.c: 52: int x;
  1072                           ;Tempeture.c: 53: float steinhart;
  1073                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
  1074                           
  1075                           ;incstack = 0
  1076  000E4A  0E00               	movlw	0
  1077  000E4C  0100               	movlb	0	; () banked
  1078  000E4E  6FF3               	movwf	(Temp_Convert@x+1)& (0+255),b
  1079  000E50  0E00               	movlw	0
  1080  000E52  0100               	movlb	0	; () banked
  1081  000E54  6FF2               	movwf	Temp_Convert@x& (0+255),b
  1082  000E56                     
  1083                           ; BSR set to: 0
  1084  000E56  0100               	movlb	0	; () banked
  1085  000E58  51F3               	movf	(Temp_Convert@x+1)& (0+255),w,b
  1086  000E5A  0A80               	xorlw	128
  1087  000E5C  0F80               	addlw	-128
  1088  000E5E  0E0A               	movlw	10
  1089  000E60  B4D8               	btfsc	status,2,c
  1090  000E62  5DF2               	subwf	Temp_Convert@x& (0+255),w,b
  1091  000E64  B0D8               	btfsc	status,0,c
  1092  000E66  D10D               	goto	l3578
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;Tempeture.c: 55: {
  1096                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  1097                           
  1098                           ; BSR set to: 0
  1099                           
  1100                           ; BSR set to: 0
  1101  000E68  0E00               	movlw	0
  1102  000E6A  0100               	movlb	0	; () banked
  1103  000E6C  6FD0               	movwf	___ftadd@f2& (0+255),b
  1104  000E6E  0E80               	movlw	128
  1105  000E70  0100               	movlb	0	; () banked
  1106  000E72  6FD1               	movwf	(___ftadd@f2+1)& (0+255),b
  1107  000E74  0EBF               	movlw	191
  1108  000E76  0100               	movlb	0	; () banked
  1109  000E78  6FD2               	movwf	(___ftadd@f2+2)& (0+255),b
  1110  000E7A  0EB3               	movlw	low _Temp_Adc
  1111  000E7C  0100               	movlb	0	; () banked
  1112  000E7E  6FEA               	movwf	??_Temp_Convert& (0+255),b
  1113  000E80  0E00               	movlw	high _Temp_Adc
  1114  000E82  6FEB               	movwf	(??_Temp_Convert+1)& (0+255),b
  1115  000E84  90D8               	bcf	status,0,c
  1116  000E86  0100               	movlb	0	; () banked
  1117  000E88  35F2               	rlcf	Temp_Convert@x& (0+255),w,b
  1118  000E8A  6ED9               	movwf	fsr2l,c
  1119  000E8C  0100               	movlb	0	; () banked
  1120  000E8E  35F3               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  1121  000E90  6EDA               	movwf	fsr2h,c
  1122  000E92  0100               	movlb	0	; () banked
  1123  000E94  51EA               	movf	??_Temp_Convert& (0+255),w,b
  1124  000E96  26D9               	addwf	fsr2l,f,c
  1125  000E98  0100               	movlb	0	; () banked
  1126  000E9A  51EB               	movf	(??_Temp_Convert+1)& (0+255),w,b
  1127  000E9C  22DA               	addwfc	fsr2h,f,c
  1128  000E9E  CFDE F025          	movff	postinc2,___awtoft@c
  1129  000EA2  CFDD F026          	movff	postdec2,___awtoft@c+1
  1130  000EA6  ECAF  F010         	call	___awtoft	;wreg free
  1131  000EAA  C025  F02C         	movff	?___awtoft,___ftdiv@f2
  1132  000EAE  C026  F02D         	movff	?___awtoft+1,___ftdiv@f2+1
  1133  000EB2  C027  F02E         	movff	?___awtoft+2,___ftdiv@f2+2
  1134  000EB6  0EC0               	movlw	192
  1135  000EB8  6E29               	movwf	___ftdiv@f1,c
  1136  000EBA  0E7F               	movlw	127
  1137  000EBC  6E2A               	movwf	___ftdiv@f1+1,c
  1138  000EBE  0E44               	movlw	68
  1139  000EC0  6E2B               	movwf	___ftdiv@f1+2,c
  1140  000EC2  EC33  F00C         	call	___ftdiv	;wreg free
  1141  000EC6  C029  F0CD         	movff	?___ftdiv,___ftadd@f1
  1142  000ECA  C02A  F0CE         	movff	?___ftdiv+1,___ftadd@f1+1
  1143  000ECE  C02B  F0CF         	movff	?___ftdiv+2,___ftadd@f1+2
  1144  000ED2  ECE5  F005         	call	___ftadd	;wreg free
  1145  000ED6  C0CD  F0EC         	movff	?___ftadd,_Temp_Convert$1514
  1146  000EDA  C0CE  F0ED         	movff	?___ftadd+1,_Temp_Convert$1514+1
  1147  000EDE  C0CF  F0EE         	movff	?___ftadd+2,_Temp_Convert$1514+2
  1148                           
  1149                           ;Tempeture.c: 55: {
  1150                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  1151  000EE2  C0EC  F02C         	movff	_Temp_Convert$1514,___ftdiv@f2
  1152  000EE6  C0ED  F02D         	movff	_Temp_Convert$1514+1,___ftdiv@f2+1
  1153  000EEA  C0EE  F02E         	movff	_Temp_Convert$1514+2,___ftdiv@f2+2
  1154  000EEE  0E40               	movlw	64
  1155  000EF0  6E29               	movwf	___ftdiv@f1,c
  1156  000EF2  0E1C               	movlw	28
  1157  000EF4  6E2A               	movwf	___ftdiv@f1+1,c
  1158  000EF6  0E46               	movlw	70
  1159  000EF8  6E2B               	movwf	___ftdiv@f1+2,c
  1160  000EFA  EC33  F00C         	call	___ftdiv	;wreg free
  1161  000EFE  C029  F0EF         	movff	?___ftdiv,_Temp_Convert$1515
  1162  000F02  C02A  F0F0         	movff	?___ftdiv+1,_Temp_Convert$1515+1
  1163  000F06  C02B  F0F1         	movff	?___ftdiv+2,_Temp_Convert$1515+2
  1164                           
  1165                           ;Tempeture.c: 55: {
  1166                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  1167  000F0A  C0EF  F029         	movff	_Temp_Convert$1515,___ftdiv@f1
  1168  000F0E  C0F0  F02A         	movff	_Temp_Convert$1515+1,___ftdiv@f1+1
  1169  000F12  C0F1  F02B         	movff	_Temp_Convert$1515+2,___ftdiv@f1+2
  1170  000F16  0E40               	movlw	64
  1171  000F18  6E2C               	movwf	___ftdiv@f2,c
  1172  000F1A  0E1C               	movlw	28
  1173  000F1C  6E2D               	movwf	___ftdiv@f2+1,c
  1174  000F1E  0E46               	movlw	70
  1175  000F20  6E2E               	movwf	___ftdiv@f2+2,c
  1176  000F22  EC33  F00C         	call	___ftdiv	;wreg free
  1177  000F26  C029  F0F4         	movff	?___ftdiv,Temp_Convert@steinhart
  1178  000F2A  C02A  F0F5         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1179  000F2E  C02B  F0F6         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1180                           
  1181                           ;Tempeture.c: 57: steinhart = log(steinhart);
  1182  000F32  C0F4  F0E5         	movff	Temp_Convert@steinhart,log@x
  1183  000F36  C0F5  F0E6         	movff	Temp_Convert@steinhart+1,log@x+1
  1184  000F3A  C0F6  F0E7         	movff	Temp_Convert@steinhart+2,log@x+2
  1185  000F3E  EC78  F00A         	call	_log	;wreg free
  1186  000F42  C0E5  F0F4         	movff	?_log,Temp_Convert@steinhart
  1187  000F46  C0E6  F0F5         	movff	?_log+1,Temp_Convert@steinhart+1
  1188  000F4A  C0E7  F0F6         	movff	?_log+2,Temp_Convert@steinhart+2
  1189                           
  1190                           ;Tempeture.c: 58: steinhart /= 3950;
  1191  000F4E  C0F4  F029         	movff	Temp_Convert@steinhart,___ftdiv@f1
  1192  000F52  C0F5  F02A         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  1193  000F56  C0F6  F02B         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  1194  000F5A  0EE0               	movlw	224
  1195  000F5C  6E2C               	movwf	___ftdiv@f2,c
  1196  000F5E  0E76               	movlw	118
  1197  000F60  6E2D               	movwf	___ftdiv@f2+1,c
  1198  000F62  0E45               	movlw	69
  1199  000F64  6E2E               	movwf	___ftdiv@f2+2,c
  1200  000F66  EC33  F00C         	call	___ftdiv	;wreg free
  1201  000F6A  C029  F0F4         	movff	?___ftdiv,Temp_Convert@steinhart
  1202  000F6E  C02A  F0F5         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1203  000F72  C02B  F0F6         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1204                           
  1205                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  1206  000F76  C0F4  F0CD         	movff	Temp_Convert@steinhart,___ftadd@f1
  1207  000F7A  C0F5  F0CE         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  1208  000F7E  C0F6  F0CF         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  1209  000F82  0ECF               	movlw	207
  1210  000F84  0100               	movlb	0	; () banked
  1211  000F86  6FD0               	movwf	___ftadd@f2& (0+255),b
  1212  000F88  0E5B               	movlw	91
  1213  000F8A  0100               	movlb	0	; () banked
  1214  000F8C  6FD1               	movwf	(___ftadd@f2+1)& (0+255),b
  1215  000F8E  0E3B               	movlw	59
  1216  000F90  0100               	movlb	0	; () banked
  1217  000F92  6FD2               	movwf	(___ftadd@f2+2)& (0+255),b
  1218  000F94  ECE5  F005         	call	___ftadd	;wreg free
  1219  000F98  C0CD  F0F4         	movff	?___ftadd,Temp_Convert@steinhart
  1220  000F9C  C0CE  F0F5         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1221  000FA0  C0CF  F0F6         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1222                           
  1223                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  1224  000FA4  0E00               	movlw	0
  1225  000FA6  6E29               	movwf	___ftdiv@f1,c
  1226  000FA8  0E80               	movlw	128
  1227  000FAA  6E2A               	movwf	___ftdiv@f1+1,c
  1228  000FAC  0E3F               	movlw	63
  1229  000FAE  6E2B               	movwf	___ftdiv@f1+2,c
  1230  000FB0  C0F4  F02C         	movff	Temp_Convert@steinhart,___ftdiv@f2
  1231  000FB4  C0F5  F02D         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  1232  000FB8  C0F6  F02E         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  1233  000FBC  EC33  F00C         	call	___ftdiv	;wreg free
  1234  000FC0  C029  F0F4         	movff	?___ftdiv,Temp_Convert@steinhart
  1235  000FC4  C02A  F0F5         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1236  000FC8  C02B  F0F6         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1237                           
  1238                           ;Tempeture.c: 61: steinhart -= 273.15;
  1239  000FCC  C0F4  F0D9         	movff	Temp_Convert@steinhart,___ftsub@f1
  1240  000FD0  C0F5  F0DA         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  1241  000FD4  C0F6  F0DB         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  1242  000FD8  0E93               	movlw	147
  1243  000FDA  0100               	movlb	0	; () banked
  1244  000FDC  6FDC               	movwf	___ftsub@f2& (0+255),b
  1245  000FDE  0E88               	movlw	136
  1246  000FE0  0100               	movlb	0	; () banked
  1247  000FE2  6FDD               	movwf	(___ftsub@f2+1)& (0+255),b
  1248  000FE4  0E43               	movlw	67
  1249  000FE6  0100               	movlb	0	; () banked
  1250  000FE8  6FDE               	movwf	(___ftsub@f2+2)& (0+255),b
  1251  000FEA  ECD3  F010         	call	___ftsub	;wreg free
  1252  000FEE  C0D9  F0F4         	movff	?___ftsub,Temp_Convert@steinhart
  1253  000FF2  C0DA  F0F5         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  1254  000FF6  C0DB  F0F6         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  1255                           
  1256                           ;Tempeture.c: 62: steinhart = (steinhart*1.8) + 32.0;
  1257  000FFA  0E66               	movlw	102
  1258  000FFC  6E3B               	movwf	___ftmul@f2,c
  1259  000FFE  0EE6               	movlw	230
  1260  001000  6E3C               	movwf	___ftmul@f2+1,c
  1261  001002  0E3F               	movlw	63
  1262  001004  6E3D               	movwf	___ftmul@f2+2,c
  1263  001006  C0F4  F038         	movff	Temp_Convert@steinhart,___ftmul@f1
  1264  00100A  C0F5  F039         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  1265  00100E  C0F6  F03A         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  1266  001012  EC29  F00B         	call	___ftmul	;wreg free
  1267  001016  C038  F0CD         	movff	?___ftmul,___ftadd@f1
  1268  00101A  C039  F0CE         	movff	?___ftmul+1,___ftadd@f1+1
  1269  00101E  C03A  F0CF         	movff	?___ftmul+2,___ftadd@f1+2
  1270  001022  0E00               	movlw	0
  1271  001024  0100               	movlb	0	; () banked
  1272  001026  6FD0               	movwf	___ftadd@f2& (0+255),b
  1273  001028  0E00               	movlw	0
  1274  00102A  0100               	movlb	0	; () banked
  1275  00102C  6FD1               	movwf	(___ftadd@f2+1)& (0+255),b
  1276  00102E  0E42               	movlw	66
  1277  001030  0100               	movlb	0	; () banked
  1278  001032  6FD2               	movwf	(___ftadd@f2+2)& (0+255),b
  1279  001034  ECE5  F005         	call	___ftadd	;wreg free
  1280  001038  C0CD  F0F4         	movff	?___ftadd,Temp_Convert@steinhart
  1281  00103C  C0CE  F0F5         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1282  001040  C0CF  F0F6         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1283                           
  1284                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  1285  001044  C0F2  F01F         	movff	Temp_Convert@x,___wmul@multiplier
  1286  001048  C0F3  F020         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  1287  00104C  0E00               	movlw	0
  1288  00104E  6E22               	movwf	___wmul@multiplicand+1,c
  1289  001050  0E03               	movlw	3
  1290  001052  6E21               	movwf	___wmul@multiplicand,c
  1291  001054  EC51  F011         	call	___wmul	;wreg free
  1292  001058  0101               	movlb	1	; () banked
  1293  00105A  0ED2               	movlw	low _TmpTemp_DegF
  1294  00105C  241F               	addwf	?___wmul,w,c
  1295  00105E  6ED9               	movwf	fsr2l,c
  1296  001060  0101               	movlb	1	; () banked
  1297  001062  0E01               	movlw	high _TmpTemp_DegF
  1298  001064  2020               	addwfc	?___wmul+1,w,c
  1299  001066  6EDA               	movwf	fsr2h,c
  1300  001068  0100               	movlb	0	; () banked
  1301  00106A  C0F4  FFDE         	movff	Temp_Convert@steinhart,postinc2
  1302  00106E  0100               	movlb	0	; () banked
  1303  001070  C0F5  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  1304  001074  0100               	movlb	0	; () banked
  1305  001076  C0F6  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  1306                           
  1307                           ; BSR set to: 0
  1308  00107A  0100               	movlb	0	; () banked
  1309  00107C  4BF2               	infsnz	Temp_Convert@x& (0+255),f,b
  1310  00107E  2BF3               	incf	(Temp_Convert@x+1)& (0+255),f,b
  1311  001080  D6EA               	goto	L2
  1312  001082                     l3578:
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;Tempeture.c: 64: }
  1316                           ;Tempeture.c: 65: Temp_Filter();
  1317  001082  EC08  F009         	call	_Temp_Filter	;wreg free
  1318  001086  0012               	return	
  1319  001088                     __end_of_Temp_Convert:
  1320                           	opt stack 0
  1321                           tblptru	equ	0xFF8
  1322                           intcon	equ	0xFF2
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           postinc2	equ	0xFDE
  1326                           postdec2	equ	0xFDD
  1327                           fsr2h	equ	0xFDA
  1328                           fsr2l	equ	0xFD9
  1329                           status	equ	0xFD8
  1330                           
  1331 ;; *************** function _log *****************
  1332 ;; Defined at:
  1333 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;  x               3   30[BANK0 ] int 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;  exponent        2   33[BANK0 ] int 
  1338 ;; Return value:  Size  Location     Type
  1339 ;;                  3   30[BANK0 ] int 
  1340 ;; Registers used:
  1341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1342 ;; Tracked objects:
  1343 ;;		On entry : 0/0
  1344 ;;		On exit  : 0/0
  1345 ;;		Unchanged: 0/0
  1346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1347 ;;      Params:         0       3       0       0       0       0       0
  1348 ;;      Locals:         0       2       0       0       0       0       0
  1349 ;;      Temps:          0       0       0       0       0       0       0
  1350 ;;      Totals:         0       5       0       0       0       0       0
  1351 ;;Total ram usage:        5 bytes
  1352 ;; Hardware stack levels used:    1
  1353 ;; Hardware stack levels required when called:    7
  1354 ;; This function calls:
  1355 ;;		___awtoft
  1356 ;;		___ftadd
  1357 ;;		___ftmul
  1358 ;;		_eval_poly
  1359 ;;		_frexp
  1360 ;; This function is called by:
  1361 ;;		_Temp_Convert
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text3
  1366  0014F0                     __ptext3:
  1367                           	opt stack 0
  1368  0014F0                     _log:
  1369                           	opt stack 22
  1370                           
  1371                           ;incstack = 0
  1372  0014F0  0100               	movlb	0	; () banked
  1373  0014F2  51E7               	movf	(log@x+2)& (0+255),w,b
  1374  0014F4  0A80               	xorlw	128
  1375  0014F6  0F80               	addlw	128
  1376  0014F8  E107               	bnz	u2895
  1377  0014FA  0E00               	movlw	0
  1378  0014FC  0100               	movlb	0	; () banked
  1379  0014FE  5DE6               	subwf	(log@x+1)& (0+255),w,b
  1380  001500  E103               	bnz	u2895
  1381  001502  0E00               	movlw	0
  1382  001504  0100               	movlb	0	; () banked
  1383  001506  5DE5               	subwf	log@x& (0+255),w,b
  1384  001508                     u2895:
  1385  001508  B0D8               	btfsc	status,0,c
  1386  00150A  D010               	goto	l3444
  1387                           
  1388                           ; BSR set to: 0
  1389  00150C  0E00               	movlw	0
  1390  00150E  0100               	movlb	0	; () banked
  1391  001510  6FB0               	movwf	(_errno+1)& (0+255),b
  1392  001512  0E21               	movlw	33
  1393  001514  0100               	movlb	0	; () banked
  1394  001516  6FAF               	movwf	_errno& (0+255),b
  1395  001518  0E00               	movlw	0
  1396  00151A  0100               	movlb	0	; () banked
  1397  00151C  6FE5               	movwf	?_log& (0+255),b
  1398  00151E  0E00               	movlw	0
  1399  001520  0100               	movlb	0	; () banked
  1400  001522  6FE6               	movwf	(?_log+1)& (0+255),b
  1401  001524  0E00               	movlw	0
  1402  001526  0100               	movlb	0	; () banked
  1403  001528  6FE7               	movwf	(?_log+2)& (0+255),b
  1404  00152A  0012               	return	
  1405  00152C                     l3444:
  1406                           
  1407                           ; BSR set to: 0
  1408  00152C  0E7F               	movlw	127
  1409  00152E  0100               	movlb	0	; () banked
  1410  001530  15E7               	andwf	(log@x+2)& (0+255),w,b
  1411  001532  0100               	movlb	0	; () banked
  1412  001534  11E6               	iorwf	(log@x+1)& (0+255),w,b
  1413  001536  0100               	movlb	0	; () banked
  1414  001538  11E5               	iorwf	log@x& (0+255),w,b
  1415  00153A  A4D8               	btfss	status,2,c
  1416  00153C  D010               	goto	l3450
  1417                           
  1418                           ; BSR set to: 0
  1419  00153E  0E00               	movlw	0
  1420  001540  0100               	movlb	0	; () banked
  1421  001542  6FB0               	movwf	(_errno+1)& (0+255),b
  1422  001544  0E22               	movlw	34
  1423  001546  0100               	movlb	0	; () banked
  1424  001548  6FAF               	movwf	_errno& (0+255),b
  1425  00154A  0E00               	movlw	0
  1426  00154C  0100               	movlb	0	; () banked
  1427  00154E  6FE5               	movwf	?_log& (0+255),b
  1428  001550  0E00               	movlw	0
  1429  001552  0100               	movlb	0	; () banked
  1430  001554  6FE6               	movwf	(?_log+1)& (0+255),b
  1431  001556  0E00               	movlw	0
  1432  001558  0100               	movlb	0	; () banked
  1433  00155A  6FE7               	movwf	(?_log+2)& (0+255),b
  1434  00155C  0012               	return	
  1435  00155E                     l3450:
  1436                           
  1437                           ; BSR set to: 0
  1438  00155E  0E00               	movlw	0
  1439  001560  6E3B               	movwf	___ftmul@f2,c
  1440  001562  0E00               	movlw	0
  1441  001564  6E3C               	movwf	___ftmul@f2+1,c
  1442  001566  0E40               	movlw	64
  1443  001568  6E3D               	movwf	___ftmul@f2+2,c
  1444  00156A  0100               	movlb	0	; () banked
  1445  00156C  0E00               	movlw	high log@exponent
  1446  00156E  6E1B               	movwf	frexp@eptr+1,c
  1447  001570  0100               	movlb	0	; () banked
  1448  001572  0EE8               	movlw	low log@exponent
  1449  001574  6E1A               	movwf	frexp@eptr,c
  1450  001576  C0E5  F017         	movff	log@x,frexp@value
  1451  00157A  C0E6  F018         	movff	log@x+1,frexp@value+1
  1452  00157E  C0E7  F019         	movff	log@x+2,frexp@value+2
  1453  001582  EC98  F00F         	call	_frexp	;wreg free
  1454  001586  C017  F038         	movff	?_frexp,___ftmul@f1
  1455  00158A  C018  F039         	movff	?_frexp+1,___ftmul@f1+1
  1456  00158E  C019  F03A         	movff	?_frexp+2,___ftmul@f1+2
  1457  001592  EC29  F00B         	call	___ftmul	;wreg free
  1458  001596  C038  F0CD         	movff	?___ftmul,___ftadd@f1
  1459  00159A  C039  F0CE         	movff	?___ftmul+1,___ftadd@f1+1
  1460  00159E  C03A  F0CF         	movff	?___ftmul+2,___ftadd@f1+2
  1461  0015A2  0E00               	movlw	0
  1462  0015A4  0100               	movlb	0	; () banked
  1463  0015A6  6FD0               	movwf	___ftadd@f2& (0+255),b
  1464  0015A8  0E80               	movlw	128
  1465  0015AA  0100               	movlb	0	; () banked
  1466  0015AC  6FD1               	movwf	(___ftadd@f2+1)& (0+255),b
  1467  0015AE  0EBF               	movlw	191
  1468  0015B0  0100               	movlb	0	; () banked
  1469  0015B2  6FD2               	movwf	(___ftadd@f2+2)& (0+255),b
  1470  0015B4  ECE5  F005         	call	___ftadd	;wreg free
  1471  0015B8  C0CD  F0E5         	movff	?___ftadd,log@x
  1472  0015BC  C0CE  F0E6         	movff	?___ftadd+1,log@x+1
  1473  0015C0  C0CF  F0E7         	movff	?___ftadd+2,log@x+2
  1474  0015C4  0100               	movlb	0	; () banked
  1475  0015C6  07E8               	decf	log@exponent& (0+255),f,b
  1476  0015C8  A0D8               	btfss	status,0,c
  1477  0015CA  07E9               	decf	(log@exponent+1)& (0+255),f,b
  1478                           
  1479                           ; BSR set to: 0
  1480  0015CC  C0E5  F0D9         	movff	log@x,eval_poly@x
  1481  0015D0  C0E6  F0DA         	movff	log@x+1,eval_poly@x+1
  1482  0015D4  C0E7  F0DB         	movff	log@x+2,eval_poly@x+2
  1483  0015D8  0E06               	movlw	high log@coeff
  1484  0015DA  0100               	movlb	0	; () banked
  1485  0015DC  6FDD               	movwf	(eval_poly@d+1)& (0+255),b
  1486  0015DE  0E01               	movlw	low log@coeff
  1487  0015E0  0100               	movlb	0	; () banked
  1488  0015E2  6FDC               	movwf	eval_poly@d& (0+255),b
  1489  0015E4  0E00               	movlw	0
  1490  0015E6  0100               	movlb	0	; () banked
  1491  0015E8  6FDF               	movwf	(eval_poly@n+1)& (0+255),b
  1492  0015EA  0E08               	movlw	8
  1493  0015EC  0100               	movlb	0	; () banked
  1494  0015EE  6FDE               	movwf	eval_poly@n& (0+255),b
  1495  0015F0  ECBA  F00B         	call	_eval_poly	;wreg free
  1496  0015F4  C0D9  F0E5         	movff	?_eval_poly,log@x
  1497  0015F8  C0DA  F0E6         	movff	?_eval_poly+1,log@x+1
  1498  0015FC  C0DB  F0E7         	movff	?_eval_poly+2,log@x+2
  1499  001600  0E72               	movlw	114
  1500  001602  6E3B               	movwf	___ftmul@f2,c
  1501  001604  0E31               	movlw	49
  1502  001606  6E3C               	movwf	___ftmul@f2+1,c
  1503  001608  0E3F               	movlw	63
  1504  00160A  6E3D               	movwf	___ftmul@f2+2,c
  1505  00160C  C0E8  F025         	movff	log@exponent,___awtoft@c
  1506  001610  C0E9  F026         	movff	log@exponent+1,___awtoft@c+1
  1507  001614  ECAF  F010         	call	___awtoft	;wreg free
  1508  001618  C025  F038         	movff	?___awtoft,___ftmul@f1
  1509  00161C  C026  F039         	movff	?___awtoft+1,___ftmul@f1+1
  1510  001620  C027  F03A         	movff	?___awtoft+2,___ftmul@f1+2
  1511  001624  EC29  F00B         	call	___ftmul	;wreg free
  1512  001628  C038  F0CD         	movff	?___ftmul,___ftadd@f1
  1513  00162C  C039  F0CE         	movff	?___ftmul+1,___ftadd@f1+1
  1514  001630  C03A  F0CF         	movff	?___ftmul+2,___ftadd@f1+2
  1515  001634  C0E5  F0D0         	movff	log@x,___ftadd@f2
  1516  001638  C0E6  F0D1         	movff	log@x+1,___ftadd@f2+1
  1517  00163C  C0E7  F0D2         	movff	log@x+2,___ftadd@f2+2
  1518  001640  ECE5  F005         	call	___ftadd	;wreg free
  1519  001644  C0CD  F0E5         	movff	?___ftadd,?_log
  1520  001648  C0CE  F0E6         	movff	?___ftadd+1,?_log+1
  1521  00164C  C0CF  F0E7         	movff	?___ftadd+2,?_log+2
  1522  001650  0012               	return	
  1523  001652                     __end_of_log:
  1524                           	opt stack 0
  1525                           tblptru	equ	0xFF8
  1526                           intcon	equ	0xFF2
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           postinc2	equ	0xFDE
  1530                           postdec2	equ	0xFDD
  1531                           fsr2h	equ	0xFDA
  1532                           fsr2l	equ	0xFD9
  1533                           status	equ	0xFD8
  1534                           
  1535 ;; *************** function _frexp *****************
  1536 ;; Defined at:
  1537 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  value           3   22[COMRAM] int 
  1540 ;;  eptr            2   25[COMRAM] PTR int 
  1541 ;;		 -> log@exponent(2), 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;		None
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  3   22[COMRAM] PTR int 
  1546 ;; Registers used:
  1547 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1553 ;;      Params:         5       0       0       0       0       0       0
  1554 ;;      Locals:         0       0       0       0       0       0       0
  1555 ;;      Temps:          2       0       0       0       0       0       0
  1556 ;;      Totals:         7       0       0       0       0       0       0
  1557 ;;Total ram usage:        7 bytes
  1558 ;; Hardware stack levels used:    1
  1559 ;; Hardware stack levels required when called:    4
  1560 ;; This function calls:
  1561 ;;		Nothing
  1562 ;; This function is called by:
  1563 ;;		_log
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text4
  1568  001F30                     __ptext4:
  1569                           	opt stack 0
  1570  001F30                     _frexp:
  1571                           	opt stack 24
  1572                           
  1573                           ;incstack = 0
  1574  001F30  0E7F               	movlw	127
  1575  001F32  1419               	andwf	frexp@value+2,w,c
  1576  001F34  1018               	iorwf	frexp@value+1,w,c
  1577  001F36  1017               	iorwf	frexp@value,w,c
  1578  001F38  A4D8               	btfss	status,2,c
  1579  001F3A  D00F               	goto	l2436
  1580  001F3C  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1581  001F40  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1582  001F44  0E00               	movlw	0
  1583  001F46  6EDE               	movwf	postinc2,c
  1584  001F48  0E00               	movlw	0
  1585  001F4A  6EDD               	movwf	postdec2,c
  1586  001F4C  0E00               	movlw	0
  1587  001F4E  6E17               	movwf	?_frexp,c
  1588  001F50  0E00               	movlw	0
  1589  001F52  6E18               	movwf	?_frexp+1,c
  1590  001F54  0E00               	movlw	0
  1591  001F56  6E19               	movwf	?_frexp+2,c
  1592  001F58  0012               	return	
  1593  001F5A                     l2436:
  1594  001F5A  5019               	movf	frexp@value+2,w,c
  1595  001F5C  0B7F               	andlw	127
  1596  001F5E  6E1C               	movwf	??_frexp& (0+255),c
  1597  001F60  6A1D               	clrf	(??_frexp+1)& (0+255),c
  1598  001F62  90D8               	bcf	status,0,c
  1599  001F64  361C               	rlcf	??_frexp,f,c
  1600  001F66  361D               	rlcf	??_frexp+1,f,c
  1601  001F68  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1602  001F6C  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1603  001F70  C01C  FFDE         	movff	??_frexp,postinc2
  1604  001F74  C01D  FFDD         	movff	??_frexp+1,postdec2
  1605  001F78  AE18               	btfss	frexp@value+1,7,c
  1606  001F7A  D003               	goto	u1620
  1607  001F7C  6A1C               	clrf	??_frexp& (0+255),c
  1608  001F7E  2A1C               	incf	??_frexp& (0+255),f,c
  1609  001F80  D001               	goto	u1628
  1610  001F82                     u1620:
  1611  001F82  6A1C               	clrf	??_frexp& (0+255),c
  1612  001F84                     u1628:
  1613  001F84  501C               	movf	??_frexp,w,c
  1614  001F86  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1615  001F8A  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1616  001F8E  12DE               	iorwf	postinc2,f,c
  1617  001F90  0E00               	movlw	0
  1618  001F92  12DD               	iorwf	postdec2,f,c
  1619  001F94  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1620  001F98  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1621  001F9C  0E82               	movlw	130
  1622  001F9E  26DE               	addwf	postinc2,f,c
  1623  001FA0  0EFF               	movlw	255
  1624  001FA2  22DD               	addwfc	postdec2,f,c
  1625  001FA4  8019               	bsf	frexp@value+2,0,c
  1626  001FA6  8219               	bsf	frexp@value+2,1,c
  1627  001FA8  8419               	bsf	frexp@value+2,2,c
  1628  001FAA  8619               	bsf	frexp@value+2,3,c
  1629  001FAC  8819               	bsf	frexp@value+2,4,c
  1630  001FAE  8A19               	bsf	frexp@value+2,5,c
  1631  001FB0  9C19               	bcf	frexp@value+2,6,c
  1632  001FB2  9E18               	bcf	frexp@value+1,7,c
  1633  001FB4  C017  F017         	movff	frexp@value,?_frexp
  1634  001FB8  C018  F018         	movff	frexp@value+1,?_frexp+1
  1635  001FBC  C019  F019         	movff	frexp@value+2,?_frexp+2
  1636  001FC0  0012               	return	
  1637  001FC2                     __end_of_frexp:
  1638                           	opt stack 0
  1639                           tblptru	equ	0xFF8
  1640                           intcon	equ	0xFF2
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           postinc2	equ	0xFDE
  1644                           postdec2	equ	0xFDD
  1645                           fsr2h	equ	0xFDA
  1646                           fsr2l	equ	0xFD9
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _eval_poly *****************
  1650 ;; Defined at:
  1651 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  x               3   18[BANK0 ] PTR int 
  1654 ;;  d               2   21[BANK0 ] PTR const 
  1655 ;;		 -> log@coeff(27), 
  1656 ;;  n               2   23[BANK0 ] int 
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;  res             3   27[BANK0 ] int 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  3   18[BANK0 ] int 
  1661 ;; Registers used:
  1662 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1668 ;;      Params:         0       7       0       0       0       0       0
  1669 ;;      Locals:         0       3       0       0       0       0       0
  1670 ;;      Temps:          0       2       0       0       0       0       0
  1671 ;;      Totals:         0      12       0       0       0       0       0
  1672 ;;Total ram usage:       12 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    6
  1675 ;; This function calls:
  1676 ;;		___ftadd
  1677 ;;		___ftmul
  1678 ;;		___wmul
  1679 ;; This function is called by:
  1680 ;;		_log
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text5
  1685  001774                     __ptext5:
  1686                           	opt stack 0
  1687  001774                     _eval_poly:
  1688                           	opt stack 22
  1689                           
  1690                           ;incstack = 0
  1691  001774  C0DE  F01F         	movff	eval_poly@n,___wmul@multiplier
  1692  001778  C0DF  F020         	movff	eval_poly@n+1,___wmul@multiplier+1
  1693  00177C  0E00               	movlw	0
  1694  00177E  6E22               	movwf	___wmul@multiplicand+1,c
  1695  001780  0E03               	movlw	3
  1696  001782  6E21               	movwf	___wmul@multiplicand,c
  1697  001784  EC51  F011         	call	___wmul	;wreg free
  1698  001788  0100               	movlb	0	; () banked
  1699  00178A  C0DC  F0E0         	movff	eval_poly@d,??_eval_poly
  1700  00178E  0100               	movlb	0	; () banked
  1701  001790  C0DD  F0E1         	movff	eval_poly@d+1,??_eval_poly+1
  1702  001794  501F               	movf	?___wmul,w,c
  1703  001796  0100               	movlb	0	; () banked
  1704  001798  27E0               	addwf	??_eval_poly& (0+255),f,b
  1705  00179A  5020               	movf	?___wmul+1,w,c
  1706  00179C  0100               	movlb	0	; () banked
  1707  00179E  23E1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1708  0017A0  C0E0  FFF6         	movff	??_eval_poly,tblptrl
  1709  0017A4  C0E1  FFF7         	movff	??_eval_poly+1,tblptrh
  1710  0017A8                     	if	0	;tblptru may be non-zero
  1711  0017A8                     	endif
  1712  0017A8                     	if	0	;tblptru may be non-zero
  1713  0017A8                     	endif
  1714  0017A8  0009               	tblrd		*+
  1715  0017AA  0100               	movlb	0	; () banked
  1716  0017AC  CFF5 F0E2          	movff	tablat,eval_poly@res
  1717  0017B0  0009               	tblrd		*+
  1718  0017B2  0100               	movlb	0	; () banked
  1719  0017B4  CFF5 F0E3          	movff	tablat,eval_poly@res+1
  1720  0017B8  000A               	tblrd		*-
  1721  0017BA  0100               	movlb	0	; () banked
  1722  0017BC  CFF5 F0E4          	movff	tablat,eval_poly@res+2
  1723  0017C0  D046               	goto	l3412
  1724  0017C2                     l3410:
  1725                           
  1726                           ; BSR set to: 0
  1727  0017C2  C0E2  F03B         	movff	eval_poly@res,___ftmul@f2
  1728  0017C6  C0E3  F03C         	movff	eval_poly@res+1,___ftmul@f2+1
  1729  0017CA  C0E4  F03D         	movff	eval_poly@res+2,___ftmul@f2+2
  1730  0017CE  C0D9  F038         	movff	eval_poly@x,___ftmul@f1
  1731  0017D2  C0DA  F039         	movff	eval_poly@x+1,___ftmul@f1+1
  1732  0017D6  C0DB  F03A         	movff	eval_poly@x+2,___ftmul@f1+2
  1733  0017DA  EC29  F00B         	call	___ftmul	;wreg free
  1734  0017DE  C038  F0CD         	movff	?___ftmul,___ftadd@f1
  1735  0017E2  C039  F0CE         	movff	?___ftmul+1,___ftadd@f1+1
  1736  0017E6  C03A  F0CF         	movff	?___ftmul+2,___ftadd@f1+2
  1737  0017EA  0E00               	movlw	0
  1738  0017EC  6E22               	movwf	___wmul@multiplicand+1,c
  1739  0017EE  0E03               	movlw	3
  1740  0017F0  6E21               	movwf	___wmul@multiplicand,c
  1741  0017F2  0100               	movlb	0	; () banked
  1742  0017F4  07DE               	decf	eval_poly@n& (0+255),f,b
  1743  0017F6  A0D8               	btfss	status,0,c
  1744  0017F8  07DF               	decf	(eval_poly@n+1)& (0+255),f,b
  1745  0017FA  C0DE  F01F         	movff	eval_poly@n,___wmul@multiplier
  1746  0017FE  C0DF  F020         	movff	eval_poly@n+1,___wmul@multiplier+1
  1747  001802  EC51  F011         	call	___wmul	;wreg free
  1748  001806  0100               	movlb	0	; () banked
  1749  001808  C0DC  F0E0         	movff	eval_poly@d,??_eval_poly
  1750  00180C  0100               	movlb	0	; () banked
  1751  00180E  C0DD  F0E1         	movff	eval_poly@d+1,??_eval_poly+1
  1752  001812  501F               	movf	?___wmul,w,c
  1753  001814  0100               	movlb	0	; () banked
  1754  001816  27E0               	addwf	??_eval_poly& (0+255),f,b
  1755  001818  5020               	movf	?___wmul+1,w,c
  1756  00181A  0100               	movlb	0	; () banked
  1757  00181C  23E1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1758  00181E  C0E0  FFF6         	movff	??_eval_poly,tblptrl
  1759  001822  C0E1  FFF7         	movff	??_eval_poly+1,tblptrh
  1760  001826                     	if	0	;tblptru may be non-zero
  1761  001826                     	endif
  1762  001826                     	if	0	;tblptru may be non-zero
  1763  001826                     	endif
  1764  001826  0009               	tblrd		*+
  1765  001828  0100               	movlb	0	; () banked
  1766  00182A  CFF5 F0D0          	movff	tablat,___ftadd@f2
  1767  00182E  0009               	tblrd		*+
  1768  001830  0100               	movlb	0	; () banked
  1769  001832  CFF5 F0D1          	movff	tablat,___ftadd@f2+1
  1770  001836  000A               	tblrd		*-
  1771  001838  0100               	movlb	0	; () banked
  1772  00183A  CFF5 F0D2          	movff	tablat,___ftadd@f2+2
  1773  00183E  ECE5  F005         	call	___ftadd	;wreg free
  1774  001842  C0CD  F0E2         	movff	?___ftadd,eval_poly@res
  1775  001846  C0CE  F0E3         	movff	?___ftadd+1,eval_poly@res+1
  1776  00184A  C0CF  F0E4         	movff	?___ftadd+2,eval_poly@res+2
  1777  00184E                     l3412:
  1778  00184E  0100               	movlb	0	; () banked
  1779  001850  51DF               	movf	(eval_poly@n+1)& (0+255),w,b
  1780  001852  11DE               	iorwf	eval_poly@n& (0+255),w,b
  1781  001854  A4D8               	btfss	status,2,c
  1782  001856  D7B5               	goto	l3410
  1783                           
  1784                           ; BSR set to: 0
  1785  001858  C0E2  F0D9         	movff	eval_poly@res,?_eval_poly
  1786  00185C  C0E3  F0DA         	movff	eval_poly@res+1,?_eval_poly+1
  1787  001860  C0E4  F0DB         	movff	eval_poly@res+2,?_eval_poly+2
  1788                           
  1789                           ; BSR set to: 0
  1790  001864  0012               	return	
  1791  001866                     __end_of_eval_poly:
  1792                           	opt stack 0
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           intcon	equ	0xFF2
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postinc2	equ	0xFDE
  1801                           postdec2	equ	0xFDD
  1802                           fsr2h	equ	0xFDA
  1803                           fsr2l	equ	0xFD9
  1804                           status	equ	0xFD8
  1805                           
  1806 ;; *************** function ___ftsub *****************
  1807 ;; Defined at:
  1808 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  f1              3   18[BANK0 ] float 
  1811 ;;  f2              3   21[BANK0 ] float 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  3   18[BANK0 ] float 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1823 ;;      Params:         0       6       0       0       0       0       0
  1824 ;;      Locals:         0       0       0       0       0       0       0
  1825 ;;      Temps:          0       0       0       0       0       0       0
  1826 ;;      Totals:         0       6       0       0       0       0       0
  1827 ;;Total ram usage:        6 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    6
  1830 ;; This function calls:
  1831 ;;		___ftadd
  1832 ;; This function is called by:
  1833 ;;		_Temp_Convert
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text6
  1838  0021A6                     __ptext6:
  1839                           	opt stack 0
  1840  0021A6                     ___ftsub:
  1841                           	opt stack 23
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;incstack = 0
  1845  0021A6  0E00               	movlw	0
  1846  0021A8  0100               	movlb	0	; () banked
  1847  0021AA  1BDC               	xorwf	___ftsub@f2& (0+255),f,b
  1848  0021AC  0E00               	movlw	0
  1849  0021AE  0100               	movlb	0	; () banked
  1850  0021B0  1BDD               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  1851  0021B2  0E80               	movlw	128
  1852  0021B4  0100               	movlb	0	; () banked
  1853  0021B6  1BDE               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  1854                           
  1855                           ; BSR set to: 0
  1856  0021B8  C0D9  F0CD         	movff	___ftsub@f1,___ftadd@f1
  1857  0021BC  C0DA  F0CE         	movff	___ftsub@f1+1,___ftadd@f1+1
  1858  0021C0  C0DB  F0CF         	movff	___ftsub@f1+2,___ftadd@f1+2
  1859  0021C4  C0DC  F0D0         	movff	___ftsub@f2,___ftadd@f2
  1860  0021C8  C0DD  F0D1         	movff	___ftsub@f2+1,___ftadd@f2+1
  1861  0021CC  C0DE  F0D2         	movff	___ftsub@f2+2,___ftadd@f2+2
  1862  0021D0  ECE5  F005         	call	___ftadd	;wreg free
  1863  0021D4  C0CD  F0D9         	movff	?___ftadd,?___ftsub
  1864  0021D8  C0CE  F0DA         	movff	?___ftadd+1,?___ftsub+1
  1865  0021DC  C0CF  F0DB         	movff	?___ftadd+2,?___ftsub+2
  1866  0021E0  0012               	return	
  1867  0021E2                     __end_of___ftsub:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           intcon	equ	0xFF2
  1874                           postinc0	equ	0xFEE
  1875                           wreg	equ	0xFE8
  1876                           postinc2	equ	0xFDE
  1877                           postdec2	equ	0xFDD
  1878                           fsr2h	equ	0xFDA
  1879                           fsr2l	equ	0xFD9
  1880                           status	equ	0xFD8
  1881                           
  1882 ;; *************** function _Temp_Filter *****************
  1883 ;; Defined at:
  1884 ;;		line 36 in file "Tempeture.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  x               2   18[BANK0 ] int 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;		None               void
  1891 ;; Registers used:
  1892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1898 ;;      Params:         0       0       0       0       0       0       0
  1899 ;;      Locals:         0       2       0       0       0       0       0
  1900 ;;      Temps:          0       0       0       0       0       0       0
  1901 ;;      Totals:         0       2       0       0       0       0       0
  1902 ;;Total ram usage:        2 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    6
  1905 ;; This function calls:
  1906 ;;		___ftadd
  1907 ;;		___ftmul
  1908 ;;		___wmul
  1909 ;; This function is called by:
  1910 ;;		_Temp_Convert
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text7
  1915  001210                     __ptext7:
  1916                           	opt stack 0
  1917  001210                     _Temp_Filter:
  1918                           	opt stack 23
  1919                           
  1920                           ;Tempeture.c: 39: int x;
  1921                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  1922                           
  1923                           ;incstack = 0
  1924  001210  0E00               	movlw	0
  1925  001212  0100               	movlb	0	; () banked
  1926  001214  6FDA               	movwf	(Temp_Filter@x+1)& (0+255),b
  1927  001216  0E00               	movlw	0
  1928  001218  0100               	movlb	0	; () banked
  1929  00121A  6FD9               	movwf	Temp_Filter@x& (0+255),b
  1930  00121C                     
  1931                           ; BSR set to: 0
  1932  00121C  0100               	movlb	0	; () banked
  1933  00121E  51DA               	movf	(Temp_Filter@x+1)& (0+255),w,b
  1934  001220  0A80               	xorlw	128
  1935  001222  0F80               	addlw	-128
  1936  001224  0E0A               	movlw	10
  1937  001226  B4D8               	btfsc	status,2,c
  1938  001228  5DD9               	subwf	Temp_Filter@x& (0+255),w,b
  1939  00122A  B0D8               	btfsc	status,0,c
  1940  00122C  D06B               	goto	l3426
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;Tempeture.c: 41: {
  1944                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  1945                           
  1946                           ; BSR set to: 0
  1947                           
  1948                           ; BSR set to: 0
  1949  00122E  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1950  001232  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1951  001236  0E00               	movlw	0
  1952  001238  6E22               	movwf	___wmul@multiplicand+1,c
  1953  00123A  0E03               	movlw	3
  1954  00123C  6E21               	movwf	___wmul@multiplicand,c
  1955  00123E  EC51  F011         	call	___wmul	;wreg free
  1956  001242  0101               	movlb	1	; () banked
  1957  001244  0E78               	movlw	low _Temp_DegF
  1958  001246  241F               	addwf	?___wmul,w,c
  1959  001248  6ED9               	movwf	fsr2l,c
  1960  00124A  0101               	movlb	1	; () banked
  1961  00124C  0E01               	movlw	high _Temp_DegF
  1962  00124E  2020               	addwfc	?___wmul+1,w,c
  1963  001250  6EDA               	movwf	fsr2h,c
  1964  001252  0E48               	movlw	72
  1965  001254  6E3B               	movwf	___ftmul@f2,c
  1966  001256  0E61               	movlw	97
  1967  001258  6E3C               	movwf	___ftmul@f2+1,c
  1968  00125A  0E3F               	movlw	63
  1969  00125C  6E3D               	movwf	___ftmul@f2+2,c
  1970  00125E  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1971  001262  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1972  001266  0E00               	movlw	0
  1973  001268  6E22               	movwf	___wmul@multiplicand+1,c
  1974  00126A  0E03               	movlw	3
  1975  00126C  6E21               	movwf	___wmul@multiplicand,c
  1976  00126E  EC51  F011         	call	___wmul	;wreg free
  1977  001272  0101               	movlb	1	; () banked
  1978  001274  0ED2               	movlw	low _TmpTemp_DegF
  1979  001276  241F               	addwf	?___wmul,w,c
  1980  001278  6EE1               	movwf	fsr1l,c
  1981  00127A  0101               	movlb	1	; () banked
  1982  00127C  0E01               	movlw	high _TmpTemp_DegF
  1983  00127E  2020               	addwfc	?___wmul+1,w,c
  1984  001280  6EE2               	movwf	fsr1h,c
  1985  001282  CFE6 F038          	movff	postinc1,___ftmul@f1
  1986  001286  CFE6 F039          	movff	postinc1,___ftmul@f1+1
  1987  00128A  CFE5 F03A          	movff	postdec1,___ftmul@f1+2
  1988  00128E  EC29  F00B         	call	___ftmul	;wreg free
  1989  001292  C038  F0CD         	movff	?___ftmul,___ftadd@f1
  1990  001296  C039  F0CE         	movff	?___ftmul+1,___ftadd@f1+1
  1991  00129A  C03A  F0CF         	movff	?___ftmul+2,___ftadd@f1+2
  1992  00129E  0EC3               	movlw	195
  1993  0012A0  6E3B               	movwf	___ftmul@f2,c
  1994  0012A2  0EF5               	movlw	245
  1995  0012A4  6E3C               	movwf	___ftmul@f2+1,c
  1996  0012A6  0E3D               	movlw	61
  1997  0012A8  6E3D               	movwf	___ftmul@f2+2,c
  1998  0012AA  0E00               	movlw	0
  1999  0012AC  6E22               	movwf	___wmul@multiplicand+1,c
  2000  0012AE  0E03               	movlw	3
  2001  0012B0  6E21               	movwf	___wmul@multiplicand,c
  2002  0012B2  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  2003  0012B6  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2004  0012BA  EC51  F011         	call	___wmul	;wreg free
  2005  0012BE  0101               	movlb	1	; () banked
  2006  0012C0  0E5A               	movlw	low _PrevTemp_DegF
  2007  0012C2  241F               	addwf	?___wmul,w,c
  2008  0012C4  6EE1               	movwf	fsr1l,c
  2009  0012C6  0101               	movlb	1	; () banked
  2010  0012C8  0E01               	movlw	high _PrevTemp_DegF
  2011  0012CA  2020               	addwfc	?___wmul+1,w,c
  2012  0012CC  6EE2               	movwf	fsr1h,c
  2013  0012CE  CFE6 F038          	movff	postinc1,___ftmul@f1
  2014  0012D2  CFE6 F039          	movff	postinc1,___ftmul@f1+1
  2015  0012D6  CFE5 F03A          	movff	postdec1,___ftmul@f1+2
  2016  0012DA  EC29  F00B         	call	___ftmul	;wreg free
  2017  0012DE  C038  F0D0         	movff	?___ftmul,___ftadd@f2
  2018  0012E2  C039  F0D1         	movff	?___ftmul+1,___ftadd@f2+1
  2019  0012E6  C03A  F0D2         	movff	?___ftmul+2,___ftadd@f2+2
  2020  0012EA  ECE5  F005         	call	___ftadd	;wreg free
  2021  0012EE  C0CD  FFDE         	movff	?___ftadd,postinc2
  2022  0012F2  C0CE  FFDE         	movff	?___ftadd+1,postinc2
  2023  0012F6  C0CF  FFDD         	movff	?___ftadd+2,postdec2
  2024  0012FA  52DD               	movf	postdec2,f,c
  2025  0012FC  0100               	movlb	0	; () banked
  2026  0012FE  4BD9               	infsnz	Temp_Filter@x& (0+255),f,b
  2027  001300  2BDA               	incf	(Temp_Filter@x+1)& (0+255),f,b
  2028  001302  D78C               	goto	L3
  2029  001304                     l3426:
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;Tempeture.c: 43: }
  2033                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  2034  001304  0E00               	movlw	0
  2035  001306  0100               	movlb	0	; () banked
  2036  001308  6FDA               	movwf	(Temp_Filter@x+1)& (0+255),b
  2037  00130A  0E00               	movlw	0
  2038  00130C  0100               	movlb	0	; () banked
  2039  00130E  6FD9               	movwf	Temp_Filter@x& (0+255),b
  2040  001310                     
  2041                           ; BSR set to: 0
  2042  001310  0100               	movlb	0	; () banked
  2043  001312  51DA               	movf	(Temp_Filter@x+1)& (0+255),w,b
  2044  001314  0A80               	xorlw	128
  2045  001316  0F80               	addlw	-128
  2046  001318  0E0A               	movlw	10
  2047  00131A  B4D8               	btfsc	status,2,c
  2048  00131C  5DD9               	subwf	Temp_Filter@x& (0+255),w,b
  2049  00131E  B0D8               	btfsc	status,0,c
  2050  001320  0012               	return	
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;Tempeture.c: 45: {
  2054                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  2055                           
  2056                           ; BSR set to: 0
  2057                           
  2058                           ; BSR set to: 0
  2059  001322  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  2060  001326  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2061  00132A  0E00               	movlw	0
  2062  00132C  6E22               	movwf	___wmul@multiplicand+1,c
  2063  00132E  0E03               	movlw	3
  2064  001330  6E21               	movwf	___wmul@multiplicand,c
  2065  001332  EC51  F011         	call	___wmul	;wreg free
  2066  001336  0101               	movlb	1	; () banked
  2067  001338  0E78               	movlw	low _Temp_DegF
  2068  00133A  241F               	addwf	?___wmul,w,c
  2069  00133C  6ED9               	movwf	fsr2l,c
  2070  00133E  0101               	movlb	1	; () banked
  2071  001340  0E01               	movlw	high _Temp_DegF
  2072  001342  2020               	addwfc	?___wmul+1,w,c
  2073  001344  6EDA               	movwf	fsr2h,c
  2074  001346  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  2075  00134A  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2076  00134E  0E00               	movlw	0
  2077  001350  6E22               	movwf	___wmul@multiplicand+1,c
  2078  001352  0E03               	movlw	3
  2079  001354  6E21               	movwf	___wmul@multiplicand,c
  2080  001356  EC51  F011         	call	___wmul	;wreg free
  2081  00135A  0101               	movlb	1	; () banked
  2082  00135C  0E5A               	movlw	low _PrevTemp_DegF
  2083  00135E  241F               	addwf	?___wmul,w,c
  2084  001360  6EE1               	movwf	fsr1l,c
  2085  001362  0101               	movlb	1	; () banked
  2086  001364  0E01               	movlw	high _PrevTemp_DegF
  2087  001366  2020               	addwfc	?___wmul+1,w,c
  2088  001368  6EE2               	movwf	fsr1h,c
  2089  00136A  CFDE FFE6          	movff	postinc2,postinc1
  2090  00136E  CFDE FFE6          	movff	postinc2,postinc1
  2091  001372  CFDE FFE5          	movff	postinc2,postdec1
  2092  001376  52E5               	movf	postdec1,f,c
  2093                           
  2094                           ; BSR set to: 1
  2095  001378  0100               	movlb	0	; () banked
  2096  00137A  4BD9               	infsnz	Temp_Filter@x& (0+255),f,b
  2097  00137C  2BDA               	incf	(Temp_Filter@x+1)& (0+255),f,b
  2098  00137E  D7C8               	goto	L4
  2099  001380                     __end_of_Temp_Filter:
  2100                           	opt stack 0
  2101                           tblptru	equ	0xFF8
  2102                           tblptrh	equ	0xFF7
  2103                           tblptrl	equ	0xFF6
  2104                           tablat	equ	0xFF5
  2105                           intcon	equ	0xFF2
  2106                           postinc0	equ	0xFEE
  2107                           wreg	equ	0xFE8
  2108                           postinc1	equ	0xFE6
  2109                           postdec1	equ	0xFE5
  2110                           fsr1h	equ	0xFE2
  2111                           fsr1l	equ	0xFE1
  2112                           postinc2	equ	0xFDE
  2113                           postdec2	equ	0xFDD
  2114                           fsr2h	equ	0xFDA
  2115                           fsr2l	equ	0xFD9
  2116                           status	equ	0xFD8
  2117                           
  2118 ;; *************** function _SYSTEM_Initialize *****************
  2119 ;; Defined at:
  2120 ;;		line 112 in file "mcc_generated_files/mcc.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;		None
  2123 ;; Auto vars:     Size  Location     Type
  2124 ;;		None
  2125 ;; Return value:  Size  Location     Type
  2126 ;;		None               void
  2127 ;; Registers used:
  2128 ;;		wreg, status,2, cstack
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2134 ;;      Params:         0       0       0       0       0       0       0
  2135 ;;      Locals:         0       0       0       0       0       0       0
  2136 ;;      Temps:          0       0       0       0       0       0       0
  2137 ;;      Totals:         0       0       0       0       0       0       0
  2138 ;;Total ram usage:        0 bytes
  2139 ;; Hardware stack levels used:    1
  2140 ;; Hardware stack levels required when called:    6
  2141 ;; This function calls:
  2142 ;;		_ADC_Initialize
  2143 ;;		_INTERRUPT_Initialize
  2144 ;;		_OSCILLATOR_Initialize
  2145 ;;		_PIN_MANAGER_Initialize
  2146 ;;		_TMR1_Initialize
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text8
  2153  002386                     __ptext8:
  2154                           	opt stack 0
  2155  002386                     _SYSTEM_Initialize:
  2156                           	opt stack 24
  2157                           
  2158                           ;mcc.c: 114: OSCILLATOR_Initialize();
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;incstack = 0
  2162  002386  ECD8  F011         	call	_OSCILLATOR_Initialize	;wreg free
  2163                           
  2164                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  2165  00238A  EC88  F010         	call	_PIN_MANAGER_Initialize	;wreg free
  2166                           
  2167                           ;mcc.c: 116: INTERRUPT_Initialize();
  2168  00238E  ECDF  F011         	call	_INTERRUPT_Initialize	;wreg free
  2169                           
  2170                           ;mcc.c: 117: ADC_Initialize();
  2171  002392  EC93  F011         	call	_ADC_Initialize	;wreg free
  2172                           
  2173                           ;mcc.c: 119: TMR1_Initialize();
  2174  002396  EC64  F011         	call	_TMR1_Initialize	;wreg free
  2175  00239A  0012               	return	
  2176  00239C                     __end_of_SYSTEM_Initialize:
  2177                           	opt stack 0
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           postinc1	equ	0xFE6
  2186                           postdec1	equ	0xFE5
  2187                           fsr1h	equ	0xFE2
  2188                           fsr1l	equ	0xFE1
  2189                           postinc2	equ	0xFDE
  2190                           postdec2	equ	0xFDD
  2191                           fsr2h	equ	0xFDA
  2192                           fsr2l	equ	0xFD9
  2193                           status	equ	0xFD8
  2194                           
  2195 ;; *************** function _TMR1_Initialize *****************
  2196 ;; Defined at:
  2197 ;;		line 23 in file "mcc_generated_files/tmr1.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;		None
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;		None
  2202 ;; Return value:  Size  Location     Type
  2203 ;;		None               void
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2211 ;;      Params:         0       0       0       0       0       0       0
  2212 ;;      Locals:         0       0       0       0       0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0
  2214 ;;      Totals:         0       0       0       0       0       0       0
  2215 ;;Total ram usage:        0 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    5
  2218 ;; This function calls:
  2219 ;;		_TMR1_StartTimer
  2220 ;; This function is called by:
  2221 ;;		_SYSTEM_Initialize
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text9
  2226  0022C8                     __ptext9:
  2227                           	opt stack 0
  2228  0022C8                     _TMR1_Initialize:
  2229                           	opt stack 24
  2230                           
  2231                           ;tmr1.c: 28: T1CON = 0x34;
  2232                           
  2233                           ;incstack = 0
  2234  0022C8  0E34               	movlw	52
  2235  0022CA  6ECD               	movwf	4045,c	;volatile
  2236                           
  2237                           ;tmr1.c: 31: T1GCON = 0x00;
  2238  0022CC  0E00               	movlw	0
  2239  0022CE  6ECC               	movwf	4044,c	;volatile
  2240                           
  2241                           ;tmr1.c: 34: TMR1H = 0x0B;
  2242  0022D0  0E0B               	movlw	11
  2243  0022D2  6ECF               	movwf	4047,c	;volatile
  2244                           
  2245                           ;tmr1.c: 37: TMR1L = 0xDC;
  2246  0022D4  0EDC               	movlw	220
  2247  0022D6  6ECE               	movwf	4046,c	;volatile
  2248                           
  2249                           ;tmr1.c: 40: timer1ReloadVal=TMR1;
  2250  0022D8  CFCE F048          	movff	4046,_timer1ReloadVal	;volatile
  2251  0022DC  CFCF F049          	movff	4047,_timer1ReloadVal+1	;volatile
  2252                           
  2253                           ;tmr1.c: 43: PIR1bits.TMR1IF = 0;
  2254  0022E0  909E               	bcf	3998,0,c	;volatile
  2255                           
  2256                           ;tmr1.c: 46: PIE1bits.TMR1IE = 1;
  2257  0022E2  809D               	bsf	3997,0,c	;volatile
  2258                           
  2259                           ;tmr1.c: 49: TMR1_StartTimer();
  2260  0022E4  ECE5  F011         	call	_TMR1_StartTimer	;wreg free
  2261  0022E8  0012               	return	
  2262  0022EA                     __end_of_TMR1_Initialize:
  2263                           	opt stack 0
  2264                           tblptru	equ	0xFF8
  2265                           tblptrh	equ	0xFF7
  2266                           tblptrl	equ	0xFF6
  2267                           tablat	equ	0xFF5
  2268                           intcon	equ	0xFF2
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           postinc1	equ	0xFE6
  2272                           postdec1	equ	0xFE5
  2273                           fsr1h	equ	0xFE2
  2274                           fsr1l	equ	0xFE1
  2275                           postinc2	equ	0xFDE
  2276                           postdec2	equ	0xFDD
  2277                           fsr2h	equ	0xFDA
  2278                           fsr2l	equ	0xFD9
  2279                           status	equ	0xFD8
  2280                           
  2281 ;; *************** function _TMR1_StartTimer *****************
  2282 ;; Defined at:
  2283 ;;		line 52 in file "mcc_generated_files/tmr1.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;		None
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;		None
  2288 ;; Return value:  Size  Location     Type
  2289 ;;		None               void
  2290 ;; Registers used:
  2291 ;;		None
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2297 ;;      Params:         0       0       0       0       0       0       0
  2298 ;;      Locals:         0       0       0       0       0       0       0
  2299 ;;      Temps:          0       0       0       0       0       0       0
  2300 ;;      Totals:         0       0       0       0       0       0       0
  2301 ;;Total ram usage:        0 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    4
  2304 ;; This function calls:
  2305 ;;		Nothing
  2306 ;; This function is called by:
  2307 ;;		_TMR1_Initialize
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text10
  2312  0023CA                     __ptext10:
  2313                           	opt stack 0
  2314  0023CA                     _TMR1_StartTimer:
  2315                           	opt stack 24
  2316                           
  2317                           ;tmr1.c: 55: T1CONbits.TMR1ON = 1;
  2318                           
  2319                           ;incstack = 0
  2320  0023CA  80CD               	bsf	4045,0,c	;volatile
  2321  0023CC  0012               	return	
  2322  0023CE                     __end_of_TMR1_StartTimer:
  2323                           	opt stack 0
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           intcon	equ	0xFF2
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           postinc1	equ	0xFE6
  2332                           postdec1	equ	0xFE5
  2333                           fsr1h	equ	0xFE2
  2334                           fsr1l	equ	0xFE1
  2335                           postinc2	equ	0xFDE
  2336                           postdec2	equ	0xFDD
  2337                           fsr2h	equ	0xFDA
  2338                           fsr2l	equ	0xFD9
  2339                           status	equ	0xFD8
  2340                           
  2341 ;; *************** function _PIN_MANAGER_Initialize *****************
  2342 ;; Defined at:
  2343 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;		None
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;		None
  2348 ;; Return value:  Size  Location     Type
  2349 ;;		None               void
  2350 ;; Registers used:
  2351 ;;		wreg, status,2
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2357 ;;      Params:         0       0       0       0       0       0       0
  2358 ;;      Locals:         0       0       0       0       0       0       0
  2359 ;;      Temps:          0       0       0       0       0       0       0
  2360 ;;      Totals:         0       0       0       0       0       0       0
  2361 ;;Total ram usage:        0 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    4
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_SYSTEM_Initialize
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           	psect	text11
  2372  002110                     __ptext11:
  2373                           	opt stack 0
  2374  002110                     _PIN_MANAGER_Initialize:
  2375                           	opt stack 25
  2376                           
  2377                           ;pin_manager.c: 52: LATA = 0x00;
  2378                           
  2379                           ;incstack = 0
  2380  002110  0E00               	movlw	0
  2381  002112  6E89               	movwf	3977,c	;volatile
  2382                           
  2383                           ;pin_manager.c: 53: TRISA = 0x2F;
  2384  002114  0E2F               	movlw	47
  2385  002116  6E92               	movwf	3986,c	;volatile
  2386                           
  2387                           ;pin_manager.c: 54: ANSELA = 0x2F;
  2388  002118  0E2F               	movlw	47
  2389  00211A  010F               	movlb	15	; () banked
  2390  00211C  6F38               	movwf	56,b	;volatile
  2391                           
  2392                           ;pin_manager.c: 56: LATB = 0x00;
  2393  00211E  0E00               	movlw	0
  2394  002120  6E8A               	movwf	3978,c	;volatile
  2395                           
  2396                           ;pin_manager.c: 57: TRISB = 0xF8;
  2397  002122  0EF8               	movlw	248
  2398  002124  6E93               	movwf	3987,c	;volatile
  2399                           
  2400                           ;pin_manager.c: 58: ANSELB = 0x38;
  2401  002126  0E38               	movlw	56
  2402  002128  010F               	movlb	15	; () banked
  2403  00212A  6F39               	movwf	57,b	;volatile
  2404                           
  2405                           ;pin_manager.c: 59: WPUB = 0x00;
  2406  00212C  0E00               	movlw	0
  2407  00212E  6E61               	movwf	3937,c	;volatile
  2408                           
  2409                           ;pin_manager.c: 61: LATC = 0x00;
  2410  002130  0E00               	movlw	0
  2411  002132  6E8B               	movwf	3979,c	;volatile
  2412                           
  2413                           ;pin_manager.c: 62: TRISC = 0xD6;
  2414  002134  0ED6               	movlw	214
  2415  002136  6E94               	movwf	3988,c	;volatile
  2416                           
  2417                           ;pin_manager.c: 63: ANSELC = 0x14;
  2418  002138  0E14               	movlw	20
  2419  00213A  010F               	movlb	15	; () banked
  2420  00213C  6F3A               	movwf	58,b	;volatile
  2421                           
  2422                           ;pin_manager.c: 65: LATD = 0x00;
  2423  00213E  0E00               	movlw	0
  2424  002140  6E8C               	movwf	3980,c	;volatile
  2425                           
  2426                           ;pin_manager.c: 66: TRISD = 0x03;
  2427  002142  0E03               	movlw	3
  2428  002144  6E95               	movwf	3989,c	;volatile
  2429                           
  2430                           ;pin_manager.c: 67: ANSELD = 0x03;
  2431  002146  0E03               	movlw	3
  2432  002148  010F               	movlb	15	; () banked
  2433  00214A  6F3B               	movwf	59,b	;volatile
  2434                           
  2435                           ;pin_manager.c: 69: LATE = 0x00;
  2436  00214C  0E00               	movlw	0
  2437  00214E  6E8D               	movwf	3981,c	;volatile
  2438                           
  2439                           ;pin_manager.c: 70: TRISE = 0x07;
  2440  002150  0E07               	movlw	7
  2441  002152  6E96               	movwf	3990,c	;volatile
  2442                           
  2443                           ;pin_manager.c: 71: ANSELE = 0x07;
  2444  002154  0E07               	movlw	7
  2445  002156  010F               	movlb	15	; () banked
  2446  002158  6F3C               	movwf	60,b	;volatile
  2447                           
  2448                           ; BSR set to: 15
  2449                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  2450  00215A  8EF1               	bsf	intcon2,7,c	;volatile
  2451                           
  2452                           ; BSR set to: 15
  2453  00215C  0012               	return	
  2454  00215E                     __end_of_PIN_MANAGER_Initialize:
  2455                           	opt stack 0
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           intcon	equ	0xFF2
  2461                           intcon2	equ	0xFF1
  2462                           postinc0	equ	0xFEE
  2463                           wreg	equ	0xFE8
  2464                           postinc1	equ	0xFE6
  2465                           postdec1	equ	0xFE5
  2466                           fsr1h	equ	0xFE2
  2467                           fsr1l	equ	0xFE1
  2468                           postinc2	equ	0xFDE
  2469                           postdec2	equ	0xFDD
  2470                           fsr2h	equ	0xFDA
  2471                           fsr2l	equ	0xFD9
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _OSCILLATOR_Initialize *****************
  2475 ;; Defined at:
  2476 ;;		line 122 in file "mcc_generated_files/mcc.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;		None               void
  2483 ;; Registers used:
  2484 ;;		wreg, status,2
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2490 ;;      Params:         0       0       0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0       0       0
  2492 ;;      Temps:          0       0       0       0       0       0       0
  2493 ;;      Totals:         0       0       0       0       0       0       0
  2494 ;;Total ram usage:        0 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    4
  2497 ;; This function calls:
  2498 ;;		Nothing
  2499 ;; This function is called by:
  2500 ;;		_SYSTEM_Initialize
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text12
  2505  0023B0                     __ptext12:
  2506                           	opt stack 0
  2507  0023B0                     _OSCILLATOR_Initialize:
  2508                           	opt stack 25
  2509                           
  2510                           ;mcc.c: 125: OSCCON = 0x62;
  2511                           
  2512                           ; BSR set to: 15
  2513                           ;incstack = 0
  2514  0023B0  0E62               	movlw	98
  2515  0023B2  6ED3               	movwf	4051,c	;volatile
  2516                           
  2517                           ;mcc.c: 127: OSCCON2 = 0x04;
  2518  0023B4  0E04               	movlw	4
  2519  0023B6  6ED2               	movwf	4050,c	;volatile
  2520                           
  2521                           ;mcc.c: 129: OSCTUNE = 0x00;
  2522  0023B8  0E00               	movlw	0
  2523  0023BA  6E9B               	movwf	3995,c	;volatile
  2524  0023BC  0012               	return	
  2525  0023BE                     __end_of_OSCILLATOR_Initialize:
  2526                           	opt stack 0
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           intcon	equ	0xFF2
  2532                           intcon2	equ	0xFF1
  2533                           postinc0	equ	0xFEE
  2534                           wreg	equ	0xFE8
  2535                           postinc1	equ	0xFE6
  2536                           postdec1	equ	0xFE5
  2537                           fsr1h	equ	0xFE2
  2538                           fsr1l	equ	0xFE1
  2539                           postinc2	equ	0xFDE
  2540                           postdec2	equ	0xFDD
  2541                           fsr2h	equ	0xFDA
  2542                           fsr2l	equ	0xFD9
  2543                           status	equ	0xFD8
  2544                           
  2545 ;; *************** function _INTERRUPT_Initialize *****************
  2546 ;; Defined at:
  2547 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;		None
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;		None
  2552 ;; Return value:  Size  Location     Type
  2553 ;;		None               void
  2554 ;; Registers used:
  2555 ;;		None
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2561 ;;      Params:         0       0       0       0       0       0       0
  2562 ;;      Locals:         0       0       0       0       0       0       0
  2563 ;;      Temps:          0       0       0       0       0       0       0
  2564 ;;      Totals:         0       0       0       0       0       0       0
  2565 ;;Total ram usage:        0 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    4
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_SYSTEM_Initialize
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text13
  2576  0023BE                     __ptext13:
  2577                           	opt stack 0
  2578  0023BE                     _INTERRUPT_Initialize:
  2579                           	opt stack 25
  2580                           
  2581                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  2582                           
  2583                           ;incstack = 0
  2584  0023BE  9ED0               	bcf	4048,7,c	;volatile
  2585                           
  2586                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  2587  0023C0  9A9F               	bcf	3999,5,c	;volatile
  2588                           
  2589                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  2590  0023C2  9C9F               	bcf	3999,6,c	;volatile
  2591                           
  2592                           ;interrupt_manager.c: 64: IPR1bits.TX1IP = 0;
  2593  0023C4  989F               	bcf	3999,4,c	;volatile
  2594                           
  2595                           ;interrupt_manager.c: 66: IPR1bits.TMR1IP = 0;
  2596  0023C6  909F               	bcf	3999,0,c	;volatile
  2597  0023C8  0012               	return	
  2598  0023CA                     __end_of_INTERRUPT_Initialize:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           intcon	equ	0xFF2
  2605                           intcon2	equ	0xFF1
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postinc1	equ	0xFE6
  2609                           postdec1	equ	0xFE5
  2610                           fsr1h	equ	0xFE2
  2611                           fsr1l	equ	0xFE1
  2612                           postinc2	equ	0xFDE
  2613                           postdec2	equ	0xFDD
  2614                           fsr2h	equ	0xFDA
  2615                           fsr2l	equ	0xFD9
  2616                           status	equ	0xFD8
  2617                           
  2618 ;; *************** function _ADC_Initialize *****************
  2619 ;; Defined at:
  2620 ;;		line 16 in file "mcc_generated_files/adc.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;		None
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;		None
  2625 ;; Return value:  Size  Location     Type
  2626 ;;		None               void
  2627 ;; Registers used:
  2628 ;;		wreg, status,2
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2634 ;;      Params:         0       0       0       0       0       0       0
  2635 ;;      Locals:         0       0       0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0
  2637 ;;      Totals:         0       0       0       0       0       0       0
  2638 ;;Total ram usage:        0 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    4
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_SYSTEM_Initialize
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           	psect	text14
  2649  002326                     __ptext14:
  2650                           	opt stack 0
  2651  002326                     _ADC_Initialize:
  2652                           	opt stack 25
  2653                           
  2654                           ;adc.c: 21: ADCON0 = 0x01;
  2655                           
  2656                           ;incstack = 0
  2657  002326  0E01               	movlw	1
  2658  002328  6EC2               	movwf	4034,c	;volatile
  2659                           
  2660                           ;adc.c: 24: ADCON1 = 0x80;
  2661  00232A  0E80               	movlw	128
  2662  00232C  6EC1               	movwf	4033,c	;volatile
  2663                           
  2664                           ;adc.c: 27: ADCON2 = 0xA9;
  2665  00232E  0EA9               	movlw	169
  2666  002330  6EC0               	movwf	4032,c	;volatile
  2667                           
  2668                           ;adc.c: 30: ADRESL = 0x00;
  2669  002332  0E00               	movlw	0
  2670  002334  6EC3               	movwf	4035,c	;volatile
  2671                           
  2672                           ;adc.c: 33: ADRESH = 0x00;
  2673  002336  0E00               	movlw	0
  2674  002338  6EC4               	movwf	4036,c	;volatile
  2675                           
  2676                           ;adc.c: 36: PIE1bits.ADIE = 1;
  2677  00233A  8C9D               	bsf	3997,6,c	;volatile
  2678  00233C  0012               	return	
  2679  00233E                     __end_of_ADC_Initialize:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           intcon	equ	0xFF2
  2686                           intcon2	equ	0xFF1
  2687                           postinc0	equ	0xFEE
  2688                           wreg	equ	0xFE8
  2689                           postinc1	equ	0xFE6
  2690                           postdec1	equ	0xFE5
  2691                           fsr1h	equ	0xFE2
  2692                           fsr1l	equ	0xFE1
  2693                           postinc2	equ	0xFDE
  2694                           postdec2	equ	0xFDD
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _RunBypas *****************
  2700 ;; Defined at:
  2701 ;;		line 84 in file "Bypass.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  batvolt         3   47[COMRAM] float 
  2706 ;;  i               2   50[COMRAM] int 
  2707 ;;  cellbyp         2   45[COMRAM] int 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  2  398[COMRAM] int 
  2710 ;; Registers used:
  2711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2717 ;;      Params:         0       0       0       0       0       0       0
  2718 ;;      Locals:         7       0       0       0       0       0       0
  2719 ;;      Temps:          0       0       0       0       0       0       0
  2720 ;;      Totals:         7       0       0       0       0       0       0
  2721 ;;Total ram usage:        7 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    6
  2724 ;; This function calls:
  2725 ;;		_Battery_Get
  2726 ;;		_SetBypas
  2727 ;;		___ftge
  2728 ;; This function is called by:
  2729 ;;		_main
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text15
  2734  001AFC                     __ptext15:
  2735                           	opt stack 0
  2736  001AFC                     _RunBypas:
  2737                           	opt stack 24
  2738                           
  2739                           ;Bypass.c: 86: int cellbyp = 0;
  2740                           
  2741                           ;incstack = 0
  2742  001AFC  0E00               	movlw	0
  2743  001AFE  6E2F               	movwf	RunBypas@cellbyp+1,c
  2744  001B00  0E00               	movlw	0
  2745  001B02  6E2E               	movwf	RunBypas@cellbyp,c
  2746                           
  2747                           ;Bypass.c: 87: int i = 0;
  2748  001B04  0E00               	movlw	0
  2749  001B06  6E34               	movwf	RunBypas@i+1,c
  2750  001B08  0E00               	movlw	0
  2751  001B0A  6E33               	movwf	RunBypas@i,c
  2752                           
  2753                           ;Bypass.c: 88: float batvolt = 0;
  2754  001B0C  0E00               	movlw	0
  2755  001B0E  6E30               	movwf	RunBypas@batvolt,c
  2756  001B10  0E00               	movlw	0
  2757  001B12  6E31               	movwf	RunBypas@batvolt+1,c
  2758  001B14  0E00               	movlw	0
  2759  001B16  6E32               	movwf	RunBypas@batvolt+2,c
  2760                           
  2761                           ;Bypass.c: 90: for(i = 0; i<6;i++)
  2762  001B18  0E00               	movlw	0
  2763  001B1A  6E34               	movwf	RunBypas@i+1,c
  2764  001B1C  0E00               	movlw	0
  2765  001B1E  6E33               	movwf	RunBypas@i,c
  2766  001B20  5034               	movf	RunBypas@i+1,w,c
  2767  001B22  0A80               	xorlw	128
  2768  001B24  0F80               	addlw	-128
  2769  001B26  0E06               	movlw	6
  2770  001B28  B4D8               	btfsc	status,2,c
  2771  001B2A  5C33               	subwf	RunBypas@i,w,c
  2772  001B2C  B0D8               	btfsc	status,0,c
  2773  001B2E  0012               	return	
  2774                           
  2775                           ;Bypass.c: 91: {
  2776                           ;Bypass.c: 92: batvolt = Battery_Get(i);
  2777  001B30  C033  F025         	movff	RunBypas@i,Battery_Get@channelnum
  2778  001B34  C034  F026         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  2779  001B38  ECF1  F010         	call	_Battery_Get	;wreg free
  2780  001B3C  C025  F030         	movff	?_Battery_Get,RunBypas@batvolt
  2781  001B40  C026  F031         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  2782  001B44  C027  F032         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  2783                           
  2784                           ;Bypass.c: 94: if(batvolt >= 4.18)
  2785  001B48  C030  F025         	movff	RunBypas@batvolt,___ftge@ff1
  2786  001B4C  C031  F026         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  2787  001B50  C032  F027         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  2788  001B54  0EC3               	movlw	195
  2789  001B56  6E28               	movwf	___ftge@ff2,c
  2790  001B58  0E85               	movlw	133
  2791  001B5A  6E29               	movwf	___ftge@ff2+1,c
  2792  001B5C  0E40               	movlw	64
  2793  001B5E  6E2A               	movwf	___ftge@ff2+2,c
  2794  001B60  ECE1  F00F         	call	___ftge	;wreg free
  2795  001B64  A0D8               	btfss	status,0,c
  2796  001B66  D00E               	goto	l2994
  2797                           
  2798                           ;Bypass.c: 95: {
  2799                           ;Bypass.c: 96: SetBypas(i,1);
  2800  001B68  C033  F017         	movff	RunBypas@i,SetBypas@pin
  2801  001B6C  C034  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  2802  001B70  0E00               	movlw	0
  2803  001B72  6E1A               	movwf	SetBypas@state+1,c
  2804  001B74  0E01               	movlw	1
  2805  001B76  6E19               	movwf	SetBypas@state,c
  2806  001B78  EC43  F00E         	call	_SetBypas	;wreg free
  2807                           
  2808                           ;Bypass.c: 97: cellbyp = 1;
  2809  001B7C  0E00               	movlw	0
  2810  001B7E  6E2F               	movwf	RunBypas@cellbyp+1,c
  2811  001B80  0E01               	movlw	1
  2812  001B82  6E2E               	movwf	RunBypas@cellbyp,c
  2813  001B84                     l2994:
  2814                           
  2815                           ;Bypass.c: 98: }
  2816                           ;Bypass.c: 99: if(batvolt <= 4.15)
  2817  001B84  0ECD               	movlw	205
  2818  001B86  6E25               	movwf	___ftge@ff1,c
  2819  001B88  0E84               	movlw	132
  2820  001B8A  6E26               	movwf	___ftge@ff1+1,c
  2821  001B8C  0E40               	movlw	64
  2822  001B8E  6E27               	movwf	___ftge@ff1+2,c
  2823  001B90  C030  F028         	movff	RunBypas@batvolt,___ftge@ff2
  2824  001B94  C031  F029         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  2825  001B98  C032  F02A         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  2826  001B9C  ECE1  F00F         	call	___ftge	;wreg free
  2827  001BA0  A0D8               	btfss	status,0,c
  2828  001BA2  D00E               	goto	l3000
  2829                           
  2830                           ;Bypass.c: 100: {
  2831                           ;Bypass.c: 101: SetBypas(i,0);
  2832  001BA4  C033  F017         	movff	RunBypas@i,SetBypas@pin
  2833  001BA8  C034  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  2834  001BAC  0E00               	movlw	0
  2835  001BAE  6E1A               	movwf	SetBypas@state+1,c
  2836  001BB0  0E00               	movlw	0
  2837  001BB2  6E19               	movwf	SetBypas@state,c
  2838  001BB4  EC43  F00E         	call	_SetBypas	;wreg free
  2839                           
  2840                           ;Bypass.c: 102: cellbyp = 1;
  2841  001BB8  0E00               	movlw	0
  2842  001BBA  6E2F               	movwf	RunBypas@cellbyp+1,c
  2843  001BBC  0E01               	movlw	1
  2844  001BBE  6E2E               	movwf	RunBypas@cellbyp,c
  2845  001BC0                     l3000:
  2846  001BC0  4A33               	infsnz	RunBypas@i,f,c
  2847  001BC2  2A34               	incf	RunBypas@i+1,f,c
  2848  001BC4  D7AD               	goto	L5
  2849  001BC6                     __end_of_RunBypas:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           intcon	equ	0xFF2
  2856                           intcon2	equ	0xFF1
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           postinc1	equ	0xFE6
  2860                           postdec1	equ	0xFE5
  2861                           fsr1h	equ	0xFE2
  2862                           fsr1l	equ	0xFE1
  2863                           postinc2	equ	0xFDE
  2864                           postdec2	equ	0xFDD
  2865                           fsr2h	equ	0xFDA
  2866                           fsr2l	equ	0xFD9
  2867                           status	equ	0xFD8
  2868                           
  2869 ;; *************** function _SetBypas *****************
  2870 ;; Defined at:
  2871 ;;		line 8 in file "Bypass.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;  pin             2   22[COMRAM] int 
  2874 ;;  state           2   24[COMRAM] int 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;		None
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  2   22[COMRAM] int 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2886 ;;      Params:         4       0       0       0       0       0       0
  2887 ;;      Locals:         0       0       0       0       0       0       0
  2888 ;;      Temps:          2       0       0       0       0       0       0
  2889 ;;      Totals:         6       0       0       0       0       0       0
  2890 ;;Total ram usage:        6 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    4
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_RunBypas
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text16
  2901  001C86                     __ptext16:
  2902                           	opt stack 0
  2903  001C86                     _SetBypas:
  2904                           	opt stack 25
  2905                           
  2906                           ;Bypass.c: 10: switch (pin) {
  2907                           
  2908                           ;incstack = 0
  2909  001C86  D038               	goto	l2586
  2910  001C88                     l2570:
  2911                           
  2912                           ;Bypass.c: 12: if (state)
  2913  001C88  501A               	movf	SetBypas@state+1,w,c
  2914  001C8A  1019               	iorwf	SetBypas@state,w,c
  2915  001C8C  B4D8               	btfsc	status,2,c
  2916  001C8E  D002               	goto	l504
  2917                           
  2918                           ;Bypass.c: 13: {
  2919                           ;Bypass.c: 14: do { LATD4 = 1; } while(0);
  2920  001C90  888C               	bsf	3980,4,c	;volatile
  2921  001C92  0012               	return	
  2922  001C94                     l504:
  2923  001C94  988C               	bcf	3980,4,c	;volatile
  2924  001C96  0012               	return	
  2925  001C98                     l2572:
  2926                           
  2927                           ;Bypass.c: 22: if (state)
  2928  001C98  501A               	movf	SetBypas@state+1,w,c
  2929  001C9A  1019               	iorwf	SetBypas@state,w,c
  2930  001C9C  B4D8               	btfsc	status,2,c
  2931  001C9E  D002               	goto	l512
  2932                           
  2933                           ;Bypass.c: 23: {
  2934                           ;Bypass.c: 24: do { LATD5 = 1; } while(0);
  2935  001CA0  8A8C               	bsf	3980,5,c	;volatile
  2936  001CA2  0012               	return	
  2937  001CA4                     l512:
  2938  001CA4  9A8C               	bcf	3980,5,c	;volatile
  2939  001CA6  0012               	return	
  2940  001CA8                     l2574:
  2941                           
  2942                           ;Bypass.c: 32: if (state)
  2943  001CA8  501A               	movf	SetBypas@state+1,w,c
  2944  001CAA  1019               	iorwf	SetBypas@state,w,c
  2945  001CAC  B4D8               	btfsc	status,2,c
  2946  001CAE  D002               	goto	l519
  2947                           
  2948                           ;Bypass.c: 33: {
  2949                           ;Bypass.c: 34: do { LATD6 = 1; } while(0);
  2950  001CB0  8C8C               	bsf	3980,6,c	;volatile
  2951  001CB2  0012               	return	
  2952  001CB4                     l519:
  2953  001CB4  9C8C               	bcf	3980,6,c	;volatile
  2954  001CB6  0012               	return	
  2955  001CB8                     l2576:
  2956                           
  2957                           ;Bypass.c: 42: if (state)
  2958  001CB8  501A               	movf	SetBypas@state+1,w,c
  2959  001CBA  1019               	iorwf	SetBypas@state,w,c
  2960  001CBC  B4D8               	btfsc	status,2,c
  2961  001CBE  D002               	goto	l526
  2962                           
  2963                           ;Bypass.c: 43: {
  2964                           ;Bypass.c: 44: do { LATD7 = 1; } while(0);
  2965  001CC0  8E8C               	bsf	3980,7,c	;volatile
  2966  001CC2  0012               	return	
  2967  001CC4                     l526:
  2968  001CC4  9E8C               	bcf	3980,7,c	;volatile
  2969  001CC6  0012               	return	
  2970  001CC8                     l2578:
  2971                           
  2972                           ;Bypass.c: 52: if (state)
  2973  001CC8  501A               	movf	SetBypas@state+1,w,c
  2974  001CCA  1019               	iorwf	SetBypas@state,w,c
  2975  001CCC  B4D8               	btfsc	status,2,c
  2976  001CCE  D002               	goto	l533
  2977                           
  2978                           ;Bypass.c: 53: {
  2979                           ;Bypass.c: 54: do { LATB0 = 1; } while(0);
  2980  001CD0  808A               	bsf	3978,0,c	;volatile
  2981  001CD2  0012               	return	
  2982  001CD4                     l533:
  2983  001CD4  908A               	bcf	3978,0,c	;volatile
  2984  001CD6  0012               	return	
  2985  001CD8                     l2580:
  2986                           
  2987                           ;Bypass.c: 62: if (state)
  2988  001CD8  501A               	movf	SetBypas@state+1,w,c
  2989  001CDA  1019               	iorwf	SetBypas@state,w,c
  2990  001CDC  B4D8               	btfsc	status,2,c
  2991  001CDE  D002               	goto	l540
  2992                           
  2993                           ;Bypass.c: 63: {
  2994                           ;Bypass.c: 64: do { LATB1 = 1; } while(0);
  2995  001CE0  828A               	bsf	3978,1,c	;volatile
  2996  001CE2  0012               	return	
  2997  001CE4                     l540:
  2998  001CE4  928A               	bcf	3978,1,c	;volatile
  2999  001CE6  0012               	return	
  3000  001CE8                     l2582:
  3001                           
  3002                           ;Bypass.c: 72: if (state)
  3003  001CE8  501A               	movf	SetBypas@state+1,w,c
  3004  001CEA  1019               	iorwf	SetBypas@state,w,c
  3005  001CEC  B4D8               	btfsc	status,2,c
  3006  001CEE  D002               	goto	l547
  3007                           
  3008                           ;Bypass.c: 73: {
  3009                           ;Bypass.c: 74: do { LATB2 = 1; } while(0);
  3010  001CF0  848A               	bsf	3978,2,c	;volatile
  3011  001CF2  0012               	return	
  3012  001CF4                     l547:
  3013  001CF4  948A               	bcf	3978,2,c	;volatile
  3014  001CF6  0012               	return	
  3015  001CF8                     l2586:
  3016  001CF8  C017  F01B         	movff	SetBypas@pin,??_SetBypas
  3017  001CFC  C018  F01C         	movff	SetBypas@pin+1,??_SetBypas+1
  3018                           
  3019                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3020                           ; Switch size 1, requested type "space"
  3021                           ; Number of cases is 1, Range of values is 0 to 0
  3022                           ; switch strategies available:
  3023                           ; Name         Instructions Cycles
  3024                           ; simple_byte            4     3 (average)
  3025                           ;	Chosen strategy is simple_byte
  3026  001D00  501C               	movf	??_SetBypas+1,w,c
  3027  001D02  0A00               	xorlw	0	; case 0
  3028  001D04  A4D8               	btfss	status,2,c
  3029  001D06  0012               	return	
  3030                           
  3031                           ; Switch size 1, requested type "space"
  3032                           ; Number of cases is 7, Range of values is 0 to 6
  3033                           ; switch strategies available:
  3034                           ; Name         Instructions Cycles
  3035                           ; simple_byte           22    12 (average)
  3036                           ;	Chosen strategy is simple_byte
  3037  001D08  501B               	movf	??_SetBypas,w,c
  3038  001D0A  0A00               	xorlw	0	; case 0
  3039  001D0C  B4D8               	btfsc	status,2,c
  3040  001D0E  D7BC               	goto	l2570
  3041  001D10  0A01               	xorlw	1	; case 1
  3042  001D12  B4D8               	btfsc	status,2,c
  3043  001D14  D7C1               	goto	l2572
  3044  001D16  0A03               	xorlw	3	; case 2
  3045  001D18  B4D8               	btfsc	status,2,c
  3046  001D1A  D7C6               	goto	l2574
  3047  001D1C  0A01               	xorlw	1	; case 3
  3048  001D1E  B4D8               	btfsc	status,2,c
  3049  001D20  D7CB               	goto	l2576
  3050  001D22  0A07               	xorlw	7	; case 4
  3051  001D24  B4D8               	btfsc	status,2,c
  3052  001D26  D7D0               	goto	l2578
  3053  001D28  0A01               	xorlw	1	; case 5
  3054  001D2A  B4D8               	btfsc	status,2,c
  3055  001D2C  D7D5               	goto	l2580
  3056  001D2E  0A03               	xorlw	3	; case 6
  3057  001D30  A4D8               	btfss	status,2,c
  3058  001D32  0012               	return	
  3059  001D34  D7D9               	goto	l2582
  3060  001D36                     __end_of_SetBypas:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           intcon	equ	0xFF2
  3067                           intcon2	equ	0xFF1
  3068                           postinc0	equ	0xFEE
  3069                           wreg	equ	0xFE8
  3070                           postinc1	equ	0xFE6
  3071                           postdec1	equ	0xFE5
  3072                           fsr1h	equ	0xFE2
  3073                           fsr1l	equ	0xFE1
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           fsr2h	equ	0xFDA
  3077                           fsr2l	equ	0xFD9
  3078                           status	equ	0xFD8
  3079                           
  3080 ;; *************** function _Battery_Get *****************
  3081 ;; Defined at:
  3082 ;;		line 57 in file "Battery.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  channelnum      2   36[COMRAM] int 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;		None
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  3   36[COMRAM] float 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3096 ;;      Params:         3       0       0       0       0       0       0
  3097 ;;      Locals:         0       0       0       0       0       0       0
  3098 ;;      Temps:          0       0       0       0       0       0       0
  3099 ;;      Totals:         3       0       0       0       0       0       0
  3100 ;;Total ram usage:        3 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    5
  3103 ;; This function calls:
  3104 ;;		___wmul
  3105 ;; This function is called by:
  3106 ;;		_RunBypas
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	text17
  3111  0021E2                     __ptext17:
  3112                           	opt stack 0
  3113  0021E2                     _Battery_Get:
  3114                           	opt stack 24
  3115                           
  3116                           ;Battery.c: 59: return Battery_Volt[channelnum];
  3117                           
  3118                           ;incstack = 0
  3119  0021E2  C025  F01F         	movff	Battery_Get@channelnum,___wmul@multiplier
  3120  0021E6  C026  F020         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  3121  0021EA  0E00               	movlw	0
  3122  0021EC  6E22               	movwf	___wmul@multiplicand+1,c
  3123  0021EE  0E03               	movlw	3
  3124  0021F0  6E21               	movwf	___wmul@multiplicand,c
  3125  0021F2  EC51  F011         	call	___wmul	;wreg free
  3126  0021F6  0100               	movlb	0	; () banked
  3127  0021F8  0E60               	movlw	low _Battery_Volt
  3128  0021FA  241F               	addwf	?___wmul,w,c
  3129  0021FC  6ED9               	movwf	fsr2l,c
  3130  0021FE  0100               	movlb	0	; () banked
  3131  002200  0E00               	movlw	high _Battery_Volt
  3132  002202  2020               	addwfc	?___wmul+1,w,c
  3133  002204  6EDA               	movwf	fsr2h,c
  3134  002206  CFDE F025          	movff	postinc2,?_Battery_Get
  3135  00220A  CFDE F026          	movff	postinc2,?_Battery_Get+1
  3136  00220E  CFDD F027          	movff	postdec2,?_Battery_Get+2
  3137  002212  0012               	return	
  3138  002214                     __end_of_Battery_Get:
  3139                           	opt stack 0
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           intcon	equ	0xFF2
  3145                           intcon2	equ	0xFF1
  3146                           postinc0	equ	0xFEE
  3147                           wreg	equ	0xFE8
  3148                           postinc1	equ	0xFE6
  3149                           postdec1	equ	0xFE5
  3150                           fsr1h	equ	0xFE2
  3151                           fsr1l	equ	0xFE1
  3152                           postinc2	equ	0xFDE
  3153                           postdec2	equ	0xFDD
  3154                           fsr2h	equ	0xFDA
  3155                           fsr2l	equ	0xFD9
  3156                           status	equ	0xFD8
  3157                           
  3158 ;; *************** function _Delay *****************
  3159 ;; Defined at:
  3160 ;;		line 24 in file "Functions.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  wait            2   22[COMRAM] int 
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  x               2   25[COMRAM] int 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;		None               void
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3174 ;;      Params:         2       0       0       0       0       0       0
  3175 ;;      Locals:         2       0       0       0       0       0       0
  3176 ;;      Temps:          1       0       0       0       0       0       0
  3177 ;;      Totals:         5       0       0       0       0       0       0
  3178 ;;Total ram usage:        5 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    4
  3181 ;; This function calls:
  3182 ;;		Nothing
  3183 ;; This function is called by:
  3184 ;;		_main
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           	psect	text18
  3189  002214                     __ptext18:
  3190                           	opt stack 0
  3191  002214                     _Delay:
  3192                           	opt stack 26
  3193                           
  3194                           ;Functions.c: 26: int x;
  3195                           ;Functions.c: 27: for(x = 0;x<wait;x++)
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;incstack = 0
  3199  002214  0E00               	movlw	0
  3200  002216  6E1B               	movwf	Delay@x+1,c
  3201  002218  0E00               	movlw	0
  3202  00221A  6E1A               	movwf	Delay@x,c
  3203  00221C  D009               	goto	l311
  3204  00221E                     l2930:
  3205                           
  3206                           ;Functions.c: 28: {
  3207                           ;Functions.c: 29: _delay((unsigned long)((1)*(8000000/4000.0)));
  3208  00221E  0E03               	movlw	3
  3209  002220  6E19               	movwf	??_Delay& (0+255),c
  3210  002222  0E98               	movlw	152
  3211  002224                     u3247:
  3212  002224  2EE8               	decfsz	wreg,f,c
  3213  002226  D7FE               	goto	u3247
  3214  002228  2E19               	decfsz	??_Delay& (0+255),f,c
  3215  00222A  D7FC               	goto	u3247
  3216  00222C  4A1A               	infsnz	Delay@x,f,c
  3217  00222E  2A1B               	incf	Delay@x+1,f,c
  3218  002230                     l311:
  3219  002230  501B               	movf	Delay@x+1,w,c
  3220  002232  0A80               	xorlw	128
  3221  002234  6E19               	movwf	??_Delay& (0+255),c
  3222  002236  5017               	movf	Delay@wait,w,c
  3223  002238  5C1A               	subwf	Delay@x,w,c
  3224  00223A  5018               	movf	Delay@wait+1,w,c
  3225  00223C  0A80               	xorlw	128
  3226  00223E  5819               	subwfb	??_Delay& (0+255),w,c
  3227  002240  B0D8               	btfsc	status,0,c
  3228  002242  0012               	return	
  3229  002244  D7EC               	goto	l2930
  3230  002246                     __end_of_Delay:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           intcon	equ	0xFF2
  3237                           intcon2	equ	0xFF1
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           postinc1	equ	0xFE6
  3241                           postdec1	equ	0xFE5
  3242                           fsr1h	equ	0xFE2
  3243                           fsr1l	equ	0xFE1
  3244                           postinc2	equ	0xFDE
  3245                           postdec2	equ	0xFDD
  3246                           fsr2h	equ	0xFDA
  3247                           fsr2l	equ	0xFD9
  3248                           status	equ	0xFD8
  3249                           
  3250 ;; *************** function _Current_Fault *****************
  3251 ;; Defined at:
  3252 ;;		line 12 in file "Current.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;		None
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  i               2   22[BANK0 ] int 
  3257 ;;  i               2   20[BANK0 ] int 
  3258 ;;  temp            3   24[BANK0 ] float 
  3259 ;;  fault           2   18[BANK0 ] int 
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  1    wreg      unsigned char 
  3262 ;; Registers used:
  3263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3269 ;;      Params:         0       0       0       0       0       0       0
  3270 ;;      Locals:         0       9       0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0       0       0
  3272 ;;      Totals:         0       9       0       0       0       0       0
  3273 ;;Total ram usage:        9 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    6
  3276 ;; This function calls:
  3277 ;;		___ftadd
  3278 ;;		___ftdiv
  3279 ;;		___ftge
  3280 ;;		___wmul
  3281 ;; This function is called by:
  3282 ;;		_main
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           	psect	text19
  3287  001088                     __ptext19:
  3288                           	opt stack 0
  3289  001088                     _Current_Fault:
  3290                           	opt stack 24
  3291                           
  3292                           ;Current.c: 14: int fault = 0;
  3293                           
  3294                           ;incstack = 0
  3295  001088  0E00               	movlw	0
  3296  00108A  0100               	movlb	0	; () banked
  3297  00108C  6FDA               	movwf	(Current_Fault@fault+1)& (0+255),b
  3298  00108E  0E00               	movlw	0
  3299  001090  0100               	movlb	0	; () banked
  3300  001092  6FD9               	movwf	Current_Fault@fault& (0+255),b
  3301                           
  3302                           ;Current.c: 15: float temp = 0;
  3303  001094  0E00               	movlw	0
  3304  001096  0100               	movlb	0	; () banked
  3305  001098  6FDF               	movwf	Current_Fault@temp& (0+255),b
  3306  00109A  0E00               	movlw	0
  3307  00109C  0100               	movlb	0	; () banked
  3308  00109E  6FE0               	movwf	(Current_Fault@temp+1)& (0+255),b
  3309  0010A0  0E00               	movlw	0
  3310  0010A2  0100               	movlb	0	; () banked
  3311  0010A4  6FE1               	movwf	(Current_Fault@temp+2)& (0+255),b
  3312                           
  3313                           ;Current.c: 16: for(int i = 0;i<9;i++)
  3314  0010A6  0E00               	movlw	0
  3315  0010A8  0100               	movlb	0	; () banked
  3316  0010AA  6FDC               	movwf	(Current_Fault@i+1)& (0+255),b
  3317  0010AC  0E00               	movlw	0
  3318  0010AE  0100               	movlb	0	; () banked
  3319  0010B0  6FDB               	movwf	Current_Fault@i& (0+255),b
  3320  0010B2                     
  3321                           ; BSR set to: 0
  3322  0010B2  0100               	movlb	0	; () banked
  3323  0010B4  51DC               	movf	(Current_Fault@i+1)& (0+255),w,b
  3324  0010B6  0A80               	xorlw	128
  3325  0010B8  0F80               	addlw	-128
  3326  0010BA  0E09               	movlw	9
  3327  0010BC  B4D8               	btfsc	status,2,c
  3328  0010BE  5DDB               	subwf	Current_Fault@i& (0+255),w,b
  3329  0010C0  B0D8               	btfsc	status,0,c
  3330  0010C2  D02D               	goto	l3606
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;Current.c: 17: {
  3334                           ;Current.c: 18: temp += Battery_Current[i];
  3335                           
  3336                           ; BSR set to: 0
  3337                           
  3338                           ; BSR set to: 0
  3339  0010C4  C0DF  F0CD         	movff	Current_Fault@temp,___ftadd@f1
  3340  0010C8  C0E0  F0CE         	movff	Current_Fault@temp+1,___ftadd@f1+1
  3341  0010CC  C0E1  F0CF         	movff	Current_Fault@temp+2,___ftadd@f1+2
  3342  0010D0  C0DB  F01F         	movff	Current_Fault@i,___wmul@multiplier
  3343  0010D4  C0DC  F020         	movff	Current_Fault@i+1,___wmul@multiplier+1
  3344  0010D8  0E00               	movlw	0
  3345  0010DA  6E22               	movwf	___wmul@multiplicand+1,c
  3346  0010DC  0E03               	movlw	3
  3347  0010DE  6E21               	movwf	___wmul@multiplicand,c
  3348  0010E0  EC51  F011         	call	___wmul	;wreg free
  3349  0010E4  0101               	movlb	1	; () banked
  3350  0010E6  0E00               	movlw	low _Battery_Current
  3351  0010E8  241F               	addwf	?___wmul,w,c
  3352  0010EA  6ED9               	movwf	fsr2l,c
  3353  0010EC  0101               	movlb	1	; () banked
  3354  0010EE  0E01               	movlw	high _Battery_Current
  3355  0010F0  2020               	addwfc	?___wmul+1,w,c
  3356  0010F2  6EDA               	movwf	fsr2h,c
  3357  0010F4  0100               	movlb	0	; () banked
  3358  0010F6  CFDE F0D0          	movff	postinc2,___ftadd@f2
  3359  0010FA  0100               	movlb	0	; () banked
  3360  0010FC  CFDE F0D1          	movff	postinc2,___ftadd@f2+1
  3361  001100  0100               	movlb	0	; () banked
  3362  001102  CFDD F0D2          	movff	postdec2,___ftadd@f2+2
  3363  001106  ECE5  F005         	call	___ftadd	;wreg free
  3364  00110A  C0CD  F0DF         	movff	?___ftadd,Current_Fault@temp
  3365  00110E  C0CE  F0E0         	movff	?___ftadd+1,Current_Fault@temp+1
  3366  001112  C0CF  F0E1         	movff	?___ftadd+2,Current_Fault@temp+2
  3367  001116  0100               	movlb	0	; () banked
  3368  001118  4BDB               	infsnz	Current_Fault@i& (0+255),f,b
  3369  00111A  2BDC               	incf	(Current_Fault@i+1)& (0+255),f,b
  3370  00111C  D7CA               	goto	L6
  3371  00111E                     l3606:
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;Current.c: 19: }
  3375                           ;Current.c: 20: temp = temp/10.0;
  3376  00111E  C0DF  F029         	movff	Current_Fault@temp,___ftdiv@f1
  3377  001122  C0E0  F02A         	movff	Current_Fault@temp+1,___ftdiv@f1+1
  3378  001126  C0E1  F02B         	movff	Current_Fault@temp+2,___ftdiv@f1+2
  3379  00112A  0E00               	movlw	0
  3380  00112C  6E2C               	movwf	___ftdiv@f2,c
  3381  00112E  0E20               	movlw	32
  3382  001130  6E2D               	movwf	___ftdiv@f2+1,c
  3383  001132  0E41               	movlw	65
  3384  001134  6E2E               	movwf	___ftdiv@f2+2,c
  3385  001136  EC33  F00C         	call	___ftdiv	;wreg free
  3386  00113A  C029  F0DF         	movff	?___ftdiv,Current_Fault@temp
  3387  00113E  C02A  F0E0         	movff	?___ftdiv+1,Current_Fault@temp+1
  3388  001142  C02B  F0E1         	movff	?___ftdiv+2,Current_Fault@temp+2
  3389                           
  3390                           ;Current.c: 21: Current_Mean = temp;
  3391  001146  C0DF  F0A6         	movff	Current_Fault@temp,_Current_Mean
  3392  00114A  C0E0  F0A7         	movff	Current_Fault@temp+1,_Current_Mean+1
  3393  00114E  C0E1  F0A8         	movff	Current_Fault@temp+2,_Current_Mean+2
  3394                           
  3395                           ;Current.c: 22: for(int i = 0;i<9;i++)
  3396  001152  0E00               	movlw	0
  3397  001154  0100               	movlb	0	; () banked
  3398  001156  6FDE               	movwf	(Current_Fault@i_873+1)& (0+255),b
  3399  001158  0E00               	movlw	0
  3400  00115A  0100               	movlb	0	; () banked
  3401  00115C  6FDD               	movwf	Current_Fault@i_873& (0+255),b
  3402  00115E                     
  3403                           ; BSR set to: 0
  3404  00115E  0100               	movlb	0	; () banked
  3405  001160  51DE               	movf	(Current_Fault@i_873+1)& (0+255),w,b
  3406  001162  0A80               	xorlw	128
  3407  001164  0F80               	addlw	-128
  3408  001166  0E09               	movlw	9
  3409  001168  B4D8               	btfsc	status,2,c
  3410  00116A  5DDD               	subwf	Current_Fault@i_873& (0+255),w,b
  3411  00116C  B0D8               	btfsc	status,0,c
  3412  00116E  D039               	goto	l3624
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;Current.c: 23: {
  3416                           ;Current.c: 24: if ((25 < Battery_Current[i]) && (25 < temp))
  3417                           
  3418                           ; BSR set to: 0
  3419                           
  3420                           ; BSR set to: 0
  3421  001170  0E00               	movlw	0
  3422  001172  6E25               	movwf	___ftge@ff1,c
  3423  001174  0EC8               	movlw	200
  3424  001176  6E26               	movwf	___ftge@ff1+1,c
  3425  001178  0E41               	movlw	65
  3426  00117A  6E27               	movwf	___ftge@ff1+2,c
  3427  00117C  C0DD  F01F         	movff	Current_Fault@i_873,___wmul@multiplier
  3428  001180  C0DE  F020         	movff	Current_Fault@i_873+1,___wmul@multiplier+1
  3429  001184  0E00               	movlw	0
  3430  001186  6E22               	movwf	___wmul@multiplicand+1,c
  3431  001188  0E03               	movlw	3
  3432  00118A  6E21               	movwf	___wmul@multiplicand,c
  3433  00118C  EC51  F011         	call	___wmul	;wreg free
  3434  001190  0101               	movlb	1	; () banked
  3435  001192  0E00               	movlw	low _Battery_Current
  3436  001194  241F               	addwf	?___wmul,w,c
  3437  001196  6ED9               	movwf	fsr2l,c
  3438  001198  0101               	movlb	1	; () banked
  3439  00119A  0E01               	movlw	high _Battery_Current
  3440  00119C  2020               	addwfc	?___wmul+1,w,c
  3441  00119E  6EDA               	movwf	fsr2h,c
  3442  0011A0  CFDE F028          	movff	postinc2,___ftge@ff2
  3443  0011A4  CFDE F029          	movff	postinc2,___ftge@ff2+1
  3444  0011A8  CFDD F02A          	movff	postdec2,___ftge@ff2+2
  3445  0011AC  ECE1  F00F         	call	___ftge	;wreg free
  3446  0011B0  B0D8               	btfsc	status,0,c
  3447  0011B2  D013               	goto	l458
  3448  0011B4  0E00               	movlw	0
  3449  0011B6  6E25               	movwf	___ftge@ff1,c
  3450  0011B8  0EC8               	movlw	200
  3451  0011BA  6E26               	movwf	___ftge@ff1+1,c
  3452  0011BC  0E41               	movlw	65
  3453  0011BE  6E27               	movwf	___ftge@ff1+2,c
  3454  0011C0  C0DF  F028         	movff	Current_Fault@temp,___ftge@ff2
  3455  0011C4  C0E0  F029         	movff	Current_Fault@temp+1,___ftge@ff2+1
  3456  0011C8  C0E1  F02A         	movff	Current_Fault@temp+2,___ftge@ff2+2
  3457  0011CC  ECE1  F00F         	call	___ftge	;wreg free
  3458  0011D0  B0D8               	btfsc	status,0,c
  3459  0011D2  D003               	goto	l458
  3460                           
  3461                           ;Current.c: 25: {
  3462                           ;Current.c: 26: fault++;
  3463  0011D4  0100               	movlb	0	; () banked
  3464  0011D6  4BD9               	infsnz	Current_Fault@fault& (0+255),f,b
  3465  0011D8  2BDA               	incf	(Current_Fault@fault+1)& (0+255),f,b
  3466  0011DA                     l458:
  3467  0011DA  0100               	movlb	0	; () banked
  3468  0011DC  4BDD               	infsnz	Current_Fault@i_873& (0+255),f,b
  3469  0011DE  2BDE               	incf	(Current_Fault@i_873+1)& (0+255),f,b
  3470  0011E0  D7BE               	goto	L7
  3471  0011E2                     l3624:
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;Current.c: 27: }
  3475                           ;Current.c: 28: }
  3476                           ;Current.c: 29: if(fault > 6)
  3477  0011E2  0100               	movlb	0	; () banked
  3478  0011E4  51DA               	movf	(Current_Fault@fault+1)& (0+255),w,b
  3479  0011E6  0A80               	xorlw	128
  3480  0011E8  0F80               	addlw	-128
  3481  0011EA  0E07               	movlw	7
  3482  0011EC  B4D8               	btfsc	status,2,c
  3483  0011EE  5DD9               	subwf	Current_Fault@fault& (0+255),w,b
  3484  0011F0  A0D8               	btfss	status,0,c
  3485  0011F2  D005               	goto	l3628
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;Current.c: 30: {
  3489                           ;Current.c: 31: fault = 1;
  3490  0011F4  0E00               	movlw	0
  3491  0011F6  0100               	movlb	0	; () banked
  3492  0011F8  6FDA               	movwf	(Current_Fault@fault+1)& (0+255),b
  3493  0011FA  0E01               	movlw	1
  3494  0011FC  D004               	goto	L8
  3495  0011FE                     l3628:
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;Current.c: 33: else
  3499                           ;Current.c: 34: {
  3500                           ;Current.c: 35: fault = 0;
  3501  0011FE  0E00               	movlw	0
  3502  001200  0100               	movlb	0	; () banked
  3503  001202  6FDA               	movwf	(Current_Fault@fault+1)& (0+255),b
  3504  001204  0E00               	movlw	0
  3505  001206                     L8:
  3506  001206  0100               	movlb	0	; () banked
  3507  001208  6FD9               	movwf	Current_Fault@fault& (0+255),b
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;Current.c: 36: }
  3511                           ;Current.c: 37: return fault;
  3512  00120A  0100               	movlb	0	; () banked
  3513  00120C  51D9               	movf	Current_Fault@fault& (0+255),w,b
  3514  00120E  0012               	return	
  3515  001210                     __end_of_Current_Fault:
  3516                           	opt stack 0
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           intcon	equ	0xFF2
  3522                           intcon2	equ	0xFF1
  3523                           postinc0	equ	0xFEE
  3524                           wreg	equ	0xFE8
  3525                           postinc1	equ	0xFE6
  3526                           postdec1	equ	0xFE5
  3527                           fsr1h	equ	0xFE2
  3528                           fsr1l	equ	0xFE1
  3529                           postinc2	equ	0xFDE
  3530                           postdec2	equ	0xFDD
  3531                           fsr2h	equ	0xFDA
  3532                           fsr2l	equ	0xFD9
  3533                           status	equ	0xFD8
  3534                           
  3535 ;; *************** function _Current_Convert *****************
  3536 ;; Defined at:
  3537 ;;		line 63 in file "Current.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;		None
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  x               2   24[BANK0 ] int 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;		None               void
  3544 ;; Registers used:
  3545 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3551 ;;      Params:         0       0       0       0       0       0       0
  3552 ;;      Locals:         0       4       0       0       0       0       0
  3553 ;;      Temps:          0       2       0       0       0       0       0
  3554 ;;      Totals:         0       6       0       0       0       0       0
  3555 ;;Total ram usage:        6 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    7
  3558 ;; This function calls:
  3559 ;;		_Current_Filter
  3560 ;;		___awdiv
  3561 ;;		___awtoft
  3562 ;;		___wmul
  3563 ;; This function is called by:
  3564 ;;		_main
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text20
  3569  001A22                     __ptext20:
  3570                           	opt stack 0
  3571  001A22                     _Current_Convert:
  3572                           	opt stack 23
  3573                           
  3574                           ;Current.c: 65: int x;
  3575                           ;Current.c: 66: for(x = 0; x < 10; x++)
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;incstack = 0
  3579  001A22  0E00               	movlw	0
  3580  001A24  0100               	movlb	0	; () banked
  3581  001A26  6FE0               	movwf	(Current_Convert@x+1)& (0+255),b
  3582  001A28  0E00               	movlw	0
  3583  001A2A  0100               	movlb	0	; () banked
  3584  001A2C  6FDF               	movwf	Current_Convert@x& (0+255),b
  3585  001A2E                     
  3586                           ; BSR set to: 0
  3587  001A2E  0100               	movlb	0	; () banked
  3588  001A30  51E0               	movf	(Current_Convert@x+1)& (0+255),w,b
  3589  001A32  0A80               	xorlw	128
  3590  001A34  0F80               	addlw	-128
  3591  001A36  0E0A               	movlw	10
  3592  001A38  B4D8               	btfsc	status,2,c
  3593  001A3A  5DDF               	subwf	Current_Convert@x& (0+255),w,b
  3594  001A3C  B0D8               	btfsc	status,0,c
  3595  001A3E  D05B               	goto	l3592
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;Current.c: 67: {
  3599                           ;Current.c: 68: TempBattery_Current[x] = ((((Current_Adc[x]/1024)*500)-2500)/66);
  3600                           
  3601                           ; BSR set to: 0
  3602                           
  3603                           ; BSR set to: 0
  3604  001A40  0E04               	movlw	4
  3605  001A42  6E1A               	movwf	___awdiv@divisor+1,c
  3606  001A44  0E00               	movlw	0
  3607  001A46  6E19               	movwf	___awdiv@divisor,c
  3608  001A48  0E92               	movlw	low _Current_Adc
  3609  001A4A  0100               	movlb	0	; () banked
  3610  001A4C  6FDB               	movwf	??_Current_Convert& (0+255),b
  3611  001A4E  0E00               	movlw	high _Current_Adc
  3612  001A50  6FDC               	movwf	(??_Current_Convert+1)& (0+255),b
  3613  001A52  90D8               	bcf	status,0,c
  3614  001A54  0100               	movlb	0	; () banked
  3615  001A56  35DF               	rlcf	Current_Convert@x& (0+255),w,b
  3616  001A58  6ED9               	movwf	fsr2l,c
  3617  001A5A  0100               	movlb	0	; () banked
  3618  001A5C  35E0               	rlcf	(Current_Convert@x+1)& (0+255),w,b
  3619  001A5E  6EDA               	movwf	fsr2h,c
  3620  001A60  0100               	movlb	0	; () banked
  3621  001A62  51DB               	movf	??_Current_Convert& (0+255),w,b
  3622  001A64  26D9               	addwf	fsr2l,f,c
  3623  001A66  0100               	movlb	0	; () banked
  3624  001A68  51DC               	movf	(??_Current_Convert+1)& (0+255),w,b
  3625  001A6A  22DA               	addwfc	fsr2h,f,c
  3626  001A6C  CFDE F017          	movff	postinc2,___awdiv@dividend
  3627  001A70  CFDD F018          	movff	postdec2,___awdiv@dividend+1
  3628  001A74  EC46  F00F         	call	___awdiv	;wreg free
  3629  001A78  C017  F01F         	movff	?___awdiv,___wmul@multiplier
  3630  001A7C  C018  F020         	movff	?___awdiv+1,___wmul@multiplier+1
  3631  001A80  0E01               	movlw	1
  3632  001A82  6E22               	movwf	___wmul@multiplicand+1,c
  3633  001A84  0EF4               	movlw	244
  3634  001A86  6E21               	movwf	___wmul@multiplicand,c
  3635  001A88  EC51  F011         	call	___wmul	;wreg free
  3636  001A8C  0E3C               	movlw	60
  3637  001A8E  241F               	addwf	?___wmul,w,c
  3638  001A90  0100               	movlb	0	; () banked
  3639  001A92  6FDD               	movwf	_Current_Convert$1516& (0+255),b
  3640  001A94  0EF6               	movlw	246
  3641  001A96  2020               	addwfc	?___wmul+1,w,c
  3642  001A98  0100               	movlb	0	; () banked
  3643  001A9A  6FDE               	movwf	(_Current_Convert$1516+1)& (0+255),b
  3644                           
  3645                           ;Current.c: 67: {
  3646                           ;Current.c: 68: TempBattery_Current[x] = ((((Current_Adc[x]/1024)*500)-2500)/66);
  3647  001A9C  C0DF  F01F         	movff	Current_Convert@x,___wmul@multiplier
  3648  001AA0  C0E0  F020         	movff	Current_Convert@x+1,___wmul@multiplier+1
  3649  001AA4  0E00               	movlw	0
  3650  001AA6  6E22               	movwf	___wmul@multiplicand+1,c
  3651  001AA8  0E03               	movlw	3
  3652  001AAA  6E21               	movwf	___wmul@multiplicand,c
  3653  001AAC  EC51  F011         	call	___wmul	;wreg free
  3654  001AB0  0101               	movlb	1	; () banked
  3655  001AB2  0E96               	movlw	low _TempBattery_Current
  3656  001AB4  241F               	addwf	?___wmul,w,c
  3657  001AB6  6ED9               	movwf	fsr2l,c
  3658  001AB8  0101               	movlb	1	; () banked
  3659  001ABA  0E01               	movlw	high _TempBattery_Current
  3660  001ABC  2020               	addwfc	?___wmul+1,w,c
  3661  001ABE  6EDA               	movwf	fsr2h,c
  3662  001AC0  0E00               	movlw	0
  3663  001AC2  6E1A               	movwf	___awdiv@divisor+1,c
  3664  001AC4  0E42               	movlw	66
  3665  001AC6  6E19               	movwf	___awdiv@divisor,c
  3666  001AC8  C0DD  F017         	movff	_Current_Convert$1516,___awdiv@dividend
  3667  001ACC  C0DE  F018         	movff	_Current_Convert$1516+1,___awdiv@dividend+1
  3668  001AD0  EC46  F00F         	call	___awdiv	;wreg free
  3669  001AD4  C017  F025         	movff	?___awdiv,___awtoft@c
  3670  001AD8  C018  F026         	movff	?___awdiv+1,___awtoft@c+1
  3671  001ADC  ECAF  F010         	call	___awtoft	;wreg free
  3672  001AE0  C025  FFDE         	movff	?___awtoft,postinc2
  3673  001AE4  C026  FFDE         	movff	?___awtoft+1,postinc2
  3674  001AE8  C027  FFDD         	movff	?___awtoft+2,postdec2
  3675  001AEC  52DD               	movf	postdec2,f,c
  3676  001AEE  0100               	movlb	0	; () banked
  3677  001AF0  4BDF               	infsnz	Current_Convert@x& (0+255),f,b
  3678  001AF2  2BE0               	incf	(Current_Convert@x+1)& (0+255),f,b
  3679  001AF4  D79C               	goto	L9
  3680  001AF6                     l3592:
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;Current.c: 69: }
  3684                           ;Current.c: 70: Current_Filter();
  3685  001AF6  ECC0  F009         	call	_Current_Filter	;wreg free
  3686  001AFA  0012               	return	
  3687  001AFC                     __end_of_Current_Convert:
  3688                           	opt stack 0
  3689                           tblptru	equ	0xFF8
  3690                           tblptrh	equ	0xFF7
  3691                           tblptrl	equ	0xFF6
  3692                           tablat	equ	0xFF5
  3693                           intcon	equ	0xFF2
  3694                           intcon2	equ	0xFF1
  3695                           postinc0	equ	0xFEE
  3696                           wreg	equ	0xFE8
  3697                           postinc1	equ	0xFE6
  3698                           postdec1	equ	0xFE5
  3699                           fsr1h	equ	0xFE2
  3700                           fsr1l	equ	0xFE1
  3701                           postinc2	equ	0xFDE
  3702                           postdec2	equ	0xFDD
  3703                           fsr2h	equ	0xFDA
  3704                           fsr2l	equ	0xFD9
  3705                           status	equ	0xFD8
  3706                           
  3707 ;; *************** function ___awdiv *****************
  3708 ;; Defined at:
  3709 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;  dividend        2   22[COMRAM] int 
  3712 ;;  divisor         2   24[COMRAM] int 
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;  quotient        2   28[COMRAM] int 
  3715 ;;  sign            1   27[COMRAM] unsigned char 
  3716 ;;  counter         1   26[COMRAM] unsigned char 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  2   22[COMRAM] int 
  3719 ;; Registers used:
  3720 ;;		wreg, status,2, status,0, prodl
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3726 ;;      Params:         4       0       0       0       0       0       0
  3727 ;;      Locals:         4       0       0       0       0       0       0
  3728 ;;      Temps:          0       0       0       0       0       0       0
  3729 ;;      Totals:         8       0       0       0       0       0       0
  3730 ;;Total ram usage:        8 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    4
  3733 ;; This function calls:
  3734 ;;		Nothing
  3735 ;; This function is called by:
  3736 ;;		_Current_Convert
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text21
  3741  001E8C                     __ptext21:
  3742                           	opt stack 0
  3743  001E8C                     ___awdiv:
  3744                           	opt stack 25
  3745                           
  3746                           ;incstack = 0
  3747  001E8C  0E00               	movlw	0
  3748  001E8E  6E1C               	movwf	___awdiv@sign,c
  3749  001E90  501A               	movf	___awdiv@divisor+1,w,c
  3750  001E92  0A80               	xorlw	128
  3751  001E94  6EF3               	movwf	prodl,c
  3752  001E96  0E80               	movlw	128
  3753  001E98  5CF3               	subwf	prodl,w,c
  3754  001E9A  0E00               	movlw	0
  3755  001E9C  B4D8               	btfsc	status,2,c
  3756  001E9E  5C19               	subwf	___awdiv@divisor,w,c
  3757  001EA0  B0D8               	btfsc	status,0,c
  3758  001EA2  D006               	goto	l2652
  3759  001EA4  6C19               	negf	___awdiv@divisor,c
  3760  001EA6  1E1A               	comf	___awdiv@divisor+1,f,c
  3761  001EA8  B0D8               	btfsc	status,0,c
  3762  001EAA  2A1A               	incf	___awdiv@divisor+1,f,c
  3763  001EAC  0E01               	movlw	1
  3764  001EAE  6E1C               	movwf	___awdiv@sign,c
  3765  001EB0                     l2652:
  3766  001EB0  5018               	movf	___awdiv@dividend+1,w,c
  3767  001EB2  0A80               	xorlw	128
  3768  001EB4  6EF3               	movwf	prodl,c
  3769  001EB6  0E80               	movlw	128
  3770  001EB8  5CF3               	subwf	prodl,w,c
  3771  001EBA  0E00               	movlw	0
  3772  001EBC  B4D8               	btfsc	status,2,c
  3773  001EBE  5C17               	subwf	___awdiv@dividend,w,c
  3774  001EC0  B0D8               	btfsc	status,0,c
  3775  001EC2  D006               	goto	l2658
  3776  001EC4  6C17               	negf	___awdiv@dividend,c
  3777  001EC6  1E18               	comf	___awdiv@dividend+1,f,c
  3778  001EC8  B0D8               	btfsc	status,0,c
  3779  001ECA  2A18               	incf	___awdiv@dividend+1,f,c
  3780  001ECC  0E01               	movlw	1
  3781  001ECE  1A1C               	xorwf	___awdiv@sign,f,c
  3782  001ED0                     l2658:
  3783  001ED0  0E00               	movlw	0
  3784  001ED2  6E1E               	movwf	___awdiv@quotient+1,c
  3785  001ED4  0E00               	movlw	0
  3786  001ED6  6E1D               	movwf	___awdiv@quotient,c
  3787  001ED8  501A               	movf	___awdiv@divisor+1,w,c
  3788  001EDA  1019               	iorwf	___awdiv@divisor,w,c
  3789  001EDC  B4D8               	btfsc	status,2,c
  3790  001EDE  D01C               	goto	l2680
  3791  001EE0  0E01               	movlw	1
  3792  001EE2  6E1B               	movwf	___awdiv@counter,c
  3793  001EE4  D004               	goto	l2666
  3794  001EE6                     l2664:
  3795  001EE6  90D8               	bcf	status,0,c
  3796  001EE8  3619               	rlcf	___awdiv@divisor,f,c
  3797  001EEA  361A               	rlcf	___awdiv@divisor+1,f,c
  3798  001EEC  2A1B               	incf	___awdiv@counter,f,c
  3799  001EEE                     l2666:
  3800  001EEE  AE1A               	btfss	___awdiv@divisor+1,7,c
  3801  001EF0  D7FA               	goto	l2664
  3802  001EF2                     l2668:
  3803  001EF2  90D8               	bcf	status,0,c
  3804  001EF4  361D               	rlcf	___awdiv@quotient,f,c
  3805  001EF6  361E               	rlcf	___awdiv@quotient+1,f,c
  3806  001EF8  5019               	movf	___awdiv@divisor,w,c
  3807  001EFA  5C17               	subwf	___awdiv@dividend,w,c
  3808  001EFC  501A               	movf	___awdiv@divisor+1,w,c
  3809  001EFE  5818               	subwfb	___awdiv@dividend+1,w,c
  3810  001F00  A0D8               	btfss	status,0,c
  3811  001F02  D005               	goto	l2676
  3812  001F04  5019               	movf	___awdiv@divisor,w,c
  3813  001F06  5E17               	subwf	___awdiv@dividend,f,c
  3814  001F08  501A               	movf	___awdiv@divisor+1,w,c
  3815  001F0A  5A18               	subwfb	___awdiv@dividend+1,f,c
  3816  001F0C  801D               	bsf	___awdiv@quotient,0,c
  3817  001F0E                     l2676:
  3818  001F0E  90D8               	bcf	status,0,c
  3819  001F10  321A               	rrcf	___awdiv@divisor+1,f,c
  3820  001F12  3219               	rrcf	___awdiv@divisor,f,c
  3821  001F14  2E1B               	decfsz	___awdiv@counter,f,c
  3822  001F16  D7ED               	goto	l2668
  3823  001F18                     l2680:
  3824  001F18  501C               	movf	___awdiv@sign,w,c
  3825  001F1A  B4D8               	btfsc	status,2,c
  3826  001F1C  D004               	goto	l2684
  3827  001F1E  6C1D               	negf	___awdiv@quotient,c
  3828  001F20  1E1E               	comf	___awdiv@quotient+1,f,c
  3829  001F22  B0D8               	btfsc	status,0,c
  3830  001F24  2A1E               	incf	___awdiv@quotient+1,f,c
  3831  001F26                     l2684:
  3832  001F26  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  3833  001F2A  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  3834  001F2E  0012               	return	
  3835  001F30                     __end_of___awdiv:
  3836                           	opt stack 0
  3837                           tblptru	equ	0xFF8
  3838                           tblptrh	equ	0xFF7
  3839                           tblptrl	equ	0xFF6
  3840                           tablat	equ	0xFF5
  3841                           prodl	equ	0xFF3
  3842                           intcon	equ	0xFF2
  3843                           intcon2	equ	0xFF1
  3844                           postinc0	equ	0xFEE
  3845                           wreg	equ	0xFE8
  3846                           postinc1	equ	0xFE6
  3847                           postdec1	equ	0xFE5
  3848                           fsr1h	equ	0xFE2
  3849                           fsr1l	equ	0xFE1
  3850                           postinc2	equ	0xFDE
  3851                           postdec2	equ	0xFDD
  3852                           fsr2h	equ	0xFDA
  3853                           fsr2l	equ	0xFD9
  3854                           status	equ	0xFD8
  3855                           
  3856 ;; *************** function _Current_Filter *****************
  3857 ;; Defined at:
  3858 ;;		line 49 in file "Current.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  x               2   18[BANK0 ] int 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;		None               void
  3865 ;; Registers used:
  3866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3872 ;;      Params:         0       0       0       0       0       0       0
  3873 ;;      Locals:         0       2       0       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0       0       0
  3875 ;;      Totals:         0       2       0       0       0       0       0
  3876 ;;Total ram usage:        2 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    6
  3879 ;; This function calls:
  3880 ;;		___ftadd
  3881 ;;		___ftmul
  3882 ;;		___wmul
  3883 ;; This function is called by:
  3884 ;;		_Current_Convert
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text22
  3889  001380                     __ptext22:
  3890                           	opt stack 0
  3891  001380                     _Current_Filter:
  3892                           	opt stack 23
  3893                           
  3894                           ;Current.c: 52: int x;
  3895                           ;Current.c: 53: for(x = 0; x < 10; x++)
  3896                           
  3897                           ;incstack = 0
  3898  001380  0E00               	movlw	0
  3899  001382  0100               	movlb	0	; () banked
  3900  001384  6FDA               	movwf	(Current_Filter@x+1)& (0+255),b
  3901  001386  0E00               	movlw	0
  3902  001388  0100               	movlb	0	; () banked
  3903  00138A  6FD9               	movwf	Current_Filter@x& (0+255),b
  3904  00138C                     
  3905                           ; BSR set to: 0
  3906  00138C  0100               	movlb	0	; () banked
  3907  00138E  51DA               	movf	(Current_Filter@x+1)& (0+255),w,b
  3908  001390  0A80               	xorlw	128
  3909  001392  0F80               	addlw	-128
  3910  001394  0E0A               	movlw	10
  3911  001396  B4D8               	btfsc	status,2,c
  3912  001398  5DD9               	subwf	Current_Filter@x& (0+255),w,b
  3913  00139A  B0D8               	btfsc	status,0,c
  3914  00139C  D06B               	goto	l3472
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;Current.c: 54: {
  3918                           ;Current.c: 55: Battery_Current[x] = (0.88*TempBattery_Current[x] + ((1- 0.88)*PrevBatte
      +                          ry_Current[x]));
  3919                           
  3920                           ; BSR set to: 0
  3921                           
  3922                           ; BSR set to: 0
  3923  00139E  C0D9  F01F         	movff	Current_Filter@x,___wmul@multiplier
  3924  0013A2  C0DA  F020         	movff	Current_Filter@x+1,___wmul@multiplier+1
  3925  0013A6  0E00               	movlw	0
  3926  0013A8  6E22               	movwf	___wmul@multiplicand+1,c
  3927  0013AA  0E03               	movlw	3
  3928  0013AC  6E21               	movwf	___wmul@multiplicand,c
  3929  0013AE  EC51  F011         	call	___wmul	;wreg free
  3930  0013B2  0101               	movlb	1	; () banked
  3931  0013B4  0E00               	movlw	low _Battery_Current
  3932  0013B6  241F               	addwf	?___wmul,w,c
  3933  0013B8  6ED9               	movwf	fsr2l,c
  3934  0013BA  0101               	movlb	1	; () banked
  3935  0013BC  0E01               	movlw	high _Battery_Current
  3936  0013BE  2020               	addwfc	?___wmul+1,w,c
  3937  0013C0  6EDA               	movwf	fsr2h,c
  3938  0013C2  0E48               	movlw	72
  3939  0013C4  6E3B               	movwf	___ftmul@f2,c
  3940  0013C6  0E61               	movlw	97
  3941  0013C8  6E3C               	movwf	___ftmul@f2+1,c
  3942  0013CA  0E3F               	movlw	63
  3943  0013CC  6E3D               	movwf	___ftmul@f2+2,c
  3944  0013CE  C0D9  F01F         	movff	Current_Filter@x,___wmul@multiplier
  3945  0013D2  C0DA  F020         	movff	Current_Filter@x+1,___wmul@multiplier+1
  3946  0013D6  0E00               	movlw	0
  3947  0013D8  6E22               	movwf	___wmul@multiplicand+1,c
  3948  0013DA  0E03               	movlw	3
  3949  0013DC  6E21               	movwf	___wmul@multiplicand,c
  3950  0013DE  EC51  F011         	call	___wmul	;wreg free
  3951  0013E2  0101               	movlb	1	; () banked
  3952  0013E4  0E96               	movlw	low _TempBattery_Current
  3953  0013E6  241F               	addwf	?___wmul,w,c
  3954  0013E8  6EE1               	movwf	fsr1l,c
  3955  0013EA  0101               	movlb	1	; () banked
  3956  0013EC  0E01               	movlw	high _TempBattery_Current
  3957  0013EE  2020               	addwfc	?___wmul+1,w,c
  3958  0013F0  6EE2               	movwf	fsr1h,c
  3959  0013F2  CFE6 F038          	movff	postinc1,___ftmul@f1
  3960  0013F6  CFE6 F039          	movff	postinc1,___ftmul@f1+1
  3961  0013FA  CFE5 F03A          	movff	postdec1,___ftmul@f1+2
  3962  0013FE  EC29  F00B         	call	___ftmul	;wreg free
  3963  001402  C038  F0CD         	movff	?___ftmul,___ftadd@f1
  3964  001406  C039  F0CE         	movff	?___ftmul+1,___ftadd@f1+1
  3965  00140A  C03A  F0CF         	movff	?___ftmul+2,___ftadd@f1+2
  3966  00140E  0EC3               	movlw	195
  3967  001410  6E3B               	movwf	___ftmul@f2,c
  3968  001412  0EF5               	movlw	245
  3969  001414  6E3C               	movwf	___ftmul@f2+1,c
  3970  001416  0E3D               	movlw	61
  3971  001418  6E3D               	movwf	___ftmul@f2+2,c
  3972  00141A  0E00               	movlw	0
  3973  00141C  6E22               	movwf	___wmul@multiplicand+1,c
  3974  00141E  0E03               	movlw	3
  3975  001420  6E21               	movwf	___wmul@multiplicand,c
  3976  001422  C0D9  F01F         	movff	Current_Filter@x,___wmul@multiplier
  3977  001426  C0DA  F020         	movff	Current_Filter@x+1,___wmul@multiplier+1
  3978  00142A  EC51  F011         	call	___wmul	;wreg free
  3979  00142E  0101               	movlb	1	; () banked
  3980  001430  0E1E               	movlw	low _PrevBattery_Current
  3981  001432  241F               	addwf	?___wmul,w,c
  3982  001434  6EE1               	movwf	fsr1l,c
  3983  001436  0101               	movlb	1	; () banked
  3984  001438  0E01               	movlw	high _PrevBattery_Current
  3985  00143A  2020               	addwfc	?___wmul+1,w,c
  3986  00143C  6EE2               	movwf	fsr1h,c
  3987  00143E  CFE6 F038          	movff	postinc1,___ftmul@f1
  3988  001442  CFE6 F039          	movff	postinc1,___ftmul@f1+1
  3989  001446  CFE5 F03A          	movff	postdec1,___ftmul@f1+2
  3990  00144A  EC29  F00B         	call	___ftmul	;wreg free
  3991  00144E  C038  F0D0         	movff	?___ftmul,___ftadd@f2
  3992  001452  C039  F0D1         	movff	?___ftmul+1,___ftadd@f2+1
  3993  001456  C03A  F0D2         	movff	?___ftmul+2,___ftadd@f2+2
  3994  00145A  ECE5  F005         	call	___ftadd	;wreg free
  3995  00145E  C0CD  FFDE         	movff	?___ftadd,postinc2
  3996  001462  C0CE  FFDE         	movff	?___ftadd+1,postinc2
  3997  001466  C0CF  FFDD         	movff	?___ftadd+2,postdec2
  3998  00146A  52DD               	movf	postdec2,f,c
  3999  00146C  0100               	movlb	0	; () banked
  4000  00146E  4BD9               	infsnz	Current_Filter@x& (0+255),f,b
  4001  001470  2BDA               	incf	(Current_Filter@x+1)& (0+255),f,b
  4002  001472  D78C               	goto	L10
  4003  001474                     l3472:
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;Current.c: 56: }
  4007                           ;Current.c: 57: for(x = 0; x < 10; x++)
  4008  001474  0E00               	movlw	0
  4009  001476  0100               	movlb	0	; () banked
  4010  001478  6FDA               	movwf	(Current_Filter@x+1)& (0+255),b
  4011  00147A  0E00               	movlw	0
  4012  00147C  0100               	movlb	0	; () banked
  4013  00147E  6FD9               	movwf	Current_Filter@x& (0+255),b
  4014  001480                     
  4015                           ; BSR set to: 0
  4016  001480  0100               	movlb	0	; () banked
  4017  001482  51DA               	movf	(Current_Filter@x+1)& (0+255),w,b
  4018  001484  0A80               	xorlw	128
  4019  001486  0F80               	addlw	-128
  4020  001488  0E0A               	movlw	10
  4021  00148A  B4D8               	btfsc	status,2,c
  4022  00148C  5DD9               	subwf	Current_Filter@x& (0+255),w,b
  4023  00148E  B0D8               	btfsc	status,0,c
  4024  001490  0012               	return	
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;Current.c: 58: {
  4028                           ;Current.c: 59: PrevBattery_Current[x] = Battery_Current[x];
  4029                           
  4030                           ; BSR set to: 0
  4031                           
  4032                           ; BSR set to: 0
  4033  001492  C0D9  F01F         	movff	Current_Filter@x,___wmul@multiplier
  4034  001496  C0DA  F020         	movff	Current_Filter@x+1,___wmul@multiplier+1
  4035  00149A  0E00               	movlw	0
  4036  00149C  6E22               	movwf	___wmul@multiplicand+1,c
  4037  00149E  0E03               	movlw	3
  4038  0014A0  6E21               	movwf	___wmul@multiplicand,c
  4039  0014A2  EC51  F011         	call	___wmul	;wreg free
  4040  0014A6  0101               	movlb	1	; () banked
  4041  0014A8  0E00               	movlw	low _Battery_Current
  4042  0014AA  241F               	addwf	?___wmul,w,c
  4043  0014AC  6ED9               	movwf	fsr2l,c
  4044  0014AE  0101               	movlb	1	; () banked
  4045  0014B0  0E01               	movlw	high _Battery_Current
  4046  0014B2  2020               	addwfc	?___wmul+1,w,c
  4047  0014B4  6EDA               	movwf	fsr2h,c
  4048  0014B6  C0D9  F01F         	movff	Current_Filter@x,___wmul@multiplier
  4049  0014BA  C0DA  F020         	movff	Current_Filter@x+1,___wmul@multiplier+1
  4050  0014BE  0E00               	movlw	0
  4051  0014C0  6E22               	movwf	___wmul@multiplicand+1,c
  4052  0014C2  0E03               	movlw	3
  4053  0014C4  6E21               	movwf	___wmul@multiplicand,c
  4054  0014C6  EC51  F011         	call	___wmul	;wreg free
  4055  0014CA  0101               	movlb	1	; () banked
  4056  0014CC  0E1E               	movlw	low _PrevBattery_Current
  4057  0014CE  241F               	addwf	?___wmul,w,c
  4058  0014D0  6EE1               	movwf	fsr1l,c
  4059  0014D2  0101               	movlb	1	; () banked
  4060  0014D4  0E01               	movlw	high _PrevBattery_Current
  4061  0014D6  2020               	addwfc	?___wmul+1,w,c
  4062  0014D8  6EE2               	movwf	fsr1h,c
  4063  0014DA  CFDE FFE6          	movff	postinc2,postinc1
  4064  0014DE  CFDE FFE6          	movff	postinc2,postinc1
  4065  0014E2  CFDE FFE5          	movff	postinc2,postdec1
  4066  0014E6  52E5               	movf	postdec1,f,c
  4067                           
  4068                           ; BSR set to: 1
  4069  0014E8  0100               	movlb	0	; () banked
  4070  0014EA  4BD9               	infsnz	Current_Filter@x& (0+255),f,b
  4071  0014EC  2BDA               	incf	(Current_Filter@x+1)& (0+255),f,b
  4072  0014EE  D7C8               	goto	L11
  4073  0014F0                     __end_of_Current_Filter:
  4074                           	opt stack 0
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           prodl	equ	0xFF3
  4080                           intcon	equ	0xFF2
  4081                           intcon2	equ	0xFF1
  4082                           postinc0	equ	0xFEE
  4083                           wreg	equ	0xFE8
  4084                           postinc1	equ	0xFE6
  4085                           postdec1	equ	0xFE5
  4086                           fsr1h	equ	0xFE2
  4087                           fsr1l	equ	0xFE1
  4088                           postinc2	equ	0xFDE
  4089                           postdec2	equ	0xFDD
  4090                           fsr2h	equ	0xFDA
  4091                           fsr2l	equ	0xFD9
  4092                           status	equ	0xFD8
  4093                           
  4094 ;; *************** function ___ftadd *****************
  4095 ;; Defined at:
  4096 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  f1              3    6[BANK0 ] float 
  4099 ;;  f2              3    9[BANK0 ] float 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  exp1            1   17[BANK0 ] unsigned char 
  4102 ;;  exp2            1   16[BANK0 ] unsigned char 
  4103 ;;  sign            1   15[BANK0 ] unsigned char 
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  3    6[BANK0 ] float 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2, status,0, cstack
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4113 ;;      Params:         0       6       0       0       0       0       0
  4114 ;;      Locals:         0       3       0       0       0       0       0
  4115 ;;      Temps:          0       3       0       0       0       0       0
  4116 ;;      Totals:         0      12       0       0       0       0       0
  4117 ;;Total ram usage:       12 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    5
  4120 ;; This function calls:
  4121 ;;		___ftpack
  4122 ;; This function is called by:
  4123 ;;		_Temp_Filter
  4124 ;;		_Temp_Convert
  4125 ;;		_Current_Fault
  4126 ;;		_Current_Filter
  4127 ;;		___ftsub
  4128 ;;		_log
  4129 ;;		_eval_poly
  4130 ;;		_Battery_Filter
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text23
  4135  000BCA                     __ptext23:
  4136                           	opt stack 0
  4137  000BCA                     ___ftadd:
  4138                           	opt stack 22
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;incstack = 0
  4142  000BCA  0100               	movlb	0	; () banked
  4143  000BCC  C0CF  F0D3         	movff	___ftadd@f1+2,??___ftadd
  4144  000BD0  0100               	movlb	0	; () banked
  4145  000BD2  6BD4               	clrf	(??___ftadd+1)& (0+255),b
  4146  000BD4  6BD5               	clrf	(??___ftadd+2)& (0+255),b
  4147  000BD6  0100               	movlb	0	; () banked
  4148  000BD8  35CE               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4149  000BDA  0100               	movlb	0	; () banked
  4150  000BDC  37D3               	rlcf	??___ftadd& (0+255),f,b
  4151  000BDE  E301               	bnc	u2561
  4152  000BE0  81D4               	bsf	(??___ftadd+1)& (0+255),0,b
  4153  000BE2                     u2561:
  4154  000BE2  0100               	movlb	0	; () banked
  4155  000BE4  51D3               	movf	??___ftadd& (0+255),w,b
  4156  000BE6  0100               	movlb	0	; () banked
  4157  000BE8  6FD8               	movwf	___ftadd@exp1& (0+255),b
  4158  000BEA  0100               	movlb	0	; () banked
  4159  000BEC  C0D2  F0D3         	movff	___ftadd@f2+2,??___ftadd
  4160  000BF0  0100               	movlb	0	; () banked
  4161  000BF2  6BD4               	clrf	(??___ftadd+1)& (0+255),b
  4162  000BF4  6BD5               	clrf	(??___ftadd+2)& (0+255),b
  4163  000BF6  0100               	movlb	0	; () banked
  4164  000BF8  35D1               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4165  000BFA  0100               	movlb	0	; () banked
  4166  000BFC  37D3               	rlcf	??___ftadd& (0+255),f,b
  4167  000BFE  E301               	bnc	u2571
  4168  000C00  81D4               	bsf	(??___ftadd+1)& (0+255),0,b
  4169  000C02                     u2571:
  4170  000C02  0100               	movlb	0	; () banked
  4171  000C04  51D3               	movf	??___ftadd& (0+255),w,b
  4172  000C06  0100               	movlb	0	; () banked
  4173  000C08  6FD7               	movwf	___ftadd@exp2& (0+255),b
  4174                           
  4175                           ; BSR set to: 0
  4176  000C0A  0100               	movlb	0	; () banked
  4177  000C0C  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4178  000C0E  B4D8               	btfsc	status,2,c
  4179  000C10  D012               	goto	l902
  4180                           
  4181                           ; BSR set to: 0
  4182  000C12  0100               	movlb	0	; () banked
  4183  000C14  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4184  000C16  0100               	movlb	0	; () banked
  4185  000C18  5DD8               	subwf	___ftadd@exp1& (0+255),w,b
  4186  000C1A  B0D8               	btfsc	status,0,c
  4187  000C1C  D013               	goto	l3286
  4188                           
  4189                           ; BSR set to: 0
  4190  000C1E  0100               	movlb	0	; () banked
  4191  000C20  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4192  000C22  0800               	sublw	0
  4193  000C24  0100               	movlb	0	; () banked
  4194  000C26  25D7               	addwf	___ftadd@exp2& (0+255),w,b
  4195  000C28  0100               	movlb	0	; () banked
  4196  000C2A  6FD3               	movwf	??___ftadd& (0+255),b
  4197  000C2C  0E19               	movlw	25
  4198  000C2E  0100               	movlb	0	; () banked
  4199  000C30  5DD3               	subwf	??___ftadd& (0+255),w,b
  4200  000C32  A0D8               	btfss	status,0,c
  4201  000C34  D007               	goto	l3286
  4202  000C36                     l902:
  4203                           
  4204                           ; BSR set to: 0
  4205  000C36  C0D0  F0CD         	movff	___ftadd@f2,?___ftadd
  4206  000C3A  C0D1  F0CE         	movff	___ftadd@f2+1,?___ftadd+1
  4207  000C3E  C0D2  F0CF         	movff	___ftadd@f2+2,?___ftadd+2
  4208  000C42  0012               	return	
  4209  000C44                     l3286:
  4210                           
  4211                           ; BSR set to: 0
  4212  000C44  0100               	movlb	0	; () banked
  4213  000C46  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4214  000C48  B4D8               	btfsc	status,2,c
  4215  000C4A  D012               	goto	l906
  4216                           
  4217                           ; BSR set to: 0
  4218  000C4C  0100               	movlb	0	; () banked
  4219  000C4E  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4220  000C50  0100               	movlb	0	; () banked
  4221  000C52  5DD7               	subwf	___ftadd@exp2& (0+255),w,b
  4222  000C54  B0D8               	btfsc	status,0,c
  4223  000C56  D013               	goto	l3292
  4224                           
  4225                           ; BSR set to: 0
  4226  000C58  0100               	movlb	0	; () banked
  4227  000C5A  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4228  000C5C  0800               	sublw	0
  4229  000C5E  0100               	movlb	0	; () banked
  4230  000C60  25D8               	addwf	___ftadd@exp1& (0+255),w,b
  4231  000C62  0100               	movlb	0	; () banked
  4232  000C64  6FD3               	movwf	??___ftadd& (0+255),b
  4233  000C66  0E19               	movlw	25
  4234  000C68  0100               	movlb	0	; () banked
  4235  000C6A  5DD3               	subwf	??___ftadd& (0+255),w,b
  4236  000C6C  A0D8               	btfss	status,0,c
  4237  000C6E  D007               	goto	l3292
  4238  000C70                     l906:
  4239                           
  4240                           ; BSR set to: 0
  4241  000C70  C0CD  F0CD         	movff	___ftadd@f1,?___ftadd
  4242  000C74  C0CE  F0CE         	movff	___ftadd@f1+1,?___ftadd+1
  4243  000C78  C0CF  F0CF         	movff	___ftadd@f1+2,?___ftadd+2
  4244  000C7C  0012               	return	
  4245  000C7E                     l3292:
  4246                           
  4247                           ; BSR set to: 0
  4248  000C7E  0E06               	movlw	6
  4249  000C80  0100               	movlb	0	; () banked
  4250  000C82  6FD6               	movwf	___ftadd@sign& (0+255),b
  4251                           
  4252                           ; BSR set to: 0
  4253  000C84  0100               	movlb	0	; () banked
  4254  000C86  AFCF               	btfss	(___ftadd@f1+2)& (0+255),7,b
  4255  000C88  D002               	goto	l3298
  4256                           
  4257                           ; BSR set to: 0
  4258  000C8A  0100               	movlb	0	; () banked
  4259  000C8C  8FD6               	bsf	___ftadd@sign& (0+255),7,b
  4260  000C8E                     l3298:
  4261                           
  4262                           ; BSR set to: 0
  4263  000C8E  0100               	movlb	0	; () banked
  4264  000C90  AFD2               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4265  000C92  D002               	goto	l908
  4266                           
  4267                           ; BSR set to: 0
  4268  000C94  0100               	movlb	0	; () banked
  4269  000C96  8DD6               	bsf	___ftadd@sign& (0+255),6,b
  4270  000C98                     l908:
  4271                           
  4272                           ; BSR set to: 0
  4273  000C98  0100               	movlb	0	; () banked
  4274  000C9A  8FCE               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4275                           
  4276                           ; BSR set to: 0
  4277  000C9C  0EFF               	movlw	255
  4278  000C9E  0100               	movlb	0	; () banked
  4279  000CA0  17CD               	andwf	___ftadd@f1& (0+255),f,b
  4280  000CA2  0EFF               	movlw	255
  4281  000CA4  0100               	movlb	0	; () banked
  4282  000CA6  17CE               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4283  000CA8  0E00               	movlw	0
  4284  000CAA  0100               	movlb	0	; () banked
  4285  000CAC  17CF               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4286  000CAE  0100               	movlb	0	; () banked
  4287  000CB0  8FD1               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4288                           
  4289                           ; BSR set to: 0
  4290  000CB2  0EFF               	movlw	255
  4291  000CB4  0100               	movlb	0	; () banked
  4292  000CB6  17D0               	andwf	___ftadd@f2& (0+255),f,b
  4293  000CB8  0EFF               	movlw	255
  4294  000CBA  0100               	movlb	0	; () banked
  4295  000CBC  17D1               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4296  000CBE  0E00               	movlw	0
  4297  000CC0  0100               	movlb	0	; () banked
  4298  000CC2  17D2               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4299                           
  4300                           ; BSR set to: 0
  4301  000CC4  0100               	movlb	0	; () banked
  4302  000CC6  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4303  000CC8  0100               	movlb	0	; () banked
  4304  000CCA  5DD8               	subwf	___ftadd@exp1& (0+255),w,b
  4305  000CCC  B0D8               	btfsc	status,0,c
  4306  000CCE  D02A               	goto	l3318
  4307  000CD0                     l3308:
  4308                           
  4309                           ; BSR set to: 0
  4310  000CD0  0100               	movlb	0	; () banked
  4311  000CD2  90D8               	bcf	status,0,c
  4312  000CD4  0100               	movlb	0	; () banked
  4313  000CD6  37D0               	rlcf	___ftadd@f2& (0+255),f,b
  4314  000CD8  0100               	movlb	0	; () banked
  4315  000CDA  37D1               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4316  000CDC  0100               	movlb	0	; () banked
  4317  000CDE  37D2               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4318  000CE0  0100               	movlb	0	; () banked
  4319  000CE2  07D7               	decf	___ftadd@exp2& (0+255),f,b
  4320                           
  4321                           ; BSR set to: 0
  4322  000CE4  0100               	movlb	0	; () banked
  4323  000CE6  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4324  000CE8  0100               	movlb	0	; () banked
  4325  000CEA  19D8               	xorwf	___ftadd@exp1& (0+255),w,b
  4326  000CEC  B4D8               	btfsc	status,2,c
  4327  000CEE  D014               	goto	l3316
  4328                           
  4329                           ; BSR set to: 0
  4330  000CF0  0100               	movlb	0	; () banked
  4331  000CF2  07D6               	decf	___ftadd@sign& (0+255),f,b
  4332  000CF4  C0D6  F0D3         	movff	___ftadd@sign,??___ftadd
  4333  000CF8  0E07               	movlw	7
  4334  000CFA  0100               	movlb	0	; () banked
  4335  000CFC  17D3               	andwf	??___ftadd& (0+255),f,b
  4336  000CFE  B4D8               	btfsc	status,2,c
  4337  000D00  D00B               	goto	l3316
  4338  000D02  D7E6               	goto	l3308
  4339  000D04                     l3314:
  4340                           
  4341                           ; BSR set to: 0
  4342  000D04  0100               	movlb	0	; () banked
  4343  000D06  90D8               	bcf	status,0,c
  4344  000D08  0100               	movlb	0	; () banked
  4345  000D0A  33CF               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4346  000D0C  0100               	movlb	0	; () banked
  4347  000D0E  33CE               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4348  000D10  0100               	movlb	0	; () banked
  4349  000D12  33CD               	rrcf	___ftadd@f1& (0+255),f,b
  4350  000D14  0100               	movlb	0	; () banked
  4351  000D16  2BD8               	incf	___ftadd@exp1& (0+255),f,b
  4352  000D18                     l3316:
  4353                           
  4354                           ; BSR set to: 0
  4355  000D18  0100               	movlb	0	; () banked
  4356  000D1A  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4357  000D1C  0100               	movlb	0	; () banked
  4358  000D1E  63D8               	cpfseq	___ftadd@exp1& (0+255),b
  4359  000D20  D7F1               	goto	l3314
  4360  000D22  D02F               	goto	l917
  4361  000D24                     l3318:
  4362                           
  4363                           ; BSR set to: 0
  4364  000D24  0100               	movlb	0	; () banked
  4365  000D26  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4366  000D28  0100               	movlb	0	; () banked
  4367  000D2A  5DD7               	subwf	___ftadd@exp2& (0+255),w,b
  4368  000D2C  B0D8               	btfsc	status,0,c
  4369  000D2E  D029               	goto	l917
  4370  000D30                     l3320:
  4371                           
  4372                           ; BSR set to: 0
  4373  000D30  0100               	movlb	0	; () banked
  4374  000D32  90D8               	bcf	status,0,c
  4375  000D34  0100               	movlb	0	; () banked
  4376  000D36  37CD               	rlcf	___ftadd@f1& (0+255),f,b
  4377  000D38  0100               	movlb	0	; () banked
  4378  000D3A  37CE               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4379  000D3C  0100               	movlb	0	; () banked
  4380  000D3E  37CF               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4381  000D40  0100               	movlb	0	; () banked
  4382  000D42  07D8               	decf	___ftadd@exp1& (0+255),f,b
  4383                           
  4384                           ; BSR set to: 0
  4385  000D44  0100               	movlb	0	; () banked
  4386  000D46  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4387  000D48  0100               	movlb	0	; () banked
  4388  000D4A  19D8               	xorwf	___ftadd@exp1& (0+255),w,b
  4389  000D4C  B4D8               	btfsc	status,2,c
  4390  000D4E  D014               	goto	l3328
  4391                           
  4392                           ; BSR set to: 0
  4393  000D50  0100               	movlb	0	; () banked
  4394  000D52  07D6               	decf	___ftadd@sign& (0+255),f,b
  4395  000D54  C0D6  F0D3         	movff	___ftadd@sign,??___ftadd
  4396  000D58  0E07               	movlw	7
  4397  000D5A  0100               	movlb	0	; () banked
  4398  000D5C  17D3               	andwf	??___ftadd& (0+255),f,b
  4399  000D5E  B4D8               	btfsc	status,2,c
  4400  000D60  D00B               	goto	l3328
  4401  000D62  D7E6               	goto	l3320
  4402  000D64                     l3326:
  4403                           
  4404                           ; BSR set to: 0
  4405  000D64  0100               	movlb	0	; () banked
  4406  000D66  90D8               	bcf	status,0,c
  4407  000D68  0100               	movlb	0	; () banked
  4408  000D6A  33D2               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4409  000D6C  0100               	movlb	0	; () banked
  4410  000D6E  33D1               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4411  000D70  0100               	movlb	0	; () banked
  4412  000D72  33D0               	rrcf	___ftadd@f2& (0+255),f,b
  4413  000D74  0100               	movlb	0	; () banked
  4414  000D76  2BD7               	incf	___ftadd@exp2& (0+255),f,b
  4415  000D78                     l3328:
  4416                           
  4417                           ; BSR set to: 0
  4418  000D78  0100               	movlb	0	; () banked
  4419  000D7A  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4420  000D7C  0100               	movlb	0	; () banked
  4421  000D7E  63D8               	cpfseq	___ftadd@exp1& (0+255),b
  4422  000D80  D7F1               	goto	l3326
  4423  000D82                     l917:
  4424                           
  4425                           ; BSR set to: 0
  4426  000D82  0100               	movlb	0	; () banked
  4427  000D84  AFD6               	btfss	___ftadd@sign& (0+255),7,b
  4428  000D86  D012               	goto	l926
  4429                           
  4430                           ; BSR set to: 0
  4431  000D88  0EFF               	movlw	255
  4432  000D8A  0100               	movlb	0	; () banked
  4433  000D8C  1BCD               	xorwf	___ftadd@f1& (0+255),f,b
  4434  000D8E  0EFF               	movlw	255
  4435  000D90  0100               	movlb	0	; () banked
  4436  000D92  1BCE               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4437  000D94  0EFF               	movlw	255
  4438  000D96  0100               	movlb	0	; () banked
  4439  000D98  1BCF               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4440  000D9A  0E01               	movlw	1
  4441  000D9C  0100               	movlb	0	; () banked
  4442  000D9E  27CD               	addwf	___ftadd@f1& (0+255),f,b
  4443  000DA0  0E00               	movlw	0
  4444  000DA2  0100               	movlb	0	; () banked
  4445  000DA4  23CE               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4446  000DA6  0E00               	movlw	0
  4447  000DA8  0100               	movlb	0	; () banked
  4448  000DAA  23CF               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4449  000DAC                     l926:
  4450                           
  4451                           ; BSR set to: 0
  4452  000DAC  0100               	movlb	0	; () banked
  4453  000DAE  ADD6               	btfss	___ftadd@sign& (0+255),6,b
  4454  000DB0  D012               	goto	l3334
  4455                           
  4456                           ; BSR set to: 0
  4457  000DB2  0EFF               	movlw	255
  4458  000DB4  0100               	movlb	0	; () banked
  4459  000DB6  1BD0               	xorwf	___ftadd@f2& (0+255),f,b
  4460  000DB8  0EFF               	movlw	255
  4461  000DBA  0100               	movlb	0	; () banked
  4462  000DBC  1BD1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4463  000DBE  0EFF               	movlw	255
  4464  000DC0  0100               	movlb	0	; () banked
  4465  000DC2  1BD2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4466  000DC4  0E01               	movlw	1
  4467  000DC6  0100               	movlb	0	; () banked
  4468  000DC8  27D0               	addwf	___ftadd@f2& (0+255),f,b
  4469  000DCA  0E00               	movlw	0
  4470  000DCC  0100               	movlb	0	; () banked
  4471  000DCE  23D1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4472  000DD0  0E00               	movlw	0
  4473  000DD2  0100               	movlb	0	; () banked
  4474  000DD4  23D2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4475  000DD6                     l3334:
  4476                           
  4477                           ; BSR set to: 0
  4478  000DD6  0E00               	movlw	0
  4479  000DD8  0100               	movlb	0	; () banked
  4480  000DDA  6FD6               	movwf	___ftadd@sign& (0+255),b
  4481                           
  4482                           ; BSR set to: 0
  4483  000DDC  0100               	movlb	0	; () banked
  4484  000DDE  51CD               	movf	___ftadd@f1& (0+255),w,b
  4485  000DE0  0100               	movlb	0	; () banked
  4486  000DE2  27D0               	addwf	___ftadd@f2& (0+255),f,b
  4487  000DE4  0100               	movlb	0	; () banked
  4488  000DE6  51CE               	movf	(___ftadd@f1+1)& (0+255),w,b
  4489  000DE8  0100               	movlb	0	; () banked
  4490  000DEA  23D1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4491  000DEC  0100               	movlb	0	; () banked
  4492  000DEE  51CF               	movf	(___ftadd@f1+2)& (0+255),w,b
  4493  000DF0  0100               	movlb	0	; () banked
  4494  000DF2  23D2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4495                           
  4496                           ; BSR set to: 0
  4497  000DF4  0100               	movlb	0	; () banked
  4498  000DF6  AFD2               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4499  000DF8  D015               	goto	l3344
  4500                           
  4501                           ; BSR set to: 0
  4502  000DFA  0EFF               	movlw	255
  4503  000DFC  0100               	movlb	0	; () banked
  4504  000DFE  1BD0               	xorwf	___ftadd@f2& (0+255),f,b
  4505  000E00  0EFF               	movlw	255
  4506  000E02  0100               	movlb	0	; () banked
  4507  000E04  1BD1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4508  000E06  0EFF               	movlw	255
  4509  000E08  0100               	movlb	0	; () banked
  4510  000E0A  1BD2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4511  000E0C  0E01               	movlw	1
  4512  000E0E  0100               	movlb	0	; () banked
  4513  000E10  27D0               	addwf	___ftadd@f2& (0+255),f,b
  4514  000E12  0E00               	movlw	0
  4515  000E14  0100               	movlb	0	; () banked
  4516  000E16  23D1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4517  000E18  0E00               	movlw	0
  4518  000E1A  0100               	movlb	0	; () banked
  4519  000E1C  23D2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4520                           
  4521                           ; BSR set to: 0
  4522  000E1E  0E01               	movlw	1
  4523  000E20  0100               	movlb	0	; () banked
  4524  000E22  6FD6               	movwf	___ftadd@sign& (0+255),b
  4525  000E24                     l3344:
  4526                           
  4527                           ; BSR set to: 0
  4528  000E24  C0D0  F017         	movff	___ftadd@f2,___ftpack@arg
  4529  000E28  C0D1  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  4530  000E2C  C0D2  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  4531  000E30  C0D8  F01A         	movff	___ftadd@exp1,___ftpack@exp
  4532  000E34  C0D6  F01B         	movff	___ftadd@sign,___ftpack@sign
  4533  000E38  ECF2  F00E         	call	___ftpack	;wreg free
  4534  000E3C  C017  F0CD         	movff	?___ftpack,?___ftadd
  4535  000E40  C018  F0CE         	movff	?___ftpack+1,?___ftadd+1
  4536  000E44  C019  F0CF         	movff	?___ftpack+2,?___ftadd+2
  4537  000E48  0012               	return	
  4538  000E4A                     __end_of___ftadd:
  4539                           	opt stack 0
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodl	equ	0xFF3
  4545                           intcon	equ	0xFF2
  4546                           intcon2	equ	0xFF1
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           postinc1	equ	0xFE6
  4550                           postdec1	equ	0xFE5
  4551                           fsr1h	equ	0xFE2
  4552                           fsr1l	equ	0xFE1
  4553                           postinc2	equ	0xFDE
  4554                           postdec2	equ	0xFDD
  4555                           fsr2h	equ	0xFDA
  4556                           fsr2l	equ	0xFD9
  4557                           status	equ	0xFD8
  4558                           
  4559 ;; *************** function _Battery_Fault *****************
  4560 ;; Defined at:
  4561 ;;		line 11 in file "Battery.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  i               2   46[COMRAM] int 
  4566 ;;  fault           1   45[COMRAM] unsigned char 
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      unsigned char 
  4569 ;; Registers used:
  4570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4576 ;;      Params:         0       0       0       0       0       0       0
  4577 ;;      Locals:         3       0       0       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0
  4579 ;;      Totals:         3       0       0       0       0       0       0
  4580 ;;Total ram usage:        3 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    5
  4583 ;; This function calls:
  4584 ;;		___ftge
  4585 ;;		___wmul
  4586 ;; This function is called by:
  4587 ;;		_main
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text24
  4592  001D36                     __ptext24:
  4593                           	opt stack 0
  4594  001D36                     _Battery_Fault:
  4595                           	opt stack 25
  4596                           
  4597                           ;Battery.c: 13: char fault = 0;
  4598                           
  4599                           ;incstack = 0
  4600  001D36  0E00               	movlw	0
  4601  001D38  6E2E               	movwf	Battery_Fault@fault,c
  4602                           
  4603                           ;Battery.c: 14: for(int i = 0;i<9;i++)
  4604  001D3A  0E00               	movlw	0
  4605  001D3C  6E30               	movwf	Battery_Fault@i+1,c
  4606  001D3E  0E00               	movlw	0
  4607  001D40  6E2F               	movwf	Battery_Fault@i,c
  4608  001D42  5030               	movf	Battery_Fault@i+1,w,c
  4609  001D44  0A80               	xorlw	128
  4610  001D46  0F80               	addlw	-128
  4611  001D48  0E09               	movlw	9
  4612  001D4A  B4D8               	btfsc	status,2,c
  4613  001D4C  5C2F               	subwf	Battery_Fault@i,w,c
  4614  001D4E  B0D8               	btfsc	status,0,c
  4615  001D50  0012               	return	
  4616                           
  4617                           ;Battery.c: 15: {
  4618                           ;Battery.c: 16: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  4619  001D52  0E00               	movlw	0
  4620  001D54  6E25               	movwf	___ftge@ff1,c
  4621  001D56  0E40               	movlw	64
  4622  001D58  6E26               	movwf	___ftge@ff1+1,c
  4623  001D5A  0E40               	movlw	64
  4624  001D5C  6E27               	movwf	___ftge@ff1+2,c
  4625  001D5E  C02F  F01F         	movff	Battery_Fault@i,___wmul@multiplier
  4626  001D62  C030  F020         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  4627  001D66  0E00               	movlw	0
  4628  001D68  6E22               	movwf	___wmul@multiplicand+1,c
  4629  001D6A  0E03               	movlw	3
  4630  001D6C  6E21               	movwf	___wmul@multiplicand,c
  4631  001D6E  EC51  F011         	call	___wmul	;wreg free
  4632  001D72  0100               	movlb	0	; () banked
  4633  001D74  0E60               	movlw	low _Battery_Volt
  4634  001D76  241F               	addwf	?___wmul,w,c
  4635  001D78  6ED9               	movwf	fsr2l,c
  4636  001D7A  0100               	movlb	0	; () banked
  4637  001D7C  0E00               	movlw	high _Battery_Volt
  4638  001D7E  2020               	addwfc	?___wmul+1,w,c
  4639  001D80  6EDA               	movwf	fsr2h,c
  4640  001D82  CFDE F028          	movff	postinc2,___ftge@ff2
  4641  001D86  CFDE F029          	movff	postinc2,___ftge@ff2+1
  4642  001D8A  CFDD F02A          	movff	postdec2,___ftge@ff2+2
  4643  001D8E  ECE1  F00F         	call	___ftge	;wreg free
  4644  001D92  B0D8               	btfsc	status,0,c
  4645  001D94  D024               	goto	l2912
  4646  001D96  C02F  F01F         	movff	Battery_Fault@i,___wmul@multiplier
  4647  001D9A  C030  F020         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  4648  001D9E  0E00               	movlw	0
  4649  001DA0  6E22               	movwf	___wmul@multiplicand+1,c
  4650  001DA2  0E03               	movlw	3
  4651  001DA4  6E21               	movwf	___wmul@multiplicand,c
  4652  001DA6  EC51  F011         	call	___wmul	;wreg free
  4653  001DAA  0100               	movlb	0	; () banked
  4654  001DAC  0E60               	movlw	low _Battery_Volt
  4655  001DAE  241F               	addwf	?___wmul,w,c
  4656  001DB0  6ED9               	movwf	fsr2l,c
  4657  001DB2  0100               	movlb	0	; () banked
  4658  001DB4  0E00               	movlw	high _Battery_Volt
  4659  001DB6  2020               	addwfc	?___wmul+1,w,c
  4660  001DB8  6EDA               	movwf	fsr2h,c
  4661  001DBA  CFDE F025          	movff	postinc2,___ftge@ff1
  4662  001DBE  CFDE F026          	movff	postinc2,___ftge@ff1+1
  4663  001DC2  CFDD F027          	movff	postdec2,___ftge@ff1+2
  4664  001DC6  0EB8               	movlw	184
  4665  001DC8  6E28               	movwf	___ftge@ff2,c
  4666  001DCA  0E86               	movlw	134
  4667  001DCC  6E29               	movwf	___ftge@ff2+1,c
  4668  001DCE  0E40               	movlw	64
  4669  001DD0  6E2A               	movwf	___ftge@ff2+2,c
  4670  001DD2  ECE1  F00F         	call	___ftge	;wreg free
  4671  001DD6  B0D8               	btfsc	status,0,c
  4672  001DD8  D002               	goto	l2912
  4673                           
  4674                           ;Battery.c: 17: {
  4675                           ;Battery.c: 18: fault = 1;
  4676  001DDA  0E01               	movlw	1
  4677  001DDC  6E2E               	movwf	Battery_Fault@fault,c
  4678  001DDE                     l2912:
  4679  001DDE  4A2F               	infsnz	Battery_Fault@i,f,c
  4680  001DE0  2A30               	incf	Battery_Fault@i+1,f,c
  4681  001DE2  D7AF               	goto	L13
  4682  001DE4                     __end_of_Battery_Fault:
  4683                           	opt stack 0
  4684                           tblptru	equ	0xFF8
  4685                           tblptrh	equ	0xFF7
  4686                           tblptrl	equ	0xFF6
  4687                           tablat	equ	0xFF5
  4688                           prodl	equ	0xFF3
  4689                           intcon	equ	0xFF2
  4690                           intcon2	equ	0xFF1
  4691                           postinc0	equ	0xFEE
  4692                           wreg	equ	0xFE8
  4693                           postinc1	equ	0xFE6
  4694                           postdec1	equ	0xFE5
  4695                           fsr1h	equ	0xFE2
  4696                           fsr1l	equ	0xFE1
  4697                           postinc2	equ	0xFDE
  4698                           postdec2	equ	0xFDD
  4699                           fsr2h	equ	0xFDA
  4700                           fsr2l	equ	0xFD9
  4701                           status	equ	0xFD8
  4702                           
  4703 ;; *************** function ___ftge *****************
  4704 ;; Defined at:
  4705 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  ff1             3   36[COMRAM] float 
  4708 ;;  ff2             3   39[COMRAM] float 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;		None
  4711 ;; Return value:  Size  Location     Type
  4712 ;;		None               void
  4713 ;; Registers used:
  4714 ;;		wreg, status,2, status,0
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4720 ;;      Params:         6       0       0       0       0       0       0
  4721 ;;      Locals:         0       0       0       0       0       0       0
  4722 ;;      Temps:          3       0       0       0       0       0       0
  4723 ;;      Totals:         9       0       0       0       0       0       0
  4724 ;;Total ram usage:        9 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    4
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_Battery_Fault
  4731 ;;		_Temp_Fault
  4732 ;;		_Current_Fault
  4733 ;;		_RunBypas
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text25
  4738  001FC2                     __ptext25:
  4739                           	opt stack 0
  4740  001FC2                     ___ftge:
  4741                           	opt stack 25
  4742                           
  4743                           ;incstack = 0
  4744  001FC2  AE27               	btfss	___ftge@ff1+2,7,c
  4745  001FC4  D016               	goto	l2692
  4746  001FC6  C025  F02B         	movff	___ftge@ff1,??___ftge
  4747  001FCA  C026  F02C         	movff	___ftge@ff1+1,??___ftge+1
  4748  001FCE  C027  F02D         	movff	___ftge@ff1+2,??___ftge+2
  4749  001FD2  1E2B               	comf	??___ftge,f,c
  4750  001FD4  1E2C               	comf	??___ftge+1,f,c
  4751  001FD6  1E2D               	comf	??___ftge+2,f,c
  4752  001FD8  2A2B               	incf	??___ftge,f,c
  4753  001FDA  0E00               	movlw	0
  4754  001FDC  222C               	addwfc	??___ftge+1,f,c
  4755  001FDE  222D               	addwfc	??___ftge+2,f,c
  4756  001FE0  0E00               	movlw	0
  4757  001FE2  242B               	addwf	??___ftge,w,c
  4758  001FE4  6E25               	movwf	___ftge@ff1,c
  4759  001FE6  0E00               	movlw	0
  4760  001FE8  202C               	addwfc	??___ftge+1,w,c
  4761  001FEA  6E26               	movwf	___ftge@ff1+1,c
  4762  001FEC  0E80               	movlw	128
  4763  001FEE  202D               	addwfc	??___ftge+2,w,c
  4764  001FF0  6E27               	movwf	___ftge@ff1+2,c
  4765  001FF2                     l2692:
  4766  001FF2  AE2A               	btfss	___ftge@ff2+2,7,c
  4767  001FF4  D016               	goto	l2696
  4768  001FF6  C028  F02B         	movff	___ftge@ff2,??___ftge
  4769  001FFA  C029  F02C         	movff	___ftge@ff2+1,??___ftge+1
  4770  001FFE  C02A  F02D         	movff	___ftge@ff2+2,??___ftge+2
  4771  002002  1E2B               	comf	??___ftge,f,c
  4772  002004  1E2C               	comf	??___ftge+1,f,c
  4773  002006  1E2D               	comf	??___ftge+2,f,c
  4774  002008  2A2B               	incf	??___ftge,f,c
  4775  00200A  0E00               	movlw	0
  4776  00200C  222C               	addwfc	??___ftge+1,f,c
  4777  00200E  222D               	addwfc	??___ftge+2,f,c
  4778  002010  0E00               	movlw	0
  4779  002012  242B               	addwf	??___ftge,w,c
  4780  002014  6E28               	movwf	___ftge@ff2,c
  4781  002016  0E00               	movlw	0
  4782  002018  202C               	addwfc	??___ftge+1,w,c
  4783  00201A  6E29               	movwf	___ftge@ff2+1,c
  4784  00201C  0E80               	movlw	128
  4785  00201E  202D               	addwfc	??___ftge+2,w,c
  4786  002020  6E2A               	movwf	___ftge@ff2+2,c
  4787  002022                     l2696:
  4788  002022  0E00               	movlw	0
  4789  002024  1A25               	xorwf	___ftge@ff1,f,c
  4790  002026  0E00               	movlw	0
  4791  002028  1A26               	xorwf	___ftge@ff1+1,f,c
  4792  00202A  0E80               	movlw	128
  4793  00202C  1A27               	xorwf	___ftge@ff1+2,f,c
  4794  00202E  0E00               	movlw	0
  4795  002030  1A28               	xorwf	___ftge@ff2,f,c
  4796  002032  0E00               	movlw	0
  4797  002034  1A29               	xorwf	___ftge@ff2+1,f,c
  4798  002036  0E80               	movlw	128
  4799  002038  1A2A               	xorwf	___ftge@ff2+2,f,c
  4800  00203A  5028               	movf	___ftge@ff2,w,c
  4801  00203C  5C25               	subwf	___ftge@ff1,w,c
  4802  00203E  5029               	movf	___ftge@ff2+1,w,c
  4803  002040  5826               	subwfb	___ftge@ff1+1,w,c
  4804  002042  502A               	movf	___ftge@ff2+2,w,c
  4805  002044  5827               	subwfb	___ftge@ff1+2,w,c
  4806  002046  B0D8               	btfsc	status,0,c
  4807  002048  D002               	goto	l2702
  4808  00204A  90D8               	bcf	status,0,c
  4809  00204C  0012               	return	
  4810  00204E                     l2702:
  4811  00204E  80D8               	bsf	status,0,c
  4812  002050  0012               	return	
  4813  002052                     __end_of___ftge:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodl	equ	0xFF3
  4820                           intcon	equ	0xFF2
  4821                           intcon2	equ	0xFF1
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           postinc1	equ	0xFE6
  4825                           postdec1	equ	0xFE5
  4826                           fsr1h	equ	0xFE2
  4827                           fsr1l	equ	0xFE1
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _Battery_Convert *****************
  4835 ;; Defined at:
  4836 ;;		line 47 in file "Battery.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  x               2    8[BANK0 ] int 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;		None               void
  4843 ;; Registers used:
  4844 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4850 ;;      Params:         0       0       0       0       0       0       0
  4851 ;;      Locals:         0       2       0       0       0       0       0
  4852 ;;      Temps:          0       2       0       0       0       0       0
  4853 ;;      Totals:         0       4       0       0       0       0       0
  4854 ;;Total ram usage:        4 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    6
  4857 ;; This function calls:
  4858 ;;		___awtoft
  4859 ;;		___ftdiv
  4860 ;;		___ftmul
  4861 ;;		___wmul
  4862 ;; This function is called by:
  4863 ;;		_main
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           	psect	text26
  4868  001BC6                     __ptext26:
  4869                           	opt stack 0
  4870  001BC6                     _Battery_Convert:
  4871                           	opt stack 24
  4872                           
  4873                           ;Battery.c: 49: int x;
  4874                           ;Battery.c: 50: for(x = 0; x < 7; x++)
  4875                           
  4876                           ;incstack = 0
  4877  001BC6  0E00               	movlw	0
  4878  001BC8  0100               	movlb	0	; () banked
  4879  001BCA  6FD0               	movwf	(Battery_Convert@x+1)& (0+255),b
  4880  001BCC  0E00               	movlw	0
  4881  001BCE  0100               	movlb	0	; () banked
  4882  001BD0  6FCF               	movwf	Battery_Convert@x& (0+255),b
  4883  001BD2                     
  4884                           ; BSR set to: 0
  4885  001BD2  0100               	movlb	0	; () banked
  4886  001BD4  51D0               	movf	(Battery_Convert@x+1)& (0+255),w,b
  4887  001BD6  0A80               	xorlw	128
  4888  001BD8  0F80               	addlw	-128
  4889  001BDA  0E07               	movlw	7
  4890  001BDC  B4D8               	btfsc	status,2,c
  4891  001BDE  5DCF               	subwf	Battery_Convert@x& (0+255),w,b
  4892  001BE0  B0D8               	btfsc	status,0,c
  4893  001BE2  0012               	return	
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;Battery.c: 51: {
  4897                           ;Battery.c: 52: Battery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0);
  4898                           
  4899                           ; BSR set to: 0
  4900                           
  4901                           ; BSR set to: 0
  4902  001BE4  C0CF  F01F         	movff	Battery_Convert@x,___wmul@multiplier
  4903  001BE8  C0D0  F020         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  4904  001BEC  0E00               	movlw	0
  4905  001BEE  6E22               	movwf	___wmul@multiplicand+1,c
  4906  001BF0  0E03               	movlw	3
  4907  001BF2  6E21               	movwf	___wmul@multiplicand,c
  4908  001BF4  EC51  F011         	call	___wmul	;wreg free
  4909  001BF8  0100               	movlb	0	; () banked
  4910  001BFA  0E60               	movlw	low _Battery_Volt
  4911  001BFC  241F               	addwf	?___wmul,w,c
  4912  001BFE  6ED9               	movwf	fsr2l,c
  4913  001C00  0100               	movlb	0	; () banked
  4914  001C02  0E00               	movlw	high _Battery_Volt
  4915  001C04  2020               	addwfc	?___wmul+1,w,c
  4916  001C06  6EDA               	movwf	fsr2h,c
  4917  001C08  0E00               	movlw	0
  4918  001C0A  6E2C               	movwf	___ftdiv@f2,c
  4919  001C0C  0E80               	movlw	128
  4920  001C0E  6E2D               	movwf	___ftdiv@f2+1,c
  4921  001C10  0E44               	movlw	68
  4922  001C12  6E2E               	movwf	___ftdiv@f2+2,c
  4923  001C14  0E7E               	movlw	low _Battery_Adc
  4924  001C16  0100               	movlb	0	; () banked
  4925  001C18  6FCD               	movwf	??_Battery_Convert& (0+255),b
  4926  001C1A  0E00               	movlw	high _Battery_Adc
  4927  001C1C  6FCE               	movwf	(??_Battery_Convert+1)& (0+255),b
  4928  001C1E  90D8               	bcf	status,0,c
  4929  001C20  0100               	movlb	0	; () banked
  4930  001C22  35CF               	rlcf	Battery_Convert@x& (0+255),w,b
  4931  001C24  6EE1               	movwf	fsr1l,c
  4932  001C26  0100               	movlb	0	; () banked
  4933  001C28  35D0               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  4934  001C2A  6EE2               	movwf	fsr1h,c
  4935  001C2C  0100               	movlb	0	; () banked
  4936  001C2E  51CD               	movf	??_Battery_Convert& (0+255),w,b
  4937  001C30  26E1               	addwf	fsr1l,f,c
  4938  001C32  0100               	movlb	0	; () banked
  4939  001C34  51CE               	movf	(??_Battery_Convert+1)& (0+255),w,b
  4940  001C36  22E2               	addwfc	fsr1h,f,c
  4941  001C38  CFE6 F025          	movff	postinc1,___awtoft@c
  4942  001C3C  CFE5 F026          	movff	postdec1,___awtoft@c+1
  4943  001C40  ECAF  F010         	call	___awtoft	;wreg free
  4944  001C44  C025  F029         	movff	?___awtoft,___ftdiv@f1
  4945  001C48  C026  F02A         	movff	?___awtoft+1,___ftdiv@f1+1
  4946  001C4C  C027  F02B         	movff	?___awtoft+2,___ftdiv@f1+2
  4947  001C50  EC33  F00C         	call	___ftdiv	;wreg free
  4948  001C54  C029  F038         	movff	?___ftdiv,___ftmul@f1
  4949  001C58  C02A  F039         	movff	?___ftdiv+1,___ftmul@f1+1
  4950  001C5C  C02B  F03A         	movff	?___ftdiv+2,___ftmul@f1+2
  4951  001C60  0E00               	movlw	0
  4952  001C62  6E3B               	movwf	___ftmul@f2,c
  4953  001C64  0EA0               	movlw	160
  4954  001C66  6E3C               	movwf	___ftmul@f2+1,c
  4955  001C68  0E40               	movlw	64
  4956  001C6A  6E3D               	movwf	___ftmul@f2+2,c
  4957  001C6C  EC29  F00B         	call	___ftmul	;wreg free
  4958  001C70  C038  FFDE         	movff	?___ftmul,postinc2
  4959  001C74  C039  FFDE         	movff	?___ftmul+1,postinc2
  4960  001C78  C03A  FFDD         	movff	?___ftmul+2,postdec2
  4961  001C7C  52DD               	movf	postdec2,f,c
  4962  001C7E  0100               	movlb	0	; () banked
  4963  001C80  4BCF               	infsnz	Battery_Convert@x& (0+255),f,b
  4964  001C82  2BD0               	incf	(Battery_Convert@x+1)& (0+255),f,b
  4965  001C84  D7A6               	goto	L14
  4966  001C86                     __end_of_Battery_Convert:
  4967                           	opt stack 0
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodl	equ	0xFF3
  4973                           intcon	equ	0xFF2
  4974                           intcon2	equ	0xFF1
  4975                           postinc0	equ	0xFEE
  4976                           wreg	equ	0xFE8
  4977                           postinc1	equ	0xFE6
  4978                           postdec1	equ	0xFE5
  4979                           fsr1h	equ	0xFE2
  4980                           fsr1l	equ	0xFE1
  4981                           postinc2	equ	0xFDE
  4982                           postdec2	equ	0xFDD
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function ___wmul *****************
  4988 ;; Defined at:
  4989 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  multiplier      2   30[COMRAM] unsigned int 
  4992 ;;  multiplicand    2   32[COMRAM] unsigned int 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  product         2   34[COMRAM] unsigned int 
  4995 ;; Return value:  Size  Location     Type
  4996 ;;                  2   30[COMRAM] unsigned int 
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0, prodl, prodh
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5004 ;;      Params:         4       0       0       0       0       0       0
  5005 ;;      Locals:         2       0       0       0       0       0       0
  5006 ;;      Temps:          0       0       0       0       0       0       0
  5007 ;;      Totals:         6       0       0       0       0       0       0
  5008 ;;Total ram usage:        6 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    4
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_Battery_Fault
  5015 ;;		_Battery_Convert
  5016 ;;		_Battery_Get
  5017 ;;		_Temp_Fault
  5018 ;;		_Temp_Filter
  5019 ;;		_Temp_Convert
  5020 ;;		_Current_Fault
  5021 ;;		_Current_Filter
  5022 ;;		_Current_Convert
  5023 ;;		_eval_poly
  5024 ;;		_Battery_Filter
  5025 ;;		_Tempeture_Get
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text27
  5030  0022A2                     __ptext27:
  5031                           	opt stack 0
  5032  0022A2                     ___wmul:
  5033                           	opt stack 25
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;incstack = 0
  5037  0022A2  501F               	movf	___wmul@multiplier,w,c
  5038  0022A4  0221               	mulwf	___wmul@multiplicand,c
  5039  0022A6  CFF3 F023          	movff	prodl,___wmul@product
  5040  0022AA  CFF4 F024          	movff	prodh,___wmul@product+1
  5041  0022AE  501F               	movf	___wmul@multiplier,w,c
  5042  0022B0  0222               	mulwf	___wmul@multiplicand+1,c
  5043  0022B2  50F3               	movf	prodl,w,c
  5044  0022B4  2624               	addwf	___wmul@product+1,f,c
  5045  0022B6  5020               	movf	___wmul@multiplier+1,w,c
  5046  0022B8  0221               	mulwf	___wmul@multiplicand,c
  5047  0022BA  50F3               	movf	prodl,w,c
  5048  0022BC  2624               	addwf	___wmul@product+1,f,c
  5049  0022BE  C023  F01F         	movff	___wmul@product,?___wmul
  5050  0022C2  C024  F020         	movff	___wmul@product+1,?___wmul+1
  5051  0022C6  0012               	return	
  5052  0022C8                     __end_of___wmul:
  5053                           	opt stack 0
  5054                           tblptru	equ	0xFF8
  5055                           tblptrh	equ	0xFF7
  5056                           tblptrl	equ	0xFF6
  5057                           tablat	equ	0xFF5
  5058                           prodh	equ	0xFF4
  5059                           prodl	equ	0xFF3
  5060                           intcon	equ	0xFF2
  5061                           intcon2	equ	0xFF1
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           postinc1	equ	0xFE6
  5065                           postdec1	equ	0xFE5
  5066                           fsr1h	equ	0xFE2
  5067                           fsr1l	equ	0xFE1
  5068                           postinc2	equ	0xFDE
  5069                           postdec2	equ	0xFDD
  5070                           fsr2h	equ	0xFDA
  5071                           fsr2l	equ	0xFD9
  5072                           status	equ	0xFD8
  5073                           
  5074 ;; *************** function ___ftmul *****************
  5075 ;; Defined at:
  5076 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;  f1              3   55[COMRAM] float 
  5079 ;;  f2              3   58[COMRAM] float 
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  5082 ;;  sign            1    5[BANK0 ] unsigned char 
  5083 ;;  cntr            1    4[BANK0 ] unsigned char 
  5084 ;;  exp             1    0[BANK0 ] unsigned char 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  3   55[COMRAM] float 
  5087 ;; Registers used:
  5088 ;;		wreg, status,2, status,0, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5094 ;;      Params:         6       0       0       0       0       0       0
  5095 ;;      Locals:         0       6       0       0       0       0       0
  5096 ;;      Temps:          3       0       0       0       0       0       0
  5097 ;;      Totals:         9       6       0       0       0       0       0
  5098 ;;Total ram usage:       15 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    5
  5101 ;; This function calls:
  5102 ;;		___ftpack
  5103 ;; This function is called by:
  5104 ;;		_Battery_Convert
  5105 ;;		_Temp_Filter
  5106 ;;		_Temp_Convert
  5107 ;;		_Current_Filter
  5108 ;;		_log
  5109 ;;		_eval_poly
  5110 ;;		_Battery_Filter
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text28
  5115  001652                     __ptext28:
  5116                           	opt stack 0
  5117  001652                     ___ftmul:
  5118                           	opt stack 22
  5119                           
  5120                           ;incstack = 0
  5121  001652  C03A  F03E         	movff	___ftmul@f1+2,??___ftmul
  5122  001656  6A3F               	clrf	(??___ftmul+1)& (0+255),c
  5123  001658  6A40               	clrf	(??___ftmul+2)& (0+255),c
  5124  00165A  3439               	rlcf	___ftmul@f1+1,w,c
  5125  00165C  363E               	rlcf	??___ftmul& (0+255),f,c
  5126  00165E  E301               	bnc	u2771
  5127  001660  803F               	bsf	(??___ftmul+1)& (0+255),0,c
  5128  001662                     u2771:
  5129  001662  503E               	movf	??___ftmul,w,c
  5130  001664  0100               	movlb	0	; () banked
  5131  001666  6FC7               	movwf	___ftmul@exp& (0+255),b
  5132  001668  0100               	movlb	0	; () banked
  5133  00166A  67C7               	tstfsz	___ftmul@exp& (0+255),b
  5134  00166C  D007               	goto	l3354
  5135                           
  5136                           ; BSR set to: 0
  5137  00166E  0E00               	movlw	0
  5138  001670  6E38               	movwf	?___ftmul,c
  5139  001672  0E00               	movlw	0
  5140  001674  6E39               	movwf	?___ftmul+1,c
  5141  001676  0E00               	movlw	0
  5142  001678  6E3A               	movwf	?___ftmul+2,c
  5143  00167A  0012               	return	
  5144  00167C                     l3354:
  5145                           
  5146                           ; BSR set to: 0
  5147  00167C  C03D  F03E         	movff	___ftmul@f2+2,??___ftmul
  5148  001680  6A3F               	clrf	(??___ftmul+1)& (0+255),c
  5149  001682  6A40               	clrf	(??___ftmul+2)& (0+255),c
  5150  001684  343C               	rlcf	___ftmul@f2+1,w,c
  5151  001686  363E               	rlcf	??___ftmul& (0+255),f,c
  5152  001688  E301               	bnc	u2791
  5153  00168A  803F               	bsf	(??___ftmul+1)& (0+255),0,c
  5154  00168C                     u2791:
  5155  00168C  503E               	movf	??___ftmul,w,c
  5156  00168E  0100               	movlb	0	; () banked
  5157  001690  6FCC               	movwf	___ftmul@sign& (0+255),b
  5158  001692  0100               	movlb	0	; () banked
  5159  001694  67CC               	tstfsz	___ftmul@sign& (0+255),b
  5160  001696  D007               	goto	l3360
  5161                           
  5162                           ; BSR set to: 0
  5163  001698  0E00               	movlw	0
  5164  00169A  6E38               	movwf	?___ftmul,c
  5165  00169C  0E00               	movlw	0
  5166  00169E  6E39               	movwf	?___ftmul+1,c
  5167  0016A0  0E00               	movlw	0
  5168  0016A2  6E3A               	movwf	?___ftmul+2,c
  5169  0016A4  0012               	return	
  5170  0016A6                     l3360:
  5171                           
  5172                           ; BSR set to: 0
  5173  0016A6  0100               	movlb	0	; () banked
  5174  0016A8  51CC               	movf	___ftmul@sign& (0+255),w,b
  5175  0016AA  0F7B               	addlw	123
  5176  0016AC  0100               	movlb	0	; () banked
  5177  0016AE  27C7               	addwf	___ftmul@exp& (0+255),f,b
  5178                           
  5179                           ; BSR set to: 0
  5180  0016B0  C03A  F0CC         	movff	___ftmul@f1+2,___ftmul@sign
  5181  0016B4  503D               	movf	___ftmul@f2+2,w,c
  5182  0016B6  0100               	movlb	0	; () banked
  5183  0016B8  1BCC               	xorwf	___ftmul@sign& (0+255),f,b
  5184  0016BA  0E80               	movlw	128
  5185  0016BC  0100               	movlb	0	; () banked
  5186  0016BE  17CC               	andwf	___ftmul@sign& (0+255),f,b
  5187                           
  5188                           ; BSR set to: 0
  5189  0016C0  8E39               	bsf	___ftmul@f1+1,7,c
  5190                           
  5191                           ; BSR set to: 0
  5192  0016C2  8E3C               	bsf	___ftmul@f2+1,7,c
  5193                           
  5194                           ; BSR set to: 0
  5195  0016C4  0EFF               	movlw	255
  5196  0016C6  163B               	andwf	___ftmul@f2,f,c
  5197  0016C8  0EFF               	movlw	255
  5198  0016CA  163C               	andwf	___ftmul@f2+1,f,c
  5199  0016CC  0E00               	movlw	0
  5200  0016CE  163D               	andwf	___ftmul@f2+2,f,c
  5201                           
  5202                           ; BSR set to: 0
  5203  0016D0  0E00               	movlw	0
  5204  0016D2  0100               	movlb	0	; () banked
  5205  0016D4  6FC8               	movwf	___ftmul@f3_as_product& (0+255),b
  5206  0016D6  0E00               	movlw	0
  5207  0016D8  0100               	movlb	0	; () banked
  5208  0016DA  6FC9               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5209  0016DC  0E00               	movlw	0
  5210  0016DE  0100               	movlb	0	; () banked
  5211  0016E0  6FCA               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5212                           
  5213                           ; BSR set to: 0
  5214  0016E2  0E07               	movlw	7
  5215  0016E4  0100               	movlb	0	; () banked
  5216  0016E6  6FCB               	movwf	___ftmul@cntr& (0+255),b
  5217  0016E8                     l3374:
  5218                           
  5219                           ; BSR set to: 0
  5220  0016E8  A038               	btfss	___ftmul@f1,0,c
  5221  0016EA  D009               	goto	l3378
  5222                           
  5223                           ; BSR set to: 0
  5224  0016EC  503B               	movf	___ftmul@f2,w,c
  5225  0016EE  0100               	movlb	0	; () banked
  5226  0016F0  27C8               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5227  0016F2  503C               	movf	___ftmul@f2+1,w,c
  5228  0016F4  0100               	movlb	0	; () banked
  5229  0016F6  23C9               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5230  0016F8  503D               	movf	___ftmul@f2+2,w,c
  5231  0016FA  0100               	movlb	0	; () banked
  5232  0016FC  23CA               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5233  0016FE                     l3378:
  5234                           
  5235                           ; BSR set to: 0
  5236  0016FE  90D8               	bcf	status,0,c
  5237  001700  323A               	rrcf	___ftmul@f1+2,f,c
  5238  001702  3239               	rrcf	___ftmul@f1+1,f,c
  5239  001704  3238               	rrcf	___ftmul@f1,f,c
  5240  001706  90D8               	bcf	status,0,c
  5241  001708  363B               	rlcf	___ftmul@f2,f,c
  5242  00170A  363C               	rlcf	___ftmul@f2+1,f,c
  5243  00170C  363D               	rlcf	___ftmul@f2+2,f,c
  5244                           
  5245                           ; BSR set to: 0
  5246  00170E  0100               	movlb	0	; () banked
  5247  001710  2FCB               	decfsz	___ftmul@cntr& (0+255),f,b
  5248  001712  D7EA               	goto	l3374
  5249                           
  5250                           ; BSR set to: 0
  5251                           
  5252                           ; BSR set to: 0
  5253  001714  0E09               	movlw	9
  5254  001716  0100               	movlb	0	; () banked
  5255  001718  6FCB               	movwf	___ftmul@cntr& (0+255),b
  5256  00171A                     l3384:
  5257                           
  5258                           ; BSR set to: 0
  5259  00171A  A038               	btfss	___ftmul@f1,0,c
  5260  00171C  D009               	goto	l3388
  5261                           
  5262                           ; BSR set to: 0
  5263  00171E  503B               	movf	___ftmul@f2,w,c
  5264  001720  0100               	movlb	0	; () banked
  5265  001722  27C8               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5266  001724  503C               	movf	___ftmul@f2+1,w,c
  5267  001726  0100               	movlb	0	; () banked
  5268  001728  23C9               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5269  00172A  503D               	movf	___ftmul@f2+2,w,c
  5270  00172C  0100               	movlb	0	; () banked
  5271  00172E  23CA               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5272  001730                     l3388:
  5273                           
  5274                           ; BSR set to: 0
  5275  001730  90D8               	bcf	status,0,c
  5276  001732  323A               	rrcf	___ftmul@f1+2,f,c
  5277  001734  3239               	rrcf	___ftmul@f1+1,f,c
  5278  001736  3238               	rrcf	___ftmul@f1,f,c
  5279  001738  0100               	movlb	0	; () banked
  5280  00173A  90D8               	bcf	status,0,c
  5281  00173C  0100               	movlb	0	; () banked
  5282  00173E  33CA               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5283  001740  0100               	movlb	0	; () banked
  5284  001742  33C9               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5285  001744  0100               	movlb	0	; () banked
  5286  001746  33C8               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5287                           
  5288                           ; BSR set to: 0
  5289  001748  0100               	movlb	0	; () banked
  5290  00174A  2FCB               	decfsz	___ftmul@cntr& (0+255),f,b
  5291  00174C  D7E6               	goto	l3384
  5292                           
  5293                           ; BSR set to: 0
  5294                           
  5295                           ; BSR set to: 0
  5296  00174E  C0C8  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  5297  001752  C0C9  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5298  001756  C0CA  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5299  00175A  C0C7  F01A         	movff	___ftmul@exp,___ftpack@exp
  5300  00175E  C0CC  F01B         	movff	___ftmul@sign,___ftpack@sign
  5301  001762  ECF2  F00E         	call	___ftpack	;wreg free
  5302  001766  C017  F038         	movff	?___ftpack,?___ftmul
  5303  00176A  C018  F039         	movff	?___ftpack+1,?___ftmul+1
  5304  00176E  C019  F03A         	movff	?___ftpack+2,?___ftmul+2
  5305  001772  0012               	return	
  5306  001774                     __end_of___ftmul:
  5307                           	opt stack 0
  5308                           tblptru	equ	0xFF8
  5309                           tblptrh	equ	0xFF7
  5310                           tblptrl	equ	0xFF6
  5311                           tablat	equ	0xFF5
  5312                           prodh	equ	0xFF4
  5313                           prodl	equ	0xFF3
  5314                           intcon	equ	0xFF2
  5315                           intcon2	equ	0xFF1
  5316                           postinc0	equ	0xFEE
  5317                           wreg	equ	0xFE8
  5318                           postinc1	equ	0xFE6
  5319                           postdec1	equ	0xFE5
  5320                           fsr1h	equ	0xFE2
  5321                           fsr1l	equ	0xFE1
  5322                           postinc2	equ	0xFDE
  5323                           postdec2	equ	0xFDD
  5324                           fsr2h	equ	0xFDA
  5325                           fsr2l	equ	0xFD9
  5326                           status	equ	0xFD8
  5327                           
  5328 ;; *************** function ___ftdiv *****************
  5329 ;; Defined at:
  5330 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  f1              3   40[COMRAM] float 
  5333 ;;  f2              3   43[COMRAM] float 
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  f3              3   50[COMRAM] float 
  5336 ;;  sign            1   54[COMRAM] unsigned char 
  5337 ;;  exp             1   53[COMRAM] unsigned char 
  5338 ;;  cntr            1   49[COMRAM] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  3   40[COMRAM] float 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5348 ;;      Params:         6       0       0       0       0       0       0
  5349 ;;      Locals:         6       0       0       0       0       0       0
  5350 ;;      Temps:          3       0       0       0       0       0       0
  5351 ;;      Totals:        15       0       0       0       0       0       0
  5352 ;;Total ram usage:       15 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    5
  5355 ;; This function calls:
  5356 ;;		___ftpack
  5357 ;; This function is called by:
  5358 ;;		_Battery_Convert
  5359 ;;		_Temp_Convert
  5360 ;;		_Current_Fault
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text29
  5365  001866                     __ptext29:
  5366                           	opt stack 0
  5367  001866                     ___ftdiv:
  5368                           	opt stack 24
  5369                           
  5370                           ;incstack = 0
  5371  001866  C02B  F02F         	movff	___ftdiv@f1+2,??___ftdiv
  5372  00186A  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5373  00186C  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5374  00186E  342A               	rlcf	___ftdiv@f1+1,w,c
  5375  001870  362F               	rlcf	??___ftdiv& (0+255),f,c
  5376  001872  E301               	bnc	u2951
  5377  001874  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5378  001876                     u2951:
  5379  001876  502F               	movf	??___ftdiv,w,c
  5380  001878  6E36               	movwf	___ftdiv@exp,c
  5381  00187A  6636               	tstfsz	___ftdiv@exp& (0+255),c
  5382  00187C  D007               	goto	l3490
  5383  00187E  0E00               	movlw	0
  5384  001880  6E29               	movwf	?___ftdiv,c
  5385  001882  0E00               	movlw	0
  5386  001884  6E2A               	movwf	?___ftdiv+1,c
  5387  001886  0E00               	movlw	0
  5388  001888  6E2B               	movwf	?___ftdiv+2,c
  5389  00188A  0012               	return	
  5390  00188C                     l3490:
  5391  00188C  C02E  F02F         	movff	___ftdiv@f2+2,??___ftdiv
  5392  001890  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5393  001892  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5394  001894  342D               	rlcf	___ftdiv@f2+1,w,c
  5395  001896  362F               	rlcf	??___ftdiv& (0+255),f,c
  5396  001898  E301               	bnc	u2971
  5397  00189A  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5398  00189C                     u2971:
  5399  00189C  502F               	movf	??___ftdiv,w,c
  5400  00189E  6E37               	movwf	___ftdiv@sign,c
  5401  0018A0  6637               	tstfsz	___ftdiv@sign& (0+255),c
  5402  0018A2  D007               	goto	l3496
  5403  0018A4  0E00               	movlw	0
  5404  0018A6  6E29               	movwf	?___ftdiv,c
  5405  0018A8  0E00               	movlw	0
  5406  0018AA  6E2A               	movwf	?___ftdiv+1,c
  5407  0018AC  0E00               	movlw	0
  5408  0018AE  6E2B               	movwf	?___ftdiv+2,c
  5409  0018B0  0012               	return	
  5410  0018B2                     l3496:
  5411  0018B2  0E00               	movlw	0
  5412  0018B4  6E33               	movwf	___ftdiv@f3,c
  5413  0018B6  0E00               	movlw	0
  5414  0018B8  6E34               	movwf	___ftdiv@f3+1,c
  5415  0018BA  0E00               	movlw	0
  5416  0018BC  6E35               	movwf	___ftdiv@f3+2,c
  5417  0018BE  5037               	movf	___ftdiv@sign,w,c
  5418  0018C0  0F89               	addlw	137
  5419  0018C2  5E36               	subwf	___ftdiv@exp,f,c
  5420  0018C4  C02B  F037         	movff	___ftdiv@f1+2,___ftdiv@sign
  5421  0018C8  502E               	movf	___ftdiv@f2+2,w,c
  5422  0018CA  1A37               	xorwf	___ftdiv@sign,f,c
  5423  0018CC  0E80               	movlw	128
  5424  0018CE  1637               	andwf	___ftdiv@sign,f,c
  5425  0018D0  8E2A               	bsf	___ftdiv@f1+1,7,c
  5426  0018D2  0EFF               	movlw	255
  5427  0018D4  1629               	andwf	___ftdiv@f1,f,c
  5428  0018D6  0EFF               	movlw	255
  5429  0018D8  162A               	andwf	___ftdiv@f1+1,f,c
  5430  0018DA  0E00               	movlw	0
  5431  0018DC  162B               	andwf	___ftdiv@f1+2,f,c
  5432  0018DE  8E2D               	bsf	___ftdiv@f2+1,7,c
  5433  0018E0  0EFF               	movlw	255
  5434  0018E2  162C               	andwf	___ftdiv@f2,f,c
  5435  0018E4  0EFF               	movlw	255
  5436  0018E6  162D               	andwf	___ftdiv@f2+1,f,c
  5437  0018E8  0E00               	movlw	0
  5438  0018EA  162E               	andwf	___ftdiv@f2+2,f,c
  5439  0018EC  0E18               	movlw	24
  5440  0018EE  6E32               	movwf	___ftdiv@cntr,c
  5441  0018F0                     l3516:
  5442  0018F0  90D8               	bcf	status,0,c
  5443  0018F2  3633               	rlcf	___ftdiv@f3,f,c
  5444  0018F4  3634               	rlcf	___ftdiv@f3+1,f,c
  5445  0018F6  3635               	rlcf	___ftdiv@f3+2,f,c
  5446  0018F8  502C               	movf	___ftdiv@f2,w,c
  5447  0018FA  5C29               	subwf	___ftdiv@f1,w,c
  5448  0018FC  502D               	movf	___ftdiv@f2+1,w,c
  5449  0018FE  582A               	subwfb	___ftdiv@f1+1,w,c
  5450  001900  502E               	movf	___ftdiv@f2+2,w,c
  5451  001902  582B               	subwfb	___ftdiv@f1+2,w,c
  5452  001904  A0D8               	btfss	status,0,c
  5453  001906  D007               	goto	l937
  5454  001908  502C               	movf	___ftdiv@f2,w,c
  5455  00190A  5E29               	subwf	___ftdiv@f1,f,c
  5456  00190C  502D               	movf	___ftdiv@f2+1,w,c
  5457  00190E  5A2A               	subwfb	___ftdiv@f1+1,f,c
  5458  001910  502E               	movf	___ftdiv@f2+2,w,c
  5459  001912  5A2B               	subwfb	___ftdiv@f1+2,f,c
  5460  001914  8033               	bsf	___ftdiv@f3,0,c
  5461  001916                     l937:
  5462  001916  90D8               	bcf	status,0,c
  5463  001918  3629               	rlcf	___ftdiv@f1,f,c
  5464  00191A  362A               	rlcf	___ftdiv@f1+1,f,c
  5465  00191C  362B               	rlcf	___ftdiv@f1+2,f,c
  5466  00191E  2E32               	decfsz	___ftdiv@cntr,f,c
  5467  001920  D7E7               	goto	l3516
  5468  001922  C033  F017         	movff	___ftdiv@f3,___ftpack@arg
  5469  001926  C034  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5470  00192A  C035  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5471  00192E  C036  F01A         	movff	___ftdiv@exp,___ftpack@exp
  5472  001932  C037  F01B         	movff	___ftdiv@sign,___ftpack@sign
  5473  001936  ECF2  F00E         	call	___ftpack	;wreg free
  5474  00193A  C017  F029         	movff	?___ftpack,?___ftdiv
  5475  00193E  C018  F02A         	movff	?___ftpack+1,?___ftdiv+1
  5476  001942  C019  F02B         	movff	?___ftpack+2,?___ftdiv+2
  5477  001946  0012               	return	
  5478  001948                     __end_of___ftdiv:
  5479                           	opt stack 0
  5480                           tblptru	equ	0xFF8
  5481                           tblptrh	equ	0xFF7
  5482                           tblptrl	equ	0xFF6
  5483                           tablat	equ	0xFF5
  5484                           prodh	equ	0xFF4
  5485                           prodl	equ	0xFF3
  5486                           intcon	equ	0xFF2
  5487                           intcon2	equ	0xFF1
  5488                           postinc0	equ	0xFEE
  5489                           wreg	equ	0xFE8
  5490                           postinc1	equ	0xFE6
  5491                           postdec1	equ	0xFE5
  5492                           fsr1h	equ	0xFE2
  5493                           fsr1l	equ	0xFE1
  5494                           postinc2	equ	0xFDE
  5495                           postdec2	equ	0xFDD
  5496                           fsr2h	equ	0xFDA
  5497                           fsr2l	equ	0xFD9
  5498                           status	equ	0xFD8
  5499                           
  5500 ;; *************** function ___awtoft *****************
  5501 ;; Defined at:
  5502 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  c               2   36[COMRAM] int 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  sign            1   39[COMRAM] unsigned char 
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  3   36[COMRAM] float 
  5509 ;; Registers used:
  5510 ;;		wreg, status,2, status,0, prodl, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5516 ;;      Params:         3       0       0       0       0       0       0
  5517 ;;      Locals:         1       0       0       0       0       0       0
  5518 ;;      Temps:          0       0       0       0       0       0       0
  5519 ;;      Totals:         4       0       0       0       0       0       0
  5520 ;;Total ram usage:        4 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; Hardware stack levels required when called:    5
  5523 ;; This function calls:
  5524 ;;		___ftpack
  5525 ;; This function is called by:
  5526 ;;		_Battery_Convert
  5527 ;;		_Temp_Convert
  5528 ;;		_Current_Convert
  5529 ;;		_log
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text30
  5534  00215E                     __ptext30:
  5535                           	opt stack 0
  5536  00215E                     ___awtoft:
  5537                           	opt stack 23
  5538                           
  5539                           ;incstack = 0
  5540  00215E  0E00               	movlw	0
  5541  002160  6E28               	movwf	___awtoft@sign,c
  5542  002162  5026               	movf	___awtoft@c+1,w,c
  5543  002164  0A80               	xorlw	128
  5544  002166  6EF3               	movwf	prodl,c
  5545  002168  0E80               	movlw	128
  5546  00216A  5CF3               	subwf	prodl,w,c
  5547  00216C  0E00               	movlw	0
  5548  00216E  B4D8               	btfsc	status,2,c
  5549  002170  5C25               	subwf	___awtoft@c,w,c
  5550  002172  B0D8               	btfsc	status,0,c
  5551  002174  D006               	goto	l3404
  5552  002176  6C25               	negf	___awtoft@c,c
  5553  002178  1E26               	comf	___awtoft@c+1,f,c
  5554  00217A  B0D8               	btfsc	status,0,c
  5555  00217C  2A26               	incf	___awtoft@c+1,f,c
  5556  00217E  0E01               	movlw	1
  5557  002180  6E28               	movwf	___awtoft@sign,c
  5558  002182                     l3404:
  5559  002182  C025  F017         	movff	___awtoft@c,___ftpack@arg
  5560  002186  C026  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  5561  00218A  6A19               	clrf	___ftpack@arg+2,c
  5562  00218C  0E8E               	movlw	142
  5563  00218E  6E1A               	movwf	___ftpack@exp,c
  5564  002190  C028  F01B         	movff	___awtoft@sign,___ftpack@sign
  5565  002194  ECF2  F00E         	call	___ftpack	;wreg free
  5566  002198  C017  F025         	movff	?___ftpack,?___awtoft
  5567  00219C  C018  F026         	movff	?___ftpack+1,?___awtoft+1
  5568  0021A0  C019  F027         	movff	?___ftpack+2,?___awtoft+2
  5569  0021A4  0012               	return	
  5570  0021A6                     __end_of___awtoft:
  5571                           	opt stack 0
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           prodh	equ	0xFF4
  5577                           prodl	equ	0xFF3
  5578                           intcon	equ	0xFF2
  5579                           intcon2	equ	0xFF1
  5580                           postinc0	equ	0xFEE
  5581                           wreg	equ	0xFE8
  5582                           postinc1	equ	0xFE6
  5583                           postdec1	equ	0xFE5
  5584                           fsr1h	equ	0xFE2
  5585                           fsr1l	equ	0xFE1
  5586                           postinc2	equ	0xFDE
  5587                           postdec2	equ	0xFDD
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function ___ftpack *****************
  5593 ;; Defined at:
  5594 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  arg             3   22[COMRAM] unsigned um
  5597 ;;  exp             1   25[COMRAM] unsigned char 
  5598 ;;  sign            1   26[COMRAM] unsigned char 
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;		None
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  3   22[COMRAM] float 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2, status,0
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5610 ;;      Params:         5       0       0       0       0       0       0
  5611 ;;      Locals:         0       0       0       0       0       0       0
  5612 ;;      Temps:          3       0       0       0       0       0       0
  5613 ;;      Totals:         8       0       0       0       0       0       0
  5614 ;;Total ram usage:        8 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    4
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		___awtoft
  5621 ;;		___ftadd
  5622 ;;		___ftdiv
  5623 ;;		___ftmul
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           	psect	text31
  5628  001DE4                     __ptext31:
  5629                           	opt stack 0
  5630  001DE4                     ___ftpack:
  5631                           	opt stack 22
  5632                           
  5633                           ;incstack = 0
  5634  001DE4  501A               	movf	___ftpack@exp,w,c
  5635  001DE6  B4D8               	btfsc	status,2,c
  5636  001DE8  D005               	goto	l3248
  5637  001DEA  5017               	movf	___ftpack@arg,w,c
  5638  001DEC  1018               	iorwf	___ftpack@arg+1,w,c
  5639  001DEE  1019               	iorwf	___ftpack@arg+2,w,c
  5640  001DF0  A4D8               	btfss	status,2,c
  5641  001DF2  D00C               	goto	l3254
  5642  001DF4                     l3248:
  5643  001DF4  0E00               	movlw	0
  5644  001DF6  6E17               	movwf	?___ftpack,c
  5645  001DF8  0E00               	movlw	0
  5646  001DFA  6E18               	movwf	?___ftpack+1,c
  5647  001DFC  0E00               	movlw	0
  5648  001DFE  6E19               	movwf	?___ftpack+2,c
  5649  001E00  0012               	return	
  5650  001E02                     l3252:
  5651  001E02  2A1A               	incf	___ftpack@exp,f,c
  5652  001E04  90D8               	bcf	status,0,c
  5653  001E06  3219               	rrcf	___ftpack@arg+2,f,c
  5654  001E08  3218               	rrcf	___ftpack@arg+1,f,c
  5655  001E0A  3217               	rrcf	___ftpack@arg,f,c
  5656  001E0C                     l3254:
  5657  001E0C  0E00               	movlw	0
  5658  001E0E  1417               	andwf	___ftpack@arg,w,c
  5659  001E10  6E1C               	movwf	??___ftpack& (0+255),c
  5660  001E12  0E00               	movlw	0
  5661  001E14  1418               	andwf	___ftpack@arg+1,w,c
  5662  001E16  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  5663  001E18  0EFE               	movlw	254
  5664  001E1A  1419               	andwf	___ftpack@arg+2,w,c
  5665  001E1C  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  5666  001E1E  501C               	movf	??___ftpack,w,c
  5667  001E20  101D               	iorwf	??___ftpack+1,w,c
  5668  001E22  101E               	iorwf	??___ftpack+2,w,c
  5669  001E24  B4D8               	btfsc	status,2,c
  5670  001E26  D00C               	goto	l3260
  5671  001E28  D7EC               	goto	l3252
  5672  001E2A                     l3256:
  5673  001E2A  2A1A               	incf	___ftpack@exp,f,c
  5674  001E2C  0E01               	movlw	1
  5675  001E2E  2617               	addwf	___ftpack@arg,f,c
  5676  001E30  0E00               	movlw	0
  5677  001E32  2218               	addwfc	___ftpack@arg+1,f,c
  5678  001E34  0E00               	movlw	0
  5679  001E36  2219               	addwfc	___ftpack@arg+2,f,c
  5680  001E38  90D8               	bcf	status,0,c
  5681  001E3A  3219               	rrcf	___ftpack@arg+2,f,c
  5682  001E3C  3218               	rrcf	___ftpack@arg+1,f,c
  5683  001E3E  3217               	rrcf	___ftpack@arg,f,c
  5684  001E40                     l3260:
  5685  001E40  0E00               	movlw	0
  5686  001E42  1417               	andwf	___ftpack@arg,w,c
  5687  001E44  6E1C               	movwf	??___ftpack& (0+255),c
  5688  001E46  0E00               	movlw	0
  5689  001E48  1418               	andwf	___ftpack@arg+1,w,c
  5690  001E4A  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  5691  001E4C  0EFF               	movlw	255
  5692  001E4E  1419               	andwf	___ftpack@arg+2,w,c
  5693  001E50  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  5694  001E52  501C               	movf	??___ftpack,w,c
  5695  001E54  101D               	iorwf	??___ftpack+1,w,c
  5696  001E56  101E               	iorwf	??___ftpack+2,w,c
  5697  001E58  B4D8               	btfsc	status,2,c
  5698  001E5A  D006               	goto	l3264
  5699  001E5C  D7E6               	goto	l3256
  5700  001E5E                     l3262:
  5701  001E5E  061A               	decf	___ftpack@exp,f,c
  5702  001E60  90D8               	bcf	status,0,c
  5703  001E62  3617               	rlcf	___ftpack@arg,f,c
  5704  001E64  3618               	rlcf	___ftpack@arg+1,f,c
  5705  001E66  3619               	rlcf	___ftpack@arg+2,f,c
  5706  001E68                     l3264:
  5707  001E68  AE18               	btfss	___ftpack@arg+1,7,c
  5708  001E6A  D7F9               	goto	l3262
  5709  001E6C  A01A               	btfss	___ftpack@exp,0,c
  5710  001E6E  9E18               	bcf	___ftpack@arg+1,7,c
  5711  001E70  90D8               	bcf	status,0,c
  5712  001E72  321A               	rrcf	___ftpack@exp,f,c
  5713  001E74  501A               	movf	___ftpack@exp,w,c
  5714  001E76  1219               	iorwf	___ftpack@arg+2,f,c
  5715  001E78  501B               	movf	___ftpack@sign,w,c
  5716  001E7A  A4D8               	btfss	status,2,c
  5717  001E7C  8E19               	bsf	___ftpack@arg+2,7,c
  5718  001E7E  C017  F017         	movff	___ftpack@arg,?___ftpack
  5719  001E82  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  5720  001E86  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  5721  001E8A  0012               	return	
  5722  001E8C                     __end_of___ftpack:
  5723                           	opt stack 0
  5724                           tblptru	equ	0xFF8
  5725                           tblptrh	equ	0xFF7
  5726                           tblptrl	equ	0xFF6
  5727                           tablat	equ	0xFF5
  5728                           prodh	equ	0xFF4
  5729                           prodl	equ	0xFF3
  5730                           intcon	equ	0xFF2
  5731                           intcon2	equ	0xFF1
  5732                           postinc0	equ	0xFEE
  5733                           wreg	equ	0xFE8
  5734                           postinc1	equ	0xFE6
  5735                           postdec1	equ	0xFE5
  5736                           fsr1h	equ	0xFE2
  5737                           fsr1l	equ	0xFE1
  5738                           postinc2	equ	0xFDE
  5739                           postdec2	equ	0xFDD
  5740                           fsr2h	equ	0xFDA
  5741                           fsr2l	equ	0xFD9
  5742                           status	equ	0xFD8
  5743                           
  5744 ;; *************** function _INTERRUPT_InterruptManager *****************
  5745 ;; Defined at:
  5746 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;		None               void
  5753 ;; Registers used:
  5754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5760 ;;      Params:         0       0       0       0       0       0       0
  5761 ;;      Locals:         0       0       0       0       0       0       0
  5762 ;;      Temps:         14       0       0       0       0       0       0
  5763 ;;      Totals:        14       0       0       0       0       0       0
  5764 ;;Total ram usage:       14 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    3
  5767 ;; This function calls:
  5768 ;;		_ADC_ISR
  5769 ;;		_TMR1_ISR
  5770 ;; This function is called by:
  5771 ;;		Interrupt level 2
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           	psect	intcode
  5776  000008                     __pintcode:
  5777                           	opt stack 0
  5778  000008                     _INTERRUPT_InterruptManager:
  5779                           	opt stack 22
  5780                           
  5781                           ;incstack = 0
  5782  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
  5783  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  5784  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  5785  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  5786  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  5787  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  5788  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  5789  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  5790  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
  5791  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
  5792  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  5793  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  5794  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  5795  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
  5796                           
  5797                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  5798  000040  AA9D               	btfss	3997,5,c	;volatile
  5799  000042  D002               	goto	i2l218
  5800  000044  BA9E               	btfsc	3998,5,c	;volatile
  5801  000046  D00F               	goto	i2l226
  5802  000048                     i2l218:
  5803                           
  5804                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  5805  000048  BC9D               	btfsc	3997,6,c	;volatile
  5806  00004A  AC9E               	btfss	3998,6,c	;volatile
  5807  00004C  D003               	goto	i2l220
  5808                           
  5809                           ;interrupt_manager.c: 77: {
  5810                           ;interrupt_manager.c: 78: ADC_ISR();
  5811  00004E  EC0F  F003         	call	_ADC_ISR	;wreg free
  5812                           
  5813                           ;interrupt_manager.c: 79: }
  5814  000052  D009               	goto	i2l226
  5815  000054                     i2l220:
  5816                           
  5817                           ;interrupt_manager.c: 80: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  5818  000054  A89D               	btfss	3997,4,c	;volatile
  5819  000056  D002               	goto	i2l222
  5820  000058  B89E               	btfsc	3998,4,c	;volatile
  5821  00005A  D005               	goto	i2l226
  5822  00005C                     i2l222:
  5823                           
  5824                           ;interrupt_manager.c: 84: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  5825  00005C  B09D               	btfsc	3997,0,c	;volatile
  5826  00005E  A09E               	btfss	3998,0,c	;volatile
  5827  000060  D002               	goto	i2l226
  5828                           
  5829                           ;interrupt_manager.c: 85: {
  5830                           ;interrupt_manager.c: 86: TMR1_ISR();
  5831  000062  EC5E  F010         	call	_TMR1_ISR	;wreg free
  5832  000066                     i2l226:
  5833  000066  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  5834  00006A  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  5835  00006E  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  5836  000072  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  5837  000076  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  5838  00007A  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  5839  00007E  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  5840  000082  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  5841  000086  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  5842  00008A  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  5843  00008E  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  5844  000092  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  5845  000096  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  5846  00009A  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  5847  00009E  0011               	retfie		f
  5848  0000A0                     __end_of_INTERRUPT_InterruptManager:
  5849                           	opt stack 0
  5850                           pclatu	equ	0xFFB
  5851                           pclath	equ	0xFFA
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           intcon	equ	0xFF2
  5859                           intcon2	equ	0xFF1
  5860                           postinc0	equ	0xFEE
  5861                           fsr0h	equ	0xFEA
  5862                           fsr0l	equ	0xFE9
  5863                           wreg	equ	0xFE8
  5864                           postinc1	equ	0xFE6
  5865                           postdec1	equ	0xFE5
  5866                           fsr1h	equ	0xFE2
  5867                           fsr1l	equ	0xFE1
  5868                           postinc2	equ	0xFDE
  5869                           postdec2	equ	0xFDD
  5870                           fsr2h	equ	0xFDA
  5871                           fsr2l	equ	0xFD9
  5872                           status	equ	0xFD8
  5873                           
  5874 ;; *************** function _TMR1_ISR *****************
  5875 ;; Defined at:
  5876 ;;		line 117 in file "mcc_generated_files/tmr1.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;		None
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;		None
  5881 ;; Return value:  Size  Location     Type
  5882 ;;		None               void
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5890 ;;      Params:         0       0       0       0       0       0       0
  5891 ;;      Locals:         0       0       0       0       0       0       0
  5892 ;;      Temps:          3       0       0       0       0       0       0
  5893 ;;      Totals:         3       0       0       0       0       0       0
  5894 ;;Total ram usage:        3 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    2
  5897 ;; This function calls:
  5898 ;;		_Battery_Read
  5899 ;;		_Current_Read
  5900 ;;		_Temp_Read
  5901 ;; This function is called by:
  5902 ;;		_INTERRUPT_InterruptManager
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           	psect	text33
  5907  0020BC                     __ptext33:
  5908                           	opt stack 0
  5909  0020BC                     _TMR1_ISR:
  5910                           	opt stack 22
  5911                           
  5912                           ;tmr1.c: 119: static volatile unsigned int CountCallBack = 0;
  5913                           ;tmr1.c: 123: PIR1bits.TMR1IF = 0;
  5914                           
  5915                           ;incstack = 0
  5916  0020BC  909E               	bcf	3998,0,c	;volatile
  5917                           
  5918                           ;tmr1.c: 126: TMR1H = (timer1ReloadVal >> 8);
  5919  0020BE  C049  F003         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  5920  0020C2  C003  F004         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  5921  0020C6  6A05               	clrf	(??_TMR1_ISR+2)& (0+255),c
  5922  0020C8  5004               	movf	??_TMR1_ISR+1,w,c
  5923  0020CA  6ECF               	movwf	4047,c	;volatile
  5924                           
  5925                           ;tmr1.c: 127: TMR1L = (uint8_t) timer1ReloadVal;
  5926  0020CC  C048  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  5927                           
  5928                           ;tmr1.c: 130: if (++CountCallBack >= 4)
  5929  0020D0  4A41               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
  5930  0020D2  2A42               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
  5931  0020D4  0E04               	movlw	4
  5932  0020D6  5C41               	subwf	TMR1_ISR@CountCallBack& (0+255),w,c	;volatile
  5933  0020D8  0E00               	movlw	0
  5934  0020DA  5842               	subwfb	(TMR1_ISR@CountCallBack+1)& (0+255),w,c	;volatile
  5935  0020DC  A0D8               	btfss	status,0,c
  5936  0020DE  D005               	goto	i2l2716
  5937                           
  5938                           ;tmr1.c: 131: {
  5939                           ;tmr1.c: 133: do { LATA4 = ~LATA4; } while(0);
  5940  0020E0  7889               	btg	3977,4,c	;volatile
  5941                           
  5942                           ;tmr1.c: 136: CountCallBack = 0;
  5943  0020E2  0E00               	movlw	0
  5944  0020E4  6E42               	movwf	TMR1_ISR@CountCallBack+1,c	;volatile
  5945  0020E6  0E00               	movlw	0
  5946  0020E8  6E41               	movwf	TMR1_ISR@CountCallBack,c	;volatile
  5947  0020EA                     i2l2716:
  5948                           
  5949                           ;tmr1.c: 137: }
  5950                           ;tmr1.c: 138: if(CountCallBack == 1)
  5951  0020EA  0441               	decf	TMR1_ISR@CountCallBack,w,c	;volatile
  5952  0020EC  1042               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  5953  0020EE  B4D8               	btfsc	status,2,c
  5954                           
  5955                           ;tmr1.c: 139: {
  5956                           ;tmr1.c: 140: Current_Read();
  5957  0020F0  ECAB  F011         	call	_Current_Read	;wreg free
  5958                           
  5959                           ;tmr1.c: 141: }
  5960                           ;tmr1.c: 142: if(CountCallBack == 2)
  5961  0020F4  5041               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  5962  0020F6  0A02               	xorlw	2
  5963  0020F8  1042               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  5964  0020FA  B4D8               	btfsc	status,2,c
  5965                           
  5966                           ;tmr1.c: 143: {
  5967                           ;tmr1.c: 144: Battery_Read();
  5968  0020FC  ECB7  F011         	call	_Battery_Read	;wreg free
  5969                           
  5970                           ;tmr1.c: 145: }
  5971                           ;tmr1.c: 146: if(CountCallBack == 3)
  5972  002100  5041               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  5973  002102  0A03               	xorlw	3
  5974  002104  1042               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  5975  002106  A4D8               	btfss	status,2,c
  5976  002108  0012               	return	
  5977                           
  5978                           ;tmr1.c: 147: {
  5979                           ;tmr1.c: 148: Temp_Read();
  5980  00210A  EC9F  F011         	call	_Temp_Read	;wreg free
  5981  00210E  0012               	return	
  5982  002110                     __end_of_TMR1_ISR:
  5983                           	opt stack 0
  5984                           pclatu	equ	0xFFB
  5985                           pclath	equ	0xFFA
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           intcon	equ	0xFF2
  5993                           intcon2	equ	0xFF1
  5994                           postinc0	equ	0xFEE
  5995                           fsr0h	equ	0xFEA
  5996                           fsr0l	equ	0xFE9
  5997                           wreg	equ	0xFE8
  5998                           postinc1	equ	0xFE6
  5999                           postdec1	equ	0xFE5
  6000                           fsr1h	equ	0xFE2
  6001                           fsr1l	equ	0xFE1
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           fsr2h	equ	0xFDA
  6005                           fsr2l	equ	0xFD9
  6006                           status	equ	0xFD8
  6007                           
  6008 ;; *************** function _Temp_Read *****************
  6009 ;; Defined at:
  6010 ;;		line 27 in file "Tempeture.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;		None
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;		None
  6015 ;; Return value:  Size  Location     Type
  6016 ;;		None               void
  6017 ;; Registers used:
  6018 ;;		wreg, status,2, status,0, cstack
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6024 ;;      Params:         0       0       0       0       0       0       0
  6025 ;;      Locals:         0       0       0       0       0       0       0
  6026 ;;      Temps:          0       0       0       0       0       0       0
  6027 ;;      Totals:         0       0       0       0       0       0       0
  6028 ;;Total ram usage:        0 bytes
  6029 ;; Hardware stack levels used:    1
  6030 ;; Hardware stack levels required when called:    1
  6031 ;; This function calls:
  6032 ;;		_ADC_StartConversion
  6033 ;; This function is called by:
  6034 ;;		_TMR1_ISR
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           	psect	text34
  6039  00233E                     __ptext34:
  6040                           	opt stack 0
  6041  00233E                     _Temp_Read:
  6042                           	opt stack 22
  6043                           
  6044                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
  6045                           
  6046                           ;incstack = 0
  6047  00233E  0E00               	movlw	0
  6048  002340  6E44               	movwf	_ADC_Buffer_Point+1,c
  6049  002342  0E00               	movlw	0
  6050  002344  6E43               	movwf	_ADC_Buffer_Point,c
  6051                           
  6052                           ;Tempeture.c: 31: Temp_Aquire = 1;
  6053  002346  0E01               	movlw	1
  6054  002348  6E46               	movwf	_Temp_Aquire,c
  6055                           
  6056                           ;Tempeture.c: 32: ADCON1 = 0x80;
  6057  00234A  0E80               	movlw	128
  6058  00234C  6EC1               	movwf	4033,c	;volatile
  6059                           
  6060                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
  6061  00234E  0E0E               	movlw	14
  6062  002350  EC86  F011         	call	_ADC_StartConversion
  6063  002354  0012               	return	
  6064  002356                     __end_of_Temp_Read:
  6065                           	opt stack 0
  6066                           pclatu	equ	0xFFB
  6067                           pclath	equ	0xFFA
  6068                           tblptru	equ	0xFF8
  6069                           tblptrh	equ	0xFF7
  6070                           tblptrl	equ	0xFF6
  6071                           tablat	equ	0xFF5
  6072                           prodh	equ	0xFF4
  6073                           prodl	equ	0xFF3
  6074                           intcon	equ	0xFF2
  6075                           intcon2	equ	0xFF1
  6076                           postinc0	equ	0xFEE
  6077                           fsr0h	equ	0xFEA
  6078                           fsr0l	equ	0xFE9
  6079                           wreg	equ	0xFE8
  6080                           postinc1	equ	0xFE6
  6081                           postdec1	equ	0xFE5
  6082                           fsr1h	equ	0xFE2
  6083                           fsr1l	equ	0xFE1
  6084                           postinc2	equ	0xFDE
  6085                           postdec2	equ	0xFDD
  6086                           fsr2h	equ	0xFDA
  6087                           fsr2l	equ	0xFD9
  6088                           status	equ	0xFD8
  6089                           
  6090 ;; *************** function _Current_Read *****************
  6091 ;; Defined at:
  6092 ;;		line 40 in file "Current.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;		None
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;		None
  6097 ;; Return value:  Size  Location     Type
  6098 ;;		None               void
  6099 ;; Registers used:
  6100 ;;		wreg, status,2, status,0, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6106 ;;      Params:         0       0       0       0       0       0       0
  6107 ;;      Locals:         0       0       0       0       0       0       0
  6108 ;;      Temps:          0       0       0       0       0       0       0
  6109 ;;      Totals:         0       0       0       0       0       0       0
  6110 ;;Total ram usage:        0 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    1
  6113 ;; This function calls:
  6114 ;;		_ADC_GetConversion
  6115 ;; This function is called by:
  6116 ;;		_TMR1_ISR
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text35
  6121  002356                     __ptext35:
  6122                           	opt stack 0
  6123  002356                     _Current_Read:
  6124                           	opt stack 22
  6125                           
  6126                           ;Current.c: 43: ADC_Buffer_Point = 0;
  6127                           
  6128                           ;incstack = 0
  6129  002356  0E00               	movlw	0
  6130  002358  6E44               	movwf	_ADC_Buffer_Point+1,c
  6131  00235A  0E00               	movlw	0
  6132  00235C  6E43               	movwf	_ADC_Buffer_Point,c
  6133                           
  6134                           ;Current.c: 44: Current_Aquire = 1;
  6135  00235E  0E01               	movlw	1
  6136  002360  6E45               	movwf	_Current_Aquire,c
  6137                           
  6138                           ;Current.c: 45: ADCON1 = 0x80;
  6139  002362  0E80               	movlw	128
  6140  002364  6EC1               	movwf	4033,c	;volatile
  6141                           
  6142                           ;Current.c: 46: ADC_GetConversion(Asen);
  6143  002366  0E0B               	movlw	11
  6144  002368  EC75  F011         	call	_ADC_GetConversion
  6145  00236C  0012               	return	
  6146  00236E                     __end_of_Current_Read:
  6147                           	opt stack 0
  6148                           pclatu	equ	0xFFB
  6149                           pclath	equ	0xFFA
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           intcon	equ	0xFF2
  6157                           intcon2	equ	0xFF1
  6158                           postinc0	equ	0xFEE
  6159                           fsr0h	equ	0xFEA
  6160                           fsr0l	equ	0xFE9
  6161                           wreg	equ	0xFE8
  6162                           postinc1	equ	0xFE6
  6163                           postdec1	equ	0xFE5
  6164                           fsr1h	equ	0xFE2
  6165                           fsr1l	equ	0xFE1
  6166                           postinc2	equ	0xFDE
  6167                           postdec2	equ	0xFDD
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           
  6172 ;; *************** function _ADC_GetConversion *****************
  6173 ;; Defined at:
  6174 ;;		line 64 in file "mcc_generated_files/adc.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;  channel         1    wreg     enum E8837
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  channel         1    1[COMRAM] enum E8837
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  2  122[COMRAM] unsigned int 
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6188 ;;      Params:         0       0       0       0       0       0       0
  6189 ;;      Locals:         1       0       0       0       0       0       0
  6190 ;;      Temps:          1       0       0       0       0       0       0
  6191 ;;      Totals:         2       0       0       0       0       0       0
  6192 ;;Total ram usage:        2 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_Current_Read
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text36
  6202  0022EA                     __ptext36:
  6203                           	opt stack 0
  6204  0022EA                     _ADC_GetConversion:
  6205                           	opt stack 22
  6206                           
  6207                           ;incstack = 0
  6208                           ;ADC_GetConversion@channel stored from wreg
  6209  0022EA  6E02               	movwf	ADC_GetConversion@channel,c
  6210                           
  6211                           ;adc.c: 67: ADCON0bits.CHS = channel;
  6212  0022EC  C002  F001         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  6213  0022F0  4601               	rlncf	??_ADC_GetConversion,f,c
  6214  0022F2  4601               	rlncf	??_ADC_GetConversion,f,c
  6215  0022F4  50C2               	movf	4034,w,c	;volatile
  6216  0022F6  1801               	xorwf	??_ADC_GetConversion,w,c
  6217  0022F8  0B83               	andlw	-125
  6218  0022FA  1801               	xorwf	??_ADC_GetConversion,w,c
  6219  0022FC  6EC2               	movwf	4034,c	;volatile
  6220                           
  6221                           ;adc.c: 70: ADCON0bits.ADON = 1;
  6222  0022FE  80C2               	bsf	4034,0,c	;volatile
  6223                           
  6224                           ;adc.c: 74: ADCON0bits.GO_nDONE = 1;
  6225  002300  82C2               	bsf	4034,1,c	;volatile
  6226  002302                     i2l123:
  6227  002302  B2C2               	btfsc	4034,1,c	;volatile
  6228  002304  D7FE               	goto	i2l123
  6229                           
  6230                           ;adc.c: 79: }
  6231                           ;adc.c: 82: return ((ADRESH << 8) + ADRESL);
  6232                           ;	Return value of _ADC_GetConversion is never used
  6233  002306  50C4               	movf	4036,w,c	;volatile
  6234  002308  50C3               	movf	4035,w,c	;volatile
  6235  00230A  0012               	return	
  6236  00230C                     __end_of_ADC_GetConversion:
  6237                           	opt stack 0
  6238                           pclatu	equ	0xFFB
  6239                           pclath	equ	0xFFA
  6240                           tblptru	equ	0xFF8
  6241                           tblptrh	equ	0xFF7
  6242                           tblptrl	equ	0xFF6
  6243                           tablat	equ	0xFF5
  6244                           prodh	equ	0xFF4
  6245                           prodl	equ	0xFF3
  6246                           intcon	equ	0xFF2
  6247                           intcon2	equ	0xFF1
  6248                           postinc0	equ	0xFEE
  6249                           fsr0h	equ	0xFEA
  6250                           fsr0l	equ	0xFE9
  6251                           wreg	equ	0xFE8
  6252                           postinc1	equ	0xFE6
  6253                           postdec1	equ	0xFE5
  6254                           fsr1h	equ	0xFE2
  6255                           fsr1l	equ	0xFE1
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _Battery_Read *****************
  6263 ;; Defined at:
  6264 ;;		line 24 in file "Battery.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;		None               void
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6278 ;;      Params:         0       0       0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0
  6281 ;;      Totals:         0       0       0       0       0       0       0
  6282 ;;Total ram usage:        0 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    1
  6285 ;; This function calls:
  6286 ;;		_ADC_StartConversion
  6287 ;; This function is called by:
  6288 ;;		_TMR1_ISR
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           	psect	text37
  6293  00236E                     __ptext37:
  6294                           	opt stack 0
  6295  00236E                     _Battery_Read:
  6296                           	opt stack 22
  6297                           
  6298                           ;Battery.c: 27: ADC_Buffer_Point = 0;
  6299                           
  6300                           ;incstack = 0
  6301  00236E  0E00               	movlw	0
  6302  002370  6E44               	movwf	_ADC_Buffer_Point+1,c
  6303  002372  0E00               	movlw	0
  6304  002374  6E43               	movwf	_ADC_Buffer_Point,c
  6305                           
  6306                           ;Battery.c: 28: Volt_Aquire = 1;
  6307  002376  0E01               	movlw	1
  6308  002378  6E47               	movwf	_Volt_Aquire,c
  6309                           
  6310                           ;Battery.c: 29: ADCON1 = 0x80;
  6311  00237A  0E80               	movlw	128
  6312  00237C  6EC1               	movwf	4033,c	;volatile
  6313                           
  6314                           ;Battery.c: 30: ADC_StartConversion(AN_CELL1);
  6315  00237E  0E07               	movlw	7
  6316  002380  EC86  F011         	call	_ADC_StartConversion
  6317  002384  0012               	return	
  6318  002386                     __end_of_Battery_Read:
  6319                           	opt stack 0
  6320                           pclatu	equ	0xFFB
  6321                           pclath	equ	0xFFA
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon	equ	0xFF2
  6329                           intcon2	equ	0xFF1
  6330                           postinc0	equ	0xFEE
  6331                           fsr0h	equ	0xFEA
  6332                           fsr0l	equ	0xFE9
  6333                           wreg	equ	0xFE8
  6334                           postinc1	equ	0xFE6
  6335                           postdec1	equ	0xFE5
  6336                           fsr1h	equ	0xFE2
  6337                           fsr1l	equ	0xFE1
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function _ADC_ISR *****************
  6345 ;; Defined at:
  6346 ;;		line 85 in file "mcc_generated_files/adc.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;		None
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;  ADC_Result      2    6[COMRAM] int 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;		None               void
  6353 ;; Registers used:
  6354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6360 ;;      Params:         0       0       0       0       0       0       0
  6361 ;;      Locals:         2       0       0       0       0       0       0
  6362 ;;      Temps:          2       0       0       0       0       0       0
  6363 ;;      Totals:         4       0       0       0       0       0       0
  6364 ;;Total ram usage:        4 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    1
  6367 ;; This function calls:
  6368 ;;		_ADC_GetConversionResult
  6369 ;;		_ADC_StartConversion
  6370 ;;		_Set_4051
  6371 ;; This function is called by:
  6372 ;;		_INTERRUPT_InterruptManager
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text38
  6377  00061E                     __ptext38:
  6378                           	opt stack 0
  6379  00061E                     _ADC_ISR:
  6380                           	opt stack 23
  6381                           
  6382                           ;adc.c: 88: PIR1bits.ADIF = 0;
  6383                           
  6384                           ;incstack = 0
  6385  00061E  9C9E               	bcf	3998,6,c	;volatile
  6386                           
  6387                           ;adc.c: 89: int ADC_Result = 0;
  6388  000620  0E00               	movlw	0
  6389  000622  6E08               	movwf	ADC_ISR@ADC_Result+1,c
  6390  000624  0E00               	movlw	0
  6391  000626  6E07               	movwf	ADC_ISR@ADC_Result,c
  6392                           
  6393                           ;adc.c: 90: if (Temp_Aquire){
  6394  000628  5046               	movf	_Temp_Aquire,w,c
  6395  00062A  B4D8               	btfsc	status,2,c
  6396  00062C  D101               	goto	i2l2788
  6397                           
  6398                           ;adc.c: 92: ADC_Result = ADC_GetConversionResult();
  6399  00062E  ECCE  F011         	call	_ADC_GetConversionResult	;wreg free
  6400  000632  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  6401  000636  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  6402                           
  6403                           ;adc.c: 93: switch ( ADC_Buffer_Point )
  6404  00063A  D0D7               	goto	i2l2784
  6405  00063C                     i2l2734:
  6406                           
  6407                           ;adc.c: 96: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6408  00063C  0EB3               	movlw	low _Temp_Adc
  6409  00063E  6E05               	movwf	??_ADC_ISR& (0+255),c
  6410  000640  0E00               	movlw	high _Temp_Adc
  6411  000642  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6412  000644  90D8               	bcf	status,0,c
  6413  000646  3443               	rlcf	_ADC_Buffer_Point,w,c
  6414  000648  6ED9               	movwf	fsr2l,c
  6415  00064A  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6416  00064C  6EDA               	movwf	fsr2h,c
  6417  00064E  5005               	movf	??_ADC_ISR,w,c
  6418  000650  26D9               	addwf	fsr2l,f,c
  6419  000652  5006               	movf	??_ADC_ISR+1,w,c
  6420  000654  22DA               	addwfc	fsr2h,f,c
  6421  000656  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6422  00065A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6423                           
  6424                           ;adc.c: 97: Set_4051(1);
  6425  00065E  0E00               	movlw	0
  6426  000660  6E02               	movwf	Set_4051@Channel+1,c
  6427  000662  0E01               	movlw	1
  6428  000664  6E01               	movwf	Set_4051@Channel,c
  6429  000666  EC3A  F011         	call	_Set_4051	;wreg free
  6430                           
  6431                           ;adc.c: 98: ADC_StartConversion(Temp1);
  6432  00066A  0E0E               	movlw	14
  6433  00066C  EC86  F011         	call	_ADC_StartConversion
  6434                           
  6435                           ;adc.c: 99: break;
  6436  000670  D0DD               	goto	i2l2786
  6437  000672                     i2l2740:
  6438                           
  6439                           ;adc.c: 101: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6440  000672  0EB3               	movlw	low _Temp_Adc
  6441  000674  6E05               	movwf	??_ADC_ISR& (0+255),c
  6442  000676  0E00               	movlw	high _Temp_Adc
  6443  000678  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6444  00067A  90D8               	bcf	status,0,c
  6445  00067C  3443               	rlcf	_ADC_Buffer_Point,w,c
  6446  00067E  6ED9               	movwf	fsr2l,c
  6447  000680  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6448  000682  6EDA               	movwf	fsr2h,c
  6449  000684  5005               	movf	??_ADC_ISR,w,c
  6450  000686  26D9               	addwf	fsr2l,f,c
  6451  000688  5006               	movf	??_ADC_ISR+1,w,c
  6452  00068A  22DA               	addwfc	fsr2h,f,c
  6453  00068C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6454  000690  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6455                           
  6456                           ;adc.c: 102: Set_4051(2);
  6457  000694  0E00               	movlw	0
  6458  000696  6E02               	movwf	Set_4051@Channel+1,c
  6459  000698  0E02               	movlw	2
  6460  00069A  6E01               	movwf	Set_4051@Channel,c
  6461  00069C  EC3A  F011         	call	_Set_4051	;wreg free
  6462                           
  6463                           ;adc.c: 103: ADC_StartConversion(Temp1);
  6464  0006A0  0E0E               	movlw	14
  6465  0006A2  EC86  F011         	call	_ADC_StartConversion
  6466                           
  6467                           ;adc.c: 104: break;
  6468  0006A6  D0C2               	goto	i2l2786
  6469  0006A8                     i2l2746:
  6470                           
  6471                           ;adc.c: 106: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6472  0006A8  0EB3               	movlw	low _Temp_Adc
  6473  0006AA  6E05               	movwf	??_ADC_ISR& (0+255),c
  6474  0006AC  0E00               	movlw	high _Temp_Adc
  6475  0006AE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6476  0006B0  90D8               	bcf	status,0,c
  6477  0006B2  3443               	rlcf	_ADC_Buffer_Point,w,c
  6478  0006B4  6ED9               	movwf	fsr2l,c
  6479  0006B6  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6480  0006B8  6EDA               	movwf	fsr2h,c
  6481  0006BA  5005               	movf	??_ADC_ISR,w,c
  6482  0006BC  26D9               	addwf	fsr2l,f,c
  6483  0006BE  5006               	movf	??_ADC_ISR+1,w,c
  6484  0006C0  22DA               	addwfc	fsr2h,f,c
  6485  0006C2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6486  0006C6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6487                           
  6488                           ;adc.c: 107: Set_4051(3);
  6489  0006CA  0E00               	movlw	0
  6490  0006CC  6E02               	movwf	Set_4051@Channel+1,c
  6491  0006CE  0E03               	movlw	3
  6492  0006D0  6E01               	movwf	Set_4051@Channel,c
  6493  0006D2  EC3A  F011         	call	_Set_4051	;wreg free
  6494                           
  6495                           ;adc.c: 108: ADC_StartConversion(Temp1);
  6496  0006D6  0E0E               	movlw	14
  6497  0006D8  EC86  F011         	call	_ADC_StartConversion
  6498                           
  6499                           ;adc.c: 109: break;
  6500  0006DC  D0A7               	goto	i2l2786
  6501  0006DE                     i2l2752:
  6502                           
  6503                           ;adc.c: 111: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6504  0006DE  0EB3               	movlw	low _Temp_Adc
  6505  0006E0  6E05               	movwf	??_ADC_ISR& (0+255),c
  6506  0006E2  0E00               	movlw	high _Temp_Adc
  6507  0006E4  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6508  0006E6  90D8               	bcf	status,0,c
  6509  0006E8  3443               	rlcf	_ADC_Buffer_Point,w,c
  6510  0006EA  6ED9               	movwf	fsr2l,c
  6511  0006EC  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6512  0006EE  6EDA               	movwf	fsr2h,c
  6513  0006F0  5005               	movf	??_ADC_ISR,w,c
  6514  0006F2  26D9               	addwf	fsr2l,f,c
  6515  0006F4  5006               	movf	??_ADC_ISR+1,w,c
  6516  0006F6  22DA               	addwfc	fsr2h,f,c
  6517  0006F8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6518  0006FC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6519                           
  6520                           ;adc.c: 112: Set_4051(4);
  6521  000700  0E00               	movlw	0
  6522  000702  6E02               	movwf	Set_4051@Channel+1,c
  6523  000704  0E04               	movlw	4
  6524  000706  6E01               	movwf	Set_4051@Channel,c
  6525  000708  EC3A  F011         	call	_Set_4051	;wreg free
  6526                           
  6527                           ;adc.c: 113: ADC_StartConversion(Temp1);
  6528  00070C  0E0E               	movlw	14
  6529  00070E  EC86  F011         	call	_ADC_StartConversion
  6530                           
  6531                           ;adc.c: 114: break;
  6532  000712  D08C               	goto	i2l2786
  6533  000714                     i2l2758:
  6534                           
  6535                           ;adc.c: 116: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6536  000714  0EB3               	movlw	low _Temp_Adc
  6537  000716  6E05               	movwf	??_ADC_ISR& (0+255),c
  6538  000718  0E00               	movlw	high _Temp_Adc
  6539  00071A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6540  00071C  90D8               	bcf	status,0,c
  6541  00071E  3443               	rlcf	_ADC_Buffer_Point,w,c
  6542  000720  6ED9               	movwf	fsr2l,c
  6543  000722  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6544  000724  6EDA               	movwf	fsr2h,c
  6545  000726  5005               	movf	??_ADC_ISR,w,c
  6546  000728  26D9               	addwf	fsr2l,f,c
  6547  00072A  5006               	movf	??_ADC_ISR+1,w,c
  6548  00072C  22DA               	addwfc	fsr2h,f,c
  6549  00072E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6550  000732  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6551                           
  6552                           ;adc.c: 117: Set_4051(5);
  6553  000736  0E00               	movlw	0
  6554  000738  6E02               	movwf	Set_4051@Channel+1,c
  6555  00073A  0E05               	movlw	5
  6556  00073C  6E01               	movwf	Set_4051@Channel,c
  6557  00073E  EC3A  F011         	call	_Set_4051	;wreg free
  6558                           
  6559                           ;adc.c: 118: ADC_StartConversion(Temp1);
  6560  000742  0E0E               	movlw	14
  6561  000744  EC86  F011         	call	_ADC_StartConversion
  6562                           
  6563                           ;adc.c: 119: break;
  6564  000748  D071               	goto	i2l2786
  6565  00074A                     i2l2764:
  6566                           
  6567                           ;adc.c: 121: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6568  00074A  0EB3               	movlw	low _Temp_Adc
  6569  00074C  6E05               	movwf	??_ADC_ISR& (0+255),c
  6570  00074E  0E00               	movlw	high _Temp_Adc
  6571  000750  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6572  000752  90D8               	bcf	status,0,c
  6573  000754  3443               	rlcf	_ADC_Buffer_Point,w,c
  6574  000756  6ED9               	movwf	fsr2l,c
  6575  000758  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6576  00075A  6EDA               	movwf	fsr2h,c
  6577  00075C  5005               	movf	??_ADC_ISR,w,c
  6578  00075E  26D9               	addwf	fsr2l,f,c
  6579  000760  5006               	movf	??_ADC_ISR+1,w,c
  6580  000762  22DA               	addwfc	fsr2h,f,c
  6581  000764  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6582  000768  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6583                           
  6584                           ;adc.c: 122: Set_4051(6);
  6585  00076C  0E00               	movlw	0
  6586  00076E  6E02               	movwf	Set_4051@Channel+1,c
  6587  000770  0E06               	movlw	6
  6588  000772  6E01               	movwf	Set_4051@Channel,c
  6589  000774  EC3A  F011         	call	_Set_4051	;wreg free
  6590                           
  6591                           ;adc.c: 123: ADC_StartConversion(Temp1);
  6592  000778  0E0E               	movlw	14
  6593  00077A  EC86  F011         	call	_ADC_StartConversion
  6594                           
  6595                           ;adc.c: 124: break;
  6596  00077E  D056               	goto	i2l2786
  6597  000780                     i2l2770:
  6598                           
  6599                           ;adc.c: 126: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6600  000780  0EB3               	movlw	low _Temp_Adc
  6601  000782  6E05               	movwf	??_ADC_ISR& (0+255),c
  6602  000784  0E00               	movlw	high _Temp_Adc
  6603  000786  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6604  000788  90D8               	bcf	status,0,c
  6605  00078A  3443               	rlcf	_ADC_Buffer_Point,w,c
  6606  00078C  6ED9               	movwf	fsr2l,c
  6607  00078E  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6608  000790  6EDA               	movwf	fsr2h,c
  6609  000792  5005               	movf	??_ADC_ISR,w,c
  6610  000794  26D9               	addwf	fsr2l,f,c
  6611  000796  5006               	movf	??_ADC_ISR+1,w,c
  6612  000798  22DA               	addwfc	fsr2h,f,c
  6613  00079A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6614  00079E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6615                           
  6616                           ;adc.c: 127: Set_4051(7);
  6617  0007A2  0E00               	movlw	0
  6618  0007A4  6E02               	movwf	Set_4051@Channel+1,c
  6619  0007A6  0E07               	movlw	7
  6620  0007A8  6E01               	movwf	Set_4051@Channel,c
  6621  0007AA  EC3A  F011         	call	_Set_4051	;wreg free
  6622                           
  6623                           ;adc.c: 128: ADC_StartConversion(Temp1);
  6624  0007AE  0E0E               	movlw	14
  6625  0007B0  EC86  F011         	call	_ADC_StartConversion
  6626                           
  6627                           ;adc.c: 129: break;
  6628  0007B4  D03B               	goto	i2l2786
  6629  0007B6                     i2l2776:
  6630                           
  6631                           ;adc.c: 131: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6632  0007B6  0EB3               	movlw	low _Temp_Adc
  6633  0007B8  6E05               	movwf	??_ADC_ISR& (0+255),c
  6634  0007BA  0E00               	movlw	high _Temp_Adc
  6635  0007BC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6636  0007BE  90D8               	bcf	status,0,c
  6637  0007C0  3443               	rlcf	_ADC_Buffer_Point,w,c
  6638  0007C2  6ED9               	movwf	fsr2l,c
  6639  0007C4  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6640  0007C6  6EDA               	movwf	fsr2h,c
  6641  0007C8  5005               	movf	??_ADC_ISR,w,c
  6642  0007CA  26D9               	addwf	fsr2l,f,c
  6643  0007CC  5006               	movf	??_ADC_ISR+1,w,c
  6644  0007CE  22DA               	addwfc	fsr2h,f,c
  6645  0007D0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6646  0007D4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6647                           
  6648                           ;adc.c: 132: Temp_Aquire = 0;
  6649  0007D8  0E00               	movlw	0
  6650  0007DA  6E46               	movwf	_Temp_Aquire,c
  6651                           
  6652                           ;adc.c: 133: Temp_Done = 1;
  6653  0007DC  0E00               	movlw	0
  6654  0007DE  0100               	movlb	0	; () banked
  6655  0007E0  6FAC               	movwf	(_Temp_Done+1)& (0+255),b
  6656  0007E2  0E01               	movlw	1
  6657  0007E4  0100               	movlb	0	; () banked
  6658  0007E6  6FAB               	movwf	_Temp_Done& (0+255),b
  6659                           
  6660                           ;adc.c: 134: break;
  6661  0007E8  D021               	goto	i2l2786
  6662  0007EA                     i2l2784:
  6663  0007EA  C043  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  6664  0007EE  C044  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  6665                           
  6666                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6667                           ; Switch size 1, requested type "space"
  6668                           ; Number of cases is 1, Range of values is 0 to 0
  6669                           ; switch strategies available:
  6670                           ; Name         Instructions Cycles
  6671                           ; simple_byte            4     3 (average)
  6672                           ;	Chosen strategy is simple_byte
  6673  0007F2  5006               	movf	??_ADC_ISR+1,w,c
  6674  0007F4  0A00               	xorlw	0	; case 0
  6675  0007F6  A4D8               	btfss	status,2,c
  6676  0007F8  D019               	goto	i2l2786
  6677                           
  6678                           ; Switch size 1, requested type "space"
  6679                           ; Number of cases is 8, Range of values is 0 to 7
  6680                           ; switch strategies available:
  6681                           ; Name         Instructions Cycles
  6682                           ; simple_byte           25    13 (average)
  6683                           ;	Chosen strategy is simple_byte
  6684  0007FA  5005               	movf	??_ADC_ISR,w,c
  6685  0007FC  0A00               	xorlw	0	; case 0
  6686  0007FE  B4D8               	btfsc	status,2,c
  6687  000800  D71D               	goto	i2l2734
  6688  000802  0A01               	xorlw	1	; case 1
  6689  000804  B4D8               	btfsc	status,2,c
  6690  000806  D735               	goto	i2l2740
  6691  000808  0A03               	xorlw	3	; case 2
  6692  00080A  B4D8               	btfsc	status,2,c
  6693  00080C  D74D               	goto	i2l2746
  6694  00080E  0A01               	xorlw	1	; case 3
  6695  000810  B4D8               	btfsc	status,2,c
  6696  000812  D765               	goto	i2l2752
  6697  000814  0A07               	xorlw	7	; case 4
  6698  000816  B4D8               	btfsc	status,2,c
  6699  000818  D77D               	goto	i2l2758
  6700  00081A  0A01               	xorlw	1	; case 5
  6701  00081C  B4D8               	btfsc	status,2,c
  6702  00081E  D795               	goto	i2l2764
  6703  000820  0A03               	xorlw	3	; case 6
  6704  000822  B4D8               	btfsc	status,2,c
  6705  000824  D7AD               	goto	i2l2770
  6706  000826  0A01               	xorlw	1	; case 7
  6707  000828  B4D8               	btfsc	status,2,c
  6708  00082A  D7C5               	goto	i2l2776
  6709  00082C                     i2l2786:
  6710                           
  6711                           ;adc.c: 136: ADC_Buffer_Point++;
  6712  00082C  4A43               	infsnz	_ADC_Buffer_Point,f,c
  6713  00082E  2A44               	incf	_ADC_Buffer_Point+1,f,c
  6714  000830                     i2l2788:
  6715                           
  6716                           ;adc.c: 137: }
  6717                           ;adc.c: 138: if (Current_Aquire){
  6718  000830  5045               	movf	_Current_Aquire,w,c
  6719  000832  B4D8               	btfsc	status,2,c
  6720  000834  D107               	goto	i2l2840
  6721                           
  6722                           ;adc.c: 140: ADC_Result = ADC_GetConversionResult();
  6723  000836  ECCE  F011         	call	_ADC_GetConversionResult	;wreg free
  6724  00083A  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  6725  00083E  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  6726                           
  6727                           ;adc.c: 141: switch ( ADC_Buffer_Point )
  6728  000842  D0D7               	goto	i2l2836
  6729  000844                     i2l2792:
  6730                           
  6731                           ;adc.c: 144: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6732  000844  0E92               	movlw	low _Current_Adc
  6733  000846  6E05               	movwf	??_ADC_ISR& (0+255),c
  6734  000848  0E00               	movlw	high _Current_Adc
  6735  00084A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6736  00084C  90D8               	bcf	status,0,c
  6737  00084E  3443               	rlcf	_ADC_Buffer_Point,w,c
  6738  000850  6ED9               	movwf	fsr2l,c
  6739  000852  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6740  000854  6EDA               	movwf	fsr2h,c
  6741  000856  5005               	movf	??_ADC_ISR,w,c
  6742  000858  26D9               	addwf	fsr2l,f,c
  6743  00085A  5006               	movf	??_ADC_ISR+1,w,c
  6744  00085C  22DA               	addwfc	fsr2h,f,c
  6745  00085E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6746  000862  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6747                           
  6748                           ;adc.c: 145: ADC_StartConversion(Asen);
  6749  000866  0E0B               	movlw	11
  6750  000868  EC86  F011         	call	_ADC_StartConversion
  6751                           
  6752                           ;adc.c: 146: break;
  6753  00086C  D0E9               	goto	i2l2838
  6754  00086E                     i2l2796:
  6755                           
  6756                           ;adc.c: 148: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6757  00086E  0E92               	movlw	low _Current_Adc
  6758  000870  6E05               	movwf	??_ADC_ISR& (0+255),c
  6759  000872  0E00               	movlw	high _Current_Adc
  6760  000874  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6761  000876  90D8               	bcf	status,0,c
  6762  000878  3443               	rlcf	_ADC_Buffer_Point,w,c
  6763  00087A  6ED9               	movwf	fsr2l,c
  6764  00087C  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6765  00087E  6EDA               	movwf	fsr2h,c
  6766  000880  5005               	movf	??_ADC_ISR,w,c
  6767  000882  26D9               	addwf	fsr2l,f,c
  6768  000884  5006               	movf	??_ADC_ISR+1,w,c
  6769  000886  22DA               	addwfc	fsr2h,f,c
  6770  000888  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6771  00088C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6772                           
  6773                           ;adc.c: 149: ADC_StartConversion(Asen);
  6774  000890  0E0B               	movlw	11
  6775  000892  EC86  F011         	call	_ADC_StartConversion
  6776                           
  6777                           ;adc.c: 150: break;
  6778  000896  D0D4               	goto	i2l2838
  6779  000898                     i2l2800:
  6780                           
  6781                           ;adc.c: 152: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6782  000898  0E92               	movlw	low _Current_Adc
  6783  00089A  6E05               	movwf	??_ADC_ISR& (0+255),c
  6784  00089C  0E00               	movlw	high _Current_Adc
  6785  00089E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6786  0008A0  90D8               	bcf	status,0,c
  6787  0008A2  3443               	rlcf	_ADC_Buffer_Point,w,c
  6788  0008A4  6ED9               	movwf	fsr2l,c
  6789  0008A6  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6790  0008A8  6EDA               	movwf	fsr2h,c
  6791  0008AA  5005               	movf	??_ADC_ISR,w,c
  6792  0008AC  26D9               	addwf	fsr2l,f,c
  6793  0008AE  5006               	movf	??_ADC_ISR+1,w,c
  6794  0008B0  22DA               	addwfc	fsr2h,f,c
  6795  0008B2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6796  0008B6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6797                           
  6798                           ;adc.c: 153: ADC_StartConversion(Asen);
  6799  0008BA  0E0B               	movlw	11
  6800  0008BC  EC86  F011         	call	_ADC_StartConversion
  6801                           
  6802                           ;adc.c: 154: break;
  6803  0008C0  D0BF               	goto	i2l2838
  6804  0008C2                     i2l2804:
  6805                           
  6806                           ;adc.c: 156: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6807  0008C2  0E92               	movlw	low _Current_Adc
  6808  0008C4  6E05               	movwf	??_ADC_ISR& (0+255),c
  6809  0008C6  0E00               	movlw	high _Current_Adc
  6810  0008C8  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6811  0008CA  90D8               	bcf	status,0,c
  6812  0008CC  3443               	rlcf	_ADC_Buffer_Point,w,c
  6813  0008CE  6ED9               	movwf	fsr2l,c
  6814  0008D0  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6815  0008D2  6EDA               	movwf	fsr2h,c
  6816  0008D4  5005               	movf	??_ADC_ISR,w,c
  6817  0008D6  26D9               	addwf	fsr2l,f,c
  6818  0008D8  5006               	movf	??_ADC_ISR+1,w,c
  6819  0008DA  22DA               	addwfc	fsr2h,f,c
  6820  0008DC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6821  0008E0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6822                           
  6823                           ;adc.c: 157: ADC_StartConversion(Asen);
  6824  0008E4  0E0B               	movlw	11
  6825  0008E6  EC86  F011         	call	_ADC_StartConversion
  6826                           
  6827                           ;adc.c: 158: break;
  6828  0008EA  D0AA               	goto	i2l2838
  6829  0008EC                     i2l2808:
  6830                           
  6831                           ;adc.c: 160: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6832  0008EC  0E92               	movlw	low _Current_Adc
  6833  0008EE  6E05               	movwf	??_ADC_ISR& (0+255),c
  6834  0008F0  0E00               	movlw	high _Current_Adc
  6835  0008F2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6836  0008F4  90D8               	bcf	status,0,c
  6837  0008F6  3443               	rlcf	_ADC_Buffer_Point,w,c
  6838  0008F8  6ED9               	movwf	fsr2l,c
  6839  0008FA  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6840  0008FC  6EDA               	movwf	fsr2h,c
  6841  0008FE  5005               	movf	??_ADC_ISR,w,c
  6842  000900  26D9               	addwf	fsr2l,f,c
  6843  000902  5006               	movf	??_ADC_ISR+1,w,c
  6844  000904  22DA               	addwfc	fsr2h,f,c
  6845  000906  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6846  00090A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6847                           
  6848                           ;adc.c: 161: ADC_StartConversion(Asen);
  6849  00090E  0E0B               	movlw	11
  6850  000910  EC86  F011         	call	_ADC_StartConversion
  6851                           
  6852                           ;adc.c: 162: break;
  6853  000914  D095               	goto	i2l2838
  6854  000916                     i2l2812:
  6855                           
  6856                           ;adc.c: 164: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6857  000916  0E92               	movlw	low _Current_Adc
  6858  000918  6E05               	movwf	??_ADC_ISR& (0+255),c
  6859  00091A  0E00               	movlw	high _Current_Adc
  6860  00091C  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6861  00091E  90D8               	bcf	status,0,c
  6862  000920  3443               	rlcf	_ADC_Buffer_Point,w,c
  6863  000922  6ED9               	movwf	fsr2l,c
  6864  000924  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6865  000926  6EDA               	movwf	fsr2h,c
  6866  000928  5005               	movf	??_ADC_ISR,w,c
  6867  00092A  26D9               	addwf	fsr2l,f,c
  6868  00092C  5006               	movf	??_ADC_ISR+1,w,c
  6869  00092E  22DA               	addwfc	fsr2h,f,c
  6870  000930  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6871  000934  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6872                           
  6873                           ;adc.c: 165: ADC_StartConversion(Asen);
  6874  000938  0E0B               	movlw	11
  6875  00093A  EC86  F011         	call	_ADC_StartConversion
  6876                           
  6877                           ;adc.c: 166: break;
  6878  00093E  D080               	goto	i2l2838
  6879  000940                     i2l2816:
  6880                           
  6881                           ;adc.c: 168: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6882  000940  0E92               	movlw	low _Current_Adc
  6883  000942  6E05               	movwf	??_ADC_ISR& (0+255),c
  6884  000944  0E00               	movlw	high _Current_Adc
  6885  000946  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6886  000948  90D8               	bcf	status,0,c
  6887  00094A  3443               	rlcf	_ADC_Buffer_Point,w,c
  6888  00094C  6ED9               	movwf	fsr2l,c
  6889  00094E  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6890  000950  6EDA               	movwf	fsr2h,c
  6891  000952  5005               	movf	??_ADC_ISR,w,c
  6892  000954  26D9               	addwf	fsr2l,f,c
  6893  000956  5006               	movf	??_ADC_ISR+1,w,c
  6894  000958  22DA               	addwfc	fsr2h,f,c
  6895  00095A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6896  00095E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6897                           
  6898                           ;adc.c: 169: ADC_StartConversion(Asen);
  6899  000962  0E0B               	movlw	11
  6900  000964  EC86  F011         	call	_ADC_StartConversion
  6901                           
  6902                           ;adc.c: 170: break;
  6903  000968  D06B               	goto	i2l2838
  6904  00096A                     i2l2820:
  6905                           
  6906                           ;adc.c: 172: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6907  00096A  0E92               	movlw	low _Current_Adc
  6908  00096C  6E05               	movwf	??_ADC_ISR& (0+255),c
  6909  00096E  0E00               	movlw	high _Current_Adc
  6910  000970  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6911  000972  90D8               	bcf	status,0,c
  6912  000974  3443               	rlcf	_ADC_Buffer_Point,w,c
  6913  000976  6ED9               	movwf	fsr2l,c
  6914  000978  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6915  00097A  6EDA               	movwf	fsr2h,c
  6916  00097C  5005               	movf	??_ADC_ISR,w,c
  6917  00097E  26D9               	addwf	fsr2l,f,c
  6918  000980  5006               	movf	??_ADC_ISR+1,w,c
  6919  000982  22DA               	addwfc	fsr2h,f,c
  6920  000984  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6921  000988  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6922                           
  6923                           ;adc.c: 173: ADC_StartConversion(Asen);
  6924  00098C  0E0B               	movlw	11
  6925  00098E  EC86  F011         	call	_ADC_StartConversion
  6926                           
  6927                           ;adc.c: 174: break;
  6928  000992  D056               	goto	i2l2838
  6929  000994                     i2l2824:
  6930                           
  6931                           ;adc.c: 176: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6932  000994  0E92               	movlw	low _Current_Adc
  6933  000996  6E05               	movwf	??_ADC_ISR& (0+255),c
  6934  000998  0E00               	movlw	high _Current_Adc
  6935  00099A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6936  00099C  90D8               	bcf	status,0,c
  6937  00099E  3443               	rlcf	_ADC_Buffer_Point,w,c
  6938  0009A0  6ED9               	movwf	fsr2l,c
  6939  0009A2  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6940  0009A4  6EDA               	movwf	fsr2h,c
  6941  0009A6  5005               	movf	??_ADC_ISR,w,c
  6942  0009A8  26D9               	addwf	fsr2l,f,c
  6943  0009AA  5006               	movf	??_ADC_ISR+1,w,c
  6944  0009AC  22DA               	addwfc	fsr2h,f,c
  6945  0009AE  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6946  0009B2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6947                           
  6948                           ;adc.c: 177: ADC_StartConversion(Asen);
  6949  0009B6  0E0B               	movlw	11
  6950  0009B8  EC86  F011         	call	_ADC_StartConversion
  6951                           
  6952                           ;adc.c: 178: break;
  6953  0009BC  D041               	goto	i2l2838
  6954  0009BE                     i2l2828:
  6955                           
  6956                           ;adc.c: 180: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  6957  0009BE  0E92               	movlw	low _Current_Adc
  6958  0009C0  6E05               	movwf	??_ADC_ISR& (0+255),c
  6959  0009C2  0E00               	movlw	high _Current_Adc
  6960  0009C4  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  6961  0009C6  90D8               	bcf	status,0,c
  6962  0009C8  3443               	rlcf	_ADC_Buffer_Point,w,c
  6963  0009CA  6ED9               	movwf	fsr2l,c
  6964  0009CC  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  6965  0009CE  6EDA               	movwf	fsr2h,c
  6966  0009D0  5005               	movf	??_ADC_ISR,w,c
  6967  0009D2  26D9               	addwf	fsr2l,f,c
  6968  0009D4  5006               	movf	??_ADC_ISR+1,w,c
  6969  0009D6  22DA               	addwfc	fsr2h,f,c
  6970  0009D8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6971  0009DC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6972                           
  6973                           ;adc.c: 181: Current_Aquire = 0;
  6974  0009E0  0E00               	movlw	0
  6975  0009E2  6E45               	movwf	_Current_Aquire,c
  6976                           
  6977                           ;adc.c: 182: Current_Done = 1;
  6978  0009E4  0E00               	movlw	0
  6979  0009E6  0100               	movlb	0	; () banked
  6980  0009E8  6FAA               	movwf	(_Current_Done+1)& (0+255),b
  6981  0009EA  0E01               	movlw	1
  6982  0009EC  0100               	movlb	0	; () banked
  6983  0009EE  6FA9               	movwf	_Current_Done& (0+255),b
  6984                           
  6985                           ;adc.c: 183: break;
  6986  0009F0  D027               	goto	i2l2838
  6987  0009F2                     i2l2836:
  6988  0009F2  C043  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  6989  0009F6  C044  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  6990                           
  6991                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6992                           ; Switch size 1, requested type "space"
  6993                           ; Number of cases is 1, Range of values is 0 to 0
  6994                           ; switch strategies available:
  6995                           ; Name         Instructions Cycles
  6996                           ; simple_byte            4     3 (average)
  6997                           ;	Chosen strategy is simple_byte
  6998  0009FA  5006               	movf	??_ADC_ISR+1,w,c
  6999  0009FC  0A00               	xorlw	0	; case 0
  7000  0009FE  A4D8               	btfss	status,2,c
  7001  000A00  D01F               	goto	i2l2838
  7002                           
  7003                           ; Switch size 1, requested type "space"
  7004                           ; Number of cases is 10, Range of values is 0 to 9
  7005                           ; switch strategies available:
  7006                           ; Name         Instructions Cycles
  7007                           ; simple_byte           31    16 (average)
  7008                           ;	Chosen strategy is simple_byte
  7009  000A02  5005               	movf	??_ADC_ISR,w,c
  7010  000A04  0A00               	xorlw	0	; case 0
  7011  000A06  B4D8               	btfsc	status,2,c
  7012  000A08  D71D               	goto	i2l2792
  7013  000A0A  0A01               	xorlw	1	; case 1
  7014  000A0C  B4D8               	btfsc	status,2,c
  7015  000A0E  D72F               	goto	i2l2796
  7016  000A10  0A03               	xorlw	3	; case 2
  7017  000A12  B4D8               	btfsc	status,2,c
  7018  000A14  D741               	goto	i2l2800
  7019  000A16  0A01               	xorlw	1	; case 3
  7020  000A18  B4D8               	btfsc	status,2,c
  7021  000A1A  D753               	goto	i2l2804
  7022  000A1C  0A07               	xorlw	7	; case 4
  7023  000A1E  B4D8               	btfsc	status,2,c
  7024  000A20  D765               	goto	i2l2808
  7025  000A22  0A01               	xorlw	1	; case 5
  7026  000A24  B4D8               	btfsc	status,2,c
  7027  000A26  D777               	goto	i2l2812
  7028  000A28  0A03               	xorlw	3	; case 6
  7029  000A2A  B4D8               	btfsc	status,2,c
  7030  000A2C  D789               	goto	i2l2816
  7031  000A2E  0A01               	xorlw	1	; case 7
  7032  000A30  B4D8               	btfsc	status,2,c
  7033  000A32  D79B               	goto	i2l2820
  7034  000A34  0A0F               	xorlw	15	; case 8
  7035  000A36  B4D8               	btfsc	status,2,c
  7036  000A38  D7AD               	goto	i2l2824
  7037  000A3A  0A01               	xorlw	1	; case 9
  7038  000A3C  B4D8               	btfsc	status,2,c
  7039  000A3E  D7BF               	goto	i2l2828
  7040  000A40                     i2l2838:
  7041                           
  7042                           ;adc.c: 185: ADC_Buffer_Point++;
  7043  000A40  4A43               	infsnz	_ADC_Buffer_Point,f,c
  7044  000A42  2A44               	incf	_ADC_Buffer_Point+1,f,c
  7045  000A44                     i2l2840:
  7046                           
  7047                           ;adc.c: 186: }
  7048                           ;adc.c: 187: if (Volt_Aquire){
  7049  000A44  5047               	movf	_Volt_Aquire,w,c
  7050  000A46  B4D8               	btfsc	status,2,c
  7051  000A48  0012               	return	
  7052                           
  7053                           ;adc.c: 189: ADC_Result = ADC_GetConversionResult();
  7054  000A4A  ECCE  F011         	call	_ADC_GetConversionResult	;wreg free
  7055  000A4E  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  7056  000A52  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  7057                           
  7058                           ;adc.c: 190: switch ( ADC_Buffer_Point )
  7059  000A56  D098               	goto	i2l2876
  7060  000A58                     i2l2844:
  7061                           
  7062                           ;adc.c: 193: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  7063  000A58  0E7E               	movlw	low _Battery_Adc
  7064  000A5A  6E05               	movwf	??_ADC_ISR& (0+255),c
  7065  000A5C  0E00               	movlw	high _Battery_Adc
  7066  000A5E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  7067  000A60  90D8               	bcf	status,0,c
  7068  000A62  3443               	rlcf	_ADC_Buffer_Point,w,c
  7069  000A64  6ED9               	movwf	fsr2l,c
  7070  000A66  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  7071  000A68  6EDA               	movwf	fsr2h,c
  7072  000A6A  5005               	movf	??_ADC_ISR,w,c
  7073  000A6C  26D9               	addwf	fsr2l,f,c
  7074  000A6E  5006               	movf	??_ADC_ISR+1,w,c
  7075  000A70  22DA               	addwfc	fsr2h,f,c
  7076  000A72  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7077  000A76  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7078                           
  7079                           ;adc.c: 194: ADC_StartConversion(AN_CELL2);
  7080  000A7A  0E06               	movlw	6
  7081  000A7C  EC86  F011         	call	_ADC_StartConversion
  7082                           
  7083                           ;adc.c: 195: break;
  7084  000A80  D0A1               	goto	i2l2878
  7085  000A82                     i2l2848:
  7086                           
  7087                           ;adc.c: 197: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  7088  000A82  0E7E               	movlw	low _Battery_Adc
  7089  000A84  6E05               	movwf	??_ADC_ISR& (0+255),c
  7090  000A86  0E00               	movlw	high _Battery_Adc
  7091  000A88  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  7092  000A8A  90D8               	bcf	status,0,c
  7093  000A8C  3443               	rlcf	_ADC_Buffer_Point,w,c
  7094  000A8E  6ED9               	movwf	fsr2l,c
  7095  000A90  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  7096  000A92  6EDA               	movwf	fsr2h,c
  7097  000A94  5005               	movf	??_ADC_ISR,w,c
  7098  000A96  26D9               	addwf	fsr2l,f,c
  7099  000A98  5006               	movf	??_ADC_ISR+1,w,c
  7100  000A9A  22DA               	addwfc	fsr2h,f,c
  7101  000A9C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7102  000AA0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7103                           
  7104                           ;adc.c: 198: ADC_StartConversion(AN_CELL3);
  7105  000AA4  0E05               	movlw	5
  7106  000AA6  EC86  F011         	call	_ADC_StartConversion
  7107                           
  7108                           ;adc.c: 199: break;
  7109  000AAA  D08C               	goto	i2l2878
  7110  000AAC                     i2l2852:
  7111                           
  7112                           ;adc.c: 201: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  7113  000AAC  0E7E               	movlw	low _Battery_Adc
  7114  000AAE  6E05               	movwf	??_ADC_ISR& (0+255),c
  7115  000AB0  0E00               	movlw	high _Battery_Adc
  7116  000AB2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  7117  000AB4  90D8               	bcf	status,0,c
  7118  000AB6  3443               	rlcf	_ADC_Buffer_Point,w,c
  7119  000AB8  6ED9               	movwf	fsr2l,c
  7120  000ABA  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  7121  000ABC  6EDA               	movwf	fsr2h,c
  7122  000ABE  5005               	movf	??_ADC_ISR,w,c
  7123  000AC0  26D9               	addwf	fsr2l,f,c
  7124  000AC2  5006               	movf	??_ADC_ISR+1,w,c
  7125  000AC4  22DA               	addwfc	fsr2h,f,c
  7126  000AC6  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7127  000ACA  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7128                           
  7129                           ;adc.c: 202: ADC_StartConversion(AN_CELL4);
  7130  000ACE  0E04               	movlw	4
  7131  000AD0  EC86  F011         	call	_ADC_StartConversion
  7132                           
  7133                           ;adc.c: 203: break;
  7134  000AD4  D077               	goto	i2l2878
  7135  000AD6                     i2l2856:
  7136                           
  7137                           ;adc.c: 205: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  7138  000AD6  0E7E               	movlw	low _Battery_Adc
  7139  000AD8  6E05               	movwf	??_ADC_ISR& (0+255),c
  7140  000ADA  0E00               	movlw	high _Battery_Adc
  7141  000ADC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  7142  000ADE  90D8               	bcf	status,0,c
  7143  000AE0  3443               	rlcf	_ADC_Buffer_Point,w,c
  7144  000AE2  6ED9               	movwf	fsr2l,c
  7145  000AE4  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  7146  000AE6  6EDA               	movwf	fsr2h,c
  7147  000AE8  5005               	movf	??_ADC_ISR,w,c
  7148  000AEA  26D9               	addwf	fsr2l,f,c
  7149  000AEC  5006               	movf	??_ADC_ISR+1,w,c
  7150  000AEE  22DA               	addwfc	fsr2h,f,c
  7151  000AF0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7152  000AF4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7153                           
  7154                           ;adc.c: 206: ADC_StartConversion(AN_CELL5);
  7155  000AF8  0E03               	movlw	3
  7156  000AFA  EC86  F011         	call	_ADC_StartConversion
  7157                           
  7158                           ;adc.c: 207: break;
  7159  000AFE  D062               	goto	i2l2878
  7160  000B00                     i2l2860:
  7161                           
  7162                           ;adc.c: 209: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  7163  000B00  0E7E               	movlw	low _Battery_Adc
  7164  000B02  6E05               	movwf	??_ADC_ISR& (0+255),c
  7165  000B04  0E00               	movlw	high _Battery_Adc
  7166  000B06  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  7167  000B08  90D8               	bcf	status,0,c
  7168  000B0A  3443               	rlcf	_ADC_Buffer_Point,w,c
  7169  000B0C  6ED9               	movwf	fsr2l,c
  7170  000B0E  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  7171  000B10  6EDA               	movwf	fsr2h,c
  7172  000B12  5005               	movf	??_ADC_ISR,w,c
  7173  000B14  26D9               	addwf	fsr2l,f,c
  7174  000B16  5006               	movf	??_ADC_ISR+1,w,c
  7175  000B18  22DA               	addwfc	fsr2h,f,c
  7176  000B1A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7177  000B1E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7178                           
  7179                           ;adc.c: 210: ADC_StartConversion(AN_CELL6);
  7180  000B22  0E01               	movlw	1
  7181  000B24  EC86  F011         	call	_ADC_StartConversion
  7182                           
  7183                           ;adc.c: 211: break;
  7184  000B28  D04D               	goto	i2l2878
  7185  000B2A                     i2l2864:
  7186                           
  7187                           ;adc.c: 213: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  7188  000B2A  0E7E               	movlw	low _Battery_Adc
  7189  000B2C  6E05               	movwf	??_ADC_ISR& (0+255),c
  7190  000B2E  0E00               	movlw	high _Battery_Adc
  7191  000B30  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  7192  000B32  90D8               	bcf	status,0,c
  7193  000B34  3443               	rlcf	_ADC_Buffer_Point,w,c
  7194  000B36  6ED9               	movwf	fsr2l,c
  7195  000B38  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  7196  000B3A  6EDA               	movwf	fsr2h,c
  7197  000B3C  5005               	movf	??_ADC_ISR,w,c
  7198  000B3E  26D9               	addwf	fsr2l,f,c
  7199  000B40  5006               	movf	??_ADC_ISR+1,w,c
  7200  000B42  22DA               	addwfc	fsr2h,f,c
  7201  000B44  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7202  000B48  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7203                           
  7204                           ;adc.c: 214: ADC_StartConversion(AN_CELL7);
  7205  000B4C  0E00               	movlw	0
  7206  000B4E  EC86  F011         	call	_ADC_StartConversion
  7207                           
  7208                           ;adc.c: 215: break;
  7209  000B52  D038               	goto	i2l2878
  7210  000B54                     i2l2868:
  7211                           
  7212                           ;adc.c: 217: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  7213  000B54  0E7E               	movlw	low _Battery_Adc
  7214  000B56  6E05               	movwf	??_ADC_ISR& (0+255),c
  7215  000B58  0E00               	movlw	high _Battery_Adc
  7216  000B5A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  7217  000B5C  90D8               	bcf	status,0,c
  7218  000B5E  3443               	rlcf	_ADC_Buffer_Point,w,c
  7219  000B60  6ED9               	movwf	fsr2l,c
  7220  000B62  3444               	rlcf	_ADC_Buffer_Point+1,w,c
  7221  000B64  6EDA               	movwf	fsr2h,c
  7222  000B66  5005               	movf	??_ADC_ISR,w,c
  7223  000B68  26D9               	addwf	fsr2l,f,c
  7224  000B6A  5006               	movf	??_ADC_ISR+1,w,c
  7225  000B6C  22DA               	addwfc	fsr2h,f,c
  7226  000B6E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7227  000B72  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7228                           
  7229                           ;adc.c: 218: Volt_Aquire = 0;
  7230  000B76  0E00               	movlw	0
  7231  000B78  6E47               	movwf	_Volt_Aquire,c
  7232                           
  7233                           ;adc.c: 219: Volt_Done = 1;
  7234  000B7A  0E00               	movlw	0
  7235  000B7C  0100               	movlb	0	; () banked
  7236  000B7E  6FAE               	movwf	(_Volt_Done+1)& (0+255),b
  7237  000B80  0E01               	movlw	1
  7238  000B82  0100               	movlb	0	; () banked
  7239  000B84  6FAD               	movwf	_Volt_Done& (0+255),b
  7240                           
  7241                           ;adc.c: 220: break;
  7242  000B86  D01E               	goto	i2l2878
  7243  000B88                     i2l2876:
  7244  000B88  C043  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  7245  000B8C  C044  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  7246                           
  7247                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7248                           ; Switch size 1, requested type "space"
  7249                           ; Number of cases is 1, Range of values is 0 to 0
  7250                           ; switch strategies available:
  7251                           ; Name         Instructions Cycles
  7252                           ; simple_byte            4     3 (average)
  7253                           ;	Chosen strategy is simple_byte
  7254  000B90  5006               	movf	??_ADC_ISR+1,w,c
  7255  000B92  0A00               	xorlw	0	; case 0
  7256  000B94  A4D8               	btfss	status,2,c
  7257  000B96  D016               	goto	i2l2878
  7258                           
  7259                           ; Switch size 1, requested type "space"
  7260                           ; Number of cases is 7, Range of values is 0 to 6
  7261                           ; switch strategies available:
  7262                           ; Name         Instructions Cycles
  7263                           ; simple_byte           22    12 (average)
  7264                           ;	Chosen strategy is simple_byte
  7265  000B98  5005               	movf	??_ADC_ISR,w,c
  7266  000B9A  0A00               	xorlw	0	; case 0
  7267  000B9C  B4D8               	btfsc	status,2,c
  7268  000B9E  D75C               	goto	i2l2844
  7269  000BA0  0A01               	xorlw	1	; case 1
  7270  000BA2  B4D8               	btfsc	status,2,c
  7271  000BA4  D76E               	goto	i2l2848
  7272  000BA6  0A03               	xorlw	3	; case 2
  7273  000BA8  B4D8               	btfsc	status,2,c
  7274  000BAA  D780               	goto	i2l2852
  7275  000BAC  0A01               	xorlw	1	; case 3
  7276  000BAE  B4D8               	btfsc	status,2,c
  7277  000BB0  D792               	goto	i2l2856
  7278  000BB2  0A07               	xorlw	7	; case 4
  7279  000BB4  B4D8               	btfsc	status,2,c
  7280  000BB6  D7A4               	goto	i2l2860
  7281  000BB8  0A01               	xorlw	1	; case 5
  7282  000BBA  B4D8               	btfsc	status,2,c
  7283  000BBC  D7B6               	goto	i2l2864
  7284  000BBE  0A03               	xorlw	3	; case 6
  7285  000BC0  B4D8               	btfsc	status,2,c
  7286  000BC2  D7C8               	goto	i2l2868
  7287  000BC4                     i2l2878:
  7288                           
  7289                           ;adc.c: 222: ADC_Buffer_Point++;
  7290  000BC4  4A43               	infsnz	_ADC_Buffer_Point,f,c
  7291  000BC6  2A44               	incf	_ADC_Buffer_Point+1,f,c
  7292  000BC8  0012               	return	
  7293  000BCA                     __end_of_ADC_ISR:
  7294                           	opt stack 0
  7295                           pclatu	equ	0xFFB
  7296                           pclath	equ	0xFFA
  7297                           tblptru	equ	0xFF8
  7298                           tblptrh	equ	0xFF7
  7299                           tblptrl	equ	0xFF6
  7300                           tablat	equ	0xFF5
  7301                           prodh	equ	0xFF4
  7302                           prodl	equ	0xFF3
  7303                           intcon	equ	0xFF2
  7304                           intcon2	equ	0xFF1
  7305                           postinc0	equ	0xFEE
  7306                           fsr0h	equ	0xFEA
  7307                           fsr0l	equ	0xFE9
  7308                           wreg	equ	0xFE8
  7309                           postinc1	equ	0xFE6
  7310                           postdec1	equ	0xFE5
  7311                           fsr1h	equ	0xFE2
  7312                           fsr1l	equ	0xFE1
  7313                           postinc2	equ	0xFDE
  7314                           postdec2	equ	0xFDD
  7315                           fsr2h	equ	0xFDA
  7316                           fsr2l	equ	0xFD9
  7317                           status	equ	0xFD8
  7318                           
  7319 ;; *************** function _Set_4051 *****************
  7320 ;; Defined at:
  7321 ;;		line 8 in file "Functions.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;  Channel         2    0[COMRAM] int 
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;		None
  7326 ;; Return value:  Size  Location     Type
  7327 ;;		None               void
  7328 ;; Registers used:
  7329 ;;		wreg, status,2, status,0
  7330 ;; Tracked objects:
  7331 ;;		On entry : 0/0
  7332 ;;		On exit  : 0/0
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7335 ;;      Params:         2       0       0       0       0       0       0
  7336 ;;      Locals:         0       0       0       0       0       0       0
  7337 ;;      Temps:          2       0       0       0       0       0       0
  7338 ;;      Totals:         4       0       0       0       0       0       0
  7339 ;;Total ram usage:        4 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; This function calls:
  7342 ;;		Nothing
  7343 ;; This function is called by:
  7344 ;;		_ADC_ISR
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           	psect	text39
  7349  002274                     __ptext39:
  7350                           	opt stack 0
  7351  002274                     _Set_4051:
  7352                           	opt stack 23
  7353                           
  7354                           ;Functions.c: 10: if (Channel & 0x01)
  7355                           
  7356                           ;incstack = 0
  7357  002274  B001               	btfsc	Set_4051@Channel,0,c
  7358                           
  7359                           ;Functions.c: 11: {
  7360                           ;Functions.c: 12: do { LATA7 = ~LATA7; } while(0);
  7361  002276  7E89               	btg	3977,7,c	;volatile
  7362                           
  7363                           ;Functions.c: 13: }
  7364                           ;Functions.c: 14: if ((Channel>>1) & 0x01)
  7365  002278  3402               	rlcf	Set_4051@Channel+1,w,c
  7366  00227A  3002               	rrcf	Set_4051@Channel+1,w,c
  7367  00227C  6E04               	movwf	(??_Set_4051+1)& (0+255),c
  7368  00227E  3001               	rrcf	Set_4051@Channel,w,c
  7369  002280  6E03               	movwf	??_Set_4051& (0+255),c
  7370  002282  B003               	btfsc	??_Set_4051,0,c
  7371                           
  7372                           ;Functions.c: 15: {
  7373                           ;Functions.c: 16: do { LATA6 = ~LATA6; } while(0);
  7374  002284  7C89               	btg	3977,6,c	;volatile
  7375                           
  7376                           ;Functions.c: 17: }
  7377                           ;Functions.c: 18: if ((Channel>>2) & 0x01)
  7378  002286  C001  F003         	movff	Set_4051@Channel,??_Set_4051
  7379  00228A  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
  7380  00228E  3404               	rlcf	??_Set_4051+1,w,c
  7381  002290  3204               	rrcf	??_Set_4051+1,f,c
  7382  002292  3203               	rrcf	??_Set_4051,f,c
  7383  002294  3404               	rlcf	??_Set_4051+1,w,c
  7384  002296  3204               	rrcf	??_Set_4051+1,f,c
  7385  002298  3203               	rrcf	??_Set_4051,f,c
  7386  00229A  A003               	btfss	??_Set_4051,0,c
  7387  00229C  0012               	return	
  7388                           
  7389                           ;Functions.c: 19: {
  7390                           ;Functions.c: 20: do { LATC0 = ~LATC0; } while(0);
  7391  00229E  708B               	btg	3979,0,c	;volatile
  7392  0022A0  0012               	return	
  7393  0022A2                     __end_of_Set_4051:
  7394                           	opt stack 0
  7395                           pclatu	equ	0xFFB
  7396                           pclath	equ	0xFFA
  7397                           tblptru	equ	0xFF8
  7398                           tblptrh	equ	0xFF7
  7399                           tblptrl	equ	0xFF6
  7400                           tablat	equ	0xFF5
  7401                           prodh	equ	0xFF4
  7402                           prodl	equ	0xFF3
  7403                           intcon	equ	0xFF2
  7404                           intcon2	equ	0xFF1
  7405                           postinc0	equ	0xFEE
  7406                           fsr0h	equ	0xFEA
  7407                           fsr0l	equ	0xFE9
  7408                           wreg	equ	0xFE8
  7409                           postinc1	equ	0xFE6
  7410                           postdec1	equ	0xFE5
  7411                           fsr1h	equ	0xFE2
  7412                           fsr1l	equ	0xFE1
  7413                           postinc2	equ	0xFDE
  7414                           postdec2	equ	0xFDD
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function _ADC_StartConversion *****************
  7420 ;; Defined at:
  7421 ;;		line 39 in file "mcc_generated_files/adc.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  channel         1    wreg     enum E8837
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  channel         1    1[COMRAM] enum E8837
  7426 ;; Return value:  Size  Location     Type
  7427 ;;		None               void
  7428 ;; Registers used:
  7429 ;;		wreg, status,2, status,0
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7435 ;;      Params:         0       0       0       0       0       0       0
  7436 ;;      Locals:         1       0       0       0       0       0       0
  7437 ;;      Temps:          1       0       0       0       0       0       0
  7438 ;;      Totals:         2       0       0       0       0       0       0
  7439 ;;Total ram usage:        2 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; This function calls:
  7442 ;;		Nothing
  7443 ;; This function is called by:
  7444 ;;		_ADC_ISR
  7445 ;;		_Battery_Read
  7446 ;;		_Temp_Read
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           	psect	text40
  7451  00230C                     __ptext40:
  7452                           	opt stack 0
  7453  00230C                     _ADC_StartConversion:
  7454                           	opt stack 22
  7455                           
  7456                           ;incstack = 0
  7457                           ;ADC_StartConversion@channel stored from wreg
  7458  00230C  6E02               	movwf	ADC_StartConversion@channel,c
  7459                           
  7460                           ;adc.c: 42: ADCON0bits.CHS = channel;
  7461  00230E  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  7462  002312  4601               	rlncf	??_ADC_StartConversion,f,c
  7463  002314  4601               	rlncf	??_ADC_StartConversion,f,c
  7464  002316  50C2               	movf	4034,w,c	;volatile
  7465  002318  1801               	xorwf	??_ADC_StartConversion,w,c
  7466  00231A  0B83               	andlw	-125
  7467  00231C  1801               	xorwf	??_ADC_StartConversion,w,c
  7468  00231E  6EC2               	movwf	4034,c	;volatile
  7469                           
  7470                           ;adc.c: 45: ADCON0bits.ADON = 1;
  7471  002320  80C2               	bsf	4034,0,c	;volatile
  7472                           
  7473                           ;adc.c: 49: ADCON0bits.GO_nDONE = 1;
  7474  002322  82C2               	bsf	4034,1,c	;volatile
  7475  002324  0012               	return	
  7476  002326                     __end_of_ADC_StartConversion:
  7477                           	opt stack 0
  7478                           pclatu	equ	0xFFB
  7479                           pclath	equ	0xFFA
  7480                           tblptru	equ	0xFF8
  7481                           tblptrh	equ	0xFF7
  7482                           tblptrl	equ	0xFF6
  7483                           tablat	equ	0xFF5
  7484                           prodh	equ	0xFF4
  7485                           prodl	equ	0xFF3
  7486                           intcon	equ	0xFF2
  7487                           intcon2	equ	0xFF1
  7488                           postinc0	equ	0xFEE
  7489                           fsr0h	equ	0xFEA
  7490                           fsr0l	equ	0xFE9
  7491                           wreg	equ	0xFE8
  7492                           postinc1	equ	0xFE6
  7493                           postdec1	equ	0xFE5
  7494                           fsr1h	equ	0xFE2
  7495                           fsr1l	equ	0xFE1
  7496                           postinc2	equ	0xFDE
  7497                           postdec2	equ	0xFDD
  7498                           fsr2h	equ	0xFDA
  7499                           fsr2l	equ	0xFD9
  7500                           status	equ	0xFD8
  7501                           
  7502 ;; *************** function _ADC_GetConversionResult *****************
  7503 ;; Defined at:
  7504 ;;		line 58 in file "mcc_generated_files/adc.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;		None
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;		None
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  2    0[COMRAM] unsigned int 
  7511 ;; Registers used:
  7512 ;;		wreg, status,2, status,0
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7518 ;;      Params:         2       0       0       0       0       0       0
  7519 ;;      Locals:         0       0       0       0       0       0       0
  7520 ;;      Temps:          2       0       0       0       0       0       0
  7521 ;;      Totals:         4       0       0       0       0       0       0
  7522 ;;Total ram usage:        4 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; This function calls:
  7525 ;;		Nothing
  7526 ;; This function is called by:
  7527 ;;		_ADC_ISR
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           	psect	text41
  7532  00239C                     __ptext41:
  7533                           	opt stack 0
  7534  00239C                     _ADC_GetConversionResult:
  7535                           	opt stack 23
  7536                           
  7537                           ;adc.c: 61: return ((ADRESH << 8) + ADRESL);
  7538                           
  7539                           ;incstack = 0
  7540  00239C  50C4               	movf	4036,w,c	;volatile
  7541  00239E  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  7542  0023A0  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  7543  0023A2  50C3               	movf	4035,w,c	;volatile
  7544  0023A4  2403               	addwf	??_ADC_GetConversionResult,w,c
  7545  0023A6  6E01               	movwf	?_ADC_GetConversionResult,c
  7546  0023A8  0E00               	movlw	0
  7547  0023AA  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  7548  0023AC  6E02               	movwf	?_ADC_GetConversionResult+1,c
  7549  0023AE  0012               	return	
  7550  0023B0                     __end_of_ADC_GetConversionResult:
  7551                           	opt stack 0
  7552                           pclatu	equ	0xFFB
  7553                           pclath	equ	0xFFA
  7554                           tblptru	equ	0xFF8
  7555                           tblptrh	equ	0xFF7
  7556                           tblptrl	equ	0xFF6
  7557                           tablat	equ	0xFF5
  7558                           prodh	equ	0xFF4
  7559                           prodl	equ	0xFF3
  7560                           intcon	equ	0xFF2
  7561                           intcon2	equ	0xFF1
  7562                           postinc0	equ	0xFEE
  7563                           fsr0h	equ	0xFEA
  7564                           fsr0l	equ	0xFE9
  7565                           wreg	equ	0xFE8
  7566                           postinc1	equ	0xFE6
  7567                           postdec1	equ	0xFE5
  7568                           fsr1h	equ	0xFE2
  7569                           fsr1l	equ	0xFE1
  7570                           postinc2	equ	0xFDE
  7571                           postdec2	equ	0xFDD
  7572                           fsr2h	equ	0xFDA
  7573                           fsr2l	equ	0xFD9
  7574                           status	equ	0xFD8
  7575                           pclatu	equ	0xFFB
  7576                           pclath	equ	0xFFA
  7577                           tblptru	equ	0xFF8
  7578                           tblptrh	equ	0xFF7
  7579                           tblptrl	equ	0xFF6
  7580                           tablat	equ	0xFF5
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           intcon2	equ	0xFF1
  7585                           postinc0	equ	0xFEE
  7586                           fsr0h	equ	0xFEA
  7587                           fsr0l	equ	0xFE9
  7588                           wreg	equ	0xFE8
  7589                           postinc1	equ	0xFE6
  7590                           postdec1	equ	0xFE5
  7591                           fsr1h	equ	0xFE2
  7592                           fsr1l	equ	0xFE1
  7593                           postinc2	equ	0xFDE
  7594                           postdec2	equ	0xFDD
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599                           	psect	rparam
  7600  0000                     pclatu	equ	0xFFB
  7601                           pclath	equ	0xFFA
  7602                           tblptru	equ	0xFF8
  7603                           tblptrh	equ	0xFF7
  7604                           tblptrl	equ	0xFF6
  7605                           tablat	equ	0xFF5
  7606                           prodh	equ	0xFF4
  7607                           prodl	equ	0xFF3
  7608                           intcon	equ	0xFF2
  7609                           intcon2	equ	0xFF1
  7610                           postinc0	equ	0xFEE
  7611                           fsr0h	equ	0xFEA
  7612                           fsr0l	equ	0xFE9
  7613                           wreg	equ	0xFE8
  7614                           postinc1	equ	0xFE6
  7615                           postdec1	equ	0xFE5
  7616                           fsr1h	equ	0xFE2
  7617                           fsr1l	equ	0xFE1
  7618                           postinc2	equ	0xFDE
  7619                           postdec2	equ	0xFDD
  7620                           fsr2h	equ	0xFDA
  7621                           fsr2l	equ	0xFD9
  7622                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        0
    BSS         350
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     64      73
    BANK0           160     53     156
    BANK1           256      0     240
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 


Critical Paths under _main in COMRAM

    _Temp_Fault->___ftge
    _Temp_Convert->___ftmul
    _log->___ftmul
    _eval_poly->___ftmul
    _Temp_Filter->___ftmul
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Current_Filter->___ftmul
    ___ftadd->___ftmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Current_Read->_ADC_GetConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Current_Fault->___ftadd
    _Current_Convert->_Current_Filter
    _Current_Filter->___ftadd
    ___ftadd->___ftmul
    _Battery_Convert->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  137240
                                             48 BANK0      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                    _Current_Convert
                      _Current_Fault
                              _Delay
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    4851
                                             45 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        13    13      0   69775
                                             35 BANK0     13    13      0
                        _Temp_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   28364
                                             30 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   14491
                                             18 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5753
                                             18 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   14297
                                             18 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    5461
                                             45 COMRAM     7     7      0
                        _Battery_Get
                           _SetBypas
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypas                                             6     2      4     432
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    3829
                                             36 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Delay                                                5     3      2     366
                                             22 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Current_Fault                                        9     9      0   14645
                                             18 BANK0      9     9      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Current_Convert                                      6     6      0   21634
                                             20 BANK0      6     6      0
                     _Current_Filter
                            ___awdiv
                           ___awtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                             22 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Current_Filter                                       2     2      0   14297
                                             18 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5420
                                              6 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    4873
                                             45 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1032
                                             36 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   15635
                                              6 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3743
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4843
                                             55 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4045
                                             40 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2874
                                             36 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2433
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1149
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             3     3      0      59
                                              2 COMRAM     3     3      0
                       _Battery_Read
                       _Current_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Current_Read                                         0     0      0      15
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversion                                    2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1090
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     514
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _Current_Convert
     _Current_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _Current_Fault
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _Delay
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
     _SetBypas
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Current_Read
       _ADC_GetConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F0       6       93.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     35      9C       4       97.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     40      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D5       9        0.0%
DATA                 0      0     1D5      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Jun 05 02:57:54 2015

                       ___awdiv@sign 001C                  ___wmul@multiplicand 0021  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 00D8                         ___ftadd@exp2 00D7  
                       ___ftadd@sign 00D6                                  l311 2230  
                                l512 1CA4                                  l504 1C94  
                                l540 1CE4                                  l533 1CD4  
                                l526 1CC4                                  l519 1CB4  
                                l458 11DA                                  l547 1CF4  
                                l902 0C36                                  l906 0C70  
                                l908 0C98                                  l917 0D82  
                                l926 0DAC                                  l937 1916  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0048                                  _log 14F0  
                    __end_of_ADC_ISR 0BCA                                  wreg 000FE8  
             __size_of_Current_Fault 0188                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 0032                        SetBypas@state 0019  
                       ___ftdiv@sign 0037                                 l3000 1BC0  
                               l3320 0D30                                 l3314 0D04  
                               l3410 17C2                                 l3260 1E40  
                               l3252 1E02                                 l3404 2182  
                               l3316 0D18                                 l3308 0CD0  
                               l3412 184E                                 l2436 1F5A  
                               l3262 1E5E                                 l3254 1E0C  
                               l2702 204E                                 l3334 0DD6  
                               l3326 0D64                                 l3318 0D24  
                               l3264 1E68                                 l3256 1E2A  
                               l3248 1DF4                                 l3360 16A6  
                               l3344 0E24                                 l3328 0D78  
                               l3354 167C                                 l2570 1C88  
                               l3426 1304                                 l3450 155E  
                               l3516 18F0                                 l3292 0C7E  
                               l2652 1EB0                                 l2580 1CD8  
                               l2572 1C98                                 l3444 152C  
                               l3374 16E8                                 l3286 0C44  
                               l3606 111E                                 l2582 1CE8  
                               l2574 1CA8                                 l3710 19F6  
                               l3384 171A                                 l2912 1DDE  
                               l3472 1474                                 l2664 1EE6  
                               l2680 1F18                                 l3624 11E2  
                               l2576 1CB8                                 l3490 188C  
                               l3378 16FE                                 l3298 0C8E  
                               l2666 1EEE                                 l2658 1ED0  
                               l2930 221E                                 l2578 1CC8  
                               l2586 1CF8                                 l3388 1730  
                               l2692 1FF2                                 l2684 1F26  
                               l2676 1F0E                                 l2668 1EF2  
                               l3628 11FE                                 l3496 18B2  
                               l2696 2022                                 l3592 1AF6  
                               l2944 20B6                                 l3578 1082  
                               l3676 197E                                 l3668 1960  
                               l3686 19A0                                 l3696 19C6  
                               l2994 1B84                                 ?_log 00E5  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u1620 1F82  
                               u1628 1F84                                 u3247 2224  
                               u2561 0BE2                                 u2571 0C02  
                               u2771 1662                                 u2951 1876  
                               u2791 168C                                 u2971 189C  
                               u2895 1508                                 _TMR1 000FCE  
                               _WPUB 000F61                                 _main 1948  
                       ___ftpack@arg 0017                         ___ftpack@exp 001A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 log@x 00E5  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 00A0  
                      __CFG_IESO$OFF 000000                         ___ftmul@cntr 00CB  
                       ___ftmul@sign 00CC                    ADC_ISR@ADC_Result 0007  
                              ??_log 0041              __size_of_Current_Filter 0170  
                   ?_Battery_Convert 0001       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 23BE                       Current_Fault@i 00DB  
                              ?_main 00F7                      __end_of___awdiv 1F30  
                    __end_of___ftadd 0E4A                      __end_of___ftdiv 1948  
                    _TMR1_StartTimer 23CA                      __end_of___ftmul 1774  
                    ___awdiv@divisor 0019                                _T1CON 000FCD  
                    __end_of___ftsub 21E2                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATB2 007C52                                _LATA4 007C4C  
                              _LATA6 007C4E                                _LATA7 007C4F  
                              _LATD2 007C62                                _LATD3 007C63  
                              _LATD4 007C64                                _LATD5 007C65  
                              _LATD6 007C66                                _LATD7 007C67  
                     __CFG_DEBUG$OFF 000000                                i2l123 2302  
                              i2l220 0054                                i2l222 005C  
                              i2l226 0066                                i2l218 0048  
                    ___awdiv@counter 001B                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
   __size_of_ADC_GetConversionResult 0014                                _Delay 2214  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        ?_Current_Read 0001  
                   __end_of_TMR1_ISR 2110                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 0028  
                              _fault 00B1                                _frexp 1F30  
                              _errno 00AF                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001B              __end_of_TMR1_Initialize 22EA  
                        _Battery_Adc 007E                                tablat 000FF5  
                        _Battery_Get 21E2                                status 000FD8  
                     __CFG_HFOFST$ON 000000                      RunBypas@cellbyp 002E  
                    RunBypas@batvolt 0030                       __CFG_PBADEN$ON 000000  
                    __initialization 2246                          log@exponent 00E8  
                      _Current_Fault 1088                         __end_of_main 1A22  
                   __end_of_Set_4051 22A2                            ??_ADC_ISR 0005  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 0041  
                   __end_of_SetBypas 1D36             __size_of_Current_Convert 00DA  
                      __activetblptr 000002           ADC_StartConversion@channel 0002  
                             ?_Delay 0017                       ??_Current_Read 0003  
                   __end_of_RunBypas 1BC6                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 0017                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 0017  
                   __end_of___awtoft 21A6                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 1E8C                      Current_Filter@x 00D9  
                             _T1GCON 000FCC                __size_of_Battery_Read 0018  
                     __CFG_WDTEN$OFF 000000                               i2l2800 0898  
                             i2l2820 096A                               i2l2812 0916  
                             i2l2804 08C2                               i2l2740 0672  
                             i2l2716 20EA                               Delay@x 001A  
                             i2l2734 063C                               i2l2824 0994  
                             i2l2816 0940                               i2l2808 08EC  
                             i2l2840 0A44                               i2l2752 06DE  
                             i2l2770 0780                               i2l2746 06A8  
                             i2l2860 0B00                               i2l2852 0AAC  
                             i2l2844 0A58                               i2l2828 09BE  
                             i2l2836 09F2                               i2l2764 074A  
                             i2l2838 0A40                               i2l2758 0714  
                             i2l2864 0B2A                               i2l2856 0AD6  
                             i2l2848 0A82                               i2l2792 0844  
                             i2l2776 07B6                               i2l2784 07EA  
                             i2l2786 082C                               i2l2868 0B54  
                             i2l2876 0B88                               i2l2796 086E  
                             i2l2788 0830                               i2l2878 0BC4  
                      ??_Temp_Filter 0041                               _OSCCON 000FD3  
                         _Temp_Fault 2052                       __CFG_XINST$OFF 000000  
                     ?_Current_Fault 0001                               ___ftge 1FC2  
            __end_of_TMR1_StartTimer 23CE                               ___wmul 22A2  
                          ??___awdiv 001B                            ??___ftadd 00D3  
                     __CFG_STVREN$ON 000000                            ??___ftdiv 002F  
                          ??___ftmul 003E                            ??___ftsub 0041  
                             clear_0 224C                               clear_1 2258  
                             clear_2 2264                     ___awdiv@quotient 001D  
                 __size_of_Temp_Read 0018                ___ftmul@f3_as_product 00C8  
                       _Battery_Read 236E                         _Battery_Volt 0060  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0002        __size_of_INTERRUPT_Initialize 000C  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 2386  
                   __end_oflog@coeff 061C                           __accesstop 0060  
            __end_of__initialization 226A                           ___ftadd@f1 00CD  
                         ___ftadd@f2 00D0                           ___ftge@ff1 0025  
                         ___ftge@ff2 0028                   ?_SYSTEM_Initialize 0001  
                       eval_poly@res 00E2                           ___ftdiv@f1 0029  
                         ___ftdiv@f2 002C                           ___ftdiv@f3 0033  
                        SetBypas@pin 0017                           ___awtoft@c 0025  
                      __end_of_Delay 2246                           ___ftmul@f1 0038  
                         ___ftmul@f2 003B                           ___ftsub@f1 00D9  
                         ___ftsub@f2 00DC                  __end_of_Temp_Filter 1380  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0017                            ?_TMR1_ISR 0001  
                     _Current_Filter 1380                       _Current_Aquire 0045  
                      __end_of_frexp 1FC2                          _Current_Adc 0092  
              Battery_Get@channelnum 0025              _ADC_GetConversionResult 239C  
                            ??_Delay 0019                        ?_Temp_Convert 0001  
                  ??_Current_Convert 00DB                              ??_frexp 001C  
          __end_of_SYSTEM_Initialize 239C                           __pbssBANK0 0060  
                         __pbssBANK1 0100                   __size_of_eval_poly 00F2  
                    __CFG_PLLCFG$OFF 000000                    __end_of_Temp_Read 2356  
                          ?_Set_4051 0001                           __pnvCOMRAM 0048  
              Temp_Convert@steinhart 00F4                          ?_Temp_Fault 0001  
                    ??_Current_Fault 0041                            ?_SetBypas 0017  
                 __CFG_CCP2MX$PORTC1 000000               __end_of_Current_Filter 14F0  
               __end_of_Current_Read 236E                          Temp_Fault@i 002F  
                _TempBattery_Current 0196                              ?___ftge 0025  
                          ?_RunBypas 0001                              ?___wmul 001F  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0003  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 061E  
                          ?___awtoft 0025                            ?___ftpack 0017  
            __size_of_ADC_Initialize 0018                        Temp_Convert@x 00F2  
             __size_of_Battery_Fault 00AE                      Temp_Fault@fault 002E  
                   Current_Convert@x 00DF                   Current_Fault@i_873 00DD  
                     Battery_Fault@i 002F                              _OSCCON2 000FD2  
                     ??_Temp_Convert 00EA                   Current_Fault@fault 00D9  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                       ?_Battery_Get 0025                           ??_Set_4051 0003  
                        _Temp_Filter 1210                          _Temp_Aquire 0046  
                         ??_SetBypas 001B                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                              __Lparam 0000  
                    ?_Current_Filter 0001                           ??_RunBypas 002E  
                    __size_of___ftge 0090                              ___awdiv 1E8C  
                            ___ftadd 0BCA                              ___ftdiv 1866  
                    __size_of___wmul 0026                              ___ftmul 1652  
                            ___ftsub 21A6                         __psmallconst 0600  
          ??_ADC_GetConversionResult 0003                              __pcinit 2246  
                         ??___awtoft 0028                           ??___ftpack 001C  
                  __end_of_eval_poly 1866                              __ramtop 0600  
                            __ptext0 1948                              __ptext1 2052  
                            __ptext2 0E4A                              __ptext3 14F0  
                            __ptext4 1F30                              __ptext5 1774  
                            __ptext6 21A6                              __ptext7 1210  
                            __ptext8 2386                              __ptext9 22C8  
                          _T1CONbits 000FCD                              _infault 00B2  
              _OSCILLATOR_Initialize 23B0                         __size_of_log 0162  
                __size_of_Temp_Fault 006A             ??_PIN_MANAGER_Initialize 0017  
           __size_of_Battery_Convert 00C0           __size_of_SYSTEM_Initialize 0016  
               end_of_initialization 226A                            Delay@wait 0017  
                      __Lmediumconst 0000                        _Battery_Fault 1D36  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                     Battery_Convert@x 00CF  
                _ADC_StartConversion 230C                          _Volt_Aquire 0047  
                     ?_Battery_Fault 0001                __size_of_Current_Read 0018  
                        ___ftdiv@exp 0036                          ___ftmul@exp 00C7  
               ?_ADC_StartConversion 0001                 __end_of_Temp_Convert 1088  
       __end_of_INTERRUPT_Initialize 23CA                       __end_of___ftge 2052  
                     __end_of___wmul 22C8                      _Current_Convert 1A22  
                  __size_of_TMR1_ISR 0054                       _ADC_Initialize 2326  
             ?_OSCILLATOR_Initialize 0001                  start_initialization 2246  
                         eval_poly@d 00DC                           eval_poly@n 00DE  
                         eval_poly@x 00D9                 _Current_Convert$1516 00DD  
    __size_of_PIN_MANAGER_Initialize 004E                         _Current_Done 00A9  
                       _Current_Mean 00A6                         _Current_Read 2356  
                        __end_of_log 1652                           frexp@value 0017  
                  ??_Battery_Convert 00CD                 __size_of_Battery_Get 0032  
                       ??_Temp_Fault 002E                    __size_of_Set_4051 002E  
                          _Temp_DegF 0178                     _PrevBattery_Volt 013C  
                          _Temp_Done 00AB                            _Temp_Read 233E  
              ??_ADC_StartConversion 0001             __size_of_TMR1_Initialize 0022  
                  __size_of_SetBypas 00B0                             ??___ftge 002B  
                           ??___wmul 0023               __end_of_ADC_Initialize 233E  
                          RunBypas@i 0033                             ?_ADC_ISR 0001  
                  __size_of_RunBypas 00CA                    __size_of___awtoft 0048  
                  __size_of___ftpack 00A8                            _Volt_Done 00AD  
              TMR1_ISR@CountCallBack 0041                          __pbssCOMRAM 0041  
                      __pcstackBANK0 00C7                   __end_of_Temp_Fault 20BC  
                      _PrevTemp_DegF 015A                      ??_Battery_Fault 002E  
                       ?_Temp_Filter 0001                     ??_Current_Filter 0041  
                         ?_Temp_Read 0001               _PIN_MANAGER_Initialize 2110  
              __end_of_Current_Fault 1210              __end_of_Current_Convert 1AFC  
                          __pintcode 0008                    _Temp_Convert$1514 00EC  
                  _Temp_Convert$1515 00EF                             ?___awdiv 0017  
                           ?___ftadd 00CD                             ?___ftdiv 0029  
                           ?___ftmul 0038                             ?___ftsub 00D9  
                       Temp_Filter@x 00D9                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 0009                    Current_Fault@temp 00DF  
                        __smallconst 0600             __size_of_TMR1_StartTimer 0004  
                          _eval_poly 1774                       __size_of_Delay 0032  
                     __size_of_frexp 0092                 _INTERRUPT_Initialize 23BE  
                     ___wmul@product 0023                __size_of_Temp_Convert 023E  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 0098                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                           _TMR1_ISR 20BC                    ??_TMR1_Initialize 0017  
                   __size_of_ADC_ISR 05AC                  _PrevBattery_Current 011E  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 001F  
                      ?_Battery_Read 0001                           ?_eval_poly 00D9  
                       _Temp_Convert 0E4A                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0001                             _Set_4051 2274  
                          frexp@eptr 001A                             _SetBypas 1C86  
                           __Hrparam 0000                          ??_Temp_Read 0003  
                           _Temp_Adc 00B3                             __Lrparam 0000  
           ?_ADC_GetConversionResult 0001                    _ADC_GetConversion 22EA  
                   ?_Current_Convert 0001                   __CFG_BOREN$SBORDIS 000000  
                           _RunBypas 1AFC                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0017                   ?_ADC_GetConversion 0001  
                   __size_of___awdiv 00A4                     __size_of___ftadd 0280  
                   __size_of___ftdiv 00E2                     __size_of___ftmul 0122  
                   __size_of___ftsub 003C                             ___awtoft 215E  
                           ___ftpack 1DE4                       ??_Battery_Read 0003  
                ??_ADC_GetConversion 0001                      _Battery_Convert 1BC6  
                 Battery_Fault@fault 002E                      _Battery_Current 0100  
                           __ptext10 23CA                             __ptext11 2110  
                           __ptext20 1A22                             __ptext12 23B0  
                           __ptext21 1E8C                             __ptext13 23BE  
                         _T1GCONbits 000FCC                             __ptext30 215E  
                           __ptext22 1380                             __ptext14 2326  
                           __ptext31 1DE4                             __ptext23 0BCA  
                           __ptext15 1AFC                             __ptext40 230C  
                           __ptext24 1D36                             __ptext16 1C86  
                           __ptext41 239C                             __ptext33 20BC  
                           __ptext25 1FC2                             __ptext17 21E2  
                           __ptext34 233E                             __ptext26 1BC6  
                           __ptext18 2214                             __ptext35 2356  
                           __ptext27 22A2                             __ptext19 1088  
                           __ptext36 22EA                             __ptext28 1652  
                           __ptext37 236E                             __ptext29 1866  
                           __ptext38 061E                             __ptext39 2274  
                  ??_TMR1_StartTimer 0017                        __size_of_main 00DA  
          __end_of_ADC_GetConversion 230C                         _TmpTemp_DegF 01D2  
               __size_of_Temp_Filter 0170   __end_of_INTERRUPT_InterruptManager 00A0  
         _INTERRUPT_InterruptManager 0008                             main@argc 00F7  
                           main@argv 00F9                             log@coeff 0601  
                         _INTCONbits 000FF2                          ??_eval_poly 00E0  
             ??_INTERRUPT_Initialize 0017                        ??_Battery_Get 0028  
                           intlevel2 0000          __end_of_ADC_StartConversion 2326  
                   _TempBattery_Volt 01B4              ?_PIN_MANAGER_Initialize 0001  
    __end_of_ADC_GetConversionResult 23B0                     ??_ADC_Initialize 0017  
            __end_of_Battery_Convert 1C86                    __CFG_T3CMX$PORTC0 000000  
     __end_of_PIN_MANAGER_Initialize 215E                __end_of_Battery_Fault 1DE4  
                  __CFG_FOSC$INTIO67 000000           __size_of_ADC_GetConversion 0022  
               __end_of_Battery_Read 2386                      _TMR1_Initialize 22C8  
                   _ADC_Buffer_Point 0043                  __end_of_Battery_Get 2214  
                    Set_4051@Channel 0001  
