

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Jun 06 14:19:38 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	smallconst
    74  000600                     __psmallconst:
    75                           	opt stack 0
    76  000600  00                 	db	0
    77  000601                     _dpowers:
    78                           	opt stack 0
    79  000601  0001               	dw	1
    80  000603  0000               	dw	0
    81  000605  000A               	dw	10
    82  000607  0000               	dw	0
    83  000609  0064               	dw	100
    84  00060B  0000               	dw	0
    85  00060D  03E8               	dw	1000
    86  00060F  0000               	dw	0
    87  000611  2710               	dw	10000
    88  000613  0000               	dw	0
    89  000615  86A0               	dw	34464
    90  000617  0001               	dw	1
    91  000619  4240               	dw	16960
    92  00061B  000F               	dw	15
    93  00061D  9680               	dw	38528
    94  00061F  0098               	dw	152
    95  000621  E100               	dw	57600
    96  000623  05F5               	dw	1525
    97  000625  CA00               	dw	51712
    98  000627  3B9A               	dw	15258
    99  000629                     __end_of_dpowers:
   100                           	opt stack 0
   101  000629                     __npowers_:
   102                           	opt stack 0
   103  000629  00                 	db	0
   104  00062A  80                 	db	128
   105  00062B  3F                 	db	63
   106  00062C  CD                 	db	205
   107  00062D  CC                 	db	204
   108  00062E  3D                 	db	61
   109  00062F  D7                 	db	215
   110  000630  23                 	db	35
   111  000631  3C                 	db	60
   112  000632  12                 	db	18
   113  000633  83                 	db	131
   114  000634  3A                 	db	58
   115  000635  B7                 	db	183
   116  000636  D1                 	db	209
   117  000637  38                 	db	56
   118  000638  C6                 	db	198
   119  000639  27                 	db	39
   120  00063A  37                 	db	55
   121  00063B  38                 	db	56
   122  00063C  86                 	db	134
   123  00063D  35                 	db	53
   124  00063E  C0                 	db	192
   125  00063F  D6                 	db	214
   126  000640  33                 	db	51
   127  000641  CC                 	db	204
   128  000642  2B                 	db	43
   129  000643  32                 	db	50
   130  000644  70                 	db	112
   131  000645  89                 	db	137
   132  000646  30                 	db	48
   133  000647  E7                 	db	231
   134  000648  DB                 	db	219
   135  000649  2E                 	db	46
   136  00064A  E5                 	db	229
   137  00064B  3C                 	db	60
   138  00064C  1E                 	db	30
   139  00064D  42                 	db	66
   140  00064E  A2                 	db	162
   141  00064F  0D                 	db	13
   142  000650                     __end_of__npowers_:
   143                           	opt stack 0
   144  000650                     __powers_:
   145                           	opt stack 0
   146  000650  00                 	db	0
   147  000651  80                 	db	128
   148  000652  3F                 	db	63
   149  000653  00                 	db	0
   150  000654  20                 	db	32
   151  000655  41                 	db	65
   152  000656  00                 	db	0
   153  000657  C8                 	db	200
   154  000658  42                 	db	66
   155  000659  00                 	db	0
   156  00065A  7A                 	db	122
   157  00065B  44                 	db	68
   158  00065C  40                 	db	64
   159  00065D  1C                 	db	28
   160  00065E  46                 	db	70
   161  00065F  50                 	db	80
   162  000660  C3                 	db	195
   163  000661  47                 	db	71
   164  000662  24                 	db	36
   165  000663  74                 	db	116
   166  000664  49                 	db	73
   167  000665  97                 	db	151
   168  000666  18                 	db	24
   169  000667  4B                 	db	75
   170  000668  BC                 	db	188
   171  000669  BE                 	db	190
   172  00066A  4C                 	db	76
   173  00066B  6B                 	db	107
   174  00066C  6E                 	db	110
   175  00066D  4E                 	db	78
   176  00066E  03                 	db	3
   177  00066F  15                 	db	21
   178  000670  50                 	db	80
   179  000671  79                 	db	121
   180  000672  AD                 	db	173
   181  000673  60                 	db	96
   182  000674  F3                 	db	243
   183  000675  49                 	db	73
   184  000676  71                 	db	113
   185  000677                     __end_of__powers_:
   186                           	opt stack 0
   187  000677                     log@coeff:
   188                           	opt stack 0
   189  000677  00                 	db	0
   190  000678  00                 	db	0
   191  000679  00                 	db	0
   192  00067A  00                 	db	0
   193  00067B  80                 	db	128
   194  00067C  3F                 	db	63
   195  00067D  F0                 	db	240
   196  00067E  FF                 	db	255
   197  00067F  BE                 	db	190
   198  000680  E2                 	db	226
   199  000681  A9                 	db	169
   200  000682  3E                 	db	62
   201  000683  83                 	db	131
   202  000684  76                 	db	118
   203  000685  BE                 	db	190
   204  000686  AE                 	db	174
   205  000687  2B                 	db	43
   206  000688  3E                 	db	62
   207  000689  3C                 	db	60
   208  00068A  C3                 	db	195
   209  00068B  BD                 	db	189
   210  00068C  D2                 	db	210
   211  00068D  13                 	db	19
   212  00068E  3D                 	db	61
   213  00068F  78                 	db	120
   214  000690  D3                 	db	211
   215  000691  BB                 	db	187
   216  000692                     __end_oflog@coeff:
   217                           	opt stack 0
   218  000692                     STR_1:
   219  000692  43                 	db	67	;'C'
   220  000693  75                 	db	117	;'u'
   221  000694  72                 	db	114	;'r'
   222  000695  72                 	db	114	;'r'
   223  000696  65                 	db	101	;'e'
   224  000697  6E                 	db	110	;'n'
   225  000698  74                 	db	116	;'t'
   226  000699  20                 	db	32
   227  00069A  25                 	db	37
   228  00069B  64                 	db	100	;'d'
   229  00069C  20                 	db	32
   230  00069D  3D                 	db	61	;'='
   231  00069E  20                 	db	32
   232  00069F  25                 	db	37
   233  0006A0  30                 	db	48	;'0'
   234  0006A1  2E                 	db	46
   235  0006A2  30                 	db	48	;'0'
   236  0006A3  32                 	db	50	;'2'
   237  0006A4  66                 	db	102	;'f'
   238  0006A5  20                 	db	32
   239  0006A6  0D                 	db	13
   240  0006A7  0A                 	db	10
   241  0006A8  00                 	db	0
   242  0006A9                     STR_2:
   243  0006A9  46                 	db	70	;'F'
   244  0006AA  41                 	db	65	;'A'
   245  0006AB  55                 	db	85	;'U'
   246  0006AC  4C                 	db	76	;'L'
   247  0006AD  54                 	db	84	;'T'
   248  0006AE  20                 	db	32
   249  0006AF  0D                 	db	13
   250  0006B0  0A                 	db	10
   251  0006B1  00                 	db	0
   252                           
   253                           ; #config settings
   254  0006B2  00                 	db	0	; dummy byte at the end
   255  0000                     
   256                           	psect	nvCOMRAM
   257  000048                     __pnvCOMRAM:
   258                           	opt stack 0
   259  000048                     _timer1ReloadVal:
   260                           	opt stack 0
   261  000048                     	ds	2
   262  0000                     _ANSELA	set	3896
   263  0000                     _ANSELB	set	3897
   264  0000                     _ANSELC	set	3898
   265  0000                     _ANSELD	set	3899
   266  0000                     _ANSELE	set	3900
   267  0000                     _TMR1	set	4046
   268  0000                     _ADCON0	set	4034
   269  0000                     _ADCON0bits	set	4034
   270  0000                     _ADCON1	set	4033
   271  0000                     _ADCON2	set	4032
   272  0000                     _ADRESH	set	4036
   273  0000                     _ADRESL	set	4035
   274  0000                     _INTCON2bits	set	4081
   275  0000                     _INTCONbits	set	4082
   276  0000                     _IPR1bits	set	3999
   277  0000                     _LATA	set	3977
   278  0000                     _LATB	set	3978
   279  0000                     _LATC	set	3979
   280  0000                     _LATD	set	3980
   281  0000                     _LATE	set	3981
   282  0000                     _OSCCON	set	4051
   283  0000                     _OSCCON2	set	4050
   284  0000                     _OSCTUNE	set	3995
   285  0000                     _PIE1bits	set	3997
   286  0000                     _PIR1bits	set	3998
   287  0000                     _RCONbits	set	4048
   288  0000                     _T1CON	set	4045
   289  0000                     _T1CONbits	set	4045
   290  0000                     _T1GCON	set	4044
   291  0000                     _T1GCONbits	set	4044
   292  0000                     _TMR1H	set	4047
   293  0000                     _TMR1L	set	4046
   294  0000                     _TRISA	set	3986
   295  0000                     _TRISB	set	3987
   296  0000                     _TRISC	set	3988
   297  0000                     _TRISD	set	3989
   298  0000                     _TRISE	set	3990
   299  0000                     _WPUB	set	3937
   300  0000                     _LATA4	set	31820
   301  0000                     _LATA6	set	31822
   302  0000                     _LATA7	set	31823
   303  0000                     _LATB0	set	31824
   304  0000                     _LATB1	set	31825
   305  0000                     _LATB2	set	31826
   306  0000                     _LATC0	set	31832
   307  0000                     _LATD2	set	31842
   308  0000                     _LATD3	set	31843
   309  0000                     _LATD4	set	31844
   310  0000                     _LATD5	set	31845
   311  0000                     _LATD6	set	31846
   312  0000                     _LATD7	set	31847
   313                           
   314                           	psect	cinit
   315  003AFC                     __pcinit:
   316                           	opt stack 0
   317  003AFC                     start_initialization:
   318                           	opt stack 0
   319  003AFC                     __initialization:
   320                           	opt stack 0
   321                           
   322                           ; Clear objects allocated to BANK2 (30 bytes)
   323  003AFC  EE02  F000         	lfsr	0,__pbssBANK2
   324  003B00  0E1E               	movlw	30
   325  003B02                     clear_0:
   326  003B02  6AEE               	clrf	postinc0,c
   327  003B04  06E8               	decf	wreg,f,c
   328  003B06  E1FD               	bnz	clear_0
   329                           
   330                           ; Clear objects allocated to BANK1 (240 bytes)
   331  003B08  EE01  F000         	lfsr	0,__pbssBANK1
   332  003B0C  0EF0               	movlw	240
   333  003B0E                     clear_1:
   334  003B0E  6AEE               	clrf	postinc0,c
   335  003B10  06E8               	decf	wreg,f,c
   336  003B12  E1FD               	bnz	clear_1
   337                           
   338                           ; Clear objects allocated to BANK0 (70 bytes)
   339  003B14  EE00  F0B4         	lfsr	0,__pbssBANK0
   340  003B18  0E46               	movlw	70
   341  003B1A                     clear_2:
   342  003B1A  6AEE               	clrf	postinc0,c
   343  003B1C  06E8               	decf	wreg,f,c
   344  003B1E  E1FD               	bnz	clear_2
   345                           
   346                           ; Clear objects allocated to COMRAM (10 bytes)
   347  003B20  EE00  F03E         	lfsr	0,__pbssCOMRAM
   348  003B24  0E0A               	movlw	10
   349  003B26                     clear_3:
   350  003B26  6AEE               	clrf	postinc0,c
   351  003B28  06E8               	decf	wreg,f,c
   352  003B2A  E1FD               	bnz	clear_3
   353  003B2C                     end_of_initialization:
   354                           	opt stack 0
   355  003B2C                     __end_of__initialization:
   356                           	opt stack 0
   357  003B2C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   358  003B2E  6EF8               	movwf	tblptru,c
   359  003B30  0100               	movlb	0
   360  003B32  EF1C  F017         	goto	_main	;jump to C main() function
   361                           tblptru	equ	0xFF8
   362                           postinc0	equ	0xFEE
   363                           wreg	equ	0xFE8
   364                           
   365                           	psect	bssCOMRAM
   366  00003E                     __pbssCOMRAM:
   367                           	opt stack 0
   368  00003E                     _Current_Mean:
   369                           	opt stack 0
   370  00003E                     	ds	3
   371  000041                     TMR1_ISR@CountCallBack:
   372                           	opt stack 0
   373  000041                     	ds	2
   374  000043                     _ADC_Buffer_Point:
   375                           	opt stack 0
   376  000043                     	ds	2
   377  000045                     _Current_Aquire:
   378                           	opt stack 0
   379  000045                     	ds	1
   380  000046                     _Temp_Aquire:
   381                           	opt stack 0
   382  000046                     	ds	1
   383  000047                     _Volt_Aquire:
   384                           	opt stack 0
   385  000047                     	ds	1
   386                           tblptru	equ	0xFF8
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           
   390                           	psect	bssBANK0
   391  0000B4                     __pbssBANK0:
   392                           	opt stack 0
   393  0000B4                     _Battery_Adc:
   394                           	opt stack 0
   395  0000B4                     	ds	20
   396  0000C8                     _Current_Adc:
   397                           	opt stack 0
   398  0000C8                     	ds	20
   399  0000DC                     _Current_Done:
   400                           	opt stack 0
   401  0000DC                     	ds	2
   402  0000DE                     _Temp_Done:
   403                           	opt stack 0
   404  0000DE                     	ds	2
   405  0000E0                     _Volt_Done:
   406                           	opt stack 0
   407  0000E0                     	ds	2
   408  0000E2                     _errno:
   409                           	opt stack 0
   410  0000E2                     	ds	2
   411  0000E4                     _fault:
   412                           	opt stack 0
   413  0000E4                     	ds	1
   414  0000E5                     _infault:
   415                           	opt stack 0
   416  0000E5                     	ds	1
   417  0000E6                     _Temp_Adc:
   418                           	opt stack 0
   419  0000E6                     	ds	20
   420                           tblptru	equ	0xFF8
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           
   424                           	psect	bssBANK1
   425  000100                     __pbssBANK1:
   426                           	opt stack 0
   427  000100                     _Battery_Current:
   428                           	opt stack 0
   429  000100                     	ds	30
   430  00011E                     _Battery_Volt:
   431                           	opt stack 0
   432  00011E                     	ds	30
   433  00013C                     _PrevBattery_Current:
   434                           	opt stack 0
   435  00013C                     	ds	30
   436  00015A                     _PrevBattery_Volt:
   437                           	opt stack 0
   438  00015A                     	ds	30
   439  000178                     _PrevTemp_DegF:
   440                           	opt stack 0
   441  000178                     	ds	30
   442  000196                     _Temp_DegF:
   443                           	opt stack 0
   444  000196                     	ds	30
   445  0001B4                     _TempBattery_Current:
   446                           	opt stack 0
   447  0001B4                     	ds	30
   448  0001D2                     _TmpTemp_DegF:
   449                           	opt stack 0
   450  0001D2                     	ds	30
   451                           tblptru	equ	0xFF8
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           
   455                           	psect	bssBANK2
   456  000200                     __pbssBANK2:
   457                           	opt stack 0
   458  000200                     _TempBattery_Volt:
   459                           	opt stack 0
   460  000200                     	ds	30
   461                           tblptru	equ	0xFF8
   462                           postinc0	equ	0xFEE
   463                           wreg	equ	0xFE8
   464                           
   465                           	psect	cstackBANK0
   466  000060                     __pcstackBANK0:
   467                           	opt stack 0
   468  000060                     ?___ftmul:
   469                           	opt stack 0
   470  000060                     ___ftmul@f1:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0x0
   474  000060                     	ds	3
   475  000063                     ___ftmul@f2:
   476                           	opt stack 0
   477                           
   478                           ; 3 bytes @ 0x3
   479  000063                     	ds	3
   480  000066                     ??___ftmul:
   481                           
   482                           ; 0 bytes @ 0x6
   483  000066                     	ds	3
   484  000069                     ___ftmul@exp:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x9
   488  000069                     	ds	1
   489  00006A                     ___ftmul@f3_as_product:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0xA
   493  00006A                     	ds	3
   494  00006D                     ___ftmul@cntr:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0xD
   498  00006D                     	ds	1
   499  00006E                     ___ftmul@sign:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0xE
   503  00006E                     	ds	1
   504  00006F                     ?_fround:
   505                           	opt stack 0
   506  00006F                     ?_scale:
   507                           	opt stack 0
   508  00006F                     Battery_Convert@x:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0xF
   512  00006F                     	ds	3
   513  000072                     _fround$1608:
   514                           	opt stack 0
   515  000072                     _scale$1609:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x12
   519  000072                     	ds	3
   520  000075                     scale@scl:
   521                           	opt stack 0
   522  000075                     _fround$1607:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x15
   526  000075                     	ds	1
   527  000076                     ?___fttol:
   528                           	opt stack 0
   529  000076                     ___fttol@f1:
   530                           	opt stack 0
   531                           
   532                           ; 3 bytes @ 0x16
   533  000076                     	ds	2
   534  000078                     fround@prec:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x18
   538  000078                     	ds	1
   539  000079                     ?___ftadd:
   540                           	opt stack 0
   541  000079                     ___ftadd@f1:
   542                           	opt stack 0
   543                           
   544                           ; 3 bytes @ 0x19
   545  000079                     	ds	1
   546  00007A                     ??___fttol:
   547                           
   548                           ; 0 bytes @ 0x1A
   549  00007A                     	ds	2
   550  00007C                     ___ftadd@f2:
   551                           	opt stack 0
   552                           
   553                           ; 3 bytes @ 0x1C
   554  00007C                     	ds	3
   555  00007F                     ??___ftadd:
   556  00007F                     ___fttol@sign1:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x1F
   560  00007F                     	ds	1
   561  000080                     ___fttol@lval:
   562                           	opt stack 0
   563                           
   564                           ; 4 bytes @ 0x20
   565  000080                     	ds	2
   566  000082                     ___ftadd@sign:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x22
   570  000082                     	ds	1
   571  000083                     ___ftadd@exp2:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x23
   575  000083                     	ds	1
   576  000084                     ___ftadd@exp1:
   577                           	opt stack 0
   578  000084                     ___fttol@exp1:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x24
   582  000084                     	ds	1
   583  000085                     ?___ftsub:
   584                           	opt stack 0
   585  000085                     ?_eval_poly:
   586                           	opt stack 0
   587  000085                     Temp_Filter@x:
   588                           	opt stack 0
   589  000085                     Current_Fault@fault:
   590                           	opt stack 0
   591  000085                     Current_Filter@x:
   592                           	opt stack 0
   593  000085                     ___ftsub@f1:
   594                           	opt stack 0
   595  000085                     eval_poly@x:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0x25
   599  000085                     	ds	2
   600  000087                     Current_Fault@i:
   601                           	opt stack 0
   602  000087                     _Current_Convert$1606:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x27
   606  000087                     	ds	1
   607  000088                     eval_poly@d:
   608                           	opt stack 0
   609  000088                     ___ftsub@f2:
   610                           	opt stack 0
   611                           
   612                           ; 3 bytes @ 0x28
   613  000088                     	ds	1
   614  000089                     Current_Fault@i_884:
   615                           	opt stack 0
   616  000089                     Current_Convert@x:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x29
   620  000089                     	ds	1
   621  00008A                     eval_poly@n:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x2A
   625  00008A                     	ds	1
   626  00008B                     ?_printf:
   627                           	opt stack 0
   628  00008B                     printf@f:
   629                           	opt stack 0
   630  00008B                     Current_Fault@temp:
   631                           	opt stack 0
   632                           
   633                           ; 3 bytes @ 0x2B
   634  00008B                     	ds	1
   635  00008C                     ??_eval_poly:
   636                           
   637                           ; 0 bytes @ 0x2C
   638  00008C                     	ds	2
   639  00008E                     eval_poly@res:
   640                           	opt stack 0
   641                           
   642                           ; 3 bytes @ 0x2E
   643  00008E                     	ds	2
   644  000090                     ??_printf:
   645                           
   646                           ; 0 bytes @ 0x30
   647  000090                     	ds	1
   648  000091                     ?_log:
   649                           	opt stack 0
   650  000091                     log@x:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0x31
   654  000091                     	ds	3
   655  000094                     log@exponent:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x34
   659  000094                     	ds	2
   660  000096                     _Temp_Convert$1604:
   661                           	opt stack 0
   662  000096                     _printf$1610:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x36
   666  000096                     	ds	3
   667  000099                     printf@ap:
   668                           	opt stack 0
   669  000099                     _Temp_Convert$1605:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x39
   673  000099                     	ds	2
   674  00009B                     printf@tmpval:
   675                           	opt stack 0
   676                           
   677                           ; 4 bytes @ 0x3B
   678  00009B                     	ds	1
   679  00009C                     Temp_Convert@x:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x3C
   683  00009C                     	ds	2
   684  00009E                     Temp_Convert@steinhart:
   685                           	opt stack 0
   686                           
   687                           ; 3 bytes @ 0x3E
   688  00009E                     	ds	1
   689  00009F                     printf@val:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x3F
   693  00009F                     	ds	4
   694  0000A3                     printf@exp:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x43
   698  0000A3                     	ds	2
   699  0000A5                     printf@flag:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x45
   703  0000A5                     	ds	2
   704  0000A7                     printf@width:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x47
   708  0000A7                     	ds	2
   709  0000A9                     printf@fval:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x49
   713  0000A9                     	ds	3
   714  0000AC                     printf@prec:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x4C
   718  0000AC                     	ds	2
   719  0000AE                     printf@c:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x4E
   723  0000AE                     	ds	1
   724  0000AF                     
   725                           ; 2 bytes @ 0x4F
   726  0000AF                     	ds	2
   727  0000B1                     
   728                           ; 3 bytes @ 0x51
   729  0000B1                     	ds	3
   730                           tblptru	equ	0xFF8
   731                           postinc0	equ	0xFEE
   732                           wreg	equ	0xFE8
   733                           
   734                           	psect	cstackCOMRAM
   735  000001                     __pcstackCOMRAM:
   736                           	opt stack 0
   737  000001                     ??_ADC_StartConversion:
   738  000001                     ??_ADC_GetConversion:
   739  000001                     ?_ADC_GetConversionResult:
   740                           	opt stack 0
   741  000001                     Set_4051@Channel:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x0
   745  000001                     	ds	1
   746  000002                     ADC_StartConversion@channel:
   747                           	opt stack 0
   748  000002                     ADC_GetConversion@channel:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x1
   752  000002                     	ds	1
   753  000003                     ??_Set_4051:
   754  000003                     ??_ADC_GetConversionResult:
   755                           
   756                           ; 0 bytes @ 0x2
   757  000003                     	ds	2
   758  000005                     ??_ADC_ISR:
   759                           
   760                           ; 0 bytes @ 0x4
   761  000005                     	ds	2
   762  000007                     ADC_ISR@ADC_Result:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x6
   766  000007                     	ds	2
   767  000009                     ??_INTERRUPT_InterruptManager:
   768                           
   769                           ; 0 bytes @ 0x8
   770  000009                     	ds	14
   771  000017                     ??_isdigit:
   772  000017                     ?___awmod:
   773                           	opt stack 0
   774  000017                     ?_Current_Get:
   775                           	opt stack 0
   776  000017                     ?___ftpack:
   777                           	opt stack 0
   778  000017                     ?_frexp:
   779                           	opt stack 0
   780  000017                     ?___ftneg:
   781                           	opt stack 0
   782  000017                     ?__tdiv_to_l_:
   783                           	opt stack 0
   784  000017                     ?__div_to_l_:
   785                           	opt stack 0
   786  000017                     ?___lldiv:
   787                           	opt stack 0
   788  000017                     Delay@wait:
   789                           	opt stack 0
   790  000017                     SetBypas@pin:
   791                           	opt stack 0
   792  000017                     ___awmod@dividend:
   793                           	opt stack 0
   794  000017                     __div_to_l_@f1:
   795                           	opt stack 0
   796  000017                     ___ftpack@arg:
   797                           	opt stack 0
   798  000017                     __tdiv_to_l_@f1:
   799                           	opt stack 0
   800  000017                     ___ftneg@f1:
   801                           	opt stack 0
   802  000017                     frexp@value:
   803                           	opt stack 0
   804  000017                     ___lldiv@dividend:
   805                           	opt stack 0
   806                           
   807                           ; 4 bytes @ 0x16
   808  000017                     	ds	1
   809  000018                     _isdigit$1249:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x17
   813  000018                     	ds	1
   814  000019                     ??_Delay:
   815  000019                     isdigit@c:
   816                           	opt stack 0
   817  000019                     SetBypas@state:
   818                           	opt stack 0
   819  000019                     ___awmod@divisor:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x18
   823  000019                     	ds	1
   824  00001A                     ___ftpack@exp:
   825                           	opt stack 0
   826  00001A                     Delay@x:
   827                           	opt stack 0
   828  00001A                     frexp@eptr:
   829                           	opt stack 0
   830  00001A                     __div_to_l_@f2:
   831                           	opt stack 0
   832  00001A                     __tdiv_to_l_@f2:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x19
   836  00001A                     	ds	1
   837  00001B                     ??_SetBypas:
   838  00001B                     ___awmod@counter:
   839                           	opt stack 0
   840  00001B                     ___ftpack@sign:
   841                           	opt stack 0
   842  00001B                     ___lldiv@divisor:
   843                           	opt stack 0
   844                           
   845                           ; 4 bytes @ 0x1A
   846  00001B                     	ds	1
   847  00001C                     ??___ftpack:
   848  00001C                     ??_frexp:
   849  00001C                     ___awmod@sign:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x1B
   853  00001C                     	ds	1
   854  00001D                     ??__tdiv_to_l_:
   855  00001D                     ?___awdiv:
   856                           	opt stack 0
   857  00001D                     ___awdiv@dividend:
   858                           	opt stack 0
   859  00001D                     __div_to_l_@quot:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x1C
   863  00001D                     	ds	2
   864  00001F                     ?___lltoft:
   865                           	opt stack 0
   866  00001F                     ___awdiv@divisor:
   867                           	opt stack 0
   868  00001F                     ___lldiv@quotient:
   869                           	opt stack 0
   870  00001F                     ___lltoft@c:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x1E
   874  00001F                     	ds	1
   875  000020                     __tdiv_to_l_@quot:
   876                           	opt stack 0
   877                           
   878                           ; 4 bytes @ 0x1F
   879  000020                     	ds	1
   880  000021                     ___awdiv@counter:
   881                           	opt stack 0
   882  000021                     __div_to_l_@cntr:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x20
   886  000021                     	ds	1
   887  000022                     ___awdiv@sign:
   888                           	opt stack 0
   889  000022                     __div_to_l_@exp1:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x21
   893  000022                     	ds	1
   894  000023                     ??___lltoft:
   895  000023                     ___lldiv@counter:
   896                           	opt stack 0
   897  000023                     ___awdiv@quotient:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x22
   901  000023                     	ds	1
   902  000024                     ?___llmod:
   903                           	opt stack 0
   904  000024                     __tdiv_to_l_@cntr:
   905                           	opt stack 0
   906  000024                     ___llmod@dividend:
   907                           	opt stack 0
   908                           
   909                           ; 4 bytes @ 0x23
   910  000024                     	ds	1
   911  000025                     ?___wmul:
   912                           	opt stack 0
   913  000025                     __tdiv_to_l_@exp1:
   914                           	opt stack 0
   915  000025                     ___wmul@multiplier:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x24
   919  000025                     	ds	2
   920  000027                     ___lltoft@exp:
   921                           	opt stack 0
   922  000027                     ___wmul@multiplicand:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x26
   926  000027                     	ds	1
   927  000028                     ___llmod@divisor:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x27
   931  000028                     	ds	1
   932  000029                     ___wmul@product:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x28
   936  000029                     	ds	2
   937  00002B                     ?_Battery_Get:
   938                           	opt stack 0
   939  00002B                     ?___awtoft:
   940                           	opt stack 0
   941  00002B                     Battery_Get@channelnum:
   942                           	opt stack 0
   943  00002B                     ___awtoft@c:
   944                           	opt stack 0
   945  00002B                     ___ftge@ff1:
   946                           	opt stack 0
   947                           
   948                           ; 3 bytes @ 0x2A
   949  00002B                     	ds	1
   950  00002C                     ___llmod@counter:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x2B
   954  00002C                     	ds	2
   955  00002E                     ___awtoft@sign:
   956                           	opt stack 0
   957  00002E                     ___ftge@ff2:
   958                           	opt stack 0
   959                           
   960                           ; 3 bytes @ 0x2D
   961  00002E                     	ds	1
   962  00002F                     ?___ftdiv:
   963                           	opt stack 0
   964  00002F                     ___ftdiv@f1:
   965                           	opt stack 0
   966                           
   967                           ; 3 bytes @ 0x2E
   968  00002F                     	ds	2
   969  000031                     ??___ftge:
   970                           
   971                           ; 0 bytes @ 0x30
   972  000031                     	ds	1
   973  000032                     ___ftdiv@f2:
   974                           	opt stack 0
   975                           
   976                           ; 3 bytes @ 0x31
   977  000032                     	ds	2
   978  000034                     Battery_Fault@fault:
   979                           	opt stack 0
   980  000034                     Temp_Fault@fault:
   981                           	opt stack 0
   982  000034                     RunBypas@cellbyp:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x33
   986  000034                     	ds	1
   987  000035                     ??___ftdiv:
   988  000035                     Battery_Fault@i:
   989                           	opt stack 0
   990  000035                     Temp_Fault@i:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x34
   994  000035                     	ds	1
   995  000036                     RunBypas@batvolt:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x35
   999  000036                     	ds	2
  1000  000038                     ___ftdiv@cntr:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x37
  1004  000038                     	ds	1
  1005  000039                     RunBypas@i:
  1006                           	opt stack 0
  1007  000039                     ___ftdiv@f3:
  1008                           	opt stack 0
  1009                           
  1010                           ; 3 bytes @ 0x38
  1011  000039                     	ds	3
  1012  00003C                     ___ftdiv@exp:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x3B
  1016  00003C                     	ds	1
  1017  00003D                     ___ftdiv@sign:
  1018                           	opt stack 0
  1019                           
  1020                           ; 1 bytes @ 0x3C
  1021  00003D                     	ds	1
  1022  00003E                     tblptru	equ	0xFF8
  1023                           postinc0	equ	0xFEE
  1024                           wreg	equ	0xFE8
  1025                           
  1026                           ; 0 bytes @ 0x3D
  1027 ;;
  1028 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1029 ;;
  1030 ;; *************** function _main *****************
  1031 ;; Defined at:
  1032 ;;		line 35 in file "Main.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  argc            2   79[BANK0 ] int 
  1035 ;;  argv            3   81[BANK0 ] PTR PTR unsigned char 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;		None
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  2   79[BANK0 ] int 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1047 ;;      Params:         0       5       0       0       0       0       0
  1048 ;;      Locals:         0       0       0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0
  1050 ;;      Totals:         0       5       0       0       0       0       0
  1051 ;;Total ram usage:        5 bytes
  1052 ;; Hardware stack levels required when called:    9
  1053 ;; This function calls:
  1054 ;;		_Battery_Convert
  1055 ;;		_Battery_Fault
  1056 ;;		_Current_Convert
  1057 ;;		_Current_Fault
  1058 ;;		_Current_Get
  1059 ;;		_Delay
  1060 ;;		_RunBypas
  1061 ;;		_SYSTEM_Initialize
  1062 ;;		_Temp_Convert
  1063 ;;		_Temp_Fault
  1064 ;;		_printf
  1065 ;; This function is called by:
  1066 ;;		Startup code after reset
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           	psect	text0
  1071  002E38                     __ptext0:
  1072                           	opt stack 0
  1073  002E38                     _main:
  1074                           	opt stack 22
  1075                           
  1076                           ;Main.c: 37: SYSTEM_Initialize();
  1077                           
  1078                           ;incstack = 0
  1079  002E38  EC80  F01E         	call	_SYSTEM_Initialize	;wreg free
  1080  002E3C  D000               	goto	l5541
  1081  002E3E                     l5541:
  1082  002E3E  868C               	bsf	3980,3,c	;volatile
  1083  002E40  D000               	goto	l5543
  1084  002E42                     l5543:
  1085                           
  1086                           ;Main.c: 40: Delay(120);
  1087  002E42  0E00               	movlw	0
  1088  002E44  6E18               	movwf	Delay@wait+1,c
  1089  002E46  0E78               	movlw	120
  1090  002E48  6E17               	movwf	Delay@wait,c
  1091  002E4A  ECB7  F01D         	call	_Delay	;wreg free
  1092  002E4E  D000               	goto	l5545
  1093  002E50                     l5545:
  1094  002E50  968C               	bcf	3980,3,c	;volatile
  1095  002E52  D000               	goto	l5547
  1096  002E54                     l5547:
  1097                           
  1098                           ;Main.c: 59: (INTCONbits.GIE = 1);
  1099  002E54  8EF2               	bsf	intcon,7,c	;volatile
  1100                           
  1101                           ;Main.c: 62: (INTCONbits.PEIE = 1);
  1102  002E56  8CF2               	bsf	intcon,6,c	;volatile
  1103  002E58  D000               	goto	l5551
  1104  002E5A                     l5551:
  1105                           
  1106                           ;Main.c: 72: {
  1107                           ;Main.c: 73: if (Temp_Done)
  1108  002E5A  0100               	movlb	0	; () banked
  1109  002E5C  51DE               	movf	_Temp_Done& (0+255),w,b
  1110  002E5E  0100               	movlb	0	; () banked
  1111  002E60  11DF               	iorwf	(_Temp_Done+1)& (0+255),w,b
  1112  002E62  B4D8               	btfsc	status,2,c
  1113  002E64  D00A               	goto	l5559
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;Main.c: 74: {
  1117                           ;Main.c: 75: Temp_Done = 0;
  1118  002E66  0E00               	movlw	0
  1119  002E68  0100               	movlb	0	; () banked
  1120  002E6A  6FDF               	movwf	(_Temp_Done+1)& (0+255),b
  1121  002E6C  0E00               	movlw	0
  1122  002E6E  6FDE               	movwf	_Temp_Done& (0+255),b
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;Main.c: 76: Temp_Convert();
  1126  002E70  EC83  F010         	call	_Temp_Convert	;wreg free
  1127                           
  1128                           ;Main.c: 77: Temp_Fault();
  1129  002E74  EC7D  F01C         	call	_Temp_Fault	;wreg free
  1130  002E78  D000               	goto	l5559
  1131  002E7A                     l5559:
  1132                           
  1133                           ;Main.c: 84: }
  1134                           ;Main.c: 85: if (Volt_Done)
  1135  002E7A  0100               	movlb	0	; () banked
  1136  002E7C  51E0               	movf	_Volt_Done& (0+255),w,b
  1137  002E7E  0100               	movlb	0	; () banked
  1138  002E80  11E1               	iorwf	(_Volt_Done+1)& (0+255),w,b
  1139  002E82  B4D8               	btfsc	status,2,c
  1140  002E84  D00C               	goto	l5569
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;Main.c: 86: {
  1144                           ;Main.c: 87: Volt_Done = 0;
  1145  002E86  0E00               	movlw	0
  1146  002E88  0100               	movlb	0	; () banked
  1147  002E8A  6FE1               	movwf	(_Volt_Done+1)& (0+255),b
  1148  002E8C  0E00               	movlw	0
  1149  002E8E  6FE0               	movwf	_Volt_Done& (0+255),b
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;Main.c: 88: Battery_Convert();
  1153  002E90  ECD0  F019         	call	_Battery_Convert	;wreg free
  1154                           
  1155                           ;Main.c: 89: Battery_Fault();
  1156  002E94  EC87  F01A         	call	_Battery_Fault	;wreg free
  1157                           
  1158                           ;Main.c: 96: RunBypas();
  1159  002E98  EC9B  F018         	call	_RunBypas	;wreg free
  1160  002E9C  D000               	goto	l5569
  1161  002E9E                     l5569:
  1162                           
  1163                           ;Main.c: 97: }
  1164                           ;Main.c: 98: if (Current_Done)
  1165  002E9E  0100               	movlb	0	; () banked
  1166  002EA0  51DC               	movf	_Current_Done& (0+255),w,b
  1167  002EA2  0100               	movlb	0	; () banked
  1168  002EA4  11DD               	iorwf	(_Current_Done+1)& (0+255),w,b
  1169  002EA6  B4D8               	btfsc	status,2,c
  1170  002EA8  D01C               	goto	l5579
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;Main.c: 99: {
  1174                           ;Main.c: 100: Current_Done = 0;
  1175  002EAA  0E00               	movlw	0
  1176  002EAC  0100               	movlb	0	; () banked
  1177  002EAE  6FDD               	movwf	(_Current_Done+1)& (0+255),b
  1178  002EB0  0E00               	movlw	0
  1179  002EB2  6FDC               	movwf	_Current_Done& (0+255),b
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;Main.c: 101: Current_Convert();
  1183  002EB4  EC06  F019         	call	_Current_Convert	;wreg free
  1184                           
  1185                           ;Main.c: 102: fault = Current_Fault();
  1186  002EB8  ECA3  F011         	call	_Current_Fault	;wreg free
  1187  002EBC  0100               	movlb	0	; () banked
  1188  002EBE  6FE4               	movwf	_fault& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;Main.c: 103: printf("Current %d = %0.02f \r\n",Current_Get());
  1192  002EC0  0E92               	movlw	low STR_1
  1193  002EC2  0100               	movlb	0	; () banked
  1194  002EC4  6F8B               	movwf	printf@f& (0+255),b
  1195  002EC6  0E06               	movlw	high STR_1
  1196  002EC8  0100               	movlb	0	; () banked
  1197  002ECA  6F8C               	movwf	(printf@f+1)& (0+255),b
  1198  002ECC  EC9D  F01E         	call	_Current_Get	;wreg free
  1199  002ED0  C017  F08D         	movff	?_Current_Get,?_printf+2
  1200  002ED4  C018  F08E         	movff	?_Current_Get+1,?_printf+3
  1201  002ED8  C019  F08F         	movff	?_Current_Get+2,?_printf+4
  1202  002EDC  EC5A  F003         	call	_printf	;wreg free
  1203  002EE0  D000               	goto	l5579
  1204  002EE2                     l5579:
  1205                           
  1206                           ;Main.c: 104: }
  1207                           ;Main.c: 105: if((fault == 1) && (infault == 0))
  1208  002EE2  0100               	movlb	0	; () banked
  1209  002EE4  05E4               	decf	_fault& (0+255),w,b
  1210  002EE6  A4D8               	btfss	status,2,c
  1211  002EE8  D023               	goto	l5595
  1212                           
  1213                           ; BSR set to: 0
  1214  002EEA  0100               	movlb	0	; () banked
  1215  002EEC  51E5               	movf	_infault& (0+255),w,b
  1216  002EEE  0100               	movlb	0	; () banked
  1217  002EF0  A4D8               	btfss	status,2,c
  1218  002EF2  D01E               	goto	l5595
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;Main.c: 106: {
  1222                           ;Main.c: 108: infault = 1;
  1223  002EF4  0E01               	movlw	1
  1224  002EF6  0100               	movlb	0	; () banked
  1225  002EF8  6FE5               	movwf	_infault& (0+255),b
  1226  002EFA  D000               	goto	l5585
  1227  002EFC                     l5585:
  1228                           
  1229                           ; BSR set to: 0
  1230  002EFC  848C               	bsf	3980,2,c	;volatile
  1231  002EFE  D000               	goto	l5587
  1232  002F00                     l5587:
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;Main.c: 110: Delay(40);
  1236  002F00  0E00               	movlw	0
  1237  002F02  6E18               	movwf	Delay@wait+1,c
  1238  002F04  0E28               	movlw	40
  1239  002F06  6E17               	movwf	Delay@wait,c
  1240  002F08  ECB7  F01D         	call	_Delay	;wreg free
  1241  002F0C  D000               	goto	l5589
  1242  002F0E                     l5589:
  1243  002F0E  948C               	bcf	3980,2,c	;volatile
  1244  002F10  D000               	goto	l5591
  1245  002F12                     l5591:
  1246                           
  1247                           ;Main.c: 112: Delay(40);
  1248  002F12  0E00               	movlw	0
  1249  002F14  6E18               	movwf	Delay@wait+1,c
  1250  002F16  0E28               	movlw	40
  1251  002F18  6E17               	movwf	Delay@wait,c
  1252  002F1A  ECB7  F01D         	call	_Delay	;wreg free
  1253                           
  1254                           ;Main.c: 113: printf("FAULT \r\n");
  1255  002F1E  0EA9               	movlw	low STR_2
  1256  002F20  0100               	movlb	0	; () banked
  1257  002F22  6F8B               	movwf	printf@f& (0+255),b
  1258  002F24  0E06               	movlw	high STR_2
  1259  002F26  0100               	movlb	0	; () banked
  1260  002F28  6F8C               	movwf	(printf@f+1)& (0+255),b
  1261  002F2A  EC5A  F003         	call	_printf	;wreg free
  1262  002F2E  D000               	goto	l5595
  1263  002F30                     l5595:
  1264                           
  1265                           ;Main.c: 114: }
  1266                           ;Main.c: 115: if((fault == 0) && (infault == 1))
  1267  002F30  0100               	movlb	0	; () banked
  1268  002F32  51E4               	movf	_fault& (0+255),w,b
  1269  002F34  0100               	movlb	0	; () banked
  1270  002F36  A4D8               	btfss	status,2,c
  1271  002F38  D790               	goto	l5551
  1272                           
  1273                           ; BSR set to: 0
  1274  002F3A  0100               	movlb	0	; () banked
  1275  002F3C  05E5               	decf	_infault& (0+255),w,b
  1276  002F3E  A4D8               	btfss	status,2,c
  1277  002F40  D78C               	goto	l5551
  1278                           
  1279                           ; BSR set to: 0
  1280                           
  1281                           ;Main.c: 116: {
  1282                           ;Main.c: 118: do { LATD3 = 1; } while(0);
  1283  002F42  868C               	bsf	3980,3,c	;volatile
  1284  002F44  D000               	goto	l5599
  1285  002F46                     l5599:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;Main.c: 119: Delay(40);
  1289  002F46  0E00               	movlw	0
  1290  002F48  6E18               	movwf	Delay@wait+1,c
  1291  002F4A  0E28               	movlw	40
  1292  002F4C  6E17               	movwf	Delay@wait,c
  1293  002F4E  ECB7  F01D         	call	_Delay	;wreg free
  1294  002F52  D000               	goto	l5601
  1295  002F54                     l5601:
  1296  002F54  968C               	bcf	3980,3,c	;volatile
  1297                           
  1298                           ;Main.c: 121: Delay(40);
  1299  002F56  0E00               	movlw	0
  1300  002F58  6E18               	movwf	Delay@wait+1,c
  1301  002F5A  0E28               	movlw	40
  1302  002F5C  6E17               	movwf	Delay@wait,c
  1303  002F5E  ECB7  F01D         	call	_Delay	;wreg free
  1304  002F62  D77B               	goto	l5551
  1305                           
  1306                           ;Main.c: 122: }
  1307                           ;Main.c: 146: }
  1308                           ;Main.c: 147: return (0);
  1309                           ;	Return value of _main is never used
  1310  002F64  EF55  F000         	goto	start
  1311  002F68                     __end_of_main:
  1312                           	opt stack 0
  1313                           tblptru	equ	0xFF8
  1314                           intcon	equ	0xFF2
  1315                           postinc0	equ	0xFEE
  1316                           wreg	equ	0xFE8
  1317                           status	equ	0xFD8
  1318                           
  1319 ;; *************** function _printf *****************
  1320 ;; Defined at:
  1321 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;  f               2   43[BANK0 ] PTR const unsigned char 
  1324 ;;		 -> STR_2(9), STR_1(23), 
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  val             4   63[BANK0 ] unsigned long 
  1327 ;;  tmpval          4   59[BANK0 ] struct .
  1328 ;;  fval            3   73[BANK0 ] struct .
  1329 ;;  cp              3    0        PTR const unsigned char 
  1330 ;;  prec            2   76[BANK0 ] int 
  1331 ;;  width           2   71[BANK0 ] int 
  1332 ;;  flag            2   69[BANK0 ] unsigned short 
  1333 ;;  exp             2   67[BANK0 ] int 
  1334 ;;  ap              2   57[BANK0 ] PTR void [1]
  1335 ;;		 -> ?_printf(2), 
  1336 ;;  len             2    0        unsigned int 
  1337 ;;  c               1   78[BANK0 ] char 
  1338 ;;  d               1    0        unsigned char 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  2   43[BANK0 ] int 
  1341 ;; Registers used:
  1342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1348 ;;      Params:         0       5       0       0       0       0       0
  1349 ;;      Locals:         0      25       0       0       0       0       0
  1350 ;;      Temps:          0       6       0       0       0       0       0
  1351 ;;      Totals:         0      36       0       0       0       0       0
  1352 ;;Total ram usage:       36 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    7
  1355 ;; This function calls:
  1356 ;;		___awdiv
  1357 ;;		___ftadd
  1358 ;;		___ftge
  1359 ;;		___ftmul
  1360 ;;		___ftneg
  1361 ;;		___ftsub
  1362 ;;		___fttol
  1363 ;;		___lldiv
  1364 ;;		___llmod
  1365 ;;		___lltoft
  1366 ;;		___wmul
  1367 ;;		__div_to_l_
  1368 ;;		__tdiv_to_l_
  1369 ;;		_fround
  1370 ;;		_isdigit
  1371 ;;		_putch
  1372 ;;		_scale
  1373 ;; This function is called by:
  1374 ;;		_main
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text1
  1379  0006B4                     __ptext1:
  1380                           	opt stack 0
  1381  0006B4                     _printf:
  1382                           	opt stack 23
  1383                           
  1384                           ;doprnt.c: 466: va_list ap;
  1385                           ;doprnt.c: 499: signed char c;
  1386                           ;doprnt.c: 501: int width;
  1387                           ;doprnt.c: 504: int prec;
  1388                           ;doprnt.c: 508: unsigned short flag;
  1389                           ;doprnt.c: 515: char d;
  1390                           ;doprnt.c: 516: double fval;
  1391                           ;doprnt.c: 517: int exp;
  1392                           ;doprnt.c: 523: union {
  1393                           ;doprnt.c: 524: unsigned long vd;
  1394                           ;doprnt.c: 525: double integ;
  1395                           ;doprnt.c: 526: } tmpval;
  1396                           ;doprnt.c: 528: unsigned long val;
  1397                           ;doprnt.c: 529: unsigned len;
  1398                           ;doprnt.c: 530: const char * cp;
  1399                           ;doprnt.c: 533: *ap = __va_start();
  1400                           
  1401                           ;incstack = 0
  1402  0006B4  0E8D               	movlw	low (?_printf+2)
  1403  0006B6  0100               	movlb	0	; () banked
  1404  0006B8  6F99               	movwf	printf@ap& (0+255),b
  1405  0006BA  0E00               	movlw	high (?_printf+2)
  1406  0006BC  0100               	movlb	0	; () banked
  1407  0006BE  6F9A               	movwf	(printf@ap+1)& (0+255),b
  1408                           
  1409                           ;doprnt.c: 536: while(c = *f++) {
  1410  0006C0  EF77  F009         	goto	l5509
  1411  0006C4                     l5217:
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;doprnt.c: 538: if(c != '%')
  1415  0006C4  0E25               	movlw	37
  1416  0006C6  0100               	movlb	0	; () banked
  1417  0006C8  19AE               	xorwf	printf@c& (0+255),w,b
  1418  0006CA  B4D8               	btfsc	status,2,c
  1419  0006CC  D006               	goto	l5221
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;doprnt.c: 540: {
  1423                           ;doprnt.c: 541: (putch(c) );
  1424  0006CE  0100               	movlb	0	; () banked
  1425  0006D0  51AE               	movf	printf@c& (0+255),w,b
  1426  0006D2  ECAC  F01E         	call	_putch
  1427                           
  1428                           ;doprnt.c: 542: continue;
  1429  0006D6  EF77  F009         	goto	l5509
  1430  0006DA                     l5221:
  1431                           
  1432                           ;doprnt.c: 543: }
  1433                           ;doprnt.c: 546: width = 0;
  1434  0006DA  0E00               	movlw	0
  1435  0006DC  0100               	movlb	0	; () banked
  1436  0006DE  6FA8               	movwf	(printf@width+1)& (0+255),b
  1437  0006E0  0E00               	movlw	0
  1438  0006E2  6FA7               	movwf	printf@width& (0+255),b
  1439                           
  1440                           ;doprnt.c: 548: flag = 0;
  1441  0006E4  0E00               	movlw	0
  1442  0006E6  0100               	movlb	0	; () banked
  1443  0006E8  6FA6               	movwf	(printf@flag+1)& (0+255),b
  1444  0006EA  0E00               	movlw	0
  1445  0006EC  6FA5               	movwf	printf@flag& (0+255),b
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;doprnt.c: 551: switch(*f) {
  1449                           
  1450                           ;doprnt.c: 550: for(;;) {
  1451  0006EE  D007               	goto	l5227
  1452  0006F0                     l5223:
  1453                           
  1454                           ;doprnt.c: 580: flag |= 0x04;
  1455  0006F0  0100               	movlb	0	; () banked
  1456  0006F2  85A5               	bsf	printf@flag& (0+255),2,b
  1457                           
  1458                           ;doprnt.c: 581: f++;
  1459  0006F4  0100               	movlb	0	; () banked
  1460  0006F6  4B8B               	infsnz	printf@f& (0+255),f,b
  1461  0006F8  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1462                           
  1463                           ;doprnt.c: 582: continue;
  1464  0006FA  D001               	goto	l5227
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;doprnt.c: 584: }
  1468  0006FC  D00B               	goto	l5229
  1469  0006FE                     l5227:
  1470  0006FE  C08B  FFF6         	movff	printf@f,tblptrl
  1471  000702  C08C  FFF7         	movff	printf@f+1,tblptrh
  1472  000706                     	if	0	;tblptru may be non-zero
  1473  000706                     	endif
  1474  000706                     	if	0	;tblptru may be non-zero
  1475  000706                     	endif
  1476  000706  0008               	tblrd		*
  1477  000708  50F5               	movf	tablat,w,c
  1478                           
  1479                           ; Switch size 1, requested type "space"
  1480                           ; Number of cases is 1, Range of values is 48 to 48
  1481                           ; switch strategies available:
  1482                           ; Name         Instructions Cycles
  1483                           ; simple_byte            4     3 (average)
  1484                           ;	Chosen strategy is simple_byte
  1485  00070A  0A30               	xorlw	48	; case 48
  1486  00070C  B4D8               	btfsc	status,2,c
  1487  00070E  D7F0               	goto	l5223
  1488                           
  1489                           ;doprnt.c: 585: break;
  1490  000710  D001               	goto	l5229
  1491                           
  1492                           ;doprnt.c: 586: }
  1493  000712  D7F5               	goto	l5227
  1494  000714                     l5229:
  1495                           
  1496                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1497  000714  C08B  FFF6         	movff	printf@f,tblptrl
  1498  000718  C08C  FFF7         	movff	printf@f+1,tblptrh
  1499  00071C                     	if	0	;tblptru may be non-zero
  1500  00071C                     	endif
  1501  00071C                     	if	0	;tblptru may be non-zero
  1502  00071C                     	endif
  1503  00071C  0008               	tblrd		*
  1504  00071E  50F5               	movf	tablat,w,c
  1505  000720  EC21  F01E         	call	_isdigit
  1506  000724  A0D8               	btfss	status,0,c
  1507  000726  D042               	goto	l5241
  1508                           
  1509                           ;doprnt.c: 598: width = 0;
  1510  000728  0E00               	movlw	0
  1511  00072A  0100               	movlb	0	; () banked
  1512  00072C  6FA8               	movwf	(printf@width+1)& (0+255),b
  1513  00072E  0E00               	movlw	0
  1514  000730  6FA7               	movwf	printf@width& (0+255),b
  1515  000732  D000               	goto	l5233
  1516  000734                     l5233:
  1517                           
  1518                           ;doprnt.c: 600: width *= 10;
  1519  000734  C0A7  F025         	movff	printf@width,___wmul@multiplier
  1520  000738  C0A8  F026         	movff	printf@width+1,___wmul@multiplier+1
  1521  00073C  0E00               	movlw	0
  1522  00073E  6E28               	movwf	___wmul@multiplicand+1,c
  1523  000740  0E0A               	movlw	10
  1524  000742  6E27               	movwf	___wmul@multiplicand,c
  1525  000744  ECE8  F01D         	call	___wmul	;wreg free
  1526  000748  C025  F0A7         	movff	?___wmul,printf@width
  1527  00074C  C026  F0A8         	movff	?___wmul+1,printf@width+1
  1528                           
  1529                           ;doprnt.c: 601: width += *f++ - '0';
  1530  000750  0ED0               	movlw	208
  1531  000752  0100               	movlb	0	; () banked
  1532  000754  6F90               	movwf	??_printf& (0+255),b
  1533  000756  0EFF               	movlw	255
  1534  000758  0100               	movlb	0	; () banked
  1535  00075A  6F91               	movwf	(??_printf+1)& (0+255),b
  1536  00075C  C08B  FFF6         	movff	printf@f,tblptrl
  1537  000760  C08C  FFF7         	movff	printf@f+1,tblptrh
  1538  000764                     	if	0	;tblptru may be non-zero
  1539  000764                     	endif
  1540  000764                     	if	0	;tblptru may be non-zero
  1541  000764                     	endif
  1542  000764  0008               	tblrd		*
  1543  000766  50F5               	movf	tablat,w,c
  1544  000768  0100               	movlb	0	; () banked
  1545  00076A  6F92               	movwf	(??_printf+2)& (0+255),b
  1546  00076C  6B93               	clrf	(??_printf+3)& (0+255),b
  1547  00076E  0100               	movlb	0	; () banked
  1548  000770  5190               	movf	??_printf& (0+255),w,b
  1549  000772  0100               	movlb	0	; () banked
  1550  000774  2792               	addwf	(??_printf+2)& (0+255),f,b
  1551  000776  0100               	movlb	0	; () banked
  1552  000778  5191               	movf	(??_printf+1)& (0+255),w,b
  1553  00077A  0100               	movlb	0	; () banked
  1554  00077C  2393               	addwfc	(??_printf+3)& (0+255),f,b
  1555  00077E  0100               	movlb	0	; () banked
  1556  000780  5192               	movf	(??_printf+2)& (0+255),w,b
  1557  000782  0100               	movlb	0	; () banked
  1558  000784  27A7               	addwf	printf@width& (0+255),f,b
  1559  000786  0100               	movlb	0	; () banked
  1560  000788  5193               	movf	(??_printf+3)& (0+255),w,b
  1561  00078A  0100               	movlb	0	; () banked
  1562  00078C  23A8               	addwfc	(printf@width+1)& (0+255),f,b
  1563                           
  1564                           ; BSR set to: 0
  1565  00078E  0100               	movlb	0	; () banked
  1566  000790  4B8B               	infsnz	printf@f& (0+255),f,b
  1567  000792  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1571  000794  C08B  FFF6         	movff	printf@f,tblptrl
  1572  000798  C08C  FFF7         	movff	printf@f+1,tblptrh
  1573  00079C                     	if	0	;tblptru may be non-zero
  1574  00079C                     	endif
  1575  00079C                     	if	0	;tblptru may be non-zero
  1576  00079C                     	endif
  1577  00079C  0008               	tblrd		*
  1578  00079E  50F5               	movf	tablat,w,c
  1579  0007A0  EC21  F01E         	call	_isdigit
  1580  0007A4  A0D8               	btfss	status,0,c
  1581  0007A6  D002               	goto	l5241
  1582  0007A8  D7C5               	goto	l5233
  1583  0007AA  D000               	goto	l5241
  1584  0007AC                     l5241:
  1585                           
  1586                           ;doprnt.c: 608: }
  1587                           ;doprnt.c: 611: if(*f == '.') {
  1588  0007AC  C08B  FFF6         	movff	printf@f,tblptrl
  1589  0007B0  C08C  FFF7         	movff	printf@f+1,tblptrh
  1590  0007B4                     	if	0	;tblptru may be non-zero
  1591  0007B4                     	endif
  1592  0007B4                     	if	0	;tblptru may be non-zero
  1593  0007B4                     	endif
  1594  0007B4  0008               	tblrd		*
  1595  0007B6  50F5               	movf	tablat,w,c
  1596  0007B8  0A2E               	xorlw	46
  1597  0007BA  A4D8               	btfss	status,2,c
  1598  0007BC  D036               	goto	l5253
  1599                           
  1600                           ;doprnt.c: 612: flag |= 0x4000;
  1601  0007BE  0100               	movlb	0	; () banked
  1602  0007C0  8DA6               	bsf	(printf@flag+1)& (0+255),6,b
  1603                           
  1604                           ;doprnt.c: 613: f++;
  1605  0007C2  0100               	movlb	0	; () banked
  1606  0007C4  4B8B               	infsnz	printf@f& (0+255),f,b
  1607  0007C6  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;doprnt.c: 620: {
  1611                           ;doprnt.c: 621: prec = 0;
  1612  0007C8  0E00               	movlw	0
  1613  0007CA  0100               	movlb	0	; () banked
  1614  0007CC  6FAD               	movwf	(printf@prec+1)& (0+255),b
  1615  0007CE  0E00               	movlw	0
  1616  0007D0  6FAC               	movwf	printf@prec& (0+255),b
  1617                           
  1618                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1619  0007D2  D01F               	goto	l5251
  1620  0007D4                     l5247:
  1621                           
  1622                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1623  0007D4  C0AC  F025         	movff	printf@prec,___wmul@multiplier
  1624  0007D8  C0AD  F026         	movff	printf@prec+1,___wmul@multiplier+1
  1625  0007DC  0E00               	movlw	0
  1626  0007DE  6E28               	movwf	___wmul@multiplicand+1,c
  1627  0007E0  0E0A               	movlw	10
  1628  0007E2  6E27               	movwf	___wmul@multiplicand,c
  1629  0007E4  ECE8  F01D         	call	___wmul	;wreg free
  1630  0007E8  C08B  FFF6         	movff	printf@f,tblptrl
  1631  0007EC  C08C  FFF7         	movff	printf@f+1,tblptrh
  1632  0007F0                     	if	0	;tblptru may be non-zero
  1633  0007F0                     	endif
  1634  0007F0                     	if	0	;tblptru may be non-zero
  1635  0007F0                     	endif
  1636  0007F0  0008               	tblrd		*
  1637  0007F2  50F5               	movf	tablat,w,c
  1638  0007F4  2625               	addwf	?___wmul,f,c
  1639  0007F6  0E00               	movlw	0
  1640  0007F8  2226               	addwfc	?___wmul+1,f,c
  1641  0007FA  0ED0               	movlw	208
  1642  0007FC  2425               	addwf	?___wmul,w,c
  1643  0007FE  0100               	movlb	0	; () banked
  1644  000800  6FAC               	movwf	printf@prec& (0+255),b
  1645  000802  0EFF               	movlw	255
  1646  000804  2026               	addwfc	?___wmul+1,w,c
  1647  000806  0100               	movlb	0	; () banked
  1648  000808  6FAD               	movwf	(printf@prec+1)& (0+255),b
  1649                           
  1650                           ; BSR set to: 0
  1651  00080A  0100               	movlb	0	; () banked
  1652  00080C  4B8B               	infsnz	printf@f& (0+255),f,b
  1653  00080E  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1654  000810  D000               	goto	l5251
  1655  000812                     l5251:
  1656                           
  1657                           ; BSR set to: 0
  1658  000812  C08B  FFF6         	movff	printf@f,tblptrl
  1659  000816  C08C  FFF7         	movff	printf@f+1,tblptrh
  1660  00081A                     	if	0	;tblptru may be non-zero
  1661  00081A                     	endif
  1662  00081A                     	if	0	;tblptru may be non-zero
  1663  00081A                     	endif
  1664  00081A  0008               	tblrd		*
  1665  00081C  50F5               	movf	tablat,w,c
  1666  00081E  EC21  F01E         	call	_isdigit
  1667  000822  A0D8               	btfss	status,0,c
  1668  000824  D011               	goto	l5261
  1669  000826  D7D6               	goto	l5247
  1670                           
  1671                           ;doprnt.c: 624: }
  1672                           ;doprnt.c: 625: } else {
  1673  000828  D00F               	goto	l5261
  1674  00082A                     l5253:
  1675                           
  1676                           ;doprnt.c: 626: prec = 0;
  1677  00082A  0E00               	movlw	0
  1678  00082C  0100               	movlb	0	; () banked
  1679  00082E  6FAD               	movwf	(printf@prec+1)& (0+255),b
  1680  000830  0E00               	movlw	0
  1681  000832  6FAC               	movwf	printf@prec& (0+255),b
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;doprnt.c: 628: flag |= 0x1000;
  1685  000834  0100               	movlb	0	; () banked
  1686  000836  89A6               	bsf	(printf@flag+1)& (0+255),4,b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;doprnt.c: 630: }
  1690                           ;doprnt.c: 635: switch(c = *f++) {
  1691  000838  D007               	goto	l5261
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;doprnt.c: 638: goto alldone;
  1695                           
  1696                           ;doprnt.c: 637: case 0:
  1697  00083A  0012               	return	
  1698  00083C                     l5257:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;doprnt.c: 663: flag |= 0x400;
  1702  00083C  0100               	movlb	0	; () banked
  1703  00083E  85A6               	bsf	(printf@flag+1)& (0+255),2,b
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;doprnt.c: 698: case 'i':
  1707                           ;doprnt.c: 699: break;
  1708                           
  1709                           ; BSR set to: 0
  1710                           
  1711                           ;doprnt.c: 697: case 'd':
  1712                           
  1713                           ;doprnt.c: 664: break;
  1714  000840  D01C               	goto	l5263
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;doprnt.c: 813: continue;
  1718                           
  1719                           ;doprnt.c: 802: default:
  1720  000842  EF77  F009         	goto	l5509
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;doprnt.c: 822: }
  1724  000846  D019               	goto	l5263
  1725  000848                     l5261:
  1726  000848  C08B  FFF6         	movff	printf@f,tblptrl
  1727  00084C  C08C  FFF7         	movff	printf@f+1,tblptrh
  1728  000850  0100               	movlb	0	; () banked
  1729  000852  4B8B               	infsnz	printf@f& (0+255),f,b
  1730  000854  2B8C               	incf	(printf@f+1)& (0+255),f,b
  1731  000856                     	if	0	;tblptru may be non-zero
  1732  000856                     	endif
  1733  000856                     	if	0	;tblptru may be non-zero
  1734  000856                     	endif
  1735  000856  0008               	tblrd		*
  1736  000858  CFF5 F0AE          	movff	tablat,printf@c
  1737  00085C  0100               	movlb	0	; () banked
  1738  00085E  51AE               	movf	printf@c& (0+255),w,b
  1739                           
  1740                           ; Switch size 1, requested type "space"
  1741                           ; Number of cases is 4, Range of values is 0 to 105
  1742                           ; switch strategies available:
  1743                           ; Name         Instructions Cycles
  1744                           ; simple_byte           13     7 (average)
  1745                           ;	Chosen strategy is simple_byte
  1746  000860  0A00               	xorlw	0	; case 0
  1747  000862  B4D8               	btfsc	status,2,c
  1748  000864  0012               	return	
  1749  000866  0A64               	xorlw	100	; case 100
  1750  000868  B4D8               	btfsc	status,2,c
  1751  00086A  D007               	goto	l5263
  1752  00086C  0A02               	xorlw	2	; case 102
  1753  00086E  B4D8               	btfsc	status,2,c
  1754  000870  D7E5               	goto	l5257
  1755  000872  0A0F               	xorlw	15	; case 105
  1756  000874  A4D8               	btfss	status,2,c
  1757  000876  EF77  F009         	goto	l5509
  1758  00087A                     l5263:
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;doprnt.c: 825: if(flag & (0x700)) {
  1762  00087A  0E07               	movlw	7
  1763  00087C  0100               	movlb	0	; () banked
  1764  00087E  15A6               	andwf	(printf@flag+1)& (0+255),w,b
  1765  000880  B4D8               	btfsc	status,2,c
  1766  000882  D3A2               	goto	l5423
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;doprnt.c: 827: if(flag & 0x1000)
  1770  000884  0100               	movlb	0	; () banked
  1771  000886  A9A6               	btfss	(printf@flag+1)& (0+255),4,b
  1772  000888  D006               	goto	l5269
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;doprnt.c: 829: prec = 6;
  1776  00088A  0E00               	movlw	0
  1777  00088C  0100               	movlb	0	; () banked
  1778  00088E  6FAD               	movwf	(printf@prec+1)& (0+255),b
  1779  000890  0E06               	movlw	6
  1780  000892  6FAC               	movwf	printf@prec& (0+255),b
  1781  000894  D000               	goto	l5269
  1782  000896                     l5269:
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1786  000896  C099  FFD9         	movff	printf@ap,fsr2l
  1787  00089A  C09A  FFDA         	movff	printf@ap+1,fsr2h
  1788  00089E  CFDE F0A9          	movff	postinc2,printf@fval
  1789  0008A2  CFDE F0AA          	movff	postinc2,printf@fval+1
  1790  0008A6  CFDD F0AB          	movff	postdec2,printf@fval+2
  1791                           
  1792                           ; BSR set to: 0
  1793  0008AA  0E03               	movlw	3
  1794  0008AC  0100               	movlb	0	; () banked
  1795  0008AE  2799               	addwf	printf@ap& (0+255),f,b
  1796  0008B0  0E00               	movlw	0
  1797  0008B2  239A               	addwfc	(printf@ap+1)& (0+255),f,b
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;doprnt.c: 831: if(fval < 0.0) {
  1801  0008B4  0100               	movlb	0	; () banked
  1802  0008B6  AFAB               	btfss	(printf@fval+2)& (0+255),7,b
  1803  0008B8  D012               	goto	l5279
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;doprnt.c: 832: fval = -fval;
  1807  0008BA  C0A9  F017         	movff	printf@fval,___ftneg@f1
  1808  0008BE  C0AA  F018         	movff	printf@fval+1,___ftneg@f1+1
  1809  0008C2  C0AB  F019         	movff	printf@fval+2,___ftneg@f1+2
  1810  0008C6  EC0F  F01E         	call	___ftneg	;wreg free
  1811  0008CA  C017  F0A9         	movff	?___ftneg,printf@fval
  1812  0008CE  C018  F0AA         	movff	?___ftneg+1,printf@fval+1
  1813  0008D2  C019  F0AB         	movff	?___ftneg+2,printf@fval+2
  1814                           
  1815                           ;doprnt.c: 833: flag |= 0x03;
  1816  0008D6  0E03               	movlw	3
  1817  0008D8  0100               	movlb	0	; () banked
  1818  0008DA  13A5               	iorwf	printf@flag& (0+255),f,b
  1819  0008DC  D000               	goto	l5279
  1820  0008DE                     l5279:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 834: }
  1824                           ;doprnt.c: 835: exp = 0;
  1825  0008DE  0E00               	movlw	0
  1826  0008E0  0100               	movlb	0	; () banked
  1827  0008E2  6FA4               	movwf	(printf@exp+1)& (0+255),b
  1828  0008E4  0E00               	movlw	0
  1829  0008E6  6FA3               	movwf	printf@exp& (0+255),b
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;doprnt.c: 836: if( fval!=0) {
  1833  0008E8  0100               	movlb	0	; () banked
  1834  0008EA  51A9               	movf	printf@fval& (0+255),w,b
  1835  0008EC  0100               	movlb	0	; () banked
  1836  0008EE  11AA               	iorwf	(printf@fval+1)& (0+255),w,b
  1837  0008F0  0100               	movlb	0	; () banked
  1838  0008F2  11AB               	iorwf	(printf@fval+2)& (0+255),w,b
  1839  0008F4  B4D8               	btfsc	status,2,c
  1840  0008F6  D093               	goto	l5307
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1844  0008F8  0E82               	movlw	130
  1845  0008FA  0100               	movlb	0	; () banked
  1846  0008FC  6F90               	movwf	??_printf& (0+255),b
  1847  0008FE  0EFF               	movlw	255
  1848  000900  0100               	movlb	0	; () banked
  1849  000902  6F91               	movwf	(??_printf+1)& (0+255),b
  1850  000904  C0A9  F092         	movff	printf@fval,??_printf+2
  1851  000908  C0AA  F093         	movff	printf@fval+1,??_printf+3
  1852  00090C  C0AB  F094         	movff	printf@fval+2,??_printf+4
  1853  000910  C0AC  F095         	movff	printf@fval+3,??_printf+5
  1854  000914  0E10               	movlw	16
  1855  000916  D006               	goto	u5550
  1856  000918                     u5555:
  1857  000918  0100               	movlb	0	; () banked
  1858  00091A  90D8               	bcf	status,0,c
  1859  00091C  3395               	rrcf	(??_printf+5)& (0+255),f,b
  1860  00091E  3394               	rrcf	(??_printf+4)& (0+255),f,b
  1861  000920  3393               	rrcf	(??_printf+3)& (0+255),f,b
  1862  000922  3392               	rrcf	(??_printf+2)& (0+255),f,b
  1863  000924                     u5550:
  1864  000924  2EE8               	decfsz	wreg,f,c
  1865  000926  D7F8               	goto	u5555
  1866  000928  0100               	movlb	0	; () banked
  1867  00092A  5192               	movf	(??_printf+2)& (0+255),w,b
  1868  00092C  0100               	movlb	0	; () banked
  1869  00092E  2590               	addwf	??_printf& (0+255),w,b
  1870  000930  0100               	movlb	0	; () banked
  1871  000932  6FA3               	movwf	printf@exp& (0+255),b
  1872  000934  0E00               	movlw	0
  1873  000936  0100               	movlb	0	; () banked
  1874  000938  2191               	addwfc	(??_printf+1)& (0+255),w,b
  1875  00093A  0100               	movlb	0	; () banked
  1876  00093C  6FA4               	movwf	(printf@exp+1)& (0+255),b
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;doprnt.c: 838: exp--;
  1880  00093E  0100               	movlb	0	; () banked
  1881  000940  07A3               	decf	printf@exp& (0+255),f,b
  1882  000942  A0D8               	btfss	status,0,c
  1883  000944  07A4               	decf	(printf@exp+1)& (0+255),f,b
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;doprnt.c: 839: exp *= 3;
  1887  000946  C0A3  F025         	movff	printf@exp,___wmul@multiplier
  1888  00094A  C0A4  F026         	movff	printf@exp+1,___wmul@multiplier+1
  1889  00094E  0E00               	movlw	0
  1890  000950  6E28               	movwf	___wmul@multiplicand+1,c
  1891  000952  0E03               	movlw	3
  1892  000954  6E27               	movwf	___wmul@multiplicand,c
  1893  000956  ECE8  F01D         	call	___wmul	;wreg free
  1894  00095A  C025  F0A3         	movff	?___wmul,printf@exp
  1895  00095E  C026  F0A4         	movff	?___wmul+1,printf@exp+1
  1896                           
  1897                           ;doprnt.c: 840: exp /= 10;
  1898  000962  C0A3  F01D         	movff	printf@exp,___awdiv@dividend
  1899  000966  C0A4  F01E         	movff	printf@exp+1,___awdiv@dividend+1
  1900  00096A  0E00               	movlw	0
  1901  00096C  6E20               	movwf	___awdiv@divisor+1,c
  1902  00096E  0E0A               	movlw	10
  1903  000970  6E1F               	movwf	___awdiv@divisor,c
  1904  000972  ECDF  F01A         	call	___awdiv	;wreg free
  1905  000976  C01D  F0A3         	movff	?___awdiv,printf@exp
  1906  00097A  C01E  F0A4         	movff	?___awdiv+1,printf@exp+1
  1907                           
  1908                           ;doprnt.c: 841: if(exp < 0)
  1909  00097E  0100               	movlb	0	; () banked
  1910  000980  AFA4               	btfss	(printf@exp+1)& (0+255),7,b
  1911  000982  D005               	goto	l5295
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;doprnt.c: 842: exp--;
  1915  000984  0100               	movlb	0	; () banked
  1916  000986  07A3               	decf	printf@exp& (0+255),f,b
  1917  000988  A0D8               	btfss	status,0,c
  1918  00098A  07A4               	decf	(printf@exp+1)& (0+255),f,b
  1919  00098C  D000               	goto	l5295
  1920  00098E                     l5295:
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1924  00098E  0100               	movlb	0	; () banked
  1925  000990  51A3               	movf	printf@exp& (0+255),w,b
  1926  000992  0800               	sublw	0
  1927  000994  ECFE  F00B         	call	_scale
  1928  000998  C06F  F09B         	movff	?_scale,printf@tmpval
  1929  00099C  C070  F09C         	movff	?_scale+1,printf@tmpval+1
  1930  0009A0  C071  F09D         	movff	?_scale+2,printf@tmpval+2
  1931                           
  1932                           ;doprnt.c: 847: tmpval.integ *= fval;
  1933  0009A4  C09B  F060         	movff	printf@tmpval,___ftmul@f1
  1934  0009A8  C09C  F061         	movff	printf@tmpval+1,___ftmul@f1+1
  1935  0009AC  C09D  F062         	movff	printf@tmpval+2,___ftmul@f1+2
  1936  0009B0  C0A9  F063         	movff	printf@fval,___ftmul@f2
  1937  0009B4  C0AA  F064         	movff	printf@fval+1,___ftmul@f2+1
  1938  0009B8  C0AB  F065         	movff	printf@fval+2,___ftmul@f2+2
  1939  0009BC  ECDF  F013         	call	___ftmul	;wreg free
  1940  0009C0  C060  F09B         	movff	?___ftmul,printf@tmpval
  1941  0009C4  C061  F09C         	movff	?___ftmul+1,printf@tmpval+1
  1942  0009C8  C062  F09D         	movff	?___ftmul+2,printf@tmpval+2
  1943                           
  1944                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1945  0009CC  C09B  F02B         	movff	printf@tmpval,___ftge@ff1
  1946  0009D0  C09C  F02C         	movff	printf@tmpval+1,___ftge@ff1+1
  1947  0009D4  C09D  F02D         	movff	printf@tmpval+2,___ftge@ff1+2
  1948  0009D8  0E00               	movlw	0
  1949  0009DA  6E2E               	movwf	___ftge@ff2,c
  1950  0009DC  0E80               	movlw	128
  1951  0009DE  6E2F               	movwf	___ftge@ff2+1,c
  1952  0009E0  0E3F               	movlw	63
  1953  0009E2  6E30               	movwf	___ftge@ff2+2,c
  1954  0009E4  EC2A  F01B         	call	___ftge	;wreg free
  1955  0009E8  B0D8               	btfsc	status,0,c
  1956  0009EA  D005               	goto	l5303
  1957                           
  1958                           ;doprnt.c: 849: exp--;
  1959  0009EC  0100               	movlb	0	; () banked
  1960  0009EE  07A3               	decf	printf@exp& (0+255),f,b
  1961  0009F0  A0D8               	btfss	status,0,c
  1962  0009F2  07A4               	decf	(printf@exp+1)& (0+255),f,b
  1963  0009F4  D014               	goto	l5307
  1964  0009F6                     l5303:
  1965                           
  1966                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1967  0009F6  C09B  F02B         	movff	printf@tmpval,___ftge@ff1
  1968  0009FA  C09C  F02C         	movff	printf@tmpval+1,___ftge@ff1+1
  1969  0009FE  C09D  F02D         	movff	printf@tmpval+2,___ftge@ff1+2
  1970  000A02  0E00               	movlw	0
  1971  000A04  6E2E               	movwf	___ftge@ff2,c
  1972  000A06  0E20               	movlw	32
  1973  000A08  6E2F               	movwf	___ftge@ff2+1,c
  1974  000A0A  0E41               	movlw	65
  1975  000A0C  6E30               	movwf	___ftge@ff2+2,c
  1976  000A0E  EC2A  F01B         	call	___ftge	;wreg free
  1977  000A12  A0D8               	btfss	status,0,c
  1978  000A14  D004               	goto	l5307
  1979                           
  1980                           ;doprnt.c: 851: exp++;
  1981  000A16  0100               	movlb	0	; () banked
  1982  000A18  4BA3               	infsnz	printf@exp& (0+255),f,b
  1983  000A1A  2BA4               	incf	(printf@exp+1)& (0+255),f,b
  1984                           
  1985                           ; BSR set to: 0
  1986                           
  1987                           ; BSR set to: 0
  1988  000A1C  D000               	goto	l5307
  1989  000A1E                     l5307:
  1990                           
  1991                           ;doprnt.c: 852: }
  1992                           ;doprnt.c: 1112: if(prec <= 12)
  1993  000A1E  0100               	movlb	0	; () banked
  1994  000A20  BFAD               	btfsc	(printf@prec+1)& (0+255),7,b
  1995  000A22  D008               	goto	l5309
  1996  000A24  0100               	movlb	0	; () banked
  1997  000A26  51AD               	movf	(printf@prec+1)& (0+255),w,b
  1998  000A28  E11E               	bnz	l5311
  1999  000A2A  0E0D               	movlw	13
  2000  000A2C  0100               	movlb	0	; () banked
  2001  000A2E  5DAC               	subwf	printf@prec& (0+255),w,b
  2002  000A30  B0D8               	btfsc	status,0,c
  2003  000A32  D019               	goto	l5311
  2004  000A34                     l5309:
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;doprnt.c: 1113: fval += fround(prec);
  2008  000A34  C0A9  F079         	movff	printf@fval,___ftadd@f1
  2009  000A38  C0AA  F07A         	movff	printf@fval+1,___ftadd@f1+1
  2010  000A3C  C0AB  F07B         	movff	printf@fval+2,___ftadd@f1+2
  2011  000A40  0100               	movlb	0	; () banked
  2012  000A42  51AC               	movf	printf@prec& (0+255),w,b
  2013  000A44  EC4F  F00F         	call	_fround
  2014  000A48  C06F  F07C         	movff	?_fround,___ftadd@f2
  2015  000A4C  C070  F07D         	movff	?_fround+1,___ftadd@f2+1
  2016  000A50  C071  F07E         	movff	?_fround+2,___ftadd@f2+2
  2017  000A54  EC10  F00E         	call	___ftadd	;wreg free
  2018  000A58  C079  F0A9         	movff	?___ftadd,printf@fval
  2019  000A5C  C07A  F0AA         	movff	?___ftadd+1,printf@fval+1
  2020  000A60  C07B  F0AB         	movff	?___ftadd+2,printf@fval+2
  2021  000A64  D000               	goto	l5311
  2022  000A66                     l5311:
  2023                           
  2024                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2025  000A66  0100               	movlb	0	; () banked
  2026  000A68  BFA4               	btfsc	(printf@exp+1)& (0+255),7,b
  2027  000A6A  D008               	goto	l5313
  2028  000A6C  0100               	movlb	0	; () banked
  2029  000A6E  51A4               	movf	(printf@exp+1)& (0+255),w,b
  2030  000A70  E12C               	bnz	l5319
  2031  000A72  0E0A               	movlw	10
  2032  000A74  0100               	movlb	0	; () banked
  2033  000A76  5DA3               	subwf	printf@exp& (0+255),w,b
  2034  000A78  B0D8               	btfsc	status,0,c
  2035  000A7A  D027               	goto	l5319
  2036  000A7C                     l5313:
  2037                           
  2038                           ; BSR set to: 0
  2039  000A7C  0100               	movlb	0	; () banked
  2040  000A7E  51A9               	movf	printf@fval& (0+255),w,b
  2041  000A80  0100               	movlb	0	; () banked
  2042  000A82  11AA               	iorwf	(printf@fval+1)& (0+255),w,b
  2043  000A84  0100               	movlb	0	; () banked
  2044  000A86  11AB               	iorwf	(printf@fval+2)& (0+255),w,b
  2045  000A88  B4D8               	btfsc	status,2,c
  2046  000A8A  D07B               	goto	l5333
  2047                           
  2048                           ; BSR set to: 0
  2049  000A8C  C0A9  F076         	movff	printf@fval,___fttol@f1
  2050  000A90  C0AA  F077         	movff	printf@fval+1,___fttol@f1+1
  2051  000A94  C0AB  F078         	movff	printf@fval+2,___fttol@f1+2
  2052  000A98  EC95  F014         	call	___fttol	;wreg free
  2053  000A9C  0100               	movlb	0	; () banked
  2054  000A9E  5176               	movf	?___fttol& (0+255),w,b
  2055  000AA0  0100               	movlb	0	; () banked
  2056  000AA2  1177               	iorwf	(?___fttol+1)& (0+255),w,b
  2057  000AA4  0100               	movlb	0	; () banked
  2058  000AA6  1178               	iorwf	(?___fttol+2)& (0+255),w,b
  2059  000AA8  0100               	movlb	0	; () banked
  2060  000AAA  1179               	iorwf	(?___fttol+3)& (0+255),w,b
  2061  000AAC  A4D8               	btfss	status,2,c
  2062  000AAE  D069               	goto	l5333
  2063                           
  2064                           ; BSR set to: 0
  2065  000AB0  0100               	movlb	0	; () banked
  2066  000AB2  BFA4               	btfsc	(printf@exp+1)& (0+255),7,b
  2067  000AB4  D066               	goto	l5333
  2068  000AB6  0100               	movlb	0	; () banked
  2069  000AB8  51A4               	movf	(printf@exp+1)& (0+255),w,b
  2070  000ABA  E107               	bnz	l5319
  2071  000ABC  0E02               	movlw	2
  2072  000ABE  0100               	movlb	0	; () banked
  2073  000AC0  5DA3               	subwf	printf@exp& (0+255),w,b
  2074  000AC2  B0D8               	btfsc	status,0,c
  2075  000AC4  D002               	goto	l5319
  2076  000AC6  D05D               	goto	l5333
  2077  000AC8  D000               	goto	l5319
  2078  000ACA                     l5319:
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2082  000ACA  C09B  F02B         	movff	printf@tmpval,___ftge@ff1
  2083  000ACE  C09C  F02C         	movff	printf@tmpval+1,___ftge@ff1+1
  2084  000AD2  C09D  F02D         	movff	printf@tmpval+2,___ftge@ff1+2
  2085  000AD6  0E70               	movlw	112
  2086  000AD8  6E2E               	movwf	___ftge@ff2,c
  2087  000ADA  0E89               	movlw	137
  2088  000ADC  6E2F               	movwf	___ftge@ff2+1,c
  2089  000ADE  0E40               	movlw	64
  2090  000AE0  6E30               	movwf	___ftge@ff2+2,c
  2091  000AE2  EC2A  F01B         	call	___ftge	;wreg free
  2092  000AE6  B0D8               	btfsc	status,0,c
  2093  000AE8  D003               	goto	l5323
  2094                           
  2095                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2096  000AEA  0100               	movlb	0	; () banked
  2097  000AEC  0EF7               	movlw	247
  2098  000AEE  D002               	goto	L1
  2099  000AF0                     l5323:
  2100                           
  2101                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2102  000AF0  0100               	movlb	0	; () banked
  2103  000AF2  0EF8               	movlw	248
  2104  000AF4                     L1:
  2105  000AF4  27A3               	addwf	printf@exp& (0+255),f,b
  2106  000AF6  0EFF               	movlw	255
  2107  000AF8  23A4               	addwfc	(printf@exp+1)& (0+255),f,b
  2108  000AFA  D000               	goto	l5325
  2109  000AFC                     l5325:
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;doprnt.c: 1124: }
  2113                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2114  000AFC  0100               	movlb	0	; () banked
  2115  000AFE  51A3               	movf	printf@exp& (0+255),w,b
  2116  000B00  ECFE  F00B         	call	_scale
  2117  000B04  C06F  F09B         	movff	?_scale,printf@tmpval
  2118  000B08  C070  F09C         	movff	?_scale+1,printf@tmpval+1
  2119  000B0C  C071  F09D         	movff	?_scale+2,printf@tmpval+2
  2120                           
  2121                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2122  000B10  D017               	goto	l5329
  2123  000B12  C0A9  F017         	movff	printf@fval,__div_to_l_@f1
  2124  000B16  C0AA  F018         	movff	printf@fval+1,__div_to_l_@f1+1
  2125  000B1A  C0AB  F019         	movff	printf@fval+2,__div_to_l_@f1+2
  2126  000B1E  C09B  F01A         	movff	printf@tmpval,__div_to_l_@f2
  2127  000B22  C09C  F01B         	movff	printf@tmpval+1,__div_to_l_@f2+1
  2128  000B26  C09D  F01C         	movff	printf@tmpval+2,__div_to_l_@f2+2
  2129  000B2A  EC82  F016         	call	__div_to_l_	;wreg free
  2130  000B2E  C017  F09F         	movff	?__div_to_l_,printf@val
  2131  000B32  C018  F0A0         	movff	?__div_to_l_+1,printf@val+1
  2132  000B36  C019  F0A1         	movff	?__div_to_l_+2,printf@val+2
  2133  000B3A  C01A  F0A2         	movff	?__div_to_l_+3,printf@val+3
  2134  000B3E  D017               	goto	l5331
  2135  000B40                     l5329:
  2136  000B40  C0A9  F017         	movff	printf@fval,__tdiv_to_l_@f1
  2137  000B44  C0AA  F018         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2138  000B48  C0AB  F019         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2139  000B4C  C09B  F01A         	movff	printf@tmpval,__tdiv_to_l_@f2
  2140  000B50  C09C  F01B         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2141  000B54  C09D  F01C         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2142  000B58  ECE5  F015         	call	__tdiv_to_l_	;wreg free
  2143  000B5C  C017  F09F         	movff	?__tdiv_to_l_,printf@val
  2144  000B60  C018  F0A0         	movff	?__tdiv_to_l_+1,printf@val+1
  2145  000B64  C019  F0A1         	movff	?__tdiv_to_l_+2,printf@val+2
  2146  000B68  C01A  F0A2         	movff	?__tdiv_to_l_+3,printf@val+3
  2147  000B6C  D000               	goto	l5331
  2148  000B6E                     l5331:
  2149                           
  2150                           ;doprnt.c: 1129: fval = 0.0;
  2151  000B6E  0E00               	movlw	0
  2152  000B70  0100               	movlb	0	; () banked
  2153  000B72  6FA9               	movwf	printf@fval& (0+255),b
  2154  000B74  0E00               	movlw	0
  2155  000B76  0100               	movlb	0	; () banked
  2156  000B78  6FAA               	movwf	(printf@fval+1)& (0+255),b
  2157  000B7A  0E00               	movlw	0
  2158  000B7C  0100               	movlb	0	; () banked
  2159  000B7E  6FAB               	movwf	(printf@fval+2)& (0+255),b
  2160                           
  2161                           ;doprnt.c: 1130: } else {
  2162  000B80  D034               	goto	l5337
  2163  000B82                     l5333:
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2167  000B82  C0A9  F076         	movff	printf@fval,___fttol@f1
  2168  000B86  C0AA  F077         	movff	printf@fval+1,___fttol@f1+1
  2169  000B8A  C0AB  F078         	movff	printf@fval+2,___fttol@f1+2
  2170  000B8E  EC95  F014         	call	___fttol	;wreg free
  2171  000B92  C076  F09F         	movff	?___fttol,printf@val
  2172  000B96  C077  F0A0         	movff	?___fttol+1,printf@val+1
  2173  000B9A  C078  F0A1         	movff	?___fttol+2,printf@val+2
  2174  000B9E  C079  F0A2         	movff	?___fttol+3,printf@val+3
  2175                           
  2176                           ;doprnt.c: 1132: fval -= (double)val;
  2177  000BA2  C0A9  F085         	movff	printf@fval,___ftsub@f1
  2178  000BA6  C0AA  F086         	movff	printf@fval+1,___ftsub@f1+1
  2179  000BAA  C0AB  F087         	movff	printf@fval+2,___ftsub@f1+2
  2180  000BAE  C09F  F01F         	movff	printf@val,___lltoft@c
  2181  000BB2  C0A0  F020         	movff	printf@val+1,___lltoft@c+1
  2182  000BB6  C0A1  F021         	movff	printf@val+2,___lltoft@c+2
  2183  000BBA  C0A2  F022         	movff	printf@val+3,___lltoft@c+3
  2184  000BBE  ECB5  F01C         	call	___lltoft	;wreg free
  2185  000BC2  C01F  F088         	movff	?___lltoft,___ftsub@f2
  2186  000BC6  C020  F089         	movff	?___lltoft+1,___ftsub@f2+1
  2187  000BCA  C021  F08A         	movff	?___lltoft+2,___ftsub@f2+2
  2188  000BCE  EC11  F01D         	call	___ftsub	;wreg free
  2189  000BD2  C085  F0A9         	movff	?___ftsub,printf@fval
  2190  000BD6  C086  F0AA         	movff	?___ftsub+1,printf@fval+1
  2191  000BDA  C087  F0AB         	movff	?___ftsub+2,printf@fval+2
  2192                           
  2193                           ;doprnt.c: 1133: exp = 0;
  2194  000BDE  0E00               	movlw	0
  2195  000BE0  0100               	movlb	0	; () banked
  2196  000BE2  6FA4               	movwf	(printf@exp+1)& (0+255),b
  2197  000BE4  0E00               	movlw	0
  2198  000BE6  6FA3               	movwf	printf@exp& (0+255),b
  2199  000BE8  D000               	goto	l5337
  2200  000BEA                     l5337:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;doprnt.c: 1134: }
  2204                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2205  000BEA  0E01               	movlw	1
  2206  000BEC  0100               	movlb	0	; () banked
  2207  000BEE  6FAE               	movwf	printf@c& (0+255),b
  2208  000BF0                     l5339:
  2209                           
  2210                           ; BSR set to: 0
  2211  000BF0  0E0A               	movlw	10
  2212  000BF2  0100               	movlb	0	; () banked
  2213  000BF4  19AE               	xorwf	printf@c& (0+255),w,b
  2214  000BF6  B4D8               	btfsc	status,2,c
  2215  000BF8  D022               	goto	l5351
  2216  000BFA  D001               	goto	l5343
  2217                           
  2218                           ; BSR set to: 0
  2219  000BFC  D020               	goto	l5351
  2220  000BFE                     l5343:
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;doprnt.c: 1137: if(val < dpowers[c])
  2224  000BFE  0100               	movlb	0	; () banked
  2225  000C00  51AE               	movf	printf@c& (0+255),w,b
  2226  000C02  0D04               	mullw	4
  2227  000C04  0E01               	movlw	low _dpowers
  2228  000C06  24F3               	addwf	prodl,w,c
  2229  000C08  6EF6               	movwf	tblptrl,c
  2230  000C0A  0E06               	movlw	high _dpowers
  2231  000C0C  20F4               	addwfc	prodh,w,c
  2232  000C0E  6EF7               	movwf	tblptrh,c
  2233  000C10                     	if	0	;There are less than 3 active tblptr bytes
  2234  000C10                     	endif
  2235  000C10  0009               	tblrd		*+
  2236  000C12  50F5               	movf	tablat,w,c
  2237  000C14  0100               	movlb	0	; () banked
  2238  000C16  5D9F               	subwf	printf@val& (0+255),w,b
  2239  000C18  0009               	tblrd		*+
  2240  000C1A  50F5               	movf	tablat,w,c
  2241  000C1C  0100               	movlb	0	; () banked
  2242  000C1E  59A0               	subwfb	(printf@val+1)& (0+255),w,b
  2243  000C20  0009               	tblrd		*+
  2244  000C22  50F5               	movf	tablat,w,c
  2245  000C24  0100               	movlb	0	; () banked
  2246  000C26  59A1               	subwfb	(printf@val+2)& (0+255),w,b
  2247  000C28  0009               	tblrd		*+
  2248  000C2A  50F5               	movf	tablat,w,c
  2249  000C2C  0100               	movlb	0	; () banked
  2250  000C2E  59A2               	subwfb	(printf@val+3)& (0+255),w,b
  2251  000C30  A0D8               	btfss	status,0,c
  2252  000C32  D005               	goto	l5351
  2253  000C34  D001               	goto	l5347
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;doprnt.c: 1138: break;
  2257  000C36  D003               	goto	l5351
  2258  000C38                     l5347:
  2259                           
  2260                           ; BSR set to: 0
  2261  000C38  0100               	movlb	0	; () banked
  2262  000C3A  2BAE               	incf	printf@c& (0+255),f,b
  2263  000C3C  D7D9               	goto	l5339
  2264  000C3E                     l5351:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;doprnt.c: 1142: width -= prec + c + exp;
  2268  000C3E  C0AE  F090         	movff	printf@c,??_printf
  2269  000C42  0100               	movlb	0	; () banked
  2270  000C44  6B91               	clrf	(??_printf+1)& (0+255),b
  2271  000C46  BF90               	btfsc	??_printf& (0+255),7,b
  2272  000C48  0791               	decf	(??_printf+1)& (0+255),f,b
  2273  000C4A  0100               	movlb	0	; () banked
  2274  000C4C  51AC               	movf	printf@prec& (0+255),w,b
  2275  000C4E  0100               	movlb	0	; () banked
  2276  000C50  2790               	addwf	??_printf& (0+255),f,b
  2277  000C52  0100               	movlb	0	; () banked
  2278  000C54  51AD               	movf	(printf@prec+1)& (0+255),w,b
  2279  000C56  0100               	movlb	0	; () banked
  2280  000C58  2391               	addwfc	(??_printf+1)& (0+255),f,b
  2281  000C5A  0100               	movlb	0	; () banked
  2282  000C5C  51A3               	movf	printf@exp& (0+255),w,b
  2283  000C5E  0100               	movlb	0	; () banked
  2284  000C60  2790               	addwf	??_printf& (0+255),f,b
  2285  000C62  0100               	movlb	0	; () banked
  2286  000C64  51A4               	movf	(printf@exp+1)& (0+255),w,b
  2287  000C66  0100               	movlb	0	; () banked
  2288  000C68  2391               	addwfc	(??_printf+1)& (0+255),f,b
  2289  000C6A  0100               	movlb	0	; () banked
  2290  000C6C  5190               	movf	??_printf& (0+255),w,b
  2291  000C6E  0100               	movlb	0	; () banked
  2292  000C70  5FA7               	subwf	printf@width& (0+255),f,b
  2293  000C72  0100               	movlb	0	; () banked
  2294  000C74  5191               	movf	(??_printf+1)& (0+255),w,b
  2295  000C76  0100               	movlb	0	; () banked
  2296  000C78  5BA8               	subwfb	(printf@width+1)& (0+255),f,b
  2297                           
  2298                           ;doprnt.c: 1143: if(
  2299                           ;doprnt.c: 1147: prec)
  2300  000C7A  0100               	movlb	0	; () banked
  2301  000C7C  51AC               	movf	printf@prec& (0+255),w,b
  2302  000C7E  0100               	movlb	0	; () banked
  2303  000C80  11AD               	iorwf	(printf@prec+1)& (0+255),w,b
  2304  000C82  B4D8               	btfsc	status,2,c
  2305  000C84  D005               	goto	l5355
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;doprnt.c: 1148: width--;
  2309  000C86  0100               	movlb	0	; () banked
  2310  000C88  07A7               	decf	printf@width& (0+255),f,b
  2311  000C8A  A0D8               	btfss	status,0,c
  2312  000C8C  07A8               	decf	(printf@width+1)& (0+255),f,b
  2313  000C8E  D000               	goto	l5355
  2314  000C90                     l5355:
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;doprnt.c: 1149: if(flag & 0x03)
  2318  000C90  0E03               	movlw	3
  2319  000C92  0100               	movlb	0	; () banked
  2320  000C94  15A5               	andwf	printf@flag& (0+255),w,b
  2321  000C96  0100               	movlb	0	; () banked
  2322  000C98  6F90               	movwf	??_printf& (0+255),b
  2323  000C9A  0E00               	movlw	0
  2324  000C9C  0100               	movlb	0	; () banked
  2325  000C9E  15A6               	andwf	(printf@flag+1)& (0+255),w,b
  2326  000CA0  0100               	movlb	0	; () banked
  2327  000CA2  6F91               	movwf	(??_printf+1)& (0+255),b
  2328  000CA4  0100               	movlb	0	; () banked
  2329  000CA6  5190               	movf	??_printf& (0+255),w,b
  2330  000CA8  0100               	movlb	0	; () banked
  2331  000CAA  1191               	iorwf	(??_printf+1)& (0+255),w,b
  2332  000CAC  B4D8               	btfsc	status,2,c
  2333  000CAE  D005               	goto	l5359
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;doprnt.c: 1150: width--;
  2337  000CB0  0100               	movlb	0	; () banked
  2338  000CB2  07A7               	decf	printf@width& (0+255),f,b
  2339  000CB4  A0D8               	btfss	status,0,c
  2340  000CB6  07A8               	decf	(printf@width+1)& (0+255),f,b
  2341  000CB8  D000               	goto	l5359
  2342  000CBA                     l5359:
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;doprnt.c: 1153: if(flag & 0x04) {
  2346  000CBA  0100               	movlb	0	; () banked
  2347  000CBC  A5A5               	btfss	printf@flag& (0+255),2,b
  2348  000CBE  D031               	goto	l5375
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;doprnt.c: 1157: if(flag & 0x03)
  2352  000CC0  0E03               	movlw	3
  2353  000CC2  0100               	movlb	0	; () banked
  2354  000CC4  15A5               	andwf	printf@flag& (0+255),w,b
  2355  000CC6  0100               	movlb	0	; () banked
  2356  000CC8  6F90               	movwf	??_printf& (0+255),b
  2357  000CCA  0E00               	movlw	0
  2358  000CCC  0100               	movlb	0	; () banked
  2359  000CCE  15A6               	andwf	(printf@flag+1)& (0+255),w,b
  2360  000CD0  0100               	movlb	0	; () banked
  2361  000CD2  6F91               	movwf	(??_printf+1)& (0+255),b
  2362  000CD4  0100               	movlb	0	; () banked
  2363  000CD6  5190               	movf	??_printf& (0+255),w,b
  2364  000CD8  0100               	movlb	0	; () banked
  2365  000CDA  1191               	iorwf	(??_printf+1)& (0+255),w,b
  2366  000CDC  B4D8               	btfsc	status,2,c
  2367  000CDE  D00C               	goto	l5369
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;doprnt.c: 1159: (putch('-') );
  2371  000CE0  0E2D               	movlw	45
  2372  000CE2  ECAC  F01E         	call	_putch
  2373                           
  2374                           ;doprnt.c: 1168: while(width > 0) {
  2375  000CE6  D008               	goto	l5369
  2376  000CE8                     l5365:
  2377                           
  2378                           ;doprnt.c: 1169: (putch('0') );
  2379  000CE8  0E30               	movlw	48
  2380  000CEA  ECAC  F01E         	call	_putch
  2381                           
  2382                           ;doprnt.c: 1170: width--;
  2383  000CEE  0100               	movlb	0	; () banked
  2384  000CF0  07A7               	decf	printf@width& (0+255),f,b
  2385  000CF2  A0D8               	btfss	status,0,c
  2386  000CF4  07A8               	decf	(printf@width+1)& (0+255),f,b
  2387  000CF6  D000               	goto	l5369
  2388  000CF8                     l5369:
  2389  000CF8  0100               	movlb	0	; () banked
  2390  000CFA  BFA8               	btfsc	(printf@width+1)& (0+255),7,b
  2391  000CFC  D077               	goto	l5387
  2392  000CFE  0100               	movlb	0	; () banked
  2393  000D00  51A8               	movf	(printf@width+1)& (0+255),w,b
  2394  000D02  E1F2               	bnz	l5365
  2395  000D04  0100               	movlb	0	; () banked
  2396  000D06  05A7               	decf	printf@width& (0+255),w,b
  2397  000D08  A0D8               	btfss	status,0,c
  2398  000D0A  D070               	goto	l5387
  2399  000D0C  D7ED               	goto	l5365
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;doprnt.c: 1171: }
  2403                           ;doprnt.c: 1173: } else
  2404  000D0E  D06E               	goto	l5387
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;doprnt.c: 1175: {
  2408                           ;doprnt.c: 1180: while(width > 0) {
  2409  000D10  D008               	goto	l5375
  2410  000D12                     l5371:
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;doprnt.c: 1181: (putch(' ') );
  2414  000D12  0E20               	movlw	32
  2415  000D14  ECAC  F01E         	call	_putch
  2416                           
  2417                           ;doprnt.c: 1182: width--;
  2418  000D18  0100               	movlb	0	; () banked
  2419  000D1A  07A7               	decf	printf@width& (0+255),f,b
  2420  000D1C  A0D8               	btfss	status,0,c
  2421  000D1E  07A8               	decf	(printf@width+1)& (0+255),f,b
  2422  000D20  D000               	goto	l5375
  2423  000D22                     l5375:
  2424                           
  2425                           ; BSR set to: 0
  2426  000D22  0100               	movlb	0	; () banked
  2427  000D24  BFA8               	btfsc	(printf@width+1)& (0+255),7,b
  2428  000D26  D007               	goto	l5377
  2429  000D28  0100               	movlb	0	; () banked
  2430  000D2A  51A8               	movf	(printf@width+1)& (0+255),w,b
  2431  000D2C  E1F2               	bnz	l5371
  2432  000D2E  0100               	movlb	0	; () banked
  2433  000D30  05A7               	decf	printf@width& (0+255),w,b
  2434  000D32  B0D8               	btfsc	status,0,c
  2435  000D34  D7EE               	goto	l5371
  2436  000D36                     l5377:
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;doprnt.c: 1183: }
  2440                           ;doprnt.c: 1188: if(flag & 0x03)
  2441  000D36  0E03               	movlw	3
  2442  000D38  0100               	movlb	0	; () banked
  2443  000D3A  15A5               	andwf	printf@flag& (0+255),w,b
  2444  000D3C  0100               	movlb	0	; () banked
  2445  000D3E  6F90               	movwf	??_printf& (0+255),b
  2446  000D40  0E00               	movlw	0
  2447  000D42  0100               	movlb	0	; () banked
  2448  000D44  15A6               	andwf	(printf@flag+1)& (0+255),w,b
  2449  000D46  0100               	movlb	0	; () banked
  2450  000D48  6F91               	movwf	(??_printf+1)& (0+255),b
  2451  000D4A  0100               	movlb	0	; () banked
  2452  000D4C  5190               	movf	??_printf& (0+255),w,b
  2453  000D4E  0100               	movlb	0	; () banked
  2454  000D50  1191               	iorwf	(??_printf+1)& (0+255),w,b
  2455  000D52  B4D8               	btfsc	status,2,c
  2456  000D54  D04B               	goto	l5387
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;doprnt.c: 1190: (putch('-') );
  2460  000D56  0E2D               	movlw	45
  2461  000D58  ECAC  F01E         	call	_putch
  2462                           
  2463                           ;doprnt.c: 1195: }
  2464                           ;doprnt.c: 1196: while(c--) {
  2465  000D5C  D047               	goto	l5387
  2466  000D5E                     l5381:
  2467                           
  2468                           ;doprnt.c: 1200: {
  2469                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2470  000D5E  C09F  F017         	movff	printf@val,___lldiv@dividend
  2471  000D62  C0A0  F018         	movff	printf@val+1,___lldiv@dividend+1
  2472  000D66  C0A1  F019         	movff	printf@val+2,___lldiv@dividend+2
  2473  000D6A  C0A2  F01A         	movff	printf@val+3,___lldiv@dividend+3
  2474  000D6E  0100               	movlb	0	; () banked
  2475  000D70  51AE               	movf	printf@c& (0+255),w,b
  2476  000D72  0D04               	mullw	4
  2477  000D74  0E01               	movlw	low _dpowers
  2478  000D76  24F3               	addwf	prodl,w,c
  2479  000D78  6EF6               	movwf	tblptrl,c
  2480  000D7A  0E06               	movlw	high _dpowers
  2481  000D7C  20F4               	addwfc	prodh,w,c
  2482  000D7E  6EF7               	movwf	tblptrh,c
  2483  000D80                     	if	0	;There are less than 3 active tblptr bytes
  2484  000D80                     	endif
  2485  000D80  0009               	tblrd		*+
  2486  000D82  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2487  000D86  0009               	tblrd		*+
  2488  000D88  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2489  000D8C  0009               	tblrd		*+
  2490  000D8E  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2491  000D92  000A               	tblrd		*-
  2492  000D94  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2493  000D98  ECBE  F01B         	call	___lldiv	;wreg free
  2494  000D9C  C017  F09B         	movff	?___lldiv,printf@tmpval
  2495  000DA0  C018  F09C         	movff	?___lldiv+1,printf@tmpval+1
  2496  000DA4  C019  F09D         	movff	?___lldiv+2,printf@tmpval+2
  2497  000DA8  C01A  F09E         	movff	?___lldiv+3,printf@tmpval+3
  2498                           
  2499                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2500  000DAC  C09B  F024         	movff	printf@tmpval,___llmod@dividend
  2501  000DB0  C09C  F025         	movff	printf@tmpval+1,___llmod@dividend+1
  2502  000DB4  C09D  F026         	movff	printf@tmpval+2,___llmod@dividend+2
  2503  000DB8  C09E  F027         	movff	printf@tmpval+3,___llmod@dividend+3
  2504  000DBC  0E0A               	movlw	10
  2505  000DBE  6E28               	movwf	___llmod@divisor,c
  2506  000DC0  0E00               	movlw	0
  2507  000DC2  6E29               	movwf	___llmod@divisor+1,c
  2508  000DC4  0E00               	movlw	0
  2509  000DC6  6E2A               	movwf	___llmod@divisor+2,c
  2510  000DC8  0E00               	movlw	0
  2511  000DCA  6E2B               	movwf	___llmod@divisor+3,c
  2512  000DCC  EC45  F01C         	call	___llmod	;wreg free
  2513  000DD0  C024  F09B         	movff	?___llmod,printf@tmpval
  2514  000DD4  C025  F09C         	movff	?___llmod+1,printf@tmpval+1
  2515  000DD8  C026  F09D         	movff	?___llmod+2,printf@tmpval+2
  2516  000DDC  C027  F09E         	movff	?___llmod+3,printf@tmpval+3
  2517                           
  2518                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2519  000DE0  0100               	movlb	0	; () banked
  2520  000DE2  519B               	movf	printf@tmpval& (0+255),w,b
  2521  000DE4  0F30               	addlw	48
  2522  000DE6  ECAC  F01E         	call	_putch
  2523  000DEA  D000               	goto	l5387
  2524  000DEC                     l5387:
  2525  000DEC  0100               	movlb	0	; () banked
  2526  000DEE  07AE               	decf	printf@c& (0+255),f,b
  2527  000DF0  0100               	movlb	0	; () banked
  2528  000DF2  29AE               	incf	printf@c& (0+255),w,b
  2529  000DF4  B4D8               	btfsc	status,2,c
  2530  000DF6  D00A               	goto	l5393
  2531  000DF8  D7B2               	goto	l5381
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;doprnt.c: 1204: }
  2535                           ;doprnt.c: 1206: }
  2536                           ;doprnt.c: 1207: while(exp > 0) {
  2537  000DFA  D008               	goto	l5393
  2538  000DFC                     l5389:
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;doprnt.c: 1208: (putch('0') );
  2542  000DFC  0E30               	movlw	48
  2543  000DFE  ECAC  F01E         	call	_putch
  2544                           
  2545                           ;doprnt.c: 1209: exp--;
  2546  000E02  0100               	movlb	0	; () banked
  2547  000E04  07A3               	decf	printf@exp& (0+255),f,b
  2548  000E06  A0D8               	btfss	status,0,c
  2549  000E08  07A4               	decf	(printf@exp+1)& (0+255),f,b
  2550  000E0A  D000               	goto	l5393
  2551  000E0C                     l5393:
  2552                           
  2553                           ; BSR set to: 0
  2554  000E0C  0100               	movlb	0	; () banked
  2555  000E0E  BFA4               	btfsc	(printf@exp+1)& (0+255),7,b
  2556  000E10  D007               	goto	l5395
  2557  000E12  0100               	movlb	0	; () banked
  2558  000E14  51A4               	movf	(printf@exp+1)& (0+255),w,b
  2559  000E16  E1F2               	bnz	l5389
  2560  000E18  0100               	movlb	0	; () banked
  2561  000E1A  05A3               	decf	printf@exp& (0+255),w,b
  2562  000E1C  B0D8               	btfsc	status,0,c
  2563  000E1E  D7EE               	goto	l5389
  2564  000E20                     l5395:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;doprnt.c: 1210: }
  2568                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2569  000E20  0100               	movlb	0	; () banked
  2570  000E22  BFAD               	btfsc	(printf@prec+1)& (0+255),7,b
  2571  000E24  D00C               	goto	l662
  2572  000E26  0100               	movlb	0	; () banked
  2573  000E28  51AD               	movf	(printf@prec+1)& (0+255),w,b
  2574  000E2A  E105               	bnz	u5770
  2575  000E2C  0E09               	movlw	9
  2576  000E2E  0100               	movlb	0	; () banked
  2577  000E30  5DAC               	subwf	printf@prec& (0+255),w,b
  2578  000E32  A0D8               	btfss	status,0,c
  2579  000E34  D004               	goto	l662
  2580  000E36                     u5770:
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2584  000E36  0E08               	movlw	8
  2585  000E38  0100               	movlb	0	; () banked
  2586  000E3A  6FAE               	movwf	printf@c& (0+255),b
  2587  000E3C  D003               	goto	l5399
  2588  000E3E                     l662:
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;doprnt.c: 1213: else
  2592                           ;doprnt.c: 1214: c = prec;
  2593  000E3E  C0AC  F0AE         	movff	printf@prec,printf@c
  2594  000E42  D000               	goto	l5399
  2595  000E44                     l5399:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;doprnt.c: 1215: prec -= c;
  2599  000E44  0100               	movlb	0	; () banked
  2600  000E46  51AE               	movf	printf@c& (0+255),w,b
  2601  000E48  0100               	movlb	0	; () banked
  2602  000E4A  5FAC               	subwf	printf@prec& (0+255),f,b
  2603  000E4C  0E00               	movlw	0
  2604  000E4E  0100               	movlb	0	; () banked
  2605  000E50  BFAE               	btfsc	printf@c& (0+255),7,b
  2606  000E52  0EFF               	movlw	255
  2607  000E54  0100               	movlb	0	; () banked
  2608  000E56  5BAD               	subwfb	(printf@prec+1)& (0+255),f,b
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;doprnt.c: 1219: if(c)
  2612  000E58  0100               	movlb	0	; () banked
  2613  000E5A  51AE               	movf	printf@c& (0+255),w,b
  2614  000E5C  0100               	movlb	0	; () banked
  2615  000E5E  B4D8               	btfsc	status,2,c
  2616  000E60  D004               	goto	l5405
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;doprnt.c: 1221: (putch('.') );
  2620  000E62  0E2E               	movlw	46
  2621  000E64  ECAC  F01E         	call	_putch
  2622  000E68  D000               	goto	l5405
  2623  000E6A                     l5405:
  2624                           
  2625                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2626  000E6A  0100               	movlb	0	; () banked
  2627  000E6C  51AE               	movf	printf@c& (0+255),w,b
  2628  000E6E  ECFE  F00B         	call	_scale
  2629  000E72  C06F  F096         	movff	?_scale,_printf$1610
  2630  000E76  C070  F097         	movff	?_scale+1,_printf$1610+1
  2631  000E7A  C071  F098         	movff	?_scale+2,_printf$1610+2
  2632                           
  2633                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2634  000E7E  C0A9  F063         	movff	printf@fval,___ftmul@f2
  2635  000E82  C0AA  F064         	movff	printf@fval+1,___ftmul@f2+1
  2636  000E86  C0AB  F065         	movff	printf@fval+2,___ftmul@f2+2
  2637  000E8A  C096  F060         	movff	_printf$1610,___ftmul@f1
  2638  000E8E  C097  F061         	movff	_printf$1610+1,___ftmul@f1+1
  2639  000E92  C098  F062         	movff	_printf$1610+2,___ftmul@f1+2
  2640  000E96  ECDF  F013         	call	___ftmul	;wreg free
  2641  000E9A  C060  F076         	movff	?___ftmul,___fttol@f1
  2642  000E9E  C061  F077         	movff	?___ftmul+1,___fttol@f1+1
  2643  000EA2  C062  F078         	movff	?___ftmul+2,___fttol@f1+2
  2644  000EA6  EC95  F014         	call	___fttol	;wreg free
  2645  000EAA  C076  F09F         	movff	?___fttol,printf@val
  2646  000EAE  C077  F0A0         	movff	?___fttol+1,printf@val+1
  2647  000EB2  C078  F0A1         	movff	?___fttol+2,printf@val+2
  2648  000EB6  C079  F0A2         	movff	?___fttol+3,printf@val+3
  2649                           
  2650                           ;doprnt.c: 1228: while(c--) {
  2651  000EBA  D06E               	goto	l5415
  2652  000EBC                     l5409:
  2653                           
  2654                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2655  000EBC  C09F  F017         	movff	printf@val,___lldiv@dividend
  2656  000EC0  C0A0  F018         	movff	printf@val+1,___lldiv@dividend+1
  2657  000EC4  C0A1  F019         	movff	printf@val+2,___lldiv@dividend+2
  2658  000EC8  C0A2  F01A         	movff	printf@val+3,___lldiv@dividend+3
  2659  000ECC  0100               	movlb	0	; () banked
  2660  000ECE  51AE               	movf	printf@c& (0+255),w,b
  2661  000ED0  0D04               	mullw	4
  2662  000ED2  0E01               	movlw	low _dpowers
  2663  000ED4  24F3               	addwf	prodl,w,c
  2664  000ED6  6EF6               	movwf	tblptrl,c
  2665  000ED8  0E06               	movlw	high _dpowers
  2666  000EDA  20F4               	addwfc	prodh,w,c
  2667  000EDC  6EF7               	movwf	tblptrh,c
  2668  000EDE                     	if	0	;There are less than 3 active tblptr bytes
  2669  000EDE                     	endif
  2670  000EDE  0009               	tblrd		*+
  2671  000EE0  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2672  000EE4  0009               	tblrd		*+
  2673  000EE6  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2674  000EEA  0009               	tblrd		*+
  2675  000EEC  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2676  000EF0  000A               	tblrd		*-
  2677  000EF2  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2678  000EF6  ECBE  F01B         	call	___lldiv	;wreg free
  2679  000EFA  C017  F09B         	movff	?___lldiv,printf@tmpval
  2680  000EFE  C018  F09C         	movff	?___lldiv+1,printf@tmpval+1
  2681  000F02  C019  F09D         	movff	?___lldiv+2,printf@tmpval+2
  2682  000F06  C01A  F09E         	movff	?___lldiv+3,printf@tmpval+3
  2683                           
  2684                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2685  000F0A  C09B  F024         	movff	printf@tmpval,___llmod@dividend
  2686  000F0E  C09C  F025         	movff	printf@tmpval+1,___llmod@dividend+1
  2687  000F12  C09D  F026         	movff	printf@tmpval+2,___llmod@dividend+2
  2688  000F16  C09E  F027         	movff	printf@tmpval+3,___llmod@dividend+3
  2689  000F1A  0E0A               	movlw	10
  2690  000F1C  6E28               	movwf	___llmod@divisor,c
  2691  000F1E  0E00               	movlw	0
  2692  000F20  6E29               	movwf	___llmod@divisor+1,c
  2693  000F22  0E00               	movlw	0
  2694  000F24  6E2A               	movwf	___llmod@divisor+2,c
  2695  000F26  0E00               	movlw	0
  2696  000F28  6E2B               	movwf	___llmod@divisor+3,c
  2697  000F2A  EC45  F01C         	call	___llmod	;wreg free
  2698  000F2E  C024  F09B         	movff	?___llmod,printf@tmpval
  2699  000F32  C025  F09C         	movff	?___llmod+1,printf@tmpval+1
  2700  000F36  C026  F09D         	movff	?___llmod+2,printf@tmpval+2
  2701  000F3A  C027  F09E         	movff	?___llmod+3,printf@tmpval+3
  2702                           
  2703                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2704  000F3E  0100               	movlb	0	; () banked
  2705  000F40  519B               	movf	printf@tmpval& (0+255),w,b
  2706  000F42  0F30               	addlw	48
  2707  000F44  ECAC  F01E         	call	_putch
  2708                           
  2709                           ;doprnt.c: 1232: val %= dpowers[c];
  2710  000F48  C09F  F024         	movff	printf@val,___llmod@dividend
  2711  000F4C  C0A0  F025         	movff	printf@val+1,___llmod@dividend+1
  2712  000F50  C0A1  F026         	movff	printf@val+2,___llmod@dividend+2
  2713  000F54  C0A2  F027         	movff	printf@val+3,___llmod@dividend+3
  2714  000F58  0100               	movlb	0	; () banked
  2715  000F5A  51AE               	movf	printf@c& (0+255),w,b
  2716  000F5C  0D04               	mullw	4
  2717  000F5E  0E01               	movlw	low _dpowers
  2718  000F60  24F3               	addwf	prodl,w,c
  2719  000F62  6EF6               	movwf	tblptrl,c
  2720  000F64  0E06               	movlw	high _dpowers
  2721  000F66  20F4               	addwfc	prodh,w,c
  2722  000F68  6EF7               	movwf	tblptrh,c
  2723  000F6A                     	if	0	;There are less than 3 active tblptr bytes
  2724  000F6A                     	endif
  2725  000F6A  0009               	tblrd		*+
  2726  000F6C  CFF5 F028          	movff	tablat,___llmod@divisor
  2727  000F70  0009               	tblrd		*+
  2728  000F72  CFF5 F029          	movff	tablat,___llmod@divisor+1
  2729  000F76  0009               	tblrd		*+
  2730  000F78  CFF5 F02A          	movff	tablat,___llmod@divisor+2
  2731  000F7C  000A               	tblrd		*-
  2732  000F7E  CFF5 F02B          	movff	tablat,___llmod@divisor+3
  2733  000F82  EC45  F01C         	call	___llmod	;wreg free
  2734  000F86  C024  F09F         	movff	?___llmod,printf@val
  2735  000F8A  C025  F0A0         	movff	?___llmod+1,printf@val+1
  2736  000F8E  C026  F0A1         	movff	?___llmod+2,printf@val+2
  2737  000F92  C027  F0A2         	movff	?___llmod+3,printf@val+3
  2738  000F96  D000               	goto	l5415
  2739  000F98                     l5415:
  2740  000F98  0100               	movlb	0	; () banked
  2741  000F9A  07AE               	decf	printf@c& (0+255),f,b
  2742  000F9C  0100               	movlb	0	; () banked
  2743  000F9E  29AE               	incf	printf@c& (0+255),w,b
  2744  000FA0  B4D8               	btfsc	status,2,c
  2745  000FA2  D00A               	goto	l5421
  2746  000FA4  D78B               	goto	l5409
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;doprnt.c: 1233: }
  2750                           ;doprnt.c: 1235: while(prec) {
  2751  000FA6  D008               	goto	l5421
  2752  000FA8                     l5417:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;doprnt.c: 1236: (putch('0') );
  2756  000FA8  0E30               	movlw	48
  2757  000FAA  ECAC  F01E         	call	_putch
  2758                           
  2759                           ;doprnt.c: 1237: prec--;
  2760  000FAE  0100               	movlb	0	; () banked
  2761  000FB0  07AC               	decf	printf@prec& (0+255),f,b
  2762  000FB2  A0D8               	btfss	status,0,c
  2763  000FB4  07AD               	decf	(printf@prec+1)& (0+255),f,b
  2764  000FB6  D000               	goto	l5421
  2765  000FB8                     l5421:
  2766                           
  2767                           ; BSR set to: 0
  2768  000FB8  0100               	movlb	0	; () banked
  2769  000FBA  51AC               	movf	printf@prec& (0+255),w,b
  2770  000FBC  0100               	movlb	0	; () banked
  2771  000FBE  11AD               	iorwf	(printf@prec+1)& (0+255),w,b
  2772  000FC0  B4D8               	btfsc	status,2,c
  2773  000FC2  D195               	goto	l5509
  2774  000FC4  D7F1               	goto	l5417
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;doprnt.c: 1238: }
  2778                           ;doprnt.c: 1245: continue;
  2779  000FC6  D193               	goto	l5509
  2780  000FC8                     l5423:
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;doprnt.c: 1246: }
  2784                           ;doprnt.c: 1253: {
  2785                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2786  000FC8  C099  FFD9         	movff	printf@ap,fsr2l
  2787  000FCC  C09A  FFDA         	movff	printf@ap+1,fsr2h
  2788  000FD0  CFDE F09F          	movff	postinc2,printf@val
  2789  000FD4  CFDD F0A0          	movff	postdec2,printf@val+1
  2790  000FD8  0100               	movlb	0	; () banked
  2791  000FDA  0E00               	movlw	0
  2792  000FDC  BFA0               	btfsc	(printf@val+1)& (0+255),7,b
  2793  000FDE  0EFF               	movlw	-1
  2794  000FE0  6FA1               	movwf	(printf@val+2)& (0+255),b
  2795  000FE2  6FA2               	movwf	(printf@val+3)& (0+255),b
  2796                           
  2797                           ; BSR set to: 0
  2798  000FE4  0E02               	movlw	2
  2799  000FE6  0100               	movlb	0	; () banked
  2800  000FE8  2799               	addwf	printf@ap& (0+255),f,b
  2801  000FEA  0E00               	movlw	0
  2802  000FEC  239A               	addwfc	(printf@ap+1)& (0+255),f,b
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;doprnt.c: 1261: if((long)val < 0) {
  2806  000FEE  0100               	movlb	0	; () banked
  2807  000FF0  AFA2               	btfss	(printf@val+3)& (0+255),7,b
  2808  000FF2  D00D               	goto	l5433
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;doprnt.c: 1262: flag |= 0x03;
  2812  000FF4  0E03               	movlw	3
  2813  000FF6  0100               	movlb	0	; () banked
  2814  000FF8  13A5               	iorwf	printf@flag& (0+255),f,b
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;doprnt.c: 1263: val = -val;
  2818  000FFA  0100               	movlb	0	; () banked
  2819  000FFC  1FA2               	comf	(printf@val+3)& (0+255),f,b
  2820  000FFE  1FA1               	comf	(printf@val+2)& (0+255),f,b
  2821  001000  1FA0               	comf	(printf@val+1)& (0+255),f,b
  2822  001002  6D9F               	negf	printf@val& (0+255),b
  2823  001004  0E00               	movlw	0
  2824  001006  23A0               	addwfc	(printf@val+1)& (0+255),f,b
  2825  001008  23A1               	addwfc	(printf@val+2)& (0+255),f,b
  2826  00100A  23A2               	addwfc	(printf@val+3)& (0+255),f,b
  2827  00100C  D000               	goto	l5433
  2828  00100E                     l5433:
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;doprnt.c: 1264: }
  2832                           ;doprnt.c: 1266: }
  2833                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2834  00100E  0100               	movlb	0	; () banked
  2835  001010  51AC               	movf	printf@prec& (0+255),w,b
  2836  001012  0100               	movlb	0	; () banked
  2837  001014  11AD               	iorwf	(printf@prec+1)& (0+255),w,b
  2838  001016  A4D8               	btfss	status,2,c
  2839  001018  D00E               	goto	l5439
  2840                           
  2841                           ; BSR set to: 0
  2842  00101A  0100               	movlb	0	; () banked
  2843  00101C  519F               	movf	printf@val& (0+255),w,b
  2844  00101E  0100               	movlb	0	; () banked
  2845  001020  11A0               	iorwf	(printf@val+1)& (0+255),w,b
  2846  001022  0100               	movlb	0	; () banked
  2847  001024  11A1               	iorwf	(printf@val+2)& (0+255),w,b
  2848  001026  0100               	movlb	0	; () banked
  2849  001028  11A2               	iorwf	(printf@val+3)& (0+255),w,b
  2850  00102A  A4D8               	btfss	status,2,c
  2851  00102C  D004               	goto	l5439
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;doprnt.c: 1291: prec++;
  2855  00102E  0100               	movlb	0	; () banked
  2856  001030  4BAC               	infsnz	printf@prec& (0+255),f,b
  2857  001032  2BAD               	incf	(printf@prec+1)& (0+255),f,b
  2858  001034  D000               	goto	l5439
  2859  001036                     l5439:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2863  001036  0E01               	movlw	1
  2864  001038  0100               	movlb	0	; () banked
  2865  00103A  6FAE               	movwf	printf@c& (0+255),b
  2866  00103C                     l5441:
  2867                           
  2868                           ; BSR set to: 0
  2869  00103C  0E0A               	movlw	10
  2870  00103E  0100               	movlb	0	; () banked
  2871  001040  19AE               	xorwf	printf@c& (0+255),w,b
  2872  001042  B4D8               	btfsc	status,2,c
  2873  001044  D022               	goto	l5453
  2874  001046  D001               	goto	l5445
  2875                           
  2876                           ; BSR set to: 0
  2877  001048  D020               	goto	l5453
  2878  00104A                     l5445:
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;doprnt.c: 1306: if(val < dpowers[c])
  2882  00104A  0100               	movlb	0	; () banked
  2883  00104C  51AE               	movf	printf@c& (0+255),w,b
  2884  00104E  0D04               	mullw	4
  2885  001050  0E01               	movlw	low _dpowers
  2886  001052  24F3               	addwf	prodl,w,c
  2887  001054  6EF6               	movwf	tblptrl,c
  2888  001056  0E06               	movlw	high _dpowers
  2889  001058  20F4               	addwfc	prodh,w,c
  2890  00105A  6EF7               	movwf	tblptrh,c
  2891  00105C                     	if	0	;There are less than 3 active tblptr bytes
  2892  00105C                     	endif
  2893  00105C  0009               	tblrd		*+
  2894  00105E  50F5               	movf	tablat,w,c
  2895  001060  0100               	movlb	0	; () banked
  2896  001062  5D9F               	subwf	printf@val& (0+255),w,b
  2897  001064  0009               	tblrd		*+
  2898  001066  50F5               	movf	tablat,w,c
  2899  001068  0100               	movlb	0	; () banked
  2900  00106A  59A0               	subwfb	(printf@val+1)& (0+255),w,b
  2901  00106C  0009               	tblrd		*+
  2902  00106E  50F5               	movf	tablat,w,c
  2903  001070  0100               	movlb	0	; () banked
  2904  001072  59A1               	subwfb	(printf@val+2)& (0+255),w,b
  2905  001074  0009               	tblrd		*+
  2906  001076  50F5               	movf	tablat,w,c
  2907  001078  0100               	movlb	0	; () banked
  2908  00107A  59A2               	subwfb	(printf@val+3)& (0+255),w,b
  2909  00107C  A0D8               	btfss	status,0,c
  2910  00107E  D005               	goto	l5453
  2911  001080  D001               	goto	l5449
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;doprnt.c: 1307: break;
  2915  001082  D003               	goto	l5453
  2916  001084                     l5449:
  2917                           
  2918                           ; BSR set to: 0
  2919  001084  0100               	movlb	0	; () banked
  2920  001086  2BAE               	incf	printf@c& (0+255),f,b
  2921  001088  D7D9               	goto	l5441
  2922  00108A                     l5453:
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;doprnt.c: 1339: if(c < prec)
  2926  00108A  0E80               	movlw	128
  2927  00108C  0100               	movlb	0	; () banked
  2928  00108E  BFAE               	btfsc	printf@c& (0+255),7,b
  2929  001090  0E7F               	movlw	127
  2930  001092  0100               	movlb	0	; () banked
  2931  001094  6F90               	movwf	??_printf& (0+255),b
  2932  001096  0100               	movlb	0	; () banked
  2933  001098  51AC               	movf	printf@prec& (0+255),w,b
  2934  00109A  0100               	movlb	0	; () banked
  2935  00109C  5DAE               	subwf	printf@c& (0+255),w,b
  2936  00109E  0100               	movlb	0	; () banked
  2937  0010A0  51AD               	movf	(printf@prec+1)& (0+255),w,b
  2938  0010A2  0A80               	xorlw	128
  2939  0010A4  0100               	movlb	0	; () banked
  2940  0010A6  5990               	subwfb	??_printf& (0+255),w,b
  2941  0010A8  B0D8               	btfsc	status,0,c
  2942  0010AA  D003               	goto	l5457
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;doprnt.c: 1340: c = prec;
  2946  0010AC  C0AC  F0AE         	movff	printf@prec,printf@c
  2947  0010B0  D019               	goto	l5461
  2948  0010B2                     l5457:
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;doprnt.c: 1341: else if(prec < c)
  2952  0010B2  0100               	movlb	0	; () banked
  2953  0010B4  51AD               	movf	(printf@prec+1)& (0+255),w,b
  2954  0010B6  0A80               	xorlw	128
  2955  0010B8  0100               	movlb	0	; () banked
  2956  0010BA  6F90               	movwf	??_printf& (0+255),b
  2957  0010BC  0100               	movlb	0	; () banked
  2958  0010BE  51AE               	movf	printf@c& (0+255),w,b
  2959  0010C0  0100               	movlb	0	; () banked
  2960  0010C2  5DAC               	subwf	printf@prec& (0+255),w,b
  2961  0010C4  0E80               	movlw	128
  2962  0010C6  0100               	movlb	0	; () banked
  2963  0010C8  BFAE               	btfsc	printf@c& (0+255),7,b
  2964  0010CA  0E7F               	movlw	127
  2965  0010CC  0100               	movlb	0	; () banked
  2966  0010CE  5990               	subwfb	??_printf& (0+255),w,b
  2967  0010D0  B0D8               	btfsc	status,0,c
  2968  0010D2  D008               	goto	l5461
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;doprnt.c: 1342: prec = c;
  2972  0010D4  0100               	movlb	0	; () banked
  2973  0010D6  51AE               	movf	printf@c& (0+255),w,b
  2974  0010D8  0100               	movlb	0	; () banked
  2975  0010DA  6FAC               	movwf	printf@prec& (0+255),b
  2976  0010DC  6BAD               	clrf	(printf@prec+1)& (0+255),b
  2977  0010DE  BFAC               	btfsc	printf@prec& (0+255),7,b
  2978  0010E0  07AD               	decf	(printf@prec+1)& (0+255),f,b
  2979                           
  2980                           ; BSR set to: 0
  2981  0010E2  D000               	goto	l5461
  2982  0010E4                     l5461:
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2986  0010E4  0100               	movlb	0	; () banked
  2987  0010E6  51A7               	movf	printf@width& (0+255),w,b
  2988  0010E8  0100               	movlb	0	; () banked
  2989  0010EA  11A8               	iorwf	(printf@width+1)& (0+255),w,b
  2990  0010EC  B4D8               	btfsc	status,2,c
  2991  0010EE  D015               	goto	l5467
  2992                           
  2993                           ; BSR set to: 0
  2994  0010F0  0E03               	movlw	3
  2995  0010F2  0100               	movlb	0	; () banked
  2996  0010F4  15A5               	andwf	printf@flag& (0+255),w,b
  2997  0010F6  0100               	movlb	0	; () banked
  2998  0010F8  6F90               	movwf	??_printf& (0+255),b
  2999  0010FA  0E00               	movlw	0
  3000  0010FC  0100               	movlb	0	; () banked
  3001  0010FE  15A6               	andwf	(printf@flag+1)& (0+255),w,b
  3002  001100  0100               	movlb	0	; () banked
  3003  001102  6F91               	movwf	(??_printf+1)& (0+255),b
  3004  001104  0100               	movlb	0	; () banked
  3005  001106  5190               	movf	??_printf& (0+255),w,b
  3006  001108  0100               	movlb	0	; () banked
  3007  00110A  1191               	iorwf	(??_printf+1)& (0+255),w,b
  3008  00110C  B4D8               	btfsc	status,2,c
  3009  00110E  D005               	goto	l5467
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;doprnt.c: 1346: width--;
  3013  001110  0100               	movlb	0	; () banked
  3014  001112  07A7               	decf	printf@width& (0+255),f,b
  3015  001114  A0D8               	btfss	status,0,c
  3016  001116  07A8               	decf	(printf@width+1)& (0+255),f,b
  3017  001118  D000               	goto	l5467
  3018  00111A                     l5467:
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3022  00111A  0100               	movlb	0	; () banked
  3023  00111C  ADA6               	btfss	(printf@flag+1)& (0+255),6,b
  3024  00111E  D01F               	goto	l5475
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;doprnt.c: 1349: if(width > prec)
  3028  001120  0100               	movlb	0	; () banked
  3029  001122  51A7               	movf	printf@width& (0+255),w,b
  3030  001124  0100               	movlb	0	; () banked
  3031  001126  5DAC               	subwf	printf@prec& (0+255),w,b
  3032  001128  0100               	movlb	0	; () banked
  3033  00112A  51AD               	movf	(printf@prec+1)& (0+255),w,b
  3034  00112C  0A80               	xorlw	128
  3035  00112E  0100               	movlb	0	; () banked
  3036  001130  6F90               	movwf	??_printf& (0+255),b
  3037  001132  0100               	movlb	0	; () banked
  3038  001134  51A8               	movf	(printf@width+1)& (0+255),w,b
  3039  001136  0A80               	xorlw	128
  3040  001138  0100               	movlb	0	; () banked
  3041  00113A  5990               	subwfb	??_printf& (0+255),w,b
  3042  00113C  B0D8               	btfsc	status,0,c
  3043  00113E  D009               	goto	l5473
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;doprnt.c: 1350: width -= prec;
  3047  001140  0100               	movlb	0	; () banked
  3048  001142  51AC               	movf	printf@prec& (0+255),w,b
  3049  001144  0100               	movlb	0	; () banked
  3050  001146  5FA7               	subwf	printf@width& (0+255),f,b
  3051  001148  0100               	movlb	0	; () banked
  3052  00114A  51AD               	movf	(printf@prec+1)& (0+255),w,b
  3053  00114C  0100               	movlb	0	; () banked
  3054  00114E  5BA8               	subwfb	(printf@width+1)& (0+255),f,b
  3055  001150  D006               	goto	l5475
  3056  001152                     l5473:
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;doprnt.c: 1351: else
  3060                           ;doprnt.c: 1352: width = 0;
  3061  001152  0E00               	movlw	0
  3062  001154  0100               	movlb	0	; () banked
  3063  001156  6FA8               	movwf	(printf@width+1)& (0+255),b
  3064  001158  0E00               	movlw	0
  3065  00115A  6FA7               	movwf	printf@width& (0+255),b
  3066                           
  3067                           ; BSR set to: 0
  3068  00115C  D000               	goto	l5475
  3069  00115E                     l5475:
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;doprnt.c: 1353: }
  3073                           ;doprnt.c: 1381: if(width > c)
  3074  00115E  0E80               	movlw	128
  3075  001160  0100               	movlb	0	; () banked
  3076  001162  BFAE               	btfsc	printf@c& (0+255),7,b
  3077  001164  0E7F               	movlw	127
  3078  001166  0100               	movlb	0	; () banked
  3079  001168  6F90               	movwf	??_printf& (0+255),b
  3080  00116A  0100               	movlb	0	; () banked
  3081  00116C  51A7               	movf	printf@width& (0+255),w,b
  3082  00116E  0100               	movlb	0	; () banked
  3083  001170  5DAE               	subwf	printf@c& (0+255),w,b
  3084  001172  0100               	movlb	0	; () banked
  3085  001174  51A8               	movf	(printf@width+1)& (0+255),w,b
  3086  001176  0A80               	xorlw	128
  3087  001178  0100               	movlb	0	; () banked
  3088  00117A  5990               	subwfb	??_printf& (0+255),w,b
  3089  00117C  B0D8               	btfsc	status,0,c
  3090  00117E  D00B               	goto	l5479
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;doprnt.c: 1382: width -= c;
  3094  001180  0100               	movlb	0	; () banked
  3095  001182  51AE               	movf	printf@c& (0+255),w,b
  3096  001184  0100               	movlb	0	; () banked
  3097  001186  5FA7               	subwf	printf@width& (0+255),f,b
  3098  001188  0E00               	movlw	0
  3099  00118A  0100               	movlb	0	; () banked
  3100  00118C  BFAE               	btfsc	printf@c& (0+255),7,b
  3101  00118E  0EFF               	movlw	255
  3102  001190  0100               	movlb	0	; () banked
  3103  001192  5BA8               	subwfb	(printf@width+1)& (0+255),f,b
  3104  001194  D006               	goto	l5481
  3105  001196                     l5479:
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;doprnt.c: 1383: else
  3109                           ;doprnt.c: 1384: width = 0;
  3110  001196  0E00               	movlw	0
  3111  001198  0100               	movlb	0	; () banked
  3112  00119A  6FA8               	movwf	(printf@width+1)& (0+255),b
  3113  00119C  0E00               	movlw	0
  3114  00119E  6FA7               	movwf	printf@width& (0+255),b
  3115  0011A0  D000               	goto	l5481
  3116  0011A2                     l5481:
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;doprnt.c: 1387: if(flag & 0x04) {
  3120  0011A2  0100               	movlb	0	; () banked
  3121  0011A4  A5A5               	btfss	printf@flag& (0+255),2,b
  3122  0011A6  D029               	goto	l5493
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;doprnt.c: 1392: if(flag & 0x03)
  3126  0011A8  0E03               	movlw	3
  3127  0011AA  0100               	movlb	0	; () banked
  3128  0011AC  15A5               	andwf	printf@flag& (0+255),w,b
  3129  0011AE  0100               	movlb	0	; () banked
  3130  0011B0  6F90               	movwf	??_printf& (0+255),b
  3131  0011B2  0E00               	movlw	0
  3132  0011B4  0100               	movlb	0	; () banked
  3133  0011B6  15A6               	andwf	(printf@flag+1)& (0+255),w,b
  3134  0011B8  0100               	movlb	0	; () banked
  3135  0011BA  6F91               	movwf	(??_printf+1)& (0+255),b
  3136  0011BC  0100               	movlb	0	; () banked
  3137  0011BE  5190               	movf	??_printf& (0+255),w,b
  3138  0011C0  0100               	movlb	0	; () banked
  3139  0011C2  1191               	iorwf	(??_printf+1)& (0+255),w,b
  3140  0011C4  B4D8               	btfsc	status,2,c
  3141  0011C6  D004               	goto	l5487
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;doprnt.c: 1393: (putch('-') );
  3145  0011C8  0E2D               	movlw	45
  3146  0011CA  ECAC  F01E         	call	_putch
  3147  0011CE  D000               	goto	l5487
  3148  0011D0                     l5487:
  3149                           
  3150                           ;doprnt.c: 1415: if(width)
  3151  0011D0  0100               	movlb	0	; () banked
  3152  0011D2  51A7               	movf	printf@width& (0+255),w,b
  3153  0011D4  0100               	movlb	0	; () banked
  3154  0011D6  11A8               	iorwf	(printf@width+1)& (0+255),w,b
  3155  0011D8  B4D8               	btfsc	status,2,c
  3156  0011DA  D07C               	goto	l5507
  3157  0011DC                     l5489:
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;doprnt.c: 1417: (putch('0') );
  3161  0011DC  0E30               	movlw	48
  3162  0011DE  ECAC  F01E         	call	_putch
  3163                           
  3164                           ;doprnt.c: 1418: while(--width);
  3165  0011E2  0100               	movlb	0	; () banked
  3166  0011E4  07A7               	decf	printf@width& (0+255),f,b
  3167  0011E6  A0D8               	btfss	status,0,c
  3168  0011E8  07A8               	decf	(printf@width+1)& (0+255),f,b
  3169  0011EA  0100               	movlb	0	; () banked
  3170  0011EC  51A7               	movf	printf@width& (0+255),w,b
  3171  0011EE  0100               	movlb	0	; () banked
  3172  0011F0  11A8               	iorwf	(printf@width+1)& (0+255),w,b
  3173  0011F2  B4D8               	btfsc	status,2,c
  3174  0011F4  D06F               	goto	l5507
  3175  0011F6  D7F2               	goto	l5489
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;doprnt.c: 1420: } else
  3179                           
  3180                           ; BSR set to: 0
  3181  0011F8  D06D               	goto	l5507
  3182  0011FA                     l5493:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;doprnt.c: 1422: {
  3186                           ;doprnt.c: 1424: if(width
  3187                           ;doprnt.c: 1428: )
  3188  0011FA  0100               	movlb	0	; () banked
  3189  0011FC  51A7               	movf	printf@width& (0+255),w,b
  3190  0011FE  0100               	movlb	0	; () banked
  3191  001200  11A8               	iorwf	(printf@width+1)& (0+255),w,b
  3192  001202  B4D8               	btfsc	status,2,c
  3193  001204  D00F               	goto	l5499
  3194  001206                     l5495:
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;doprnt.c: 1430: (putch(' ') );
  3198  001206  0E20               	movlw	32
  3199  001208  ECAC  F01E         	call	_putch
  3200                           
  3201                           ;doprnt.c: 1431: while(--width);
  3202  00120C  0100               	movlb	0	; () banked
  3203  00120E  07A7               	decf	printf@width& (0+255),f,b
  3204  001210  A0D8               	btfss	status,0,c
  3205  001212  07A8               	decf	(printf@width+1)& (0+255),f,b
  3206  001214  0100               	movlb	0	; () banked
  3207  001216  51A7               	movf	printf@width& (0+255),w,b
  3208  001218  0100               	movlb	0	; () banked
  3209  00121A  11A8               	iorwf	(printf@width+1)& (0+255),w,b
  3210  00121C  B4D8               	btfsc	status,2,c
  3211  00121E  D002               	goto	l5499
  3212  001220  D7F2               	goto	l5495
  3213                           
  3214                           ; BSR set to: 0
  3215  001222  D000               	goto	l5499
  3216  001224                     l5499:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;doprnt.c: 1438: if(flag & 0x03)
  3220  001224  0E03               	movlw	3
  3221  001226  0100               	movlb	0	; () banked
  3222  001228  15A5               	andwf	printf@flag& (0+255),w,b
  3223  00122A  0100               	movlb	0	; () banked
  3224  00122C  6F90               	movwf	??_printf& (0+255),b
  3225  00122E  0E00               	movlw	0
  3226  001230  0100               	movlb	0	; () banked
  3227  001232  15A6               	andwf	(printf@flag+1)& (0+255),w,b
  3228  001234  0100               	movlb	0	; () banked
  3229  001236  6F91               	movwf	(??_printf+1)& (0+255),b
  3230  001238  0100               	movlb	0	; () banked
  3231  00123A  5190               	movf	??_printf& (0+255),w,b
  3232  00123C  0100               	movlb	0	; () banked
  3233  00123E  1191               	iorwf	(??_printf+1)& (0+255),w,b
  3234  001240  B4D8               	btfsc	status,2,c
  3235  001242  D048               	goto	l5507
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;doprnt.c: 1439: (putch('-') );
  3239  001244  0E2D               	movlw	45
  3240  001246  ECAC  F01E         	call	_putch
  3241                           
  3242                           ;doprnt.c: 1469: }
  3243                           ;doprnt.c: 1474: while(prec--) {
  3244  00124A  D044               	goto	l5507
  3245  00124C                     l5503:
  3246                           
  3247                           ;doprnt.c: 1478: {
  3248                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3249  00124C  C0AC  F090         	movff	printf@prec,??_printf
  3250  001250  C0AD  F091         	movff	printf@prec+1,??_printf+1
  3251  001254  0100               	movlb	0	; () banked
  3252  001256  90D8               	bcf	status,0,c
  3253  001258  3790               	rlcf	??_printf& (0+255),f,b
  3254  00125A  3791               	rlcf	(??_printf+1)& (0+255),f,b
  3255  00125C  0100               	movlb	0	; () banked
  3256  00125E  90D8               	bcf	status,0,c
  3257  001260  3790               	rlcf	??_printf& (0+255),f,b
  3258  001262  3791               	rlcf	(??_printf+1)& (0+255),f,b
  3259  001264  0E01               	movlw	low _dpowers
  3260  001266  0100               	movlb	0	; () banked
  3261  001268  2590               	addwf	??_printf& (0+255),w,b
  3262  00126A  6EF6               	movwf	tblptrl,c
  3263  00126C  0E06               	movlw	high _dpowers
  3264  00126E  2191               	addwfc	(??_printf+1)& (0+255),w,b
  3265  001270  6EF7               	movwf	tblptrh,c
  3266  001272                     	if	0	;There are less than 3 active tblptr bytes
  3267  001272                     	endif
  3268  001272  0009               	tblrd		*+
  3269  001274  CFF5 F01B          	movff	tablat,___lldiv@divisor
  3270  001278  0009               	tblrd		*+
  3271  00127A  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  3272  00127E  0009               	tblrd		*+
  3273  001280  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  3274  001284  000A               	tblrd		*-
  3275  001286  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  3276  00128A  C09F  F017         	movff	printf@val,___lldiv@dividend
  3277  00128E  C0A0  F018         	movff	printf@val+1,___lldiv@dividend+1
  3278  001292  C0A1  F019         	movff	printf@val+2,___lldiv@dividend+2
  3279  001296  C0A2  F01A         	movff	printf@val+3,___lldiv@dividend+3
  3280  00129A  ECBE  F01B         	call	___lldiv	;wreg free
  3281  00129E  C017  F024         	movff	?___lldiv,___llmod@dividend
  3282  0012A2  C018  F025         	movff	?___lldiv+1,___llmod@dividend+1
  3283  0012A6  C019  F026         	movff	?___lldiv+2,___llmod@dividend+2
  3284  0012AA  C01A  F027         	movff	?___lldiv+3,___llmod@dividend+3
  3285  0012AE  0E0A               	movlw	10
  3286  0012B0  6E28               	movwf	___llmod@divisor,c
  3287  0012B2  0E00               	movlw	0
  3288  0012B4  6E29               	movwf	___llmod@divisor+1,c
  3289  0012B6  0E00               	movlw	0
  3290  0012B8  6E2A               	movwf	___llmod@divisor+2,c
  3291  0012BA  0E00               	movlw	0
  3292  0012BC  6E2B               	movwf	___llmod@divisor+3,c
  3293  0012BE  EC45  F01C         	call	___llmod	;wreg free
  3294  0012C2  5024               	movf	?___llmod,w,c
  3295  0012C4  0F30               	addlw	48
  3296  0012C6  0100               	movlb	0	; () banked
  3297  0012C8  6FAE               	movwf	printf@c& (0+255),b
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;doprnt.c: 1523: }
  3301                           ;doprnt.c: 1524: (putch(c) );
  3302  0012CA  0100               	movlb	0	; () banked
  3303  0012CC  51AE               	movf	printf@c& (0+255),w,b
  3304  0012CE  ECAC  F01E         	call	_putch
  3305  0012D2  D000               	goto	l5507
  3306  0012D4                     l5507:
  3307  0012D4  0100               	movlb	0	; () banked
  3308  0012D6  07AC               	decf	printf@prec& (0+255),f,b
  3309  0012D8  A0D8               	btfss	status,0,c
  3310  0012DA  07AD               	decf	(printf@prec+1)& (0+255),f,b
  3311  0012DC  0100               	movlb	0	; () banked
  3312  0012DE  29AC               	incf	printf@prec& (0+255),w,b
  3313  0012E0  E1B5               	bnz	l5503
  3314  0012E2  0100               	movlb	0	; () banked
  3315  0012E4  29AD               	incf	(printf@prec+1)& (0+255),w,b
  3316  0012E6  B4D8               	btfsc	status,2,c
  3317  0012E8  D002               	goto	l5509
  3318  0012EA  D7B0               	goto	l5503
  3319                           
  3320                           ; BSR set to: 0
  3321  0012EC  D000               	goto	l5509
  3322  0012EE                     l5509:
  3323  0012EE  C08B  FFF6         	movff	printf@f,tblptrl
  3324  0012F2  C08C  FFF7         	movff	printf@f+1,tblptrh
  3325  0012F6  0100               	movlb	0	; () banked
  3326  0012F8  4B8B               	infsnz	printf@f& (0+255),f,b
  3327  0012FA  2B8C               	incf	(printf@f+1)& (0+255),f,b
  3328  0012FC                     	if	0	;tblptru may be non-zero
  3329  0012FC                     	endif
  3330  0012FC                     	if	0	;tblptru may be non-zero
  3331  0012FC                     	endif
  3332  0012FC  0008               	tblrd		*
  3333  0012FE  CFF5 F0AE          	movff	tablat,printf@c
  3334  001302  0100               	movlb	0	; () banked
  3335  001304  51AE               	movf	printf@c& (0+255),w,b
  3336  001306  B4D8               	btfsc	status,2,c
  3337  001308  0012               	return	
  3338  00130A  EF62  F003         	goto	l5217
  3339                           
  3340                           ; BSR set to: 0
  3341  00130E  0012               	return	
  3342                           
  3343                           ; BSR set to: 0
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;doprnt.c: 1540: return 0;
  3347                           ;	Return value of _printf is never used
  3348                           
  3349                           ;doprnt.c: 1525: }
  3350                           ;doprnt.c: 1533: }
  3351                           ;doprnt.c: 1535: alldone:
  3352  001310  0012               	return		;funcret
  3353  001312                     __end_of_printf:
  3354                           	opt stack 0
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           intcon	equ	0xFF2
  3362                           postinc0	equ	0xFEE
  3363                           wreg	equ	0xFE8
  3364                           postinc2	equ	0xFDE
  3365                           postdec2	equ	0xFDD
  3366                           fsr2h	equ	0xFDA
  3367                           fsr2l	equ	0xFD9
  3368                           status	equ	0xFD8
  3369                           
  3370 ;; *************** function _scale *****************
  3371 ;; Defined at:
  3372 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  scl             1    wreg     char 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  scl             1   21[BANK0 ] char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  3   15[BANK0 ] char 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3386 ;;      Params:         0       3       0       0       0       0       0
  3387 ;;      Locals:         0       4       0       0       0       0       0
  3388 ;;      Temps:          0       0       0       0       0       0       0
  3389 ;;      Totals:         0       7       0       0       0       0       0
  3390 ;;Total ram usage:        7 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    6
  3393 ;; This function calls:
  3394 ;;		___awdiv
  3395 ;;		___awmod
  3396 ;;		___ftmul
  3397 ;;		___wmul
  3398 ;; This function is called by:
  3399 ;;		_printf
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text2
  3404  0017FC                     __ptext2:
  3405                           	opt stack 0
  3406  0017FC                     _scale:
  3407                           	opt stack 23
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;incstack = 0
  3411                           ;scale@scl stored from wreg
  3412  0017FC  0100               	movlb	0	; () banked
  3413  0017FE  6F75               	movwf	scale@scl& (0+255),b
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;doprnt.c: 428: if(scl < 0) {
  3417  001800  0100               	movlb	0	; () banked
  3418  001802  AF75               	btfss	scale@scl& (0+255),7,b
  3419  001804  D107               	goto	l4983
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;doprnt.c: 429: scl = -scl;
  3423  001806  0100               	movlb	0	; () banked
  3424  001808  6D75               	negf	scale@scl& (0+255),b
  3425                           
  3426                           ;doprnt.c: 430: if(scl>=110)
  3427  00180A  0100               	movlb	0	; () banked
  3428  00180C  5175               	movf	scale@scl& (0+255),w,b
  3429  00180E  0A80               	xorlw	128
  3430  001810  0F12               	addlw	-238
  3431  001812  A0D8               	btfss	status,0,c
  3432  001814  D095               	goto	l4973
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3436  001816  0E00               	movlw	0
  3437  001818  6E28               	movwf	___wmul@multiplicand+1,c
  3438  00181A  0E03               	movlw	3
  3439  00181C  6E27               	movwf	___wmul@multiplicand,c
  3440  00181E  0E00               	movlw	0
  3441  001820  6E20               	movwf	___awdiv@divisor+1,c
  3442  001822  0E0A               	movlw	10
  3443  001824  6E1F               	movwf	___awdiv@divisor,c
  3444  001826  0E00               	movlw	0
  3445  001828  6E1A               	movwf	___awmod@divisor+1,c
  3446  00182A  0E64               	movlw	100
  3447  00182C  6E19               	movwf	___awmod@divisor,c
  3448  00182E  0100               	movlb	0	; () banked
  3449  001830  5175               	movf	scale@scl& (0+255),w,b
  3450  001832  6E17               	movwf	___awmod@dividend,c
  3451  001834  6A18               	clrf	___awmod@dividend+1,c
  3452  001836  BE17               	btfsc	___awmod@dividend,7,c
  3453  001838  0618               	decf	___awmod@dividend+1,f,c
  3454  00183A  EC04  F01C         	call	___awmod	;wreg free
  3455  00183E  C017  F01D         	movff	?___awmod,___awdiv@dividend
  3456  001842  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  3457  001846  ECDF  F01A         	call	___awdiv	;wreg free
  3458  00184A  0E09               	movlw	9
  3459  00184C  241D               	addwf	?___awdiv,w,c
  3460  00184E  6E25               	movwf	___wmul@multiplier,c
  3461  001850  0E00               	movlw	0
  3462  001852  201E               	addwfc	?___awdiv+1,w,c
  3463  001854  6E26               	movwf	___wmul@multiplier+1,c
  3464  001856  ECE8  F01D         	call	___wmul	;wreg free
  3465  00185A  0E29               	movlw	low __npowers_
  3466  00185C  2425               	addwf	?___wmul,w,c
  3467  00185E  6EF6               	movwf	tblptrl,c
  3468  001860  0E06               	movlw	high __npowers_
  3469  001862  2026               	addwfc	?___wmul+1,w,c
  3470  001864  6EF7               	movwf	tblptrh,c
  3471  001866                     	if	0	;There are less than 3 active tblptr bytes
  3472  001866                     	endif
  3473  001866  0009               	tblrd		*+
  3474  001868  CFF5 F063          	movff	tablat,___ftmul@f2
  3475  00186C  0009               	tblrd		*+
  3476  00186E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3477  001872  000A               	tblrd		*-
  3478  001874  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3479  001878  0E00               	movlw	0
  3480  00187A  6E20               	movwf	___awdiv@divisor+1,c
  3481  00187C  0E64               	movlw	100
  3482  00187E  6E1F               	movwf	___awdiv@divisor,c
  3483  001880  0100               	movlb	0	; () banked
  3484  001882  5175               	movf	scale@scl& (0+255),w,b
  3485  001884  6E1D               	movwf	___awdiv@dividend,c
  3486  001886  6A1E               	clrf	___awdiv@dividend+1,c
  3487  001888  BE1D               	btfsc	___awdiv@dividend,7,c
  3488  00188A  061E               	decf	___awdiv@dividend+1,f,c
  3489  00188C  ECDF  F01A         	call	___awdiv	;wreg free
  3490  001890  0E12               	movlw	18
  3491  001892  241D               	addwf	?___awdiv,w,c
  3492  001894  6E25               	movwf	___wmul@multiplier,c
  3493  001896  0E00               	movlw	0
  3494  001898  201E               	addwfc	?___awdiv+1,w,c
  3495  00189A  6E26               	movwf	___wmul@multiplier+1,c
  3496  00189C  0E00               	movlw	0
  3497  00189E  6E28               	movwf	___wmul@multiplicand+1,c
  3498  0018A0  0E03               	movlw	3
  3499  0018A2  6E27               	movwf	___wmul@multiplicand,c
  3500  0018A4  ECE8  F01D         	call	___wmul	;wreg free
  3501  0018A8  0E29               	movlw	low __npowers_
  3502  0018AA  2425               	addwf	?___wmul,w,c
  3503  0018AC  6EF6               	movwf	tblptrl,c
  3504  0018AE  0E06               	movlw	high __npowers_
  3505  0018B0  2026               	addwfc	?___wmul+1,w,c
  3506  0018B2  6EF7               	movwf	tblptrh,c
  3507  0018B4                     	if	0	;There are less than 3 active tblptr bytes
  3508  0018B4                     	endif
  3509  0018B4  0009               	tblrd		*+
  3510  0018B6  CFF5 F060          	movff	tablat,___ftmul@f1
  3511  0018BA  0009               	tblrd		*+
  3512  0018BC  CFF5 F061          	movff	tablat,___ftmul@f1+1
  3513  0018C0  000A               	tblrd		*-
  3514  0018C2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  3515  0018C6  ECDF  F013         	call	___ftmul	;wreg free
  3516  0018CA  C060  F072         	movff	?___ftmul,_scale$1609
  3517  0018CE  C061  F073         	movff	?___ftmul+1,_scale$1609+1
  3518  0018D2  C062  F074         	movff	?___ftmul+2,_scale$1609+2
  3519                           
  3520                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3521  0018D6  C072  F060         	movff	_scale$1609,___ftmul@f1
  3522  0018DA  C073  F061         	movff	_scale$1609+1,___ftmul@f1+1
  3523  0018DE  C074  F062         	movff	_scale$1609+2,___ftmul@f1+2
  3524  0018E2  0E00               	movlw	0
  3525  0018E4  6E28               	movwf	___wmul@multiplicand+1,c
  3526  0018E6  0E03               	movlw	3
  3527  0018E8  6E27               	movwf	___wmul@multiplicand,c
  3528  0018EA  0E00               	movlw	0
  3529  0018EC  6E1A               	movwf	___awmod@divisor+1,c
  3530  0018EE  0E0A               	movlw	10
  3531  0018F0  6E19               	movwf	___awmod@divisor,c
  3532  0018F2  0100               	movlb	0	; () banked
  3533  0018F4  5175               	movf	scale@scl& (0+255),w,b
  3534  0018F6  6E17               	movwf	___awmod@dividend,c
  3535  0018F8  6A18               	clrf	___awmod@dividend+1,c
  3536  0018FA  BE17               	btfsc	___awmod@dividend,7,c
  3537  0018FC  0618               	decf	___awmod@dividend+1,f,c
  3538  0018FE  EC04  F01C         	call	___awmod	;wreg free
  3539  001902  C017  F025         	movff	?___awmod,___wmul@multiplier
  3540  001906  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3541  00190A  ECE8  F01D         	call	___wmul	;wreg free
  3542  00190E  0E29               	movlw	low __npowers_
  3543  001910  2425               	addwf	?___wmul,w,c
  3544  001912  6EF6               	movwf	tblptrl,c
  3545  001914  0E06               	movlw	high __npowers_
  3546  001916  2026               	addwfc	?___wmul+1,w,c
  3547  001918  6EF7               	movwf	tblptrh,c
  3548  00191A                     	if	0	;There are less than 3 active tblptr bytes
  3549  00191A                     	endif
  3550  00191A  0009               	tblrd		*+
  3551  00191C  CFF5 F063          	movff	tablat,___ftmul@f2
  3552  001920  0009               	tblrd		*+
  3553  001922  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3554  001926  000A               	tblrd		*-
  3555  001928  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3556  00192C  ECDF  F013         	call	___ftmul	;wreg free
  3557  001930  C060  F06F         	movff	?___ftmul,?_scale
  3558  001934  C061  F070         	movff	?___ftmul+1,?_scale+1
  3559  001938  C062  F071         	movff	?___ftmul+2,?_scale+2
  3560  00193C  0012               	return	
  3561  00193E  D057               	goto	l4979
  3562  001940                     l4973:
  3563                           
  3564                           ;doprnt.c: 432: else if(scl > 10)
  3565  001940  0100               	movlb	0	; () banked
  3566  001942  5175               	movf	scale@scl& (0+255),w,b
  3567  001944  0A80               	xorlw	128
  3568  001946  0F75               	addlw	-139
  3569  001948  A0D8               	btfss	status,0,c
  3570  00194A  D051               	goto	l4979
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3574  00194C  0E00               	movlw	0
  3575  00194E  6E20               	movwf	___awdiv@divisor+1,c
  3576  001950  0E0A               	movlw	10
  3577  001952  6E1F               	movwf	___awdiv@divisor,c
  3578  001954  0100               	movlb	0	; () banked
  3579  001956  5175               	movf	scale@scl& (0+255),w,b
  3580  001958  6E1D               	movwf	___awdiv@dividend,c
  3581  00195A  6A1E               	clrf	___awdiv@dividend+1,c
  3582  00195C  BE1D               	btfsc	___awdiv@dividend,7,c
  3583  00195E  061E               	decf	___awdiv@dividend+1,f,c
  3584  001960  ECDF  F01A         	call	___awdiv	;wreg free
  3585  001964  0E09               	movlw	9
  3586  001966  241D               	addwf	?___awdiv,w,c
  3587  001968  6E25               	movwf	___wmul@multiplier,c
  3588  00196A  0E00               	movlw	0
  3589  00196C  201E               	addwfc	?___awdiv+1,w,c
  3590  00196E  6E26               	movwf	___wmul@multiplier+1,c
  3591  001970  0E00               	movlw	0
  3592  001972  6E28               	movwf	___wmul@multiplicand+1,c
  3593  001974  0E03               	movlw	3
  3594  001976  6E27               	movwf	___wmul@multiplicand,c
  3595  001978  ECE8  F01D         	call	___wmul	;wreg free
  3596  00197C  0E29               	movlw	low __npowers_
  3597  00197E  2425               	addwf	?___wmul,w,c
  3598  001980  6EF6               	movwf	tblptrl,c
  3599  001982  0E06               	movlw	high __npowers_
  3600  001984  2026               	addwfc	?___wmul+1,w,c
  3601  001986  6EF7               	movwf	tblptrh,c
  3602  001988                     	if	0	;There are less than 3 active tblptr bytes
  3603  001988                     	endif
  3604  001988  0009               	tblrd		*+
  3605  00198A  CFF5 F060          	movff	tablat,___ftmul@f1
  3606  00198E  0009               	tblrd		*+
  3607  001990  CFF5 F061          	movff	tablat,___ftmul@f1+1
  3608  001994  000A               	tblrd		*-
  3609  001996  CFF5 F062          	movff	tablat,___ftmul@f1+2
  3610  00199A  0E00               	movlw	0
  3611  00199C  6E28               	movwf	___wmul@multiplicand+1,c
  3612  00199E  0E03               	movlw	3
  3613  0019A0  6E27               	movwf	___wmul@multiplicand,c
  3614  0019A2  0E00               	movlw	0
  3615  0019A4  6E1A               	movwf	___awmod@divisor+1,c
  3616  0019A6  0E0A               	movlw	10
  3617  0019A8  6E19               	movwf	___awmod@divisor,c
  3618  0019AA  0100               	movlb	0	; () banked
  3619  0019AC  5175               	movf	scale@scl& (0+255),w,b
  3620  0019AE  6E17               	movwf	___awmod@dividend,c
  3621  0019B0  6A18               	clrf	___awmod@dividend+1,c
  3622  0019B2  BE17               	btfsc	___awmod@dividend,7,c
  3623  0019B4  0618               	decf	___awmod@dividend+1,f,c
  3624  0019B6  EC04  F01C         	call	___awmod	;wreg free
  3625  0019BA  C017  F025         	movff	?___awmod,___wmul@multiplier
  3626  0019BE  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3627  0019C2  ECE8  F01D         	call	___wmul	;wreg free
  3628  0019C6  0E29               	movlw	low __npowers_
  3629  0019C8  2425               	addwf	?___wmul,w,c
  3630  0019CA  6EF6               	movwf	tblptrl,c
  3631  0019CC  0E06               	movlw	high __npowers_
  3632  0019CE  2026               	addwfc	?___wmul+1,w,c
  3633  0019D0  6EF7               	movwf	tblptrh,c
  3634  0019D2                     	if	0	;There are less than 3 active tblptr bytes
  3635  0019D2                     	endif
  3636  0019D2  0009               	tblrd		*+
  3637  0019D4  CFF5 F063          	movff	tablat,___ftmul@f2
  3638  0019D8  0009               	tblrd		*+
  3639  0019DA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3640  0019DE  000A               	tblrd		*-
  3641  0019E0  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3642  0019E4  ECDF  F013         	call	___ftmul	;wreg free
  3643  0019E8  D7A3               	goto	L2
  3644  0019EA  0012               	return	
  3645  0019EC  D000               	goto	l4979
  3646  0019EE                     l4979:
  3647                           
  3648                           ;doprnt.c: 434: return _npowers_[scl];
  3649  0019EE  0100               	movlb	0	; () banked
  3650  0019F0  5175               	movf	scale@scl& (0+255),w,b
  3651  0019F2  0D03               	mullw	3
  3652  0019F4  0E29               	movlw	low __npowers_
  3653  0019F6  24F3               	addwf	prodl,w,c
  3654  0019F8  6EF6               	movwf	tblptrl,c
  3655  0019FA  0E06               	movlw	high __npowers_
  3656  0019FC  20F4               	addwfc	prodh,w,c
  3657  0019FE  6EF7               	movwf	tblptrh,c
  3658  001A00                     	if	0	;There are less than 3 active tblptr bytes
  3659  001A00                     	endif
  3660  001A00  0009               	tblrd		*+
  3661  001A02  CFF5 F06F          	movff	tablat,?_scale
  3662  001A06  0009               	tblrd		*+
  3663  001A08  CFF5 F070          	movff	tablat,?_scale+1
  3664  001A0C  000A               	tblrd		*-
  3665  001A0E  CFF5 F071          	movff	tablat,?_scale+2
  3666                           
  3667                           ; BSR set to: 0
  3668  001A12  0012               	return	
  3669  001A14                     l4983:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;doprnt.c: 435: }
  3673                           ;doprnt.c: 436: if(scl>=110)
  3674  001A14  0100               	movlb	0	; () banked
  3675  001A16  5175               	movf	scale@scl& (0+255),w,b
  3676  001A18  0A80               	xorlw	128
  3677  001A1A  0F12               	addlw	-238
  3678  001A1C  A0D8               	btfss	status,0,c
  3679  001A1E  D095               	goto	l4991
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3683  001A20  0E00               	movlw	0
  3684  001A22  6E28               	movwf	___wmul@multiplicand+1,c
  3685  001A24  0E03               	movlw	3
  3686  001A26  6E27               	movwf	___wmul@multiplicand,c
  3687  001A28  0E00               	movlw	0
  3688  001A2A  6E20               	movwf	___awdiv@divisor+1,c
  3689  001A2C  0E0A               	movlw	10
  3690  001A2E  6E1F               	movwf	___awdiv@divisor,c
  3691  001A30  0E00               	movlw	0
  3692  001A32  6E1A               	movwf	___awmod@divisor+1,c
  3693  001A34  0E64               	movlw	100
  3694  001A36  6E19               	movwf	___awmod@divisor,c
  3695  001A38  0100               	movlb	0	; () banked
  3696  001A3A  5175               	movf	scale@scl& (0+255),w,b
  3697  001A3C  6E17               	movwf	___awmod@dividend,c
  3698  001A3E  6A18               	clrf	___awmod@dividend+1,c
  3699  001A40  BE17               	btfsc	___awmod@dividend,7,c
  3700  001A42  0618               	decf	___awmod@dividend+1,f,c
  3701  001A44  EC04  F01C         	call	___awmod	;wreg free
  3702  001A48  C017  F01D         	movff	?___awmod,___awdiv@dividend
  3703  001A4C  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  3704  001A50  ECDF  F01A         	call	___awdiv	;wreg free
  3705  001A54  0E09               	movlw	9
  3706  001A56  241D               	addwf	?___awdiv,w,c
  3707  001A58  6E25               	movwf	___wmul@multiplier,c
  3708  001A5A  0E00               	movlw	0
  3709  001A5C  201E               	addwfc	?___awdiv+1,w,c
  3710  001A5E  6E26               	movwf	___wmul@multiplier+1,c
  3711  001A60  ECE8  F01D         	call	___wmul	;wreg free
  3712  001A64  0E50               	movlw	low __powers_
  3713  001A66  2425               	addwf	?___wmul,w,c
  3714  001A68  6EF6               	movwf	tblptrl,c
  3715  001A6A  0E06               	movlw	high __powers_
  3716  001A6C  2026               	addwfc	?___wmul+1,w,c
  3717  001A6E  6EF7               	movwf	tblptrh,c
  3718  001A70                     	if	0	;There are less than 3 active tblptr bytes
  3719  001A70                     	endif
  3720  001A70  0009               	tblrd		*+
  3721  001A72  CFF5 F063          	movff	tablat,___ftmul@f2
  3722  001A76  0009               	tblrd		*+
  3723  001A78  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3724  001A7C  000A               	tblrd		*-
  3725  001A7E  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3726  001A82  0E00               	movlw	0
  3727  001A84  6E20               	movwf	___awdiv@divisor+1,c
  3728  001A86  0E64               	movlw	100
  3729  001A88  6E1F               	movwf	___awdiv@divisor,c
  3730  001A8A  0100               	movlb	0	; () banked
  3731  001A8C  5175               	movf	scale@scl& (0+255),w,b
  3732  001A8E  6E1D               	movwf	___awdiv@dividend,c
  3733  001A90  6A1E               	clrf	___awdiv@dividend+1,c
  3734  001A92  BE1D               	btfsc	___awdiv@dividend,7,c
  3735  001A94  061E               	decf	___awdiv@dividend+1,f,c
  3736  001A96  ECDF  F01A         	call	___awdiv	;wreg free
  3737  001A9A  0E12               	movlw	18
  3738  001A9C  241D               	addwf	?___awdiv,w,c
  3739  001A9E  6E25               	movwf	___wmul@multiplier,c
  3740  001AA0  0E00               	movlw	0
  3741  001AA2  201E               	addwfc	?___awdiv+1,w,c
  3742  001AA4  6E26               	movwf	___wmul@multiplier+1,c
  3743  001AA6  0E00               	movlw	0
  3744  001AA8  6E28               	movwf	___wmul@multiplicand+1,c
  3745  001AAA  0E03               	movlw	3
  3746  001AAC  6E27               	movwf	___wmul@multiplicand,c
  3747  001AAE  ECE8  F01D         	call	___wmul	;wreg free
  3748  001AB2  0E50               	movlw	low __powers_
  3749  001AB4  2425               	addwf	?___wmul,w,c
  3750  001AB6  6EF6               	movwf	tblptrl,c
  3751  001AB8  0E06               	movlw	high __powers_
  3752  001ABA  2026               	addwfc	?___wmul+1,w,c
  3753  001ABC  6EF7               	movwf	tblptrh,c
  3754  001ABE                     	if	0	;There are less than 3 active tblptr bytes
  3755  001ABE                     	endif
  3756  001ABE  0009               	tblrd		*+
  3757  001AC0  CFF5 F060          	movff	tablat,___ftmul@f1
  3758  001AC4  0009               	tblrd		*+
  3759  001AC6  CFF5 F061          	movff	tablat,___ftmul@f1+1
  3760  001ACA  000A               	tblrd		*-
  3761  001ACC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  3762  001AD0  ECDF  F013         	call	___ftmul	;wreg free
  3763  001AD4  C060  F072         	movff	?___ftmul,_scale$1609
  3764  001AD8  C061  F073         	movff	?___ftmul+1,_scale$1609+1
  3765  001ADC  C062  F074         	movff	?___ftmul+2,_scale$1609+2
  3766                           
  3767                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3768  001AE0  C072  F060         	movff	_scale$1609,___ftmul@f1
  3769  001AE4  C073  F061         	movff	_scale$1609+1,___ftmul@f1+1
  3770  001AE8  C074  F062         	movff	_scale$1609+2,___ftmul@f1+2
  3771  001AEC  0E00               	movlw	0
  3772  001AEE  6E28               	movwf	___wmul@multiplicand+1,c
  3773  001AF0  0E03               	movlw	3
  3774  001AF2  6E27               	movwf	___wmul@multiplicand,c
  3775  001AF4  0E00               	movlw	0
  3776  001AF6  6E1A               	movwf	___awmod@divisor+1,c
  3777  001AF8  0E0A               	movlw	10
  3778  001AFA  6E19               	movwf	___awmod@divisor,c
  3779  001AFC  0100               	movlb	0	; () banked
  3780  001AFE  5175               	movf	scale@scl& (0+255),w,b
  3781  001B00  6E17               	movwf	___awmod@dividend,c
  3782  001B02  6A18               	clrf	___awmod@dividend+1,c
  3783  001B04  BE17               	btfsc	___awmod@dividend,7,c
  3784  001B06  0618               	decf	___awmod@dividend+1,f,c
  3785  001B08  EC04  F01C         	call	___awmod	;wreg free
  3786  001B0C  C017  F025         	movff	?___awmod,___wmul@multiplier
  3787  001B10  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3788  001B14  ECE8  F01D         	call	___wmul	;wreg free
  3789  001B18  0E50               	movlw	low __powers_
  3790  001B1A  2425               	addwf	?___wmul,w,c
  3791  001B1C  6EF6               	movwf	tblptrl,c
  3792  001B1E  0E06               	movlw	high __powers_
  3793  001B20  2026               	addwfc	?___wmul+1,w,c
  3794  001B22  6EF7               	movwf	tblptrh,c
  3795  001B24                     	if	0	;There are less than 3 active tblptr bytes
  3796  001B24                     	endif
  3797  001B24  0009               	tblrd		*+
  3798  001B26  CFF5 F063          	movff	tablat,___ftmul@f2
  3799  001B2A  0009               	tblrd		*+
  3800  001B2C  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3801  001B30  000A               	tblrd		*-
  3802  001B32  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3803  001B36  ECDF  F013         	call	___ftmul	;wreg free
  3804  001B3A  C060  F06F         	movff	?___ftmul,?_scale
  3805  001B3E  C061  F070         	movff	?___ftmul+1,?_scale+1
  3806  001B42  C062  F071         	movff	?___ftmul+2,?_scale+2
  3807  001B46  0012               	return	
  3808  001B48  D057               	goto	l4997
  3809  001B4A                     l4991:
  3810                           
  3811                           ;doprnt.c: 438: else if(scl > 10)
  3812  001B4A  0100               	movlb	0	; () banked
  3813  001B4C  5175               	movf	scale@scl& (0+255),w,b
  3814  001B4E  0A80               	xorlw	128
  3815  001B50  0F75               	addlw	-139
  3816  001B52  A0D8               	btfss	status,0,c
  3817  001B54  D051               	goto	l4997
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3821  001B56  0E00               	movlw	0
  3822  001B58  6E20               	movwf	___awdiv@divisor+1,c
  3823  001B5A  0E0A               	movlw	10
  3824  001B5C  6E1F               	movwf	___awdiv@divisor,c
  3825  001B5E  0100               	movlb	0	; () banked
  3826  001B60  5175               	movf	scale@scl& (0+255),w,b
  3827  001B62  6E1D               	movwf	___awdiv@dividend,c
  3828  001B64  6A1E               	clrf	___awdiv@dividend+1,c
  3829  001B66  BE1D               	btfsc	___awdiv@dividend,7,c
  3830  001B68  061E               	decf	___awdiv@dividend+1,f,c
  3831  001B6A  ECDF  F01A         	call	___awdiv	;wreg free
  3832  001B6E  0E09               	movlw	9
  3833  001B70  241D               	addwf	?___awdiv,w,c
  3834  001B72  6E25               	movwf	___wmul@multiplier,c
  3835  001B74  0E00               	movlw	0
  3836  001B76  201E               	addwfc	?___awdiv+1,w,c
  3837  001B78  6E26               	movwf	___wmul@multiplier+1,c
  3838  001B7A  0E00               	movlw	0
  3839  001B7C  6E28               	movwf	___wmul@multiplicand+1,c
  3840  001B7E  0E03               	movlw	3
  3841  001B80  6E27               	movwf	___wmul@multiplicand,c
  3842  001B82  ECE8  F01D         	call	___wmul	;wreg free
  3843  001B86  0E50               	movlw	low __powers_
  3844  001B88  2425               	addwf	?___wmul,w,c
  3845  001B8A  6EF6               	movwf	tblptrl,c
  3846  001B8C  0E06               	movlw	high __powers_
  3847  001B8E  2026               	addwfc	?___wmul+1,w,c
  3848  001B90  6EF7               	movwf	tblptrh,c
  3849  001B92                     	if	0	;There are less than 3 active tblptr bytes
  3850  001B92                     	endif
  3851  001B92  0009               	tblrd		*+
  3852  001B94  CFF5 F060          	movff	tablat,___ftmul@f1
  3853  001B98  0009               	tblrd		*+
  3854  001B9A  CFF5 F061          	movff	tablat,___ftmul@f1+1
  3855  001B9E  000A               	tblrd		*-
  3856  001BA0  CFF5 F062          	movff	tablat,___ftmul@f1+2
  3857  001BA4  0E00               	movlw	0
  3858  001BA6  6E28               	movwf	___wmul@multiplicand+1,c
  3859  001BA8  0E03               	movlw	3
  3860  001BAA  6E27               	movwf	___wmul@multiplicand,c
  3861  001BAC  0E00               	movlw	0
  3862  001BAE  6E1A               	movwf	___awmod@divisor+1,c
  3863  001BB0  0E0A               	movlw	10
  3864  001BB2  6E19               	movwf	___awmod@divisor,c
  3865  001BB4  0100               	movlb	0	; () banked
  3866  001BB6  5175               	movf	scale@scl& (0+255),w,b
  3867  001BB8  6E17               	movwf	___awmod@dividend,c
  3868  001BBA  6A18               	clrf	___awmod@dividend+1,c
  3869  001BBC  BE17               	btfsc	___awmod@dividend,7,c
  3870  001BBE  0618               	decf	___awmod@dividend+1,f,c
  3871  001BC0  EC04  F01C         	call	___awmod	;wreg free
  3872  001BC4  C017  F025         	movff	?___awmod,___wmul@multiplier
  3873  001BC8  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3874  001BCC  ECE8  F01D         	call	___wmul	;wreg free
  3875  001BD0  0E50               	movlw	low __powers_
  3876  001BD2  2425               	addwf	?___wmul,w,c
  3877  001BD4  6EF6               	movwf	tblptrl,c
  3878  001BD6  0E06               	movlw	high __powers_
  3879  001BD8  2026               	addwfc	?___wmul+1,w,c
  3880  001BDA  6EF7               	movwf	tblptrh,c
  3881  001BDC                     	if	0	;There are less than 3 active tblptr bytes
  3882  001BDC                     	endif
  3883  001BDC  0009               	tblrd		*+
  3884  001BDE  CFF5 F063          	movff	tablat,___ftmul@f2
  3885  001BE2  0009               	tblrd		*+
  3886  001BE4  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3887  001BE8  000A               	tblrd		*-
  3888  001BEA  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3889  001BEE  ECDF  F013         	call	___ftmul	;wreg free
  3890  001BF2  D7A3               	goto	L3
  3891  001BF4  0012               	return	
  3892  001BF6  D000               	goto	l4997
  3893  001BF8                     l4997:
  3894                           
  3895                           ;doprnt.c: 440: return _powers_[scl];
  3896  001BF8  0100               	movlb	0	; () banked
  3897  001BFA  5175               	movf	scale@scl& (0+255),w,b
  3898  001BFC  0D03               	mullw	3
  3899  001BFE  0E50               	movlw	low __powers_
  3900  001C00  24F3               	addwf	prodl,w,c
  3901  001C02  6EF6               	movwf	tblptrl,c
  3902  001C04  0E06               	movlw	high __powers_
  3903  001C06  20F4               	addwfc	prodh,w,c
  3904  001C08  6EF7               	movwf	tblptrh,c
  3905  001C0A                     	if	0	;There are less than 3 active tblptr bytes
  3906  001C0A                     	endif
  3907  001C0A  0009               	tblrd		*+
  3908  001C0C  CFF5 F06F          	movff	tablat,?_scale
  3909  001C10  0009               	tblrd		*+
  3910  001C12  CFF5 F070          	movff	tablat,?_scale+1
  3911  001C16  000A               	tblrd		*-
  3912  001C18  CFF5 F071          	movff	tablat,?_scale+2
  3913  001C1C  0012               	return	
  3914                           
  3915                           ; BSR set to: 0
  3916  001C1E  0012               	return		;funcret
  3917  001C20                     __end_of_scale:
  3918                           	opt stack 0
  3919                           tblptru	equ	0xFF8
  3920                           tblptrh	equ	0xFF7
  3921                           tblptrl	equ	0xFF6
  3922                           tablat	equ	0xFF5
  3923                           prodh	equ	0xFF4
  3924                           prodl	equ	0xFF3
  3925                           intcon	equ	0xFF2
  3926                           postinc0	equ	0xFEE
  3927                           wreg	equ	0xFE8
  3928                           postinc2	equ	0xFDE
  3929                           postdec2	equ	0xFDD
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function _putch *****************
  3935 ;; Defined at:
  3936 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\putch.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  c               1    wreg     unsigned char 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  c               1    0[COMRAM] unsigned char 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;		None               void
  3943 ;; Registers used:
  3944 ;;		wreg
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3950 ;;      Params:         0       0       0       0       0       0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0
  3952 ;;      Temps:          0       0       0       0       0       0       0
  3953 ;;      Totals:         0       0       0       0       0       0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    4
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_printf
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text3
  3965  003D58                     __ptext3:
  3966                           	opt stack 0
  3967  003D58                     _putch:
  3968                           	opt stack 25
  3969                           
  3970                           ;incstack = 0
  3971  003D58  0012               	return		;funcret
  3972  003D5A                     __end_of_putch:
  3973                           	opt stack 0
  3974                           tblptru	equ	0xFF8
  3975                           tblptrh	equ	0xFF7
  3976                           tblptrl	equ	0xFF6
  3977                           tablat	equ	0xFF5
  3978                           prodh	equ	0xFF4
  3979                           prodl	equ	0xFF3
  3980                           intcon	equ	0xFF2
  3981                           postinc0	equ	0xFEE
  3982                           wreg	equ	0xFE8
  3983                           postinc2	equ	0xFDE
  3984                           postdec2	equ	0xFDD
  3985                           fsr2h	equ	0xFDA
  3986                           fsr2l	equ	0xFD9
  3987                           status	equ	0xFD8
  3988                           
  3989 ;; *************** function _isdigit *****************
  3990 ;; Defined at:
  3991 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  c               1    wreg     unsigned char 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  c               1   24[COMRAM] unsigned char 
  3996 ;; Return value:  Size  Location     Type
  3997 ;;		None               void
  3998 ;; Registers used:
  3999 ;;		wreg, status,2, status,0
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4005 ;;      Params:         0       0       0       0       0       0       0
  4006 ;;      Locals:         2       0       0       0       0       0       0
  4007 ;;      Temps:          1       0       0       0       0       0       0
  4008 ;;      Totals:         3       0       0       0       0       0       0
  4009 ;;Total ram usage:        3 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    4
  4012 ;; This function calls:
  4013 ;;		Nothing
  4014 ;; This function is called by:
  4015 ;;		_printf
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text4
  4020  003C42                     __ptext4:
  4021                           	opt stack 0
  4022  003C42                     _isdigit:
  4023                           	opt stack 25
  4024                           
  4025                           ;incstack = 0
  4026                           ;isdigit@c stored from wreg
  4027  003C42  6E19               	movwf	isdigit@c,c
  4028  003C44  0E00               	movlw	0
  4029  003C46  6E18               	movwf	_isdigit$1249,c
  4030  003C48  0E3A               	movlw	58
  4031  003C4A  6019               	cpfslt	isdigit@c,c
  4032  003C4C  D006               	goto	l3561
  4033  003C4E  0E2F               	movlw	47
  4034  003C50  6419               	cpfsgt	isdigit@c,c
  4035  003C52  D003               	goto	l3561
  4036  003C54  0E01               	movlw	1
  4037  003C56  6E18               	movwf	_isdigit$1249,c
  4038  003C58  D000               	goto	l3561
  4039  003C5A                     l3561:
  4040  003C5A  C018  F017         	movff	_isdigit$1249,??_isdigit
  4041  003C5E  3017               	rrcf	??_isdigit,w,c
  4042  003C60  0012               	return	
  4043  003C62  0012               	return		;funcret
  4044  003C64                     __end_of_isdigit:
  4045                           	opt stack 0
  4046                           tblptru	equ	0xFF8
  4047                           tblptrh	equ	0xFF7
  4048                           tblptrl	equ	0xFF6
  4049                           tablat	equ	0xFF5
  4050                           prodh	equ	0xFF4
  4051                           prodl	equ	0xFF3
  4052                           intcon	equ	0xFF2
  4053                           postinc0	equ	0xFEE
  4054                           wreg	equ	0xFE8
  4055                           postinc2	equ	0xFDE
  4056                           postdec2	equ	0xFDD
  4057                           fsr2h	equ	0xFDA
  4058                           fsr2l	equ	0xFD9
  4059                           status	equ	0xFD8
  4060                           
  4061 ;; *************** function _fround *****************
  4062 ;; Defined at:
  4063 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;  prec            1    wreg     unsigned char 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;  prec            1   24[BANK0 ] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  3   15[BANK0 ] unsigned char 
  4070 ;; Registers used:
  4071 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4077 ;;      Params:         0       3       0       0       0       0       0
  4078 ;;      Locals:         0       7       0       0       0       0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0
  4080 ;;      Totals:         0      10       0       0       0       0       0
  4081 ;;Total ram usage:       10 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    6
  4084 ;; This function calls:
  4085 ;;		___awdiv
  4086 ;;		___awmod
  4087 ;;		___ftmul
  4088 ;;		___wmul
  4089 ;; This function is called by:
  4090 ;;		_printf
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text5
  4095  001E9E                     __ptext5:
  4096                           	opt stack 0
  4097  001E9E                     _fround:
  4098                           	opt stack 23
  4099                           
  4100                           ;incstack = 0
  4101                           ;fround@prec stored from wreg
  4102  001E9E  0100               	movlb	0	; () banked
  4103  001EA0  6F78               	movwf	fround@prec& (0+255),b
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;doprnt.c: 413: if(prec>=110)
  4107  001EA2  0E6D               	movlw	109
  4108  001EA4  0100               	movlb	0	; () banked
  4109  001EA6  6578               	cpfsgt	fround@prec& (0+255),b
  4110  001EA8  D0A3               	goto	l4951
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4114  001EAA  0E00               	movlw	0
  4115  001EAC  6E28               	movwf	___wmul@multiplicand+1,c
  4116  001EAE  0E03               	movlw	3
  4117  001EB0  6E27               	movwf	___wmul@multiplicand,c
  4118  001EB2  0E00               	movlw	0
  4119  001EB4  6E20               	movwf	___awdiv@divisor+1,c
  4120  001EB6  0E0A               	movlw	10
  4121  001EB8  6E1F               	movwf	___awdiv@divisor,c
  4122  001EBA  0E00               	movlw	0
  4123  001EBC  6E1A               	movwf	___awmod@divisor+1,c
  4124  001EBE  0E64               	movlw	100
  4125  001EC0  6E19               	movwf	___awmod@divisor,c
  4126  001EC2  C078  F017         	movff	fround@prec,___awmod@dividend
  4127  001EC6  6A18               	clrf	___awmod@dividend+1,c
  4128  001EC8  EC04  F01C         	call	___awmod	;wreg free
  4129  001ECC  C017  F01D         	movff	?___awmod,___awdiv@dividend
  4130  001ED0  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  4131  001ED4  ECDF  F01A         	call	___awdiv	;wreg free
  4132  001ED8  0E09               	movlw	9
  4133  001EDA  241D               	addwf	?___awdiv,w,c
  4134  001EDC  6E25               	movwf	___wmul@multiplier,c
  4135  001EDE  0E00               	movlw	0
  4136  001EE0  201E               	addwfc	?___awdiv+1,w,c
  4137  001EE2  6E26               	movwf	___wmul@multiplier+1,c
  4138  001EE4  ECE8  F01D         	call	___wmul	;wreg free
  4139  001EE8  0E29               	movlw	low __npowers_
  4140  001EEA  2425               	addwf	?___wmul,w,c
  4141  001EEC  6EF6               	movwf	tblptrl,c
  4142  001EEE  0E06               	movlw	high __npowers_
  4143  001EF0  2026               	addwfc	?___wmul+1,w,c
  4144  001EF2  6EF7               	movwf	tblptrh,c
  4145  001EF4                     	if	0	;There are less than 3 active tblptr bytes
  4146  001EF4                     	endif
  4147  001EF4  0009               	tblrd		*+
  4148  001EF6  CFF5 F063          	movff	tablat,___ftmul@f2
  4149  001EFA  0009               	tblrd		*+
  4150  001EFC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  4151  001F00  000A               	tblrd		*-
  4152  001F02  CFF5 F065          	movff	tablat,___ftmul@f2+2
  4153  001F06  0E00               	movlw	0
  4154  001F08  6E20               	movwf	___awdiv@divisor+1,c
  4155  001F0A  0E64               	movlw	100
  4156  001F0C  6E1F               	movwf	___awdiv@divisor,c
  4157  001F0E  C078  F01D         	movff	fround@prec,___awdiv@dividend
  4158  001F12  6A1E               	clrf	___awdiv@dividend+1,c
  4159  001F14  ECDF  F01A         	call	___awdiv	;wreg free
  4160  001F18  0E12               	movlw	18
  4161  001F1A  241D               	addwf	?___awdiv,w,c
  4162  001F1C  6E25               	movwf	___wmul@multiplier,c
  4163  001F1E  0E00               	movlw	0
  4164  001F20  201E               	addwfc	?___awdiv+1,w,c
  4165  001F22  6E26               	movwf	___wmul@multiplier+1,c
  4166  001F24  0E00               	movlw	0
  4167  001F26  6E28               	movwf	___wmul@multiplicand+1,c
  4168  001F28  0E03               	movlw	3
  4169  001F2A  6E27               	movwf	___wmul@multiplicand,c
  4170  001F2C  ECE8  F01D         	call	___wmul	;wreg free
  4171  001F30  0E29               	movlw	low __npowers_
  4172  001F32  2425               	addwf	?___wmul,w,c
  4173  001F34  6EF6               	movwf	tblptrl,c
  4174  001F36  0E06               	movlw	high __npowers_
  4175  001F38  2026               	addwfc	?___wmul+1,w,c
  4176  001F3A  6EF7               	movwf	tblptrh,c
  4177  001F3C                     	if	0	;There are less than 3 active tblptr bytes
  4178  001F3C                     	endif
  4179  001F3C  0009               	tblrd		*+
  4180  001F3E  CFF5 F060          	movff	tablat,___ftmul@f1
  4181  001F42  0009               	tblrd		*+
  4182  001F44  CFF5 F061          	movff	tablat,___ftmul@f1+1
  4183  001F48  000A               	tblrd		*-
  4184  001F4A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  4185  001F4E  ECDF  F013         	call	___ftmul	;wreg free
  4186  001F52  C060  F075         	movff	?___ftmul,_fround$1607
  4187  001F56  C061  F076         	movff	?___ftmul+1,_fround$1607+1
  4188  001F5A  C062  F077         	movff	?___ftmul+2,_fround$1607+2
  4189                           
  4190                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4191  001F5E  0E00               	movlw	0
  4192  001F60  6E28               	movwf	___wmul@multiplicand+1,c
  4193  001F62  0E03               	movlw	3
  4194  001F64  6E27               	movwf	___wmul@multiplicand,c
  4195  001F66  0E00               	movlw	0
  4196  001F68  6E1A               	movwf	___awmod@divisor+1,c
  4197  001F6A  0E0A               	movlw	10
  4198  001F6C  6E19               	movwf	___awmod@divisor,c
  4199  001F6E  C078  F017         	movff	fround@prec,___awmod@dividend
  4200  001F72  6A18               	clrf	___awmod@dividend+1,c
  4201  001F74  EC04  F01C         	call	___awmod	;wreg free
  4202  001F78  C017  F025         	movff	?___awmod,___wmul@multiplier
  4203  001F7C  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  4204  001F80  ECE8  F01D         	call	___wmul	;wreg free
  4205  001F84  0E29               	movlw	low __npowers_
  4206  001F86  2425               	addwf	?___wmul,w,c
  4207  001F88  6EF6               	movwf	tblptrl,c
  4208  001F8A  0E06               	movlw	high __npowers_
  4209  001F8C  2026               	addwfc	?___wmul+1,w,c
  4210  001F8E  6EF7               	movwf	tblptrh,c
  4211  001F90                     	if	0	;There are less than 3 active tblptr bytes
  4212  001F90                     	endif
  4213  001F90  0009               	tblrd		*+
  4214  001F92  CFF5 F063          	movff	tablat,___ftmul@f2
  4215  001F96  0009               	tblrd		*+
  4216  001F98  CFF5 F064          	movff	tablat,___ftmul@f2+1
  4217  001F9C  000A               	tblrd		*-
  4218  001F9E  CFF5 F065          	movff	tablat,___ftmul@f2+2
  4219  001FA2  C075  F060         	movff	_fround$1607,___ftmul@f1
  4220  001FA6  C076  F061         	movff	_fround$1607+1,___ftmul@f1+1
  4221  001FAA  C077  F062         	movff	_fround$1607+2,___ftmul@f1+2
  4222  001FAE  ECDF  F013         	call	___ftmul	;wreg free
  4223  001FB2  C060  F072         	movff	?___ftmul,_fround$1608
  4224  001FB6  C061  F073         	movff	?___ftmul+1,_fround$1608+1
  4225  001FBA  C062  F074         	movff	?___ftmul+2,_fround$1608+2
  4226                           
  4227                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4228  001FBE  C072  F060         	movff	_fround$1608,___ftmul@f1
  4229  001FC2  C073  F061         	movff	_fround$1608+1,___ftmul@f1+1
  4230  001FC6  C074  F062         	movff	_fround$1608+2,___ftmul@f1+2
  4231  001FCA  0E00               	movlw	0
  4232  001FCC  0100               	movlb	0	; () banked
  4233  001FCE  6F63               	movwf	___ftmul@f2& (0+255),b
  4234  001FD0  0E00               	movlw	0
  4235  001FD2  0100               	movlb	0	; () banked
  4236  001FD4  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4237  001FD6  0E3F               	movlw	63
  4238  001FD8  0100               	movlb	0	; () banked
  4239  001FDA  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4240  001FDC  ECDF  F013         	call	___ftmul	;wreg free
  4241  001FE0  C060  F06F         	movff	?___ftmul,?_fround
  4242  001FE4  C061  F070         	movff	?___ftmul+1,?_fround+1
  4243  001FE8  C062  F071         	movff	?___ftmul+2,?_fround+2
  4244  001FEC  0012               	return	
  4245  001FEE  D066               	goto	l4959
  4246  001FF0                     l4951:
  4247                           
  4248                           ;doprnt.c: 415: else if(prec > 10)
  4249  001FF0  0E0A               	movlw	10
  4250  001FF2  0100               	movlb	0	; () banked
  4251  001FF4  6578               	cpfsgt	fround@prec& (0+255),b
  4252  001FF6  D062               	goto	l4959
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4256  001FF8  0E00               	movlw	0
  4257  001FFA  6E28               	movwf	___wmul@multiplicand+1,c
  4258  001FFC  0E03               	movlw	3
  4259  001FFE  6E27               	movwf	___wmul@multiplicand,c
  4260  002000  0E00               	movlw	0
  4261  002002  6E1A               	movwf	___awmod@divisor+1,c
  4262  002004  0E0A               	movlw	10
  4263  002006  6E19               	movwf	___awmod@divisor,c
  4264  002008  C078  F017         	movff	fround@prec,___awmod@dividend
  4265  00200C  6A18               	clrf	___awmod@dividend+1,c
  4266  00200E  EC04  F01C         	call	___awmod	;wreg free
  4267  002012  C017  F025         	movff	?___awmod,___wmul@multiplier
  4268  002016  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  4269  00201A  ECE8  F01D         	call	___wmul	;wreg free
  4270  00201E  0E29               	movlw	low __npowers_
  4271  002020  2425               	addwf	?___wmul,w,c
  4272  002022  6EF6               	movwf	tblptrl,c
  4273  002024  0E06               	movlw	high __npowers_
  4274  002026  2026               	addwfc	?___wmul+1,w,c
  4275  002028  6EF7               	movwf	tblptrh,c
  4276  00202A                     	if	0	;There are less than 3 active tblptr bytes
  4277  00202A                     	endif
  4278  00202A  0009               	tblrd		*+
  4279  00202C  CFF5 F063          	movff	tablat,___ftmul@f2
  4280  002030  0009               	tblrd		*+
  4281  002032  CFF5 F064          	movff	tablat,___ftmul@f2+1
  4282  002036  000A               	tblrd		*-
  4283  002038  CFF5 F065          	movff	tablat,___ftmul@f2+2
  4284  00203C  0E00               	movlw	0
  4285  00203E  6E20               	movwf	___awdiv@divisor+1,c
  4286  002040  0E0A               	movlw	10
  4287  002042  6E1F               	movwf	___awdiv@divisor,c
  4288  002044  C078  F01D         	movff	fround@prec,___awdiv@dividend
  4289  002048  6A1E               	clrf	___awdiv@dividend+1,c
  4290  00204A  ECDF  F01A         	call	___awdiv	;wreg free
  4291  00204E  0E09               	movlw	9
  4292  002050  241D               	addwf	?___awdiv,w,c
  4293  002052  6E25               	movwf	___wmul@multiplier,c
  4294  002054  0E00               	movlw	0
  4295  002056  201E               	addwfc	?___awdiv+1,w,c
  4296  002058  6E26               	movwf	___wmul@multiplier+1,c
  4297  00205A  0E00               	movlw	0
  4298  00205C  6E28               	movwf	___wmul@multiplicand+1,c
  4299  00205E  0E03               	movlw	3
  4300  002060  6E27               	movwf	___wmul@multiplicand,c
  4301  002062  ECE8  F01D         	call	___wmul	;wreg free
  4302  002066  0E29               	movlw	low __npowers_
  4303  002068  2425               	addwf	?___wmul,w,c
  4304  00206A  6EF6               	movwf	tblptrl,c
  4305  00206C  0E06               	movlw	high __npowers_
  4306  00206E  2026               	addwfc	?___wmul+1,w,c
  4307  002070  6EF7               	movwf	tblptrh,c
  4308  002072                     	if	0	;There are less than 3 active tblptr bytes
  4309  002072                     	endif
  4310  002072  0009               	tblrd		*+
  4311  002074  CFF5 F060          	movff	tablat,___ftmul@f1
  4312  002078  0009               	tblrd		*+
  4313  00207A  CFF5 F061          	movff	tablat,___ftmul@f1+1
  4314  00207E  000A               	tblrd		*-
  4315  002080  CFF5 F062          	movff	tablat,___ftmul@f1+2
  4316  002084  ECDF  F013         	call	___ftmul	;wreg free
  4317  002088  C060  F075         	movff	?___ftmul,_fround$1607
  4318  00208C  C061  F076         	movff	?___ftmul+1,_fround$1607+1
  4319  002090  C062  F077         	movff	?___ftmul+2,_fround$1607+2
  4320                           
  4321                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4322  002094  C075  F060         	movff	_fround$1607,___ftmul@f1
  4323  002098  C076  F061         	movff	_fround$1607+1,___ftmul@f1+1
  4324  00209C  C077  F062         	movff	_fround$1607+2,___ftmul@f1+2
  4325  0020A0  0E00               	movlw	0
  4326  0020A2  0100               	movlb	0	; () banked
  4327  0020A4  6F63               	movwf	___ftmul@f2& (0+255),b
  4328  0020A6  0E00               	movlw	0
  4329  0020A8  0100               	movlb	0	; () banked
  4330  0020AA  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4331  0020AC  0E3F               	movlw	63
  4332  0020AE  0100               	movlb	0	; () banked
  4333  0020B0  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4334  0020B2  ECDF  F013         	call	___ftmul	;wreg free
  4335  0020B6  D794               	goto	L4
  4336  0020B8  0012               	return	
  4337  0020BA  D000               	goto	l4959
  4338  0020BC                     l4959:
  4339                           
  4340                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4341  0020BC  0100               	movlb	0	; () banked
  4342  0020BE  5178               	movf	fround@prec& (0+255),w,b
  4343  0020C0  0D03               	mullw	3
  4344  0020C2  0E29               	movlw	low __npowers_
  4345  0020C4  24F3               	addwf	prodl,w,c
  4346  0020C6  6EF6               	movwf	tblptrl,c
  4347  0020C8  0E06               	movlw	high __npowers_
  4348  0020CA  20F4               	addwfc	prodh,w,c
  4349  0020CC  6EF7               	movwf	tblptrh,c
  4350  0020CE                     	if	0	;There are less than 3 active tblptr bytes
  4351  0020CE                     	endif
  4352  0020CE  0009               	tblrd		*+
  4353  0020D0  CFF5 F060          	movff	tablat,___ftmul@f1
  4354  0020D4  0009               	tblrd		*+
  4355  0020D6  CFF5 F061          	movff	tablat,___ftmul@f1+1
  4356  0020DA  000A               	tblrd		*-
  4357  0020DC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  4358  0020E0  0E00               	movlw	0
  4359  0020E2  0100               	movlb	0	; () banked
  4360  0020E4  6F63               	movwf	___ftmul@f2& (0+255),b
  4361  0020E6  0E00               	movlw	0
  4362  0020E8  0100               	movlb	0	; () banked
  4363  0020EA  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4364  0020EC  0E3F               	movlw	63
  4365  0020EE  0100               	movlb	0	; () banked
  4366  0020F0  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4367  0020F2  ECDF  F013         	call	___ftmul	;wreg free
  4368  0020F6  C060  F06F         	movff	?___ftmul,?_fround
  4369  0020FA  C061  F070         	movff	?___ftmul+1,?_fround+1
  4370  0020FE  C062  F071         	movff	?___ftmul+2,?_fround+2
  4371  002102  0012               	return	
  4372  002104  0012               	return		;funcret
  4373  002106                     __end_of_fround:
  4374                           	opt stack 0
  4375                           tblptru	equ	0xFF8
  4376                           tblptrh	equ	0xFF7
  4377                           tblptrl	equ	0xFF6
  4378                           tablat	equ	0xFF5
  4379                           prodh	equ	0xFF4
  4380                           prodl	equ	0xFF3
  4381                           intcon	equ	0xFF2
  4382                           postinc0	equ	0xFEE
  4383                           wreg	equ	0xFE8
  4384                           postinc2	equ	0xFDE
  4385                           postdec2	equ	0xFDD
  4386                           fsr2h	equ	0xFDA
  4387                           fsr2l	equ	0xFD9
  4388                           status	equ	0xFD8
  4389                           
  4390 ;; *************** function ___awmod *****************
  4391 ;; Defined at:
  4392 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  dividend        2   22[COMRAM] int 
  4395 ;;  divisor         2   24[COMRAM] int 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  sign            1   27[COMRAM] unsigned char 
  4398 ;;  counter         1   26[COMRAM] unsigned char 
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  2   22[COMRAM] int 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2, status,0
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4408 ;;      Params:         4       0       0       0       0       0       0
  4409 ;;      Locals:         2       0       0       0       0       0       0
  4410 ;;      Temps:          0       0       0       0       0       0       0
  4411 ;;      Totals:         6       0       0       0       0       0       0
  4412 ;;Total ram usage:        6 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; Hardware stack levels required when called:    4
  4415 ;; This function calls:
  4416 ;;		Nothing
  4417 ;; This function is called by:
  4418 ;;		_fround
  4419 ;;		_scale
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           	psect	text6
  4424  003808                     __ptext6:
  4425                           	opt stack 0
  4426  003808                     ___awmod:
  4427                           	opt stack 24
  4428                           
  4429                           ;incstack = 0
  4430  003808  0E00               	movlw	0
  4431  00380A  6E1C               	movwf	___awmod@sign,c
  4432  00380C  AE18               	btfss	___awmod@dividend+1,7,c
  4433  00380E  D007               	goto	l3289
  4434  003810  6C17               	negf	___awmod@dividend,c
  4435  003812  1E18               	comf	___awmod@dividend+1,f,c
  4436  003814  B0D8               	btfsc	status,0,c
  4437  003816  2A18               	incf	___awmod@dividend+1,f,c
  4438  003818  0E01               	movlw	1
  4439  00381A  6E1C               	movwf	___awmod@sign,c
  4440  00381C  D000               	goto	l3289
  4441  00381E                     l3289:
  4442  00381E  AE1A               	btfss	___awmod@divisor+1,7,c
  4443  003820  D005               	goto	l3293
  4444  003822  6C19               	negf	___awmod@divisor,c
  4445  003824  1E1A               	comf	___awmod@divisor+1,f,c
  4446  003826  B0D8               	btfsc	status,0,c
  4447  003828  2A1A               	incf	___awmod@divisor+1,f,c
  4448  00382A  D000               	goto	l3293
  4449  00382C                     l3293:
  4450  00382C  5019               	movf	___awmod@divisor,w,c
  4451  00382E  101A               	iorwf	___awmod@divisor+1,w,c
  4452  003830  B4D8               	btfsc	status,2,c
  4453  003832  D01D               	goto	l3309
  4454  003834  0E01               	movlw	1
  4455  003836  6E1B               	movwf	___awmod@counter,c
  4456  003838  D005               	goto	l3299
  4457  00383A                     l3297:
  4458  00383A  90D8               	bcf	status,0,c
  4459  00383C  3619               	rlcf	___awmod@divisor,f,c
  4460  00383E  361A               	rlcf	___awmod@divisor+1,f,c
  4461  003840  2A1B               	incf	___awmod@counter,f,c
  4462  003842  D000               	goto	l3299
  4463  003844                     l3299:
  4464  003844  BE1A               	btfsc	___awmod@divisor+1,7,c
  4465  003846  D002               	goto	l3301
  4466  003848  D7F8               	goto	l3297
  4467  00384A  D000               	goto	l3301
  4468  00384C                     l3301:
  4469  00384C  5019               	movf	___awmod@divisor,w,c
  4470  00384E  5C17               	subwf	___awmod@dividend,w,c
  4471  003850  501A               	movf	___awmod@divisor+1,w,c
  4472  003852  5818               	subwfb	___awmod@dividend+1,w,c
  4473  003854  A0D8               	btfss	status,0,c
  4474  003856  D005               	goto	l3305
  4475  003858  5019               	movf	___awmod@divisor,w,c
  4476  00385A  5E17               	subwf	___awmod@dividend,f,c
  4477  00385C  501A               	movf	___awmod@divisor+1,w,c
  4478  00385E  5A18               	subwfb	___awmod@dividend+1,f,c
  4479  003860  D000               	goto	l3305
  4480  003862                     l3305:
  4481  003862  90D8               	bcf	status,0,c
  4482  003864  321A               	rrcf	___awmod@divisor+1,f,c
  4483  003866  3219               	rrcf	___awmod@divisor,f,c
  4484  003868  2E1B               	decfsz	___awmod@counter,f,c
  4485  00386A  D7F0               	goto	l3301
  4486  00386C  D000               	goto	l3309
  4487  00386E                     l3309:
  4488  00386E  501C               	movf	___awmod@sign,w,c
  4489  003870  B4D8               	btfsc	status,2,c
  4490  003872  D005               	goto	l3313
  4491  003874  6C17               	negf	___awmod@dividend,c
  4492  003876  1E18               	comf	___awmod@dividend+1,f,c
  4493  003878  B0D8               	btfsc	status,0,c
  4494  00387A  2A18               	incf	___awmod@dividend+1,f,c
  4495  00387C  D000               	goto	l3313
  4496  00387E                     l3313:
  4497  00387E  C017  F017         	movff	___awmod@dividend,?___awmod
  4498  003882  C018  F018         	movff	___awmod@dividend+1,?___awmod+1
  4499  003886  0012               	return	
  4500  003888  0012               	return		;funcret
  4501  00388A                     __end_of___awmod:
  4502                           	opt stack 0
  4503                           tblptru	equ	0xFF8
  4504                           tblptrh	equ	0xFF7
  4505                           tblptrl	equ	0xFF6
  4506                           tablat	equ	0xFF5
  4507                           prodh	equ	0xFF4
  4508                           prodl	equ	0xFF3
  4509                           intcon	equ	0xFF2
  4510                           postinc0	equ	0xFEE
  4511                           wreg	equ	0xFE8
  4512                           postinc2	equ	0xFDE
  4513                           postdec2	equ	0xFDD
  4514                           fsr2h	equ	0xFDA
  4515                           fsr2l	equ	0xFD9
  4516                           status	equ	0xFD8
  4517                           
  4518 ;; *************** function __tdiv_to_l_ *****************
  4519 ;; Defined at:
  4520 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  f1              3   22[COMRAM] float 
  4523 ;;  f2              3   25[COMRAM] float 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;  quot            4   31[COMRAM] unsigned long 
  4526 ;;  exp1            1   36[COMRAM] unsigned char 
  4527 ;;  cntr            1   35[COMRAM] unsigned char 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  4   22[COMRAM] unsigned long 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4537 ;;      Params:         6       0       0       0       0       0       0
  4538 ;;      Locals:         6       0       0       0       0       0       0
  4539 ;;      Temps:          3       0       0       0       0       0       0
  4540 ;;      Totals:        15       0       0       0       0       0       0
  4541 ;;Total ram usage:       15 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    4
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_printf
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text7
  4552  002BCA                     __ptext7:
  4553                           	opt stack 0
  4554  002BCA                     __tdiv_to_l_:
  4555                           	opt stack 25
  4556                           
  4557                           ;incstack = 0
  4558  002BCA  C019  F01D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4559  002BCE  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4560  002BD0  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4561  002BD2  3418               	rlcf	__tdiv_to_l_@f1+1,w,c
  4562  002BD4  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4563  002BD6  E301               	bnc	u3121
  4564  002BD8  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4565  002BDA                     u3121:
  4566  002BDA  501D               	movf	??__tdiv_to_l_,w,c
  4567  002BDC  6E25               	movwf	__tdiv_to_l_@exp1,c
  4568  002BDE  5025               	movf	__tdiv_to_l_@exp1,w,c
  4569  002BE0  A4D8               	btfss	status,2,c
  4570  002BE2  D009               	goto	l3571
  4571  002BE4  0E00               	movlw	0
  4572  002BE6  6E17               	movwf	?__tdiv_to_l_,c
  4573  002BE8  0E00               	movlw	0
  4574  002BEA  6E18               	movwf	?__tdiv_to_l_+1,c
  4575  002BEC  0E00               	movlw	0
  4576  002BEE  6E19               	movwf	?__tdiv_to_l_+2,c
  4577  002BF0  0E00               	movlw	0
  4578  002BF2  6E1A               	movwf	?__tdiv_to_l_+3,c
  4579  002BF4  0012               	return	
  4580  002BF6                     l3571:
  4581  002BF6  C01C  F01D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4582  002BFA  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4583  002BFC  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4584  002BFE  341B               	rlcf	__tdiv_to_l_@f2+1,w,c
  4585  002C00  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4586  002C02  E301               	bnc	u3141
  4587  002C04  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4588  002C06                     u3141:
  4589  002C06  501D               	movf	??__tdiv_to_l_,w,c
  4590  002C08  6E24               	movwf	__tdiv_to_l_@cntr,c
  4591  002C0A  5024               	movf	__tdiv_to_l_@cntr,w,c
  4592  002C0C  A4D8               	btfss	status,2,c
  4593  002C0E  D009               	goto	l3577
  4594  002C10  0E00               	movlw	0
  4595  002C12  6E17               	movwf	?__tdiv_to_l_,c
  4596  002C14  0E00               	movlw	0
  4597  002C16  6E18               	movwf	?__tdiv_to_l_+1,c
  4598  002C18  0E00               	movlw	0
  4599  002C1A  6E19               	movwf	?__tdiv_to_l_+2,c
  4600  002C1C  0E00               	movlw	0
  4601  002C1E  6E1A               	movwf	?__tdiv_to_l_+3,c
  4602  002C20  0012               	return	
  4603  002C22                     l3577:
  4604  002C22  8E18               	bsf	__tdiv_to_l_@f1+1,7,c
  4605  002C24  0EFF               	movlw	255
  4606  002C26  1617               	andwf	__tdiv_to_l_@f1,f,c
  4607  002C28  0EFF               	movlw	255
  4608  002C2A  1618               	andwf	__tdiv_to_l_@f1+1,f,c
  4609  002C2C  0E00               	movlw	0
  4610  002C2E  1619               	andwf	__tdiv_to_l_@f1+2,f,c
  4611  002C30  8E1B               	bsf	__tdiv_to_l_@f2+1,7,c
  4612  002C32  0EFF               	movlw	255
  4613  002C34  161A               	andwf	__tdiv_to_l_@f2,f,c
  4614  002C36  0EFF               	movlw	255
  4615  002C38  161B               	andwf	__tdiv_to_l_@f2+1,f,c
  4616  002C3A  0E00               	movlw	0
  4617  002C3C  161C               	andwf	__tdiv_to_l_@f2+2,f,c
  4618  002C3E  0E00               	movlw	0
  4619  002C40  6E20               	movwf	__tdiv_to_l_@quot,c
  4620  002C42  0E00               	movlw	0
  4621  002C44  6E21               	movwf	__tdiv_to_l_@quot+1,c
  4622  002C46  0E00               	movlw	0
  4623  002C48  6E22               	movwf	__tdiv_to_l_@quot+2,c
  4624  002C4A  0E00               	movlw	0
  4625  002C4C  6E23               	movwf	__tdiv_to_l_@quot+3,c
  4626  002C4E  0E7F               	movlw	127
  4627  002C50  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  4628  002C52  5024               	movf	__tdiv_to_l_@cntr,w,c
  4629  002C54  0F98               	addlw	152
  4630  002C56  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  4631  002C58  0E18               	movlw	24
  4632  002C5A  6E24               	movwf	__tdiv_to_l_@cntr,c
  4633  002C5C                     l1109:
  4634  002C5C  90D8               	bcf	status,0,c
  4635  002C5E  3620               	rlcf	__tdiv_to_l_@quot,f,c
  4636  002C60  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  4637  002C62  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  4638  002C64  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  4639  002C66  501A               	movf	__tdiv_to_l_@f2,w,c
  4640  002C68  5C17               	subwf	__tdiv_to_l_@f1,w,c
  4641  002C6A  501B               	movf	__tdiv_to_l_@f2+1,w,c
  4642  002C6C  5818               	subwfb	__tdiv_to_l_@f1+1,w,c
  4643  002C6E  501C               	movf	__tdiv_to_l_@f2+2,w,c
  4644  002C70  5819               	subwfb	__tdiv_to_l_@f1+2,w,c
  4645  002C72  A0D8               	btfss	status,0,c
  4646  002C74  D007               	goto	l1110
  4647  002C76  501A               	movf	__tdiv_to_l_@f2,w,c
  4648  002C78  5E17               	subwf	__tdiv_to_l_@f1,f,c
  4649  002C7A  501B               	movf	__tdiv_to_l_@f2+1,w,c
  4650  002C7C  5A18               	subwfb	__tdiv_to_l_@f1+1,f,c
  4651  002C7E  501C               	movf	__tdiv_to_l_@f2+2,w,c
  4652  002C80  5A19               	subwfb	__tdiv_to_l_@f1+2,f,c
  4653  002C82  8020               	bsf	__tdiv_to_l_@quot,0,c
  4654  002C84                     l1110:
  4655  002C84  90D8               	bcf	status,0,c
  4656  002C86  3617               	rlcf	__tdiv_to_l_@f1,f,c
  4657  002C88  3618               	rlcf	__tdiv_to_l_@f1+1,f,c
  4658  002C8A  3619               	rlcf	__tdiv_to_l_@f1+2,f,c
  4659  002C8C  2E24               	decfsz	__tdiv_to_l_@cntr,f,c
  4660  002C8E  D7E6               	goto	l1109
  4661  002C90  D000               	goto	l3599
  4662  002C92                     l3599:
  4663  002C92  AE25               	btfss	__tdiv_to_l_@exp1,7,c
  4664  002C94  D017               	goto	l3611
  4665  002C96  5025               	movf	__tdiv_to_l_@exp1,w,c
  4666  002C98  0A80               	xorlw	128
  4667  002C9A  0F97               	addlw	151
  4668  002C9C  B0D8               	btfsc	status,0,c
  4669  002C9E  D00A               	goto	l3607
  4670  002CA0  0E00               	movlw	0
  4671  002CA2  6E17               	movwf	?__tdiv_to_l_,c
  4672  002CA4  0E00               	movlw	0
  4673  002CA6  6E18               	movwf	?__tdiv_to_l_+1,c
  4674  002CA8  0E00               	movlw	0
  4675  002CAA  6E19               	movwf	?__tdiv_to_l_+2,c
  4676  002CAC  0E00               	movlw	0
  4677  002CAE  6E1A               	movwf	?__tdiv_to_l_+3,c
  4678  002CB0  0012               	return	
  4679  002CB2  D000               	goto	l3607
  4680  002CB4                     l3607:
  4681  002CB4  90D8               	bcf	status,0,c
  4682  002CB6  3223               	rrcf	__tdiv_to_l_@quot+3,f,c
  4683  002CB8  3222               	rrcf	__tdiv_to_l_@quot+2,f,c
  4684  002CBA  3221               	rrcf	__tdiv_to_l_@quot+1,f,c
  4685  002CBC  3220               	rrcf	__tdiv_to_l_@quot,f,c
  4686  002CBE  3E25               	incfsz	__tdiv_to_l_@exp1,f,c
  4687  002CC0  D7F9               	goto	l3607
  4688  002CC2  D017               	goto	l1116
  4689  002CC4                     l3611:
  4690  002CC4  0E17               	movlw	23
  4691  002CC6  6425               	cpfsgt	__tdiv_to_l_@exp1,c
  4692  002CC8  D011               	goto	l3619
  4693  002CCA  0E00               	movlw	0
  4694  002CCC  6E17               	movwf	?__tdiv_to_l_,c
  4695  002CCE  0E00               	movlw	0
  4696  002CD0  6E18               	movwf	?__tdiv_to_l_+1,c
  4697  002CD2  0E00               	movlw	0
  4698  002CD4  6E19               	movwf	?__tdiv_to_l_+2,c
  4699  002CD6  0E00               	movlw	0
  4700  002CD8  6E1A               	movwf	?__tdiv_to_l_+3,c
  4701  002CDA  0012               	return	
  4702  002CDC  D007               	goto	l3619
  4703  002CDE                     l3617:
  4704  002CDE  90D8               	bcf	status,0,c
  4705  002CE0  3620               	rlcf	__tdiv_to_l_@quot,f,c
  4706  002CE2  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  4707  002CE4  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  4708  002CE6  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  4709  002CE8  0625               	decf	__tdiv_to_l_@exp1,f,c
  4710  002CEA  D000               	goto	l3619
  4711  002CEC                     l3619:
  4712  002CEC  5025               	movf	__tdiv_to_l_@exp1,w,c
  4713  002CEE  A4D8               	btfss	status,2,c
  4714  002CF0  D7F6               	goto	l3617
  4715  002CF2                     l1116:
  4716  002CF2  C020  F017         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4717  002CF6  C021  F018         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4718  002CFA  C022  F019         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4719  002CFE  C023  F01A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4720  002D02  0012               	return		;funcret
  4721  002D04                     __end_of__tdiv_to_l_:
  4722                           	opt stack 0
  4723                           tblptru	equ	0xFF8
  4724                           tblptrh	equ	0xFF7
  4725                           tblptrl	equ	0xFF6
  4726                           tablat	equ	0xFF5
  4727                           prodh	equ	0xFF4
  4728                           prodl	equ	0xFF3
  4729                           intcon	equ	0xFF2
  4730                           postinc0	equ	0xFEE
  4731                           wreg	equ	0xFE8
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function __div_to_l_ *****************
  4739 ;; Defined at:
  4740 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  f1              3   22[COMRAM] unsigned long 
  4743 ;;  f2              3   25[COMRAM] unsigned long 
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;  quot            4   28[COMRAM] unsigned long 
  4746 ;;  exp1            1   33[COMRAM] unsigned char 
  4747 ;;  cntr            1   32[COMRAM] unsigned char 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  4   22[COMRAM] unsigned long 
  4750 ;; Registers used:
  4751 ;;		wreg, status,2, status,0
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4757 ;;      Params:         6       0       0       0       0       0       0
  4758 ;;      Locals:         6       0       0       0       0       0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0
  4760 ;;      Totals:        12       0       0       0       0       0       0
  4761 ;;Total ram usage:       12 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    4
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		_printf
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	text8
  4772  002D04                     __ptext8:
  4773                           	opt stack 0
  4774  002D04                     __div_to_l_:
  4775                           	opt stack 25
  4776                           
  4777                           ;incstack = 0
  4778  002D04  3419               	rlcf	__div_to_l_@f1+2,w,c
  4779  002D06  341A               	rlcf	__div_to_l_@f1+3,w,c
  4780  002D08  6E22               	movwf	__div_to_l_@exp1,c
  4781  002D0A  5022               	movf	__div_to_l_@exp1,w,c
  4782  002D0C  A4D8               	btfss	status,2,c
  4783  002D0E  D009               	goto	l3627
  4784  002D10  0E00               	movlw	0
  4785  002D12  6E17               	movwf	?__div_to_l_,c
  4786  002D14  0E00               	movlw	0
  4787  002D16  6E18               	movwf	?__div_to_l_+1,c
  4788  002D18  0E00               	movlw	0
  4789  002D1A  6E19               	movwf	?__div_to_l_+2,c
  4790  002D1C  0E00               	movlw	0
  4791  002D1E  6E1A               	movwf	?__div_to_l_+3,c
  4792  002D20  0012               	return	
  4793  002D22                     l3627:
  4794  002D22  341C               	rlcf	__div_to_l_@f2+2,w,c
  4795  002D24  341D               	rlcf	__div_to_l_@f2+3,w,c
  4796  002D26  6E21               	movwf	__div_to_l_@cntr,c
  4797  002D28  5021               	movf	__div_to_l_@cntr,w,c
  4798  002D2A  A4D8               	btfss	status,2,c
  4799  002D2C  D009               	goto	l3633
  4800  002D2E  0E00               	movlw	0
  4801  002D30  6E17               	movwf	?__div_to_l_,c
  4802  002D32  0E00               	movlw	0
  4803  002D34  6E18               	movwf	?__div_to_l_+1,c
  4804  002D36  0E00               	movlw	0
  4805  002D38  6E19               	movwf	?__div_to_l_+2,c
  4806  002D3A  0E00               	movlw	0
  4807  002D3C  6E1A               	movwf	?__div_to_l_+3,c
  4808  002D3E  0012               	return	
  4809  002D40                     l3633:
  4810  002D40  8E19               	bsf	__div_to_l_@f1+2,7,c
  4811  002D42  0EFF               	movlw	255
  4812  002D44  1617               	andwf	__div_to_l_@f1,f,c
  4813  002D46  0EFF               	movlw	255
  4814  002D48  1618               	andwf	__div_to_l_@f1+1,f,c
  4815  002D4A  0EFF               	movlw	255
  4816  002D4C  1619               	andwf	__div_to_l_@f1+2,f,c
  4817  002D4E  0E00               	movlw	0
  4818  002D50  161A               	andwf	__div_to_l_@f1+3,f,c
  4819  002D52  8E1C               	bsf	__div_to_l_@f2+2,7,c
  4820  002D54  0EFF               	movlw	255
  4821  002D56  161A               	andwf	__div_to_l_@f2,f,c
  4822  002D58  0EFF               	movlw	255
  4823  002D5A  161B               	andwf	__div_to_l_@f2+1,f,c
  4824  002D5C  0EFF               	movlw	255
  4825  002D5E  161C               	andwf	__div_to_l_@f2+2,f,c
  4826  002D60  0E00               	movlw	0
  4827  002D62  161D               	andwf	__div_to_l_@f2+3,f,c
  4828  002D64  0E00               	movlw	0
  4829  002D66  6E1D               	movwf	__div_to_l_@quot,c
  4830  002D68  0E00               	movlw	0
  4831  002D6A  6E1E               	movwf	__div_to_l_@quot+1,c
  4832  002D6C  0E00               	movlw	0
  4833  002D6E  6E1F               	movwf	__div_to_l_@quot+2,c
  4834  002D70  0E00               	movlw	0
  4835  002D72  6E20               	movwf	__div_to_l_@quot+3,c
  4836  002D74  0E7F               	movlw	127
  4837  002D76  5E22               	subwf	__div_to_l_@exp1,f,c
  4838  002D78  5021               	movf	__div_to_l_@cntr,w,c
  4839  002D7A  0FA0               	addlw	160
  4840  002D7C  5E22               	subwf	__div_to_l_@exp1,f,c
  4841  002D7E  0E20               	movlw	32
  4842  002D80  6E21               	movwf	__div_to_l_@cntr,c
  4843  002D82  D000               	goto	l3647
  4844  002D84                     l3647:
  4845  002D84  90D8               	bcf	status,0,c
  4846  002D86  361D               	rlcf	__div_to_l_@quot,f,c
  4847  002D88  361E               	rlcf	__div_to_l_@quot+1,f,c
  4848  002D8A  361F               	rlcf	__div_to_l_@quot+2,f,c
  4849  002D8C  3620               	rlcf	__div_to_l_@quot+3,f,c
  4850  002D8E  501A               	movf	__div_to_l_@f2,w,c
  4851  002D90  5C17               	subwf	__div_to_l_@f1,w,c
  4852  002D92  501B               	movf	__div_to_l_@f2+1,w,c
  4853  002D94  5818               	subwfb	__div_to_l_@f1+1,w,c
  4854  002D96  501C               	movf	__div_to_l_@f2+2,w,c
  4855  002D98  5819               	subwfb	__div_to_l_@f1+2,w,c
  4856  002D9A  501D               	movf	__div_to_l_@f2+3,w,c
  4857  002D9C  581A               	subwfb	__div_to_l_@f1+3,w,c
  4858  002D9E  A0D8               	btfss	status,0,c
  4859  002DA0  D00A               	goto	l3655
  4860  002DA2  501A               	movf	__div_to_l_@f2,w,c
  4861  002DA4  5E17               	subwf	__div_to_l_@f1,f,c
  4862  002DA6  501B               	movf	__div_to_l_@f2+1,w,c
  4863  002DA8  5A18               	subwfb	__div_to_l_@f1+1,f,c
  4864  002DAA  501C               	movf	__div_to_l_@f2+2,w,c
  4865  002DAC  5A19               	subwfb	__div_to_l_@f1+2,f,c
  4866  002DAE  501D               	movf	__div_to_l_@f2+3,w,c
  4867  002DB0  5A1A               	subwfb	__div_to_l_@f1+3,f,c
  4868  002DB2  801D               	bsf	__div_to_l_@quot,0,c
  4869  002DB4  D000               	goto	l3655
  4870  002DB6                     l3655:
  4871  002DB6  90D8               	bcf	status,0,c
  4872  002DB8  3617               	rlcf	__div_to_l_@f1,f,c
  4873  002DBA  3618               	rlcf	__div_to_l_@f1+1,f,c
  4874  002DBC  3619               	rlcf	__div_to_l_@f1+2,f,c
  4875  002DBE  361A               	rlcf	__div_to_l_@f1+3,f,c
  4876  002DC0  2E21               	decfsz	__div_to_l_@cntr,f,c
  4877  002DC2  D7E0               	goto	l3647
  4878  002DC4  D000               	goto	l3659
  4879  002DC6                     l3659:
  4880  002DC6  AE22               	btfss	__div_to_l_@exp1,7,c
  4881  002DC8  D017               	goto	l3671
  4882  002DCA  5022               	movf	__div_to_l_@exp1,w,c
  4883  002DCC  0A80               	xorlw	128
  4884  002DCE  0F9F               	addlw	159
  4885  002DD0  B0D8               	btfsc	status,0,c
  4886  002DD2  D00A               	goto	l3667
  4887  002DD4  0E00               	movlw	0
  4888  002DD6  6E17               	movwf	?__div_to_l_,c
  4889  002DD8  0E00               	movlw	0
  4890  002DDA  6E18               	movwf	?__div_to_l_+1,c
  4891  002DDC  0E00               	movlw	0
  4892  002DDE  6E19               	movwf	?__div_to_l_+2,c
  4893  002DE0  0E00               	movlw	0
  4894  002DE2  6E1A               	movwf	?__div_to_l_+3,c
  4895  002DE4  0012               	return	
  4896  002DE6  D000               	goto	l3667
  4897  002DE8                     l3667:
  4898  002DE8  90D8               	bcf	status,0,c
  4899  002DEA  3220               	rrcf	__div_to_l_@quot+3,f,c
  4900  002DEC  321F               	rrcf	__div_to_l_@quot+2,f,c
  4901  002DEE  321E               	rrcf	__div_to_l_@quot+1,f,c
  4902  002DF0  321D               	rrcf	__div_to_l_@quot,f,c
  4903  002DF2  3E22               	incfsz	__div_to_l_@exp1,f,c
  4904  002DF4  D7F9               	goto	l3667
  4905  002DF6  D017               	goto	l995
  4906  002DF8                     l3671:
  4907  002DF8  0E1F               	movlw	31
  4908  002DFA  6422               	cpfsgt	__div_to_l_@exp1,c
  4909  002DFC  D011               	goto	l3679
  4910  002DFE  0E00               	movlw	0
  4911  002E00  6E17               	movwf	?__div_to_l_,c
  4912  002E02  0E00               	movlw	0
  4913  002E04  6E18               	movwf	?__div_to_l_+1,c
  4914  002E06  0E00               	movlw	0
  4915  002E08  6E19               	movwf	?__div_to_l_+2,c
  4916  002E0A  0E00               	movlw	0
  4917  002E0C  6E1A               	movwf	?__div_to_l_+3,c
  4918  002E0E  0012               	return	
  4919  002E10  D007               	goto	l3679
  4920  002E12                     l3677:
  4921  002E12  90D8               	bcf	status,0,c
  4922  002E14  361D               	rlcf	__div_to_l_@quot,f,c
  4923  002E16  361E               	rlcf	__div_to_l_@quot+1,f,c
  4924  002E18  361F               	rlcf	__div_to_l_@quot+2,f,c
  4925  002E1A  3620               	rlcf	__div_to_l_@quot+3,f,c
  4926  002E1C  0622               	decf	__div_to_l_@exp1,f,c
  4927  002E1E  D000               	goto	l3679
  4928  002E20                     l3679:
  4929  002E20  5022               	movf	__div_to_l_@exp1,w,c
  4930  002E22  A4D8               	btfss	status,2,c
  4931  002E24  D7F6               	goto	l3677
  4932  002E26                     l995:
  4933  002E26  C01D  F017         	movff	__div_to_l_@quot,?__div_to_l_
  4934  002E2A  C01E  F018         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4935  002E2E  C01F  F019         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4936  002E32  C020  F01A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4937  002E36  0012               	return		;funcret
  4938  002E38                     __end_of__div_to_l_:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           postinc0	equ	0xFEE
  4948                           wreg	equ	0xFE8
  4949                           postinc2	equ	0xFDE
  4950                           postdec2	equ	0xFDD
  4951                           fsr2h	equ	0xFDA
  4952                           fsr2l	equ	0xFD9
  4953                           status	equ	0xFD8
  4954                           
  4955 ;; *************** function ___lltoft *****************
  4956 ;; Defined at:
  4957 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  c               4   30[COMRAM] unsigned long 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  exp             1   38[COMRAM] unsigned char 
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  3   30[COMRAM] float 
  4964 ;; Registers used:
  4965 ;;		wreg, status,2, status,0, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4971 ;;      Params:         4       0       0       0       0       0       0
  4972 ;;      Locals:         1       0       0       0       0       0       0
  4973 ;;      Temps:          4       0       0       0       0       0       0
  4974 ;;      Totals:         9       0       0       0       0       0       0
  4975 ;;Total ram usage:        9 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    5
  4978 ;; This function calls:
  4979 ;;		___ftpack
  4980 ;; This function is called by:
  4981 ;;		_printf
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text9
  4986  00396A                     __ptext9:
  4987                           	opt stack 0
  4988  00396A                     ___lltoft:
  4989                           	opt stack 24
  4990                           
  4991                           ;incstack = 0
  4992  00396A  0E8E               	movlw	142
  4993  00396C  6E27               	movwf	___lltoft@exp,c
  4994  00396E  D007               	goto	l5059
  4995  003970                     l5057:
  4996  003970  90D8               	bcf	status,0,c
  4997  003972  3222               	rrcf	___lltoft@c+3,f,c
  4998  003974  3221               	rrcf	___lltoft@c+2,f,c
  4999  003976  3220               	rrcf	___lltoft@c+1,f,c
  5000  003978  321F               	rrcf	___lltoft@c,f,c
  5001  00397A  2A27               	incf	___lltoft@exp,f,c
  5002  00397C  D000               	goto	l5059
  5003  00397E                     l5059:
  5004  00397E  0E00               	movlw	0
  5005  003980  141F               	andwf	___lltoft@c,w,c
  5006  003982  6E23               	movwf	??___lltoft& (0+255),c
  5007  003984  0E00               	movlw	0
  5008  003986  1420               	andwf	___lltoft@c+1,w,c
  5009  003988  6E24               	movwf	(??___lltoft+1)& (0+255),c
  5010  00398A  0E00               	movlw	0
  5011  00398C  1421               	andwf	___lltoft@c+2,w,c
  5012  00398E  6E25               	movwf	(??___lltoft+2)& (0+255),c
  5013  003990  0EFF               	movlw	255
  5014  003992  1422               	andwf	___lltoft@c+3,w,c
  5015  003994  6E26               	movwf	(??___lltoft+3)& (0+255),c
  5016  003996  5023               	movf	??___lltoft,w,c
  5017  003998  1024               	iorwf	??___lltoft+1,w,c
  5018  00399A  1025               	iorwf	??___lltoft+2,w,c
  5019  00399C  1026               	iorwf	??___lltoft+3,w,c
  5020  00399E  A4D8               	btfss	status,2,c
  5021  0039A0  D7E7               	goto	l5057
  5022  0039A2  C01F  F017         	movff	___lltoft@c,___ftpack@arg
  5023  0039A6  C020  F018         	movff	___lltoft@c+1,___ftpack@arg+1
  5024  0039AA  C021  F019         	movff	___lltoft@c+2,___ftpack@arg+2
  5025  0039AE  C027  F01A         	movff	___lltoft@exp,___ftpack@exp
  5026  0039B2  0E00               	movlw	0
  5027  0039B4  6E1B               	movwf	___ftpack@sign,c
  5028  0039B6  EC6D  F019         	call	___ftpack	;wreg free
  5029  0039BA  C017  F01F         	movff	?___ftpack,?___lltoft
  5030  0039BE  C018  F020         	movff	?___ftpack+1,?___lltoft+1
  5031  0039C2  C019  F021         	movff	?___ftpack+2,?___lltoft+2
  5032  0039C6  0012               	return	
  5033  0039C8  0012               	return		;funcret
  5034  0039CA                     __end_of___lltoft:
  5035                           	opt stack 0
  5036                           tblptru	equ	0xFF8
  5037                           tblptrh	equ	0xFF7
  5038                           tblptrl	equ	0xFF6
  5039                           tablat	equ	0xFF5
  5040                           prodh	equ	0xFF4
  5041                           prodl	equ	0xFF3
  5042                           intcon	equ	0xFF2
  5043                           postinc0	equ	0xFEE
  5044                           wreg	equ	0xFE8
  5045                           postinc2	equ	0xFDE
  5046                           postdec2	equ	0xFDD
  5047                           fsr2h	equ	0xFDA
  5048                           fsr2l	equ	0xFD9
  5049                           status	equ	0xFD8
  5050                           
  5051 ;; *************** function ___llmod *****************
  5052 ;; Defined at:
  5053 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;  dividend        4   35[COMRAM] unsigned long 
  5056 ;;  divisor         4   39[COMRAM] unsigned long 
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  counter         1   43[COMRAM] unsigned char 
  5059 ;; Return value:  Size  Location     Type
  5060 ;;                  4   35[COMRAM] unsigned long 
  5061 ;; Registers used:
  5062 ;;		wreg, status,2, status,0
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5068 ;;      Params:         8       0       0       0       0       0       0
  5069 ;;      Locals:         1       0       0       0       0       0       0
  5070 ;;      Temps:          0       0       0       0       0       0       0
  5071 ;;      Totals:         9       0       0       0       0       0       0
  5072 ;;Total ram usage:        9 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; Hardware stack levels required when called:    4
  5075 ;; This function calls:
  5076 ;;		Nothing
  5077 ;; This function is called by:
  5078 ;;		_printf
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           	psect	text10
  5083  00388A                     __ptext10:
  5084                           	opt stack 0
  5085  00388A                     ___llmod:
  5086                           	opt stack 25
  5087                           
  5088                           ;incstack = 0
  5089  00388A  5028               	movf	___llmod@divisor,w,c
  5090  00388C  1029               	iorwf	___llmod@divisor+1,w,c
  5091  00388E  102A               	iorwf	___llmod@divisor+2,w,c
  5092  003890  102B               	iorwf	___llmod@divisor+3,w,c
  5093  003892  B4D8               	btfsc	status,2,c
  5094  003894  D029               	goto	l1206
  5095  003896  0E01               	movlw	1
  5096  003898  6E2C               	movwf	___llmod@counter,c
  5097  00389A  D007               	goto	l3831
  5098  00389C                     l3829:
  5099  00389C  90D8               	bcf	status,0,c
  5100  00389E  3628               	rlcf	___llmod@divisor,f,c
  5101  0038A0  3629               	rlcf	___llmod@divisor+1,f,c
  5102  0038A2  362A               	rlcf	___llmod@divisor+2,f,c
  5103  0038A4  362B               	rlcf	___llmod@divisor+3,f,c
  5104  0038A6  2A2C               	incf	___llmod@counter,f,c
  5105  0038A8  D000               	goto	l3831
  5106  0038AA                     l3831:
  5107  0038AA  BE2B               	btfsc	___llmod@divisor+3,7,c
  5108  0038AC  D002               	goto	l3833
  5109  0038AE  D7F6               	goto	l3829
  5110  0038B0  D000               	goto	l3833
  5111  0038B2                     l3833:
  5112  0038B2  5028               	movf	___llmod@divisor,w,c
  5113  0038B4  5C24               	subwf	___llmod@dividend,w,c
  5114  0038B6  5029               	movf	___llmod@divisor+1,w,c
  5115  0038B8  5825               	subwfb	___llmod@dividend+1,w,c
  5116  0038BA  502A               	movf	___llmod@divisor+2,w,c
  5117  0038BC  5826               	subwfb	___llmod@dividend+2,w,c
  5118  0038BE  502B               	movf	___llmod@divisor+3,w,c
  5119  0038C0  5827               	subwfb	___llmod@dividend+3,w,c
  5120  0038C2  A0D8               	btfss	status,0,c
  5121  0038C4  D009               	goto	l3837
  5122  0038C6  5028               	movf	___llmod@divisor,w,c
  5123  0038C8  5E24               	subwf	___llmod@dividend,f,c
  5124  0038CA  5029               	movf	___llmod@divisor+1,w,c
  5125  0038CC  5A25               	subwfb	___llmod@dividend+1,f,c
  5126  0038CE  502A               	movf	___llmod@divisor+2,w,c
  5127  0038D0  5A26               	subwfb	___llmod@dividend+2,f,c
  5128  0038D2  502B               	movf	___llmod@divisor+3,w,c
  5129  0038D4  5A27               	subwfb	___llmod@dividend+3,f,c
  5130  0038D6  D000               	goto	l3837
  5131  0038D8                     l3837:
  5132  0038D8  90D8               	bcf	status,0,c
  5133  0038DA  322B               	rrcf	___llmod@divisor+3,f,c
  5134  0038DC  322A               	rrcf	___llmod@divisor+2,f,c
  5135  0038DE  3229               	rrcf	___llmod@divisor+1,f,c
  5136  0038E0  3228               	rrcf	___llmod@divisor,f,c
  5137  0038E2  2E2C               	decfsz	___llmod@counter,f,c
  5138  0038E4  D7E6               	goto	l3833
  5139  0038E6  D000               	goto	l1206
  5140  0038E8                     l1206:
  5141  0038E8  C024  F024         	movff	___llmod@dividend,?___llmod
  5142  0038EC  C025  F025         	movff	___llmod@dividend+1,?___llmod+1
  5143  0038F0  C026  F026         	movff	___llmod@dividend+2,?___llmod+2
  5144  0038F4  C027  F027         	movff	___llmod@dividend+3,?___llmod+3
  5145  0038F8  0012               	return		;funcret
  5146  0038FA                     __end_of___llmod:
  5147                           	opt stack 0
  5148                           tblptru	equ	0xFF8
  5149                           tblptrh	equ	0xFF7
  5150                           tblptrl	equ	0xFF6
  5151                           tablat	equ	0xFF5
  5152                           prodh	equ	0xFF4
  5153                           prodl	equ	0xFF3
  5154                           intcon	equ	0xFF2
  5155                           postinc0	equ	0xFEE
  5156                           wreg	equ	0xFE8
  5157                           postinc2	equ	0xFDE
  5158                           postdec2	equ	0xFDD
  5159                           fsr2h	equ	0xFDA
  5160                           fsr2l	equ	0xFD9
  5161                           status	equ	0xFD8
  5162                           
  5163 ;; *************** function ___lldiv *****************
  5164 ;; Defined at:
  5165 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  dividend        4   22[COMRAM] unsigned long 
  5168 ;;  divisor         4   26[COMRAM] unsigned long 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  quotient        4   30[COMRAM] unsigned long 
  5171 ;;  counter         1   34[COMRAM] unsigned char 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  4   22[COMRAM] unsigned long 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5181 ;;      Params:         8       0       0       0       0       0       0
  5182 ;;      Locals:         5       0       0       0       0       0       0
  5183 ;;      Temps:          0       0       0       0       0       0       0
  5184 ;;      Totals:        13       0       0       0       0       0       0
  5185 ;;Total ram usage:       13 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    4
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_printf
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text11
  5196  00377C                     __ptext11:
  5197                           	opt stack 0
  5198  00377C                     ___lldiv:
  5199                           	opt stack 25
  5200                           
  5201                           ;incstack = 0
  5202  00377C  0E00               	movlw	0
  5203  00377E  6E1F               	movwf	___lldiv@quotient,c
  5204  003780  0E00               	movlw	0
  5205  003782  6E20               	movwf	___lldiv@quotient+1,c
  5206  003784  0E00               	movlw	0
  5207  003786  6E21               	movwf	___lldiv@quotient+2,c
  5208  003788  0E00               	movlw	0
  5209  00378A  6E22               	movwf	___lldiv@quotient+3,c
  5210  00378C  501B               	movf	___lldiv@divisor,w,c
  5211  00378E  101C               	iorwf	___lldiv@divisor+1,w,c
  5212  003790  101D               	iorwf	___lldiv@divisor+2,w,c
  5213  003792  101E               	iorwf	___lldiv@divisor+3,w,c
  5214  003794  B4D8               	btfsc	status,2,c
  5215  003796  D02F               	goto	l1196
  5216  003798  0E01               	movlw	1
  5217  00379A  6E23               	movwf	___lldiv@counter,c
  5218  00379C  D007               	goto	l3811
  5219  00379E                     l3809:
  5220  00379E  90D8               	bcf	status,0,c
  5221  0037A0  361B               	rlcf	___lldiv@divisor,f,c
  5222  0037A2  361C               	rlcf	___lldiv@divisor+1,f,c
  5223  0037A4  361D               	rlcf	___lldiv@divisor+2,f,c
  5224  0037A6  361E               	rlcf	___lldiv@divisor+3,f,c
  5225  0037A8  2A23               	incf	___lldiv@counter,f,c
  5226  0037AA  D000               	goto	l3811
  5227  0037AC                     l3811:
  5228  0037AC  BE1E               	btfsc	___lldiv@divisor+3,7,c
  5229  0037AE  D002               	goto	l3813
  5230  0037B0  D7F6               	goto	l3809
  5231  0037B2  D000               	goto	l3813
  5232  0037B4                     l3813:
  5233  0037B4  90D8               	bcf	status,0,c
  5234  0037B6  361F               	rlcf	___lldiv@quotient,f,c
  5235  0037B8  3620               	rlcf	___lldiv@quotient+1,f,c
  5236  0037BA  3621               	rlcf	___lldiv@quotient+2,f,c
  5237  0037BC  3622               	rlcf	___lldiv@quotient+3,f,c
  5238  0037BE  501B               	movf	___lldiv@divisor,w,c
  5239  0037C0  5C17               	subwf	___lldiv@dividend,w,c
  5240  0037C2  501C               	movf	___lldiv@divisor+1,w,c
  5241  0037C4  5818               	subwfb	___lldiv@dividend+1,w,c
  5242  0037C6  501D               	movf	___lldiv@divisor+2,w,c
  5243  0037C8  5819               	subwfb	___lldiv@dividend+2,w,c
  5244  0037CA  501E               	movf	___lldiv@divisor+3,w,c
  5245  0037CC  581A               	subwfb	___lldiv@dividend+3,w,c
  5246  0037CE  A0D8               	btfss	status,0,c
  5247  0037D0  D00A               	goto	l3821
  5248  0037D2  501B               	movf	___lldiv@divisor,w,c
  5249  0037D4  5E17               	subwf	___lldiv@dividend,f,c
  5250  0037D6  501C               	movf	___lldiv@divisor+1,w,c
  5251  0037D8  5A18               	subwfb	___lldiv@dividend+1,f,c
  5252  0037DA  501D               	movf	___lldiv@divisor+2,w,c
  5253  0037DC  5A19               	subwfb	___lldiv@dividend+2,f,c
  5254  0037DE  501E               	movf	___lldiv@divisor+3,w,c
  5255  0037E0  5A1A               	subwfb	___lldiv@dividend+3,f,c
  5256  0037E2  801F               	bsf	___lldiv@quotient,0,c
  5257  0037E4  D000               	goto	l3821
  5258  0037E6                     l3821:
  5259  0037E6  90D8               	bcf	status,0,c
  5260  0037E8  321E               	rrcf	___lldiv@divisor+3,f,c
  5261  0037EA  321D               	rrcf	___lldiv@divisor+2,f,c
  5262  0037EC  321C               	rrcf	___lldiv@divisor+1,f,c
  5263  0037EE  321B               	rrcf	___lldiv@divisor,f,c
  5264  0037F0  2E23               	decfsz	___lldiv@counter,f,c
  5265  0037F2  D7E0               	goto	l3813
  5266  0037F4  D000               	goto	l1196
  5267  0037F6                     l1196:
  5268  0037F6  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  5269  0037FA  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  5270  0037FE  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  5271  003802  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  5272  003806  0012               	return		;funcret
  5273  003808                     __end_of___lldiv:
  5274                           	opt stack 0
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon	equ	0xFF2
  5282                           postinc0	equ	0xFEE
  5283                           wreg	equ	0xFE8
  5284                           postinc2	equ	0xFDE
  5285                           postdec2	equ	0xFDD
  5286                           fsr2h	equ	0xFDA
  5287                           fsr2l	equ	0xFD9
  5288                           status	equ	0xFD8
  5289                           
  5290 ;; *************** function ___fttol *****************
  5291 ;; Defined at:
  5292 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;  f1              3   22[BANK0 ] float 
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;  lval            4   32[BANK0 ] unsigned long 
  5297 ;;  exp1            1   36[BANK0 ] unsigned char 
  5298 ;;  sign1           1   31[BANK0 ] unsigned char 
  5299 ;; Return value:  Size  Location     Type
  5300 ;;                  4   22[BANK0 ] long 
  5301 ;; Registers used:
  5302 ;;		wreg, status,2, status,0
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5308 ;;      Params:         0       4       0       0       0       0       0
  5309 ;;      Locals:         0       6       0       0       0       0       0
  5310 ;;      Temps:          0       5       0       0       0       0       0
  5311 ;;      Totals:         0      15       0       0       0       0       0
  5312 ;;Total ram usage:       15 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    4
  5315 ;; This function calls:
  5316 ;;		Nothing
  5317 ;; This function is called by:
  5318 ;;		_printf
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text12
  5323  00292A                     __ptext12:
  5324                           	opt stack 0
  5325  00292A                     ___fttol:
  5326                           	opt stack 25
  5327                           
  5328                           ;incstack = 0
  5329  00292A  C078  F07A         	movff	___fttol@f1+2,??___fttol
  5330  00292E  0100               	movlb	0	; () banked
  5331  002930  6B7B               	clrf	(??___fttol+1)& (0+255),b
  5332  002932  6B7C               	clrf	(??___fttol+2)& (0+255),b
  5333  002934  0100               	movlb	0	; () banked
  5334  002936  3577               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5335  002938  0100               	movlb	0	; () banked
  5336  00293A  377A               	rlcf	??___fttol& (0+255),f,b
  5337  00293C  E301               	bnc	u3381
  5338  00293E  817B               	bsf	(??___fttol+1)& (0+255),0,b
  5339  002940                     u3381:
  5340  002940  0100               	movlb	0	; () banked
  5341  002942  517A               	movf	??___fttol& (0+255),w,b
  5342  002944  0100               	movlb	0	; () banked
  5343  002946  6F84               	movwf	___fttol@exp1& (0+255),b
  5344  002948  0100               	movlb	0	; () banked
  5345  00294A  5184               	movf	___fttol@exp1& (0+255),w,b
  5346  00294C  A4D8               	btfss	status,2,c
  5347  00294E  D00A               	goto	l3763
  5348                           
  5349                           ; BSR set to: 0
  5350  002950  0E00               	movlw	0
  5351  002952  0100               	movlb	0	; () banked
  5352  002954  6F76               	movwf	?___fttol& (0+255),b
  5353  002956  0E00               	movlw	0
  5354  002958  6F77               	movwf	(?___fttol+1)& (0+255),b
  5355  00295A  0E00               	movlw	0
  5356  00295C  6F78               	movwf	(?___fttol+2)& (0+255),b
  5357  00295E  0E00               	movlw	0
  5358  002960  6F79               	movwf	(?___fttol+3)& (0+255),b
  5359                           
  5360                           ; BSR set to: 0
  5361  002962  0012               	return	
  5362  002964                     l3763:
  5363                           
  5364                           ; BSR set to: 0
  5365  002964  0E17               	movlw	23
  5366  002966  0100               	movlb	0	; () banked
  5367  002968  6F7A               	movwf	??___fttol& (0+255),b
  5368  00296A  C076  F07B         	movff	___fttol@f1,??___fttol+1
  5369  00296E  C077  F07C         	movff	___fttol@f1+1,??___fttol+2
  5370  002972  C078  F07D         	movff	___fttol@f1+2,??___fttol+3
  5371  002976  0100               	movlb	0	; () banked
  5372  002978  297A               	incf	??___fttol& (0+255),w,b
  5373  00297A  0100               	movlb	0	; () banked
  5374  00297C  6F7E               	movwf	(??___fttol+4)& (0+255),b
  5375  00297E  D005               	goto	u3400
  5376  002980                     u3405:
  5377  002980  0100               	movlb	0	; () banked
  5378  002982  90D8               	bcf	status,0,c
  5379  002984  337D               	rrcf	(??___fttol+3)& (0+255),f,b
  5380  002986  337C               	rrcf	(??___fttol+2)& (0+255),f,b
  5381  002988  337B               	rrcf	(??___fttol+1)& (0+255),f,b
  5382  00298A                     u3400:
  5383  00298A  0100               	movlb	0	; () banked
  5384  00298C  2F7E               	decfsz	(??___fttol+4)& (0+255),f,b
  5385  00298E  D7F8               	goto	u3405
  5386  002990  0100               	movlb	0	; () banked
  5387  002992  517B               	movf	(??___fttol+1)& (0+255),w,b
  5388  002994  0100               	movlb	0	; () banked
  5389  002996  6F7F               	movwf	___fttol@sign1& (0+255),b
  5390                           
  5391                           ; BSR set to: 0
  5392  002998  0100               	movlb	0	; () banked
  5393  00299A  8F77               	bsf	(___fttol@f1+1)& (0+255),7,b
  5394                           
  5395                           ; BSR set to: 0
  5396  00299C  0EFF               	movlw	255
  5397  00299E  0100               	movlb	0	; () banked
  5398  0029A0  1776               	andwf	___fttol@f1& (0+255),f,b
  5399  0029A2  0EFF               	movlw	255
  5400  0029A4  0100               	movlb	0	; () banked
  5401  0029A6  1777               	andwf	(___fttol@f1+1)& (0+255),f,b
  5402  0029A8  0E00               	movlw	0
  5403  0029AA  0100               	movlb	0	; () banked
  5404  0029AC  1778               	andwf	(___fttol@f1+2)& (0+255),f,b
  5405                           
  5406                           ; BSR set to: 0
  5407  0029AE  0100               	movlb	0	; () banked
  5408  0029B0  5176               	movf	___fttol@f1& (0+255),w,b
  5409  0029B2  0100               	movlb	0	; () banked
  5410  0029B4  6F80               	movwf	___fttol@lval& (0+255),b
  5411  0029B6  0100               	movlb	0	; () banked
  5412  0029B8  5177               	movf	(___fttol@f1+1)& (0+255),w,b
  5413  0029BA  0100               	movlb	0	; () banked
  5414  0029BC  6F81               	movwf	(___fttol@lval+1)& (0+255),b
  5415  0029BE  0100               	movlb	0	; () banked
  5416  0029C0  5178               	movf	(___fttol@f1+2)& (0+255),w,b
  5417  0029C2  0100               	movlb	0	; () banked
  5418  0029C4  6F82               	movwf	(___fttol@lval+2)& (0+255),b
  5419  0029C6  0100               	movlb	0	; () banked
  5420  0029C8  6B83               	clrf	(___fttol@lval+3)& (0+255),b
  5421                           
  5422                           ; BSR set to: 0
  5423  0029CA  0E8E               	movlw	142
  5424  0029CC  0100               	movlb	0	; () banked
  5425  0029CE  5F84               	subwf	___fttol@exp1& (0+255),f,b
  5426                           
  5427                           ; BSR set to: 0
  5428  0029D0  0100               	movlb	0	; () banked
  5429  0029D2  AF84               	btfss	___fttol@exp1& (0+255),7,b
  5430  0029D4  D01B               	goto	l3785
  5431                           
  5432                           ; BSR set to: 0
  5433  0029D6  0100               	movlb	0	; () banked
  5434  0029D8  5184               	movf	___fttol@exp1& (0+255),w,b
  5435  0029DA  0A80               	xorlw	128
  5436  0029DC  0F8F               	addlw	143
  5437  0029DE  B0D8               	btfsc	status,0,c
  5438  0029E0  D00B               	goto	l3781
  5439                           
  5440                           ; BSR set to: 0
  5441  0029E2  0E00               	movlw	0
  5442  0029E4  0100               	movlb	0	; () banked
  5443  0029E6  6F76               	movwf	?___fttol& (0+255),b
  5444  0029E8  0E00               	movlw	0
  5445  0029EA  6F77               	movwf	(?___fttol+1)& (0+255),b
  5446  0029EC  0E00               	movlw	0
  5447  0029EE  6F78               	movwf	(?___fttol+2)& (0+255),b
  5448  0029F0  0E00               	movlw	0
  5449  0029F2  6F79               	movwf	(?___fttol+3)& (0+255),b
  5450                           
  5451                           ; BSR set to: 0
  5452  0029F4  0012               	return	
  5453                           
  5454                           ; BSR set to: 0
  5455  0029F6  D000               	goto	l3781
  5456  0029F8                     l3781:
  5457                           
  5458                           ; BSR set to: 0
  5459  0029F8  0100               	movlb	0	; () banked
  5460  0029FA  90D8               	bcf	status,0,c
  5461  0029FC  3383               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5462  0029FE  3382               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5463  002A00  3381               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5464  002A02  3380               	rrcf	___fttol@lval& (0+255),f,b
  5465                           
  5466                           ; BSR set to: 0
  5467  002A04  0100               	movlb	0	; () banked
  5468  002A06  3F84               	incfsz	___fttol@exp1& (0+255),f,b
  5469  002A08  D7F7               	goto	l3781
  5470                           
  5471                           ; BSR set to: 0
  5472  002A0A  D01F               	goto	l3795
  5473  002A0C                     l3785:
  5474                           
  5475                           ; BSR set to: 0
  5476  002A0C  0E17               	movlw	23
  5477  002A0E  0100               	movlb	0	; () banked
  5478  002A10  6584               	cpfsgt	___fttol@exp1& (0+255),b
  5479  002A12  D014               	goto	l3793
  5480                           
  5481                           ; BSR set to: 0
  5482  002A14  0E00               	movlw	0
  5483  002A16  0100               	movlb	0	; () banked
  5484  002A18  6F76               	movwf	?___fttol& (0+255),b
  5485  002A1A  0E00               	movlw	0
  5486  002A1C  6F77               	movwf	(?___fttol+1)& (0+255),b
  5487  002A1E  0E00               	movlw	0
  5488  002A20  6F78               	movwf	(?___fttol+2)& (0+255),b
  5489  002A22  0E00               	movlw	0
  5490  002A24  6F79               	movwf	(?___fttol+3)& (0+255),b
  5491                           
  5492                           ; BSR set to: 0
  5493  002A26  0012               	return	
  5494                           
  5495                           ; BSR set to: 0
  5496  002A28  D009               	goto	l3793
  5497  002A2A                     l3791:
  5498                           
  5499                           ; BSR set to: 0
  5500  002A2A  0100               	movlb	0	; () banked
  5501  002A2C  90D8               	bcf	status,0,c
  5502  002A2E  3780               	rlcf	___fttol@lval& (0+255),f,b
  5503  002A30  3781               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5504  002A32  3782               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5505  002A34  3783               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5506  002A36  0100               	movlb	0	; () banked
  5507  002A38  0784               	decf	___fttol@exp1& (0+255),f,b
  5508  002A3A  D000               	goto	l3793
  5509  002A3C                     l3793:
  5510                           
  5511                           ; BSR set to: 0
  5512  002A3C  0100               	movlb	0	; () banked
  5513  002A3E  5184               	movf	___fttol@exp1& (0+255),w,b
  5514  002A40  0100               	movlb	0	; () banked
  5515  002A42  B4D8               	btfsc	status,2,c
  5516  002A44  D002               	goto	l3795
  5517  002A46  D7F1               	goto	l3791
  5518                           
  5519                           ; BSR set to: 0
  5520  002A48  D000               	goto	l3795
  5521  002A4A                     l3795:
  5522                           
  5523                           ; BSR set to: 0
  5524  002A4A  0100               	movlb	0	; () banked
  5525  002A4C  517F               	movf	___fttol@sign1& (0+255),w,b
  5526  002A4E  0100               	movlb	0	; () banked
  5527  002A50  B4D8               	btfsc	status,2,c
  5528  002A52  D00A               	goto	l3799
  5529                           
  5530                           ; BSR set to: 0
  5531  002A54  0100               	movlb	0	; () banked
  5532  002A56  1F83               	comf	(___fttol@lval+3)& (0+255),f,b
  5533  002A58  1F82               	comf	(___fttol@lval+2)& (0+255),f,b
  5534  002A5A  1F81               	comf	(___fttol@lval+1)& (0+255),f,b
  5535  002A5C  6D80               	negf	___fttol@lval& (0+255),b
  5536  002A5E  0E00               	movlw	0
  5537  002A60  2381               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5538  002A62  2382               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5539  002A64  2383               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5540  002A66  D000               	goto	l3799
  5541  002A68                     l3799:
  5542                           
  5543                           ; BSR set to: 0
  5544  002A68  C080  F076         	movff	___fttol@lval,?___fttol
  5545  002A6C  C081  F077         	movff	___fttol@lval+1,?___fttol+1
  5546  002A70  C082  F078         	movff	___fttol@lval+2,?___fttol+2
  5547  002A74  C083  F079         	movff	___fttol@lval+3,?___fttol+3
  5548  002A78  0012               	return	
  5549                           
  5550                           ; BSR set to: 0
  5551                           
  5552                           ; BSR set to: 0
  5553  002A7A  0012               	return		;funcret
  5554  002A7C                     __end_of___fttol:
  5555                           	opt stack 0
  5556                           tblptru	equ	0xFF8
  5557                           tblptrh	equ	0xFF7
  5558                           tblptrl	equ	0xFF6
  5559                           tablat	equ	0xFF5
  5560                           prodh	equ	0xFF4
  5561                           prodl	equ	0xFF3
  5562                           intcon	equ	0xFF2
  5563                           postinc0	equ	0xFEE
  5564                           wreg	equ	0xFE8
  5565                           postinc2	equ	0xFDE
  5566                           postdec2	equ	0xFDD
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function ___ftneg *****************
  5572 ;; Defined at:
  5573 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  f1              3   22[COMRAM] float 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  3   22[COMRAM] float 
  5580 ;; Registers used:
  5581 ;;		wreg, status,2, status,0
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5587 ;;      Params:         3       0       0       0       0       0       0
  5588 ;;      Locals:         0       0       0       0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0       0
  5590 ;;      Totals:         3       0       0       0       0       0       0
  5591 ;;Total ram usage:        3 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    4
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_printf
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text13
  5602  003C1E                     __ptext13:
  5603                           	opt stack 0
  5604  003C1E                     ___ftneg:
  5605                           	opt stack 25
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;incstack = 0
  5609  003C1E  5017               	movf	___ftneg@f1,w,c
  5610  003C20  1018               	iorwf	___ftneg@f1+1,w,c
  5611  003C22  1019               	iorwf	___ftneg@f1+2,w,c
  5612  003C24  B4D8               	btfsc	status,2,c
  5613  003C26  D006               	goto	l1141
  5614  003C28  0E00               	movlw	0
  5615  003C2A  1A17               	xorwf	___ftneg@f1,f,c
  5616  003C2C  0E00               	movlw	0
  5617  003C2E  1A18               	xorwf	___ftneg@f1+1,f,c
  5618  003C30  0E80               	movlw	128
  5619  003C32  1A19               	xorwf	___ftneg@f1+2,f,c
  5620  003C34                     l1141:
  5621  003C34  C017  F017         	movff	___ftneg@f1,?___ftneg
  5622  003C38  C018  F018         	movff	___ftneg@f1+1,?___ftneg+1
  5623  003C3C  C019  F019         	movff	___ftneg@f1+2,?___ftneg+2
  5624  003C40  0012               	return		;funcret
  5625  003C42                     __end_of___ftneg:
  5626                           	opt stack 0
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           prodh	equ	0xFF4
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           postinc0	equ	0xFEE
  5635                           wreg	equ	0xFE8
  5636                           postinc2	equ	0xFDE
  5637                           postdec2	equ	0xFDD
  5638                           fsr2h	equ	0xFDA
  5639                           fsr2l	equ	0xFD9
  5640                           status	equ	0xFD8
  5641                           
  5642 ;; *************** function _Temp_Fault *****************
  5643 ;; Defined at:
  5644 ;;		line 12 in file "Tempeture.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;		None
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;  i               2   52[COMRAM] int 
  5649 ;;  fault           1   51[COMRAM] unsigned char 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  1    wreg      unsigned char 
  5652 ;; Registers used:
  5653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5659 ;;      Params:         0       0       0       0       0       0       0
  5660 ;;      Locals:         3       0       0       0       0       0       0
  5661 ;;      Temps:          0       0       0       0       0       0       0
  5662 ;;      Totals:         3       0       0       0       0       0       0
  5663 ;;Total ram usage:        3 bytes
  5664 ;; Hardware stack levels used:    1
  5665 ;; Hardware stack levels required when called:    5
  5666 ;; This function calls:
  5667 ;;		___ftge
  5668 ;;		___wmul
  5669 ;; This function is called by:
  5670 ;;		_main
  5671 ;; This function uses a non-reentrant model
  5672 ;;
  5673                           
  5674                           	psect	text14
  5675  0038FA                     __ptext14:
  5676                           	opt stack 0
  5677  0038FA                     _Temp_Fault:
  5678                           	opt stack 25
  5679                           
  5680                           ;Tempeture.c: 15: char fault = 0;
  5681                           
  5682                           ;incstack = 0
  5683  0038FA  0E00               	movlw	0
  5684  0038FC  6E34               	movwf	Temp_Fault@fault,c
  5685                           
  5686                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
  5687  0038FE  0E00               	movlw	0
  5688  003900  6E36               	movwf	Temp_Fault@i+1,c
  5689  003902  0E00               	movlw	0
  5690  003904  6E35               	movwf	Temp_Fault@i,c
  5691  003906                     l5095:
  5692  003906  BE36               	btfsc	Temp_Fault@i+1,7,c
  5693  003908  D008               	goto	l5099
  5694  00390A  5036               	movf	Temp_Fault@i+1,w,c
  5695  00390C  E12D               	bnz	l358
  5696  00390E  0E09               	movlw	9
  5697  003910  5C35               	subwf	Temp_Fault@i,w,c
  5698  003912  B0D8               	btfsc	status,0,c
  5699  003914  0012               	return	
  5700  003916  D001               	goto	l5099
  5701  003918  0012               	return	
  5702  00391A                     l5099:
  5703                           
  5704                           ;Tempeture.c: 17: {
  5705                           ;Tempeture.c: 18: if (60.5 < Temp_DegF[i])
  5706  00391A  0E00               	movlw	0
  5707  00391C  6E2B               	movwf	___ftge@ff1,c
  5708  00391E  0E72               	movlw	114
  5709  003920  6E2C               	movwf	___ftge@ff1+1,c
  5710  003922  0E42               	movlw	66
  5711  003924  6E2D               	movwf	___ftge@ff1+2,c
  5712  003926  C035  F025         	movff	Temp_Fault@i,___wmul@multiplier
  5713  00392A  C036  F026         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  5714  00392E  0E00               	movlw	0
  5715  003930  6E28               	movwf	___wmul@multiplicand+1,c
  5716  003932  0E03               	movlw	3
  5717  003934  6E27               	movwf	___wmul@multiplicand,c
  5718  003936  ECE8  F01D         	call	___wmul	;wreg free
  5719  00393A  0E96               	movlw	low _Temp_DegF
  5720  00393C  2425               	addwf	?___wmul,w,c
  5721  00393E  6ED9               	movwf	fsr2l,c
  5722  003940  0E01               	movlw	high _Temp_DegF
  5723  003942  2026               	addwfc	?___wmul+1,w,c
  5724  003944  6EDA               	movwf	fsr2h,c
  5725  003946  CFDE F02E          	movff	postinc2,___ftge@ff2
  5726  00394A  CFDE F02F          	movff	postinc2,___ftge@ff2+1
  5727  00394E  CFDD F030          	movff	postdec2,___ftge@ff2+2
  5728  003952  EC2A  F01B         	call	___ftge	;wreg free
  5729  003956  B0D8               	btfsc	status,0,c
  5730  003958  D003               	goto	l5103
  5731                           
  5732                           ;Tempeture.c: 19: {
  5733                           ;Tempeture.c: 20: fault = 1;
  5734  00395A  0E01               	movlw	1
  5735  00395C  6E34               	movwf	Temp_Fault@fault,c
  5736  00395E  D000               	goto	l5103
  5737  003960                     l5103:
  5738  003960  4A35               	infsnz	Temp_Fault@i,f,c
  5739  003962  2A36               	incf	Temp_Fault@i+1,f,c
  5740  003964  D7D0               	goto	l5095
  5741  003966  0012               	return	
  5742  003968                     l358:
  5743  003968  0012               	return		;funcret
  5744  00396A                     __end_of_Temp_Fault:
  5745                           	opt stack 0
  5746                           tblptru	equ	0xFF8
  5747                           tblptrh	equ	0xFF7
  5748                           tblptrl	equ	0xFF6
  5749                           tablat	equ	0xFF5
  5750                           prodh	equ	0xFF4
  5751                           prodl	equ	0xFF3
  5752                           intcon	equ	0xFF2
  5753                           postinc0	equ	0xFEE
  5754                           wreg	equ	0xFE8
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function _Temp_Convert *****************
  5762 ;; Defined at:
  5763 ;;		line 50 in file "Tempeture.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  steinhart       3   62[BANK0 ] float 
  5768 ;;  x               2   60[BANK0 ] int 
  5769 ;; Return value:  Size  Location     Type
  5770 ;;		None               void
  5771 ;; Registers used:
  5772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5778 ;;      Params:         0       0       0       0       0       0       0
  5779 ;;      Locals:         0      11       0       0       0       0       0
  5780 ;;      Temps:          0       0       0       0       0       0       0
  5781 ;;      Totals:         0      11       0       0       0       0       0
  5782 ;;Total ram usage:       11 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    8
  5785 ;; This function calls:
  5786 ;;		_Temp_Filter
  5787 ;;		___awtoft
  5788 ;;		___ftadd
  5789 ;;		___ftdiv
  5790 ;;		___ftmul
  5791 ;;		___ftsub
  5792 ;;		___wmul
  5793 ;;		_log
  5794 ;; This function is called by:
  5795 ;;		_main
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text15
  5800  002106                     __ptext15:
  5801                           	opt stack 0
  5802  002106                     _Temp_Convert:
  5803                           	opt stack 22
  5804                           
  5805                           ;Tempeture.c: 52: int x;
  5806                           ;Tempeture.c: 53: float steinhart;
  5807                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
  5808                           
  5809                           ;incstack = 0
  5810  002106  0E00               	movlw	0
  5811  002108  0100               	movlb	0	; () banked
  5812  00210A  6F9D               	movwf	(Temp_Convert@x+1)& (0+255),b
  5813  00210C  0E00               	movlw	0
  5814  00210E  6F9C               	movwf	Temp_Convert@x& (0+255),b
  5815                           
  5816                           ; BSR set to: 0
  5817  002110  0100               	movlb	0	; () banked
  5818  002112  BF9D               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  5819  002114  D00A               	goto	l5113
  5820  002116  0100               	movlb	0	; () banked
  5821  002118  519D               	movf	(Temp_Convert@x+1)& (0+255),w,b
  5822  00211A  E106               	bnz	u5310
  5823  00211C  0E0A               	movlw	10
  5824  00211E  0100               	movlb	0	; () banked
  5825  002120  5D9C               	subwf	Temp_Convert@x& (0+255),w,b
  5826  002122  B0D8               	btfsc	status,0,c
  5827  002124  D10D               	goto	l5137
  5828  002126  D001               	goto	l5113
  5829  002128                     u5310:
  5830                           
  5831                           ; BSR set to: 0
  5832  002128  D10B               	goto	l5137
  5833  00212A                     l5113:
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;Tempeture.c: 55: {
  5837                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  5838  00212A  0E00               	movlw	0
  5839  00212C  0100               	movlb	0	; () banked
  5840  00212E  6F7C               	movwf	___ftadd@f2& (0+255),b
  5841  002130  0E80               	movlw	128
  5842  002132  0100               	movlb	0	; () banked
  5843  002134  6F7D               	movwf	(___ftadd@f2+1)& (0+255),b
  5844  002136  0EBF               	movlw	191
  5845  002138  0100               	movlb	0	; () banked
  5846  00213A  6F7E               	movwf	(___ftadd@f2+2)& (0+255),b
  5847  00213C  90D8               	bcf	status,0,c
  5848  00213E  0100               	movlb	0	; () banked
  5849  002140  359C               	rlcf	Temp_Convert@x& (0+255),w,b
  5850  002142  6ED9               	movwf	fsr2l,c
  5851  002144  0100               	movlb	0	; () banked
  5852  002146  359D               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  5853  002148  6EDA               	movwf	fsr2h,c
  5854  00214A  0EE6               	movlw	low _Temp_Adc
  5855  00214C  26D9               	addwf	fsr2l,f,c
  5856  00214E  0E00               	movlw	high _Temp_Adc
  5857  002150  22DA               	addwfc	fsr2h,f,c
  5858  002152  CFDE F02B          	movff	postinc2,___awtoft@c
  5859  002156  CFDD F02C          	movff	postdec2,___awtoft@c+1
  5860  00215A  EC60  F01D         	call	___awtoft	;wreg free
  5861  00215E  C02B  F032         	movff	?___awtoft,___ftdiv@f2
  5862  002162  C02C  F033         	movff	?___awtoft+1,___ftdiv@f2+1
  5863  002166  C02D  F034         	movff	?___awtoft+2,___ftdiv@f2+2
  5864  00216A  0EC0               	movlw	192
  5865  00216C  6E2F               	movwf	___ftdiv@f1,c
  5866  00216E  0E7F               	movlw	127
  5867  002170  6E30               	movwf	___ftdiv@f1+1,c
  5868  002172  0E44               	movlw	68
  5869  002174  6E31               	movwf	___ftdiv@f1+2,c
  5870  002176  ECB4  F017         	call	___ftdiv	;wreg free
  5871  00217A  C02F  F079         	movff	?___ftdiv,___ftadd@f1
  5872  00217E  C030  F07A         	movff	?___ftdiv+1,___ftadd@f1+1
  5873  002182  C031  F07B         	movff	?___ftdiv+2,___ftadd@f1+2
  5874  002186  EC10  F00E         	call	___ftadd	;wreg free
  5875  00218A  C079  F096         	movff	?___ftadd,_Temp_Convert$1604
  5876  00218E  C07A  F097         	movff	?___ftadd+1,_Temp_Convert$1604+1
  5877  002192  C07B  F098         	movff	?___ftadd+2,_Temp_Convert$1604+2
  5878                           
  5879                           ;Tempeture.c: 55: {
  5880                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  5881  002196  C096  F032         	movff	_Temp_Convert$1604,___ftdiv@f2
  5882  00219A  C097  F033         	movff	_Temp_Convert$1604+1,___ftdiv@f2+1
  5883  00219E  C098  F034         	movff	_Temp_Convert$1604+2,___ftdiv@f2+2
  5884  0021A2  0E40               	movlw	64
  5885  0021A4  6E2F               	movwf	___ftdiv@f1,c
  5886  0021A6  0E1C               	movlw	28
  5887  0021A8  6E30               	movwf	___ftdiv@f1+1,c
  5888  0021AA  0E46               	movlw	70
  5889  0021AC  6E31               	movwf	___ftdiv@f1+2,c
  5890  0021AE  ECB4  F017         	call	___ftdiv	;wreg free
  5891  0021B2  C02F  F099         	movff	?___ftdiv,_Temp_Convert$1605
  5892  0021B6  C030  F09A         	movff	?___ftdiv+1,_Temp_Convert$1605+1
  5893  0021BA  C031  F09B         	movff	?___ftdiv+2,_Temp_Convert$1605+2
  5894                           
  5895                           ;Tempeture.c: 55: {
  5896                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  5897  0021BE  C099  F02F         	movff	_Temp_Convert$1605,___ftdiv@f1
  5898  0021C2  C09A  F030         	movff	_Temp_Convert$1605+1,___ftdiv@f1+1
  5899  0021C6  C09B  F031         	movff	_Temp_Convert$1605+2,___ftdiv@f1+2
  5900  0021CA  0E40               	movlw	64
  5901  0021CC  6E32               	movwf	___ftdiv@f2,c
  5902  0021CE  0E1C               	movlw	28
  5903  0021D0  6E33               	movwf	___ftdiv@f2+1,c
  5904  0021D2  0E46               	movlw	70
  5905  0021D4  6E34               	movwf	___ftdiv@f2+2,c
  5906  0021D6  ECB4  F017         	call	___ftdiv	;wreg free
  5907  0021DA  C02F  F09E         	movff	?___ftdiv,Temp_Convert@steinhart
  5908  0021DE  C030  F09F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5909  0021E2  C031  F0A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5910                           
  5911                           ;Tempeture.c: 57: steinhart = log(steinhart);
  5912  0021E6  C09E  F091         	movff	Temp_Convert@steinhart,log@x
  5913  0021EA  C09F  F092         	movff	Temp_Convert@steinhart+1,log@x+1
  5914  0021EE  C0A0  F093         	movff	Temp_Convert@steinhart+2,log@x+2
  5915  0021F2  EC3E  F015         	call	_log	;wreg free
  5916  0021F6  C091  F09E         	movff	?_log,Temp_Convert@steinhart
  5917  0021FA  C092  F09F         	movff	?_log+1,Temp_Convert@steinhart+1
  5918  0021FE  C093  F0A0         	movff	?_log+2,Temp_Convert@steinhart+2
  5919                           
  5920                           ;Tempeture.c: 58: steinhart /= 3950;
  5921  002202  C09E  F02F         	movff	Temp_Convert@steinhart,___ftdiv@f1
  5922  002206  C09F  F030         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  5923  00220A  C0A0  F031         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  5924  00220E  0EE0               	movlw	224
  5925  002210  6E32               	movwf	___ftdiv@f2,c
  5926  002212  0E76               	movlw	118
  5927  002214  6E33               	movwf	___ftdiv@f2+1,c
  5928  002216  0E45               	movlw	69
  5929  002218  6E34               	movwf	___ftdiv@f2+2,c
  5930  00221A  ECB4  F017         	call	___ftdiv	;wreg free
  5931  00221E  C02F  F09E         	movff	?___ftdiv,Temp_Convert@steinhart
  5932  002222  C030  F09F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5933  002226  C031  F0A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5934                           
  5935                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  5936  00222A  C09E  F079         	movff	Temp_Convert@steinhart,___ftadd@f1
  5937  00222E  C09F  F07A         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  5938  002232  C0A0  F07B         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  5939  002236  0ECF               	movlw	207
  5940  002238  0100               	movlb	0	; () banked
  5941  00223A  6F7C               	movwf	___ftadd@f2& (0+255),b
  5942  00223C  0E5B               	movlw	91
  5943  00223E  0100               	movlb	0	; () banked
  5944  002240  6F7D               	movwf	(___ftadd@f2+1)& (0+255),b
  5945  002242  0E3B               	movlw	59
  5946  002244  0100               	movlb	0	; () banked
  5947  002246  6F7E               	movwf	(___ftadd@f2+2)& (0+255),b
  5948  002248  EC10  F00E         	call	___ftadd	;wreg free
  5949  00224C  C079  F09E         	movff	?___ftadd,Temp_Convert@steinhart
  5950  002250  C07A  F09F         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  5951  002254  C07B  F0A0         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  5952                           
  5953                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  5954  002258  0E00               	movlw	0
  5955  00225A  6E2F               	movwf	___ftdiv@f1,c
  5956  00225C  0E80               	movlw	128
  5957  00225E  6E30               	movwf	___ftdiv@f1+1,c
  5958  002260  0E3F               	movlw	63
  5959  002262  6E31               	movwf	___ftdiv@f1+2,c
  5960  002264  C09E  F032         	movff	Temp_Convert@steinhart,___ftdiv@f2
  5961  002268  C09F  F033         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  5962  00226C  C0A0  F034         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  5963  002270  ECB4  F017         	call	___ftdiv	;wreg free
  5964  002274  C02F  F09E         	movff	?___ftdiv,Temp_Convert@steinhart
  5965  002278  C030  F09F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5966  00227C  C031  F0A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5967                           
  5968                           ;Tempeture.c: 61: steinhart -= 273.15;
  5969  002280  C09E  F085         	movff	Temp_Convert@steinhart,___ftsub@f1
  5970  002284  C09F  F086         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  5971  002288  C0A0  F087         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  5972  00228C  0E93               	movlw	147
  5973  00228E  0100               	movlb	0	; () banked
  5974  002290  6F88               	movwf	___ftsub@f2& (0+255),b
  5975  002292  0E88               	movlw	136
  5976  002294  0100               	movlb	0	; () banked
  5977  002296  6F89               	movwf	(___ftsub@f2+1)& (0+255),b
  5978  002298  0E43               	movlw	67
  5979  00229A  0100               	movlb	0	; () banked
  5980  00229C  6F8A               	movwf	(___ftsub@f2+2)& (0+255),b
  5981  00229E  EC11  F01D         	call	___ftsub	;wreg free
  5982  0022A2  C085  F09E         	movff	?___ftsub,Temp_Convert@steinhart
  5983  0022A6  C086  F09F         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  5984  0022AA  C087  F0A0         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  5985                           
  5986                           ;Tempeture.c: 62: steinhart = (steinhart*1.8) + 32.0;
  5987  0022AE  0E66               	movlw	102
  5988  0022B0  0100               	movlb	0	; () banked
  5989  0022B2  6F63               	movwf	___ftmul@f2& (0+255),b
  5990  0022B4  0EE6               	movlw	230
  5991  0022B6  0100               	movlb	0	; () banked
  5992  0022B8  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  5993  0022BA  0E3F               	movlw	63
  5994  0022BC  0100               	movlb	0	; () banked
  5995  0022BE  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  5996  0022C0  C09E  F060         	movff	Temp_Convert@steinhart,___ftmul@f1
  5997  0022C4  C09F  F061         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  5998  0022C8  C0A0  F062         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  5999  0022CC  ECDF  F013         	call	___ftmul	;wreg free
  6000  0022D0  C060  F079         	movff	?___ftmul,___ftadd@f1
  6001  0022D4  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6002  0022D8  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6003  0022DC  0E00               	movlw	0
  6004  0022DE  0100               	movlb	0	; () banked
  6005  0022E0  6F7C               	movwf	___ftadd@f2& (0+255),b
  6006  0022E2  0E00               	movlw	0
  6007  0022E4  0100               	movlb	0	; () banked
  6008  0022E6  6F7D               	movwf	(___ftadd@f2+1)& (0+255),b
  6009  0022E8  0E42               	movlw	66
  6010  0022EA  0100               	movlb	0	; () banked
  6011  0022EC  6F7E               	movwf	(___ftadd@f2+2)& (0+255),b
  6012  0022EE  EC10  F00E         	call	___ftadd	;wreg free
  6013  0022F2  C079  F09E         	movff	?___ftadd,Temp_Convert@steinhart
  6014  0022F6  C07A  F09F         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6015  0022FA  C07B  F0A0         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6016                           
  6017                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  6018  0022FE  C09C  F025         	movff	Temp_Convert@x,___wmul@multiplier
  6019  002302  C09D  F026         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6020  002306  0E00               	movlw	0
  6021  002308  6E28               	movwf	___wmul@multiplicand+1,c
  6022  00230A  0E03               	movlw	3
  6023  00230C  6E27               	movwf	___wmul@multiplicand,c
  6024  00230E  ECE8  F01D         	call	___wmul	;wreg free
  6025  002312  0ED2               	movlw	low _TmpTemp_DegF
  6026  002314  2425               	addwf	?___wmul,w,c
  6027  002316  6ED9               	movwf	fsr2l,c
  6028  002318  0E01               	movlw	high _TmpTemp_DegF
  6029  00231A  2026               	addwfc	?___wmul+1,w,c
  6030  00231C  6EDA               	movwf	fsr2h,c
  6031  00231E  C09E  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6032  002322  C09F  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6033  002326  C0A0  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  6034  00232A  0100               	movlb	0	; () banked
  6035  00232C  4B9C               	infsnz	Temp_Convert@x& (0+255),f,b
  6036  00232E  2B9D               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6037                           
  6038                           ; BSR set to: 0
  6039  002330  0100               	movlb	0	; () banked
  6040  002332  BF9D               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6041  002334  D6FA               	goto	l5113
  6042  002336  0100               	movlb	0	; () banked
  6043  002338  519D               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6044  00233A  E102               	bnz	l5137
  6045  00233C  D6EF               	goto	L5
  6046  00233E  D000               	goto	l5137
  6047  002340                     l5137:
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;Tempeture.c: 64: }
  6051                           ;Tempeture.c: 65: Temp_Filter();
  6052  002340  EC69  F012         	call	_Temp_Filter	;wreg free
  6053  002344  0012               	return		;funcret
  6054  002346                     __end_of_Temp_Convert:
  6055                           	opt stack 0
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           prodh	equ	0xFF4
  6061                           prodl	equ	0xFF3
  6062                           intcon	equ	0xFF2
  6063                           postinc0	equ	0xFEE
  6064                           wreg	equ	0xFE8
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function _log *****************
  6072 ;; Defined at:
  6073 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  x               3   49[BANK0 ] int 
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;  exponent        2   52[BANK0 ] int 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  3   49[BANK0 ] int 
  6080 ;; Registers used:
  6081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6087 ;;      Params:         0       3       0       0       0       0       0
  6088 ;;      Locals:         0       2       0       0       0       0       0
  6089 ;;      Temps:          0       0       0       0       0       0       0
  6090 ;;      Totals:         0       5       0       0       0       0       0
  6091 ;;Total ram usage:        5 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    7
  6094 ;; This function calls:
  6095 ;;		___awtoft
  6096 ;;		___ftadd
  6097 ;;		___ftmul
  6098 ;;		_eval_poly
  6099 ;;		_frexp
  6100 ;; This function is called by:
  6101 ;;		_Temp_Convert
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text16
  6106  002A7C                     __ptext16:
  6107                           	opt stack 0
  6108  002A7C                     _log:
  6109                           	opt stack 22
  6110                           
  6111                           ;incstack = 0
  6112  002A7C  0100               	movlb	0	; () banked
  6113  002A7E  AF93               	btfss	(log@x+2)& (0+255),7,b
  6114  002A80  D00F               	goto	l4901
  6115                           
  6116                           ; BSR set to: 0
  6117  002A82  0E00               	movlw	0
  6118  002A84  0100               	movlb	0	; () banked
  6119  002A86  6FE3               	movwf	(_errno+1)& (0+255),b
  6120  002A88  0E21               	movlw	33
  6121  002A8A  6FE2               	movwf	_errno& (0+255),b
  6122  002A8C  0E00               	movlw	0
  6123  002A8E  0100               	movlb	0	; () banked
  6124  002A90  6F91               	movwf	?_log& (0+255),b
  6125  002A92  0E00               	movlw	0
  6126  002A94  0100               	movlb	0	; () banked
  6127  002A96  6F92               	movwf	(?_log+1)& (0+255),b
  6128  002A98  0E00               	movlw	0
  6129  002A9A  0100               	movlb	0	; () banked
  6130  002A9C  6F93               	movwf	(?_log+2)& (0+255),b
  6131                           
  6132                           ; BSR set to: 0
  6133  002A9E  0012               	return	
  6134  002AA0                     l4901:
  6135                           
  6136                           ; BSR set to: 0
  6137  002AA0  0100               	movlb	0	; () banked
  6138  002AA2  5191               	movf	log@x& (0+255),w,b
  6139  002AA4  0100               	movlb	0	; () banked
  6140  002AA6  1192               	iorwf	(log@x+1)& (0+255),w,b
  6141  002AA8  0100               	movlb	0	; () banked
  6142  002AAA  1193               	iorwf	(log@x+2)& (0+255),w,b
  6143  002AAC  A4D8               	btfss	status,2,c
  6144  002AAE  D00F               	goto	l4907
  6145                           
  6146                           ; BSR set to: 0
  6147  002AB0  0E00               	movlw	0
  6148  002AB2  0100               	movlb	0	; () banked
  6149  002AB4  6FE3               	movwf	(_errno+1)& (0+255),b
  6150  002AB6  0E22               	movlw	34
  6151  002AB8  6FE2               	movwf	_errno& (0+255),b
  6152  002ABA  0E00               	movlw	0
  6153  002ABC  0100               	movlb	0	; () banked
  6154  002ABE  6F91               	movwf	?_log& (0+255),b
  6155  002AC0  0E00               	movlw	0
  6156  002AC2  0100               	movlb	0	; () banked
  6157  002AC4  6F92               	movwf	(?_log+1)& (0+255),b
  6158  002AC6  0E00               	movlw	0
  6159  002AC8  0100               	movlb	0	; () banked
  6160  002ACA  6F93               	movwf	(?_log+2)& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163  002ACC  0012               	return	
  6164  002ACE                     l4907:
  6165                           
  6166                           ; BSR set to: 0
  6167  002ACE  0E00               	movlw	0
  6168  002AD0  0100               	movlb	0	; () banked
  6169  002AD2  6F63               	movwf	___ftmul@f2& (0+255),b
  6170  002AD4  0E00               	movlw	0
  6171  002AD6  0100               	movlb	0	; () banked
  6172  002AD8  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6173  002ADA  0E40               	movlw	64
  6174  002ADC  0100               	movlb	0	; () banked
  6175  002ADE  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6176  002AE0  0E94               	movlw	low log@exponent
  6177  002AE2  6E1A               	movwf	frexp@eptr,c
  6178  002AE4  0E00               	movlw	high log@exponent
  6179  002AE6  6E1B               	movwf	frexp@eptr+1,c
  6180  002AE8  C091  F017         	movff	log@x,frexp@value
  6181  002AEC  C092  F018         	movff	log@x+1,frexp@value+1
  6182  002AF0  C093  F019         	movff	log@x+2,frexp@value+2
  6183  002AF4  EC75  F01B         	call	_frexp	;wreg free
  6184  002AF8  C017  F060         	movff	?_frexp,___ftmul@f1
  6185  002AFC  C018  F061         	movff	?_frexp+1,___ftmul@f1+1
  6186  002B00  C019  F062         	movff	?_frexp+2,___ftmul@f1+2
  6187  002B04  ECDF  F013         	call	___ftmul	;wreg free
  6188  002B08  C060  F079         	movff	?___ftmul,___ftadd@f1
  6189  002B0C  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6190  002B10  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6191  002B14  0E00               	movlw	0
  6192  002B16  0100               	movlb	0	; () banked
  6193  002B18  6F7C               	movwf	___ftadd@f2& (0+255),b
  6194  002B1A  0E80               	movlw	128
  6195  002B1C  0100               	movlb	0	; () banked
  6196  002B1E  6F7D               	movwf	(___ftadd@f2+1)& (0+255),b
  6197  002B20  0EBF               	movlw	191
  6198  002B22  0100               	movlb	0	; () banked
  6199  002B24  6F7E               	movwf	(___ftadd@f2+2)& (0+255),b
  6200  002B26  EC10  F00E         	call	___ftadd	;wreg free
  6201  002B2A  C079  F091         	movff	?___ftadd,log@x
  6202  002B2E  C07A  F092         	movff	?___ftadd+1,log@x+1
  6203  002B32  C07B  F093         	movff	?___ftadd+2,log@x+2
  6204  002B36  0100               	movlb	0	; () banked
  6205  002B38  0794               	decf	log@exponent& (0+255),f,b
  6206  002B3A  A0D8               	btfss	status,0,c
  6207  002B3C  0795               	decf	(log@exponent+1)& (0+255),f,b
  6208                           
  6209                           ; BSR set to: 0
  6210  002B3E  C091  F085         	movff	log@x,eval_poly@x
  6211  002B42  C092  F086         	movff	log@x+1,eval_poly@x+1
  6212  002B46  C093  F087         	movff	log@x+2,eval_poly@x+2
  6213  002B4A  0E77               	movlw	low log@coeff
  6214  002B4C  0100               	movlb	0	; () banked
  6215  002B4E  6F88               	movwf	eval_poly@d& (0+255),b
  6216  002B50  0E06               	movlw	high log@coeff
  6217  002B52  0100               	movlb	0	; () banked
  6218  002B54  6F89               	movwf	(eval_poly@d+1)& (0+255),b
  6219  002B56  0E00               	movlw	0
  6220  002B58  0100               	movlb	0	; () banked
  6221  002B5A  6F8B               	movwf	(eval_poly@n+1)& (0+255),b
  6222  002B5C  0E08               	movlw	8
  6223  002B5E  6F8A               	movwf	eval_poly@n& (0+255),b
  6224  002B60  EC2A  F018         	call	_eval_poly	;wreg free
  6225  002B64  C085  F091         	movff	?_eval_poly,log@x
  6226  002B68  C086  F092         	movff	?_eval_poly+1,log@x+1
  6227  002B6C  C087  F093         	movff	?_eval_poly+2,log@x+2
  6228  002B70  0E72               	movlw	114
  6229  002B72  0100               	movlb	0	; () banked
  6230  002B74  6F63               	movwf	___ftmul@f2& (0+255),b
  6231  002B76  0E31               	movlw	49
  6232  002B78  0100               	movlb	0	; () banked
  6233  002B7A  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6234  002B7C  0E3F               	movlw	63
  6235  002B7E  0100               	movlb	0	; () banked
  6236  002B80  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6237  002B82  C094  F02B         	movff	log@exponent,___awtoft@c
  6238  002B86  C095  F02C         	movff	log@exponent+1,___awtoft@c+1
  6239  002B8A  EC60  F01D         	call	___awtoft	;wreg free
  6240  002B8E  C02B  F060         	movff	?___awtoft,___ftmul@f1
  6241  002B92  C02C  F061         	movff	?___awtoft+1,___ftmul@f1+1
  6242  002B96  C02D  F062         	movff	?___awtoft+2,___ftmul@f1+2
  6243  002B9A  ECDF  F013         	call	___ftmul	;wreg free
  6244  002B9E  C060  F079         	movff	?___ftmul,___ftadd@f1
  6245  002BA2  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6246  002BA6  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6247  002BAA  C091  F07C         	movff	log@x,___ftadd@f2
  6248  002BAE  C092  F07D         	movff	log@x+1,___ftadd@f2+1
  6249  002BB2  C093  F07E         	movff	log@x+2,___ftadd@f2+2
  6250  002BB6  EC10  F00E         	call	___ftadd	;wreg free
  6251  002BBA  C079  F091         	movff	?___ftadd,?_log
  6252  002BBE  C07A  F092         	movff	?___ftadd+1,?_log+1
  6253  002BC2  C07B  F093         	movff	?___ftadd+2,?_log+2
  6254  002BC6  0012               	return	
  6255  002BC8  0012               	return		;funcret
  6256  002BCA                     __end_of_log:
  6257                           	opt stack 0
  6258                           tblptru	equ	0xFF8
  6259                           tblptrh	equ	0xFF7
  6260                           tblptrl	equ	0xFF6
  6261                           tablat	equ	0xFF5
  6262                           prodh	equ	0xFF4
  6263                           prodl	equ	0xFF3
  6264                           intcon	equ	0xFF2
  6265                           postinc0	equ	0xFEE
  6266                           wreg	equ	0xFE8
  6267                           postinc2	equ	0xFDE
  6268                           postdec2	equ	0xFDD
  6269                           fsr2h	equ	0xFDA
  6270                           fsr2l	equ	0xFD9
  6271                           status	equ	0xFD8
  6272                           
  6273 ;; *************** function _frexp *****************
  6274 ;; Defined at:
  6275 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  value           3   22[COMRAM] int 
  6278 ;;  eptr            2   25[COMRAM] PTR int 
  6279 ;;		 -> log@exponent(2), 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;		None
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  3   22[COMRAM] PTR int 
  6284 ;; Registers used:
  6285 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6291 ;;      Params:         5       0       0       0       0       0       0
  6292 ;;      Locals:         0       0       0       0       0       0       0
  6293 ;;      Temps:          2       0       0       0       0       0       0
  6294 ;;      Totals:         7       0       0       0       0       0       0
  6295 ;;Total ram usage:        7 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    4
  6298 ;; This function calls:
  6299 ;;		Nothing
  6300 ;; This function is called by:
  6301 ;;		_log
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           	psect	text17
  6306  0036EA                     __ptext17:
  6307                           	opt stack 0
  6308  0036EA                     _frexp:
  6309                           	opt stack 24
  6310                           
  6311                           ;incstack = 0
  6312  0036EA  5017               	movf	frexp@value,w,c
  6313  0036EC  1018               	iorwf	frexp@value+1,w,c
  6314  0036EE  1019               	iorwf	frexp@value+2,w,c
  6315  0036F0  A4D8               	btfss	status,2,c
  6316  0036F2  D00F               	goto	l3337
  6317  0036F4  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6318  0036F8  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6319  0036FC  0E00               	movlw	0
  6320  0036FE  6EDE               	movwf	postinc2,c
  6321  003700  0E00               	movlw	0
  6322  003702  6EDD               	movwf	postdec2,c
  6323  003704  0E00               	movlw	0
  6324  003706  6E17               	movwf	?_frexp,c
  6325  003708  0E00               	movlw	0
  6326  00370A  6E18               	movwf	?_frexp+1,c
  6327  00370C  0E00               	movlw	0
  6328  00370E  6E19               	movwf	?_frexp+2,c
  6329  003710  0012               	return	
  6330  003712                     l3337:
  6331  003712  5019               	movf	frexp@value+2,w,c
  6332  003714  0B7F               	andlw	127
  6333  003716  6E1C               	movwf	??_frexp& (0+255),c
  6334  003718  6A1D               	clrf	(??_frexp+1)& (0+255),c
  6335  00371A  90D8               	bcf	status,0,c
  6336  00371C  361C               	rlcf	??_frexp,f,c
  6337  00371E  361D               	rlcf	??_frexp+1,f,c
  6338  003720  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6339  003724  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6340  003728  C01C  FFDE         	movff	??_frexp,postinc2
  6341  00372C  C01D  FFDD         	movff	??_frexp+1,postdec2
  6342  003730  AE18               	btfss	frexp@value+1,7,c
  6343  003732  D003               	goto	u2810
  6344  003734  6A1C               	clrf	??_frexp& (0+255),c
  6345  003736  2A1C               	incf	??_frexp& (0+255),f,c
  6346  003738  D001               	goto	u2818
  6347  00373A                     u2810:
  6348  00373A  6A1C               	clrf	??_frexp& (0+255),c
  6349  00373C                     u2818:
  6350  00373C  501C               	movf	??_frexp,w,c
  6351  00373E  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6352  003742  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6353  003746  12DE               	iorwf	postinc2,f,c
  6354  003748  0E00               	movlw	0
  6355  00374A  12DD               	iorwf	postdec2,f,c
  6356  00374C  C01A  FFD9         	movff	frexp@eptr,fsr2l
  6357  003750  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  6358  003754  0E82               	movlw	130
  6359  003756  26DE               	addwf	postinc2,f,c
  6360  003758  0EFF               	movlw	255
  6361  00375A  22DD               	addwfc	postdec2,f,c
  6362  00375C  8019               	bsf	frexp@value+2,0,c
  6363  00375E  8219               	bsf	frexp@value+2,1,c
  6364  003760  8419               	bsf	frexp@value+2,2,c
  6365  003762  8619               	bsf	frexp@value+2,3,c
  6366  003764  8819               	bsf	frexp@value+2,4,c
  6367  003766  8A19               	bsf	frexp@value+2,5,c
  6368  003768  9C19               	bcf	frexp@value+2,6,c
  6369  00376A  9E18               	bcf	frexp@value+1,7,c
  6370  00376C  C017  F017         	movff	frexp@value,?_frexp
  6371  003770  C018  F018         	movff	frexp@value+1,?_frexp+1
  6372  003774  C019  F019         	movff	frexp@value+2,?_frexp+2
  6373  003778  0012               	return	
  6374  00377A  0012               	return		;funcret
  6375  00377C                     __end_of_frexp:
  6376                           	opt stack 0
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           prodh	equ	0xFF4
  6382                           prodl	equ	0xFF3
  6383                           intcon	equ	0xFF2
  6384                           postinc0	equ	0xFEE
  6385                           wreg	equ	0xFE8
  6386                           postinc2	equ	0xFDE
  6387                           postdec2	equ	0xFDD
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392 ;; *************** function _eval_poly *****************
  6393 ;; Defined at:
  6394 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;  x               3   37[BANK0 ] PTR int 
  6397 ;;  d               2   40[BANK0 ] PTR const 
  6398 ;;		 -> log@coeff(27), 
  6399 ;;  n               2   42[BANK0 ] int 
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;  res             3   46[BANK0 ] int 
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  3   37[BANK0 ] int 
  6404 ;; Registers used:
  6405 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6411 ;;      Params:         0       7       0       0       0       0       0
  6412 ;;      Locals:         0       3       0       0       0       0       0
  6413 ;;      Temps:          0       2       0       0       0       0       0
  6414 ;;      Totals:         0      12       0       0       0       0       0
  6415 ;;Total ram usage:       12 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    6
  6418 ;; This function calls:
  6419 ;;		___ftadd
  6420 ;;		___ftmul
  6421 ;;		___wmul
  6422 ;; This function is called by:
  6423 ;;		_log
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text18
  6428  003054                     __ptext18:
  6429                           	opt stack 0
  6430  003054                     _eval_poly:
  6431                           	opt stack 22
  6432                           
  6433                           ;incstack = 0
  6434  003054  C08A  F025         	movff	eval_poly@n,___wmul@multiplier
  6435  003058  C08B  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  6436  00305C  0E00               	movlw	0
  6437  00305E  6E28               	movwf	___wmul@multiplicand+1,c
  6438  003060  0E03               	movlw	3
  6439  003062  6E27               	movwf	___wmul@multiplicand,c
  6440  003064  ECE8  F01D         	call	___wmul	;wreg free
  6441  003068  C088  F08C         	movff	eval_poly@d,??_eval_poly
  6442  00306C  C089  F08D         	movff	eval_poly@d+1,??_eval_poly+1
  6443  003070  5025               	movf	?___wmul,w,c
  6444  003072  0100               	movlb	0	; () banked
  6445  003074  278C               	addwf	??_eval_poly& (0+255),f,b
  6446  003076  5026               	movf	?___wmul+1,w,c
  6447  003078  0100               	movlb	0	; () banked
  6448  00307A  238D               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6449  00307C  C08C  FFF6         	movff	??_eval_poly,tblptrl
  6450  003080  C08D  FFF7         	movff	??_eval_poly+1,tblptrh
  6451  003084                     	if	0	;tblptru may be non-zero
  6452  003084                     	endif
  6453  003084                     	if	0	;tblptru may be non-zero
  6454  003084                     	endif
  6455  003084  0009               	tblrd		*+
  6456  003086  CFF5 F08E          	movff	tablat,eval_poly@res
  6457  00308A  0009               	tblrd		*+
  6458  00308C  CFF5 F08F          	movff	tablat,eval_poly@res+1
  6459  003090  000A               	tblrd		*-
  6460  003092  CFF5 F090          	movff	tablat,eval_poly@res+2
  6461  003096  D042               	goto	l4865
  6462  003098                     l4863:
  6463                           
  6464                           ; BSR set to: 0
  6465  003098  C08E  F063         	movff	eval_poly@res,___ftmul@f2
  6466  00309C  C08F  F064         	movff	eval_poly@res+1,___ftmul@f2+1
  6467  0030A0  C090  F065         	movff	eval_poly@res+2,___ftmul@f2+2
  6468  0030A4  C085  F060         	movff	eval_poly@x,___ftmul@f1
  6469  0030A8  C086  F061         	movff	eval_poly@x+1,___ftmul@f1+1
  6470  0030AC  C087  F062         	movff	eval_poly@x+2,___ftmul@f1+2
  6471  0030B0  ECDF  F013         	call	___ftmul	;wreg free
  6472  0030B4  C060  F079         	movff	?___ftmul,___ftadd@f1
  6473  0030B8  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6474  0030BC  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6475  0030C0  0E00               	movlw	0
  6476  0030C2  6E28               	movwf	___wmul@multiplicand+1,c
  6477  0030C4  0E03               	movlw	3
  6478  0030C6  6E27               	movwf	___wmul@multiplicand,c
  6479  0030C8  0100               	movlb	0	; () banked
  6480  0030CA  078A               	decf	eval_poly@n& (0+255),f,b
  6481  0030CC  A0D8               	btfss	status,0,c
  6482  0030CE  078B               	decf	(eval_poly@n+1)& (0+255),f,b
  6483  0030D0  C08A  F025         	movff	eval_poly@n,___wmul@multiplier
  6484  0030D4  C08B  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  6485  0030D8  ECE8  F01D         	call	___wmul	;wreg free
  6486  0030DC  C088  F08C         	movff	eval_poly@d,??_eval_poly
  6487  0030E0  C089  F08D         	movff	eval_poly@d+1,??_eval_poly+1
  6488  0030E4  5025               	movf	?___wmul,w,c
  6489  0030E6  0100               	movlb	0	; () banked
  6490  0030E8  278C               	addwf	??_eval_poly& (0+255),f,b
  6491  0030EA  5026               	movf	?___wmul+1,w,c
  6492  0030EC  0100               	movlb	0	; () banked
  6493  0030EE  238D               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6494  0030F0  C08C  FFF6         	movff	??_eval_poly,tblptrl
  6495  0030F4  C08D  FFF7         	movff	??_eval_poly+1,tblptrh
  6496  0030F8                     	if	0	;tblptru may be non-zero
  6497  0030F8                     	endif
  6498  0030F8                     	if	0	;tblptru may be non-zero
  6499  0030F8                     	endif
  6500  0030F8  0009               	tblrd		*+
  6501  0030FA  CFF5 F07C          	movff	tablat,___ftadd@f2
  6502  0030FE  0009               	tblrd		*+
  6503  003100  CFF5 F07D          	movff	tablat,___ftadd@f2+1
  6504  003104  000A               	tblrd		*-
  6505  003106  CFF5 F07E          	movff	tablat,___ftadd@f2+2
  6506  00310A  EC10  F00E         	call	___ftadd	;wreg free
  6507  00310E  C079  F08E         	movff	?___ftadd,eval_poly@res
  6508  003112  C07A  F08F         	movff	?___ftadd+1,eval_poly@res+1
  6509  003116  C07B  F090         	movff	?___ftadd+2,eval_poly@res+2
  6510  00311A  D000               	goto	l4865
  6511  00311C                     l4865:
  6512  00311C  0100               	movlb	0	; () banked
  6513  00311E  518A               	movf	eval_poly@n& (0+255),w,b
  6514  003120  0100               	movlb	0	; () banked
  6515  003122  118B               	iorwf	(eval_poly@n+1)& (0+255),w,b
  6516  003124  A4D8               	btfss	status,2,c
  6517  003126  D7B8               	goto	l4863
  6518                           
  6519                           ; BSR set to: 0
  6520  003128  C08E  F085         	movff	eval_poly@res,?_eval_poly
  6521  00312C  C08F  F086         	movff	eval_poly@res+1,?_eval_poly+1
  6522  003130  C090  F087         	movff	eval_poly@res+2,?_eval_poly+2
  6523                           
  6524                           ; BSR set to: 0
  6525  003134  0012               	return		;funcret
  6526  003136                     __end_of_eval_poly:
  6527                           	opt stack 0
  6528                           tblptru	equ	0xFF8
  6529                           tblptrh	equ	0xFF7
  6530                           tblptrl	equ	0xFF6
  6531                           tablat	equ	0xFF5
  6532                           prodh	equ	0xFF4
  6533                           prodl	equ	0xFF3
  6534                           intcon	equ	0xFF2
  6535                           postinc0	equ	0xFEE
  6536                           wreg	equ	0xFE8
  6537                           postinc2	equ	0xFDE
  6538                           postdec2	equ	0xFDD
  6539                           fsr2h	equ	0xFDA
  6540                           fsr2l	equ	0xFD9
  6541                           status	equ	0xFD8
  6542                           
  6543 ;; *************** function ___ftsub *****************
  6544 ;; Defined at:
  6545 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;  f1              3   37[BANK0 ] float 
  6548 ;;  f2              3   40[BANK0 ] float 
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;		None
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  3   37[BANK0 ] float 
  6553 ;; Registers used:
  6554 ;;		wreg, status,2, status,0, cstack
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6560 ;;      Params:         0       6       0       0       0       0       0
  6561 ;;      Locals:         0       0       0       0       0       0       0
  6562 ;;      Temps:          0       0       0       0       0       0       0
  6563 ;;      Totals:         0       6       0       0       0       0       0
  6564 ;;Total ram usage:        6 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    6
  6567 ;; This function calls:
  6568 ;;		___ftadd
  6569 ;; This function is called by:
  6570 ;;		_Temp_Convert
  6571 ;;		_printf
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text19
  6576  003A22                     __ptext19:
  6577                           	opt stack 0
  6578  003A22                     ___ftsub:
  6579                           	opt stack 23
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;incstack = 0
  6583  003A22  0100               	movlb	0	; () banked
  6584  003A24  5188               	movf	___ftsub@f2& (0+255),w,b
  6585  003A26  0100               	movlb	0	; () banked
  6586  003A28  1189               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6587  003A2A  0100               	movlb	0	; () banked
  6588  003A2C  118A               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6589  003A2E  B4D8               	btfsc	status,2,c
  6590  003A30  D00A               	goto	l5051
  6591                           
  6592                           ; BSR set to: 0
  6593  003A32  0E00               	movlw	0
  6594  003A34  0100               	movlb	0	; () banked
  6595  003A36  1B88               	xorwf	___ftsub@f2& (0+255),f,b
  6596  003A38  0E00               	movlw	0
  6597  003A3A  0100               	movlb	0	; () banked
  6598  003A3C  1B89               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6599  003A3E  0E80               	movlw	128
  6600  003A40  0100               	movlb	0	; () banked
  6601  003A42  1B8A               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6602  003A44  D000               	goto	l5051
  6603  003A46                     l5051:
  6604                           
  6605                           ; BSR set to: 0
  6606  003A46  C085  F079         	movff	___ftsub@f1,___ftadd@f1
  6607  003A4A  C086  F07A         	movff	___ftsub@f1+1,___ftadd@f1+1
  6608  003A4E  C087  F07B         	movff	___ftsub@f1+2,___ftadd@f1+2
  6609  003A52  C088  F07C         	movff	___ftsub@f2,___ftadd@f2
  6610  003A56  C089  F07D         	movff	___ftsub@f2+1,___ftadd@f2+1
  6611  003A5A  C08A  F07E         	movff	___ftsub@f2+2,___ftadd@f2+2
  6612  003A5E  EC10  F00E         	call	___ftadd	;wreg free
  6613  003A62  C079  F085         	movff	?___ftadd,?___ftsub
  6614  003A66  C07A  F086         	movff	?___ftadd+1,?___ftsub+1
  6615  003A6A  C07B  F087         	movff	?___ftadd+2,?___ftsub+2
  6616  003A6E  0012               	return	
  6617  003A70  0012               	return		;funcret
  6618  003A72                     __end_of___ftsub:
  6619                           	opt stack 0
  6620                           tblptru	equ	0xFF8
  6621                           tblptrh	equ	0xFF7
  6622                           tblptrl	equ	0xFF6
  6623                           tablat	equ	0xFF5
  6624                           prodh	equ	0xFF4
  6625                           prodl	equ	0xFF3
  6626                           intcon	equ	0xFF2
  6627                           postinc0	equ	0xFEE
  6628                           wreg	equ	0xFE8
  6629                           postinc2	equ	0xFDE
  6630                           postdec2	equ	0xFDD
  6631                           fsr2h	equ	0xFDA
  6632                           fsr2l	equ	0xFD9
  6633                           status	equ	0xFD8
  6634                           
  6635 ;; *************** function _Temp_Filter *****************
  6636 ;; Defined at:
  6637 ;;		line 36 in file "Tempeture.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  x               2   37[BANK0 ] int 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;		None               void
  6644 ;; Registers used:
  6645 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6651 ;;      Params:         0       0       0       0       0       0       0
  6652 ;;      Locals:         0       2       0       0       0       0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0
  6654 ;;      Totals:         0       2       0       0       0       0       0
  6655 ;;Total ram usage:        2 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    6
  6658 ;; This function calls:
  6659 ;;		___ftadd
  6660 ;;		___ftmul
  6661 ;;		___wmul
  6662 ;; This function is called by:
  6663 ;;		_Temp_Convert
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           	psect	text20
  6668  0024D2                     __ptext20:
  6669                           	opt stack 0
  6670  0024D2                     _Temp_Filter:
  6671                           	opt stack 23
  6672                           
  6673                           ;Tempeture.c: 39: int x;
  6674                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  6675                           
  6676                           ;incstack = 0
  6677  0024D2  0E00               	movlw	0
  6678  0024D4  0100               	movlb	0	; () banked
  6679  0024D6  6F86               	movwf	(Temp_Filter@x+1)& (0+255),b
  6680  0024D8  0E00               	movlw	0
  6681  0024DA  6F85               	movwf	Temp_Filter@x& (0+255),b
  6682  0024DC                     l4873:
  6683                           
  6684                           ; BSR set to: 0
  6685  0024DC  0100               	movlb	0	; () banked
  6686  0024DE  BF86               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  6687  0024E0  D00A               	goto	l4877
  6688  0024E2  0100               	movlb	0	; () banked
  6689  0024E4  5186               	movf	(Temp_Filter@x+1)& (0+255),w,b
  6690  0024E6  E172               	bnz	l4883
  6691  0024E8  0E0A               	movlw	10
  6692  0024EA  0100               	movlb	0	; () banked
  6693  0024EC  5D85               	subwf	Temp_Filter@x& (0+255),w,b
  6694  0024EE  B0D8               	btfsc	status,0,c
  6695  0024F0  D06D               	goto	l4883
  6696  0024F2  D001               	goto	l4877
  6697                           
  6698                           ; BSR set to: 0
  6699  0024F4  D06B               	goto	l4883
  6700  0024F6                     l4877:
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;Tempeture.c: 41: {
  6704                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  6705  0024F6  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6706  0024FA  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6707  0024FE  0E00               	movlw	0
  6708  002500  6E28               	movwf	___wmul@multiplicand+1,c
  6709  002502  0E03               	movlw	3
  6710  002504  6E27               	movwf	___wmul@multiplicand,c
  6711  002506  ECE8  F01D         	call	___wmul	;wreg free
  6712  00250A  0E96               	movlw	low _Temp_DegF
  6713  00250C  2425               	addwf	?___wmul,w,c
  6714  00250E  6ED9               	movwf	fsr2l,c
  6715  002510  0E01               	movlw	high _Temp_DegF
  6716  002512  2026               	addwfc	?___wmul+1,w,c
  6717  002514  6EDA               	movwf	fsr2h,c
  6718  002516  0E48               	movlw	72
  6719  002518  0100               	movlb	0	; () banked
  6720  00251A  6F63               	movwf	___ftmul@f2& (0+255),b
  6721  00251C  0E61               	movlw	97
  6722  00251E  0100               	movlb	0	; () banked
  6723  002520  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6724  002522  0E3F               	movlw	63
  6725  002524  0100               	movlb	0	; () banked
  6726  002526  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6727  002528  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6728  00252C  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6729  002530  0E00               	movlw	0
  6730  002532  6E28               	movwf	___wmul@multiplicand+1,c
  6731  002534  0E03               	movlw	3
  6732  002536  6E27               	movwf	___wmul@multiplicand,c
  6733  002538  ECE8  F01D         	call	___wmul	;wreg free
  6734  00253C  0ED2               	movlw	low _TmpTemp_DegF
  6735  00253E  2425               	addwf	?___wmul,w,c
  6736  002540  6EE1               	movwf	fsr1l,c
  6737  002542  0E01               	movlw	high _TmpTemp_DegF
  6738  002544  2026               	addwfc	?___wmul+1,w,c
  6739  002546  6EE2               	movwf	fsr1h,c
  6740  002548  CFE6 F060          	movff	postinc1,___ftmul@f1
  6741  00254C  CFE6 F061          	movff	postinc1,___ftmul@f1+1
  6742  002550  CFE5 F062          	movff	postdec1,___ftmul@f1+2
  6743  002554  ECDF  F013         	call	___ftmul	;wreg free
  6744  002558  C060  F079         	movff	?___ftmul,___ftadd@f1
  6745  00255C  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  6746  002560  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  6747  002564  0EC3               	movlw	195
  6748  002566  0100               	movlb	0	; () banked
  6749  002568  6F63               	movwf	___ftmul@f2& (0+255),b
  6750  00256A  0EF5               	movlw	245
  6751  00256C  0100               	movlb	0	; () banked
  6752  00256E  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6753  002570  0E3D               	movlw	61
  6754  002572  0100               	movlb	0	; () banked
  6755  002574  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6756  002576  0E00               	movlw	0
  6757  002578  6E28               	movwf	___wmul@multiplicand+1,c
  6758  00257A  0E03               	movlw	3
  6759  00257C  6E27               	movwf	___wmul@multiplicand,c
  6760  00257E  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6761  002582  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6762  002586  ECE8  F01D         	call	___wmul	;wreg free
  6763  00258A  0E78               	movlw	low _PrevTemp_DegF
  6764  00258C  2425               	addwf	?___wmul,w,c
  6765  00258E  6EE1               	movwf	fsr1l,c
  6766  002590  0E01               	movlw	high _PrevTemp_DegF
  6767  002592  2026               	addwfc	?___wmul+1,w,c
  6768  002594  6EE2               	movwf	fsr1h,c
  6769  002596  CFE6 F060          	movff	postinc1,___ftmul@f1
  6770  00259A  CFE6 F061          	movff	postinc1,___ftmul@f1+1
  6771  00259E  CFE5 F062          	movff	postdec1,___ftmul@f1+2
  6772  0025A2  ECDF  F013         	call	___ftmul	;wreg free
  6773  0025A6  C060  F07C         	movff	?___ftmul,___ftadd@f2
  6774  0025AA  C061  F07D         	movff	?___ftmul+1,___ftadd@f2+1
  6775  0025AE  C062  F07E         	movff	?___ftmul+2,___ftadd@f2+2
  6776  0025B2  EC10  F00E         	call	___ftadd	;wreg free
  6777  0025B6  C079  FFDE         	movff	?___ftadd,postinc2
  6778  0025BA  C07A  FFDE         	movff	?___ftadd+1,postinc2
  6779  0025BE  C07B  FFDE         	movff	?___ftadd+2,postinc2
  6780  0025C2  0100               	movlb	0	; () banked
  6781  0025C4  4B85               	infsnz	Temp_Filter@x& (0+255),f,b
  6782  0025C6  2B86               	incf	(Temp_Filter@x+1)& (0+255),f,b
  6783  0025C8  D789               	goto	l4873
  6784                           
  6785                           ; BSR set to: 0
  6786  0025CA  D000               	goto	l4883
  6787  0025CC                     l4883:
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;Tempeture.c: 43: }
  6791                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  6792  0025CC  0E00               	movlw	0
  6793  0025CE  0100               	movlb	0	; () banked
  6794  0025D0  6F86               	movwf	(Temp_Filter@x+1)& (0+255),b
  6795  0025D2  0E00               	movlw	0
  6796  0025D4  6F85               	movwf	Temp_Filter@x& (0+255),b
  6797  0025D6                     l4885:
  6798                           
  6799                           ; BSR set to: 0
  6800  0025D6  0100               	movlb	0	; () banked
  6801  0025D8  BF86               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  6802  0025DA  D00A               	goto	l4889
  6803  0025DC  0100               	movlb	0	; () banked
  6804  0025DE  5186               	movf	(Temp_Filter@x+1)& (0+255),w,b
  6805  0025E0  E132               	bnz	l368
  6806  0025E2  0E0A               	movlw	10
  6807  0025E4  0100               	movlb	0	; () banked
  6808  0025E6  5D85               	subwf	Temp_Filter@x& (0+255),w,b
  6809  0025E8  B0D8               	btfsc	status,0,c
  6810  0025EA  0012               	return	
  6811  0025EC  D001               	goto	l4889
  6812                           
  6813                           ; BSR set to: 0
  6814  0025EE  0012               	return	
  6815  0025F0                     l4889:
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;Tempeture.c: 45: {
  6819                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  6820  0025F0  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6821  0025F4  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6822  0025F8  0E00               	movlw	0
  6823  0025FA  6E28               	movwf	___wmul@multiplicand+1,c
  6824  0025FC  0E03               	movlw	3
  6825  0025FE  6E27               	movwf	___wmul@multiplicand,c
  6826  002600  ECE8  F01D         	call	___wmul	;wreg free
  6827  002604  0E96               	movlw	low _Temp_DegF
  6828  002606  2425               	addwf	?___wmul,w,c
  6829  002608  6ED9               	movwf	fsr2l,c
  6830  00260A  0E01               	movlw	high _Temp_DegF
  6831  00260C  2026               	addwfc	?___wmul+1,w,c
  6832  00260E  6EDA               	movwf	fsr2h,c
  6833  002610  C085  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6834  002614  C086  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6835  002618  0E00               	movlw	0
  6836  00261A  6E28               	movwf	___wmul@multiplicand+1,c
  6837  00261C  0E03               	movlw	3
  6838  00261E  6E27               	movwf	___wmul@multiplicand,c
  6839  002620  ECE8  F01D         	call	___wmul	;wreg free
  6840  002624  0E78               	movlw	low _PrevTemp_DegF
  6841  002626  2425               	addwf	?___wmul,w,c
  6842  002628  6EE1               	movwf	fsr1l,c
  6843  00262A  0E01               	movlw	high _PrevTemp_DegF
  6844  00262C  2026               	addwfc	?___wmul+1,w,c
  6845  00262E  6EE2               	movwf	fsr1h,c
  6846  002630  CFDE FFE6          	movff	postinc2,postinc1
  6847  002634  CFDE FFE6          	movff	postinc2,postinc1
  6848  002638  CFDE FFE6          	movff	postinc2,postinc1
  6849  00263C  0100               	movlb	0	; () banked
  6850  00263E  4B85               	infsnz	Temp_Filter@x& (0+255),f,b
  6851  002640  2B86               	incf	(Temp_Filter@x+1)& (0+255),f,b
  6852  002642  D7C9               	goto	l4885
  6853                           
  6854                           ; BSR set to: 0
  6855  002644  0012               	return	
  6856  002646                     l368:
  6857                           
  6858                           ; BSR set to: 0
  6859  002646  0012               	return		;funcret
  6860  002648                     __end_of_Temp_Filter:
  6861                           	opt stack 0
  6862                           tblptru	equ	0xFF8
  6863                           tblptrh	equ	0xFF7
  6864                           tblptrl	equ	0xFF6
  6865                           tablat	equ	0xFF5
  6866                           prodh	equ	0xFF4
  6867                           prodl	equ	0xFF3
  6868                           intcon	equ	0xFF2
  6869                           postinc0	equ	0xFEE
  6870                           wreg	equ	0xFE8
  6871                           postinc1	equ	0xFE6
  6872                           postdec1	equ	0xFE5
  6873                           fsr1h	equ	0xFE2
  6874                           fsr1l	equ	0xFE1
  6875                           postinc2	equ	0xFDE
  6876                           postdec2	equ	0xFDD
  6877                           fsr2h	equ	0xFDA
  6878                           fsr2l	equ	0xFD9
  6879                           status	equ	0xFD8
  6880                           
  6881 ;; *************** function _SYSTEM_Initialize *****************
  6882 ;; Defined at:
  6883 ;;		line 112 in file "mcc_generated_files/mcc.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;		None
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;		None
  6888 ;; Return value:  Size  Location     Type
  6889 ;;		None               void
  6890 ;; Registers used:
  6891 ;;		wreg, status,2, cstack
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6897 ;;      Params:         0       0       0       0       0       0       0
  6898 ;;      Locals:         0       0       0       0       0       0       0
  6899 ;;      Temps:          0       0       0       0       0       0       0
  6900 ;;      Totals:         0       0       0       0       0       0       0
  6901 ;;Total ram usage:        0 bytes
  6902 ;; Hardware stack levels used:    1
  6903 ;; Hardware stack levels required when called:    6
  6904 ;; This function calls:
  6905 ;;		_ADC_Initialize
  6906 ;;		_INTERRUPT_Initialize
  6907 ;;		_OSCILLATOR_Initialize
  6908 ;;		_PIN_MANAGER_Initialize
  6909 ;;		_TMR1_Initialize
  6910 ;; This function is called by:
  6911 ;;		_main
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           	psect	text21
  6916  003D00                     __ptext21:
  6917                           	opt stack 0
  6918  003D00                     _SYSTEM_Initialize:
  6919                           	opt stack 24
  6920                           
  6921                           ;mcc.c: 114: OSCILLATOR_Initialize();
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;incstack = 0
  6925  003D00  EC96  F01E         	call	_OSCILLATOR_Initialize	;wreg free
  6926                           
  6927                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  6928  003D04  EC39  F01D         	call	_PIN_MANAGER_Initialize	;wreg free
  6929                           
  6930                           ;mcc.c: 116: INTERRUPT_Initialize();
  6931  003D08  ECA4  F01E         	call	_INTERRUPT_Initialize	;wreg free
  6932                           
  6933                           ;mcc.c: 117: ADC_Initialize();
  6934  003D0C  EC50  F01E         	call	_ADC_Initialize	;wreg free
  6935                           
  6936                           ;mcc.c: 119: TMR1_Initialize();
  6937  003D10  EC32  F01E         	call	_TMR1_Initialize	;wreg free
  6938  003D14  0012               	return		;funcret
  6939  003D16                     __end_of_SYSTEM_Initialize:
  6940                           	opt stack 0
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           intcon	equ	0xFF2
  6948                           postinc0	equ	0xFEE
  6949                           wreg	equ	0xFE8
  6950                           postinc1	equ	0xFE6
  6951                           postdec1	equ	0xFE5
  6952                           fsr1h	equ	0xFE2
  6953                           fsr1l	equ	0xFE1
  6954                           postinc2	equ	0xFDE
  6955                           postdec2	equ	0xFDD
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           
  6960 ;; *************** function _TMR1_Initialize *****************
  6961 ;; Defined at:
  6962 ;;		line 23 in file "mcc_generated_files/tmr1.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;		None               void
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6976 ;;      Params:         0       0       0       0       0       0       0
  6977 ;;      Locals:         0       0       0       0       0       0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0
  6979 ;;      Totals:         0       0       0       0       0       0       0
  6980 ;;Total ram usage:        0 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    5
  6983 ;; This function calls:
  6984 ;;		_TMR1_StartTimer
  6985 ;; This function is called by:
  6986 ;;		_SYSTEM_Initialize
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text22
  6991  003C64                     __ptext22:
  6992                           	opt stack 0
  6993  003C64                     _TMR1_Initialize:
  6994                           	opt stack 24
  6995                           
  6996                           ;tmr1.c: 28: T1CON = 0x34;
  6997                           
  6998                           ;incstack = 0
  6999  003C64  0E34               	movlw	52
  7000  003C66  6ECD               	movwf	4045,c	;volatile
  7001                           
  7002                           ;tmr1.c: 31: T1GCON = 0x00;
  7003  003C68  0E00               	movlw	0
  7004  003C6A  6ECC               	movwf	4044,c	;volatile
  7005                           
  7006                           ;tmr1.c: 34: TMR1H = 0x0B;
  7007  003C6C  0E0B               	movlw	11
  7008  003C6E  6ECF               	movwf	4047,c	;volatile
  7009                           
  7010                           ;tmr1.c: 37: TMR1L = 0xDC;
  7011  003C70  0EDC               	movlw	220
  7012  003C72  6ECE               	movwf	4046,c	;volatile
  7013                           
  7014                           ;tmr1.c: 40: timer1ReloadVal=TMR1;
  7015  003C74  CFCE F048          	movff	4046,_timer1ReloadVal	;volatile
  7016  003C78  CFCF F049          	movff	4047,_timer1ReloadVal+1	;volatile
  7017                           
  7018                           ;tmr1.c: 43: PIR1bits.TMR1IF = 0;
  7019  003C7C  909E               	bcf	3998,0,c	;volatile
  7020                           
  7021                           ;tmr1.c: 46: PIE1bits.TMR1IE = 1;
  7022  003C7E  809D               	bsf	3997,0,c	;volatile
  7023                           
  7024                           ;tmr1.c: 49: TMR1_StartTimer();
  7025  003C80  ECAA  F01E         	call	_TMR1_StartTimer	;wreg free
  7026  003C84  0012               	return		;funcret
  7027  003C86                     __end_of_TMR1_Initialize:
  7028                           	opt stack 0
  7029                           tblptru	equ	0xFF8
  7030                           tblptrh	equ	0xFF7
  7031                           tblptrl	equ	0xFF6
  7032                           tablat	equ	0xFF5
  7033                           prodh	equ	0xFF4
  7034                           prodl	equ	0xFF3
  7035                           intcon	equ	0xFF2
  7036                           postinc0	equ	0xFEE
  7037                           wreg	equ	0xFE8
  7038                           postinc1	equ	0xFE6
  7039                           postdec1	equ	0xFE5
  7040                           fsr1h	equ	0xFE2
  7041                           fsr1l	equ	0xFE1
  7042                           postinc2	equ	0xFDE
  7043                           postdec2	equ	0xFDD
  7044                           fsr2h	equ	0xFDA
  7045                           fsr2l	equ	0xFD9
  7046                           status	equ	0xFD8
  7047                           
  7048 ;; *************** function _TMR1_StartTimer *****************
  7049 ;; Defined at:
  7050 ;;		line 52 in file "mcc_generated_files/tmr1.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;		None
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;		None
  7055 ;; Return value:  Size  Location     Type
  7056 ;;		None               void
  7057 ;; Registers used:
  7058 ;;		None
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7064 ;;      Params:         0       0       0       0       0       0       0
  7065 ;;      Locals:         0       0       0       0       0       0       0
  7066 ;;      Temps:          0       0       0       0       0       0       0
  7067 ;;      Totals:         0       0       0       0       0       0       0
  7068 ;;Total ram usage:        0 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    4
  7071 ;; This function calls:
  7072 ;;		Nothing
  7073 ;; This function is called by:
  7074 ;;		_TMR1_Initialize
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           	psect	text23
  7079  003D54                     __ptext23:
  7080                           	opt stack 0
  7081  003D54                     _TMR1_StartTimer:
  7082                           	opt stack 24
  7083                           
  7084                           ;tmr1.c: 55: T1CONbits.TMR1ON = 1;
  7085                           
  7086                           ;incstack = 0
  7087  003D54  80CD               	bsf	4045,0,c	;volatile
  7088  003D56  0012               	return		;funcret
  7089  003D58                     __end_of_TMR1_StartTimer:
  7090                           	opt stack 0
  7091                           tblptru	equ	0xFF8
  7092                           tblptrh	equ	0xFF7
  7093                           tblptrl	equ	0xFF6
  7094                           tablat	equ	0xFF5
  7095                           prodh	equ	0xFF4
  7096                           prodl	equ	0xFF3
  7097                           intcon	equ	0xFF2
  7098                           postinc0	equ	0xFEE
  7099                           wreg	equ	0xFE8
  7100                           postinc1	equ	0xFE6
  7101                           postdec1	equ	0xFE5
  7102                           fsr1h	equ	0xFE2
  7103                           fsr1l	equ	0xFE1
  7104                           postinc2	equ	0xFDE
  7105                           postdec2	equ	0xFDD
  7106                           fsr2h	equ	0xFDA
  7107                           fsr2l	equ	0xFD9
  7108                           status	equ	0xFD8
  7109                           
  7110 ;; *************** function _PIN_MANAGER_Initialize *****************
  7111 ;; Defined at:
  7112 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;		None
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;		None
  7117 ;; Return value:  Size  Location     Type
  7118 ;;		None               void
  7119 ;; Registers used:
  7120 ;;		wreg, status,2
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7126 ;;      Params:         0       0       0       0       0       0       0
  7127 ;;      Locals:         0       0       0       0       0       0       0
  7128 ;;      Temps:          0       0       0       0       0       0       0
  7129 ;;      Totals:         0       0       0       0       0       0       0
  7130 ;;Total ram usage:        0 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:    4
  7133 ;; This function calls:
  7134 ;;		Nothing
  7135 ;; This function is called by:
  7136 ;;		_SYSTEM_Initialize
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text24
  7141  003A72                     __ptext24:
  7142                           	opt stack 0
  7143  003A72                     _PIN_MANAGER_Initialize:
  7144                           	opt stack 25
  7145                           
  7146                           ;pin_manager.c: 52: LATA = 0x00;
  7147                           
  7148                           ;incstack = 0
  7149  003A72  0E00               	movlw	0
  7150  003A74  6E89               	movwf	3977,c	;volatile
  7151                           
  7152                           ;pin_manager.c: 53: TRISA = 0x2F;
  7153  003A76  0E2F               	movlw	47
  7154  003A78  6E92               	movwf	3986,c	;volatile
  7155                           
  7156                           ;pin_manager.c: 54: ANSELA = 0x2F;
  7157  003A7A  0E2F               	movlw	47
  7158  003A7C  010F               	movlb	15	; () banked
  7159  003A7E  6F38               	movwf	56,b	;volatile
  7160                           
  7161                           ;pin_manager.c: 56: LATB = 0x00;
  7162  003A80  0E00               	movlw	0
  7163  003A82  6E8A               	movwf	3978,c	;volatile
  7164                           
  7165                           ;pin_manager.c: 57: TRISB = 0xF8;
  7166  003A84  0EF8               	movlw	248
  7167  003A86  6E93               	movwf	3987,c	;volatile
  7168                           
  7169                           ;pin_manager.c: 58: ANSELB = 0x38;
  7170  003A88  0E38               	movlw	56
  7171  003A8A  010F               	movlb	15	; () banked
  7172  003A8C  6F39               	movwf	57,b	;volatile
  7173                           
  7174                           ;pin_manager.c: 59: WPUB = 0x00;
  7175  003A8E  0E00               	movlw	0
  7176  003A90  6E61               	movwf	3937,c	;volatile
  7177                           
  7178                           ;pin_manager.c: 61: LATC = 0x00;
  7179  003A92  0E00               	movlw	0
  7180  003A94  6E8B               	movwf	3979,c	;volatile
  7181                           
  7182                           ;pin_manager.c: 62: TRISC = 0xD6;
  7183  003A96  0ED6               	movlw	214
  7184  003A98  6E94               	movwf	3988,c	;volatile
  7185                           
  7186                           ;pin_manager.c: 63: ANSELC = 0x14;
  7187  003A9A  0E14               	movlw	20
  7188  003A9C  010F               	movlb	15	; () banked
  7189  003A9E  6F3A               	movwf	58,b	;volatile
  7190                           
  7191                           ;pin_manager.c: 65: LATD = 0x00;
  7192  003AA0  0E00               	movlw	0
  7193  003AA2  6E8C               	movwf	3980,c	;volatile
  7194                           
  7195                           ;pin_manager.c: 66: TRISD = 0x03;
  7196  003AA4  0E03               	movlw	3
  7197  003AA6  6E95               	movwf	3989,c	;volatile
  7198                           
  7199                           ;pin_manager.c: 67: ANSELD = 0x03;
  7200  003AA8  0E03               	movlw	3
  7201  003AAA  010F               	movlb	15	; () banked
  7202  003AAC  6F3B               	movwf	59,b	;volatile
  7203                           
  7204                           ;pin_manager.c: 69: LATE = 0x00;
  7205  003AAE  0E00               	movlw	0
  7206  003AB0  6E8D               	movwf	3981,c	;volatile
  7207                           
  7208                           ;pin_manager.c: 70: TRISE = 0x07;
  7209  003AB2  0E07               	movlw	7
  7210  003AB4  6E96               	movwf	3990,c	;volatile
  7211                           
  7212                           ;pin_manager.c: 71: ANSELE = 0x07;
  7213  003AB6  0E07               	movlw	7
  7214  003AB8  010F               	movlb	15	; () banked
  7215  003ABA  6F3C               	movwf	60,b	;volatile
  7216                           
  7217                           ; BSR set to: 15
  7218                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  7219  003ABC  8EF1               	bsf	intcon2,7,c	;volatile
  7220                           
  7221                           ; BSR set to: 15
  7222  003ABE  0012               	return		;funcret
  7223  003AC0                     __end_of_PIN_MANAGER_Initialize:
  7224                           	opt stack 0
  7225                           tblptru	equ	0xFF8
  7226                           tblptrh	equ	0xFF7
  7227                           tblptrl	equ	0xFF6
  7228                           tablat	equ	0xFF5
  7229                           prodh	equ	0xFF4
  7230                           prodl	equ	0xFF3
  7231                           intcon	equ	0xFF2
  7232                           intcon2	equ	0xFF1
  7233                           postinc0	equ	0xFEE
  7234                           wreg	equ	0xFE8
  7235                           postinc1	equ	0xFE6
  7236                           postdec1	equ	0xFE5
  7237                           fsr1h	equ	0xFE2
  7238                           fsr1l	equ	0xFE1
  7239                           postinc2	equ	0xFDE
  7240                           postdec2	equ	0xFDD
  7241                           fsr2h	equ	0xFDA
  7242                           fsr2l	equ	0xFD9
  7243                           status	equ	0xFD8
  7244                           
  7245 ;; *************** function _OSCILLATOR_Initialize *****************
  7246 ;; Defined at:
  7247 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7248 ;; Parameters:    Size  Location     Type
  7249 ;;		None
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;		None
  7252 ;; Return value:  Size  Location     Type
  7253 ;;		None               void
  7254 ;; Registers used:
  7255 ;;		wreg, status,2
  7256 ;; Tracked objects:
  7257 ;;		On entry : 0/0
  7258 ;;		On exit  : 0/0
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7261 ;;      Params:         0       0       0       0       0       0       0
  7262 ;;      Locals:         0       0       0       0       0       0       0
  7263 ;;      Temps:          0       0       0       0       0       0       0
  7264 ;;      Totals:         0       0       0       0       0       0       0
  7265 ;;Total ram usage:        0 bytes
  7266 ;; Hardware stack levels used:    1
  7267 ;; Hardware stack levels required when called:    4
  7268 ;; This function calls:
  7269 ;;		Nothing
  7270 ;; This function is called by:
  7271 ;;		_SYSTEM_Initialize
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           	psect	text25
  7276  003D2C                     __ptext25:
  7277                           	opt stack 0
  7278  003D2C                     _OSCILLATOR_Initialize:
  7279                           	opt stack 25
  7280                           
  7281                           ;mcc.c: 125: OSCCON = 0x62;
  7282                           
  7283                           ; BSR set to: 15
  7284                           ;incstack = 0
  7285  003D2C  0E62               	movlw	98
  7286  003D2E  6ED3               	movwf	4051,c	;volatile
  7287                           
  7288                           ;mcc.c: 127: OSCCON2 = 0x04;
  7289  003D30  0E04               	movlw	4
  7290  003D32  6ED2               	movwf	4050,c	;volatile
  7291                           
  7292                           ;mcc.c: 129: OSCTUNE = 0x00;
  7293  003D34  0E00               	movlw	0
  7294  003D36  6E9B               	movwf	3995,c	;volatile
  7295  003D38  0012               	return		;funcret
  7296  003D3A                     __end_of_OSCILLATOR_Initialize:
  7297                           	opt stack 0
  7298                           tblptru	equ	0xFF8
  7299                           tblptrh	equ	0xFF7
  7300                           tblptrl	equ	0xFF6
  7301                           tablat	equ	0xFF5
  7302                           prodh	equ	0xFF4
  7303                           prodl	equ	0xFF3
  7304                           intcon	equ	0xFF2
  7305                           intcon2	equ	0xFF1
  7306                           postinc0	equ	0xFEE
  7307                           wreg	equ	0xFE8
  7308                           postinc1	equ	0xFE6
  7309                           postdec1	equ	0xFE5
  7310                           fsr1h	equ	0xFE2
  7311                           fsr1l	equ	0xFE1
  7312                           postinc2	equ	0xFDE
  7313                           postdec2	equ	0xFDD
  7314                           fsr2h	equ	0xFDA
  7315                           fsr2l	equ	0xFD9
  7316                           status	equ	0xFD8
  7317                           
  7318 ;; *************** function _INTERRUPT_Initialize *****************
  7319 ;; Defined at:
  7320 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;		None
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;		None
  7325 ;; Return value:  Size  Location     Type
  7326 ;;		None               void
  7327 ;; Registers used:
  7328 ;;		None
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7334 ;;      Params:         0       0       0       0       0       0       0
  7335 ;;      Locals:         0       0       0       0       0       0       0
  7336 ;;      Temps:          0       0       0       0       0       0       0
  7337 ;;      Totals:         0       0       0       0       0       0       0
  7338 ;;Total ram usage:        0 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:    4
  7341 ;; This function calls:
  7342 ;;		Nothing
  7343 ;; This function is called by:
  7344 ;;		_SYSTEM_Initialize
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           	psect	text26
  7349  003D48                     __ptext26:
  7350                           	opt stack 0
  7351  003D48                     _INTERRUPT_Initialize:
  7352                           	opt stack 25
  7353                           
  7354                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  7355                           
  7356                           ;incstack = 0
  7357  003D48  9ED0               	bcf	4048,7,c	;volatile
  7358                           
  7359                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  7360  003D4A  9A9F               	bcf	3999,5,c	;volatile
  7361                           
  7362                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  7363  003D4C  9C9F               	bcf	3999,6,c	;volatile
  7364                           
  7365                           ;interrupt_manager.c: 64: IPR1bits.TX1IP = 0;
  7366  003D4E  989F               	bcf	3999,4,c	;volatile
  7367                           
  7368                           ;interrupt_manager.c: 66: IPR1bits.TMR1IP = 0;
  7369  003D50  909F               	bcf	3999,0,c	;volatile
  7370  003D52  0012               	return		;funcret
  7371  003D54                     __end_of_INTERRUPT_Initialize:
  7372                           	opt stack 0
  7373                           tblptru	equ	0xFF8
  7374                           tblptrh	equ	0xFF7
  7375                           tblptrl	equ	0xFF6
  7376                           tablat	equ	0xFF5
  7377                           prodh	equ	0xFF4
  7378                           prodl	equ	0xFF3
  7379                           intcon	equ	0xFF2
  7380                           intcon2	equ	0xFF1
  7381                           postinc0	equ	0xFEE
  7382                           wreg	equ	0xFE8
  7383                           postinc1	equ	0xFE6
  7384                           postdec1	equ	0xFE5
  7385                           fsr1h	equ	0xFE2
  7386                           fsr1l	equ	0xFE1
  7387                           postinc2	equ	0xFDE
  7388                           postdec2	equ	0xFDD
  7389                           fsr2h	equ	0xFDA
  7390                           fsr2l	equ	0xFD9
  7391                           status	equ	0xFD8
  7392                           
  7393 ;; *************** function _ADC_Initialize *****************
  7394 ;; Defined at:
  7395 ;;		line 16 in file "mcc_generated_files/adc.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;		None
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;		None
  7400 ;; Return value:  Size  Location     Type
  7401 ;;		None               void
  7402 ;; Registers used:
  7403 ;;		wreg, status,2
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7409 ;;      Params:         0       0       0       0       0       0       0
  7410 ;;      Locals:         0       0       0       0       0       0       0
  7411 ;;      Temps:          0       0       0       0       0       0       0
  7412 ;;      Totals:         0       0       0       0       0       0       0
  7413 ;;Total ram usage:        0 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    4
  7416 ;; This function calls:
  7417 ;;		Nothing
  7418 ;; This function is called by:
  7419 ;;		_SYSTEM_Initialize
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           	psect	text27
  7424  003CA0                     __ptext27:
  7425                           	opt stack 0
  7426  003CA0                     _ADC_Initialize:
  7427                           	opt stack 25
  7428                           
  7429                           ;adc.c: 21: ADCON0 = 0x01;
  7430                           
  7431                           ;incstack = 0
  7432  003CA0  0E01               	movlw	1
  7433  003CA2  6EC2               	movwf	4034,c	;volatile
  7434                           
  7435                           ;adc.c: 24: ADCON1 = 0x80;
  7436  003CA4  0E80               	movlw	128
  7437  003CA6  6EC1               	movwf	4033,c	;volatile
  7438                           
  7439                           ;adc.c: 27: ADCON2 = 0xA9;
  7440  003CA8  0EA9               	movlw	169
  7441  003CAA  6EC0               	movwf	4032,c	;volatile
  7442                           
  7443                           ;adc.c: 30: ADRESL = 0x00;
  7444  003CAC  0E00               	movlw	0
  7445  003CAE  6EC3               	movwf	4035,c	;volatile
  7446                           
  7447                           ;adc.c: 33: ADRESH = 0x00;
  7448  003CB0  0E00               	movlw	0
  7449  003CB2  6EC4               	movwf	4036,c	;volatile
  7450                           
  7451                           ;adc.c: 36: PIE1bits.ADIE = 1;
  7452  003CB4  8C9D               	bsf	3997,6,c	;volatile
  7453  003CB6  0012               	return		;funcret
  7454  003CB8                     __end_of_ADC_Initialize:
  7455                           	opt stack 0
  7456                           tblptru	equ	0xFF8
  7457                           tblptrh	equ	0xFF7
  7458                           tblptrl	equ	0xFF6
  7459                           tablat	equ	0xFF5
  7460                           prodh	equ	0xFF4
  7461                           prodl	equ	0xFF3
  7462                           intcon	equ	0xFF2
  7463                           intcon2	equ	0xFF1
  7464                           postinc0	equ	0xFEE
  7465                           wreg	equ	0xFE8
  7466                           postinc1	equ	0xFE6
  7467                           postdec1	equ	0xFE5
  7468                           fsr1h	equ	0xFE2
  7469                           fsr1l	equ	0xFE1
  7470                           postinc2	equ	0xFDE
  7471                           postdec2	equ	0xFDD
  7472                           fsr2h	equ	0xFDA
  7473                           fsr2l	equ	0xFD9
  7474                           status	equ	0xFD8
  7475                           
  7476 ;; *************** function _RunBypas *****************
  7477 ;; Defined at:
  7478 ;;		line 84 in file "Bypass.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;		None
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;  batvolt         3   53[COMRAM] float 
  7483 ;;  i               2   56[COMRAM] int 
  7484 ;;  cellbyp         2   51[COMRAM] int 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  2  398[None  ] int 
  7487 ;; Registers used:
  7488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7494 ;;      Params:         0       0       0       0       0       0       0
  7495 ;;      Locals:         7       0       0       0       0       0       0
  7496 ;;      Temps:          0       0       0       0       0       0       0
  7497 ;;      Totals:         7       0       0       0       0       0       0
  7498 ;;Total ram usage:        7 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    6
  7501 ;; This function calls:
  7502 ;;		_Battery_Get
  7503 ;;		_SetBypas
  7504 ;;		___ftge
  7505 ;; This function is called by:
  7506 ;;		_main
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text28
  7511  003136                     __ptext28:
  7512                           	opt stack 0
  7513  003136                     _RunBypas:
  7514                           	opt stack 24
  7515                           
  7516                           ;Bypass.c: 86: int cellbyp = 0;
  7517                           
  7518                           ;incstack = 0
  7519  003136  0E00               	movlw	0
  7520  003138  6E35               	movwf	RunBypas@cellbyp+1,c
  7521  00313A  0E00               	movlw	0
  7522  00313C  6E34               	movwf	RunBypas@cellbyp,c
  7523                           
  7524                           ;Bypass.c: 87: int i = 0;
  7525  00313E  0E00               	movlw	0
  7526  003140  6E3A               	movwf	RunBypas@i+1,c
  7527  003142  0E00               	movlw	0
  7528  003144  6E39               	movwf	RunBypas@i,c
  7529                           
  7530                           ;Bypass.c: 88: float batvolt = 0;
  7531  003146  0E00               	movlw	0
  7532  003148  6E36               	movwf	RunBypas@batvolt,c
  7533  00314A  0E00               	movlw	0
  7534  00314C  6E37               	movwf	RunBypas@batvolt+1,c
  7535  00314E  0E00               	movlw	0
  7536  003150  6E38               	movwf	RunBypas@batvolt+2,c
  7537                           
  7538                           ;Bypass.c: 90: for(i = 0; i<6;i++)
  7539  003152  0E00               	movlw	0
  7540  003154  6E3A               	movwf	RunBypas@i+1,c
  7541  003156  0E00               	movlw	0
  7542  003158  6E39               	movwf	RunBypas@i,c
  7543  00315A                     l5141:
  7544  00315A  BE3A               	btfsc	RunBypas@i+1,7,c
  7545  00315C  D008               	goto	l5145
  7546  00315E  503A               	movf	RunBypas@i+1,w,c
  7547  003160  E154               	bnz	l560
  7548  003162  0E06               	movlw	6
  7549  003164  5C39               	subwf	RunBypas@i,w,c
  7550  003166  B0D8               	btfsc	status,0,c
  7551  003168  0012               	return	
  7552  00316A  D001               	goto	l5145
  7553  00316C  0012               	return	
  7554  00316E                     l5145:
  7555                           
  7556                           ;Bypass.c: 91: {
  7557                           ;Bypass.c: 92: batvolt = Battery_Get(i);
  7558  00316E  C039  F02B         	movff	RunBypas@i,Battery_Get@channelnum
  7559  003172  C03A  F02C         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  7560  003176  ECD0  F01D         	call	_Battery_Get	;wreg free
  7561  00317A  C02B  F036         	movff	?_Battery_Get,RunBypas@batvolt
  7562  00317E  C02C  F037         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  7563  003182  C02D  F038         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  7564                           
  7565                           ;Bypass.c: 94: if(batvolt >= 4.18)
  7566  003186  C036  F02B         	movff	RunBypas@batvolt,___ftge@ff1
  7567  00318A  C037  F02C         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  7568  00318E  C038  F02D         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  7569  003192  0EC3               	movlw	195
  7570  003194  6E2E               	movwf	___ftge@ff2,c
  7571  003196  0E85               	movlw	133
  7572  003198  6E2F               	movwf	___ftge@ff2+1,c
  7573  00319A  0E40               	movlw	64
  7574  00319C  6E30               	movwf	___ftge@ff2+2,c
  7575  00319E  EC2A  F01B         	call	___ftge	;wreg free
  7576  0031A2  A0D8               	btfss	status,0,c
  7577  0031A4  D00F               	goto	l5153
  7578                           
  7579                           ;Bypass.c: 95: {
  7580                           ;Bypass.c: 96: SetBypas(i,1);
  7581  0031A6  C039  F017         	movff	RunBypas@i,SetBypas@pin
  7582  0031AA  C03A  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  7583  0031AE  0E00               	movlw	0
  7584  0031B0  6E1A               	movwf	SetBypas@state+1,c
  7585  0031B2  0E01               	movlw	1
  7586  0031B4  6E19               	movwf	SetBypas@state,c
  7587  0031B6  EC2E  F01A         	call	_SetBypas	;wreg free
  7588                           
  7589                           ;Bypass.c: 97: cellbyp = 1;
  7590  0031BA  0E00               	movlw	0
  7591  0031BC  6E35               	movwf	RunBypas@cellbyp+1,c
  7592  0031BE  0E01               	movlw	1
  7593  0031C0  6E34               	movwf	RunBypas@cellbyp,c
  7594  0031C2  D000               	goto	l5153
  7595  0031C4                     l5153:
  7596                           
  7597                           ;Bypass.c: 98: }
  7598                           ;Bypass.c: 99: if(batvolt <= 4.15)
  7599  0031C4  0ECD               	movlw	205
  7600  0031C6  6E2B               	movwf	___ftge@ff1,c
  7601  0031C8  0E84               	movlw	132
  7602  0031CA  6E2C               	movwf	___ftge@ff1+1,c
  7603  0031CC  0E40               	movlw	64
  7604  0031CE  6E2D               	movwf	___ftge@ff1+2,c
  7605  0031D0  C036  F02E         	movff	RunBypas@batvolt,___ftge@ff2
  7606  0031D4  C037  F02F         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  7607  0031D8  C038  F030         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  7608  0031DC  EC2A  F01B         	call	___ftge	;wreg free
  7609  0031E0  A0D8               	btfss	status,0,c
  7610  0031E2  D00F               	goto	l5159
  7611                           
  7612                           ;Bypass.c: 100: {
  7613                           ;Bypass.c: 101: SetBypas(i,0);
  7614  0031E4  C039  F017         	movff	RunBypas@i,SetBypas@pin
  7615  0031E8  C03A  F018         	movff	RunBypas@i+1,SetBypas@pin+1
  7616  0031EC  0E00               	movlw	0
  7617  0031EE  6E1A               	movwf	SetBypas@state+1,c
  7618  0031F0  0E00               	movlw	0
  7619  0031F2  6E19               	movwf	SetBypas@state,c
  7620  0031F4  EC2E  F01A         	call	_SetBypas	;wreg free
  7621                           
  7622                           ;Bypass.c: 102: cellbyp = 1;
  7623  0031F8  0E00               	movlw	0
  7624  0031FA  6E35               	movwf	RunBypas@cellbyp+1,c
  7625  0031FC  0E01               	movlw	1
  7626  0031FE  6E34               	movwf	RunBypas@cellbyp,c
  7627  003200  D000               	goto	l5159
  7628  003202                     l5159:
  7629  003202  4A39               	infsnz	RunBypas@i,f,c
  7630  003204  2A3A               	incf	RunBypas@i+1,f,c
  7631  003206  D7A9               	goto	l5141
  7632  003208  0012               	return	
  7633  00320A                     l560:
  7634  00320A  0012               	return		;funcret
  7635  00320C                     __end_of_RunBypas:
  7636                           	opt stack 0
  7637                           tblptru	equ	0xFF8
  7638                           tblptrh	equ	0xFF7
  7639                           tblptrl	equ	0xFF6
  7640                           tablat	equ	0xFF5
  7641                           prodh	equ	0xFF4
  7642                           prodl	equ	0xFF3
  7643                           intcon	equ	0xFF2
  7644                           intcon2	equ	0xFF1
  7645                           postinc0	equ	0xFEE
  7646                           wreg	equ	0xFE8
  7647                           postinc1	equ	0xFE6
  7648                           postdec1	equ	0xFE5
  7649                           fsr1h	equ	0xFE2
  7650                           fsr1l	equ	0xFE1
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function _SetBypas *****************
  7658 ;; Defined at:
  7659 ;;		line 8 in file "Bypass.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  pin             2   22[COMRAM] int 
  7662 ;;  state           2   24[COMRAM] int 
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;		None
  7665 ;; Return value:  Size  Location     Type
  7666 ;;                  2   22[COMRAM] int 
  7667 ;; Registers used:
  7668 ;;		wreg, status,2, status,0
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 0/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7674 ;;      Params:         4       0       0       0       0       0       0
  7675 ;;      Locals:         0       0       0       0       0       0       0
  7676 ;;      Temps:          2       0       0       0       0       0       0
  7677 ;;      Totals:         6       0       0       0       0       0       0
  7678 ;;Total ram usage:        6 bytes
  7679 ;; Hardware stack levels used:    1
  7680 ;; Hardware stack levels required when called:    4
  7681 ;; This function calls:
  7682 ;;		Nothing
  7683 ;; This function is called by:
  7684 ;;		_RunBypas
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           	psect	text29
  7689  00345C                     __ptext29:
  7690                           	opt stack 0
  7691  00345C                     _SetBypas:
  7692                           	opt stack 25
  7693                           
  7694                           ;Bypass.c: 10: switch (pin) {
  7695                           
  7696                           ;incstack = 0
  7697  00345C  D038               	goto	l3487
  7698  00345E                     l3471:
  7699                           
  7700                           ;Bypass.c: 12: if (state)
  7701  00345E  5019               	movf	SetBypas@state,w,c
  7702  003460  101A               	iorwf	SetBypas@state+1,w,c
  7703  003462  B4D8               	btfsc	status,2,c
  7704  003464  D002               	goto	l508
  7705                           
  7706                           ;Bypass.c: 13: {
  7707                           ;Bypass.c: 14: do { LATD4 = 1; } while(0);
  7708  003466  888C               	bsf	3980,4,c	;volatile
  7709                           
  7710                           ;Bypass.c: 15: }
  7711  003468  0012               	return	
  7712  00346A                     l508:
  7713  00346A  988C               	bcf	3980,4,c	;volatile
  7714                           
  7715                           ;Bypass.c: 19: }
  7716                           ;Bypass.c: 20: break;
  7717  00346C  0012               	return	
  7718  00346E                     l3473:
  7719                           
  7720                           ;Bypass.c: 22: if (state)
  7721  00346E  5019               	movf	SetBypas@state,w,c
  7722  003470  101A               	iorwf	SetBypas@state+1,w,c
  7723  003472  B4D8               	btfsc	status,2,c
  7724  003474  D002               	goto	l516
  7725                           
  7726                           ;Bypass.c: 23: {
  7727                           ;Bypass.c: 24: do { LATD5 = 1; } while(0);
  7728  003476  8A8C               	bsf	3980,5,c	;volatile
  7729                           
  7730                           ;Bypass.c: 25: }
  7731  003478  0012               	return	
  7732  00347A                     l516:
  7733  00347A  9A8C               	bcf	3980,5,c	;volatile
  7734                           
  7735                           ;Bypass.c: 29: }
  7736                           ;Bypass.c: 30: break;
  7737  00347C  0012               	return	
  7738  00347E                     l3475:
  7739                           
  7740                           ;Bypass.c: 32: if (state)
  7741  00347E  5019               	movf	SetBypas@state,w,c
  7742  003480  101A               	iorwf	SetBypas@state+1,w,c
  7743  003482  B4D8               	btfsc	status,2,c
  7744  003484  D002               	goto	l523
  7745                           
  7746                           ;Bypass.c: 33: {
  7747                           ;Bypass.c: 34: do { LATD6 = 1; } while(0);
  7748  003486  8C8C               	bsf	3980,6,c	;volatile
  7749                           
  7750                           ;Bypass.c: 35: }
  7751  003488  0012               	return	
  7752  00348A                     l523:
  7753  00348A  9C8C               	bcf	3980,6,c	;volatile
  7754                           
  7755                           ;Bypass.c: 39: }
  7756                           ;Bypass.c: 40: break;
  7757  00348C  0012               	return	
  7758  00348E                     l3477:
  7759                           
  7760                           ;Bypass.c: 42: if (state)
  7761  00348E  5019               	movf	SetBypas@state,w,c
  7762  003490  101A               	iorwf	SetBypas@state+1,w,c
  7763  003492  B4D8               	btfsc	status,2,c
  7764  003494  D002               	goto	l530
  7765                           
  7766                           ;Bypass.c: 43: {
  7767                           ;Bypass.c: 44: do { LATD7 = 1; } while(0);
  7768  003496  8E8C               	bsf	3980,7,c	;volatile
  7769                           
  7770                           ;Bypass.c: 45: }
  7771  003498  0012               	return	
  7772  00349A                     l530:
  7773  00349A  9E8C               	bcf	3980,7,c	;volatile
  7774                           
  7775                           ;Bypass.c: 49: }
  7776                           ;Bypass.c: 50: break;
  7777  00349C  0012               	return	
  7778  00349E                     l3479:
  7779                           
  7780                           ;Bypass.c: 52: if (state)
  7781  00349E  5019               	movf	SetBypas@state,w,c
  7782  0034A0  101A               	iorwf	SetBypas@state+1,w,c
  7783  0034A2  B4D8               	btfsc	status,2,c
  7784  0034A4  D002               	goto	l537
  7785                           
  7786                           ;Bypass.c: 53: {
  7787                           ;Bypass.c: 54: do { LATB0 = 1; } while(0);
  7788  0034A6  808A               	bsf	3978,0,c	;volatile
  7789                           
  7790                           ;Bypass.c: 55: }
  7791  0034A8  0012               	return	
  7792  0034AA                     l537:
  7793  0034AA  908A               	bcf	3978,0,c	;volatile
  7794                           
  7795                           ;Bypass.c: 59: }
  7796                           ;Bypass.c: 60: break;
  7797  0034AC  0012               	return	
  7798  0034AE                     l3481:
  7799                           
  7800                           ;Bypass.c: 62: if (state)
  7801  0034AE  5019               	movf	SetBypas@state,w,c
  7802  0034B0  101A               	iorwf	SetBypas@state+1,w,c
  7803  0034B2  B4D8               	btfsc	status,2,c
  7804  0034B4  D002               	goto	l544
  7805                           
  7806                           ;Bypass.c: 63: {
  7807                           ;Bypass.c: 64: do { LATB1 = 1; } while(0);
  7808  0034B6  828A               	bsf	3978,1,c	;volatile
  7809                           
  7810                           ;Bypass.c: 65: }
  7811  0034B8  0012               	return	
  7812  0034BA                     l544:
  7813  0034BA  928A               	bcf	3978,1,c	;volatile
  7814                           
  7815                           ;Bypass.c: 69: }
  7816                           ;Bypass.c: 70: break;
  7817  0034BC  0012               	return	
  7818  0034BE                     l3483:
  7819                           
  7820                           ;Bypass.c: 72: if (state)
  7821  0034BE  5019               	movf	SetBypas@state,w,c
  7822  0034C0  101A               	iorwf	SetBypas@state+1,w,c
  7823  0034C2  B4D8               	btfsc	status,2,c
  7824  0034C4  D002               	goto	l551
  7825                           
  7826                           ;Bypass.c: 73: {
  7827                           ;Bypass.c: 74: do { LATB2 = 1; } while(0);
  7828  0034C6  848A               	bsf	3978,2,c	;volatile
  7829                           
  7830                           ;Bypass.c: 75: }
  7831  0034C8  0012               	return	
  7832  0034CA                     l551:
  7833  0034CA  948A               	bcf	3978,2,c	;volatile
  7834                           
  7835                           ;Bypass.c: 81: }
  7836                           
  7837                           ;Bypass.c: 79: }
  7838                           ;Bypass.c: 80: break;
  7839  0034CC  0012               	return	
  7840  0034CE                     l3487:
  7841  0034CE  C017  F01B         	movff	SetBypas@pin,??_SetBypas
  7842  0034D2  C018  F01C         	movff	SetBypas@pin+1,??_SetBypas+1
  7843                           
  7844                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7845                           ; Switch size 1, requested type "space"
  7846                           ; Number of cases is 1, Range of values is 0 to 0
  7847                           ; switch strategies available:
  7848                           ; Name         Instructions Cycles
  7849                           ; simple_byte            4     3 (average)
  7850                           ;	Chosen strategy is simple_byte
  7851  0034D6  501C               	movf	??_SetBypas+1,w,c
  7852  0034D8  0A00               	xorlw	0	; case 0
  7853  0034DA  A4D8               	btfss	status,2,c
  7854  0034DC  0012               	return	
  7855                           
  7856                           ; Switch size 1, requested type "space"
  7857                           ; Number of cases is 7, Range of values is 0 to 6
  7858                           ; switch strategies available:
  7859                           ; Name         Instructions Cycles
  7860                           ; simple_byte           22    12 (average)
  7861                           ;	Chosen strategy is simple_byte
  7862  0034DE  501B               	movf	??_SetBypas,w,c
  7863  0034E0  0A00               	xorlw	0	; case 0
  7864  0034E2  B4D8               	btfsc	status,2,c
  7865  0034E4  D7BC               	goto	l3471
  7866  0034E6  0A01               	xorlw	1	; case 1
  7867  0034E8  B4D8               	btfsc	status,2,c
  7868  0034EA  D7C1               	goto	l3473
  7869  0034EC  0A03               	xorlw	3	; case 2
  7870  0034EE  B4D8               	btfsc	status,2,c
  7871  0034F0  D7C6               	goto	l3475
  7872  0034F2  0A01               	xorlw	1	; case 3
  7873  0034F4  B4D8               	btfsc	status,2,c
  7874  0034F6  D7CB               	goto	l3477
  7875  0034F8  0A07               	xorlw	7	; case 4
  7876  0034FA  B4D8               	btfsc	status,2,c
  7877  0034FC  D7D0               	goto	l3479
  7878  0034FE  0A01               	xorlw	1	; case 5
  7879  003500  B4D8               	btfsc	status,2,c
  7880  003502  D7D5               	goto	l3481
  7881  003504  0A03               	xorlw	3	; case 6
  7882  003506  A4D8               	btfss	status,2,c
  7883  003508  0012               	return	
  7884  00350A  D7D9               	goto	l3483
  7885  00350C  0012               	return		;funcret
  7886  00350E                     __end_of_SetBypas:
  7887                           	opt stack 0
  7888                           tblptru	equ	0xFF8
  7889                           tblptrh	equ	0xFF7
  7890                           tblptrl	equ	0xFF6
  7891                           tablat	equ	0xFF5
  7892                           prodh	equ	0xFF4
  7893                           prodl	equ	0xFF3
  7894                           intcon	equ	0xFF2
  7895                           intcon2	equ	0xFF1
  7896                           postinc0	equ	0xFEE
  7897                           wreg	equ	0xFE8
  7898                           postinc1	equ	0xFE6
  7899                           postdec1	equ	0xFE5
  7900                           fsr1h	equ	0xFE2
  7901                           fsr1l	equ	0xFE1
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           fsr2h	equ	0xFDA
  7905                           fsr2l	equ	0xFD9
  7906                           status	equ	0xFD8
  7907                           
  7908 ;; *************** function _Battery_Get *****************
  7909 ;; Defined at:
  7910 ;;		line 57 in file "Battery.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  channelnum      2   42[COMRAM] int 
  7913 ;; Auto vars:     Size  Location     Type
  7914 ;;		None
  7915 ;; Return value:  Size  Location     Type
  7916 ;;                  3   42[COMRAM] float 
  7917 ;; Registers used:
  7918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7924 ;;      Params:         3       0       0       0       0       0       0
  7925 ;;      Locals:         0       0       0       0       0       0       0
  7926 ;;      Temps:          0       0       0       0       0       0       0
  7927 ;;      Totals:         3       0       0       0       0       0       0
  7928 ;;Total ram usage:        3 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:    5
  7931 ;; This function calls:
  7932 ;;		___wmul
  7933 ;; This function is called by:
  7934 ;;		_RunBypas
  7935 ;; This function uses a non-reentrant model
  7936 ;;
  7937                           
  7938                           	psect	text30
  7939  003BA0                     __ptext30:
  7940                           	opt stack 0
  7941  003BA0                     _Battery_Get:
  7942                           	opt stack 24
  7943                           
  7944                           ;Battery.c: 59: return Battery_Volt[channelnum];
  7945                           
  7946                           ;incstack = 0
  7947  003BA0  C02B  F025         	movff	Battery_Get@channelnum,___wmul@multiplier
  7948  003BA4  C02C  F026         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  7949  003BA8  0E00               	movlw	0
  7950  003BAA  6E28               	movwf	___wmul@multiplicand+1,c
  7951  003BAC  0E03               	movlw	3
  7952  003BAE  6E27               	movwf	___wmul@multiplicand,c
  7953  003BB0  ECE8  F01D         	call	___wmul	;wreg free
  7954  003BB4  0E1E               	movlw	low _Battery_Volt
  7955  003BB6  2425               	addwf	?___wmul,w,c
  7956  003BB8  6ED9               	movwf	fsr2l,c
  7957  003BBA  0E01               	movlw	high _Battery_Volt
  7958  003BBC  2026               	addwfc	?___wmul+1,w,c
  7959  003BBE  6EDA               	movwf	fsr2h,c
  7960  003BC0  CFDE F02B          	movff	postinc2,?_Battery_Get
  7961  003BC4  CFDE F02C          	movff	postinc2,?_Battery_Get+1
  7962  003BC8  CFDD F02D          	movff	postdec2,?_Battery_Get+2
  7963  003BCC  0012               	return	
  7964  003BCE  0012               	return		;funcret
  7965  003BD0                     __end_of_Battery_Get:
  7966                           	opt stack 0
  7967                           tblptru	equ	0xFF8
  7968                           tblptrh	equ	0xFF7
  7969                           tblptrl	equ	0xFF6
  7970                           tablat	equ	0xFF5
  7971                           prodh	equ	0xFF4
  7972                           prodl	equ	0xFF3
  7973                           intcon	equ	0xFF2
  7974                           intcon2	equ	0xFF1
  7975                           postinc0	equ	0xFEE
  7976                           wreg	equ	0xFE8
  7977                           postinc1	equ	0xFE6
  7978                           postdec1	equ	0xFE5
  7979                           fsr1h	equ	0xFE2
  7980                           fsr1l	equ	0xFE1
  7981                           postinc2	equ	0xFDE
  7982                           postdec2	equ	0xFDD
  7983                           fsr2h	equ	0xFDA
  7984                           fsr2l	equ	0xFD9
  7985                           status	equ	0xFD8
  7986                           
  7987 ;; *************** function _Delay *****************
  7988 ;; Defined at:
  7989 ;;		line 24 in file "Functions.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;  wait            2   22[COMRAM] int 
  7992 ;; Auto vars:     Size  Location     Type
  7993 ;;  x               2   25[COMRAM] int 
  7994 ;; Return value:  Size  Location     Type
  7995 ;;		None               void
  7996 ;; Registers used:
  7997 ;;		wreg, status,2, status,0
  7998 ;; Tracked objects:
  7999 ;;		On entry : 0/0
  8000 ;;		On exit  : 0/0
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8003 ;;      Params:         2       0       0       0       0       0       0
  8004 ;;      Locals:         2       0       0       0       0       0       0
  8005 ;;      Temps:          1       0       0       0       0       0       0
  8006 ;;      Totals:         5       0       0       0       0       0       0
  8007 ;;Total ram usage:        5 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:    4
  8010 ;; This function calls:
  8011 ;;		Nothing
  8012 ;; This function is called by:
  8013 ;;		_main
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           	psect	text31
  8018  003B6E                     __ptext31:
  8019                           	opt stack 0
  8020  003B6E                     _Delay:
  8021                           	opt stack 26
  8022                           
  8023                           ;Functions.c: 26: int x;
  8024                           ;Functions.c: 27: for(x = 0;x<wait;x++)
  8025                           
  8026                           ;incstack = 0
  8027  003B6E  0E00               	movlw	0
  8028  003B70  6E1B               	movwf	Delay@x+1,c
  8029  003B72  0E00               	movlw	0
  8030  003B74  6E1A               	movwf	Delay@x,c
  8031  003B76  D009               	goto	l311
  8032  003B78                     l4075:
  8033                           
  8034                           ;Functions.c: 28: {
  8035                           ;Functions.c: 29: _delay((unsigned long)((1)*(8000000/4000.0)));
  8036  003B78  0E03               	movlw	3
  8037  003B7A  6E19               	movwf	??_Delay& (0+255),c
  8038  003B7C  0E98               	movlw	152
  8039  003B7E                     u6147:
  8040  003B7E  2EE8               	decfsz	wreg,f,c
  8041  003B80  D7FE               	goto	u6147
  8042  003B82  2E19               	decfsz	??_Delay& (0+255),f,c
  8043  003B84  D7FC               	goto	u6147
  8044  003B86  4A1A               	infsnz	Delay@x,f,c
  8045  003B88  2A1B               	incf	Delay@x+1,f,c
  8046  003B8A                     l311:
  8047  003B8A  5017               	movf	Delay@wait,w,c
  8048  003B8C  5C1A               	subwf	Delay@x,w,c
  8049  003B8E  501B               	movf	Delay@x+1,w,c
  8050  003B90  0A80               	xorlw	128
  8051  003B92  6E19               	movwf	??_Delay& (0+255),c
  8052  003B94  5018               	movf	Delay@wait+1,w,c
  8053  003B96  0A80               	xorlw	128
  8054  003B98  5819               	subwfb	??_Delay& (0+255),w,c
  8055  003B9A  A0D8               	btfss	status,0,c
  8056  003B9C  D7ED               	goto	l4075
  8057  003B9E  0012               	return		;funcret
  8058  003BA0                     __end_of_Delay:
  8059                           	opt stack 0
  8060                           tblptru	equ	0xFF8
  8061                           tblptrh	equ	0xFF7
  8062                           tblptrl	equ	0xFF6
  8063                           tablat	equ	0xFF5
  8064                           prodh	equ	0xFF4
  8065                           prodl	equ	0xFF3
  8066                           intcon	equ	0xFF2
  8067                           intcon2	equ	0xFF1
  8068                           postinc0	equ	0xFEE
  8069                           wreg	equ	0xFE8
  8070                           postinc1	equ	0xFE6
  8071                           postdec1	equ	0xFE5
  8072                           fsr1h	equ	0xFE2
  8073                           fsr1l	equ	0xFE1
  8074                           postinc2	equ	0xFDE
  8075                           postdec2	equ	0xFDD
  8076                           fsr2h	equ	0xFDA
  8077                           fsr2l	equ	0xFD9
  8078                           status	equ	0xFD8
  8079                           
  8080 ;; *************** function _Current_Get *****************
  8081 ;; Defined at:
  8082 ;;		line 73 in file "Current.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  3   22[COMRAM] float 
  8089 ;; Registers used:
  8090 ;;		None
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8096 ;;      Params:         3       0       0       0       0       0       0
  8097 ;;      Locals:         0       0       0       0       0       0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0
  8099 ;;      Totals:         3       0       0       0       0       0       0
  8100 ;;Total ram usage:        3 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    4
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_main
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           	psect	text32
  8111  003D3A                     __ptext32:
  8112                           	opt stack 0
  8113  003D3A                     _Current_Get:
  8114                           	opt stack 26
  8115                           
  8116                           ;Current.c: 75: return Current_Mean;
  8117                           
  8118                           ;incstack = 0
  8119  003D3A  C03E  F017         	movff	_Current_Mean,?_Current_Get
  8120  003D3E  C03F  F018         	movff	_Current_Mean+1,?_Current_Get+1
  8121  003D42  C040  F019         	movff	_Current_Mean+2,?_Current_Get+2
  8122  003D46  0012               	return		;funcret
  8123  003D48                     __end_of_Current_Get:
  8124                           	opt stack 0
  8125                           tblptru	equ	0xFF8
  8126                           tblptrh	equ	0xFF7
  8127                           tblptrl	equ	0xFF6
  8128                           tablat	equ	0xFF5
  8129                           prodh	equ	0xFF4
  8130                           prodl	equ	0xFF3
  8131                           intcon	equ	0xFF2
  8132                           intcon2	equ	0xFF1
  8133                           postinc0	equ	0xFEE
  8134                           wreg	equ	0xFE8
  8135                           postinc1	equ	0xFE6
  8136                           postdec1	equ	0xFE5
  8137                           fsr1h	equ	0xFE2
  8138                           fsr1l	equ	0xFE1
  8139                           postinc2	equ	0xFDE
  8140                           postdec2	equ	0xFDD
  8141                           fsr2h	equ	0xFDA
  8142                           fsr2l	equ	0xFD9
  8143                           status	equ	0xFD8
  8144                           
  8145 ;; *************** function _Current_Fault *****************
  8146 ;; Defined at:
  8147 ;;		line 12 in file "Current.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;		None
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;  i               2   41[BANK0 ] int 
  8152 ;;  i               2   39[BANK0 ] int 
  8153 ;;  temp            3   43[BANK0 ] float 
  8154 ;;  fault           2   37[BANK0 ] int 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;                  1    wreg      unsigned char 
  8157 ;; Registers used:
  8158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8164 ;;      Params:         0       0       0       0       0       0       0
  8165 ;;      Locals:         0       9       0       0       0       0       0
  8166 ;;      Temps:          0       0       0       0       0       0       0
  8167 ;;      Totals:         0       9       0       0       0       0       0
  8168 ;;Total ram usage:        9 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    6
  8171 ;; This function calls:
  8172 ;;		___ftadd
  8173 ;;		___ftdiv
  8174 ;;		___ftge
  8175 ;;		___wmul
  8176 ;; This function is called by:
  8177 ;;		_main
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text33
  8182  002346                     __ptext33:
  8183                           	opt stack 0
  8184  002346                     _Current_Fault:
  8185                           	opt stack 24
  8186                           
  8187                           ;Current.c: 14: int fault = 0;
  8188                           
  8189                           ;incstack = 0
  8190  002346  0E00               	movlw	0
  8191  002348  0100               	movlb	0	; () banked
  8192  00234A  6F86               	movwf	(Current_Fault@fault+1)& (0+255),b
  8193  00234C  0E00               	movlw	0
  8194  00234E  6F85               	movwf	Current_Fault@fault& (0+255),b
  8195                           
  8196                           ;Current.c: 15: float temp = 0;
  8197  002350  0E00               	movlw	0
  8198  002352  0100               	movlb	0	; () banked
  8199  002354  6F8B               	movwf	Current_Fault@temp& (0+255),b
  8200  002356  0E00               	movlw	0
  8201  002358  0100               	movlb	0	; () banked
  8202  00235A  6F8C               	movwf	(Current_Fault@temp+1)& (0+255),b
  8203  00235C  0E00               	movlw	0
  8204  00235E  0100               	movlb	0	; () banked
  8205  002360  6F8D               	movwf	(Current_Fault@temp+2)& (0+255),b
  8206                           
  8207                           ;Current.c: 16: for(int i = 0;i<9;i++)
  8208  002362  0E00               	movlw	0
  8209  002364  0100               	movlb	0	; () banked
  8210  002366  6F88               	movwf	(Current_Fault@i+1)& (0+255),b
  8211  002368  0E00               	movlw	0
  8212  00236A  6F87               	movwf	Current_Fault@i& (0+255),b
  8213  00236C                     l5179:
  8214                           
  8215                           ; BSR set to: 0
  8216  00236C  0100               	movlb	0	; () banked
  8217  00236E  BF88               	btfsc	(Current_Fault@i+1)& (0+255),7,b
  8218  002370  D00A               	goto	l5183
  8219  002372  0100               	movlb	0	; () banked
  8220  002374  5188               	movf	(Current_Fault@i+1)& (0+255),w,b
  8221  002376  E130               	bnz	l5189
  8222  002378  0E09               	movlw	9
  8223  00237A  0100               	movlb	0	; () banked
  8224  00237C  5D87               	subwf	Current_Fault@i& (0+255),w,b
  8225  00237E  B0D8               	btfsc	status,0,c
  8226  002380  D02B               	goto	l5189
  8227  002382  D001               	goto	l5183
  8228                           
  8229                           ; BSR set to: 0
  8230  002384  D029               	goto	l5189
  8231  002386                     l5183:
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;Current.c: 17: {
  8235                           ;Current.c: 18: temp += Battery_Current[i];
  8236  002386  C08B  F079         	movff	Current_Fault@temp,___ftadd@f1
  8237  00238A  C08C  F07A         	movff	Current_Fault@temp+1,___ftadd@f1+1
  8238  00238E  C08D  F07B         	movff	Current_Fault@temp+2,___ftadd@f1+2
  8239  002392  C087  F025         	movff	Current_Fault@i,___wmul@multiplier
  8240  002396  C088  F026         	movff	Current_Fault@i+1,___wmul@multiplier+1
  8241  00239A  0E00               	movlw	0
  8242  00239C  6E28               	movwf	___wmul@multiplicand+1,c
  8243  00239E  0E03               	movlw	3
  8244  0023A0  6E27               	movwf	___wmul@multiplicand,c
  8245  0023A2  ECE8  F01D         	call	___wmul	;wreg free
  8246  0023A6  0E00               	movlw	low _Battery_Current
  8247  0023A8  2425               	addwf	?___wmul,w,c
  8248  0023AA  6ED9               	movwf	fsr2l,c
  8249  0023AC  0E01               	movlw	high _Battery_Current
  8250  0023AE  2026               	addwfc	?___wmul+1,w,c
  8251  0023B0  6EDA               	movwf	fsr2h,c
  8252  0023B2  CFDE F07C          	movff	postinc2,___ftadd@f2
  8253  0023B6  CFDE F07D          	movff	postinc2,___ftadd@f2+1
  8254  0023BA  CFDD F07E          	movff	postdec2,___ftadd@f2+2
  8255  0023BE  EC10  F00E         	call	___ftadd	;wreg free
  8256  0023C2  C079  F08B         	movff	?___ftadd,Current_Fault@temp
  8257  0023C6  C07A  F08C         	movff	?___ftadd+1,Current_Fault@temp+1
  8258  0023CA  C07B  F08D         	movff	?___ftadd+2,Current_Fault@temp+2
  8259  0023CE  0100               	movlb	0	; () banked
  8260  0023D0  4B87               	infsnz	Current_Fault@i& (0+255),f,b
  8261  0023D2  2B88               	incf	(Current_Fault@i+1)& (0+255),f,b
  8262  0023D4  D7CB               	goto	l5179
  8263                           
  8264                           ; BSR set to: 0
  8265  0023D6  D000               	goto	l5189
  8266  0023D8                     l5189:
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;Current.c: 19: }
  8270                           ;Current.c: 20: temp = temp/10.0;
  8271  0023D8  C08B  F02F         	movff	Current_Fault@temp,___ftdiv@f1
  8272  0023DC  C08C  F030         	movff	Current_Fault@temp+1,___ftdiv@f1+1
  8273  0023E0  C08D  F031         	movff	Current_Fault@temp+2,___ftdiv@f1+2
  8274  0023E4  0E00               	movlw	0
  8275  0023E6  6E32               	movwf	___ftdiv@f2,c
  8276  0023E8  0E20               	movlw	32
  8277  0023EA  6E33               	movwf	___ftdiv@f2+1,c
  8278  0023EC  0E41               	movlw	65
  8279  0023EE  6E34               	movwf	___ftdiv@f2+2,c
  8280  0023F0  ECB4  F017         	call	___ftdiv	;wreg free
  8281  0023F4  C02F  F08B         	movff	?___ftdiv,Current_Fault@temp
  8282  0023F8  C030  F08C         	movff	?___ftdiv+1,Current_Fault@temp+1
  8283  0023FC  C031  F08D         	movff	?___ftdiv+2,Current_Fault@temp+2
  8284                           
  8285                           ;Current.c: 21: Current_Mean = temp;
  8286  002400  C08B  F03E         	movff	Current_Fault@temp,_Current_Mean
  8287  002404  C08C  F03F         	movff	Current_Fault@temp+1,_Current_Mean+1
  8288  002408  C08D  F040         	movff	Current_Fault@temp+2,_Current_Mean+2
  8289                           
  8290                           ;Current.c: 22: for(int i = 0;i<9;i++)
  8291  00240C  0E00               	movlw	0
  8292  00240E  0100               	movlb	0	; () banked
  8293  002410  6F8A               	movwf	(Current_Fault@i_884+1)& (0+255),b
  8294  002412  0E00               	movlw	0
  8295  002414  6F89               	movwf	Current_Fault@i_884& (0+255),b
  8296  002416                     l5195:
  8297                           
  8298                           ; BSR set to: 0
  8299  002416  0100               	movlb	0	; () banked
  8300  002418  BF8A               	btfsc	(Current_Fault@i_884+1)& (0+255),7,b
  8301  00241A  D00A               	goto	l5199
  8302  00241C  0100               	movlb	0	; () banked
  8303  00241E  518A               	movf	(Current_Fault@i_884+1)& (0+255),w,b
  8304  002420  E13F               	bnz	l5207
  8305  002422  0E09               	movlw	9
  8306  002424  0100               	movlb	0	; () banked
  8307  002426  5D89               	subwf	Current_Fault@i_884& (0+255),w,b
  8308  002428  B0D8               	btfsc	status,0,c
  8309  00242A  D03A               	goto	l5207
  8310  00242C  D001               	goto	l5199
  8311                           
  8312                           ; BSR set to: 0
  8313  00242E  D038               	goto	l5207
  8314  002430                     l5199:
  8315                           
  8316                           ; BSR set to: 0
  8317                           ;Current.c: 23: {
  8318                           ;Current.c: 24: if ((25 < Battery_Current[i]) && (25 < temp))
  8319  002430  0E00               	movlw	0
  8320  002432  6E2B               	movwf	___ftge@ff1,c
  8321  002434  0EC8               	movlw	200
  8322  002436  6E2C               	movwf	___ftge@ff1+1,c
  8323  002438  0E41               	movlw	65
  8324  00243A  6E2D               	movwf	___ftge@ff1+2,c
  8325  00243C  C089  F025         	movff	Current_Fault@i_884,___wmul@multiplier
  8326  002440  C08A  F026         	movff	Current_Fault@i_884+1,___wmul@multiplier+1
  8327  002444  0E00               	movlw	0
  8328  002446  6E28               	movwf	___wmul@multiplicand+1,c
  8329  002448  0E03               	movlw	3
  8330  00244A  6E27               	movwf	___wmul@multiplicand,c
  8331  00244C  ECE8  F01D         	call	___wmul	;wreg free
  8332  002450  0E00               	movlw	low _Battery_Current
  8333  002452  2425               	addwf	?___wmul,w,c
  8334  002454  6ED9               	movwf	fsr2l,c
  8335  002456  0E01               	movlw	high _Battery_Current
  8336  002458  2026               	addwfc	?___wmul+1,w,c
  8337  00245A  6EDA               	movwf	fsr2h,c
  8338  00245C  CFDE F02E          	movff	postinc2,___ftge@ff2
  8339  002460  CFDE F02F          	movff	postinc2,___ftge@ff2+1
  8340  002464  CFDD F030          	movff	postdec2,___ftge@ff2+2
  8341  002468  EC2A  F01B         	call	___ftge	;wreg free
  8342  00246C  B0D8               	btfsc	status,0,c
  8343  00246E  D013               	goto	l462
  8344  002470  0E00               	movlw	0
  8345  002472  6E2B               	movwf	___ftge@ff1,c
  8346  002474  0EC8               	movlw	200
  8347  002476  6E2C               	movwf	___ftge@ff1+1,c
  8348  002478  0E41               	movlw	65
  8349  00247A  6E2D               	movwf	___ftge@ff1+2,c
  8350  00247C  C08B  F02E         	movff	Current_Fault@temp,___ftge@ff2
  8351  002480  C08C  F02F         	movff	Current_Fault@temp+1,___ftge@ff2+1
  8352  002484  C08D  F030         	movff	Current_Fault@temp+2,___ftge@ff2+2
  8353  002488  EC2A  F01B         	call	___ftge	;wreg free
  8354  00248C  B0D8               	btfsc	status,0,c
  8355  00248E  D003               	goto	l462
  8356                           
  8357                           ;Current.c: 25: {
  8358                           ;Current.c: 26: fault++;
  8359  002490  0100               	movlb	0	; () banked
  8360  002492  4B85               	infsnz	Current_Fault@fault& (0+255),f,b
  8361  002494  2B86               	incf	(Current_Fault@fault+1)& (0+255),f,b
  8362  002496                     l462:
  8363  002496  0100               	movlb	0	; () banked
  8364  002498  4B89               	infsnz	Current_Fault@i_884& (0+255),f,b
  8365  00249A  2B8A               	incf	(Current_Fault@i_884+1)& (0+255),f,b
  8366  00249C  D7BC               	goto	l5195
  8367                           
  8368                           ; BSR set to: 0
  8369  00249E  D000               	goto	l5207
  8370  0024A0                     l5207:
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;Current.c: 27: }
  8374                           ;Current.c: 28: }
  8375                           ;Current.c: 29: if(fault > 6)
  8376  0024A0  0100               	movlb	0	; () banked
  8377  0024A2  BF86               	btfsc	(Current_Fault@fault+1)& (0+255),7,b
  8378  0024A4  D00D               	goto	l5211
  8379  0024A6  0100               	movlb	0	; () banked
  8380  0024A8  5186               	movf	(Current_Fault@fault+1)& (0+255),w,b
  8381  0024AA  E105               	bnz	u5450
  8382  0024AC  0E07               	movlw	7
  8383  0024AE  0100               	movlb	0	; () banked
  8384  0024B0  5D85               	subwf	Current_Fault@fault& (0+255),w,b
  8385  0024B2  A0D8               	btfss	status,0,c
  8386  0024B4  D005               	goto	l5211
  8387  0024B6                     u5450:
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;Current.c: 30: {
  8391                           ;Current.c: 31: fault = 1;
  8392  0024B6  0E00               	movlw	0
  8393  0024B8  0100               	movlb	0	; () banked
  8394  0024BA  6F86               	movwf	(Current_Fault@fault+1)& (0+255),b
  8395  0024BC  0E01               	movlw	1
  8396  0024BE  D004               	goto	L7
  8397  0024C0                     l5211:
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;Current.c: 33: else
  8401                           ;Current.c: 34: {
  8402                           ;Current.c: 35: fault = 0;
  8403  0024C0  0E00               	movlw	0
  8404  0024C2  0100               	movlb	0	; () banked
  8405  0024C4  6F86               	movwf	(Current_Fault@fault+1)& (0+255),b
  8406  0024C6  0E00               	movlw	0
  8407  0024C8                     L7:
  8408  0024C8  6F85               	movwf	Current_Fault@fault& (0+255),b
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;Current.c: 36: }
  8412                           ;Current.c: 37: return fault;
  8413  0024CA  0100               	movlb	0	; () banked
  8414  0024CC  5185               	movf	Current_Fault@fault& (0+255),w,b
  8415  0024CE  0012               	return	
  8416                           
  8417                           ; BSR set to: 0
  8418                           
  8419                           ; BSR set to: 0
  8420  0024D0  0012               	return		;funcret
  8421  0024D2                     __end_of_Current_Fault:
  8422                           	opt stack 0
  8423                           tblptru	equ	0xFF8
  8424                           tblptrh	equ	0xFF7
  8425                           tblptrl	equ	0xFF6
  8426                           tablat	equ	0xFF5
  8427                           prodh	equ	0xFF4
  8428                           prodl	equ	0xFF3
  8429                           intcon	equ	0xFF2
  8430                           intcon2	equ	0xFF1
  8431                           postinc0	equ	0xFEE
  8432                           wreg	equ	0xFE8
  8433                           postinc1	equ	0xFE6
  8434                           postdec1	equ	0xFE5
  8435                           fsr1h	equ	0xFE2
  8436                           fsr1l	equ	0xFE1
  8437                           postinc2	equ	0xFDE
  8438                           postdec2	equ	0xFDD
  8439                           fsr2h	equ	0xFDA
  8440                           fsr2l	equ	0xFD9
  8441                           status	equ	0xFD8
  8442                           
  8443 ;; *************** function _Current_Convert *****************
  8444 ;; Defined at:
  8445 ;;		line 63 in file "Current.c"
  8446 ;; Parameters:    Size  Location     Type
  8447 ;;		None
  8448 ;; Auto vars:     Size  Location     Type
  8449 ;;  x               2   41[BANK0 ] int 
  8450 ;; Return value:  Size  Location     Type
  8451 ;;		None               void
  8452 ;; Registers used:
  8453 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8454 ;; Tracked objects:
  8455 ;;		On entry : 0/0
  8456 ;;		On exit  : 0/0
  8457 ;;		Unchanged: 0/0
  8458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8459 ;;      Params:         0       0       0       0       0       0       0
  8460 ;;      Locals:         0       4       0       0       0       0       0
  8461 ;;      Temps:          0       0       0       0       0       0       0
  8462 ;;      Totals:         0       4       0       0       0       0       0
  8463 ;;Total ram usage:        4 bytes
  8464 ;; Hardware stack levels used:    1
  8465 ;; Hardware stack levels required when called:    7
  8466 ;; This function calls:
  8467 ;;		_Current_Filter
  8468 ;;		___awdiv
  8469 ;;		___awtoft
  8470 ;;		___wmul
  8471 ;; This function is called by:
  8472 ;;		_main
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           	psect	text34
  8477  00320C                     __ptext34:
  8478                           	opt stack 0
  8479  00320C                     _Current_Convert:
  8480                           	opt stack 23
  8481                           
  8482                           ;Current.c: 65: int x;
  8483                           ;Current.c: 66: for(x = 0; x < 10; x++)
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;incstack = 0
  8487  00320C  0E00               	movlw	0
  8488  00320E  0100               	movlb	0	; () banked
  8489  003210  6F8A               	movwf	(Current_Convert@x+1)& (0+255),b
  8490  003212  0E00               	movlw	0
  8491  003214  6F89               	movwf	Current_Convert@x& (0+255),b
  8492  003216                     l5165:
  8493                           
  8494                           ; BSR set to: 0
  8495  003216  0100               	movlb	0	; () banked
  8496  003218  BF8A               	btfsc	(Current_Convert@x+1)& (0+255),7,b
  8497  00321A  D00A               	goto	l5169
  8498  00321C  0100               	movlb	0	; () banked
  8499  00321E  518A               	movf	(Current_Convert@x+1)& (0+255),w,b
  8500  003220  E159               	bnz	l5175
  8501  003222  0E0A               	movlw	10
  8502  003224  0100               	movlb	0	; () banked
  8503  003226  5D89               	subwf	Current_Convert@x& (0+255),w,b
  8504  003228  B0D8               	btfsc	status,0,c
  8505  00322A  D054               	goto	l5175
  8506  00322C  D001               	goto	l5169
  8507                           
  8508                           ; BSR set to: 0
  8509  00322E  D052               	goto	l5175
  8510  003230                     l5169:
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;Current.c: 67: {
  8514                           ;Current.c: 68: TempBattery_Current[x] = ((((Current_Adc[x]/1024)*500)-2500)/66);
  8515  003230  0E04               	movlw	4
  8516  003232  6E20               	movwf	___awdiv@divisor+1,c
  8517  003234  0E00               	movlw	0
  8518  003236  6E1F               	movwf	___awdiv@divisor,c
  8519  003238  90D8               	bcf	status,0,c
  8520  00323A  0100               	movlb	0	; () banked
  8521  00323C  3589               	rlcf	Current_Convert@x& (0+255),w,b
  8522  00323E  6ED9               	movwf	fsr2l,c
  8523  003240  0100               	movlb	0	; () banked
  8524  003242  358A               	rlcf	(Current_Convert@x+1)& (0+255),w,b
  8525  003244  6EDA               	movwf	fsr2h,c
  8526  003246  0EC8               	movlw	low _Current_Adc
  8527  003248  26D9               	addwf	fsr2l,f,c
  8528  00324A  0E00               	movlw	high _Current_Adc
  8529  00324C  22DA               	addwfc	fsr2h,f,c
  8530  00324E  CFDE F01D          	movff	postinc2,___awdiv@dividend
  8531  003252  CFDD F01E          	movff	postdec2,___awdiv@dividend+1
  8532  003256  ECDF  F01A         	call	___awdiv	;wreg free
  8533  00325A  C01D  F025         	movff	?___awdiv,___wmul@multiplier
  8534  00325E  C01E  F026         	movff	?___awdiv+1,___wmul@multiplier+1
  8535  003262  0E01               	movlw	1
  8536  003264  6E28               	movwf	___wmul@multiplicand+1,c
  8537  003266  0EF4               	movlw	244
  8538  003268  6E27               	movwf	___wmul@multiplicand,c
  8539  00326A  ECE8  F01D         	call	___wmul	;wreg free
  8540  00326E  0E3C               	movlw	60
  8541  003270  2425               	addwf	?___wmul,w,c
  8542  003272  0100               	movlb	0	; () banked
  8543  003274  6F87               	movwf	_Current_Convert$1606& (0+255),b
  8544  003276  0EF6               	movlw	246
  8545  003278  2026               	addwfc	?___wmul+1,w,c
  8546  00327A  0100               	movlb	0	; () banked
  8547  00327C  6F88               	movwf	(_Current_Convert$1606+1)& (0+255),b
  8548                           
  8549                           ;Current.c: 67: {
  8550                           ;Current.c: 68: TempBattery_Current[x] = ((((Current_Adc[x]/1024)*500)-2500)/66);
  8551  00327E  C089  F025         	movff	Current_Convert@x,___wmul@multiplier
  8552  003282  C08A  F026         	movff	Current_Convert@x+1,___wmul@multiplier+1
  8553  003286  0E00               	movlw	0
  8554  003288  6E28               	movwf	___wmul@multiplicand+1,c
  8555  00328A  0E03               	movlw	3
  8556  00328C  6E27               	movwf	___wmul@multiplicand,c
  8557  00328E  ECE8  F01D         	call	___wmul	;wreg free
  8558  003292  0EB4               	movlw	low _TempBattery_Current
  8559  003294  2425               	addwf	?___wmul,w,c
  8560  003296  6ED9               	movwf	fsr2l,c
  8561  003298  0E01               	movlw	high _TempBattery_Current
  8562  00329A  2026               	addwfc	?___wmul+1,w,c
  8563  00329C  6EDA               	movwf	fsr2h,c
  8564  00329E  0E00               	movlw	0
  8565  0032A0  6E20               	movwf	___awdiv@divisor+1,c
  8566  0032A2  0E42               	movlw	66
  8567  0032A4  6E1F               	movwf	___awdiv@divisor,c
  8568  0032A6  C087  F01D         	movff	_Current_Convert$1606,___awdiv@dividend
  8569  0032AA  C088  F01E         	movff	_Current_Convert$1606+1,___awdiv@dividend+1
  8570  0032AE  ECDF  F01A         	call	___awdiv	;wreg free
  8571  0032B2  C01D  F02B         	movff	?___awdiv,___awtoft@c
  8572  0032B6  C01E  F02C         	movff	?___awdiv+1,___awtoft@c+1
  8573  0032BA  EC60  F01D         	call	___awtoft	;wreg free
  8574  0032BE  C02B  FFDE         	movff	?___awtoft,postinc2
  8575  0032C2  C02C  FFDE         	movff	?___awtoft+1,postinc2
  8576  0032C6  C02D  FFDE         	movff	?___awtoft+2,postinc2
  8577  0032CA  0100               	movlb	0	; () banked
  8578  0032CC  4B89               	infsnz	Current_Convert@x& (0+255),f,b
  8579  0032CE  2B8A               	incf	(Current_Convert@x+1)& (0+255),f,b
  8580  0032D0  D7A2               	goto	l5165
  8581                           
  8582                           ; BSR set to: 0
  8583  0032D2  D000               	goto	l5175
  8584  0032D4                     l5175:
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;Current.c: 69: }
  8588                           ;Current.c: 70: Current_Filter();
  8589  0032D4  EC24  F013         	call	_Current_Filter	;wreg free
  8590  0032D8  0012               	return		;funcret
  8591  0032DA                     __end_of_Current_Convert:
  8592                           	opt stack 0
  8593                           tblptru	equ	0xFF8
  8594                           tblptrh	equ	0xFF7
  8595                           tblptrl	equ	0xFF6
  8596                           tablat	equ	0xFF5
  8597                           prodh	equ	0xFF4
  8598                           prodl	equ	0xFF3
  8599                           intcon	equ	0xFF2
  8600                           intcon2	equ	0xFF1
  8601                           postinc0	equ	0xFEE
  8602                           wreg	equ	0xFE8
  8603                           postinc1	equ	0xFE6
  8604                           postdec1	equ	0xFE5
  8605                           fsr1h	equ	0xFE2
  8606                           fsr1l	equ	0xFE1
  8607                           postinc2	equ	0xFDE
  8608                           postdec2	equ	0xFDD
  8609                           fsr2h	equ	0xFDA
  8610                           fsr2l	equ	0xFD9
  8611                           status	equ	0xFD8
  8612                           
  8613 ;; *************** function ___awdiv *****************
  8614 ;; Defined at:
  8615 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;  dividend        2   28[COMRAM] int 
  8618 ;;  divisor         2   30[COMRAM] int 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  quotient        2   34[COMRAM] int 
  8621 ;;  sign            1   33[COMRAM] unsigned char 
  8622 ;;  counter         1   32[COMRAM] unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  2   28[COMRAM] int 
  8625 ;; Registers used:
  8626 ;;		wreg, status,2, status,0
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8632 ;;      Params:         4       0       0       0       0       0       0
  8633 ;;      Locals:         4       0       0       0       0       0       0
  8634 ;;      Temps:          0       0       0       0       0       0       0
  8635 ;;      Totals:         8       0       0       0       0       0       0
  8636 ;;Total ram usage:        8 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    4
  8639 ;; This function calls:
  8640 ;;		Nothing
  8641 ;; This function is called by:
  8642 ;;		_Current_Convert
  8643 ;;		_fround
  8644 ;;		_scale
  8645 ;;		_printf
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           	psect	text35
  8650  0035BE                     __ptext35:
  8651                           	opt stack 0
  8652  0035BE                     ___awdiv:
  8653                           	opt stack 24
  8654                           
  8655                           ;incstack = 0
  8656  0035BE  0E00               	movlw	0
  8657  0035C0  6E22               	movwf	___awdiv@sign,c
  8658  0035C2  AE20               	btfss	___awdiv@divisor+1,7,c
  8659  0035C4  D007               	goto	l3245
  8660  0035C6  6C1F               	negf	___awdiv@divisor,c
  8661  0035C8  1E20               	comf	___awdiv@divisor+1,f,c
  8662  0035CA  B0D8               	btfsc	status,0,c
  8663  0035CC  2A20               	incf	___awdiv@divisor+1,f,c
  8664  0035CE  0E01               	movlw	1
  8665  0035D0  6E22               	movwf	___awdiv@sign,c
  8666  0035D2  D000               	goto	l3245
  8667  0035D4                     l3245:
  8668  0035D4  AE1E               	btfss	___awdiv@dividend+1,7,c
  8669  0035D6  D007               	goto	l3251
  8670  0035D8  6C1D               	negf	___awdiv@dividend,c
  8671  0035DA  1E1E               	comf	___awdiv@dividend+1,f,c
  8672  0035DC  B0D8               	btfsc	status,0,c
  8673  0035DE  2A1E               	incf	___awdiv@dividend+1,f,c
  8674  0035E0  0E01               	movlw	1
  8675  0035E2  1A22               	xorwf	___awdiv@sign,f,c
  8676  0035E4  D000               	goto	l3251
  8677  0035E6                     l3251:
  8678  0035E6  0E00               	movlw	0
  8679  0035E8  6E24               	movwf	___awdiv@quotient+1,c
  8680  0035EA  0E00               	movlw	0
  8681  0035EC  6E23               	movwf	___awdiv@quotient,c
  8682  0035EE  501F               	movf	___awdiv@divisor,w,c
  8683  0035F0  1020               	iorwf	___awdiv@divisor+1,w,c
  8684  0035F2  B4D8               	btfsc	status,2,c
  8685  0035F4  D021               	goto	l3273
  8686  0035F6  0E01               	movlw	1
  8687  0035F8  6E21               	movwf	___awdiv@counter,c
  8688  0035FA  D005               	goto	l3259
  8689  0035FC                     l3257:
  8690  0035FC  90D8               	bcf	status,0,c
  8691  0035FE  361F               	rlcf	___awdiv@divisor,f,c
  8692  003600  3620               	rlcf	___awdiv@divisor+1,f,c
  8693  003602  2A21               	incf	___awdiv@counter,f,c
  8694  003604  D000               	goto	l3259
  8695  003606                     l3259:
  8696  003606  BE20               	btfsc	___awdiv@divisor+1,7,c
  8697  003608  D002               	goto	l3261
  8698  00360A  D7F8               	goto	l3257
  8699  00360C  D000               	goto	l3261
  8700  00360E                     l3261:
  8701  00360E  90D8               	bcf	status,0,c
  8702  003610  3623               	rlcf	___awdiv@quotient,f,c
  8703  003612  3624               	rlcf	___awdiv@quotient+1,f,c
  8704  003614  501F               	movf	___awdiv@divisor,w,c
  8705  003616  5C1D               	subwf	___awdiv@dividend,w,c
  8706  003618  5020               	movf	___awdiv@divisor+1,w,c
  8707  00361A  581E               	subwfb	___awdiv@dividend+1,w,c
  8708  00361C  A0D8               	btfss	status,0,c
  8709  00361E  D006               	goto	l3269
  8710  003620  501F               	movf	___awdiv@divisor,w,c
  8711  003622  5E1D               	subwf	___awdiv@dividend,f,c
  8712  003624  5020               	movf	___awdiv@divisor+1,w,c
  8713  003626  5A1E               	subwfb	___awdiv@dividend+1,f,c
  8714  003628  8023               	bsf	___awdiv@quotient,0,c
  8715  00362A  D000               	goto	l3269
  8716  00362C                     l3269:
  8717  00362C  90D8               	bcf	status,0,c
  8718  00362E  3220               	rrcf	___awdiv@divisor+1,f,c
  8719  003630  321F               	rrcf	___awdiv@divisor,f,c
  8720  003632  2E21               	decfsz	___awdiv@counter,f,c
  8721  003634  D7EC               	goto	l3261
  8722  003636  D000               	goto	l3273
  8723  003638                     l3273:
  8724  003638  5022               	movf	___awdiv@sign,w,c
  8725  00363A  B4D8               	btfsc	status,2,c
  8726  00363C  D005               	goto	l3277
  8727  00363E  6C23               	negf	___awdiv@quotient,c
  8728  003640  1E24               	comf	___awdiv@quotient+1,f,c
  8729  003642  B0D8               	btfsc	status,0,c
  8730  003644  2A24               	incf	___awdiv@quotient+1,f,c
  8731  003646  D000               	goto	l3277
  8732  003648                     l3277:
  8733  003648  C023  F01D         	movff	___awdiv@quotient,?___awdiv
  8734  00364C  C024  F01E         	movff	___awdiv@quotient+1,?___awdiv+1
  8735  003650  0012               	return	
  8736  003652  0012               	return		;funcret
  8737  003654                     __end_of___awdiv:
  8738                           	opt stack 0
  8739                           tblptru	equ	0xFF8
  8740                           tblptrh	equ	0xFF7
  8741                           tblptrl	equ	0xFF6
  8742                           tablat	equ	0xFF5
  8743                           prodh	equ	0xFF4
  8744                           prodl	equ	0xFF3
  8745                           intcon	equ	0xFF2
  8746                           intcon2	equ	0xFF1
  8747                           postinc0	equ	0xFEE
  8748                           wreg	equ	0xFE8
  8749                           postinc1	equ	0xFE6
  8750                           postdec1	equ	0xFE5
  8751                           fsr1h	equ	0xFE2
  8752                           fsr1l	equ	0xFE1
  8753                           postinc2	equ	0xFDE
  8754                           postdec2	equ	0xFDD
  8755                           fsr2h	equ	0xFDA
  8756                           fsr2l	equ	0xFD9
  8757                           status	equ	0xFD8
  8758                           
  8759 ;; *************** function _Current_Filter *****************
  8760 ;; Defined at:
  8761 ;;		line 49 in file "Current.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;		None
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;  x               2   37[BANK0 ] int 
  8766 ;; Return value:  Size  Location     Type
  8767 ;;		None               void
  8768 ;; Registers used:
  8769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8775 ;;      Params:         0       0       0       0       0       0       0
  8776 ;;      Locals:         0       2       0       0       0       0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0
  8778 ;;      Totals:         0       2       0       0       0       0       0
  8779 ;;Total ram usage:        2 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    6
  8782 ;; This function calls:
  8783 ;;		___ftadd
  8784 ;;		___ftmul
  8785 ;;		___wmul
  8786 ;; This function is called by:
  8787 ;;		_Current_Convert
  8788 ;; This function uses a non-reentrant model
  8789 ;;
  8790                           
  8791                           	psect	text36
  8792  002648                     __ptext36:
  8793                           	opt stack 0
  8794  002648                     _Current_Filter:
  8795                           	opt stack 23
  8796                           
  8797                           ;Current.c: 52: int x;
  8798                           ;Current.c: 53: for(x = 0; x < 10; x++)
  8799                           
  8800                           ;incstack = 0
  8801  002648  0E00               	movlw	0
  8802  00264A  0100               	movlb	0	; () banked
  8803  00264C  6F86               	movwf	(Current_Filter@x+1)& (0+255),b
  8804  00264E  0E00               	movlw	0
  8805  002650  6F85               	movwf	Current_Filter@x& (0+255),b
  8806  002652                     l4919:
  8807                           
  8808                           ; BSR set to: 0
  8809  002652  0100               	movlb	0	; () banked
  8810  002654  BF86               	btfsc	(Current_Filter@x+1)& (0+255),7,b
  8811  002656  D00A               	goto	l4923
  8812  002658  0100               	movlb	0	; () banked
  8813  00265A  5186               	movf	(Current_Filter@x+1)& (0+255),w,b
  8814  00265C  E172               	bnz	l4929
  8815  00265E  0E0A               	movlw	10
  8816  002660  0100               	movlb	0	; () banked
  8817  002662  5D85               	subwf	Current_Filter@x& (0+255),w,b
  8818  002664  B0D8               	btfsc	status,0,c
  8819  002666  D06D               	goto	l4929
  8820  002668  D001               	goto	l4923
  8821                           
  8822                           ; BSR set to: 0
  8823  00266A  D06B               	goto	l4929
  8824  00266C                     l4923:
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;Current.c: 54: {
  8828                           ;Current.c: 55: Battery_Current[x] = (0.88*TempBattery_Current[x] + ((1- 0.88)*PrevBatte
      +                          ry_Current[x]));
  8829  00266C  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  8830  002670  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  8831  002674  0E00               	movlw	0
  8832  002676  6E28               	movwf	___wmul@multiplicand+1,c
  8833  002678  0E03               	movlw	3
  8834  00267A  6E27               	movwf	___wmul@multiplicand,c
  8835  00267C  ECE8  F01D         	call	___wmul	;wreg free
  8836  002680  0E00               	movlw	low _Battery_Current
  8837  002682  2425               	addwf	?___wmul,w,c
  8838  002684  6ED9               	movwf	fsr2l,c
  8839  002686  0E01               	movlw	high _Battery_Current
  8840  002688  2026               	addwfc	?___wmul+1,w,c
  8841  00268A  6EDA               	movwf	fsr2h,c
  8842  00268C  0E48               	movlw	72
  8843  00268E  0100               	movlb	0	; () banked
  8844  002690  6F63               	movwf	___ftmul@f2& (0+255),b
  8845  002692  0E61               	movlw	97
  8846  002694  0100               	movlb	0	; () banked
  8847  002696  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  8848  002698  0E3F               	movlw	63
  8849  00269A  0100               	movlb	0	; () banked
  8850  00269C  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  8851  00269E  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  8852  0026A2  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  8853  0026A6  0E00               	movlw	0
  8854  0026A8  6E28               	movwf	___wmul@multiplicand+1,c
  8855  0026AA  0E03               	movlw	3
  8856  0026AC  6E27               	movwf	___wmul@multiplicand,c
  8857  0026AE  ECE8  F01D         	call	___wmul	;wreg free
  8858  0026B2  0EB4               	movlw	low _TempBattery_Current
  8859  0026B4  2425               	addwf	?___wmul,w,c
  8860  0026B6  6EE1               	movwf	fsr1l,c
  8861  0026B8  0E01               	movlw	high _TempBattery_Current
  8862  0026BA  2026               	addwfc	?___wmul+1,w,c
  8863  0026BC  6EE2               	movwf	fsr1h,c
  8864  0026BE  CFE6 F060          	movff	postinc1,___ftmul@f1
  8865  0026C2  CFE6 F061          	movff	postinc1,___ftmul@f1+1
  8866  0026C6  CFE5 F062          	movff	postdec1,___ftmul@f1+2
  8867  0026CA  ECDF  F013         	call	___ftmul	;wreg free
  8868  0026CE  C060  F079         	movff	?___ftmul,___ftadd@f1
  8869  0026D2  C061  F07A         	movff	?___ftmul+1,___ftadd@f1+1
  8870  0026D6  C062  F07B         	movff	?___ftmul+2,___ftadd@f1+2
  8871  0026DA  0EC3               	movlw	195
  8872  0026DC  0100               	movlb	0	; () banked
  8873  0026DE  6F63               	movwf	___ftmul@f2& (0+255),b
  8874  0026E0  0EF5               	movlw	245
  8875  0026E2  0100               	movlb	0	; () banked
  8876  0026E4  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  8877  0026E6  0E3D               	movlw	61
  8878  0026E8  0100               	movlb	0	; () banked
  8879  0026EA  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  8880  0026EC  0E00               	movlw	0
  8881  0026EE  6E28               	movwf	___wmul@multiplicand+1,c
  8882  0026F0  0E03               	movlw	3
  8883  0026F2  6E27               	movwf	___wmul@multiplicand,c
  8884  0026F4  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  8885  0026F8  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  8886  0026FC  ECE8  F01D         	call	___wmul	;wreg free
  8887  002700  0E3C               	movlw	low _PrevBattery_Current
  8888  002702  2425               	addwf	?___wmul,w,c
  8889  002704  6EE1               	movwf	fsr1l,c
  8890  002706  0E01               	movlw	high _PrevBattery_Current
  8891  002708  2026               	addwfc	?___wmul+1,w,c
  8892  00270A  6EE2               	movwf	fsr1h,c
  8893  00270C  CFE6 F060          	movff	postinc1,___ftmul@f1
  8894  002710  CFE6 F061          	movff	postinc1,___ftmul@f1+1
  8895  002714  CFE5 F062          	movff	postdec1,___ftmul@f1+2
  8896  002718  ECDF  F013         	call	___ftmul	;wreg free
  8897  00271C  C060  F07C         	movff	?___ftmul,___ftadd@f2
  8898  002720  C061  F07D         	movff	?___ftmul+1,___ftadd@f2+1
  8899  002724  C062  F07E         	movff	?___ftmul+2,___ftadd@f2+2
  8900  002728  EC10  F00E         	call	___ftadd	;wreg free
  8901  00272C  C079  FFDE         	movff	?___ftadd,postinc2
  8902  002730  C07A  FFDE         	movff	?___ftadd+1,postinc2
  8903  002734  C07B  FFDE         	movff	?___ftadd+2,postinc2
  8904  002738  0100               	movlb	0	; () banked
  8905  00273A  4B85               	infsnz	Current_Filter@x& (0+255),f,b
  8906  00273C  2B86               	incf	(Current_Filter@x+1)& (0+255),f,b
  8907  00273E  D789               	goto	l4919
  8908                           
  8909                           ; BSR set to: 0
  8910  002740  D000               	goto	l4929
  8911  002742                     l4929:
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;Current.c: 56: }
  8915                           ;Current.c: 57: for(x = 0; x < 10; x++)
  8916  002742  0E00               	movlw	0
  8917  002744  0100               	movlb	0	; () banked
  8918  002746  6F86               	movwf	(Current_Filter@x+1)& (0+255),b
  8919  002748  0E00               	movlw	0
  8920  00274A  6F85               	movwf	Current_Filter@x& (0+255),b
  8921  00274C                     l4931:
  8922                           
  8923                           ; BSR set to: 0
  8924  00274C  0100               	movlb	0	; () banked
  8925  00274E  BF86               	btfsc	(Current_Filter@x+1)& (0+255),7,b
  8926  002750  D00A               	goto	l4935
  8927  002752  0100               	movlb	0	; () banked
  8928  002754  5186               	movf	(Current_Filter@x+1)& (0+255),w,b
  8929  002756  E132               	bnz	l475
  8930  002758  0E0A               	movlw	10
  8931  00275A  0100               	movlb	0	; () banked
  8932  00275C  5D85               	subwf	Current_Filter@x& (0+255),w,b
  8933  00275E  B0D8               	btfsc	status,0,c
  8934  002760  0012               	return	
  8935  002762  D001               	goto	l4935
  8936                           
  8937                           ; BSR set to: 0
  8938  002764  0012               	return	
  8939  002766                     l4935:
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;Current.c: 58: {
  8943                           ;Current.c: 59: PrevBattery_Current[x] = Battery_Current[x];
  8944  002766  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  8945  00276A  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  8946  00276E  0E00               	movlw	0
  8947  002770  6E28               	movwf	___wmul@multiplicand+1,c
  8948  002772  0E03               	movlw	3
  8949  002774  6E27               	movwf	___wmul@multiplicand,c
  8950  002776  ECE8  F01D         	call	___wmul	;wreg free
  8951  00277A  0E00               	movlw	low _Battery_Current
  8952  00277C  2425               	addwf	?___wmul,w,c
  8953  00277E  6ED9               	movwf	fsr2l,c
  8954  002780  0E01               	movlw	high _Battery_Current
  8955  002782  2026               	addwfc	?___wmul+1,w,c
  8956  002784  6EDA               	movwf	fsr2h,c
  8957  002786  C085  F025         	movff	Current_Filter@x,___wmul@multiplier
  8958  00278A  C086  F026         	movff	Current_Filter@x+1,___wmul@multiplier+1
  8959  00278E  0E00               	movlw	0
  8960  002790  6E28               	movwf	___wmul@multiplicand+1,c
  8961  002792  0E03               	movlw	3
  8962  002794  6E27               	movwf	___wmul@multiplicand,c
  8963  002796  ECE8  F01D         	call	___wmul	;wreg free
  8964  00279A  0E3C               	movlw	low _PrevBattery_Current
  8965  00279C  2425               	addwf	?___wmul,w,c
  8966  00279E  6EE1               	movwf	fsr1l,c
  8967  0027A0  0E01               	movlw	high _PrevBattery_Current
  8968  0027A2  2026               	addwfc	?___wmul+1,w,c
  8969  0027A4  6EE2               	movwf	fsr1h,c
  8970  0027A6  CFDE FFE6          	movff	postinc2,postinc1
  8971  0027AA  CFDE FFE6          	movff	postinc2,postinc1
  8972  0027AE  CFDE FFE6          	movff	postinc2,postinc1
  8973  0027B2  0100               	movlb	0	; () banked
  8974  0027B4  4B85               	infsnz	Current_Filter@x& (0+255),f,b
  8975  0027B6  2B86               	incf	(Current_Filter@x+1)& (0+255),f,b
  8976  0027B8  D7C9               	goto	l4931
  8977                           
  8978                           ; BSR set to: 0
  8979  0027BA  0012               	return	
  8980  0027BC                     l475:
  8981                           
  8982                           ; BSR set to: 0
  8983  0027BC  0012               	return		;funcret
  8984  0027BE                     __end_of_Current_Filter:
  8985                           	opt stack 0
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           intcon	equ	0xFF2
  8993                           intcon2	equ	0xFF1
  8994                           postinc0	equ	0xFEE
  8995                           wreg	equ	0xFE8
  8996                           postinc1	equ	0xFE6
  8997                           postdec1	equ	0xFE5
  8998                           fsr1h	equ	0xFE2
  8999                           fsr1l	equ	0xFE1
  9000                           postinc2	equ	0xFDE
  9001                           postdec2	equ	0xFDD
  9002                           fsr2h	equ	0xFDA
  9003                           fsr2l	equ	0xFD9
  9004                           status	equ	0xFD8
  9005                           
  9006 ;; *************** function ___ftadd *****************
  9007 ;; Defined at:
  9008 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  f1              3   25[BANK0 ] float 
  9011 ;;  f2              3   28[BANK0 ] float 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;  exp1            1   36[BANK0 ] unsigned char 
  9014 ;;  exp2            1   35[BANK0 ] unsigned char 
  9015 ;;  sign            1   34[BANK0 ] unsigned char 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  3   25[BANK0 ] float 
  9018 ;; Registers used:
  9019 ;;		wreg, status,2, status,0, cstack
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9025 ;;      Params:         0       6       0       0       0       0       0
  9026 ;;      Locals:         0       3       0       0       0       0       0
  9027 ;;      Temps:          0       3       0       0       0       0       0
  9028 ;;      Totals:         0      12       0       0       0       0       0
  9029 ;;Total ram usage:       12 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    5
  9032 ;; This function calls:
  9033 ;;		___ftpack
  9034 ;; This function is called by:
  9035 ;;		_Temp_Filter
  9036 ;;		_Temp_Convert
  9037 ;;		_Current_Fault
  9038 ;;		_Current_Filter
  9039 ;;		_printf
  9040 ;;		___ftsub
  9041 ;;		_log
  9042 ;;		_eval_poly
  9043 ;;		_Battery_Filter
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           	psect	text37
  9048  001C20                     __ptext37:
  9049                           	opt stack 0
  9050  001C20                     ___ftadd:
  9051                           	opt stack 23
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;incstack = 0
  9055  001C20  C07B  F07F         	movff	___ftadd@f1+2,??___ftadd
  9056  001C24  0100               	movlb	0	; () banked
  9057  001C26  6B80               	clrf	(??___ftadd+1)& (0+255),b
  9058  001C28  6B81               	clrf	(??___ftadd+2)& (0+255),b
  9059  001C2A  0100               	movlb	0	; () banked
  9060  001C2C  357A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9061  001C2E  0100               	movlb	0	; () banked
  9062  001C30  377F               	rlcf	??___ftadd& (0+255),f,b
  9063  001C32  E301               	bnc	u4691
  9064  001C34  8180               	bsf	(??___ftadd+1)& (0+255),0,b
  9065  001C36                     u4691:
  9066  001C36  0100               	movlb	0	; () banked
  9067  001C38  517F               	movf	??___ftadd& (0+255),w,b
  9068  001C3A  0100               	movlb	0	; () banked
  9069  001C3C  6F84               	movwf	___ftadd@exp1& (0+255),b
  9070  001C3E  C07E  F07F         	movff	___ftadd@f2+2,??___ftadd
  9071  001C42  0100               	movlb	0	; () banked
  9072  001C44  6B80               	clrf	(??___ftadd+1)& (0+255),b
  9073  001C46  6B81               	clrf	(??___ftadd+2)& (0+255),b
  9074  001C48  0100               	movlb	0	; () banked
  9075  001C4A  357D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9076  001C4C  0100               	movlb	0	; () banked
  9077  001C4E  377F               	rlcf	??___ftadd& (0+255),f,b
  9078  001C50  E301               	bnc	u4701
  9079  001C52  8180               	bsf	(??___ftadd+1)& (0+255),0,b
  9080  001C54                     u4701:
  9081  001C54  0100               	movlb	0	; () banked
  9082  001C56  517F               	movf	??___ftadd& (0+255),w,b
  9083  001C58  0100               	movlb	0	; () banked
  9084  001C5A  6F83               	movwf	___ftadd@exp2& (0+255),b
  9085                           
  9086                           ; BSR set to: 0
  9087  001C5C  0100               	movlb	0	; () banked
  9088  001C5E  5184               	movf	___ftadd@exp1& (0+255),w,b
  9089  001C60  0100               	movlb	0	; () banked
  9090  001C62  B4D8               	btfsc	status,2,c
  9091  001C64  D011               	goto	l1067
  9092                           
  9093                           ; BSR set to: 0
  9094  001C66  0100               	movlb	0	; () banked
  9095  001C68  5183               	movf	___ftadd@exp2& (0+255),w,b
  9096  001C6A  0100               	movlb	0	; () banked
  9097  001C6C  5D84               	subwf	___ftadd@exp1& (0+255),w,b
  9098  001C6E  B0D8               	btfsc	status,0,c
  9099  001C70  D012               	goto	l4739
  9100                           
  9101                           ; BSR set to: 0
  9102  001C72  0100               	movlb	0	; () banked
  9103  001C74  5184               	movf	___ftadd@exp1& (0+255),w,b
  9104  001C76  0800               	sublw	0
  9105  001C78  0100               	movlb	0	; () banked
  9106  001C7A  2583               	addwf	___ftadd@exp2& (0+255),w,b
  9107  001C7C  0100               	movlb	0	; () banked
  9108  001C7E  6F7F               	movwf	??___ftadd& (0+255),b
  9109  001C80  0E18               	movlw	24
  9110  001C82  0100               	movlb	0	; () banked
  9111  001C84  657F               	cpfsgt	??___ftadd& (0+255),b
  9112  001C86  D007               	goto	l4739
  9113  001C88                     l1067:
  9114                           
  9115                           ; BSR set to: 0
  9116  001C88  C07C  F079         	movff	___ftadd@f2,?___ftadd
  9117  001C8C  C07D  F07A         	movff	___ftadd@f2+1,?___ftadd+1
  9118  001C90  C07E  F07B         	movff	___ftadd@f2+2,?___ftadd+2
  9119  001C94  0012               	return	
  9120  001C96                     l4739:
  9121                           
  9122                           ; BSR set to: 0
  9123  001C96  0100               	movlb	0	; () banked
  9124  001C98  5183               	movf	___ftadd@exp2& (0+255),w,b
  9125  001C9A  0100               	movlb	0	; () banked
  9126  001C9C  B4D8               	btfsc	status,2,c
  9127  001C9E  D011               	goto	l1071
  9128                           
  9129                           ; BSR set to: 0
  9130  001CA0  0100               	movlb	0	; () banked
  9131  001CA2  5184               	movf	___ftadd@exp1& (0+255),w,b
  9132  001CA4  0100               	movlb	0	; () banked
  9133  001CA6  5D83               	subwf	___ftadd@exp2& (0+255),w,b
  9134  001CA8  B0D8               	btfsc	status,0,c
  9135  001CAA  D012               	goto	l4745
  9136                           
  9137                           ; BSR set to: 0
  9138  001CAC  0100               	movlb	0	; () banked
  9139  001CAE  5183               	movf	___ftadd@exp2& (0+255),w,b
  9140  001CB0  0800               	sublw	0
  9141  001CB2  0100               	movlb	0	; () banked
  9142  001CB4  2584               	addwf	___ftadd@exp1& (0+255),w,b
  9143  001CB6  0100               	movlb	0	; () banked
  9144  001CB8  6F7F               	movwf	??___ftadd& (0+255),b
  9145  001CBA  0E18               	movlw	24
  9146  001CBC  0100               	movlb	0	; () banked
  9147  001CBE  657F               	cpfsgt	??___ftadd& (0+255),b
  9148  001CC0  D007               	goto	l4745
  9149  001CC2                     l1071:
  9150                           
  9151                           ; BSR set to: 0
  9152  001CC2  C079  F079         	movff	___ftadd@f1,?___ftadd
  9153  001CC6  C07A  F07A         	movff	___ftadd@f1+1,?___ftadd+1
  9154  001CCA  C07B  F07B         	movff	___ftadd@f1+2,?___ftadd+2
  9155  001CCE  0012               	return	
  9156  001CD0                     l4745:
  9157                           
  9158                           ; BSR set to: 0
  9159  001CD0  0E06               	movlw	6
  9160  001CD2  0100               	movlb	0	; () banked
  9161  001CD4  6F82               	movwf	___ftadd@sign& (0+255),b
  9162                           
  9163                           ; BSR set to: 0
  9164  001CD6  0100               	movlb	0	; () banked
  9165  001CD8  AF7B               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9166  001CDA  D003               	goto	l4751
  9167                           
  9168                           ; BSR set to: 0
  9169  001CDC  0100               	movlb	0	; () banked
  9170  001CDE  8F82               	bsf	___ftadd@sign& (0+255),7,b
  9171  001CE0  D000               	goto	l4751
  9172  001CE2                     l4751:
  9173                           
  9174                           ; BSR set to: 0
  9175  001CE2  0100               	movlb	0	; () banked
  9176  001CE4  AF7E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9177  001CE6  D002               	goto	l1073
  9178                           
  9179                           ; BSR set to: 0
  9180  001CE8  0100               	movlb	0	; () banked
  9181  001CEA  8D82               	bsf	___ftadd@sign& (0+255),6,b
  9182  001CEC                     l1073:
  9183                           
  9184                           ; BSR set to: 0
  9185  001CEC  0100               	movlb	0	; () banked
  9186  001CEE  8F7A               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9187                           
  9188                           ; BSR set to: 0
  9189  001CF0  0EFF               	movlw	255
  9190  001CF2  0100               	movlb	0	; () banked
  9191  001CF4  1779               	andwf	___ftadd@f1& (0+255),f,b
  9192  001CF6  0EFF               	movlw	255
  9193  001CF8  0100               	movlb	0	; () banked
  9194  001CFA  177A               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9195  001CFC  0E00               	movlw	0
  9196  001CFE  0100               	movlb	0	; () banked
  9197  001D00  177B               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9198  001D02  0100               	movlb	0	; () banked
  9199  001D04  8F7D               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9200                           
  9201                           ; BSR set to: 0
  9202  001D06  0EFF               	movlw	255
  9203  001D08  0100               	movlb	0	; () banked
  9204  001D0A  177C               	andwf	___ftadd@f2& (0+255),f,b
  9205  001D0C  0EFF               	movlw	255
  9206  001D0E  0100               	movlb	0	; () banked
  9207  001D10  177D               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9208  001D12  0E00               	movlw	0
  9209  001D14  0100               	movlb	0	; () banked
  9210  001D16  177E               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9211                           
  9212                           ; BSR set to: 0
  9213  001D18  0100               	movlb	0	; () banked
  9214  001D1A  5183               	movf	___ftadd@exp2& (0+255),w,b
  9215  001D1C  0100               	movlb	0	; () banked
  9216  001D1E  5D84               	subwf	___ftadd@exp1& (0+255),w,b
  9217  001D20  B0D8               	btfsc	status,0,c
  9218  001D22  D028               	goto	l4771
  9219  001D24                     l4761:
  9220                           
  9221                           ; BSR set to: 0
  9222  001D24  0100               	movlb	0	; () banked
  9223  001D26  90D8               	bcf	status,0,c
  9224  001D28  377C               	rlcf	___ftadd@f2& (0+255),f,b
  9225  001D2A  377D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9226  001D2C  377E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9227  001D2E  0100               	movlb	0	; () banked
  9228  001D30  0783               	decf	___ftadd@exp2& (0+255),f,b
  9229                           
  9230                           ; BSR set to: 0
  9231  001D32  0100               	movlb	0	; () banked
  9232  001D34  5184               	movf	___ftadd@exp1& (0+255),w,b
  9233  001D36  0100               	movlb	0	; () banked
  9234  001D38  1983               	xorwf	___ftadd@exp2& (0+255),w,b
  9235  001D3A  B4D8               	btfsc	status,2,c
  9236  001D3C  D013               	goto	l4769
  9237                           
  9238                           ; BSR set to: 0
  9239  001D3E  0100               	movlb	0	; () banked
  9240  001D40  0782               	decf	___ftadd@sign& (0+255),f,b
  9241  001D42  C082  F07F         	movff	___ftadd@sign,??___ftadd
  9242  001D46  0E07               	movlw	7
  9243  001D48  0100               	movlb	0	; () banked
  9244  001D4A  177F               	andwf	??___ftadd& (0+255),f,b
  9245  001D4C  B4D8               	btfsc	status,2,c
  9246  001D4E  D00A               	goto	l4769
  9247  001D50  D7E9               	goto	l4761
  9248                           
  9249                           ; BSR set to: 0
  9250                           
  9251                           ; BSR set to: 0
  9252  001D52  D008               	goto	l4769
  9253  001D54                     l4767:
  9254                           
  9255                           ; BSR set to: 0
  9256  001D54  0100               	movlb	0	; () banked
  9257  001D56  90D8               	bcf	status,0,c
  9258  001D58  337B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9259  001D5A  337A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9260  001D5C  3379               	rrcf	___ftadd@f1& (0+255),f,b
  9261  001D5E  0100               	movlb	0	; () banked
  9262  001D60  2B84               	incf	___ftadd@exp1& (0+255),f,b
  9263  001D62  D000               	goto	l4769
  9264  001D64                     l4769:
  9265                           
  9266                           ; BSR set to: 0
  9267  001D64  0100               	movlb	0	; () banked
  9268  001D66  5183               	movf	___ftadd@exp2& (0+255),w,b
  9269  001D68  0100               	movlb	0	; () banked
  9270  001D6A  1984               	xorwf	___ftadd@exp1& (0+255),w,b
  9271  001D6C  B4D8               	btfsc	status,2,c
  9272  001D6E  D030               	goto	l1082
  9273  001D70  D7F1               	goto	l4767
  9274                           
  9275                           ; BSR set to: 0
  9276  001D72  D02E               	goto	l1082
  9277  001D74                     l4771:
  9278                           
  9279                           ; BSR set to: 0
  9280  001D74  0100               	movlb	0	; () banked
  9281  001D76  5184               	movf	___ftadd@exp1& (0+255),w,b
  9282  001D78  0100               	movlb	0	; () banked
  9283  001D7A  5D83               	subwf	___ftadd@exp2& (0+255),w,b
  9284  001D7C  B0D8               	btfsc	status,0,c
  9285  001D7E  D028               	goto	l1082
  9286  001D80                     l4773:
  9287                           
  9288                           ; BSR set to: 0
  9289  001D80  0100               	movlb	0	; () banked
  9290  001D82  90D8               	bcf	status,0,c
  9291  001D84  3779               	rlcf	___ftadd@f1& (0+255),f,b
  9292  001D86  377A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9293  001D88  377B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9294  001D8A  0100               	movlb	0	; () banked
  9295  001D8C  0784               	decf	___ftadd@exp1& (0+255),f,b
  9296                           
  9297                           ; BSR set to: 0
  9298  001D8E  0100               	movlb	0	; () banked
  9299  001D90  5184               	movf	___ftadd@exp1& (0+255),w,b
  9300  001D92  0100               	movlb	0	; () banked
  9301  001D94  1983               	xorwf	___ftadd@exp2& (0+255),w,b
  9302  001D96  B4D8               	btfsc	status,2,c
  9303  001D98  D013               	goto	l4781
  9304                           
  9305                           ; BSR set to: 0
  9306  001D9A  0100               	movlb	0	; () banked
  9307  001D9C  0782               	decf	___ftadd@sign& (0+255),f,b
  9308  001D9E  C082  F07F         	movff	___ftadd@sign,??___ftadd
  9309  001DA2  0E07               	movlw	7
  9310  001DA4  0100               	movlb	0	; () banked
  9311  001DA6  177F               	andwf	??___ftadd& (0+255),f,b
  9312  001DA8  B4D8               	btfsc	status,2,c
  9313  001DAA  D00A               	goto	l4781
  9314  001DAC  D7E9               	goto	l4773
  9315                           
  9316                           ; BSR set to: 0
  9317                           
  9318                           ; BSR set to: 0
  9319  001DAE  D008               	goto	l4781
  9320  001DB0                     l4779:
  9321                           
  9322                           ; BSR set to: 0
  9323  001DB0  0100               	movlb	0	; () banked
  9324  001DB2  90D8               	bcf	status,0,c
  9325  001DB4  337E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9326  001DB6  337D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9327  001DB8  337C               	rrcf	___ftadd@f2& (0+255),f,b
  9328  001DBA  0100               	movlb	0	; () banked
  9329  001DBC  2B83               	incf	___ftadd@exp2& (0+255),f,b
  9330  001DBE  D000               	goto	l4781
  9331  001DC0                     l4781:
  9332                           
  9333                           ; BSR set to: 0
  9334  001DC0  0100               	movlb	0	; () banked
  9335  001DC2  5183               	movf	___ftadd@exp2& (0+255),w,b
  9336  001DC4  0100               	movlb	0	; () banked
  9337  001DC6  1984               	xorwf	___ftadd@exp1& (0+255),w,b
  9338  001DC8  B4D8               	btfsc	status,2,c
  9339  001DCA  D002               	goto	l1082
  9340  001DCC  D7F1               	goto	l4779
  9341                           
  9342                           ; BSR set to: 0
  9343  001DCE  D000               	goto	l1082
  9344  001DD0                     l1082:
  9345                           
  9346                           ; BSR set to: 0
  9347  001DD0  0100               	movlb	0	; () banked
  9348  001DD2  AF82               	btfss	___ftadd@sign& (0+255),7,b
  9349  001DD4  D012               	goto	l1091
  9350                           
  9351                           ; BSR set to: 0
  9352  001DD6  0EFF               	movlw	255
  9353  001DD8  0100               	movlb	0	; () banked
  9354  001DDA  1B79               	xorwf	___ftadd@f1& (0+255),f,b
  9355  001DDC  0EFF               	movlw	255
  9356  001DDE  0100               	movlb	0	; () banked
  9357  001DE0  1B7A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9358  001DE2  0EFF               	movlw	255
  9359  001DE4  0100               	movlb	0	; () banked
  9360  001DE6  1B7B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9361  001DE8  0E01               	movlw	1
  9362  001DEA  0100               	movlb	0	; () banked
  9363  001DEC  2779               	addwf	___ftadd@f1& (0+255),f,b
  9364  001DEE  0E00               	movlw	0
  9365  001DF0  0100               	movlb	0	; () banked
  9366  001DF2  237A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9367  001DF4  0E00               	movlw	0
  9368  001DF6  0100               	movlb	0	; () banked
  9369  001DF8  237B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9370  001DFA                     l1091:
  9371                           
  9372                           ; BSR set to: 0
  9373  001DFA  0100               	movlb	0	; () banked
  9374  001DFC  AD82               	btfss	___ftadd@sign& (0+255),6,b
  9375  001DFE  D013               	goto	l4787
  9376                           
  9377                           ; BSR set to: 0
  9378  001E00  0EFF               	movlw	255
  9379  001E02  0100               	movlb	0	; () banked
  9380  001E04  1B7C               	xorwf	___ftadd@f2& (0+255),f,b
  9381  001E06  0EFF               	movlw	255
  9382  001E08  0100               	movlb	0	; () banked
  9383  001E0A  1B7D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9384  001E0C  0EFF               	movlw	255
  9385  001E0E  0100               	movlb	0	; () banked
  9386  001E10  1B7E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9387  001E12  0E01               	movlw	1
  9388  001E14  0100               	movlb	0	; () banked
  9389  001E16  277C               	addwf	___ftadd@f2& (0+255),f,b
  9390  001E18  0E00               	movlw	0
  9391  001E1A  0100               	movlb	0	; () banked
  9392  001E1C  237D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9393  001E1E  0E00               	movlw	0
  9394  001E20  0100               	movlb	0	; () banked
  9395  001E22  237E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9396  001E24  D000               	goto	l4787
  9397  001E26                     l4787:
  9398                           
  9399                           ; BSR set to: 0
  9400  001E26  0E00               	movlw	0
  9401  001E28  0100               	movlb	0	; () banked
  9402  001E2A  6F82               	movwf	___ftadd@sign& (0+255),b
  9403                           
  9404                           ; BSR set to: 0
  9405  001E2C  0100               	movlb	0	; () banked
  9406  001E2E  5179               	movf	___ftadd@f1& (0+255),w,b
  9407  001E30  0100               	movlb	0	; () banked
  9408  001E32  277C               	addwf	___ftadd@f2& (0+255),f,b
  9409  001E34  0100               	movlb	0	; () banked
  9410  001E36  517A               	movf	(___ftadd@f1+1)& (0+255),w,b
  9411  001E38  0100               	movlb	0	; () banked
  9412  001E3A  237D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9413  001E3C  0100               	movlb	0	; () banked
  9414  001E3E  517B               	movf	(___ftadd@f1+2)& (0+255),w,b
  9415  001E40  0100               	movlb	0	; () banked
  9416  001E42  237E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9417                           
  9418                           ; BSR set to: 0
  9419  001E44  0100               	movlb	0	; () banked
  9420  001E46  AF7E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9421  001E48  D016               	goto	l4797
  9422                           
  9423                           ; BSR set to: 0
  9424  001E4A  0EFF               	movlw	255
  9425  001E4C  0100               	movlb	0	; () banked
  9426  001E4E  1B7C               	xorwf	___ftadd@f2& (0+255),f,b
  9427  001E50  0EFF               	movlw	255
  9428  001E52  0100               	movlb	0	; () banked
  9429  001E54  1B7D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9430  001E56  0EFF               	movlw	255
  9431  001E58  0100               	movlb	0	; () banked
  9432  001E5A  1B7E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9433  001E5C  0E01               	movlw	1
  9434  001E5E  0100               	movlb	0	; () banked
  9435  001E60  277C               	addwf	___ftadd@f2& (0+255),f,b
  9436  001E62  0E00               	movlw	0
  9437  001E64  0100               	movlb	0	; () banked
  9438  001E66  237D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9439  001E68  0E00               	movlw	0
  9440  001E6A  0100               	movlb	0	; () banked
  9441  001E6C  237E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9442                           
  9443                           ; BSR set to: 0
  9444  001E6E  0E01               	movlw	1
  9445  001E70  0100               	movlb	0	; () banked
  9446  001E72  6F82               	movwf	___ftadd@sign& (0+255),b
  9447  001E74  D000               	goto	l4797
  9448  001E76                     l4797:
  9449                           
  9450                           ; BSR set to: 0
  9451  001E76  C07C  F017         	movff	___ftadd@f2,___ftpack@arg
  9452  001E7A  C07D  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  9453  001E7E  C07E  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  9454  001E82  C084  F01A         	movff	___ftadd@exp1,___ftpack@exp
  9455  001E86  C082  F01B         	movff	___ftadd@sign,___ftpack@sign
  9456  001E8A  EC6D  F019         	call	___ftpack	;wreg free
  9457  001E8E  C017  F079         	movff	?___ftpack,?___ftadd
  9458  001E92  C018  F07A         	movff	?___ftpack+1,?___ftadd+1
  9459  001E96  C019  F07B         	movff	?___ftpack+2,?___ftadd+2
  9460  001E9A  0012               	return	
  9461  001E9C  0012               	return		;funcret
  9462  001E9E                     __end_of___ftadd:
  9463                           	opt stack 0
  9464                           tblptru	equ	0xFF8
  9465                           tblptrh	equ	0xFF7
  9466                           tblptrl	equ	0xFF6
  9467                           tablat	equ	0xFF5
  9468                           prodh	equ	0xFF4
  9469                           prodl	equ	0xFF3
  9470                           intcon	equ	0xFF2
  9471                           intcon2	equ	0xFF1
  9472                           postinc0	equ	0xFEE
  9473                           wreg	equ	0xFE8
  9474                           postinc1	equ	0xFE6
  9475                           postdec1	equ	0xFE5
  9476                           fsr1h	equ	0xFE2
  9477                           fsr1l	equ	0xFE1
  9478                           postinc2	equ	0xFDE
  9479                           postdec2	equ	0xFDD
  9480                           fsr2h	equ	0xFDA
  9481                           fsr2l	equ	0xFD9
  9482                           status	equ	0xFD8
  9483                           
  9484 ;; *************** function _Battery_Fault *****************
  9485 ;; Defined at:
  9486 ;;		line 11 in file "Battery.c"
  9487 ;; Parameters:    Size  Location     Type
  9488 ;;		None
  9489 ;; Auto vars:     Size  Location     Type
  9490 ;;  i               2   52[COMRAM] int 
  9491 ;;  fault           1   51[COMRAM] unsigned char 
  9492 ;; Return value:  Size  Location     Type
  9493 ;;                  1    wreg      unsigned char 
  9494 ;; Registers used:
  9495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9501 ;;      Params:         0       0       0       0       0       0       0
  9502 ;;      Locals:         3       0       0       0       0       0       0
  9503 ;;      Temps:          0       0       0       0       0       0       0
  9504 ;;      Totals:         3       0       0       0       0       0       0
  9505 ;;Total ram usage:        3 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    5
  9508 ;; This function calls:
  9509 ;;		___ftge
  9510 ;;		___wmul
  9511 ;; This function is called by:
  9512 ;;		_main
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           	psect	text38
  9517  00350E                     __ptext38:
  9518                           	opt stack 0
  9519  00350E                     _Battery_Fault:
  9520                           	opt stack 25
  9521                           
  9522                           ;Battery.c: 13: char fault = 0;
  9523                           
  9524                           ;incstack = 0
  9525  00350E  0E00               	movlw	0
  9526  003510  6E34               	movwf	Battery_Fault@fault,c
  9527                           
  9528                           ;Battery.c: 14: for(int i = 0;i<9;i++)
  9529  003512  0E00               	movlw	0
  9530  003514  6E36               	movwf	Battery_Fault@i+1,c
  9531  003516  0E00               	movlw	0
  9532  003518  6E35               	movwf	Battery_Fault@i,c
  9533  00351A                     l5067:
  9534  00351A  BE36               	btfsc	Battery_Fault@i+1,7,c
  9535  00351C  D008               	goto	l5071
  9536  00351E  5036               	movf	Battery_Fault@i+1,w,c
  9537  003520  E14D               	bnz	l270
  9538  003522  0E09               	movlw	9
  9539  003524  5C35               	subwf	Battery_Fault@i,w,c
  9540  003526  B0D8               	btfsc	status,0,c
  9541  003528  0012               	return	
  9542  00352A  D001               	goto	l5071
  9543  00352C  0012               	return	
  9544  00352E                     l5071:
  9545                           
  9546                           ;Battery.c: 15: {
  9547                           ;Battery.c: 16: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  9548  00352E  0E00               	movlw	0
  9549  003530  6E2B               	movwf	___ftge@ff1,c
  9550  003532  0E40               	movlw	64
  9551  003534  6E2C               	movwf	___ftge@ff1+1,c
  9552  003536  0E40               	movlw	64
  9553  003538  6E2D               	movwf	___ftge@ff1+2,c
  9554  00353A  C035  F025         	movff	Battery_Fault@i,___wmul@multiplier
  9555  00353E  C036  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9556  003542  0E00               	movlw	0
  9557  003544  6E28               	movwf	___wmul@multiplicand+1,c
  9558  003546  0E03               	movlw	3
  9559  003548  6E27               	movwf	___wmul@multiplicand,c
  9560  00354A  ECE8  F01D         	call	___wmul	;wreg free
  9561  00354E  0E1E               	movlw	low _Battery_Volt
  9562  003550  2425               	addwf	?___wmul,w,c
  9563  003552  6ED9               	movwf	fsr2l,c
  9564  003554  0E01               	movlw	high _Battery_Volt
  9565  003556  2026               	addwfc	?___wmul+1,w,c
  9566  003558  6EDA               	movwf	fsr2h,c
  9567  00355A  CFDE F02E          	movff	postinc2,___ftge@ff2
  9568  00355E  CFDE F02F          	movff	postinc2,___ftge@ff2+1
  9569  003562  CFDD F030          	movff	postdec2,___ftge@ff2+2
  9570  003566  EC2A  F01B         	call	___ftge	;wreg free
  9571  00356A  B0D8               	btfsc	status,0,c
  9572  00356C  D023               	goto	l5077
  9573  00356E  C035  F025         	movff	Battery_Fault@i,___wmul@multiplier
  9574  003572  C036  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9575  003576  0E00               	movlw	0
  9576  003578  6E28               	movwf	___wmul@multiplicand+1,c
  9577  00357A  0E03               	movlw	3
  9578  00357C  6E27               	movwf	___wmul@multiplicand,c
  9579  00357E  ECE8  F01D         	call	___wmul	;wreg free
  9580  003582  0E1E               	movlw	low _Battery_Volt
  9581  003584  2425               	addwf	?___wmul,w,c
  9582  003586  6ED9               	movwf	fsr2l,c
  9583  003588  0E01               	movlw	high _Battery_Volt
  9584  00358A  2026               	addwfc	?___wmul+1,w,c
  9585  00358C  6EDA               	movwf	fsr2h,c
  9586  00358E  CFDE F02B          	movff	postinc2,___ftge@ff1
  9587  003592  CFDE F02C          	movff	postinc2,___ftge@ff1+1
  9588  003596  CFDD F02D          	movff	postdec2,___ftge@ff1+2
  9589  00359A  0EB8               	movlw	184
  9590  00359C  6E2E               	movwf	___ftge@ff2,c
  9591  00359E  0E86               	movlw	134
  9592  0035A0  6E2F               	movwf	___ftge@ff2+1,c
  9593  0035A2  0E40               	movlw	64
  9594  0035A4  6E30               	movwf	___ftge@ff2+2,c
  9595  0035A6  EC2A  F01B         	call	___ftge	;wreg free
  9596  0035AA  B0D8               	btfsc	status,0,c
  9597  0035AC  D003               	goto	l5077
  9598                           
  9599                           ;Battery.c: 17: {
  9600                           ;Battery.c: 18: fault = 1;
  9601  0035AE  0E01               	movlw	1
  9602  0035B0  6E34               	movwf	Battery_Fault@fault,c
  9603  0035B2  D000               	goto	l5077
  9604  0035B4                     l5077:
  9605  0035B4  4A35               	infsnz	Battery_Fault@i,f,c
  9606  0035B6  2A36               	incf	Battery_Fault@i+1,f,c
  9607  0035B8  D7B0               	goto	l5067
  9608  0035BA  0012               	return	
  9609  0035BC                     l270:
  9610  0035BC  0012               	return		;funcret
  9611  0035BE                     __end_of_Battery_Fault:
  9612                           	opt stack 0
  9613                           tblptru	equ	0xFF8
  9614                           tblptrh	equ	0xFF7
  9615                           tblptrl	equ	0xFF6
  9616                           tablat	equ	0xFF5
  9617                           prodh	equ	0xFF4
  9618                           prodl	equ	0xFF3
  9619                           intcon	equ	0xFF2
  9620                           intcon2	equ	0xFF1
  9621                           postinc0	equ	0xFEE
  9622                           wreg	equ	0xFE8
  9623                           postinc1	equ	0xFE6
  9624                           postdec1	equ	0xFE5
  9625                           fsr1h	equ	0xFE2
  9626                           fsr1l	equ	0xFE1
  9627                           postinc2	equ	0xFDE
  9628                           postdec2	equ	0xFDD
  9629                           fsr2h	equ	0xFDA
  9630                           fsr2l	equ	0xFD9
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function ___ftge *****************
  9634 ;; Defined at:
  9635 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;  ff1             3   42[COMRAM] float 
  9638 ;;  ff2             3   45[COMRAM] float 
  9639 ;; Auto vars:     Size  Location     Type
  9640 ;;		None
  9641 ;; Return value:  Size  Location     Type
  9642 ;;		None               void
  9643 ;; Registers used:
  9644 ;;		wreg, status,2, status,0
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 0/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9650 ;;      Params:         6       0       0       0       0       0       0
  9651 ;;      Locals:         0       0       0       0       0       0       0
  9652 ;;      Temps:          3       0       0       0       0       0       0
  9653 ;;      Totals:         9       0       0       0       0       0       0
  9654 ;;Total ram usage:        9 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:    4
  9657 ;; This function calls:
  9658 ;;		Nothing
  9659 ;; This function is called by:
  9660 ;;		_Battery_Fault
  9661 ;;		_Temp_Fault
  9662 ;;		_Current_Fault
  9663 ;;		_RunBypas
  9664 ;;		_printf
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           	psect	text39
  9669  003654                     __ptext39:
  9670                           	opt stack 0
  9671  003654                     ___ftge:
  9672                           	opt stack 25
  9673                           
  9674                           ;incstack = 0
  9675  003654  AE2D               	btfss	___ftge@ff1+2,7,c
  9676  003656  D017               	goto	l3739
  9677  003658  C02B  F031         	movff	___ftge@ff1,??___ftge
  9678  00365C  C02C  F032         	movff	___ftge@ff1+1,??___ftge+1
  9679  003660  C02D  F033         	movff	___ftge@ff1+2,??___ftge+2
  9680  003664  1E31               	comf	??___ftge,f,c
  9681  003666  1E32               	comf	??___ftge+1,f,c
  9682  003668  1E33               	comf	??___ftge+2,f,c
  9683  00366A  2A31               	incf	??___ftge,f,c
  9684  00366C  0E00               	movlw	0
  9685  00366E  2232               	addwfc	??___ftge+1,f,c
  9686  003670  2233               	addwfc	??___ftge+2,f,c
  9687  003672  0E00               	movlw	0
  9688  003674  2431               	addwf	??___ftge,w,c
  9689  003676  6E2B               	movwf	___ftge@ff1,c
  9690  003678  0E00               	movlw	0
  9691  00367A  2032               	addwfc	??___ftge+1,w,c
  9692  00367C  6E2C               	movwf	___ftge@ff1+1,c
  9693  00367E  0E80               	movlw	128
  9694  003680  2033               	addwfc	??___ftge+2,w,c
  9695  003682  6E2D               	movwf	___ftge@ff1+2,c
  9696  003684  D000               	goto	l3739
  9697  003686                     l3739:
  9698  003686  AE30               	btfss	___ftge@ff2+2,7,c
  9699  003688  D017               	goto	l3743
  9700  00368A  C02E  F031         	movff	___ftge@ff2,??___ftge
  9701  00368E  C02F  F032         	movff	___ftge@ff2+1,??___ftge+1
  9702  003692  C030  F033         	movff	___ftge@ff2+2,??___ftge+2
  9703  003696  1E31               	comf	??___ftge,f,c
  9704  003698  1E32               	comf	??___ftge+1,f,c
  9705  00369A  1E33               	comf	??___ftge+2,f,c
  9706  00369C  2A31               	incf	??___ftge,f,c
  9707  00369E  0E00               	movlw	0
  9708  0036A0  2232               	addwfc	??___ftge+1,f,c
  9709  0036A2  2233               	addwfc	??___ftge+2,f,c
  9710  0036A4  0E00               	movlw	0
  9711  0036A6  2431               	addwf	??___ftge,w,c
  9712  0036A8  6E2E               	movwf	___ftge@ff2,c
  9713  0036AA  0E00               	movlw	0
  9714  0036AC  2032               	addwfc	??___ftge+1,w,c
  9715  0036AE  6E2F               	movwf	___ftge@ff2+1,c
  9716  0036B0  0E80               	movlw	128
  9717  0036B2  2033               	addwfc	??___ftge+2,w,c
  9718  0036B4  6E30               	movwf	___ftge@ff2+2,c
  9719  0036B6  D000               	goto	l3743
  9720  0036B8                     l3743:
  9721  0036B8  0E00               	movlw	0
  9722  0036BA  1A2B               	xorwf	___ftge@ff1,f,c
  9723  0036BC  0E00               	movlw	0
  9724  0036BE  1A2C               	xorwf	___ftge@ff1+1,f,c
  9725  0036C0  0E80               	movlw	128
  9726  0036C2  1A2D               	xorwf	___ftge@ff1+2,f,c
  9727  0036C4  0E00               	movlw	0
  9728  0036C6  1A2E               	xorwf	___ftge@ff2,f,c
  9729  0036C8  0E00               	movlw	0
  9730  0036CA  1A2F               	xorwf	___ftge@ff2+1,f,c
  9731  0036CC  0E80               	movlw	128
  9732  0036CE  1A30               	xorwf	___ftge@ff2+2,f,c
  9733  0036D0  502E               	movf	___ftge@ff2,w,c
  9734  0036D2  5C2B               	subwf	___ftge@ff1,w,c
  9735  0036D4  502F               	movf	___ftge@ff2+1,w,c
  9736  0036D6  582C               	subwfb	___ftge@ff1+1,w,c
  9737  0036D8  5030               	movf	___ftge@ff2+2,w,c
  9738  0036DA  582D               	subwfb	___ftge@ff1+2,w,c
  9739  0036DC  B0D8               	btfsc	status,0,c
  9740  0036DE  D002               	goto	l3749
  9741  0036E0  90D8               	bcf	status,0,c
  9742  0036E2  0012               	return	
  9743  0036E4                     l3749:
  9744  0036E4  80D8               	bsf	status,0,c
  9745  0036E6  0012               	return	
  9746  0036E8  0012               	return		;funcret
  9747  0036EA                     __end_of___ftge:
  9748                           	opt stack 0
  9749                           tblptru	equ	0xFF8
  9750                           tblptrh	equ	0xFF7
  9751                           tblptrl	equ	0xFF6
  9752                           tablat	equ	0xFF5
  9753                           prodh	equ	0xFF4
  9754                           prodl	equ	0xFF3
  9755                           intcon	equ	0xFF2
  9756                           intcon2	equ	0xFF1
  9757                           postinc0	equ	0xFEE
  9758                           wreg	equ	0xFE8
  9759                           postinc1	equ	0xFE6
  9760                           postdec1	equ	0xFE5
  9761                           fsr1h	equ	0xFE2
  9762                           fsr1l	equ	0xFE1
  9763                           postinc2	equ	0xFDE
  9764                           postdec2	equ	0xFDD
  9765                           fsr2h	equ	0xFDA
  9766                           fsr2l	equ	0xFD9
  9767                           status	equ	0xFD8
  9768                           
  9769 ;; *************** function _Battery_Convert *****************
  9770 ;; Defined at:
  9771 ;;		line 47 in file "Battery.c"
  9772 ;; Parameters:    Size  Location     Type
  9773 ;;		None
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  x               2   15[BANK0 ] int 
  9776 ;; Return value:  Size  Location     Type
  9777 ;;		None               void
  9778 ;; Registers used:
  9779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9785 ;;      Params:         0       0       0       0       0       0       0
  9786 ;;      Locals:         0       2       0       0       0       0       0
  9787 ;;      Temps:          0       0       0       0       0       0       0
  9788 ;;      Totals:         0       2       0       0       0       0       0
  9789 ;;Total ram usage:        2 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; Hardware stack levels required when called:    6
  9792 ;; This function calls:
  9793 ;;		___awtoft
  9794 ;;		___ftdiv
  9795 ;;		___ftmul
  9796 ;;		___wmul
  9797 ;; This function is called by:
  9798 ;;		_main
  9799 ;; This function uses a non-reentrant model
  9800 ;;
  9801                           
  9802                           	psect	text40
  9803  0033A0                     __ptext40:
  9804                           	opt stack 0
  9805  0033A0                     _Battery_Convert:
  9806                           	opt stack 24
  9807                           
  9808                           ;Battery.c: 49: int x;
  9809                           ;Battery.c: 50: for(x = 0; x < 7; x++)
  9810                           
  9811                           ;incstack = 0
  9812  0033A0  0E00               	movlw	0
  9813  0033A2  0100               	movlb	0	; () banked
  9814  0033A4  6F70               	movwf	(Battery_Convert@x+1)& (0+255),b
  9815  0033A6  0E00               	movlw	0
  9816  0033A8  6F6F               	movwf	Battery_Convert@x& (0+255),b
  9817  0033AA                     l5083:
  9818                           
  9819                           ; BSR set to: 0
  9820  0033AA  0100               	movlb	0	; () banked
  9821  0033AC  BF70               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
  9822  0033AE  D00A               	goto	l5087
  9823  0033B0  0100               	movlb	0	; () banked
  9824  0033B2  5170               	movf	(Battery_Convert@x+1)& (0+255),w,b
  9825  0033B4  E152               	bnz	l285
  9826  0033B6  0E07               	movlw	7
  9827  0033B8  0100               	movlb	0	; () banked
  9828  0033BA  5D6F               	subwf	Battery_Convert@x& (0+255),w,b
  9829  0033BC  B0D8               	btfsc	status,0,c
  9830  0033BE  0012               	return	
  9831  0033C0  D001               	goto	l5087
  9832                           
  9833                           ; BSR set to: 0
  9834  0033C2  0012               	return	
  9835  0033C4                     l5087:
  9836                           
  9837                           ; BSR set to: 0
  9838                           ;Battery.c: 51: {
  9839                           ;Battery.c: 52: Battery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0);
  9840  0033C4  C06F  F025         	movff	Battery_Convert@x,___wmul@multiplier
  9841  0033C8  C070  F026         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  9842  0033CC  0E00               	movlw	0
  9843  0033CE  6E28               	movwf	___wmul@multiplicand+1,c
  9844  0033D0  0E03               	movlw	3
  9845  0033D2  6E27               	movwf	___wmul@multiplicand,c
  9846  0033D4  ECE8  F01D         	call	___wmul	;wreg free
  9847  0033D8  0E1E               	movlw	low _Battery_Volt
  9848  0033DA  2425               	addwf	?___wmul,w,c
  9849  0033DC  6ED9               	movwf	fsr2l,c
  9850  0033DE  0E01               	movlw	high _Battery_Volt
  9851  0033E0  2026               	addwfc	?___wmul+1,w,c
  9852  0033E2  6EDA               	movwf	fsr2h,c
  9853  0033E4  0E00               	movlw	0
  9854  0033E6  6E32               	movwf	___ftdiv@f2,c
  9855  0033E8  0E80               	movlw	128
  9856  0033EA  6E33               	movwf	___ftdiv@f2+1,c
  9857  0033EC  0E44               	movlw	68
  9858  0033EE  6E34               	movwf	___ftdiv@f2+2,c
  9859  0033F0  90D8               	bcf	status,0,c
  9860  0033F2  0100               	movlb	0	; () banked
  9861  0033F4  356F               	rlcf	Battery_Convert@x& (0+255),w,b
  9862  0033F6  6EE1               	movwf	fsr1l,c
  9863  0033F8  0100               	movlb	0	; () banked
  9864  0033FA  3570               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  9865  0033FC  6EE2               	movwf	fsr1h,c
  9866  0033FE  0EB4               	movlw	low _Battery_Adc
  9867  003400  26E1               	addwf	fsr1l,f,c
  9868  003402  0E00               	movlw	high _Battery_Adc
  9869  003404  22E2               	addwfc	fsr1h,f,c
  9870  003406  CFE6 F02B          	movff	postinc1,___awtoft@c
  9871  00340A  CFE5 F02C          	movff	postdec1,___awtoft@c+1
  9872  00340E  EC60  F01D         	call	___awtoft	;wreg free
  9873  003412  C02B  F02F         	movff	?___awtoft,___ftdiv@f1
  9874  003416  C02C  F030         	movff	?___awtoft+1,___ftdiv@f1+1
  9875  00341A  C02D  F031         	movff	?___awtoft+2,___ftdiv@f1+2
  9876  00341E  ECB4  F017         	call	___ftdiv	;wreg free
  9877  003422  C02F  F060         	movff	?___ftdiv,___ftmul@f1
  9878  003426  C030  F061         	movff	?___ftdiv+1,___ftmul@f1+1
  9879  00342A  C031  F062         	movff	?___ftdiv+2,___ftmul@f1+2
  9880  00342E  0E00               	movlw	0
  9881  003430  0100               	movlb	0	; () banked
  9882  003432  6F63               	movwf	___ftmul@f2& (0+255),b
  9883  003434  0EA0               	movlw	160
  9884  003436  0100               	movlb	0	; () banked
  9885  003438  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  9886  00343A  0E40               	movlw	64
  9887  00343C  0100               	movlb	0	; () banked
  9888  00343E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  9889  003440  ECDF  F013         	call	___ftmul	;wreg free
  9890  003444  C060  FFDE         	movff	?___ftmul,postinc2
  9891  003448  C061  FFDE         	movff	?___ftmul+1,postinc2
  9892  00344C  C062  FFDE         	movff	?___ftmul+2,postinc2
  9893  003450  0100               	movlb	0	; () banked
  9894  003452  4B6F               	infsnz	Battery_Convert@x& (0+255),f,b
  9895  003454  2B70               	incf	(Battery_Convert@x+1)& (0+255),f,b
  9896  003456  D7A9               	goto	l5083
  9897                           
  9898                           ; BSR set to: 0
  9899  003458  0012               	return	
  9900  00345A                     l285:
  9901                           
  9902                           ; BSR set to: 0
  9903  00345A  0012               	return		;funcret
  9904  00345C                     __end_of_Battery_Convert:
  9905                           	opt stack 0
  9906                           tblptru	equ	0xFF8
  9907                           tblptrh	equ	0xFF7
  9908                           tblptrl	equ	0xFF6
  9909                           tablat	equ	0xFF5
  9910                           prodh	equ	0xFF4
  9911                           prodl	equ	0xFF3
  9912                           intcon	equ	0xFF2
  9913                           intcon2	equ	0xFF1
  9914                           postinc0	equ	0xFEE
  9915                           wreg	equ	0xFE8
  9916                           postinc1	equ	0xFE6
  9917                           postdec1	equ	0xFE5
  9918                           fsr1h	equ	0xFE2
  9919                           fsr1l	equ	0xFE1
  9920                           postinc2	equ	0xFDE
  9921                           postdec2	equ	0xFDD
  9922                           fsr2h	equ	0xFDA
  9923                           fsr2l	equ	0xFD9
  9924                           status	equ	0xFD8
  9925                           
  9926 ;; *************** function ___wmul *****************
  9927 ;; Defined at:
  9928 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9929 ;; Parameters:    Size  Location     Type
  9930 ;;  multiplier      2   36[COMRAM] unsigned int 
  9931 ;;  multiplicand    2   38[COMRAM] unsigned int 
  9932 ;; Auto vars:     Size  Location     Type
  9933 ;;  product         2   40[COMRAM] unsigned int 
  9934 ;; Return value:  Size  Location     Type
  9935 ;;                  2   36[COMRAM] unsigned int 
  9936 ;; Registers used:
  9937 ;;		wreg, status,2, status,0, prodl, prodh
  9938 ;; Tracked objects:
  9939 ;;		On entry : 0/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9943 ;;      Params:         4       0       0       0       0       0       0
  9944 ;;      Locals:         2       0       0       0       0       0       0
  9945 ;;      Temps:          0       0       0       0       0       0       0
  9946 ;;      Totals:         6       0       0       0       0       0       0
  9947 ;;Total ram usage:        6 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; Hardware stack levels required when called:    4
  9950 ;; This function calls:
  9951 ;;		Nothing
  9952 ;; This function is called by:
  9953 ;;		_Battery_Fault
  9954 ;;		_Battery_Convert
  9955 ;;		_Battery_Get
  9956 ;;		_Temp_Fault
  9957 ;;		_Temp_Filter
  9958 ;;		_Temp_Convert
  9959 ;;		_Current_Fault
  9960 ;;		_Current_Filter
  9961 ;;		_Current_Convert
  9962 ;;		_fround
  9963 ;;		_scale
  9964 ;;		_printf
  9965 ;;		_eval_poly
  9966 ;;		_Battery_Filter
  9967 ;;		_Tempeture_Get
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           	psect	text41
  9972  003BD0                     __ptext41:
  9973                           	opt stack 0
  9974  003BD0                     ___wmul:
  9975                           	opt stack 24
  9976                           
  9977                           ; BSR set to: 0
  9978                           ;incstack = 0
  9979  003BD0  5025               	movf	___wmul@multiplier,w,c
  9980  003BD2  0227               	mulwf	___wmul@multiplicand,c
  9981  003BD4  CFF3 F029          	movff	prodl,___wmul@product
  9982  003BD8  CFF4 F02A          	movff	prodh,___wmul@product+1
  9983  003BDC  5025               	movf	___wmul@multiplier,w,c
  9984  003BDE  0228               	mulwf	___wmul@multiplicand+1,c
  9985  003BE0  50F3               	movf	prodl,w,c
  9986  003BE2  262A               	addwf	___wmul@product+1,f,c
  9987  003BE4  5026               	movf	___wmul@multiplier+1,w,c
  9988  003BE6  0227               	mulwf	___wmul@multiplicand,c
  9989  003BE8  50F3               	movf	prodl,w,c
  9990  003BEA  262A               	addwf	___wmul@product+1,f,c
  9991  003BEC  C029  F025         	movff	___wmul@product,?___wmul
  9992  003BF0  C02A  F026         	movff	___wmul@product+1,?___wmul+1
  9993  003BF4  0012               	return	
  9994  003BF6  0012               	return		;funcret
  9995  003BF8                     __end_of___wmul:
  9996                           	opt stack 0
  9997                           tblptru	equ	0xFF8
  9998                           tblptrh	equ	0xFF7
  9999                           tblptrl	equ	0xFF6
 10000                           tablat	equ	0xFF5
 10001                           prodh	equ	0xFF4
 10002                           prodl	equ	0xFF3
 10003                           intcon	equ	0xFF2
 10004                           intcon2	equ	0xFF1
 10005                           postinc0	equ	0xFEE
 10006                           wreg	equ	0xFE8
 10007                           postinc1	equ	0xFE6
 10008                           postdec1	equ	0xFE5
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           postinc2	equ	0xFDE
 10012                           postdec2	equ	0xFDD
 10013                           fsr2h	equ	0xFDA
 10014                           fsr2l	equ	0xFD9
 10015                           status	equ	0xFD8
 10016                           
 10017 ;; *************** function ___ftmul *****************
 10018 ;; Defined at:
 10019 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;  f1              3    0[BANK0 ] float 
 10022 ;;  f2              3    3[BANK0 ] float 
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
 10025 ;;  sign            1   14[BANK0 ] unsigned char 
 10026 ;;  cntr            1   13[BANK0 ] unsigned char 
 10027 ;;  exp             1    9[BANK0 ] unsigned char 
 10028 ;; Return value:  Size  Location     Type
 10029 ;;                  3    0[BANK0 ] float 
 10030 ;; Registers used:
 10031 ;;		wreg, status,2, status,0, cstack
 10032 ;; Tracked objects:
 10033 ;;		On entry : 0/0
 10034 ;;		On exit  : 0/0
 10035 ;;		Unchanged: 0/0
 10036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10037 ;;      Params:         0       6       0       0       0       0       0
 10038 ;;      Locals:         0       6       0       0       0       0       0
 10039 ;;      Temps:          0       3       0       0       0       0       0
 10040 ;;      Totals:         0      15       0       0       0       0       0
 10041 ;;Total ram usage:       15 bytes
 10042 ;; Hardware stack levels used:    1
 10043 ;; Hardware stack levels required when called:    5
 10044 ;; This function calls:
 10045 ;;		___ftpack
 10046 ;; This function is called by:
 10047 ;;		_Battery_Convert
 10048 ;;		_Temp_Filter
 10049 ;;		_Temp_Convert
 10050 ;;		_Current_Filter
 10051 ;;		_fround
 10052 ;;		_scale
 10053 ;;		_printf
 10054 ;;		_log
 10055 ;;		_eval_poly
 10056 ;;		_Battery_Filter
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           	psect	text42
 10061  0027BE                     __ptext42:
 10062                           	opt stack 0
 10063  0027BE                     ___ftmul:
 10064                           	opt stack 23
 10065                           
 10066                           ;incstack = 0
 10067  0027BE  C062  F066         	movff	___ftmul@f1+2,??___ftmul
 10068  0027C2  0100               	movlb	0	; () banked
 10069  0027C4  6B67               	clrf	(??___ftmul+1)& (0+255),b
 10070  0027C6  6B68               	clrf	(??___ftmul+2)& (0+255),b
 10071  0027C8  0100               	movlb	0	; () banked
 10072  0027CA  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10073  0027CC  0100               	movlb	0	; () banked
 10074  0027CE  3766               	rlcf	??___ftmul& (0+255),f,b
 10075  0027D0  E301               	bnc	u4901
 10076  0027D2  8167               	bsf	(??___ftmul+1)& (0+255),0,b
 10077  0027D4                     u4901:
 10078  0027D4  0100               	movlb	0	; () banked
 10079  0027D6  5166               	movf	??___ftmul& (0+255),w,b
 10080  0027D8  0100               	movlb	0	; () banked
 10081  0027DA  6F69               	movwf	___ftmul@exp& (0+255),b
 10082  0027DC  0100               	movlb	0	; () banked
 10083  0027DE  5169               	movf	___ftmul@exp& (0+255),w,b
 10084  0027E0  A4D8               	btfss	status,2,c
 10085  0027E2  D00A               	goto	l4807
 10086                           
 10087                           ; BSR set to: 0
 10088  0027E4  0E00               	movlw	0
 10089  0027E6  0100               	movlb	0	; () banked
 10090  0027E8  6F60               	movwf	?___ftmul& (0+255),b
 10091  0027EA  0E00               	movlw	0
 10092  0027EC  0100               	movlb	0	; () banked
 10093  0027EE  6F61               	movwf	(?___ftmul+1)& (0+255),b
 10094  0027F0  0E00               	movlw	0
 10095  0027F2  0100               	movlb	0	; () banked
 10096  0027F4  6F62               	movwf	(?___ftmul+2)& (0+255),b
 10097                           
 10098                           ; BSR set to: 0
 10099  0027F6  0012               	return	
 10100  0027F8                     l4807:
 10101                           
 10102                           ; BSR set to: 0
 10103  0027F8  C065  F066         	movff	___ftmul@f2+2,??___ftmul
 10104  0027FC  0100               	movlb	0	; () banked
 10105  0027FE  6B67               	clrf	(??___ftmul+1)& (0+255),b
 10106  002800  6B68               	clrf	(??___ftmul+2)& (0+255),b
 10107  002802  0100               	movlb	0	; () banked
 10108  002804  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10109  002806  0100               	movlb	0	; () banked
 10110  002808  3766               	rlcf	??___ftmul& (0+255),f,b
 10111  00280A  E301               	bnc	u4921
 10112  00280C  8167               	bsf	(??___ftmul+1)& (0+255),0,b
 10113  00280E                     u4921:
 10114  00280E  0100               	movlb	0	; () banked
 10115  002810  5166               	movf	??___ftmul& (0+255),w,b
 10116  002812  0100               	movlb	0	; () banked
 10117  002814  6F6E               	movwf	___ftmul@sign& (0+255),b
 10118  002816  0100               	movlb	0	; () banked
 10119  002818  516E               	movf	___ftmul@sign& (0+255),w,b
 10120  00281A  A4D8               	btfss	status,2,c
 10121  00281C  D00A               	goto	l4813
 10122                           
 10123                           ; BSR set to: 0
 10124  00281E  0E00               	movlw	0
 10125  002820  0100               	movlb	0	; () banked
 10126  002822  6F60               	movwf	?___ftmul& (0+255),b
 10127  002824  0E00               	movlw	0
 10128  002826  0100               	movlb	0	; () banked
 10129  002828  6F61               	movwf	(?___ftmul+1)& (0+255),b
 10130  00282A  0E00               	movlw	0
 10131  00282C  0100               	movlb	0	; () banked
 10132  00282E  6F62               	movwf	(?___ftmul+2)& (0+255),b
 10133                           
 10134                           ; BSR set to: 0
 10135  002830  0012               	return	
 10136  002832                     l4813:
 10137                           
 10138                           ; BSR set to: 0
 10139  002832  0100               	movlb	0	; () banked
 10140  002834  516E               	movf	___ftmul@sign& (0+255),w,b
 10141  002836  0F7B               	addlw	123
 10142  002838  0100               	movlb	0	; () banked
 10143  00283A  2769               	addwf	___ftmul@exp& (0+255),f,b
 10144                           
 10145                           ; BSR set to: 0
 10146  00283C  C062  F06E         	movff	___ftmul@f1+2,___ftmul@sign
 10147  002840  0100               	movlb	0	; () banked
 10148  002842  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 10149  002844  0100               	movlb	0	; () banked
 10150  002846  1B6E               	xorwf	___ftmul@sign& (0+255),f,b
 10151  002848  0E80               	movlw	128
 10152  00284A  0100               	movlb	0	; () banked
 10153  00284C  176E               	andwf	___ftmul@sign& (0+255),f,b
 10154                           
 10155                           ; BSR set to: 0
 10156  00284E  0100               	movlb	0	; () banked
 10157  002850  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10158                           
 10159                           ; BSR set to: 0
 10160  002852  0100               	movlb	0	; () banked
 10161  002854  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10162                           
 10163                           ; BSR set to: 0
 10164  002856  0EFF               	movlw	255
 10165  002858  0100               	movlb	0	; () banked
 10166  00285A  1763               	andwf	___ftmul@f2& (0+255),f,b
 10167  00285C  0EFF               	movlw	255
 10168  00285E  0100               	movlb	0	; () banked
 10169  002860  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10170  002862  0E00               	movlw	0
 10171  002864  0100               	movlb	0	; () banked
 10172  002866  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10173                           
 10174                           ; BSR set to: 0
 10175  002868  0E00               	movlw	0
 10176  00286A  0100               	movlb	0	; () banked
 10177  00286C  6F6A               	movwf	___ftmul@f3_as_product& (0+255),b
 10178  00286E  0E00               	movlw	0
 10179  002870  0100               	movlb	0	; () banked
 10180  002872  6F6B               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10181  002874  0E00               	movlw	0
 10182  002876  0100               	movlb	0	; () banked
 10183  002878  6F6C               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10184                           
 10185                           ; BSR set to: 0
 10186  00287A  0E07               	movlw	7
 10187  00287C  0100               	movlb	0	; () banked
 10188  00287E  6F6D               	movwf	___ftmul@cntr& (0+255),b
 10189  002880  D000               	goto	l4827
 10190  002882                     l4827:
 10191                           
 10192                           ; BSR set to: 0
 10193  002882  0100               	movlb	0	; () banked
 10194  002884  A160               	btfss	___ftmul@f1& (0+255),0,b
 10195  002886  D00D               	goto	l4831
 10196                           
 10197                           ; BSR set to: 0
 10198  002888  0100               	movlb	0	; () banked
 10199  00288A  5163               	movf	___ftmul@f2& (0+255),w,b
 10200  00288C  0100               	movlb	0	; () banked
 10201  00288E  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10202  002890  0100               	movlb	0	; () banked
 10203  002892  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
 10204  002894  0100               	movlb	0	; () banked
 10205  002896  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10206  002898  0100               	movlb	0	; () banked
 10207  00289A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 10208  00289C  0100               	movlb	0	; () banked
 10209  00289E  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10210  0028A0  D000               	goto	l4831
 10211  0028A2                     l4831:
 10212                           
 10213                           ; BSR set to: 0
 10214  0028A2  0100               	movlb	0	; () banked
 10215  0028A4  90D8               	bcf	status,0,c
 10216  0028A6  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10217  0028A8  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10218  0028AA  3360               	rrcf	___ftmul@f1& (0+255),f,b
 10219  0028AC  0100               	movlb	0	; () banked
 10220  0028AE  90D8               	bcf	status,0,c
 10221  0028B0  3763               	rlcf	___ftmul@f2& (0+255),f,b
 10222  0028B2  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10223  0028B4  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10224                           
 10225                           ; BSR set to: 0
 10226  0028B6  0100               	movlb	0	; () banked
 10227  0028B8  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
 10228  0028BA  D7E3               	goto	l4827
 10229  0028BC  D000               	goto	l4835
 10230  0028BE                     l4835:
 10231                           
 10232                           ; BSR set to: 0
 10233  0028BE  0E09               	movlw	9
 10234  0028C0  0100               	movlb	0	; () banked
 10235  0028C2  6F6D               	movwf	___ftmul@cntr& (0+255),b
 10236  0028C4  D000               	goto	l4837
 10237  0028C6                     l4837:
 10238                           
 10239                           ; BSR set to: 0
 10240  0028C6  0100               	movlb	0	; () banked
 10241  0028C8  A160               	btfss	___ftmul@f1& (0+255),0,b
 10242  0028CA  D00D               	goto	l4841
 10243                           
 10244                           ; BSR set to: 0
 10245  0028CC  0100               	movlb	0	; () banked
 10246  0028CE  5163               	movf	___ftmul@f2& (0+255),w,b
 10247  0028D0  0100               	movlb	0	; () banked
 10248  0028D2  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10249  0028D4  0100               	movlb	0	; () banked
 10250  0028D6  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
 10251  0028D8  0100               	movlb	0	; () banked
 10252  0028DA  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10253  0028DC  0100               	movlb	0	; () banked
 10254  0028DE  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 10255  0028E0  0100               	movlb	0	; () banked
 10256  0028E2  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10257  0028E4  D000               	goto	l4841
 10258  0028E6                     l4841:
 10259                           
 10260                           ; BSR set to: 0
 10261  0028E6  0100               	movlb	0	; () banked
 10262  0028E8  90D8               	bcf	status,0,c
 10263  0028EA  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10264  0028EC  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10265  0028EE  3360               	rrcf	___ftmul@f1& (0+255),f,b
 10266  0028F0  0100               	movlb	0	; () banked
 10267  0028F2  90D8               	bcf	status,0,c
 10268  0028F4  336C               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10269  0028F6  336B               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10270  0028F8  336A               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10271                           
 10272                           ; BSR set to: 0
 10273  0028FA  0100               	movlb	0	; () banked
 10274  0028FC  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
 10275  0028FE  D7E3               	goto	l4837
 10276  002900  D000               	goto	l4845
 10277  002902                     l4845:
 10278                           
 10279                           ; BSR set to: 0
 10280  002902  C06A  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
 10281  002906  C06B  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10282  00290A  C06C  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10283  00290E  C069  F01A         	movff	___ftmul@exp,___ftpack@exp
 10284  002912  C06E  F01B         	movff	___ftmul@sign,___ftpack@sign
 10285  002916  EC6D  F019         	call	___ftpack	;wreg free
 10286  00291A  C017  F060         	movff	?___ftpack,?___ftmul
 10287  00291E  C018  F061         	movff	?___ftpack+1,?___ftmul+1
 10288  002922  C019  F062         	movff	?___ftpack+2,?___ftmul+2
 10289  002926  0012               	return	
 10290  002928  0012               	return		;funcret
 10291  00292A                     __end_of___ftmul:
 10292                           	opt stack 0
 10293                           tblptru	equ	0xFF8
 10294                           tblptrh	equ	0xFF7
 10295                           tblptrl	equ	0xFF6
 10296                           tablat	equ	0xFF5
 10297                           prodh	equ	0xFF4
 10298                           prodl	equ	0xFF3
 10299                           intcon	equ	0xFF2
 10300                           intcon2	equ	0xFF1
 10301                           postinc0	equ	0xFEE
 10302                           wreg	equ	0xFE8
 10303                           postinc1	equ	0xFE6
 10304                           postdec1	equ	0xFE5
 10305                           fsr1h	equ	0xFE2
 10306                           fsr1l	equ	0xFE1
 10307                           postinc2	equ	0xFDE
 10308                           postdec2	equ	0xFDD
 10309                           fsr2h	equ	0xFDA
 10310                           fsr2l	equ	0xFD9
 10311                           status	equ	0xFD8
 10312                           
 10313 ;; *************** function ___ftdiv *****************
 10314 ;; Defined at:
 10315 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;  f1              3   46[COMRAM] float 
 10318 ;;  f2              3   49[COMRAM] float 
 10319 ;; Auto vars:     Size  Location     Type
 10320 ;;  f3              3   56[COMRAM] float 
 10321 ;;  sign            1   60[COMRAM] unsigned char 
 10322 ;;  exp             1   59[COMRAM] unsigned char 
 10323 ;;  cntr            1   55[COMRAM] unsigned char 
 10324 ;; Return value:  Size  Location     Type
 10325 ;;                  3   46[COMRAM] float 
 10326 ;; Registers used:
 10327 ;;		wreg, status,2, status,0, cstack
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/0
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10333 ;;      Params:         6       0       0       0       0       0       0
 10334 ;;      Locals:         6       0       0       0       0       0       0
 10335 ;;      Temps:          3       0       0       0       0       0       0
 10336 ;;      Totals:        15       0       0       0       0       0       0
 10337 ;;Total ram usage:       15 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; Hardware stack levels required when called:    5
 10340 ;; This function calls:
 10341 ;;		___ftpack
 10342 ;; This function is called by:
 10343 ;;		_Battery_Convert
 10344 ;;		_Temp_Convert
 10345 ;;		_Current_Fault
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           	psect	text43
 10350  002F68                     __ptext43:
 10351                           	opt stack 0
 10352  002F68                     ___ftdiv:
 10353                           	opt stack 24
 10354                           
 10355                           ;incstack = 0
 10356  002F68  C031  F035         	movff	___ftdiv@f1+2,??___ftdiv
 10357  002F6C  6A36               	clrf	(??___ftdiv+1)& (0+255),c
 10358  002F6E  6A37               	clrf	(??___ftdiv+2)& (0+255),c
 10359  002F70  3430               	rlcf	___ftdiv@f1+1,w,c
 10360  002F72  3635               	rlcf	??___ftdiv& (0+255),f,c
 10361  002F74  E301               	bnc	u5151
 10362  002F76  8036               	bsf	(??___ftdiv+1)& (0+255),0,c
 10363  002F78                     u5151:
 10364  002F78  5035               	movf	??___ftdiv,w,c
 10365  002F7A  6E3C               	movwf	___ftdiv@exp,c
 10366  002F7C  503C               	movf	___ftdiv@exp,w,c
 10367  002F7E  A4D8               	btfss	status,2,c
 10368  002F80  D007               	goto	l5007
 10369  002F82  0E00               	movlw	0
 10370  002F84  6E2F               	movwf	?___ftdiv,c
 10371  002F86  0E00               	movlw	0
 10372  002F88  6E30               	movwf	?___ftdiv+1,c
 10373  002F8A  0E00               	movlw	0
 10374  002F8C  6E31               	movwf	?___ftdiv+2,c
 10375  002F8E  0012               	return	
 10376  002F90                     l5007:
 10377  002F90  C034  F035         	movff	___ftdiv@f2+2,??___ftdiv
 10378  002F94  6A36               	clrf	(??___ftdiv+1)& (0+255),c
 10379  002F96  6A37               	clrf	(??___ftdiv+2)& (0+255),c
 10380  002F98  3433               	rlcf	___ftdiv@f2+1,w,c
 10381  002F9A  3635               	rlcf	??___ftdiv& (0+255),f,c
 10382  002F9C  E301               	bnc	u5171
 10383  002F9E  8036               	bsf	(??___ftdiv+1)& (0+255),0,c
 10384  002FA0                     u5171:
 10385  002FA0  5035               	movf	??___ftdiv,w,c
 10386  002FA2  6E3D               	movwf	___ftdiv@sign,c
 10387  002FA4  503D               	movf	___ftdiv@sign,w,c
 10388  002FA6  A4D8               	btfss	status,2,c
 10389  002FA8  D007               	goto	l5013
 10390  002FAA  0E00               	movlw	0
 10391  002FAC  6E2F               	movwf	?___ftdiv,c
 10392  002FAE  0E00               	movlw	0
 10393  002FB0  6E30               	movwf	?___ftdiv+1,c
 10394  002FB2  0E00               	movlw	0
 10395  002FB4  6E31               	movwf	?___ftdiv+2,c
 10396  002FB6  0012               	return	
 10397  002FB8                     l5013:
 10398  002FB8  0E00               	movlw	0
 10399  002FBA  6E39               	movwf	___ftdiv@f3,c
 10400  002FBC  0E00               	movlw	0
 10401  002FBE  6E3A               	movwf	___ftdiv@f3+1,c
 10402  002FC0  0E00               	movlw	0
 10403  002FC2  6E3B               	movwf	___ftdiv@f3+2,c
 10404  002FC4  503D               	movf	___ftdiv@sign,w,c
 10405  002FC6  0F89               	addlw	137
 10406  002FC8  5E3C               	subwf	___ftdiv@exp,f,c
 10407  002FCA  C031  F03D         	movff	___ftdiv@f1+2,___ftdiv@sign
 10408  002FCE  5034               	movf	___ftdiv@f2+2,w,c
 10409  002FD0  1A3D               	xorwf	___ftdiv@sign,f,c
 10410  002FD2  0E80               	movlw	128
 10411  002FD4  163D               	andwf	___ftdiv@sign,f,c
 10412  002FD6  8E30               	bsf	___ftdiv@f1+1,7,c
 10413  002FD8  0EFF               	movlw	255
 10414  002FDA  162F               	andwf	___ftdiv@f1,f,c
 10415  002FDC  0EFF               	movlw	255
 10416  002FDE  1630               	andwf	___ftdiv@f1+1,f,c
 10417  002FE0  0E00               	movlw	0
 10418  002FE2  1631               	andwf	___ftdiv@f1+2,f,c
 10419  002FE4  8E33               	bsf	___ftdiv@f2+1,7,c
 10420  002FE6  0EFF               	movlw	255
 10421  002FE8  1632               	andwf	___ftdiv@f2,f,c
 10422  002FEA  0EFF               	movlw	255
 10423  002FEC  1633               	andwf	___ftdiv@f2+1,f,c
 10424  002FEE  0E00               	movlw	0
 10425  002FF0  1634               	andwf	___ftdiv@f2+2,f,c
 10426  002FF2  0E18               	movlw	24
 10427  002FF4  6E38               	movwf	___ftdiv@cntr,c
 10428  002FF6  D000               	goto	l5033
 10429  002FF8                     l5033:
 10430  002FF8  90D8               	bcf	status,0,c
 10431  002FFA  3639               	rlcf	___ftdiv@f3,f,c
 10432  002FFC  363A               	rlcf	___ftdiv@f3+1,f,c
 10433  002FFE  363B               	rlcf	___ftdiv@f3+2,f,c
 10434  003000  5032               	movf	___ftdiv@f2,w,c
 10435  003002  5C2F               	subwf	___ftdiv@f1,w,c
 10436  003004  5033               	movf	___ftdiv@f2+1,w,c
 10437  003006  5830               	subwfb	___ftdiv@f1+1,w,c
 10438  003008  5034               	movf	___ftdiv@f2+2,w,c
 10439  00300A  5831               	subwfb	___ftdiv@f1+2,w,c
 10440  00300C  A0D8               	btfss	status,0,c
 10441  00300E  D007               	goto	l1102
 10442  003010  5032               	movf	___ftdiv@f2,w,c
 10443  003012  5E2F               	subwf	___ftdiv@f1,f,c
 10444  003014  5033               	movf	___ftdiv@f2+1,w,c
 10445  003016  5A30               	subwfb	___ftdiv@f1+1,f,c
 10446  003018  5034               	movf	___ftdiv@f2+2,w,c
 10447  00301A  5A31               	subwfb	___ftdiv@f1+2,f,c
 10448  00301C  8039               	bsf	___ftdiv@f3,0,c
 10449  00301E                     l1102:
 10450  00301E  90D8               	bcf	status,0,c
 10451  003020  362F               	rlcf	___ftdiv@f1,f,c
 10452  003022  3630               	rlcf	___ftdiv@f1+1,f,c
 10453  003024  3631               	rlcf	___ftdiv@f1+2,f,c
 10454  003026  2E38               	decfsz	___ftdiv@cntr,f,c
 10455  003028  D7E7               	goto	l5033
 10456  00302A  D000               	goto	l5043
 10457  00302C                     l5043:
 10458  00302C  C039  F017         	movff	___ftdiv@f3,___ftpack@arg
 10459  003030  C03A  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10460  003034  C03B  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10461  003038  C03C  F01A         	movff	___ftdiv@exp,___ftpack@exp
 10462  00303C  C03D  F01B         	movff	___ftdiv@sign,___ftpack@sign
 10463  003040  EC6D  F019         	call	___ftpack	;wreg free
 10464  003044  C017  F02F         	movff	?___ftpack,?___ftdiv
 10465  003048  C018  F030         	movff	?___ftpack+1,?___ftdiv+1
 10466  00304C  C019  F031         	movff	?___ftpack+2,?___ftdiv+2
 10467  003050  0012               	return	
 10468  003052  0012               	return		;funcret
 10469  003054                     __end_of___ftdiv:
 10470                           	opt stack 0
 10471                           tblptru	equ	0xFF8
 10472                           tblptrh	equ	0xFF7
 10473                           tblptrl	equ	0xFF6
 10474                           tablat	equ	0xFF5
 10475                           prodh	equ	0xFF4
 10476                           prodl	equ	0xFF3
 10477                           intcon	equ	0xFF2
 10478                           intcon2	equ	0xFF1
 10479                           postinc0	equ	0xFEE
 10480                           wreg	equ	0xFE8
 10481                           postinc1	equ	0xFE6
 10482                           postdec1	equ	0xFE5
 10483                           fsr1h	equ	0xFE2
 10484                           fsr1l	equ	0xFE1
 10485                           postinc2	equ	0xFDE
 10486                           postdec2	equ	0xFDD
 10487                           fsr2h	equ	0xFDA
 10488                           fsr2l	equ	0xFD9
 10489                           status	equ	0xFD8
 10490                           
 10491 ;; *************** function ___awtoft *****************
 10492 ;; Defined at:
 10493 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;  c               2   42[COMRAM] int 
 10496 ;; Auto vars:     Size  Location     Type
 10497 ;;  sign            1   45[COMRAM] unsigned char 
 10498 ;; Return value:  Size  Location     Type
 10499 ;;                  3   42[COMRAM] float 
 10500 ;; Registers used:
 10501 ;;		wreg, status,2, status,0, cstack
 10502 ;; Tracked objects:
 10503 ;;		On entry : 0/0
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10507 ;;      Params:         3       0       0       0       0       0       0
 10508 ;;      Locals:         1       0       0       0       0       0       0
 10509 ;;      Temps:          0       0       0       0       0       0       0
 10510 ;;      Totals:         4       0       0       0       0       0       0
 10511 ;;Total ram usage:        4 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; Hardware stack levels required when called:    5
 10514 ;; This function calls:
 10515 ;;		___ftpack
 10516 ;; This function is called by:
 10517 ;;		_Battery_Convert
 10518 ;;		_Temp_Convert
 10519 ;;		_Current_Convert
 10520 ;;		_log
 10521 ;; This function uses a non-reentrant model
 10522 ;;
 10523                           
 10524                           	psect	text44
 10525  003AC0                     __ptext44:
 10526                           	opt stack 0
 10527  003AC0                     ___awtoft:
 10528                           	opt stack 23
 10529                           
 10530                           ;incstack = 0
 10531  003AC0  0E00               	movlw	0
 10532  003AC2  6E2E               	movwf	___awtoft@sign,c
 10533  003AC4  AE2C               	btfss	___awtoft@c+1,7,c
 10534  003AC6  D007               	goto	l4857
 10535  003AC8  6C2B               	negf	___awtoft@c,c
 10536  003ACA  1E2C               	comf	___awtoft@c+1,f,c
 10537  003ACC  B0D8               	btfsc	status,0,c
 10538  003ACE  2A2C               	incf	___awtoft@c+1,f,c
 10539  003AD0  0E01               	movlw	1
 10540  003AD2  6E2E               	movwf	___awtoft@sign,c
 10541  003AD4  D000               	goto	l4857
 10542  003AD6                     l4857:
 10543  003AD6  C02B  F017         	movff	___awtoft@c,___ftpack@arg
 10544  003ADA  C02C  F018         	movff	___awtoft@c+1,___ftpack@arg+1
 10545  003ADE  6A19               	clrf	___ftpack@arg+2,c
 10546  003AE0  0E8E               	movlw	142
 10547  003AE2  6E1A               	movwf	___ftpack@exp,c
 10548  003AE4  C02E  F01B         	movff	___awtoft@sign,___ftpack@sign
 10549  003AE8  EC6D  F019         	call	___ftpack	;wreg free
 10550  003AEC  C017  F02B         	movff	?___ftpack,?___awtoft
 10551  003AF0  C018  F02C         	movff	?___ftpack+1,?___awtoft+1
 10552  003AF4  C019  F02D         	movff	?___ftpack+2,?___awtoft+2
 10553  003AF8  0012               	return	
 10554  003AFA  0012               	return		;funcret
 10555  003AFC                     __end_of___awtoft:
 10556                           	opt stack 0
 10557                           tblptru	equ	0xFF8
 10558                           tblptrh	equ	0xFF7
 10559                           tblptrl	equ	0xFF6
 10560                           tablat	equ	0xFF5
 10561                           prodh	equ	0xFF4
 10562                           prodl	equ	0xFF3
 10563                           intcon	equ	0xFF2
 10564                           intcon2	equ	0xFF1
 10565                           postinc0	equ	0xFEE
 10566                           wreg	equ	0xFE8
 10567                           postinc1	equ	0xFE6
 10568                           postdec1	equ	0xFE5
 10569                           fsr1h	equ	0xFE2
 10570                           fsr1l	equ	0xFE1
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           fsr2h	equ	0xFDA
 10574                           fsr2l	equ	0xFD9
 10575                           status	equ	0xFD8
 10576                           
 10577 ;; *************** function ___ftpack *****************
 10578 ;; Defined at:
 10579 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;  arg             3   22[COMRAM] unsigned um
 10582 ;;  exp             1   25[COMRAM] unsigned char 
 10583 ;;  sign            1   26[COMRAM] unsigned char 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;		None
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  3   22[COMRAM] float 
 10588 ;; Registers used:
 10589 ;;		wreg, status,2, status,0
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10595 ;;      Params:         5       0       0       0       0       0       0
 10596 ;;      Locals:         0       0       0       0       0       0       0
 10597 ;;      Temps:          3       0       0       0       0       0       0
 10598 ;;      Totals:         8       0       0       0       0       0       0
 10599 ;;Total ram usage:        8 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    4
 10602 ;; This function calls:
 10603 ;;		Nothing
 10604 ;; This function is called by:
 10605 ;;		___awtoft
 10606 ;;		___ftadd
 10607 ;;		___ftdiv
 10608 ;;		___ftmul
 10609 ;;		___lltoft
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           	psect	text45
 10614  0032DA                     __ptext45:
 10615                           	opt stack 0
 10616  0032DA                     ___ftpack:
 10617                           	opt stack 23
 10618                           
 10619                           ;incstack = 0
 10620  0032DA  501A               	movf	___ftpack@exp,w,c
 10621  0032DC  B4D8               	btfsc	status,2,c
 10622  0032DE  D005               	goto	l4693
 10623  0032E0  5017               	movf	___ftpack@arg,w,c
 10624  0032E2  1018               	iorwf	___ftpack@arg+1,w,c
 10625  0032E4  1019               	iorwf	___ftpack@arg+2,w,c
 10626  0032E6  A4D8               	btfss	status,2,c
 10627  0032E8  D00E               	goto	l4699
 10628  0032EA                     l4693:
 10629  0032EA  0E00               	movlw	0
 10630  0032EC  6E17               	movwf	?___ftpack,c
 10631  0032EE  0E00               	movlw	0
 10632  0032F0  6E18               	movwf	?___ftpack+1,c
 10633  0032F2  0E00               	movlw	0
 10634  0032F4  6E19               	movwf	?___ftpack+2,c
 10635  0032F6  0012               	return	
 10636  0032F8  D006               	goto	l4699
 10637  0032FA                     l4697:
 10638  0032FA  2A1A               	incf	___ftpack@exp,f,c
 10639  0032FC  90D8               	bcf	status,0,c
 10640  0032FE  3219               	rrcf	___ftpack@arg+2,f,c
 10641  003300  3218               	rrcf	___ftpack@arg+1,f,c
 10642  003302  3217               	rrcf	___ftpack@arg,f,c
 10643  003304  D000               	goto	l4699
 10644  003306                     l4699:
 10645  003306  0E00               	movlw	0
 10646  003308  1417               	andwf	___ftpack@arg,w,c
 10647  00330A  6E1C               	movwf	??___ftpack& (0+255),c
 10648  00330C  0E00               	movlw	0
 10649  00330E  1418               	andwf	___ftpack@arg+1,w,c
 10650  003310  6E1D               	movwf	(??___ftpack+1)& (0+255),c
 10651  003312  0EFE               	movlw	254
 10652  003314  1419               	andwf	___ftpack@arg+2,w,c
 10653  003316  6E1E               	movwf	(??___ftpack+2)& (0+255),c
 10654  003318  501C               	movf	??___ftpack,w,c
 10655  00331A  101D               	iorwf	??___ftpack+1,w,c
 10656  00331C  101E               	iorwf	??___ftpack+2,w,c
 10657  00331E  B4D8               	btfsc	status,2,c
 10658  003320  D00E               	goto	l4705
 10659  003322  D7EB               	goto	l4697
 10660  003324  D00C               	goto	l4705
 10661  003326                     l4701:
 10662  003326  2A1A               	incf	___ftpack@exp,f,c
 10663  003328  0E01               	movlw	1
 10664  00332A  2617               	addwf	___ftpack@arg,f,c
 10665  00332C  0E00               	movlw	0
 10666  00332E  2218               	addwfc	___ftpack@arg+1,f,c
 10667  003330  0E00               	movlw	0
 10668  003332  2219               	addwfc	___ftpack@arg+2,f,c
 10669  003334  90D8               	bcf	status,0,c
 10670  003336  3219               	rrcf	___ftpack@arg+2,f,c
 10671  003338  3218               	rrcf	___ftpack@arg+1,f,c
 10672  00333A  3217               	rrcf	___ftpack@arg,f,c
 10673  00333C  D000               	goto	l4705
 10674  00333E                     l4705:
 10675  00333E  0E00               	movlw	0
 10676  003340  1417               	andwf	___ftpack@arg,w,c
 10677  003342  6E1C               	movwf	??___ftpack& (0+255),c
 10678  003344  0E00               	movlw	0
 10679  003346  1418               	andwf	___ftpack@arg+1,w,c
 10680  003348  6E1D               	movwf	(??___ftpack+1)& (0+255),c
 10681  00334A  0EFF               	movlw	255
 10682  00334C  1419               	andwf	___ftpack@arg+2,w,c
 10683  00334E  6E1E               	movwf	(??___ftpack+2)& (0+255),c
 10684  003350  501C               	movf	??___ftpack,w,c
 10685  003352  101D               	iorwf	??___ftpack+1,w,c
 10686  003354  101E               	iorwf	??___ftpack+2,w,c
 10687  003356  B4D8               	btfsc	status,2,c
 10688  003358  D008               	goto	l4709
 10689  00335A  D7E5               	goto	l4701
 10690  00335C  D006               	goto	l4709
 10691  00335E                     l4707:
 10692  00335E  061A               	decf	___ftpack@exp,f,c
 10693  003360  90D8               	bcf	status,0,c
 10694  003362  3617               	rlcf	___ftpack@arg,f,c
 10695  003364  3618               	rlcf	___ftpack@arg+1,f,c
 10696  003366  3619               	rlcf	___ftpack@arg+2,f,c
 10697  003368  D000               	goto	l4709
 10698  00336A                     l4709:
 10699  00336A  BE18               	btfsc	___ftpack@arg+1,7,c
 10700  00336C  D004               	goto	l1038
 10701  00336E  0E02               	movlw	2
 10702  003370  601A               	cpfslt	___ftpack@exp,c
 10703  003372  D7F5               	goto	l4707
 10704  003374  D000               	goto	l1038
 10705  003376                     l1038:
 10706  003376  B01A               	btfsc	___ftpack@exp,0,c
 10707  003378  D002               	goto	l4715
 10708  00337A  9E18               	bcf	___ftpack@arg+1,7,c
 10709  00337C  D000               	goto	l4715
 10710  00337E                     l4715:
 10711  00337E  90D8               	bcf	status,0,c
 10712  003380  321A               	rrcf	___ftpack@exp,f,c
 10713  003382  501A               	movf	___ftpack@exp,w,c
 10714  003384  1219               	iorwf	___ftpack@arg+2,f,c
 10715  003386  501B               	movf	___ftpack@sign,w,c
 10716  003388  B4D8               	btfsc	status,2,c
 10717  00338A  D002               	goto	l4721
 10718  00338C  8E19               	bsf	___ftpack@arg+2,7,c
 10719  00338E  D000               	goto	l4721
 10720  003390                     l4721:
 10721  003390  C017  F017         	movff	___ftpack@arg,?___ftpack
 10722  003394  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
 10723  003398  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
 10724  00339C  0012               	return	
 10725  00339E  0012               	return		;funcret
 10726  0033A0                     __end_of___ftpack:
 10727                           	opt stack 0
 10728                           tblptru	equ	0xFF8
 10729                           tblptrh	equ	0xFF7
 10730                           tblptrl	equ	0xFF6
 10731                           tablat	equ	0xFF5
 10732                           prodh	equ	0xFF4
 10733                           prodl	equ	0xFF3
 10734                           intcon	equ	0xFF2
 10735                           intcon2	equ	0xFF1
 10736                           postinc0	equ	0xFEE
 10737                           wreg	equ	0xFE8
 10738                           postinc1	equ	0xFE6
 10739                           postdec1	equ	0xFE5
 10740                           fsr1h	equ	0xFE2
 10741                           fsr1l	equ	0xFE1
 10742                           postinc2	equ	0xFDE
 10743                           postdec2	equ	0xFDD
 10744                           fsr2h	equ	0xFDA
 10745                           fsr2l	equ	0xFD9
 10746                           status	equ	0xFD8
 10747                           
 10748 ;; *************** function _INTERRUPT_InterruptManager *****************
 10749 ;; Defined at:
 10750 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 10751 ;; Parameters:    Size  Location     Type
 10752 ;;		None
 10753 ;; Auto vars:     Size  Location     Type
 10754 ;;		None
 10755 ;; Return value:  Size  Location     Type
 10756 ;;		None               void
 10757 ;; Registers used:
 10758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10759 ;; Tracked objects:
 10760 ;;		On entry : 0/0
 10761 ;;		On exit  : 0/0
 10762 ;;		Unchanged: 0/0
 10763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10764 ;;      Params:         0       0       0       0       0       0       0
 10765 ;;      Locals:         0       0       0       0       0       0       0
 10766 ;;      Temps:         14       0       0       0       0       0       0
 10767 ;;      Totals:        14       0       0       0       0       0       0
 10768 ;;Total ram usage:       14 bytes
 10769 ;; Hardware stack levels used:    1
 10770 ;; Hardware stack levels required when called:    3
 10771 ;; This function calls:
 10772 ;;		_ADC_ISR
 10773 ;;		_TMR1_ISR
 10774 ;; This function is called by:
 10775 ;;		Interrupt level 2
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           	psect	intcode
 10780  000008                     __pintcode:
 10781                           	opt stack 0
 10782  000008                     _INTERRUPT_InterruptManager:
 10783                           	opt stack 22
 10784                           
 10785                           ;incstack = 0
 10786  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
 10787  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 10788  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 10789  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 10790  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 10791  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 10792  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 10793  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 10794  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
 10795  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
 10796  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 10797  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 10798  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 10799  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
 10800                           
 10801                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 10802  000040  AA9D               	btfss	3997,5,c	;volatile
 10803  000042  D004               	goto	i2l218
 10804  000044  BA9E               	btfsc	3998,5,c	;volatile
 10805  000046  D014               	goto	i2l226
 10806  000048  D001               	goto	i2l218
 10807                           
 10808                           ;interrupt_manager.c: 73: {
 10809                           ;interrupt_manager.c: 75: }
 10810  00004A  D012               	goto	i2l226
 10811  00004C                     i2l218:
 10812                           
 10813                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 10814  00004C  BC9D               	btfsc	3997,6,c	;volatile
 10815  00004E  AC9E               	btfss	3998,6,c	;volatile
 10816  000050  D003               	goto	i2l220
 10817                           
 10818                           ;interrupt_manager.c: 77: {
 10819                           ;interrupt_manager.c: 78: ADC_ISR();
 10820  000052  EC89  F009         	call	_ADC_ISR	;wreg free
 10821                           
 10822                           ;interrupt_manager.c: 79: }
 10823  000056  D00C               	goto	i2l226
 10824  000058                     i2l220:
 10825                           
 10826                           ;interrupt_manager.c: 80: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 10827  000058  A89D               	btfss	3997,4,c	;volatile
 10828  00005A  D004               	goto	i2l222
 10829  00005C  B89E               	btfsc	3998,4,c	;volatile
 10830  00005E  D008               	goto	i2l226
 10831  000060  D001               	goto	i2l222
 10832                           
 10833                           ;interrupt_manager.c: 81: {
 10834                           ;interrupt_manager.c: 83: }
 10835  000062  D006               	goto	i2l226
 10836  000064                     i2l222:
 10837                           
 10838                           ;interrupt_manager.c: 84: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 10839  000064  B09D               	btfsc	3997,0,c	;volatile
 10840  000066  A09E               	btfss	3998,0,c	;volatile
 10841  000068  D003               	goto	i2l226
 10842                           
 10843                           ;interrupt_manager.c: 85: {
 10844                           ;interrupt_manager.c: 86: TMR1_ISR();
 10845  00006A  ECE5  F01C         	call	_TMR1_ISR	;wreg free
 10846                           
 10847                           ;interrupt_manager.c: 88: else
 10848                           ;interrupt_manager.c: 89: {
 10849                           
 10850                           ;interrupt_manager.c: 87: }
 10851  00006E  D000               	goto	i2l226
 10852  000070                     i2l226:
 10853  000070  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 10854  000074  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 10855  000078  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 10856  00007C  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 10857  000080  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 10858  000084  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 10859  000088  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 10860  00008C  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 10861  000090  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 10862  000094  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 10863  000098  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 10864  00009C  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 10865  0000A0  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 10866  0000A4  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 10867  0000A8  0011               	retfie		f
 10868  0000AA                     __end_of_INTERRUPT_InterruptManager:
 10869                           	opt stack 0
 10870                           pclatu	equ	0xFFB
 10871                           pclath	equ	0xFFA
 10872                           tblptru	equ	0xFF8
 10873                           tblptrh	equ	0xFF7
 10874                           tblptrl	equ	0xFF6
 10875                           tablat	equ	0xFF5
 10876                           prodh	equ	0xFF4
 10877                           prodl	equ	0xFF3
 10878                           intcon	equ	0xFF2
 10879                           intcon2	equ	0xFF1
 10880                           postinc0	equ	0xFEE
 10881                           fsr0h	equ	0xFEA
 10882                           fsr0l	equ	0xFE9
 10883                           wreg	equ	0xFE8
 10884                           postinc1	equ	0xFE6
 10885                           postdec1	equ	0xFE5
 10886                           fsr1h	equ	0xFE2
 10887                           fsr1l	equ	0xFE1
 10888                           postinc2	equ	0xFDE
 10889                           postdec2	equ	0xFDD
 10890                           fsr2h	equ	0xFDA
 10891                           fsr2l	equ	0xFD9
 10892                           status	equ	0xFD8
 10893                           
 10894 ;; *************** function _TMR1_ISR *****************
 10895 ;; Defined at:
 10896 ;;		line 117 in file "mcc_generated_files/tmr1.c"
 10897 ;; Parameters:    Size  Location     Type
 10898 ;;		None
 10899 ;; Auto vars:     Size  Location     Type
 10900 ;;		None
 10901 ;; Return value:  Size  Location     Type
 10902 ;;		None               void
 10903 ;; Registers used:
 10904 ;;		wreg, status,2, status,0, cstack
 10905 ;; Tracked objects:
 10906 ;;		On entry : 0/0
 10907 ;;		On exit  : 0/0
 10908 ;;		Unchanged: 0/0
 10909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10910 ;;      Params:         0       0       0       0       0       0       0
 10911 ;;      Locals:         0       0       0       0       0       0       0
 10912 ;;      Temps:          0       0       0       0       0       0       0
 10913 ;;      Totals:         0       0       0       0       0       0       0
 10914 ;;Total ram usage:        0 bytes
 10915 ;; Hardware stack levels used:    1
 10916 ;; Hardware stack levels required when called:    2
 10917 ;; This function calls:
 10918 ;;		_Battery_Read
 10919 ;;		_Current_Read
 10920 ;;		_Temp_Read
 10921 ;; This function is called by:
 10922 ;;		_INTERRUPT_InterruptManager
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           	psect	text47
 10927  0039CA                     __ptext47:
 10928                           	opt stack 0
 10929  0039CA                     _TMR1_ISR:
 10930                           	opt stack 22
 10931                           
 10932                           ;tmr1.c: 119: static volatile unsigned int CountCallBack = 0;
 10933                           ;tmr1.c: 123: PIR1bits.TMR1IF = 0;
 10934                           
 10935                           ;incstack = 0
 10936  0039CA  909E               	bcf	3998,0,c	;volatile
 10937                           
 10938                           ;tmr1.c: 126: TMR1H = (timer1ReloadVal >> 8);
 10939  0039CC  5049               	movf	_timer1ReloadVal+1,w,c	;volatile
 10940  0039CE  6ECF               	movwf	4047,c	;volatile
 10941                           
 10942                           ;tmr1.c: 127: TMR1L = (uint8_t) timer1ReloadVal;
 10943  0039D0  C048  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 10944                           
 10945                           ;tmr1.c: 130: if (++CountCallBack >= 4)
 10946  0039D4  4A41               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
 10947  0039D6  2A42               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
 10948  0039D8  5042               	movf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 10949  0039DA  E104               	bnz	i2u353_40
 10950  0039DC  0E04               	movlw	4
 10951  0039DE  5C41               	subwf	TMR1_ISR@CountCallBack,w,c	;volatile
 10952  0039E0  A0D8               	btfss	status,0,c
 10953  0039E2  D007               	goto	i2l3861
 10954  0039E4                     i2u353_40:
 10955                           
 10956                           ;tmr1.c: 131: {
 10957                           ;tmr1.c: 133: do { LATA4 = ~LATA4; } while(0);
 10958  0039E4  7889               	btg	3977,4,c	;volatile
 10959  0039E6  D000               	goto	i2l3859
 10960  0039E8                     i2l3859:
 10961                           
 10962                           ;tmr1.c: 136: CountCallBack = 0;
 10963  0039E8  0E00               	movlw	0
 10964  0039EA  6E42               	movwf	TMR1_ISR@CountCallBack+1,c	;volatile
 10965  0039EC  0E00               	movlw	0
 10966  0039EE  6E41               	movwf	TMR1_ISR@CountCallBack,c	;volatile
 10967  0039F0  D000               	goto	i2l3861
 10968  0039F2                     i2l3861:
 10969                           
 10970                           ;tmr1.c: 137: }
 10971                           ;tmr1.c: 138: if(CountCallBack == 1)
 10972  0039F2  0441               	decf	TMR1_ISR@CountCallBack,w,c	;volatile
 10973  0039F4  1042               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 10974  0039F6  A4D8               	btfss	status,2,c
 10975  0039F8  D003               	goto	i2l3865
 10976                           
 10977                           ;tmr1.c: 139: {
 10978                           ;tmr1.c: 140: Current_Read();
 10979  0039FA  EC68  F01E         	call	_Current_Read	;wreg free
 10980  0039FE  D000               	goto	i2l3865
 10981  003A00                     i2l3865:
 10982                           
 10983                           ;tmr1.c: 141: }
 10984                           ;tmr1.c: 142: if(CountCallBack == 2)
 10985  003A00  0E02               	movlw	2
 10986  003A02  1841               	xorwf	TMR1_ISR@CountCallBack,w,c	;volatile
 10987  003A04  1042               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 10988  003A06  A4D8               	btfss	status,2,c
 10989  003A08  D003               	goto	i2l3869
 10990                           
 10991                           ;tmr1.c: 143: {
 10992                           ;tmr1.c: 144: Battery_Read();
 10993  003A0A  EC74  F01E         	call	_Battery_Read	;wreg free
 10994  003A0E  D000               	goto	i2l3869
 10995  003A10                     i2l3869:
 10996                           
 10997                           ;tmr1.c: 145: }
 10998                           ;tmr1.c: 146: if(CountCallBack == 3)
 10999  003A10  0E03               	movlw	3
 11000  003A12  1841               	xorwf	TMR1_ISR@CountCallBack,w,c	;volatile
 11001  003A14  1042               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 11002  003A16  A4D8               	btfss	status,2,c
 11003  003A18  0012               	return	
 11004                           
 11005                           ;tmr1.c: 147: {
 11006                           ;tmr1.c: 148: Temp_Read();
 11007  003A1A  EC5C  F01E         	call	_Temp_Read	;wreg free
 11008  003A1E  0012               	return	
 11009  003A20  0012               	return		;funcret
 11010  003A22                     __end_of_TMR1_ISR:
 11011                           	opt stack 0
 11012                           pclatu	equ	0xFFB
 11013                           pclath	equ	0xFFA
 11014                           tblptru	equ	0xFF8
 11015                           tblptrh	equ	0xFF7
 11016                           tblptrl	equ	0xFF6
 11017                           tablat	equ	0xFF5
 11018                           prodh	equ	0xFF4
 11019                           prodl	equ	0xFF3
 11020                           intcon	equ	0xFF2
 11021                           intcon2	equ	0xFF1
 11022                           postinc0	equ	0xFEE
 11023                           fsr0h	equ	0xFEA
 11024                           fsr0l	equ	0xFE9
 11025                           wreg	equ	0xFE8
 11026                           postinc1	equ	0xFE6
 11027                           postdec1	equ	0xFE5
 11028                           fsr1h	equ	0xFE2
 11029                           fsr1l	equ	0xFE1
 11030                           postinc2	equ	0xFDE
 11031                           postdec2	equ	0xFDD
 11032                           fsr2h	equ	0xFDA
 11033                           fsr2l	equ	0xFD9
 11034                           status	equ	0xFD8
 11035                           
 11036 ;; *************** function _Temp_Read *****************
 11037 ;; Defined at:
 11038 ;;		line 27 in file "Tempeture.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;		None
 11041 ;; Auto vars:     Size  Location     Type
 11042 ;;		None
 11043 ;; Return value:  Size  Location     Type
 11044 ;;		None               void
 11045 ;; Registers used:
 11046 ;;		wreg, status,2, status,0, cstack
 11047 ;; Tracked objects:
 11048 ;;		On entry : 0/0
 11049 ;;		On exit  : 0/0
 11050 ;;		Unchanged: 0/0
 11051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11052 ;;      Params:         0       0       0       0       0       0       0
 11053 ;;      Locals:         0       0       0       0       0       0       0
 11054 ;;      Temps:          0       0       0       0       0       0       0
 11055 ;;      Totals:         0       0       0       0       0       0       0
 11056 ;;Total ram usage:        0 bytes
 11057 ;; Hardware stack levels used:    1
 11058 ;; Hardware stack levels required when called:    1
 11059 ;; This function calls:
 11060 ;;		_ADC_StartConversion
 11061 ;; This function is called by:
 11062 ;;		_TMR1_ISR
 11063 ;; This function uses a non-reentrant model
 11064 ;;
 11065                           
 11066                           	psect	text48
 11067  003CB8                     __ptext48:
 11068                           	opt stack 0
 11069  003CB8                     _Temp_Read:
 11070                           	opt stack 22
 11071                           
 11072                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
 11073                           
 11074                           ;incstack = 0
 11075  003CB8  0E00               	movlw	0
 11076  003CBA  6E44               	movwf	_ADC_Buffer_Point+1,c
 11077  003CBC  0E00               	movlw	0
 11078  003CBE  6E43               	movwf	_ADC_Buffer_Point,c
 11079                           
 11080                           ;Tempeture.c: 31: Temp_Aquire = 1;
 11081  003CC0  0E01               	movlw	1
 11082  003CC2  6E46               	movwf	_Temp_Aquire,c
 11083                           
 11084                           ;Tempeture.c: 32: ADCON1 = 0x80;
 11085  003CC4  0E80               	movlw	128
 11086  003CC6  6EC1               	movwf	4033,c	;volatile
 11087                           
 11088                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
 11089  003CC8  0E0E               	movlw	14
 11090  003CCA  EC43  F01E         	call	_ADC_StartConversion
 11091  003CCE  0012               	return		;funcret
 11092  003CD0                     __end_of_Temp_Read:
 11093                           	opt stack 0
 11094                           pclatu	equ	0xFFB
 11095                           pclath	equ	0xFFA
 11096                           tblptru	equ	0xFF8
 11097                           tblptrh	equ	0xFF7
 11098                           tblptrl	equ	0xFF6
 11099                           tablat	equ	0xFF5
 11100                           prodh	equ	0xFF4
 11101                           prodl	equ	0xFF3
 11102                           intcon	equ	0xFF2
 11103                           intcon2	equ	0xFF1
 11104                           postinc0	equ	0xFEE
 11105                           fsr0h	equ	0xFEA
 11106                           fsr0l	equ	0xFE9
 11107                           wreg	equ	0xFE8
 11108                           postinc1	equ	0xFE6
 11109                           postdec1	equ	0xFE5
 11110                           fsr1h	equ	0xFE2
 11111                           fsr1l	equ	0xFE1
 11112                           postinc2	equ	0xFDE
 11113                           postdec2	equ	0xFDD
 11114                           fsr2h	equ	0xFDA
 11115                           fsr2l	equ	0xFD9
 11116                           status	equ	0xFD8
 11117                           
 11118 ;; *************** function _Current_Read *****************
 11119 ;; Defined at:
 11120 ;;		line 40 in file "Current.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;		None
 11123 ;; Auto vars:     Size  Location     Type
 11124 ;;		None
 11125 ;; Return value:  Size  Location     Type
 11126 ;;		None               void
 11127 ;; Registers used:
 11128 ;;		wreg, status,2, status,0, cstack
 11129 ;; Tracked objects:
 11130 ;;		On entry : 0/0
 11131 ;;		On exit  : 0/0
 11132 ;;		Unchanged: 0/0
 11133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11134 ;;      Params:         0       0       0       0       0       0       0
 11135 ;;      Locals:         0       0       0       0       0       0       0
 11136 ;;      Temps:          0       0       0       0       0       0       0
 11137 ;;      Totals:         0       0       0       0       0       0       0
 11138 ;;Total ram usage:        0 bytes
 11139 ;; Hardware stack levels used:    1
 11140 ;; Hardware stack levels required when called:    1
 11141 ;; This function calls:
 11142 ;;		_ADC_GetConversion
 11143 ;; This function is called by:
 11144 ;;		_TMR1_ISR
 11145 ;; This function uses a non-reentrant model
 11146 ;;
 11147                           
 11148                           	psect	text49
 11149  003CD0                     __ptext49:
 11150                           	opt stack 0
 11151  003CD0                     _Current_Read:
 11152                           	opt stack 22
 11153                           
 11154                           ;Current.c: 43: ADC_Buffer_Point = 0;
 11155                           
 11156                           ;incstack = 0
 11157  003CD0  0E00               	movlw	0
 11158  003CD2  6E44               	movwf	_ADC_Buffer_Point+1,c
 11159  003CD4  0E00               	movlw	0
 11160  003CD6  6E43               	movwf	_ADC_Buffer_Point,c
 11161                           
 11162                           ;Current.c: 44: Current_Aquire = 1;
 11163  003CD8  0E01               	movlw	1
 11164  003CDA  6E45               	movwf	_Current_Aquire,c
 11165                           
 11166                           ;Current.c: 45: ADCON1 = 0x80;
 11167  003CDC  0E80               	movlw	128
 11168  003CDE  6EC1               	movwf	4033,c	;volatile
 11169                           
 11170                           ;Current.c: 46: ADC_GetConversion(Asen);
 11171  003CE0  0E0B               	movlw	11
 11172  003CE2  ECFC  F01D         	call	_ADC_GetConversion
 11173  003CE6  0012               	return		;funcret
 11174  003CE8                     __end_of_Current_Read:
 11175                           	opt stack 0
 11176                           pclatu	equ	0xFFB
 11177                           pclath	equ	0xFFA
 11178                           tblptru	equ	0xFF8
 11179                           tblptrh	equ	0xFF7
 11180                           tblptrl	equ	0xFF6
 11181                           tablat	equ	0xFF5
 11182                           prodh	equ	0xFF4
 11183                           prodl	equ	0xFF3
 11184                           intcon	equ	0xFF2
 11185                           intcon2	equ	0xFF1
 11186                           postinc0	equ	0xFEE
 11187                           fsr0h	equ	0xFEA
 11188                           fsr0l	equ	0xFE9
 11189                           wreg	equ	0xFE8
 11190                           postinc1	equ	0xFE6
 11191                           postdec1	equ	0xFE5
 11192                           fsr1h	equ	0xFE2
 11193                           fsr1l	equ	0xFE1
 11194                           postinc2	equ	0xFDE
 11195                           postdec2	equ	0xFDD
 11196                           fsr2h	equ	0xFDA
 11197                           fsr2l	equ	0xFD9
 11198                           status	equ	0xFD8
 11199                           
 11200 ;; *************** function _ADC_GetConversion *****************
 11201 ;; Defined at:
 11202 ;;		line 64 in file "mcc_generated_files/adc.c"
 11203 ;; Parameters:    Size  Location     Type
 11204 ;;  channel         1    wreg     enum E8837
 11205 ;; Auto vars:     Size  Location     Type
 11206 ;;  channel         1    1[COMRAM] enum E8837
 11207 ;; Return value:  Size  Location     Type
 11208 ;;                  2  122[None  ] unsigned int 
 11209 ;; Registers used:
 11210 ;;		wreg, status,2, status,0
 11211 ;; Tracked objects:
 11212 ;;		On entry : 0/0
 11213 ;;		On exit  : 0/0
 11214 ;;		Unchanged: 0/0
 11215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11216 ;;      Params:         0       0       0       0       0       0       0
 11217 ;;      Locals:         1       0       0       0       0       0       0
 11218 ;;      Temps:          1       0       0       0       0       0       0
 11219 ;;      Totals:         2       0       0       0       0       0       0
 11220 ;;Total ram usage:        2 bytes
 11221 ;; Hardware stack levels used:    1
 11222 ;; This function calls:
 11223 ;;		Nothing
 11224 ;; This function is called by:
 11225 ;;		_Current_Read
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           	psect	text50
 11230  003BF8                     __ptext50:
 11231                           	opt stack 0
 11232  003BF8                     _ADC_GetConversion:
 11233                           	opt stack 22
 11234                           
 11235                           ;incstack = 0
 11236                           ;ADC_GetConversion@channel stored from wreg
 11237  003BF8  6E02               	movwf	ADC_GetConversion@channel,c
 11238                           
 11239                           ;adc.c: 67: ADCON0bits.CHS = channel;
 11240  003BFA  C002  F001         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 11241  003BFE  4601               	rlncf	??_ADC_GetConversion,f,c
 11242  003C00  4601               	rlncf	??_ADC_GetConversion,f,c
 11243  003C02  50C2               	movf	4034,w,c	;volatile
 11244  003C04  1801               	xorwf	??_ADC_GetConversion,w,c
 11245  003C06  0B83               	andlw	-125
 11246  003C08  1801               	xorwf	??_ADC_GetConversion,w,c
 11247  003C0A  6EC2               	movwf	4034,c	;volatile
 11248                           
 11249                           ;adc.c: 70: ADCON0bits.ADON = 1;
 11250  003C0C  80C2               	bsf	4034,0,c	;volatile
 11251                           
 11252                           ;adc.c: 74: ADCON0bits.GO_nDONE = 1;
 11253  003C0E  82C2               	bsf	4034,1,c	;volatile
 11254                           
 11255                           ;adc.c: 77: while (ADCON0bits.GO_nDONE)
 11256  003C10  D000               	goto	i2l123
 11257  003C12                     i2l123:
 11258  003C12  B2C2               	btfsc	4034,1,c	;volatile
 11259  003C14  D7FE               	goto	i2l123
 11260                           
 11261                           ;adc.c: 79: }
 11262                           ;adc.c: 82: return ((ADRESH << 8) + ADRESL);
 11263                           ;	Return value of _ADC_GetConversion is never used
 11264  003C16  50C4               	movf	4036,w,c	;volatile
 11265  003C18  50C3               	movf	4035,w,c	;volatile
 11266  003C1A  0012               	return	
 11267  003C1C  0012               	return		;funcret
 11268  003C1E                     __end_of_ADC_GetConversion:
 11269                           	opt stack 0
 11270                           pclatu	equ	0xFFB
 11271                           pclath	equ	0xFFA
 11272                           tblptru	equ	0xFF8
 11273                           tblptrh	equ	0xFF7
 11274                           tblptrl	equ	0xFF6
 11275                           tablat	equ	0xFF5
 11276                           prodh	equ	0xFF4
 11277                           prodl	equ	0xFF3
 11278                           intcon	equ	0xFF2
 11279                           intcon2	equ	0xFF1
 11280                           postinc0	equ	0xFEE
 11281                           fsr0h	equ	0xFEA
 11282                           fsr0l	equ	0xFE9
 11283                           wreg	equ	0xFE8
 11284                           postinc1	equ	0xFE6
 11285                           postdec1	equ	0xFE5
 11286                           fsr1h	equ	0xFE2
 11287                           fsr1l	equ	0xFE1
 11288                           postinc2	equ	0xFDE
 11289                           postdec2	equ	0xFDD
 11290                           fsr2h	equ	0xFDA
 11291                           fsr2l	equ	0xFD9
 11292                           status	equ	0xFD8
 11293                           
 11294 ;; *************** function _Battery_Read *****************
 11295 ;; Defined at:
 11296 ;;		line 24 in file "Battery.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;		None
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;		None
 11301 ;; Return value:  Size  Location     Type
 11302 ;;		None               void
 11303 ;; Registers used:
 11304 ;;		wreg, status,2, status,0, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11310 ;;      Params:         0       0       0       0       0       0       0
 11311 ;;      Locals:         0       0       0       0       0       0       0
 11312 ;;      Temps:          0       0       0       0       0       0       0
 11313 ;;      Totals:         0       0       0       0       0       0       0
 11314 ;;Total ram usage:        0 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    1
 11317 ;; This function calls:
 11318 ;;		_ADC_StartConversion
 11319 ;; This function is called by:
 11320 ;;		_TMR1_ISR
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text51
 11325  003CE8                     __ptext51:
 11326                           	opt stack 0
 11327  003CE8                     _Battery_Read:
 11328                           	opt stack 22
 11329                           
 11330                           ;Battery.c: 27: ADC_Buffer_Point = 0;
 11331                           
 11332                           ;incstack = 0
 11333  003CE8  0E00               	movlw	0
 11334  003CEA  6E44               	movwf	_ADC_Buffer_Point+1,c
 11335  003CEC  0E00               	movlw	0
 11336  003CEE  6E43               	movwf	_ADC_Buffer_Point,c
 11337                           
 11338                           ;Battery.c: 28: Volt_Aquire = 1;
 11339  003CF0  0E01               	movlw	1
 11340  003CF2  6E47               	movwf	_Volt_Aquire,c
 11341                           
 11342                           ;Battery.c: 29: ADCON1 = 0x80;
 11343  003CF4  0E80               	movlw	128
 11344  003CF6  6EC1               	movwf	4033,c	;volatile
 11345                           
 11346                           ;Battery.c: 30: ADC_StartConversion(AN_CELL1);
 11347  003CF8  0E07               	movlw	7
 11348  003CFA  EC43  F01E         	call	_ADC_StartConversion
 11349  003CFE  0012               	return		;funcret
 11350  003D00                     __end_of_Battery_Read:
 11351                           	opt stack 0
 11352                           pclatu	equ	0xFFB
 11353                           pclath	equ	0xFFA
 11354                           tblptru	equ	0xFF8
 11355                           tblptrh	equ	0xFF7
 11356                           tblptrl	equ	0xFF6
 11357                           tablat	equ	0xFF5
 11358                           prodh	equ	0xFF4
 11359                           prodl	equ	0xFF3
 11360                           intcon	equ	0xFF2
 11361                           intcon2	equ	0xFF1
 11362                           postinc0	equ	0xFEE
 11363                           fsr0h	equ	0xFEA
 11364                           fsr0l	equ	0xFE9
 11365                           wreg	equ	0xFE8
 11366                           postinc1	equ	0xFE6
 11367                           postdec1	equ	0xFE5
 11368                           fsr1h	equ	0xFE2
 11369                           fsr1l	equ	0xFE1
 11370                           postinc2	equ	0xFDE
 11371                           postdec2	equ	0xFDD
 11372                           fsr2h	equ	0xFDA
 11373                           fsr2l	equ	0xFD9
 11374                           status	equ	0xFD8
 11375                           
 11376 ;; *************** function _ADC_ISR *****************
 11377 ;; Defined at:
 11378 ;;		line 85 in file "mcc_generated_files/adc.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;		None
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;  ADC_Result      2    6[COMRAM] int 
 11383 ;; Return value:  Size  Location     Type
 11384 ;;		None               void
 11385 ;; Registers used:
 11386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11392 ;;      Params:         0       0       0       0       0       0       0
 11393 ;;      Locals:         2       0       0       0       0       0       0
 11394 ;;      Temps:          2       0       0       0       0       0       0
 11395 ;;      Totals:         4       0       0       0       0       0       0
 11396 ;;Total ram usage:        4 bytes
 11397 ;; Hardware stack levels used:    1
 11398 ;; Hardware stack levels required when called:    1
 11399 ;; This function calls:
 11400 ;;		_ADC_GetConversionResult
 11401 ;;		_ADC_StartConversion
 11402 ;;		_Set_4051
 11403 ;; This function is called by:
 11404 ;;		_INTERRUPT_InterruptManager
 11405 ;; This function uses a non-reentrant model
 11406 ;;
 11407                           
 11408                           	psect	text52
 11409  001312                     __ptext52:
 11410                           	opt stack 0
 11411  001312                     _ADC_ISR:
 11412                           	opt stack 23
 11413                           
 11414                           ;adc.c: 88: PIR1bits.ADIF = 0;
 11415                           
 11416                           ;incstack = 0
 11417  001312  9C9E               	bcf	3998,6,c	;volatile
 11418                           
 11419                           ;adc.c: 89: int ADC_Result = 0;
 11420  001314  0E00               	movlw	0
 11421  001316  6E08               	movwf	ADC_ISR@ADC_Result+1,c
 11422  001318  0E00               	movlw	0
 11423  00131A  6E07               	movwf	ADC_ISR@ADC_Result,c
 11424                           
 11425                           ;adc.c: 90: if (Temp_Aquire){
 11426  00131C  5046               	movf	_Temp_Aquire,w,c
 11427  00131E  B4D8               	btfsc	status,2,c
 11428  001320  D0E2               	goto	i2l3933
 11429                           
 11430                           ;adc.c: 92: ADC_Result = ADC_GetConversionResult();
 11431  001322  EC8B  F01E         	call	_ADC_GetConversionResult	;wreg free
 11432  001326  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 11433  00132A  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 11434                           
 11435                           ;adc.c: 93: switch ( ADC_Buffer_Point )
 11436  00132E  D0B6               	goto	i2l3929
 11437  001330                     i2l3879:
 11438                           
 11439                           ;adc.c: 96: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11440  001330  90D8               	bcf	status,0,c
 11441  001332  3443               	rlcf	_ADC_Buffer_Point,w,c
 11442  001334  6ED9               	movwf	fsr2l,c
 11443  001336  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11444  001338  6EDA               	movwf	fsr2h,c
 11445  00133A  0EE6               	movlw	low _Temp_Adc
 11446  00133C  26D9               	addwf	fsr2l,f,c
 11447  00133E  0E00               	movlw	high _Temp_Adc
 11448  001340  22DA               	addwfc	fsr2h,f,c
 11449  001342  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11450  001346  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11451                           
 11452                           ;adc.c: 97: Set_4051(1);
 11453  00134A  0E00               	movlw	0
 11454  00134C  6E02               	movwf	Set_4051@Channel+1,c
 11455  00134E  0E01               	movlw	1
 11456  001350  6E01               	movwf	Set_4051@Channel,c
 11457  001352  EC9B  F01D         	call	_Set_4051	;wreg free
 11458                           
 11459                           ;adc.c: 98: ADC_StartConversion(Temp1);
 11460  001356  0E0E               	movlw	14
 11461  001358  EC43  F01E         	call	_ADC_StartConversion
 11462                           
 11463                           ;adc.c: 99: break;
 11464  00135C  D0C1               	goto	i2l3931
 11465  00135E                     i2l3885:
 11466                           
 11467                           ;adc.c: 101: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11468  00135E  90D8               	bcf	status,0,c
 11469  001360  3443               	rlcf	_ADC_Buffer_Point,w,c
 11470  001362  6ED9               	movwf	fsr2l,c
 11471  001364  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11472  001366  6EDA               	movwf	fsr2h,c
 11473  001368  0EE6               	movlw	low _Temp_Adc
 11474  00136A  26D9               	addwf	fsr2l,f,c
 11475  00136C  0E00               	movlw	high _Temp_Adc
 11476  00136E  22DA               	addwfc	fsr2h,f,c
 11477  001370  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11478  001374  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11479                           
 11480                           ;adc.c: 102: Set_4051(2);
 11481  001378  0E00               	movlw	0
 11482  00137A  6E02               	movwf	Set_4051@Channel+1,c
 11483  00137C  0E02               	movlw	2
 11484  00137E  6E01               	movwf	Set_4051@Channel,c
 11485  001380  EC9B  F01D         	call	_Set_4051	;wreg free
 11486                           
 11487                           ;adc.c: 103: ADC_StartConversion(Temp1);
 11488  001384  0E0E               	movlw	14
 11489  001386  EC43  F01E         	call	_ADC_StartConversion
 11490                           
 11491                           ;adc.c: 104: break;
 11492  00138A  D0AA               	goto	i2l3931
 11493  00138C                     i2l3891:
 11494                           
 11495                           ;adc.c: 106: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11496  00138C  90D8               	bcf	status,0,c
 11497  00138E  3443               	rlcf	_ADC_Buffer_Point,w,c
 11498  001390  6ED9               	movwf	fsr2l,c
 11499  001392  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11500  001394  6EDA               	movwf	fsr2h,c
 11501  001396  0EE6               	movlw	low _Temp_Adc
 11502  001398  26D9               	addwf	fsr2l,f,c
 11503  00139A  0E00               	movlw	high _Temp_Adc
 11504  00139C  22DA               	addwfc	fsr2h,f,c
 11505  00139E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11506  0013A2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11507                           
 11508                           ;adc.c: 107: Set_4051(3);
 11509  0013A6  0E00               	movlw	0
 11510  0013A8  6E02               	movwf	Set_4051@Channel+1,c
 11511  0013AA  0E03               	movlw	3
 11512  0013AC  6E01               	movwf	Set_4051@Channel,c
 11513  0013AE  EC9B  F01D         	call	_Set_4051	;wreg free
 11514                           
 11515                           ;adc.c: 108: ADC_StartConversion(Temp1);
 11516  0013B2  0E0E               	movlw	14
 11517  0013B4  EC43  F01E         	call	_ADC_StartConversion
 11518                           
 11519                           ;adc.c: 109: break;
 11520  0013B8  D093               	goto	i2l3931
 11521  0013BA                     i2l3897:
 11522                           
 11523                           ;adc.c: 111: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11524  0013BA  90D8               	bcf	status,0,c
 11525  0013BC  3443               	rlcf	_ADC_Buffer_Point,w,c
 11526  0013BE  6ED9               	movwf	fsr2l,c
 11527  0013C0  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11528  0013C2  6EDA               	movwf	fsr2h,c
 11529  0013C4  0EE6               	movlw	low _Temp_Adc
 11530  0013C6  26D9               	addwf	fsr2l,f,c
 11531  0013C8  0E00               	movlw	high _Temp_Adc
 11532  0013CA  22DA               	addwfc	fsr2h,f,c
 11533  0013CC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11534  0013D0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11535                           
 11536                           ;adc.c: 112: Set_4051(4);
 11537  0013D4  0E00               	movlw	0
 11538  0013D6  6E02               	movwf	Set_4051@Channel+1,c
 11539  0013D8  0E04               	movlw	4
 11540  0013DA  6E01               	movwf	Set_4051@Channel,c
 11541  0013DC  EC9B  F01D         	call	_Set_4051	;wreg free
 11542                           
 11543                           ;adc.c: 113: ADC_StartConversion(Temp1);
 11544  0013E0  0E0E               	movlw	14
 11545  0013E2  EC43  F01E         	call	_ADC_StartConversion
 11546                           
 11547                           ;adc.c: 114: break;
 11548  0013E6  D07C               	goto	i2l3931
 11549  0013E8                     i2l3903:
 11550                           
 11551                           ;adc.c: 116: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11552  0013E8  90D8               	bcf	status,0,c
 11553  0013EA  3443               	rlcf	_ADC_Buffer_Point,w,c
 11554  0013EC  6ED9               	movwf	fsr2l,c
 11555  0013EE  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11556  0013F0  6EDA               	movwf	fsr2h,c
 11557  0013F2  0EE6               	movlw	low _Temp_Adc
 11558  0013F4  26D9               	addwf	fsr2l,f,c
 11559  0013F6  0E00               	movlw	high _Temp_Adc
 11560  0013F8  22DA               	addwfc	fsr2h,f,c
 11561  0013FA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11562  0013FE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11563                           
 11564                           ;adc.c: 117: Set_4051(5);
 11565  001402  0E00               	movlw	0
 11566  001404  6E02               	movwf	Set_4051@Channel+1,c
 11567  001406  0E05               	movlw	5
 11568  001408  6E01               	movwf	Set_4051@Channel,c
 11569  00140A  EC9B  F01D         	call	_Set_4051	;wreg free
 11570                           
 11571                           ;adc.c: 118: ADC_StartConversion(Temp1);
 11572  00140E  0E0E               	movlw	14
 11573  001410  EC43  F01E         	call	_ADC_StartConversion
 11574                           
 11575                           ;adc.c: 119: break;
 11576  001414  D065               	goto	i2l3931
 11577  001416                     i2l3909:
 11578                           
 11579                           ;adc.c: 121: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11580  001416  90D8               	bcf	status,0,c
 11581  001418  3443               	rlcf	_ADC_Buffer_Point,w,c
 11582  00141A  6ED9               	movwf	fsr2l,c
 11583  00141C  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11584  00141E  6EDA               	movwf	fsr2h,c
 11585  001420  0EE6               	movlw	low _Temp_Adc
 11586  001422  26D9               	addwf	fsr2l,f,c
 11587  001424  0E00               	movlw	high _Temp_Adc
 11588  001426  22DA               	addwfc	fsr2h,f,c
 11589  001428  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11590  00142C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11591                           
 11592                           ;adc.c: 122: Set_4051(6);
 11593  001430  0E00               	movlw	0
 11594  001432  6E02               	movwf	Set_4051@Channel+1,c
 11595  001434  0E06               	movlw	6
 11596  001436  6E01               	movwf	Set_4051@Channel,c
 11597  001438  EC9B  F01D         	call	_Set_4051	;wreg free
 11598                           
 11599                           ;adc.c: 123: ADC_StartConversion(Temp1);
 11600  00143C  0E0E               	movlw	14
 11601  00143E  EC43  F01E         	call	_ADC_StartConversion
 11602                           
 11603                           ;adc.c: 124: break;
 11604  001442  D04E               	goto	i2l3931
 11605  001444                     i2l3915:
 11606                           
 11607                           ;adc.c: 126: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11608  001444  90D8               	bcf	status,0,c
 11609  001446  3443               	rlcf	_ADC_Buffer_Point,w,c
 11610  001448  6ED9               	movwf	fsr2l,c
 11611  00144A  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11612  00144C  6EDA               	movwf	fsr2h,c
 11613  00144E  0EE6               	movlw	low _Temp_Adc
 11614  001450  26D9               	addwf	fsr2l,f,c
 11615  001452  0E00               	movlw	high _Temp_Adc
 11616  001454  22DA               	addwfc	fsr2h,f,c
 11617  001456  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11618  00145A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11619                           
 11620                           ;adc.c: 127: Set_4051(7);
 11621  00145E  0E00               	movlw	0
 11622  001460  6E02               	movwf	Set_4051@Channel+1,c
 11623  001462  0E07               	movlw	7
 11624  001464  6E01               	movwf	Set_4051@Channel,c
 11625  001466  EC9B  F01D         	call	_Set_4051	;wreg free
 11626                           
 11627                           ;adc.c: 128: ADC_StartConversion(Temp1);
 11628  00146A  0E0E               	movlw	14
 11629  00146C  EC43  F01E         	call	_ADC_StartConversion
 11630                           
 11631                           ;adc.c: 129: break;
 11632  001470  D037               	goto	i2l3931
 11633  001472                     i2l3921:
 11634                           
 11635                           ;adc.c: 131: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 11636  001472  90D8               	bcf	status,0,c
 11637  001474  3443               	rlcf	_ADC_Buffer_Point,w,c
 11638  001476  6ED9               	movwf	fsr2l,c
 11639  001478  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11640  00147A  6EDA               	movwf	fsr2h,c
 11641  00147C  0EE6               	movlw	low _Temp_Adc
 11642  00147E  26D9               	addwf	fsr2l,f,c
 11643  001480  0E00               	movlw	high _Temp_Adc
 11644  001482  22DA               	addwfc	fsr2h,f,c
 11645  001484  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11646  001488  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11647                           
 11648                           ;adc.c: 132: Temp_Aquire = 0;
 11649  00148C  0E00               	movlw	0
 11650  00148E  6E46               	movwf	_Temp_Aquire,c
 11651                           
 11652                           ;adc.c: 133: Temp_Done = 1;
 11653  001490  0E00               	movlw	0
 11654  001492  0100               	movlb	0	; () banked
 11655  001494  6FDF               	movwf	(_Temp_Done+1)& (0+255),b
 11656  001496  0E01               	movlw	1
 11657  001498  6FDE               	movwf	_Temp_Done& (0+255),b
 11658                           
 11659                           ; BSR set to: 0
 11660                           ;adc.c: 135: }
 11661                           
 11662                           ;adc.c: 134: break;
 11663  00149A  D022               	goto	i2l3931
 11664  00149C                     i2l3929:
 11665  00149C  C043  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 11666  0014A0  C044  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 11667                           
 11668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11669                           ; Switch size 1, requested type "space"
 11670                           ; Number of cases is 1, Range of values is 0 to 0
 11671                           ; switch strategies available:
 11672                           ; Name         Instructions Cycles
 11673                           ; simple_byte            4     3 (average)
 11674                           ;	Chosen strategy is simple_byte
 11675  0014A4  5006               	movf	??_ADC_ISR+1,w,c
 11676  0014A6  0A00               	xorlw	0	; case 0
 11677  0014A8  A4D8               	btfss	status,2,c
 11678  0014AA  D01A               	goto	i2l3931
 11679                           
 11680                           ; Switch size 1, requested type "space"
 11681                           ; Number of cases is 8, Range of values is 0 to 7
 11682                           ; switch strategies available:
 11683                           ; Name         Instructions Cycles
 11684                           ; simple_byte           25    13 (average)
 11685                           ;	Chosen strategy is simple_byte
 11686  0014AC  5005               	movf	??_ADC_ISR,w,c
 11687  0014AE  0A00               	xorlw	0	; case 0
 11688  0014B0  B4D8               	btfsc	status,2,c
 11689  0014B2  D73E               	goto	i2l3879
 11690  0014B4  0A01               	xorlw	1	; case 1
 11691  0014B6  B4D8               	btfsc	status,2,c
 11692  0014B8  D752               	goto	i2l3885
 11693  0014BA  0A03               	xorlw	3	; case 2
 11694  0014BC  B4D8               	btfsc	status,2,c
 11695  0014BE  D766               	goto	i2l3891
 11696  0014C0  0A01               	xorlw	1	; case 3
 11697  0014C2  B4D8               	btfsc	status,2,c
 11698  0014C4  D77A               	goto	i2l3897
 11699  0014C6  0A07               	xorlw	7	; case 4
 11700  0014C8  B4D8               	btfsc	status,2,c
 11701  0014CA  D78E               	goto	i2l3903
 11702  0014CC  0A01               	xorlw	1	; case 5
 11703  0014CE  B4D8               	btfsc	status,2,c
 11704  0014D0  D7A2               	goto	i2l3909
 11705  0014D2  0A03               	xorlw	3	; case 6
 11706  0014D4  B4D8               	btfsc	status,2,c
 11707  0014D6  D7B6               	goto	i2l3915
 11708  0014D8  0A01               	xorlw	1	; case 7
 11709  0014DA  B4D8               	btfsc	status,2,c
 11710  0014DC  D7CA               	goto	i2l3921
 11711  0014DE  D000               	goto	i2l3931
 11712  0014E0                     i2l3931:
 11713                           
 11714                           ;adc.c: 136: ADC_Buffer_Point++;
 11715  0014E0  4A43               	infsnz	_ADC_Buffer_Point,f,c
 11716  0014E2  2A44               	incf	_ADC_Buffer_Point+1,f,c
 11717  0014E4  D000               	goto	i2l3933
 11718  0014E6                     i2l3933:
 11719                           
 11720                           ;adc.c: 137: }
 11721                           ;adc.c: 138: if (Current_Aquire){
 11722  0014E6  5045               	movf	_Current_Aquire,w,c
 11723  0014E8  B4D8               	btfsc	status,2,c
 11724  0014EA  D0E0               	goto	i2l3985
 11725                           
 11726                           ;adc.c: 140: ADC_Result = ADC_GetConversionResult();
 11727  0014EC  EC8B  F01E         	call	_ADC_GetConversionResult	;wreg free
 11728  0014F0  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 11729  0014F4  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 11730                           
 11731                           ;adc.c: 141: switch ( ADC_Buffer_Point )
 11732  0014F8  D0AE               	goto	i2l3981
 11733  0014FA                     i2l3937:
 11734                           
 11735                           ;adc.c: 144: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11736  0014FA  90D8               	bcf	status,0,c
 11737  0014FC  3443               	rlcf	_ADC_Buffer_Point,w,c
 11738  0014FE  6ED9               	movwf	fsr2l,c
 11739  001500  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11740  001502  6EDA               	movwf	fsr2h,c
 11741  001504  0EC8               	movlw	low _Current_Adc
 11742  001506  26D9               	addwf	fsr2l,f,c
 11743  001508  0E00               	movlw	high _Current_Adc
 11744  00150A  22DA               	addwfc	fsr2h,f,c
 11745  00150C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11746  001510  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11747                           
 11748                           ;adc.c: 145: ADC_StartConversion(Asen);
 11749  001514  0E0B               	movlw	11
 11750  001516  EC43  F01E         	call	_ADC_StartConversion
 11751                           
 11752                           ;adc.c: 146: break;
 11753  00151A  D0C5               	goto	i2l3983
 11754  00151C                     i2l3941:
 11755                           
 11756                           ;adc.c: 148: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11757  00151C  90D8               	bcf	status,0,c
 11758  00151E  3443               	rlcf	_ADC_Buffer_Point,w,c
 11759  001520  6ED9               	movwf	fsr2l,c
 11760  001522  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11761  001524  6EDA               	movwf	fsr2h,c
 11762  001526  0EC8               	movlw	low _Current_Adc
 11763  001528  26D9               	addwf	fsr2l,f,c
 11764  00152A  0E00               	movlw	high _Current_Adc
 11765  00152C  22DA               	addwfc	fsr2h,f,c
 11766  00152E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11767  001532  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11768                           
 11769                           ;adc.c: 149: ADC_StartConversion(Asen);
 11770  001536  0E0B               	movlw	11
 11771  001538  EC43  F01E         	call	_ADC_StartConversion
 11772                           
 11773                           ;adc.c: 150: break;
 11774  00153C  D0B4               	goto	i2l3983
 11775  00153E                     i2l3945:
 11776                           
 11777                           ;adc.c: 152: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11778  00153E  90D8               	bcf	status,0,c
 11779  001540  3443               	rlcf	_ADC_Buffer_Point,w,c
 11780  001542  6ED9               	movwf	fsr2l,c
 11781  001544  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11782  001546  6EDA               	movwf	fsr2h,c
 11783  001548  0EC8               	movlw	low _Current_Adc
 11784  00154A  26D9               	addwf	fsr2l,f,c
 11785  00154C  0E00               	movlw	high _Current_Adc
 11786  00154E  22DA               	addwfc	fsr2h,f,c
 11787  001550  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11788  001554  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11789                           
 11790                           ;adc.c: 153: ADC_StartConversion(Asen);
 11791  001558  0E0B               	movlw	11
 11792  00155A  EC43  F01E         	call	_ADC_StartConversion
 11793                           
 11794                           ;adc.c: 154: break;
 11795  00155E  D0A3               	goto	i2l3983
 11796  001560                     i2l3949:
 11797                           
 11798                           ;adc.c: 156: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11799  001560  90D8               	bcf	status,0,c
 11800  001562  3443               	rlcf	_ADC_Buffer_Point,w,c
 11801  001564  6ED9               	movwf	fsr2l,c
 11802  001566  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11803  001568  6EDA               	movwf	fsr2h,c
 11804  00156A  0EC8               	movlw	low _Current_Adc
 11805  00156C  26D9               	addwf	fsr2l,f,c
 11806  00156E  0E00               	movlw	high _Current_Adc
 11807  001570  22DA               	addwfc	fsr2h,f,c
 11808  001572  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11809  001576  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11810                           
 11811                           ;adc.c: 157: ADC_StartConversion(Asen);
 11812  00157A  0E0B               	movlw	11
 11813  00157C  EC43  F01E         	call	_ADC_StartConversion
 11814                           
 11815                           ;adc.c: 158: break;
 11816  001580  D092               	goto	i2l3983
 11817  001582                     i2l3953:
 11818                           
 11819                           ;adc.c: 160: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11820  001582  90D8               	bcf	status,0,c
 11821  001584  3443               	rlcf	_ADC_Buffer_Point,w,c
 11822  001586  6ED9               	movwf	fsr2l,c
 11823  001588  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11824  00158A  6EDA               	movwf	fsr2h,c
 11825  00158C  0EC8               	movlw	low _Current_Adc
 11826  00158E  26D9               	addwf	fsr2l,f,c
 11827  001590  0E00               	movlw	high _Current_Adc
 11828  001592  22DA               	addwfc	fsr2h,f,c
 11829  001594  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11830  001598  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11831                           
 11832                           ;adc.c: 161: ADC_StartConversion(Asen);
 11833  00159C  0E0B               	movlw	11
 11834  00159E  EC43  F01E         	call	_ADC_StartConversion
 11835                           
 11836                           ;adc.c: 162: break;
 11837  0015A2  D081               	goto	i2l3983
 11838  0015A4                     i2l3957:
 11839                           
 11840                           ;adc.c: 164: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11841  0015A4  90D8               	bcf	status,0,c
 11842  0015A6  3443               	rlcf	_ADC_Buffer_Point,w,c
 11843  0015A8  6ED9               	movwf	fsr2l,c
 11844  0015AA  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11845  0015AC  6EDA               	movwf	fsr2h,c
 11846  0015AE  0EC8               	movlw	low _Current_Adc
 11847  0015B0  26D9               	addwf	fsr2l,f,c
 11848  0015B2  0E00               	movlw	high _Current_Adc
 11849  0015B4  22DA               	addwfc	fsr2h,f,c
 11850  0015B6  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11851  0015BA  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11852                           
 11853                           ;adc.c: 165: ADC_StartConversion(Asen);
 11854  0015BE  0E0B               	movlw	11
 11855  0015C0  EC43  F01E         	call	_ADC_StartConversion
 11856                           
 11857                           ;adc.c: 166: break;
 11858  0015C4  D070               	goto	i2l3983
 11859  0015C6                     i2l3961:
 11860                           
 11861                           ;adc.c: 168: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11862  0015C6  90D8               	bcf	status,0,c
 11863  0015C8  3443               	rlcf	_ADC_Buffer_Point,w,c
 11864  0015CA  6ED9               	movwf	fsr2l,c
 11865  0015CC  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11866  0015CE  6EDA               	movwf	fsr2h,c
 11867  0015D0  0EC8               	movlw	low _Current_Adc
 11868  0015D2  26D9               	addwf	fsr2l,f,c
 11869  0015D4  0E00               	movlw	high _Current_Adc
 11870  0015D6  22DA               	addwfc	fsr2h,f,c
 11871  0015D8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11872  0015DC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11873                           
 11874                           ;adc.c: 169: ADC_StartConversion(Asen);
 11875  0015E0  0E0B               	movlw	11
 11876  0015E2  EC43  F01E         	call	_ADC_StartConversion
 11877                           
 11878                           ;adc.c: 170: break;
 11879  0015E6  D05F               	goto	i2l3983
 11880  0015E8                     i2l3965:
 11881                           
 11882                           ;adc.c: 172: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11883  0015E8  90D8               	bcf	status,0,c
 11884  0015EA  3443               	rlcf	_ADC_Buffer_Point,w,c
 11885  0015EC  6ED9               	movwf	fsr2l,c
 11886  0015EE  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11887  0015F0  6EDA               	movwf	fsr2h,c
 11888  0015F2  0EC8               	movlw	low _Current_Adc
 11889  0015F4  26D9               	addwf	fsr2l,f,c
 11890  0015F6  0E00               	movlw	high _Current_Adc
 11891  0015F8  22DA               	addwfc	fsr2h,f,c
 11892  0015FA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11893  0015FE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11894                           
 11895                           ;adc.c: 173: ADC_StartConversion(Asen);
 11896  001602  0E0B               	movlw	11
 11897  001604  EC43  F01E         	call	_ADC_StartConversion
 11898                           
 11899                           ;adc.c: 174: break;
 11900  001608  D04E               	goto	i2l3983
 11901  00160A                     i2l3969:
 11902                           
 11903                           ;adc.c: 176: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11904  00160A  90D8               	bcf	status,0,c
 11905  00160C  3443               	rlcf	_ADC_Buffer_Point,w,c
 11906  00160E  6ED9               	movwf	fsr2l,c
 11907  001610  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11908  001612  6EDA               	movwf	fsr2h,c
 11909  001614  0EC8               	movlw	low _Current_Adc
 11910  001616  26D9               	addwf	fsr2l,f,c
 11911  001618  0E00               	movlw	high _Current_Adc
 11912  00161A  22DA               	addwfc	fsr2h,f,c
 11913  00161C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11914  001620  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11915                           
 11916                           ;adc.c: 177: ADC_StartConversion(Asen);
 11917  001624  0E0B               	movlw	11
 11918  001626  EC43  F01E         	call	_ADC_StartConversion
 11919                           
 11920                           ;adc.c: 178: break;
 11921  00162A  D03D               	goto	i2l3983
 11922  00162C                     i2l3973:
 11923                           
 11924                           ;adc.c: 180: Current_Adc[ADC_Buffer_Point] = ADC_Result;
 11925  00162C  90D8               	bcf	status,0,c
 11926  00162E  3443               	rlcf	_ADC_Buffer_Point,w,c
 11927  001630  6ED9               	movwf	fsr2l,c
 11928  001632  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 11929  001634  6EDA               	movwf	fsr2h,c
 11930  001636  0EC8               	movlw	low _Current_Adc
 11931  001638  26D9               	addwf	fsr2l,f,c
 11932  00163A  0E00               	movlw	high _Current_Adc
 11933  00163C  22DA               	addwfc	fsr2h,f,c
 11934  00163E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11935  001642  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11936                           
 11937                           ;adc.c: 181: Current_Aquire = 0;
 11938  001646  0E00               	movlw	0
 11939  001648  6E45               	movwf	_Current_Aquire,c
 11940                           
 11941                           ;adc.c: 182: Current_Done = 1;
 11942  00164A  0E00               	movlw	0
 11943  00164C  0100               	movlb	0	; () banked
 11944  00164E  6FDD               	movwf	(_Current_Done+1)& (0+255),b
 11945  001650  0E01               	movlw	1
 11946  001652  6FDC               	movwf	_Current_Done& (0+255),b
 11947                           
 11948                           ; BSR set to: 0
 11949                           ;adc.c: 184: }
 11950                           
 11951                           ;adc.c: 183: break;
 11952  001654  D028               	goto	i2l3983
 11953  001656                     i2l3981:
 11954  001656  C043  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 11955  00165A  C044  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 11956                           
 11957                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11958                           ; Switch size 1, requested type "space"
 11959                           ; Number of cases is 1, Range of values is 0 to 0
 11960                           ; switch strategies available:
 11961                           ; Name         Instructions Cycles
 11962                           ; simple_byte            4     3 (average)
 11963                           ;	Chosen strategy is simple_byte
 11964  00165E  5006               	movf	??_ADC_ISR+1,w,c
 11965  001660  0A00               	xorlw	0	; case 0
 11966  001662  A4D8               	btfss	status,2,c
 11967  001664  D020               	goto	i2l3983
 11968                           
 11969                           ; Switch size 1, requested type "space"
 11970                           ; Number of cases is 10, Range of values is 0 to 9
 11971                           ; switch strategies available:
 11972                           ; Name         Instructions Cycles
 11973                           ; simple_byte           31    16 (average)
 11974                           ;	Chosen strategy is simple_byte
 11975  001666  5005               	movf	??_ADC_ISR,w,c
 11976  001668  0A00               	xorlw	0	; case 0
 11977  00166A  B4D8               	btfsc	status,2,c
 11978  00166C  D746               	goto	i2l3937
 11979  00166E  0A01               	xorlw	1	; case 1
 11980  001670  B4D8               	btfsc	status,2,c
 11981  001672  D754               	goto	i2l3941
 11982  001674  0A03               	xorlw	3	; case 2
 11983  001676  B4D8               	btfsc	status,2,c
 11984  001678  D762               	goto	i2l3945
 11985  00167A  0A01               	xorlw	1	; case 3
 11986  00167C  B4D8               	btfsc	status,2,c
 11987  00167E  D770               	goto	i2l3949
 11988  001680  0A07               	xorlw	7	; case 4
 11989  001682  B4D8               	btfsc	status,2,c
 11990  001684  D77E               	goto	i2l3953
 11991  001686  0A01               	xorlw	1	; case 5
 11992  001688  B4D8               	btfsc	status,2,c
 11993  00168A  D78C               	goto	i2l3957
 11994  00168C  0A03               	xorlw	3	; case 6
 11995  00168E  B4D8               	btfsc	status,2,c
 11996  001690  D79A               	goto	i2l3961
 11997  001692  0A01               	xorlw	1	; case 7
 11998  001694  B4D8               	btfsc	status,2,c
 11999  001696  D7A8               	goto	i2l3965
 12000  001698  0A0F               	xorlw	15	; case 8
 12001  00169A  B4D8               	btfsc	status,2,c
 12002  00169C  D7B6               	goto	i2l3969
 12003  00169E  0A01               	xorlw	1	; case 9
 12004  0016A0  B4D8               	btfsc	status,2,c
 12005  0016A2  D7C4               	goto	i2l3973
 12006  0016A4  D000               	goto	i2l3983
 12007  0016A6                     i2l3983:
 12008                           
 12009                           ;adc.c: 185: ADC_Buffer_Point++;
 12010  0016A6  4A43               	infsnz	_ADC_Buffer_Point,f,c
 12011  0016A8  2A44               	incf	_ADC_Buffer_Point+1,f,c
 12012  0016AA  D000               	goto	i2l3985
 12013  0016AC                     i2l3985:
 12014                           
 12015                           ;adc.c: 186: }
 12016                           ;adc.c: 187: if (Volt_Aquire){
 12017  0016AC  5047               	movf	_Volt_Aquire,w,c
 12018  0016AE  B4D8               	btfsc	status,2,c
 12019  0016B0  0012               	return	
 12020                           
 12021                           ;adc.c: 189: ADC_Result = ADC_GetConversionResult();
 12022  0016B2  EC8B  F01E         	call	_ADC_GetConversionResult	;wreg free
 12023  0016B6  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12024  0016BA  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12025                           
 12026                           ;adc.c: 190: switch ( ADC_Buffer_Point )
 12027  0016BE  D07B               	goto	i2l4021
 12028  0016C0                     i2l3989:
 12029                           
 12030                           ;adc.c: 193: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12031  0016C0  90D8               	bcf	status,0,c
 12032  0016C2  3443               	rlcf	_ADC_Buffer_Point,w,c
 12033  0016C4  6ED9               	movwf	fsr2l,c
 12034  0016C6  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12035  0016C8  6EDA               	movwf	fsr2h,c
 12036  0016CA  0EB4               	movlw	low _Battery_Adc
 12037  0016CC  26D9               	addwf	fsr2l,f,c
 12038  0016CE  0E00               	movlw	high _Battery_Adc
 12039  0016D0  22DA               	addwfc	fsr2h,f,c
 12040  0016D2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12041  0016D6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12042                           
 12043                           ;adc.c: 194: ADC_StartConversion(AN_CELL2);
 12044  0016DA  0E06               	movlw	6
 12045  0016DC  EC43  F01E         	call	_ADC_StartConversion
 12046                           
 12047                           ;adc.c: 195: break;
 12048  0016E0  D089               	goto	i2l4023
 12049  0016E2                     i2l3993:
 12050                           
 12051                           ;adc.c: 197: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12052  0016E2  90D8               	bcf	status,0,c
 12053  0016E4  3443               	rlcf	_ADC_Buffer_Point,w,c
 12054  0016E6  6ED9               	movwf	fsr2l,c
 12055  0016E8  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12056  0016EA  6EDA               	movwf	fsr2h,c
 12057  0016EC  0EB4               	movlw	low _Battery_Adc
 12058  0016EE  26D9               	addwf	fsr2l,f,c
 12059  0016F0  0E00               	movlw	high _Battery_Adc
 12060  0016F2  22DA               	addwfc	fsr2h,f,c
 12061  0016F4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12062  0016F8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12063                           
 12064                           ;adc.c: 198: ADC_StartConversion(AN_CELL3);
 12065  0016FC  0E05               	movlw	5
 12066  0016FE  EC43  F01E         	call	_ADC_StartConversion
 12067                           
 12068                           ;adc.c: 199: break;
 12069  001702  D078               	goto	i2l4023
 12070  001704                     i2l3997:
 12071                           
 12072                           ;adc.c: 201: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12073  001704  90D8               	bcf	status,0,c
 12074  001706  3443               	rlcf	_ADC_Buffer_Point,w,c
 12075  001708  6ED9               	movwf	fsr2l,c
 12076  00170A  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12077  00170C  6EDA               	movwf	fsr2h,c
 12078  00170E  0EB4               	movlw	low _Battery_Adc
 12079  001710  26D9               	addwf	fsr2l,f,c
 12080  001712  0E00               	movlw	high _Battery_Adc
 12081  001714  22DA               	addwfc	fsr2h,f,c
 12082  001716  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12083  00171A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12084                           
 12085                           ;adc.c: 202: ADC_StartConversion(AN_CELL4);
 12086  00171E  0E04               	movlw	4
 12087  001720  EC43  F01E         	call	_ADC_StartConversion
 12088                           
 12089                           ;adc.c: 203: break;
 12090  001724  D067               	goto	i2l4023
 12091  001726                     i2l4001:
 12092                           
 12093                           ;adc.c: 205: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12094  001726  90D8               	bcf	status,0,c
 12095  001728  3443               	rlcf	_ADC_Buffer_Point,w,c
 12096  00172A  6ED9               	movwf	fsr2l,c
 12097  00172C  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12098  00172E  6EDA               	movwf	fsr2h,c
 12099  001730  0EB4               	movlw	low _Battery_Adc
 12100  001732  26D9               	addwf	fsr2l,f,c
 12101  001734  0E00               	movlw	high _Battery_Adc
 12102  001736  22DA               	addwfc	fsr2h,f,c
 12103  001738  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12104  00173C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12105                           
 12106                           ;adc.c: 206: ADC_StartConversion(AN_CELL5);
 12107  001740  0E03               	movlw	3
 12108  001742  EC43  F01E         	call	_ADC_StartConversion
 12109                           
 12110                           ;adc.c: 207: break;
 12111  001746  D056               	goto	i2l4023
 12112  001748                     i2l4005:
 12113                           
 12114                           ;adc.c: 209: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12115  001748  90D8               	bcf	status,0,c
 12116  00174A  3443               	rlcf	_ADC_Buffer_Point,w,c
 12117  00174C  6ED9               	movwf	fsr2l,c
 12118  00174E  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12119  001750  6EDA               	movwf	fsr2h,c
 12120  001752  0EB4               	movlw	low _Battery_Adc
 12121  001754  26D9               	addwf	fsr2l,f,c
 12122  001756  0E00               	movlw	high _Battery_Adc
 12123  001758  22DA               	addwfc	fsr2h,f,c
 12124  00175A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12125  00175E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12126                           
 12127                           ;adc.c: 210: ADC_StartConversion(AN_CELL6);
 12128  001762  0E01               	movlw	1
 12129  001764  EC43  F01E         	call	_ADC_StartConversion
 12130                           
 12131                           ;adc.c: 211: break;
 12132  001768  D045               	goto	i2l4023
 12133  00176A                     i2l4009:
 12134                           
 12135                           ;adc.c: 213: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12136  00176A  90D8               	bcf	status,0,c
 12137  00176C  3443               	rlcf	_ADC_Buffer_Point,w,c
 12138  00176E  6ED9               	movwf	fsr2l,c
 12139  001770  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12140  001772  6EDA               	movwf	fsr2h,c
 12141  001774  0EB4               	movlw	low _Battery_Adc
 12142  001776  26D9               	addwf	fsr2l,f,c
 12143  001778  0E00               	movlw	high _Battery_Adc
 12144  00177A  22DA               	addwfc	fsr2h,f,c
 12145  00177C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12146  001780  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12147                           
 12148                           ;adc.c: 214: ADC_StartConversion(AN_CELL7);
 12149  001784  0E00               	movlw	0
 12150  001786  EC43  F01E         	call	_ADC_StartConversion
 12151                           
 12152                           ;adc.c: 215: break;
 12153  00178A  D034               	goto	i2l4023
 12154  00178C                     i2l4013:
 12155                           
 12156                           ;adc.c: 217: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12157  00178C  90D8               	bcf	status,0,c
 12158  00178E  3443               	rlcf	_ADC_Buffer_Point,w,c
 12159  001790  6ED9               	movwf	fsr2l,c
 12160  001792  3444               	rlcf	_ADC_Buffer_Point+1,w,c
 12161  001794  6EDA               	movwf	fsr2h,c
 12162  001796  0EB4               	movlw	low _Battery_Adc
 12163  001798  26D9               	addwf	fsr2l,f,c
 12164  00179A  0E00               	movlw	high _Battery_Adc
 12165  00179C  22DA               	addwfc	fsr2h,f,c
 12166  00179E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12167  0017A2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12168                           
 12169                           ;adc.c: 218: Volt_Aquire = 0;
 12170  0017A6  0E00               	movlw	0
 12171  0017A8  6E47               	movwf	_Volt_Aquire,c
 12172                           
 12173                           ;adc.c: 219: Volt_Done = 1;
 12174  0017AA  0E00               	movlw	0
 12175  0017AC  0100               	movlb	0	; () banked
 12176  0017AE  6FE1               	movwf	(_Volt_Done+1)& (0+255),b
 12177  0017B0  0E01               	movlw	1
 12178  0017B2  6FE0               	movwf	_Volt_Done& (0+255),b
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;adc.c: 221: }
 12182                           
 12183                           ;adc.c: 220: break;
 12184  0017B4  D01F               	goto	i2l4023
 12185  0017B6                     i2l4021:
 12186  0017B6  C043  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 12187  0017BA  C044  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 12188                           
 12189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12190                           ; Switch size 1, requested type "space"
 12191                           ; Number of cases is 1, Range of values is 0 to 0
 12192                           ; switch strategies available:
 12193                           ; Name         Instructions Cycles
 12194                           ; simple_byte            4     3 (average)
 12195                           ;	Chosen strategy is simple_byte
 12196  0017BE  5006               	movf	??_ADC_ISR+1,w,c
 12197  0017C0  0A00               	xorlw	0	; case 0
 12198  0017C2  A4D8               	btfss	status,2,c
 12199  0017C4  D017               	goto	i2l4023
 12200                           
 12201                           ; Switch size 1, requested type "space"
 12202                           ; Number of cases is 7, Range of values is 0 to 6
 12203                           ; switch strategies available:
 12204                           ; Name         Instructions Cycles
 12205                           ; simple_byte           22    12 (average)
 12206                           ;	Chosen strategy is simple_byte
 12207  0017C6  5005               	movf	??_ADC_ISR,w,c
 12208  0017C8  0A00               	xorlw	0	; case 0
 12209  0017CA  B4D8               	btfsc	status,2,c
 12210  0017CC  D779               	goto	i2l3989
 12211  0017CE  0A01               	xorlw	1	; case 1
 12212  0017D0  B4D8               	btfsc	status,2,c
 12213  0017D2  D787               	goto	i2l3993
 12214  0017D4  0A03               	xorlw	3	; case 2
 12215  0017D6  B4D8               	btfsc	status,2,c
 12216  0017D8  D795               	goto	i2l3997
 12217  0017DA  0A01               	xorlw	1	; case 3
 12218  0017DC  B4D8               	btfsc	status,2,c
 12219  0017DE  D7A3               	goto	i2l4001
 12220  0017E0  0A07               	xorlw	7	; case 4
 12221  0017E2  B4D8               	btfsc	status,2,c
 12222  0017E4  D7B1               	goto	i2l4005
 12223  0017E6  0A01               	xorlw	1	; case 5
 12224  0017E8  B4D8               	btfsc	status,2,c
 12225  0017EA  D7BF               	goto	i2l4009
 12226  0017EC  0A03               	xorlw	3	; case 6
 12227  0017EE  B4D8               	btfsc	status,2,c
 12228  0017F0  D7CD               	goto	i2l4013
 12229  0017F2  D000               	goto	i2l4023
 12230  0017F4                     i2l4023:
 12231                           
 12232                           ;adc.c: 222: ADC_Buffer_Point++;
 12233  0017F4  4A43               	infsnz	_ADC_Buffer_Point,f,c
 12234  0017F6  2A44               	incf	_ADC_Buffer_Point+1,f,c
 12235  0017F8  0012               	return	
 12236  0017FA  0012               	return		;funcret
 12237  0017FC                     __end_of_ADC_ISR:
 12238                           	opt stack 0
 12239                           pclatu	equ	0xFFB
 12240                           pclath	equ	0xFFA
 12241                           tblptru	equ	0xFF8
 12242                           tblptrh	equ	0xFF7
 12243                           tblptrl	equ	0xFF6
 12244                           tablat	equ	0xFF5
 12245                           prodh	equ	0xFF4
 12246                           prodl	equ	0xFF3
 12247                           intcon	equ	0xFF2
 12248                           intcon2	equ	0xFF1
 12249                           postinc0	equ	0xFEE
 12250                           fsr0h	equ	0xFEA
 12251                           fsr0l	equ	0xFE9
 12252                           wreg	equ	0xFE8
 12253                           postinc1	equ	0xFE6
 12254                           postdec1	equ	0xFE5
 12255                           fsr1h	equ	0xFE2
 12256                           fsr1l	equ	0xFE1
 12257                           postinc2	equ	0xFDE
 12258                           postdec2	equ	0xFDD
 12259                           fsr2h	equ	0xFDA
 12260                           fsr2l	equ	0xFD9
 12261                           status	equ	0xFD8
 12262                           
 12263 ;; *************** function _Set_4051 *****************
 12264 ;; Defined at:
 12265 ;;		line 8 in file "Functions.c"
 12266 ;; Parameters:    Size  Location     Type
 12267 ;;  Channel         2    0[COMRAM] int 
 12268 ;; Auto vars:     Size  Location     Type
 12269 ;;		None
 12270 ;; Return value:  Size  Location     Type
 12271 ;;		None               void
 12272 ;; Registers used:
 12273 ;;		wreg, status,2, status,0
 12274 ;; Tracked objects:
 12275 ;;		On entry : 0/0
 12276 ;;		On exit  : 0/0
 12277 ;;		Unchanged: 0/0
 12278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12279 ;;      Params:         2       0       0       0       0       0       0
 12280 ;;      Locals:         0       0       0       0       0       0       0
 12281 ;;      Temps:          2       0       0       0       0       0       0
 12282 ;;      Totals:         4       0       0       0       0       0       0
 12283 ;;Total ram usage:        4 bytes
 12284 ;; Hardware stack levels used:    1
 12285 ;; This function calls:
 12286 ;;		Nothing
 12287 ;; This function is called by:
 12288 ;;		_ADC_ISR
 12289 ;; This function uses a non-reentrant model
 12290 ;;
 12291                           
 12292                           	psect	text53
 12293  003B36                     __ptext53:
 12294                           	opt stack 0
 12295  003B36                     _Set_4051:
 12296                           	opt stack 23
 12297                           
 12298                           ;Functions.c: 10: if (Channel & 0x01)
 12299                           
 12300                           ;incstack = 0
 12301  003B36  A001               	btfss	Set_4051@Channel,0,c
 12302  003B38  D002               	goto	i2l3383
 12303                           
 12304                           ;Functions.c: 11: {
 12305                           ;Functions.c: 12: do { LATA7 = ~LATA7; } while(0);
 12306  003B3A  7E89               	btg	3977,7,c	;volatile
 12307  003B3C  D000               	goto	i2l3383
 12308  003B3E                     i2l3383:
 12309                           
 12310                           ;Functions.c: 13: }
 12311                           ;Functions.c: 14: if ((Channel>>1) & 0x01)
 12312  003B3E  3402               	rlcf	Set_4051@Channel+1,w,c
 12313  003B40  3002               	rrcf	Set_4051@Channel+1,w,c
 12314  003B42  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 12315  003B44  3001               	rrcf	Set_4051@Channel,w,c
 12316  003B46  6E03               	movwf	??_Set_4051& (0+255),c
 12317  003B48  A003               	btfss	??_Set_4051,0,c
 12318  003B4A  D002               	goto	i2l3385
 12319                           
 12320                           ;Functions.c: 15: {
 12321                           ;Functions.c: 16: do { LATA6 = ~LATA6; } while(0);
 12322  003B4C  7C89               	btg	3977,6,c	;volatile
 12323  003B4E  D000               	goto	i2l3385
 12324  003B50                     i2l3385:
 12325                           
 12326                           ;Functions.c: 17: }
 12327                           ;Functions.c: 18: if ((Channel>>2) & 0x01)
 12328  003B50  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 12329  003B54  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 12330  003B58  3404               	rlcf	??_Set_4051+1,w,c
 12331  003B5A  3204               	rrcf	??_Set_4051+1,f,c
 12332  003B5C  3203               	rrcf	??_Set_4051,f,c
 12333  003B5E  3404               	rlcf	??_Set_4051+1,w,c
 12334  003B60  3204               	rrcf	??_Set_4051+1,f,c
 12335  003B62  3203               	rrcf	??_Set_4051,f,c
 12336  003B64  A003               	btfss	??_Set_4051,0,c
 12337  003B66  0012               	return	
 12338                           
 12339                           ;Functions.c: 19: {
 12340                           ;Functions.c: 20: do { LATC0 = ~LATC0; } while(0);
 12341  003B68  708B               	btg	3979,0,c	;volatile
 12342  003B6A  0012               	return	
 12343  003B6C  0012               	return		;funcret
 12344  003B6E                     __end_of_Set_4051:
 12345                           	opt stack 0
 12346                           pclatu	equ	0xFFB
 12347                           pclath	equ	0xFFA
 12348                           tblptru	equ	0xFF8
 12349                           tblptrh	equ	0xFF7
 12350                           tblptrl	equ	0xFF6
 12351                           tablat	equ	0xFF5
 12352                           prodh	equ	0xFF4
 12353                           prodl	equ	0xFF3
 12354                           intcon	equ	0xFF2
 12355                           intcon2	equ	0xFF1
 12356                           postinc0	equ	0xFEE
 12357                           fsr0h	equ	0xFEA
 12358                           fsr0l	equ	0xFE9
 12359                           wreg	equ	0xFE8
 12360                           postinc1	equ	0xFE6
 12361                           postdec1	equ	0xFE5
 12362                           fsr1h	equ	0xFE2
 12363                           fsr1l	equ	0xFE1
 12364                           postinc2	equ	0xFDE
 12365                           postdec2	equ	0xFDD
 12366                           fsr2h	equ	0xFDA
 12367                           fsr2l	equ	0xFD9
 12368                           status	equ	0xFD8
 12369                           
 12370 ;; *************** function _ADC_StartConversion *****************
 12371 ;; Defined at:
 12372 ;;		line 39 in file "mcc_generated_files/adc.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;  channel         1    wreg     enum E8837
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;  channel         1    1[COMRAM] enum E8837
 12377 ;; Return value:  Size  Location     Type
 12378 ;;		None               void
 12379 ;; Registers used:
 12380 ;;		wreg, status,2, status,0
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12386 ;;      Params:         0       0       0       0       0       0       0
 12387 ;;      Locals:         1       0       0       0       0       0       0
 12388 ;;      Temps:          1       0       0       0       0       0       0
 12389 ;;      Totals:         2       0       0       0       0       0       0
 12390 ;;Total ram usage:        2 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; This function calls:
 12393 ;;		Nothing
 12394 ;; This function is called by:
 12395 ;;		_ADC_ISR
 12396 ;;		_Battery_Read
 12397 ;;		_Temp_Read
 12398 ;; This function uses a non-reentrant model
 12399 ;;
 12400                           
 12401                           	psect	text54
 12402  003C86                     __ptext54:
 12403                           	opt stack 0
 12404  003C86                     _ADC_StartConversion:
 12405                           	opt stack 22
 12406                           
 12407                           ;incstack = 0
 12408                           ;ADC_StartConversion@channel stored from wreg
 12409  003C86  6E02               	movwf	ADC_StartConversion@channel,c
 12410                           
 12411                           ;adc.c: 42: ADCON0bits.CHS = channel;
 12412  003C88  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 12413  003C8C  4601               	rlncf	??_ADC_StartConversion,f,c
 12414  003C8E  4601               	rlncf	??_ADC_StartConversion,f,c
 12415  003C90  50C2               	movf	4034,w,c	;volatile
 12416  003C92  1801               	xorwf	??_ADC_StartConversion,w,c
 12417  003C94  0B83               	andlw	-125
 12418  003C96  1801               	xorwf	??_ADC_StartConversion,w,c
 12419  003C98  6EC2               	movwf	4034,c	;volatile
 12420                           
 12421                           ;adc.c: 45: ADCON0bits.ADON = 1;
 12422  003C9A  80C2               	bsf	4034,0,c	;volatile
 12423                           
 12424                           ;adc.c: 49: ADCON0bits.GO_nDONE = 1;
 12425  003C9C  82C2               	bsf	4034,1,c	;volatile
 12426  003C9E  0012               	return		;funcret
 12427  003CA0                     __end_of_ADC_StartConversion:
 12428                           	opt stack 0
 12429                           pclatu	equ	0xFFB
 12430                           pclath	equ	0xFFA
 12431                           tblptru	equ	0xFF8
 12432                           tblptrh	equ	0xFF7
 12433                           tblptrl	equ	0xFF6
 12434                           tablat	equ	0xFF5
 12435                           prodh	equ	0xFF4
 12436                           prodl	equ	0xFF3
 12437                           intcon	equ	0xFF2
 12438                           intcon2	equ	0xFF1
 12439                           postinc0	equ	0xFEE
 12440                           fsr0h	equ	0xFEA
 12441                           fsr0l	equ	0xFE9
 12442                           wreg	equ	0xFE8
 12443                           postinc1	equ	0xFE6
 12444                           postdec1	equ	0xFE5
 12445                           fsr1h	equ	0xFE2
 12446                           fsr1l	equ	0xFE1
 12447                           postinc2	equ	0xFDE
 12448                           postdec2	equ	0xFDD
 12449                           fsr2h	equ	0xFDA
 12450                           fsr2l	equ	0xFD9
 12451                           status	equ	0xFD8
 12452                           
 12453 ;; *************** function _ADC_GetConversionResult *****************
 12454 ;; Defined at:
 12455 ;;		line 58 in file "mcc_generated_files/adc.c"
 12456 ;; Parameters:    Size  Location     Type
 12457 ;;		None
 12458 ;; Auto vars:     Size  Location     Type
 12459 ;;		None
 12460 ;; Return value:  Size  Location     Type
 12461 ;;                  2    0[COMRAM] unsigned int 
 12462 ;; Registers used:
 12463 ;;		wreg, status,2, status,0
 12464 ;; Tracked objects:
 12465 ;;		On entry : 0/0
 12466 ;;		On exit  : 0/0
 12467 ;;		Unchanged: 0/0
 12468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12469 ;;      Params:         2       0       0       0       0       0       0
 12470 ;;      Locals:         0       0       0       0       0       0       0
 12471 ;;      Temps:          2       0       0       0       0       0       0
 12472 ;;      Totals:         4       0       0       0       0       0       0
 12473 ;;Total ram usage:        4 bytes
 12474 ;; Hardware stack levels used:    1
 12475 ;; This function calls:
 12476 ;;		Nothing
 12477 ;; This function is called by:
 12478 ;;		_ADC_ISR
 12479 ;; This function uses a non-reentrant model
 12480 ;;
 12481                           
 12482                           	psect	text55
 12483  003D16                     __ptext55:
 12484                           	opt stack 0
 12485  003D16                     _ADC_GetConversionResult:
 12486                           	opt stack 23
 12487                           
 12488                           ;adc.c: 61: return ((ADRESH << 8) + ADRESL);
 12489                           
 12490                           ;incstack = 0
 12491  003D16  50C4               	movf	4036,w,c	;volatile
 12492  003D18  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 12493  003D1A  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 12494  003D1C  50C3               	movf	4035,w,c	;volatile
 12495  003D1E  2403               	addwf	??_ADC_GetConversionResult,w,c
 12496  003D20  6E01               	movwf	?_ADC_GetConversionResult,c
 12497  003D22  0E00               	movlw	0
 12498  003D24  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 12499  003D26  6E02               	movwf	?_ADC_GetConversionResult+1,c
 12500  003D28  0012               	return	
 12501  003D2A  0012               	return		;funcret
 12502  003D2C                     __end_of_ADC_GetConversionResult:
 12503                           	opt stack 0
 12504                           pclatu	equ	0xFFB
 12505                           pclath	equ	0xFFA
 12506                           tblptru	equ	0xFF8
 12507                           tblptrh	equ	0xFF7
 12508                           tblptrl	equ	0xFF6
 12509                           tablat	equ	0xFF5
 12510                           prodh	equ	0xFF4
 12511                           prodl	equ	0xFF3
 12512                           intcon	equ	0xFF2
 12513                           intcon2	equ	0xFF1
 12514                           postinc0	equ	0xFEE
 12515                           fsr0h	equ	0xFEA
 12516                           fsr0l	equ	0xFE9
 12517                           wreg	equ	0xFE8
 12518                           postinc1	equ	0xFE6
 12519                           postdec1	equ	0xFE5
 12520                           fsr1h	equ	0xFE2
 12521                           fsr1l	equ	0xFE1
 12522                           postinc2	equ	0xFDE
 12523                           postdec2	equ	0xFDD
 12524                           fsr2h	equ	0xFDA
 12525                           fsr2l	equ	0xFD9
 12526                           status	equ	0xFD8
 12527                           pclatu	equ	0xFFB
 12528                           pclath	equ	0xFFA
 12529                           tblptru	equ	0xFF8
 12530                           tblptrh	equ	0xFF7
 12531                           tblptrl	equ	0xFF6
 12532                           tablat	equ	0xFF5
 12533                           prodh	equ	0xFF4
 12534                           prodl	equ	0xFF3
 12535                           intcon	equ	0xFF2
 12536                           intcon2	equ	0xFF1
 12537                           postinc0	equ	0xFEE
 12538                           fsr0h	equ	0xFEA
 12539                           fsr0l	equ	0xFE9
 12540                           wreg	equ	0xFE8
 12541                           postinc1	equ	0xFE6
 12542                           postdec1	equ	0xFE5
 12543                           fsr1h	equ	0xFE2
 12544                           fsr1l	equ	0xFE1
 12545                           postinc2	equ	0xFDE
 12546                           postdec2	equ	0xFDD
 12547                           fsr2h	equ	0xFDA
 12548                           fsr2l	equ	0xFD9
 12549                           status	equ	0xFD8
 12550                           
 12551                           	psect	rparam
 12552  0000                     pclatu	equ	0xFFB
 12553                           pclath	equ	0xFFA
 12554                           tblptru	equ	0xFF8
 12555                           tblptrh	equ	0xFF7
 12556                           tblptrl	equ	0xFF6
 12557                           tablat	equ	0xFF5
 12558                           prodh	equ	0xFF4
 12559                           prodl	equ	0xFF3
 12560                           intcon	equ	0xFF2
 12561                           intcon2	equ	0xFF1
 12562                           postinc0	equ	0xFEE
 12563                           fsr0h	equ	0xFEA
 12564                           fsr0l	equ	0xFE9
 12565                           wreg	equ	0xFE8
 12566                           postinc1	equ	0xFE6
 12567                           postdec1	equ	0xFE5
 12568                           fsr1h	equ	0xFE2
 12569                           fsr1l	equ	0xFE1
 12570                           postinc2	equ	0xFDE
 12571                           postdec2	equ	0xFDD
 12572                           fsr2h	equ	0xFDA
 12573                           fsr2l	equ	0xFD9
 12574                           status	equ	0xFD8


Data Sizes:
    Strings     32
    Constant    145
    Data        0
    BSS         350
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     61      73
    BANK0           160     84     154
    BANK1           256      0     240
    BANK2           256      0      30
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_2(CODE[9]), STR_1(CODE[23]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    ___lltoft->___ftpack
    ___llmod->___lldiv
    _Temp_Fault->___ftge
    _Temp_Convert->___ftdiv
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Current_Fault->___ftdiv
    ___awdiv->___awmod
    ___ftadd->___ftdiv
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___ftdiv
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Current_Read->_ADC_GetConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Current_Fault->___ftadd
    _Current_Convert->_Current_Filter
    _Current_Filter->___ftadd
    ___ftadd->_fround
    _Battery_Convert->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  267874
                                             79 BANK0      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                    _Current_Convert
                      _Current_Fault
                        _Current_Get
                              _Delay
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   75564
                                             43 BANK0     36    31      5
                        _Current_Get (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   18387
                                             15 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   18108
                                             15 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                             22 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                             22 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2703
                                             30 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             35 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             22 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                             22 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    8844
                                             51 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   91395
                                             54 BANK0     11    11      0
                        _Temp_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   37104
                                             49 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   20602
                                             37 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6229
                                             37 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   20408
                                             37 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    9520
                                             51 COMRAM     7     7      0
                        _Battery_Get
                           _SetBypas
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypas                                             6     2      4     432
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    7424
                                             42 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Delay                                                5     3      2     366
                                             22 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Current_Get                                          3     0      3       0
                                             22 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Current_Fault                                        9     9      0   18984
                                             37 BANK0      9     9      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Current_Convert                                      4     4      0   32689
                                             39 BANK0      4     4      0
                     _Current_Filter
                            ___awdiv
                           ___awtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1836
                                             28 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Current_Filter                                       2     2      0   20408
                                             37 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5711
                                             25 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    8875
                                             51 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1416
                                             42 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      2     2      0   21637
                                             15 BANK0      2     2      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    7316
                                             36 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    7090
                                              0 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4136
                                             46 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2965
                                             42 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1149
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0      59
                       _Battery_Read
                       _Current_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Current_Read                                         0     0      0      15
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversion                                    2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1090
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     514
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Current_Convert
     _Current_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Current_Fault
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Current_Get
   _Delay
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _SetBypas
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     _Current_Get (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Current_Read
       _ADC_GetConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      1E       8       11.7%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F0       6       93.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     54      9A       4       96.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3D      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F1       9        0.0%
DATA                 0      0     1F1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Jun 06 14:19:38 2015

                       ___awdiv@sign 0022                  ___wmul@multiplicand 0027  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 0084                         ___ftadd@exp2 0083  
                       ___ftadd@sign 0082                                  l311 3B8A  
                                l270 35BC                                  l530 349A  
                                l523 348A                                  l516 347A  
                                l508 346A                                  l285 345A  
                                l462 2496                                  l358 3968  
                                l551 34CA                                  l544 34BA  
                                l560 320A                                  l368 2646  
                                l537 34AA                                  l475 27BC  
                                l662 0E3E                                  l995 2E26  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0048                                  _log 2A7C  
                    __end_of_ADC_ISR 17FC                         ___awmod@sign 001C  
                                wreg 000FE8               __size_of_Current_Fault 018C  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 0038  
                      SetBypas@state 0019                         ___ftdiv@sign 003D  
                               l1102 301E                                 l1110 2C84  
                               l1116 2CF2                                 l1141 3C34  
                               l1109 2C5C                                 l1038 3376  
                               l1206 38E8                                 l1071 1CC2  
                               l1073 1CEC                                 l1082 1DD0  
                               l1091 1DFA                                 l1067 1C88  
                               l1196 37F6                                 l3301 384C  
                               l3313 387E                                 l3305 3862  
                               l3251 35E6                                 l5013 2FB8  
                               l3261 360E                                 l3245 35D4  
                               l3309 386E                                 l5007 2F90  
                               l5103 3960                                 l5033 2FF8  
                               l3257 35FC                                 l3273 3638  
                               l3337 3712                                 l5113 212A  
                               l5043 302C                                 l3259 3606  
                               l5211 24C0                                 l4075 3B78  
                               l5051 3A46                                 l3611 2CC4  
                               l3277 3648                                 l3269 362C  
                               l5141 315A                                 l3293 382C  
                               l5221 06DA                                 l5071 352E  
                               l5207 24A0                                 l3471 345E  
                               l3607 2CB4                                 l5311 0A66  
                               l5303 09F6                                 l5223 06F0  
                               l3481 34AE                                 l3473 346E  
                               l5153 31C4                                 l5145 316E  
                               l5137 2340                                 l5057 3970  
                               l3633 2D40                                 l3617 2CDE  
                               l3297 383A                                 l3289 381E  
                               l3561 3C5A                                 l5313 0A7C  
                               l5233 0734                                 l5241 07AC  
                               l5217 06C4                                 l5083 33AA  
                               l5067 351A                                 l3483 34BE  
                               l3475 347E                                 l3811 37AC  
                               l5059 397E                                 l3627 2D22  
                               l3619 2CEC                                 l3571 2BF6  
                               l3299 3844                                 l5331 0B6E  
                               l5323 0AF0                                 l5307 0A1E  
                               l5251 0812                                 l5227 06FE  
                               l4701 3326                                 l5077 35B4  
                               l5165 3216                                 l3477 348E  
                               l3821 37E6                                 l3813 37B4  
                               l5421 0FB8                                 l5405 0E6A  
                               l5325 0AFC                                 l5333 0B82  
                               l5309 0A34                                 l5261 0848  
                               l5253 082A                                 l5229 0714  
                               l5087 33C4                                 l3743 36B8  
                               l5175 32D4                                 l5183 2386  
                               l3479 349E                                 l3487 34CE  
                               l5159 3202                                 l5095 3906  
                               l3831 38AA                                 l3671 2DF8  
                               l3655 2DB6                                 l3647 2D84  
                               l5503 124C                                 l5415 0F98  
                               l5351 0C3E                                 l5343 0BFE  
                               l5319 0ACA                                 l5423 0FC8  
                               l5263 087A                                 l5247 07D4  
                               l4721 3390                                 l4705 333E  
                               l5169 3230                                 l3809 379E  
                               l3833 38B2                                 l3577 2C22  
                               l5441 103C                                 l5433 100E  
                               l5417 0FA8                                 l5409 0EBC  
                               l5337 0BEA                                 l5329 0B40  
                               l5257 083C                                 l5601 2F54  
                               l4715 337E                                 l4707 335E  
                               l3739 3686                                 l5195 2416  
                               l5179 236C                                 l5099 391A  
                               l3763 2964                                 l3667 2DE8  
                               l3659 2DC6                                 l5507 12D4  
                               l5371 0D12                                 l5355 0C90  
                               l5347 0C38                                 l5339 0BF0  
                               l4709 336A                                 l4813 2832  
                               l3749 36E4                                 l5189 23D8  
                               l4901 2AA0                                 l3781 29F8  
                               l3837 38D8                                 l3829 389C  
                               l3677 2E12                                 l5461 10E4  
                               l5453 108A                                 l5445 104A  
                               l5381 0D5E                                 l5365 0CE8  
                               l5269 0896                                 l5509 12EE  
                               l5541 2E3E                                 l4831 28A2  
                               l4807 27F8                                 l4751 1CE2  
                               l5199 2430                                 l3791 2A2A  
                               l3679 2E20                                 l3599 2C92  
                               l5439 1036                                 l5375 0D22  
                               l5359 0CBA                                 l5295 098E  
                               l5279 08DE                                 l5551 2E5A  
                               l5543 2E42                                 l4841 28E6  
                               l4761 1D24                                 l4745 1CD0  
                               l3793 2A3C                                 l3785 2A0C  
                               l5481 11A2                                 l5473 1152  
                               l5457 10B2                                 l5449 1084  
                               l5393 0E0C                                 l5377 0D36  
                               l5369 0CF8                                 l5545 2E50  
                               l4835 28BE                                 l4827 2882  
                               l4771 1D74                                 l4739 1C96  
                               l4931 274C                                 l4923 266C  
                               l4907 2ACE                                 l3795 2A4A  
                               l5475 115E                                 l5467 111A  
                               l5395 0E20                                 l5387 0DEC  
                               l5547 2E54                                 l4693 32EA  
                               l4845 2902                                 l4837 28C6  
                               l4781 1DC0                                 l4773 1D80  
                               l5493 11FA                                 l5389 0DFC  
                               ?_log 0091                                 l4767 1D54  
                               l4935 2766                                 l4919 2652  
                               l4863 3098                                 l3799 2A68  
                               l4951 1FF0                                 l5495 1206  
                               l5487 11D0                                 l5479 1196  
                               l5399 0E44                                 l5591 2F12  
                               l5559 2E7A                                 l4697 32FA  
                               l4857 3AD6                                 l4769 1D64  
                               l4929 2742                                 l4873 24DC  
                               l4865 311C                                 l5489 11DC  
                               l5585 2EFC                                 l5569 2E9E  
                               l4699 3306                                 l4787 1E26  
                               l4779 1DB0                                 l4883 25CC  
                               l5499 1224                                 l5587 2F00  
                               l5595 2F30                                 l5579 2EE2  
                               l4797 1E76                                 l4885 25D6  
                               l4877 24F6                                 l4973 1940  
                               l5589 2F0E                                 l4959 20BC  
                               l4991 1B4A                                 l4983 1A14  
                               l5599 2F46                                 l4889 25F0  
                               l4979 19EE                                 l4997 1BF8  
                               STR_1 0692                                 STR_2 06A9  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               u3121 2BDA                                 _LATE 000F8D  
                               u3141 2C06                                 u3400 298A  
                               u3405 2980                                 u2810 373A  
                       printf@tmpval 009B                                 u3381 2940  
                               u5310 2128                                 u5151 2F78  
                               u2818 373C                                 u5171 2FA0  
                               u4701 1C54                                 u5450 24B6  
                               u6147 3B7E                                 u4901 27D4  
                               u5550 0924                                 u4921 280E  
                               u4691 1C36                                 u5555 0918  
                               u5770 0E36                                 _TMR1 000FCE  
                               _WPUB 000F61                                 _main 2E38  
                       ___ftpack@arg 0017                         ___ftpack@exp 001A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 log@x 0091  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AA  
                      __CFG_IESO$OFF 000000                         ___ftmul@cntr 006D  
                       ___param_bank 000010                         ___ftmul@sign 006E  
                  ADC_ISR@ADC_Result 0007                         ___fttol@exp1 0084  
                              ??_log 003E                         ___fttol@lval 0080  
            __size_of_Current_Filter 0176                     ?_Battery_Convert 0001  
                      ??_Current_Get 001A       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 3D3A                       Current_Fault@i 0087  
                              ?_main 00AF                      __end_of___awdiv 3654  
                    __end_of___ftadd 1E9E                      __end_of___awmod 388A  
                    __end_of___ftdiv 3054                      _TMR1_StartTimer 3D54  
                    __end_of___ftneg 3C42                      __end_of___lldiv 3808  
                    __end_of___ftmul 292A                      ___awdiv@divisor 001F  
                              _T1CON 000FCD                      __end_of___llmod 38FA  
                    __end_of___ftsub 3A72                      __end_of___fttol 2A7C  
                              _LATB0 007C50                                _LATB1 007C51  
                              _LATC0 007C58                                _LATB2 007C52  
                              _LATA4 007C4C                                _LATA6 007C4E  
                              _LATA7 007C4F                                _LATD2 007C62  
                              _LATD3 007C63                                _LATD4 007C64  
                              _LATD5 007C65                                _LATD6 007C66  
                              _LATD7 007C67                       __CFG_DEBUG$OFF 000000  
                              i2l123 3C12                                i2l220 0058  
                              i2l222 0064                                i2l226 0070  
                              i2l218 004C                      ___awdiv@counter 0021  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0016  
                              _Delay 3B6E                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                         ___lltoft@exp 0027  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        ?_Current_Read 0001  
                   __end_of_TMR1_ISR 3A22                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002E  
                              _fault 00E4                      __end_of_dpowers 0629  
                              _frexp 36EA                                _errno 00E2  
                              _scale 17FC                      __end_of_isdigit 3C64  
                 __CFG_MCLRE$EXTMCLR 000000                        ___ftpack@sign 001B  
                              _putch 3D58              __end_of_TMR1_Initialize 3C86  
                        _Battery_Adc 00B4                                tablat 000FF5  
                        _Battery_Get 3BA0                                status 000FD8  
                     __CFG_HFOFST$ON 000000                      RunBypas@cellbyp 0034  
                    RunBypas@batvolt 0036                       __CFG_PBADEN$ON 000000  
                    __initialization 3AFC                          log@exponent 0094  
                      _Current_Fault 2346                         __end_of_main 2F68  
                   __end_of_Set_4051 3B6E                            ??_ADC_ISR 0005  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 003E  
                      ___fttol@sign1 007F                     __end_of_SetBypas 350E  
           __size_of_Current_Convert 00CE                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                 __size_of__tdiv_to_l_ 013A  
                             ?_Delay 0017                       ??_Current_Read 0003  
                   __end_of_RunBypas 320C                  __end_of_Current_Get 3D48  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               ?_frexp 0017  
                   ___llmod@dividend 0024                               ?_scale 006F  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                   ___awdiv@dividend 001D                     __end_of___awtoft 3AFC  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 33A0                      Current_Filter@x 0085  
                             _T1GCON 000FCC                     __end_of___lltoft 39CA  
              __size_of_Battery_Read 0018                               i2l4001 1726  
                             i2l4013 178C                               i2l4005 1748  
                             i2l4021 17B6                               i2l4023 17F4  
                             i2l4009 176A                       __CFG_WDTEN$OFF 000000  
                             Delay@x 001A                               i2l3383 3B3E  
                             i2l3385 3B50                               i2l3903 13E8  
                             i2l3921 1472                               i2l3915 1444  
                             i2l3931 14E0                               i2l3941 151C  
                             i2l3909 1416                               i2l3933 14E6  
                             i2l3861 39F2                               i2l3961 15C6  
                             i2l3953 1582                               i2l3945 153E  
                             i2l3937 14FA                               i2l3929 149C  
                             i2l3865 3A00                               i2l3891 138C  
                             i2l3859 39E8                               i2l3973 162C  
                             i2l3965 15E8                               i2l3957 15A4  
                             i2l3949 1560                               i2l3981 1656  
                             i2l3885 135E                               i2l3869 3A10  
                             i2l3983 16A6                               i2l3879 1330  
                             i2l3993 16E2                               i2l3969 160A  
                             i2l3985 16AC                               i2l3897 13BA  
                             i2l3997 1704                               i2l3989 16C0  
                      ??_Temp_Filter 003E                               _OSCCON 000FD3  
                         _Temp_Fault 38FA                       __CFG_XINST$OFF 000000  
                     ?_Current_Fault 0001                     __end_of__powers_ 0677  
                             ___ftge 3654              __end_of_TMR1_StartTimer 3D58  
                             ___wmul 3BD0                            ??___awdiv 0021  
                          ??___ftadd 007F                       __CFG_STVREN$ON 000000  
                          ??___awmod 001B                            ??___ftdiv 0035  
                          ??___ftneg 001A                            ??___lldiv 001F  
                          ??___ftmul 0066                            ??___llmod 002C  
                          ??___ftsub 003E                            ??___fttol 007A  
                             _fround 1E9E                               clear_0 3B02  
                             clear_1 3B0E                               clear_2 3B1A  
                             clear_3 3B26                     ___awdiv@quotient 0023  
                 __size_of_Temp_Read 0018                      ___awmod@divisor 0019  
                    ___awmod@counter 001B                               _printf 06B4  
              ___ftmul@f3_as_product 006A                            ??_isdigit 0017  
                       _Battery_Read 3CE8                         _Battery_Volt 011E  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0002                               putch@c 0001  
      __size_of_INTERRUPT_Initialize 000C                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 3D00                     __end_oflog@coeff 0692  
                         __accesstop 0060              __end_of__initialization 3B2C  
                         ___ftadd@f1 0079                           ___ftadd@f2 007C  
                         ___ftge@ff1 002B                           ___ftge@ff2 002E  
                 ?_SYSTEM_Initialize 0001                         eval_poly@res 008E  
                      ___rparam_used 000001                           ___ftdiv@f1 002F  
                         ___ftdiv@f2 0032                           ___ftdiv@f3 0039  
                        SetBypas@pin 0017                           ___ftneg@f1 0017  
                         ___awtoft@c 002B                        __end_of_Delay 3BA0  
                         ___ftmul@f1 0060                           ___ftmul@f2 0063  
                         ___ftsub@f1 0085                           ___ftsub@f2 0088  
                __end_of_Temp_Filter 2648                           ___fttol@f1 0076  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0017                            ?_TMR1_ISR 0001  
                         ___lltoft@c 001F                       _Current_Filter 2648  
                     _Current_Aquire 0045                        __end_of_frexp 377C  
                      __end_of_scale 1C20                        __end_of_putch 3D5A  
                        _Current_Adc 00C8                          _Current_Get 3D3A  
              Battery_Get@channelnum 002B              _ADC_GetConversionResult 3D16  
                         __div_to_l_ 2D04                              ??_Delay 0019  
                      ?_Temp_Convert 0001                    ??_Current_Convert 003E  
                    __div_to_l_@exp1 0022                      __div_to_l_@cntr 0021  
                            ??_frexp 001C                              ??_scale 003E  
          __end_of_SYSTEM_Initialize 3D16                      __div_to_l_@quot 001D  
                            ??_putch 0017                           __pbssBANK0 00B4  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                 __size_of_eval_poly 00E2                      __CFG_PLLCFG$OFF 000000  
                  __end_of_Temp_Read 3CD0                            ?_Set_4051 0001  
                         __pnvCOMRAM 0048                Temp_Convert@steinhart 009E  
                        ?_Temp_Fault 0001                        __div_to_l_@f1 0017  
                      __div_to_l_@f2 001A                      ??_Current_Fault 003E  
                          ?_SetBypas 0017                   __CFG_CCP2MX$PORTC1 000000  
             __end_of_Current_Filter 27BE                 __end_of_Current_Read 3CE8  
                        Temp_Fault@i 0035                  _TempBattery_Current 01B4  
                            ?___ftge 002B                            ?_RunBypas 0001  
                            ?___wmul 0025                     ?_TMR1_StartTimer 0001  
                         ??_TMR1_ISR 0003                   __CFG_CCP3MX$PORTB5 000000  
                            _ADC_ISR 1312                              ?_fround 006F  
                          ?___awtoft 002B                            ?___ftpack 0017  
                            ?_printf 008B                            ?___lltoft 001F  
            __size_of_ADC_Initialize 0018                        Temp_Convert@x 009C  
             __size_of_Battery_Fault 00B0                      Temp_Fault@fault 0034  
                   Current_Convert@x 0089                   Current_Fault@i_884 0089  
                     Battery_Fault@i 0035                              _OSCCON2 000FD2  
                     ??_Temp_Convert 003E                   Current_Fault@fault 0085  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                       ?_Battery_Get 002B                           ??_Set_4051 0003  
                        _Temp_Filter 24D2                          _Temp_Aquire 0046  
                         ??_SetBypas 001B                      __CFG_PWRTEN$OFF 000000  
                  __end_of__npowers_ 0650                              __Hparam 0000  
                         _scale$1609 0072                              __Lparam 0000  
                    ?_Current_Filter 0001                           ??_RunBypas 0034  
                    __size_of___ftge 0096                              ___awdiv 35BE  
                            ___ftadd 1C20                              ___awmod 3808  
                            ___ftdiv 2F68                              ___ftneg 3C1E  
                            ___lldiv 377C                      __size_of___wmul 0028  
                            ___ftmul 27BE                              ___llmod 388A  
                            ___ftsub 3A22                              ___fttol 292A  
                       __psmallconst 0600            ??_ADC_GetConversionResult 0003  
                            __pcinit 3AFC                           ??___awtoft 002E  
                         ??___ftpack 001C                    __end_of_eval_poly 3136  
                    __size_of_fround 0268                              __ramtop 0600  
                         ??___lltoft 0023                              __ptext0 2E38  
                            __ptext1 06B4                              __ptext2 17FC  
                            __ptext3 3D58                              __ptext4 3C42  
                            __ptext5 1E9E                              __ptext6 3808  
                            __ptext7 2BCA                              __ptext8 2D04  
                            __ptext9 396A                      __size_of_printf 0C5E  
                          _T1CONbits 000FCD                          ?__div_to_l_ 0017  
                            _infault 00E5                              _dpowers 0601  
              _OSCILLATOR_Initialize 3D2C                         __size_of_log 014E  
                            _isdigit 3C42                     ___awmod@dividend 0017  
                __size_of_Temp_Fault 0070             ??_PIN_MANAGER_Initialize 0017  
           __size_of_Battery_Convert 00BC           __size_of_SYSTEM_Initialize 0016  
               end_of_initialization 3B2C                            Delay@wait 0017  
                      __Lmediumconst 0000                        _Battery_Fault 350E  
                    ___lldiv@divisor 001B                      ___lldiv@counter 0023  
                            printf@c 00AE                              printf@f 008B  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                     Battery_Convert@x 006F  
                     __tdiv_to_l_@f1 0017                       __tdiv_to_l_@f2 001A  
                      ??__tdiv_to_l_ 001D                  _ADC_StartConversion 3C86  
                        _Volt_Aquire 0047                       ?_Battery_Fault 0001  
              __size_of_Current_Read 0018                          ___ftdiv@exp 003C  
                        printf@width 00A7                  __size_of__div_to_l_ 0134  
                        ___ftmul@exp 0069                 ?_ADC_StartConversion 0001  
               __end_of_Temp_Convert 2346         __end_of_INTERRUPT_Initialize 3D54  
                     __end_of___ftge 36EA                       __end_of___wmul 3BF8  
                    _Current_Convert 320C                         ?_Current_Get 0017  
                  __size_of_TMR1_ISR 0058                       _ADC_Initialize 3CA0  
             ?_OSCILLATOR_Initialize 0001                       __end_of_fround 2106  
                     __end_of_printf 1312                  start_initialization 3AFC  
                         eval_poly@d 0088                           eval_poly@n 008A  
                         eval_poly@x 0085                 _Current_Convert$1606 0087  
    __size_of_PIN_MANAGER_Initialize 004E                  __end_of__tdiv_to_l_ 2D04  
                       _Current_Done 00DC                         _Current_Mean 003E  
                       _Current_Read 3CD0                          __end_of_log 2BCA  
                         frexp@value 0017                    ??_Battery_Convert 003E  
                    ___llmod@divisor 0028                 __size_of_Battery_Get 0030  
                    ___llmod@counter 002C                         ??_Temp_Fault 0034  
                  __size_of_Set_4051 0038                            _Temp_DegF 0196  
                   _PrevBattery_Volt 015A                            _Temp_Done 00DE  
                          _Temp_Read 3CB8                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                    __size_of_SetBypas 00B2  
                           ??___ftge 0031                             ??___wmul 0029  
             __end_of_ADC_Initialize 3CB8                            RunBypas@i 0039  
                           ?_ADC_ISR 0001                             ??_fround 003E  
                  __size_of_RunBypas 00D6                             ??_printf 0090  
                         fround@prec 0078                    __size_of___awtoft 003C  
                  __size_of___ftpack 00C6                            _Volt_Done 00E0  
              TMR1_ISR@CountCallBack 0041                    __size_of___lltoft 0060  
                        __pbssCOMRAM 003E                        __pcstackBANK0 0060  
                 __end_of_Temp_Fault 396A                         _isdigit$1249 0018  
                      _PrevTemp_DegF 0178                      ??_Battery_Fault 0034  
                       ?_Temp_Filter 0001                     ??_Current_Filter 003E  
                         ?_Temp_Read 0001               _PIN_MANAGER_Initialize 3A72  
              __end_of_Current_Fault 24D2              __end_of_Current_Convert 32DA  
                          __pintcode 0008                    _Temp_Convert$1604 0096  
                  _Temp_Convert$1605 0099                             ?___awdiv 001D  
                           ?___ftadd 0079                             ?___awmod 0017  
                           ?___ftdiv 002F                             ?___ftneg 0017  
                           ?___lldiv 0017                             ?___ftmul 0060  
                           ?___llmod 0024                             ?___ftsub 0085  
                          __npowers_ 0629                             ?___fttol 0076  
                       Temp_Filter@x 0085                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 0009                          __tdiv_to_l_ 2BCA  
                  Current_Fault@temp 008B                         ??__div_to_l_ 001D  
                        __smallconst 0600             __size_of_TMR1_StartTimer 0004  
                           ?_isdigit 0001                            _eval_poly 3054  
                     __size_of_Delay 0032                       __size_of_frexp 0092  
                     __size_of_scale 0424                       __size_of_putch 0002  
               _INTERRUPT_Initialize 3D48                       ___wmul@product 0029  
              __size_of_Temp_Convert 0240                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A2  
                           i2u353_40 39E4                             _PIR1bits 000F9E  
                 __end_of__div_to_l_ 2E38                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 39CA  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 04EA  
                _PrevBattery_Current 013C                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0025                           printf@flag 00A5  
                         printf@fval 00A9                 __size_of_Current_Get 000E  
                         printf@prec 00AC                        ?_Battery_Read 0001  
                         ?_eval_poly 0085                         _Temp_Convert 2106  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                           _Set_4051 3B36                            frexp@eptr 001A  
                           _SetBypas 345C                             __Hrparam 0000  
                        ??_Temp_Read 0003                             _Temp_Adc 00E6  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                  _ADC_GetConversion 3BF8                     ?_Current_Convert 0001  
                 __CFG_BOREN$SBORDIS 000000                             _RunBypas 3136  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0017  
                 ?_ADC_GetConversion 0001                     __size_of___awdiv 0096  
                   __size_of___ftadd 027E                     __size_of___awmod 0082  
                   __size_of___ftdiv 00EC                     __size_of___ftneg 0024  
                   __size_of___lldiv 008C                     __size_of___ftmul 016C  
                   __size_of___llmod 0070                     __size_of___ftsub 0050  
                   __size_of___fttol 0152                             ___awtoft 3AC0  
                           ___ftpack 32DA                          _fround$1607 0075  
                        _fround$1608 0072                             ___lltoft 396A  
                     ??_Battery_Read 0003                  ??_ADC_GetConversion 0001  
                    _Battery_Convert 33A0                   Battery_Fault@fault 0034  
                   __size_of_isdigit 0022                      _Battery_Current 0100  
                           __ptext10 388A                             __ptext11 377C  
                           __ptext20 24D2                             __ptext12 292A  
                           __ptext21 3D00                             __ptext13 3C1E  
                         _T1GCONbits 000FCC                             __ptext30 3BA0  
                           __ptext22 3C64                             __ptext14 38FA  
                           __ptext31 3B6E                             __ptext23 3D54  
                           __ptext15 2106                             __ptext40 33A0  
                           __ptext32 3D3A                             __ptext24 3A72  
                           __ptext16 2A7C                             __ptext41 3BD0  
                           __ptext33 2346                             __ptext25 3D2C  
                           __ptext17 36EA                             __ptext50 3BF8  
                           __ptext42 27BE                             __ptext34 320C  
                           __ptext26 3D48                             __ptext18 3054  
                           __ptext51 3CE8                             __ptext43 2F68  
                           __ptext35 35BE                             __ptext27 3CA0  
                           __ptext19 3A22                             __ptext52 1312  
                           __ptext44 3AC0                             __ptext36 2648  
                           __ptext28 3136                             __ptext53 3B36  
                           __ptext45 32DA                             __ptext37 1C20  
                           __ptext29 345C                             __ptext54 3C86  
                           __ptext38 350E                             __ptext55 3D16  
                           __ptext47 39CA                             __ptext39 3654  
                           __ptext48 3CB8                             __ptext49 3CD0  
                           __powers_ 0650                    ??_TMR1_StartTimer 0017  
                      __size_of_main 0130            __end_of_ADC_GetConversion 3C1E  
                       _TmpTemp_DegF 01D2                 __size_of_Temp_Filter 0176  
 __end_of_INTERRUPT_InterruptManager 00AA           _INTERRUPT_InterruptManager 0008  
                           main@argc 00AF                            printf@exp 00A3  
                           main@argv 00B1                            printf@val 009F  
                           log@coeff 0677                           _INTCONbits 000FF2  
                        ??_eval_poly 008C                             isdigit@c 0019  
             ??_INTERRUPT_Initialize 0017                             scale@scl 0075  
                      ??_Battery_Get 002E                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0025                     __tdiv_to_l_@cntr 0024  
                   __tdiv_to_l_@quot 0020          __end_of_ADC_StartConversion 3CA0  
                   _TempBattery_Volt 0200                     ___lldiv@dividend 0017  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 3D2C  
                   ??_ADC_Initialize 0017                             printf@ap 0099  
            __end_of_Battery_Convert 345C                         ?__tdiv_to_l_ 0017  
                        _printf$1610 0096                     ___lldiv@quotient 001F  
                  __CFG_T3CMX$PORTC0 000000       __end_of_PIN_MANAGER_Initialize 3AC0  
              __end_of_Battery_Fault 35BE                    __CFG_FOSC$INTIO67 000000  
         __size_of_ADC_GetConversion 0026                 __end_of_Battery_Read 3D00  
                    _TMR1_Initialize 3C64                     _ADC_Buffer_Point 0043  
                __end_of_Battery_Get 3BD0                      Set_4051@Channel 0001  
