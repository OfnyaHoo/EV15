

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Apr 30 04:14:36 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           	psect	smallconst
    56  000600                     __psmallconst:
    57                           	opt stack 0
    58  000600  00                 	db	0
    59  000601                     log@coeff:
    60                           	opt stack 0
    61  000601  00                 	db	0
    62  000602  00                 	db	0
    63  000603  00                 	db	0
    64  000604  00                 	db	0
    65  000605  80                 	db	128
    66  000606  3F                 	db	63
    67  000607  F0                 	db	240
    68  000608  FF                 	db	255
    69  000609  BE                 	db	190
    70  00060A  E2                 	db	226
    71  00060B  A9                 	db	169
    72  00060C  3E                 	db	62
    73  00060D  83                 	db	131
    74  00060E  76                 	db	118
    75  00060F  BE                 	db	190
    76  000610  AE                 	db	174
    77  000611  2B                 	db	43
    78  000612  3E                 	db	62
    79  000613  3C                 	db	60
    80  000614  C3                 	db	195
    81  000615  BD                 	db	189
    82  000616  D2                 	db	210
    83  000617  13                 	db	19
    84  000618  3D                 	db	61
    85  000619  78                 	db	120
    86  00061A  D3                 	db	211
    87  00061B  BB                 	db	187
    88  00061C                     __end_oflog@coeff:
    89                           	opt stack 0
    90  0000                     _TMR1	set	4046
    91  0000                     _ADCON0	set	4034
    92  0000                     _ADCON0bits	set	4034
    93  0000                     _ADCON1	set	4033
    94  0000                     _ADCON2	set	4032
    95  0000                     _ADRESH	set	4036
    96  0000                     _ADRESL	set	4035
    97  0000                     _ANSELA	set	3896
    98  0000                     _ANSELB	set	3897
    99  0000                     _ANSELC	set	3898
   100  0000                     _ANSELD	set	3899
   101  0000                     _ANSELE	set	3900
   102  0000                     _BAUD1CON	set	4024
   103  0000                     _INTCON2bits	set	4081
   104  0000                     _INTCONbits	set	4082
   105  0000                     _IPR1bits	set	3999
   106  0000                     _LATA	set	3977
   107  0000                     _LATB	set	3978
   108  0000                     _LATC	set	3979
   109  0000                     _LATD	set	3980
   110  0000                     _LATE	set	3981
   111  0000                     _OSCCON	set	4051
   112  0000                     _OSCCON2	set	4050
   113  0000                     _OSCTUNE	set	3995
   114  0000                     _PIE1bits	set	3997
   115  0000                     _PIR1bits	set	3998
   116  0000                     _RC1REG	set	4014
   117  0000                     _RC1STA	set	4011
   118  0000                     _RC1STAbits	set	4011
   119  0000                     _RCONbits	set	4048
   120  0000                     _RCREG1	set	4014
   121  0000                     _SPBRG1	set	4015
   122  0000                     _SPBRGH1	set	4016
   123  0000                     _T1CON	set	4045
   124  0000                     _T1CONbits	set	4045
   125  0000                     _T1GCON	set	4044
   126  0000                     _T1GCONbits	set	4044
   127  0000                     _TMR1H	set	4047
   128  0000                     _TMR1L	set	4046
   129  0000                     _TRISA	set	3986
   130  0000                     _TRISB	set	3987
   131  0000                     _TRISC	set	3988
   132  0000                     _TRISD	set	3989
   133  0000                     _TRISE	set	3990
   134  0000                     _TX1REG	set	4013
   135  0000                     _TX1STA	set	4012
   136  0000                     _TXREG1	set	4013
   137  0000                     _WPUB	set	3937
   138  0000                     _LATA6	set	31822
   139  0000                     _LATA7	set	31823
   140  0000                     _LATB0	set	31824
   141  0000                     _LATB1	set	31825
   142  0000                     _LATB2	set	31826
   143  0000                     _LATC0	set	31832
   144  0000                     _LATD4	set	31844
   145  0000                     _LATD5	set	31845
   146  0000                     _LATD6	set	31846
   147  0000                     _LATD7	set	31847
   148  00061C  00                 	db	0	; dummy byte at the end
   149  0000                     
   150                           	psect	nvCOMRAM
   151  000047                     __pnvCOMRAM:
   152                           	opt stack 0
   153  000047                     _timer1ReloadVal:
   154                           	opt stack 0
   155  000047                     	ds	2
   156  000049                     _eusart1TxBufferRemaining:
   157                           	opt stack 0
   158  000049                     	ds	1
   159                           
   160                           ; #config settings
   161  0000                     
   162                           	psect	cinit
   163  001BFA                     __pcinit:
   164                           	opt stack 0
   165  001BFA                     start_initialization:
   166                           	opt stack 0
   167  001BFA                     __initialization:
   168                           	opt stack 0
   169                           
   170                           ; Clear objects allocated to BANK1 (210 bytes)
   171  001BFA  EE01  F000         	lfsr	0,__pbssBANK1
   172  001BFE  0ED2               	movlw	210
   173  001C00                     clear_0:
   174  001C00  6AEE               	clrf	postinc0,c
   175  001C02  06E8               	decf	wreg,f,c
   176  001C04  E1FD               	bnz	clear_0
   177                           
   178                           ; Clear objects allocated to BANK0 (122 bytes)
   179  001C06  EE00  F060         	lfsr	0,__pbssBANK0
   180  001C0A  0E7A               	movlw	122
   181  001C0C                     clear_1:
   182  001C0C  6AEE               	clrf	postinc0,c
   183  001C0E  06E8               	decf	wreg,f,c
   184  001C10  E1FD               	bnz	clear_1
   185                           
   186                           ; Clear objects allocated to COMRAM (12 bytes)
   187  001C12  EE00  F03B         	lfsr	0,__pbssCOMRAM
   188  001C16  0E0C               	movlw	12
   189  001C18                     clear_2:
   190  001C18  6AEE               	clrf	postinc0,c
   191  001C1A  06E8               	decf	wreg,f,c
   192  001C1C  E1FD               	bnz	clear_2
   193  001C1E                     end_of_initialization:
   194                           	opt stack 0
   195  001C1E                     __end_of__initialization:
   196                           	opt stack 0
   197  001C1E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   198  001C20  6EF8               	movwf	tblptru,c
   199  001C22  0100               	movlb	0
   200  001C24  EF6F  F00D         	goto	_main	;jump to C main() function
   201                           tblptru	equ	0xFF8
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           
   205                           	psect	bssCOMRAM
   206  00003B                     __pbssCOMRAM:
   207                           	opt stack 0
   208  00003B                     TMR1_ISR@CountCallBack:
   209                           	opt stack 0
   210  00003B                     	ds	2
   211  00003D                     _ADC_Buffer_Point:
   212                           	opt stack 0
   213  00003D                     	ds	2
   214  00003F                     _Current_Aquire:
   215                           	opt stack 0
   216  00003F                     	ds	1
   217  000040                     _Temp_Aquire:
   218                           	opt stack 0
   219  000040                     	ds	1
   220  000041                     _Volt_Aquire:
   221                           	opt stack 0
   222  000041                     	ds	1
   223  000042                     _eusart1RxCount:
   224                           	opt stack 0
   225  000042                     	ds	1
   226  000043                     _eusart1RxHead:
   227                           	opt stack 0
   228  000043                     	ds	1
   229  000044                     _eusart1RxTail:
   230                           	opt stack 0
   231  000044                     	ds	1
   232  000045                     _eusart1TxHead:
   233                           	opt stack 0
   234  000045                     	ds	1
   235  000046                     _eusart1TxTail:
   236                           	opt stack 0
   237  000046                     	ds	1
   238                           tblptru	equ	0xFF8
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	bssBANK0
   243  000060                     __pbssBANK0:
   244                           	opt stack 0
   245  000060                     _Battery_Current:
   246                           	opt stack 0
   247  000060                     	ds	30
   248  00007E                     _Battery_Volt:
   249                           	opt stack 0
   250  00007E                     	ds	30
   251  00009C                     _Battery_Adc:
   252                           	opt stack 0
   253  00009C                     	ds	20
   254  0000B0                     _eusart1RxBuffer:
   255                           	opt stack 0
   256  0000B0                     	ds	8
   257  0000B8                     _eusart1TxBuffer:
   258                           	opt stack 0
   259  0000B8                     	ds	8
   260  0000C0                     _Temp_Done:
   261                           	opt stack 0
   262  0000C0                     	ds	2
   263  0000C2                     _Volt_Done:
   264                           	opt stack 0
   265  0000C2                     	ds	2
   266  0000C4                     _errno:
   267                           	opt stack 0
   268  0000C4                     	ds	2
   269  0000C6                     _Temp_Adc:
   270                           	opt stack 0
   271  0000C6                     	ds	20
   272                           tblptru	equ	0xFF8
   273                           postinc0	equ	0xFEE
   274                           wreg	equ	0xFE8
   275                           
   276                           	psect	bssBANK1
   277  000100                     __pbssBANK1:
   278                           	opt stack 0
   279  000100                     _PrevBattery_Current:
   280                           	opt stack 0
   281  000100                     	ds	30
   282  00011E                     _PrevBattery_Volt:
   283                           	opt stack 0
   284  00011E                     	ds	30
   285  00013C                     _PrevTemp_DegF:
   286                           	opt stack 0
   287  00013C                     	ds	30
   288  00015A                     _Temp_DegF:
   289                           	opt stack 0
   290  00015A                     	ds	30
   291  000178                     _TempBattery_Current:
   292                           	opt stack 0
   293  000178                     	ds	30
   294  000196                     _TempBattery_Volt:
   295                           	opt stack 0
   296  000196                     	ds	30
   297  0001B4                     _TmpTemp_DegF:
   298                           	opt stack 0
   299  0001B4                     	ds	30
   300                           tblptru	equ	0xFF8
   301                           postinc0	equ	0xFEE
   302                           wreg	equ	0xFE8
   303                           
   304                           	psect	cstackBANK1
   305  0001D2                     __pcstackBANK1:
   306                           	opt stack 0
   307  0001D2                     _Temp_Convert$1637:
   308                           	opt stack 0
   309                           
   310                           ; 3 bytes @ 0x0
   311  0001D2                     	ds	3
   312  0001D5                     _Temp_Convert$1638:
   313                           	opt stack 0
   314                           
   315                           ; 3 bytes @ 0x3
   316  0001D5                     	ds	3
   317  0001D8                     Temp_Convert@x:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x6
   321  0001D8                     	ds	2
   322  0001DA                     Temp_Convert@steinhart:
   323                           	opt stack 0
   324                           
   325                           ; 3 bytes @ 0x8
   326  0001DA                     	ds	3
   327  0001DD                     
   328                           ; 2 bytes @ 0xB
   329  0001DD                     	ds	2
   330  0001DF                     
   331                           ; 3 bytes @ 0xD
   332  0001DF                     	ds	3
   333                           tblptru	equ	0xFF8
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           
   337                           	psect	cstackBANK0
   338  0000DA                     __pcstackBANK0:
   339                           	opt stack 0
   340  0000DA                     ___ftmul@exp:
   341                           	opt stack 0
   342                           
   343                           ; 1 bytes @ 0x0
   344  0000DA                     	ds	1
   345  0000DB                     ___ftmul@f3_as_product:
   346                           	opt stack 0
   347                           
   348                           ; 3 bytes @ 0x1
   349  0000DB                     	ds	3
   350  0000DE                     ___ftmul@cntr:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x4
   354  0000DE                     	ds	1
   355  0000DF                     ___ftmul@sign:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x5
   359  0000DF                     	ds	1
   360  0000E0                     ?___ftadd:
   361                           	opt stack 0
   362  0000E0                     ___ftadd@f1:
   363                           	opt stack 0
   364                           
   365                           ; 3 bytes @ 0x6
   366  0000E0                     	ds	3
   367  0000E3                     ___ftadd@f2:
   368                           	opt stack 0
   369                           
   370                           ; 3 bytes @ 0x9
   371  0000E3                     	ds	3
   372  0000E6                     ??___ftadd:
   373                           
   374                           ; 0 bytes @ 0xC
   375  0000E6                     	ds	3
   376  0000E9                     ___ftadd@sign:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0xF
   380  0000E9                     	ds	1
   381  0000EA                     ___ftadd@exp2:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x10
   385  0000EA                     	ds	1
   386  0000EB                     ___ftadd@exp1:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x11
   390  0000EB                     	ds	1
   391  0000EC                     ?___ftsub:
   392                           	opt stack 0
   393  0000EC                     ?_eval_poly:
   394                           	opt stack 0
   395  0000EC                     Battery_Filter@x:
   396                           	opt stack 0
   397  0000EC                     Temp_Filter@x:
   398                           	opt stack 0
   399  0000EC                     ___ftsub@f1:
   400                           	opt stack 0
   401  0000EC                     eval_poly@x:
   402                           	opt stack 0
   403                           
   404                           ; 3 bytes @ 0x12
   405  0000EC                     	ds	2
   406  0000EE                     ??_Battery_Convert:
   407                           
   408                           ; 0 bytes @ 0x14
   409  0000EE                     	ds	1
   410  0000EF                     eval_poly@d:
   411                           	opt stack 0
   412  0000EF                     ___ftsub@f2:
   413                           	opt stack 0
   414                           
   415                           ; 3 bytes @ 0x15
   416  0000EF                     	ds	1
   417  0000F0                     Battery_Convert@x:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x16
   421  0000F0                     	ds	1
   422  0000F1                     eval_poly@n:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x17
   426  0000F1                     	ds	2
   427  0000F3                     ??_eval_poly:
   428                           
   429                           ; 0 bytes @ 0x19
   430  0000F3                     	ds	2
   431  0000F5                     eval_poly@res:
   432                           	opt stack 0
   433                           
   434                           ; 3 bytes @ 0x1B
   435  0000F5                     	ds	3
   436  0000F8                     ?_log:
   437                           	opt stack 0
   438  0000F8                     log@x:
   439                           	opt stack 0
   440                           
   441                           ; 3 bytes @ 0x1E
   442  0000F8                     	ds	3
   443  0000FB                     log@exponent:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x21
   447  0000FB                     	ds	2
   448  0000FD                     ??_Temp_Convert:
   449                           
   450                           ; 0 bytes @ 0x23
   451  0000FD                     	ds	2
   452                           tblptru	equ	0xFF8
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           
   456                           	psect	cstackCOMRAM
   457  000001                     __pcstackCOMRAM:
   458                           	opt stack 0
   459  000001                     ??_ADC_StartConversion:
   460  000001                     ?_ADC_GetConversionResult:
   461                           	opt stack 0
   462  000001                     Set_4051@Channel:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x0
   466  000001                     	ds	1
   467  000002                     ADC_StartConversion@channel:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x1
   471  000002                     	ds	1
   472  000003                     ??_Set_4051:
   473  000003                     ??_TMR1_ISR:
   474  000003                     ??_ADC_GetConversionResult:
   475                           
   476                           ; 0 bytes @ 0x2
   477  000003                     	ds	2
   478  000005                     ??_ADC_ISR:
   479                           
   480                           ; 0 bytes @ 0x4
   481  000005                     	ds	2
   482  000007                     ADC_ISR@ADC_Result:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x6
   486  000007                     	ds	2
   487  000009                     ??_INTERRUPT_InterruptManager:
   488                           
   489                           ; 0 bytes @ 0x8
   490  000009                     	ds	14
   491  000017                     ?___wmul:
   492                           	opt stack 0
   493  000017                     ?___ftpack:
   494                           	opt stack 0
   495  000017                     ?_frexp:
   496                           	opt stack 0
   497  000017                     ___wmul@multiplier:
   498                           	opt stack 0
   499  000017                     ___ftpack@arg:
   500                           	opt stack 0
   501  000017                     frexp@value:
   502                           	opt stack 0
   503                           
   504                           ; 3 bytes @ 0x16
   505  000017                     	ds	2
   506  000019                     ___wmul@multiplicand:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x18
   510  000019                     	ds	1
   511  00001A                     ___ftpack@exp:
   512                           	opt stack 0
   513  00001A                     frexp@eptr:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x19
   517  00001A                     	ds	1
   518  00001B                     ___ftpack@sign:
   519                           	opt stack 0
   520  00001B                     ___wmul@product:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x1A
   524  00001B                     	ds	1
   525  00001C                     ??___ftpack:
   526  00001C                     ??_frexp:
   527                           
   528                           ; 0 bytes @ 0x1B
   529  00001C                     	ds	1
   530  00001D                     ___ftge@ff1:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x1C
   534  00001D                     	ds	2
   535  00001F                     ?___awtoft:
   536                           	opt stack 0
   537  00001F                     ___awtoft@c:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x1E
   541  00001F                     	ds	1
   542  000020                     ___ftge@ff2:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x1F
   546  000020                     	ds	2
   547  000022                     ___awtoft@sign:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x21
   551  000022                     	ds	1
   552  000023                     ??___ftge:
   553  000023                     ?___ftdiv:
   554                           	opt stack 0
   555  000023                     ___ftdiv@f1:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x22
   559  000023                     	ds	3
   560  000026                     Battery_Fault@fault:
   561                           	opt stack 0
   562  000026                     Temp_Fault@fault:
   563                           	opt stack 0
   564  000026                     ___ftdiv@f2:
   565                           	opt stack 0
   566                           
   567                           ; 3 bytes @ 0x25
   568  000026                     	ds	1
   569  000027                     Battery_Fault@i:
   570                           	opt stack 0
   571  000027                     Temp_Fault@i:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x26
   575  000027                     	ds	2
   576  000029                     ??___ftdiv:
   577                           
   578                           ; 0 bytes @ 0x28
   579  000029                     	ds	3
   580  00002C                     ___ftdiv@cntr:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x2B
   584  00002C                     	ds	1
   585  00002D                     ___ftdiv@f3:
   586                           	opt stack 0
   587                           
   588                           ; 3 bytes @ 0x2C
   589  00002D                     	ds	3
   590  000030                     ___ftdiv@exp:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x2F
   594  000030                     	ds	1
   595  000031                     ___ftdiv@sign:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x30
   599  000031                     	ds	1
   600  000032                     ?___ftmul:
   601                           	opt stack 0
   602  000032                     ___ftmul@f1:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0x31
   606  000032                     	ds	3
   607  000035                     ___ftmul@f2:
   608                           	opt stack 0
   609                           
   610                           ; 3 bytes @ 0x34
   611  000035                     	ds	3
   612  000038                     ??___ftmul:
   613                           
   614                           ; 0 bytes @ 0x37
   615  000038                     	ds	3
   616  00003B                     tblptru	equ	0xFF8
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           
   620                           ; 0 bytes @ 0x3A
   621 ;;
   622 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   623 ;;
   624 ;; *************** function _main *****************
   625 ;; Defined at:
   626 ;;		line 31 in file "Main.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;  argc            2   11[BANK1 ] int 
   629 ;;  argv            3   13[BANK1 ] PTR PTR unsigned char 
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  2   11[BANK1 ] int 
   634 ;; Registers used:
   635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   641 ;;      Params:         0       0       5       0       0       0       0
   642 ;;      Locals:         0       0       0       0       0       0       0
   643 ;;      Temps:          0       0       0       0       0       0       0
   644 ;;      Totals:         0       0       5       0       0       0       0
   645 ;;Total ram usage:        5 bytes
   646 ;; Hardware stack levels required when called:    9
   647 ;; This function calls:
   648 ;;		_Battery_Convert
   649 ;;		_Battery_Fault
   650 ;;		_SYSTEM_Initialize
   651 ;;		_Temp_Convert
   652 ;;		_Temp_Fault
   653 ;; This function is called by:
   654 ;;		Startup code after reset
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658                           	psect	text0
   659  001ADE                     __ptext0:
   660                           	opt stack 0
   661  001ADE                     _main:
   662                           	opt stack 22
   663                           
   664                           ;Main.c: 33: SYSTEM_Initialize();
   665                           
   666                           ;incstack = 0
   667  001ADE  EC4F  F00E         	call	_SYSTEM_Initialize	;wreg free
   668                           
   669                           ;Main.c: 52: (INTCONbits.GIE = 1);
   670  001AE2  8EF2               	bsf	intcon,7,c	;volatile
   671                           
   672                           ;Main.c: 55: (INTCONbits.PEIE = 1);
   673  001AE4  8CF2               	bsf	intcon,6,c	;volatile
   674  001AE6                     l3540:
   675                           
   676                           ;Main.c: 65: {
   677                           ;Main.c: 66: if (Temp_Done)
   678  001AE6  0100               	movlb	0	; () banked
   679  001AE8  51C1               	movf	(_Temp_Done+1)& (0+255),w,b
   680  001AEA  11C0               	iorwf	_Temp_Done& (0+255),w,b
   681  001AEC  B4D8               	btfsc	status,2,c
   682  001AEE  D004               	goto	l3546
   683                           
   684                           ; BSR set to: 0
   685                           ;Main.c: 67: {
   686                           ;Main.c: 68: Temp_Convert();
   687  001AF0  EC59  F006         	call	_Temp_Convert	;wreg free
   688                           
   689                           ;Main.c: 69: Temp_Fault();
   690  001AF4  ECC4  F00C         	call	_Temp_Fault	;wreg free
   691  001AF8                     l3546:
   692                           
   693                           ;Main.c: 70: }
   694                           ;Main.c: 71: if (Volt_Done)
   695  001AF8  0100               	movlb	0	; () banked
   696  001AFA  51C3               	movf	(_Volt_Done+1)& (0+255),w,b
   697  001AFC  11C2               	iorwf	_Volt_Done& (0+255),w,b
   698  001AFE  B4D8               	btfsc	status,2,c
   699  001B00  D004               	goto	l3552
   700                           
   701                           ; BSR set to: 0
   702                           ;Main.c: 72: {
   703                           ;Main.c: 73: Battery_Convert();
   704  001B02  ECA3  F00A         	call	_Battery_Convert	;wreg free
   705                           
   706                           ;Main.c: 74: Battery_Fault();
   707  001B06  EC88  F00B         	call	_Battery_Fault	;wreg free
   708  001B0A                     l3552:
   709                           
   710                           ;Main.c: 75: }
   711                           ;Main.c: 76: if (Volt_Done)
   712  001B0A  0100               	movlb	0	; () banked
   713  001B0C  51C3               	movf	(_Volt_Done+1)& (0+255),w,b
   714  001B0E  11C2               	iorwf	_Volt_Done& (0+255),w,b
   715  001B10  B4D8               	btfsc	status,2,c
   716  001B12  D7E9               	goto	l3540
   717                           
   718                           ; BSR set to: 0
   719                           ;Main.c: 77: {
   720                           ;Main.c: 78: Battery_Convert();
   721  001B14  ECA3  F00A         	call	_Battery_Convert	;wreg free
   722                           
   723                           ;Main.c: 79: Battery_Fault();
   724  001B18  EC88  F00B         	call	_Battery_Fault	;wreg free
   725  001B1C  D7E4               	goto	l3540
   726  001B1E                     __end_of_main:
   727                           	opt stack 0
   728                           tblptru	equ	0xFF8
   729                           intcon	equ	0xFF2
   730                           postinc0	equ	0xFEE
   731                           wreg	equ	0xFE8
   732                           status	equ	0xFD8
   733                           
   734 ;; *************** function _Temp_Fault *****************
   735 ;; Defined at:
   736 ;;		line 12 in file "Tempeture.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  i               2   38[COMRAM] int 
   741 ;;  fault           1   37[COMRAM] unsigned char 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      unsigned char 
   744 ;; Registers used:
   745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   751 ;;      Params:         0       0       0       0       0       0       0
   752 ;;      Locals:         3       0       0       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0       0       0
   754 ;;      Totals:         3       0       0       0       0       0       0
   755 ;;Total ram usage:        3 bytes
   756 ;; Hardware stack levels used:    1
   757 ;; Hardware stack levels required when called:    5
   758 ;; This function calls:
   759 ;;		___ftge
   760 ;;		___wmul
   761 ;; This function is called by:
   762 ;;		_main
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text1
   767  001988                     __ptext1:
   768                           	opt stack 0
   769  001988                     _Temp_Fault:
   770                           	opt stack 25
   771                           
   772                           ;Tempeture.c: 15: char fault = 0;
   773                           
   774                           ;incstack = 0
   775  001988  0E00               	movlw	0
   776  00198A  6E26               	movwf	Temp_Fault@fault,c
   777                           
   778                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
   779  00198C  0E00               	movlw	0
   780  00198E  6E28               	movwf	Temp_Fault@i+1,c
   781  001990  0E00               	movlw	0
   782  001992  6E27               	movwf	Temp_Fault@i,c
   783  001994  5028               	movf	Temp_Fault@i+1,w,c
   784  001996  0A80               	xorlw	128
   785  001998  0F80               	addlw	-128
   786  00199A  0E09               	movlw	9
   787  00199C  B4D8               	btfsc	status,2,c
   788  00199E  5C27               	subwf	Temp_Fault@i,w,c
   789  0019A0  B0D8               	btfsc	status,0,c
   790  0019A2  0012               	return	
   791                           
   792                           ;Tempeture.c: 17: {
   793                           ;Tempeture.c: 18: if (60.5 < Temp_DegF[i])
   794  0019A4  0E00               	movlw	0
   795  0019A6  6E1D               	movwf	___ftge@ff1,c
   796  0019A8  0E72               	movlw	114
   797  0019AA  6E1E               	movwf	___ftge@ff1+1,c
   798  0019AC  0E42               	movlw	66
   799  0019AE  6E1F               	movwf	___ftge@ff1+2,c
   800  0019B0  C027  F017         	movff	Temp_Fault@i,___wmul@multiplier
   801  0019B4  C028  F018         	movff	Temp_Fault@i+1,___wmul@multiplier+1
   802  0019B8  0E00               	movlw	0
   803  0019BA  6E1A               	movwf	___wmul@multiplicand+1,c
   804  0019BC  0E03               	movlw	3
   805  0019BE  6E19               	movwf	___wmul@multiplicand,c
   806  0019C0  EC2B  F00E         	call	___wmul	;wreg free
   807  0019C4  0101               	movlb	1	; () banked
   808  0019C6  0E5A               	movlw	low _Temp_DegF
   809  0019C8  2417               	addwf	?___wmul,w,c
   810  0019CA  6ED9               	movwf	fsr2l,c
   811  0019CC  0101               	movlb	1	; () banked
   812  0019CE  0E01               	movlw	high _Temp_DegF
   813  0019D0  2018               	addwfc	?___wmul+1,w,c
   814  0019D2  6EDA               	movwf	fsr2h,c
   815  0019D4  CFDE F020          	movff	postinc2,___ftge@ff2
   816  0019D8  CFDE F021          	movff	postinc2,___ftge@ff2+1
   817  0019DC  CFDD F022          	movff	postdec2,___ftge@ff2+2
   818  0019E0  EC7C  F00C         	call	___ftge	;wreg free
   819  0019E4  B0D8               	btfsc	status,0,c
   820  0019E6  D002               	goto	l3470
   821                           
   822                           ;Tempeture.c: 19: {
   823                           ;Tempeture.c: 20: fault = 1;
   824  0019E8  0E01               	movlw	1
   825  0019EA  6E26               	movwf	Temp_Fault@fault,c
   826  0019EC                     l3470:
   827  0019EC  4A27               	infsnz	Temp_Fault@i,f,c
   828  0019EE  2A28               	incf	Temp_Fault@i+1,f,c
   829  0019F0  D7D1               	goto	L1
   830  0019F2                     __end_of_Temp_Fault:
   831                           	opt stack 0
   832                           tblptru	equ	0xFF8
   833                           intcon	equ	0xFF2
   834                           postinc0	equ	0xFEE
   835                           wreg	equ	0xFE8
   836                           postinc2	equ	0xFDE
   837                           postdec2	equ	0xFDD
   838                           fsr2h	equ	0xFDA
   839                           fsr2l	equ	0xFD9
   840                           status	equ	0xFD8
   841                           
   842 ;; *************** function _Temp_Convert *****************
   843 ;; Defined at:
   844 ;;		line 50 in file "Tempeture.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  steinhart       3    8[BANK1 ] float 
   849 ;;  x               2    6[BANK1 ] int 
   850 ;; Return value:  Size  Location     Type
   851 ;;		None               void
   852 ;; Registers used:
   853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   859 ;;      Params:         0       0       0       0       0       0       0
   860 ;;      Locals:         0       0      11       0       0       0       0
   861 ;;      Temps:          0       2       0       0       0       0       0
   862 ;;      Totals:         0       2      11       0       0       0       0
   863 ;;Total ram usage:       13 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    8
   866 ;; This function calls:
   867 ;;		_Temp_Filter
   868 ;;		___awtoft
   869 ;;		___ftadd
   870 ;;		___ftdiv
   871 ;;		___ftmul
   872 ;;		___ftsub
   873 ;;		___wmul
   874 ;;		_log
   875 ;; This function is called by:
   876 ;;		_main
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text2
   881  000CB2                     __ptext2:
   882                           	opt stack 0
   883  000CB2                     _Temp_Convert:
   884                           	opt stack 22
   885                           
   886                           ;Tempeture.c: 52: int x;
   887                           ;Tempeture.c: 53: float steinhart;
   888                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
   889                           
   890                           ;incstack = 0
   891  000CB2  0E00               	movlw	0
   892  000CB4  0101               	movlb	1	; () banked
   893  000CB6  6FD9               	movwf	(Temp_Convert@x+1)& (0+255),b
   894  000CB8  0E00               	movlw	0
   895  000CBA  0101               	movlb	1	; () banked
   896  000CBC  6FD8               	movwf	Temp_Convert@x& (0+255),b
   897  000CBE                     
   898                           ; BSR set to: 1
   899  000CBE  0101               	movlb	1	; () banked
   900  000CC0  51D9               	movf	(Temp_Convert@x+1)& (0+255),w,b
   901  000CC2  0A80               	xorlw	128
   902  000CC4  0F80               	addlw	-128
   903  000CC6  0E0A               	movlw	10
   904  000CC8  B4D8               	btfsc	status,2,c
   905  000CCA  5DD8               	subwf	Temp_Convert@x& (0+255),w,b
   906  000CCC  B0D8               	btfsc	status,0,c
   907  000CCE  D10D               	goto	l3504
   908                           
   909                           ; BSR set to: 1
   910                           ;Tempeture.c: 55: {
   911                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
   912                           
   913                           ; BSR set to: 1
   914                           
   915                           ; BSR set to: 1
   916  000CD0  0E00               	movlw	0
   917  000CD2  0100               	movlb	0	; () banked
   918  000CD4  6FE3               	movwf	___ftadd@f2& (0+255),b
   919  000CD6  0E80               	movlw	128
   920  000CD8  0100               	movlb	0	; () banked
   921  000CDA  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
   922  000CDC  0EBF               	movlw	191
   923  000CDE  0100               	movlb	0	; () banked
   924  000CE0  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
   925  000CE2  0EC6               	movlw	low _Temp_Adc
   926  000CE4  0100               	movlb	0	; () banked
   927  000CE6  6FFD               	movwf	??_Temp_Convert& (0+255),b
   928  000CE8  0E00               	movlw	high _Temp_Adc
   929  000CEA  6FFE               	movwf	(??_Temp_Convert+1)& (0+255),b
   930  000CEC  90D8               	bcf	status,0,c
   931  000CEE  0101               	movlb	1	; () banked
   932  000CF0  35D8               	rlcf	Temp_Convert@x& (0+255),w,b
   933  000CF2  6ED9               	movwf	fsr2l,c
   934  000CF4  0101               	movlb	1	; () banked
   935  000CF6  35D9               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
   936  000CF8  6EDA               	movwf	fsr2h,c
   937  000CFA  0100               	movlb	0	; () banked
   938  000CFC  51FD               	movf	??_Temp_Convert& (0+255),w,b
   939  000CFE  26D9               	addwf	fsr2l,f,c
   940  000D00  0100               	movlb	0	; () banked
   941  000D02  51FE               	movf	(??_Temp_Convert+1)& (0+255),w,b
   942  000D04  22DA               	addwfc	fsr2h,f,c
   943  000D06  CFDE F01F          	movff	postinc2,___awtoft@c
   944  000D0A  CFDD F020          	movff	postdec2,___awtoft@c+1
   945  000D0E  EC4B  F00D         	call	___awtoft	;wreg free
   946  000D12  C01F  F026         	movff	?___awtoft,___ftdiv@f2
   947  000D16  C020  F027         	movff	?___awtoft+1,___ftdiv@f2+1
   948  000D1A  C021  F028         	movff	?___awtoft+2,___ftdiv@f2+2
   949  000D1E  0EC0               	movlw	192
   950  000D20  6E23               	movwf	___ftdiv@f1,c
   951  000D22  0E7F               	movlw	127
   952  000D24  6E24               	movwf	___ftdiv@f1+1,c
   953  000D26  0E44               	movlw	68
   954  000D28  6E25               	movwf	___ftdiv@f1+2,c
   955  000D2A  EC17  F00B         	call	___ftdiv	;wreg free
   956  000D2E  C023  F0E0         	movff	?___ftdiv,___ftadd@f1
   957  000D32  C024  F0E1         	movff	?___ftdiv+1,___ftadd@f1+1
   958  000D36  C025  F0E2         	movff	?___ftdiv+2,___ftadd@f1+2
   959  000D3A  EC19  F005         	call	___ftadd	;wreg free
   960  000D3E  C0E0  F1D2         	movff	?___ftadd,_Temp_Convert$1637
   961  000D42  C0E1  F1D3         	movff	?___ftadd+1,_Temp_Convert$1637+1
   962  000D46  C0E2  F1D4         	movff	?___ftadd+2,_Temp_Convert$1637+2
   963                           
   964                           ;Tempeture.c: 55: {
   965                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
   966  000D4A  C1D2  F026         	movff	_Temp_Convert$1637,___ftdiv@f2
   967  000D4E  C1D3  F027         	movff	_Temp_Convert$1637+1,___ftdiv@f2+1
   968  000D52  C1D4  F028         	movff	_Temp_Convert$1637+2,___ftdiv@f2+2
   969  000D56  0E40               	movlw	64
   970  000D58  6E23               	movwf	___ftdiv@f1,c
   971  000D5A  0E1C               	movlw	28
   972  000D5C  6E24               	movwf	___ftdiv@f1+1,c
   973  000D5E  0E46               	movlw	70
   974  000D60  6E25               	movwf	___ftdiv@f1+2,c
   975  000D62  EC17  F00B         	call	___ftdiv	;wreg free
   976  000D66  C023  F1D5         	movff	?___ftdiv,_Temp_Convert$1638
   977  000D6A  C024  F1D6         	movff	?___ftdiv+1,_Temp_Convert$1638+1
   978  000D6E  C025  F1D7         	movff	?___ftdiv+2,_Temp_Convert$1638+2
   979                           
   980                           ;Tempeture.c: 55: {
   981                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
   982  000D72  C1D5  F023         	movff	_Temp_Convert$1638,___ftdiv@f1
   983  000D76  C1D6  F024         	movff	_Temp_Convert$1638+1,___ftdiv@f1+1
   984  000D7A  C1D7  F025         	movff	_Temp_Convert$1638+2,___ftdiv@f1+2
   985  000D7E  0E40               	movlw	64
   986  000D80  6E26               	movwf	___ftdiv@f2,c
   987  000D82  0E1C               	movlw	28
   988  000D84  6E27               	movwf	___ftdiv@f2+1,c
   989  000D86  0E46               	movlw	70
   990  000D88  6E28               	movwf	___ftdiv@f2+2,c
   991  000D8A  EC17  F00B         	call	___ftdiv	;wreg free
   992  000D8E  C023  F1DA         	movff	?___ftdiv,Temp_Convert@steinhart
   993  000D92  C024  F1DB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
   994  000D96  C025  F1DC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
   995                           
   996                           ;Tempeture.c: 57: steinhart = log(steinhart);
   997  000D9A  C1DA  F0F8         	movff	Temp_Convert@steinhart,log@x
   998  000D9E  C1DB  F0F9         	movff	Temp_Convert@steinhart+1,log@x+1
   999  000DA2  C1DC  F0FA         	movff	Temp_Convert@steinhart+2,log@x+2
  1000  000DA6  ECE8  F008         	call	_log	;wreg free
  1001  000DAA  C0F8  F1DA         	movff	?_log,Temp_Convert@steinhart
  1002  000DAE  C0F9  F1DB         	movff	?_log+1,Temp_Convert@steinhart+1
  1003  000DB2  C0FA  F1DC         	movff	?_log+2,Temp_Convert@steinhart+2
  1004                           
  1005                           ;Tempeture.c: 58: steinhart /= 3950;
  1006  000DB6  C1DA  F023         	movff	Temp_Convert@steinhart,___ftdiv@f1
  1007  000DBA  C1DB  F024         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  1008  000DBE  C1DC  F025         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  1009  000DC2  0EE0               	movlw	224
  1010  000DC4  6E26               	movwf	___ftdiv@f2,c
  1011  000DC6  0E76               	movlw	118
  1012  000DC8  6E27               	movwf	___ftdiv@f2+1,c
  1013  000DCA  0E45               	movlw	69
  1014  000DCC  6E28               	movwf	___ftdiv@f2+2,c
  1015  000DCE  EC17  F00B         	call	___ftdiv	;wreg free
  1016  000DD2  C023  F1DA         	movff	?___ftdiv,Temp_Convert@steinhart
  1017  000DD6  C024  F1DB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1018  000DDA  C025  F1DC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1019                           
  1020                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  1021  000DDE  C1DA  F0E0         	movff	Temp_Convert@steinhart,___ftadd@f1
  1022  000DE2  C1DB  F0E1         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  1023  000DE6  C1DC  F0E2         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  1024  000DEA  0ECF               	movlw	207
  1025  000DEC  0100               	movlb	0	; () banked
  1026  000DEE  6FE3               	movwf	___ftadd@f2& (0+255),b
  1027  000DF0  0E5B               	movlw	91
  1028  000DF2  0100               	movlb	0	; () banked
  1029  000DF4  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
  1030  000DF6  0E3B               	movlw	59
  1031  000DF8  0100               	movlb	0	; () banked
  1032  000DFA  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
  1033  000DFC  EC19  F005         	call	___ftadd	;wreg free
  1034  000E00  C0E0  F1DA         	movff	?___ftadd,Temp_Convert@steinhart
  1035  000E04  C0E1  F1DB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1036  000E08  C0E2  F1DC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1037                           
  1038                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  1039  000E0C  0E00               	movlw	0
  1040  000E0E  6E23               	movwf	___ftdiv@f1,c
  1041  000E10  0E80               	movlw	128
  1042  000E12  6E24               	movwf	___ftdiv@f1+1,c
  1043  000E14  0E3F               	movlw	63
  1044  000E16  6E25               	movwf	___ftdiv@f1+2,c
  1045  000E18  C1DA  F026         	movff	Temp_Convert@steinhart,___ftdiv@f2
  1046  000E1C  C1DB  F027         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  1047  000E20  C1DC  F028         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  1048  000E24  EC17  F00B         	call	___ftdiv	;wreg free
  1049  000E28  C023  F1DA         	movff	?___ftdiv,Temp_Convert@steinhart
  1050  000E2C  C024  F1DB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1051  000E30  C025  F1DC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1052                           
  1053                           ;Tempeture.c: 61: steinhart -= 273.15;
  1054  000E34  C1DA  F0EC         	movff	Temp_Convert@steinhart,___ftsub@f1
  1055  000E38  C1DB  F0ED         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  1056  000E3C  C1DC  F0EE         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  1057  000E40  0E93               	movlw	147
  1058  000E42  0100               	movlb	0	; () banked
  1059  000E44  6FEF               	movwf	___ftsub@f2& (0+255),b
  1060  000E46  0E88               	movlw	136
  1061  000E48  0100               	movlb	0	; () banked
  1062  000E4A  6FF0               	movwf	(___ftsub@f2+1)& (0+255),b
  1063  000E4C  0E43               	movlw	67
  1064  000E4E  0100               	movlb	0	; () banked
  1065  000E50  6FF1               	movwf	(___ftsub@f2+2)& (0+255),b
  1066  000E52  EC8F  F00D         	call	___ftsub	;wreg free
  1067  000E56  C0EC  F1DA         	movff	?___ftsub,Temp_Convert@steinhart
  1068  000E5A  C0ED  F1DB         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  1069  000E5E  C0EE  F1DC         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  1070                           
  1071                           ;Tempeture.c: 62: steinhart = (steinhart*1.8) + 32.0;
  1072  000E62  0E66               	movlw	102
  1073  000E64  6E35               	movwf	___ftmul@f2,c
  1074  000E66  0EE6               	movlw	230
  1075  000E68  6E36               	movwf	___ftmul@f2+1,c
  1076  000E6A  0E3F               	movlw	63
  1077  000E6C  6E37               	movwf	___ftmul@f2+2,c
  1078  000E6E  C1DA  F032         	movff	Temp_Convert@steinhart,___ftmul@f1
  1079  000E72  C1DB  F033         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  1080  000E76  C1DC  F034         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  1081  000E7A  EC99  F009         	call	___ftmul	;wreg free
  1082  000E7E  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  1083  000E82  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  1084  000E86  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  1085  000E8A  0E00               	movlw	0
  1086  000E8C  0100               	movlb	0	; () banked
  1087  000E8E  6FE3               	movwf	___ftadd@f2& (0+255),b
  1088  000E90  0E00               	movlw	0
  1089  000E92  0100               	movlb	0	; () banked
  1090  000E94  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
  1091  000E96  0E42               	movlw	66
  1092  000E98  0100               	movlb	0	; () banked
  1093  000E9A  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
  1094  000E9C  EC19  F005         	call	___ftadd	;wreg free
  1095  000EA0  C0E0  F1DA         	movff	?___ftadd,Temp_Convert@steinhart
  1096  000EA4  C0E1  F1DB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1097  000EA8  C0E2  F1DC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1098                           
  1099                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  1100  000EAC  C1D8  F017         	movff	Temp_Convert@x,___wmul@multiplier
  1101  000EB0  C1D9  F018         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  1102  000EB4  0E00               	movlw	0
  1103  000EB6  6E1A               	movwf	___wmul@multiplicand+1,c
  1104  000EB8  0E03               	movlw	3
  1105  000EBA  6E19               	movwf	___wmul@multiplicand,c
  1106  000EBC  EC2B  F00E         	call	___wmul	;wreg free
  1107  000EC0  0101               	movlb	1	; () banked
  1108  000EC2  0EB4               	movlw	low _TmpTemp_DegF
  1109  000EC4  2417               	addwf	?___wmul,w,c
  1110  000EC6  6ED9               	movwf	fsr2l,c
  1111  000EC8  0101               	movlb	1	; () banked
  1112  000ECA  0E01               	movlw	high _TmpTemp_DegF
  1113  000ECC  2018               	addwfc	?___wmul+1,w,c
  1114  000ECE  6EDA               	movwf	fsr2h,c
  1115  000ED0  0101               	movlb	1	; () banked
  1116  000ED2  C1DA  FFDE         	movff	Temp_Convert@steinhart,postinc2
  1117  000ED6  0101               	movlb	1	; () banked
  1118  000ED8  C1DB  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  1119  000EDC  0101               	movlb	1	; () banked
  1120  000EDE  C1DC  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  1121                           
  1122                           ; BSR set to: 1
  1123  000EE2  0101               	movlb	1	; () banked
  1124  000EE4  4BD8               	infsnz	Temp_Convert@x& (0+255),f,b
  1125  000EE6  2BD9               	incf	(Temp_Convert@x+1)& (0+255),f,b
  1126  000EE8  D6EA               	goto	L2
  1127  000EEA                     l3504:
  1128                           
  1129                           ; BSR set to: 1
  1130                           ;Tempeture.c: 64: }
  1131                           ;Tempeture.c: 65: Temp_Filter();
  1132  000EEA  EC78  F007         	call	_Temp_Filter	;wreg free
  1133  000EEE  0012               	return	
  1134  000EF0                     __end_of_Temp_Convert:
  1135                           	opt stack 0
  1136                           tblptru	equ	0xFF8
  1137                           intcon	equ	0xFF2
  1138                           postinc0	equ	0xFEE
  1139                           wreg	equ	0xFE8
  1140                           postinc2	equ	0xFDE
  1141                           postdec2	equ	0xFDD
  1142                           fsr2h	equ	0xFDA
  1143                           fsr2l	equ	0xFD9
  1144                           status	equ	0xFD8
  1145                           
  1146 ;; *************** function _log *****************
  1147 ;; Defined at:
  1148 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;  x               3   30[BANK0 ] int 
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;  exponent        2   33[BANK0 ] int 
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  3   30[BANK0 ] int 
  1155 ;; Registers used:
  1156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1162 ;;      Params:         0       3       0       0       0       0       0
  1163 ;;      Locals:         0       2       0       0       0       0       0
  1164 ;;      Temps:          0       0       0       0       0       0       0
  1165 ;;      Totals:         0       5       0       0       0       0       0
  1166 ;;Total ram usage:        5 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    7
  1169 ;; This function calls:
  1170 ;;		___awtoft
  1171 ;;		___ftadd
  1172 ;;		___ftmul
  1173 ;;		_eval_poly
  1174 ;;		_frexp
  1175 ;; This function is called by:
  1176 ;;		_Temp_Convert
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           	psect	text3
  1181  0011D0                     __ptext3:
  1182                           	opt stack 0
  1183  0011D0                     _log:
  1184                           	opt stack 22
  1185                           
  1186                           ;incstack = 0
  1187  0011D0  0100               	movlb	0	; () banked
  1188  0011D2  51FA               	movf	(log@x+2)& (0+255),w,b
  1189  0011D4  0A80               	xorlw	128
  1190  0011D6  0F80               	addlw	128
  1191  0011D8  E107               	bnz	u2905
  1192  0011DA  0E00               	movlw	0
  1193  0011DC  0100               	movlb	0	; () banked
  1194  0011DE  5DF9               	subwf	(log@x+1)& (0+255),w,b
  1195  0011E0  E103               	bnz	u2905
  1196  0011E2  0E00               	movlw	0
  1197  0011E4  0100               	movlb	0	; () banked
  1198  0011E6  5DF8               	subwf	log@x& (0+255),w,b
  1199  0011E8                     u2905:
  1200  0011E8  B0D8               	btfsc	status,0,c
  1201  0011EA  D010               	goto	l3358
  1202                           
  1203                           ; BSR set to: 0
  1204  0011EC  0E00               	movlw	0
  1205  0011EE  0100               	movlb	0	; () banked
  1206  0011F0  6FC5               	movwf	(_errno+1)& (0+255),b
  1207  0011F2  0E21               	movlw	33
  1208  0011F4  0100               	movlb	0	; () banked
  1209  0011F6  6FC4               	movwf	_errno& (0+255),b
  1210  0011F8  0E00               	movlw	0
  1211  0011FA  0100               	movlb	0	; () banked
  1212  0011FC  6FF8               	movwf	?_log& (0+255),b
  1213  0011FE  0E00               	movlw	0
  1214  001200  0100               	movlb	0	; () banked
  1215  001202  6FF9               	movwf	(?_log+1)& (0+255),b
  1216  001204  0E00               	movlw	0
  1217  001206  0100               	movlb	0	; () banked
  1218  001208  6FFA               	movwf	(?_log+2)& (0+255),b
  1219  00120A  0012               	return	
  1220  00120C                     l3358:
  1221                           
  1222                           ; BSR set to: 0
  1223  00120C  0E7F               	movlw	127
  1224  00120E  0100               	movlb	0	; () banked
  1225  001210  15FA               	andwf	(log@x+2)& (0+255),w,b
  1226  001212  0100               	movlb	0	; () banked
  1227  001214  11F9               	iorwf	(log@x+1)& (0+255),w,b
  1228  001216  0100               	movlb	0	; () banked
  1229  001218  11F8               	iorwf	log@x& (0+255),w,b
  1230  00121A  A4D8               	btfss	status,2,c
  1231  00121C  D010               	goto	l3364
  1232                           
  1233                           ; BSR set to: 0
  1234  00121E  0E00               	movlw	0
  1235  001220  0100               	movlb	0	; () banked
  1236  001222  6FC5               	movwf	(_errno+1)& (0+255),b
  1237  001224  0E22               	movlw	34
  1238  001226  0100               	movlb	0	; () banked
  1239  001228  6FC4               	movwf	_errno& (0+255),b
  1240  00122A  0E00               	movlw	0
  1241  00122C  0100               	movlb	0	; () banked
  1242  00122E  6FF8               	movwf	?_log& (0+255),b
  1243  001230  0E00               	movlw	0
  1244  001232  0100               	movlb	0	; () banked
  1245  001234  6FF9               	movwf	(?_log+1)& (0+255),b
  1246  001236  0E00               	movlw	0
  1247  001238  0100               	movlb	0	; () banked
  1248  00123A  6FFA               	movwf	(?_log+2)& (0+255),b
  1249  00123C  0012               	return	
  1250  00123E                     l3364:
  1251                           
  1252                           ; BSR set to: 0
  1253  00123E  0E00               	movlw	0
  1254  001240  6E35               	movwf	___ftmul@f2,c
  1255  001242  0E00               	movlw	0
  1256  001244  6E36               	movwf	___ftmul@f2+1,c
  1257  001246  0E40               	movlw	64
  1258  001248  6E37               	movwf	___ftmul@f2+2,c
  1259  00124A  0100               	movlb	0	; () banked
  1260  00124C  0E00               	movlw	high log@exponent
  1261  00124E  6E1B               	movwf	frexp@eptr+1,c
  1262  001250  0100               	movlb	0	; () banked
  1263  001252  0EFB               	movlw	low log@exponent
  1264  001254  6E1A               	movwf	frexp@eptr,c
  1265  001256  C0F8  F017         	movff	log@x,frexp@value
  1266  00125A  C0F9  F018         	movff	log@x+1,frexp@value+1
  1267  00125E  C0FA  F019         	movff	log@x+2,frexp@value+2
  1268  001262  EC33  F00C         	call	_frexp	;wreg free
  1269  001266  C017  F032         	movff	?_frexp,___ftmul@f1
  1270  00126A  C018  F033         	movff	?_frexp+1,___ftmul@f1+1
  1271  00126E  C019  F034         	movff	?_frexp+2,___ftmul@f1+2
  1272  001272  EC99  F009         	call	___ftmul	;wreg free
  1273  001276  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  1274  00127A  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  1275  00127E  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  1276  001282  0E00               	movlw	0
  1277  001284  0100               	movlb	0	; () banked
  1278  001286  6FE3               	movwf	___ftadd@f2& (0+255),b
  1279  001288  0E80               	movlw	128
  1280  00128A  0100               	movlb	0	; () banked
  1281  00128C  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
  1282  00128E  0EBF               	movlw	191
  1283  001290  0100               	movlb	0	; () banked
  1284  001292  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
  1285  001294  EC19  F005         	call	___ftadd	;wreg free
  1286  001298  C0E0  F0F8         	movff	?___ftadd,log@x
  1287  00129C  C0E1  F0F9         	movff	?___ftadd+1,log@x+1
  1288  0012A0  C0E2  F0FA         	movff	?___ftadd+2,log@x+2
  1289  0012A4  0100               	movlb	0	; () banked
  1290  0012A6  07FB               	decf	log@exponent& (0+255),f,b
  1291  0012A8  A0D8               	btfss	status,0,c
  1292  0012AA  07FC               	decf	(log@exponent+1)& (0+255),f,b
  1293                           
  1294                           ; BSR set to: 0
  1295  0012AC  C0F8  F0EC         	movff	log@x,eval_poly@x
  1296  0012B0  C0F9  F0ED         	movff	log@x+1,eval_poly@x+1
  1297  0012B4  C0FA  F0EE         	movff	log@x+2,eval_poly@x+2
  1298  0012B8  0E06               	movlw	high log@coeff
  1299  0012BA  0100               	movlb	0	; () banked
  1300  0012BC  6FF0               	movwf	(eval_poly@d+1)& (0+255),b
  1301  0012BE  0E01               	movlw	low log@coeff
  1302  0012C0  0100               	movlb	0	; () banked
  1303  0012C2  6FEF               	movwf	eval_poly@d& (0+255),b
  1304  0012C4  0E00               	movlw	0
  1305  0012C6  0100               	movlb	0	; () banked
  1306  0012C8  6FF2               	movwf	(eval_poly@n+1)& (0+255),b
  1307  0012CA  0E08               	movlw	8
  1308  0012CC  0100               	movlb	0	; () banked
  1309  0012CE  6FF1               	movwf	eval_poly@n& (0+255),b
  1310  0012D0  EC2A  F00A         	call	_eval_poly	;wreg free
  1311  0012D4  C0EC  F0F8         	movff	?_eval_poly,log@x
  1312  0012D8  C0ED  F0F9         	movff	?_eval_poly+1,log@x+1
  1313  0012DC  C0EE  F0FA         	movff	?_eval_poly+2,log@x+2
  1314  0012E0  0E72               	movlw	114
  1315  0012E2  6E35               	movwf	___ftmul@f2,c
  1316  0012E4  0E31               	movlw	49
  1317  0012E6  6E36               	movwf	___ftmul@f2+1,c
  1318  0012E8  0E3F               	movlw	63
  1319  0012EA  6E37               	movwf	___ftmul@f2+2,c
  1320  0012EC  C0FB  F01F         	movff	log@exponent,___awtoft@c
  1321  0012F0  C0FC  F020         	movff	log@exponent+1,___awtoft@c+1
  1322  0012F4  EC4B  F00D         	call	___awtoft	;wreg free
  1323  0012F8  C01F  F032         	movff	?___awtoft,___ftmul@f1
  1324  0012FC  C020  F033         	movff	?___awtoft+1,___ftmul@f1+1
  1325  001300  C021  F034         	movff	?___awtoft+2,___ftmul@f1+2
  1326  001304  EC99  F009         	call	___ftmul	;wreg free
  1327  001308  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  1328  00130C  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  1329  001310  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  1330  001314  C0F8  F0E3         	movff	log@x,___ftadd@f2
  1331  001318  C0F9  F0E4         	movff	log@x+1,___ftadd@f2+1
  1332  00131C  C0FA  F0E5         	movff	log@x+2,___ftadd@f2+2
  1333  001320  EC19  F005         	call	___ftadd	;wreg free
  1334  001324  C0E0  F0F8         	movff	?___ftadd,?_log
  1335  001328  C0E1  F0F9         	movff	?___ftadd+1,?_log+1
  1336  00132C  C0E2  F0FA         	movff	?___ftadd+2,?_log+2
  1337  001330  0012               	return	
  1338  001332                     __end_of_log:
  1339                           	opt stack 0
  1340                           tblptru	equ	0xFF8
  1341                           intcon	equ	0xFF2
  1342                           postinc0	equ	0xFEE
  1343                           wreg	equ	0xFE8
  1344                           postinc2	equ	0xFDE
  1345                           postdec2	equ	0xFDD
  1346                           fsr2h	equ	0xFDA
  1347                           fsr2l	equ	0xFD9
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function _frexp *****************
  1351 ;; Defined at:
  1352 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  value           3   22[COMRAM] int 
  1355 ;;  eptr            2   25[COMRAM] PTR int 
  1356 ;;		 -> log@exponent(2), 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  3   22[COMRAM] PTR int 
  1361 ;; Registers used:
  1362 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1368 ;;      Params:         5       0       0       0       0       0       0
  1369 ;;      Locals:         0       0       0       0       0       0       0
  1370 ;;      Temps:          2       0       0       0       0       0       0
  1371 ;;      Totals:         7       0       0       0       0       0       0
  1372 ;;Total ram usage:        7 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    4
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_log
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text4
  1383  001866                     __ptext4:
  1384                           	opt stack 0
  1385  001866                     _frexp:
  1386                           	opt stack 24
  1387                           
  1388                           ;incstack = 0
  1389  001866  0E7F               	movlw	127
  1390  001868  1419               	andwf	frexp@value+2,w,c
  1391  00186A  1018               	iorwf	frexp@value+1,w,c
  1392  00186C  1017               	iorwf	frexp@value,w,c
  1393  00186E  A4D8               	btfss	status,2,c
  1394  001870  D00F               	goto	l3286
  1395  001872  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1396  001876  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1397  00187A  0E00               	movlw	0
  1398  00187C  6EDE               	movwf	postinc2,c
  1399  00187E  0E00               	movlw	0
  1400  001880  6EDD               	movwf	postdec2,c
  1401  001882  0E00               	movlw	0
  1402  001884  6E17               	movwf	?_frexp,c
  1403  001886  0E00               	movlw	0
  1404  001888  6E18               	movwf	?_frexp+1,c
  1405  00188A  0E00               	movlw	0
  1406  00188C  6E19               	movwf	?_frexp+2,c
  1407  00188E  0012               	return	
  1408  001890                     l3286:
  1409  001890  5019               	movf	frexp@value+2,w,c
  1410  001892  0B7F               	andlw	127
  1411  001894  6E1C               	movwf	??_frexp& (0+255),c
  1412  001896  6A1D               	clrf	(??_frexp+1)& (0+255),c
  1413  001898  90D8               	bcf	status,0,c
  1414  00189A  361C               	rlcf	??_frexp,f,c
  1415  00189C  361D               	rlcf	??_frexp+1,f,c
  1416  00189E  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1417  0018A2  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1418  0018A6  C01C  FFDE         	movff	??_frexp,postinc2
  1419  0018AA  C01D  FFDD         	movff	??_frexp+1,postdec2
  1420  0018AE  AE18               	btfss	frexp@value+1,7,c
  1421  0018B0  D003               	goto	u2800
  1422  0018B2  6A1C               	clrf	??_frexp& (0+255),c
  1423  0018B4  2A1C               	incf	??_frexp& (0+255),f,c
  1424  0018B6  D001               	goto	u2808
  1425  0018B8                     u2800:
  1426  0018B8  6A1C               	clrf	??_frexp& (0+255),c
  1427  0018BA                     u2808:
  1428  0018BA  501C               	movf	??_frexp,w,c
  1429  0018BC  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1430  0018C0  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1431  0018C4  12DE               	iorwf	postinc2,f,c
  1432  0018C6  0E00               	movlw	0
  1433  0018C8  12DD               	iorwf	postdec2,f,c
  1434  0018CA  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1435  0018CE  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1436  0018D2  0E82               	movlw	130
  1437  0018D4  26DE               	addwf	postinc2,f,c
  1438  0018D6  0EFF               	movlw	255
  1439  0018D8  22DD               	addwfc	postdec2,f,c
  1440  0018DA  8019               	bsf	frexp@value+2,0,c
  1441  0018DC  8219               	bsf	frexp@value+2,1,c
  1442  0018DE  8419               	bsf	frexp@value+2,2,c
  1443  0018E0  8619               	bsf	frexp@value+2,3,c
  1444  0018E2  8819               	bsf	frexp@value+2,4,c
  1445  0018E4  8A19               	bsf	frexp@value+2,5,c
  1446  0018E6  9C19               	bcf	frexp@value+2,6,c
  1447  0018E8  9E18               	bcf	frexp@value+1,7,c
  1448  0018EA  C017  F017         	movff	frexp@value,?_frexp
  1449  0018EE  C018  F018         	movff	frexp@value+1,?_frexp+1
  1450  0018F2  C019  F019         	movff	frexp@value+2,?_frexp+2
  1451  0018F6  0012               	return	
  1452  0018F8                     __end_of_frexp:
  1453                           	opt stack 0
  1454                           tblptru	equ	0xFF8
  1455                           intcon	equ	0xFF2
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           postinc2	equ	0xFDE
  1459                           postdec2	equ	0xFDD
  1460                           fsr2h	equ	0xFDA
  1461                           fsr2l	equ	0xFD9
  1462                           status	equ	0xFD8
  1463                           
  1464 ;; *************** function _eval_poly *****************
  1465 ;; Defined at:
  1466 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  x               3   18[BANK0 ] PTR int 
  1469 ;;  d               2   21[BANK0 ] PTR const 
  1470 ;;		 -> log@coeff(27), 
  1471 ;;  n               2   23[BANK0 ] int 
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;  res             3   27[BANK0 ] int 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  3   18[BANK0 ] int 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1483 ;;      Params:         0       7       0       0       0       0       0
  1484 ;;      Locals:         0       3       0       0       0       0       0
  1485 ;;      Temps:          0       2       0       0       0       0       0
  1486 ;;      Totals:         0      12       0       0       0       0       0
  1487 ;;Total ram usage:       12 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    6
  1490 ;; This function calls:
  1491 ;;		___ftadd
  1492 ;;		___ftmul
  1493 ;;		___wmul
  1494 ;; This function is called by:
  1495 ;;		_log
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text5
  1500  001454                     __ptext5:
  1501                           	opt stack 0
  1502  001454                     _eval_poly:
  1503                           	opt stack 22
  1504                           
  1505                           ;incstack = 0
  1506  001454  C0F1  F017         	movff	eval_poly@n,___wmul@multiplier
  1507  001458  C0F2  F018         	movff	eval_poly@n+1,___wmul@multiplier+1
  1508  00145C  0E00               	movlw	0
  1509  00145E  6E1A               	movwf	___wmul@multiplicand+1,c
  1510  001460  0E03               	movlw	3
  1511  001462  6E19               	movwf	___wmul@multiplicand,c
  1512  001464  EC2B  F00E         	call	___wmul	;wreg free
  1513  001468  0100               	movlb	0	; () banked
  1514  00146A  C0EF  F0F3         	movff	eval_poly@d,??_eval_poly
  1515  00146E  0100               	movlb	0	; () banked
  1516  001470  C0F0  F0F4         	movff	eval_poly@d+1,??_eval_poly+1
  1517  001474  5017               	movf	?___wmul,w,c
  1518  001476  0100               	movlb	0	; () banked
  1519  001478  27F3               	addwf	??_eval_poly& (0+255),f,b
  1520  00147A  5018               	movf	?___wmul+1,w,c
  1521  00147C  0100               	movlb	0	; () banked
  1522  00147E  23F4               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1523  001480  C0F3  FFF6         	movff	??_eval_poly,tblptrl
  1524  001484  C0F4  FFF7         	movff	??_eval_poly+1,tblptrh
  1525  001488                     	if	0	;tblptru may be non-zero
  1526  001488                     	endif
  1527  001488                     	if	0	;tblptru may be non-zero
  1528  001488                     	endif
  1529  001488  0009               	tblrd		*+
  1530  00148A  0100               	movlb	0	; () banked
  1531  00148C  CFF5 F0F5          	movff	tablat,eval_poly@res
  1532  001490  0009               	tblrd		*+
  1533  001492  0100               	movlb	0	; () banked
  1534  001494  CFF5 F0F6          	movff	tablat,eval_poly@res+1
  1535  001498  000A               	tblrd		*-
  1536  00149A  0100               	movlb	0	; () banked
  1537  00149C  CFF5 F0F7          	movff	tablat,eval_poly@res+2
  1538  0014A0  D046               	goto	l3302
  1539  0014A2                     l3300:
  1540                           
  1541                           ; BSR set to: 0
  1542  0014A2  C0F5  F035         	movff	eval_poly@res,___ftmul@f2
  1543  0014A6  C0F6  F036         	movff	eval_poly@res+1,___ftmul@f2+1
  1544  0014AA  C0F7  F037         	movff	eval_poly@res+2,___ftmul@f2+2
  1545  0014AE  C0EC  F032         	movff	eval_poly@x,___ftmul@f1
  1546  0014B2  C0ED  F033         	movff	eval_poly@x+1,___ftmul@f1+1
  1547  0014B6  C0EE  F034         	movff	eval_poly@x+2,___ftmul@f1+2
  1548  0014BA  EC99  F009         	call	___ftmul	;wreg free
  1549  0014BE  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  1550  0014C2  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  1551  0014C6  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  1552  0014CA  0E00               	movlw	0
  1553  0014CC  6E1A               	movwf	___wmul@multiplicand+1,c
  1554  0014CE  0E03               	movlw	3
  1555  0014D0  6E19               	movwf	___wmul@multiplicand,c
  1556  0014D2  0100               	movlb	0	; () banked
  1557  0014D4  07F1               	decf	eval_poly@n& (0+255),f,b
  1558  0014D6  A0D8               	btfss	status,0,c
  1559  0014D8  07F2               	decf	(eval_poly@n+1)& (0+255),f,b
  1560  0014DA  C0F1  F017         	movff	eval_poly@n,___wmul@multiplier
  1561  0014DE  C0F2  F018         	movff	eval_poly@n+1,___wmul@multiplier+1
  1562  0014E2  EC2B  F00E         	call	___wmul	;wreg free
  1563  0014E6  0100               	movlb	0	; () banked
  1564  0014E8  C0EF  F0F3         	movff	eval_poly@d,??_eval_poly
  1565  0014EC  0100               	movlb	0	; () banked
  1566  0014EE  C0F0  F0F4         	movff	eval_poly@d+1,??_eval_poly+1
  1567  0014F2  5017               	movf	?___wmul,w,c
  1568  0014F4  0100               	movlb	0	; () banked
  1569  0014F6  27F3               	addwf	??_eval_poly& (0+255),f,b
  1570  0014F8  5018               	movf	?___wmul+1,w,c
  1571  0014FA  0100               	movlb	0	; () banked
  1572  0014FC  23F4               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1573  0014FE  C0F3  FFF6         	movff	??_eval_poly,tblptrl
  1574  001502  C0F4  FFF7         	movff	??_eval_poly+1,tblptrh
  1575  001506                     	if	0	;tblptru may be non-zero
  1576  001506                     	endif
  1577  001506                     	if	0	;tblptru may be non-zero
  1578  001506                     	endif
  1579  001506  0009               	tblrd		*+
  1580  001508  0100               	movlb	0	; () banked
  1581  00150A  CFF5 F0E3          	movff	tablat,___ftadd@f2
  1582  00150E  0009               	tblrd		*+
  1583  001510  0100               	movlb	0	; () banked
  1584  001512  CFF5 F0E4          	movff	tablat,___ftadd@f2+1
  1585  001516  000A               	tblrd		*-
  1586  001518  0100               	movlb	0	; () banked
  1587  00151A  CFF5 F0E5          	movff	tablat,___ftadd@f2+2
  1588  00151E  EC19  F005         	call	___ftadd	;wreg free
  1589  001522  C0E0  F0F5         	movff	?___ftadd,eval_poly@res
  1590  001526  C0E1  F0F6         	movff	?___ftadd+1,eval_poly@res+1
  1591  00152A  C0E2  F0F7         	movff	?___ftadd+2,eval_poly@res+2
  1592  00152E                     l3302:
  1593  00152E  0100               	movlb	0	; () banked
  1594  001530  51F2               	movf	(eval_poly@n+1)& (0+255),w,b
  1595  001532  11F1               	iorwf	eval_poly@n& (0+255),w,b
  1596  001534  A4D8               	btfss	status,2,c
  1597  001536  D7B5               	goto	l3300
  1598                           
  1599                           ; BSR set to: 0
  1600  001538  C0F5  F0EC         	movff	eval_poly@res,?_eval_poly
  1601  00153C  C0F6  F0ED         	movff	eval_poly@res+1,?_eval_poly+1
  1602  001540  C0F7  F0EE         	movff	eval_poly@res+2,?_eval_poly+2
  1603                           
  1604                           ; BSR set to: 0
  1605  001544  0012               	return	
  1606  001546                     __end_of_eval_poly:
  1607                           	opt stack 0
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           intcon	equ	0xFF2
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           postinc2	equ	0xFDE
  1616                           postdec2	equ	0xFDD
  1617                           fsr2h	equ	0xFDA
  1618                           fsr2l	equ	0xFD9
  1619                           status	equ	0xFD8
  1620                           
  1621 ;; *************** function ___ftsub *****************
  1622 ;; Defined at:
  1623 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  1624 ;; Parameters:    Size  Location     Type
  1625 ;;  f1              3   18[BANK0 ] float 
  1626 ;;  f2              3   21[BANK0 ] float 
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;		None
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  3   18[BANK0 ] float 
  1631 ;; Registers used:
  1632 ;;		wreg, status,2, status,0, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1638 ;;      Params:         0       6       0       0       0       0       0
  1639 ;;      Locals:         0       0       0       0       0       0       0
  1640 ;;      Temps:          0       0       0       0       0       0       0
  1641 ;;      Totals:         0       6       0       0       0       0       0
  1642 ;;Total ram usage:        6 bytes
  1643 ;; Hardware stack levels used:    1
  1644 ;; Hardware stack levels required when called:    6
  1645 ;; This function calls:
  1646 ;;		___ftadd
  1647 ;; This function is called by:
  1648 ;;		_Temp_Convert
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text6
  1653  001B1E                     __ptext6:
  1654                           	opt stack 0
  1655  001B1E                     ___ftsub:
  1656                           	opt stack 23
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;incstack = 0
  1660  001B1E  0E00               	movlw	0
  1661  001B20  0100               	movlb	0	; () banked
  1662  001B22  1BEF               	xorwf	___ftsub@f2& (0+255),f,b
  1663  001B24  0E00               	movlw	0
  1664  001B26  0100               	movlb	0	; () banked
  1665  001B28  1BF0               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  1666  001B2A  0E80               	movlw	128
  1667  001B2C  0100               	movlb	0	; () banked
  1668  001B2E  1BF1               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  1669                           
  1670                           ; BSR set to: 0
  1671  001B30  C0EC  F0E0         	movff	___ftsub@f1,___ftadd@f1
  1672  001B34  C0ED  F0E1         	movff	___ftsub@f1+1,___ftadd@f1+1
  1673  001B38  C0EE  F0E2         	movff	___ftsub@f1+2,___ftadd@f1+2
  1674  001B3C  C0EF  F0E3         	movff	___ftsub@f2,___ftadd@f2
  1675  001B40  C0F0  F0E4         	movff	___ftsub@f2+1,___ftadd@f2+1
  1676  001B44  C0F1  F0E5         	movff	___ftsub@f2+2,___ftadd@f2+2
  1677  001B48  EC19  F005         	call	___ftadd	;wreg free
  1678  001B4C  C0E0  F0EC         	movff	?___ftadd,?___ftsub
  1679  001B50  C0E1  F0ED         	movff	?___ftadd+1,?___ftsub+1
  1680  001B54  C0E2  F0EE         	movff	?___ftadd+2,?___ftsub+2
  1681  001B58  0012               	return	
  1682  001B5A                     __end_of___ftsub:
  1683                           	opt stack 0
  1684                           tblptru	equ	0xFF8
  1685                           tblptrh	equ	0xFF7
  1686                           tblptrl	equ	0xFF6
  1687                           tablat	equ	0xFF5
  1688                           intcon	equ	0xFF2
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           postinc2	equ	0xFDE
  1692                           postdec2	equ	0xFDD
  1693                           fsr2h	equ	0xFDA
  1694                           fsr2l	equ	0xFD9
  1695                           status	equ	0xFD8
  1696                           
  1697 ;; *************** function _Temp_Filter *****************
  1698 ;; Defined at:
  1699 ;;		line 36 in file "Tempeture.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;		None
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  x               2   18[BANK0 ] int 
  1704 ;; Return value:  Size  Location     Type
  1705 ;;		None               void
  1706 ;; Registers used:
  1707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1708 ;; Tracked objects:
  1709 ;;		On entry : 0/0
  1710 ;;		On exit  : 0/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1713 ;;      Params:         0       0       0       0       0       0       0
  1714 ;;      Locals:         0       2       0       0       0       0       0
  1715 ;;      Temps:          0       0       0       0       0       0       0
  1716 ;;      Totals:         0       2       0       0       0       0       0
  1717 ;;Total ram usage:        2 bytes
  1718 ;; Hardware stack levels used:    1
  1719 ;; Hardware stack levels required when called:    6
  1720 ;; This function calls:
  1721 ;;		___ftadd
  1722 ;;		___ftmul
  1723 ;;		___wmul
  1724 ;; This function is called by:
  1725 ;;		_Temp_Convert
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text7
  1730  000EF0                     __ptext7:
  1731                           	opt stack 0
  1732  000EF0                     _Temp_Filter:
  1733                           	opt stack 23
  1734                           
  1735                           ;Tempeture.c: 39: int x;
  1736                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  1737                           
  1738                           ;incstack = 0
  1739  000EF0  0E00               	movlw	0
  1740  000EF2  0100               	movlb	0	; () banked
  1741  000EF4  6FED               	movwf	(Temp_Filter@x+1)& (0+255),b
  1742  000EF6  0E00               	movlw	0
  1743  000EF8  0100               	movlb	0	; () banked
  1744  000EFA  6FEC               	movwf	Temp_Filter@x& (0+255),b
  1745  000EFC                     
  1746                           ; BSR set to: 0
  1747  000EFC  0100               	movlb	0	; () banked
  1748  000EFE  51ED               	movf	(Temp_Filter@x+1)& (0+255),w,b
  1749  000F00  0A80               	xorlw	128
  1750  000F02  0F80               	addlw	-128
  1751  000F04  0E0A               	movlw	10
  1752  000F06  B4D8               	btfsc	status,2,c
  1753  000F08  5DEC               	subwf	Temp_Filter@x& (0+255),w,b
  1754  000F0A  B0D8               	btfsc	status,0,c
  1755  000F0C  D06B               	goto	l3340
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;Tempeture.c: 41: {
  1759                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  1760                           
  1761                           ; BSR set to: 0
  1762                           
  1763                           ; BSR set to: 0
  1764  000F0E  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  1765  000F12  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1766  000F16  0E00               	movlw	0
  1767  000F18  6E1A               	movwf	___wmul@multiplicand+1,c
  1768  000F1A  0E03               	movlw	3
  1769  000F1C  6E19               	movwf	___wmul@multiplicand,c
  1770  000F1E  EC2B  F00E         	call	___wmul	;wreg free
  1771  000F22  0101               	movlb	1	; () banked
  1772  000F24  0E5A               	movlw	low _Temp_DegF
  1773  000F26  2417               	addwf	?___wmul,w,c
  1774  000F28  6ED9               	movwf	fsr2l,c
  1775  000F2A  0101               	movlb	1	; () banked
  1776  000F2C  0E01               	movlw	high _Temp_DegF
  1777  000F2E  2018               	addwfc	?___wmul+1,w,c
  1778  000F30  6EDA               	movwf	fsr2h,c
  1779  000F32  0E48               	movlw	72
  1780  000F34  6E35               	movwf	___ftmul@f2,c
  1781  000F36  0E61               	movlw	97
  1782  000F38  6E36               	movwf	___ftmul@f2+1,c
  1783  000F3A  0E3F               	movlw	63
  1784  000F3C  6E37               	movwf	___ftmul@f2+2,c
  1785  000F3E  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  1786  000F42  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1787  000F46  0E00               	movlw	0
  1788  000F48  6E1A               	movwf	___wmul@multiplicand+1,c
  1789  000F4A  0E03               	movlw	3
  1790  000F4C  6E19               	movwf	___wmul@multiplicand,c
  1791  000F4E  EC2B  F00E         	call	___wmul	;wreg free
  1792  000F52  0101               	movlb	1	; () banked
  1793  000F54  0EB4               	movlw	low _TmpTemp_DegF
  1794  000F56  2417               	addwf	?___wmul,w,c
  1795  000F58  6EE1               	movwf	fsr1l,c
  1796  000F5A  0101               	movlb	1	; () banked
  1797  000F5C  0E01               	movlw	high _TmpTemp_DegF
  1798  000F5E  2018               	addwfc	?___wmul+1,w,c
  1799  000F60  6EE2               	movwf	fsr1h,c
  1800  000F62  CFE6 F032          	movff	postinc1,___ftmul@f1
  1801  000F66  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  1802  000F6A  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  1803  000F6E  EC99  F009         	call	___ftmul	;wreg free
  1804  000F72  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  1805  000F76  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  1806  000F7A  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  1807  000F7E  0EC3               	movlw	195
  1808  000F80  6E35               	movwf	___ftmul@f2,c
  1809  000F82  0EF5               	movlw	245
  1810  000F84  6E36               	movwf	___ftmul@f2+1,c
  1811  000F86  0E3D               	movlw	61
  1812  000F88  6E37               	movwf	___ftmul@f2+2,c
  1813  000F8A  0E00               	movlw	0
  1814  000F8C  6E1A               	movwf	___wmul@multiplicand+1,c
  1815  000F8E  0E03               	movlw	3
  1816  000F90  6E19               	movwf	___wmul@multiplicand,c
  1817  000F92  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  1818  000F96  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1819  000F9A  EC2B  F00E         	call	___wmul	;wreg free
  1820  000F9E  0101               	movlb	1	; () banked
  1821  000FA0  0E3C               	movlw	low _PrevTemp_DegF
  1822  000FA2  2417               	addwf	?___wmul,w,c
  1823  000FA4  6EE1               	movwf	fsr1l,c
  1824  000FA6  0101               	movlb	1	; () banked
  1825  000FA8  0E01               	movlw	high _PrevTemp_DegF
  1826  000FAA  2018               	addwfc	?___wmul+1,w,c
  1827  000FAC  6EE2               	movwf	fsr1h,c
  1828  000FAE  CFE6 F032          	movff	postinc1,___ftmul@f1
  1829  000FB2  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  1830  000FB6  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  1831  000FBA  EC99  F009         	call	___ftmul	;wreg free
  1832  000FBE  C032  F0E3         	movff	?___ftmul,___ftadd@f2
  1833  000FC2  C033  F0E4         	movff	?___ftmul+1,___ftadd@f2+1
  1834  000FC6  C034  F0E5         	movff	?___ftmul+2,___ftadd@f2+2
  1835  000FCA  EC19  F005         	call	___ftadd	;wreg free
  1836  000FCE  C0E0  FFDE         	movff	?___ftadd,postinc2
  1837  000FD2  C0E1  FFDE         	movff	?___ftadd+1,postinc2
  1838  000FD6  C0E2  FFDD         	movff	?___ftadd+2,postdec2
  1839  000FDA  52DD               	movf	postdec2,f,c
  1840  000FDC  0100               	movlb	0	; () banked
  1841  000FDE  4BEC               	infsnz	Temp_Filter@x& (0+255),f,b
  1842  000FE0  2BED               	incf	(Temp_Filter@x+1)& (0+255),f,b
  1843  000FE2  D78C               	goto	L3
  1844  000FE4                     l3340:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;Tempeture.c: 43: }
  1848                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  1849  000FE4  0E00               	movlw	0
  1850  000FE6  0100               	movlb	0	; () banked
  1851  000FE8  6FED               	movwf	(Temp_Filter@x+1)& (0+255),b
  1852  000FEA  0E00               	movlw	0
  1853  000FEC  0100               	movlb	0	; () banked
  1854  000FEE  6FEC               	movwf	Temp_Filter@x& (0+255),b
  1855  000FF0                     
  1856                           ; BSR set to: 0
  1857  000FF0  0100               	movlb	0	; () banked
  1858  000FF2  51ED               	movf	(Temp_Filter@x+1)& (0+255),w,b
  1859  000FF4  0A80               	xorlw	128
  1860  000FF6  0F80               	addlw	-128
  1861  000FF8  0E0A               	movlw	10
  1862  000FFA  B4D8               	btfsc	status,2,c
  1863  000FFC  5DEC               	subwf	Temp_Filter@x& (0+255),w,b
  1864  000FFE  B0D8               	btfsc	status,0,c
  1865  001000  0012               	return	
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;Tempeture.c: 45: {
  1869                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  1870                           
  1871                           ; BSR set to: 0
  1872                           
  1873                           ; BSR set to: 0
  1874  001002  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  1875  001006  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1876  00100A  0E00               	movlw	0
  1877  00100C  6E1A               	movwf	___wmul@multiplicand+1,c
  1878  00100E  0E03               	movlw	3
  1879  001010  6E19               	movwf	___wmul@multiplicand,c
  1880  001012  EC2B  F00E         	call	___wmul	;wreg free
  1881  001016  0101               	movlb	1	; () banked
  1882  001018  0E5A               	movlw	low _Temp_DegF
  1883  00101A  2417               	addwf	?___wmul,w,c
  1884  00101C  6ED9               	movwf	fsr2l,c
  1885  00101E  0101               	movlb	1	; () banked
  1886  001020  0E01               	movlw	high _Temp_DegF
  1887  001022  2018               	addwfc	?___wmul+1,w,c
  1888  001024  6EDA               	movwf	fsr2h,c
  1889  001026  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  1890  00102A  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1891  00102E  0E00               	movlw	0
  1892  001030  6E1A               	movwf	___wmul@multiplicand+1,c
  1893  001032  0E03               	movlw	3
  1894  001034  6E19               	movwf	___wmul@multiplicand,c
  1895  001036  EC2B  F00E         	call	___wmul	;wreg free
  1896  00103A  0101               	movlb	1	; () banked
  1897  00103C  0E3C               	movlw	low _PrevTemp_DegF
  1898  00103E  2417               	addwf	?___wmul,w,c
  1899  001040  6EE1               	movwf	fsr1l,c
  1900  001042  0101               	movlb	1	; () banked
  1901  001044  0E01               	movlw	high _PrevTemp_DegF
  1902  001046  2018               	addwfc	?___wmul+1,w,c
  1903  001048  6EE2               	movwf	fsr1h,c
  1904  00104A  CFDE FFE6          	movff	postinc2,postinc1
  1905  00104E  CFDE FFE6          	movff	postinc2,postinc1
  1906  001052  CFDE FFE5          	movff	postinc2,postdec1
  1907  001056  52E5               	movf	postdec1,f,c
  1908                           
  1909                           ; BSR set to: 1
  1910  001058  0100               	movlb	0	; () banked
  1911  00105A  4BEC               	infsnz	Temp_Filter@x& (0+255),f,b
  1912  00105C  2BED               	incf	(Temp_Filter@x+1)& (0+255),f,b
  1913  00105E  D7C8               	goto	L4
  1914  001060                     __end_of_Temp_Filter:
  1915                           	opt stack 0
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           intcon	equ	0xFF2
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           postinc1	equ	0xFE6
  1924                           postdec1	equ	0xFE5
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           postinc2	equ	0xFDE
  1928                           postdec2	equ	0xFDD
  1929                           fsr2h	equ	0xFDA
  1930                           fsr2l	equ	0xFD9
  1931                           status	equ	0xFD8
  1932                           
  1933 ;; *************** function _SYSTEM_Initialize *****************
  1934 ;; Defined at:
  1935 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;		None
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;		None               void
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1949 ;;      Params:         0       0       0       0       0       0       0
  1950 ;;      Locals:         0       0       0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0
  1952 ;;      Totals:         0       0       0       0       0       0       0
  1953 ;;Total ram usage:        0 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    6
  1956 ;; This function calls:
  1957 ;;		_ADC_Initialize
  1958 ;;		_EUSART1_Initialize
  1959 ;;		_INTERRUPT_Initialize
  1960 ;;		_OSCILLATOR_Initialize
  1961 ;;		_PIN_MANAGER_Initialize
  1962 ;;		_TMR1_Initialize
  1963 ;; This function is called by:
  1964 ;;		_main
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text8
  1969  001C9E                     __ptext8:
  1970                           	opt stack 0
  1971  001C9E                     _SYSTEM_Initialize:
  1972                           	opt stack 24
  1973                           
  1974                           ;mcc.c: 114: OSCILLATOR_Initialize();
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;incstack = 0
  1978  001C9E  ECA3  F00E         	call	_OSCILLATOR_Initialize	;wreg free
  1979                           
  1980                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1981  001CA2  EC24  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  1982                           
  1983                           ;mcc.c: 116: INTERRUPT_Initialize();
  1984  001CA6  ECAA  F00E         	call	_INTERRUPT_Initialize	;wreg free
  1985                           
  1986                           ;mcc.c: 117: ADC_Initialize();
  1987  001CAA  EC69  F00E         	call	_ADC_Initialize	;wreg free
  1988                           
  1989                           ;mcc.c: 118: EUSART1_Initialize();
  1990  001CAE  ECAD  F00D         	call	_EUSART1_Initialize	;wreg free
  1991                           
  1992                           ;mcc.c: 119: TMR1_Initialize();
  1993  001CB2  EC3E  F00E         	call	_TMR1_Initialize	;wreg free
  1994  001CB6  0012               	return	
  1995  001CB8                     __end_of_SYSTEM_Initialize:
  1996                           	opt stack 0
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           intcon	equ	0xFF2
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           postinc1	equ	0xFE6
  2005                           postdec1	equ	0xFE5
  2006                           fsr1h	equ	0xFE2
  2007                           fsr1l	equ	0xFE1
  2008                           postinc2	equ	0xFDE
  2009                           postdec2	equ	0xFDD
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _TMR1_Initialize *****************
  2015 ;; Defined at:
  2016 ;;		line 21 in file "mcc_generated_files/tmr1.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;		None               void
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2030 ;;      Params:         0       0       0       0       0       0       0
  2031 ;;      Locals:         0       0       0       0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0       0       0
  2033 ;;      Totals:         0       0       0       0       0       0       0
  2034 ;;Total ram usage:        0 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    5
  2037 ;; This function calls:
  2038 ;;		_TMR1_StartTimer
  2039 ;; This function is called by:
  2040 ;;		_SYSTEM_Initialize
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text9
  2045  001C7C                     __ptext9:
  2046                           	opt stack 0
  2047  001C7C                     _TMR1_Initialize:
  2048                           	opt stack 24
  2049                           
  2050                           ;tmr1.c: 26: T1CON = 0x34;
  2051                           
  2052                           ;incstack = 0
  2053  001C7C  0E34               	movlw	52
  2054  001C7E  6ECD               	movwf	4045,c	;volatile
  2055                           
  2056                           ;tmr1.c: 29: T1GCON = 0x00;
  2057  001C80  0E00               	movlw	0
  2058  001C82  6ECC               	movwf	4044,c	;volatile
  2059                           
  2060                           ;tmr1.c: 32: TMR1H = 0x0B;
  2061  001C84  0E0B               	movlw	11
  2062  001C86  6ECF               	movwf	4047,c	;volatile
  2063                           
  2064                           ;tmr1.c: 35: TMR1L = 0xDC;
  2065  001C88  0EDC               	movlw	220
  2066  001C8A  6ECE               	movwf	4046,c	;volatile
  2067                           
  2068                           ;tmr1.c: 38: timer1ReloadVal=TMR1;
  2069  001C8C  CFCE F047          	movff	4046,_timer1ReloadVal	;volatile
  2070  001C90  CFCF F048          	movff	4047,_timer1ReloadVal+1	;volatile
  2071                           
  2072                           ;tmr1.c: 41: PIR1bits.TMR1IF = 0;
  2073  001C94  909E               	bcf	3998,0,c	;volatile
  2074                           
  2075                           ;tmr1.c: 44: PIE1bits.TMR1IE = 1;
  2076  001C96  809D               	bsf	3997,0,c	;volatile
  2077                           
  2078                           ;tmr1.c: 47: TMR1_StartTimer();
  2079  001C98  ECB0  F00E         	call	_TMR1_StartTimer	;wreg free
  2080  001C9C  0012               	return	
  2081  001C9E                     __end_of_TMR1_Initialize:
  2082                           	opt stack 0
  2083                           tblptru	equ	0xFF8
  2084                           tblptrh	equ	0xFF7
  2085                           tblptrl	equ	0xFF6
  2086                           tablat	equ	0xFF5
  2087                           intcon	equ	0xFF2
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           postinc1	equ	0xFE6
  2091                           postdec1	equ	0xFE5
  2092                           fsr1h	equ	0xFE2
  2093                           fsr1l	equ	0xFE1
  2094                           postinc2	equ	0xFDE
  2095                           postdec2	equ	0xFDD
  2096                           fsr2h	equ	0xFDA
  2097                           fsr2l	equ	0xFD9
  2098                           status	equ	0xFD8
  2099                           
  2100 ;; *************** function _TMR1_StartTimer *****************
  2101 ;; Defined at:
  2102 ;;		line 50 in file "mcc_generated_files/tmr1.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;		None               void
  2109 ;; Registers used:
  2110 ;;		None
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2116 ;;      Params:         0       0       0       0       0       0       0
  2117 ;;      Locals:         0       0       0       0       0       0       0
  2118 ;;      Temps:          0       0       0       0       0       0       0
  2119 ;;      Totals:         0       0       0       0       0       0       0
  2120 ;;Total ram usage:        0 bytes
  2121 ;; Hardware stack levels used:    1
  2122 ;; Hardware stack levels required when called:    4
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_TMR1_Initialize
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text10
  2131  001D60                     __ptext10:
  2132                           	opt stack 0
  2133  001D60                     _TMR1_StartTimer:
  2134                           	opt stack 24
  2135                           
  2136                           ;tmr1.c: 53: T1CONbits.TMR1ON = 1;
  2137                           
  2138                           ;incstack = 0
  2139  001D60  80CD               	bsf	4045,0,c	;volatile
  2140  001D62  0012               	return	
  2141  001D64                     __end_of_TMR1_StartTimer:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           intcon	equ	0xFF2
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postinc1	equ	0xFE6
  2151                           postdec1	equ	0xFE5
  2152                           fsr1h	equ	0xFE2
  2153                           fsr1l	equ	0xFE1
  2154                           postinc2	equ	0xFDE
  2155                           postdec2	equ	0xFDD
  2156                           fsr2h	equ	0xFDA
  2157                           fsr2l	equ	0xFD9
  2158                           status	equ	0xFD8
  2159                           
  2160 ;; *************** function _PIN_MANAGER_Initialize *****************
  2161 ;; Defined at:
  2162 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;		None
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;		None
  2167 ;; Return value:  Size  Location     Type
  2168 ;;		None               void
  2169 ;; Registers used:
  2170 ;;		wreg, status,2
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2176 ;;      Params:         0       0       0       0       0       0       0
  2177 ;;      Locals:         0       0       0       0       0       0       0
  2178 ;;      Temps:          0       0       0       0       0       0       0
  2179 ;;      Totals:         0       0       0       0       0       0       0
  2180 ;;Total ram usage:        0 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    4
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		_SYSTEM_Initialize
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text11
  2191  001A48                     __ptext11:
  2192                           	opt stack 0
  2193  001A48                     _PIN_MANAGER_Initialize:
  2194                           	opt stack 25
  2195                           
  2196                           ;pin_manager.c: 52: LATA = 0x00;
  2197                           
  2198                           ;incstack = 0
  2199  001A48  0E00               	movlw	0
  2200  001A4A  6E89               	movwf	3977,c	;volatile
  2201                           
  2202                           ;pin_manager.c: 53: TRISA = 0x2F;
  2203  001A4C  0E2F               	movlw	47
  2204  001A4E  6E92               	movwf	3986,c	;volatile
  2205                           
  2206                           ;pin_manager.c: 54: ANSELA = 0x2F;
  2207  001A50  0E2F               	movlw	47
  2208  001A52  010F               	movlb	15	; () banked
  2209  001A54  6F38               	movwf	56,b	;volatile
  2210                           
  2211                           ;pin_manager.c: 56: LATB = 0x00;
  2212  001A56  0E00               	movlw	0
  2213  001A58  6E8A               	movwf	3978,c	;volatile
  2214                           
  2215                           ;pin_manager.c: 57: TRISB = 0xF8;
  2216  001A5A  0EF8               	movlw	248
  2217  001A5C  6E93               	movwf	3987,c	;volatile
  2218                           
  2219                           ;pin_manager.c: 58: ANSELB = 0x38;
  2220  001A5E  0E38               	movlw	56
  2221  001A60  010F               	movlb	15	; () banked
  2222  001A62  6F39               	movwf	57,b	;volatile
  2223                           
  2224                           ;pin_manager.c: 59: WPUB = 0x00;
  2225  001A64  0E00               	movlw	0
  2226  001A66  6E61               	movwf	3937,c	;volatile
  2227                           
  2228                           ;pin_manager.c: 61: LATC = 0x00;
  2229  001A68  0E00               	movlw	0
  2230  001A6A  6E8B               	movwf	3979,c	;volatile
  2231                           
  2232                           ;pin_manager.c: 62: TRISC = 0xD6;
  2233  001A6C  0ED6               	movlw	214
  2234  001A6E  6E94               	movwf	3988,c	;volatile
  2235                           
  2236                           ;pin_manager.c: 63: ANSELC = 0x14;
  2237  001A70  0E14               	movlw	20
  2238  001A72  010F               	movlb	15	; () banked
  2239  001A74  6F3A               	movwf	58,b	;volatile
  2240                           
  2241                           ;pin_manager.c: 65: LATD = 0x00;
  2242  001A76  0E00               	movlw	0
  2243  001A78  6E8C               	movwf	3980,c	;volatile
  2244                           
  2245                           ;pin_manager.c: 66: TRISD = 0x03;
  2246  001A7A  0E03               	movlw	3
  2247  001A7C  6E95               	movwf	3989,c	;volatile
  2248                           
  2249                           ;pin_manager.c: 67: ANSELD = 0x03;
  2250  001A7E  0E03               	movlw	3
  2251  001A80  010F               	movlb	15	; () banked
  2252  001A82  6F3B               	movwf	59,b	;volatile
  2253                           
  2254                           ;pin_manager.c: 69: LATE = 0x00;
  2255  001A84  0E00               	movlw	0
  2256  001A86  6E8D               	movwf	3981,c	;volatile
  2257                           
  2258                           ;pin_manager.c: 70: TRISE = 0x07;
  2259  001A88  0E07               	movlw	7
  2260  001A8A  6E96               	movwf	3990,c	;volatile
  2261                           
  2262                           ;pin_manager.c: 71: ANSELE = 0x07;
  2263  001A8C  0E07               	movlw	7
  2264  001A8E  010F               	movlb	15	; () banked
  2265  001A90  6F3C               	movwf	60,b	;volatile
  2266                           
  2267                           ; BSR set to: 15
  2268                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  2269  001A92  8EF1               	bsf	intcon2,7,c	;volatile
  2270                           
  2271                           ; BSR set to: 15
  2272  001A94  0012               	return	
  2273  001A96                     __end_of_PIN_MANAGER_Initialize:
  2274                           	opt stack 0
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           intcon	equ	0xFF2
  2280                           intcon2	equ	0xFF1
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           postinc1	equ	0xFE6
  2284                           postdec1	equ	0xFE5
  2285                           fsr1h	equ	0xFE2
  2286                           fsr1l	equ	0xFE1
  2287                           postinc2	equ	0xFDE
  2288                           postdec2	equ	0xFDD
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _OSCILLATOR_Initialize *****************
  2294 ;; Defined at:
  2295 ;;		line 122 in file "mcc_generated_files/mcc.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;		None               void
  2302 ;; Registers used:
  2303 ;;		wreg, status,2
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2309 ;;      Params:         0       0       0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0
  2312 ;;      Totals:         0       0       0       0       0       0       0
  2313 ;;Total ram usage:        0 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    4
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_SYSTEM_Initialize
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text12
  2324  001D46                     __ptext12:
  2325                           	opt stack 0
  2326  001D46                     _OSCILLATOR_Initialize:
  2327                           	opt stack 25
  2328                           
  2329                           ;mcc.c: 125: OSCCON = 0x62;
  2330                           
  2331                           ; BSR set to: 15
  2332                           ;incstack = 0
  2333  001D46  0E62               	movlw	98
  2334  001D48  6ED3               	movwf	4051,c	;volatile
  2335                           
  2336                           ;mcc.c: 127: OSCCON2 = 0x04;
  2337  001D4A  0E04               	movlw	4
  2338  001D4C  6ED2               	movwf	4050,c	;volatile
  2339                           
  2340                           ;mcc.c: 129: OSCTUNE = 0x00;
  2341  001D4E  0E00               	movlw	0
  2342  001D50  6E9B               	movwf	3995,c	;volatile
  2343  001D52  0012               	return	
  2344  001D54                     __end_of_OSCILLATOR_Initialize:
  2345                           	opt stack 0
  2346                           tblptru	equ	0xFF8
  2347                           tblptrh	equ	0xFF7
  2348                           tblptrl	equ	0xFF6
  2349                           tablat	equ	0xFF5
  2350                           intcon	equ	0xFF2
  2351                           intcon2	equ	0xFF1
  2352                           postinc0	equ	0xFEE
  2353                           wreg	equ	0xFE8
  2354                           postinc1	equ	0xFE6
  2355                           postdec1	equ	0xFE5
  2356                           fsr1h	equ	0xFE2
  2357                           fsr1l	equ	0xFE1
  2358                           postinc2	equ	0xFDE
  2359                           postdec2	equ	0xFDD
  2360                           fsr2h	equ	0xFDA
  2361                           fsr2l	equ	0xFD9
  2362                           status	equ	0xFD8
  2363                           
  2364 ;; *************** function _INTERRUPT_Initialize *****************
  2365 ;; Defined at:
  2366 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;		None
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;		None
  2371 ;; Return value:  Size  Location     Type
  2372 ;;		None               void
  2373 ;; Registers used:
  2374 ;;		None
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2380 ;;      Params:         0       0       0       0       0       0       0
  2381 ;;      Locals:         0       0       0       0       0       0       0
  2382 ;;      Temps:          0       0       0       0       0       0       0
  2383 ;;      Totals:         0       0       0       0       0       0       0
  2384 ;;Total ram usage:        0 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    4
  2387 ;; This function calls:
  2388 ;;		Nothing
  2389 ;; This function is called by:
  2390 ;;		_SYSTEM_Initialize
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text13
  2395  001D54                     __ptext13:
  2396                           	opt stack 0
  2397  001D54                     _INTERRUPT_Initialize:
  2398                           	opt stack 25
  2399                           
  2400                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  2401                           
  2402                           ;incstack = 0
  2403  001D54  9ED0               	bcf	4048,7,c	;volatile
  2404                           
  2405                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  2406  001D56  9A9F               	bcf	3999,5,c	;volatile
  2407                           
  2408                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  2409  001D58  9C9F               	bcf	3999,6,c	;volatile
  2410                           
  2411                           ;interrupt_manager.c: 64: IPR1bits.TX1IP = 0;
  2412  001D5A  989F               	bcf	3999,4,c	;volatile
  2413                           
  2414                           ;interrupt_manager.c: 66: IPR1bits.TMR1IP = 0;
  2415  001D5C  909F               	bcf	3999,0,c	;volatile
  2416  001D5E  0012               	return	
  2417  001D60                     __end_of_INTERRUPT_Initialize:
  2418                           	opt stack 0
  2419                           tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           intcon	equ	0xFF2
  2424                           intcon2	equ	0xFF1
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           postinc1	equ	0xFE6
  2428                           postdec1	equ	0xFE5
  2429                           fsr1h	equ	0xFE2
  2430                           fsr1l	equ	0xFE1
  2431                           postinc2	equ	0xFDE
  2432                           postdec2	equ	0xFDD
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _EUSART1_Initialize *****************
  2438 ;; Defined at:
  2439 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;		None
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;		None
  2444 ;; Return value:  Size  Location     Type
  2445 ;;		None               void
  2446 ;; Registers used:
  2447 ;;		wreg, status,2
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2453 ;;      Params:         0       0       0       0       0       0       0
  2454 ;;      Locals:         0       0       0       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0       0       0
  2456 ;;      Totals:         0       0       0       0       0       0       0
  2457 ;;Total ram usage:        0 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    4
  2460 ;; This function calls:
  2461 ;;		Nothing
  2462 ;; This function is called by:
  2463 ;;		_SYSTEM_Initialize
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text14
  2468  001B5A                     __ptext14:
  2469                           	opt stack 0
  2470  001B5A                     _EUSART1_Initialize:
  2471                           	opt stack 25
  2472                           
  2473                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  2474                           
  2475                           ;incstack = 0
  2476  001B5A  9A9D               	bcf	3997,5,c	;volatile
  2477                           
  2478                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  2479  001B5C  989D               	bcf	3997,4,c	;volatile
  2480                           
  2481                           ;eusart1.c: 85: BAUD1CON = 0x48;
  2482  001B5E  0E48               	movlw	72
  2483  001B60  6EB8               	movwf	4024,c	;volatile
  2484                           
  2485                           ;eusart1.c: 88: RC1STA = 0x98;
  2486  001B62  0E98               	movlw	152
  2487  001B64  6EAB               	movwf	4011,c	;volatile
  2488                           
  2489                           ;eusart1.c: 91: TX1STA = 0x26;
  2490  001B66  0E26               	movlw	38
  2491  001B68  6EAC               	movwf	4012,c	;volatile
  2492                           
  2493                           ;eusart1.c: 94: SPBRG1 = 0x67;
  2494  001B6A  0E67               	movlw	103
  2495  001B6C  6EAF               	movwf	4015,c	;volatile
  2496                           
  2497                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  2498  001B6E  0E00               	movlw	0
  2499  001B70  6EB0               	movwf	4016,c	;volatile
  2500                           
  2501                           ;eusart1.c: 100: TXREG1 = 0x00;
  2502  001B72  0E00               	movlw	0
  2503  001B74  6EAD               	movwf	4013,c	;volatile
  2504                           
  2505                           ;eusart1.c: 103: RCREG1 = 0x00;
  2506  001B76  0E00               	movlw	0
  2507  001B78  6EAE               	movwf	4014,c	;volatile
  2508                           
  2509                           ;eusart1.c: 107: eusart1TxHead = 0;
  2510  001B7A  0E00               	movlw	0
  2511  001B7C  6E45               	movwf	_eusart1TxHead,c
  2512                           
  2513                           ;eusart1.c: 108: eusart1TxTail = 0;
  2514  001B7E  0E00               	movlw	0
  2515  001B80  6E46               	movwf	_eusart1TxTail,c
  2516                           
  2517                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  2518  001B82  0E08               	movlw	8
  2519  001B84  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  2520                           
  2521                           ;eusart1.c: 111: eusart1RxHead = 0;
  2522  001B86  0E00               	movlw	0
  2523  001B88  6E43               	movwf	_eusart1RxHead,c
  2524                           
  2525                           ;eusart1.c: 112: eusart1RxTail = 0;
  2526  001B8A  0E00               	movlw	0
  2527  001B8C  6E44               	movwf	_eusart1RxTail,c
  2528                           
  2529                           ;eusart1.c: 113: eusart1RxCount = 0;
  2530  001B8E  0E00               	movlw	0
  2531  001B90  6E42               	movwf	_eusart1RxCount,c	;volatile
  2532                           
  2533                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  2534  001B92  8A9D               	bsf	3997,5,c	;volatile
  2535  001B94  0012               	return	
  2536  001B96                     __end_of_EUSART1_Initialize:
  2537                           	opt stack 0
  2538                           tblptru	equ	0xFF8
  2539                           tblptrh	equ	0xFF7
  2540                           tblptrl	equ	0xFF6
  2541                           tablat	equ	0xFF5
  2542                           intcon	equ	0xFF2
  2543                           intcon2	equ	0xFF1
  2544                           postinc0	equ	0xFEE
  2545                           wreg	equ	0xFE8
  2546                           postinc1	equ	0xFE6
  2547                           postdec1	equ	0xFE5
  2548                           fsr1h	equ	0xFE2
  2549                           fsr1l	equ	0xFE1
  2550                           postinc2	equ	0xFDE
  2551                           postdec2	equ	0xFDD
  2552                           fsr2h	equ	0xFDA
  2553                           fsr2l	equ	0xFD9
  2554                           status	equ	0xFD8
  2555                           
  2556 ;; *************** function _ADC_Initialize *****************
  2557 ;; Defined at:
  2558 ;;		line 61 in file "mcc_generated_files/adc.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;		None
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;		None
  2563 ;; Return value:  Size  Location     Type
  2564 ;;		None               void
  2565 ;; Registers used:
  2566 ;;		wreg, status,2
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2572 ;;      Params:         0       0       0       0       0       0       0
  2573 ;;      Locals:         0       0       0       0       0       0       0
  2574 ;;      Temps:          0       0       0       0       0       0       0
  2575 ;;      Totals:         0       0       0       0       0       0       0
  2576 ;;Total ram usage:        0 bytes
  2577 ;; Hardware stack levels used:    1
  2578 ;; Hardware stack levels required when called:    4
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_SYSTEM_Initialize
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text15
  2587  001CD2                     __ptext15:
  2588                           	opt stack 0
  2589  001CD2                     _ADC_Initialize:
  2590                           	opt stack 25
  2591                           
  2592                           ;adc.c: 66: ADCON0 = 0x01;
  2593                           
  2594                           ;incstack = 0
  2595  001CD2  0E01               	movlw	1
  2596  001CD4  6EC2               	movwf	4034,c	;volatile
  2597                           
  2598                           ;adc.c: 69: ADCON1 = 0x81;
  2599  001CD6  0E81               	movlw	129
  2600  001CD8  6EC1               	movwf	4033,c	;volatile
  2601                           
  2602                           ;adc.c: 72: ADCON2 = 0x0A;
  2603  001CDA  0E0A               	movlw	10
  2604  001CDC  6EC0               	movwf	4032,c	;volatile
  2605                           
  2606                           ;adc.c: 75: ADRESL = 0x00;
  2607  001CDE  0E00               	movlw	0
  2608  001CE0  6EC3               	movwf	4035,c	;volatile
  2609                           
  2610                           ;adc.c: 78: ADRESH = 0x00;
  2611  001CE2  0E00               	movlw	0
  2612  001CE4  6EC4               	movwf	4036,c	;volatile
  2613                           
  2614                           ;adc.c: 81: PIE1bits.ADIE = 1;
  2615  001CE6  8C9D               	bsf	3997,6,c	;volatile
  2616  001CE8  0012               	return	
  2617  001CEA                     __end_of_ADC_Initialize:
  2618                           	opt stack 0
  2619                           tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           intcon	equ	0xFF2
  2624                           intcon2	equ	0xFF1
  2625                           postinc0	equ	0xFEE
  2626                           wreg	equ	0xFE8
  2627                           postinc1	equ	0xFE6
  2628                           postdec1	equ	0xFE5
  2629                           fsr1h	equ	0xFE2
  2630                           fsr1l	equ	0xFE1
  2631                           postinc2	equ	0xFDE
  2632                           postdec2	equ	0xFDD
  2633                           fsr2h	equ	0xFDA
  2634                           fsr2l	equ	0xFD9
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _Battery_Fault *****************
  2638 ;; Defined at:
  2639 ;;		line 11 in file "Battery.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;		None
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  i               2   38[COMRAM] int 
  2644 ;;  fault           1   37[COMRAM] unsigned char 
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      unsigned char 
  2647 ;; Registers used:
  2648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2654 ;;      Params:         0       0       0       0       0       0       0
  2655 ;;      Locals:         3       0       0       0       0       0       0
  2656 ;;      Temps:          0       0       0       0       0       0       0
  2657 ;;      Totals:         3       0       0       0       0       0       0
  2658 ;;Total ram usage:        3 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; Hardware stack levels required when called:    5
  2661 ;; This function calls:
  2662 ;;		___ftge
  2663 ;;		___wmul
  2664 ;; This function is called by:
  2665 ;;		_main
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           	psect	text16
  2670  001710                     __ptext16:
  2671                           	opt stack 0
  2672  001710                     _Battery_Fault:
  2673                           	opt stack 25
  2674                           
  2675                           ;Battery.c: 13: char fault = 0;
  2676                           
  2677                           ;incstack = 0
  2678  001710  0E00               	movlw	0
  2679  001712  6E26               	movwf	Battery_Fault@fault,c
  2680                           
  2681                           ;Battery.c: 14: for(int i = 0;i<9;i++)
  2682  001714  0E00               	movlw	0
  2683  001716  6E28               	movwf	Battery_Fault@i+1,c
  2684  001718  0E00               	movlw	0
  2685  00171A  6E27               	movwf	Battery_Fault@i,c
  2686  00171C  5028               	movf	Battery_Fault@i+1,w,c
  2687  00171E  0A80               	xorlw	128
  2688  001720  0F80               	addlw	-128
  2689  001722  0E09               	movlw	9
  2690  001724  B4D8               	btfsc	status,2,c
  2691  001726  5C27               	subwf	Battery_Fault@i,w,c
  2692  001728  B0D8               	btfsc	status,0,c
  2693  00172A  0012               	return	
  2694                           
  2695                           ;Battery.c: 15: {
  2696                           ;Battery.c: 16: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  2697  00172C  0E00               	movlw	0
  2698  00172E  6E1D               	movwf	___ftge@ff1,c
  2699  001730  0E40               	movlw	64
  2700  001732  6E1E               	movwf	___ftge@ff1+1,c
  2701  001734  0E40               	movlw	64
  2702  001736  6E1F               	movwf	___ftge@ff1+2,c
  2703  001738  C027  F017         	movff	Battery_Fault@i,___wmul@multiplier
  2704  00173C  C028  F018         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  2705  001740  0E00               	movlw	0
  2706  001742  6E1A               	movwf	___wmul@multiplicand+1,c
  2707  001744  0E03               	movlw	3
  2708  001746  6E19               	movwf	___wmul@multiplicand,c
  2709  001748  EC2B  F00E         	call	___wmul	;wreg free
  2710  00174C  0100               	movlb	0	; () banked
  2711  00174E  0E7E               	movlw	low _Battery_Volt
  2712  001750  2417               	addwf	?___wmul,w,c
  2713  001752  6ED9               	movwf	fsr2l,c
  2714  001754  0100               	movlb	0	; () banked
  2715  001756  0E00               	movlw	high _Battery_Volt
  2716  001758  2018               	addwfc	?___wmul+1,w,c
  2717  00175A  6EDA               	movwf	fsr2h,c
  2718  00175C  CFDE F020          	movff	postinc2,___ftge@ff2
  2719  001760  CFDE F021          	movff	postinc2,___ftge@ff2+1
  2720  001764  CFDD F022          	movff	postdec2,___ftge@ff2+2
  2721  001768  EC7C  F00C         	call	___ftge	;wreg free
  2722  00176C  B0D8               	btfsc	status,0,c
  2723  00176E  D024               	goto	l3438
  2724  001770  C027  F017         	movff	Battery_Fault@i,___wmul@multiplier
  2725  001774  C028  F018         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  2726  001778  0E00               	movlw	0
  2727  00177A  6E1A               	movwf	___wmul@multiplicand+1,c
  2728  00177C  0E03               	movlw	3
  2729  00177E  6E19               	movwf	___wmul@multiplicand,c
  2730  001780  EC2B  F00E         	call	___wmul	;wreg free
  2731  001784  0100               	movlb	0	; () banked
  2732  001786  0E7E               	movlw	low _Battery_Volt
  2733  001788  2417               	addwf	?___wmul,w,c
  2734  00178A  6ED9               	movwf	fsr2l,c
  2735  00178C  0100               	movlb	0	; () banked
  2736  00178E  0E00               	movlw	high _Battery_Volt
  2737  001790  2018               	addwfc	?___wmul+1,w,c
  2738  001792  6EDA               	movwf	fsr2h,c
  2739  001794  CFDE F01D          	movff	postinc2,___ftge@ff1
  2740  001798  CFDE F01E          	movff	postinc2,___ftge@ff1+1
  2741  00179C  CFDD F01F          	movff	postdec2,___ftge@ff1+2
  2742  0017A0  0EB8               	movlw	184
  2743  0017A2  6E20               	movwf	___ftge@ff2,c
  2744  0017A4  0E86               	movlw	134
  2745  0017A6  6E21               	movwf	___ftge@ff2+1,c
  2746  0017A8  0E40               	movlw	64
  2747  0017AA  6E22               	movwf	___ftge@ff2+2,c
  2748  0017AC  EC7C  F00C         	call	___ftge	;wreg free
  2749  0017B0  B0D8               	btfsc	status,0,c
  2750  0017B2  D002               	goto	l3438
  2751                           
  2752                           ;Battery.c: 17: {
  2753                           ;Battery.c: 18: fault = 1;
  2754  0017B4  0E01               	movlw	1
  2755  0017B6  6E26               	movwf	Battery_Fault@fault,c
  2756  0017B8                     l3438:
  2757  0017B8  4A27               	infsnz	Battery_Fault@i,f,c
  2758  0017BA  2A28               	incf	Battery_Fault@i+1,f,c
  2759  0017BC  D7AF               	goto	L5
  2760  0017BE                     __end_of_Battery_Fault:
  2761                           	opt stack 0
  2762                           tblptru	equ	0xFF8
  2763                           tblptrh	equ	0xFF7
  2764                           tblptrl	equ	0xFF6
  2765                           tablat	equ	0xFF5
  2766                           intcon	equ	0xFF2
  2767                           intcon2	equ	0xFF1
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           postinc1	equ	0xFE6
  2771                           postdec1	equ	0xFE5
  2772                           fsr1h	equ	0xFE2
  2773                           fsr1l	equ	0xFE1
  2774                           postinc2	equ	0xFDE
  2775                           postdec2	equ	0xFDD
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function ___ftge *****************
  2781 ;; Defined at:
  2782 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  ff1             3   28[COMRAM] float 
  2785 ;;  ff2             3   31[COMRAM] float 
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;		None               void
  2790 ;; Registers used:
  2791 ;;		wreg, status,2, status,0
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2797 ;;      Params:         6       0       0       0       0       0       0
  2798 ;;      Locals:         0       0       0       0       0       0       0
  2799 ;;      Temps:          3       0       0       0       0       0       0
  2800 ;;      Totals:         9       0       0       0       0       0       0
  2801 ;;Total ram usage:        9 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    4
  2804 ;; This function calls:
  2805 ;;		Nothing
  2806 ;; This function is called by:
  2807 ;;		_Battery_Fault
  2808 ;;		_Temp_Fault
  2809 ;;		_Current_Fault
  2810 ;;		_RunBypas
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           	psect	text17
  2815  0018F8                     __ptext17:
  2816                           	opt stack 0
  2817  0018F8                     ___ftge:
  2818                           	opt stack 25
  2819                           
  2820                           ;incstack = 0
  2821  0018F8  AE1F               	btfss	___ftge@ff1+2,7,c
  2822  0018FA  D016               	goto	l2556
  2823  0018FC  C01D  F023         	movff	___ftge@ff1,??___ftge
  2824  001900  C01E  F024         	movff	___ftge@ff1+1,??___ftge+1
  2825  001904  C01F  F025         	movff	___ftge@ff1+2,??___ftge+2
  2826  001908  1E23               	comf	??___ftge,f,c
  2827  00190A  1E24               	comf	??___ftge+1,f,c
  2828  00190C  1E25               	comf	??___ftge+2,f,c
  2829  00190E  2A23               	incf	??___ftge,f,c
  2830  001910  0E00               	movlw	0
  2831  001912  2224               	addwfc	??___ftge+1,f,c
  2832  001914  2225               	addwfc	??___ftge+2,f,c
  2833  001916  0E00               	movlw	0
  2834  001918  2423               	addwf	??___ftge,w,c
  2835  00191A  6E1D               	movwf	___ftge@ff1,c
  2836  00191C  0E00               	movlw	0
  2837  00191E  2024               	addwfc	??___ftge+1,w,c
  2838  001920  6E1E               	movwf	___ftge@ff1+1,c
  2839  001922  0E80               	movlw	128
  2840  001924  2025               	addwfc	??___ftge+2,w,c
  2841  001926  6E1F               	movwf	___ftge@ff1+2,c
  2842  001928                     l2556:
  2843  001928  AE22               	btfss	___ftge@ff2+2,7,c
  2844  00192A  D016               	goto	l2560
  2845  00192C  C020  F023         	movff	___ftge@ff2,??___ftge
  2846  001930  C021  F024         	movff	___ftge@ff2+1,??___ftge+1
  2847  001934  C022  F025         	movff	___ftge@ff2+2,??___ftge+2
  2848  001938  1E23               	comf	??___ftge,f,c
  2849  00193A  1E24               	comf	??___ftge+1,f,c
  2850  00193C  1E25               	comf	??___ftge+2,f,c
  2851  00193E  2A23               	incf	??___ftge,f,c
  2852  001940  0E00               	movlw	0
  2853  001942  2224               	addwfc	??___ftge+1,f,c
  2854  001944  2225               	addwfc	??___ftge+2,f,c
  2855  001946  0E00               	movlw	0
  2856  001948  2423               	addwf	??___ftge,w,c
  2857  00194A  6E20               	movwf	___ftge@ff2,c
  2858  00194C  0E00               	movlw	0
  2859  00194E  2024               	addwfc	??___ftge+1,w,c
  2860  001950  6E21               	movwf	___ftge@ff2+1,c
  2861  001952  0E80               	movlw	128
  2862  001954  2025               	addwfc	??___ftge+2,w,c
  2863  001956  6E22               	movwf	___ftge@ff2+2,c
  2864  001958                     l2560:
  2865  001958  0E00               	movlw	0
  2866  00195A  1A1D               	xorwf	___ftge@ff1,f,c
  2867  00195C  0E00               	movlw	0
  2868  00195E  1A1E               	xorwf	___ftge@ff1+1,f,c
  2869  001960  0E80               	movlw	128
  2870  001962  1A1F               	xorwf	___ftge@ff1+2,f,c
  2871  001964  0E00               	movlw	0
  2872  001966  1A20               	xorwf	___ftge@ff2,f,c
  2873  001968  0E00               	movlw	0
  2874  00196A  1A21               	xorwf	___ftge@ff2+1,f,c
  2875  00196C  0E80               	movlw	128
  2876  00196E  1A22               	xorwf	___ftge@ff2+2,f,c
  2877  001970  5020               	movf	___ftge@ff2,w,c
  2878  001972  5C1D               	subwf	___ftge@ff1,w,c
  2879  001974  5021               	movf	___ftge@ff2+1,w,c
  2880  001976  581E               	subwfb	___ftge@ff1+1,w,c
  2881  001978  5022               	movf	___ftge@ff2+2,w,c
  2882  00197A  581F               	subwfb	___ftge@ff1+2,w,c
  2883  00197C  B0D8               	btfsc	status,0,c
  2884  00197E  D002               	goto	l2566
  2885  001980  90D8               	bcf	status,0,c
  2886  001982  0012               	return	
  2887  001984                     l2566:
  2888  001984  80D8               	bsf	status,0,c
  2889  001986  0012               	return	
  2890  001988                     __end_of___ftge:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           intcon	equ	0xFF2
  2897                           intcon2	equ	0xFF1
  2898                           postinc0	equ	0xFEE
  2899                           wreg	equ	0xFE8
  2900                           postinc1	equ	0xFE6
  2901                           postdec1	equ	0xFE5
  2902                           fsr1h	equ	0xFE2
  2903                           fsr1l	equ	0xFE1
  2904                           postinc2	equ	0xFDE
  2905                           postdec2	equ	0xFDD
  2906                           fsr2h	equ	0xFDA
  2907                           fsr2l	equ	0xFD9
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function _Battery_Convert *****************
  2911 ;; Defined at:
  2912 ;;		line 47 in file "Battery.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  x               2   22[BANK0 ] int 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;		None               void
  2919 ;; Registers used:
  2920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2926 ;;      Params:         0       0       0       0       0       0       0
  2927 ;;      Locals:         0       2       0       0       0       0       0
  2928 ;;      Temps:          0       2       0       0       0       0       0
  2929 ;;      Totals:         0       4       0       0       0       0       0
  2930 ;;Total ram usage:        4 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    7
  2933 ;; This function calls:
  2934 ;;		_Battery_Filter
  2935 ;;		___awtoft
  2936 ;;		___ftadd
  2937 ;;		___ftdiv
  2938 ;;		___ftmul
  2939 ;;		___wmul
  2940 ;; This function is called by:
  2941 ;;		_main
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text18
  2946  001546                     __ptext18:
  2947                           	opt stack 0
  2948  001546                     _Battery_Convert:
  2949                           	opt stack 23
  2950                           
  2951                           ;Battery.c: 49: int x;
  2952                           ;Battery.c: 50: for(x = 0; x < 10; x++)
  2953                           
  2954                           ;incstack = 0
  2955  001546  0E00               	movlw	0
  2956  001548  0100               	movlb	0	; () banked
  2957  00154A  6FF1               	movwf	(Battery_Convert@x+1)& (0+255),b
  2958  00154C  0E00               	movlw	0
  2959  00154E  0100               	movlb	0	; () banked
  2960  001550  6FF0               	movwf	Battery_Convert@x& (0+255),b
  2961  001552                     
  2962                           ; BSR set to: 0
  2963  001552  0100               	movlb	0	; () banked
  2964  001554  51F1               	movf	(Battery_Convert@x+1)& (0+255),w,b
  2965  001556  0A80               	xorlw	128
  2966  001558  0F80               	addlw	-128
  2967  00155A  0E0A               	movlw	10
  2968  00155C  B4D8               	btfsc	status,2,c
  2969  00155E  5DF0               	subwf	Battery_Convert@x& (0+255),w,b
  2970  001560  B0D8               	btfsc	status,0,c
  2971  001562  D062               	goto	l3454
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;Battery.c: 51: {
  2975                           ;Battery.c: 52: TempBattery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0) + 2.5;
  2976                           
  2977                           ; BSR set to: 0
  2978                           
  2979                           ; BSR set to: 0
  2980  001564  C0F0  F017         	movff	Battery_Convert@x,___wmul@multiplier
  2981  001568  C0F1  F018         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  2982  00156C  0E00               	movlw	0
  2983  00156E  6E1A               	movwf	___wmul@multiplicand+1,c
  2984  001570  0E03               	movlw	3
  2985  001572  6E19               	movwf	___wmul@multiplicand,c
  2986  001574  EC2B  F00E         	call	___wmul	;wreg free
  2987  001578  0101               	movlb	1	; () banked
  2988  00157A  0E96               	movlw	low _TempBattery_Volt
  2989  00157C  2417               	addwf	?___wmul,w,c
  2990  00157E  6ED9               	movwf	fsr2l,c
  2991  001580  0101               	movlb	1	; () banked
  2992  001582  0E01               	movlw	high _TempBattery_Volt
  2993  001584  2018               	addwfc	?___wmul+1,w,c
  2994  001586  6EDA               	movwf	fsr2h,c
  2995  001588  0E00               	movlw	0
  2996  00158A  6E35               	movwf	___ftmul@f2,c
  2997  00158C  0EA0               	movlw	160
  2998  00158E  6E36               	movwf	___ftmul@f2+1,c
  2999  001590  0E40               	movlw	64
  3000  001592  6E37               	movwf	___ftmul@f2+2,c
  3001  001594  0E00               	movlw	0
  3002  001596  6E26               	movwf	___ftdiv@f2,c
  3003  001598  0E80               	movlw	128
  3004  00159A  6E27               	movwf	___ftdiv@f2+1,c
  3005  00159C  0E44               	movlw	68
  3006  00159E  6E28               	movwf	___ftdiv@f2+2,c
  3007  0015A0  0E9C               	movlw	low _Battery_Adc
  3008  0015A2  0100               	movlb	0	; () banked
  3009  0015A4  6FEE               	movwf	??_Battery_Convert& (0+255),b
  3010  0015A6  0E00               	movlw	high _Battery_Adc
  3011  0015A8  6FEF               	movwf	(??_Battery_Convert+1)& (0+255),b
  3012  0015AA  90D8               	bcf	status,0,c
  3013  0015AC  0100               	movlb	0	; () banked
  3014  0015AE  35F0               	rlcf	Battery_Convert@x& (0+255),w,b
  3015  0015B0  6EE1               	movwf	fsr1l,c
  3016  0015B2  0100               	movlb	0	; () banked
  3017  0015B4  35F1               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  3018  0015B6  6EE2               	movwf	fsr1h,c
  3019  0015B8  0100               	movlb	0	; () banked
  3020  0015BA  51EE               	movf	??_Battery_Convert& (0+255),w,b
  3021  0015BC  26E1               	addwf	fsr1l,f,c
  3022  0015BE  0100               	movlb	0	; () banked
  3023  0015C0  51EF               	movf	(??_Battery_Convert+1)& (0+255),w,b
  3024  0015C2  22E2               	addwfc	fsr1h,f,c
  3025  0015C4  CFE6 F01F          	movff	postinc1,___awtoft@c
  3026  0015C8  CFE5 F020          	movff	postdec1,___awtoft@c+1
  3027  0015CC  EC4B  F00D         	call	___awtoft	;wreg free
  3028  0015D0  C01F  F023         	movff	?___awtoft,___ftdiv@f1
  3029  0015D4  C020  F024         	movff	?___awtoft+1,___ftdiv@f1+1
  3030  0015D8  C021  F025         	movff	?___awtoft+2,___ftdiv@f1+2
  3031  0015DC  EC17  F00B         	call	___ftdiv	;wreg free
  3032  0015E0  C023  F032         	movff	?___ftdiv,___ftmul@f1
  3033  0015E4  C024  F033         	movff	?___ftdiv+1,___ftmul@f1+1
  3034  0015E8  C025  F034         	movff	?___ftdiv+2,___ftmul@f1+2
  3035  0015EC  EC99  F009         	call	___ftmul	;wreg free
  3036  0015F0  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  3037  0015F4  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  3038  0015F8  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  3039  0015FC  0E00               	movlw	0
  3040  0015FE  0100               	movlb	0	; () banked
  3041  001600  6FE3               	movwf	___ftadd@f2& (0+255),b
  3042  001602  0E20               	movlw	32
  3043  001604  0100               	movlb	0	; () banked
  3044  001606  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
  3045  001608  0E40               	movlw	64
  3046  00160A  0100               	movlb	0	; () banked
  3047  00160C  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
  3048  00160E  EC19  F005         	call	___ftadd	;wreg free
  3049  001612  C0E0  FFDE         	movff	?___ftadd,postinc2
  3050  001616  C0E1  FFDE         	movff	?___ftadd+1,postinc2
  3051  00161A  C0E2  FFDD         	movff	?___ftadd+2,postdec2
  3052  00161E  52DD               	movf	postdec2,f,c
  3053  001620  0100               	movlb	0	; () banked
  3054  001622  4BF0               	infsnz	Battery_Convert@x& (0+255),f,b
  3055  001624  2BF1               	incf	(Battery_Convert@x+1)& (0+255),f,b
  3056  001626  D795               	goto	L6
  3057  001628                     l3454:
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;Battery.c: 53: }
  3061                           ;Battery.c: 54: Battery_Filter();
  3062  001628  EC30  F008         	call	_Battery_Filter	;wreg free
  3063  00162C  0012               	return	
  3064  00162E                     __end_of_Battery_Convert:
  3065                           	opt stack 0
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           intcon	equ	0xFF2
  3071                           intcon2	equ	0xFF1
  3072                           postinc0	equ	0xFEE
  3073                           wreg	equ	0xFE8
  3074                           postinc1	equ	0xFE6
  3075                           postdec1	equ	0xFE5
  3076                           fsr1h	equ	0xFE2
  3077                           fsr1l	equ	0xFE1
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function ___ftdiv *****************
  3085 ;; Defined at:
  3086 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  f1              3   34[COMRAM] float 
  3089 ;;  f2              3   37[COMRAM] float 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  f3              3   44[COMRAM] float 
  3092 ;;  sign            1   48[COMRAM] unsigned char 
  3093 ;;  exp             1   47[COMRAM] unsigned char 
  3094 ;;  cntr            1   43[COMRAM] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  3   34[COMRAM] float 
  3097 ;; Registers used:
  3098 ;;		wreg, status,2, status,0, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3104 ;;      Params:         6       0       0       0       0       0       0
  3105 ;;      Locals:         6       0       0       0       0       0       0
  3106 ;;      Temps:          3       0       0       0       0       0       0
  3107 ;;      Totals:        15       0       0       0       0       0       0
  3108 ;;Total ram usage:       15 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    5
  3111 ;; This function calls:
  3112 ;;		___ftpack
  3113 ;; This function is called by:
  3114 ;;		_Battery_Convert
  3115 ;;		_Temp_Convert
  3116 ;;		_Current_Fault
  3117 ;;		_Current_Get
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text19
  3122  00162E                     __ptext19:
  3123                           	opt stack 0
  3124  00162E                     ___ftdiv:
  3125                           	opt stack 24
  3126                           
  3127                           ;incstack = 0
  3128  00162E  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
  3129  001632  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
  3130  001634  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
  3131  001636  3424               	rlcf	___ftdiv@f1+1,w,c
  3132  001638  3629               	rlcf	??___ftdiv& (0+255),f,c
  3133  00163A  E301               	bnc	u2921
  3134  00163C  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
  3135  00163E                     u2921:
  3136  00163E  5029               	movf	??___ftdiv,w,c
  3137  001640  6E30               	movwf	___ftdiv@exp,c
  3138  001642  6630               	tstfsz	___ftdiv@exp& (0+255),c
  3139  001644  D007               	goto	l3380
  3140  001646  0E00               	movlw	0
  3141  001648  6E23               	movwf	?___ftdiv,c
  3142  00164A  0E00               	movlw	0
  3143  00164C  6E24               	movwf	?___ftdiv+1,c
  3144  00164E  0E00               	movlw	0
  3145  001650  6E25               	movwf	?___ftdiv+2,c
  3146  001652  0012               	return	
  3147  001654                     l3380:
  3148  001654  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
  3149  001658  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
  3150  00165A  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
  3151  00165C  3427               	rlcf	___ftdiv@f2+1,w,c
  3152  00165E  3629               	rlcf	??___ftdiv& (0+255),f,c
  3153  001660  E301               	bnc	u2941
  3154  001662  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
  3155  001664                     u2941:
  3156  001664  5029               	movf	??___ftdiv,w,c
  3157  001666  6E31               	movwf	___ftdiv@sign,c
  3158  001668  6631               	tstfsz	___ftdiv@sign& (0+255),c
  3159  00166A  D007               	goto	l3386
  3160  00166C  0E00               	movlw	0
  3161  00166E  6E23               	movwf	?___ftdiv,c
  3162  001670  0E00               	movlw	0
  3163  001672  6E24               	movwf	?___ftdiv+1,c
  3164  001674  0E00               	movlw	0
  3165  001676  6E25               	movwf	?___ftdiv+2,c
  3166  001678  0012               	return	
  3167  00167A                     l3386:
  3168  00167A  0E00               	movlw	0
  3169  00167C  6E2D               	movwf	___ftdiv@f3,c
  3170  00167E  0E00               	movlw	0
  3171  001680  6E2E               	movwf	___ftdiv@f3+1,c
  3172  001682  0E00               	movlw	0
  3173  001684  6E2F               	movwf	___ftdiv@f3+2,c
  3174  001686  5031               	movf	___ftdiv@sign,w,c
  3175  001688  0F89               	addlw	137
  3176  00168A  5E30               	subwf	___ftdiv@exp,f,c
  3177  00168C  C025  F031         	movff	___ftdiv@f1+2,___ftdiv@sign
  3178  001690  5028               	movf	___ftdiv@f2+2,w,c
  3179  001692  1A31               	xorwf	___ftdiv@sign,f,c
  3180  001694  0E80               	movlw	128
  3181  001696  1631               	andwf	___ftdiv@sign,f,c
  3182  001698  8E24               	bsf	___ftdiv@f1+1,7,c
  3183  00169A  0EFF               	movlw	255
  3184  00169C  1623               	andwf	___ftdiv@f1,f,c
  3185  00169E  0EFF               	movlw	255
  3186  0016A0  1624               	andwf	___ftdiv@f1+1,f,c
  3187  0016A2  0E00               	movlw	0
  3188  0016A4  1625               	andwf	___ftdiv@f1+2,f,c
  3189  0016A6  8E27               	bsf	___ftdiv@f2+1,7,c
  3190  0016A8  0EFF               	movlw	255
  3191  0016AA  1626               	andwf	___ftdiv@f2,f,c
  3192  0016AC  0EFF               	movlw	255
  3193  0016AE  1627               	andwf	___ftdiv@f2+1,f,c
  3194  0016B0  0E00               	movlw	0
  3195  0016B2  1628               	andwf	___ftdiv@f2+2,f,c
  3196  0016B4  0E18               	movlw	24
  3197  0016B6  6E2C               	movwf	___ftdiv@cntr,c
  3198  0016B8                     l3406:
  3199  0016B8  90D8               	bcf	status,0,c
  3200  0016BA  362D               	rlcf	___ftdiv@f3,f,c
  3201  0016BC  362E               	rlcf	___ftdiv@f3+1,f,c
  3202  0016BE  362F               	rlcf	___ftdiv@f3+2,f,c
  3203  0016C0  5026               	movf	___ftdiv@f2,w,c
  3204  0016C2  5C23               	subwf	___ftdiv@f1,w,c
  3205  0016C4  5027               	movf	___ftdiv@f2+1,w,c
  3206  0016C6  5824               	subwfb	___ftdiv@f1+1,w,c
  3207  0016C8  5028               	movf	___ftdiv@f2+2,w,c
  3208  0016CA  5825               	subwfb	___ftdiv@f1+2,w,c
  3209  0016CC  A0D8               	btfss	status,0,c
  3210  0016CE  D007               	goto	l951
  3211  0016D0  5026               	movf	___ftdiv@f2,w,c
  3212  0016D2  5E23               	subwf	___ftdiv@f1,f,c
  3213  0016D4  5027               	movf	___ftdiv@f2+1,w,c
  3214  0016D6  5A24               	subwfb	___ftdiv@f1+1,f,c
  3215  0016D8  5028               	movf	___ftdiv@f2+2,w,c
  3216  0016DA  5A25               	subwfb	___ftdiv@f1+2,f,c
  3217  0016DC  802D               	bsf	___ftdiv@f3,0,c
  3218  0016DE                     l951:
  3219  0016DE  90D8               	bcf	status,0,c
  3220  0016E0  3623               	rlcf	___ftdiv@f1,f,c
  3221  0016E2  3624               	rlcf	___ftdiv@f1+1,f,c
  3222  0016E4  3625               	rlcf	___ftdiv@f1+2,f,c
  3223  0016E6  2E2C               	decfsz	___ftdiv@cntr,f,c
  3224  0016E8  D7E7               	goto	l3406
  3225  0016EA  C02D  F017         	movff	___ftdiv@f3,___ftpack@arg
  3226  0016EE  C02E  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3227  0016F2  C02F  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3228  0016F6  C030  F01A         	movff	___ftdiv@exp,___ftpack@exp
  3229  0016FA  C031  F01B         	movff	___ftdiv@sign,___ftpack@sign
  3230  0016FE  ECDF  F00B         	call	___ftpack	;wreg free
  3231  001702  C017  F023         	movff	?___ftpack,?___ftdiv
  3232  001706  C018  F024         	movff	?___ftpack+1,?___ftdiv+1
  3233  00170A  C019  F025         	movff	?___ftpack+2,?___ftdiv+2
  3234  00170E  0012               	return	
  3235  001710                     __end_of___ftdiv:
  3236                           	opt stack 0
  3237                           tblptru	equ	0xFF8
  3238                           tblptrh	equ	0xFF7
  3239                           tblptrl	equ	0xFF6
  3240                           tablat	equ	0xFF5
  3241                           intcon	equ	0xFF2
  3242                           intcon2	equ	0xFF1
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           postinc1	equ	0xFE6
  3246                           postdec1	equ	0xFE5
  3247                           fsr1h	equ	0xFE2
  3248                           fsr1l	equ	0xFE1
  3249                           postinc2	equ	0xFDE
  3250                           postdec2	equ	0xFDD
  3251                           fsr2h	equ	0xFDA
  3252                           fsr2l	equ	0xFD9
  3253                           status	equ	0xFD8
  3254                           
  3255 ;; *************** function ___awtoft *****************
  3256 ;; Defined at:
  3257 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  c               2   30[COMRAM] int 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  sign            1   33[COMRAM] unsigned char 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  3   30[COMRAM] float 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2, status,0, prodl, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3271 ;;      Params:         3       0       0       0       0       0       0
  3272 ;;      Locals:         1       0       0       0       0       0       0
  3273 ;;      Temps:          0       0       0       0       0       0       0
  3274 ;;      Totals:         4       0       0       0       0       0       0
  3275 ;;Total ram usage:        4 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    5
  3278 ;; This function calls:
  3279 ;;		___ftpack
  3280 ;; This function is called by:
  3281 ;;		_Battery_Convert
  3282 ;;		_Temp_Convert
  3283 ;;		_log
  3284 ;;		_Current_Convert
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text20
  3289  001A96                     __ptext20:
  3290                           	opt stack 0
  3291  001A96                     ___awtoft:
  3292                           	opt stack 23
  3293                           
  3294                           ;incstack = 0
  3295  001A96  0E00               	movlw	0
  3296  001A98  6E22               	movwf	___awtoft@sign,c
  3297  001A9A  5020               	movf	___awtoft@c+1,w,c
  3298  001A9C  0A80               	xorlw	128
  3299  001A9E  6EF3               	movwf	prodl,c
  3300  001AA0  0E80               	movlw	128
  3301  001AA2  5CF3               	subwf	prodl,w,c
  3302  001AA4  0E00               	movlw	0
  3303  001AA6  B4D8               	btfsc	status,2,c
  3304  001AA8  5C1F               	subwf	___awtoft@c,w,c
  3305  001AAA  B0D8               	btfsc	status,0,c
  3306  001AAC  D006               	goto	l3274
  3307  001AAE  6C1F               	negf	___awtoft@c,c
  3308  001AB0  1E20               	comf	___awtoft@c+1,f,c
  3309  001AB2  B0D8               	btfsc	status,0,c
  3310  001AB4  2A20               	incf	___awtoft@c+1,f,c
  3311  001AB6  0E01               	movlw	1
  3312  001AB8  6E22               	movwf	___awtoft@sign,c
  3313  001ABA                     l3274:
  3314  001ABA  C01F  F017         	movff	___awtoft@c,___ftpack@arg
  3315  001ABE  C020  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  3316  001AC2  6A19               	clrf	___ftpack@arg+2,c
  3317  001AC4  0E8E               	movlw	142
  3318  001AC6  6E1A               	movwf	___ftpack@exp,c
  3319  001AC8  C022  F01B         	movff	___awtoft@sign,___ftpack@sign
  3320  001ACC  ECDF  F00B         	call	___ftpack	;wreg free
  3321  001AD0  C017  F01F         	movff	?___ftpack,?___awtoft
  3322  001AD4  C018  F020         	movff	?___ftpack+1,?___awtoft+1
  3323  001AD8  C019  F021         	movff	?___ftpack+2,?___awtoft+2
  3324  001ADC  0012               	return	
  3325  001ADE                     __end_of___awtoft:
  3326                           	opt stack 0
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodl	equ	0xFF3
  3332                           intcon	equ	0xFF2
  3333                           intcon2	equ	0xFF1
  3334                           postinc0	equ	0xFEE
  3335                           wreg	equ	0xFE8
  3336                           postinc1	equ	0xFE6
  3337                           postdec1	equ	0xFE5
  3338                           fsr1h	equ	0xFE2
  3339                           fsr1l	equ	0xFE1
  3340                           postinc2	equ	0xFDE
  3341                           postdec2	equ	0xFDD
  3342                           fsr2h	equ	0xFDA
  3343                           fsr2l	equ	0xFD9
  3344                           status	equ	0xFD8
  3345                           
  3346 ;; *************** function _Battery_Filter *****************
  3347 ;; Defined at:
  3348 ;;		line 33 in file "Battery.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;		None
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  x               2   18[BANK0 ] int 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;		None               void
  3355 ;; Registers used:
  3356 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3362 ;;      Params:         0       0       0       0       0       0       0
  3363 ;;      Locals:         0       2       0       0       0       0       0
  3364 ;;      Temps:          0       0       0       0       0       0       0
  3365 ;;      Totals:         0       2       0       0       0       0       0
  3366 ;;Total ram usage:        2 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    6
  3369 ;; This function calls:
  3370 ;;		___ftadd
  3371 ;;		___ftmul
  3372 ;;		___wmul
  3373 ;; This function is called by:
  3374 ;;		_Battery_Convert
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text21
  3379  001060                     __ptext21:
  3380                           	opt stack 0
  3381  001060                     _Battery_Filter:
  3382                           	opt stack 23
  3383                           
  3384                           ;Battery.c: 36: int x;
  3385                           ;Battery.c: 37: for(x = 0; x < 10; x++)
  3386                           
  3387                           ;incstack = 0
  3388  001060  0E00               	movlw	0
  3389  001062  0100               	movlb	0	; () banked
  3390  001064  6FED               	movwf	(Battery_Filter@x+1)& (0+255),b
  3391  001066  0E00               	movlw	0
  3392  001068  0100               	movlb	0	; () banked
  3393  00106A  6FEC               	movwf	Battery_Filter@x& (0+255),b
  3394  00106C                     
  3395                           ; BSR set to: 0
  3396  00106C  0100               	movlb	0	; () banked
  3397  00106E  51ED               	movf	(Battery_Filter@x+1)& (0+255),w,b
  3398  001070  0A80               	xorlw	128
  3399  001072  0F80               	addlw	-128
  3400  001074  0E0A               	movlw	10
  3401  001076  B4D8               	btfsc	status,2,c
  3402  001078  5DEC               	subwf	Battery_Filter@x& (0+255),w,b
  3403  00107A  B0D8               	btfsc	status,0,c
  3404  00107C  D06B               	goto	l3316
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;Battery.c: 38: {
  3408                           ;Battery.c: 39: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  3409                           
  3410                           ; BSR set to: 0
  3411                           
  3412                           ; BSR set to: 0
  3413  00107E  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3414  001082  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3415  001086  0E00               	movlw	0
  3416  001088  6E1A               	movwf	___wmul@multiplicand+1,c
  3417  00108A  0E03               	movlw	3
  3418  00108C  6E19               	movwf	___wmul@multiplicand,c
  3419  00108E  EC2B  F00E         	call	___wmul	;wreg free
  3420  001092  0100               	movlb	0	; () banked
  3421  001094  0E7E               	movlw	low _Battery_Volt
  3422  001096  2417               	addwf	?___wmul,w,c
  3423  001098  6ED9               	movwf	fsr2l,c
  3424  00109A  0100               	movlb	0	; () banked
  3425  00109C  0E00               	movlw	high _Battery_Volt
  3426  00109E  2018               	addwfc	?___wmul+1,w,c
  3427  0010A0  6EDA               	movwf	fsr2h,c
  3428  0010A2  0E48               	movlw	72
  3429  0010A4  6E35               	movwf	___ftmul@f2,c
  3430  0010A6  0E61               	movlw	97
  3431  0010A8  6E36               	movwf	___ftmul@f2+1,c
  3432  0010AA  0E3F               	movlw	63
  3433  0010AC  6E37               	movwf	___ftmul@f2+2,c
  3434  0010AE  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3435  0010B2  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3436  0010B6  0E00               	movlw	0
  3437  0010B8  6E1A               	movwf	___wmul@multiplicand+1,c
  3438  0010BA  0E03               	movlw	3
  3439  0010BC  6E19               	movwf	___wmul@multiplicand,c
  3440  0010BE  EC2B  F00E         	call	___wmul	;wreg free
  3441  0010C2  0101               	movlb	1	; () banked
  3442  0010C4  0E96               	movlw	low _TempBattery_Volt
  3443  0010C6  2417               	addwf	?___wmul,w,c
  3444  0010C8  6EE1               	movwf	fsr1l,c
  3445  0010CA  0101               	movlb	1	; () banked
  3446  0010CC  0E01               	movlw	high _TempBattery_Volt
  3447  0010CE  2018               	addwfc	?___wmul+1,w,c
  3448  0010D0  6EE2               	movwf	fsr1h,c
  3449  0010D2  CFE6 F032          	movff	postinc1,___ftmul@f1
  3450  0010D6  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  3451  0010DA  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  3452  0010DE  EC99  F009         	call	___ftmul	;wreg free
  3453  0010E2  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  3454  0010E6  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  3455  0010EA  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  3456  0010EE  0EC3               	movlw	195
  3457  0010F0  6E35               	movwf	___ftmul@f2,c
  3458  0010F2  0EF5               	movlw	245
  3459  0010F4  6E36               	movwf	___ftmul@f2+1,c
  3460  0010F6  0E3D               	movlw	61
  3461  0010F8  6E37               	movwf	___ftmul@f2+2,c
  3462  0010FA  0E00               	movlw	0
  3463  0010FC  6E1A               	movwf	___wmul@multiplicand+1,c
  3464  0010FE  0E03               	movlw	3
  3465  001100  6E19               	movwf	___wmul@multiplicand,c
  3466  001102  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3467  001106  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3468  00110A  EC2B  F00E         	call	___wmul	;wreg free
  3469  00110E  0101               	movlb	1	; () banked
  3470  001110  0E1E               	movlw	low _PrevBattery_Volt
  3471  001112  2417               	addwf	?___wmul,w,c
  3472  001114  6EE1               	movwf	fsr1l,c
  3473  001116  0101               	movlb	1	; () banked
  3474  001118  0E01               	movlw	high _PrevBattery_Volt
  3475  00111A  2018               	addwfc	?___wmul+1,w,c
  3476  00111C  6EE2               	movwf	fsr1h,c
  3477  00111E  CFE6 F032          	movff	postinc1,___ftmul@f1
  3478  001122  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  3479  001126  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  3480  00112A  EC99  F009         	call	___ftmul	;wreg free
  3481  00112E  C032  F0E3         	movff	?___ftmul,___ftadd@f2
  3482  001132  C033  F0E4         	movff	?___ftmul+1,___ftadd@f2+1
  3483  001136  C034  F0E5         	movff	?___ftmul+2,___ftadd@f2+2
  3484  00113A  EC19  F005         	call	___ftadd	;wreg free
  3485  00113E  C0E0  FFDE         	movff	?___ftadd,postinc2
  3486  001142  C0E1  FFDE         	movff	?___ftadd+1,postinc2
  3487  001146  C0E2  FFDD         	movff	?___ftadd+2,postdec2
  3488  00114A  52DD               	movf	postdec2,f,c
  3489  00114C  0100               	movlb	0	; () banked
  3490  00114E  4BEC               	infsnz	Battery_Filter@x& (0+255),f,b
  3491  001150  2BED               	incf	(Battery_Filter@x+1)& (0+255),f,b
  3492  001152  D78C               	goto	L7
  3493  001154                     l3316:
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;Battery.c: 40: }
  3497                           ;Battery.c: 41: for(x = 0; x < 10; x++)
  3498  001154  0E00               	movlw	0
  3499  001156  0100               	movlb	0	; () banked
  3500  001158  6FED               	movwf	(Battery_Filter@x+1)& (0+255),b
  3501  00115A  0E00               	movlw	0
  3502  00115C  0100               	movlb	0	; () banked
  3503  00115E  6FEC               	movwf	Battery_Filter@x& (0+255),b
  3504  001160                     
  3505                           ; BSR set to: 0
  3506  001160  0100               	movlb	0	; () banked
  3507  001162  51ED               	movf	(Battery_Filter@x+1)& (0+255),w,b
  3508  001164  0A80               	xorlw	128
  3509  001166  0F80               	addlw	-128
  3510  001168  0E0A               	movlw	10
  3511  00116A  B4D8               	btfsc	status,2,c
  3512  00116C  5DEC               	subwf	Battery_Filter@x& (0+255),w,b
  3513  00116E  B0D8               	btfsc	status,0,c
  3514  001170  0012               	return	
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;Battery.c: 42: {
  3518                           ;Battery.c: 43: PrevBattery_Volt[x] = Battery_Volt[x];
  3519                           
  3520                           ; BSR set to: 0
  3521                           
  3522                           ; BSR set to: 0
  3523  001172  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3524  001176  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3525  00117A  0E00               	movlw	0
  3526  00117C  6E1A               	movwf	___wmul@multiplicand+1,c
  3527  00117E  0E03               	movlw	3
  3528  001180  6E19               	movwf	___wmul@multiplicand,c
  3529  001182  EC2B  F00E         	call	___wmul	;wreg free
  3530  001186  0100               	movlb	0	; () banked
  3531  001188  0E7E               	movlw	low _Battery_Volt
  3532  00118A  2417               	addwf	?___wmul,w,c
  3533  00118C  6ED9               	movwf	fsr2l,c
  3534  00118E  0100               	movlb	0	; () banked
  3535  001190  0E00               	movlw	high _Battery_Volt
  3536  001192  2018               	addwfc	?___wmul+1,w,c
  3537  001194  6EDA               	movwf	fsr2h,c
  3538  001196  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3539  00119A  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3540  00119E  0E00               	movlw	0
  3541  0011A0  6E1A               	movwf	___wmul@multiplicand+1,c
  3542  0011A2  0E03               	movlw	3
  3543  0011A4  6E19               	movwf	___wmul@multiplicand,c
  3544  0011A6  EC2B  F00E         	call	___wmul	;wreg free
  3545  0011AA  0101               	movlb	1	; () banked
  3546  0011AC  0E1E               	movlw	low _PrevBattery_Volt
  3547  0011AE  2417               	addwf	?___wmul,w,c
  3548  0011B0  6EE1               	movwf	fsr1l,c
  3549  0011B2  0101               	movlb	1	; () banked
  3550  0011B4  0E01               	movlw	high _PrevBattery_Volt
  3551  0011B6  2018               	addwfc	?___wmul+1,w,c
  3552  0011B8  6EE2               	movwf	fsr1h,c
  3553  0011BA  CFDE FFE6          	movff	postinc2,postinc1
  3554  0011BE  CFDE FFE6          	movff	postinc2,postinc1
  3555  0011C2  CFDE FFE5          	movff	postinc2,postdec1
  3556  0011C6  52E5               	movf	postdec1,f,c
  3557                           
  3558                           ; BSR set to: 1
  3559  0011C8  0100               	movlb	0	; () banked
  3560  0011CA  4BEC               	infsnz	Battery_Filter@x& (0+255),f,b
  3561  0011CC  2BED               	incf	(Battery_Filter@x+1)& (0+255),f,b
  3562  0011CE  D7C8               	goto	L8
  3563  0011D0                     __end_of_Battery_Filter:
  3564                           	opt stack 0
  3565                           tblptru	equ	0xFF8
  3566                           tblptrh	equ	0xFF7
  3567                           tblptrl	equ	0xFF6
  3568                           tablat	equ	0xFF5
  3569                           prodl	equ	0xFF3
  3570                           intcon	equ	0xFF2
  3571                           intcon2	equ	0xFF1
  3572                           postinc0	equ	0xFEE
  3573                           wreg	equ	0xFE8
  3574                           postinc1	equ	0xFE6
  3575                           postdec1	equ	0xFE5
  3576                           fsr1h	equ	0xFE2
  3577                           fsr1l	equ	0xFE1
  3578                           postinc2	equ	0xFDE
  3579                           postdec2	equ	0xFDD
  3580                           fsr2h	equ	0xFDA
  3581                           fsr2l	equ	0xFD9
  3582                           status	equ	0xFD8
  3583                           
  3584 ;; *************** function ___wmul *****************
  3585 ;; Defined at:
  3586 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;  multiplier      2   22[COMRAM] unsigned int 
  3589 ;;  multiplicand    2   24[COMRAM] unsigned int 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  product         2   26[COMRAM] unsigned int 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  2   22[COMRAM] unsigned int 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0, prodl, prodh
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3601 ;;      Params:         4       0       0       0       0       0       0
  3602 ;;      Locals:         2       0       0       0       0       0       0
  3603 ;;      Temps:          0       0       0       0       0       0       0
  3604 ;;      Totals:         6       0       0       0       0       0       0
  3605 ;;Total ram usage:        6 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    4
  3608 ;; This function calls:
  3609 ;;		Nothing
  3610 ;; This function is called by:
  3611 ;;		_Battery_Fault
  3612 ;;		_Battery_Filter
  3613 ;;		_Battery_Convert
  3614 ;;		_Temp_Fault
  3615 ;;		_Temp_Filter
  3616 ;;		_Temp_Convert
  3617 ;;		_eval_poly
  3618 ;;		_Battery_Get
  3619 ;;		_Tempeture_Get
  3620 ;;		_Current_Fault
  3621 ;;		_Current_Filter
  3622 ;;		_Current_Convert
  3623 ;;		_Current_Get
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text22
  3628  001C56                     __ptext22:
  3629                           	opt stack 0
  3630  001C56                     ___wmul:
  3631                           	opt stack 25
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;incstack = 0
  3635  001C56  5017               	movf	___wmul@multiplier,w,c
  3636  001C58  0219               	mulwf	___wmul@multiplicand,c
  3637  001C5A  CFF3 F01B          	movff	prodl,___wmul@product
  3638  001C5E  CFF4 F01C          	movff	prodh,___wmul@product+1
  3639  001C62  5017               	movf	___wmul@multiplier,w,c
  3640  001C64  021A               	mulwf	___wmul@multiplicand+1,c
  3641  001C66  50F3               	movf	prodl,w,c
  3642  001C68  261C               	addwf	___wmul@product+1,f,c
  3643  001C6A  5018               	movf	___wmul@multiplier+1,w,c
  3644  001C6C  0219               	mulwf	___wmul@multiplicand,c
  3645  001C6E  50F3               	movf	prodl,w,c
  3646  001C70  261C               	addwf	___wmul@product+1,f,c
  3647  001C72  C01B  F017         	movff	___wmul@product,?___wmul
  3648  001C76  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  3649  001C7A  0012               	return	
  3650  001C7C                     __end_of___wmul:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           intcon	equ	0xFF2
  3659                           intcon2	equ	0xFF1
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           postinc1	equ	0xFE6
  3663                           postdec1	equ	0xFE5
  3664                           fsr1h	equ	0xFE2
  3665                           fsr1l	equ	0xFE1
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function ___ftmul *****************
  3673 ;; Defined at:
  3674 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  f1              3   49[COMRAM] float 
  3677 ;;  f2              3   52[COMRAM] float 
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  3680 ;;  sign            1    5[BANK0 ] unsigned char 
  3681 ;;  cntr            1    4[BANK0 ] unsigned char 
  3682 ;;  exp             1    0[BANK0 ] unsigned char 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  3   49[COMRAM] float 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3692 ;;      Params:         6       0       0       0       0       0       0
  3693 ;;      Locals:         0       6       0       0       0       0       0
  3694 ;;      Temps:          3       0       0       0       0       0       0
  3695 ;;      Totals:         9       6       0       0       0       0       0
  3696 ;;Total ram usage:       15 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    5
  3699 ;; This function calls:
  3700 ;;		___ftpack
  3701 ;; This function is called by:
  3702 ;;		_Battery_Filter
  3703 ;;		_Battery_Convert
  3704 ;;		_Temp_Filter
  3705 ;;		_Temp_Convert
  3706 ;;		_log
  3707 ;;		_eval_poly
  3708 ;;		_Current_Filter
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text23
  3713  001332                     __ptext23:
  3714                           	opt stack 0
  3715  001332                     ___ftmul:
  3716                           	opt stack 22
  3717                           
  3718                           ;incstack = 0
  3719  001332  C034  F038         	movff	___ftmul@f1+2,??___ftmul
  3720  001336  6A39               	clrf	(??___ftmul+1)& (0+255),c
  3721  001338  6A3A               	clrf	(??___ftmul+2)& (0+255),c
  3722  00133A  3433               	rlcf	___ftmul@f1+1,w,c
  3723  00133C  3638               	rlcf	??___ftmul& (0+255),f,c
  3724  00133E  E301               	bnc	u2721
  3725  001340  8039               	bsf	(??___ftmul+1)& (0+255),0,c
  3726  001342                     u2721:
  3727  001342  5038               	movf	??___ftmul,w,c
  3728  001344  0100               	movlb	0	; () banked
  3729  001346  6FDA               	movwf	___ftmul@exp& (0+255),b
  3730  001348  0100               	movlb	0	; () banked
  3731  00134A  67DA               	tstfsz	___ftmul@exp& (0+255),b
  3732  00134C  D007               	goto	l3224
  3733                           
  3734                           ; BSR set to: 0
  3735  00134E  0E00               	movlw	0
  3736  001350  6E32               	movwf	?___ftmul,c
  3737  001352  0E00               	movlw	0
  3738  001354  6E33               	movwf	?___ftmul+1,c
  3739  001356  0E00               	movlw	0
  3740  001358  6E34               	movwf	?___ftmul+2,c
  3741  00135A  0012               	return	
  3742  00135C                     l3224:
  3743                           
  3744                           ; BSR set to: 0
  3745  00135C  C037  F038         	movff	___ftmul@f2+2,??___ftmul
  3746  001360  6A39               	clrf	(??___ftmul+1)& (0+255),c
  3747  001362  6A3A               	clrf	(??___ftmul+2)& (0+255),c
  3748  001364  3436               	rlcf	___ftmul@f2+1,w,c
  3749  001366  3638               	rlcf	??___ftmul& (0+255),f,c
  3750  001368  E301               	bnc	u2741
  3751  00136A  8039               	bsf	(??___ftmul+1)& (0+255),0,c
  3752  00136C                     u2741:
  3753  00136C  5038               	movf	??___ftmul,w,c
  3754  00136E  0100               	movlb	0	; () banked
  3755  001370  6FDF               	movwf	___ftmul@sign& (0+255),b
  3756  001372  0100               	movlb	0	; () banked
  3757  001374  67DF               	tstfsz	___ftmul@sign& (0+255),b
  3758  001376  D007               	goto	l3230
  3759                           
  3760                           ; BSR set to: 0
  3761  001378  0E00               	movlw	0
  3762  00137A  6E32               	movwf	?___ftmul,c
  3763  00137C  0E00               	movlw	0
  3764  00137E  6E33               	movwf	?___ftmul+1,c
  3765  001380  0E00               	movlw	0
  3766  001382  6E34               	movwf	?___ftmul+2,c
  3767  001384  0012               	return	
  3768  001386                     l3230:
  3769                           
  3770                           ; BSR set to: 0
  3771  001386  0100               	movlb	0	; () banked
  3772  001388  51DF               	movf	___ftmul@sign& (0+255),w,b
  3773  00138A  0F7B               	addlw	123
  3774  00138C  0100               	movlb	0	; () banked
  3775  00138E  27DA               	addwf	___ftmul@exp& (0+255),f,b
  3776                           
  3777                           ; BSR set to: 0
  3778  001390  C034  F0DF         	movff	___ftmul@f1+2,___ftmul@sign
  3779  001394  5037               	movf	___ftmul@f2+2,w,c
  3780  001396  0100               	movlb	0	; () banked
  3781  001398  1BDF               	xorwf	___ftmul@sign& (0+255),f,b
  3782  00139A  0E80               	movlw	128
  3783  00139C  0100               	movlb	0	; () banked
  3784  00139E  17DF               	andwf	___ftmul@sign& (0+255),f,b
  3785                           
  3786                           ; BSR set to: 0
  3787  0013A0  8E33               	bsf	___ftmul@f1+1,7,c
  3788                           
  3789                           ; BSR set to: 0
  3790  0013A2  8E36               	bsf	___ftmul@f2+1,7,c
  3791                           
  3792                           ; BSR set to: 0
  3793  0013A4  0EFF               	movlw	255
  3794  0013A6  1635               	andwf	___ftmul@f2,f,c
  3795  0013A8  0EFF               	movlw	255
  3796  0013AA  1636               	andwf	___ftmul@f2+1,f,c
  3797  0013AC  0E00               	movlw	0
  3798  0013AE  1637               	andwf	___ftmul@f2+2,f,c
  3799                           
  3800                           ; BSR set to: 0
  3801  0013B0  0E00               	movlw	0
  3802  0013B2  0100               	movlb	0	; () banked
  3803  0013B4  6FDB               	movwf	___ftmul@f3_as_product& (0+255),b
  3804  0013B6  0E00               	movlw	0
  3805  0013B8  0100               	movlb	0	; () banked
  3806  0013BA  6FDC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3807  0013BC  0E00               	movlw	0
  3808  0013BE  0100               	movlb	0	; () banked
  3809  0013C0  6FDD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3810                           
  3811                           ; BSR set to: 0
  3812  0013C2  0E07               	movlw	7
  3813  0013C4  0100               	movlb	0	; () banked
  3814  0013C6  6FDE               	movwf	___ftmul@cntr& (0+255),b
  3815  0013C8                     l3244:
  3816                           
  3817                           ; BSR set to: 0
  3818  0013C8  A032               	btfss	___ftmul@f1,0,c
  3819  0013CA  D009               	goto	l3248
  3820                           
  3821                           ; BSR set to: 0
  3822  0013CC  5035               	movf	___ftmul@f2,w,c
  3823  0013CE  0100               	movlb	0	; () banked
  3824  0013D0  27DB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3825  0013D2  5036               	movf	___ftmul@f2+1,w,c
  3826  0013D4  0100               	movlb	0	; () banked
  3827  0013D6  23DC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3828  0013D8  5037               	movf	___ftmul@f2+2,w,c
  3829  0013DA  0100               	movlb	0	; () banked
  3830  0013DC  23DD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3831  0013DE                     l3248:
  3832                           
  3833                           ; BSR set to: 0
  3834  0013DE  90D8               	bcf	status,0,c
  3835  0013E0  3234               	rrcf	___ftmul@f1+2,f,c
  3836  0013E2  3233               	rrcf	___ftmul@f1+1,f,c
  3837  0013E4  3232               	rrcf	___ftmul@f1,f,c
  3838  0013E6  90D8               	bcf	status,0,c
  3839  0013E8  3635               	rlcf	___ftmul@f2,f,c
  3840  0013EA  3636               	rlcf	___ftmul@f2+1,f,c
  3841  0013EC  3637               	rlcf	___ftmul@f2+2,f,c
  3842                           
  3843                           ; BSR set to: 0
  3844  0013EE  0100               	movlb	0	; () banked
  3845  0013F0  2FDE               	decfsz	___ftmul@cntr& (0+255),f,b
  3846  0013F2  D7EA               	goto	l3244
  3847                           
  3848                           ; BSR set to: 0
  3849                           
  3850                           ; BSR set to: 0
  3851  0013F4  0E09               	movlw	9
  3852  0013F6  0100               	movlb	0	; () banked
  3853  0013F8  6FDE               	movwf	___ftmul@cntr& (0+255),b
  3854  0013FA                     l3254:
  3855                           
  3856                           ; BSR set to: 0
  3857  0013FA  A032               	btfss	___ftmul@f1,0,c
  3858  0013FC  D009               	goto	l3258
  3859                           
  3860                           ; BSR set to: 0
  3861  0013FE  5035               	movf	___ftmul@f2,w,c
  3862  001400  0100               	movlb	0	; () banked
  3863  001402  27DB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3864  001404  5036               	movf	___ftmul@f2+1,w,c
  3865  001406  0100               	movlb	0	; () banked
  3866  001408  23DC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3867  00140A  5037               	movf	___ftmul@f2+2,w,c
  3868  00140C  0100               	movlb	0	; () banked
  3869  00140E  23DD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3870  001410                     l3258:
  3871                           
  3872                           ; BSR set to: 0
  3873  001410  90D8               	bcf	status,0,c
  3874  001412  3234               	rrcf	___ftmul@f1+2,f,c
  3875  001414  3233               	rrcf	___ftmul@f1+1,f,c
  3876  001416  3232               	rrcf	___ftmul@f1,f,c
  3877  001418  0100               	movlb	0	; () banked
  3878  00141A  90D8               	bcf	status,0,c
  3879  00141C  0100               	movlb	0	; () banked
  3880  00141E  33DD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3881  001420  0100               	movlb	0	; () banked
  3882  001422  33DC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3883  001424  0100               	movlb	0	; () banked
  3884  001426  33DB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3885                           
  3886                           ; BSR set to: 0
  3887  001428  0100               	movlb	0	; () banked
  3888  00142A  2FDE               	decfsz	___ftmul@cntr& (0+255),f,b
  3889  00142C  D7E6               	goto	l3254
  3890                           
  3891                           ; BSR set to: 0
  3892                           
  3893                           ; BSR set to: 0
  3894  00142E  C0DB  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  3895  001432  C0DC  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3896  001436  C0DD  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3897  00143A  C0DA  F01A         	movff	___ftmul@exp,___ftpack@exp
  3898  00143E  C0DF  F01B         	movff	___ftmul@sign,___ftpack@sign
  3899  001442  ECDF  F00B         	call	___ftpack	;wreg free
  3900  001446  C017  F032         	movff	?___ftpack,?___ftmul
  3901  00144A  C018  F033         	movff	?___ftpack+1,?___ftmul+1
  3902  00144E  C019  F034         	movff	?___ftpack+2,?___ftmul+2
  3903  001452  0012               	return	
  3904  001454                     __end_of___ftmul:
  3905                           	opt stack 0
  3906                           tblptru	equ	0xFF8
  3907                           tblptrh	equ	0xFF7
  3908                           tblptrl	equ	0xFF6
  3909                           tablat	equ	0xFF5
  3910                           prodh	equ	0xFF4
  3911                           prodl	equ	0xFF3
  3912                           intcon	equ	0xFF2
  3913                           intcon2	equ	0xFF1
  3914                           postinc0	equ	0xFEE
  3915                           wreg	equ	0xFE8
  3916                           postinc1	equ	0xFE6
  3917                           postdec1	equ	0xFE5
  3918                           fsr1h	equ	0xFE2
  3919                           fsr1l	equ	0xFE1
  3920                           postinc2	equ	0xFDE
  3921                           postdec2	equ	0xFDD
  3922                           fsr2h	equ	0xFDA
  3923                           fsr2l	equ	0xFD9
  3924                           status	equ	0xFD8
  3925                           
  3926 ;; *************** function ___ftadd *****************
  3927 ;; Defined at:
  3928 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  f1              3    6[BANK0 ] float 
  3931 ;;  f2              3    9[BANK0 ] float 
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  exp1            1   17[BANK0 ] unsigned char 
  3934 ;;  exp2            1   16[BANK0 ] unsigned char 
  3935 ;;  sign            1   15[BANK0 ] unsigned char 
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  3    6[BANK0 ] float 
  3938 ;; Registers used:
  3939 ;;		wreg, status,2, status,0, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3945 ;;      Params:         0       6       0       0       0       0       0
  3946 ;;      Locals:         0       3       0       0       0       0       0
  3947 ;;      Temps:          0       3       0       0       0       0       0
  3948 ;;      Totals:         0      12       0       0       0       0       0
  3949 ;;Total ram usage:       12 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    5
  3952 ;; This function calls:
  3953 ;;		___ftpack
  3954 ;; This function is called by:
  3955 ;;		_Battery_Filter
  3956 ;;		_Battery_Convert
  3957 ;;		_Temp_Filter
  3958 ;;		_Temp_Convert
  3959 ;;		___ftsub
  3960 ;;		_log
  3961 ;;		_eval_poly
  3962 ;;		_Current_Fault
  3963 ;;		_Current_Filter
  3964 ;;		_Current_Convert
  3965 ;;		_Current_Get
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text24
  3970  000A32                     __ptext24:
  3971                           	opt stack 0
  3972  000A32                     ___ftadd:
  3973                           	opt stack 22
  3974                           
  3975                           ;incstack = 0
  3976  000A32  0100               	movlb	0	; () banked
  3977  000A34  C0E2  F0E6         	movff	___ftadd@f1+2,??___ftadd
  3978  000A38  0100               	movlb	0	; () banked
  3979  000A3A  6BE7               	clrf	(??___ftadd+1)& (0+255),b
  3980  000A3C  6BE8               	clrf	(??___ftadd+2)& (0+255),b
  3981  000A3E  0100               	movlb	0	; () banked
  3982  000A40  35E1               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  3983  000A42  0100               	movlb	0	; () banked
  3984  000A44  37E6               	rlcf	??___ftadd& (0+255),f,b
  3985  000A46  E301               	bnc	u2511
  3986  000A48  81E7               	bsf	(??___ftadd+1)& (0+255),0,b
  3987  000A4A                     u2511:
  3988  000A4A  0100               	movlb	0	; () banked
  3989  000A4C  51E6               	movf	??___ftadd& (0+255),w,b
  3990  000A4E  0100               	movlb	0	; () banked
  3991  000A50  6FEB               	movwf	___ftadd@exp1& (0+255),b
  3992  000A52  0100               	movlb	0	; () banked
  3993  000A54  C0E5  F0E6         	movff	___ftadd@f2+2,??___ftadd
  3994  000A58  0100               	movlb	0	; () banked
  3995  000A5A  6BE7               	clrf	(??___ftadd+1)& (0+255),b
  3996  000A5C  6BE8               	clrf	(??___ftadd+2)& (0+255),b
  3997  000A5E  0100               	movlb	0	; () banked
  3998  000A60  35E4               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  3999  000A62  0100               	movlb	0	; () banked
  4000  000A64  37E6               	rlcf	??___ftadd& (0+255),f,b
  4001  000A66  E301               	bnc	u2521
  4002  000A68  81E7               	bsf	(??___ftadd+1)& (0+255),0,b
  4003  000A6A                     u2521:
  4004  000A6A  0100               	movlb	0	; () banked
  4005  000A6C  51E6               	movf	??___ftadd& (0+255),w,b
  4006  000A6E  0100               	movlb	0	; () banked
  4007  000A70  6FEA               	movwf	___ftadd@exp2& (0+255),b
  4008                           
  4009                           ; BSR set to: 0
  4010  000A72  0100               	movlb	0	; () banked
  4011  000A74  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4012  000A76  B4D8               	btfsc	status,2,c
  4013  000A78  D012               	goto	l916
  4014                           
  4015                           ; BSR set to: 0
  4016  000A7A  0100               	movlb	0	; () banked
  4017  000A7C  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4018  000A7E  0100               	movlb	0	; () banked
  4019  000A80  5DEB               	subwf	___ftadd@exp1& (0+255),w,b
  4020  000A82  B0D8               	btfsc	status,0,c
  4021  000A84  D013               	goto	l3156
  4022                           
  4023                           ; BSR set to: 0
  4024  000A86  0100               	movlb	0	; () banked
  4025  000A88  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4026  000A8A  0800               	sublw	0
  4027  000A8C  0100               	movlb	0	; () banked
  4028  000A8E  25EA               	addwf	___ftadd@exp2& (0+255),w,b
  4029  000A90  0100               	movlb	0	; () banked
  4030  000A92  6FE6               	movwf	??___ftadd& (0+255),b
  4031  000A94  0E19               	movlw	25
  4032  000A96  0100               	movlb	0	; () banked
  4033  000A98  5DE6               	subwf	??___ftadd& (0+255),w,b
  4034  000A9A  A0D8               	btfss	status,0,c
  4035  000A9C  D007               	goto	l3156
  4036  000A9E                     l916:
  4037                           
  4038                           ; BSR set to: 0
  4039  000A9E  C0E3  F0E0         	movff	___ftadd@f2,?___ftadd
  4040  000AA2  C0E4  F0E1         	movff	___ftadd@f2+1,?___ftadd+1
  4041  000AA6  C0E5  F0E2         	movff	___ftadd@f2+2,?___ftadd+2
  4042  000AAA  0012               	return	
  4043  000AAC                     l3156:
  4044                           
  4045                           ; BSR set to: 0
  4046  000AAC  0100               	movlb	0	; () banked
  4047  000AAE  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4048  000AB0  B4D8               	btfsc	status,2,c
  4049  000AB2  D012               	goto	l920
  4050                           
  4051                           ; BSR set to: 0
  4052  000AB4  0100               	movlb	0	; () banked
  4053  000AB6  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4054  000AB8  0100               	movlb	0	; () banked
  4055  000ABA  5DEA               	subwf	___ftadd@exp2& (0+255),w,b
  4056  000ABC  B0D8               	btfsc	status,0,c
  4057  000ABE  D013               	goto	l3162
  4058                           
  4059                           ; BSR set to: 0
  4060  000AC0  0100               	movlb	0	; () banked
  4061  000AC2  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4062  000AC4  0800               	sublw	0
  4063  000AC6  0100               	movlb	0	; () banked
  4064  000AC8  25EB               	addwf	___ftadd@exp1& (0+255),w,b
  4065  000ACA  0100               	movlb	0	; () banked
  4066  000ACC  6FE6               	movwf	??___ftadd& (0+255),b
  4067  000ACE  0E19               	movlw	25
  4068  000AD0  0100               	movlb	0	; () banked
  4069  000AD2  5DE6               	subwf	??___ftadd& (0+255),w,b
  4070  000AD4  A0D8               	btfss	status,0,c
  4071  000AD6  D007               	goto	l3162
  4072  000AD8                     l920:
  4073                           
  4074                           ; BSR set to: 0
  4075  000AD8  C0E0  F0E0         	movff	___ftadd@f1,?___ftadd
  4076  000ADC  C0E1  F0E1         	movff	___ftadd@f1+1,?___ftadd+1
  4077  000AE0  C0E2  F0E2         	movff	___ftadd@f1+2,?___ftadd+2
  4078  000AE4  0012               	return	
  4079  000AE6                     l3162:
  4080                           
  4081                           ; BSR set to: 0
  4082  000AE6  0E06               	movlw	6
  4083  000AE8  0100               	movlb	0	; () banked
  4084  000AEA  6FE9               	movwf	___ftadd@sign& (0+255),b
  4085                           
  4086                           ; BSR set to: 0
  4087  000AEC  0100               	movlb	0	; () banked
  4088  000AEE  AFE2               	btfss	(___ftadd@f1+2)& (0+255),7,b
  4089  000AF0  D002               	goto	l3168
  4090                           
  4091                           ; BSR set to: 0
  4092  000AF2  0100               	movlb	0	; () banked
  4093  000AF4  8FE9               	bsf	___ftadd@sign& (0+255),7,b
  4094  000AF6                     l3168:
  4095                           
  4096                           ; BSR set to: 0
  4097  000AF6  0100               	movlb	0	; () banked
  4098  000AF8  AFE5               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4099  000AFA  D002               	goto	l922
  4100                           
  4101                           ; BSR set to: 0
  4102  000AFC  0100               	movlb	0	; () banked
  4103  000AFE  8DE9               	bsf	___ftadd@sign& (0+255),6,b
  4104  000B00                     l922:
  4105                           
  4106                           ; BSR set to: 0
  4107  000B00  0100               	movlb	0	; () banked
  4108  000B02  8FE1               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4109                           
  4110                           ; BSR set to: 0
  4111  000B04  0EFF               	movlw	255
  4112  000B06  0100               	movlb	0	; () banked
  4113  000B08  17E0               	andwf	___ftadd@f1& (0+255),f,b
  4114  000B0A  0EFF               	movlw	255
  4115  000B0C  0100               	movlb	0	; () banked
  4116  000B0E  17E1               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4117  000B10  0E00               	movlw	0
  4118  000B12  0100               	movlb	0	; () banked
  4119  000B14  17E2               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4120  000B16  0100               	movlb	0	; () banked
  4121  000B18  8FE4               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4122                           
  4123                           ; BSR set to: 0
  4124  000B1A  0EFF               	movlw	255
  4125  000B1C  0100               	movlb	0	; () banked
  4126  000B1E  17E3               	andwf	___ftadd@f2& (0+255),f,b
  4127  000B20  0EFF               	movlw	255
  4128  000B22  0100               	movlb	0	; () banked
  4129  000B24  17E4               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4130  000B26  0E00               	movlw	0
  4131  000B28  0100               	movlb	0	; () banked
  4132  000B2A  17E5               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4133                           
  4134                           ; BSR set to: 0
  4135  000B2C  0100               	movlb	0	; () banked
  4136  000B2E  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4137  000B30  0100               	movlb	0	; () banked
  4138  000B32  5DEB               	subwf	___ftadd@exp1& (0+255),w,b
  4139  000B34  B0D8               	btfsc	status,0,c
  4140  000B36  D02A               	goto	l3188
  4141  000B38                     l3178:
  4142                           
  4143                           ; BSR set to: 0
  4144  000B38  0100               	movlb	0	; () banked
  4145  000B3A  90D8               	bcf	status,0,c
  4146  000B3C  0100               	movlb	0	; () banked
  4147  000B3E  37E3               	rlcf	___ftadd@f2& (0+255),f,b
  4148  000B40  0100               	movlb	0	; () banked
  4149  000B42  37E4               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4150  000B44  0100               	movlb	0	; () banked
  4151  000B46  37E5               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4152  000B48  0100               	movlb	0	; () banked
  4153  000B4A  07EA               	decf	___ftadd@exp2& (0+255),f,b
  4154                           
  4155                           ; BSR set to: 0
  4156  000B4C  0100               	movlb	0	; () banked
  4157  000B4E  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4158  000B50  0100               	movlb	0	; () banked
  4159  000B52  19EB               	xorwf	___ftadd@exp1& (0+255),w,b
  4160  000B54  B4D8               	btfsc	status,2,c
  4161  000B56  D014               	goto	l3186
  4162                           
  4163                           ; BSR set to: 0
  4164  000B58  0100               	movlb	0	; () banked
  4165  000B5A  07E9               	decf	___ftadd@sign& (0+255),f,b
  4166  000B5C  C0E9  F0E6         	movff	___ftadd@sign,??___ftadd
  4167  000B60  0E07               	movlw	7
  4168  000B62  0100               	movlb	0	; () banked
  4169  000B64  17E6               	andwf	??___ftadd& (0+255),f,b
  4170  000B66  B4D8               	btfsc	status,2,c
  4171  000B68  D00B               	goto	l3186
  4172  000B6A  D7E6               	goto	l3178
  4173  000B6C                     l3184:
  4174                           
  4175                           ; BSR set to: 0
  4176  000B6C  0100               	movlb	0	; () banked
  4177  000B6E  90D8               	bcf	status,0,c
  4178  000B70  0100               	movlb	0	; () banked
  4179  000B72  33E2               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4180  000B74  0100               	movlb	0	; () banked
  4181  000B76  33E1               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4182  000B78  0100               	movlb	0	; () banked
  4183  000B7A  33E0               	rrcf	___ftadd@f1& (0+255),f,b
  4184  000B7C  0100               	movlb	0	; () banked
  4185  000B7E  2BEB               	incf	___ftadd@exp1& (0+255),f,b
  4186  000B80                     l3186:
  4187                           
  4188                           ; BSR set to: 0
  4189  000B80  0100               	movlb	0	; () banked
  4190  000B82  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4191  000B84  0100               	movlb	0	; () banked
  4192  000B86  63EB               	cpfseq	___ftadd@exp1& (0+255),b
  4193  000B88  D7F1               	goto	l3184
  4194  000B8A  D02F               	goto	l931
  4195  000B8C                     l3188:
  4196                           
  4197                           ; BSR set to: 0
  4198  000B8C  0100               	movlb	0	; () banked
  4199  000B8E  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4200  000B90  0100               	movlb	0	; () banked
  4201  000B92  5DEA               	subwf	___ftadd@exp2& (0+255),w,b
  4202  000B94  B0D8               	btfsc	status,0,c
  4203  000B96  D029               	goto	l931
  4204  000B98                     l3190:
  4205                           
  4206                           ; BSR set to: 0
  4207  000B98  0100               	movlb	0	; () banked
  4208  000B9A  90D8               	bcf	status,0,c
  4209  000B9C  0100               	movlb	0	; () banked
  4210  000B9E  37E0               	rlcf	___ftadd@f1& (0+255),f,b
  4211  000BA0  0100               	movlb	0	; () banked
  4212  000BA2  37E1               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4213  000BA4  0100               	movlb	0	; () banked
  4214  000BA6  37E2               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4215  000BA8  0100               	movlb	0	; () banked
  4216  000BAA  07EB               	decf	___ftadd@exp1& (0+255),f,b
  4217                           
  4218                           ; BSR set to: 0
  4219  000BAC  0100               	movlb	0	; () banked
  4220  000BAE  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4221  000BB0  0100               	movlb	0	; () banked
  4222  000BB2  19EB               	xorwf	___ftadd@exp1& (0+255),w,b
  4223  000BB4  B4D8               	btfsc	status,2,c
  4224  000BB6  D014               	goto	l3198
  4225                           
  4226                           ; BSR set to: 0
  4227  000BB8  0100               	movlb	0	; () banked
  4228  000BBA  07E9               	decf	___ftadd@sign& (0+255),f,b
  4229  000BBC  C0E9  F0E6         	movff	___ftadd@sign,??___ftadd
  4230  000BC0  0E07               	movlw	7
  4231  000BC2  0100               	movlb	0	; () banked
  4232  000BC4  17E6               	andwf	??___ftadd& (0+255),f,b
  4233  000BC6  B4D8               	btfsc	status,2,c
  4234  000BC8  D00B               	goto	l3198
  4235  000BCA  D7E6               	goto	l3190
  4236  000BCC                     l3196:
  4237                           
  4238                           ; BSR set to: 0
  4239  000BCC  0100               	movlb	0	; () banked
  4240  000BCE  90D8               	bcf	status,0,c
  4241  000BD0  0100               	movlb	0	; () banked
  4242  000BD2  33E5               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4243  000BD4  0100               	movlb	0	; () banked
  4244  000BD6  33E4               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4245  000BD8  0100               	movlb	0	; () banked
  4246  000BDA  33E3               	rrcf	___ftadd@f2& (0+255),f,b
  4247  000BDC  0100               	movlb	0	; () banked
  4248  000BDE  2BEA               	incf	___ftadd@exp2& (0+255),f,b
  4249  000BE0                     l3198:
  4250                           
  4251                           ; BSR set to: 0
  4252  000BE0  0100               	movlb	0	; () banked
  4253  000BE2  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4254  000BE4  0100               	movlb	0	; () banked
  4255  000BE6  63EB               	cpfseq	___ftadd@exp1& (0+255),b
  4256  000BE8  D7F1               	goto	l3196
  4257  000BEA                     l931:
  4258                           
  4259                           ; BSR set to: 0
  4260  000BEA  0100               	movlb	0	; () banked
  4261  000BEC  AFE9               	btfss	___ftadd@sign& (0+255),7,b
  4262  000BEE  D012               	goto	l940
  4263                           
  4264                           ; BSR set to: 0
  4265  000BF0  0EFF               	movlw	255
  4266  000BF2  0100               	movlb	0	; () banked
  4267  000BF4  1BE0               	xorwf	___ftadd@f1& (0+255),f,b
  4268  000BF6  0EFF               	movlw	255
  4269  000BF8  0100               	movlb	0	; () banked
  4270  000BFA  1BE1               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4271  000BFC  0EFF               	movlw	255
  4272  000BFE  0100               	movlb	0	; () banked
  4273  000C00  1BE2               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4274  000C02  0E01               	movlw	1
  4275  000C04  0100               	movlb	0	; () banked
  4276  000C06  27E0               	addwf	___ftadd@f1& (0+255),f,b
  4277  000C08  0E00               	movlw	0
  4278  000C0A  0100               	movlb	0	; () banked
  4279  000C0C  23E1               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4280  000C0E  0E00               	movlw	0
  4281  000C10  0100               	movlb	0	; () banked
  4282  000C12  23E2               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4283  000C14                     l940:
  4284                           
  4285                           ; BSR set to: 0
  4286  000C14  0100               	movlb	0	; () banked
  4287  000C16  ADE9               	btfss	___ftadd@sign& (0+255),6,b
  4288  000C18  D012               	goto	l3204
  4289                           
  4290                           ; BSR set to: 0
  4291  000C1A  0EFF               	movlw	255
  4292  000C1C  0100               	movlb	0	; () banked
  4293  000C1E  1BE3               	xorwf	___ftadd@f2& (0+255),f,b
  4294  000C20  0EFF               	movlw	255
  4295  000C22  0100               	movlb	0	; () banked
  4296  000C24  1BE4               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4297  000C26  0EFF               	movlw	255
  4298  000C28  0100               	movlb	0	; () banked
  4299  000C2A  1BE5               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4300  000C2C  0E01               	movlw	1
  4301  000C2E  0100               	movlb	0	; () banked
  4302  000C30  27E3               	addwf	___ftadd@f2& (0+255),f,b
  4303  000C32  0E00               	movlw	0
  4304  000C34  0100               	movlb	0	; () banked
  4305  000C36  23E4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4306  000C38  0E00               	movlw	0
  4307  000C3A  0100               	movlb	0	; () banked
  4308  000C3C  23E5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4309  000C3E                     l3204:
  4310                           
  4311                           ; BSR set to: 0
  4312  000C3E  0E00               	movlw	0
  4313  000C40  0100               	movlb	0	; () banked
  4314  000C42  6FE9               	movwf	___ftadd@sign& (0+255),b
  4315                           
  4316                           ; BSR set to: 0
  4317  000C44  0100               	movlb	0	; () banked
  4318  000C46  51E0               	movf	___ftadd@f1& (0+255),w,b
  4319  000C48  0100               	movlb	0	; () banked
  4320  000C4A  27E3               	addwf	___ftadd@f2& (0+255),f,b
  4321  000C4C  0100               	movlb	0	; () banked
  4322  000C4E  51E1               	movf	(___ftadd@f1+1)& (0+255),w,b
  4323  000C50  0100               	movlb	0	; () banked
  4324  000C52  23E4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4325  000C54  0100               	movlb	0	; () banked
  4326  000C56  51E2               	movf	(___ftadd@f1+2)& (0+255),w,b
  4327  000C58  0100               	movlb	0	; () banked
  4328  000C5A  23E5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4329                           
  4330                           ; BSR set to: 0
  4331  000C5C  0100               	movlb	0	; () banked
  4332  000C5E  AFE5               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4333  000C60  D015               	goto	l3214
  4334                           
  4335                           ; BSR set to: 0
  4336  000C62  0EFF               	movlw	255
  4337  000C64  0100               	movlb	0	; () banked
  4338  000C66  1BE3               	xorwf	___ftadd@f2& (0+255),f,b
  4339  000C68  0EFF               	movlw	255
  4340  000C6A  0100               	movlb	0	; () banked
  4341  000C6C  1BE4               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4342  000C6E  0EFF               	movlw	255
  4343  000C70  0100               	movlb	0	; () banked
  4344  000C72  1BE5               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4345  000C74  0E01               	movlw	1
  4346  000C76  0100               	movlb	0	; () banked
  4347  000C78  27E3               	addwf	___ftadd@f2& (0+255),f,b
  4348  000C7A  0E00               	movlw	0
  4349  000C7C  0100               	movlb	0	; () banked
  4350  000C7E  23E4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4351  000C80  0E00               	movlw	0
  4352  000C82  0100               	movlb	0	; () banked
  4353  000C84  23E5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4354                           
  4355                           ; BSR set to: 0
  4356  000C86  0E01               	movlw	1
  4357  000C88  0100               	movlb	0	; () banked
  4358  000C8A  6FE9               	movwf	___ftadd@sign& (0+255),b
  4359  000C8C                     l3214:
  4360                           
  4361                           ; BSR set to: 0
  4362  000C8C  C0E3  F017         	movff	___ftadd@f2,___ftpack@arg
  4363  000C90  C0E4  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  4364  000C94  C0E5  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  4365  000C98  C0EB  F01A         	movff	___ftadd@exp1,___ftpack@exp
  4366  000C9C  C0E9  F01B         	movff	___ftadd@sign,___ftpack@sign
  4367  000CA0  ECDF  F00B         	call	___ftpack	;wreg free
  4368  000CA4  C017  F0E0         	movff	?___ftpack,?___ftadd
  4369  000CA8  C018  F0E1         	movff	?___ftpack+1,?___ftadd+1
  4370  000CAC  C019  F0E2         	movff	?___ftpack+2,?___ftadd+2
  4371  000CB0  0012               	return	
  4372  000CB2                     __end_of___ftadd:
  4373                           	opt stack 0
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           intcon2	equ	0xFF1
  4382                           postinc0	equ	0xFEE
  4383                           wreg	equ	0xFE8
  4384                           postinc1	equ	0xFE6
  4385                           postdec1	equ	0xFE5
  4386                           fsr1h	equ	0xFE2
  4387                           fsr1l	equ	0xFE1
  4388                           postinc2	equ	0xFDE
  4389                           postdec2	equ	0xFDD
  4390                           fsr2h	equ	0xFDA
  4391                           fsr2l	equ	0xFD9
  4392                           status	equ	0xFD8
  4393                           
  4394 ;; *************** function ___ftpack *****************
  4395 ;; Defined at:
  4396 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  arg             3   22[COMRAM] unsigned um
  4399 ;;  exp             1   25[COMRAM] unsigned char 
  4400 ;;  sign            1   26[COMRAM] unsigned char 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  3   22[COMRAM] float 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4412 ;;      Params:         5       0       0       0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0
  4414 ;;      Temps:          3       0       0       0       0       0       0
  4415 ;;      Totals:         8       0       0       0       0       0       0
  4416 ;;Total ram usage:        8 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    4
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		___awtoft
  4423 ;;		___ftadd
  4424 ;;		___ftdiv
  4425 ;;		___ftmul
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           	psect	text25
  4430  0017BE                     __ptext25:
  4431                           	opt stack 0
  4432  0017BE                     ___ftpack:
  4433                           	opt stack 22
  4434                           
  4435                           ;incstack = 0
  4436  0017BE  501A               	movf	___ftpack@exp,w,c
  4437  0017C0  B4D8               	btfsc	status,2,c
  4438  0017C2  D005               	goto	l3112
  4439  0017C4  5017               	movf	___ftpack@arg,w,c
  4440  0017C6  1018               	iorwf	___ftpack@arg+1,w,c
  4441  0017C8  1019               	iorwf	___ftpack@arg+2,w,c
  4442  0017CA  A4D8               	btfss	status,2,c
  4443  0017CC  D00C               	goto	l3118
  4444  0017CE                     l3112:
  4445  0017CE  0E00               	movlw	0
  4446  0017D0  6E17               	movwf	?___ftpack,c
  4447  0017D2  0E00               	movlw	0
  4448  0017D4  6E18               	movwf	?___ftpack+1,c
  4449  0017D6  0E00               	movlw	0
  4450  0017D8  6E19               	movwf	?___ftpack+2,c
  4451  0017DA  0012               	return	
  4452  0017DC                     l3116:
  4453  0017DC  2A1A               	incf	___ftpack@exp,f,c
  4454  0017DE  90D8               	bcf	status,0,c
  4455  0017E0  3219               	rrcf	___ftpack@arg+2,f,c
  4456  0017E2  3218               	rrcf	___ftpack@arg+1,f,c
  4457  0017E4  3217               	rrcf	___ftpack@arg,f,c
  4458  0017E6                     l3118:
  4459  0017E6  0E00               	movlw	0
  4460  0017E8  1417               	andwf	___ftpack@arg,w,c
  4461  0017EA  6E1C               	movwf	??___ftpack& (0+255),c
  4462  0017EC  0E00               	movlw	0
  4463  0017EE  1418               	andwf	___ftpack@arg+1,w,c
  4464  0017F0  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  4465  0017F2  0EFE               	movlw	254
  4466  0017F4  1419               	andwf	___ftpack@arg+2,w,c
  4467  0017F6  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  4468  0017F8  501C               	movf	??___ftpack,w,c
  4469  0017FA  101D               	iorwf	??___ftpack+1,w,c
  4470  0017FC  101E               	iorwf	??___ftpack+2,w,c
  4471  0017FE  B4D8               	btfsc	status,2,c
  4472  001800  D00C               	goto	l3124
  4473  001802  D7EC               	goto	l3116
  4474  001804                     l3120:
  4475  001804  2A1A               	incf	___ftpack@exp,f,c
  4476  001806  0E01               	movlw	1
  4477  001808  2617               	addwf	___ftpack@arg,f,c
  4478  00180A  0E00               	movlw	0
  4479  00180C  2218               	addwfc	___ftpack@arg+1,f,c
  4480  00180E  0E00               	movlw	0
  4481  001810  2219               	addwfc	___ftpack@arg+2,f,c
  4482  001812  90D8               	bcf	status,0,c
  4483  001814  3219               	rrcf	___ftpack@arg+2,f,c
  4484  001816  3218               	rrcf	___ftpack@arg+1,f,c
  4485  001818  3217               	rrcf	___ftpack@arg,f,c
  4486  00181A                     l3124:
  4487  00181A  0E00               	movlw	0
  4488  00181C  1417               	andwf	___ftpack@arg,w,c
  4489  00181E  6E1C               	movwf	??___ftpack& (0+255),c
  4490  001820  0E00               	movlw	0
  4491  001822  1418               	andwf	___ftpack@arg+1,w,c
  4492  001824  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  4493  001826  0EFF               	movlw	255
  4494  001828  1419               	andwf	___ftpack@arg+2,w,c
  4495  00182A  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  4496  00182C  501C               	movf	??___ftpack,w,c
  4497  00182E  101D               	iorwf	??___ftpack+1,w,c
  4498  001830  101E               	iorwf	??___ftpack+2,w,c
  4499  001832  B4D8               	btfsc	status,2,c
  4500  001834  D006               	goto	l3128
  4501  001836  D7E6               	goto	l3120
  4502  001838                     l3126:
  4503  001838  061A               	decf	___ftpack@exp,f,c
  4504  00183A  90D8               	bcf	status,0,c
  4505  00183C  3617               	rlcf	___ftpack@arg,f,c
  4506  00183E  3618               	rlcf	___ftpack@arg+1,f,c
  4507  001840  3619               	rlcf	___ftpack@arg+2,f,c
  4508  001842                     l3128:
  4509  001842  AE18               	btfss	___ftpack@arg+1,7,c
  4510  001844  D7F9               	goto	l3126
  4511  001846  A01A               	btfss	___ftpack@exp,0,c
  4512  001848  9E18               	bcf	___ftpack@arg+1,7,c
  4513  00184A  90D8               	bcf	status,0,c
  4514  00184C  321A               	rrcf	___ftpack@exp,f,c
  4515  00184E  501A               	movf	___ftpack@exp,w,c
  4516  001850  1219               	iorwf	___ftpack@arg+2,f,c
  4517  001852  501B               	movf	___ftpack@sign,w,c
  4518  001854  A4D8               	btfss	status,2,c
  4519  001856  8E19               	bsf	___ftpack@arg+2,7,c
  4520  001858  C017  F017         	movff	___ftpack@arg,?___ftpack
  4521  00185C  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  4522  001860  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  4523  001864  0012               	return	
  4524  001866                     __end_of___ftpack:
  4525                           	opt stack 0
  4526                           tblptru	equ	0xFF8
  4527                           tblptrh	equ	0xFF7
  4528                           tblptrl	equ	0xFF6
  4529                           tablat	equ	0xFF5
  4530                           prodh	equ	0xFF4
  4531                           prodl	equ	0xFF3
  4532                           intcon	equ	0xFF2
  4533                           intcon2	equ	0xFF1
  4534                           postinc0	equ	0xFEE
  4535                           wreg	equ	0xFE8
  4536                           postinc1	equ	0xFE6
  4537                           postdec1	equ	0xFE5
  4538                           fsr1h	equ	0xFE2
  4539                           fsr1l	equ	0xFE1
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function _INTERRUPT_InterruptManager *****************
  4547 ;; Defined at:
  4548 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;		None
  4553 ;; Return value:  Size  Location     Type
  4554 ;;		None               void
  4555 ;; Registers used:
  4556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4562 ;;      Params:         0       0       0       0       0       0       0
  4563 ;;      Locals:         0       0       0       0       0       0       0
  4564 ;;      Temps:         14       0       0       0       0       0       0
  4565 ;;      Totals:        14       0       0       0       0       0       0
  4566 ;;Total ram usage:       14 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    3
  4569 ;; This function calls:
  4570 ;;		_ADC_ISR
  4571 ;;		_EUSART1_Receive_ISR
  4572 ;;		_EUSART1_Transmit_ISR
  4573 ;;		_TMR1_ISR
  4574 ;; This function is called by:
  4575 ;;		Interrupt level 2
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	intcode
  4580  000008                     __pintcode:
  4581                           	opt stack 0
  4582  000008                     _INTERRUPT_InterruptManager:
  4583                           	opt stack 22
  4584                           
  4585                           ;incstack = 0
  4586  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
  4587  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4588  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4589  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4590  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4591  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4592  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4593  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4594  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4595  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4596  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4597  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4598  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4599  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4600                           
  4601                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  4602  000040  BA9D               	btfsc	3997,5,c	;volatile
  4603  000042  AA9E               	btfss	3998,5,c	;volatile
  4604  000044  D003               	goto	i2l276
  4605                           
  4606                           ;interrupt_manager.c: 73: {
  4607                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  4608  000046  ECE5  F00D         	call	_EUSART1_Receive_ISR	;wreg free
  4609                           
  4610                           ;interrupt_manager.c: 75: }
  4611  00004A  D011               	goto	i2l284
  4612  00004C                     i2l276:
  4613                           
  4614                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  4615  00004C  BC9D               	btfsc	3997,6,c	;volatile
  4616  00004E  AC9E               	btfss	3998,6,c	;volatile
  4617  000050  D003               	goto	i2l278
  4618                           
  4619                           ;interrupt_manager.c: 77: {
  4620                           ;interrupt_manager.c: 78: ADC_ISR();
  4621  000052  EC0F  F003         	call	_ADC_ISR	;wreg free
  4622                           
  4623                           ;interrupt_manager.c: 79: }
  4624  000056  D00B               	goto	i2l284
  4625  000058                     i2l278:
  4626                           
  4627                           ;interrupt_manager.c: 80: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  4628  000058  B89D               	btfsc	3997,4,c	;volatile
  4629  00005A  A89E               	btfss	3998,4,c	;volatile
  4630  00005C  D003               	goto	i2l280
  4631                           
  4632                           ;interrupt_manager.c: 81: {
  4633                           ;interrupt_manager.c: 82: EUSART1_Transmit_ISR();
  4634  00005E  ECCB  F00D         	call	_EUSART1_Transmit_ISR	;wreg free
  4635                           
  4636                           ;interrupt_manager.c: 83: }
  4637  000062  D005               	goto	i2l284
  4638  000064                     i2l280:
  4639                           
  4640                           ;interrupt_manager.c: 84: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  4641  000064  B09D               	btfsc	3997,0,c	;volatile
  4642  000066  A09E               	btfss	3998,0,c	;volatile
  4643  000068  D002               	goto	i2l284
  4644                           
  4645                           ;interrupt_manager.c: 85: {
  4646                           ;interrupt_manager.c: 86: TMR1_ISR();
  4647  00006A  ECF9  F00C         	call	_TMR1_ISR	;wreg free
  4648  00006E                     i2l284:
  4649  00006E  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4650  000072  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4651  000076  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4652  00007A  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4653  00007E  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4654  000082  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4655  000086  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4656  00008A  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4657  00008E  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4658  000092  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4659  000096  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4660  00009A  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4661  00009E  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4662  0000A2  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4663  0000A6  0011               	retfie		f
  4664  0000A8                     __end_of_INTERRUPT_InterruptManager:
  4665                           	opt stack 0
  4666                           pclatu	equ	0xFFB
  4667                           pclath	equ	0xFFA
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           prodh	equ	0xFF4
  4673                           prodl	equ	0xFF3
  4674                           intcon	equ	0xFF2
  4675                           intcon2	equ	0xFF1
  4676                           postinc0	equ	0xFEE
  4677                           fsr0h	equ	0xFEA
  4678                           fsr0l	equ	0xFE9
  4679                           wreg	equ	0xFE8
  4680                           postinc1	equ	0xFE6
  4681                           postdec1	equ	0xFE5
  4682                           fsr1h	equ	0xFE2
  4683                           fsr1l	equ	0xFE1
  4684                           postinc2	equ	0xFDE
  4685                           postdec2	equ	0xFDD
  4686                           fsr2h	equ	0xFDA
  4687                           fsr2l	equ	0xFD9
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function _TMR1_ISR *****************
  4691 ;; Defined at:
  4692 ;;		line 115 in file "mcc_generated_files/tmr1.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;		None
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;		None
  4697 ;; Return value:  Size  Location     Type
  4698 ;;		None               void
  4699 ;; Registers used:
  4700 ;;		wreg, status,2, status,0, cstack
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4706 ;;      Params:         0       0       0       0       0       0       0
  4707 ;;      Locals:         0       0       0       0       0       0       0
  4708 ;;      Temps:          3       0       0       0       0       0       0
  4709 ;;      Totals:         3       0       0       0       0       0       0
  4710 ;;Total ram usage:        3 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    2
  4713 ;; This function calls:
  4714 ;;		_Battery_Read
  4715 ;;		_Current_Read
  4716 ;;		_TMR1_CallBack
  4717 ;;		_Temp_Read
  4718 ;; This function is called by:
  4719 ;;		_INTERRUPT_InterruptManager
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text27
  4724  0019F2                     __ptext27:
  4725                           	opt stack 0
  4726  0019F2                     _TMR1_ISR:
  4727                           	opt stack 22
  4728                           
  4729                           ;tmr1.c: 117: static volatile unsigned int CountCallBack = 0;
  4730                           ;tmr1.c: 120: PIR1bits.TMR1IF = 0;
  4731                           
  4732                           ;incstack = 0
  4733  0019F2  909E               	bcf	3998,0,c	;volatile
  4734                           
  4735                           ;tmr1.c: 123: TMR1H = (timer1ReloadVal >> 8);
  4736  0019F4  C048  F003         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  4737  0019F8  C003  F004         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  4738  0019FC  6A05               	clrf	(??_TMR1_ISR+2)& (0+255),c
  4739  0019FE  5004               	movf	??_TMR1_ISR+1,w,c
  4740  001A00  6ECF               	movwf	4047,c	;volatile
  4741                           
  4742                           ;tmr1.c: 124: TMR1L = (uint8_t) timer1ReloadVal;
  4743  001A02  C047  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  4744                           
  4745                           ;tmr1.c: 127: if (++CountCallBack >= 4)
  4746  001A06  4A3B               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
  4747  001A08  2A3C               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
  4748  001A0A  0E04               	movlw	4
  4749  001A0C  5C3B               	subwf	TMR1_ISR@CountCallBack& (0+255),w,c	;volatile
  4750  001A0E  0E00               	movlw	0
  4751  001A10  583C               	subwfb	(TMR1_ISR@CountCallBack+1)& (0+255),w,c	;volatile
  4752  001A12  A0D8               	btfss	status,0,c
  4753  001A14  D006               	goto	i2l2582
  4754                           
  4755                           ;tmr1.c: 128: {
  4756                           ;tmr1.c: 130: TMR1_CallBack();
  4757  001A16  ECB2  F00E         	call	_TMR1_CallBack	;wreg free
  4758                           
  4759                           ;tmr1.c: 133: CountCallBack = 0;
  4760  001A1A  0E00               	movlw	0
  4761  001A1C  6E3C               	movwf	TMR1_ISR@CountCallBack+1,c	;volatile
  4762  001A1E  0E00               	movlw	0
  4763  001A20  6E3B               	movwf	TMR1_ISR@CountCallBack,c	;volatile
  4764  001A22                     i2l2582:
  4765                           
  4766                           ;tmr1.c: 134: }
  4767                           ;tmr1.c: 135: if(CountCallBack == 1)
  4768  001A22  043B               	decf	TMR1_ISR@CountCallBack,w,c	;volatile
  4769  001A24  103C               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  4770  001A26  B4D8               	btfsc	status,2,c
  4771                           
  4772                           ;tmr1.c: 136: {
  4773                           ;tmr1.c: 137: Current_Read();
  4774  001A28  EC81  F00E         	call	_Current_Read	;wreg free
  4775                           
  4776                           ;tmr1.c: 138: }
  4777                           ;tmr1.c: 139: if(CountCallBack == 2)
  4778  001A2C  503B               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  4779  001A2E  0A02               	xorlw	2
  4780  001A30  103C               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  4781  001A32  B4D8               	btfsc	status,2,c
  4782                           
  4783                           ;tmr1.c: 140: {
  4784                           ;tmr1.c: 141: Battery_Read();
  4785  001A34  EC8D  F00E         	call	_Battery_Read	;wreg free
  4786                           
  4787                           ;tmr1.c: 142: }
  4788                           ;tmr1.c: 143: if(CountCallBack == 3)
  4789  001A38  503B               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  4790  001A3A  0A03               	xorlw	3
  4791  001A3C  103C               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  4792  001A3E  A4D8               	btfss	status,2,c
  4793  001A40  0012               	return	
  4794                           
  4795                           ;tmr1.c: 144: {
  4796                           ;tmr1.c: 145: Temp_Read();
  4797  001A42  EC75  F00E         	call	_Temp_Read	;wreg free
  4798  001A46  0012               	return	
  4799  001A48                     __end_of_TMR1_ISR:
  4800                           	opt stack 0
  4801                           pclatu	equ	0xFFB
  4802                           pclath	equ	0xFFA
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           prodh	equ	0xFF4
  4808                           prodl	equ	0xFF3
  4809                           intcon	equ	0xFF2
  4810                           intcon2	equ	0xFF1
  4811                           postinc0	equ	0xFEE
  4812                           fsr0h	equ	0xFEA
  4813                           fsr0l	equ	0xFE9
  4814                           wreg	equ	0xFE8
  4815                           postinc1	equ	0xFE6
  4816                           postdec1	equ	0xFE5
  4817                           fsr1h	equ	0xFE2
  4818                           fsr1l	equ	0xFE1
  4819                           postinc2	equ	0xFDE
  4820                           postdec2	equ	0xFDD
  4821                           fsr2h	equ	0xFDA
  4822                           fsr2l	equ	0xFD9
  4823                           status	equ	0xFD8
  4824                           
  4825 ;; *************** function _Temp_Read *****************
  4826 ;; Defined at:
  4827 ;;		line 27 in file "Tempeture.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;		None               void
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4841 ;;      Params:         0       0       0       0       0       0       0
  4842 ;;      Locals:         0       0       0       0       0       0       0
  4843 ;;      Temps:          0       0       0       0       0       0       0
  4844 ;;      Totals:         0       0       0       0       0       0       0
  4845 ;;Total ram usage:        0 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    1
  4848 ;; This function calls:
  4849 ;;		_ADC_StartConversion
  4850 ;; This function is called by:
  4851 ;;		_TMR1_ISR
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text28
  4856  001CEA                     __ptext28:
  4857                           	opt stack 0
  4858  001CEA                     _Temp_Read:
  4859                           	opt stack 22
  4860                           
  4861                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
  4862                           
  4863                           ;incstack = 0
  4864  001CEA  0E00               	movlw	0
  4865  001CEC  6E3E               	movwf	_ADC_Buffer_Point+1,c
  4866  001CEE  0E00               	movlw	0
  4867  001CF0  6E3D               	movwf	_ADC_Buffer_Point,c
  4868                           
  4869                           ;Tempeture.c: 31: Temp_Aquire = 1;
  4870  001CF2  0E01               	movlw	1
  4871  001CF4  6E40               	movwf	_Temp_Aquire,c
  4872                           
  4873                           ;Tempeture.c: 32: ADCON1 = 0x80;
  4874  001CF6  0E80               	movlw	128
  4875  001CF8  6EC1               	movwf	4033,c	;volatile
  4876                           
  4877                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
  4878  001CFA  0E0E               	movlw	14
  4879  001CFC  EC5C  F00E         	call	_ADC_StartConversion
  4880  001D00  0012               	return	
  4881  001D02                     __end_of_Temp_Read:
  4882                           	opt stack 0
  4883                           pclatu	equ	0xFFB
  4884                           pclath	equ	0xFFA
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           postinc0	equ	0xFEE
  4894                           fsr0h	equ	0xFEA
  4895                           fsr0l	equ	0xFE9
  4896                           wreg	equ	0xFE8
  4897                           postinc1	equ	0xFE6
  4898                           postdec1	equ	0xFE5
  4899                           fsr1h	equ	0xFE2
  4900                           fsr1l	equ	0xFE1
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _TMR1_CallBack *****************
  4908 ;; Defined at:
  4909 ;;		line 151 in file "mcc_generated_files/tmr1.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;		None
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;		None               void
  4916 ;; Registers used:
  4917 ;;		None
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4923 ;;      Params:         0       0       0       0       0       0       0
  4924 ;;      Locals:         0       0       0       0       0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0
  4926 ;;      Totals:         0       0       0       0       0       0       0
  4927 ;;Total ram usage:        0 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; This function calls:
  4930 ;;		Nothing
  4931 ;; This function is called by:
  4932 ;;		_TMR1_ISR
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text29
  4937  001D64                     __ptext29:
  4938                           	opt stack 0
  4939  001D64                     _TMR1_CallBack:
  4940                           	opt stack 23
  4941                           
  4942                           ;incstack = 0
  4943  001D64  0012               	return	
  4944  001D66                     __end_of_TMR1_CallBack:
  4945                           	opt stack 0
  4946                           pclatu	equ	0xFFB
  4947                           pclath	equ	0xFFA
  4948                           tblptru	equ	0xFF8
  4949                           tblptrh	equ	0xFF7
  4950                           tblptrl	equ	0xFF6
  4951                           tablat	equ	0xFF5
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           intcon	equ	0xFF2
  4955                           intcon2	equ	0xFF1
  4956                           postinc0	equ	0xFEE
  4957                           fsr0h	equ	0xFEA
  4958                           fsr0l	equ	0xFE9
  4959                           wreg	equ	0xFE8
  4960                           postinc1	equ	0xFE6
  4961                           postdec1	equ	0xFE5
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _Current_Read *****************
  4971 ;; Defined at:
  4972 ;;		line 30 in file "Current.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;		None
  4977 ;; Return value:  Size  Location     Type
  4978 ;;		None               void
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0, cstack
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4986 ;;      Params:         0       0       0       0       0       0       0
  4987 ;;      Locals:         0       0       0       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0
  4989 ;;      Totals:         0       0       0       0       0       0       0
  4990 ;;Total ram usage:        0 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    1
  4993 ;; This function calls:
  4994 ;;		_ADC_StartConversion
  4995 ;; This function is called by:
  4996 ;;		_TMR1_ISR
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text30
  5001  001D02                     __ptext30:
  5002                           	opt stack 0
  5003  001D02                     _Current_Read:
  5004                           	opt stack 22
  5005                           
  5006                           ;Current.c: 33: ADC_Buffer_Point = 0;
  5007                           
  5008                           ;incstack = 0
  5009  001D02  0E00               	movlw	0
  5010  001D04  6E3E               	movwf	_ADC_Buffer_Point+1,c
  5011  001D06  0E00               	movlw	0
  5012  001D08  6E3D               	movwf	_ADC_Buffer_Point,c
  5013                           
  5014                           ;Current.c: 34: Current_Aquire = 1;
  5015  001D0A  0E01               	movlw	1
  5016  001D0C  6E3F               	movwf	_Current_Aquire,c
  5017                           
  5018                           ;Current.c: 35: ADCON1 = 0x80;
  5019  001D0E  0E80               	movlw	128
  5020  001D10  6EC1               	movwf	4033,c	;volatile
  5021                           
  5022                           ;Current.c: 36: ADC_StartConversion(Asen);
  5023  001D12  0E0B               	movlw	11
  5024  001D14  EC5C  F00E         	call	_ADC_StartConversion
  5025  001D18  0012               	return	
  5026  001D1A                     __end_of_Current_Read:
  5027                           	opt stack 0
  5028                           pclatu	equ	0xFFB
  5029                           pclath	equ	0xFFA
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodh	equ	0xFF4
  5035                           prodl	equ	0xFF3
  5036                           intcon	equ	0xFF2
  5037                           intcon2	equ	0xFF1
  5038                           postinc0	equ	0xFEE
  5039                           fsr0h	equ	0xFEA
  5040                           fsr0l	equ	0xFE9
  5041                           wreg	equ	0xFE8
  5042                           postinc1	equ	0xFE6
  5043                           postdec1	equ	0xFE5
  5044                           fsr1h	equ	0xFE2
  5045                           fsr1l	equ	0xFE1
  5046                           postinc2	equ	0xFDE
  5047                           postdec2	equ	0xFDD
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function _Battery_Read *****************
  5053 ;; Defined at:
  5054 ;;		line 24 in file "Battery.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;		None
  5059 ;; Return value:  Size  Location     Type
  5060 ;;		None               void
  5061 ;; Registers used:
  5062 ;;		wreg, status,2, status,0, cstack
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5068 ;;      Params:         0       0       0       0       0       0       0
  5069 ;;      Locals:         0       0       0       0       0       0       0
  5070 ;;      Temps:          0       0       0       0       0       0       0
  5071 ;;      Totals:         0       0       0       0       0       0       0
  5072 ;;Total ram usage:        0 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; Hardware stack levels required when called:    1
  5075 ;; This function calls:
  5076 ;;		_ADC_StartConversion
  5077 ;; This function is called by:
  5078 ;;		_TMR1_ISR
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           	psect	text31
  5083  001D1A                     __ptext31:
  5084                           	opt stack 0
  5085  001D1A                     _Battery_Read:
  5086                           	opt stack 22
  5087                           
  5088                           ;Battery.c: 27: ADC_Buffer_Point = 0;
  5089                           
  5090                           ;incstack = 0
  5091  001D1A  0E00               	movlw	0
  5092  001D1C  6E3E               	movwf	_ADC_Buffer_Point+1,c
  5093  001D1E  0E00               	movlw	0
  5094  001D20  6E3D               	movwf	_ADC_Buffer_Point,c
  5095                           
  5096                           ;Battery.c: 28: Volt_Aquire = 1;
  5097  001D22  0E01               	movlw	1
  5098  001D24  6E41               	movwf	_Volt_Aquire,c
  5099                           
  5100                           ;Battery.c: 29: ADCON1 = 0x81;
  5101  001D26  0E81               	movlw	129
  5102  001D28  6EC1               	movwf	4033,c	;volatile
  5103                           
  5104                           ;Battery.c: 30: ADC_StartConversion(AN_CELL1);
  5105  001D2A  0E07               	movlw	7
  5106  001D2C  EC5C  F00E         	call	_ADC_StartConversion
  5107  001D30  0012               	return	
  5108  001D32                     __end_of_Battery_Read:
  5109                           	opt stack 0
  5110                           pclatu	equ	0xFFB
  5111                           pclath	equ	0xFFA
  5112                           tblptru	equ	0xFF8
  5113                           tblptrh	equ	0xFF7
  5114                           tblptrl	equ	0xFF6
  5115                           tablat	equ	0xFF5
  5116                           prodh	equ	0xFF4
  5117                           prodl	equ	0xFF3
  5118                           intcon	equ	0xFF2
  5119                           intcon2	equ	0xFF1
  5120                           postinc0	equ	0xFEE
  5121                           fsr0h	equ	0xFEA
  5122                           fsr0l	equ	0xFE9
  5123                           wreg	equ	0xFE8
  5124                           postinc1	equ	0xFE6
  5125                           postdec1	equ	0xFE5
  5126                           fsr1h	equ	0xFE2
  5127                           fsr1l	equ	0xFE1
  5128                           postinc2	equ	0xFDE
  5129                           postdec2	equ	0xFDD
  5130                           fsr2h	equ	0xFDA
  5131                           fsr2l	equ	0xFD9
  5132                           status	equ	0xFD8
  5133                           
  5134 ;; *************** function _EUSART1_Transmit_ISR *****************
  5135 ;; Defined at:
  5136 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;		None
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;		None
  5141 ;; Return value:  Size  Location     Type
  5142 ;;		None               void
  5143 ;; Registers used:
  5144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5150 ;;      Params:         0       0       0       0       0       0       0
  5151 ;;      Locals:         0       0       0       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0
  5153 ;;      Totals:         0       0       0       0       0       0       0
  5154 ;;Total ram usage:        0 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; This function calls:
  5157 ;;		Nothing
  5158 ;; This function is called by:
  5159 ;;		_INTERRUPT_InterruptManager
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           	psect	text32
  5164  001B96                     __ptext32:
  5165                           	opt stack 0
  5166  001B96                     _EUSART1_Transmit_ISR:
  5167                           	opt stack 24
  5168                           
  5169                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  5170                           
  5171                           ;incstack = 0
  5172  001B96  0E08               	movlw	8
  5173  001B98  5C49               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  5174  001B9A  B0D8               	btfsc	status,0,c
  5175  001B9C  D014               	goto	i2l134
  5176                           
  5177                           ;eusart1.c: 178: {
  5178                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  5179  001B9E  5046               	movf	_eusart1TxTail,w,c
  5180  001BA0  0D01               	mullw	1
  5181  001BA2  0100               	movlb	0	; () banked
  5182  001BA4  0EB8               	movlw	low _eusart1TxBuffer
  5183  001BA6  24F3               	addwf	prodl,w,c
  5184  001BA8  6ED9               	movwf	fsr2l,c
  5185  001BAA  0100               	movlb	0	; () banked
  5186  001BAC  0E00               	movlw	high _eusart1TxBuffer
  5187  001BAE  20F4               	addwfc	prodh,w,c
  5188  001BB0  6EDA               	movwf	fsr2h,c
  5189  001BB2  50DF               	movf	indf2,w,c
  5190  001BB4  6EAD               	movwf	4013,c	;volatile
  5191                           
  5192                           ; BSR set to: 0
  5193  001BB6  2A46               	incf	_eusart1TxTail,f,c
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  5197  001BB8  0E07               	movlw	7
  5198  001BBA  6446               	cpfsgt	_eusart1TxTail,c
  5199  001BBC  D002               	goto	i2l2642
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;eusart1.c: 181: {
  5203                           ;eusart1.c: 182: eusart1TxTail = 0;
  5204  001BBE  0E00               	movlw	0
  5205  001BC0  6E46               	movwf	_eusart1TxTail,c
  5206  001BC2                     i2l2642:
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;eusart1.c: 183: }
  5210                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  5211  001BC2  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  5212                           
  5213                           ;eusart1.c: 185: }
  5214  001BC4  0012               	return	
  5215  001BC6                     i2l134:
  5216                           
  5217                           ;eusart1.c: 186: else
  5218                           ;eusart1.c: 187: {
  5219                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  5220  001BC6  989D               	bcf	3997,4,c	;volatile
  5221  001BC8  0012               	return	
  5222  001BCA                     __end_of_EUSART1_Transmit_ISR:
  5223                           	opt stack 0
  5224                           pclatu	equ	0xFFB
  5225                           pclath	equ	0xFFA
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           intcon2	equ	0xFF1
  5234                           postinc0	equ	0xFEE
  5235                           fsr0h	equ	0xFEA
  5236                           fsr0l	equ	0xFE9
  5237                           wreg	equ	0xFE8
  5238                           postinc1	equ	0xFE6
  5239                           postdec1	equ	0xFE5
  5240                           fsr1h	equ	0xFE2
  5241                           fsr1l	equ	0xFE1
  5242                           indf2	equ	0xFDF
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function _EUSART1_Receive_ISR *****************
  5250 ;; Defined at:
  5251 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;		None               void
  5258 ;; Registers used:
  5259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5265 ;;      Params:         0       0       0       0       0       0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0
  5268 ;;      Totals:         0       0       0       0       0       0       0
  5269 ;;Total ram usage:        0 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_INTERRUPT_InterruptManager
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text33
  5279  001BCA                     __ptext33:
  5280                           	opt stack 0
  5281  001BCA                     _EUSART1_Receive_ISR:
  5282                           	opt stack 24
  5283                           
  5284                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  5285                           
  5286                           ;incstack = 0
  5287  001BCA  A2AB               	btfss	4011,1,c	;volatile
  5288  001BCC  D002               	goto	i2l2648
  5289                           
  5290                           ;eusart1.c: 195: {
  5291                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  5292  001BCE  98AB               	bcf	4011,4,c	;volatile
  5293                           
  5294                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  5295  001BD0  88AB               	bsf	4011,4,c	;volatile
  5296  001BD2                     i2l2648:
  5297                           
  5298                           ;eusart1.c: 200: }
  5299                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  5300  001BD2  5043               	movf	_eusart1RxHead,w,c
  5301  001BD4  0D01               	mullw	1
  5302  001BD6  0100               	movlb	0	; () banked
  5303  001BD8  0EB0               	movlw	low _eusart1RxBuffer
  5304  001BDA  24F3               	addwf	prodl,w,c
  5305  001BDC  6ED9               	movwf	fsr2l,c
  5306  001BDE  0100               	movlb	0	; () banked
  5307  001BE0  0E00               	movlw	high _eusart1RxBuffer
  5308  001BE2  20F4               	addwfc	prodh,w,c
  5309  001BE4  6EDA               	movwf	fsr2h,c
  5310  001BE6  CFAE FFDF          	movff	4014,indf2	;volatile
  5311                           
  5312                           ; BSR set to: 0
  5313  001BEA  2A43               	incf	_eusart1RxHead,f,c
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  5317  001BEC  0E07               	movlw	7
  5318  001BEE  6443               	cpfsgt	_eusart1RxHead,c
  5319  001BF0  D002               	goto	i2l2656
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;eusart1.c: 205: {
  5323                           ;eusart1.c: 206: eusart1RxHead = 0;
  5324  001BF2  0E00               	movlw	0
  5325  001BF4  6E43               	movwf	_eusart1RxHead,c
  5326  001BF6                     i2l2656:
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;eusart1.c: 207: }
  5330                           ;eusart1.c: 208: eusart1RxCount++;
  5331  001BF6  2A42               	incf	_eusart1RxCount,f,c	;volatile
  5332                           
  5333                           ; BSR set to: 0
  5334  001BF8  0012               	return	
  5335  001BFA                     __end_of_EUSART1_Receive_ISR:
  5336                           	opt stack 0
  5337                           pclatu	equ	0xFFB
  5338                           pclath	equ	0xFFA
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           intcon	equ	0xFF2
  5346                           intcon2	equ	0xFF1
  5347                           postinc0	equ	0xFEE
  5348                           fsr0h	equ	0xFEA
  5349                           fsr0l	equ	0xFE9
  5350                           wreg	equ	0xFE8
  5351                           postinc1	equ	0xFE6
  5352                           postdec1	equ	0xFE5
  5353                           fsr1h	equ	0xFE2
  5354                           fsr1l	equ	0xFE1
  5355                           indf2	equ	0xFDF
  5356                           postinc2	equ	0xFDE
  5357                           postdec2	equ	0xFDD
  5358                           fsr2h	equ	0xFDA
  5359                           fsr2l	equ	0xFD9
  5360                           status	equ	0xFD8
  5361                           
  5362 ;; *************** function _ADC_ISR *****************
  5363 ;; Defined at:
  5364 ;;		line 130 in file "mcc_generated_files/adc.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;		None
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  ADC_Result      2    6[COMRAM] int 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;		None               void
  5371 ;; Registers used:
  5372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5378 ;;      Params:         0       0       0       0       0       0       0
  5379 ;;      Locals:         2       0       0       0       0       0       0
  5380 ;;      Temps:          2       0       0       0       0       0       0
  5381 ;;      Totals:         4       0       0       0       0       0       0
  5382 ;;Total ram usage:        4 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    1
  5385 ;; This function calls:
  5386 ;;		_ADC_GetConversionResult
  5387 ;;		_ADC_StartConversion
  5388 ;;		_Set_4051
  5389 ;; This function is called by:
  5390 ;;		_INTERRUPT_InterruptManager
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text34
  5395  00061E                     __ptext34:
  5396                           	opt stack 0
  5397  00061E                     _ADC_ISR:
  5398                           	opt stack 23
  5399                           
  5400                           ;adc.c: 133: PIR1bits.ADIF = 0;
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;incstack = 0
  5404  00061E  9C9E               	bcf	3998,6,c	;volatile
  5405                           
  5406                           ;adc.c: 134: int ADC_Result = 0;
  5407  000620  0E00               	movlw	0
  5408  000622  6E08               	movwf	ADC_ISR@ADC_Result+1,c
  5409  000624  0E00               	movlw	0
  5410  000626  6E07               	movwf	ADC_ISR@ADC_Result,c
  5411                           
  5412                           ;adc.c: 135: if (Temp_Aquire){
  5413  000628  5040               	movf	_Temp_Aquire,w,c
  5414  00062A  B4D8               	btfsc	status,2,c
  5415  00062C  D144               	goto	i2l2728
  5416                           
  5417                           ;adc.c: 137: ADC_Result = ADC_GetConversionResult();
  5418  00062E  EC99  F00E         	call	_ADC_GetConversionResult	;wreg free
  5419  000632  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  5420  000636  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  5421                           
  5422                           ;adc.c: 138: switch ( ADC_Buffer_Point )
  5423  00063A  D111               	goto	i2l2724
  5424  00063C                     i2l2664:
  5425                           
  5426                           ;adc.c: 141: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5427  00063C  0EC6               	movlw	low _Temp_Adc
  5428  00063E  6E05               	movwf	??_ADC_ISR& (0+255),c
  5429  000640  0E00               	movlw	high _Temp_Adc
  5430  000642  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5431  000644  90D8               	bcf	status,0,c
  5432  000646  343D               	rlcf	_ADC_Buffer_Point,w,c
  5433  000648  6ED9               	movwf	fsr2l,c
  5434  00064A  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5435  00064C  6EDA               	movwf	fsr2h,c
  5436  00064E  5005               	movf	??_ADC_ISR,w,c
  5437  000650  26D9               	addwf	fsr2l,f,c
  5438  000652  5006               	movf	??_ADC_ISR+1,w,c
  5439  000654  22DA               	addwfc	fsr2h,f,c
  5440  000656  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5441  00065A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5442                           
  5443                           ;adc.c: 142: Set_4051(0);
  5444  00065E  0E00               	movlw	0
  5445  000660  6E02               	movwf	Set_4051@Channel+1,c
  5446  000662  0E00               	movlw	0
  5447  000664  6E01               	movwf	Set_4051@Channel,c
  5448  000666  EC14  F00E         	call	_Set_4051	;wreg free
  5449                           
  5450                           ;adc.c: 143: ADC_StartConversion(Temp1);
  5451  00066A  0E0E               	movlw	14
  5452  00066C  EC5C  F00E         	call	_ADC_StartConversion
  5453                           
  5454                           ;adc.c: 144: break;
  5455  000670  D120               	goto	i2l2726
  5456  000672                     i2l2670:
  5457                           
  5458                           ;adc.c: 146: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5459  000672  0EC6               	movlw	low _Temp_Adc
  5460  000674  6E05               	movwf	??_ADC_ISR& (0+255),c
  5461  000676  0E00               	movlw	high _Temp_Adc
  5462  000678  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5463  00067A  90D8               	bcf	status,0,c
  5464  00067C  343D               	rlcf	_ADC_Buffer_Point,w,c
  5465  00067E  6ED9               	movwf	fsr2l,c
  5466  000680  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5467  000682  6EDA               	movwf	fsr2h,c
  5468  000684  5005               	movf	??_ADC_ISR,w,c
  5469  000686  26D9               	addwf	fsr2l,f,c
  5470  000688  5006               	movf	??_ADC_ISR+1,w,c
  5471  00068A  22DA               	addwfc	fsr2h,f,c
  5472  00068C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5473  000690  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5474                           
  5475                           ;adc.c: 147: Set_4051(1);
  5476  000694  0E00               	movlw	0
  5477  000696  6E02               	movwf	Set_4051@Channel+1,c
  5478  000698  0E01               	movlw	1
  5479  00069A  6E01               	movwf	Set_4051@Channel,c
  5480  00069C  EC14  F00E         	call	_Set_4051	;wreg free
  5481                           
  5482                           ;adc.c: 148: ADC_StartConversion(Temp1);
  5483  0006A0  0E0E               	movlw	14
  5484  0006A2  EC5C  F00E         	call	_ADC_StartConversion
  5485                           
  5486                           ;adc.c: 149: break;
  5487  0006A6  D105               	goto	i2l2726
  5488  0006A8                     i2l2676:
  5489                           
  5490                           ;adc.c: 151: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5491  0006A8  0EC6               	movlw	low _Temp_Adc
  5492  0006AA  6E05               	movwf	??_ADC_ISR& (0+255),c
  5493  0006AC  0E00               	movlw	high _Temp_Adc
  5494  0006AE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5495  0006B0  90D8               	bcf	status,0,c
  5496  0006B2  343D               	rlcf	_ADC_Buffer_Point,w,c
  5497  0006B4  6ED9               	movwf	fsr2l,c
  5498  0006B6  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5499  0006B8  6EDA               	movwf	fsr2h,c
  5500  0006BA  5005               	movf	??_ADC_ISR,w,c
  5501  0006BC  26D9               	addwf	fsr2l,f,c
  5502  0006BE  5006               	movf	??_ADC_ISR+1,w,c
  5503  0006C0  22DA               	addwfc	fsr2h,f,c
  5504  0006C2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5505  0006C6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5506                           
  5507                           ;adc.c: 152: Set_4051(2);
  5508  0006CA  0E00               	movlw	0
  5509  0006CC  6E02               	movwf	Set_4051@Channel+1,c
  5510  0006CE  0E02               	movlw	2
  5511  0006D0  6E01               	movwf	Set_4051@Channel,c
  5512  0006D2  EC14  F00E         	call	_Set_4051	;wreg free
  5513                           
  5514                           ;adc.c: 153: ADC_StartConversion(Temp1);
  5515  0006D6  0E0E               	movlw	14
  5516  0006D8  EC5C  F00E         	call	_ADC_StartConversion
  5517                           
  5518                           ;adc.c: 154: break;
  5519  0006DC  D0EA               	goto	i2l2726
  5520  0006DE                     i2l2682:
  5521                           
  5522                           ;adc.c: 156: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5523  0006DE  0EC6               	movlw	low _Temp_Adc
  5524  0006E0  6E05               	movwf	??_ADC_ISR& (0+255),c
  5525  0006E2  0E00               	movlw	high _Temp_Adc
  5526  0006E4  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5527  0006E6  90D8               	bcf	status,0,c
  5528  0006E8  343D               	rlcf	_ADC_Buffer_Point,w,c
  5529  0006EA  6ED9               	movwf	fsr2l,c
  5530  0006EC  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5531  0006EE  6EDA               	movwf	fsr2h,c
  5532  0006F0  5005               	movf	??_ADC_ISR,w,c
  5533  0006F2  26D9               	addwf	fsr2l,f,c
  5534  0006F4  5006               	movf	??_ADC_ISR+1,w,c
  5535  0006F6  22DA               	addwfc	fsr2h,f,c
  5536  0006F8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5537  0006FC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5538                           
  5539                           ;adc.c: 157: Set_4051(3);
  5540  000700  0E00               	movlw	0
  5541  000702  6E02               	movwf	Set_4051@Channel+1,c
  5542  000704  0E03               	movlw	3
  5543  000706  6E01               	movwf	Set_4051@Channel,c
  5544  000708  EC14  F00E         	call	_Set_4051	;wreg free
  5545                           
  5546                           ;adc.c: 158: ADC_StartConversion(Temp1);
  5547  00070C  0E0E               	movlw	14
  5548  00070E  EC5C  F00E         	call	_ADC_StartConversion
  5549                           
  5550                           ;adc.c: 159: break;
  5551  000712  D0CF               	goto	i2l2726
  5552  000714                     i2l2688:
  5553                           
  5554                           ;adc.c: 161: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5555  000714  0EC6               	movlw	low _Temp_Adc
  5556  000716  6E05               	movwf	??_ADC_ISR& (0+255),c
  5557  000718  0E00               	movlw	high _Temp_Adc
  5558  00071A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5559  00071C  90D8               	bcf	status,0,c
  5560  00071E  343D               	rlcf	_ADC_Buffer_Point,w,c
  5561  000720  6ED9               	movwf	fsr2l,c
  5562  000722  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5563  000724  6EDA               	movwf	fsr2h,c
  5564  000726  5005               	movf	??_ADC_ISR,w,c
  5565  000728  26D9               	addwf	fsr2l,f,c
  5566  00072A  5006               	movf	??_ADC_ISR+1,w,c
  5567  00072C  22DA               	addwfc	fsr2h,f,c
  5568  00072E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5569  000732  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5570                           
  5571                           ;adc.c: 162: Set_4051(4);
  5572  000736  0E00               	movlw	0
  5573  000738  6E02               	movwf	Set_4051@Channel+1,c
  5574  00073A  0E04               	movlw	4
  5575  00073C  6E01               	movwf	Set_4051@Channel,c
  5576  00073E  EC14  F00E         	call	_Set_4051	;wreg free
  5577                           
  5578                           ;adc.c: 163: ADC_StartConversion(Temp1);
  5579  000742  0E0E               	movlw	14
  5580  000744  EC5C  F00E         	call	_ADC_StartConversion
  5581                           
  5582                           ;adc.c: 164: break;
  5583  000748  D0B4               	goto	i2l2726
  5584  00074A                     i2l2694:
  5585                           
  5586                           ;adc.c: 166: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5587  00074A  0EC6               	movlw	low _Temp_Adc
  5588  00074C  6E05               	movwf	??_ADC_ISR& (0+255),c
  5589  00074E  0E00               	movlw	high _Temp_Adc
  5590  000750  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5591  000752  90D8               	bcf	status,0,c
  5592  000754  343D               	rlcf	_ADC_Buffer_Point,w,c
  5593  000756  6ED9               	movwf	fsr2l,c
  5594  000758  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5595  00075A  6EDA               	movwf	fsr2h,c
  5596  00075C  5005               	movf	??_ADC_ISR,w,c
  5597  00075E  26D9               	addwf	fsr2l,f,c
  5598  000760  5006               	movf	??_ADC_ISR+1,w,c
  5599  000762  22DA               	addwfc	fsr2h,f,c
  5600  000764  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5601  000768  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5602                           
  5603                           ;adc.c: 167: Set_4051(5);
  5604  00076C  0E00               	movlw	0
  5605  00076E  6E02               	movwf	Set_4051@Channel+1,c
  5606  000770  0E05               	movlw	5
  5607  000772  6E01               	movwf	Set_4051@Channel,c
  5608  000774  EC14  F00E         	call	_Set_4051	;wreg free
  5609                           
  5610                           ;adc.c: 168: ADC_StartConversion(Temp1);
  5611  000778  0E0E               	movlw	14
  5612  00077A  EC5C  F00E         	call	_ADC_StartConversion
  5613                           
  5614                           ;adc.c: 169: break;
  5615  00077E  D099               	goto	i2l2726
  5616  000780                     i2l2700:
  5617                           
  5618                           ;adc.c: 171: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5619  000780  0EC6               	movlw	low _Temp_Adc
  5620  000782  6E05               	movwf	??_ADC_ISR& (0+255),c
  5621  000784  0E00               	movlw	high _Temp_Adc
  5622  000786  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5623  000788  90D8               	bcf	status,0,c
  5624  00078A  343D               	rlcf	_ADC_Buffer_Point,w,c
  5625  00078C  6ED9               	movwf	fsr2l,c
  5626  00078E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5627  000790  6EDA               	movwf	fsr2h,c
  5628  000792  5005               	movf	??_ADC_ISR,w,c
  5629  000794  26D9               	addwf	fsr2l,f,c
  5630  000796  5006               	movf	??_ADC_ISR+1,w,c
  5631  000798  22DA               	addwfc	fsr2h,f,c
  5632  00079A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5633  00079E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5634                           
  5635                           ;adc.c: 172: Set_4051(6);
  5636  0007A2  0E00               	movlw	0
  5637  0007A4  6E02               	movwf	Set_4051@Channel+1,c
  5638  0007A6  0E06               	movlw	6
  5639  0007A8  6E01               	movwf	Set_4051@Channel,c
  5640  0007AA  EC14  F00E         	call	_Set_4051	;wreg free
  5641                           
  5642                           ;adc.c: 173: ADC_StartConversion(Temp1);
  5643  0007AE  0E0E               	movlw	14
  5644  0007B0  EC5C  F00E         	call	_ADC_StartConversion
  5645                           
  5646                           ;adc.c: 174: break;
  5647  0007B4  D07E               	goto	i2l2726
  5648  0007B6                     i2l2706:
  5649                           
  5650                           ;adc.c: 176: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5651  0007B6  0EC6               	movlw	low _Temp_Adc
  5652  0007B8  6E05               	movwf	??_ADC_ISR& (0+255),c
  5653  0007BA  0E00               	movlw	high _Temp_Adc
  5654  0007BC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5655  0007BE  90D8               	bcf	status,0,c
  5656  0007C0  343D               	rlcf	_ADC_Buffer_Point,w,c
  5657  0007C2  6ED9               	movwf	fsr2l,c
  5658  0007C4  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5659  0007C6  6EDA               	movwf	fsr2h,c
  5660  0007C8  5005               	movf	??_ADC_ISR,w,c
  5661  0007CA  26D9               	addwf	fsr2l,f,c
  5662  0007CC  5006               	movf	??_ADC_ISR+1,w,c
  5663  0007CE  22DA               	addwfc	fsr2h,f,c
  5664  0007D0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5665  0007D4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5666                           
  5667                           ;adc.c: 177: Set_4051(7);
  5668  0007D8  0E00               	movlw	0
  5669  0007DA  6E02               	movwf	Set_4051@Channel+1,c
  5670  0007DC  0E07               	movlw	7
  5671  0007DE  6E01               	movwf	Set_4051@Channel,c
  5672  0007E0  EC14  F00E         	call	_Set_4051	;wreg free
  5673                           
  5674                           ;adc.c: 178: ADC_StartConversion(Temp1);
  5675  0007E4  0E0E               	movlw	14
  5676  0007E6  EC5C  F00E         	call	_ADC_StartConversion
  5677                           
  5678                           ;adc.c: 179: break;
  5679  0007EA  D063               	goto	i2l2726
  5680  0007EC                     i2l2712:
  5681                           
  5682                           ;adc.c: 181: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5683  0007EC  0EC6               	movlw	low _Temp_Adc
  5684  0007EE  6E05               	movwf	??_ADC_ISR& (0+255),c
  5685  0007F0  0E00               	movlw	high _Temp_Adc
  5686  0007F2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5687  0007F4  90D8               	bcf	status,0,c
  5688  0007F6  343D               	rlcf	_ADC_Buffer_Point,w,c
  5689  0007F8  6ED9               	movwf	fsr2l,c
  5690  0007FA  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5691  0007FC  6EDA               	movwf	fsr2h,c
  5692  0007FE  5005               	movf	??_ADC_ISR,w,c
  5693  000800  26D9               	addwf	fsr2l,f,c
  5694  000802  5006               	movf	??_ADC_ISR+1,w,c
  5695  000804  22DA               	addwfc	fsr2h,f,c
  5696  000806  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5697  00080A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5698                           
  5699                           ;adc.c: 182: Set_4051(0);
  5700  00080E  0E00               	movlw	0
  5701  000810  6E02               	movwf	Set_4051@Channel+1,c
  5702  000812  0E00               	movlw	0
  5703  000814  6E01               	movwf	Set_4051@Channel,c
  5704  000816  EC14  F00E         	call	_Set_4051	;wreg free
  5705                           
  5706                           ;adc.c: 184: break;
  5707  00081A  D04B               	goto	i2l2726
  5708  00081C                     i2l2716:
  5709                           
  5710                           ;adc.c: 186: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5711  00081C  0EC6               	movlw	low _Temp_Adc
  5712  00081E  6E05               	movwf	??_ADC_ISR& (0+255),c
  5713  000820  0E00               	movlw	high _Temp_Adc
  5714  000822  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5715  000824  90D8               	bcf	status,0,c
  5716  000826  343D               	rlcf	_ADC_Buffer_Point,w,c
  5717  000828  6ED9               	movwf	fsr2l,c
  5718  00082A  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5719  00082C  6EDA               	movwf	fsr2h,c
  5720  00082E  5005               	movf	??_ADC_ISR,w,c
  5721  000830  26D9               	addwf	fsr2l,f,c
  5722  000832  5006               	movf	??_ADC_ISR+1,w,c
  5723  000834  22DA               	addwfc	fsr2h,f,c
  5724  000836  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5725  00083A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5726                           
  5727                           ;adc.c: 187: Set_4051(1);
  5728  00083E  0E00               	movlw	0
  5729  000840  6E02               	movwf	Set_4051@Channel+1,c
  5730  000842  0E01               	movlw	1
  5731  000844  6E01               	movwf	Set_4051@Channel,c
  5732  000846  EC14  F00E         	call	_Set_4051	;wreg free
  5733                           
  5734                           ;adc.c: 189: break;
  5735  00084A  D033               	goto	i2l2726
  5736  00084C                     i2l2720:
  5737                           
  5738                           ;adc.c: 191: Temp_Aquire = 0;
  5739  00084C  0E00               	movlw	0
  5740  00084E  6E40               	movwf	_Temp_Aquire,c
  5741                           
  5742                           ;adc.c: 192: Temp_Done = 1;
  5743  000850  0E00               	movlw	0
  5744  000852  0100               	movlb	0	; () banked
  5745  000854  6FC1               	movwf	(_Temp_Done+1)& (0+255),b
  5746  000856  0E01               	movlw	1
  5747  000858  0100               	movlb	0	; () banked
  5748  00085A  6FC0               	movwf	_Temp_Done& (0+255),b
  5749                           
  5750                           ;adc.c: 193: break;
  5751  00085C  D02A               	goto	i2l2726
  5752  00085E                     i2l2724:
  5753  00085E  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  5754  000862  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  5755                           
  5756                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5757                           ; Switch size 1, requested type "space"
  5758                           ; Number of cases is 1, Range of values is 0 to 0
  5759                           ; switch strategies available:
  5760                           ; Name         Instructions Cycles
  5761                           ; simple_byte            4     3 (average)
  5762                           ;	Chosen strategy is simple_byte
  5763  000866  5006               	movf	??_ADC_ISR+1,w,c
  5764  000868  0A00               	xorlw	0	; case 0
  5765  00086A  A4D8               	btfss	status,2,c
  5766  00086C  D022               	goto	i2l2726
  5767                           
  5768                           ; Switch size 1, requested type "space"
  5769                           ; Number of cases is 11, Range of values is 0 to 10
  5770                           ; switch strategies available:
  5771                           ; Name         Instructions Cycles
  5772                           ; simple_byte           34    18 (average)
  5773                           ;	Chosen strategy is simple_byte
  5774  00086E  5005               	movf	??_ADC_ISR,w,c
  5775  000870  0A00               	xorlw	0	; case 0
  5776  000872  B4D8               	btfsc	status,2,c
  5777  000874  D6E3               	goto	i2l2664
  5778  000876  0A01               	xorlw	1	; case 1
  5779  000878  B4D8               	btfsc	status,2,c
  5780  00087A  D6FB               	goto	i2l2670
  5781  00087C  0A03               	xorlw	3	; case 2
  5782  00087E  B4D8               	btfsc	status,2,c
  5783  000880  D713               	goto	i2l2676
  5784  000882  0A01               	xorlw	1	; case 3
  5785  000884  B4D8               	btfsc	status,2,c
  5786  000886  D72B               	goto	i2l2682
  5787  000888  0A07               	xorlw	7	; case 4
  5788  00088A  B4D8               	btfsc	status,2,c
  5789  00088C  D743               	goto	i2l2688
  5790  00088E  0A01               	xorlw	1	; case 5
  5791  000890  B4D8               	btfsc	status,2,c
  5792  000892  D75B               	goto	i2l2694
  5793  000894  0A03               	xorlw	3	; case 6
  5794  000896  B4D8               	btfsc	status,2,c
  5795  000898  D773               	goto	i2l2700
  5796  00089A  0A01               	xorlw	1	; case 7
  5797  00089C  B4D8               	btfsc	status,2,c
  5798  00089E  D78B               	goto	i2l2706
  5799  0008A0  0A0F               	xorlw	15	; case 8
  5800  0008A2  B4D8               	btfsc	status,2,c
  5801  0008A4  D7A3               	goto	i2l2712
  5802  0008A6  0A01               	xorlw	1	; case 9
  5803  0008A8  B4D8               	btfsc	status,2,c
  5804  0008AA  D7B8               	goto	i2l2716
  5805  0008AC  0A03               	xorlw	3	; case 10
  5806  0008AE  B4D8               	btfsc	status,2,c
  5807  0008B0  D7CD               	goto	i2l2720
  5808  0008B2                     i2l2726:
  5809                           
  5810                           ;adc.c: 195: ADC_Buffer_Point++;
  5811  0008B2  4A3D               	infsnz	_ADC_Buffer_Point,f,c
  5812  0008B4  2A3E               	incf	_ADC_Buffer_Point+1,f,c
  5813  0008B6                     i2l2728:
  5814                           
  5815                           ;adc.c: 196: }
  5816                           ;adc.c: 197: if (Volt_Aquire){
  5817  0008B6  5041               	movf	_Volt_Aquire,w,c
  5818  0008B8  B4D8               	btfsc	status,2,c
  5819  0008BA  0012               	return	
  5820                           
  5821                           ;adc.c: 199: ADC_Result = ADC_GetConversionResult();
  5822  0008BC  EC99  F00E         	call	_ADC_GetConversionResult	;wreg free
  5823  0008C0  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  5824  0008C4  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  5825                           
  5826                           ;adc.c: 200: switch ( ADC_Buffer_Point )
  5827  0008C8  D093               	goto	i2l2762
  5828  0008CA                     i2l2732:
  5829                           
  5830                           ;adc.c: 203: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5831  0008CA  0E9C               	movlw	low _Battery_Adc
  5832  0008CC  6E05               	movwf	??_ADC_ISR& (0+255),c
  5833  0008CE  0E00               	movlw	high _Battery_Adc
  5834  0008D0  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5835  0008D2  90D8               	bcf	status,0,c
  5836  0008D4  343D               	rlcf	_ADC_Buffer_Point,w,c
  5837  0008D6  6ED9               	movwf	fsr2l,c
  5838  0008D8  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5839  0008DA  6EDA               	movwf	fsr2h,c
  5840  0008DC  5005               	movf	??_ADC_ISR,w,c
  5841  0008DE  26D9               	addwf	fsr2l,f,c
  5842  0008E0  5006               	movf	??_ADC_ISR+1,w,c
  5843  0008E2  22DA               	addwfc	fsr2h,f,c
  5844  0008E4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5845  0008E8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5846                           
  5847                           ;adc.c: 204: ADC_StartConversion(AN_CELL1);
  5848  0008EC  0E07               	movlw	7
  5849  0008EE  EC5C  F00E         	call	_ADC_StartConversion
  5850                           
  5851                           ;adc.c: 205: break;
  5852  0008F2  D09C               	goto	i2l2764
  5853  0008F4                     i2l2736:
  5854                           
  5855                           ;adc.c: 207: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5856  0008F4  0E9C               	movlw	low _Battery_Adc
  5857  0008F6  6E05               	movwf	??_ADC_ISR& (0+255),c
  5858  0008F8  0E00               	movlw	high _Battery_Adc
  5859  0008FA  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5860  0008FC  90D8               	bcf	status,0,c
  5861  0008FE  343D               	rlcf	_ADC_Buffer_Point,w,c
  5862  000900  6ED9               	movwf	fsr2l,c
  5863  000902  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5864  000904  6EDA               	movwf	fsr2h,c
  5865  000906  5005               	movf	??_ADC_ISR,w,c
  5866  000908  26D9               	addwf	fsr2l,f,c
  5867  00090A  5006               	movf	??_ADC_ISR+1,w,c
  5868  00090C  22DA               	addwfc	fsr2h,f,c
  5869  00090E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5870  000912  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5871                           
  5872                           ;adc.c: 208: ADC_StartConversion(AN_CELL2);
  5873  000916  0E06               	movlw	6
  5874  000918  EC5C  F00E         	call	_ADC_StartConversion
  5875                           
  5876                           ;adc.c: 209: break;
  5877  00091C  D087               	goto	i2l2764
  5878  00091E                     i2l2740:
  5879                           
  5880                           ;adc.c: 211: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5881  00091E  0E9C               	movlw	low _Battery_Adc
  5882  000920  6E05               	movwf	??_ADC_ISR& (0+255),c
  5883  000922  0E00               	movlw	high _Battery_Adc
  5884  000924  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5885  000926  90D8               	bcf	status,0,c
  5886  000928  343D               	rlcf	_ADC_Buffer_Point,w,c
  5887  00092A  6ED9               	movwf	fsr2l,c
  5888  00092C  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5889  00092E  6EDA               	movwf	fsr2h,c
  5890  000930  5005               	movf	??_ADC_ISR,w,c
  5891  000932  26D9               	addwf	fsr2l,f,c
  5892  000934  5006               	movf	??_ADC_ISR+1,w,c
  5893  000936  22DA               	addwfc	fsr2h,f,c
  5894  000938  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5895  00093C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5896                           
  5897                           ;adc.c: 212: ADC_StartConversion(AN_CELL3);
  5898  000940  0E05               	movlw	5
  5899  000942  EC5C  F00E         	call	_ADC_StartConversion
  5900                           
  5901                           ;adc.c: 213: break;
  5902  000946  D072               	goto	i2l2764
  5903  000948                     i2l2744:
  5904                           
  5905                           ;adc.c: 215: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5906  000948  0E9C               	movlw	low _Battery_Adc
  5907  00094A  6E05               	movwf	??_ADC_ISR& (0+255),c
  5908  00094C  0E00               	movlw	high _Battery_Adc
  5909  00094E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5910  000950  90D8               	bcf	status,0,c
  5911  000952  343D               	rlcf	_ADC_Buffer_Point,w,c
  5912  000954  6ED9               	movwf	fsr2l,c
  5913  000956  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5914  000958  6EDA               	movwf	fsr2h,c
  5915  00095A  5005               	movf	??_ADC_ISR,w,c
  5916  00095C  26D9               	addwf	fsr2l,f,c
  5917  00095E  5006               	movf	??_ADC_ISR+1,w,c
  5918  000960  22DA               	addwfc	fsr2h,f,c
  5919  000962  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5920  000966  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5921                           
  5922                           ;adc.c: 216: ADC_StartConversion(AN_CELL4);
  5923  00096A  0E04               	movlw	4
  5924  00096C  EC5C  F00E         	call	_ADC_StartConversion
  5925                           
  5926                           ;adc.c: 217: break;
  5927  000970  D05D               	goto	i2l2764
  5928  000972                     i2l2748:
  5929                           
  5930                           ;adc.c: 219: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5931  000972  0E9C               	movlw	low _Battery_Adc
  5932  000974  6E05               	movwf	??_ADC_ISR& (0+255),c
  5933  000976  0E00               	movlw	high _Battery_Adc
  5934  000978  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5935  00097A  90D8               	bcf	status,0,c
  5936  00097C  343D               	rlcf	_ADC_Buffer_Point,w,c
  5937  00097E  6ED9               	movwf	fsr2l,c
  5938  000980  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5939  000982  6EDA               	movwf	fsr2h,c
  5940  000984  5005               	movf	??_ADC_ISR,w,c
  5941  000986  26D9               	addwf	fsr2l,f,c
  5942  000988  5006               	movf	??_ADC_ISR+1,w,c
  5943  00098A  22DA               	addwfc	fsr2h,f,c
  5944  00098C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5945  000990  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5946                           
  5947                           ;adc.c: 220: ADC_StartConversion(AN_CELL5);
  5948  000994  0E03               	movlw	3
  5949  000996  EC5C  F00E         	call	_ADC_StartConversion
  5950                           
  5951                           ;adc.c: 221: break;
  5952  00099A  D048               	goto	i2l2764
  5953  00099C                     i2l2752:
  5954                           
  5955                           ;adc.c: 223: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5956  00099C  0E9C               	movlw	low _Battery_Adc
  5957  00099E  6E05               	movwf	??_ADC_ISR& (0+255),c
  5958  0009A0  0E00               	movlw	high _Battery_Adc
  5959  0009A2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5960  0009A4  90D8               	bcf	status,0,c
  5961  0009A6  343D               	rlcf	_ADC_Buffer_Point,w,c
  5962  0009A8  6ED9               	movwf	fsr2l,c
  5963  0009AA  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5964  0009AC  6EDA               	movwf	fsr2h,c
  5965  0009AE  5005               	movf	??_ADC_ISR,w,c
  5966  0009B0  26D9               	addwf	fsr2l,f,c
  5967  0009B2  5006               	movf	??_ADC_ISR+1,w,c
  5968  0009B4  22DA               	addwfc	fsr2h,f,c
  5969  0009B6  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5970  0009BA  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5971                           
  5972                           ;adc.c: 224: ADC_StartConversion(AN_CELL6);
  5973  0009BE  0E01               	movlw	1
  5974  0009C0  EC5C  F00E         	call	_ADC_StartConversion
  5975                           
  5976                           ;adc.c: 225: break;
  5977  0009C4  D033               	goto	i2l2764
  5978  0009C6                     i2l2756:
  5979                           
  5980                           ;adc.c: 227: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5981  0009C6  0E9C               	movlw	low _Battery_Adc
  5982  0009C8  6E05               	movwf	??_ADC_ISR& (0+255),c
  5983  0009CA  0E00               	movlw	high _Battery_Adc
  5984  0009CC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
  5985  0009CE  90D8               	bcf	status,0,c
  5986  0009D0  343D               	rlcf	_ADC_Buffer_Point,w,c
  5987  0009D2  6ED9               	movwf	fsr2l,c
  5988  0009D4  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5989  0009D6  6EDA               	movwf	fsr2h,c
  5990  0009D8  5005               	movf	??_ADC_ISR,w,c
  5991  0009DA  26D9               	addwf	fsr2l,f,c
  5992  0009DC  5006               	movf	??_ADC_ISR+1,w,c
  5993  0009DE  22DA               	addwfc	fsr2h,f,c
  5994  0009E0  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5995  0009E4  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5996                           
  5997                           ;adc.c: 228: ADC_StartConversion(AN_CELL7);
  5998  0009E8  0E00               	movlw	0
  5999  0009EA  EC5C  F00E         	call	_ADC_StartConversion
  6000                           
  6001                           ;adc.c: 229: break;
  6002  0009EE  D01E               	goto	i2l2764
  6003  0009F0                     i2l2762:
  6004  0009F0  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  6005  0009F4  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  6006                           
  6007                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6008                           ; Switch size 1, requested type "space"
  6009                           ; Number of cases is 1, Range of values is 0 to 0
  6010                           ; switch strategies available:
  6011                           ; Name         Instructions Cycles
  6012                           ; simple_byte            4     3 (average)
  6013                           ;	Chosen strategy is simple_byte
  6014  0009F8  5006               	movf	??_ADC_ISR+1,w,c
  6015  0009FA  0A00               	xorlw	0	; case 0
  6016  0009FC  A4D8               	btfss	status,2,c
  6017  0009FE  D016               	goto	i2l2764
  6018                           
  6019                           ; Switch size 1, requested type "space"
  6020                           ; Number of cases is 7, Range of values is 0 to 6
  6021                           ; switch strategies available:
  6022                           ; Name         Instructions Cycles
  6023                           ; simple_byte           22    12 (average)
  6024                           ;	Chosen strategy is simple_byte
  6025  000A00  5005               	movf	??_ADC_ISR,w,c
  6026  000A02  0A00               	xorlw	0	; case 0
  6027  000A04  B4D8               	btfsc	status,2,c
  6028  000A06  D761               	goto	i2l2732
  6029  000A08  0A01               	xorlw	1	; case 1
  6030  000A0A  B4D8               	btfsc	status,2,c
  6031  000A0C  D773               	goto	i2l2736
  6032  000A0E  0A03               	xorlw	3	; case 2
  6033  000A10  B4D8               	btfsc	status,2,c
  6034  000A12  D785               	goto	i2l2740
  6035  000A14  0A01               	xorlw	1	; case 3
  6036  000A16  B4D8               	btfsc	status,2,c
  6037  000A18  D797               	goto	i2l2744
  6038  000A1A  0A07               	xorlw	7	; case 4
  6039  000A1C  B4D8               	btfsc	status,2,c
  6040  000A1E  D7A9               	goto	i2l2748
  6041  000A20  0A01               	xorlw	1	; case 5
  6042  000A22  B4D8               	btfsc	status,2,c
  6043  000A24  D7BB               	goto	i2l2752
  6044  000A26  0A03               	xorlw	3	; case 6
  6045  000A28  B4D8               	btfsc	status,2,c
  6046  000A2A  D7CD               	goto	i2l2756
  6047  000A2C                     i2l2764:
  6048                           
  6049                           ;adc.c: 231: ADC_Buffer_Point++;
  6050  000A2C  4A3D               	infsnz	_ADC_Buffer_Point,f,c
  6051  000A2E  2A3E               	incf	_ADC_Buffer_Point+1,f,c
  6052  000A30  0012               	return	
  6053  000A32                     __end_of_ADC_ISR:
  6054                           	opt stack 0
  6055                           pclatu	equ	0xFFB
  6056                           pclath	equ	0xFFA
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           intcon	equ	0xFF2
  6064                           intcon2	equ	0xFF1
  6065                           postinc0	equ	0xFEE
  6066                           fsr0h	equ	0xFEA
  6067                           fsr0l	equ	0xFE9
  6068                           wreg	equ	0xFE8
  6069                           postinc1	equ	0xFE6
  6070                           postdec1	equ	0xFE5
  6071                           fsr1h	equ	0xFE2
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           postdec2	equ	0xFDD
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function _Set_4051 *****************
  6081 ;; Defined at:
  6082 ;;		line 7 in file "Functions.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  Channel         2    0[COMRAM] int 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;		None
  6087 ;; Return value:  Size  Location     Type
  6088 ;;		None               void
  6089 ;; Registers used:
  6090 ;;		wreg, status,2, status,0
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6096 ;;      Params:         2       0       0       0       0       0       0
  6097 ;;      Locals:         0       0       0       0       0       0       0
  6098 ;;      Temps:          2       0       0       0       0       0       0
  6099 ;;      Totals:         4       0       0       0       0       0       0
  6100 ;;Total ram usage:        4 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; This function calls:
  6103 ;;		Nothing
  6104 ;; This function is called by:
  6105 ;;		_ADC_ISR
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text35
  6110  001C28                     __ptext35:
  6111                           	opt stack 0
  6112  001C28                     _Set_4051:
  6113                           	opt stack 23
  6114                           
  6115                           ;Functions.c: 9: if (Channel & 0x01)
  6116                           
  6117                           ;incstack = 0
  6118  001C28  B001               	btfsc	Set_4051@Channel,0,c
  6119                           
  6120                           ;Functions.c: 10: {
  6121                           ;Functions.c: 11: do { LATA7 = ~LATA7; } while(0);
  6122  001C2A  7E89               	btg	3977,7,c	;volatile
  6123                           
  6124                           ;Functions.c: 12: }
  6125                           ;Functions.c: 13: if ((Channel>>1) & 0x01)
  6126  001C2C  3402               	rlcf	Set_4051@Channel+1,w,c
  6127  001C2E  3002               	rrcf	Set_4051@Channel+1,w,c
  6128  001C30  6E04               	movwf	(??_Set_4051+1)& (0+255),c
  6129  001C32  3001               	rrcf	Set_4051@Channel,w,c
  6130  001C34  6E03               	movwf	??_Set_4051& (0+255),c
  6131  001C36  B003               	btfsc	??_Set_4051,0,c
  6132                           
  6133                           ;Functions.c: 14: {
  6134                           ;Functions.c: 15: do { LATA6 = ~LATA6; } while(0);
  6135  001C38  7C89               	btg	3977,6,c	;volatile
  6136                           
  6137                           ;Functions.c: 16: }
  6138                           ;Functions.c: 17: if ((Channel>>2) & 0x01)
  6139  001C3A  C001  F003         	movff	Set_4051@Channel,??_Set_4051
  6140  001C3E  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
  6141  001C42  3404               	rlcf	??_Set_4051+1,w,c
  6142  001C44  3204               	rrcf	??_Set_4051+1,f,c
  6143  001C46  3203               	rrcf	??_Set_4051,f,c
  6144  001C48  3404               	rlcf	??_Set_4051+1,w,c
  6145  001C4A  3204               	rrcf	??_Set_4051+1,f,c
  6146  001C4C  3203               	rrcf	??_Set_4051,f,c
  6147  001C4E  A003               	btfss	??_Set_4051,0,c
  6148  001C50  0012               	return	
  6149                           
  6150                           ;Functions.c: 18: {
  6151                           ;Functions.c: 19: do { LATC0 = ~LATC0; } while(0);
  6152  001C52  708B               	btg	3979,0,c	;volatile
  6153  001C54  0012               	return	
  6154  001C56                     __end_of_Set_4051:
  6155                           	opt stack 0
  6156                           pclatu	equ	0xFFB
  6157                           pclath	equ	0xFFA
  6158                           tblptru	equ	0xFF8
  6159                           tblptrh	equ	0xFF7
  6160                           tblptrl	equ	0xFF6
  6161                           tablat	equ	0xFF5
  6162                           prodh	equ	0xFF4
  6163                           prodl	equ	0xFF3
  6164                           intcon	equ	0xFF2
  6165                           intcon2	equ	0xFF1
  6166                           postinc0	equ	0xFEE
  6167                           fsr0h	equ	0xFEA
  6168                           fsr0l	equ	0xFE9
  6169                           wreg	equ	0xFE8
  6170                           postinc1	equ	0xFE6
  6171                           postdec1	equ	0xFE5
  6172                           fsr1h	equ	0xFE2
  6173                           fsr1l	equ	0xFE1
  6174                           indf2	equ	0xFDF
  6175                           postinc2	equ	0xFDE
  6176                           postdec2	equ	0xFDD
  6177                           fsr2h	equ	0xFDA
  6178                           fsr2l	equ	0xFD9
  6179                           status	equ	0xFD8
  6180                           
  6181 ;; *************** function _ADC_StartConversion *****************
  6182 ;; Defined at:
  6183 ;;		line 84 in file "mcc_generated_files/adc.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;  channel         1    wreg     enum E8837
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;  channel         1    1[COMRAM] enum E8837
  6188 ;; Return value:  Size  Location     Type
  6189 ;;		None               void
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6197 ;;      Params:         0       0       0       0       0       0       0
  6198 ;;      Locals:         1       0       0       0       0       0       0
  6199 ;;      Temps:          1       0       0       0       0       0       0
  6200 ;;      Totals:         2       0       0       0       0       0       0
  6201 ;;Total ram usage:        2 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; This function calls:
  6204 ;;		Nothing
  6205 ;; This function is called by:
  6206 ;;		_ADC_ISR
  6207 ;;		_Battery_Read
  6208 ;;		_Temp_Read
  6209 ;;		_Current_Read
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text36
  6214  001CB8                     __ptext36:
  6215                           	opt stack 0
  6216  001CB8                     _ADC_StartConversion:
  6217                           	opt stack 22
  6218                           
  6219                           ;incstack = 0
  6220                           ;ADC_StartConversion@channel stored from wreg
  6221  001CB8  6E02               	movwf	ADC_StartConversion@channel,c
  6222                           
  6223                           ;adc.c: 87: ADCON0bits.CHS = channel;
  6224  001CBA  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  6225  001CBE  4601               	rlncf	??_ADC_StartConversion,f,c
  6226  001CC0  4601               	rlncf	??_ADC_StartConversion,f,c
  6227  001CC2  50C2               	movf	4034,w,c	;volatile
  6228  001CC4  1801               	xorwf	??_ADC_StartConversion,w,c
  6229  001CC6  0B83               	andlw	-125
  6230  001CC8  1801               	xorwf	??_ADC_StartConversion,w,c
  6231  001CCA  6EC2               	movwf	4034,c	;volatile
  6232                           
  6233                           ;adc.c: 90: ADCON0bits.ADON = 1;
  6234  001CCC  80C2               	bsf	4034,0,c	;volatile
  6235                           
  6236                           ;adc.c: 94: ADCON0bits.GO_nDONE = 1;
  6237  001CCE  82C2               	bsf	4034,1,c	;volatile
  6238  001CD0  0012               	return	
  6239  001CD2                     __end_of_ADC_StartConversion:
  6240                           	opt stack 0
  6241                           pclatu	equ	0xFFB
  6242                           pclath	equ	0xFFA
  6243                           tblptru	equ	0xFF8
  6244                           tblptrh	equ	0xFF7
  6245                           tblptrl	equ	0xFF6
  6246                           tablat	equ	0xFF5
  6247                           prodh	equ	0xFF4
  6248                           prodl	equ	0xFF3
  6249                           intcon	equ	0xFF2
  6250                           intcon2	equ	0xFF1
  6251                           postinc0	equ	0xFEE
  6252                           fsr0h	equ	0xFEA
  6253                           fsr0l	equ	0xFE9
  6254                           wreg	equ	0xFE8
  6255                           postinc1	equ	0xFE6
  6256                           postdec1	equ	0xFE5
  6257                           fsr1h	equ	0xFE2
  6258                           fsr1l	equ	0xFE1
  6259                           indf2	equ	0xFDF
  6260                           postinc2	equ	0xFDE
  6261                           postdec2	equ	0xFDD
  6262                           fsr2h	equ	0xFDA
  6263                           fsr2l	equ	0xFD9
  6264                           status	equ	0xFD8
  6265                           
  6266 ;; *************** function _ADC_GetConversionResult *****************
  6267 ;; Defined at:
  6268 ;;		line 103 in file "mcc_generated_files/adc.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  2    0[COMRAM] unsigned int 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6282 ;;      Params:         2       0       0       0       0       0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0
  6284 ;;      Temps:          2       0       0       0       0       0       0
  6285 ;;      Totals:         4       0       0       0       0       0       0
  6286 ;;Total ram usage:        4 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; This function calls:
  6289 ;;		Nothing
  6290 ;; This function is called by:
  6291 ;;		_ADC_ISR
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text37
  6296  001D32                     __ptext37:
  6297                           	opt stack 0
  6298  001D32                     _ADC_GetConversionResult:
  6299                           	opt stack 23
  6300                           
  6301                           ;adc.c: 106: return ((ADRESH << 8) + ADRESL);
  6302                           
  6303                           ;incstack = 0
  6304  001D32  50C4               	movf	4036,w,c	;volatile
  6305  001D34  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  6306  001D36  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  6307  001D38  50C3               	movf	4035,w,c	;volatile
  6308  001D3A  2403               	addwf	??_ADC_GetConversionResult,w,c
  6309  001D3C  6E01               	movwf	?_ADC_GetConversionResult,c
  6310  001D3E  0E00               	movlw	0
  6311  001D40  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  6312  001D42  6E02               	movwf	?_ADC_GetConversionResult+1,c
  6313  001D44  0012               	return	
  6314  001D46                     __end_of_ADC_GetConversionResult:
  6315                           	opt stack 0
  6316                           pclatu	equ	0xFFB
  6317                           pclath	equ	0xFFA
  6318                           tblptru	equ	0xFF8
  6319                           tblptrh	equ	0xFF7
  6320                           tblptrl	equ	0xFF6
  6321                           tablat	equ	0xFF5
  6322                           prodh	equ	0xFF4
  6323                           prodl	equ	0xFF3
  6324                           intcon	equ	0xFF2
  6325                           intcon2	equ	0xFF1
  6326                           postinc0	equ	0xFEE
  6327                           fsr0h	equ	0xFEA
  6328                           fsr0l	equ	0xFE9
  6329                           wreg	equ	0xFE8
  6330                           postinc1	equ	0xFE6
  6331                           postdec1	equ	0xFE5
  6332                           fsr1h	equ	0xFE2
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           fsr2h	equ	0xFDA
  6338                           fsr2l	equ	0xFD9
  6339                           status	equ	0xFD8
  6340                           pclatu	equ	0xFFB
  6341                           pclath	equ	0xFFA
  6342                           tblptru	equ	0xFF8
  6343                           tblptrh	equ	0xFF7
  6344                           tblptrl	equ	0xFF6
  6345                           tablat	equ	0xFF5
  6346                           prodh	equ	0xFF4
  6347                           prodl	equ	0xFF3
  6348                           intcon	equ	0xFF2
  6349                           intcon2	equ	0xFF1
  6350                           postinc0	equ	0xFEE
  6351                           fsr0h	equ	0xFEA
  6352                           fsr0l	equ	0xFE9
  6353                           wreg	equ	0xFE8
  6354                           postinc1	equ	0xFE6
  6355                           postdec1	equ	0xFE5
  6356                           fsr1h	equ	0xFE2
  6357                           fsr1l	equ	0xFE1
  6358                           indf2	equ	0xFDF
  6359                           postinc2	equ	0xFDE
  6360                           postdec2	equ	0xFDD
  6361                           fsr2h	equ	0xFDA
  6362                           fsr2l	equ	0xFD9
  6363                           status	equ	0xFD8
  6364                           
  6365                           	psect	rparam
  6366  0000                     pclatu	equ	0xFFB
  6367                           pclath	equ	0xFFA
  6368                           tblptru	equ	0xFF8
  6369                           tblptrh	equ	0xFF7
  6370                           tblptrl	equ	0xFF6
  6371                           tablat	equ	0xFF5
  6372                           prodh	equ	0xFF4
  6373                           prodl	equ	0xFF3
  6374                           intcon	equ	0xFF2
  6375                           intcon2	equ	0xFF1
  6376                           postinc0	equ	0xFEE
  6377                           fsr0h	equ	0xFEA
  6378                           fsr0l	equ	0xFE9
  6379                           wreg	equ	0xFE8
  6380                           postinc1	equ	0xFE6
  6381                           postdec1	equ	0xFE5
  6382                           fsr1h	equ	0xFE2
  6383                           fsr1l	equ	0xFE1
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        0
    BSS         344
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     58      73
    BANK0           160     37     159
    BANK1           256     16     226
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 


Critical Paths under _main in COMRAM

    _Temp_Fault->___ftge
    _Temp_Convert->___ftmul
    _log->___ftmul
    _eval_poly->___ftmul
    _Temp_Filter->___ftmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___ftmul
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Battery_Filter->___ftmul
    ___ftmul->___ftdiv
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Current_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Temp_Convert

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  125283
                                             11 BANK1      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    5842
                                             37 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        13    13      0   75228
                                             35 BANK0      2     2      0
                                              0 BANK1     11    11      0
                        _Temp_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   30367
                                             30 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   15908
                                             18 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6215
                                             18 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   15714
                                             18 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    5873
                                             37 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1032
                                             28 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   38340
                                             20 BANK0      4     4      0
                     _Battery_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4199
                                             34 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2874
                                             30 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   15714
                                             18 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    4698
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4843
                                             49 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5882
                                              6 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2433
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1171
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             3     3      0      66
                                              2 COMRAM     3     3      0
                       _Battery_Read
                       _Current_Read
                      _TMR1_CallBack
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Current_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1105
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___wmul
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___wmul
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Current_Read
       _ADC_StartConversion
     _TMR1_CallBack
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     10      E2       6       88.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     25      9F       4       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3A      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CA       9        0.0%
DATA                 0      0     1CA      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Apr 30 04:14:36 2015

           _eusart1TxBufferRemaining 0049                  ___wmul@multiplicand 0019  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 00EB                         ___ftadd@exp2 00EA  
                       ___ftadd@sign 00E9                                  l920 0AD8  
                                l922 0B00                                  l931 0BEA  
                                l940 0C14                                  l916 0A9E  
                                l951 16DE                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0047  
                                _log 11D0                      __end_of_ADC_ISR 0A32  
                                prod 000FF3                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                      ?_Battery_Filter 0001  
                       ___ftdiv@cntr 002C                         ___ftdiv@sign 0031  
                               l3120 1804                                 l3112 17CE  
                               l3124 181A                                 l3116 17DC  
                               l3204 0C3E                                 l3300 14A2  
                               l3126 1838                                 l3118 17E6  
                               l3214 0C8C                                 l3230 1386  
                               l3302 152E                                 l3128 1842  
                               l3224 135C                                 l3162 0AE6  
                               l3156 0AAC                                 l3244 13C8  
                               l3316 1154                                 l3340 0FE4  
                               l3190 0B98                                 l3254 13FA  
                               l3406 16B8                                 l3184 0B6C  
                               l3168 0AF6                                 l3248 13DE  
                               l2560 1958                                 l3504 0EEA  
                               l3186 0B80                                 l3178 0B38  
                               l3258 1410                                 l3274 1ABA  
                               l3196 0BCC                                 l3188 0B8C  
                               l3380 1654                                 l2556 1928  
                               l3364 123E                                 l3540 1AE6  
                               l3198 0BE0                                 l3454 1628  
                               l2566 1984                                 l3438 17B8  
                               l3286 1890                                 l3358 120C  
                               l3470 19EC                                 l3552 1B0A  
                               l3386 167A                                 l3546 1AF8  
                               ?_log 00F8                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u2511 0A4A                                 u2521 0A6A  
                               u2800 18B8                                 u2721 1342  
                               u2741 136C                                 u2808 18BA  
                               u2921 163E                                 u2905 11E8  
                               u2941 1664                                 _TMR1 000FCE  
                               _WPUB 000F61                                 _main 1ADE  
                       ___ftpack@arg 0017                         ___ftpack@exp 001A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               log@x 00F8                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 00DE                         ___ftmul@sign 00DF  
                  ADC_ISR@ADC_Result 0007                                ??_log 003B  
                   ?_Battery_Convert 0001       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 1D54                                ?_main 01DD  
                    __end_of___ftadd 0CB2                      __end_of___ftdiv 1710  
                    _TMR1_StartTimer 1D60                      __end_of___ftmul 1454  
                              _T1CON 000FCD                      __end_of___ftsub 1B5A  
                              _LATB0 007C50                                _LATB1 007C51  
                              _LATC0 007C58                                _LATB2 007C52  
                              _LATA6 007C4E                                _LATA7 007C4F  
                              _LATD4 007C64                                _LATD5 007C65  
                              _LATD6 007C66                                _LATD7 007C67  
                     __CFG_DEBUG$OFF 000000                                i2l134 1BC6  
                              i2l280 0064                                i2l284 006E  
                              i2l276 004C                                i2l278 0058  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0014  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 1B96                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      ?_Current_Read 0001                     __end_of_TMR1_ISR 1A48  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 0022                                _frexp 1866  
                              _errno 00C4                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001B              __end_of_TMR1_Initialize 1C9E  
                        _Battery_Adc 009C                                tablat 000FF5  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                     __CFG_PBADEN$ON 000000                      __initialization 1BFA  
                        log@exponent 00FB           __end_of_EUSART1_Initialize 1B96  
                       __end_of_main 1B1E                     __end_of_Set_4051 1C56  
                          ??_ADC_ISR 0005          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 003B                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                ?_EUSART1_Transmit_ISR 0001  
                     ??_Current_Read 0003                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 0017                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     __end_of___awtoft 1ADE  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                     __end_of___ftpack 1866  
                             _T1GCON 000FCC                               _RC1REG 000FAE  
                             _RC1STA 000FAB                __size_of_Battery_Read 0018  
                             i2l2700 0780                       __CFG_WDTEN$OFF 000000  
                             i2l2720 084C                               i2l2712 07EC  
                             i2l2706 07B6                               i2l2642 1BC2  
                             i2l2740 091E                               i2l2732 08CA  
                             i2l2716 081C                               i2l2724 085E  
                             i2l2670 0672                               i2l2726 08B2  
                             i2l2582 1A22                               i2l2752 099C  
                             i2l2744 0948                               i2l2736 08F4  
                             i2l2664 063C                               i2l2728 08B6  
                             i2l2656 1BF6                               i2l2648 1BD2  
                             i2l2762 09F0                               i2l2682 06DE  
                             i2l2756 09C6                               i2l2748 0972  
                             i2l2764 0A2C                               i2l2676 06A8  
                             i2l2694 074A                               i2l2688 0714  
                             _RCREG1 000FAE                        ??_Temp_Filter 003B  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1REG 000FAD                               _TX1STA 000FAC  
                             _TXREG1 000FAD                           _Temp_Fault 1988  
                     __CFG_XINST$OFF 000000                               ___ftge 18F8  
            __end_of_TMR1_StartTimer 1D64                               ___wmul 1C56  
                          ??___ftadd 00E6                       __CFG_STVREN$ON 000000  
                          ??___ftdiv 0029                            ??___ftmul 0038  
                          ??___ftsub 003B                               clear_0 1C00  
                             clear_1 1C0C                               clear_2 1C18  
                 __size_of_Temp_Read 0018                ___ftmul@f3_as_product 00DB  
                       _Battery_Read 1D1A                         _Battery_Volt 007E  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    _eusart1RxBuffer 00B0        __size_of_INTERRUPT_Initialize 000C  
              __end_of_TMR1_CallBack 1D66                      _eusart1TxBuffer 00B8  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 1C9E  
                   __end_oflog@coeff 061C                           __accesstop 0060  
            __end_of__initialization 1C1E                           ___ftadd@f1 00E0  
                         ___ftadd@f2 00E3                           ___ftge@ff1 001D  
                         ___ftge@ff2 0020                   ?_SYSTEM_Initialize 0001  
                       eval_poly@res 00F5                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0026                           ___ftdiv@f3 002D  
                         ___awtoft@c 001F                           ___ftmul@f1 0032  
                         ___ftmul@f2 0035                           ___ftsub@f1 00EC  
                         ___ftsub@f2 00EF                  __end_of_Temp_Filter 1060  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0017                            ?_TMR1_ISR 0001  
                     _Current_Aquire 003F                        __end_of_frexp 18F8  
             ??_EUSART1_Transmit_ISR 0001              _ADC_GetConversionResult 1D32  
                   ??_Battery_Filter 003B          __end_of_EUSART1_Receive_ISR 1BFA  
                      ?_Temp_Convert 0001                              ??_frexp 001C  
          __end_of_SYSTEM_Initialize 1CB8                        _eusart1RxHead 0043  
                      _eusart1TxHead 0045                        _eusart1RxTail 0044  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                      _eusart1TxTail 0046                   __size_of_eval_poly 00F2  
                    __CFG_PLLCFG$OFF 000000                    __end_of_Temp_Read 1D02  
                          ?_Set_4051 0001                           __pnvCOMRAM 0047  
              Temp_Convert@steinhart 01DA                          ?_Temp_Fault 0001  
                 __CFG_CCP2MX$PORTC1 000000                 __end_of_Current_Read 1D1A  
                        Temp_Fault@i 0027                  _TempBattery_Current 0178  
                            ?___ftge 001D                              ?___wmul 0017  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0003  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 061E  
                          ?___awtoft 001F                            ?___ftpack 0017  
            __size_of_ADC_Initialize 0018                        Temp_Convert@x 01D8  
             __size_of_Battery_Fault 00AE                      Temp_Fault@fault 0026  
                     Battery_Fault@i 0027                              _OSCCON2 000FD2  
                     ??_Temp_Convert 00FD                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                         ??_Set_4051 0003                          _Temp_Filter 0EF0  
                        _Temp_Aquire 0040                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                              __Lparam 0000  
                    __size_of___ftge 0090                              ___ftadd 0A32  
                            ___ftdiv 162E                      __size_of___wmul 0026  
                            ___ftmul 1332                              ___ftsub 1B1E  
                       __psmallconst 0600            ??_ADC_GetConversionResult 0003  
                            __pcinit 1BFA                           ??___awtoft 0022  
                         ??___ftpack 001C                    __end_of_eval_poly 1546  
                            __ramtop 0600                              __ptext0 1ADE  
                            __ptext1 1988                              __ptext2 0CB2  
                            __ptext3 11D0                              __ptext4 1866  
                            __ptext5 1454                              __ptext6 1B1E  
                            __ptext7 0EF0                              __ptext8 1C9E  
                            __ptext9 1C7C                            _T1CONbits 000FCD  
              _OSCILLATOR_Initialize 1D46                         __size_of_log 0162  
                __size_of_Temp_Fault 006A                   _EUSART1_Initialize 1B5A  
           ??_PIN_MANAGER_Initialize 0017             __size_of_Battery_Convert 00E8  
         __size_of_SYSTEM_Initialize 001A                 end_of_initialization 1C1E  
                ?_EUSART1_Initialize 0001                        __Lmediumconst 0000  
                      _Battery_Fault 1710                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                   Battery_Convert@x 00F0                 ??_EUSART1_Initialize 0017  
                _ADC_StartConversion 1CB8                          _Volt_Aquire 0041  
                     ?_Battery_Fault 0001                __size_of_Current_Read 0018  
                        ___ftdiv@exp 0030                          ___ftmul@exp 00DA  
               ?_ADC_StartConversion 0001                 __end_of_Temp_Convert 0EF0  
       __end_of_INTERRUPT_Initialize 1D60                       __end_of___ftge 1988  
                     __end_of___wmul 1C7C                    __size_of_TMR1_ISR 0056  
                     _ADC_Initialize 1CD2               ?_OSCILLATOR_Initialize 0001  
                start_initialization 1BFA                           eval_poly@d 00EF  
                         eval_poly@n 00F1                           eval_poly@x 00EC  
    __size_of_PIN_MANAGER_Initialize 004E                         _Current_Read 1D02  
                        __end_of_log 1332                           frexp@value 0017  
                  ??_Battery_Convert 00EE                         ??_Temp_Fault 0026  
                  __size_of_Set_4051 002E                            _Temp_DegF 015A  
                   _PrevBattery_Volt 011E                            _Temp_Done 00C0  
                          _Temp_Read 1CEA                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                             ??___ftge 0023  
                           ??___wmul 001B               __end_of_ADC_Initialize 1CEA  
                           ?_ADC_ISR 0001               __size_of_TMR1_CallBack 0002  
                     _eusart1RxCount 0042                    __size_of___awtoft 0048  
                  __size_of___ftpack 00A8                            _Volt_Done 00C2  
              TMR1_ISR@CountCallBack 003B                          __pbssCOMRAM 003B  
      __size_of_EUSART1_Transmit_ISR 0034                        __pcstackBANK0 00DA  
                      __pcstackBANK1 01D2                   __end_of_Temp_Fault 19F2  
                      _PrevTemp_DegF 013C                      ??_Battery_Fault 0026  
       __size_of_EUSART1_Receive_ISR 0030                         ?_Temp_Filter 0001  
                         ?_Temp_Read 0001               _PIN_MANAGER_Initialize 1A48  
                          __pintcode 0008                    _Temp_Convert$1637 01D2  
                  _Temp_Convert$1638 01D5                             ?___ftadd 00E0  
                           ?___ftdiv 0023                             ?___ftmul 0032  
                           ?___ftsub 00EC                         Temp_Filter@x 00EC  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 0009  
                           _BAUD1CON 000FB8                          __smallconst 0600  
           __size_of_TMR1_StartTimer 0004                            _eval_poly 1454  
                     __size_of_frexp 0092                 _INTERRUPT_Initialize 1D54  
                      _TMR1_CallBack 1D64              __size_of_Battery_Filter 0170  
                     ___wmul@product 001B                __size_of_Temp_Convert 023E  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 00A0                             _PIR1bits 000F9E  
                    Battery_Filter@x 00EC                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 19F2  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 0414  
                _PrevBattery_Current 0100                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0017                        ?_Battery_Read 0001  
                         ?_eval_poly 00EC                         _Temp_Convert 0CB2  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                     ?_TMR1_CallBack 0001                             _Set_4051 1C28  
                          frexp@eptr 001A                             __Hrparam 0000  
                        ??_Temp_Read 0003                             _Temp_Adc 00C6  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0017                     __size_of___ftadd 0280  
                   __size_of___ftdiv 00E2                     __size_of___ftmul 0122  
                   __size_of___ftsub 003C          __size_of_EUSART1_Initialize 003C  
                           ___awtoft 1A96                             ___ftpack 17BE  
                     ??_Battery_Read 0003                      _Battery_Convert 1546  
                 Battery_Fault@fault 0026                      _Battery_Current 0060  
                           __ptext10 1D60                             __ptext11 1A48  
                           __ptext20 1A96                             __ptext12 1D46  
                           __ptext21 1060                             __ptext13 1D54  
                         _T1GCONbits 000FCC                             __ptext30 1D02  
                           __ptext22 1C56                             __ptext14 1B5A  
                           __ptext31 1D1A                             __ptext23 1332  
                           __ptext15 1CD2                             __ptext32 1B96  
                           __ptext24 0A32                             __ptext16 1710  
                           __ptext33 1BCA                             __ptext25 17BE  
                           __ptext17 18F8                             __ptext34 061E  
                           __ptext18 1546                             __ptext35 1C28  
                           __ptext27 19F2                             __ptext19 162E  
                           __ptext36 1CB8                             __ptext28 1CEA  
                           __ptext37 1D32                             __ptext29 1D64  
                  ??_TMR1_StartTimer 0017                        __size_of_main 0040  
                       _TmpTemp_DegF 01B4                 __size_of_Temp_Filter 0170  
                         _RC1STAbits 000FAB   __end_of_INTERRUPT_InterruptManager 00A8  
         _INTERRUPT_InterruptManager 0008                             main@argc 01DD  
                           main@argv 01DF                  _EUSART1_Receive_ISR 1BCA  
                           log@coeff 0601                           _INTCONbits 000FF2  
                        ??_eval_poly 00F3               ??_INTERRUPT_Initialize 0017  
                    ??_TMR1_CallBack 0001                             intlevel2 0000  
                     _Battery_Filter 1060                 ?_EUSART1_Receive_ISR 0001  
        __end_of_ADC_StartConversion 1CD2                     _TempBattery_Volt 0196  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 1D46  
       __end_of_EUSART1_Transmit_ISR 1BCA                     ??_ADC_Initialize 0017  
            __end_of_Battery_Convert 162E                    __CFG_T3CMX$PORTC0 000000  
             __end_of_Battery_Filter 11D0                ??_EUSART1_Receive_ISR 0001  
     __end_of_PIN_MANAGER_Initialize 1A96                __end_of_Battery_Fault 17BE  
                  __CFG_FOSC$INTIO67 000000                 __end_of_Battery_Read 1D32  
                    _TMR1_Initialize 1C7C                     _ADC_Buffer_Point 003D  
                    Set_4051@Channel 0001  
