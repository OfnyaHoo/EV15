

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May 19 18:07:33 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           	psect	smallconst
    59  000600                     __psmallconst:
    60                           	opt stack 0
    61  000600  00                 	db	0
    62  000601                     log@coeff:
    63                           	opt stack 0
    64  000601  00                 	db	0
    65  000602  00                 	db	0
    66  000603  00                 	db	0
    67  000604  00                 	db	0
    68  000605  80                 	db	128
    69  000606  3F                 	db	63
    70  000607  F0                 	db	240
    71  000608  FF                 	db	255
    72  000609  BE                 	db	190
    73  00060A  E2                 	db	226
    74  00060B  A9                 	db	169
    75  00060C  3E                 	db	62
    76  00060D  83                 	db	131
    77  00060E  76                 	db	118
    78  00060F  BE                 	db	190
    79  000610  AE                 	db	174
    80  000611  2B                 	db	43
    81  000612  3E                 	db	62
    82  000613  3C                 	db	60
    83  000614  C3                 	db	195
    84  000615  BD                 	db	189
    85  000616  D2                 	db	210
    86  000617  13                 	db	19
    87  000618  3D                 	db	61
    88  000619  78                 	db	120
    89  00061A  D3                 	db	211
    90  00061B  BB                 	db	187
    91  00061C                     __end_oflog@coeff:
    92                           	opt stack 0
    93  00061C                     STR_1:
    94  00061C  73                 	db	115	;'s'
    95  00061D  68                 	db	104	;'h'
    96  00061E  69                 	db	105	;'i'
    97  00061F  74                 	db	116	;'t'
    98  000620  00                 	db	0
    99                           
   100                           ; #config settings
   101  000621  00                 	db	0	; dummy byte at the end
   102  0000                     
   103                           	psect	nvCOMRAM
   104  000047                     __pnvCOMRAM:
   105                           	opt stack 0
   106  000047                     _timer1ReloadVal:
   107                           	opt stack 0
   108  000047                     	ds	2
   109  000049                     _eusart1TxBufferRemaining:
   110                           	opt stack 0
   111  000049                     	ds	1
   112  0000                     _ANSELA	set	3896
   113  0000                     _ANSELB	set	3897
   114  0000                     _ANSELC	set	3898
   115  0000                     _ANSELD	set	3899
   116  0000                     _ANSELE	set	3900
   117  0000                     _TMR1	set	4046
   118  0000                     _ADCON0	set	4034
   119  0000                     _ADCON0bits	set	4034
   120  0000                     _ADCON1	set	4033
   121  0000                     _ADCON2	set	4032
   122  0000                     _ADRESH	set	4036
   123  0000                     _ADRESL	set	4035
   124  0000                     _BAUD1CON	set	4024
   125  0000                     _INTCON2bits	set	4081
   126  0000                     _INTCONbits	set	4082
   127  0000                     _IPR1bits	set	3999
   128  0000                     _LATA	set	3977
   129  0000                     _LATB	set	3978
   130  0000                     _LATC	set	3979
   131  0000                     _LATD	set	3980
   132  0000                     _LATE	set	3981
   133  0000                     _OSCCON	set	4051
   134  0000                     _OSCCON2	set	4050
   135  0000                     _OSCTUNE	set	3995
   136  0000                     _PIE1bits	set	3997
   137  0000                     _PIR1bits	set	3998
   138  0000                     _RC1REG	set	4014
   139  0000                     _RC1STA	set	4011
   140  0000                     _RC1STAbits	set	4011
   141  0000                     _RCONbits	set	4048
   142  0000                     _RCREG1	set	4014
   143  0000                     _SPBRG1	set	4015
   144  0000                     _SPBRGH1	set	4016
   145  0000                     _T1CON	set	4045
   146  0000                     _T1CONbits	set	4045
   147  0000                     _T1GCON	set	4044
   148  0000                     _T1GCONbits	set	4044
   149  0000                     _TMR1H	set	4047
   150  0000                     _TMR1L	set	4046
   151  0000                     _TRISA	set	3986
   152  0000                     _TRISB	set	3987
   153  0000                     _TRISC	set	3988
   154  0000                     _TRISD	set	3989
   155  0000                     _TRISE	set	3990
   156  0000                     _TX1REG	set	4013
   157  0000                     _TX1STA	set	4012
   158  0000                     _TXREG1	set	4013
   159  0000                     _WPUB	set	3937
   160  0000                     _LATA4	set	31820
   161  0000                     _LATA6	set	31822
   162  0000                     _LATA7	set	31823
   163  0000                     _LATB0	set	31824
   164  0000                     _LATB1	set	31825
   165  0000                     _LATB2	set	31826
   166  0000                     _LATC0	set	31832
   167  0000                     _LATD4	set	31844
   168  0000                     _LATD5	set	31845
   169  0000                     _LATD6	set	31846
   170  0000                     _LATD7	set	31847
   171                           
   172                           	psect	cinit
   173  001C12                     __pcinit:
   174                           	opt stack 0
   175  001C12                     start_initialization:
   176                           	opt stack 0
   177  001C12                     __initialization:
   178                           	opt stack 0
   179                           
   180                           ; Clear objects allocated to BANK1 (210 bytes)
   181  001C12  EE01  F000         	lfsr	0,__pbssBANK1
   182  001C16  0ED2               	movlw	210
   183  001C18                     clear_0:
   184  001C18  6AEE               	clrf	postinc0,c
   185  001C1A  06E8               	decf	wreg,f,c
   186  001C1C  E1FD               	bnz	clear_0
   187                           
   188                           ; Clear objects allocated to BANK0 (122 bytes)
   189  001C1E  EE00  F060         	lfsr	0,__pbssBANK0
   190  001C22  0E7A               	movlw	122
   191  001C24                     clear_1:
   192  001C24  6AEE               	clrf	postinc0,c
   193  001C26  06E8               	decf	wreg,f,c
   194  001C28  E1FD               	bnz	clear_1
   195                           
   196                           ; Clear objects allocated to COMRAM (12 bytes)
   197  001C2A  EE00  F03B         	lfsr	0,__pbssCOMRAM
   198  001C2E  0E0C               	movlw	12
   199  001C30                     clear_2:
   200  001C30  6AEE               	clrf	postinc0,c
   201  001C32  06E8               	decf	wreg,f,c
   202  001C34  E1FD               	bnz	clear_2
   203  001C36                     end_of_initialization:
   204                           	opt stack 0
   205  001C36                     __end_of__initialization:
   206                           	opt stack 0
   207  001C36  0E00               	movlw	low (__Lmediumconst shr (0+16))
   208  001C38  6EF8               	movwf	tblptru,c
   209  001C3A  0100               	movlb	0
   210  001C3C  EFE3  F00C         	goto	_main	;jump to C main() function
   211                           tblptru	equ	0xFF8
   212                           postinc0	equ	0xFEE
   213                           wreg	equ	0xFE8
   214                           
   215                           	psect	bssCOMRAM
   216  00003B                     __pbssCOMRAM:
   217                           	opt stack 0
   218  00003B                     TMR1_ISR@CountCallBack:
   219                           	opt stack 0
   220  00003B                     	ds	2
   221  00003D                     _ADC_Buffer_Point:
   222                           	opt stack 0
   223  00003D                     	ds	2
   224  00003F                     _Current_Aquire:
   225                           	opt stack 0
   226  00003F                     	ds	1
   227  000040                     _Temp_Aquire:
   228                           	opt stack 0
   229  000040                     	ds	1
   230  000041                     _Volt_Aquire:
   231                           	opt stack 0
   232  000041                     	ds	1
   233  000042                     _eusart1RxCount:
   234                           	opt stack 0
   235  000042                     	ds	1
   236  000043                     _eusart1RxHead:
   237                           	opt stack 0
   238  000043                     	ds	1
   239  000044                     _eusart1RxTail:
   240                           	opt stack 0
   241  000044                     	ds	1
   242  000045                     _eusart1TxHead:
   243                           	opt stack 0
   244  000045                     	ds	1
   245  000046                     _eusart1TxTail:
   246                           	opt stack 0
   247  000046                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           
   252                           	psect	bssBANK0
   253  000060                     __pbssBANK0:
   254                           	opt stack 0
   255  000060                     _Battery_Current:
   256                           	opt stack 0
   257  000060                     	ds	30
   258  00007E                     _Battery_Volt:
   259                           	opt stack 0
   260  00007E                     	ds	30
   261  00009C                     _Battery_Adc:
   262                           	opt stack 0
   263  00009C                     	ds	20
   264  0000B0                     _eusart1RxBuffer:
   265                           	opt stack 0
   266  0000B0                     	ds	8
   267  0000B8                     _eusart1TxBuffer:
   268                           	opt stack 0
   269  0000B8                     	ds	8
   270  0000C0                     _Temp_Done:
   271                           	opt stack 0
   272  0000C0                     	ds	2
   273  0000C2                     _Volt_Done:
   274                           	opt stack 0
   275  0000C2                     	ds	2
   276  0000C4                     _errno:
   277                           	opt stack 0
   278  0000C4                     	ds	2
   279  0000C6                     _Temp_Adc:
   280                           	opt stack 0
   281  0000C6                     	ds	20
   282                           tblptru	equ	0xFF8
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	bssBANK1
   287  000100                     __pbssBANK1:
   288                           	opt stack 0
   289  000100                     _PrevBattery_Current:
   290                           	opt stack 0
   291  000100                     	ds	30
   292  00011E                     _PrevBattery_Volt:
   293                           	opt stack 0
   294  00011E                     	ds	30
   295  00013C                     _PrevTemp_DegF:
   296                           	opt stack 0
   297  00013C                     	ds	30
   298  00015A                     _Temp_DegF:
   299                           	opt stack 0
   300  00015A                     	ds	30
   301  000178                     _TempBattery_Current:
   302                           	opt stack 0
   303  000178                     	ds	30
   304  000196                     _TempBattery_Volt:
   305                           	opt stack 0
   306  000196                     	ds	30
   307  0001B4                     _TmpTemp_DegF:
   308                           	opt stack 0
   309  0001B4                     	ds	30
   310                           tblptru	equ	0xFF8
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	cstackBANK1
   315  0001D2                     __pcstackBANK1:
   316                           	opt stack 0
   317  0001D2                     _Temp_Convert$1676:
   318                           	opt stack 0
   319                           
   320                           ; 3 bytes @ 0x0
   321  0001D2                     	ds	3
   322  0001D5                     _Temp_Convert$1677:
   323                           	opt stack 0
   324                           
   325                           ; 3 bytes @ 0x3
   326  0001D5                     	ds	3
   327  0001D8                     Temp_Convert@x:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x6
   331  0001D8                     	ds	2
   332  0001DA                     Temp_Convert@steinhart:
   333                           	opt stack 0
   334                           
   335                           ; 3 bytes @ 0x8
   336  0001DA                     	ds	3
   337  0001DD                     
   338                           ; 2 bytes @ 0xB
   339  0001DD                     	ds	2
   340  0001DF                     
   341                           ; 3 bytes @ 0xD
   342  0001DF                     	ds	3
   343                           tblptru	equ	0xFF8
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           
   347                           	psect	cstackBANK0
   348  0000DA                     __pcstackBANK0:
   349                           	opt stack 0
   350  0000DA                     ___ftmul@exp:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x0
   354  0000DA                     	ds	1
   355  0000DB                     ___ftmul@f3_as_product:
   356                           	opt stack 0
   357                           
   358                           ; 3 bytes @ 0x1
   359  0000DB                     	ds	3
   360  0000DE                     ___ftmul@cntr:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x4
   364  0000DE                     	ds	1
   365  0000DF                     ___ftmul@sign:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x5
   369  0000DF                     	ds	1
   370  0000E0                     ?___ftadd:
   371                           	opt stack 0
   372  0000E0                     ___ftadd@f1:
   373                           	opt stack 0
   374                           
   375                           ; 3 bytes @ 0x6
   376  0000E0                     	ds	3
   377  0000E3                     ___ftadd@f2:
   378                           	opt stack 0
   379                           
   380                           ; 3 bytes @ 0x9
   381  0000E3                     	ds	3
   382  0000E6                     ??___ftadd:
   383                           
   384                           ; 0 bytes @ 0xC
   385  0000E6                     	ds	3
   386  0000E9                     ___ftadd@sign:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0xF
   390  0000E9                     	ds	1
   391  0000EA                     ___ftadd@exp2:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x10
   395  0000EA                     	ds	1
   396  0000EB                     ___ftadd@exp1:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x11
   400  0000EB                     	ds	1
   401  0000EC                     ?___ftsub:
   402                           	opt stack 0
   403  0000EC                     ?_eval_poly:
   404                           	opt stack 0
   405  0000EC                     Battery_Filter@x:
   406                           	opt stack 0
   407  0000EC                     Temp_Filter@x:
   408                           	opt stack 0
   409  0000EC                     ___ftsub@f1:
   410                           	opt stack 0
   411  0000EC                     eval_poly@x:
   412                           	opt stack 0
   413                           
   414                           ; 3 bytes @ 0x12
   415  0000EC                     	ds	2
   416  0000EE                     Battery_Convert@x:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x14
   420  0000EE                     	ds	1
   421  0000EF                     eval_poly@d:
   422                           	opt stack 0
   423  0000EF                     ___ftsub@f2:
   424                           	opt stack 0
   425                           
   426                           ; 3 bytes @ 0x15
   427  0000EF                     	ds	2
   428  0000F1                     eval_poly@n:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x17
   432  0000F1                     	ds	2
   433  0000F3                     ??_eval_poly:
   434                           
   435                           ; 0 bytes @ 0x19
   436  0000F3                     	ds	2
   437  0000F5                     eval_poly@res:
   438                           	opt stack 0
   439                           
   440                           ; 3 bytes @ 0x1B
   441  0000F5                     	ds	3
   442  0000F8                     ?_log:
   443                           	opt stack 0
   444  0000F8                     log@x:
   445                           	opt stack 0
   446                           
   447                           ; 3 bytes @ 0x1E
   448  0000F8                     	ds	3
   449  0000FB                     log@exponent:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x21
   453  0000FB                     	ds	2
   454                           tblptru	equ	0xFF8
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           
   458                           	psect	cstackCOMRAM
   459  000001                     __pcstackCOMRAM:
   460                           	opt stack 0
   461  000001                     ??_ADC_StartConversion:
   462  000001                     ?_ADC_GetConversionResult:
   463                           	opt stack 0
   464  000001                     Set_4051@Channel:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x0
   468  000001                     	ds	1
   469  000002                     ADC_StartConversion@channel:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x1
   473  000002                     	ds	1
   474  000003                     ??_Set_4051:
   475  000003                     ??_ADC_GetConversionResult:
   476                           
   477                           ; 0 bytes @ 0x2
   478  000003                     	ds	2
   479  000005                     ??_ADC_ISR:
   480                           
   481                           ; 0 bytes @ 0x4
   482  000005                     	ds	2
   483  000007                     ADC_ISR@ADC_Result:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x6
   487  000007                     	ds	2
   488  000009                     ??_INTERRUPT_InterruptManager:
   489                           
   490                           ; 0 bytes @ 0x8
   491  000009                     	ds	14
   492  000017                     ?___wmul:
   493                           	opt stack 0
   494  000017                     ?___ftpack:
   495                           	opt stack 0
   496  000017                     ?_frexp:
   497                           	opt stack 0
   498  000017                     EUSART1_Write@txData:
   499                           	opt stack 0
   500  000017                     ___wmul@multiplier:
   501                           	opt stack 0
   502  000017                     ___ftpack@arg:
   503                           	opt stack 0
   504  000017                     frexp@value:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0x16
   508  000017                     	ds	1
   509  000018                     putch@txData:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x17
   513  000018                     	ds	1
   514  000019                     ?_printf:
   515                           	opt stack 0
   516  000019                     printf@f:
   517                           	opt stack 0
   518  000019                     ___wmul@multiplicand:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x18
   522  000019                     	ds	1
   523  00001A                     ___ftpack@exp:
   524                           	opt stack 0
   525  00001A                     frexp@eptr:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x19
   529  00001A                     	ds	1
   530  00001B                     ___ftpack@sign:
   531                           	opt stack 0
   532  00001B                     printf@ap:
   533                           	opt stack 0
   534  00001B                     ___wmul@product:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x1A
   538  00001B                     	ds	1
   539  00001C                     ??___ftpack:
   540  00001C                     ??_frexp:
   541                           
   542                           ; 0 bytes @ 0x1B
   543  00001C                     	ds	1
   544  00001D                     printf@c:
   545                           	opt stack 0
   546  00001D                     ___ftge@ff1:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x1C
   550  00001D                     	ds	2
   551  00001F                     ?___awtoft:
   552                           	opt stack 0
   553  00001F                     ___awtoft@c:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x1E
   557  00001F                     	ds	1
   558  000020                     ___ftge@ff2:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x1F
   562  000020                     	ds	2
   563  000022                     ___awtoft@sign:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x21
   567  000022                     	ds	1
   568  000023                     ??___ftge:
   569  000023                     ?___ftdiv:
   570                           	opt stack 0
   571  000023                     ___ftdiv@f1:
   572                           	opt stack 0
   573                           
   574                           ; 3 bytes @ 0x22
   575  000023                     	ds	3
   576  000026                     Battery_Fault@fault:
   577                           	opt stack 0
   578  000026                     Temp_Fault@fault:
   579                           	opt stack 0
   580  000026                     ___ftdiv@f2:
   581                           	opt stack 0
   582                           
   583                           ; 3 bytes @ 0x25
   584  000026                     	ds	1
   585  000027                     Battery_Fault@i:
   586                           	opt stack 0
   587  000027                     Temp_Fault@i:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x26
   591  000027                     	ds	2
   592  000029                     ??___ftdiv:
   593                           
   594                           ; 0 bytes @ 0x28
   595  000029                     	ds	3
   596  00002C                     ___ftdiv@cntr:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x2B
   600  00002C                     	ds	1
   601  00002D                     ___ftdiv@f3:
   602                           	opt stack 0
   603                           
   604                           ; 3 bytes @ 0x2C
   605  00002D                     	ds	3
   606  000030                     ___ftdiv@exp:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x2F
   610  000030                     	ds	1
   611  000031                     ___ftdiv@sign:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x30
   615  000031                     	ds	1
   616  000032                     ?___ftmul:
   617                           	opt stack 0
   618  000032                     ___ftmul@f1:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x31
   622  000032                     	ds	3
   623  000035                     ___ftmul@f2:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x34
   627  000035                     	ds	3
   628  000038                     ??___ftmul:
   629                           
   630                           ; 0 bytes @ 0x37
   631  000038                     	ds	3
   632  00003B                     tblptru	equ	0xFF8
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           
   636                           ; 0 bytes @ 0x3A
   637 ;;
   638 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   639 ;;
   640 ;; *************** function _main *****************
   641 ;; Defined at:
   642 ;;		line 32 in file "Main.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;  argc            2   11[BANK1 ] int 
   645 ;;  argv            3   13[BANK1 ] PTR PTR unsigned char 
   646 ;; Auto vars:     Size  Location     Type
   647 ;;		None
   648 ;; Return value:  Size  Location     Type
   649 ;;                  2   11[BANK1 ] int 
   650 ;; Registers used:
   651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   657 ;;      Params:         0       0       5       0       0       0       0
   658 ;;      Locals:         0       0       0       0       0       0       0
   659 ;;      Temps:          0       0       0       0       0       0       0
   660 ;;      Totals:         0       0       5       0       0       0       0
   661 ;;Total ram usage:        5 bytes
   662 ;; Hardware stack levels required when called:    9
   663 ;; This function calls:
   664 ;;		_Battery_Convert
   665 ;;		_Battery_Fault
   666 ;;		_SYSTEM_Initialize
   667 ;;		_Temp_Convert
   668 ;;		_Temp_Fault
   669 ;;		_printf
   670 ;; This function is called by:
   671 ;;		Startup code after reset
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           	psect	text0
   676  0019C6                     __ptext0:
   677                           	opt stack 0
   678  0019C6                     _main:
   679                           	opt stack 22
   680                           
   681                           ;Main.c: 34: SYSTEM_Initialize();
   682                           
   683                           ;incstack = 0
   684  0019C6  EC5B  F00E         	call	_SYSTEM_Initialize	;wreg free
   685                           
   686                           ;Main.c: 53: (INTCONbits.GIE = 1);
   687  0019CA  8EF2               	bsf	intcon,7,c	;volatile
   688                           
   689                           ;Main.c: 56: (INTCONbits.PEIE = 1);
   690  0019CC  8CF2               	bsf	intcon,6,c	;volatile
   691  0019CE  D000               	goto	l3608
   692  0019D0                     l3608:
   693                           
   694                           ;Main.c: 66: {
   695                           ;Main.c: 67: if (Temp_Done)
   696  0019D0  0100               	movlb	0	; () banked
   697  0019D2  51C0               	movf	_Temp_Done& (0+255),w,b
   698  0019D4  0100               	movlb	0	; () banked
   699  0019D6  11C1               	iorwf	(_Temp_Done+1)& (0+255),w,b
   700  0019D8  B4D8               	btfsc	status,2,c
   701  0019DA  D005               	goto	l3614
   702                           
   703                           ; BSR set to: 0
   704                           ;Main.c: 68: {
   705                           ;Main.c: 69: Temp_Convert();
   706  0019DC  EC19  F006         	call	_Temp_Convert	;wreg free
   707                           
   708                           ;Main.c: 70: Temp_Fault();
   709  0019E0  EC7C  F00C         	call	_Temp_Fault	;wreg free
   710  0019E4  D000               	goto	l3614
   711  0019E6                     l3614:
   712                           
   713                           ;Main.c: 71: }
   714                           ;Main.c: 72: if (Volt_Done)
   715  0019E6  0100               	movlb	0	; () banked
   716  0019E8  51C2               	movf	_Volt_Done& (0+255),w,b
   717  0019EA  0100               	movlb	0	; () banked
   718  0019EC  11C3               	iorwf	(_Volt_Done+1)& (0+255),w,b
   719  0019EE  B4D8               	btfsc	status,2,c
   720  0019F0  D00B               	goto	l3622
   721                           
   722                           ; BSR set to: 0
   723                           ;Main.c: 73: {
   724                           ;Main.c: 74: Battery_Convert();
   725  0019F2  ECBF  F00A         	call	_Battery_Convert	;wreg free
   726                           
   727                           ;Main.c: 75: Battery_Fault();
   728  0019F6  EC90  F00B         	call	_Battery_Fault	;wreg free
   729                           
   730                           ;Main.c: 76: printf("shit");
   731  0019FA  0E1C               	movlw	low STR_1
   732  0019FC  6E19               	movwf	printf@f,c
   733  0019FE  0E06               	movlw	high STR_1
   734  001A00  6E1A               	movwf	printf@f+1,c
   735  001A02  EC20  F00E         	call	_printf	;wreg free
   736  001A06  D000               	goto	l3622
   737  001A08                     l3622:
   738                           
   739                           ;Main.c: 77: }
   740                           ;Main.c: 78: if (Volt_Done)
   741  001A08  0100               	movlb	0	; () banked
   742  001A0A  51C2               	movf	_Volt_Done& (0+255),w,b
   743  001A0C  0100               	movlb	0	; () banked
   744  001A0E  11C3               	iorwf	(_Volt_Done+1)& (0+255),w,b
   745  001A10  B4D8               	btfsc	status,2,c
   746  001A12  D7DE               	goto	l3608
   747                           
   748                           ; BSR set to: 0
   749                           ;Main.c: 79: {
   750                           ;Main.c: 80: Battery_Convert();
   751  001A14  ECBF  F00A         	call	_Battery_Convert	;wreg free
   752                           
   753                           ;Main.c: 81: Battery_Fault();
   754  001A18  EC90  F00B         	call	_Battery_Fault	;wreg free
   755  001A1C  D7D9               	goto	l3608
   756                           
   757                           ;Main.c: 82: }
   758                           ;Main.c: 83: }
   759                           ;Main.c: 84: return (0);
   760                           ;	Return value of _main is never used
   761  001A1E  EF55  F000         	goto	start
   762  001A22                     __end_of_main:
   763                           	opt stack 0
   764                           tblptru	equ	0xFF8
   765                           intcon	equ	0xFF2
   766                           postinc0	equ	0xFEE
   767                           wreg	equ	0xFE8
   768                           status	equ	0xFD8
   769                           
   770 ;; *************** function _printf *****************
   771 ;; Defined at:
   772 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;  f               2   24[COMRAM] PTR const unsigned char 
   775 ;;		 -> STR_1(5), 
   776 ;; Auto vars:     Size  Location     Type
   777 ;;  tmpval          4    0        struct .
   778 ;;  cp              3    0        PTR const unsigned char 
   779 ;;  ap              2   26[COMRAM] PTR void [1]
   780 ;;		 -> ?_printf(2), 
   781 ;;  len             2    0        unsigned int 
   782 ;;  val             2    0        unsigned int 
   783 ;;  c               1   28[COMRAM] char 
   784 ;;  flag            1    0        unsigned char 
   785 ;;  prec            1    0        char 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  2   24[COMRAM] int 
   788 ;; Registers used:
   789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   795 ;;      Params:         2       0       0       0       0       0       0
   796 ;;      Locals:         3       0       0       0       0       0       0
   797 ;;      Temps:          0       0       0       0       0       0       0
   798 ;;      Totals:         5       0       0       0       0       0       0
   799 ;;Total ram usage:        5 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; Hardware stack levels required when called:    6
   802 ;; This function calls:
   803 ;;		_putch
   804 ;; This function is called by:
   805 ;;		_main
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text1
   810  001C40                     __ptext1:
   811                           	opt stack 0
   812  001C40                     _printf:
   813                           	opt stack 24
   814                           
   815                           ;doprnt.c: 466: va_list ap;
   816                           ;doprnt.c: 499: signed char c;
   817                           ;doprnt.c: 506: signed char prec;
   818                           ;doprnt.c: 508: unsigned char flag;
   819                           ;doprnt.c: 523: union {
   820                           ;doprnt.c: 524: unsigned long vd;
   821                           ;doprnt.c: 525: double integ;
   822                           ;doprnt.c: 526: } tmpval;
   823                           ;doprnt.c: 528: unsigned int val;
   824                           ;doprnt.c: 529: unsigned len;
   825                           ;doprnt.c: 530: const char * cp;
   826                           ;doprnt.c: 533: *ap = __va_start();
   827                           
   828                           ;incstack = 0
   829  001C40  0E1B               	movlw	low (?_printf+2)
   830  001C42  6E1B               	movwf	printf@ap,c
   831  001C44  0E00               	movlw	high (?_printf+2)
   832  001C46  6E1C               	movwf	printf@ap+1,c
   833                           
   834                           ;doprnt.c: 536: while(c = *f++) {
   835  001C48  D004               	goto	l2926
   836  001C4A                     l2924:
   837                           
   838                           ;doprnt.c: 540: {
   839                           ;doprnt.c: 541: (putch(c) );
   840  001C4A  501D               	movf	printf@c,w,c
   841  001C4C  ECBD  F00E         	call	_putch
   842                           
   843                           ;doprnt.c: 542: continue;
   844  001C50  D000               	goto	l2926
   845  001C52                     l2926:
   846  001C52  C019  FFF6         	movff	printf@f,tblptrl
   847  001C56  C01A  FFF7         	movff	printf@f+1,tblptrh
   848  001C5A  4A19               	infsnz	printf@f,f,c
   849  001C5C  2A1A               	incf	printf@f+1,f,c
   850  001C5E                     	if	0	;tblptru may be non-zero
   851  001C5E                     	endif
   852  001C5E                     	if	0	;tblptru may be non-zero
   853  001C5E                     	endif
   854  001C5E  0008               	tblrd		*
   855  001C60  CFF5 F01D          	movff	tablat,printf@c
   856  001C64  501D               	movf	printf@c,w,c
   857  001C66  A4D8               	btfss	status,2,c
   858  001C68  D7F0               	goto	l2924
   859                           
   860                           ;doprnt.c: 1469: }
   861                           ;doprnt.c: 1533: }
   862                           ;doprnt.c: 1540: return 0;
   863                           ;	Return value of _printf is never used
   864  001C6A  0012               	return		;funcret
   865  001C6C                     __end_of_printf:
   866                           	opt stack 0
   867                           tblptru	equ	0xFF8
   868                           tblptrh	equ	0xFF7
   869                           tblptrl	equ	0xFF6
   870                           tablat	equ	0xFF5
   871                           intcon	equ	0xFF2
   872                           postinc0	equ	0xFEE
   873                           wreg	equ	0xFE8
   874                           status	equ	0xFD8
   875                           
   876 ;; *************** function _putch *****************
   877 ;; Defined at:
   878 ;;		line 168 in file "mcc_generated_files/eusart1.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;  txData          1    wreg     unsigned char 
   881 ;; Auto vars:     Size  Location     Type
   882 ;;  txData          1   23[COMRAM] unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;		None               void
   885 ;; Registers used:
   886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   892 ;;      Params:         0       0       0       0       0       0       0
   893 ;;      Locals:         1       0       0       0       0       0       0
   894 ;;      Temps:          0       0       0       0       0       0       0
   895 ;;      Totals:         1       0       0       0       0       0       0
   896 ;;Total ram usage:        1 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; Hardware stack levels required when called:    5
   899 ;; This function calls:
   900 ;;		_EUSART1_Write
   901 ;; This function is called by:
   902 ;;		_printf
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text2
   907  001D7A                     __ptext2:
   908                           	opt stack 0
   909  001D7A                     _putch:
   910                           	opt stack 24
   911                           
   912                           ;incstack = 0
   913                           ;putch@txData stored from wreg
   914  001D7A  6E18               	movwf	putch@txData,c
   915                           
   916                           ;eusart1.c: 170: EUSART1_Write(txData);
   917  001D7C  5018               	movf	putch@txData,w,c
   918  001D7E  EC60  F00D         	call	_EUSART1_Write
   919  001D82  0012               	return		;funcret
   920  001D84                     __end_of_putch:
   921                           	opt stack 0
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           intcon	equ	0xFF2
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           status	equ	0xFD8
   930                           
   931 ;; *************** function _EUSART1_Write *****************
   932 ;; Defined at:
   933 ;;		line 140 in file "mcc_generated_files/eusart1.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;  txData          1    wreg     unsigned char 
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  txData          1   22[COMRAM] unsigned char 
   938 ;; Return value:  Size  Location     Type
   939 ;;		None               void
   940 ;; Registers used:
   941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   947 ;;      Params:         0       0       0       0       0       0       0
   948 ;;      Locals:         1       0       0       0       0       0       0
   949 ;;      Temps:          0       0       0       0       0       0       0
   950 ;;      Totals:         1       0       0       0       0       0       0
   951 ;;Total ram usage:        1 bytes
   952 ;; Hardware stack levels used:    1
   953 ;; Hardware stack levels required when called:    4
   954 ;; This function calls:
   955 ;;		Nothing
   956 ;; This function is called by:
   957 ;;		_putch
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text3
   962  001AC0                     __ptext3:
   963                           	opt stack 0
   964  001AC0                     _EUSART1_Write:
   965                           	opt stack 24
   966                           
   967                           ;incstack = 0
   968                           ;EUSART1_Write@txData stored from wreg
   969  001AC0  6E17               	movwf	EUSART1_Write@txData,c
   970                           
   971                           ;eusart1.c: 142: while(0 == eusart1TxBufferRemaining)
   972  001AC2  D000               	goto	l2390
   973  001AC4                     l2390:
   974  001AC4  5049               	movf	_eusart1TxBufferRemaining,w,c	;volatile
   975  001AC6  B4D8               	btfsc	status,2,c
   976  001AC8  D7FD               	goto	l2390
   977                           
   978                           ;eusart1.c: 144: }
   979                           ;eusart1.c: 146: if(0 == PIE1bits.TX1IE)
   980  001ACA  B89D               	btfsc	3997,4,c	;volatile
   981  001ACC  D003               	goto	l126
   982                           
   983                           ;eusart1.c: 147: {
   984                           ;eusart1.c: 148: TX1REG = txData;
   985  001ACE  C017  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
   986                           
   987                           ;eusart1.c: 149: }
   988  001AD2  D014               	goto	l2404
   989  001AD4                     l126:
   990                           
   991                           ;eusart1.c: 150: else
   992                           ;eusart1.c: 151: {
   993                           ;eusart1.c: 152: PIE1bits.TX1IE = 0;
   994  001AD4  989D               	bcf	3997,4,c	;volatile
   995                           
   996                           ;eusart1.c: 153: eusart1TxBuffer[eusart1TxHead++] = txData;
   997  001AD6  5045               	movf	_eusart1TxHead,w,c
   998  001AD8  0D01               	mullw	1
   999  001ADA  0EB8               	movlw	low _eusart1TxBuffer
  1000  001ADC  24F3               	addwf	prodl,w,c
  1001  001ADE  6ED9               	movwf	fsr2l,c
  1002  001AE0  0E00               	movlw	high _eusart1TxBuffer
  1003  001AE2  20F4               	addwfc	prodh,w,c
  1004  001AE4  6EDA               	movwf	fsr2h,c
  1005  001AE6  C017  FFDF         	movff	EUSART1_Write@txData,indf2
  1006  001AEA  2A45               	incf	_eusart1TxHead,f,c
  1007                           
  1008                           ;eusart1.c: 154: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  1009  001AEC  0E07               	movlw	7
  1010  001AEE  6445               	cpfsgt	_eusart1TxHead,c
  1011  001AF0  D003               	goto	l2402
  1012                           
  1013                           ;eusart1.c: 155: {
  1014                           ;eusart1.c: 156: eusart1TxHead = 0;
  1015  001AF2  0E00               	movlw	0
  1016  001AF4  6E45               	movwf	_eusart1TxHead,c
  1017  001AF6  D000               	goto	l2402
  1018  001AF8                     l2402:
  1019                           
  1020                           ;eusart1.c: 157: }
  1021                           ;eusart1.c: 158: eusart1TxBufferRemaining--;
  1022  001AF8  0649               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1023  001AFA  D000               	goto	l2404
  1024  001AFC                     l2404:
  1025                           
  1026                           ;eusart1.c: 159: }
  1027                           ;eusart1.c: 160: PIE1bits.TX1IE = 1;
  1028  001AFC  889D               	bsf	3997,4,c	;volatile
  1029  001AFE  0012               	return		;funcret
  1030  001B00                     __end_of_EUSART1_Write:
  1031                           	opt stack 0
  1032                           tblptru	equ	0xFF8
  1033                           tblptrh	equ	0xFF7
  1034                           tblptrl	equ	0xFF6
  1035                           tablat	equ	0xFF5
  1036                           prodh	equ	0xFF4
  1037                           prodl	equ	0xFF3
  1038                           intcon	equ	0xFF2
  1039                           postinc0	equ	0xFEE
  1040                           wreg	equ	0xFE8
  1041                           indf2	equ	0xFDF
  1042                           fsr2h	equ	0xFDA
  1043                           fsr2l	equ	0xFD9
  1044                           status	equ	0xFD8
  1045                           
  1046 ;; *************** function _Temp_Fault *****************
  1047 ;; Defined at:
  1048 ;;		line 12 in file "Tempeture.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;  i               2   38[COMRAM] int 
  1053 ;;  fault           1   37[COMRAM] unsigned char 
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      unsigned char 
  1056 ;; Registers used:
  1057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1063 ;;      Params:         0       0       0       0       0       0       0
  1064 ;;      Locals:         3       0       0       0       0       0       0
  1065 ;;      Temps:          0       0       0       0       0       0       0
  1066 ;;      Totals:         3       0       0       0       0       0       0
  1067 ;;Total ram usage:        3 bytes
  1068 ;; Hardware stack levels used:    1
  1069 ;; Hardware stack levels required when called:    5
  1070 ;; This function calls:
  1071 ;;		___ftge
  1072 ;;		___wmul
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text4
  1079  0018F8                     __ptext4:
  1080                           	opt stack 0
  1081  0018F8                     _Temp_Fault:
  1082                           	opt stack 25
  1083                           
  1084                           ;Tempeture.c: 15: char fault = 0;
  1085                           
  1086                           ;incstack = 0
  1087  0018F8  0E00               	movlw	0
  1088  0018FA  6E26               	movwf	Temp_Fault@fault,c
  1089                           
  1090                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
  1091  0018FC  0E00               	movlw	0
  1092  0018FE  6E28               	movwf	Temp_Fault@i+1,c
  1093  001900  0E00               	movlw	0
  1094  001902  6E27               	movwf	Temp_Fault@i,c
  1095  001904                     l3530:
  1096  001904  BE28               	btfsc	Temp_Fault@i+1,7,c
  1097  001906  D008               	goto	l3534
  1098  001908  5028               	movf	Temp_Fault@i+1,w,c
  1099  00190A  E12D               	bnz	l418
  1100  00190C  0E09               	movlw	9
  1101  00190E  5C27               	subwf	Temp_Fault@i,w,c
  1102  001910  B0D8               	btfsc	status,0,c
  1103  001912  0012               	return	
  1104  001914  D001               	goto	l3534
  1105  001916  0012               	return	
  1106  001918                     l3534:
  1107                           
  1108                           ;Tempeture.c: 17: {
  1109                           ;Tempeture.c: 18: if (60.5 < Temp_DegF[i])
  1110  001918  0E00               	movlw	0
  1111  00191A  6E1D               	movwf	___ftge@ff1,c
  1112  00191C  0E72               	movlw	114
  1113  00191E  6E1E               	movwf	___ftge@ff1+1,c
  1114  001920  0E42               	movlw	66
  1115  001922  6E1F               	movwf	___ftge@ff1+2,c
  1116  001924  C027  F017         	movff	Temp_Fault@i,___wmul@multiplier
  1117  001928  C028  F018         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  1118  00192C  0E00               	movlw	0
  1119  00192E  6E1A               	movwf	___wmul@multiplicand+1,c
  1120  001930  0E03               	movlw	3
  1121  001932  6E19               	movwf	___wmul@multiplicand,c
  1122  001934  EC36  F00E         	call	___wmul	;wreg free
  1123  001938  0E5A               	movlw	low _Temp_DegF
  1124  00193A  2417               	addwf	?___wmul,w,c
  1125  00193C  6ED9               	movwf	fsr2l,c
  1126  00193E  0E01               	movlw	high _Temp_DegF
  1127  001940  2018               	addwfc	?___wmul+1,w,c
  1128  001942  6EDA               	movwf	fsr2h,c
  1129  001944  CFDE F020          	movff	postinc2,___ftge@ff2
  1130  001948  CFDE F021          	movff	postinc2,___ftge@ff2+1
  1131  00194C  CFDD F022          	movff	postdec2,___ftge@ff2+2
  1132  001950  ECE8  F00B         	call	___ftge	;wreg free
  1133  001954  B0D8               	btfsc	status,0,c
  1134  001956  D003               	goto	l3538
  1135                           
  1136                           ;Tempeture.c: 19: {
  1137                           ;Tempeture.c: 20: fault = 1;
  1138  001958  0E01               	movlw	1
  1139  00195A  6E26               	movwf	Temp_Fault@fault,c
  1140  00195C  D000               	goto	l3538
  1141  00195E                     l3538:
  1142  00195E  4A27               	infsnz	Temp_Fault@i,f,c
  1143  001960  2A28               	incf	Temp_Fault@i+1,f,c
  1144  001962  D7D0               	goto	l3530
  1145  001964  0012               	return	
  1146  001966                     l418:
  1147  001966  0012               	return		;funcret
  1148  001968                     __end_of_Temp_Fault:
  1149                           	opt stack 0
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           prodh	equ	0xFF4
  1155                           prodl	equ	0xFF3
  1156                           intcon	equ	0xFF2
  1157                           postinc0	equ	0xFEE
  1158                           wreg	equ	0xFE8
  1159                           indf2	equ	0xFDF
  1160                           postinc2	equ	0xFDE
  1161                           postdec2	equ	0xFDD
  1162                           fsr2h	equ	0xFDA
  1163                           fsr2l	equ	0xFD9
  1164                           status	equ	0xFD8
  1165                           
  1166 ;; *************** function _Temp_Convert *****************
  1167 ;; Defined at:
  1168 ;;		line 50 in file "Tempeture.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;		None
  1171 ;; Auto vars:     Size  Location     Type
  1172 ;;  steinhart       3    8[BANK1 ] float 
  1173 ;;  x               2    6[BANK1 ] int 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;		None               void
  1176 ;; Registers used:
  1177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1183 ;;      Params:         0       0       0       0       0       0       0
  1184 ;;      Locals:         0       0      11       0       0       0       0
  1185 ;;      Temps:          0       0       0       0       0       0       0
  1186 ;;      Totals:         0       0      11       0       0       0       0
  1187 ;;Total ram usage:       11 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; Hardware stack levels required when called:    8
  1190 ;; This function calls:
  1191 ;;		_Temp_Filter
  1192 ;;		___awtoft
  1193 ;;		___ftadd
  1194 ;;		___ftdiv
  1195 ;;		___ftmul
  1196 ;;		___ftsub
  1197 ;;		___wmul
  1198 ;;		_log
  1199 ;; This function is called by:
  1200 ;;		_main
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text5
  1205  000C32                     __ptext5:
  1206                           	opt stack 0
  1207  000C32                     _Temp_Convert:
  1208                           	opt stack 22
  1209                           
  1210                           ;Tempeture.c: 52: int x;
  1211                           ;Tempeture.c: 53: float steinhart;
  1212                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
  1213                           
  1214                           ;incstack = 0
  1215  000C32  0E00               	movlw	0
  1216  000C34  0101               	movlb	1	; () banked
  1217  000C36  6FD9               	movwf	(Temp_Convert@x+1)& (0+255),b
  1218  000C38  0E00               	movlw	0
  1219  000C3A  6FD8               	movwf	Temp_Convert@x& (0+255),b
  1220                           
  1221                           ; BSR set to: 1
  1222  000C3C  0101               	movlb	1	; () banked
  1223  000C3E  BFD9               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  1224  000C40  D00A               	goto	l3548
  1225  000C42  0101               	movlb	1	; () banked
  1226  000C44  51D9               	movf	(Temp_Convert@x+1)& (0+255),w,b
  1227  000C46  E106               	bnz	u3150
  1228  000C48  0E0A               	movlw	10
  1229  000C4A  0101               	movlb	1	; () banked
  1230  000C4C  5DD8               	subwf	Temp_Convert@x& (0+255),w,b
  1231  000C4E  B0D8               	btfsc	status,0,c
  1232  000C50  D10A               	goto	l3572
  1233  000C52  D001               	goto	l3548
  1234  000C54                     u3150:
  1235                           
  1236                           ; BSR set to: 1
  1237  000C54  D108               	goto	l3572
  1238  000C56                     l3548:
  1239                           
  1240                           ; BSR set to: 1
  1241                           ;Tempeture.c: 55: {
  1242                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  1243  000C56  0E00               	movlw	0
  1244  000C58  0100               	movlb	0	; () banked
  1245  000C5A  6FE3               	movwf	___ftadd@f2& (0+255),b
  1246  000C5C  0E80               	movlw	128
  1247  000C5E  0100               	movlb	0	; () banked
  1248  000C60  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
  1249  000C62  0EBF               	movlw	191
  1250  000C64  0100               	movlb	0	; () banked
  1251  000C66  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
  1252  000C68  90D8               	bcf	status,0,c
  1253  000C6A  0101               	movlb	1	; () banked
  1254  000C6C  35D8               	rlcf	Temp_Convert@x& (0+255),w,b
  1255  000C6E  6ED9               	movwf	fsr2l,c
  1256  000C70  0101               	movlb	1	; () banked
  1257  000C72  35D9               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  1258  000C74  6EDA               	movwf	fsr2h,c
  1259  000C76  0EC6               	movlw	low _Temp_Adc
  1260  000C78  26D9               	addwf	fsr2l,f,c
  1261  000C7A  0E00               	movlw	high _Temp_Adc
  1262  000C7C  22DA               	addwfc	fsr2h,f,c
  1263  000C7E  CFDE F01F          	movff	postinc2,___awtoft@c
  1264  000C82  CFDD F020          	movff	postdec2,___awtoft@c+1
  1265  000C86  EC9E  F00D         	call	___awtoft	;wreg free
  1266  000C8A  C01F  F026         	movff	?___awtoft,___ftdiv@f2
  1267  000C8E  C020  F027         	movff	?___awtoft+1,___ftdiv@f2+1
  1268  000C92  C021  F028         	movff	?___awtoft+2,___ftdiv@f2+2
  1269  000C96  0EC0               	movlw	192
  1270  000C98  6E23               	movwf	___ftdiv@f1,c
  1271  000C9A  0E7F               	movlw	127
  1272  000C9C  6E24               	movwf	___ftdiv@f1+1,c
  1273  000C9E  0E44               	movlw	68
  1274  000CA0  6E25               	movwf	___ftdiv@f1+2,c
  1275  000CA2  ECD8  F009         	call	___ftdiv	;wreg free
  1276  000CA6  C023  F0E0         	movff	?___ftdiv,___ftadd@f1
  1277  000CAA  C024  F0E1         	movff	?___ftdiv+1,___ftadd@f1+1
  1278  000CAE  C025  F0E2         	movff	?___ftdiv+2,___ftadd@f1+2
  1279  000CB2  ECDA  F004         	call	___ftadd	;wreg free
  1280  000CB6  C0E0  F1D2         	movff	?___ftadd,_Temp_Convert$1676
  1281  000CBA  C0E1  F1D3         	movff	?___ftadd+1,_Temp_Convert$1676+1
  1282  000CBE  C0E2  F1D4         	movff	?___ftadd+2,_Temp_Convert$1676+2
  1283                           
  1284                           ;Tempeture.c: 55: {
  1285                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  1286  000CC2  C1D2  F026         	movff	_Temp_Convert$1676,___ftdiv@f2
  1287  000CC6  C1D3  F027         	movff	_Temp_Convert$1676+1,___ftdiv@f2+1
  1288  000CCA  C1D4  F028         	movff	_Temp_Convert$1676+2,___ftdiv@f2+2
  1289  000CCE  0E40               	movlw	64
  1290  000CD0  6E23               	movwf	___ftdiv@f1,c
  1291  000CD2  0E1C               	movlw	28
  1292  000CD4  6E24               	movwf	___ftdiv@f1+1,c
  1293  000CD6  0E46               	movlw	70
  1294  000CD8  6E25               	movwf	___ftdiv@f1+2,c
  1295  000CDA  ECD8  F009         	call	___ftdiv	;wreg free
  1296  000CDE  C023  F1D5         	movff	?___ftdiv,_Temp_Convert$1677
  1297  000CE2  C024  F1D6         	movff	?___ftdiv+1,_Temp_Convert$1677+1
  1298  000CE6  C025  F1D7         	movff	?___ftdiv+2,_Temp_Convert$1677+2
  1299                           
  1300                           ;Tempeture.c: 55: {
  1301                           ;Tempeture.c: 56: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  1302  000CEA  C1D5  F023         	movff	_Temp_Convert$1677,___ftdiv@f1
  1303  000CEE  C1D6  F024         	movff	_Temp_Convert$1677+1,___ftdiv@f1+1
  1304  000CF2  C1D7  F025         	movff	_Temp_Convert$1677+2,___ftdiv@f1+2
  1305  000CF6  0E40               	movlw	64
  1306  000CF8  6E26               	movwf	___ftdiv@f2,c
  1307  000CFA  0E1C               	movlw	28
  1308  000CFC  6E27               	movwf	___ftdiv@f2+1,c
  1309  000CFE  0E46               	movlw	70
  1310  000D00  6E28               	movwf	___ftdiv@f2+2,c
  1311  000D02  ECD8  F009         	call	___ftdiv	;wreg free
  1312  000D06  C023  F1DA         	movff	?___ftdiv,Temp_Convert@steinhart
  1313  000D0A  C024  F1DB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1314  000D0E  C025  F1DC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1315                           
  1316                           ;Tempeture.c: 57: steinhart = log(steinhart);
  1317  000D12  C1DA  F0F8         	movff	Temp_Convert@steinhart,log@x
  1318  000D16  C1DB  F0F9         	movff	Temp_Convert@steinhart+1,log@x+1
  1319  000D1A  C1DC  F0FA         	movff	Temp_Convert@steinhart+2,log@x+2
  1320  000D1E  ECA0  F008         	call	_log	;wreg free
  1321  000D22  C0F8  F1DA         	movff	?_log,Temp_Convert@steinhart
  1322  000D26  C0F9  F1DB         	movff	?_log+1,Temp_Convert@steinhart+1
  1323  000D2A  C0FA  F1DC         	movff	?_log+2,Temp_Convert@steinhart+2
  1324                           
  1325                           ;Tempeture.c: 58: steinhart /= 3950;
  1326  000D2E  C1DA  F023         	movff	Temp_Convert@steinhart,___ftdiv@f1
  1327  000D32  C1DB  F024         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  1328  000D36  C1DC  F025         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  1329  000D3A  0EE0               	movlw	224
  1330  000D3C  6E26               	movwf	___ftdiv@f2,c
  1331  000D3E  0E76               	movlw	118
  1332  000D40  6E27               	movwf	___ftdiv@f2+1,c
  1333  000D42  0E45               	movlw	69
  1334  000D44  6E28               	movwf	___ftdiv@f2+2,c
  1335  000D46  ECD8  F009         	call	___ftdiv	;wreg free
  1336  000D4A  C023  F1DA         	movff	?___ftdiv,Temp_Convert@steinhart
  1337  000D4E  C024  F1DB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1338  000D52  C025  F1DC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1339                           
  1340                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  1341  000D56  C1DA  F0E0         	movff	Temp_Convert@steinhart,___ftadd@f1
  1342  000D5A  C1DB  F0E1         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  1343  000D5E  C1DC  F0E2         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  1344  000D62  0ECF               	movlw	207
  1345  000D64  0100               	movlb	0	; () banked
  1346  000D66  6FE3               	movwf	___ftadd@f2& (0+255),b
  1347  000D68  0E5B               	movlw	91
  1348  000D6A  0100               	movlb	0	; () banked
  1349  000D6C  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
  1350  000D6E  0E3B               	movlw	59
  1351  000D70  0100               	movlb	0	; () banked
  1352  000D72  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
  1353  000D74  ECDA  F004         	call	___ftadd	;wreg free
  1354  000D78  C0E0  F1DA         	movff	?___ftadd,Temp_Convert@steinhart
  1355  000D7C  C0E1  F1DB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1356  000D80  C0E2  F1DC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1357                           
  1358                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  1359  000D84  0E00               	movlw	0
  1360  000D86  6E23               	movwf	___ftdiv@f1,c
  1361  000D88  0E80               	movlw	128
  1362  000D8A  6E24               	movwf	___ftdiv@f1+1,c
  1363  000D8C  0E3F               	movlw	63
  1364  000D8E  6E25               	movwf	___ftdiv@f1+2,c
  1365  000D90  C1DA  F026         	movff	Temp_Convert@steinhart,___ftdiv@f2
  1366  000D94  C1DB  F027         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  1367  000D98  C1DC  F028         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  1368  000D9C  ECD8  F009         	call	___ftdiv	;wreg free
  1369  000DA0  C023  F1DA         	movff	?___ftdiv,Temp_Convert@steinhart
  1370  000DA4  C024  F1DB         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1371  000DA8  C025  F1DC         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1372                           
  1373                           ;Tempeture.c: 61: steinhart -= 273.15;
  1374  000DAC  C1DA  F0EC         	movff	Temp_Convert@steinhart,___ftsub@f1
  1375  000DB0  C1DB  F0ED         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  1376  000DB4  C1DC  F0EE         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  1377  000DB8  0E93               	movlw	147
  1378  000DBA  0100               	movlb	0	; () banked
  1379  000DBC  6FEF               	movwf	___ftsub@f2& (0+255),b
  1380  000DBE  0E88               	movlw	136
  1381  000DC0  0100               	movlb	0	; () banked
  1382  000DC2  6FF0               	movwf	(___ftsub@f2+1)& (0+255),b
  1383  000DC4  0E43               	movlw	67
  1384  000DC6  0100               	movlb	0	; () banked
  1385  000DC8  6FF1               	movwf	(___ftsub@f2+2)& (0+255),b
  1386  000DCA  EC11  F00D         	call	___ftsub	;wreg free
  1387  000DCE  C0EC  F1DA         	movff	?___ftsub,Temp_Convert@steinhart
  1388  000DD2  C0ED  F1DB         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  1389  000DD6  C0EE  F1DC         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  1390                           
  1391                           ;Tempeture.c: 62: steinhart = (steinhart*1.8) + 32.0;
  1392  000DDA  0E66               	movlw	102
  1393  000DDC  6E35               	movwf	___ftmul@f2,c
  1394  000DDE  0EE6               	movlw	230
  1395  000DE0  6E36               	movwf	___ftmul@f2+1,c
  1396  000DE2  0E3F               	movlw	63
  1397  000DE4  6E37               	movwf	___ftmul@f2+2,c
  1398  000DE6  C1DA  F032         	movff	Temp_Convert@steinhart,___ftmul@f1
  1399  000DEA  C1DB  F033         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  1400  000DEE  C1DC  F034         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  1401  000DF2  EC41  F009         	call	___ftmul	;wreg free
  1402  000DF6  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  1403  000DFA  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  1404  000DFE  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  1405  000E02  0E00               	movlw	0
  1406  000E04  0100               	movlb	0	; () banked
  1407  000E06  6FE3               	movwf	___ftadd@f2& (0+255),b
  1408  000E08  0E00               	movlw	0
  1409  000E0A  0100               	movlb	0	; () banked
  1410  000E0C  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
  1411  000E0E  0E42               	movlw	66
  1412  000E10  0100               	movlb	0	; () banked
  1413  000E12  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
  1414  000E14  ECDA  F004         	call	___ftadd	;wreg free
  1415  000E18  C0E0  F1DA         	movff	?___ftadd,Temp_Convert@steinhart
  1416  000E1C  C0E1  F1DB         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1417  000E20  C0E2  F1DC         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1418                           
  1419                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  1420  000E24  C1D8  F017         	movff	Temp_Convert@x,___wmul@multiplier
  1421  000E28  C1D9  F018         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  1422  000E2C  0E00               	movlw	0
  1423  000E2E  6E1A               	movwf	___wmul@multiplicand+1,c
  1424  000E30  0E03               	movlw	3
  1425  000E32  6E19               	movwf	___wmul@multiplicand,c
  1426  000E34  EC36  F00E         	call	___wmul	;wreg free
  1427  000E38  0EB4               	movlw	low _TmpTemp_DegF
  1428  000E3A  2417               	addwf	?___wmul,w,c
  1429  000E3C  6ED9               	movwf	fsr2l,c
  1430  000E3E  0E01               	movlw	high _TmpTemp_DegF
  1431  000E40  2018               	addwfc	?___wmul+1,w,c
  1432  000E42  6EDA               	movwf	fsr2h,c
  1433  000E44  C1DA  FFDE         	movff	Temp_Convert@steinhart,postinc2
  1434  000E48  C1DB  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  1435  000E4C  C1DC  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  1436  000E50  0101               	movlb	1	; () banked
  1437  000E52  4BD8               	infsnz	Temp_Convert@x& (0+255),f,b
  1438  000E54  2BD9               	incf	(Temp_Convert@x+1)& (0+255),f,b
  1439                           
  1440                           ; BSR set to: 1
  1441  000E56  0101               	movlb	1	; () banked
  1442  000E58  BFD9               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  1443  000E5A  D6FD               	goto	l3548
  1444  000E5C  0101               	movlb	1	; () banked
  1445  000E5E  51D9               	movf	(Temp_Convert@x+1)& (0+255),w,b
  1446  000E60  E102               	bnz	l3572
  1447  000E62  D6F2               	goto	L1
  1448  000E64  D000               	goto	l3572
  1449  000E66                     l3572:
  1450                           
  1451                           ; BSR set to: 1
  1452                           ;Tempeture.c: 64: }
  1453                           ;Tempeture.c: 65: Temp_Filter();
  1454  000E66  EC36  F007         	call	_Temp_Filter	;wreg free
  1455  000E6A  0012               	return		;funcret
  1456  000E6C                     __end_of_Temp_Convert:
  1457                           	opt stack 0
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           prodh	equ	0xFF4
  1463                           prodl	equ	0xFF3
  1464                           intcon	equ	0xFF2
  1465                           postinc0	equ	0xFEE
  1466                           wreg	equ	0xFE8
  1467                           indf2	equ	0xFDF
  1468                           postinc2	equ	0xFDE
  1469                           postdec2	equ	0xFDD
  1470                           fsr2h	equ	0xFDA
  1471                           fsr2l	equ	0xFD9
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _log *****************
  1475 ;; Defined at:
  1476 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  x               3   30[BANK0 ] int 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  exponent        2   33[BANK0 ] int 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  3   30[BANK0 ] int 
  1483 ;; Registers used:
  1484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1490 ;;      Params:         0       3       0       0       0       0       0
  1491 ;;      Locals:         0       2       0       0       0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0
  1493 ;;      Totals:         0       5       0       0       0       0       0
  1494 ;;Total ram usage:        5 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    7
  1497 ;; This function calls:
  1498 ;;		___awtoft
  1499 ;;		___ftadd
  1500 ;;		___ftmul
  1501 ;;		_eval_poly
  1502 ;;		_frexp
  1503 ;; This function is called by:
  1504 ;;		_Temp_Convert
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           	psect	text6
  1509  001140                     __ptext6:
  1510                           	opt stack 0
  1511  001140                     _log:
  1512                           	opt stack 22
  1513                           
  1514                           ;incstack = 0
  1515  001140  0100               	movlb	0	; () banked
  1516  001142  AFFA               	btfss	(log@x+2)& (0+255),7,b
  1517  001144  D00F               	goto	l3424
  1518                           
  1519                           ; BSR set to: 0
  1520  001146  0E00               	movlw	0
  1521  001148  0100               	movlb	0	; () banked
  1522  00114A  6FC5               	movwf	(_errno+1)& (0+255),b
  1523  00114C  0E21               	movlw	33
  1524  00114E  6FC4               	movwf	_errno& (0+255),b
  1525  001150  0E00               	movlw	0
  1526  001152  0100               	movlb	0	; () banked
  1527  001154  6FF8               	movwf	?_log& (0+255),b
  1528  001156  0E00               	movlw	0
  1529  001158  0100               	movlb	0	; () banked
  1530  00115A  6FF9               	movwf	(?_log+1)& (0+255),b
  1531  00115C  0E00               	movlw	0
  1532  00115E  0100               	movlb	0	; () banked
  1533  001160  6FFA               	movwf	(?_log+2)& (0+255),b
  1534                           
  1535                           ; BSR set to: 0
  1536  001162  0012               	return	
  1537  001164                     l3424:
  1538                           
  1539                           ; BSR set to: 0
  1540  001164  0100               	movlb	0	; () banked
  1541  001166  51F8               	movf	log@x& (0+255),w,b
  1542  001168  0100               	movlb	0	; () banked
  1543  00116A  11F9               	iorwf	(log@x+1)& (0+255),w,b
  1544  00116C  0100               	movlb	0	; () banked
  1545  00116E  11FA               	iorwf	(log@x+2)& (0+255),w,b
  1546  001170  A4D8               	btfss	status,2,c
  1547  001172  D00F               	goto	l3430
  1548                           
  1549                           ; BSR set to: 0
  1550  001174  0E00               	movlw	0
  1551  001176  0100               	movlb	0	; () banked
  1552  001178  6FC5               	movwf	(_errno+1)& (0+255),b
  1553  00117A  0E22               	movlw	34
  1554  00117C  6FC4               	movwf	_errno& (0+255),b
  1555  00117E  0E00               	movlw	0
  1556  001180  0100               	movlb	0	; () banked
  1557  001182  6FF8               	movwf	?_log& (0+255),b
  1558  001184  0E00               	movlw	0
  1559  001186  0100               	movlb	0	; () banked
  1560  001188  6FF9               	movwf	(?_log+1)& (0+255),b
  1561  00118A  0E00               	movlw	0
  1562  00118C  0100               	movlb	0	; () banked
  1563  00118E  6FFA               	movwf	(?_log+2)& (0+255),b
  1564                           
  1565                           ; BSR set to: 0
  1566  001190  0012               	return	
  1567  001192                     l3430:
  1568                           
  1569                           ; BSR set to: 0
  1570  001192  0E00               	movlw	0
  1571  001194  6E35               	movwf	___ftmul@f2,c
  1572  001196  0E00               	movlw	0
  1573  001198  6E36               	movwf	___ftmul@f2+1,c
  1574  00119A  0E40               	movlw	64
  1575  00119C  6E37               	movwf	___ftmul@f2+2,c
  1576  00119E  0EFB               	movlw	low log@exponent
  1577  0011A0  6E1A               	movwf	frexp@eptr,c
  1578  0011A2  0E00               	movlw	high log@exponent
  1579  0011A4  6E1B               	movwf	frexp@eptr+1,c
  1580  0011A6  C0F8  F017         	movff	log@x,frexp@value
  1581  0011AA  C0F9  F018         	movff	log@x+1,frexp@value+1
  1582  0011AE  C0FA  F019         	movff	log@x+2,frexp@value+2
  1583  0011B2  EC33  F00C         	call	_frexp	;wreg free
  1584  0011B6  C017  F032         	movff	?_frexp,___ftmul@f1
  1585  0011BA  C018  F033         	movff	?_frexp+1,___ftmul@f1+1
  1586  0011BE  C019  F034         	movff	?_frexp+2,___ftmul@f1+2
  1587  0011C2  EC41  F009         	call	___ftmul	;wreg free
  1588  0011C6  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  1589  0011CA  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  1590  0011CE  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  1591  0011D2  0E00               	movlw	0
  1592  0011D4  0100               	movlb	0	; () banked
  1593  0011D6  6FE3               	movwf	___ftadd@f2& (0+255),b
  1594  0011D8  0E80               	movlw	128
  1595  0011DA  0100               	movlb	0	; () banked
  1596  0011DC  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
  1597  0011DE  0EBF               	movlw	191
  1598  0011E0  0100               	movlb	0	; () banked
  1599  0011E2  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
  1600  0011E4  ECDA  F004         	call	___ftadd	;wreg free
  1601  0011E8  C0E0  F0F8         	movff	?___ftadd,log@x
  1602  0011EC  C0E1  F0F9         	movff	?___ftadd+1,log@x+1
  1603  0011F0  C0E2  F0FA         	movff	?___ftadd+2,log@x+2
  1604  0011F4  0100               	movlb	0	; () banked
  1605  0011F6  07FB               	decf	log@exponent& (0+255),f,b
  1606  0011F8  A0D8               	btfss	status,0,c
  1607  0011FA  07FC               	decf	(log@exponent+1)& (0+255),f,b
  1608                           
  1609                           ; BSR set to: 0
  1610  0011FC  C0F8  F0EC         	movff	log@x,eval_poly@x
  1611  001200  C0F9  F0ED         	movff	log@x+1,eval_poly@x+1
  1612  001204  C0FA  F0EE         	movff	log@x+2,eval_poly@x+2
  1613  001208  0E01               	movlw	low log@coeff
  1614  00120A  0100               	movlb	0	; () banked
  1615  00120C  6FEF               	movwf	eval_poly@d& (0+255),b
  1616  00120E  0E06               	movlw	high log@coeff
  1617  001210  0100               	movlb	0	; () banked
  1618  001212  6FF0               	movwf	(eval_poly@d+1)& (0+255),b
  1619  001214  0E00               	movlw	0
  1620  001216  0100               	movlb	0	; () banked
  1621  001218  6FF2               	movwf	(eval_poly@n+1)& (0+255),b
  1622  00121A  0E08               	movlw	8
  1623  00121C  6FF1               	movwf	eval_poly@n& (0+255),b
  1624  00121E  EC4E  F00A         	call	_eval_poly	;wreg free
  1625  001222  C0EC  F0F8         	movff	?_eval_poly,log@x
  1626  001226  C0ED  F0F9         	movff	?_eval_poly+1,log@x+1
  1627  00122A  C0EE  F0FA         	movff	?_eval_poly+2,log@x+2
  1628  00122E  0E72               	movlw	114
  1629  001230  6E35               	movwf	___ftmul@f2,c
  1630  001232  0E31               	movlw	49
  1631  001234  6E36               	movwf	___ftmul@f2+1,c
  1632  001236  0E3F               	movlw	63
  1633  001238  6E37               	movwf	___ftmul@f2+2,c
  1634  00123A  C0FB  F01F         	movff	log@exponent,___awtoft@c
  1635  00123E  C0FC  F020         	movff	log@exponent+1,___awtoft@c+1
  1636  001242  EC9E  F00D         	call	___awtoft	;wreg free
  1637  001246  C01F  F032         	movff	?___awtoft,___ftmul@f1
  1638  00124A  C020  F033         	movff	?___awtoft+1,___ftmul@f1+1
  1639  00124E  C021  F034         	movff	?___awtoft+2,___ftmul@f1+2
  1640  001252  EC41  F009         	call	___ftmul	;wreg free
  1641  001256  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  1642  00125A  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  1643  00125E  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  1644  001262  C0F8  F0E3         	movff	log@x,___ftadd@f2
  1645  001266  C0F9  F0E4         	movff	log@x+1,___ftadd@f2+1
  1646  00126A  C0FA  F0E5         	movff	log@x+2,___ftadd@f2+2
  1647  00126E  ECDA  F004         	call	___ftadd	;wreg free
  1648  001272  C0E0  F0F8         	movff	?___ftadd,?_log
  1649  001276  C0E1  F0F9         	movff	?___ftadd+1,?_log+1
  1650  00127A  C0E2  F0FA         	movff	?___ftadd+2,?_log+2
  1651  00127E  0012               	return	
  1652  001280  0012               	return		;funcret
  1653  001282                     __end_of_log:
  1654                           	opt stack 0
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           prodh	equ	0xFF4
  1660                           prodl	equ	0xFF3
  1661                           intcon	equ	0xFF2
  1662                           postinc0	equ	0xFEE
  1663                           wreg	equ	0xFE8
  1664                           indf2	equ	0xFDF
  1665                           postinc2	equ	0xFDE
  1666                           postdec2	equ	0xFDD
  1667                           fsr2h	equ	0xFDA
  1668                           fsr2l	equ	0xFD9
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function _frexp *****************
  1672 ;; Defined at:
  1673 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;  value           3   22[COMRAM] int 
  1676 ;;  eptr            2   25[COMRAM] PTR int 
  1677 ;;		 -> log@exponent(2), 
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;		None
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  3   22[COMRAM] PTR int 
  1682 ;; Registers used:
  1683 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1689 ;;      Params:         5       0       0       0       0       0       0
  1690 ;;      Locals:         0       0       0       0       0       0       0
  1691 ;;      Temps:          2       0       0       0       0       0       0
  1692 ;;      Totals:         7       0       0       0       0       0       0
  1693 ;;Total ram usage:        7 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    4
  1696 ;; This function calls:
  1697 ;;		Nothing
  1698 ;; This function is called by:
  1699 ;;		_log
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text7
  1704  001866                     __ptext7:
  1705                           	opt stack 0
  1706  001866                     _frexp:
  1707                           	opt stack 24
  1708                           
  1709                           ;incstack = 0
  1710  001866  5017               	movf	frexp@value,w,c
  1711  001868  1018               	iorwf	frexp@value+1,w,c
  1712  00186A  1019               	iorwf	frexp@value+2,w,c
  1713  00186C  A4D8               	btfss	status,2,c
  1714  00186E  D00F               	goto	l3352
  1715  001870  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1716  001874  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1717  001878  0E00               	movlw	0
  1718  00187A  6EDE               	movwf	postinc2,c
  1719  00187C  0E00               	movlw	0
  1720  00187E  6EDD               	movwf	postdec2,c
  1721  001880  0E00               	movlw	0
  1722  001882  6E17               	movwf	?_frexp,c
  1723  001884  0E00               	movlw	0
  1724  001886  6E18               	movwf	?_frexp+1,c
  1725  001888  0E00               	movlw	0
  1726  00188A  6E19               	movwf	?_frexp+2,c
  1727  00188C  0012               	return	
  1728  00188E                     l3352:
  1729  00188E  5019               	movf	frexp@value+2,w,c
  1730  001890  0B7F               	andlw	127
  1731  001892  6E1C               	movwf	??_frexp& (0+255),c
  1732  001894  6A1D               	clrf	(??_frexp+1)& (0+255),c
  1733  001896  90D8               	bcf	status,0,c
  1734  001898  361C               	rlcf	??_frexp,f,c
  1735  00189A  361D               	rlcf	??_frexp+1,f,c
  1736  00189C  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1737  0018A0  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1738  0018A4  C01C  FFDE         	movff	??_frexp,postinc2
  1739  0018A8  C01D  FFDD         	movff	??_frexp+1,postdec2
  1740  0018AC  AE18               	btfss	frexp@value+1,7,c
  1741  0018AE  D003               	goto	u2880
  1742  0018B0  6A1C               	clrf	??_frexp& (0+255),c
  1743  0018B2  2A1C               	incf	??_frexp& (0+255),f,c
  1744  0018B4  D001               	goto	u2888
  1745  0018B6                     u2880:
  1746  0018B6  6A1C               	clrf	??_frexp& (0+255),c
  1747  0018B8                     u2888:
  1748  0018B8  501C               	movf	??_frexp,w,c
  1749  0018BA  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1750  0018BE  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1751  0018C2  12DE               	iorwf	postinc2,f,c
  1752  0018C4  0E00               	movlw	0
  1753  0018C6  12DD               	iorwf	postdec2,f,c
  1754  0018C8  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1755  0018CC  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1756  0018D0  0E82               	movlw	130
  1757  0018D2  26DE               	addwf	postinc2,f,c
  1758  0018D4  0EFF               	movlw	255
  1759  0018D6  22DD               	addwfc	postdec2,f,c
  1760  0018D8  8019               	bsf	frexp@value+2,0,c
  1761  0018DA  8219               	bsf	frexp@value+2,1,c
  1762  0018DC  8419               	bsf	frexp@value+2,2,c
  1763  0018DE  8619               	bsf	frexp@value+2,3,c
  1764  0018E0  8819               	bsf	frexp@value+2,4,c
  1765  0018E2  8A19               	bsf	frexp@value+2,5,c
  1766  0018E4  9C19               	bcf	frexp@value+2,6,c
  1767  0018E6  9E18               	bcf	frexp@value+1,7,c
  1768  0018E8  C017  F017         	movff	frexp@value,?_frexp
  1769  0018EC  C018  F018         	movff	frexp@value+1,?_frexp+1
  1770  0018F0  C019  F019         	movff	frexp@value+2,?_frexp+2
  1771  0018F4  0012               	return	
  1772  0018F6  0012               	return		;funcret
  1773  0018F8                     __end_of_frexp:
  1774                           	opt stack 0
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           prodh	equ	0xFF4
  1780                           prodl	equ	0xFF3
  1781                           intcon	equ	0xFF2
  1782                           postinc0	equ	0xFEE
  1783                           wreg	equ	0xFE8
  1784                           indf2	equ	0xFDF
  1785                           postinc2	equ	0xFDE
  1786                           postdec2	equ	0xFDD
  1787                           fsr2h	equ	0xFDA
  1788                           fsr2l	equ	0xFD9
  1789                           status	equ	0xFD8
  1790                           
  1791 ;; *************** function _eval_poly *****************
  1792 ;; Defined at:
  1793 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;  x               3   18[BANK0 ] PTR int 
  1796 ;;  d               2   21[BANK0 ] PTR const 
  1797 ;;		 -> log@coeff(27), 
  1798 ;;  n               2   23[BANK0 ] int 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  res             3   27[BANK0 ] int 
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  3   18[BANK0 ] int 
  1803 ;; Registers used:
  1804 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1810 ;;      Params:         0       7       0       0       0       0       0
  1811 ;;      Locals:         0       3       0       0       0       0       0
  1812 ;;      Temps:          0       2       0       0       0       0       0
  1813 ;;      Totals:         0      12       0       0       0       0       0
  1814 ;;Total ram usage:       12 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; Hardware stack levels required when called:    6
  1817 ;; This function calls:
  1818 ;;		___ftadd
  1819 ;;		___ftmul
  1820 ;;		___wmul
  1821 ;; This function is called by:
  1822 ;;		_log
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text8
  1827  00149C                     __ptext8:
  1828                           	opt stack 0
  1829  00149C                     _eval_poly:
  1830                           	opt stack 22
  1831                           
  1832                           ;incstack = 0
  1833  00149C  C0F1  F017         	movff	eval_poly@n,___wmul@multiplier
  1834  0014A0  C0F2  F018         	movff	eval_poly@n+1,___wmul@multiplier+1
  1835  0014A4  0E00               	movlw	0
  1836  0014A6  6E1A               	movwf	___wmul@multiplicand+1,c
  1837  0014A8  0E03               	movlw	3
  1838  0014AA  6E19               	movwf	___wmul@multiplicand,c
  1839  0014AC  EC36  F00E         	call	___wmul	;wreg free
  1840  0014B0  C0EF  F0F3         	movff	eval_poly@d,??_eval_poly
  1841  0014B4  C0F0  F0F4         	movff	eval_poly@d+1,??_eval_poly+1
  1842  0014B8  5017               	movf	?___wmul,w,c
  1843  0014BA  0100               	movlb	0	; () banked
  1844  0014BC  27F3               	addwf	??_eval_poly& (0+255),f,b
  1845  0014BE  5018               	movf	?___wmul+1,w,c
  1846  0014C0  0100               	movlb	0	; () banked
  1847  0014C2  23F4               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1848  0014C4  C0F3  FFF6         	movff	??_eval_poly,tblptrl
  1849  0014C8  C0F4  FFF7         	movff	??_eval_poly+1,tblptrh
  1850  0014CC                     	if	0	;tblptru may be non-zero
  1851  0014CC                     	endif
  1852  0014CC                     	if	0	;tblptru may be non-zero
  1853  0014CC                     	endif
  1854  0014CC  0009               	tblrd		*+
  1855  0014CE  CFF5 F0F5          	movff	tablat,eval_poly@res
  1856  0014D2  0009               	tblrd		*+
  1857  0014D4  CFF5 F0F6          	movff	tablat,eval_poly@res+1
  1858  0014D8  000A               	tblrd		*-
  1859  0014DA  CFF5 F0F7          	movff	tablat,eval_poly@res+2
  1860  0014DE  D042               	goto	l3368
  1861  0014E0                     l3366:
  1862                           
  1863                           ; BSR set to: 0
  1864  0014E0  C0F5  F035         	movff	eval_poly@res,___ftmul@f2
  1865  0014E4  C0F6  F036         	movff	eval_poly@res+1,___ftmul@f2+1
  1866  0014E8  C0F7  F037         	movff	eval_poly@res+2,___ftmul@f2+2
  1867  0014EC  C0EC  F032         	movff	eval_poly@x,___ftmul@f1
  1868  0014F0  C0ED  F033         	movff	eval_poly@x+1,___ftmul@f1+1
  1869  0014F4  C0EE  F034         	movff	eval_poly@x+2,___ftmul@f1+2
  1870  0014F8  EC41  F009         	call	___ftmul	;wreg free
  1871  0014FC  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  1872  001500  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  1873  001504  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  1874  001508  0E00               	movlw	0
  1875  00150A  6E1A               	movwf	___wmul@multiplicand+1,c
  1876  00150C  0E03               	movlw	3
  1877  00150E  6E19               	movwf	___wmul@multiplicand,c
  1878  001510  0100               	movlb	0	; () banked
  1879  001512  07F1               	decf	eval_poly@n& (0+255),f,b
  1880  001514  A0D8               	btfss	status,0,c
  1881  001516  07F2               	decf	(eval_poly@n+1)& (0+255),f,b
  1882  001518  C0F1  F017         	movff	eval_poly@n,___wmul@multiplier
  1883  00151C  C0F2  F018         	movff	eval_poly@n+1,___wmul@multiplier+1
  1884  001520  EC36  F00E         	call	___wmul	;wreg free
  1885  001524  C0EF  F0F3         	movff	eval_poly@d,??_eval_poly
  1886  001528  C0F0  F0F4         	movff	eval_poly@d+1,??_eval_poly+1
  1887  00152C  5017               	movf	?___wmul,w,c
  1888  00152E  0100               	movlb	0	; () banked
  1889  001530  27F3               	addwf	??_eval_poly& (0+255),f,b
  1890  001532  5018               	movf	?___wmul+1,w,c
  1891  001534  0100               	movlb	0	; () banked
  1892  001536  23F4               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1893  001538  C0F3  FFF6         	movff	??_eval_poly,tblptrl
  1894  00153C  C0F4  FFF7         	movff	??_eval_poly+1,tblptrh
  1895  001540                     	if	0	;tblptru may be non-zero
  1896  001540                     	endif
  1897  001540                     	if	0	;tblptru may be non-zero
  1898  001540                     	endif
  1899  001540  0009               	tblrd		*+
  1900  001542  CFF5 F0E3          	movff	tablat,___ftadd@f2
  1901  001546  0009               	tblrd		*+
  1902  001548  CFF5 F0E4          	movff	tablat,___ftadd@f2+1
  1903  00154C  000A               	tblrd		*-
  1904  00154E  CFF5 F0E5          	movff	tablat,___ftadd@f2+2
  1905  001552  ECDA  F004         	call	___ftadd	;wreg free
  1906  001556  C0E0  F0F5         	movff	?___ftadd,eval_poly@res
  1907  00155A  C0E1  F0F6         	movff	?___ftadd+1,eval_poly@res+1
  1908  00155E  C0E2  F0F7         	movff	?___ftadd+2,eval_poly@res+2
  1909  001562  D000               	goto	l3368
  1910  001564                     l3368:
  1911  001564  0100               	movlb	0	; () banked
  1912  001566  51F1               	movf	eval_poly@n& (0+255),w,b
  1913  001568  0100               	movlb	0	; () banked
  1914  00156A  11F2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  1915  00156C  A4D8               	btfss	status,2,c
  1916  00156E  D7B8               	goto	l3366
  1917                           
  1918                           ; BSR set to: 0
  1919  001570  C0F5  F0EC         	movff	eval_poly@res,?_eval_poly
  1920  001574  C0F6  F0ED         	movff	eval_poly@res+1,?_eval_poly+1
  1921  001578  C0F7  F0EE         	movff	eval_poly@res+2,?_eval_poly+2
  1922                           
  1923                           ; BSR set to: 0
  1924  00157C  0012               	return		;funcret
  1925  00157E                     __end_of_eval_poly:
  1926                           	opt stack 0
  1927                           tblptru	equ	0xFF8
  1928                           tblptrh	equ	0xFF7
  1929                           tblptrl	equ	0xFF6
  1930                           tablat	equ	0xFF5
  1931                           prodh	equ	0xFF4
  1932                           prodl	equ	0xFF3
  1933                           intcon	equ	0xFF2
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           indf2	equ	0xFDF
  1937                           postinc2	equ	0xFDE
  1938                           postdec2	equ	0xFDD
  1939                           fsr2h	equ	0xFDA
  1940                           fsr2l	equ	0xFD9
  1941                           status	equ	0xFD8
  1942                           
  1943 ;; *************** function ___ftsub *****************
  1944 ;; Defined at:
  1945 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;  f1              3   18[BANK0 ] float 
  1948 ;;  f2              3   21[BANK0 ] float 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  3   18[BANK0 ] float 
  1953 ;; Registers used:
  1954 ;;		wreg, status,2, status,0, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1960 ;;      Params:         0       6       0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0
  1962 ;;      Temps:          0       0       0       0       0       0       0
  1963 ;;      Totals:         0       6       0       0       0       0       0
  1964 ;;Total ram usage:        6 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    6
  1967 ;; This function calls:
  1968 ;;		___ftadd
  1969 ;; This function is called by:
  1970 ;;		_Temp_Convert
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973                           
  1974                           	psect	text9
  1975  001A22                     __ptext9:
  1976                           	opt stack 0
  1977  001A22                     ___ftsub:
  1978                           	opt stack 23
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;incstack = 0
  1982  001A22  0100               	movlb	0	; () banked
  1983  001A24  51EF               	movf	___ftsub@f2& (0+255),w,b
  1984  001A26  0100               	movlb	0	; () banked
  1985  001A28  11F0               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  1986  001A2A  0100               	movlb	0	; () banked
  1987  001A2C  11F1               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  1988  001A2E  B4D8               	btfsc	status,2,c
  1989  001A30  D00A               	goto	l3490
  1990                           
  1991                           ; BSR set to: 0
  1992  001A32  0E00               	movlw	0
  1993  001A34  0100               	movlb	0	; () banked
  1994  001A36  1BEF               	xorwf	___ftsub@f2& (0+255),f,b
  1995  001A38  0E00               	movlw	0
  1996  001A3A  0100               	movlb	0	; () banked
  1997  001A3C  1BF0               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  1998  001A3E  0E80               	movlw	128
  1999  001A40  0100               	movlb	0	; () banked
  2000  001A42  1BF1               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  2001  001A44  D000               	goto	l3490
  2002  001A46                     l3490:
  2003                           
  2004                           ; BSR set to: 0
  2005  001A46  C0EC  F0E0         	movff	___ftsub@f1,___ftadd@f1
  2006  001A4A  C0ED  F0E1         	movff	___ftsub@f1+1,___ftadd@f1+1
  2007  001A4E  C0EE  F0E2         	movff	___ftsub@f1+2,___ftadd@f1+2
  2008  001A52  C0EF  F0E3         	movff	___ftsub@f2,___ftadd@f2
  2009  001A56  C0F0  F0E4         	movff	___ftsub@f2+1,___ftadd@f2+1
  2010  001A5A  C0F1  F0E5         	movff	___ftsub@f2+2,___ftadd@f2+2
  2011  001A5E  ECDA  F004         	call	___ftadd	;wreg free
  2012  001A62  C0E0  F0EC         	movff	?___ftadd,?___ftsub
  2013  001A66  C0E1  F0ED         	movff	?___ftadd+1,?___ftsub+1
  2014  001A6A  C0E2  F0EE         	movff	?___ftadd+2,?___ftsub+2
  2015  001A6E  0012               	return	
  2016  001A70  0012               	return		;funcret
  2017  001A72                     __end_of___ftsub:
  2018                           	opt stack 0
  2019                           tblptru	equ	0xFF8
  2020                           tblptrh	equ	0xFF7
  2021                           tblptrl	equ	0xFF6
  2022                           tablat	equ	0xFF5
  2023                           prodh	equ	0xFF4
  2024                           prodl	equ	0xFF3
  2025                           intcon	equ	0xFF2
  2026                           postinc0	equ	0xFEE
  2027                           wreg	equ	0xFE8
  2028                           indf2	equ	0xFDF
  2029                           postinc2	equ	0xFDE
  2030                           postdec2	equ	0xFDD
  2031                           fsr2h	equ	0xFDA
  2032                           fsr2l	equ	0xFD9
  2033                           status	equ	0xFD8
  2034                           
  2035 ;; *************** function _Temp_Filter *****************
  2036 ;; Defined at:
  2037 ;;		line 36 in file "Tempeture.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;		None
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  x               2   18[BANK0 ] int 
  2042 ;; Return value:  Size  Location     Type
  2043 ;;		None               void
  2044 ;; Registers used:
  2045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2051 ;;      Params:         0       0       0       0       0       0       0
  2052 ;;      Locals:         0       2       0       0       0       0       0
  2053 ;;      Temps:          0       0       0       0       0       0       0
  2054 ;;      Totals:         0       2       0       0       0       0       0
  2055 ;;Total ram usage:        2 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; Hardware stack levels required when called:    6
  2058 ;; This function calls:
  2059 ;;		___ftadd
  2060 ;;		___ftmul
  2061 ;;		___wmul
  2062 ;; This function is called by:
  2063 ;;		_Temp_Convert
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text10
  2068  000E6C                     __ptext10:
  2069                           	opt stack 0
  2070  000E6C                     _Temp_Filter:
  2071                           	opt stack 23
  2072                           
  2073                           ;Tempeture.c: 39: int x;
  2074                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  2075                           
  2076                           ;incstack = 0
  2077  000E6C  0E00               	movlw	0
  2078  000E6E  0100               	movlb	0	; () banked
  2079  000E70  6FED               	movwf	(Temp_Filter@x+1)& (0+255),b
  2080  000E72  0E00               	movlw	0
  2081  000E74  6FEC               	movwf	Temp_Filter@x& (0+255),b
  2082  000E76                     l3396:
  2083                           
  2084                           ; BSR set to: 0
  2085  000E76  0100               	movlb	0	; () banked
  2086  000E78  BFED               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  2087  000E7A  D00A               	goto	l3400
  2088  000E7C  0100               	movlb	0	; () banked
  2089  000E7E  51ED               	movf	(Temp_Filter@x+1)& (0+255),w,b
  2090  000E80  E16C               	bnz	l3406
  2091  000E82  0E0A               	movlw	10
  2092  000E84  0100               	movlb	0	; () banked
  2093  000E86  5DEC               	subwf	Temp_Filter@x& (0+255),w,b
  2094  000E88  B0D8               	btfsc	status,0,c
  2095  000E8A  D067               	goto	l3406
  2096  000E8C  D001               	goto	l3400
  2097                           
  2098                           ; BSR set to: 0
  2099  000E8E  D065               	goto	l3406
  2100  000E90                     l3400:
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;Tempeture.c: 41: {
  2104                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  2105  000E90  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  2106  000E94  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2107  000E98  0E00               	movlw	0
  2108  000E9A  6E1A               	movwf	___wmul@multiplicand+1,c
  2109  000E9C  0E03               	movlw	3
  2110  000E9E  6E19               	movwf	___wmul@multiplicand,c
  2111  000EA0  EC36  F00E         	call	___wmul	;wreg free
  2112  000EA4  0E5A               	movlw	low _Temp_DegF
  2113  000EA6  2417               	addwf	?___wmul,w,c
  2114  000EA8  6ED9               	movwf	fsr2l,c
  2115  000EAA  0E01               	movlw	high _Temp_DegF
  2116  000EAC  2018               	addwfc	?___wmul+1,w,c
  2117  000EAE  6EDA               	movwf	fsr2h,c
  2118  000EB0  0E48               	movlw	72
  2119  000EB2  6E35               	movwf	___ftmul@f2,c
  2120  000EB4  0E61               	movlw	97
  2121  000EB6  6E36               	movwf	___ftmul@f2+1,c
  2122  000EB8  0E3F               	movlw	63
  2123  000EBA  6E37               	movwf	___ftmul@f2+2,c
  2124  000EBC  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  2125  000EC0  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2126  000EC4  0E00               	movlw	0
  2127  000EC6  6E1A               	movwf	___wmul@multiplicand+1,c
  2128  000EC8  0E03               	movlw	3
  2129  000ECA  6E19               	movwf	___wmul@multiplicand,c
  2130  000ECC  EC36  F00E         	call	___wmul	;wreg free
  2131  000ED0  0EB4               	movlw	low _TmpTemp_DegF
  2132  000ED2  2417               	addwf	?___wmul,w,c
  2133  000ED4  6EE1               	movwf	fsr1l,c
  2134  000ED6  0E01               	movlw	high _TmpTemp_DegF
  2135  000ED8  2018               	addwfc	?___wmul+1,w,c
  2136  000EDA  6EE2               	movwf	fsr1h,c
  2137  000EDC  CFE6 F032          	movff	postinc1,___ftmul@f1
  2138  000EE0  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  2139  000EE4  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  2140  000EE8  EC41  F009         	call	___ftmul	;wreg free
  2141  000EEC  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  2142  000EF0  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  2143  000EF4  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  2144  000EF8  0EC3               	movlw	195
  2145  000EFA  6E35               	movwf	___ftmul@f2,c
  2146  000EFC  0EF5               	movlw	245
  2147  000EFE  6E36               	movwf	___ftmul@f2+1,c
  2148  000F00  0E3D               	movlw	61
  2149  000F02  6E37               	movwf	___ftmul@f2+2,c
  2150  000F04  0E00               	movlw	0
  2151  000F06  6E1A               	movwf	___wmul@multiplicand+1,c
  2152  000F08  0E03               	movlw	3
  2153  000F0A  6E19               	movwf	___wmul@multiplicand,c
  2154  000F0C  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  2155  000F10  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2156  000F14  EC36  F00E         	call	___wmul	;wreg free
  2157  000F18  0E3C               	movlw	low _PrevTemp_DegF
  2158  000F1A  2417               	addwf	?___wmul,w,c
  2159  000F1C  6EE1               	movwf	fsr1l,c
  2160  000F1E  0E01               	movlw	high _PrevTemp_DegF
  2161  000F20  2018               	addwfc	?___wmul+1,w,c
  2162  000F22  6EE2               	movwf	fsr1h,c
  2163  000F24  CFE6 F032          	movff	postinc1,___ftmul@f1
  2164  000F28  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  2165  000F2C  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  2166  000F30  EC41  F009         	call	___ftmul	;wreg free
  2167  000F34  C032  F0E3         	movff	?___ftmul,___ftadd@f2
  2168  000F38  C033  F0E4         	movff	?___ftmul+1,___ftadd@f2+1
  2169  000F3C  C034  F0E5         	movff	?___ftmul+2,___ftadd@f2+2
  2170  000F40  ECDA  F004         	call	___ftadd	;wreg free
  2171  000F44  C0E0  FFDE         	movff	?___ftadd,postinc2
  2172  000F48  C0E1  FFDE         	movff	?___ftadd+1,postinc2
  2173  000F4C  C0E2  FFDE         	movff	?___ftadd+2,postinc2
  2174  000F50  0100               	movlb	0	; () banked
  2175  000F52  4BEC               	infsnz	Temp_Filter@x& (0+255),f,b
  2176  000F54  2BED               	incf	(Temp_Filter@x+1)& (0+255),f,b
  2177  000F56  D78F               	goto	l3396
  2178                           
  2179                           ; BSR set to: 0
  2180  000F58  D000               	goto	l3406
  2181  000F5A                     l3406:
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;Tempeture.c: 43: }
  2185                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  2186  000F5A  0E00               	movlw	0
  2187  000F5C  0100               	movlb	0	; () banked
  2188  000F5E  6FED               	movwf	(Temp_Filter@x+1)& (0+255),b
  2189  000F60  0E00               	movlw	0
  2190  000F62  6FEC               	movwf	Temp_Filter@x& (0+255),b
  2191  000F64                     l3408:
  2192                           
  2193                           ; BSR set to: 0
  2194  000F64  0100               	movlb	0	; () banked
  2195  000F66  BFED               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  2196  000F68  D00A               	goto	l3412
  2197  000F6A  0100               	movlb	0	; () banked
  2198  000F6C  51ED               	movf	(Temp_Filter@x+1)& (0+255),w,b
  2199  000F6E  E132               	bnz	l428
  2200  000F70  0E0A               	movlw	10
  2201  000F72  0100               	movlb	0	; () banked
  2202  000F74  5DEC               	subwf	Temp_Filter@x& (0+255),w,b
  2203  000F76  B0D8               	btfsc	status,0,c
  2204  000F78  0012               	return	
  2205  000F7A  D001               	goto	l3412
  2206                           
  2207                           ; BSR set to: 0
  2208  000F7C  0012               	return	
  2209  000F7E                     l3412:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;Tempeture.c: 45: {
  2213                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  2214  000F7E  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  2215  000F82  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2216  000F86  0E00               	movlw	0
  2217  000F88  6E1A               	movwf	___wmul@multiplicand+1,c
  2218  000F8A  0E03               	movlw	3
  2219  000F8C  6E19               	movwf	___wmul@multiplicand,c
  2220  000F8E  EC36  F00E         	call	___wmul	;wreg free
  2221  000F92  0E5A               	movlw	low _Temp_DegF
  2222  000F94  2417               	addwf	?___wmul,w,c
  2223  000F96  6ED9               	movwf	fsr2l,c
  2224  000F98  0E01               	movlw	high _Temp_DegF
  2225  000F9A  2018               	addwfc	?___wmul+1,w,c
  2226  000F9C  6EDA               	movwf	fsr2h,c
  2227  000F9E  C0EC  F017         	movff	Temp_Filter@x,___wmul@multiplier
  2228  000FA2  C0ED  F018         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2229  000FA6  0E00               	movlw	0
  2230  000FA8  6E1A               	movwf	___wmul@multiplicand+1,c
  2231  000FAA  0E03               	movlw	3
  2232  000FAC  6E19               	movwf	___wmul@multiplicand,c
  2233  000FAE  EC36  F00E         	call	___wmul	;wreg free
  2234  000FB2  0E3C               	movlw	low _PrevTemp_DegF
  2235  000FB4  2417               	addwf	?___wmul,w,c
  2236  000FB6  6EE1               	movwf	fsr1l,c
  2237  000FB8  0E01               	movlw	high _PrevTemp_DegF
  2238  000FBA  2018               	addwfc	?___wmul+1,w,c
  2239  000FBC  6EE2               	movwf	fsr1h,c
  2240  000FBE  CFDE FFE6          	movff	postinc2,postinc1
  2241  000FC2  CFDE FFE6          	movff	postinc2,postinc1
  2242  000FC6  CFDE FFE6          	movff	postinc2,postinc1
  2243  000FCA  0100               	movlb	0	; () banked
  2244  000FCC  4BEC               	infsnz	Temp_Filter@x& (0+255),f,b
  2245  000FCE  2BED               	incf	(Temp_Filter@x+1)& (0+255),f,b
  2246  000FD0  D7C9               	goto	l3408
  2247                           
  2248                           ; BSR set to: 0
  2249  000FD2  0012               	return	
  2250  000FD4                     l428:
  2251                           
  2252                           ; BSR set to: 0
  2253  000FD4  0012               	return		;funcret
  2254  000FD6                     __end_of_Temp_Filter:
  2255                           	opt stack 0
  2256                           tblptru	equ	0xFF8
  2257                           tblptrh	equ	0xFF7
  2258                           tblptrl	equ	0xFF6
  2259                           tablat	equ	0xFF5
  2260                           prodh	equ	0xFF4
  2261                           prodl	equ	0xFF3
  2262                           intcon	equ	0xFF2
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           postinc1	equ	0xFE6
  2266                           postdec1	equ	0xFE5
  2267                           fsr1h	equ	0xFE2
  2268                           fsr1l	equ	0xFE1
  2269                           indf2	equ	0xFDF
  2270                           postinc2	equ	0xFDE
  2271                           postdec2	equ	0xFDD
  2272                           fsr2h	equ	0xFDA
  2273                           fsr2l	equ	0xFD9
  2274                           status	equ	0xFD8
  2275                           
  2276 ;; *************** function _SYSTEM_Initialize *****************
  2277 ;; Defined at:
  2278 ;;		line 112 in file "mcc_generated_files/mcc.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;		None
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;		None
  2283 ;; Return value:  Size  Location     Type
  2284 ;;		None               void
  2285 ;; Registers used:
  2286 ;;		wreg, status,2, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2292 ;;      Params:         0       0       0       0       0       0       0
  2293 ;;      Locals:         0       0       0       0       0       0       0
  2294 ;;      Temps:          0       0       0       0       0       0       0
  2295 ;;      Totals:         0       0       0       0       0       0       0
  2296 ;;Total ram usage:        0 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    6
  2299 ;; This function calls:
  2300 ;;		_ADC_Initialize
  2301 ;;		_EUSART1_Initialize
  2302 ;;		_INTERRUPT_Initialize
  2303 ;;		_OSCILLATOR_Initialize
  2304 ;;		_PIN_MANAGER_Initialize
  2305 ;;		_TMR1_Initialize
  2306 ;; This function is called by:
  2307 ;;		_main
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text11
  2312  001CB6                     __ptext11:
  2313                           	opt stack 0
  2314  001CB6                     _SYSTEM_Initialize:
  2315                           	opt stack 24
  2316                           
  2317                           ;mcc.c: 114: OSCILLATOR_Initialize();
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;incstack = 0
  2321  001CB6  ECB0  F00E         	call	_OSCILLATOR_Initialize	;wreg free
  2322                           
  2323                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  2324  001CBA  EC39  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  2325                           
  2326                           ;mcc.c: 116: INTERRUPT_Initialize();
  2327  001CBE  ECB7  F00E         	call	_INTERRUPT_Initialize	;wreg free
  2328                           
  2329                           ;mcc.c: 117: ADC_Initialize();
  2330  001CC2  EC75  F00E         	call	_ADC_Initialize	;wreg free
  2331                           
  2332                           ;mcc.c: 118: EUSART1_Initialize();
  2333  001CC6  EC80  F00D         	call	_EUSART1_Initialize	;wreg free
  2334                           
  2335                           ;mcc.c: 119: TMR1_Initialize();
  2336  001CCA  EC4A  F00E         	call	_TMR1_Initialize	;wreg free
  2337  001CCE  0012               	return		;funcret
  2338  001CD0                     __end_of_SYSTEM_Initialize:
  2339                           	opt stack 0
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           intcon	equ	0xFF2
  2347                           postinc0	equ	0xFEE
  2348                           wreg	equ	0xFE8
  2349                           postinc1	equ	0xFE6
  2350                           postdec1	equ	0xFE5
  2351                           fsr1h	equ	0xFE2
  2352                           fsr1l	equ	0xFE1
  2353                           indf2	equ	0xFDF
  2354                           postinc2	equ	0xFDE
  2355                           postdec2	equ	0xFDD
  2356                           fsr2h	equ	0xFDA
  2357                           fsr2l	equ	0xFD9
  2358                           status	equ	0xFD8
  2359                           
  2360 ;; *************** function _TMR1_Initialize *****************
  2361 ;; Defined at:
  2362 ;;		line 23 in file "mcc_generated_files/tmr1.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;		None
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;		None
  2367 ;; Return value:  Size  Location     Type
  2368 ;;		None               void
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2376 ;;      Params:         0       0       0       0       0       0       0
  2377 ;;      Locals:         0       0       0       0       0       0       0
  2378 ;;      Temps:          0       0       0       0       0       0       0
  2379 ;;      Totals:         0       0       0       0       0       0       0
  2380 ;;Total ram usage:        0 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    5
  2383 ;; This function calls:
  2384 ;;		_TMR1_StartTimer
  2385 ;; This function is called by:
  2386 ;;		_SYSTEM_Initialize
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text12
  2391  001C94                     __ptext12:
  2392                           	opt stack 0
  2393  001C94                     _TMR1_Initialize:
  2394                           	opt stack 24
  2395                           
  2396                           ;tmr1.c: 28: T1CON = 0x34;
  2397                           
  2398                           ;incstack = 0
  2399  001C94  0E34               	movlw	52
  2400  001C96  6ECD               	movwf	4045,c	;volatile
  2401                           
  2402                           ;tmr1.c: 31: T1GCON = 0x00;
  2403  001C98  0E00               	movlw	0
  2404  001C9A  6ECC               	movwf	4044,c	;volatile
  2405                           
  2406                           ;tmr1.c: 34: TMR1H = 0x0B;
  2407  001C9C  0E0B               	movlw	11
  2408  001C9E  6ECF               	movwf	4047,c	;volatile
  2409                           
  2410                           ;tmr1.c: 37: TMR1L = 0xDC;
  2411  001CA0  0EDC               	movlw	220
  2412  001CA2  6ECE               	movwf	4046,c	;volatile
  2413                           
  2414                           ;tmr1.c: 40: timer1ReloadVal=TMR1;
  2415  001CA4  CFCE F047          	movff	4046,_timer1ReloadVal	;volatile
  2416  001CA8  CFCF F048          	movff	4047,_timer1ReloadVal+1	;volatile
  2417                           
  2418                           ;tmr1.c: 43: PIR1bits.TMR1IF = 0;
  2419  001CAC  909E               	bcf	3998,0,c	;volatile
  2420                           
  2421                           ;tmr1.c: 46: PIE1bits.TMR1IE = 1;
  2422  001CAE  809D               	bsf	3997,0,c	;volatile
  2423                           
  2424                           ;tmr1.c: 49: TMR1_StartTimer();
  2425  001CB0  ECC2  F00E         	call	_TMR1_StartTimer	;wreg free
  2426  001CB4  0012               	return		;funcret
  2427  001CB6                     __end_of_TMR1_Initialize:
  2428                           	opt stack 0
  2429                           tblptru	equ	0xFF8
  2430                           tblptrh	equ	0xFF7
  2431                           tblptrl	equ	0xFF6
  2432                           tablat	equ	0xFF5
  2433                           prodh	equ	0xFF4
  2434                           prodl	equ	0xFF3
  2435                           intcon	equ	0xFF2
  2436                           postinc0	equ	0xFEE
  2437                           wreg	equ	0xFE8
  2438                           postinc1	equ	0xFE6
  2439                           postdec1	equ	0xFE5
  2440                           fsr1h	equ	0xFE2
  2441                           fsr1l	equ	0xFE1
  2442                           indf2	equ	0xFDF
  2443                           postinc2	equ	0xFDE
  2444                           postdec2	equ	0xFDD
  2445                           fsr2h	equ	0xFDA
  2446                           fsr2l	equ	0xFD9
  2447                           status	equ	0xFD8
  2448                           
  2449 ;; *************** function _TMR1_StartTimer *****************
  2450 ;; Defined at:
  2451 ;;		line 52 in file "mcc_generated_files/tmr1.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;		None               void
  2458 ;; Registers used:
  2459 ;;		None
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2465 ;;      Params:         0       0       0       0       0       0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0
  2468 ;;      Totals:         0       0       0       0       0       0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    4
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_TMR1_Initialize
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text13
  2480  001D84                     __ptext13:
  2481                           	opt stack 0
  2482  001D84                     _TMR1_StartTimer:
  2483                           	opt stack 24
  2484                           
  2485                           ;tmr1.c: 55: T1CONbits.TMR1ON = 1;
  2486                           
  2487                           ;incstack = 0
  2488  001D84  80CD               	bsf	4045,0,c	;volatile
  2489  001D86  0012               	return		;funcret
  2490  001D88                     __end_of_TMR1_StartTimer:
  2491                           	opt stack 0
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           prodh	equ	0xFF4
  2497                           prodl	equ	0xFF3
  2498                           intcon	equ	0xFF2
  2499                           postinc0	equ	0xFEE
  2500                           wreg	equ	0xFE8
  2501                           postinc1	equ	0xFE6
  2502                           postdec1	equ	0xFE5
  2503                           fsr1h	equ	0xFE2
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           postinc2	equ	0xFDE
  2507                           postdec2	equ	0xFDD
  2508                           fsr2h	equ	0xFDA
  2509                           fsr2l	equ	0xFD9
  2510                           status	equ	0xFD8
  2511                           
  2512 ;; *************** function _PIN_MANAGER_Initialize *****************
  2513 ;; Defined at:
  2514 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;		None
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;		None
  2519 ;; Return value:  Size  Location     Type
  2520 ;;		None               void
  2521 ;; Registers used:
  2522 ;;		wreg, status,2
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2528 ;;      Params:         0       0       0       0       0       0       0
  2529 ;;      Locals:         0       0       0       0       0       0       0
  2530 ;;      Temps:          0       0       0       0       0       0       0
  2531 ;;      Totals:         0       0       0       0       0       0       0
  2532 ;;Total ram usage:        0 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    4
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_SYSTEM_Initialize
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	text14
  2543  001A72                     __ptext14:
  2544                           	opt stack 0
  2545  001A72                     _PIN_MANAGER_Initialize:
  2546                           	opt stack 25
  2547                           
  2548                           ;pin_manager.c: 52: LATA = 0x00;
  2549                           
  2550                           ;incstack = 0
  2551  001A72  0E00               	movlw	0
  2552  001A74  6E89               	movwf	3977,c	;volatile
  2553                           
  2554                           ;pin_manager.c: 53: TRISA = 0x2F;
  2555  001A76  0E2F               	movlw	47
  2556  001A78  6E92               	movwf	3986,c	;volatile
  2557                           
  2558                           ;pin_manager.c: 54: ANSELA = 0x2F;
  2559  001A7A  0E2F               	movlw	47
  2560  001A7C  010F               	movlb	15	; () banked
  2561  001A7E  6F38               	movwf	56,b	;volatile
  2562                           
  2563                           ;pin_manager.c: 56: LATB = 0x00;
  2564  001A80  0E00               	movlw	0
  2565  001A82  6E8A               	movwf	3978,c	;volatile
  2566                           
  2567                           ;pin_manager.c: 57: TRISB = 0xF8;
  2568  001A84  0EF8               	movlw	248
  2569  001A86  6E93               	movwf	3987,c	;volatile
  2570                           
  2571                           ;pin_manager.c: 58: ANSELB = 0x38;
  2572  001A88  0E38               	movlw	56
  2573  001A8A  010F               	movlb	15	; () banked
  2574  001A8C  6F39               	movwf	57,b	;volatile
  2575                           
  2576                           ;pin_manager.c: 59: WPUB = 0x00;
  2577  001A8E  0E00               	movlw	0
  2578  001A90  6E61               	movwf	3937,c	;volatile
  2579                           
  2580                           ;pin_manager.c: 61: LATC = 0x00;
  2581  001A92  0E00               	movlw	0
  2582  001A94  6E8B               	movwf	3979,c	;volatile
  2583                           
  2584                           ;pin_manager.c: 62: TRISC = 0xD6;
  2585  001A96  0ED6               	movlw	214
  2586  001A98  6E94               	movwf	3988,c	;volatile
  2587                           
  2588                           ;pin_manager.c: 63: ANSELC = 0x14;
  2589  001A9A  0E14               	movlw	20
  2590  001A9C  010F               	movlb	15	; () banked
  2591  001A9E  6F3A               	movwf	58,b	;volatile
  2592                           
  2593                           ;pin_manager.c: 65: LATD = 0x00;
  2594  001AA0  0E00               	movlw	0
  2595  001AA2  6E8C               	movwf	3980,c	;volatile
  2596                           
  2597                           ;pin_manager.c: 66: TRISD = 0x03;
  2598  001AA4  0E03               	movlw	3
  2599  001AA6  6E95               	movwf	3989,c	;volatile
  2600                           
  2601                           ;pin_manager.c: 67: ANSELD = 0x03;
  2602  001AA8  0E03               	movlw	3
  2603  001AAA  010F               	movlb	15	; () banked
  2604  001AAC  6F3B               	movwf	59,b	;volatile
  2605                           
  2606                           ;pin_manager.c: 69: LATE = 0x00;
  2607  001AAE  0E00               	movlw	0
  2608  001AB0  6E8D               	movwf	3981,c	;volatile
  2609                           
  2610                           ;pin_manager.c: 70: TRISE = 0x07;
  2611  001AB2  0E07               	movlw	7
  2612  001AB4  6E96               	movwf	3990,c	;volatile
  2613                           
  2614                           ;pin_manager.c: 71: ANSELE = 0x07;
  2615  001AB6  0E07               	movlw	7
  2616  001AB8  010F               	movlb	15	; () banked
  2617  001ABA  6F3C               	movwf	60,b	;volatile
  2618                           
  2619                           ; BSR set to: 15
  2620                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  2621  001ABC  8EF1               	bsf	intcon2,7,c	;volatile
  2622                           
  2623                           ; BSR set to: 15
  2624  001ABE  0012               	return		;funcret
  2625  001AC0                     __end_of_PIN_MANAGER_Initialize:
  2626                           	opt stack 0
  2627                           tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           prodh	equ	0xFF4
  2632                           prodl	equ	0xFF3
  2633                           intcon	equ	0xFF2
  2634                           intcon2	equ	0xFF1
  2635                           postinc0	equ	0xFEE
  2636                           wreg	equ	0xFE8
  2637                           postinc1	equ	0xFE6
  2638                           postdec1	equ	0xFE5
  2639                           fsr1h	equ	0xFE2
  2640                           fsr1l	equ	0xFE1
  2641                           indf2	equ	0xFDF
  2642                           postinc2	equ	0xFDE
  2643                           postdec2	equ	0xFDD
  2644                           fsr2h	equ	0xFDA
  2645                           fsr2l	equ	0xFD9
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _OSCILLATOR_Initialize *****************
  2649 ;; Defined at:
  2650 ;;		line 122 in file "mcc_generated_files/mcc.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;		None               void
  2657 ;; Registers used:
  2658 ;;		wreg, status,2
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2664 ;;      Params:         0       0       0       0       0       0       0
  2665 ;;      Locals:         0       0       0       0       0       0       0
  2666 ;;      Temps:          0       0       0       0       0       0       0
  2667 ;;      Totals:         0       0       0       0       0       0       0
  2668 ;;Total ram usage:        0 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    4
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_SYSTEM_Initialize
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text15
  2679  001D60                     __ptext15:
  2680                           	opt stack 0
  2681  001D60                     _OSCILLATOR_Initialize:
  2682                           	opt stack 25
  2683                           
  2684                           ;mcc.c: 125: OSCCON = 0x62;
  2685                           
  2686                           ; BSR set to: 15
  2687                           ;incstack = 0
  2688  001D60  0E62               	movlw	98
  2689  001D62  6ED3               	movwf	4051,c	;volatile
  2690                           
  2691                           ;mcc.c: 127: OSCCON2 = 0x04;
  2692  001D64  0E04               	movlw	4
  2693  001D66  6ED2               	movwf	4050,c	;volatile
  2694                           
  2695                           ;mcc.c: 129: OSCTUNE = 0x00;
  2696  001D68  0E00               	movlw	0
  2697  001D6A  6E9B               	movwf	3995,c	;volatile
  2698  001D6C  0012               	return		;funcret
  2699  001D6E                     __end_of_OSCILLATOR_Initialize:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           prodh	equ	0xFF4
  2706                           prodl	equ	0xFF3
  2707                           intcon	equ	0xFF2
  2708                           intcon2	equ	0xFF1
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           postinc1	equ	0xFE6
  2712                           postdec1	equ	0xFE5
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _INTERRUPT_Initialize *****************
  2723 ;; Defined at:
  2724 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;		None               void
  2731 ;; Registers used:
  2732 ;;		None
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2738 ;;      Params:         0       0       0       0       0       0       0
  2739 ;;      Locals:         0       0       0       0       0       0       0
  2740 ;;      Temps:          0       0       0       0       0       0       0
  2741 ;;      Totals:         0       0       0       0       0       0       0
  2742 ;;Total ram usage:        0 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    4
  2745 ;; This function calls:
  2746 ;;		Nothing
  2747 ;; This function is called by:
  2748 ;;		_SYSTEM_Initialize
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text16
  2753  001D6E                     __ptext16:
  2754                           	opt stack 0
  2755  001D6E                     _INTERRUPT_Initialize:
  2756                           	opt stack 25
  2757                           
  2758                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  2759                           
  2760                           ;incstack = 0
  2761  001D6E  9ED0               	bcf	4048,7,c	;volatile
  2762                           
  2763                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  2764  001D70  9A9F               	bcf	3999,5,c	;volatile
  2765                           
  2766                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  2767  001D72  9C9F               	bcf	3999,6,c	;volatile
  2768                           
  2769                           ;interrupt_manager.c: 64: IPR1bits.TX1IP = 0;
  2770  001D74  989F               	bcf	3999,4,c	;volatile
  2771                           
  2772                           ;interrupt_manager.c: 66: IPR1bits.TMR1IP = 0;
  2773  001D76  909F               	bcf	3999,0,c	;volatile
  2774  001D78  0012               	return		;funcret
  2775  001D7A                     __end_of_INTERRUPT_Initialize:
  2776                           	opt stack 0
  2777                           tblptru	equ	0xFF8
  2778                           tblptrh	equ	0xFF7
  2779                           tblptrl	equ	0xFF6
  2780                           tablat	equ	0xFF5
  2781                           prodh	equ	0xFF4
  2782                           prodl	equ	0xFF3
  2783                           intcon	equ	0xFF2
  2784                           intcon2	equ	0xFF1
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           postinc1	equ	0xFE6
  2788                           postdec1	equ	0xFE5
  2789                           fsr1h	equ	0xFE2
  2790                           fsr1l	equ	0xFE1
  2791                           indf2	equ	0xFDF
  2792                           postinc2	equ	0xFDE
  2793                           postdec2	equ	0xFDD
  2794                           fsr2h	equ	0xFDA
  2795                           fsr2l	equ	0xFD9
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function _EUSART1_Initialize *****************
  2799 ;; Defined at:
  2800 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;		None               void
  2807 ;; Registers used:
  2808 ;;		wreg, status,2
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2814 ;;      Params:         0       0       0       0       0       0       0
  2815 ;;      Locals:         0       0       0       0       0       0       0
  2816 ;;      Temps:          0       0       0       0       0       0       0
  2817 ;;      Totals:         0       0       0       0       0       0       0
  2818 ;;Total ram usage:        0 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    4
  2821 ;; This function calls:
  2822 ;;		Nothing
  2823 ;; This function is called by:
  2824 ;;		_SYSTEM_Initialize
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text17
  2829  001B00                     __ptext17:
  2830                           	opt stack 0
  2831  001B00                     _EUSART1_Initialize:
  2832                           	opt stack 25
  2833                           
  2834                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  2835                           
  2836                           ;incstack = 0
  2837  001B00  9A9D               	bcf	3997,5,c	;volatile
  2838                           
  2839                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  2840  001B02  989D               	bcf	3997,4,c	;volatile
  2841                           
  2842                           ;eusart1.c: 85: BAUD1CON = 0x48;
  2843  001B04  0E48               	movlw	72
  2844  001B06  6EB8               	movwf	4024,c	;volatile
  2845                           
  2846                           ;eusart1.c: 88: RC1STA = 0x98;
  2847  001B08  0E98               	movlw	152
  2848  001B0A  6EAB               	movwf	4011,c	;volatile
  2849                           
  2850                           ;eusart1.c: 91: TX1STA = 0x26;
  2851  001B0C  0E26               	movlw	38
  2852  001B0E  6EAC               	movwf	4012,c	;volatile
  2853                           
  2854                           ;eusart1.c: 94: SPBRG1 = 0x67;
  2855  001B10  0E67               	movlw	103
  2856  001B12  6EAF               	movwf	4015,c	;volatile
  2857                           
  2858                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  2859  001B14  0E00               	movlw	0
  2860  001B16  6EB0               	movwf	4016,c	;volatile
  2861                           
  2862                           ;eusart1.c: 100: TXREG1 = 0x00;
  2863  001B18  0E00               	movlw	0
  2864  001B1A  6EAD               	movwf	4013,c	;volatile
  2865                           
  2866                           ;eusart1.c: 103: RCREG1 = 0x00;
  2867  001B1C  0E00               	movlw	0
  2868  001B1E  6EAE               	movwf	4014,c	;volatile
  2869                           
  2870                           ;eusart1.c: 107: eusart1TxHead = 0;
  2871  001B20  0E00               	movlw	0
  2872  001B22  6E45               	movwf	_eusart1TxHead,c
  2873                           
  2874                           ;eusart1.c: 108: eusart1TxTail = 0;
  2875  001B24  0E00               	movlw	0
  2876  001B26  6E46               	movwf	_eusart1TxTail,c
  2877                           
  2878                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  2879  001B28  0E08               	movlw	8
  2880  001B2A  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  2881                           
  2882                           ;eusart1.c: 111: eusart1RxHead = 0;
  2883  001B2C  0E00               	movlw	0
  2884  001B2E  6E43               	movwf	_eusart1RxHead,c
  2885                           
  2886                           ;eusart1.c: 112: eusart1RxTail = 0;
  2887  001B30  0E00               	movlw	0
  2888  001B32  6E44               	movwf	_eusart1RxTail,c
  2889                           
  2890                           ;eusart1.c: 113: eusart1RxCount = 0;
  2891  001B34  0E00               	movlw	0
  2892  001B36  6E42               	movwf	_eusart1RxCount,c	;volatile
  2893                           
  2894                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  2895  001B38  8A9D               	bsf	3997,5,c	;volatile
  2896  001B3A  0012               	return		;funcret
  2897  001B3C                     __end_of_EUSART1_Initialize:
  2898                           	opt stack 0
  2899                           tblptru	equ	0xFF8
  2900                           tblptrh	equ	0xFF7
  2901                           tblptrl	equ	0xFF6
  2902                           tablat	equ	0xFF5
  2903                           prodh	equ	0xFF4
  2904                           prodl	equ	0xFF3
  2905                           intcon	equ	0xFF2
  2906                           intcon2	equ	0xFF1
  2907                           postinc0	equ	0xFEE
  2908                           wreg	equ	0xFE8
  2909                           postinc1	equ	0xFE6
  2910                           postdec1	equ	0xFE5
  2911                           fsr1h	equ	0xFE2
  2912                           fsr1l	equ	0xFE1
  2913                           indf2	equ	0xFDF
  2914                           postinc2	equ	0xFDE
  2915                           postdec2	equ	0xFDD
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _ADC_Initialize *****************
  2921 ;; Defined at:
  2922 ;;		line 61 in file "mcc_generated_files/adc.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;		None
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;		None
  2927 ;; Return value:  Size  Location     Type
  2928 ;;		None               void
  2929 ;; Registers used:
  2930 ;;		wreg, status,2
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2936 ;;      Params:         0       0       0       0       0       0       0
  2937 ;;      Locals:         0       0       0       0       0       0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0
  2939 ;;      Totals:         0       0       0       0       0       0       0
  2940 ;;Total ram usage:        0 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    4
  2943 ;; This function calls:
  2944 ;;		Nothing
  2945 ;; This function is called by:
  2946 ;;		_SYSTEM_Initialize
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text18
  2951  001CEA                     __ptext18:
  2952                           	opt stack 0
  2953  001CEA                     _ADC_Initialize:
  2954                           	opt stack 25
  2955                           
  2956                           ;adc.c: 66: ADCON0 = 0x01;
  2957                           
  2958                           ;incstack = 0
  2959  001CEA  0E01               	movlw	1
  2960  001CEC  6EC2               	movwf	4034,c	;volatile
  2961                           
  2962                           ;adc.c: 69: ADCON1 = 0x81;
  2963  001CEE  0E81               	movlw	129
  2964  001CF0  6EC1               	movwf	4033,c	;volatile
  2965                           
  2966                           ;adc.c: 72: ADCON2 = 0x0A;
  2967  001CF2  0E0A               	movlw	10
  2968  001CF4  6EC0               	movwf	4032,c	;volatile
  2969                           
  2970                           ;adc.c: 75: ADRESL = 0x00;
  2971  001CF6  0E00               	movlw	0
  2972  001CF8  6EC3               	movwf	4035,c	;volatile
  2973                           
  2974                           ;adc.c: 78: ADRESH = 0x00;
  2975  001CFA  0E00               	movlw	0
  2976  001CFC  6EC4               	movwf	4036,c	;volatile
  2977                           
  2978                           ;adc.c: 81: PIE1bits.ADIE = 1;
  2979  001CFE  8C9D               	bsf	3997,6,c	;volatile
  2980  001D00  0012               	return		;funcret
  2981  001D02                     __end_of_ADC_Initialize:
  2982                           	opt stack 0
  2983                           tblptru	equ	0xFF8
  2984                           tblptrh	equ	0xFF7
  2985                           tblptrl	equ	0xFF6
  2986                           tablat	equ	0xFF5
  2987                           prodh	equ	0xFF4
  2988                           prodl	equ	0xFF3
  2989                           intcon	equ	0xFF2
  2990                           intcon2	equ	0xFF1
  2991                           postinc0	equ	0xFEE
  2992                           wreg	equ	0xFE8
  2993                           postinc1	equ	0xFE6
  2994                           postdec1	equ	0xFE5
  2995                           fsr1h	equ	0xFE2
  2996                           fsr1l	equ	0xFE1
  2997                           indf2	equ	0xFDF
  2998                           postinc2	equ	0xFDE
  2999                           postdec2	equ	0xFDD
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _Battery_Fault *****************
  3005 ;; Defined at:
  3006 ;;		line 11 in file "Battery.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  i               2   38[COMRAM] int 
  3011 ;;  fault           1   37[COMRAM] unsigned char 
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  1    wreg      unsigned char 
  3014 ;; Registers used:
  3015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3021 ;;      Params:         0       0       0       0       0       0       0
  3022 ;;      Locals:         3       0       0       0       0       0       0
  3023 ;;      Temps:          0       0       0       0       0       0       0
  3024 ;;      Totals:         3       0       0       0       0       0       0
  3025 ;;Total ram usage:        3 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    5
  3028 ;; This function calls:
  3029 ;;		___ftge
  3030 ;;		___wmul
  3031 ;; This function is called by:
  3032 ;;		_main
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text19
  3037  001720                     __ptext19:
  3038                           	opt stack 0
  3039  001720                     _Battery_Fault:
  3040                           	opt stack 25
  3041                           
  3042                           ;Battery.c: 13: char fault = 0;
  3043                           
  3044                           ;incstack = 0
  3045  001720  0E00               	movlw	0
  3046  001722  6E26               	movwf	Battery_Fault@fault,c
  3047                           
  3048                           ;Battery.c: 14: for(int i = 0;i<9;i++)
  3049  001724  0E00               	movlw	0
  3050  001726  6E28               	movwf	Battery_Fault@i+1,c
  3051  001728  0E00               	movlw	0
  3052  00172A  6E27               	movwf	Battery_Fault@i,c
  3053  00172C                     l3496:
  3054  00172C  BE28               	btfsc	Battery_Fault@i+1,7,c
  3055  00172E  D008               	goto	l3500
  3056  001730  5028               	movf	Battery_Fault@i+1,w,c
  3057  001732  E14D               	bnz	l334
  3058  001734  0E09               	movlw	9
  3059  001736  5C27               	subwf	Battery_Fault@i,w,c
  3060  001738  B0D8               	btfsc	status,0,c
  3061  00173A  0012               	return	
  3062  00173C  D001               	goto	l3500
  3063  00173E  0012               	return	
  3064  001740                     l3500:
  3065                           
  3066                           ;Battery.c: 15: {
  3067                           ;Battery.c: 16: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  3068  001740  0E00               	movlw	0
  3069  001742  6E1D               	movwf	___ftge@ff1,c
  3070  001744  0E40               	movlw	64
  3071  001746  6E1E               	movwf	___ftge@ff1+1,c
  3072  001748  0E40               	movlw	64
  3073  00174A  6E1F               	movwf	___ftge@ff1+2,c
  3074  00174C  C027  F017         	movff	Battery_Fault@i,___wmul@multiplier
  3075  001750  C028  F018         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  3076  001754  0E00               	movlw	0
  3077  001756  6E1A               	movwf	___wmul@multiplicand+1,c
  3078  001758  0E03               	movlw	3
  3079  00175A  6E19               	movwf	___wmul@multiplicand,c
  3080  00175C  EC36  F00E         	call	___wmul	;wreg free
  3081  001760  0E7E               	movlw	low _Battery_Volt
  3082  001762  2417               	addwf	?___wmul,w,c
  3083  001764  6ED9               	movwf	fsr2l,c
  3084  001766  0E00               	movlw	high _Battery_Volt
  3085  001768  2018               	addwfc	?___wmul+1,w,c
  3086  00176A  6EDA               	movwf	fsr2h,c
  3087  00176C  CFDE F020          	movff	postinc2,___ftge@ff2
  3088  001770  CFDE F021          	movff	postinc2,___ftge@ff2+1
  3089  001774  CFDD F022          	movff	postdec2,___ftge@ff2+2
  3090  001778  ECE8  F00B         	call	___ftge	;wreg free
  3091  00177C  B0D8               	btfsc	status,0,c
  3092  00177E  D023               	goto	l3506
  3093  001780  C027  F017         	movff	Battery_Fault@i,___wmul@multiplier
  3094  001784  C028  F018         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  3095  001788  0E00               	movlw	0
  3096  00178A  6E1A               	movwf	___wmul@multiplicand+1,c
  3097  00178C  0E03               	movlw	3
  3098  00178E  6E19               	movwf	___wmul@multiplicand,c
  3099  001790  EC36  F00E         	call	___wmul	;wreg free
  3100  001794  0E7E               	movlw	low _Battery_Volt
  3101  001796  2417               	addwf	?___wmul,w,c
  3102  001798  6ED9               	movwf	fsr2l,c
  3103  00179A  0E00               	movlw	high _Battery_Volt
  3104  00179C  2018               	addwfc	?___wmul+1,w,c
  3105  00179E  6EDA               	movwf	fsr2h,c
  3106  0017A0  CFDE F01D          	movff	postinc2,___ftge@ff1
  3107  0017A4  CFDE F01E          	movff	postinc2,___ftge@ff1+1
  3108  0017A8  CFDD F01F          	movff	postdec2,___ftge@ff1+2
  3109  0017AC  0EB8               	movlw	184
  3110  0017AE  6E20               	movwf	___ftge@ff2,c
  3111  0017B0  0E86               	movlw	134
  3112  0017B2  6E21               	movwf	___ftge@ff2+1,c
  3113  0017B4  0E40               	movlw	64
  3114  0017B6  6E22               	movwf	___ftge@ff2+2,c
  3115  0017B8  ECE8  F00B         	call	___ftge	;wreg free
  3116  0017BC  B0D8               	btfsc	status,0,c
  3117  0017BE  D003               	goto	l3506
  3118                           
  3119                           ;Battery.c: 17: {
  3120                           ;Battery.c: 18: fault = 1;
  3121  0017C0  0E01               	movlw	1
  3122  0017C2  6E26               	movwf	Battery_Fault@fault,c
  3123  0017C4  D000               	goto	l3506
  3124  0017C6                     l3506:
  3125  0017C6  4A27               	infsnz	Battery_Fault@i,f,c
  3126  0017C8  2A28               	incf	Battery_Fault@i+1,f,c
  3127  0017CA  D7B0               	goto	l3496
  3128  0017CC  0012               	return	
  3129  0017CE                     l334:
  3130  0017CE  0012               	return		;funcret
  3131  0017D0                     __end_of_Battery_Fault:
  3132                           	opt stack 0
  3133                           tblptru	equ	0xFF8
  3134                           tblptrh	equ	0xFF7
  3135                           tblptrl	equ	0xFF6
  3136                           tablat	equ	0xFF5
  3137                           prodh	equ	0xFF4
  3138                           prodl	equ	0xFF3
  3139                           intcon	equ	0xFF2
  3140                           intcon2	equ	0xFF1
  3141                           postinc0	equ	0xFEE
  3142                           wreg	equ	0xFE8
  3143                           postinc1	equ	0xFE6
  3144                           postdec1	equ	0xFE5
  3145                           fsr1h	equ	0xFE2
  3146                           fsr1l	equ	0xFE1
  3147                           indf2	equ	0xFDF
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function ___ftge *****************
  3155 ;; Defined at:
  3156 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  ff1             3   28[COMRAM] float 
  3159 ;;  ff2             3   31[COMRAM] float 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;		None
  3162 ;; Return value:  Size  Location     Type
  3163 ;;		None               void
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3171 ;;      Params:         6       0       0       0       0       0       0
  3172 ;;      Locals:         0       0       0       0       0       0       0
  3173 ;;      Temps:          3       0       0       0       0       0       0
  3174 ;;      Totals:         9       0       0       0       0       0       0
  3175 ;;Total ram usage:        9 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    4
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_Battery_Fault
  3182 ;;		_Temp_Fault
  3183 ;;		_Current_Fault
  3184 ;;		_RunBypas
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           	psect	text20
  3189  0017D0                     __ptext20:
  3190                           	opt stack 0
  3191  0017D0                     ___ftge:
  3192                           	opt stack 25
  3193                           
  3194                           ;incstack = 0
  3195  0017D0  AE1F               	btfss	___ftge@ff1+2,7,c
  3196  0017D2  D017               	goto	l2630
  3197  0017D4  C01D  F023         	movff	___ftge@ff1,??___ftge
  3198  0017D8  C01E  F024         	movff	___ftge@ff1+1,??___ftge+1
  3199  0017DC  C01F  F025         	movff	___ftge@ff1+2,??___ftge+2
  3200  0017E0  1E23               	comf	??___ftge,f,c
  3201  0017E2  1E24               	comf	??___ftge+1,f,c
  3202  0017E4  1E25               	comf	??___ftge+2,f,c
  3203  0017E6  2A23               	incf	??___ftge,f,c
  3204  0017E8  0E00               	movlw	0
  3205  0017EA  2224               	addwfc	??___ftge+1,f,c
  3206  0017EC  2225               	addwfc	??___ftge+2,f,c
  3207  0017EE  0E00               	movlw	0
  3208  0017F0  2423               	addwf	??___ftge,w,c
  3209  0017F2  6E1D               	movwf	___ftge@ff1,c
  3210  0017F4  0E00               	movlw	0
  3211  0017F6  2024               	addwfc	??___ftge+1,w,c
  3212  0017F8  6E1E               	movwf	___ftge@ff1+1,c
  3213  0017FA  0E80               	movlw	128
  3214  0017FC  2025               	addwfc	??___ftge+2,w,c
  3215  0017FE  6E1F               	movwf	___ftge@ff1+2,c
  3216  001800  D000               	goto	l2630
  3217  001802                     l2630:
  3218  001802  AE22               	btfss	___ftge@ff2+2,7,c
  3219  001804  D017               	goto	l2634
  3220  001806  C020  F023         	movff	___ftge@ff2,??___ftge
  3221  00180A  C021  F024         	movff	___ftge@ff2+1,??___ftge+1
  3222  00180E  C022  F025         	movff	___ftge@ff2+2,??___ftge+2
  3223  001812  1E23               	comf	??___ftge,f,c
  3224  001814  1E24               	comf	??___ftge+1,f,c
  3225  001816  1E25               	comf	??___ftge+2,f,c
  3226  001818  2A23               	incf	??___ftge,f,c
  3227  00181A  0E00               	movlw	0
  3228  00181C  2224               	addwfc	??___ftge+1,f,c
  3229  00181E  2225               	addwfc	??___ftge+2,f,c
  3230  001820  0E00               	movlw	0
  3231  001822  2423               	addwf	??___ftge,w,c
  3232  001824  6E20               	movwf	___ftge@ff2,c
  3233  001826  0E00               	movlw	0
  3234  001828  2024               	addwfc	??___ftge+1,w,c
  3235  00182A  6E21               	movwf	___ftge@ff2+1,c
  3236  00182C  0E80               	movlw	128
  3237  00182E  2025               	addwfc	??___ftge+2,w,c
  3238  001830  6E22               	movwf	___ftge@ff2+2,c
  3239  001832  D000               	goto	l2634
  3240  001834                     l2634:
  3241  001834  0E00               	movlw	0
  3242  001836  1A1D               	xorwf	___ftge@ff1,f,c
  3243  001838  0E00               	movlw	0
  3244  00183A  1A1E               	xorwf	___ftge@ff1+1,f,c
  3245  00183C  0E80               	movlw	128
  3246  00183E  1A1F               	xorwf	___ftge@ff1+2,f,c
  3247  001840  0E00               	movlw	0
  3248  001842  1A20               	xorwf	___ftge@ff2,f,c
  3249  001844  0E00               	movlw	0
  3250  001846  1A21               	xorwf	___ftge@ff2+1,f,c
  3251  001848  0E80               	movlw	128
  3252  00184A  1A22               	xorwf	___ftge@ff2+2,f,c
  3253  00184C  5020               	movf	___ftge@ff2,w,c
  3254  00184E  5C1D               	subwf	___ftge@ff1,w,c
  3255  001850  5021               	movf	___ftge@ff2+1,w,c
  3256  001852  581E               	subwfb	___ftge@ff1+1,w,c
  3257  001854  5022               	movf	___ftge@ff2+2,w,c
  3258  001856  581F               	subwfb	___ftge@ff1+2,w,c
  3259  001858  B0D8               	btfsc	status,0,c
  3260  00185A  D002               	goto	l2640
  3261  00185C  90D8               	bcf	status,0,c
  3262  00185E  0012               	return	
  3263  001860                     l2640:
  3264  001860  80D8               	bsf	status,0,c
  3265  001862  0012               	return	
  3266  001864  0012               	return		;funcret
  3267  001866                     __end_of___ftge:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           prodh	equ	0xFF4
  3274                           prodl	equ	0xFF3
  3275                           intcon	equ	0xFF2
  3276                           intcon2	equ	0xFF1
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           postinc1	equ	0xFE6
  3280                           postdec1	equ	0xFE5
  3281                           fsr1h	equ	0xFE2
  3282                           fsr1l	equ	0xFE1
  3283                           indf2	equ	0xFDF
  3284                           postinc2	equ	0xFDE
  3285                           postdec2	equ	0xFDD
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _Battery_Convert *****************
  3291 ;; Defined at:
  3292 ;;		line 47 in file "Battery.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;		None
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  x               2   20[BANK0 ] int 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;		None               void
  3299 ;; Registers used:
  3300 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3306 ;;      Params:         0       0       0       0       0       0       0
  3307 ;;      Locals:         0       2       0       0       0       0       0
  3308 ;;      Temps:          0       0       0       0       0       0       0
  3309 ;;      Totals:         0       2       0       0       0       0       0
  3310 ;;Total ram usage:        2 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    7
  3313 ;; This function calls:
  3314 ;;		_Battery_Filter
  3315 ;;		___awtoft
  3316 ;;		___ftadd
  3317 ;;		___ftdiv
  3318 ;;		___ftmul
  3319 ;;		___wmul
  3320 ;; This function is called by:
  3321 ;;		_main
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text21
  3326  00157E                     __ptext21:
  3327                           	opt stack 0
  3328  00157E                     _Battery_Convert:
  3329                           	opt stack 23
  3330                           
  3331                           ;Battery.c: 49: int x;
  3332                           ;Battery.c: 50: for(x = 0; x < 10; x++)
  3333                           
  3334                           ;incstack = 0
  3335  00157E  0E00               	movlw	0
  3336  001580  0100               	movlb	0	; () banked
  3337  001582  6FEF               	movwf	(Battery_Convert@x+1)& (0+255),b
  3338  001584  0E00               	movlw	0
  3339  001586  6FEE               	movwf	Battery_Convert@x& (0+255),b
  3340  001588                     l3512:
  3341                           
  3342                           ; BSR set to: 0
  3343  001588  0100               	movlb	0	; () banked
  3344  00158A  BFEF               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
  3345  00158C  D00A               	goto	l3516
  3346  00158E  0100               	movlb	0	; () banked
  3347  001590  51EF               	movf	(Battery_Convert@x+1)& (0+255),w,b
  3348  001592  E160               	bnz	l3522
  3349  001594  0E0A               	movlw	10
  3350  001596  0100               	movlb	0	; () banked
  3351  001598  5DEE               	subwf	Battery_Convert@x& (0+255),w,b
  3352  00159A  B0D8               	btfsc	status,0,c
  3353  00159C  D05B               	goto	l3522
  3354  00159E  D001               	goto	l3516
  3355                           
  3356                           ; BSR set to: 0
  3357  0015A0  D059               	goto	l3522
  3358  0015A2                     l3516:
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;Battery.c: 51: {
  3362                           ;Battery.c: 52: TempBattery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0) + 2.5;
  3363  0015A2  C0EE  F017         	movff	Battery_Convert@x,___wmul@multiplier
  3364  0015A6  C0EF  F018         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  3365  0015AA  0E00               	movlw	0
  3366  0015AC  6E1A               	movwf	___wmul@multiplicand+1,c
  3367  0015AE  0E03               	movlw	3
  3368  0015B0  6E19               	movwf	___wmul@multiplicand,c
  3369  0015B2  EC36  F00E         	call	___wmul	;wreg free
  3370  0015B6  0E96               	movlw	low _TempBattery_Volt
  3371  0015B8  2417               	addwf	?___wmul,w,c
  3372  0015BA  6ED9               	movwf	fsr2l,c
  3373  0015BC  0E01               	movlw	high _TempBattery_Volt
  3374  0015BE  2018               	addwfc	?___wmul+1,w,c
  3375  0015C0  6EDA               	movwf	fsr2h,c
  3376  0015C2  0E00               	movlw	0
  3377  0015C4  6E35               	movwf	___ftmul@f2,c
  3378  0015C6  0EA0               	movlw	160
  3379  0015C8  6E36               	movwf	___ftmul@f2+1,c
  3380  0015CA  0E40               	movlw	64
  3381  0015CC  6E37               	movwf	___ftmul@f2+2,c
  3382  0015CE  0E00               	movlw	0
  3383  0015D0  6E26               	movwf	___ftdiv@f2,c
  3384  0015D2  0E80               	movlw	128
  3385  0015D4  6E27               	movwf	___ftdiv@f2+1,c
  3386  0015D6  0E44               	movlw	68
  3387  0015D8  6E28               	movwf	___ftdiv@f2+2,c
  3388  0015DA  90D8               	bcf	status,0,c
  3389  0015DC  0100               	movlb	0	; () banked
  3390  0015DE  35EE               	rlcf	Battery_Convert@x& (0+255),w,b
  3391  0015E0  6EE1               	movwf	fsr1l,c
  3392  0015E2  0100               	movlb	0	; () banked
  3393  0015E4  35EF               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  3394  0015E6  6EE2               	movwf	fsr1h,c
  3395  0015E8  0E9C               	movlw	low _Battery_Adc
  3396  0015EA  26E1               	addwf	fsr1l,f,c
  3397  0015EC  0E00               	movlw	high _Battery_Adc
  3398  0015EE  22E2               	addwfc	fsr1h,f,c
  3399  0015F0  CFE6 F01F          	movff	postinc1,___awtoft@c
  3400  0015F4  CFE5 F020          	movff	postdec1,___awtoft@c+1
  3401  0015F8  EC9E  F00D         	call	___awtoft	;wreg free
  3402  0015FC  C01F  F023         	movff	?___awtoft,___ftdiv@f1
  3403  001600  C020  F024         	movff	?___awtoft+1,___ftdiv@f1+1
  3404  001604  C021  F025         	movff	?___awtoft+2,___ftdiv@f1+2
  3405  001608  ECD8  F009         	call	___ftdiv	;wreg free
  3406  00160C  C023  F032         	movff	?___ftdiv,___ftmul@f1
  3407  001610  C024  F033         	movff	?___ftdiv+1,___ftmul@f1+1
  3408  001614  C025  F034         	movff	?___ftdiv+2,___ftmul@f1+2
  3409  001618  EC41  F009         	call	___ftmul	;wreg free
  3410  00161C  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  3411  001620  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  3412  001624  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  3413  001628  0E00               	movlw	0
  3414  00162A  0100               	movlb	0	; () banked
  3415  00162C  6FE3               	movwf	___ftadd@f2& (0+255),b
  3416  00162E  0E20               	movlw	32
  3417  001630  0100               	movlb	0	; () banked
  3418  001632  6FE4               	movwf	(___ftadd@f2+1)& (0+255),b
  3419  001634  0E40               	movlw	64
  3420  001636  0100               	movlb	0	; () banked
  3421  001638  6FE5               	movwf	(___ftadd@f2+2)& (0+255),b
  3422  00163A  ECDA  F004         	call	___ftadd	;wreg free
  3423  00163E  C0E0  FFDE         	movff	?___ftadd,postinc2
  3424  001642  C0E1  FFDE         	movff	?___ftadd+1,postinc2
  3425  001646  C0E2  FFDE         	movff	?___ftadd+2,postinc2
  3426  00164A  0100               	movlb	0	; () banked
  3427  00164C  4BEE               	infsnz	Battery_Convert@x& (0+255),f,b
  3428  00164E  2BEF               	incf	(Battery_Convert@x+1)& (0+255),f,b
  3429  001650  D79B               	goto	l3512
  3430                           
  3431                           ; BSR set to: 0
  3432  001652  D000               	goto	l3522
  3433  001654                     l3522:
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;Battery.c: 53: }
  3437                           ;Battery.c: 54: Battery_Filter();
  3438  001654  ECEB  F007         	call	_Battery_Filter	;wreg free
  3439  001658  0012               	return		;funcret
  3440  00165A                     __end_of_Battery_Convert:
  3441                           	opt stack 0
  3442                           tblptru	equ	0xFF8
  3443                           tblptrh	equ	0xFF7
  3444                           tblptrl	equ	0xFF6
  3445                           tablat	equ	0xFF5
  3446                           prodh	equ	0xFF4
  3447                           prodl	equ	0xFF3
  3448                           intcon	equ	0xFF2
  3449                           intcon2	equ	0xFF1
  3450                           postinc0	equ	0xFEE
  3451                           wreg	equ	0xFE8
  3452                           postinc1	equ	0xFE6
  3453                           postdec1	equ	0xFE5
  3454                           fsr1h	equ	0xFE2
  3455                           fsr1l	equ	0xFE1
  3456                           indf2	equ	0xFDF
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function ___ftdiv *****************
  3464 ;; Defined at:
  3465 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  f1              3   34[COMRAM] float 
  3468 ;;  f2              3   37[COMRAM] float 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  f3              3   44[COMRAM] float 
  3471 ;;  sign            1   48[COMRAM] unsigned char 
  3472 ;;  exp             1   47[COMRAM] unsigned char 
  3473 ;;  cntr            1   43[COMRAM] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  3   34[COMRAM] float 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3483 ;;      Params:         6       0       0       0       0       0       0
  3484 ;;      Locals:         6       0       0       0       0       0       0
  3485 ;;      Temps:          3       0       0       0       0       0       0
  3486 ;;      Totals:        15       0       0       0       0       0       0
  3487 ;;Total ram usage:       15 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    5
  3490 ;; This function calls:
  3491 ;;		___ftpack
  3492 ;; This function is called by:
  3493 ;;		_Battery_Convert
  3494 ;;		_Temp_Convert
  3495 ;;		_Current_Fault
  3496 ;;		_Current_Get
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text22
  3501  0013B0                     __ptext22:
  3502                           	opt stack 0
  3503  0013B0                     ___ftdiv:
  3504                           	opt stack 24
  3505                           
  3506                           ;incstack = 0
  3507  0013B0  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
  3508  0013B4  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
  3509  0013B6  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
  3510  0013B8  3424               	rlcf	___ftdiv@f1+1,w,c
  3511  0013BA  3629               	rlcf	??___ftdiv& (0+255),f,c
  3512  0013BC  E301               	bnc	u3001
  3513  0013BE  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
  3514  0013C0                     u3001:
  3515  0013C0  5029               	movf	??___ftdiv,w,c
  3516  0013C2  6E30               	movwf	___ftdiv@exp,c
  3517  0013C4  5030               	movf	___ftdiv@exp,w,c
  3518  0013C6  A4D8               	btfss	status,2,c
  3519  0013C8  D007               	goto	l3446
  3520  0013CA  0E00               	movlw	0
  3521  0013CC  6E23               	movwf	?___ftdiv,c
  3522  0013CE  0E00               	movlw	0
  3523  0013D0  6E24               	movwf	?___ftdiv+1,c
  3524  0013D2  0E00               	movlw	0
  3525  0013D4  6E25               	movwf	?___ftdiv+2,c
  3526  0013D6  0012               	return	
  3527  0013D8                     l3446:
  3528  0013D8  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
  3529  0013DC  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
  3530  0013DE  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
  3531  0013E0  3427               	rlcf	___ftdiv@f2+1,w,c
  3532  0013E2  3629               	rlcf	??___ftdiv& (0+255),f,c
  3533  0013E4  E301               	bnc	u3021
  3534  0013E6  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
  3535  0013E8                     u3021:
  3536  0013E8  5029               	movf	??___ftdiv,w,c
  3537  0013EA  6E31               	movwf	___ftdiv@sign,c
  3538  0013EC  5031               	movf	___ftdiv@sign,w,c
  3539  0013EE  A4D8               	btfss	status,2,c
  3540  0013F0  D007               	goto	l3452
  3541  0013F2  0E00               	movlw	0
  3542  0013F4  6E23               	movwf	?___ftdiv,c
  3543  0013F6  0E00               	movlw	0
  3544  0013F8  6E24               	movwf	?___ftdiv+1,c
  3545  0013FA  0E00               	movlw	0
  3546  0013FC  6E25               	movwf	?___ftdiv+2,c
  3547  0013FE  0012               	return	
  3548  001400                     l3452:
  3549  001400  0E00               	movlw	0
  3550  001402  6E2D               	movwf	___ftdiv@f3,c
  3551  001404  0E00               	movlw	0
  3552  001406  6E2E               	movwf	___ftdiv@f3+1,c
  3553  001408  0E00               	movlw	0
  3554  00140A  6E2F               	movwf	___ftdiv@f3+2,c
  3555  00140C  5031               	movf	___ftdiv@sign,w,c
  3556  00140E  0F89               	addlw	137
  3557  001410  5E30               	subwf	___ftdiv@exp,f,c
  3558  001412  C025  F031         	movff	___ftdiv@f1+2,___ftdiv@sign
  3559  001416  5028               	movf	___ftdiv@f2+2,w,c
  3560  001418  1A31               	xorwf	___ftdiv@sign,f,c
  3561  00141A  0E80               	movlw	128
  3562  00141C  1631               	andwf	___ftdiv@sign,f,c
  3563  00141E  8E24               	bsf	___ftdiv@f1+1,7,c
  3564  001420  0EFF               	movlw	255
  3565  001422  1623               	andwf	___ftdiv@f1,f,c
  3566  001424  0EFF               	movlw	255
  3567  001426  1624               	andwf	___ftdiv@f1+1,f,c
  3568  001428  0E00               	movlw	0
  3569  00142A  1625               	andwf	___ftdiv@f1+2,f,c
  3570  00142C  8E27               	bsf	___ftdiv@f2+1,7,c
  3571  00142E  0EFF               	movlw	255
  3572  001430  1626               	andwf	___ftdiv@f2,f,c
  3573  001432  0EFF               	movlw	255
  3574  001434  1627               	andwf	___ftdiv@f2+1,f,c
  3575  001436  0E00               	movlw	0
  3576  001438  1628               	andwf	___ftdiv@f2+2,f,c
  3577  00143A  0E18               	movlw	24
  3578  00143C  6E2C               	movwf	___ftdiv@cntr,c
  3579  00143E  D000               	goto	l3472
  3580  001440                     l3472:
  3581  001440  90D8               	bcf	status,0,c
  3582  001442  362D               	rlcf	___ftdiv@f3,f,c
  3583  001444  362E               	rlcf	___ftdiv@f3+1,f,c
  3584  001446  362F               	rlcf	___ftdiv@f3+2,f,c
  3585  001448  5026               	movf	___ftdiv@f2,w,c
  3586  00144A  5C23               	subwf	___ftdiv@f1,w,c
  3587  00144C  5027               	movf	___ftdiv@f2+1,w,c
  3588  00144E  5824               	subwfb	___ftdiv@f1+1,w,c
  3589  001450  5028               	movf	___ftdiv@f2+2,w,c
  3590  001452  5825               	subwfb	___ftdiv@f1+2,w,c
  3591  001454  A0D8               	btfss	status,0,c
  3592  001456  D007               	goto	l980
  3593  001458  5026               	movf	___ftdiv@f2,w,c
  3594  00145A  5E23               	subwf	___ftdiv@f1,f,c
  3595  00145C  5027               	movf	___ftdiv@f2+1,w,c
  3596  00145E  5A24               	subwfb	___ftdiv@f1+1,f,c
  3597  001460  5028               	movf	___ftdiv@f2+2,w,c
  3598  001462  5A25               	subwfb	___ftdiv@f1+2,f,c
  3599  001464  802D               	bsf	___ftdiv@f3,0,c
  3600  001466                     l980:
  3601  001466  90D8               	bcf	status,0,c
  3602  001468  3623               	rlcf	___ftdiv@f1,f,c
  3603  00146A  3624               	rlcf	___ftdiv@f1+1,f,c
  3604  00146C  3625               	rlcf	___ftdiv@f1+2,f,c
  3605  00146E  2E2C               	decfsz	___ftdiv@cntr,f,c
  3606  001470  D7E7               	goto	l3472
  3607  001472  D000               	goto	l3482
  3608  001474                     l3482:
  3609  001474  C02D  F017         	movff	___ftdiv@f3,___ftpack@arg
  3610  001478  C02E  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3611  00147C  C02F  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3612  001480  C030  F01A         	movff	___ftdiv@exp,___ftpack@exp
  3613  001484  C031  F01B         	movff	___ftdiv@sign,___ftpack@sign
  3614  001488  EC2D  F00B         	call	___ftpack	;wreg free
  3615  00148C  C017  F023         	movff	?___ftpack,?___ftdiv
  3616  001490  C018  F024         	movff	?___ftpack+1,?___ftdiv+1
  3617  001494  C019  F025         	movff	?___ftpack+2,?___ftdiv+2
  3618  001498  0012               	return	
  3619  00149A  0012               	return		;funcret
  3620  00149C                     __end_of___ftdiv:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           tblptrh	equ	0xFF7
  3624                           tblptrl	equ	0xFF6
  3625                           tablat	equ	0xFF5
  3626                           prodh	equ	0xFF4
  3627                           prodl	equ	0xFF3
  3628                           intcon	equ	0xFF2
  3629                           intcon2	equ	0xFF1
  3630                           postinc0	equ	0xFEE
  3631                           wreg	equ	0xFE8
  3632                           postinc1	equ	0xFE6
  3633                           postdec1	equ	0xFE5
  3634                           fsr1h	equ	0xFE2
  3635                           fsr1l	equ	0xFE1
  3636                           indf2	equ	0xFDF
  3637                           postinc2	equ	0xFDE
  3638                           postdec2	equ	0xFDD
  3639                           fsr2h	equ	0xFDA
  3640                           fsr2l	equ	0xFD9
  3641                           status	equ	0xFD8
  3642                           
  3643 ;; *************** function ___awtoft *****************
  3644 ;; Defined at:
  3645 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;  c               2   30[COMRAM] int 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  sign            1   33[COMRAM] unsigned char 
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  3   30[COMRAM] float 
  3652 ;; Registers used:
  3653 ;;		wreg, status,2, status,0, cstack
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3659 ;;      Params:         3       0       0       0       0       0       0
  3660 ;;      Locals:         1       0       0       0       0       0       0
  3661 ;;      Temps:          0       0       0       0       0       0       0
  3662 ;;      Totals:         4       0       0       0       0       0       0
  3663 ;;Total ram usage:        4 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    5
  3666 ;; This function calls:
  3667 ;;		___ftpack
  3668 ;; This function is called by:
  3669 ;;		_Battery_Convert
  3670 ;;		_Temp_Convert
  3671 ;;		_log
  3672 ;;		_Current_Convert
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text23
  3677  001B3C                     __ptext23:
  3678                           	opt stack 0
  3679  001B3C                     ___awtoft:
  3680                           	opt stack 23
  3681                           
  3682                           ;incstack = 0
  3683  001B3C  0E00               	movlw	0
  3684  001B3E  6E22               	movwf	___awtoft@sign,c
  3685  001B40  AE20               	btfss	___awtoft@c+1,7,c
  3686  001B42  D007               	goto	l3340
  3687  001B44  6C1F               	negf	___awtoft@c,c
  3688  001B46  1E20               	comf	___awtoft@c+1,f,c
  3689  001B48  B0D8               	btfsc	status,0,c
  3690  001B4A  2A20               	incf	___awtoft@c+1,f,c
  3691  001B4C  0E01               	movlw	1
  3692  001B4E  6E22               	movwf	___awtoft@sign,c
  3693  001B50  D000               	goto	l3340
  3694  001B52                     l3340:
  3695  001B52  C01F  F017         	movff	___awtoft@c,___ftpack@arg
  3696  001B56  C020  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  3697  001B5A  6A19               	clrf	___ftpack@arg+2,c
  3698  001B5C  0E8E               	movlw	142
  3699  001B5E  6E1A               	movwf	___ftpack@exp,c
  3700  001B60  C022  F01B         	movff	___awtoft@sign,___ftpack@sign
  3701  001B64  EC2D  F00B         	call	___ftpack	;wreg free
  3702  001B68  C017  F01F         	movff	?___ftpack,?___awtoft
  3703  001B6C  C018  F020         	movff	?___ftpack+1,?___awtoft+1
  3704  001B70  C019  F021         	movff	?___ftpack+2,?___awtoft+2
  3705  001B74  0012               	return	
  3706  001B76  0012               	return		;funcret
  3707  001B78                     __end_of___awtoft:
  3708                           	opt stack 0
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           intcon	equ	0xFF2
  3716                           intcon2	equ	0xFF1
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           postinc1	equ	0xFE6
  3720                           postdec1	equ	0xFE5
  3721                           fsr1h	equ	0xFE2
  3722                           fsr1l	equ	0xFE1
  3723                           indf2	equ	0xFDF
  3724                           postinc2	equ	0xFDE
  3725                           postdec2	equ	0xFDD
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _Battery_Filter *****************
  3731 ;; Defined at:
  3732 ;;		line 33 in file "Battery.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;		None
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;  x               2   18[BANK0 ] int 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;		None               void
  3739 ;; Registers used:
  3740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3746 ;;      Params:         0       0       0       0       0       0       0
  3747 ;;      Locals:         0       2       0       0       0       0       0
  3748 ;;      Temps:          0       0       0       0       0       0       0
  3749 ;;      Totals:         0       2       0       0       0       0       0
  3750 ;;Total ram usage:        2 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    6
  3753 ;; This function calls:
  3754 ;;		___ftadd
  3755 ;;		___ftmul
  3756 ;;		___wmul
  3757 ;; This function is called by:
  3758 ;;		_Battery_Convert
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           	psect	text24
  3763  000FD6                     __ptext24:
  3764                           	opt stack 0
  3765  000FD6                     _Battery_Filter:
  3766                           	opt stack 23
  3767                           
  3768                           ;Battery.c: 36: int x;
  3769                           ;Battery.c: 37: for(x = 0; x < 10; x++)
  3770                           
  3771                           ;incstack = 0
  3772  000FD6  0E00               	movlw	0
  3773  000FD8  0100               	movlb	0	; () banked
  3774  000FDA  6FED               	movwf	(Battery_Filter@x+1)& (0+255),b
  3775  000FDC  0E00               	movlw	0
  3776  000FDE  6FEC               	movwf	Battery_Filter@x& (0+255),b
  3777  000FE0                     l3372:
  3778                           
  3779                           ; BSR set to: 0
  3780  000FE0  0100               	movlb	0	; () banked
  3781  000FE2  BFED               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
  3782  000FE4  D00A               	goto	l3376
  3783  000FE6  0100               	movlb	0	; () banked
  3784  000FE8  51ED               	movf	(Battery_Filter@x+1)& (0+255),w,b
  3785  000FEA  E16C               	bnz	l3382
  3786  000FEC  0E0A               	movlw	10
  3787  000FEE  0100               	movlb	0	; () banked
  3788  000FF0  5DEC               	subwf	Battery_Filter@x& (0+255),w,b
  3789  000FF2  B0D8               	btfsc	status,0,c
  3790  000FF4  D067               	goto	l3382
  3791  000FF6  D001               	goto	l3376
  3792                           
  3793                           ; BSR set to: 0
  3794  000FF8  D065               	goto	l3382
  3795  000FFA                     l3376:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;Battery.c: 38: {
  3799                           ;Battery.c: 39: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  3800  000FFA  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3801  000FFE  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3802  001002  0E00               	movlw	0
  3803  001004  6E1A               	movwf	___wmul@multiplicand+1,c
  3804  001006  0E03               	movlw	3
  3805  001008  6E19               	movwf	___wmul@multiplicand,c
  3806  00100A  EC36  F00E         	call	___wmul	;wreg free
  3807  00100E  0E7E               	movlw	low _Battery_Volt
  3808  001010  2417               	addwf	?___wmul,w,c
  3809  001012  6ED9               	movwf	fsr2l,c
  3810  001014  0E00               	movlw	high _Battery_Volt
  3811  001016  2018               	addwfc	?___wmul+1,w,c
  3812  001018  6EDA               	movwf	fsr2h,c
  3813  00101A  0E48               	movlw	72
  3814  00101C  6E35               	movwf	___ftmul@f2,c
  3815  00101E  0E61               	movlw	97
  3816  001020  6E36               	movwf	___ftmul@f2+1,c
  3817  001022  0E3F               	movlw	63
  3818  001024  6E37               	movwf	___ftmul@f2+2,c
  3819  001026  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3820  00102A  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3821  00102E  0E00               	movlw	0
  3822  001030  6E1A               	movwf	___wmul@multiplicand+1,c
  3823  001032  0E03               	movlw	3
  3824  001034  6E19               	movwf	___wmul@multiplicand,c
  3825  001036  EC36  F00E         	call	___wmul	;wreg free
  3826  00103A  0E96               	movlw	low _TempBattery_Volt
  3827  00103C  2417               	addwf	?___wmul,w,c
  3828  00103E  6EE1               	movwf	fsr1l,c
  3829  001040  0E01               	movlw	high _TempBattery_Volt
  3830  001042  2018               	addwfc	?___wmul+1,w,c
  3831  001044  6EE2               	movwf	fsr1h,c
  3832  001046  CFE6 F032          	movff	postinc1,___ftmul@f1
  3833  00104A  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  3834  00104E  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  3835  001052  EC41  F009         	call	___ftmul	;wreg free
  3836  001056  C032  F0E0         	movff	?___ftmul,___ftadd@f1
  3837  00105A  C033  F0E1         	movff	?___ftmul+1,___ftadd@f1+1
  3838  00105E  C034  F0E2         	movff	?___ftmul+2,___ftadd@f1+2
  3839  001062  0EC3               	movlw	195
  3840  001064  6E35               	movwf	___ftmul@f2,c
  3841  001066  0EF5               	movlw	245
  3842  001068  6E36               	movwf	___ftmul@f2+1,c
  3843  00106A  0E3D               	movlw	61
  3844  00106C  6E37               	movwf	___ftmul@f2+2,c
  3845  00106E  0E00               	movlw	0
  3846  001070  6E1A               	movwf	___wmul@multiplicand+1,c
  3847  001072  0E03               	movlw	3
  3848  001074  6E19               	movwf	___wmul@multiplicand,c
  3849  001076  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3850  00107A  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3851  00107E  EC36  F00E         	call	___wmul	;wreg free
  3852  001082  0E1E               	movlw	low _PrevBattery_Volt
  3853  001084  2417               	addwf	?___wmul,w,c
  3854  001086  6EE1               	movwf	fsr1l,c
  3855  001088  0E01               	movlw	high _PrevBattery_Volt
  3856  00108A  2018               	addwfc	?___wmul+1,w,c
  3857  00108C  6EE2               	movwf	fsr1h,c
  3858  00108E  CFE6 F032          	movff	postinc1,___ftmul@f1
  3859  001092  CFE6 F033          	movff	postinc1,___ftmul@f1+1
  3860  001096  CFE5 F034          	movff	postdec1,___ftmul@f1+2
  3861  00109A  EC41  F009         	call	___ftmul	;wreg free
  3862  00109E  C032  F0E3         	movff	?___ftmul,___ftadd@f2
  3863  0010A2  C033  F0E4         	movff	?___ftmul+1,___ftadd@f2+1
  3864  0010A6  C034  F0E5         	movff	?___ftmul+2,___ftadd@f2+2
  3865  0010AA  ECDA  F004         	call	___ftadd	;wreg free
  3866  0010AE  C0E0  FFDE         	movff	?___ftadd,postinc2
  3867  0010B2  C0E1  FFDE         	movff	?___ftadd+1,postinc2
  3868  0010B6  C0E2  FFDE         	movff	?___ftadd+2,postinc2
  3869  0010BA  0100               	movlb	0	; () banked
  3870  0010BC  4BEC               	infsnz	Battery_Filter@x& (0+255),f,b
  3871  0010BE  2BED               	incf	(Battery_Filter@x+1)& (0+255),f,b
  3872  0010C0  D78F               	goto	l3372
  3873                           
  3874                           ; BSR set to: 0
  3875  0010C2  D000               	goto	l3382
  3876  0010C4                     l3382:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;Battery.c: 40: }
  3880                           ;Battery.c: 41: for(x = 0; x < 10; x++)
  3881  0010C4  0E00               	movlw	0
  3882  0010C6  0100               	movlb	0	; () banked
  3883  0010C8  6FED               	movwf	(Battery_Filter@x+1)& (0+255),b
  3884  0010CA  0E00               	movlw	0
  3885  0010CC  6FEC               	movwf	Battery_Filter@x& (0+255),b
  3886  0010CE                     l3384:
  3887                           
  3888                           ; BSR set to: 0
  3889  0010CE  0100               	movlb	0	; () banked
  3890  0010D0  BFED               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
  3891  0010D2  D00A               	goto	l3388
  3892  0010D4  0100               	movlb	0	; () banked
  3893  0010D6  51ED               	movf	(Battery_Filter@x+1)& (0+255),w,b
  3894  0010D8  E132               	bnz	l344
  3895  0010DA  0E0A               	movlw	10
  3896  0010DC  0100               	movlb	0	; () banked
  3897  0010DE  5DEC               	subwf	Battery_Filter@x& (0+255),w,b
  3898  0010E0  B0D8               	btfsc	status,0,c
  3899  0010E2  0012               	return	
  3900  0010E4  D001               	goto	l3388
  3901                           
  3902                           ; BSR set to: 0
  3903  0010E6  0012               	return	
  3904  0010E8                     l3388:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;Battery.c: 42: {
  3908                           ;Battery.c: 43: PrevBattery_Volt[x] = Battery_Volt[x];
  3909  0010E8  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3910  0010EC  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3911  0010F0  0E00               	movlw	0
  3912  0010F2  6E1A               	movwf	___wmul@multiplicand+1,c
  3913  0010F4  0E03               	movlw	3
  3914  0010F6  6E19               	movwf	___wmul@multiplicand,c
  3915  0010F8  EC36  F00E         	call	___wmul	;wreg free
  3916  0010FC  0E7E               	movlw	low _Battery_Volt
  3917  0010FE  2417               	addwf	?___wmul,w,c
  3918  001100  6ED9               	movwf	fsr2l,c
  3919  001102  0E00               	movlw	high _Battery_Volt
  3920  001104  2018               	addwfc	?___wmul+1,w,c
  3921  001106  6EDA               	movwf	fsr2h,c
  3922  001108  C0EC  F017         	movff	Battery_Filter@x,___wmul@multiplier
  3923  00110C  C0ED  F018         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3924  001110  0E00               	movlw	0
  3925  001112  6E1A               	movwf	___wmul@multiplicand+1,c
  3926  001114  0E03               	movlw	3
  3927  001116  6E19               	movwf	___wmul@multiplicand,c
  3928  001118  EC36  F00E         	call	___wmul	;wreg free
  3929  00111C  0E1E               	movlw	low _PrevBattery_Volt
  3930  00111E  2417               	addwf	?___wmul,w,c
  3931  001120  6EE1               	movwf	fsr1l,c
  3932  001122  0E01               	movlw	high _PrevBattery_Volt
  3933  001124  2018               	addwfc	?___wmul+1,w,c
  3934  001126  6EE2               	movwf	fsr1h,c
  3935  001128  CFDE FFE6          	movff	postinc2,postinc1
  3936  00112C  CFDE FFE6          	movff	postinc2,postinc1
  3937  001130  CFDE FFE6          	movff	postinc2,postinc1
  3938  001134  0100               	movlb	0	; () banked
  3939  001136  4BEC               	infsnz	Battery_Filter@x& (0+255),f,b
  3940  001138  2BED               	incf	(Battery_Filter@x+1)& (0+255),f,b
  3941  00113A  D7C9               	goto	l3384
  3942                           
  3943                           ; BSR set to: 0
  3944  00113C  0012               	return	
  3945  00113E                     l344:
  3946                           
  3947                           ; BSR set to: 0
  3948  00113E  0012               	return		;funcret
  3949  001140                     __end_of_Battery_Filter:
  3950                           	opt stack 0
  3951                           tblptru	equ	0xFF8
  3952                           tblptrh	equ	0xFF7
  3953                           tblptrl	equ	0xFF6
  3954                           tablat	equ	0xFF5
  3955                           prodh	equ	0xFF4
  3956                           prodl	equ	0xFF3
  3957                           intcon	equ	0xFF2
  3958                           intcon2	equ	0xFF1
  3959                           postinc0	equ	0xFEE
  3960                           wreg	equ	0xFE8
  3961                           postinc1	equ	0xFE6
  3962                           postdec1	equ	0xFE5
  3963                           fsr1h	equ	0xFE2
  3964                           fsr1l	equ	0xFE1
  3965                           indf2	equ	0xFDF
  3966                           postinc2	equ	0xFDE
  3967                           postdec2	equ	0xFDD
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972 ;; *************** function ___wmul *****************
  3973 ;; Defined at:
  3974 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;  multiplier      2   22[COMRAM] unsigned int 
  3977 ;;  multiplicand    2   24[COMRAM] unsigned int 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  product         2   26[COMRAM] unsigned int 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  2   22[COMRAM] unsigned int 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0, prodl, prodh
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3989 ;;      Params:         4       0       0       0       0       0       0
  3990 ;;      Locals:         2       0       0       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0
  3992 ;;      Totals:         6       0       0       0       0       0       0
  3993 ;;Total ram usage:        6 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    4
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_Battery_Fault
  4000 ;;		_Battery_Filter
  4001 ;;		_Battery_Convert
  4002 ;;		_Temp_Fault
  4003 ;;		_Temp_Filter
  4004 ;;		_Temp_Convert
  4005 ;;		_eval_poly
  4006 ;;		_Battery_Get
  4007 ;;		_Tempeture_Get
  4008 ;;		_Current_Fault
  4009 ;;		_Current_Filter
  4010 ;;		_Current_Convert
  4011 ;;		_Current_Get
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text25
  4016  001C6C                     __ptext25:
  4017                           	opt stack 0
  4018  001C6C                     ___wmul:
  4019                           	opt stack 25
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;incstack = 0
  4023  001C6C  5017               	movf	___wmul@multiplier,w,c
  4024  001C6E  0219               	mulwf	___wmul@multiplicand,c
  4025  001C70  CFF3 F01B          	movff	prodl,___wmul@product
  4026  001C74  CFF4 F01C          	movff	prodh,___wmul@product+1
  4027  001C78  5017               	movf	___wmul@multiplier,w,c
  4028  001C7A  021A               	mulwf	___wmul@multiplicand+1,c
  4029  001C7C  50F3               	movf	prodl,w,c
  4030  001C7E  261C               	addwf	___wmul@product+1,f,c
  4031  001C80  5018               	movf	___wmul@multiplier+1,w,c
  4032  001C82  0219               	mulwf	___wmul@multiplicand,c
  4033  001C84  50F3               	movf	prodl,w,c
  4034  001C86  261C               	addwf	___wmul@product+1,f,c
  4035  001C88  C01B  F017         	movff	___wmul@product,?___wmul
  4036  001C8C  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  4037  001C90  0012               	return	
  4038  001C92  0012               	return		;funcret
  4039  001C94                     __end_of___wmul:
  4040                           	opt stack 0
  4041                           tblptru	equ	0xFF8
  4042                           tblptrh	equ	0xFF7
  4043                           tblptrl	equ	0xFF6
  4044                           tablat	equ	0xFF5
  4045                           prodh	equ	0xFF4
  4046                           prodl	equ	0xFF3
  4047                           intcon	equ	0xFF2
  4048                           intcon2	equ	0xFF1
  4049                           postinc0	equ	0xFEE
  4050                           wreg	equ	0xFE8
  4051                           postinc1	equ	0xFE6
  4052                           postdec1	equ	0xFE5
  4053                           fsr1h	equ	0xFE2
  4054                           fsr1l	equ	0xFE1
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           postdec2	equ	0xFDD
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function ___ftmul *****************
  4063 ;; Defined at:
  4064 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;  f1              3   49[COMRAM] float 
  4067 ;;  f2              3   52[COMRAM] float 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  4070 ;;  sign            1    5[BANK0 ] unsigned char 
  4071 ;;  cntr            1    4[BANK0 ] unsigned char 
  4072 ;;  exp             1    0[BANK0 ] unsigned char 
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  3   49[COMRAM] float 
  4075 ;; Registers used:
  4076 ;;		wreg, status,2, status,0, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4082 ;;      Params:         6       0       0       0       0       0       0
  4083 ;;      Locals:         0       6       0       0       0       0       0
  4084 ;;      Temps:          3       0       0       0       0       0       0
  4085 ;;      Totals:         9       6       0       0       0       0       0
  4086 ;;Total ram usage:       15 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    5
  4089 ;; This function calls:
  4090 ;;		___ftpack
  4091 ;; This function is called by:
  4092 ;;		_Battery_Filter
  4093 ;;		_Battery_Convert
  4094 ;;		_Temp_Filter
  4095 ;;		_Temp_Convert
  4096 ;;		_log
  4097 ;;		_eval_poly
  4098 ;;		_Current_Filter
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text26
  4103  001282                     __ptext26:
  4104                           	opt stack 0
  4105  001282                     ___ftmul:
  4106                           	opt stack 22
  4107                           
  4108                           ;incstack = 0
  4109  001282  C034  F038         	movff	___ftmul@f1+2,??___ftmul
  4110  001286  6A39               	clrf	(??___ftmul+1)& (0+255),c
  4111  001288  6A3A               	clrf	(??___ftmul+2)& (0+255),c
  4112  00128A  3433               	rlcf	___ftmul@f1+1,w,c
  4113  00128C  3638               	rlcf	??___ftmul& (0+255),f,c
  4114  00128E  E301               	bnc	u2801
  4115  001290  8039               	bsf	(??___ftmul+1)& (0+255),0,c
  4116  001292                     u2801:
  4117  001292  5038               	movf	??___ftmul,w,c
  4118  001294  0100               	movlb	0	; () banked
  4119  001296  6FDA               	movwf	___ftmul@exp& (0+255),b
  4120  001298  0100               	movlb	0	; () banked
  4121  00129A  51DA               	movf	___ftmul@exp& (0+255),w,b
  4122  00129C  A4D8               	btfss	status,2,c
  4123  00129E  D007               	goto	l3290
  4124                           
  4125                           ; BSR set to: 0
  4126  0012A0  0E00               	movlw	0
  4127  0012A2  6E32               	movwf	?___ftmul,c
  4128  0012A4  0E00               	movlw	0
  4129  0012A6  6E33               	movwf	?___ftmul+1,c
  4130  0012A8  0E00               	movlw	0
  4131  0012AA  6E34               	movwf	?___ftmul+2,c
  4132                           
  4133                           ; BSR set to: 0
  4134  0012AC  0012               	return	
  4135  0012AE                     l3290:
  4136                           
  4137                           ; BSR set to: 0
  4138  0012AE  C037  F038         	movff	___ftmul@f2+2,??___ftmul
  4139  0012B2  6A39               	clrf	(??___ftmul+1)& (0+255),c
  4140  0012B4  6A3A               	clrf	(??___ftmul+2)& (0+255),c
  4141  0012B6  3436               	rlcf	___ftmul@f2+1,w,c
  4142  0012B8  3638               	rlcf	??___ftmul& (0+255),f,c
  4143  0012BA  E301               	bnc	u2821
  4144  0012BC  8039               	bsf	(??___ftmul+1)& (0+255),0,c
  4145  0012BE                     u2821:
  4146  0012BE  5038               	movf	??___ftmul,w,c
  4147  0012C0  0100               	movlb	0	; () banked
  4148  0012C2  6FDF               	movwf	___ftmul@sign& (0+255),b
  4149  0012C4  0100               	movlb	0	; () banked
  4150  0012C6  51DF               	movf	___ftmul@sign& (0+255),w,b
  4151  0012C8  A4D8               	btfss	status,2,c
  4152  0012CA  D007               	goto	l3296
  4153                           
  4154                           ; BSR set to: 0
  4155  0012CC  0E00               	movlw	0
  4156  0012CE  6E32               	movwf	?___ftmul,c
  4157  0012D0  0E00               	movlw	0
  4158  0012D2  6E33               	movwf	?___ftmul+1,c
  4159  0012D4  0E00               	movlw	0
  4160  0012D6  6E34               	movwf	?___ftmul+2,c
  4161                           
  4162                           ; BSR set to: 0
  4163  0012D8  0012               	return	
  4164  0012DA                     l3296:
  4165                           
  4166                           ; BSR set to: 0
  4167  0012DA  0100               	movlb	0	; () banked
  4168  0012DC  51DF               	movf	___ftmul@sign& (0+255),w,b
  4169  0012DE  0F7B               	addlw	123
  4170  0012E0  0100               	movlb	0	; () banked
  4171  0012E2  27DA               	addwf	___ftmul@exp& (0+255),f,b
  4172                           
  4173                           ; BSR set to: 0
  4174  0012E4  C034  F0DF         	movff	___ftmul@f1+2,___ftmul@sign
  4175  0012E8  5037               	movf	___ftmul@f2+2,w,c
  4176  0012EA  0100               	movlb	0	; () banked
  4177  0012EC  1BDF               	xorwf	___ftmul@sign& (0+255),f,b
  4178  0012EE  0E80               	movlw	128
  4179  0012F0  0100               	movlb	0	; () banked
  4180  0012F2  17DF               	andwf	___ftmul@sign& (0+255),f,b
  4181                           
  4182                           ; BSR set to: 0
  4183  0012F4  8E33               	bsf	___ftmul@f1+1,7,c
  4184                           
  4185                           ; BSR set to: 0
  4186  0012F6  8E36               	bsf	___ftmul@f2+1,7,c
  4187                           
  4188                           ; BSR set to: 0
  4189  0012F8  0EFF               	movlw	255
  4190  0012FA  1635               	andwf	___ftmul@f2,f,c
  4191  0012FC  0EFF               	movlw	255
  4192  0012FE  1636               	andwf	___ftmul@f2+1,f,c
  4193  001300  0E00               	movlw	0
  4194  001302  1637               	andwf	___ftmul@f2+2,f,c
  4195                           
  4196                           ; BSR set to: 0
  4197  001304  0E00               	movlw	0
  4198  001306  0100               	movlb	0	; () banked
  4199  001308  6FDB               	movwf	___ftmul@f3_as_product& (0+255),b
  4200  00130A  0E00               	movlw	0
  4201  00130C  0100               	movlb	0	; () banked
  4202  00130E  6FDC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4203  001310  0E00               	movlw	0
  4204  001312  0100               	movlb	0	; () banked
  4205  001314  6FDD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4206                           
  4207                           ; BSR set to: 0
  4208  001316  0E07               	movlw	7
  4209  001318  0100               	movlb	0	; () banked
  4210  00131A  6FDE               	movwf	___ftmul@cntr& (0+255),b
  4211  00131C  D000               	goto	l3310
  4212  00131E                     l3310:
  4213                           
  4214                           ; BSR set to: 0
  4215  00131E  A032               	btfss	___ftmul@f1,0,c
  4216  001320  D00A               	goto	l3314
  4217                           
  4218                           ; BSR set to: 0
  4219  001322  5035               	movf	___ftmul@f2,w,c
  4220  001324  0100               	movlb	0	; () banked
  4221  001326  27DB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4222  001328  5036               	movf	___ftmul@f2+1,w,c
  4223  00132A  0100               	movlb	0	; () banked
  4224  00132C  23DC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4225  00132E  5037               	movf	___ftmul@f2+2,w,c
  4226  001330  0100               	movlb	0	; () banked
  4227  001332  23DD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4228  001334  D000               	goto	l3314
  4229  001336                     l3314:
  4230                           
  4231                           ; BSR set to: 0
  4232  001336  90D8               	bcf	status,0,c
  4233  001338  3234               	rrcf	___ftmul@f1+2,f,c
  4234  00133A  3233               	rrcf	___ftmul@f1+1,f,c
  4235  00133C  3232               	rrcf	___ftmul@f1,f,c
  4236  00133E  90D8               	bcf	status,0,c
  4237  001340  3635               	rlcf	___ftmul@f2,f,c
  4238  001342  3636               	rlcf	___ftmul@f2+1,f,c
  4239  001344  3637               	rlcf	___ftmul@f2+2,f,c
  4240                           
  4241                           ; BSR set to: 0
  4242  001346  0100               	movlb	0	; () banked
  4243  001348  2FDE               	decfsz	___ftmul@cntr& (0+255),f,b
  4244  00134A  D7E9               	goto	l3310
  4245  00134C  D000               	goto	l3318
  4246  00134E                     l3318:
  4247                           
  4248                           ; BSR set to: 0
  4249  00134E  0E09               	movlw	9
  4250  001350  0100               	movlb	0	; () banked
  4251  001352  6FDE               	movwf	___ftmul@cntr& (0+255),b
  4252  001354  D000               	goto	l3320
  4253  001356                     l3320:
  4254                           
  4255                           ; BSR set to: 0
  4256  001356  A032               	btfss	___ftmul@f1,0,c
  4257  001358  D00A               	goto	l3324
  4258                           
  4259                           ; BSR set to: 0
  4260  00135A  5035               	movf	___ftmul@f2,w,c
  4261  00135C  0100               	movlb	0	; () banked
  4262  00135E  27DB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4263  001360  5036               	movf	___ftmul@f2+1,w,c
  4264  001362  0100               	movlb	0	; () banked
  4265  001364  23DC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4266  001366  5037               	movf	___ftmul@f2+2,w,c
  4267  001368  0100               	movlb	0	; () banked
  4268  00136A  23DD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4269  00136C  D000               	goto	l3324
  4270  00136E                     l3324:
  4271                           
  4272                           ; BSR set to: 0
  4273  00136E  90D8               	bcf	status,0,c
  4274  001370  3234               	rrcf	___ftmul@f1+2,f,c
  4275  001372  3233               	rrcf	___ftmul@f1+1,f,c
  4276  001374  3232               	rrcf	___ftmul@f1,f,c
  4277  001376  0100               	movlb	0	; () banked
  4278  001378  90D8               	bcf	status,0,c
  4279  00137A  33DD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4280  00137C  33DC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4281  00137E  33DB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4282                           
  4283                           ; BSR set to: 0
  4284  001380  0100               	movlb	0	; () banked
  4285  001382  2FDE               	decfsz	___ftmul@cntr& (0+255),f,b
  4286  001384  D7E8               	goto	l3320
  4287  001386  D000               	goto	l3328
  4288  001388                     l3328:
  4289                           
  4290                           ; BSR set to: 0
  4291  001388  C0DB  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  4292  00138C  C0DC  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4293  001390  C0DD  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4294  001394  C0DA  F01A         	movff	___ftmul@exp,___ftpack@exp
  4295  001398  C0DF  F01B         	movff	___ftmul@sign,___ftpack@sign
  4296  00139C  EC2D  F00B         	call	___ftpack	;wreg free
  4297  0013A0  C017  F032         	movff	?___ftpack,?___ftmul
  4298  0013A4  C018  F033         	movff	?___ftpack+1,?___ftmul+1
  4299  0013A8  C019  F034         	movff	?___ftpack+2,?___ftmul+2
  4300  0013AC  0012               	return	
  4301  0013AE  0012               	return		;funcret
  4302  0013B0                     __end_of___ftmul:
  4303                           	opt stack 0
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           prodh	equ	0xFF4
  4309                           prodl	equ	0xFF3
  4310                           intcon	equ	0xFF2
  4311                           intcon2	equ	0xFF1
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           postinc1	equ	0xFE6
  4315                           postdec1	equ	0xFE5
  4316                           fsr1h	equ	0xFE2
  4317                           fsr1l	equ	0xFE1
  4318                           indf2	equ	0xFDF
  4319                           postinc2	equ	0xFDE
  4320                           postdec2	equ	0xFDD
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           
  4325 ;; *************** function ___ftadd *****************
  4326 ;; Defined at:
  4327 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  f1              3    6[BANK0 ] float 
  4330 ;;  f2              3    9[BANK0 ] float 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  exp1            1   17[BANK0 ] unsigned char 
  4333 ;;  exp2            1   16[BANK0 ] unsigned char 
  4334 ;;  sign            1   15[BANK0 ] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  3    6[BANK0 ] float 
  4337 ;; Registers used:
  4338 ;;		wreg, status,2, status,0, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4344 ;;      Params:         0       6       0       0       0       0       0
  4345 ;;      Locals:         0       3       0       0       0       0       0
  4346 ;;      Temps:          0       3       0       0       0       0       0
  4347 ;;      Totals:         0      12       0       0       0       0       0
  4348 ;;Total ram usage:       12 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    5
  4351 ;; This function calls:
  4352 ;;		___ftpack
  4353 ;; This function is called by:
  4354 ;;		_Battery_Filter
  4355 ;;		_Battery_Convert
  4356 ;;		_Temp_Filter
  4357 ;;		_Temp_Convert
  4358 ;;		___ftsub
  4359 ;;		_log
  4360 ;;		_eval_poly
  4361 ;;		_Current_Fault
  4362 ;;		_Current_Filter
  4363 ;;		_Current_Convert
  4364 ;;		_Current_Get
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text27
  4369  0009B4                     __ptext27:
  4370                           	opt stack 0
  4371  0009B4                     ___ftadd:
  4372                           	opt stack 22
  4373                           
  4374                           ;incstack = 0
  4375  0009B4  C0E2  F0E6         	movff	___ftadd@f1+2,??___ftadd
  4376  0009B8  0100               	movlb	0	; () banked
  4377  0009BA  6BE7               	clrf	(??___ftadd+1)& (0+255),b
  4378  0009BC  6BE8               	clrf	(??___ftadd+2)& (0+255),b
  4379  0009BE  0100               	movlb	0	; () banked
  4380  0009C0  35E1               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4381  0009C2  0100               	movlb	0	; () banked
  4382  0009C4  37E6               	rlcf	??___ftadd& (0+255),f,b
  4383  0009C6  E301               	bnc	u2591
  4384  0009C8  81E7               	bsf	(??___ftadd+1)& (0+255),0,b
  4385  0009CA                     u2591:
  4386  0009CA  0100               	movlb	0	; () banked
  4387  0009CC  51E6               	movf	??___ftadd& (0+255),w,b
  4388  0009CE  0100               	movlb	0	; () banked
  4389  0009D0  6FEB               	movwf	___ftadd@exp1& (0+255),b
  4390  0009D2  C0E5  F0E6         	movff	___ftadd@f2+2,??___ftadd
  4391  0009D6  0100               	movlb	0	; () banked
  4392  0009D8  6BE7               	clrf	(??___ftadd+1)& (0+255),b
  4393  0009DA  6BE8               	clrf	(??___ftadd+2)& (0+255),b
  4394  0009DC  0100               	movlb	0	; () banked
  4395  0009DE  35E4               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4396  0009E0  0100               	movlb	0	; () banked
  4397  0009E2  37E6               	rlcf	??___ftadd& (0+255),f,b
  4398  0009E4  E301               	bnc	u2601
  4399  0009E6  81E7               	bsf	(??___ftadd+1)& (0+255),0,b
  4400  0009E8                     u2601:
  4401  0009E8  0100               	movlb	0	; () banked
  4402  0009EA  51E6               	movf	??___ftadd& (0+255),w,b
  4403  0009EC  0100               	movlb	0	; () banked
  4404  0009EE  6FEA               	movwf	___ftadd@exp2& (0+255),b
  4405                           
  4406                           ; BSR set to: 0
  4407  0009F0  0100               	movlb	0	; () banked
  4408  0009F2  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4409  0009F4  0100               	movlb	0	; () banked
  4410  0009F6  B4D8               	btfsc	status,2,c
  4411  0009F8  D011               	goto	l945
  4412                           
  4413                           ; BSR set to: 0
  4414  0009FA  0100               	movlb	0	; () banked
  4415  0009FC  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4416  0009FE  0100               	movlb	0	; () banked
  4417  000A00  5DEB               	subwf	___ftadd@exp1& (0+255),w,b
  4418  000A02  B0D8               	btfsc	status,0,c
  4419  000A04  D012               	goto	l3222
  4420                           
  4421                           ; BSR set to: 0
  4422  000A06  0100               	movlb	0	; () banked
  4423  000A08  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4424  000A0A  0800               	sublw	0
  4425  000A0C  0100               	movlb	0	; () banked
  4426  000A0E  25EA               	addwf	___ftadd@exp2& (0+255),w,b
  4427  000A10  0100               	movlb	0	; () banked
  4428  000A12  6FE6               	movwf	??___ftadd& (0+255),b
  4429  000A14  0E18               	movlw	24
  4430  000A16  0100               	movlb	0	; () banked
  4431  000A18  65E6               	cpfsgt	??___ftadd& (0+255),b
  4432  000A1A  D007               	goto	l3222
  4433  000A1C                     l945:
  4434                           
  4435                           ; BSR set to: 0
  4436  000A1C  C0E3  F0E0         	movff	___ftadd@f2,?___ftadd
  4437  000A20  C0E4  F0E1         	movff	___ftadd@f2+1,?___ftadd+1
  4438  000A24  C0E5  F0E2         	movff	___ftadd@f2+2,?___ftadd+2
  4439  000A28  0012               	return	
  4440  000A2A                     l3222:
  4441                           
  4442                           ; BSR set to: 0
  4443  000A2A  0100               	movlb	0	; () banked
  4444  000A2C  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4445  000A2E  0100               	movlb	0	; () banked
  4446  000A30  B4D8               	btfsc	status,2,c
  4447  000A32  D011               	goto	l949
  4448                           
  4449                           ; BSR set to: 0
  4450  000A34  0100               	movlb	0	; () banked
  4451  000A36  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4452  000A38  0100               	movlb	0	; () banked
  4453  000A3A  5DEA               	subwf	___ftadd@exp2& (0+255),w,b
  4454  000A3C  B0D8               	btfsc	status,0,c
  4455  000A3E  D012               	goto	l3228
  4456                           
  4457                           ; BSR set to: 0
  4458  000A40  0100               	movlb	0	; () banked
  4459  000A42  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4460  000A44  0800               	sublw	0
  4461  000A46  0100               	movlb	0	; () banked
  4462  000A48  25EB               	addwf	___ftadd@exp1& (0+255),w,b
  4463  000A4A  0100               	movlb	0	; () banked
  4464  000A4C  6FE6               	movwf	??___ftadd& (0+255),b
  4465  000A4E  0E18               	movlw	24
  4466  000A50  0100               	movlb	0	; () banked
  4467  000A52  65E6               	cpfsgt	??___ftadd& (0+255),b
  4468  000A54  D007               	goto	l3228
  4469  000A56                     l949:
  4470                           
  4471                           ; BSR set to: 0
  4472  000A56  C0E0  F0E0         	movff	___ftadd@f1,?___ftadd
  4473  000A5A  C0E1  F0E1         	movff	___ftadd@f1+1,?___ftadd+1
  4474  000A5E  C0E2  F0E2         	movff	___ftadd@f1+2,?___ftadd+2
  4475  000A62  0012               	return	
  4476  000A64                     l3228:
  4477                           
  4478                           ; BSR set to: 0
  4479  000A64  0E06               	movlw	6
  4480  000A66  0100               	movlb	0	; () banked
  4481  000A68  6FE9               	movwf	___ftadd@sign& (0+255),b
  4482                           
  4483                           ; BSR set to: 0
  4484  000A6A  0100               	movlb	0	; () banked
  4485  000A6C  AFE2               	btfss	(___ftadd@f1+2)& (0+255),7,b
  4486  000A6E  D003               	goto	l3234
  4487                           
  4488                           ; BSR set to: 0
  4489  000A70  0100               	movlb	0	; () banked
  4490  000A72  8FE9               	bsf	___ftadd@sign& (0+255),7,b
  4491  000A74  D000               	goto	l3234
  4492  000A76                     l3234:
  4493                           
  4494                           ; BSR set to: 0
  4495  000A76  0100               	movlb	0	; () banked
  4496  000A78  AFE5               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4497  000A7A  D002               	goto	l951
  4498                           
  4499                           ; BSR set to: 0
  4500  000A7C  0100               	movlb	0	; () banked
  4501  000A7E  8DE9               	bsf	___ftadd@sign& (0+255),6,b
  4502  000A80                     l951:
  4503                           
  4504                           ; BSR set to: 0
  4505  000A80  0100               	movlb	0	; () banked
  4506  000A82  8FE1               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4507                           
  4508                           ; BSR set to: 0
  4509  000A84  0EFF               	movlw	255
  4510  000A86  0100               	movlb	0	; () banked
  4511  000A88  17E0               	andwf	___ftadd@f1& (0+255),f,b
  4512  000A8A  0EFF               	movlw	255
  4513  000A8C  0100               	movlb	0	; () banked
  4514  000A8E  17E1               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4515  000A90  0E00               	movlw	0
  4516  000A92  0100               	movlb	0	; () banked
  4517  000A94  17E2               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4518  000A96  0100               	movlb	0	; () banked
  4519  000A98  8FE4               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4520                           
  4521                           ; BSR set to: 0
  4522  000A9A  0EFF               	movlw	255
  4523  000A9C  0100               	movlb	0	; () banked
  4524  000A9E  17E3               	andwf	___ftadd@f2& (0+255),f,b
  4525  000AA0  0EFF               	movlw	255
  4526  000AA2  0100               	movlb	0	; () banked
  4527  000AA4  17E4               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4528  000AA6  0E00               	movlw	0
  4529  000AA8  0100               	movlb	0	; () banked
  4530  000AAA  17E5               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4531                           
  4532                           ; BSR set to: 0
  4533  000AAC  0100               	movlb	0	; () banked
  4534  000AAE  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4535  000AB0  0100               	movlb	0	; () banked
  4536  000AB2  5DEB               	subwf	___ftadd@exp1& (0+255),w,b
  4537  000AB4  B0D8               	btfsc	status,0,c
  4538  000AB6  D028               	goto	l3254
  4539  000AB8                     l3244:
  4540                           
  4541                           ; BSR set to: 0
  4542  000AB8  0100               	movlb	0	; () banked
  4543  000ABA  90D8               	bcf	status,0,c
  4544  000ABC  37E3               	rlcf	___ftadd@f2& (0+255),f,b
  4545  000ABE  37E4               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4546  000AC0  37E5               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4547  000AC2  0100               	movlb	0	; () banked
  4548  000AC4  07EA               	decf	___ftadd@exp2& (0+255),f,b
  4549                           
  4550                           ; BSR set to: 0
  4551  000AC6  0100               	movlb	0	; () banked
  4552  000AC8  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4553  000ACA  0100               	movlb	0	; () banked
  4554  000ACC  19EA               	xorwf	___ftadd@exp2& (0+255),w,b
  4555  000ACE  B4D8               	btfsc	status,2,c
  4556  000AD0  D013               	goto	l3252
  4557                           
  4558                           ; BSR set to: 0
  4559  000AD2  0100               	movlb	0	; () banked
  4560  000AD4  07E9               	decf	___ftadd@sign& (0+255),f,b
  4561  000AD6  C0E9  F0E6         	movff	___ftadd@sign,??___ftadd
  4562  000ADA  0E07               	movlw	7
  4563  000ADC  0100               	movlb	0	; () banked
  4564  000ADE  17E6               	andwf	??___ftadd& (0+255),f,b
  4565  000AE0  B4D8               	btfsc	status,2,c
  4566  000AE2  D00A               	goto	l3252
  4567  000AE4  D7E9               	goto	l3244
  4568                           
  4569                           ; BSR set to: 0
  4570                           
  4571                           ; BSR set to: 0
  4572  000AE6  D008               	goto	l3252
  4573  000AE8                     l3250:
  4574                           
  4575                           ; BSR set to: 0
  4576  000AE8  0100               	movlb	0	; () banked
  4577  000AEA  90D8               	bcf	status,0,c
  4578  000AEC  33E2               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4579  000AEE  33E1               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4580  000AF0  33E0               	rrcf	___ftadd@f1& (0+255),f,b
  4581  000AF2  0100               	movlb	0	; () banked
  4582  000AF4  2BEB               	incf	___ftadd@exp1& (0+255),f,b
  4583  000AF6  D000               	goto	l3252
  4584  000AF8                     l3252:
  4585                           
  4586                           ; BSR set to: 0
  4587  000AF8  0100               	movlb	0	; () banked
  4588  000AFA  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4589  000AFC  0100               	movlb	0	; () banked
  4590  000AFE  19EB               	xorwf	___ftadd@exp1& (0+255),w,b
  4591  000B00  B4D8               	btfsc	status,2,c
  4592  000B02  D030               	goto	l960
  4593  000B04  D7F1               	goto	l3250
  4594                           
  4595                           ; BSR set to: 0
  4596  000B06  D02E               	goto	l960
  4597  000B08                     l3254:
  4598                           
  4599                           ; BSR set to: 0
  4600  000B08  0100               	movlb	0	; () banked
  4601  000B0A  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4602  000B0C  0100               	movlb	0	; () banked
  4603  000B0E  5DEA               	subwf	___ftadd@exp2& (0+255),w,b
  4604  000B10  B0D8               	btfsc	status,0,c
  4605  000B12  D028               	goto	l960
  4606  000B14                     l3256:
  4607                           
  4608                           ; BSR set to: 0
  4609  000B14  0100               	movlb	0	; () banked
  4610  000B16  90D8               	bcf	status,0,c
  4611  000B18  37E0               	rlcf	___ftadd@f1& (0+255),f,b
  4612  000B1A  37E1               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4613  000B1C  37E2               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4614  000B1E  0100               	movlb	0	; () banked
  4615  000B20  07EB               	decf	___ftadd@exp1& (0+255),f,b
  4616                           
  4617                           ; BSR set to: 0
  4618  000B22  0100               	movlb	0	; () banked
  4619  000B24  51EB               	movf	___ftadd@exp1& (0+255),w,b
  4620  000B26  0100               	movlb	0	; () banked
  4621  000B28  19EA               	xorwf	___ftadd@exp2& (0+255),w,b
  4622  000B2A  B4D8               	btfsc	status,2,c
  4623  000B2C  D013               	goto	l3264
  4624                           
  4625                           ; BSR set to: 0
  4626  000B2E  0100               	movlb	0	; () banked
  4627  000B30  07E9               	decf	___ftadd@sign& (0+255),f,b
  4628  000B32  C0E9  F0E6         	movff	___ftadd@sign,??___ftadd
  4629  000B36  0E07               	movlw	7
  4630  000B38  0100               	movlb	0	; () banked
  4631  000B3A  17E6               	andwf	??___ftadd& (0+255),f,b
  4632  000B3C  B4D8               	btfsc	status,2,c
  4633  000B3E  D00A               	goto	l3264
  4634  000B40  D7E9               	goto	l3256
  4635                           
  4636                           ; BSR set to: 0
  4637                           
  4638                           ; BSR set to: 0
  4639  000B42  D008               	goto	l3264
  4640  000B44                     l3262:
  4641                           
  4642                           ; BSR set to: 0
  4643  000B44  0100               	movlb	0	; () banked
  4644  000B46  90D8               	bcf	status,0,c
  4645  000B48  33E5               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4646  000B4A  33E4               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4647  000B4C  33E3               	rrcf	___ftadd@f2& (0+255),f,b
  4648  000B4E  0100               	movlb	0	; () banked
  4649  000B50  2BEA               	incf	___ftadd@exp2& (0+255),f,b
  4650  000B52  D000               	goto	l3264
  4651  000B54                     l3264:
  4652                           
  4653                           ; BSR set to: 0
  4654  000B54  0100               	movlb	0	; () banked
  4655  000B56  51EA               	movf	___ftadd@exp2& (0+255),w,b
  4656  000B58  0100               	movlb	0	; () banked
  4657  000B5A  19EB               	xorwf	___ftadd@exp1& (0+255),w,b
  4658  000B5C  B4D8               	btfsc	status,2,c
  4659  000B5E  D002               	goto	l960
  4660  000B60  D7F1               	goto	l3262
  4661                           
  4662                           ; BSR set to: 0
  4663  000B62  D000               	goto	l960
  4664  000B64                     l960:
  4665                           
  4666                           ; BSR set to: 0
  4667  000B64  0100               	movlb	0	; () banked
  4668  000B66  AFE9               	btfss	___ftadd@sign& (0+255),7,b
  4669  000B68  D012               	goto	l969
  4670                           
  4671                           ; BSR set to: 0
  4672  000B6A  0EFF               	movlw	255
  4673  000B6C  0100               	movlb	0	; () banked
  4674  000B6E  1BE0               	xorwf	___ftadd@f1& (0+255),f,b
  4675  000B70  0EFF               	movlw	255
  4676  000B72  0100               	movlb	0	; () banked
  4677  000B74  1BE1               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4678  000B76  0EFF               	movlw	255
  4679  000B78  0100               	movlb	0	; () banked
  4680  000B7A  1BE2               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4681  000B7C  0E01               	movlw	1
  4682  000B7E  0100               	movlb	0	; () banked
  4683  000B80  27E0               	addwf	___ftadd@f1& (0+255),f,b
  4684  000B82  0E00               	movlw	0
  4685  000B84  0100               	movlb	0	; () banked
  4686  000B86  23E1               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4687  000B88  0E00               	movlw	0
  4688  000B8A  0100               	movlb	0	; () banked
  4689  000B8C  23E2               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4690  000B8E                     l969:
  4691                           
  4692                           ; BSR set to: 0
  4693  000B8E  0100               	movlb	0	; () banked
  4694  000B90  ADE9               	btfss	___ftadd@sign& (0+255),6,b
  4695  000B92  D013               	goto	l3270
  4696                           
  4697                           ; BSR set to: 0
  4698  000B94  0EFF               	movlw	255
  4699  000B96  0100               	movlb	0	; () banked
  4700  000B98  1BE3               	xorwf	___ftadd@f2& (0+255),f,b
  4701  000B9A  0EFF               	movlw	255
  4702  000B9C  0100               	movlb	0	; () banked
  4703  000B9E  1BE4               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4704  000BA0  0EFF               	movlw	255
  4705  000BA2  0100               	movlb	0	; () banked
  4706  000BA4  1BE5               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4707  000BA6  0E01               	movlw	1
  4708  000BA8  0100               	movlb	0	; () banked
  4709  000BAA  27E3               	addwf	___ftadd@f2& (0+255),f,b
  4710  000BAC  0E00               	movlw	0
  4711  000BAE  0100               	movlb	0	; () banked
  4712  000BB0  23E4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4713  000BB2  0E00               	movlw	0
  4714  000BB4  0100               	movlb	0	; () banked
  4715  000BB6  23E5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4716  000BB8  D000               	goto	l3270
  4717  000BBA                     l3270:
  4718                           
  4719                           ; BSR set to: 0
  4720  000BBA  0E00               	movlw	0
  4721  000BBC  0100               	movlb	0	; () banked
  4722  000BBE  6FE9               	movwf	___ftadd@sign& (0+255),b
  4723                           
  4724                           ; BSR set to: 0
  4725  000BC0  0100               	movlb	0	; () banked
  4726  000BC2  51E0               	movf	___ftadd@f1& (0+255),w,b
  4727  000BC4  0100               	movlb	0	; () banked
  4728  000BC6  27E3               	addwf	___ftadd@f2& (0+255),f,b
  4729  000BC8  0100               	movlb	0	; () banked
  4730  000BCA  51E1               	movf	(___ftadd@f1+1)& (0+255),w,b
  4731  000BCC  0100               	movlb	0	; () banked
  4732  000BCE  23E4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4733  000BD0  0100               	movlb	0	; () banked
  4734  000BD2  51E2               	movf	(___ftadd@f1+2)& (0+255),w,b
  4735  000BD4  0100               	movlb	0	; () banked
  4736  000BD6  23E5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4737                           
  4738                           ; BSR set to: 0
  4739  000BD8  0100               	movlb	0	; () banked
  4740  000BDA  AFE5               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4741  000BDC  D016               	goto	l3280
  4742                           
  4743                           ; BSR set to: 0
  4744  000BDE  0EFF               	movlw	255
  4745  000BE0  0100               	movlb	0	; () banked
  4746  000BE2  1BE3               	xorwf	___ftadd@f2& (0+255),f,b
  4747  000BE4  0EFF               	movlw	255
  4748  000BE6  0100               	movlb	0	; () banked
  4749  000BE8  1BE4               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4750  000BEA  0EFF               	movlw	255
  4751  000BEC  0100               	movlb	0	; () banked
  4752  000BEE  1BE5               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4753  000BF0  0E01               	movlw	1
  4754  000BF2  0100               	movlb	0	; () banked
  4755  000BF4  27E3               	addwf	___ftadd@f2& (0+255),f,b
  4756  000BF6  0E00               	movlw	0
  4757  000BF8  0100               	movlb	0	; () banked
  4758  000BFA  23E4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4759  000BFC  0E00               	movlw	0
  4760  000BFE  0100               	movlb	0	; () banked
  4761  000C00  23E5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4762                           
  4763                           ; BSR set to: 0
  4764  000C02  0E01               	movlw	1
  4765  000C04  0100               	movlb	0	; () banked
  4766  000C06  6FE9               	movwf	___ftadd@sign& (0+255),b
  4767  000C08  D000               	goto	l3280
  4768  000C0A                     l3280:
  4769                           
  4770                           ; BSR set to: 0
  4771  000C0A  C0E3  F017         	movff	___ftadd@f2,___ftpack@arg
  4772  000C0E  C0E4  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  4773  000C12  C0E5  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  4774  000C16  C0EB  F01A         	movff	___ftadd@exp1,___ftpack@exp
  4775  000C1A  C0E9  F01B         	movff	___ftadd@sign,___ftpack@sign
  4776  000C1E  EC2D  F00B         	call	___ftpack	;wreg free
  4777  000C22  C017  F0E0         	movff	?___ftpack,?___ftadd
  4778  000C26  C018  F0E1         	movff	?___ftpack+1,?___ftadd+1
  4779  000C2A  C019  F0E2         	movff	?___ftpack+2,?___ftadd+2
  4780  000C2E  0012               	return	
  4781  000C30  0012               	return		;funcret
  4782  000C32                     __end_of___ftadd:
  4783                           	opt stack 0
  4784                           tblptru	equ	0xFF8
  4785                           tblptrh	equ	0xFF7
  4786                           tblptrl	equ	0xFF6
  4787                           tablat	equ	0xFF5
  4788                           prodh	equ	0xFF4
  4789                           prodl	equ	0xFF3
  4790                           intcon	equ	0xFF2
  4791                           intcon2	equ	0xFF1
  4792                           postinc0	equ	0xFEE
  4793                           wreg	equ	0xFE8
  4794                           postinc1	equ	0xFE6
  4795                           postdec1	equ	0xFE5
  4796                           fsr1h	equ	0xFE2
  4797                           fsr1l	equ	0xFE1
  4798                           indf2	equ	0xFDF
  4799                           postinc2	equ	0xFDE
  4800                           postdec2	equ	0xFDD
  4801                           fsr2h	equ	0xFDA
  4802                           fsr2l	equ	0xFD9
  4803                           status	equ	0xFD8
  4804                           
  4805 ;; *************** function ___ftpack *****************
  4806 ;; Defined at:
  4807 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;  arg             3   22[COMRAM] unsigned um
  4810 ;;  exp             1   25[COMRAM] unsigned char 
  4811 ;;  sign            1   26[COMRAM] unsigned char 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  3   22[COMRAM] float 
  4816 ;; Registers used:
  4817 ;;		wreg, status,2, status,0
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4823 ;;      Params:         5       0       0       0       0       0       0
  4824 ;;      Locals:         0       0       0       0       0       0       0
  4825 ;;      Temps:          3       0       0       0       0       0       0
  4826 ;;      Totals:         8       0       0       0       0       0       0
  4827 ;;Total ram usage:        8 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    4
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		___awtoft
  4834 ;;		___ftadd
  4835 ;;		___ftdiv
  4836 ;;		___ftmul
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text28
  4841  00165A                     __ptext28:
  4842                           	opt stack 0
  4843  00165A                     ___ftpack:
  4844                           	opt stack 22
  4845                           
  4846                           ;incstack = 0
  4847  00165A  501A               	movf	___ftpack@exp,w,c
  4848  00165C  B4D8               	btfsc	status,2,c
  4849  00165E  D005               	goto	l3176
  4850  001660  5017               	movf	___ftpack@arg,w,c
  4851  001662  1018               	iorwf	___ftpack@arg+1,w,c
  4852  001664  1019               	iorwf	___ftpack@arg+2,w,c
  4853  001666  A4D8               	btfss	status,2,c
  4854  001668  D00E               	goto	l3182
  4855  00166A                     l3176:
  4856  00166A  0E00               	movlw	0
  4857  00166C  6E17               	movwf	?___ftpack,c
  4858  00166E  0E00               	movlw	0
  4859  001670  6E18               	movwf	?___ftpack+1,c
  4860  001672  0E00               	movlw	0
  4861  001674  6E19               	movwf	?___ftpack+2,c
  4862  001676  0012               	return	
  4863  001678  D006               	goto	l3182
  4864  00167A                     l3180:
  4865  00167A  2A1A               	incf	___ftpack@exp,f,c
  4866  00167C  90D8               	bcf	status,0,c
  4867  00167E  3219               	rrcf	___ftpack@arg+2,f,c
  4868  001680  3218               	rrcf	___ftpack@arg+1,f,c
  4869  001682  3217               	rrcf	___ftpack@arg,f,c
  4870  001684  D000               	goto	l3182
  4871  001686                     l3182:
  4872  001686  0E00               	movlw	0
  4873  001688  1417               	andwf	___ftpack@arg,w,c
  4874  00168A  6E1C               	movwf	??___ftpack& (0+255),c
  4875  00168C  0E00               	movlw	0
  4876  00168E  1418               	andwf	___ftpack@arg+1,w,c
  4877  001690  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  4878  001692  0EFE               	movlw	254
  4879  001694  1419               	andwf	___ftpack@arg+2,w,c
  4880  001696  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  4881  001698  501C               	movf	??___ftpack,w,c
  4882  00169A  101D               	iorwf	??___ftpack+1,w,c
  4883  00169C  101E               	iorwf	??___ftpack+2,w,c
  4884  00169E  B4D8               	btfsc	status,2,c
  4885  0016A0  D00E               	goto	l3188
  4886  0016A2  D7EB               	goto	l3180
  4887  0016A4  D00C               	goto	l3188
  4888  0016A6                     l3184:
  4889  0016A6  2A1A               	incf	___ftpack@exp,f,c
  4890  0016A8  0E01               	movlw	1
  4891  0016AA  2617               	addwf	___ftpack@arg,f,c
  4892  0016AC  0E00               	movlw	0
  4893  0016AE  2218               	addwfc	___ftpack@arg+1,f,c
  4894  0016B0  0E00               	movlw	0
  4895  0016B2  2219               	addwfc	___ftpack@arg+2,f,c
  4896  0016B4  90D8               	bcf	status,0,c
  4897  0016B6  3219               	rrcf	___ftpack@arg+2,f,c
  4898  0016B8  3218               	rrcf	___ftpack@arg+1,f,c
  4899  0016BA  3217               	rrcf	___ftpack@arg,f,c
  4900  0016BC  D000               	goto	l3188
  4901  0016BE                     l3188:
  4902  0016BE  0E00               	movlw	0
  4903  0016C0  1417               	andwf	___ftpack@arg,w,c
  4904  0016C2  6E1C               	movwf	??___ftpack& (0+255),c
  4905  0016C4  0E00               	movlw	0
  4906  0016C6  1418               	andwf	___ftpack@arg+1,w,c
  4907  0016C8  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  4908  0016CA  0EFF               	movlw	255
  4909  0016CC  1419               	andwf	___ftpack@arg+2,w,c
  4910  0016CE  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  4911  0016D0  501C               	movf	??___ftpack,w,c
  4912  0016D2  101D               	iorwf	??___ftpack+1,w,c
  4913  0016D4  101E               	iorwf	??___ftpack+2,w,c
  4914  0016D6  B4D8               	btfsc	status,2,c
  4915  0016D8  D008               	goto	l3192
  4916  0016DA  D7E5               	goto	l3184
  4917  0016DC  D006               	goto	l3192
  4918  0016DE                     l3190:
  4919  0016DE  061A               	decf	___ftpack@exp,f,c
  4920  0016E0  90D8               	bcf	status,0,c
  4921  0016E2  3617               	rlcf	___ftpack@arg,f,c
  4922  0016E4  3618               	rlcf	___ftpack@arg+1,f,c
  4923  0016E6  3619               	rlcf	___ftpack@arg+2,f,c
  4924  0016E8  D000               	goto	l3192
  4925  0016EA                     l3192:
  4926  0016EA  BE18               	btfsc	___ftpack@arg+1,7,c
  4927  0016EC  D004               	goto	l916
  4928  0016EE  0E02               	movlw	2
  4929  0016F0  601A               	cpfslt	___ftpack@exp,c
  4930  0016F2  D7F5               	goto	l3190
  4931  0016F4  D000               	goto	l916
  4932  0016F6                     l916:
  4933  0016F6  B01A               	btfsc	___ftpack@exp,0,c
  4934  0016F8  D002               	goto	l3198
  4935  0016FA  9E18               	bcf	___ftpack@arg+1,7,c
  4936  0016FC  D000               	goto	l3198
  4937  0016FE                     l3198:
  4938  0016FE  90D8               	bcf	status,0,c
  4939  001700  321A               	rrcf	___ftpack@exp,f,c
  4940  001702  501A               	movf	___ftpack@exp,w,c
  4941  001704  1219               	iorwf	___ftpack@arg+2,f,c
  4942  001706  501B               	movf	___ftpack@sign,w,c
  4943  001708  B4D8               	btfsc	status,2,c
  4944  00170A  D002               	goto	l3204
  4945  00170C  8E19               	bsf	___ftpack@arg+2,7,c
  4946  00170E  D000               	goto	l3204
  4947  001710                     l3204:
  4948  001710  C017  F017         	movff	___ftpack@arg,?___ftpack
  4949  001714  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  4950  001718  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  4951  00171C  0012               	return	
  4952  00171E  0012               	return		;funcret
  4953  001720                     __end_of___ftpack:
  4954                           	opt stack 0
  4955                           tblptru	equ	0xFF8
  4956                           tblptrh	equ	0xFF7
  4957                           tblptrl	equ	0xFF6
  4958                           tablat	equ	0xFF5
  4959                           prodh	equ	0xFF4
  4960                           prodl	equ	0xFF3
  4961                           intcon	equ	0xFF2
  4962                           intcon2	equ	0xFF1
  4963                           postinc0	equ	0xFEE
  4964                           wreg	equ	0xFE8
  4965                           postinc1	equ	0xFE6
  4966                           postdec1	equ	0xFE5
  4967                           fsr1h	equ	0xFE2
  4968                           fsr1l	equ	0xFE1
  4969                           indf2	equ	0xFDF
  4970                           postinc2	equ	0xFDE
  4971                           postdec2	equ	0xFDD
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _INTERRUPT_InterruptManager *****************
  4977 ;; Defined at:
  4978 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;		None               void
  4985 ;; Registers used:
  4986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4992 ;;      Params:         0       0       0       0       0       0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0
  4994 ;;      Temps:         14       0       0       0       0       0       0
  4995 ;;      Totals:        14       0       0       0       0       0       0
  4996 ;;Total ram usage:       14 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    3
  4999 ;; This function calls:
  5000 ;;		_ADC_ISR
  5001 ;;		_EUSART1_Receive_ISR
  5002 ;;		_EUSART1_Transmit_ISR
  5003 ;;		_TMR1_ISR
  5004 ;; This function is called by:
  5005 ;;		Interrupt level 2
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	intcode
  5010  000008                     __pintcode:
  5011                           	opt stack 0
  5012  000008                     _INTERRUPT_InterruptManager:
  5013                           	opt stack 22
  5014                           
  5015                           ;incstack = 0
  5016  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
  5017  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  5018  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  5019  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  5020  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  5021  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  5022  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  5023  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  5024  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
  5025  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
  5026  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  5027  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  5028  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  5029  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
  5030                           
  5031                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  5032  000040  BA9D               	btfsc	3997,5,c	;volatile
  5033  000042  AA9E               	btfss	3998,5,c	;volatile
  5034  000044  D003               	goto	i2l280
  5035                           
  5036                           ;interrupt_manager.c: 73: {
  5037                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  5038  000046  ECF1  F00D         	call	_EUSART1_Receive_ISR	;wreg free
  5039                           
  5040                           ;interrupt_manager.c: 75: }
  5041  00004A  D012               	goto	i2l288
  5042  00004C                     i2l280:
  5043                           
  5044                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  5045  00004C  BC9D               	btfsc	3997,6,c	;volatile
  5046  00004E  AC9E               	btfss	3998,6,c	;volatile
  5047  000050  D003               	goto	i2l282
  5048                           
  5049                           ;interrupt_manager.c: 77: {
  5050                           ;interrupt_manager.c: 78: ADC_ISR();
  5051  000052  EC11  F003         	call	_ADC_ISR	;wreg free
  5052                           
  5053                           ;interrupt_manager.c: 79: }
  5054  000056  D00C               	goto	i2l288
  5055  000058                     i2l282:
  5056                           
  5057                           ;interrupt_manager.c: 80: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  5058  000058  B89D               	btfsc	3997,4,c	;volatile
  5059  00005A  A89E               	btfss	3998,4,c	;volatile
  5060  00005C  D003               	goto	i2l284
  5061                           
  5062                           ;interrupt_manager.c: 81: {
  5063                           ;interrupt_manager.c: 82: EUSART1_Transmit_ISR();
  5064  00005E  ECD8  F00D         	call	_EUSART1_Transmit_ISR	;wreg free
  5065                           
  5066                           ;interrupt_manager.c: 83: }
  5067  000062  D006               	goto	i2l288
  5068  000064                     i2l284:
  5069                           
  5070                           ;interrupt_manager.c: 84: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  5071  000064  B09D               	btfsc	3997,0,c	;volatile
  5072  000066  A09E               	btfss	3998,0,c	;volatile
  5073  000068  D003               	goto	i2l288
  5074                           
  5075                           ;interrupt_manager.c: 85: {
  5076                           ;interrupt_manager.c: 86: TMR1_ISR();
  5077  00006A  ECB4  F00C         	call	_TMR1_ISR	;wreg free
  5078                           
  5079                           ;interrupt_manager.c: 88: else
  5080                           ;interrupt_manager.c: 89: {
  5081                           
  5082                           ;interrupt_manager.c: 87: }
  5083  00006E  D000               	goto	i2l288
  5084  000070                     i2l288:
  5085  000070  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  5086  000074  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  5087  000078  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  5088  00007C  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  5089  000080  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  5090  000084  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  5091  000088  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  5092  00008C  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  5093  000090  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  5094  000094  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  5095  000098  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  5096  00009C  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  5097  0000A0  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  5098  0000A4  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  5099  0000A8  0011               	retfie		f
  5100  0000AA                     __end_of_INTERRUPT_InterruptManager:
  5101                           	opt stack 0
  5102                           pclatu	equ	0xFFB
  5103                           pclath	equ	0xFFA
  5104                           tblptru	equ	0xFF8
  5105                           tblptrh	equ	0xFF7
  5106                           tblptrl	equ	0xFF6
  5107                           tablat	equ	0xFF5
  5108                           prodh	equ	0xFF4
  5109                           prodl	equ	0xFF3
  5110                           intcon	equ	0xFF2
  5111                           intcon2	equ	0xFF1
  5112                           postinc0	equ	0xFEE
  5113                           fsr0h	equ	0xFEA
  5114                           fsr0l	equ	0xFE9
  5115                           wreg	equ	0xFE8
  5116                           postinc1	equ	0xFE6
  5117                           postdec1	equ	0xFE5
  5118                           fsr1h	equ	0xFE2
  5119                           fsr1l	equ	0xFE1
  5120                           indf2	equ	0xFDF
  5121                           postinc2	equ	0xFDE
  5122                           postdec2	equ	0xFDD
  5123                           fsr2h	equ	0xFDA
  5124                           fsr2l	equ	0xFD9
  5125                           status	equ	0xFD8
  5126                           
  5127 ;; *************** function _TMR1_ISR *****************
  5128 ;; Defined at:
  5129 ;;		line 117 in file "mcc_generated_files/tmr1.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;		None               void
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, status,0, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5143 ;;      Params:         0       0       0       0       0       0       0
  5144 ;;      Locals:         0       0       0       0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0
  5146 ;;      Totals:         0       0       0       0       0       0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    2
  5150 ;; This function calls:
  5151 ;;		_Battery_Read
  5152 ;;		_Current_Read
  5153 ;;		_TMR1_CallBack
  5154 ;;		_Temp_Read
  5155 ;; This function is called by:
  5156 ;;		_INTERRUPT_InterruptManager
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text30
  5161  001968                     __ptext30:
  5162                           	opt stack 0
  5163  001968                     _TMR1_ISR:
  5164                           	opt stack 22
  5165                           
  5166                           ;tmr1.c: 119: static volatile unsigned int CountCallBack = 0;
  5167                           ;tmr1.c: 122: PIR1bits.TMR1IF = 0;
  5168                           
  5169                           ;incstack = 0
  5170  001968  909E               	bcf	3998,0,c	;volatile
  5171                           
  5172                           ;tmr1.c: 125: TMR1H = (timer1ReloadVal >> 8);
  5173  00196A  5048               	movf	_timer1ReloadVal+1,w,c	;volatile
  5174  00196C  6ECF               	movwf	4047,c	;volatile
  5175                           
  5176                           ;tmr1.c: 126: TMR1L = (uint8_t) timer1ReloadVal;
  5177  00196E  C047  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  5178                           
  5179                           ;tmr1.c: 129: if (++CountCallBack >= 4)
  5180  001972  4A3B               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
  5181  001974  2A3C               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
  5182  001976  503C               	movf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  5183  001978  E104               	bnz	i2u192_40
  5184  00197A  0E04               	movlw	4
  5185  00197C  5C3B               	subwf	TMR1_ISR@CountCallBack,w,c	;volatile
  5186  00197E  A0D8               	btfss	status,0,c
  5187  001980  D00A               	goto	i2l2658
  5188  001982                     i2u192_40:
  5189                           
  5190                           ;tmr1.c: 130: {
  5191                           ;tmr1.c: 132: TMR1_CallBack();
  5192  001982  ECC4  F00E         	call	_TMR1_CallBack	;wreg free
  5193  001986  D000               	goto	i2l2654
  5194  001988                     i2l2654:
  5195  001988  7889               	btg	3977,4,c	;volatile
  5196  00198A  D000               	goto	i2l2656
  5197  00198C                     i2l2656:
  5198                           
  5199                           ;tmr1.c: 135: CountCallBack = 0;
  5200  00198C  0E00               	movlw	0
  5201  00198E  6E3C               	movwf	TMR1_ISR@CountCallBack+1,c	;volatile
  5202  001990  0E00               	movlw	0
  5203  001992  6E3B               	movwf	TMR1_ISR@CountCallBack,c	;volatile
  5204  001994  D000               	goto	i2l2658
  5205  001996                     i2l2658:
  5206                           
  5207                           ;tmr1.c: 136: }
  5208                           ;tmr1.c: 137: if(CountCallBack == 1)
  5209  001996  043B               	decf	TMR1_ISR@CountCallBack,w,c	;volatile
  5210  001998  103C               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  5211  00199A  A4D8               	btfss	status,2,c
  5212  00199C  D003               	goto	i2l2662
  5213                           
  5214                           ;tmr1.c: 138: {
  5215                           ;tmr1.c: 139: Current_Read();
  5216  00199E  EC8D  F00E         	call	_Current_Read	;wreg free
  5217  0019A2  D000               	goto	i2l2662
  5218  0019A4                     i2l2662:
  5219                           
  5220                           ;tmr1.c: 140: }
  5221                           ;tmr1.c: 141: if(CountCallBack == 2)
  5222  0019A4  0E02               	movlw	2
  5223  0019A6  183B               	xorwf	TMR1_ISR@CountCallBack,w,c	;volatile
  5224  0019A8  103C               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  5225  0019AA  A4D8               	btfss	status,2,c
  5226  0019AC  D003               	goto	i2l2666
  5227                           
  5228                           ;tmr1.c: 142: {
  5229                           ;tmr1.c: 143: Battery_Read();
  5230  0019AE  EC99  F00E         	call	_Battery_Read	;wreg free
  5231  0019B2  D000               	goto	i2l2666
  5232  0019B4                     i2l2666:
  5233                           
  5234                           ;tmr1.c: 144: }
  5235                           ;tmr1.c: 145: if(CountCallBack == 3)
  5236  0019B4  0E03               	movlw	3
  5237  0019B6  183B               	xorwf	TMR1_ISR@CountCallBack,w,c	;volatile
  5238  0019B8  103C               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  5239  0019BA  A4D8               	btfss	status,2,c
  5240  0019BC  0012               	return	
  5241                           
  5242                           ;tmr1.c: 146: {
  5243                           ;tmr1.c: 147: Temp_Read();
  5244  0019BE  EC81  F00E         	call	_Temp_Read	;wreg free
  5245  0019C2  0012               	return	
  5246  0019C4  0012               	return		;funcret
  5247  0019C6                     __end_of_TMR1_ISR:
  5248                           	opt stack 0
  5249                           pclatu	equ	0xFFB
  5250                           pclath	equ	0xFFA
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           prodh	equ	0xFF4
  5256                           prodl	equ	0xFF3
  5257                           intcon	equ	0xFF2
  5258                           intcon2	equ	0xFF1
  5259                           postinc0	equ	0xFEE
  5260                           fsr0h	equ	0xFEA
  5261                           fsr0l	equ	0xFE9
  5262                           wreg	equ	0xFE8
  5263                           postinc1	equ	0xFE6
  5264                           postdec1	equ	0xFE5
  5265                           fsr1h	equ	0xFE2
  5266                           fsr1l	equ	0xFE1
  5267                           indf2	equ	0xFDF
  5268                           postinc2	equ	0xFDE
  5269                           postdec2	equ	0xFDD
  5270                           fsr2h	equ	0xFDA
  5271                           fsr2l	equ	0xFD9
  5272                           status	equ	0xFD8
  5273                           
  5274 ;; *************** function _Temp_Read *****************
  5275 ;; Defined at:
  5276 ;;		line 27 in file "Tempeture.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;		None
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;		None
  5281 ;; Return value:  Size  Location     Type
  5282 ;;		None               void
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5290 ;;      Params:         0       0       0       0       0       0       0
  5291 ;;      Locals:         0       0       0       0       0       0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0
  5293 ;;      Totals:         0       0       0       0       0       0       0
  5294 ;;Total ram usage:        0 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    1
  5297 ;; This function calls:
  5298 ;;		_ADC_StartConversion
  5299 ;; This function is called by:
  5300 ;;		_TMR1_ISR
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text31
  5305  001D02                     __ptext31:
  5306                           	opt stack 0
  5307  001D02                     _Temp_Read:
  5308                           	opt stack 22
  5309                           
  5310                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
  5311                           
  5312                           ;incstack = 0
  5313  001D02  0E00               	movlw	0
  5314  001D04  6E3E               	movwf	_ADC_Buffer_Point+1,c
  5315  001D06  0E00               	movlw	0
  5316  001D08  6E3D               	movwf	_ADC_Buffer_Point,c
  5317                           
  5318                           ;Tempeture.c: 31: Temp_Aquire = 1;
  5319  001D0A  0E01               	movlw	1
  5320  001D0C  6E40               	movwf	_Temp_Aquire,c
  5321                           
  5322                           ;Tempeture.c: 32: ADCON1 = 0x80;
  5323  001D0E  0E80               	movlw	128
  5324  001D10  6EC1               	movwf	4033,c	;volatile
  5325                           
  5326                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
  5327  001D12  0E0E               	movlw	14
  5328  001D14  EC68  F00E         	call	_ADC_StartConversion
  5329  001D18  0012               	return		;funcret
  5330  001D1A                     __end_of_Temp_Read:
  5331                           	opt stack 0
  5332                           pclatu	equ	0xFFB
  5333                           pclath	equ	0xFFA
  5334                           tblptru	equ	0xFF8
  5335                           tblptrh	equ	0xFF7
  5336                           tblptrl	equ	0xFF6
  5337                           tablat	equ	0xFF5
  5338                           prodh	equ	0xFF4
  5339                           prodl	equ	0xFF3
  5340                           intcon	equ	0xFF2
  5341                           intcon2	equ	0xFF1
  5342                           postinc0	equ	0xFEE
  5343                           fsr0h	equ	0xFEA
  5344                           fsr0l	equ	0xFE9
  5345                           wreg	equ	0xFE8
  5346                           postinc1	equ	0xFE6
  5347                           postdec1	equ	0xFE5
  5348                           fsr1h	equ	0xFE2
  5349                           fsr1l	equ	0xFE1
  5350                           indf2	equ	0xFDF
  5351                           postinc2	equ	0xFDE
  5352                           postdec2	equ	0xFDD
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _TMR1_CallBack *****************
  5358 ;; Defined at:
  5359 ;;		line 153 in file "mcc_generated_files/tmr1.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;		None               void
  5366 ;; Registers used:
  5367 ;;		None
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5373 ;;      Params:         0       0       0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0
  5376 ;;      Totals:         0       0       0       0       0       0       0
  5377 ;;Total ram usage:        0 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_TMR1_ISR
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text32
  5387  001D88                     __ptext32:
  5388                           	opt stack 0
  5389  001D88                     _TMR1_CallBack:
  5390                           	opt stack 23
  5391                           
  5392                           ;incstack = 0
  5393  001D88  0012               	return		;funcret
  5394  001D8A                     __end_of_TMR1_CallBack:
  5395                           	opt stack 0
  5396                           pclatu	equ	0xFFB
  5397                           pclath	equ	0xFFA
  5398                           tblptru	equ	0xFF8
  5399                           tblptrh	equ	0xFF7
  5400                           tblptrl	equ	0xFF6
  5401                           tablat	equ	0xFF5
  5402                           prodh	equ	0xFF4
  5403                           prodl	equ	0xFF3
  5404                           intcon	equ	0xFF2
  5405                           intcon2	equ	0xFF1
  5406                           postinc0	equ	0xFEE
  5407                           fsr0h	equ	0xFEA
  5408                           fsr0l	equ	0xFE9
  5409                           wreg	equ	0xFE8
  5410                           postinc1	equ	0xFE6
  5411                           postdec1	equ	0xFE5
  5412                           fsr1h	equ	0xFE2
  5413                           fsr1l	equ	0xFE1
  5414                           indf2	equ	0xFDF
  5415                           postinc2	equ	0xFDE
  5416                           postdec2	equ	0xFDD
  5417                           fsr2h	equ	0xFDA
  5418                           fsr2l	equ	0xFD9
  5419                           status	equ	0xFD8
  5420                           
  5421 ;; *************** function _Current_Read *****************
  5422 ;; Defined at:
  5423 ;;		line 30 in file "Current.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;		None               void
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5437 ;;      Params:         0       0       0       0       0       0       0
  5438 ;;      Locals:         0       0       0       0       0       0       0
  5439 ;;      Temps:          0       0       0       0       0       0       0
  5440 ;;      Totals:         0       0       0       0       0       0       0
  5441 ;;Total ram usage:        0 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    1
  5444 ;; This function calls:
  5445 ;;		_ADC_StartConversion
  5446 ;; This function is called by:
  5447 ;;		_TMR1_ISR
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	text33
  5452  001D1A                     __ptext33:
  5453                           	opt stack 0
  5454  001D1A                     _Current_Read:
  5455                           	opt stack 22
  5456                           
  5457                           ;Current.c: 33: ADC_Buffer_Point = 0;
  5458                           
  5459                           ;incstack = 0
  5460  001D1A  0E00               	movlw	0
  5461  001D1C  6E3E               	movwf	_ADC_Buffer_Point+1,c
  5462  001D1E  0E00               	movlw	0
  5463  001D20  6E3D               	movwf	_ADC_Buffer_Point,c
  5464                           
  5465                           ;Current.c: 34: Current_Aquire = 1;
  5466  001D22  0E01               	movlw	1
  5467  001D24  6E3F               	movwf	_Current_Aquire,c
  5468                           
  5469                           ;Current.c: 35: ADCON1 = 0x80;
  5470  001D26  0E80               	movlw	128
  5471  001D28  6EC1               	movwf	4033,c	;volatile
  5472                           
  5473                           ;Current.c: 36: ADC_StartConversion(Asen);
  5474  001D2A  0E0B               	movlw	11
  5475  001D2C  EC68  F00E         	call	_ADC_StartConversion
  5476  001D30  0012               	return		;funcret
  5477  001D32                     __end_of_Current_Read:
  5478                           	opt stack 0
  5479                           pclatu	equ	0xFFB
  5480                           pclath	equ	0xFFA
  5481                           tblptru	equ	0xFF8
  5482                           tblptrh	equ	0xFF7
  5483                           tblptrl	equ	0xFF6
  5484                           tablat	equ	0xFF5
  5485                           prodh	equ	0xFF4
  5486                           prodl	equ	0xFF3
  5487                           intcon	equ	0xFF2
  5488                           intcon2	equ	0xFF1
  5489                           postinc0	equ	0xFEE
  5490                           fsr0h	equ	0xFEA
  5491                           fsr0l	equ	0xFE9
  5492                           wreg	equ	0xFE8
  5493                           postinc1	equ	0xFE6
  5494                           postdec1	equ	0xFE5
  5495                           fsr1h	equ	0xFE2
  5496                           fsr1l	equ	0xFE1
  5497                           indf2	equ	0xFDF
  5498                           postinc2	equ	0xFDE
  5499                           postdec2	equ	0xFDD
  5500                           fsr2h	equ	0xFDA
  5501                           fsr2l	equ	0xFD9
  5502                           status	equ	0xFD8
  5503                           
  5504 ;; *************** function _Battery_Read *****************
  5505 ;; Defined at:
  5506 ;;		line 24 in file "Battery.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;		None
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;		None
  5511 ;; Return value:  Size  Location     Type
  5512 ;;		None               void
  5513 ;; Registers used:
  5514 ;;		wreg, status,2, status,0, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5520 ;;      Params:         0       0       0       0       0       0       0
  5521 ;;      Locals:         0       0       0       0       0       0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0
  5523 ;;      Totals:         0       0       0       0       0       0       0
  5524 ;;Total ram usage:        0 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    1
  5527 ;; This function calls:
  5528 ;;		_ADC_StartConversion
  5529 ;; This function is called by:
  5530 ;;		_TMR1_ISR
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           	psect	text34
  5535  001D32                     __ptext34:
  5536                           	opt stack 0
  5537  001D32                     _Battery_Read:
  5538                           	opt stack 22
  5539                           
  5540                           ;Battery.c: 27: ADC_Buffer_Point = 0;
  5541                           
  5542                           ;incstack = 0
  5543  001D32  0E00               	movlw	0
  5544  001D34  6E3E               	movwf	_ADC_Buffer_Point+1,c
  5545  001D36  0E00               	movlw	0
  5546  001D38  6E3D               	movwf	_ADC_Buffer_Point,c
  5547                           
  5548                           ;Battery.c: 28: Volt_Aquire = 1;
  5549  001D3A  0E01               	movlw	1
  5550  001D3C  6E41               	movwf	_Volt_Aquire,c
  5551                           
  5552                           ;Battery.c: 29: ADCON1 = 0x81;
  5553  001D3E  0E81               	movlw	129
  5554  001D40  6EC1               	movwf	4033,c	;volatile
  5555                           
  5556                           ;Battery.c: 30: ADC_StartConversion(AN_CELL1);
  5557  001D42  0E07               	movlw	7
  5558  001D44  EC68  F00E         	call	_ADC_StartConversion
  5559  001D48  0012               	return		;funcret
  5560  001D4A                     __end_of_Battery_Read:
  5561                           	opt stack 0
  5562                           pclatu	equ	0xFFB
  5563                           pclath	equ	0xFFA
  5564                           tblptru	equ	0xFF8
  5565                           tblptrh	equ	0xFF7
  5566                           tblptrl	equ	0xFF6
  5567                           tablat	equ	0xFF5
  5568                           prodh	equ	0xFF4
  5569                           prodl	equ	0xFF3
  5570                           intcon	equ	0xFF2
  5571                           intcon2	equ	0xFF1
  5572                           postinc0	equ	0xFEE
  5573                           fsr0h	equ	0xFEA
  5574                           fsr0l	equ	0xFE9
  5575                           wreg	equ	0xFE8
  5576                           postinc1	equ	0xFE6
  5577                           postdec1	equ	0xFE5
  5578                           fsr1h	equ	0xFE2
  5579                           fsr1l	equ	0xFE1
  5580                           indf2	equ	0xFDF
  5581                           postinc2	equ	0xFDE
  5582                           postdec2	equ	0xFDD
  5583                           fsr2h	equ	0xFDA
  5584                           fsr2l	equ	0xFD9
  5585                           status	equ	0xFD8
  5586                           
  5587 ;; *************** function _EUSART1_Transmit_ISR *****************
  5588 ;; Defined at:
  5589 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;		None               void
  5596 ;; Registers used:
  5597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5603 ;;      Params:         0       0       0       0       0       0       0
  5604 ;;      Locals:         0       0       0       0       0       0       0
  5605 ;;      Temps:          0       0       0       0       0       0       0
  5606 ;;      Totals:         0       0       0       0       0       0       0
  5607 ;;Total ram usage:        0 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; This function calls:
  5610 ;;		Nothing
  5611 ;; This function is called by:
  5612 ;;		_INTERRUPT_InterruptManager
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text35
  5617  001BB0                     __ptext35:
  5618                           	opt stack 0
  5619  001BB0                     _EUSART1_Transmit_ISR:
  5620                           	opt stack 24
  5621                           
  5622                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  5623                           
  5624                           ;incstack = 0
  5625  001BB0  0E08               	movlw	8
  5626  001BB2  6049               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  5627  001BB4  D013               	goto	i2l138
  5628                           
  5629                           ;eusart1.c: 178: {
  5630                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  5631  001BB6  5046               	movf	_eusart1TxTail,w,c
  5632  001BB8  0D01               	mullw	1
  5633  001BBA  0EB8               	movlw	low _eusart1TxBuffer
  5634  001BBC  24F3               	addwf	prodl,w,c
  5635  001BBE  6ED9               	movwf	fsr2l,c
  5636  001BC0  0E00               	movlw	high _eusart1TxBuffer
  5637  001BC2  20F4               	addwfc	prodh,w,c
  5638  001BC4  6EDA               	movwf	fsr2h,c
  5639  001BC6  50DF               	movf	indf2,w,c
  5640  001BC8  6EAD               	movwf	4013,c	;volatile
  5641  001BCA  2A46               	incf	_eusart1TxTail,f,c
  5642                           
  5643                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  5644  001BCC  0E07               	movlw	7
  5645  001BCE  6446               	cpfsgt	_eusart1TxTail,c
  5646  001BD0  D003               	goto	i2l2700
  5647                           
  5648                           ;eusart1.c: 181: {
  5649                           ;eusart1.c: 182: eusart1TxTail = 0;
  5650  001BD2  0E00               	movlw	0
  5651  001BD4  6E46               	movwf	_eusart1TxTail,c
  5652  001BD6  D000               	goto	i2l2700
  5653  001BD8                     i2l2700:
  5654                           
  5655                           ;eusart1.c: 183: }
  5656                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  5657  001BD8  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  5658                           
  5659                           ;eusart1.c: 185: }
  5660  001BDA  0012               	return	
  5661  001BDC                     i2l138:
  5662                           
  5663                           ;eusart1.c: 186: else
  5664                           ;eusart1.c: 187: {
  5665                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  5666  001BDC  989D               	bcf	3997,4,c	;volatile
  5667  001BDE  0012               	return	
  5668  001BE0  0012               	return		;funcret
  5669  001BE2                     __end_of_EUSART1_Transmit_ISR:
  5670                           	opt stack 0
  5671                           pclatu	equ	0xFFB
  5672                           pclath	equ	0xFFA
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           intcon	equ	0xFF2
  5680                           intcon2	equ	0xFF1
  5681                           postinc0	equ	0xFEE
  5682                           fsr0h	equ	0xFEA
  5683                           fsr0l	equ	0xFE9
  5684                           wreg	equ	0xFE8
  5685                           postinc1	equ	0xFE6
  5686                           postdec1	equ	0xFE5
  5687                           fsr1h	equ	0xFE2
  5688                           fsr1l	equ	0xFE1
  5689                           indf2	equ	0xFDF
  5690                           postinc2	equ	0xFDE
  5691                           postdec2	equ	0xFDD
  5692                           fsr2h	equ	0xFDA
  5693                           fsr2l	equ	0xFD9
  5694                           status	equ	0xFD8
  5695                           
  5696 ;; *************** function _EUSART1_Receive_ISR *****************
  5697 ;; Defined at:
  5698 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;		None
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;		None
  5703 ;; Return value:  Size  Location     Type
  5704 ;;		None               void
  5705 ;; Registers used:
  5706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5712 ;;      Params:         0       0       0       0       0       0       0
  5713 ;;      Locals:         0       0       0       0       0       0       0
  5714 ;;      Temps:          0       0       0       0       0       0       0
  5715 ;;      Totals:         0       0       0       0       0       0       0
  5716 ;;Total ram usage:        0 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; This function calls:
  5719 ;;		Nothing
  5720 ;; This function is called by:
  5721 ;;		_INTERRUPT_InterruptManager
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text36
  5726  001BE2                     __ptext36:
  5727                           	opt stack 0
  5728  001BE2                     _EUSART1_Receive_ISR:
  5729                           	opt stack 24
  5730                           
  5731                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  5732                           
  5733                           ;incstack = 0
  5734  001BE2  A2AB               	btfss	4011,1,c	;volatile
  5735  001BE4  D003               	goto	i2l2706
  5736                           
  5737                           ;eusart1.c: 195: {
  5738                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  5739  001BE6  98AB               	bcf	4011,4,c	;volatile
  5740                           
  5741                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  5742  001BE8  88AB               	bsf	4011,4,c	;volatile
  5743  001BEA  D000               	goto	i2l2706
  5744  001BEC                     i2l2706:
  5745                           
  5746                           ;eusart1.c: 200: }
  5747                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  5748  001BEC  5043               	movf	_eusart1RxHead,w,c
  5749  001BEE  0D01               	mullw	1
  5750  001BF0  0EB0               	movlw	low _eusart1RxBuffer
  5751  001BF2  24F3               	addwf	prodl,w,c
  5752  001BF4  6ED9               	movwf	fsr2l,c
  5753  001BF6  0E00               	movlw	high _eusart1RxBuffer
  5754  001BF8  20F4               	addwfc	prodh,w,c
  5755  001BFA  6EDA               	movwf	fsr2h,c
  5756  001BFC  CFAE FFDF          	movff	4014,indf2	;volatile
  5757  001C00  2A43               	incf	_eusart1RxHead,f,c
  5758                           
  5759                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  5760  001C02  0E07               	movlw	7
  5761  001C04  6443               	cpfsgt	_eusart1RxHead,c
  5762  001C06  D003               	goto	i2l2714
  5763                           
  5764                           ;eusart1.c: 205: {
  5765                           ;eusart1.c: 206: eusart1RxHead = 0;
  5766  001C08  0E00               	movlw	0
  5767  001C0A  6E43               	movwf	_eusart1RxHead,c
  5768  001C0C  D000               	goto	i2l2714
  5769  001C0E                     i2l2714:
  5770                           
  5771                           ;eusart1.c: 207: }
  5772                           ;eusart1.c: 208: eusart1RxCount++;
  5773  001C0E  2A42               	incf	_eusart1RxCount,f,c	;volatile
  5774  001C10  0012               	return		;funcret
  5775  001C12                     __end_of_EUSART1_Receive_ISR:
  5776                           	opt stack 0
  5777                           pclatu	equ	0xFFB
  5778                           pclath	equ	0xFFA
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           intcon2	equ	0xFF1
  5787                           postinc0	equ	0xFEE
  5788                           fsr0h	equ	0xFEA
  5789                           fsr0l	equ	0xFE9
  5790                           wreg	equ	0xFE8
  5791                           postinc1	equ	0xFE6
  5792                           postdec1	equ	0xFE5
  5793                           fsr1h	equ	0xFE2
  5794                           fsr1l	equ	0xFE1
  5795                           indf2	equ	0xFDF
  5796                           postinc2	equ	0xFDE
  5797                           postdec2	equ	0xFDD
  5798                           fsr2h	equ	0xFDA
  5799                           fsr2l	equ	0xFD9
  5800                           status	equ	0xFD8
  5801                           
  5802 ;; *************** function _ADC_ISR *****************
  5803 ;; Defined at:
  5804 ;;		line 130 in file "mcc_generated_files/adc.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;		None
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;  ADC_Result      2    6[COMRAM] int 
  5809 ;; Return value:  Size  Location     Type
  5810 ;;		None               void
  5811 ;; Registers used:
  5812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5818 ;;      Params:         0       0       0       0       0       0       0
  5819 ;;      Locals:         2       0       0       0       0       0       0
  5820 ;;      Temps:          2       0       0       0       0       0       0
  5821 ;;      Totals:         4       0       0       0       0       0       0
  5822 ;;Total ram usage:        4 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:    1
  5825 ;; This function calls:
  5826 ;;		_ADC_GetConversionResult
  5827 ;;		_ADC_StartConversion
  5828 ;;		_Set_4051
  5829 ;; This function is called by:
  5830 ;;		_INTERRUPT_InterruptManager
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text37
  5835  000622                     __ptext37:
  5836                           	opt stack 0
  5837  000622                     _ADC_ISR:
  5838                           	opt stack 23
  5839                           
  5840                           ;adc.c: 133: PIR1bits.ADIF = 0;
  5841                           
  5842                           ;incstack = 0
  5843  000622  9C9E               	bcf	3998,6,c	;volatile
  5844                           
  5845                           ;adc.c: 134: int ADC_Result = 0;
  5846  000624  0E00               	movlw	0
  5847  000626  6E08               	movwf	ADC_ISR@ADC_Result+1,c
  5848  000628  0E00               	movlw	0
  5849  00062A  6E07               	movwf	ADC_ISR@ADC_Result,c
  5850                           
  5851                           ;adc.c: 135: if (Temp_Aquire){
  5852  00062C  5040               	movf	_Temp_Aquire,w,c
  5853  00062E  B4D8               	btfsc	status,2,c
  5854  000630  D11D               	goto	i2l2786
  5855                           
  5856                           ;adc.c: 137: ADC_Result = ADC_GetConversionResult();
  5857  000632  ECA5  F00E         	call	_ADC_GetConversionResult	;wreg free
  5858  000636  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  5859  00063A  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  5860                           
  5861                           ;adc.c: 138: switch ( ADC_Buffer_Point )
  5862  00063E  D0E8               	goto	i2l2782
  5863  000640                     i2l2722:
  5864                           
  5865                           ;adc.c: 141: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5866  000640  90D8               	bcf	status,0,c
  5867  000642  343D               	rlcf	_ADC_Buffer_Point,w,c
  5868  000644  6ED9               	movwf	fsr2l,c
  5869  000646  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5870  000648  6EDA               	movwf	fsr2h,c
  5871  00064A  0EC6               	movlw	low _Temp_Adc
  5872  00064C  26D9               	addwf	fsr2l,f,c
  5873  00064E  0E00               	movlw	high _Temp_Adc
  5874  000650  22DA               	addwfc	fsr2h,f,c
  5875  000652  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5876  000656  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5877                           
  5878                           ;adc.c: 142: Set_4051(0);
  5879  00065A  0E00               	movlw	0
  5880  00065C  6E02               	movwf	Set_4051@Channel+1,c
  5881  00065E  0E00               	movlw	0
  5882  000660  6E01               	movwf	Set_4051@Channel,c
  5883  000662  ECBC  F00D         	call	_Set_4051	;wreg free
  5884                           
  5885                           ;adc.c: 143: ADC_StartConversion(Temp1);
  5886  000666  0E0E               	movlw	14
  5887  000668  EC68  F00E         	call	_ADC_StartConversion
  5888                           
  5889                           ;adc.c: 144: break;
  5890  00066C  D0FC               	goto	i2l2784
  5891  00066E                     i2l2728:
  5892                           
  5893                           ;adc.c: 146: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5894  00066E  90D8               	bcf	status,0,c
  5895  000670  343D               	rlcf	_ADC_Buffer_Point,w,c
  5896  000672  6ED9               	movwf	fsr2l,c
  5897  000674  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5898  000676  6EDA               	movwf	fsr2h,c
  5899  000678  0EC6               	movlw	low _Temp_Adc
  5900  00067A  26D9               	addwf	fsr2l,f,c
  5901  00067C  0E00               	movlw	high _Temp_Adc
  5902  00067E  22DA               	addwfc	fsr2h,f,c
  5903  000680  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5904  000684  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5905                           
  5906                           ;adc.c: 147: Set_4051(1);
  5907  000688  0E00               	movlw	0
  5908  00068A  6E02               	movwf	Set_4051@Channel+1,c
  5909  00068C  0E01               	movlw	1
  5910  00068E  6E01               	movwf	Set_4051@Channel,c
  5911  000690  ECBC  F00D         	call	_Set_4051	;wreg free
  5912                           
  5913                           ;adc.c: 148: ADC_StartConversion(Temp1);
  5914  000694  0E0E               	movlw	14
  5915  000696  EC68  F00E         	call	_ADC_StartConversion
  5916                           
  5917                           ;adc.c: 149: break;
  5918  00069A  D0E5               	goto	i2l2784
  5919  00069C                     i2l2734:
  5920                           
  5921                           ;adc.c: 151: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5922  00069C  90D8               	bcf	status,0,c
  5923  00069E  343D               	rlcf	_ADC_Buffer_Point,w,c
  5924  0006A0  6ED9               	movwf	fsr2l,c
  5925  0006A2  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5926  0006A4  6EDA               	movwf	fsr2h,c
  5927  0006A6  0EC6               	movlw	low _Temp_Adc
  5928  0006A8  26D9               	addwf	fsr2l,f,c
  5929  0006AA  0E00               	movlw	high _Temp_Adc
  5930  0006AC  22DA               	addwfc	fsr2h,f,c
  5931  0006AE  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5932  0006B2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5933                           
  5934                           ;adc.c: 152: Set_4051(2);
  5935  0006B6  0E00               	movlw	0
  5936  0006B8  6E02               	movwf	Set_4051@Channel+1,c
  5937  0006BA  0E02               	movlw	2
  5938  0006BC  6E01               	movwf	Set_4051@Channel,c
  5939  0006BE  ECBC  F00D         	call	_Set_4051	;wreg free
  5940                           
  5941                           ;adc.c: 153: ADC_StartConversion(Temp1);
  5942  0006C2  0E0E               	movlw	14
  5943  0006C4  EC68  F00E         	call	_ADC_StartConversion
  5944                           
  5945                           ;adc.c: 154: break;
  5946  0006C8  D0CE               	goto	i2l2784
  5947  0006CA                     i2l2740:
  5948                           
  5949                           ;adc.c: 156: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5950  0006CA  90D8               	bcf	status,0,c
  5951  0006CC  343D               	rlcf	_ADC_Buffer_Point,w,c
  5952  0006CE  6ED9               	movwf	fsr2l,c
  5953  0006D0  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5954  0006D2  6EDA               	movwf	fsr2h,c
  5955  0006D4  0EC6               	movlw	low _Temp_Adc
  5956  0006D6  26D9               	addwf	fsr2l,f,c
  5957  0006D8  0E00               	movlw	high _Temp_Adc
  5958  0006DA  22DA               	addwfc	fsr2h,f,c
  5959  0006DC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5960  0006E0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5961                           
  5962                           ;adc.c: 157: Set_4051(3);
  5963  0006E4  0E00               	movlw	0
  5964  0006E6  6E02               	movwf	Set_4051@Channel+1,c
  5965  0006E8  0E03               	movlw	3
  5966  0006EA  6E01               	movwf	Set_4051@Channel,c
  5967  0006EC  ECBC  F00D         	call	_Set_4051	;wreg free
  5968                           
  5969                           ;adc.c: 158: ADC_StartConversion(Temp1);
  5970  0006F0  0E0E               	movlw	14
  5971  0006F2  EC68  F00E         	call	_ADC_StartConversion
  5972                           
  5973                           ;adc.c: 159: break;
  5974  0006F6  D0B7               	goto	i2l2784
  5975  0006F8                     i2l2746:
  5976                           
  5977                           ;adc.c: 161: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5978  0006F8  90D8               	bcf	status,0,c
  5979  0006FA  343D               	rlcf	_ADC_Buffer_Point,w,c
  5980  0006FC  6ED9               	movwf	fsr2l,c
  5981  0006FE  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5982  000700  6EDA               	movwf	fsr2h,c
  5983  000702  0EC6               	movlw	low _Temp_Adc
  5984  000704  26D9               	addwf	fsr2l,f,c
  5985  000706  0E00               	movlw	high _Temp_Adc
  5986  000708  22DA               	addwfc	fsr2h,f,c
  5987  00070A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5988  00070E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5989                           
  5990                           ;adc.c: 162: Set_4051(4);
  5991  000712  0E00               	movlw	0
  5992  000714  6E02               	movwf	Set_4051@Channel+1,c
  5993  000716  0E04               	movlw	4
  5994  000718  6E01               	movwf	Set_4051@Channel,c
  5995  00071A  ECBC  F00D         	call	_Set_4051	;wreg free
  5996                           
  5997                           ;adc.c: 163: ADC_StartConversion(Temp1);
  5998  00071E  0E0E               	movlw	14
  5999  000720  EC68  F00E         	call	_ADC_StartConversion
  6000                           
  6001                           ;adc.c: 164: break;
  6002  000724  D0A0               	goto	i2l2784
  6003  000726                     i2l2752:
  6004                           
  6005                           ;adc.c: 166: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6006  000726  90D8               	bcf	status,0,c
  6007  000728  343D               	rlcf	_ADC_Buffer_Point,w,c
  6008  00072A  6ED9               	movwf	fsr2l,c
  6009  00072C  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6010  00072E  6EDA               	movwf	fsr2h,c
  6011  000730  0EC6               	movlw	low _Temp_Adc
  6012  000732  26D9               	addwf	fsr2l,f,c
  6013  000734  0E00               	movlw	high _Temp_Adc
  6014  000736  22DA               	addwfc	fsr2h,f,c
  6015  000738  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6016  00073C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6017                           
  6018                           ;adc.c: 167: Set_4051(5);
  6019  000740  0E00               	movlw	0
  6020  000742  6E02               	movwf	Set_4051@Channel+1,c
  6021  000744  0E05               	movlw	5
  6022  000746  6E01               	movwf	Set_4051@Channel,c
  6023  000748  ECBC  F00D         	call	_Set_4051	;wreg free
  6024                           
  6025                           ;adc.c: 168: ADC_StartConversion(Temp1);
  6026  00074C  0E0E               	movlw	14
  6027  00074E  EC68  F00E         	call	_ADC_StartConversion
  6028                           
  6029                           ;adc.c: 169: break;
  6030  000752  D089               	goto	i2l2784
  6031  000754                     i2l2758:
  6032                           
  6033                           ;adc.c: 171: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6034  000754  90D8               	bcf	status,0,c
  6035  000756  343D               	rlcf	_ADC_Buffer_Point,w,c
  6036  000758  6ED9               	movwf	fsr2l,c
  6037  00075A  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6038  00075C  6EDA               	movwf	fsr2h,c
  6039  00075E  0EC6               	movlw	low _Temp_Adc
  6040  000760  26D9               	addwf	fsr2l,f,c
  6041  000762  0E00               	movlw	high _Temp_Adc
  6042  000764  22DA               	addwfc	fsr2h,f,c
  6043  000766  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6044  00076A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6045                           
  6046                           ;adc.c: 172: Set_4051(6);
  6047  00076E  0E00               	movlw	0
  6048  000770  6E02               	movwf	Set_4051@Channel+1,c
  6049  000772  0E06               	movlw	6
  6050  000774  6E01               	movwf	Set_4051@Channel,c
  6051  000776  ECBC  F00D         	call	_Set_4051	;wreg free
  6052                           
  6053                           ;adc.c: 173: ADC_StartConversion(Temp1);
  6054  00077A  0E0E               	movlw	14
  6055  00077C  EC68  F00E         	call	_ADC_StartConversion
  6056                           
  6057                           ;adc.c: 174: break;
  6058  000780  D072               	goto	i2l2784
  6059  000782                     i2l2764:
  6060                           
  6061                           ;adc.c: 176: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6062  000782  90D8               	bcf	status,0,c
  6063  000784  343D               	rlcf	_ADC_Buffer_Point,w,c
  6064  000786  6ED9               	movwf	fsr2l,c
  6065  000788  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6066  00078A  6EDA               	movwf	fsr2h,c
  6067  00078C  0EC6               	movlw	low _Temp_Adc
  6068  00078E  26D9               	addwf	fsr2l,f,c
  6069  000790  0E00               	movlw	high _Temp_Adc
  6070  000792  22DA               	addwfc	fsr2h,f,c
  6071  000794  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6072  000798  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6073                           
  6074                           ;adc.c: 177: Set_4051(7);
  6075  00079C  0E00               	movlw	0
  6076  00079E  6E02               	movwf	Set_4051@Channel+1,c
  6077  0007A0  0E07               	movlw	7
  6078  0007A2  6E01               	movwf	Set_4051@Channel,c
  6079  0007A4  ECBC  F00D         	call	_Set_4051	;wreg free
  6080                           
  6081                           ;adc.c: 178: ADC_StartConversion(Temp1);
  6082  0007A8  0E0E               	movlw	14
  6083  0007AA  EC68  F00E         	call	_ADC_StartConversion
  6084                           
  6085                           ;adc.c: 179: break;
  6086  0007AE  D05B               	goto	i2l2784
  6087  0007B0                     i2l2770:
  6088                           
  6089                           ;adc.c: 181: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6090  0007B0  90D8               	bcf	status,0,c
  6091  0007B2  343D               	rlcf	_ADC_Buffer_Point,w,c
  6092  0007B4  6ED9               	movwf	fsr2l,c
  6093  0007B6  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6094  0007B8  6EDA               	movwf	fsr2h,c
  6095  0007BA  0EC6               	movlw	low _Temp_Adc
  6096  0007BC  26D9               	addwf	fsr2l,f,c
  6097  0007BE  0E00               	movlw	high _Temp_Adc
  6098  0007C0  22DA               	addwfc	fsr2h,f,c
  6099  0007C2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6100  0007C6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6101                           
  6102                           ;adc.c: 182: Set_4051(0);
  6103  0007CA  0E00               	movlw	0
  6104  0007CC  6E02               	movwf	Set_4051@Channel+1,c
  6105  0007CE  0E00               	movlw	0
  6106  0007D0  6E01               	movwf	Set_4051@Channel,c
  6107  0007D2  ECBC  F00D         	call	_Set_4051	;wreg free
  6108                           
  6109                           ;adc.c: 184: break;
  6110  0007D6  D047               	goto	i2l2784
  6111  0007D8                     i2l2774:
  6112                           
  6113                           ;adc.c: 186: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  6114  0007D8  90D8               	bcf	status,0,c
  6115  0007DA  343D               	rlcf	_ADC_Buffer_Point,w,c
  6116  0007DC  6ED9               	movwf	fsr2l,c
  6117  0007DE  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6118  0007E0  6EDA               	movwf	fsr2h,c
  6119  0007E2  0EC6               	movlw	low _Temp_Adc
  6120  0007E4  26D9               	addwf	fsr2l,f,c
  6121  0007E6  0E00               	movlw	high _Temp_Adc
  6122  0007E8  22DA               	addwfc	fsr2h,f,c
  6123  0007EA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6124  0007EE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6125                           
  6126                           ;adc.c: 187: Set_4051(1);
  6127  0007F2  0E00               	movlw	0
  6128  0007F4  6E02               	movwf	Set_4051@Channel+1,c
  6129  0007F6  0E01               	movlw	1
  6130  0007F8  6E01               	movwf	Set_4051@Channel,c
  6131  0007FA  ECBC  F00D         	call	_Set_4051	;wreg free
  6132                           
  6133                           ;adc.c: 189: break;
  6134  0007FE  D033               	goto	i2l2784
  6135  000800                     i2l2778:
  6136                           
  6137                           ;adc.c: 191: Temp_Aquire = 0;
  6138  000800  0E00               	movlw	0
  6139  000802  6E40               	movwf	_Temp_Aquire,c
  6140                           
  6141                           ;adc.c: 192: Temp_Done = 1;
  6142  000804  0E00               	movlw	0
  6143  000806  0100               	movlb	0	; () banked
  6144  000808  6FC1               	movwf	(_Temp_Done+1)& (0+255),b
  6145  00080A  0E01               	movlw	1
  6146  00080C  6FC0               	movwf	_Temp_Done& (0+255),b
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;adc.c: 194: }
  6150                           
  6151                           ;adc.c: 193: break;
  6152  00080E  D02B               	goto	i2l2784
  6153  000810                     i2l2782:
  6154  000810  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  6155  000814  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  6156                           
  6157                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6158                           ; Switch size 1, requested type "space"
  6159                           ; Number of cases is 1, Range of values is 0 to 0
  6160                           ; switch strategies available:
  6161                           ; Name         Instructions Cycles
  6162                           ; simple_byte            4     3 (average)
  6163                           ;	Chosen strategy is simple_byte
  6164  000818  5006               	movf	??_ADC_ISR+1,w,c
  6165  00081A  0A00               	xorlw	0	; case 0
  6166  00081C  A4D8               	btfss	status,2,c
  6167  00081E  D023               	goto	i2l2784
  6168                           
  6169                           ; Switch size 1, requested type "space"
  6170                           ; Number of cases is 11, Range of values is 0 to 10
  6171                           ; switch strategies available:
  6172                           ; Name         Instructions Cycles
  6173                           ; simple_byte           34    18 (average)
  6174                           ;	Chosen strategy is simple_byte
  6175  000820  5005               	movf	??_ADC_ISR,w,c
  6176  000822  0A00               	xorlw	0	; case 0
  6177  000824  B4D8               	btfsc	status,2,c
  6178  000826  D70C               	goto	i2l2722
  6179  000828  0A01               	xorlw	1	; case 1
  6180  00082A  B4D8               	btfsc	status,2,c
  6181  00082C  D720               	goto	i2l2728
  6182  00082E  0A03               	xorlw	3	; case 2
  6183  000830  B4D8               	btfsc	status,2,c
  6184  000832  D734               	goto	i2l2734
  6185  000834  0A01               	xorlw	1	; case 3
  6186  000836  B4D8               	btfsc	status,2,c
  6187  000838  D748               	goto	i2l2740
  6188  00083A  0A07               	xorlw	7	; case 4
  6189  00083C  B4D8               	btfsc	status,2,c
  6190  00083E  D75C               	goto	i2l2746
  6191  000840  0A01               	xorlw	1	; case 5
  6192  000842  B4D8               	btfsc	status,2,c
  6193  000844  D770               	goto	i2l2752
  6194  000846  0A03               	xorlw	3	; case 6
  6195  000848  B4D8               	btfsc	status,2,c
  6196  00084A  D784               	goto	i2l2758
  6197  00084C  0A01               	xorlw	1	; case 7
  6198  00084E  B4D8               	btfsc	status,2,c
  6199  000850  D798               	goto	i2l2764
  6200  000852  0A0F               	xorlw	15	; case 8
  6201  000854  B4D8               	btfsc	status,2,c
  6202  000856  D7AC               	goto	i2l2770
  6203  000858  0A01               	xorlw	1	; case 9
  6204  00085A  B4D8               	btfsc	status,2,c
  6205  00085C  D7BD               	goto	i2l2774
  6206  00085E  0A03               	xorlw	3	; case 10
  6207  000860  B4D8               	btfsc	status,2,c
  6208  000862  D7CE               	goto	i2l2778
  6209  000864  D000               	goto	i2l2784
  6210  000866                     i2l2784:
  6211                           
  6212                           ;adc.c: 195: ADC_Buffer_Point++;
  6213  000866  4A3D               	infsnz	_ADC_Buffer_Point,f,c
  6214  000868  2A3E               	incf	_ADC_Buffer_Point+1,f,c
  6215  00086A  D000               	goto	i2l2786
  6216  00086C                     i2l2786:
  6217                           
  6218                           ;adc.c: 196: }
  6219                           ;adc.c: 197: if (Volt_Aquire){
  6220  00086C  5041               	movf	_Volt_Aquire,w,c
  6221  00086E  B4D8               	btfsc	status,2,c
  6222  000870  0012               	return	
  6223                           
  6224                           ;adc.c: 199: ADC_Result = ADC_GetConversionResult();
  6225  000872  ECA5  F00E         	call	_ADC_GetConversionResult	;wreg free
  6226  000876  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  6227  00087A  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  6228                           
  6229                           ;adc.c: 200: switch ( ADC_Buffer_Point )
  6230  00087E  D077               	goto	i2l2820
  6231  000880                     i2l2790:
  6232                           
  6233                           ;adc.c: 203: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6234  000880  90D8               	bcf	status,0,c
  6235  000882  343D               	rlcf	_ADC_Buffer_Point,w,c
  6236  000884  6ED9               	movwf	fsr2l,c
  6237  000886  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6238  000888  6EDA               	movwf	fsr2h,c
  6239  00088A  0E9C               	movlw	low _Battery_Adc
  6240  00088C  26D9               	addwf	fsr2l,f,c
  6241  00088E  0E00               	movlw	high _Battery_Adc
  6242  000890  22DA               	addwfc	fsr2h,f,c
  6243  000892  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6244  000896  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6245                           
  6246                           ;adc.c: 204: ADC_StartConversion(AN_CELL1);
  6247  00089A  0E07               	movlw	7
  6248  00089C  EC68  F00E         	call	_ADC_StartConversion
  6249                           
  6250                           ;adc.c: 205: break;
  6251  0008A0  D085               	goto	i2l2822
  6252  0008A2                     i2l2794:
  6253                           
  6254                           ;adc.c: 207: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6255  0008A2  90D8               	bcf	status,0,c
  6256  0008A4  343D               	rlcf	_ADC_Buffer_Point,w,c
  6257  0008A6  6ED9               	movwf	fsr2l,c
  6258  0008A8  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6259  0008AA  6EDA               	movwf	fsr2h,c
  6260  0008AC  0E9C               	movlw	low _Battery_Adc
  6261  0008AE  26D9               	addwf	fsr2l,f,c
  6262  0008B0  0E00               	movlw	high _Battery_Adc
  6263  0008B2  22DA               	addwfc	fsr2h,f,c
  6264  0008B4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6265  0008B8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6266                           
  6267                           ;adc.c: 208: ADC_StartConversion(AN_CELL2);
  6268  0008BC  0E06               	movlw	6
  6269  0008BE  EC68  F00E         	call	_ADC_StartConversion
  6270                           
  6271                           ;adc.c: 209: break;
  6272  0008C2  D074               	goto	i2l2822
  6273  0008C4                     i2l2798:
  6274                           
  6275                           ;adc.c: 211: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6276  0008C4  90D8               	bcf	status,0,c
  6277  0008C6  343D               	rlcf	_ADC_Buffer_Point,w,c
  6278  0008C8  6ED9               	movwf	fsr2l,c
  6279  0008CA  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6280  0008CC  6EDA               	movwf	fsr2h,c
  6281  0008CE  0E9C               	movlw	low _Battery_Adc
  6282  0008D0  26D9               	addwf	fsr2l,f,c
  6283  0008D2  0E00               	movlw	high _Battery_Adc
  6284  0008D4  22DA               	addwfc	fsr2h,f,c
  6285  0008D6  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6286  0008DA  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6287                           
  6288                           ;adc.c: 212: ADC_StartConversion(AN_CELL3);
  6289  0008DE  0E05               	movlw	5
  6290  0008E0  EC68  F00E         	call	_ADC_StartConversion
  6291                           
  6292                           ;adc.c: 213: break;
  6293  0008E4  D063               	goto	i2l2822
  6294  0008E6                     i2l2802:
  6295                           
  6296                           ;adc.c: 215: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6297  0008E6  90D8               	bcf	status,0,c
  6298  0008E8  343D               	rlcf	_ADC_Buffer_Point,w,c
  6299  0008EA  6ED9               	movwf	fsr2l,c
  6300  0008EC  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6301  0008EE  6EDA               	movwf	fsr2h,c
  6302  0008F0  0E9C               	movlw	low _Battery_Adc
  6303  0008F2  26D9               	addwf	fsr2l,f,c
  6304  0008F4  0E00               	movlw	high _Battery_Adc
  6305  0008F6  22DA               	addwfc	fsr2h,f,c
  6306  0008F8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6307  0008FC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6308                           
  6309                           ;adc.c: 216: ADC_StartConversion(AN_CELL4);
  6310  000900  0E04               	movlw	4
  6311  000902  EC68  F00E         	call	_ADC_StartConversion
  6312                           
  6313                           ;adc.c: 217: break;
  6314  000906  D052               	goto	i2l2822
  6315  000908                     i2l2806:
  6316                           
  6317                           ;adc.c: 219: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6318  000908  90D8               	bcf	status,0,c
  6319  00090A  343D               	rlcf	_ADC_Buffer_Point,w,c
  6320  00090C  6ED9               	movwf	fsr2l,c
  6321  00090E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6322  000910  6EDA               	movwf	fsr2h,c
  6323  000912  0E9C               	movlw	low _Battery_Adc
  6324  000914  26D9               	addwf	fsr2l,f,c
  6325  000916  0E00               	movlw	high _Battery_Adc
  6326  000918  22DA               	addwfc	fsr2h,f,c
  6327  00091A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6328  00091E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6329                           
  6330                           ;adc.c: 220: ADC_StartConversion(AN_CELL5);
  6331  000922  0E03               	movlw	3
  6332  000924  EC68  F00E         	call	_ADC_StartConversion
  6333                           
  6334                           ;adc.c: 221: break;
  6335  000928  D041               	goto	i2l2822
  6336  00092A                     i2l2810:
  6337                           
  6338                           ;adc.c: 223: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6339  00092A  90D8               	bcf	status,0,c
  6340  00092C  343D               	rlcf	_ADC_Buffer_Point,w,c
  6341  00092E  6ED9               	movwf	fsr2l,c
  6342  000930  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6343  000932  6EDA               	movwf	fsr2h,c
  6344  000934  0E9C               	movlw	low _Battery_Adc
  6345  000936  26D9               	addwf	fsr2l,f,c
  6346  000938  0E00               	movlw	high _Battery_Adc
  6347  00093A  22DA               	addwfc	fsr2h,f,c
  6348  00093C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6349  000940  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6350                           
  6351                           ;adc.c: 224: ADC_StartConversion(AN_CELL6);
  6352  000944  0E01               	movlw	1
  6353  000946  EC68  F00E         	call	_ADC_StartConversion
  6354                           
  6355                           ;adc.c: 225: break;
  6356  00094A  D030               	goto	i2l2822
  6357  00094C                     i2l2814:
  6358                           
  6359                           ;adc.c: 227: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  6360  00094C  90D8               	bcf	status,0,c
  6361  00094E  343D               	rlcf	_ADC_Buffer_Point,w,c
  6362  000950  6ED9               	movwf	fsr2l,c
  6363  000952  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  6364  000954  6EDA               	movwf	fsr2h,c
  6365  000956  0E9C               	movlw	low _Battery_Adc
  6366  000958  26D9               	addwf	fsr2l,f,c
  6367  00095A  0E00               	movlw	high _Battery_Adc
  6368  00095C  22DA               	addwfc	fsr2h,f,c
  6369  00095E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  6370  000962  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  6371                           
  6372                           ;adc.c: 228: ADC_StartConversion(AN_CELL7);
  6373  000966  0E00               	movlw	0
  6374  000968  EC68  F00E         	call	_ADC_StartConversion
  6375                           
  6376                           ;adc.c: 230: }
  6377                           
  6378                           ;adc.c: 229: break;
  6379  00096C  D01F               	goto	i2l2822
  6380  00096E                     i2l2820:
  6381  00096E  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  6382  000972  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  6383                           
  6384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6385                           ; Switch size 1, requested type "space"
  6386                           ; Number of cases is 1, Range of values is 0 to 0
  6387                           ; switch strategies available:
  6388                           ; Name         Instructions Cycles
  6389                           ; simple_byte            4     3 (average)
  6390                           ;	Chosen strategy is simple_byte
  6391  000976  5006               	movf	??_ADC_ISR+1,w,c
  6392  000978  0A00               	xorlw	0	; case 0
  6393  00097A  A4D8               	btfss	status,2,c
  6394  00097C  D017               	goto	i2l2822
  6395                           
  6396                           ; Switch size 1, requested type "space"
  6397                           ; Number of cases is 7, Range of values is 0 to 6
  6398                           ; switch strategies available:
  6399                           ; Name         Instructions Cycles
  6400                           ; simple_byte           22    12 (average)
  6401                           ;	Chosen strategy is simple_byte
  6402  00097E  5005               	movf	??_ADC_ISR,w,c
  6403  000980  0A00               	xorlw	0	; case 0
  6404  000982  B4D8               	btfsc	status,2,c
  6405  000984  D77D               	goto	i2l2790
  6406  000986  0A01               	xorlw	1	; case 1
  6407  000988  B4D8               	btfsc	status,2,c
  6408  00098A  D78B               	goto	i2l2794
  6409  00098C  0A03               	xorlw	3	; case 2
  6410  00098E  B4D8               	btfsc	status,2,c
  6411  000990  D799               	goto	i2l2798
  6412  000992  0A01               	xorlw	1	; case 3
  6413  000994  B4D8               	btfsc	status,2,c
  6414  000996  D7A7               	goto	i2l2802
  6415  000998  0A07               	xorlw	7	; case 4
  6416  00099A  B4D8               	btfsc	status,2,c
  6417  00099C  D7B5               	goto	i2l2806
  6418  00099E  0A01               	xorlw	1	; case 5
  6419  0009A0  B4D8               	btfsc	status,2,c
  6420  0009A2  D7C3               	goto	i2l2810
  6421  0009A4  0A03               	xorlw	3	; case 6
  6422  0009A6  B4D8               	btfsc	status,2,c
  6423  0009A8  D7D1               	goto	i2l2814
  6424  0009AA  D000               	goto	i2l2822
  6425  0009AC                     i2l2822:
  6426                           
  6427                           ;adc.c: 231: ADC_Buffer_Point++;
  6428  0009AC  4A3D               	infsnz	_ADC_Buffer_Point,f,c
  6429  0009AE  2A3E               	incf	_ADC_Buffer_Point+1,f,c
  6430  0009B0  0012               	return	
  6431  0009B2  0012               	return		;funcret
  6432  0009B4                     __end_of_ADC_ISR:
  6433                           	opt stack 0
  6434                           pclatu	equ	0xFFB
  6435                           pclath	equ	0xFFA
  6436                           tblptru	equ	0xFF8
  6437                           tblptrh	equ	0xFF7
  6438                           tblptrl	equ	0xFF6
  6439                           tablat	equ	0xFF5
  6440                           prodh	equ	0xFF4
  6441                           prodl	equ	0xFF3
  6442                           intcon	equ	0xFF2
  6443                           intcon2	equ	0xFF1
  6444                           postinc0	equ	0xFEE
  6445                           fsr0h	equ	0xFEA
  6446                           fsr0l	equ	0xFE9
  6447                           wreg	equ	0xFE8
  6448                           postinc1	equ	0xFE6
  6449                           postdec1	equ	0xFE5
  6450                           fsr1h	equ	0xFE2
  6451                           fsr1l	equ	0xFE1
  6452                           indf2	equ	0xFDF
  6453                           postinc2	equ	0xFDE
  6454                           postdec2	equ	0xFDD
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function _Set_4051 *****************
  6460 ;; Defined at:
  6461 ;;		line 8 in file "Functions.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;  Channel         2    0[COMRAM] int 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;		None
  6466 ;; Return value:  Size  Location     Type
  6467 ;;		None               void
  6468 ;; Registers used:
  6469 ;;		wreg, status,2, status,0
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6475 ;;      Params:         2       0       0       0       0       0       0
  6476 ;;      Locals:         0       0       0       0       0       0       0
  6477 ;;      Temps:          2       0       0       0       0       0       0
  6478 ;;      Totals:         4       0       0       0       0       0       0
  6479 ;;Total ram usage:        4 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; This function calls:
  6482 ;;		Nothing
  6483 ;; This function is called by:
  6484 ;;		_ADC_ISR
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           	psect	text38
  6489  001B78                     __ptext38:
  6490                           	opt stack 0
  6491  001B78                     _Set_4051:
  6492                           	opt stack 23
  6493                           
  6494                           ;Functions.c: 10: if (Channel & 0x01)
  6495                           
  6496                           ;incstack = 0
  6497  001B78  A001               	btfss	Set_4051@Channel,0,c
  6498  001B7A  D002               	goto	i2l2490
  6499                           
  6500                           ;Functions.c: 11: {
  6501                           ;Functions.c: 12: do { LATA7 = ~LATA7; } while(0);
  6502  001B7C  7E89               	btg	3977,7,c	;volatile
  6503  001B7E  D000               	goto	i2l2490
  6504  001B80                     i2l2490:
  6505                           
  6506                           ;Functions.c: 13: }
  6507                           ;Functions.c: 14: if ((Channel>>1) & 0x01)
  6508  001B80  3402               	rlcf	Set_4051@Channel+1,w,c
  6509  001B82  3002               	rrcf	Set_4051@Channel+1,w,c
  6510  001B84  6E04               	movwf	(??_Set_4051+1)& (0+255),c
  6511  001B86  3001               	rrcf	Set_4051@Channel,w,c
  6512  001B88  6E03               	movwf	??_Set_4051& (0+255),c
  6513  001B8A  A003               	btfss	??_Set_4051,0,c
  6514  001B8C  D002               	goto	i2l2492
  6515                           
  6516                           ;Functions.c: 15: {
  6517                           ;Functions.c: 16: do { LATA6 = ~LATA6; } while(0);
  6518  001B8E  7C89               	btg	3977,6,c	;volatile
  6519  001B90  D000               	goto	i2l2492
  6520  001B92                     i2l2492:
  6521                           
  6522                           ;Functions.c: 17: }
  6523                           ;Functions.c: 18: if ((Channel>>2) & 0x01)
  6524  001B92  C001  F003         	movff	Set_4051@Channel,??_Set_4051
  6525  001B96  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
  6526  001B9A  3404               	rlcf	??_Set_4051+1,w,c
  6527  001B9C  3204               	rrcf	??_Set_4051+1,f,c
  6528  001B9E  3203               	rrcf	??_Set_4051,f,c
  6529  001BA0  3404               	rlcf	??_Set_4051+1,w,c
  6530  001BA2  3204               	rrcf	??_Set_4051+1,f,c
  6531  001BA4  3203               	rrcf	??_Set_4051,f,c
  6532  001BA6  A003               	btfss	??_Set_4051,0,c
  6533  001BA8  0012               	return	
  6534                           
  6535                           ;Functions.c: 19: {
  6536                           ;Functions.c: 20: do { LATC0 = ~LATC0; } while(0);
  6537  001BAA  708B               	btg	3979,0,c	;volatile
  6538  001BAC  0012               	return	
  6539  001BAE  0012               	return		;funcret
  6540  001BB0                     __end_of_Set_4051:
  6541                           	opt stack 0
  6542                           pclatu	equ	0xFFB
  6543                           pclath	equ	0xFFA
  6544                           tblptru	equ	0xFF8
  6545                           tblptrh	equ	0xFF7
  6546                           tblptrl	equ	0xFF6
  6547                           tablat	equ	0xFF5
  6548                           prodh	equ	0xFF4
  6549                           prodl	equ	0xFF3
  6550                           intcon	equ	0xFF2
  6551                           intcon2	equ	0xFF1
  6552                           postinc0	equ	0xFEE
  6553                           fsr0h	equ	0xFEA
  6554                           fsr0l	equ	0xFE9
  6555                           wreg	equ	0xFE8
  6556                           postinc1	equ	0xFE6
  6557                           postdec1	equ	0xFE5
  6558                           fsr1h	equ	0xFE2
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           fsr2h	equ	0xFDA
  6564                           fsr2l	equ	0xFD9
  6565                           status	equ	0xFD8
  6566                           
  6567 ;; *************** function _ADC_StartConversion *****************
  6568 ;; Defined at:
  6569 ;;		line 84 in file "mcc_generated_files/adc.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;  channel         1    wreg     enum E8837
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;  channel         1    1[COMRAM] enum E8837
  6574 ;; Return value:  Size  Location     Type
  6575 ;;		None               void
  6576 ;; Registers used:
  6577 ;;		wreg, status,2, status,0
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6583 ;;      Params:         0       0       0       0       0       0       0
  6584 ;;      Locals:         1       0       0       0       0       0       0
  6585 ;;      Temps:          1       0       0       0       0       0       0
  6586 ;;      Totals:         2       0       0       0       0       0       0
  6587 ;;Total ram usage:        2 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; This function calls:
  6590 ;;		Nothing
  6591 ;; This function is called by:
  6592 ;;		_ADC_ISR
  6593 ;;		_Battery_Read
  6594 ;;		_Temp_Read
  6595 ;;		_Current_Read
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text39
  6600  001CD0                     __ptext39:
  6601                           	opt stack 0
  6602  001CD0                     _ADC_StartConversion:
  6603                           	opt stack 22
  6604                           
  6605                           ;incstack = 0
  6606                           ;ADC_StartConversion@channel stored from wreg
  6607  001CD0  6E02               	movwf	ADC_StartConversion@channel,c
  6608                           
  6609                           ;adc.c: 87: ADCON0bits.CHS = channel;
  6610  001CD2  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  6611  001CD6  4601               	rlncf	??_ADC_StartConversion,f,c
  6612  001CD8  4601               	rlncf	??_ADC_StartConversion,f,c
  6613  001CDA  50C2               	movf	4034,w,c	;volatile
  6614  001CDC  1801               	xorwf	??_ADC_StartConversion,w,c
  6615  001CDE  0B83               	andlw	-125
  6616  001CE0  1801               	xorwf	??_ADC_StartConversion,w,c
  6617  001CE2  6EC2               	movwf	4034,c	;volatile
  6618                           
  6619                           ;adc.c: 90: ADCON0bits.ADON = 1;
  6620  001CE4  80C2               	bsf	4034,0,c	;volatile
  6621                           
  6622                           ;adc.c: 94: ADCON0bits.GO_nDONE = 1;
  6623  001CE6  82C2               	bsf	4034,1,c	;volatile
  6624  001CE8  0012               	return		;funcret
  6625  001CEA                     __end_of_ADC_StartConversion:
  6626                           	opt stack 0
  6627                           pclatu	equ	0xFFB
  6628                           pclath	equ	0xFFA
  6629                           tblptru	equ	0xFF8
  6630                           tblptrh	equ	0xFF7
  6631                           tblptrl	equ	0xFF6
  6632                           tablat	equ	0xFF5
  6633                           prodh	equ	0xFF4
  6634                           prodl	equ	0xFF3
  6635                           intcon	equ	0xFF2
  6636                           intcon2	equ	0xFF1
  6637                           postinc0	equ	0xFEE
  6638                           fsr0h	equ	0xFEA
  6639                           fsr0l	equ	0xFE9
  6640                           wreg	equ	0xFE8
  6641                           postinc1	equ	0xFE6
  6642                           postdec1	equ	0xFE5
  6643                           fsr1h	equ	0xFE2
  6644                           fsr1l	equ	0xFE1
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652 ;; *************** function _ADC_GetConversionResult *****************
  6653 ;; Defined at:
  6654 ;;		line 103 in file "mcc_generated_files/adc.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  2    0[COMRAM] unsigned int 
  6661 ;; Registers used:
  6662 ;;		wreg, status,2, status,0
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6668 ;;      Params:         2       0       0       0       0       0       0
  6669 ;;      Locals:         0       0       0       0       0       0       0
  6670 ;;      Temps:          2       0       0       0       0       0       0
  6671 ;;      Totals:         4       0       0       0       0       0       0
  6672 ;;Total ram usage:        4 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; This function calls:
  6675 ;;		Nothing
  6676 ;; This function is called by:
  6677 ;;		_ADC_ISR
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text40
  6682  001D4A                     __ptext40:
  6683                           	opt stack 0
  6684  001D4A                     _ADC_GetConversionResult:
  6685                           	opt stack 23
  6686                           
  6687                           ;adc.c: 106: return ((ADRESH << 8) + ADRESL);
  6688                           
  6689                           ;incstack = 0
  6690  001D4A  50C4               	movf	4036,w,c	;volatile
  6691  001D4C  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  6692  001D4E  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  6693  001D50  50C3               	movf	4035,w,c	;volatile
  6694  001D52  2403               	addwf	??_ADC_GetConversionResult,w,c
  6695  001D54  6E01               	movwf	?_ADC_GetConversionResult,c
  6696  001D56  0E00               	movlw	0
  6697  001D58  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  6698  001D5A  6E02               	movwf	?_ADC_GetConversionResult+1,c
  6699  001D5C  0012               	return	
  6700  001D5E  0012               	return		;funcret
  6701  001D60                     __end_of_ADC_GetConversionResult:
  6702                           	opt stack 0
  6703                           pclatu	equ	0xFFB
  6704                           pclath	equ	0xFFA
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodh	equ	0xFF4
  6710                           prodl	equ	0xFF3
  6711                           intcon	equ	0xFF2
  6712                           intcon2	equ	0xFF1
  6713                           postinc0	equ	0xFEE
  6714                           fsr0h	equ	0xFEA
  6715                           fsr0l	equ	0xFE9
  6716                           wreg	equ	0xFE8
  6717                           postinc1	equ	0xFE6
  6718                           postdec1	equ	0xFE5
  6719                           fsr1h	equ	0xFE2
  6720                           fsr1l	equ	0xFE1
  6721                           indf2	equ	0xFDF
  6722                           postinc2	equ	0xFDE
  6723                           postdec2	equ	0xFDD
  6724                           fsr2h	equ	0xFDA
  6725                           fsr2l	equ	0xFD9
  6726                           status	equ	0xFD8
  6727                           pclatu	equ	0xFFB
  6728                           pclath	equ	0xFFA
  6729                           tblptru	equ	0xFF8
  6730                           tblptrh	equ	0xFF7
  6731                           tblptrl	equ	0xFF6
  6732                           tablat	equ	0xFF5
  6733                           prodh	equ	0xFF4
  6734                           prodl	equ	0xFF3
  6735                           intcon	equ	0xFF2
  6736                           intcon2	equ	0xFF1
  6737                           postinc0	equ	0xFEE
  6738                           fsr0h	equ	0xFEA
  6739                           fsr0l	equ	0xFE9
  6740                           wreg	equ	0xFE8
  6741                           postinc1	equ	0xFE6
  6742                           postdec1	equ	0xFE5
  6743                           fsr1h	equ	0xFE2
  6744                           fsr1l	equ	0xFE1
  6745                           indf2	equ	0xFDF
  6746                           postinc2	equ	0xFDE
  6747                           postdec2	equ	0xFDD
  6748                           fsr2h	equ	0xFDA
  6749                           fsr2l	equ	0xFD9
  6750                           status	equ	0xFD8
  6751                           
  6752                           	psect	rparam
  6753  0000                     pclatu	equ	0xFFB
  6754                           pclath	equ	0xFFA
  6755                           tblptru	equ	0xFF8
  6756                           tblptrh	equ	0xFF7
  6757                           tblptrl	equ	0xFF6
  6758                           tablat	equ	0xFF5
  6759                           prodh	equ	0xFF4
  6760                           prodl	equ	0xFF3
  6761                           intcon	equ	0xFF2
  6762                           intcon2	equ	0xFF1
  6763                           postinc0	equ	0xFEE
  6764                           fsr0h	equ	0xFEA
  6765                           fsr0l	equ	0xFE9
  6766                           wreg	equ	0xFE8
  6767                           postinc1	equ	0xFE6
  6768                           postdec1	equ	0xFE5
  6769                           fsr1h	equ	0xFE2
  6770                           fsr1l	equ	0xFE1
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           fsr2h	equ	0xFDA
  6775                           fsr2l	equ	0xFD9
  6776                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    27
    Data        0
    BSS         344
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     58      73
    BANK0           160     35     157
    BANK1           256     16     226
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _printf->_putch
    _putch->_EUSART1_Write
    _Temp_Fault->___ftge
    _Temp_Convert->___ftmul
    _log->___ftmul
    _eval_poly->___ftmul
    _Temp_Filter->___ftmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___ftmul
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Battery_Filter->___ftmul
    ___ftmul->___ftdiv
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Current_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Temp_Convert

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  126370
                                             11 BANK1      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     176
                                             24 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             23 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      44
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    5842
                                             37 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   75861
                                              0 BANK1     11    11      0
                        _Temp_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   30614
                                             30 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   16016
                                             18 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6323
                                             18 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   15822
                                             18 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    5873
                                             37 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1032
                                             28 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      2     2      0   38618
                                             20 BANK0      2     2      0
                     _Battery_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4230
                                             34 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2905
                                             30 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   15822
                                             18 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    4698
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4874
                                             49 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5959
                                              6 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2464
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1171
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0      66
                       _Battery_Read
                       _Current_Read
                      _TMR1_CallBack
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Current_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1105
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___wmul
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___wmul
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _printf
     _putch
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Current_Read
       _ADC_StartConversion
     _TMR1_CallBack
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     10      E2       6       88.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     23      9D       4       98.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3A      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C8       9        0.0%
DATA                 0      0     1C8      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May 19 18:07:33 2015

           _eusart1TxBufferRemaining 0049                  ___wmul@multiplicand 0019  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 00EB                         ___ftadd@exp2 00EA  
                       ___ftadd@sign 00E9                                  l126 1AD4  
                                l334 17CE                                  l344 113E  
                                l418 1966                                  l428 0FD4  
                                l916 16F6                                  l951 0A80  
                                l960 0B64                                  l945 0A1C  
                                l980 1466                                  l949 0A56  
                                l969 0B8E                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0047  
                                _log 1140                      __end_of_ADC_ISR 09B4  
                                prod 000FF3                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                      ?_Battery_Filter 0001  
                       ___ftdiv@cntr 002C                         ___ftdiv@sign 0031  
                               l2402 1AF8                                 l3204 1710  
                               l2404 1AFC                                 l3222 0A2A  
                               l3310 131E                                 l3320 1356  
                               l3400 0E90                                 l3250 0AE8  
                               l3234 0A76                                 l3314 1336  
                               l3180 167A                                 l3252 0AF8  
                               l3244 0AB8                                 l3228 0A64  
                               l3324 136E                                 l3340 1B52  
                               l3500 1740                                 l3412 0F7E  
                               l3190 16DE                                 l3182 1686  
                               l3270 0BBA                                 l3262 0B44  
                               l3254 0B08                                 l3318 134E  
                               l2630 1802                                 l3406 0F5A  
                               l3430 1192                                 l2390 1AC4  
                               l3192 16EA                                 l3184 16A6  
                               l3176 166A                                 l3280 0C0A  
                               l3264 0B54                                 l3256 0B14  
                               l3328 1388                                 l3512 1588  
                               l2640 1860                                 l3408 0F64  
                               l3352 188E                                 l3424 1164  
                               l3290 12AE                                 l3522 1654  
                               l2634 1834                                 l3506 17C6  
                               l3530 1904                                 l3188 16BE  
                               l3372 0FE0                                 l3452 1400  
                               l3516 15A2                                 l3198 16FE  
                               l3382 10C4                                 l3446 13D8  
                               l3366 14E0                                 l3534 1918  
                               l3622 1A08                                 l3614 19E6  
                               l3296 12DA                                 l3384 10CE  
                               l3376 0FFA                                 l3472 1440  
                               l3368 1564                                 l3608 19D0  
                               l3482 1474                                 l3490 1A46  
                               l3538 195E                                 l3388 10E8  
                               l3396 0E76                                 l3572 0E66  
                               l3548 0C56                                 l2924 1C4A  
                               l2926 1C52                                 l3496 172C  
                               ?_log 00F8                                 STR_1 061C  
                               u3001 13C0                                 u3021 13E8  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u3150 0C54  
                               u2601 09E8                                 u2801 1292  
                               u2821 12BE                                 u2591 09CA  
                               u2880 18B6                                 u2888 18B8  
                               _TMR1 000FCE                                 _WPUB 000F61  
                      _EUSART1_Write 1AC0                                 _main 19C6  
                       ___ftpack@arg 0017                         ___ftpack@exp 001A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               log@x 00F8                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00AA                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 00DE                         ___param_bank 000010  
                       ___ftmul@sign 00DF                    ADC_ISR@ADC_Result 0007  
                              ??_log 003B                     ?_Battery_Convert 0001  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 1D6E  
                              ?_main 01DD                      __end_of___ftadd 0C32  
                    __end_of___ftdiv 149C                      _TMR1_StartTimer 1D84  
                    __end_of___ftmul 13B0                                _T1CON 000FCD  
                    __end_of___ftsub 1A72                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATB2 007C52                                _LATA4 007C4C  
                              _LATA6 007C4E                                _LATA7 007C4F  
                              _LATD4 007C64                                _LATD5 007C65  
                              _LATD6 007C66                                _LATD7 007C67  
                     __CFG_DEBUG$OFF 000000                                i2l138 1BDC  
                              i2l280 004C                                i2l282 0058  
                              i2l284 0064                                i2l288 0070  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0016  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 1BB0                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      ?_Current_Read 0001                     __end_of_TMR1_ISR 19C6  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 0022                                _frexp 1866  
                              _errno 00C4                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001B                                _putch 1D7A  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 1CB6  
                        _Battery_Adc 009C                                tablat 000FF5  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                     __CFG_PBADEN$ON 000000                      __initialization 1C12  
                        log@exponent 00FB           __end_of_EUSART1_Initialize 1B3C  
                       __end_of_main 1A22                     __end_of_Set_4051 1BB0  
                          ??_ADC_ISR 0005          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 003B                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                ?_EUSART1_Transmit_ISR 0001  
                     ??_Current_Read 0003                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 0017                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     __end_of___awtoft 1B78  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 1720                               _T1GCON 000FCC  
                             _RC1REG 000FAE                               _RC1STA 000FAB  
              __size_of_Battery_Read 0018                               i2l2700 1BD8  
                     __CFG_WDTEN$OFF 000000                               i2l2490 1B80  
                             i2l2810 092A                               i2l2802 08E6  
                             i2l2722 0640                               i2l2714 1C0E  
                             i2l2706 1BEC                               i2l2492 1B92  
                             i2l2820 096E                               i2l2740 06CA  
                             i2l2814 094C                               i2l2806 0908  
                             i2l2822 09AC                               i2l2734 069C  
                             i2l2662 19A4                               i2l2654 1988  
                             i2l2752 0726                               i2l2728 066E  
                             i2l2656 198C                               i2l2770 07B0  
                             i2l2746 06F8                               i2l2666 19B4  
                             i2l2658 1996                               i2l2764 0782  
                             i2l2790 0880                               i2l2774 07D8  
                             i2l2758 0754                               i2l2782 0810  
                             i2l2784 0866                               i2l2794 08A2  
                             i2l2778 0800                               i2l2786 086C  
                             i2l2798 08C4                               _RCREG1 000FAE  
                      ??_Temp_Filter 003B                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _TX1REG 000FAD  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                         _Temp_Fault 18F8                       __CFG_XINST$OFF 000000  
                             ___ftge 17D0              __end_of_TMR1_StartTimer 1D88  
                             ___wmul 1C6C                            ??___ftadd 00E6  
                     __CFG_STVREN$ON 000000                            ??___ftdiv 0029  
                          ??___ftmul 0038                            ??___ftsub 003B  
                             clear_0 1C18                               clear_1 1C24  
                             clear_2 1C30                   __size_of_Temp_Read 0018  
                             _printf 1C40                ___ftmul@f3_as_product 00DB  
                       _Battery_Read 1D32                         _Battery_Volt 007E  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    ??_EUSART1_Write 0017                      _eusart1RxBuffer 00B0  
      __size_of_INTERRUPT_Initialize 000C                __end_of_TMR1_CallBack 1D8A  
                    _eusart1TxBuffer 00B8                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 1CB6                     __end_oflog@coeff 061C  
                         __accesstop 0060              __end_of__initialization 1C36  
                         ___ftadd@f1 00E0                           ___ftadd@f2 00E3  
                         ___ftge@ff1 001D                           ___ftge@ff2 0020  
                 ?_SYSTEM_Initialize 0001                         eval_poly@res 00F5  
                      ___rparam_used 000001                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0026                           ___ftdiv@f3 002D  
                         ___awtoft@c 001F                           ___ftmul@f1 0032  
                         ___ftmul@f2 0035                           ___ftsub@f1 00EC  
                         ___ftsub@f2 00EF                  __end_of_Temp_Filter 0FD6  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0017                            ?_TMR1_ISR 0001  
                     _Current_Aquire 003F                        __end_of_frexp 18F8  
                      __end_of_putch 1D84               ??_EUSART1_Transmit_ISR 0001  
            _ADC_GetConversionResult 1D4A                     ??_Battery_Filter 003B  
        __end_of_EUSART1_Receive_ISR 1C12                        ?_Temp_Convert 0001  
                            ??_frexp 001C            __end_of_SYSTEM_Initialize 1CD0  
                            ??_putch 0018                        _eusart1RxHead 0043  
                      _eusart1TxHead 0045                        _eusart1RxTail 0044  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                      _eusart1TxTail 0046                   __size_of_eval_poly 00E2  
                    __CFG_PLLCFG$OFF 000000                    __end_of_Temp_Read 1D1A  
                          ?_Set_4051 0001                           __pnvCOMRAM 0047  
              Temp_Convert@steinhart 01DA                          ?_Temp_Fault 0001  
                 __CFG_CCP2MX$PORTC1 000000                 __end_of_Current_Read 1D32  
                        Temp_Fault@i 0027                  _TempBattery_Current 0178  
                            ?___ftge 001D                              ?___wmul 0017  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0003  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 0622  
                          ?___awtoft 001F                            ?___ftpack 0017  
                            ?_printf 0019              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 01D8               __size_of_Battery_Fault 00B0  
                    Temp_Fault@fault 0026                       Battery_Fault@i 0027  
                            _OSCCON2 000FD2                       ??_Temp_Convert 003B  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                           ??_Set_4051 0003  
                        _Temp_Filter 0E6C                          _Temp_Aquire 0040  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                      __size_of___ftge 0096  
                            ___ftadd 09B4                              ___ftdiv 13B0  
                    __size_of___wmul 0028                              ___ftmul 1282  
                            ___ftsub 1A22                         __psmallconst 0600  
          ??_ADC_GetConversionResult 0003                              __pcinit 1C12  
                         ??___awtoft 0022                           ??___ftpack 001C  
                  __end_of_eval_poly 157E                              __ramtop 0600  
                            __ptext0 19C6                              __ptext1 1C40  
                            __ptext2 1D7A                              __ptext3 1AC0  
                            __ptext4 18F8                              __ptext5 0C32  
                            __ptext6 1140                              __ptext7 1866  
                            __ptext8 149C                              __ptext9 1A22  
                    __size_of_printf 002C                            _T1CONbits 000FCD  
              _OSCILLATOR_Initialize 1D60                         __size_of_log 0142  
                __size_of_Temp_Fault 0070                   _EUSART1_Initialize 1B00  
           ??_PIN_MANAGER_Initialize 0017             __size_of_Battery_Convert 00DC  
         __size_of_SYSTEM_Initialize 001A                 end_of_initialization 1C36  
                ?_EUSART1_Initialize 0001                        __Lmediumconst 0000  
                      _Battery_Fault 1720                              printf@c 001D  
                            printf@f 0019                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                   Battery_Convert@x 00EE                 ??_EUSART1_Initialize 0017  
                _ADC_StartConversion 1CD0                  EUSART1_Write@txData 0017  
                        _Volt_Aquire 0041                       ?_Battery_Fault 0001  
              __size_of_Current_Read 0018                          ___ftdiv@exp 0030  
                        ___ftmul@exp 00DA                 ?_ADC_StartConversion 0001  
               __end_of_Temp_Convert 0E6C         __end_of_INTERRUPT_Initialize 1D7A  
                     __end_of___ftge 1866                       __end_of___wmul 1C94  
                  __size_of_TMR1_ISR 005E                       _ADC_Initialize 1CEA  
             ?_OSCILLATOR_Initialize 0001                       __end_of_printf 1C6C  
                start_initialization 1C12                           eval_poly@d 00EF  
                         eval_poly@n 00F1                           eval_poly@x 00EC  
    __size_of_PIN_MANAGER_Initialize 004E                         _Current_Read 1D1A  
                        __end_of_log 1282                          putch@txData 0018  
              __end_of_EUSART1_Write 1B00                           frexp@value 0017  
                  ??_Battery_Convert 003B                         ??_Temp_Fault 0026  
                  __size_of_Set_4051 0038                            _Temp_DegF 015A  
                   _PrevBattery_Volt 011E                            _Temp_Done 00C0  
                          _Temp_Read 1D02                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                             ??___ftge 0023  
                           ??___wmul 001B               __end_of_ADC_Initialize 1D02  
                           ?_ADC_ISR 0001               __size_of_TMR1_CallBack 0002  
                           ??_printf 001B                       _eusart1RxCount 0042  
                  __size_of___awtoft 003C                    __size_of___ftpack 00C6  
                          _Volt_Done 00C2                TMR1_ISR@CountCallBack 003B  
                        __pbssCOMRAM 003B        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 00DA                        __pcstackBANK1 01D2  
                 __end_of_Temp_Fault 1968                        _PrevTemp_DegF 013C  
                    ??_Battery_Fault 0026         __size_of_EUSART1_Receive_ISR 0030  
                       ?_Temp_Filter 0001                           ?_Temp_Read 0001  
             _PIN_MANAGER_Initialize 1A72                            __pintcode 0008  
                  _Temp_Convert$1676 01D2                    _Temp_Convert$1677 01D5  
                           ?___ftadd 00E0                             ?___ftdiv 0023  
                           ?___ftmul 0032                             ?___ftsub 00EC  
                       Temp_Filter@x 00EC                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 0009                             _BAUD1CON 000FB8  
                        __smallconst 0600             __size_of_TMR1_StartTimer 0004  
                          _eval_poly 149C                       __size_of_frexp 0092  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 1D6E  
                      _TMR1_CallBack 1D88              __size_of_Battery_Filter 016A  
                     ___wmul@product 001B                __size_of_Temp_Convert 023A  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 00A2                             i2u192_40 1982  
                           _PIR1bits 000F9E                      Battery_Filter@x 00EC  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                           _TMR1_ISR 1968                    ??_TMR1_Initialize 0017  
                   __size_of_ADC_ISR 0392                  _PrevBattery_Current 0100  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 0017  
                      ?_Battery_Read 0001                           ?_eval_poly 00EC  
                       _Temp_Convert 0C32                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0001                       ?_TMR1_CallBack 0001  
                           _Set_4051 1B78                            frexp@eptr 001A  
                           __Hrparam 0000                          ??_Temp_Read 0003  
                           _Temp_Adc 00C6                             __Lrparam 0000  
           ?_ADC_GetConversionResult 0001                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0017  
                   __size_of___ftadd 027E                     __size_of___ftdiv 00EC  
                   __size_of___ftmul 012E                     __size_of___ftsub 0050  
        __size_of_EUSART1_Initialize 003C                             ___awtoft 1B3C  
                           ___ftpack 165A                       ??_Battery_Read 0003  
                    _Battery_Convert 157E                   Battery_Fault@fault 0026  
                    _Battery_Current 0060                             __ptext10 0E6C  
                           __ptext11 1CB6                             __ptext20 17D0  
                           __ptext12 1C94                             __ptext21 157E  
                           __ptext13 1D84                           _T1GCONbits 000FCC  
                           __ptext30 1968                             __ptext22 13B0  
                           __ptext14 1A72                             __ptext31 1D02  
                           __ptext23 1B3C                             __ptext15 1D60  
                           __ptext40 1D4A                             __ptext32 1D88  
                           __ptext24 0FD6                             __ptext16 1D6E  
                           __ptext33 1D1A                             __ptext25 1C6C  
                           __ptext17 1B00                             __ptext34 1D32  
                           __ptext26 1282                             __ptext18 1CEA  
                           __ptext35 1BB0                             __ptext27 09B4  
                           __ptext19 1720                             __ptext36 1BE2  
                           __ptext28 165A                             __ptext37 0622  
                           __ptext38 1B78                             __ptext39 1CD0  
                  ??_TMR1_StartTimer 0017                        __size_of_main 005C  
                       _TmpTemp_DegF 01B4                 __size_of_Temp_Filter 016A  
                         _RC1STAbits 000FAB   __end_of_INTERRUPT_InterruptManager 00AA  
         _INTERRUPT_InterruptManager 0008                             main@argc 01DD  
                           main@argv 01DF                  _EUSART1_Receive_ISR 1BE2  
                           log@coeff 0601                           _INTCONbits 000FF2  
                        ??_eval_poly 00F3               ??_INTERRUPT_Initialize 0017  
                    ??_TMR1_CallBack 0001                             intlevel2 0000  
                     _Battery_Filter 0FD6                 ?_EUSART1_Receive_ISR 0001  
        __end_of_ADC_StartConversion 1CEA                     _TempBattery_Volt 0196  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 1D60  
       __end_of_EUSART1_Transmit_ISR 1BE2                     ??_ADC_Initialize 0017  
                           printf@ap 001B              __end_of_Battery_Convert 165A  
             __size_of_EUSART1_Write 0040                    __CFG_T3CMX$PORTC0 000000  
             __end_of_Battery_Filter 1140                ??_EUSART1_Receive_ISR 0001  
     __end_of_PIN_MANAGER_Initialize 1AC0                __end_of_Battery_Fault 17D0  
                  __CFG_FOSC$INTIO67 000000                 __end_of_Battery_Read 1D4A  
                    _TMR1_Initialize 1C94                     _ADC_Buffer_Point 003D  
                    Set_4051@Channel 0001  
