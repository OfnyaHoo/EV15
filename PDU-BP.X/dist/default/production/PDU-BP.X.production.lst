

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Jun 01 22:39:26 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	smallconst
    42  000600                     __psmallconst:
    43                           	opt stack 0
    44  000600  00                 	db	0
    45  000601                     _dpowers:
    46                           	opt stack 0
    47  000601  0001               	dw	1
    48  000603  000A               	dw	10
    49  000605  0064               	dw	100
    50  000607  03E8               	dw	1000
    51  000609  2710               	dw	10000
    52  00060B                     __end_of_dpowers:
    53                           	opt stack 0
    54  00060B                     STR_1:
    55  00060B  41                 	db	65	;'A'
    56  00060C  44                 	db	68	;'D'
    57  00060D  43                 	db	67	;'C'
    58  00060E  20                 	db	32
    59  00060F  56                 	db	86	;'V'
    60  000610  6F                 	db	111	;'o'
    61  000611  6C                 	db	108	;'l'
    62  000612  75                 	db	117	;'u'
    63  000613  6D                 	db	109	;'m'
    64  000614  65                 	db	101	;'e'
    65  000615  20                 	db	32
    66  000616  3D                 	db	61	;'='
    67  000617  20                 	db	32
    68  000618  25                 	db	37
    69  000619  64                 	db	100	;'d'
    70  00061A  00                 	db	0
    71                           
    72                           ; #config settings
    73  00061B  00                 	db	0	; dummy byte at the end
    74  0000                     
    75                           	psect	nvCOMRAM
    76  000051                     __pnvCOMRAM:
    77                           	opt stack 0
    78  000051                     _eusart1TxBufferRemaining:
    79                           	opt stack 0
    80  000051                     	ds	1
    81  0000                     _ANSELA	set	3896
    82  0000                     _ANSELB	set	3897
    83  0000                     _ANSELC	set	3898
    84  0000                     _ANSELD	set	3899
    85  0000                     _ANSELE	set	3900
    86  0000                     _TMR1	set	4046
    87  0000                     _ADCON0	set	4034
    88  0000                     _ADCON0bits	set	4034
    89  0000                     _ADCON1	set	4033
    90  0000                     _ADCON2	set	4032
    91  0000                     _ADRESH	set	4036
    92  0000                     _ADRESL	set	4035
    93  0000                     _BAUD1CON	set	4024
    94  0000                     _EEADR	set	4009
    95  0000                     _EECON1bits	set	4006
    96  0000                     _EECON2	set	4007
    97  0000                     _EEDATA	set	4008
    98  0000                     _INTCON2bits	set	4081
    99  0000                     _INTCONbits	set	4082
   100  0000                     _IPR1bits	set	3999
   101  0000                     _LATA	set	3977
   102  0000                     _LATB	set	3978
   103  0000                     _LATC	set	3979
   104  0000                     _LATD	set	3980
   105  0000                     _LATE	set	3981
   106  0000                     _OSCCON	set	4051
   107  0000                     _OSCCON2	set	4050
   108  0000                     _OSCTUNE	set	3995
   109  0000                     _PIE1bits	set	3997
   110  0000                     _PIR1bits	set	3998
   111  0000                     _RC1STA	set	4011
   112  0000                     _RC1STAbits	set	4011
   113  0000                     _RCONbits	set	4048
   114  0000                     _RCREG1	set	4014
   115  0000                     _SPBRG1	set	4015
   116  0000                     _SPBRGH1	set	4016
   117  0000                     _T1CON	set	4045
   118  0000                     _T1CONbits	set	4045
   119  0000                     _T1GCON	set	4044
   120  0000                     _T1GCONbits	set	4044
   121  0000                     _TABLAT	set	4085
   122  0000                     _TBLPTRH	set	4087
   123  0000                     _TBLPTRL	set	4086
   124  0000                     _TBLPTRU	set	4088
   125  0000                     _TMR1H	set	4047
   126  0000                     _TMR1L	set	4046
   127  0000                     _TRISA	set	3986
   128  0000                     _TRISB	set	3987
   129  0000                     _TRISC	set	3988
   130  0000                     _TRISD	set	3989
   131  0000                     _TRISE	set	3990
   132  0000                     _TX1STA	set	4012
   133  0000                     _TXREG1	set	4013
   134  0000                     _WPUB	set	3937
   135  0000                     _LATA4	set	31820
   136  0000                     _LATB0	set	31824
   137  0000                     _LATD4	set	31844
   138  0000                     _LATD5	set	31845
   139  0000                     _LATD6	set	31846
   140  0000                     _LATD7	set	31847
   141                           
   142                           	psect	cinit
   143  000DBC                     __pcinit:
   144                           	opt stack 0
   145  000DBC                     start_initialization:
   146                           	opt stack 0
   147  000DBC                     __initialization:
   148                           	opt stack 0
   149                           
   150                           ; Clear objects allocated to BANK0 (92 bytes)
   151  000DBC  EE00  F060         	lfsr	0,__pbssBANK0
   152  000DC0  0E5C               	movlw	92
   153  000DC2                     clear_0:
   154  000DC2  6AEE               	clrf	postinc0,c
   155  000DC4  06E8               	decf	wreg,f,c
   156  000DC6  E1FD               	bnz	clear_0
   157                           
   158                           ; Clear objects allocated to COMRAM (53 bytes)
   159  000DC8  EE00  F001         	lfsr	0,__pbssCOMRAM
   160  000DCC  0E35               	movlw	53
   161  000DCE                     clear_1:
   162  000DCE  6AEE               	clrf	postinc0,c
   163  000DD0  06E8               	decf	wreg,f,c
   164  000DD2  E1FD               	bnz	clear_1
   165  000DD4                     end_of_initialization:
   166                           	opt stack 0
   167  000DD4                     __end_of__initialization:
   168                           	opt stack 0
   169  000DD4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  000DD6  6EF8               	movwf	tblptru,c
   171  000DD8  0100               	movlb	0
   172  000DDA  EF5E  F005         	goto	_main	;jump to C main() function
   173                           tblptru	equ	0xFF8
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	bssCOMRAM
   178  000001                     __pbssCOMRAM:
   179                           	opt stack 0
   180  000001                     _CurrentADC:
   181                           	opt stack 0
   182  000001                     	ds	12
   183  00000D                     _Currentcomp:
   184                           	opt stack 0
   185  00000D                     	ds	12
   186  000019                     _data:
   187                           	opt stack 0
   188  000019                     	ds	12
   189  000025                     _eusart1TxBuffer:
   190                           	opt stack 0
   191  000025                     	ds	8
   192  00002D                     _readwhat:
   193                           	opt stack 0
   194  00002D                     	ds	2
   195  00002F                     _timer1ReloadVal:
   196                           	opt stack 0
   197  00002F                     	ds	2
   198  000031                     _eusart1RxCount:
   199                           	opt stack 0
   200  000031                     	ds	1
   201  000032                     _eusart1RxHead:
   202                           	opt stack 0
   203  000032                     	ds	1
   204  000033                     _eusart1RxTail:
   205                           	opt stack 0
   206  000033                     	ds	1
   207  000034                     _eusart1TxHead:
   208                           	opt stack 0
   209  000034                     	ds	1
   210  000035                     _eusart1TxTail:
   211                           	opt stack 0
   212  000035                     	ds	1
   213                           tblptru	equ	0xFF8
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           
   217                           	psect	bssBANK0
   218  000060                     __pbssBANK0:
   219                           	opt stack 0
   220  000060                     _registers:
   221                           	opt stack 0
   222  000060                     	ds	48
   223  000090                     _eusart1RxBuffer:
   224                           	opt stack 0
   225  000090                     	ds	32
   226  0000B0                     _Current:
   227                           	opt stack 0
   228  0000B0                     	ds	12
   229                           tblptru	equ	0xFF8
   230                           postinc0	equ	0xFEE
   231                           wreg	equ	0xFE8
   232                           
   233                           	psect	cstackBANK0
   234  0000BC                     __pcstackBANK0:
   235                           	opt stack 0
   236  0000BC                     ?_printf:
   237                           	opt stack 0
   238  0000BC                     Clear595@i:
   239                           	opt stack 0
   240  0000BC                     printf@f:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x0
   244  0000BC                     	ds	2
   245  0000BE                     printf@ap:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x2
   249  0000BE                     	ds	2
   250  0000C0                     printf@flag:
   251                           	opt stack 0
   252                           
   253                           ; 1 bytes @ 0x4
   254  0000C0                     	ds	1
   255  0000C1                     printf@prec:
   256                           	opt stack 0
   257                           
   258                           ; 1 bytes @ 0x5
   259  0000C1                     	ds	1
   260  0000C2                     printf@val:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x6
   264  0000C2                     	ds	2
   265  0000C4                     printf@c:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x8
   269  0000C4                     	ds	1
   270                           tblptru	equ	0xFF8
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	cstackCOMRAM
   275  000036                     __pcstackCOMRAM:
   276                           	opt stack 0
   277  000036                     ??_INTERRUPT_InterruptManager:
   278  000036                     
   279                           ; 1 bytes @ 0x0
   280  000036                     	ds	14
   281  000044                     ?___lwdiv:
   282                           	opt stack 0
   283  000044                     EUSART1_Write@txData:
   284                           	opt stack 0
   285  000044                     DATAEE_ReadByte@bAdd:
   286                           	opt stack 0
   287  000044                     SetPin595@Reg:
   288                           	opt stack 0
   289  000044                     ___lwdiv@dividend:
   290                           	opt stack 0
   291  000044                     Delay@wait:
   292                           	opt stack 0
   293                           
   294                           ; 4 bytes @ 0xE
   295  000044                     	ds	1
   296  000045                     ??_ComputeStorageData:
   297  000045                     putch@txData:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0xF
   301  000045                     	ds	1
   302  000046                     SetPin595@pin:
   303                           	opt stack 0
   304  000046                     ___lwdiv@divisor:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x10
   308  000046                     	ds	1
   309  000047                     ComputeStorageData@i:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x11
   313  000047                     	ds	1
   314  000048                     ??_Delay:
   315  000048                     ___lwdiv@counter:
   316                           	opt stack 0
   317  000048                     SetPin595@value:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x12
   321  000048                     	ds	1
   322  000049                     ___lwdiv@quotient:
   323                           	opt stack 0
   324  000049                     Delay@i:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0x13
   328  000049                     	ds	1
   329  00004A                     ??_SetPin595:
   330                           
   331                           ; 0 bytes @ 0x14
   332  00004A                     	ds	1
   333  00004B                     ?___lwmod:
   334                           	opt stack 0
   335  00004B                     ___lwmod@dividend:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x15
   339  00004B                     	ds	2
   340  00004D                     writeRegisters@val:
   341                           	opt stack 0
   342  00004D                     ___lwmod@divisor:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x17
   346  00004D                     	ds	1
   347  00004E                     EnableSlavePower@onof:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x18
   351  00004E                     	ds	1
   352  00004F                     ___lwmod@counter:
   353                           	opt stack 0
   354  00004F                     writeRegisters@i:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x19
   358  00004F                     	ds	1
   359  000050                     ??_printf:
   360  000050                     EnableSlavePower@slave:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x1A
   364  000050                     	ds	1
   365  000051                     tblptru	equ	0xFF8
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           
   369                           ; 0 bytes @ 0x1B
   370 ;;
   371 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   372 ;;
   373 ;; *************** function _main *****************
   374 ;; Defined at:
   375 ;;		line 8 in file "main.c"
   376 ;; Parameters:    Size  Location     Type
   377 ;;		None
   378 ;; Auto vars:     Size  Location     Type
   379 ;;		None
   380 ;; Return value:  Size  Location     Type
   381 ;;		None               void
   382 ;; Registers used:
   383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   384 ;; Tracked objects:
   385 ;;		On entry : 0/0
   386 ;;		On exit  : 0/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   389 ;;      Params:         0       0       0       0       0       0       0
   390 ;;      Locals:         0       0       0       0       0       0       0
   391 ;;      Temps:          0       0       0       0       0       0       0
   392 ;;      Totals:         0       0       0       0       0       0       0
   393 ;;Total ram usage:        0 bytes
   394 ;; Hardware stack levels required when called:    7
   395 ;; This function calls:
   396 ;;		_Delay
   397 ;;		_PDUStartup
   398 ;;		_SYSTEM_Initialize
   399 ;;		_printf
   400 ;; This function is called by:
   401 ;;		Startup code after reset
   402 ;; This function uses a non-reentrant model
   403 ;;
   404                           
   405                           	psect	text0
   406  000ABC                     __ptext0:
   407                           	opt stack 0
   408  000ABC                     _main:
   409                           	opt stack 24
   410                           
   411                           ;main.c: 11: SYSTEM_Initialize();
   412                           
   413                           ;incstack = 0
   414  000ABC  ECFB  F006         	call	_SYSTEM_Initialize	;wreg free
   415                           
   416                           ;main.c: 12: PDUStartup();
   417  000AC0  EC8A  F005         	call	_PDUStartup	;wreg free
   418                           
   419                           ;main.c: 30: (INTCONbits.GIE = 1);
   420  000AC4  8EF2               	bsf	intcon,7,c	;volatile
   421                           
   422                           ;main.c: 33: (INTCONbits.PEIE = 1);
   423  000AC6  8CF2               	bsf	intcon,6,c	;volatile
   424  000AC8  D000               	goto	l2208
   425  000ACA                     l2208:
   426                           
   427                           ;main.c: 42: {
   428                           ;main.c: 43: Delay(500);
   429  000ACA  0EF4               	movlw	244
   430  000ACC  6E44               	movwf	Delay@wait,c
   431  000ACE  0E01               	movlw	1
   432  000AD0  6E45               	movwf	Delay@wait+1,c
   433  000AD2  0E00               	movlw	0
   434  000AD4  6E46               	movwf	Delay@wait+2,c
   435  000AD6  0E00               	movlw	0
   436  000AD8  6E47               	movwf	Delay@wait+3,c
   437  000ADA  EC28  F006         	call	_Delay	;wreg free
   438  000ADE  D000               	goto	l2210
   439  000AE0                     l2210:
   440  000AE0  9889               	bcf	3977,4,c	;volatile
   441  000AE2  D000               	goto	l2212
   442  000AE4                     l2212:
   443                           
   444                           ;main.c: 45: Delay(500);
   445  000AE4  0EF4               	movlw	244
   446  000AE6  6E44               	movwf	Delay@wait,c
   447  000AE8  0E01               	movlw	1
   448  000AEA  6E45               	movwf	Delay@wait+1,c
   449  000AEC  0E00               	movlw	0
   450  000AEE  6E46               	movwf	Delay@wait+2,c
   451  000AF0  0E00               	movlw	0
   452  000AF2  6E47               	movwf	Delay@wait+3,c
   453  000AF4  EC28  F006         	call	_Delay	;wreg free
   454  000AF8  D000               	goto	l2214
   455  000AFA                     l2214:
   456  000AFA  9889               	bcf	3977,4,c	;volatile
   457  000AFC  D000               	goto	l2216
   458  000AFE                     l2216:
   459                           
   460                           ;main.c: 47: printf("ADC Volume = %d");
   461  000AFE  0E0B               	movlw	low STR_1
   462  000B00  0100               	movlb	0	; () banked
   463  000B02  6FBC               	movwf	printf@f& (0+255),b
   464  000B04  0E06               	movlw	high STR_1
   465  000B06  0100               	movlb	0	; () banked
   466  000B08  6FBD               	movwf	(printf@f+1)& (0+255),b
   467  000B0A  EC0E  F003         	call	_printf	;wreg free
   468  000B0E  D7DD               	goto	l2208
   469  000B10  EF4F  F000         	goto	start
   470  000B14                     __end_of_main:
   471                           	opt stack 0
   472                           tblptru	equ	0xFF8
   473                           intcon	equ	0xFF2
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           
   477 ;; *************** function _printf *****************
   478 ;; Defined at:
   479 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;  f               2    0[BANK0 ] PTR const unsigned char 
   482 ;;		 -> STR_1(16), 
   483 ;; Auto vars:     Size  Location     Type
   484 ;;  tmpval          4    0        struct .
   485 ;;  cp              3    0        PTR const unsigned char 
   486 ;;  val             2    6[BANK0 ] unsigned int 
   487 ;;  ap              2    2[BANK0 ] PTR void [1]
   488 ;;		 -> ?_printf(2), 
   489 ;;  len             2    0        unsigned int 
   490 ;;  c               1    8[BANK0 ] char 
   491 ;;  prec            1    5[BANK0 ] char 
   492 ;;  flag            1    4[BANK0 ] unsigned char 
   493 ;; Return value:  Size  Location     Type
   494 ;;                  2    0[BANK0 ] int 
   495 ;; Registers used:
   496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   502 ;;      Params:         0       2       0       0       0       0       0
   503 ;;      Locals:         0       7       0       0       0       0       0
   504 ;;      Temps:          1       0       0       0       0       0       0
   505 ;;      Totals:         1       9       0       0       0       0       0
   506 ;;Total ram usage:       10 bytes
   507 ;; Hardware stack levels used:    1
   508 ;; Hardware stack levels required when called:    4
   509 ;; This function calls:
   510 ;;		___lwdiv
   511 ;;		___lwmod
   512 ;;		_putch
   513 ;; This function is called by:
   514 ;;		_main
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           	psect	text1
   519  00061C                     __ptext1:
   520                           	opt stack 0
   521  00061C                     _printf:
   522                           	opt stack 26
   523                           
   524                           ;doprnt.c: 466: va_list ap;
   525                           ;doprnt.c: 499: signed char c;
   526                           ;doprnt.c: 506: signed char prec;
   527                           ;doprnt.c: 508: unsigned char flag;
   528                           ;doprnt.c: 523: union {
   529                           ;doprnt.c: 524: unsigned long vd;
   530                           ;doprnt.c: 525: double integ;
   531                           ;doprnt.c: 526: } tmpval;
   532                           ;doprnt.c: 528: unsigned int val;
   533                           ;doprnt.c: 529: unsigned len;
   534                           ;doprnt.c: 530: const char * cp;
   535                           ;doprnt.c: 533: *ap = __va_start();
   536                           
   537                           ;incstack = 0
   538  00061C  0EBE               	movlw	low (?_printf+2)
   539  00061E  0100               	movlb	0	; () banked
   540  000620  6FBE               	movwf	printf@ap& (0+255),b
   541  000622  0E00               	movlw	high (?_printf+2)
   542  000624  0100               	movlb	0	; () banked
   543  000626  6FBF               	movwf	(printf@ap+1)& (0+255),b
   544                           
   545                           ;doprnt.c: 536: while(c = *f++) {
   546  000628  D09F               	goto	l2166
   547  00062A                     l2120:
   548                           
   549                           ; BSR set to: 0
   550                           ;doprnt.c: 538: if(c != '%')
   551  00062A  0E25               	movlw	37
   552  00062C  0100               	movlb	0	; () banked
   553  00062E  19C4               	xorwf	printf@c& (0+255),w,b
   554  000630  B4D8               	btfsc	status,2,c
   555  000632  D005               	goto	l2124
   556                           
   557                           ; BSR set to: 0
   558                           ;doprnt.c: 540: {
   559                           ;doprnt.c: 541: (putch(c) );
   560  000634  0100               	movlb	0	; () banked
   561  000636  51C4               	movf	printf@c& (0+255),w,b
   562  000638  EC18  F007         	call	_putch
   563                           
   564                           ;doprnt.c: 542: continue;
   565  00063C  D095               	goto	l2166
   566  00063E                     l2124:
   567                           
   568                           ;doprnt.c: 543: }
   569                           ;doprnt.c: 548: flag = 0;
   570  00063E  0E00               	movlw	0
   571  000640  0100               	movlb	0	; () banked
   572  000642  6FC0               	movwf	printf@flag& (0+255),b
   573                           
   574                           ;doprnt.c: 635: switch(c = *f++) {
   575  000644  D004               	goto	l2128
   576                           
   577                           ; BSR set to: 0
   578                           ;doprnt.c: 638: goto alldone;
   579                           
   580                           ;doprnt.c: 637: case 0:
   581  000646  0012               	return	
   582                           
   583                           ; BSR set to: 0
   584                           ;doprnt.c: 698: case 'i':
   585                           ;doprnt.c: 699: break;
   586                           
   587                           ; BSR set to: 0
   588                           
   589                           ;doprnt.c: 697: case 'd':
   590  000648  D017               	goto	l2130
   591                           
   592                           ; BSR set to: 0
   593                           ;doprnt.c: 813: continue;
   594                           
   595                           ;doprnt.c: 802: default:
   596  00064A  D08E               	goto	l2166
   597                           
   598                           ; BSR set to: 0
   599                           ;doprnt.c: 822: }
   600  00064C  D015               	goto	l2130
   601  00064E                     l2128:
   602                           
   603                           ; BSR set to: 0
   604  00064E  C0BC  FFF6         	movff	printf@f,tblptrl
   605  000652  C0BD  FFF7         	movff	printf@f+1,tblptrh
   606  000656  0100               	movlb	0	; () banked
   607  000658  4BBC               	infsnz	printf@f& (0+255),f,b
   608  00065A  2BBD               	incf	(printf@f+1)& (0+255),f,b
   609  00065C                     	if	0	;tblptru may be non-zero
   610  00065C                     	endif
   611  00065C                     	if	0	;tblptru may be non-zero
   612  00065C                     	endif
   613  00065C  0008               	tblrd		*
   614  00065E  CFF5 F0C4          	movff	tablat,printf@c
   615  000662  0100               	movlb	0	; () banked
   616  000664  51C4               	movf	printf@c& (0+255),w,b
   617                           
   618                           ; Switch size 1, requested type "space"
   619                           ; Number of cases is 3, Range of values is 0 to 105
   620                           ; switch strategies available:
   621                           ; Name         Instructions Cycles
   622                           ; simple_byte           10     6 (average)
   623                           ;	Chosen strategy is simple_byte
   624  000666  0A00               	xorlw	0	; case 0
   625  000668  B4D8               	btfsc	status,2,c
   626  00066A  0012               	return	
   627  00066C  0A64               	xorlw	100	; case 100
   628  00066E  B4D8               	btfsc	status,2,c
   629  000670  D003               	goto	l2130
   630  000672  0A0D               	xorlw	13	; case 105
   631  000674  A4D8               	btfss	status,2,c
   632  000676  D078               	goto	l2166
   633  000678                     l2130:
   634                           
   635                           ; BSR set to: 0
   636                           ;doprnt.c: 1253: {
   637                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   638  000678  C0BE  FFD9         	movff	printf@ap,fsr2l
   639  00067C  C0BF  FFDA         	movff	printf@ap+1,fsr2h
   640  000680  CFDE F0C2          	movff	postinc2,printf@val
   641  000684  CFDD F0C3          	movff	postdec2,printf@val+1
   642                           
   643                           ; BSR set to: 0
   644  000688  0E02               	movlw	2
   645  00068A  0100               	movlb	0	; () banked
   646  00068C  27BE               	addwf	printf@ap& (0+255),f,b
   647  00068E  0E00               	movlw	0
   648  000690  23BF               	addwfc	(printf@ap+1)& (0+255),f,b
   649                           
   650                           ; BSR set to: 0
   651                           ;doprnt.c: 1261: if((int)val < 0) {
   652  000692  0100               	movlb	0	; () banked
   653  000694  AFC3               	btfss	(printf@val+1)& (0+255),7,b
   654  000696  D009               	goto	l2140
   655                           
   656                           ; BSR set to: 0
   657                           ;doprnt.c: 1262: flag |= 0x03;
   658  000698  0E03               	movlw	3
   659  00069A  0100               	movlb	0	; () banked
   660  00069C  13C0               	iorwf	printf@flag& (0+255),f,b
   661                           
   662                           ; BSR set to: 0
   663                           ;doprnt.c: 1263: val = -val;
   664  00069E  0100               	movlb	0	; () banked
   665  0006A0  6DC2               	negf	printf@val& (0+255),b
   666  0006A2  1FC3               	comf	(printf@val+1)& (0+255),f,b
   667  0006A4  B0D8               	btfsc	status,0,c
   668  0006A6  2BC3               	incf	(printf@val+1)& (0+255),f,b
   669  0006A8  D000               	goto	l2140
   670  0006AA                     l2140:
   671                           
   672                           ; BSR set to: 0
   673                           ;doprnt.c: 1264: }
   674                           ;doprnt.c: 1266: }
   675                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   676  0006AA  0E01               	movlw	1
   677  0006AC  0100               	movlb	0	; () banked
   678  0006AE  6FC4               	movwf	printf@c& (0+255),b
   679  0006B0                     l2142:
   680                           
   681                           ; BSR set to: 0
   682  0006B0  0E05               	movlw	5
   683  0006B2  0100               	movlb	0	; () banked
   684  0006B4  19C4               	xorwf	printf@c& (0+255),w,b
   685  0006B6  B4D8               	btfsc	status,2,c
   686  0006B8  D01A               	goto	l2154
   687  0006BA  D001               	goto	l2146
   688                           
   689                           ; BSR set to: 0
   690  0006BC  D018               	goto	l2154
   691  0006BE                     l2146:
   692                           
   693                           ; BSR set to: 0
   694                           ;doprnt.c: 1306: if(val < dpowers[c])
   695  0006BE  0100               	movlb	0	; () banked
   696  0006C0  51C4               	movf	printf@c& (0+255),w,b
   697  0006C2  0D02               	mullw	2
   698  0006C4  0E01               	movlw	low _dpowers
   699  0006C6  24F3               	addwf	prodl,w,c
   700  0006C8  6EF6               	movwf	tblptrl,c
   701  0006CA  0E06               	movlw	high _dpowers
   702  0006CC  20F4               	addwfc	prodh,w,c
   703  0006CE  6EF7               	movwf	tblptrh,c
   704  0006D0                     	if	0	;There are less than 3 active tblptr bytes
   705  0006D0                     	endif
   706  0006D0  0009               	tblrd		*+
   707  0006D2  50F5               	movf	tablat,w,c
   708  0006D4  0100               	movlb	0	; () banked
   709  0006D6  5DC2               	subwf	printf@val& (0+255),w,b
   710  0006D8  0009               	tblrd		*+
   711  0006DA  50F5               	movf	tablat,w,c
   712  0006DC  0100               	movlb	0	; () banked
   713  0006DE  59C3               	subwfb	(printf@val+1)& (0+255),w,b
   714  0006E0  A0D8               	btfss	status,0,c
   715  0006E2  D005               	goto	l2154
   716  0006E4  D001               	goto	l2150
   717                           
   718                           ; BSR set to: 0
   719                           ;doprnt.c: 1307: break;
   720  0006E6  D003               	goto	l2154
   721  0006E8                     l2150:
   722                           
   723                           ; BSR set to: 0
   724  0006E8  0100               	movlb	0	; () banked
   725  0006EA  2BC4               	incf	printf@c& (0+255),f,b
   726  0006EC  D7E1               	goto	l2142
   727  0006EE                     l2154:
   728                           
   729                           ; BSR set to: 0
   730                           ;doprnt.c: 1422: {
   731                           ;doprnt.c: 1438: if(flag & 0x03)
   732  0006EE  C0C0  F050         	movff	printf@flag,??_printf
   733  0006F2  0E03               	movlw	3
   734  0006F4  1650               	andwf	??_printf,f,c
   735  0006F6  B4D8               	btfsc	status,2,c
   736  0006F8  D004               	goto	l2158
   737                           
   738                           ; BSR set to: 0
   739                           ;doprnt.c: 1439: (putch('-') );
   740  0006FA  0E2D               	movlw	45
   741  0006FC  EC18  F007         	call	_putch
   742  000700  D000               	goto	l2158
   743  000702                     l2158:
   744                           
   745                           ;doprnt.c: 1469: }
   746                           ;doprnt.c: 1472: prec = c;
   747  000702  C0C4  F0C1         	movff	printf@c,printf@prec
   748                           
   749                           ;doprnt.c: 1474: while(prec--) {
   750  000706  D028               	goto	l2164
   751  000708                     l2160:
   752                           
   753                           ;doprnt.c: 1478: {
   754                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   755  000708  0100               	movlb	0	; () banked
   756  00070A  51C1               	movf	printf@prec& (0+255),w,b
   757  00070C  0D02               	mullw	2
   758  00070E  0E01               	movlw	low _dpowers
   759  000710  24F3               	addwf	prodl,w,c
   760  000712  6EF6               	movwf	tblptrl,c
   761  000714  0E06               	movlw	high _dpowers
   762  000716  20F4               	addwfc	prodh,w,c
   763  000718  6EF7               	movwf	tblptrh,c
   764  00071A                     	if	0	;There are less than 3 active tblptr bytes
   765  00071A                     	endif
   766  00071A  0009               	tblrd		*+
   767  00071C  CFF5 F046          	movff	tablat,___lwdiv@divisor
   768  000720  000A               	tblrd		*-
   769  000722  CFF5 F047          	movff	tablat,___lwdiv@divisor+1
   770  000726  C0C2  F044         	movff	printf@val,___lwdiv@dividend
   771  00072A  C0C3  F045         	movff	printf@val+1,___lwdiv@dividend+1
   772  00072E  EC30  F005         	call	___lwdiv	;wreg free
   773  000732  C044  F04B         	movff	?___lwdiv,___lwmod@dividend
   774  000736  C045  F04C         	movff	?___lwdiv+1,___lwmod@dividend+1
   775  00073A  0E00               	movlw	0
   776  00073C  6E4E               	movwf	___lwmod@divisor+1,c
   777  00073E  0E0A               	movlw	10
   778  000740  6E4D               	movwf	___lwmod@divisor,c
   779  000742  EC02  F006         	call	___lwmod	;wreg free
   780  000746  504B               	movf	?___lwmod,w,c
   781  000748  0F30               	addlw	48
   782  00074A  0100               	movlb	0	; () banked
   783  00074C  6FC4               	movwf	printf@c& (0+255),b
   784                           
   785                           ; BSR set to: 0
   786                           ;doprnt.c: 1523: }
   787                           ;doprnt.c: 1524: (putch(c) );
   788  00074E  0100               	movlb	0	; () banked
   789  000750  51C4               	movf	printf@c& (0+255),w,b
   790  000752  EC18  F007         	call	_putch
   791  000756  D000               	goto	l2164
   792  000758                     l2164:
   793  000758  0100               	movlb	0	; () banked
   794  00075A  07C1               	decf	printf@prec& (0+255),f,b
   795  00075C  0100               	movlb	0	; () banked
   796  00075E  29C1               	incf	printf@prec& (0+255),w,b
   797  000760  B4D8               	btfsc	status,2,c
   798  000762  D002               	goto	l2166
   799  000764  D7D1               	goto	l2160
   800                           
   801                           ; BSR set to: 0
   802  000766  D000               	goto	l2166
   803  000768                     l2166:
   804  000768  C0BC  FFF6         	movff	printf@f,tblptrl
   805  00076C  C0BD  FFF7         	movff	printf@f+1,tblptrh
   806  000770  0100               	movlb	0	; () banked
   807  000772  4BBC               	infsnz	printf@f& (0+255),f,b
   808  000774  2BBD               	incf	(printf@f+1)& (0+255),f,b
   809  000776                     	if	0	;tblptru may be non-zero
   810  000776                     	endif
   811  000776                     	if	0	;tblptru may be non-zero
   812  000776                     	endif
   813  000776  0008               	tblrd		*
   814  000778  CFF5 F0C4          	movff	tablat,printf@c
   815  00077C  0100               	movlb	0	; () banked
   816  00077E  51C4               	movf	printf@c& (0+255),w,b
   817  000780  B4D8               	btfsc	status,2,c
   818  000782  0012               	return	
   819  000784  D752               	goto	l2120
   820                           
   821                           ; BSR set to: 0
   822  000786  0012               	return	
   823                           
   824                           ; BSR set to: 0
   825                           
   826                           ; BSR set to: 0
   827                           ;doprnt.c: 1540: return 0;
   828                           ;	Return value of _printf is never used
   829                           
   830                           ;doprnt.c: 1525: }
   831                           ;doprnt.c: 1533: }
   832                           ;doprnt.c: 1535: alldone:
   833  000788  0012               	return		;funcret
   834  00078A                     __end_of_printf:
   835                           	opt stack 0
   836                           tblptru	equ	0xFF8
   837                           tblptrh	equ	0xFF7
   838                           tblptrl	equ	0xFF6
   839                           tablat	equ	0xFF5
   840                           prodh	equ	0xFF4
   841                           prodl	equ	0xFF3
   842                           intcon	equ	0xFF2
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postinc2	equ	0xFDE
   846                           postdec2	equ	0xFDD
   847                           fsr2h	equ	0xFDA
   848                           fsr2l	equ	0xFD9
   849                           status	equ	0xFD8
   850                           
   851 ;; *************** function _putch *****************
   852 ;; Defined at:
   853 ;;		line 168 in file "mcc_generated_files/eusart1.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  txData          1    wreg     unsigned char 
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  txData          1   15[COMRAM] unsigned char 
   858 ;; Return value:  Size  Location     Type
   859 ;;		None               void
   860 ;; Registers used:
   861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   867 ;;      Params:         0       0       0       0       0       0       0
   868 ;;      Locals:         1       0       0       0       0       0       0
   869 ;;      Temps:          0       0       0       0       0       0       0
   870 ;;      Totals:         1       0       0       0       0       0       0
   871 ;;Total ram usage:        1 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; Hardware stack levels required when called:    3
   874 ;; This function calls:
   875 ;;		_EUSART1_Write
   876 ;; This function is called by:
   877 ;;		_printf
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text2
   882  000E30                     __ptext2:
   883                           	opt stack 0
   884  000E30                     _putch:
   885                           	opt stack 26
   886                           
   887                           ; BSR set to: 0
   888                           ;incstack = 0
   889                           ;putch@txData stored from wreg
   890  000E30  6E45               	movwf	putch@txData,c
   891                           
   892                           ;eusart1.c: 170: EUSART1_Write(txData);
   893  000E32  5045               	movf	putch@txData,w,c
   894  000E34  EC6F  F006         	call	_EUSART1_Write
   895  000E38  0012               	return		;funcret
   896  000E3A                     __end_of_putch:
   897                           	opt stack 0
   898                           tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           prodh	equ	0xFF4
   903                           prodl	equ	0xFF3
   904                           intcon	equ	0xFF2
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postinc2	equ	0xFDE
   908                           postdec2	equ	0xFDD
   909                           fsr2h	equ	0xFDA
   910                           fsr2l	equ	0xFD9
   911                           status	equ	0xFD8
   912                           
   913 ;; *************** function _EUSART1_Write *****************
   914 ;; Defined at:
   915 ;;		line 140 in file "mcc_generated_files/eusart1.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;  txData          1    wreg     unsigned char 
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  txData          1   14[COMRAM] unsigned char 
   920 ;; Return value:  Size  Location     Type
   921 ;;		None               void
   922 ;; Registers used:
   923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   929 ;;      Params:         0       0       0       0       0       0       0
   930 ;;      Locals:         1       0       0       0       0       0       0
   931 ;;      Temps:          0       0       0       0       0       0       0
   932 ;;      Totals:         1       0       0       0       0       0       0
   933 ;;Total ram usage:        1 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    2
   936 ;; This function calls:
   937 ;;		Nothing
   938 ;; This function is called by:
   939 ;;		_putch
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text3
   944  000CDE                     __ptext3:
   945                           	opt stack 0
   946  000CDE                     _EUSART1_Write:
   947                           	opt stack 26
   948                           
   949                           ;incstack = 0
   950                           ;EUSART1_Write@txData stored from wreg
   951  000CDE  6E44               	movwf	EUSART1_Write@txData,c
   952                           
   953                           ;eusart1.c: 142: while(0 == eusart1TxBufferRemaining)
   954  000CE0  D000               	goto	l2032
   955  000CE2                     l2032:
   956  000CE2  5051               	movf	_eusart1TxBufferRemaining,w,c	;volatile
   957  000CE4  B4D8               	btfsc	status,2,c
   958  000CE6  D7FD               	goto	l2032
   959                           
   960                           ;eusart1.c: 144: }
   961                           ;eusart1.c: 146: if(0 == PIE1bits.TX1IE)
   962  000CE8  B89D               	btfsc	3997,4,c	;volatile
   963  000CEA  D003               	goto	l87
   964                           
   965                           ;eusart1.c: 147: {
   966                           ;eusart1.c: 148: TXREG1 = txData;
   967  000CEC  C044  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
   968                           
   969                           ;eusart1.c: 149: }
   970  000CF0  D014               	goto	l2046
   971  000CF2                     l87:
   972                           
   973                           ;eusart1.c: 150: else
   974                           ;eusart1.c: 151: {
   975                           ;eusart1.c: 152: PIE1bits.TX1IE = 0;
   976  000CF2  989D               	bcf	3997,4,c	;volatile
   977                           
   978                           ;eusart1.c: 153: eusart1TxBuffer[eusart1TxHead++] = txData;
   979  000CF4  5034               	movf	_eusart1TxHead,w,c
   980  000CF6  0D01               	mullw	1
   981  000CF8  0E25               	movlw	low _eusart1TxBuffer
   982  000CFA  24F3               	addwf	prodl,w,c
   983  000CFC  6ED9               	movwf	fsr2l,c
   984  000CFE  0E00               	movlw	high _eusart1TxBuffer
   985  000D00  20F4               	addwfc	prodh,w,c
   986  000D02  6EDA               	movwf	fsr2h,c
   987  000D04  C044  FFDF         	movff	EUSART1_Write@txData,indf2
   988  000D08  2A34               	incf	_eusart1TxHead,f,c
   989                           
   990                           ;eusart1.c: 154: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
   991  000D0A  0E07               	movlw	7
   992  000D0C  6434               	cpfsgt	_eusart1TxHead,c
   993  000D0E  D003               	goto	l2044
   994                           
   995                           ;eusart1.c: 155: {
   996                           ;eusart1.c: 156: eusart1TxHead = 0;
   997  000D10  0E00               	movlw	0
   998  000D12  6E34               	movwf	_eusart1TxHead,c
   999  000D14  D000               	goto	l2044
  1000  000D16                     l2044:
  1001                           
  1002                           ;eusart1.c: 157: }
  1003                           ;eusart1.c: 158: eusart1TxBufferRemaining--;
  1004  000D16  0651               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1005  000D18  D000               	goto	l2046
  1006  000D1A                     l2046:
  1007                           
  1008                           ;eusart1.c: 159: }
  1009                           ;eusart1.c: 160: PIE1bits.TX1IE = 1;
  1010  000D1A  889D               	bsf	3997,4,c	;volatile
  1011  000D1C  0012               	return		;funcret
  1012  000D1E                     __end_of_EUSART1_Write:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           prodh	equ	0xFF4
  1019                           prodl	equ	0xFF3
  1020                           intcon	equ	0xFF2
  1021                           postinc0	equ	0xFEE
  1022                           wreg	equ	0xFE8
  1023                           indf2	equ	0xFDF
  1024                           postinc2	equ	0xFDE
  1025                           postdec2	equ	0xFDD
  1026                           fsr2h	equ	0xFDA
  1027                           fsr2l	equ	0xFD9
  1028                           status	equ	0xFD8
  1029                           
  1030 ;; *************** function ___lwmod *****************
  1031 ;; Defined at:
  1032 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  dividend        2   21[COMRAM] unsigned int 
  1035 ;;  divisor         2   23[COMRAM] unsigned int 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  counter         1   25[COMRAM] unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  2   21[COMRAM] unsigned int 
  1040 ;; Registers used:
  1041 ;;		wreg, status,2, status,0
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1047 ;;      Params:         4       0       0       0       0       0       0
  1048 ;;      Locals:         1       0       0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0
  1050 ;;      Totals:         5       0       0       0       0       0       0
  1051 ;;Total ram usage:        5 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    2
  1054 ;; This function calls:
  1055 ;;		Nothing
  1056 ;; This function is called by:
  1057 ;;		_printf
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text4
  1062  000C04                     __ptext4:
  1063                           	opt stack 0
  1064  000C04                     ___lwmod:
  1065                           	opt stack 27
  1066                           
  1067                           ;incstack = 0
  1068  000C04  504D               	movf	___lwmod@divisor,w,c
  1069  000C06  104E               	iorwf	___lwmod@divisor+1,w,c
  1070  000C08  B4D8               	btfsc	status,2,c
  1071  000C0A  D01D               	goto	l1041
  1072  000C0C  0E01               	movlw	1
  1073  000C0E  6E4F               	movwf	___lwmod@counter,c
  1074  000C10  D005               	goto	l2106
  1075  000C12                     l2104:
  1076  000C12  90D8               	bcf	status,0,c
  1077  000C14  364D               	rlcf	___lwmod@divisor,f,c
  1078  000C16  364E               	rlcf	___lwmod@divisor+1,f,c
  1079  000C18  2A4F               	incf	___lwmod@counter,f,c
  1080  000C1A  D000               	goto	l2106
  1081  000C1C                     l2106:
  1082  000C1C  BE4E               	btfsc	___lwmod@divisor+1,7,c
  1083  000C1E  D002               	goto	l2108
  1084  000C20  D7F8               	goto	l2104
  1085  000C22  D000               	goto	l2108
  1086  000C24                     l2108:
  1087  000C24  504D               	movf	___lwmod@divisor,w,c
  1088  000C26  5C4B               	subwf	___lwmod@dividend,w,c
  1089  000C28  504E               	movf	___lwmod@divisor+1,w,c
  1090  000C2A  584C               	subwfb	___lwmod@dividend+1,w,c
  1091  000C2C  A0D8               	btfss	status,0,c
  1092  000C2E  D005               	goto	l2112
  1093  000C30  504D               	movf	___lwmod@divisor,w,c
  1094  000C32  5E4B               	subwf	___lwmod@dividend,f,c
  1095  000C34  504E               	movf	___lwmod@divisor+1,w,c
  1096  000C36  5A4C               	subwfb	___lwmod@dividend+1,f,c
  1097  000C38  D000               	goto	l2112
  1098  000C3A                     l2112:
  1099  000C3A  90D8               	bcf	status,0,c
  1100  000C3C  324E               	rrcf	___lwmod@divisor+1,f,c
  1101  000C3E  324D               	rrcf	___lwmod@divisor,f,c
  1102  000C40  2E4F               	decfsz	___lwmod@counter,f,c
  1103  000C42  D7F0               	goto	l2108
  1104  000C44  D000               	goto	l1041
  1105  000C46                     l1041:
  1106  000C46  C04B  F04B         	movff	___lwmod@dividend,?___lwmod
  1107  000C4A  C04C  F04C         	movff	___lwmod@dividend+1,?___lwmod+1
  1108  000C4E  0012               	return		;funcret
  1109  000C50                     __end_of___lwmod:
  1110                           	opt stack 0
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           prodh	equ	0xFF4
  1116                           prodl	equ	0xFF3
  1117                           intcon	equ	0xFF2
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           indf2	equ	0xFDF
  1121                           postinc2	equ	0xFDE
  1122                           postdec2	equ	0xFDD
  1123                           fsr2h	equ	0xFDA
  1124                           fsr2l	equ	0xFD9
  1125                           status	equ	0xFD8
  1126                           
  1127 ;; *************** function ___lwdiv *****************
  1128 ;; Defined at:
  1129 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;  dividend        2   14[COMRAM] unsigned int 
  1132 ;;  divisor         2   16[COMRAM] unsigned int 
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  quotient        2   19[COMRAM] unsigned int 
  1135 ;;  counter         1   18[COMRAM] unsigned char 
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  2   14[COMRAM] unsigned int 
  1138 ;; Registers used:
  1139 ;;		wreg, status,2, status,0
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1145 ;;      Params:         4       0       0       0       0       0       0
  1146 ;;      Locals:         3       0       0       0       0       0       0
  1147 ;;      Temps:          0       0       0       0       0       0       0
  1148 ;;      Totals:         7       0       0       0       0       0       0
  1149 ;;Total ram usage:        7 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; Hardware stack levels required when called:    2
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_printf
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text5
  1160  000A60                     __ptext5:
  1161                           	opt stack 0
  1162  000A60                     ___lwdiv:
  1163                           	opt stack 27
  1164                           
  1165                           ;incstack = 0
  1166  000A60  0E00               	movlw	0
  1167  000A62  6E4A               	movwf	___lwdiv@quotient+1,c
  1168  000A64  0E00               	movlw	0
  1169  000A66  6E49               	movwf	___lwdiv@quotient,c
  1170  000A68  5046               	movf	___lwdiv@divisor,w,c
  1171  000A6A  1047               	iorwf	___lwdiv@divisor+1,w,c
  1172  000A6C  B4D8               	btfsc	status,2,c
  1173  000A6E  D021               	goto	l1031
  1174  000A70  0E01               	movlw	1
  1175  000A72  6E48               	movwf	___lwdiv@counter,c
  1176  000A74  D005               	goto	l2086
  1177  000A76                     l2084:
  1178  000A76  90D8               	bcf	status,0,c
  1179  000A78  3646               	rlcf	___lwdiv@divisor,f,c
  1180  000A7A  3647               	rlcf	___lwdiv@divisor+1,f,c
  1181  000A7C  2A48               	incf	___lwdiv@counter,f,c
  1182  000A7E  D000               	goto	l2086
  1183  000A80                     l2086:
  1184  000A80  BE47               	btfsc	___lwdiv@divisor+1,7,c
  1185  000A82  D002               	goto	l2088
  1186  000A84  D7F8               	goto	l2084
  1187  000A86  D000               	goto	l2088
  1188  000A88                     l2088:
  1189  000A88  90D8               	bcf	status,0,c
  1190  000A8A  3649               	rlcf	___lwdiv@quotient,f,c
  1191  000A8C  364A               	rlcf	___lwdiv@quotient+1,f,c
  1192  000A8E  5046               	movf	___lwdiv@divisor,w,c
  1193  000A90  5C44               	subwf	___lwdiv@dividend,w,c
  1194  000A92  5047               	movf	___lwdiv@divisor+1,w,c
  1195  000A94  5845               	subwfb	___lwdiv@dividend+1,w,c
  1196  000A96  A0D8               	btfss	status,0,c
  1197  000A98  D006               	goto	l2096
  1198  000A9A  5046               	movf	___lwdiv@divisor,w,c
  1199  000A9C  5E44               	subwf	___lwdiv@dividend,f,c
  1200  000A9E  5047               	movf	___lwdiv@divisor+1,w,c
  1201  000AA0  5A45               	subwfb	___lwdiv@dividend+1,f,c
  1202  000AA2  8049               	bsf	___lwdiv@quotient,0,c
  1203  000AA4  D000               	goto	l2096
  1204  000AA6                     l2096:
  1205  000AA6  90D8               	bcf	status,0,c
  1206  000AA8  3247               	rrcf	___lwdiv@divisor+1,f,c
  1207  000AAA  3246               	rrcf	___lwdiv@divisor,f,c
  1208  000AAC  2E48               	decfsz	___lwdiv@counter,f,c
  1209  000AAE  D7EC               	goto	l2088
  1210  000AB0  D000               	goto	l1031
  1211  000AB2                     l1031:
  1212  000AB2  C049  F044         	movff	___lwdiv@quotient,?___lwdiv
  1213  000AB6  C04A  F045         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1214  000ABA  0012               	return		;funcret
  1215  000ABC                     __end_of___lwdiv:
  1216                           	opt stack 0
  1217                           tblptru	equ	0xFF8
  1218                           tblptrh	equ	0xFF7
  1219                           tblptrl	equ	0xFF6
  1220                           tablat	equ	0xFF5
  1221                           prodh	equ	0xFF4
  1222                           prodl	equ	0xFF3
  1223                           intcon	equ	0xFF2
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           indf2	equ	0xFDF
  1227                           postinc2	equ	0xFDE
  1228                           postdec2	equ	0xFDD
  1229                           fsr2h	equ	0xFDA
  1230                           fsr2l	equ	0xFD9
  1231                           status	equ	0xFD8
  1232                           
  1233 ;; *************** function _SYSTEM_Initialize *****************
  1234 ;; Defined at:
  1235 ;;		line 112 in file "mcc_generated_files/mcc.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;		None
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;		None
  1240 ;; Return value:  Size  Location     Type
  1241 ;;		None               void
  1242 ;; Registers used:
  1243 ;;		wreg, status,2, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1249 ;;      Params:         0       0       0       0       0       0       0
  1250 ;;      Locals:         0       0       0       0       0       0       0
  1251 ;;      Temps:          0       0       0       0       0       0       0
  1252 ;;      Totals:         0       0       0       0       0       0       0
  1253 ;;Total ram usage:        0 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    3
  1256 ;; This function calls:
  1257 ;;		_ADC_Initialize
  1258 ;;		_EUSART1_Initialize
  1259 ;;		_INTERRUPT_Initialize
  1260 ;;		_OSCILLATOR_Initialize
  1261 ;;		_PIN_MANAGER_Initialize
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text6
  1268  000DF6                     __ptext6:
  1269                           	opt stack 0
  1270  000DF6                     _SYSTEM_Initialize:
  1271                           	opt stack 27
  1272                           
  1273                           ;mcc.c: 114: OSCILLATOR_Initialize();
  1274                           
  1275                           ;incstack = 0
  1276  000DF6  EC11  F007         	call	_OSCILLATOR_Initialize	;wreg free
  1277                           
  1278                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1279  000DFA  ECB4  F005         	call	_PIN_MANAGER_Initialize	;wreg free
  1280                           
  1281                           ;mcc.c: 116: INTERRUPT_Initialize();
  1282  000DFE  EC1D  F007         	call	_INTERRUPT_Initialize	;wreg free
  1283                           
  1284                           ;mcc.c: 117: EUSART1_Initialize();
  1285  000E02  EC8F  F006         	call	_EUSART1_Initialize	;wreg free
  1286                           
  1287                           ;mcc.c: 118: ADC_Initialize();
  1288  000E06  ECEF  F006         	call	_ADC_Initialize	;wreg free
  1289  000E0A  0012               	return		;funcret
  1290  000E0C                     __end_of_SYSTEM_Initialize:
  1291                           	opt stack 0
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           prodh	equ	0xFF4
  1297                           prodl	equ	0xFF3
  1298                           intcon	equ	0xFF2
  1299                           postinc0	equ	0xFEE
  1300                           wreg	equ	0xFE8
  1301                           indf2	equ	0xFDF
  1302                           postinc2	equ	0xFDE
  1303                           postdec2	equ	0xFDD
  1304                           fsr2h	equ	0xFDA
  1305                           fsr2l	equ	0xFD9
  1306                           status	equ	0xFD8
  1307                           
  1308 ;; *************** function _PIN_MANAGER_Initialize *****************
  1309 ;; Defined at:
  1310 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;		None
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;		None
  1315 ;; Return value:  Size  Location     Type
  1316 ;;		None               void
  1317 ;; Registers used:
  1318 ;;		wreg, status,2
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1324 ;;      Params:         0       0       0       0       0       0       0
  1325 ;;      Locals:         0       0       0       0       0       0       0
  1326 ;;      Temps:          0       0       0       0       0       0       0
  1327 ;;      Totals:         0       0       0       0       0       0       0
  1328 ;;Total ram usage:        0 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    2
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		_SYSTEM_Initialize
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text7
  1339  000B68                     __ptext7:
  1340                           	opt stack 0
  1341  000B68                     _PIN_MANAGER_Initialize:
  1342                           	opt stack 27
  1343                           
  1344                           ;pin_manager.c: 52: LATA = 0x00;
  1345                           
  1346                           ;incstack = 0
  1347  000B68  0E00               	movlw	0
  1348  000B6A  6E89               	movwf	3977,c	;volatile
  1349                           
  1350                           ;pin_manager.c: 53: TRISA = 0xF7;
  1351  000B6C  0EF7               	movlw	247
  1352  000B6E  6E92               	movwf	3986,c	;volatile
  1353                           
  1354                           ;pin_manager.c: 54: ANSELA = 0x27;
  1355  000B70  0E27               	movlw	39
  1356  000B72  010F               	movlb	15	; () banked
  1357  000B74  6F38               	movwf	56,b	;volatile
  1358                           
  1359                           ;pin_manager.c: 56: LATB = 0x01;
  1360  000B76  0E01               	movlw	1
  1361  000B78  6E8A               	movwf	3978,c	;volatile
  1362                           
  1363                           ;pin_manager.c: 57: TRISB = 0xFE;
  1364  000B7A  0EFE               	movlw	254
  1365  000B7C  6E93               	movwf	3987,c	;volatile
  1366                           
  1367                           ;pin_manager.c: 58: ANSELB = 0x3E;
  1368  000B7E  0E3E               	movlw	62
  1369  000B80  010F               	movlb	15	; () banked
  1370  000B82  6F39               	movwf	57,b	;volatile
  1371                           
  1372                           ;pin_manager.c: 59: WPUB = 0x00;
  1373  000B84  0E00               	movlw	0
  1374  000B86  6E61               	movwf	3937,c	;volatile
  1375                           
  1376                           ;pin_manager.c: 61: LATC = 0x00;
  1377  000B88  0E00               	movlw	0
  1378  000B8A  6E8B               	movwf	3979,c	;volatile
  1379                           
  1380                           ;pin_manager.c: 62: TRISC = 0xDF;
  1381  000B8C  0EDF               	movlw	223
  1382  000B8E  6E94               	movwf	3988,c	;volatile
  1383                           
  1384                           ;pin_manager.c: 63: ANSELC = 0x1C;
  1385  000B90  0E1C               	movlw	28
  1386  000B92  010F               	movlb	15	; () banked
  1387  000B94  6F3A               	movwf	58,b	;volatile
  1388                           
  1389                           ;pin_manager.c: 65: LATD = 0x00;
  1390  000B96  0E00               	movlw	0
  1391  000B98  6E8C               	movwf	3980,c	;volatile
  1392                           
  1393                           ;pin_manager.c: 66: TRISD = 0x0F;
  1394  000B9A  0E0F               	movlw	15
  1395  000B9C  6E95               	movwf	3989,c	;volatile
  1396                           
  1397                           ;pin_manager.c: 67: ANSELD = 0x0F;
  1398  000B9E  0E0F               	movlw	15
  1399  000BA0  010F               	movlb	15	; () banked
  1400  000BA2  6F3B               	movwf	59,b	;volatile
  1401                           
  1402                           ;pin_manager.c: 69: LATE = 0x00;
  1403  000BA4  0E00               	movlw	0
  1404  000BA6  6E8D               	movwf	3981,c	;volatile
  1405                           
  1406                           ;pin_manager.c: 70: TRISE = 0x07;
  1407  000BA8  0E07               	movlw	7
  1408  000BAA  6E96               	movwf	3990,c	;volatile
  1409                           
  1410                           ;pin_manager.c: 71: ANSELE = 0x07;
  1411  000BAC  0E07               	movlw	7
  1412  000BAE  010F               	movlb	15	; () banked
  1413  000BB0  6F3C               	movwf	60,b	;volatile
  1414                           
  1415                           ; BSR set to: 15
  1416                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  1417  000BB2  8EF1               	bsf	intcon2,7,c	;volatile
  1418                           
  1419                           ; BSR set to: 15
  1420  000BB4  0012               	return		;funcret
  1421  000BB6                     __end_of_PIN_MANAGER_Initialize:
  1422                           	opt stack 0
  1423                           tblptru	equ	0xFF8
  1424                           tblptrh	equ	0xFF7
  1425                           tblptrl	equ	0xFF6
  1426                           tablat	equ	0xFF5
  1427                           prodh	equ	0xFF4
  1428                           prodl	equ	0xFF3
  1429                           intcon	equ	0xFF2
  1430                           intcon2	equ	0xFF1
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           indf2	equ	0xFDF
  1434                           postinc2	equ	0xFDE
  1435                           postdec2	equ	0xFDD
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _OSCILLATOR_Initialize *****************
  1441 ;; Defined at:
  1442 ;;		line 121 in file "mcc_generated_files/mcc.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;		None               void
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         0       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         0       0       0       0       0       0       0
  1460 ;;Total ram usage:        0 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    2
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_SYSTEM_Initialize
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text8
  1471  000E22                     __ptext8:
  1472                           	opt stack 0
  1473  000E22                     _OSCILLATOR_Initialize:
  1474                           	opt stack 27
  1475                           
  1476                           ;mcc.c: 124: OSCCON = 0x60;
  1477                           
  1478                           ; BSR set to: 15
  1479                           ;incstack = 0
  1480  000E22  0E60               	movlw	96
  1481  000E24  6ED3               	movwf	4051,c	;volatile
  1482                           
  1483                           ;mcc.c: 126: OSCCON2 = 0x04;
  1484  000E26  0E04               	movlw	4
  1485  000E28  6ED2               	movwf	4050,c	;volatile
  1486                           
  1487                           ;mcc.c: 128: OSCTUNE = 0x00;
  1488  000E2A  0E00               	movlw	0
  1489  000E2C  6E9B               	movwf	3995,c	;volatile
  1490  000E2E  0012               	return		;funcret
  1491  000E30                     __end_of_OSCILLATOR_Initialize:
  1492                           	opt stack 0
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           prodh	equ	0xFF4
  1498                           prodl	equ	0xFF3
  1499                           intcon	equ	0xFF2
  1500                           intcon2	equ	0xFF1
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           indf2	equ	0xFDF
  1504                           postinc2	equ	0xFDE
  1505                           postdec2	equ	0xFDD
  1506                           fsr2h	equ	0xFDA
  1507                           fsr2l	equ	0xFD9
  1508                           status	equ	0xFD8
  1509                           
  1510 ;; *************** function _INTERRUPT_Initialize *****************
  1511 ;; Defined at:
  1512 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;		None
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;		None
  1517 ;; Return value:  Size  Location     Type
  1518 ;;		None               void
  1519 ;; Registers used:
  1520 ;;		None
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1526 ;;      Params:         0       0       0       0       0       0       0
  1527 ;;      Locals:         0       0       0       0       0       0       0
  1528 ;;      Temps:          0       0       0       0       0       0       0
  1529 ;;      Totals:         0       0       0       0       0       0       0
  1530 ;;Total ram usage:        0 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    2
  1533 ;; This function calls:
  1534 ;;		Nothing
  1535 ;; This function is called by:
  1536 ;;		_SYSTEM_Initialize
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text9
  1541  000E3A                     __ptext9:
  1542                           	opt stack 0
  1543  000E3A                     _INTERRUPT_Initialize:
  1544                           	opt stack 27
  1545                           
  1546                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  1547                           
  1548                           ;incstack = 0
  1549  000E3A  9ED0               	bcf	4048,7,c	;volatile
  1550                           
  1551                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  1552  000E3C  9A9F               	bcf	3999,5,c	;volatile
  1553                           
  1554                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  1555  000E3E  989F               	bcf	3999,4,c	;volatile
  1556                           
  1557                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  1558  000E40  9C9F               	bcf	3999,6,c	;volatile
  1559  000E42  0012               	return		;funcret
  1560  000E44                     __end_of_INTERRUPT_Initialize:
  1561                           	opt stack 0
  1562                           tblptru	equ	0xFF8
  1563                           tblptrh	equ	0xFF7
  1564                           tblptrl	equ	0xFF6
  1565                           tablat	equ	0xFF5
  1566                           prodh	equ	0xFF4
  1567                           prodl	equ	0xFF3
  1568                           intcon	equ	0xFF2
  1569                           intcon2	equ	0xFF1
  1570                           postinc0	equ	0xFEE
  1571                           wreg	equ	0xFE8
  1572                           indf2	equ	0xFDF
  1573                           postinc2	equ	0xFDE
  1574                           postdec2	equ	0xFDD
  1575                           fsr2h	equ	0xFDA
  1576                           fsr2l	equ	0xFD9
  1577                           status	equ	0xFD8
  1578                           
  1579 ;; *************** function _EUSART1_Initialize *****************
  1580 ;; Defined at:
  1581 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;		None
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;		None
  1586 ;; Return value:  Size  Location     Type
  1587 ;;		None               void
  1588 ;; Registers used:
  1589 ;;		wreg, status,2
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1595 ;;      Params:         0       0       0       0       0       0       0
  1596 ;;      Locals:         0       0       0       0       0       0       0
  1597 ;;      Temps:          0       0       0       0       0       0       0
  1598 ;;      Totals:         0       0       0       0       0       0       0
  1599 ;;Total ram usage:        0 bytes
  1600 ;; Hardware stack levels used:    1
  1601 ;; Hardware stack levels required when called:    2
  1602 ;; This function calls:
  1603 ;;		Nothing
  1604 ;; This function is called by:
  1605 ;;		_SYSTEM_Initialize
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           	psect	text10
  1610  000D1E                     __ptext10:
  1611                           	opt stack 0
  1612  000D1E                     _EUSART1_Initialize:
  1613                           	opt stack 27
  1614                           
  1615                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  1616                           
  1617                           ;incstack = 0
  1618  000D1E  9A9D               	bcf	3997,5,c	;volatile
  1619                           
  1620                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  1621  000D20  989D               	bcf	3997,4,c	;volatile
  1622                           
  1623                           ;eusart1.c: 85: BAUD1CON = 0x48;
  1624  000D22  0E48               	movlw	72
  1625  000D24  6EB8               	movwf	4024,c	;volatile
  1626                           
  1627                           ;eusart1.c: 88: RC1STA = 0x90;
  1628  000D26  0E90               	movlw	144
  1629  000D28  6EAB               	movwf	4011,c	;volatile
  1630                           
  1631                           ;eusart1.c: 91: TX1STA = 0x26;
  1632  000D2A  0E26               	movlw	38
  1633  000D2C  6EAC               	movwf	4012,c	;volatile
  1634                           
  1635                           ;eusart1.c: 94: SPBRG1 = 0x22;
  1636  000D2E  0E22               	movlw	34
  1637  000D30  6EAF               	movwf	4015,c	;volatile
  1638                           
  1639                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  1640  000D32  0E00               	movlw	0
  1641  000D34  6EB0               	movwf	4016,c	;volatile
  1642                           
  1643                           ;eusart1.c: 100: TXREG1 = 0x00;
  1644  000D36  0E00               	movlw	0
  1645  000D38  6EAD               	movwf	4013,c	;volatile
  1646                           
  1647                           ;eusart1.c: 103: RCREG1 = 0x00;
  1648  000D3A  0E00               	movlw	0
  1649  000D3C  6EAE               	movwf	4014,c	;volatile
  1650                           
  1651                           ;eusart1.c: 107: eusart1TxHead = 0;
  1652  000D3E  0E00               	movlw	0
  1653  000D40  6E34               	movwf	_eusart1TxHead,c
  1654                           
  1655                           ;eusart1.c: 108: eusart1TxTail = 0;
  1656  000D42  0E00               	movlw	0
  1657  000D44  6E35               	movwf	_eusart1TxTail,c
  1658                           
  1659                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1660  000D46  0E08               	movlw	8
  1661  000D48  6E51               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1662                           
  1663                           ;eusart1.c: 111: eusart1RxHead = 0;
  1664  000D4A  0E00               	movlw	0
  1665  000D4C  6E32               	movwf	_eusart1RxHead,c
  1666                           
  1667                           ;eusart1.c: 112: eusart1RxTail = 0;
  1668  000D4E  0E00               	movlw	0
  1669  000D50  6E33               	movwf	_eusart1RxTail,c
  1670                           
  1671                           ;eusart1.c: 113: eusart1RxCount = 0;
  1672  000D52  0E00               	movlw	0
  1673  000D54  6E31               	movwf	_eusart1RxCount,c	;volatile
  1674                           
  1675                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  1676  000D56  8A9D               	bsf	3997,5,c	;volatile
  1677  000D58  0012               	return		;funcret
  1678  000D5A                     __end_of_EUSART1_Initialize:
  1679                           	opt stack 0
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           prodh	equ	0xFF4
  1685                           prodl	equ	0xFF3
  1686                           intcon	equ	0xFF2
  1687                           intcon2	equ	0xFF1
  1688                           postinc0	equ	0xFEE
  1689                           wreg	equ	0xFE8
  1690                           indf2	equ	0xFDF
  1691                           postinc2	equ	0xFDE
  1692                           postdec2	equ	0xFDD
  1693                           fsr2h	equ	0xFDA
  1694                           fsr2l	equ	0xFD9
  1695                           status	equ	0xFD8
  1696                           
  1697 ;; *************** function _ADC_Initialize *****************
  1698 ;; Defined at:
  1699 ;;		line 59 in file "mcc_generated_files/adc.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;		None
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;		None
  1704 ;; Return value:  Size  Location     Type
  1705 ;;		None               void
  1706 ;; Registers used:
  1707 ;;		wreg, status,2
  1708 ;; Tracked objects:
  1709 ;;		On entry : 0/0
  1710 ;;		On exit  : 0/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1713 ;;      Params:         0       0       0       0       0       0       0
  1714 ;;      Locals:         0       0       0       0       0       0       0
  1715 ;;      Temps:          0       0       0       0       0       0       0
  1716 ;;      Totals:         0       0       0       0       0       0       0
  1717 ;;Total ram usage:        0 bytes
  1718 ;; Hardware stack levels used:    1
  1719 ;; Hardware stack levels required when called:    2
  1720 ;; This function calls:
  1721 ;;		Nothing
  1722 ;; This function is called by:
  1723 ;;		_SYSTEM_Initialize
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           	psect	text11
  1728  000DDE                     __ptext11:
  1729                           	opt stack 0
  1730  000DDE                     _ADC_Initialize:
  1731                           	opt stack 27
  1732                           
  1733                           ;adc.c: 64: ADCON0 = 0x01;
  1734                           
  1735                           ;incstack = 0
  1736  000DDE  0E01               	movlw	1
  1737  000DE0  6EC2               	movwf	4034,c	;volatile
  1738                           
  1739                           ;adc.c: 67: ADCON1 = 0x80;
  1740  000DE2  0E80               	movlw	128
  1741  000DE4  6EC1               	movwf	4033,c	;volatile
  1742                           
  1743                           ;adc.c: 70: ADCON2 = 0x12;
  1744  000DE6  0E12               	movlw	18
  1745  000DE8  6EC0               	movwf	4032,c	;volatile
  1746                           
  1747                           ;adc.c: 73: ADRESL = 0x00;
  1748  000DEA  0E00               	movlw	0
  1749  000DEC  6EC3               	movwf	4035,c	;volatile
  1750                           
  1751                           ;adc.c: 76: ADRESH = 0x00;
  1752  000DEE  0E00               	movlw	0
  1753  000DF0  6EC4               	movwf	4036,c	;volatile
  1754                           
  1755                           ;adc.c: 79: PIE1bits.ADIE = 1;
  1756  000DF2  8C9D               	bsf	3997,6,c	;volatile
  1757  000DF4  0012               	return		;funcret
  1758  000DF6                     __end_of_ADC_Initialize:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           prodh	equ	0xFF4
  1765                           prodl	equ	0xFF3
  1766                           intcon	equ	0xFF2
  1767                           intcon2	equ	0xFF1
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           indf2	equ	0xFDF
  1771                           postinc2	equ	0xFDE
  1772                           postdec2	equ	0xFDD
  1773                           fsr2h	equ	0xFDA
  1774                           fsr2l	equ	0xFD9
  1775                           status	equ	0xFD8
  1776                           
  1777 ;; *************** function _PDUStartup *****************
  1778 ;; Defined at:
  1779 ;;		line 14 in file "PDU.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;		None               void
  1786 ;; Registers used:
  1787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1793 ;;      Params:         0       0       0       0       0       0       0
  1794 ;;      Locals:         0       0       0       0       0       0       0
  1795 ;;      Temps:          0       0       0       0       0       0       0
  1796 ;;      Totals:         0       0       0       0       0       0       0
  1797 ;;Total ram usage:        0 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    6
  1800 ;; This function calls:
  1801 ;;		_ComputeStorageData
  1802 ;;		_EnableSlavePower
  1803 ;;		_StartUp595
  1804 ;;		_Update
  1805 ;; This function is called by:
  1806 ;;		_main
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text12
  1811  000B14                     __ptext12:
  1812                           	opt stack 0
  1813  000B14                     _PDUStartup:
  1814                           	opt stack 24
  1815                           
  1816                           ;PDU.c: 18: StartUp595();
  1817                           
  1818                           ;incstack = 0
  1819  000B14  ECFA  F004         	call	_StartUp595	;wreg free
  1820                           
  1821                           ;PDU.c: 20: EnableSlavePower(SAS,ON);
  1822  000B18  0E00               	movlw	0
  1823  000B1A  6E4F               	movwf	EnableSlavePower@onof+1,c
  1824  000B1C  0E01               	movlw	1
  1825  000B1E  6E4E               	movwf	EnableSlavePower@onof,c
  1826  000B20  0E01               	movlw	1
  1827  000B22  ECC5  F003         	call	_EnableSlavePower
  1828                           
  1829                           ;PDU.c: 21: EnableSlavePower(DDS,ON);
  1830  000B26  0E00               	movlw	0
  1831  000B28  6E4F               	movwf	EnableSlavePower@onof+1,c
  1832  000B2A  0E01               	movlw	1
  1833  000B2C  6E4E               	movwf	EnableSlavePower@onof,c
  1834  000B2E  0E02               	movlw	2
  1835  000B30  ECC5  F003         	call	_EnableSlavePower
  1836                           
  1837                           ;PDU.c: 22: EnableSlavePower(MCS,ON);
  1838  000B34  0E00               	movlw	0
  1839  000B36  6E4F               	movwf	EnableSlavePower@onof+1,c
  1840  000B38  0E01               	movlw	1
  1841  000B3A  6E4E               	movwf	EnableSlavePower@onof,c
  1842  000B3C  0E03               	movlw	3
  1843  000B3E  ECC5  F003         	call	_EnableSlavePower
  1844                           
  1845                           ;PDU.c: 23: EnableSlavePower(BMM,ON);
  1846  000B42  0E00               	movlw	0
  1847  000B44  6E4F               	movwf	EnableSlavePower@onof+1,c
  1848  000B46  0E01               	movlw	1
  1849  000B48  6E4E               	movwf	EnableSlavePower@onof,c
  1850  000B4A  0E04               	movlw	4
  1851  000B4C  ECC5  F003         	call	_EnableSlavePower
  1852                           
  1853                           ;PDU.c: 24: EnableSlavePower(TSS,ON);
  1854  000B50  0E00               	movlw	0
  1855  000B52  6E4F               	movwf	EnableSlavePower@onof+1,c
  1856  000B54  0E01               	movlw	1
  1857  000B56  6E4E               	movwf	EnableSlavePower@onof,c
  1858  000B58  0E05               	movlw	5
  1859  000B5A  ECC5  F003         	call	_EnableSlavePower
  1860                           
  1861                           ;PDU.c: 25: Update();
  1862  000B5E  EC22  F007         	call	_Update	;wreg free
  1863                           
  1864                           ;PDU.c: 27: ComputeStorageData();
  1865  000B62  EC9B  F004         	call	_ComputeStorageData	;wreg free
  1866  000B66  0012               	return		;funcret
  1867  000B68                     __end_of_PDUStartup:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           prodh	equ	0xFF4
  1874                           prodl	equ	0xFF3
  1875                           intcon	equ	0xFF2
  1876                           intcon2	equ	0xFF1
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           indf2	equ	0xFDF
  1880                           postinc2	equ	0xFDE
  1881                           postdec2	equ	0xFDD
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function _Update *****************
  1887 ;; Defined at:
  1888 ;;		line 130 in file "PDU.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;		None               void
  1895 ;; Registers used:
  1896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1902 ;;      Params:         0       0       0       0       0       0       0
  1903 ;;      Locals:         0       0       0       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0       0       0
  1905 ;;      Totals:         0       0       0       0       0       0       0
  1906 ;;Total ram usage:        0 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    4
  1909 ;; This function calls:
  1910 ;;		_writeRegisters
  1911 ;; This function is called by:
  1912 ;;		_PDUStartup
  1913 ;;		_ReadCurrent
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text13
  1918  000E44                     __ptext13:
  1919                           	opt stack 0
  1920  000E44                     _Update:
  1921                           	opt stack 25
  1922                           
  1923                           ;PDU.c: 132: writeRegisters();
  1924                           
  1925                           ;incstack = 0
  1926  000E44  EC36  F004         	call	_writeRegisters	;wreg free
  1927  000E48  0012               	return		;funcret
  1928  000E4A                     __end_of_Update:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           prodh	equ	0xFF4
  1935                           prodl	equ	0xFF3
  1936                           intcon	equ	0xFF2
  1937                           intcon2	equ	0xFF1
  1938                           postinc0	equ	0xFEE
  1939                           wreg	equ	0xFE8
  1940                           indf2	equ	0xFDF
  1941                           postinc2	equ	0xFDE
  1942                           postdec2	equ	0xFDD
  1943                           fsr2h	equ	0xFDA
  1944                           fsr2l	equ	0xFD9
  1945                           status	equ	0xFD8
  1946                           
  1947 ;; *************** function _StartUp595 *****************
  1948 ;; Defined at:
  1949 ;;		line 10 in file "Shift595.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;		None
  1954 ;; Return value:  Size  Location     Type
  1955 ;;		None               void
  1956 ;; Registers used:
  1957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1963 ;;      Params:         0       0       0       0       0       0       0
  1964 ;;      Locals:         0       0       0       0       0       0       0
  1965 ;;      Temps:          0       0       0       0       0       0       0
  1966 ;;      Totals:         0       0       0       0       0       0       0
  1967 ;;Total ram usage:        0 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    5
  1970 ;; This function calls:
  1971 ;;		_Clear595
  1972 ;;		_Delay
  1973 ;; This function is called by:
  1974 ;;		_PDUStartup
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text14
  1979  0009F4                     __ptext14:
  1980                           	opt stack 0
  1981  0009F4                     _StartUp595:
  1982                           	opt stack 24
  1983                           
  1984                           ;incstack = 0
  1985                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  1986  0009F4  8A8C               	bsf	3980,5,c	;volatile
  1987  0009F6  D000               	goto	l2064
  1988  0009F8                     l2064:
  1989                           
  1990                           ;Shift595.c: 14: Delay(2);
  1991  0009F8  0E02               	movlw	2
  1992  0009FA  6E44               	movwf	Delay@wait,c
  1993  0009FC  0E00               	movlw	0
  1994  0009FE  6E45               	movwf	Delay@wait+1,c
  1995  000A00  0E00               	movlw	0
  1996  000A02  6E46               	movwf	Delay@wait+2,c
  1997  000A04  0E00               	movlw	0
  1998  000A06  6E47               	movwf	Delay@wait+3,c
  1999  000A08  EC28  F006         	call	_Delay	;wreg free
  2000  000A0C  D000               	goto	l2066
  2001  000A0E                     l2066:
  2002  000A0E  808A               	bsf	3978,0,c	;volatile
  2003                           
  2004                           ;Shift595.c: 16: Delay(2);
  2005  000A10  0E02               	movlw	2
  2006  000A12  6E44               	movwf	Delay@wait,c
  2007  000A14  0E00               	movlw	0
  2008  000A16  6E45               	movwf	Delay@wait+1,c
  2009  000A18  0E00               	movlw	0
  2010  000A1A  6E46               	movwf	Delay@wait+2,c
  2011  000A1C  0E00               	movlw	0
  2012  000A1E  6E47               	movwf	Delay@wait+3,c
  2013  000A20  EC28  F006         	call	_Delay	;wreg free
  2014  000A24  D000               	goto	l2068
  2015  000A26                     l2068:
  2016  000A26  908A               	bcf	3978,0,c	;volatile
  2017                           
  2018                           ;Shift595.c: 18: Delay(2);
  2019  000A28  0E02               	movlw	2
  2020  000A2A  6E44               	movwf	Delay@wait,c
  2021  000A2C  0E00               	movlw	0
  2022  000A2E  6E45               	movwf	Delay@wait+1,c
  2023  000A30  0E00               	movlw	0
  2024  000A32  6E46               	movwf	Delay@wait+2,c
  2025  000A34  0E00               	movlw	0
  2026  000A36  6E47               	movwf	Delay@wait+3,c
  2027  000A38  EC28  F006         	call	_Delay	;wreg free
  2028  000A3C  D000               	goto	l2070
  2029  000A3E                     l2070:
  2030  000A3E  808A               	bsf	3978,0,c	;volatile
  2031                           
  2032                           ;Shift595.c: 20: Delay(2);
  2033  000A40  0E02               	movlw	2
  2034  000A42  6E44               	movwf	Delay@wait,c
  2035  000A44  0E00               	movlw	0
  2036  000A46  6E45               	movwf	Delay@wait+1,c
  2037  000A48  0E00               	movlw	0
  2038  000A4A  6E46               	movwf	Delay@wait+2,c
  2039  000A4C  0E00               	movlw	0
  2040  000A4E  6E47               	movwf	Delay@wait+3,c
  2041  000A50  EC28  F006         	call	_Delay	;wreg free
  2042  000A54  D000               	goto	l2072
  2043  000A56                     l2072:
  2044  000A56  9A8C               	bcf	3980,5,c	;volatile
  2045  000A58  D000               	goto	l2074
  2046  000A5A                     l2074:
  2047                           
  2048                           ;Shift595.c: 23: Clear595();
  2049  000A5A  EC4E  F006         	call	_Clear595	;wreg free
  2050  000A5E  0012               	return		;funcret
  2051  000A60                     __end_of_StartUp595:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           intcon	equ	0xFF2
  2060                           intcon2	equ	0xFF1
  2061                           postinc0	equ	0xFEE
  2062                           wreg	equ	0xFE8
  2063                           indf2	equ	0xFDF
  2064                           postinc2	equ	0xFDE
  2065                           postdec2	equ	0xFDD
  2066                           fsr2h	equ	0xFDA
  2067                           fsr2l	equ	0xFD9
  2068                           status	equ	0xFD8
  2069                           
  2070 ;; *************** function _Clear595 *****************
  2071 ;; Defined at:
  2072 ;;		line 38 in file "Shift595.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  i               2    0[BANK0 ] int 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;		None               void
  2079 ;; Registers used:
  2080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2086 ;;      Params:         0       0       0       0       0       0       0
  2087 ;;      Locals:         0       2       0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0
  2089 ;;      Totals:         0       2       0       0       0       0       0
  2090 ;;Total ram usage:        2 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    4
  2093 ;; This function calls:
  2094 ;;		_writeRegisters
  2095 ;; This function is called by:
  2096 ;;		_StartUp595
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text15
  2101  000C9C                     __ptext15:
  2102                           	opt stack 0
  2103  000C9C                     _Clear595:
  2104                           	opt stack 24
  2105                           
  2106                           ;Shift595.c: 39: for (int i = 3 * 8 - 1; i >= 0; i--) {
  2107                           
  2108                           ;incstack = 0
  2109  000C9C  0E00               	movlw	0
  2110  000C9E  0100               	movlb	0	; () banked
  2111  000CA0  6FBD               	movwf	(Clear595@i+1)& (0+255),b
  2112  000CA2  0E17               	movlw	23
  2113  000CA4  6FBC               	movwf	Clear595@i& (0+255),b
  2114  000CA6                     l2050:
  2115                           
  2116                           ; BSR set to: 0
  2117  000CA6  0100               	movlb	0	; () banked
  2118  000CA8  BFBD               	btfsc	(Clear595@i+1)& (0+255),7,b
  2119  000CAA  D016               	goto	l2060
  2120  000CAC  D001               	goto	l2054
  2121                           
  2122                           ; BSR set to: 0
  2123  000CAE  D014               	goto	l2060
  2124  000CB0                     l2054:
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;Shift595.c: 40: registers[i] = 0;
  2128  000CB0  90D8               	bcf	status,0,c
  2129  000CB2  0100               	movlb	0	; () banked
  2130  000CB4  35BC               	rlcf	Clear595@i& (0+255),w,b
  2131  000CB6  6ED9               	movwf	fsr2l,c
  2132  000CB8  0100               	movlb	0	; () banked
  2133  000CBA  35BD               	rlcf	(Clear595@i+1)& (0+255),w,b
  2134  000CBC  6EDA               	movwf	fsr2h,c
  2135  000CBE  0E60               	movlw	low _registers
  2136  000CC0  26D9               	addwf	fsr2l,f,c
  2137  000CC2  0E00               	movlw	high _registers
  2138  000CC4  22DA               	addwfc	fsr2h,f,c
  2139  000CC6  0E00               	movlw	0
  2140  000CC8  6EDE               	movwf	postinc2,c
  2141  000CCA  0E00               	movlw	0
  2142  000CCC  6EDD               	movwf	postdec2,c
  2143                           
  2144                           ; BSR set to: 0
  2145  000CCE  0100               	movlb	0	; () banked
  2146  000CD0  07BC               	decf	Clear595@i& (0+255),f,b
  2147  000CD2  A0D8               	btfss	status,0,c
  2148  000CD4  07BD               	decf	(Clear595@i+1)& (0+255),f,b
  2149  000CD6  D7E7               	goto	l2050
  2150  000CD8                     l2060:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;Shift595.c: 41: }
  2154                           ;Shift595.c: 43: writeRegisters();
  2155  000CD8  EC36  F004         	call	_writeRegisters	;wreg free
  2156  000CDC  0012               	return		;funcret
  2157  000CDE                     __end_of_Clear595:
  2158                           	opt stack 0
  2159                           tblptru	equ	0xFF8
  2160                           tblptrh	equ	0xFF7
  2161                           tblptrl	equ	0xFF6
  2162                           tablat	equ	0xFF5
  2163                           prodh	equ	0xFF4
  2164                           prodl	equ	0xFF3
  2165                           intcon	equ	0xFF2
  2166                           intcon2	equ	0xFF1
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           indf2	equ	0xFDF
  2170                           postinc2	equ	0xFDE
  2171                           postdec2	equ	0xFDD
  2172                           fsr2h	equ	0xFDA
  2173                           fsr2l	equ	0xFD9
  2174                           status	equ	0xFD8
  2175                           
  2176 ;; *************** function _writeRegisters *****************
  2177 ;; Defined at:
  2178 ;;		line 49 in file "Shift595.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;		None
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;  i               2   25[COMRAM] int 
  2183 ;;  val             2   23[COMRAM] int 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;		None               void
  2186 ;; Registers used:
  2187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2193 ;;      Params:         0       0       0       0       0       0       0
  2194 ;;      Locals:         4       0       0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0
  2196 ;;      Totals:         4       0       0       0       0       0       0
  2197 ;;Total ram usage:        4 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    3
  2200 ;; This function calls:
  2201 ;;		_Delay
  2202 ;; This function is called by:
  2203 ;;		_Clear595
  2204 ;;		_Update
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text16
  2209  00086C                     __ptext16:
  2210                           	opt stack 0
  2211  00086C                     _writeRegisters:
  2212                           	opt stack 25
  2213                           
  2214                           ;incstack = 0
  2215                           ;Shift595.c: 50: do { LATD5 = 1; } while(0);
  2216  00086C  8A8C               	bsf	3980,5,c	;volatile
  2217  00086E  D000               	goto	l2000
  2218  000870                     l2000:
  2219                           
  2220                           ;Shift595.c: 51: int val = 0;
  2221  000870  0E00               	movlw	0
  2222  000872  6E4E               	movwf	writeRegisters@val+1,c
  2223  000874  0E00               	movlw	0
  2224  000876  6E4D               	movwf	writeRegisters@val,c
  2225  000878  D000               	goto	l2002
  2226  00087A                     l2002:
  2227  00087A  9C8C               	bcf	3980,6,c	;volatile
  2228  00087C  D000               	goto	l2004
  2229  00087E                     l2004:
  2230                           
  2231                           ;Shift595.c: 53: Delay(2);
  2232  00087E  0E02               	movlw	2
  2233  000880  6E44               	movwf	Delay@wait,c
  2234  000882  0E00               	movlw	0
  2235  000884  6E45               	movwf	Delay@wait+1,c
  2236  000886  0E00               	movlw	0
  2237  000888  6E46               	movwf	Delay@wait+2,c
  2238  00088A  0E00               	movlw	0
  2239  00088C  6E47               	movwf	Delay@wait+3,c
  2240  00088E  EC28  F006         	call	_Delay	;wreg free
  2241                           
  2242                           ;Shift595.c: 54: for (int i = 3 * 8 - 1; i >= 0; i--) {
  2243  000892  0E00               	movlw	0
  2244  000894  6E50               	movwf	writeRegisters@i+1,c
  2245  000896  0E17               	movlw	23
  2246  000898  6E4F               	movwf	writeRegisters@i,c
  2247  00089A                     l2008:
  2248  00089A  BE50               	btfsc	writeRegisters@i+1,7,c
  2249  00089C  D045               	goto	l405
  2250  00089E  D001               	goto	l390
  2251  0008A0  D043               	goto	l405
  2252  0008A2                     l390:
  2253  0008A2  9E8C               	bcf	3980,7,c	;volatile
  2254  0008A4  D000               	goto	l392
  2255  0008A6                     l392:
  2256  0008A6  9C8C               	bcf	3980,6,c	;volatile
  2257  0008A8  D000               	goto	l2012
  2258  0008AA                     l2012:
  2259                           
  2260                           ;Shift595.c: 57: Delay(2);
  2261  0008AA  0E02               	movlw	2
  2262  0008AC  6E44               	movwf	Delay@wait,c
  2263  0008AE  0E00               	movlw	0
  2264  0008B0  6E45               	movwf	Delay@wait+1,c
  2265  0008B2  0E00               	movlw	0
  2266  0008B4  6E46               	movwf	Delay@wait+2,c
  2267  0008B6  0E00               	movlw	0
  2268  0008B8  6E47               	movwf	Delay@wait+3,c
  2269  0008BA  EC28  F006         	call	_Delay	;wreg free
  2270                           
  2271                           ;Shift595.c: 58: val = registers[i];
  2272  0008BE  90D8               	bcf	status,0,c
  2273  0008C0  344F               	rlcf	writeRegisters@i,w,c
  2274  0008C2  6ED9               	movwf	fsr2l,c
  2275  0008C4  3450               	rlcf	writeRegisters@i+1,w,c
  2276  0008C6  6EDA               	movwf	fsr2h,c
  2277  0008C8  0E60               	movlw	low _registers
  2278  0008CA  26D9               	addwf	fsr2l,f,c
  2279  0008CC  0E00               	movlw	high _registers
  2280  0008CE  22DA               	addwfc	fsr2h,f,c
  2281  0008D0  CFDE F04D          	movff	postinc2,writeRegisters@val
  2282  0008D4  CFDD F04E          	movff	postdec2,writeRegisters@val+1
  2283                           
  2284                           ;Shift595.c: 59: if (val == 1) {
  2285  0008D8  044D               	decf	writeRegisters@val,w,c
  2286  0008DA  104E               	iorwf	writeRegisters@val+1,w,c
  2287  0008DC  A4D8               	btfss	status,2,c
  2288  0008DE  D002               	goto	l2018
  2289                           
  2290                           ;Shift595.c: 60: do { LATD4 = 1; } while(0);
  2291  0008E0  888C               	bsf	3980,4,c	;volatile
  2292                           
  2293                           ;Shift595.c: 61: } else if (val == 0) {
  2294  0008E2  D006               	goto	l2020
  2295  0008E4                     l2018:
  2296  0008E4  504D               	movf	writeRegisters@val,w,c
  2297  0008E6  104E               	iorwf	writeRegisters@val+1,w,c
  2298  0008E8  A4D8               	btfss	status,2,c
  2299  0008EA  D002               	goto	l2020
  2300                           
  2301                           ;Shift595.c: 62: do { LATD4 = 0; } while(0);
  2302  0008EC  988C               	bcf	3980,4,c	;volatile
  2303  0008EE  D000               	goto	l2020
  2304  0008F0                     l2020:
  2305                           
  2306                           ;Shift595.c: 63: }
  2307                           ;Shift595.c: 64: Delay(2);
  2308  0008F0  0E02               	movlw	2
  2309  0008F2  6E44               	movwf	Delay@wait,c
  2310  0008F4  0E00               	movlw	0
  2311  0008F6  6E45               	movwf	Delay@wait+1,c
  2312  0008F8  0E00               	movlw	0
  2313  0008FA  6E46               	movwf	Delay@wait+2,c
  2314  0008FC  0E00               	movlw	0
  2315  0008FE  6E47               	movwf	Delay@wait+3,c
  2316  000900  EC28  F006         	call	_Delay	;wreg free
  2317  000904  D000               	goto	l2022
  2318  000906                     l2022:
  2319  000906  8E8C               	bsf	3980,7,c	;volatile
  2320  000908  D000               	goto	l2024
  2321  00090A                     l2024:
  2322  00090A  8C8C               	bsf	3980,6,c	;volatile
  2323                           
  2324                           ;Shift595.c: 67: Delay(2);
  2325  00090C  0E02               	movlw	2
  2326  00090E  6E44               	movwf	Delay@wait,c
  2327  000910  0E00               	movlw	0
  2328  000912  6E45               	movwf	Delay@wait+1,c
  2329  000914  0E00               	movlw	0
  2330  000916  6E46               	movwf	Delay@wait+2,c
  2331  000918  0E00               	movlw	0
  2332  00091A  6E47               	movwf	Delay@wait+3,c
  2333  00091C  EC28  F006         	call	_Delay	;wreg free
  2334  000920  064F               	decf	writeRegisters@i,f,c
  2335  000922  A0D8               	btfss	status,0,c
  2336  000924  0650               	decf	writeRegisters@i+1,f,c
  2337  000926  D7B9               	goto	l2008
  2338  000928                     l405:
  2339  000928  9C8C               	bcf	3980,6,c	;volatile
  2340  00092A  D000               	goto	l407
  2341  00092C                     l407:
  2342  00092C  9E8C               	bcf	3980,7,c	;volatile
  2343  00092E  D000               	goto	l409
  2344  000930                     l409:
  2345  000930  9A8C               	bcf	3980,5,c	;volatile
  2346  000932  0012               	return	
  2347  000934  0012               	return		;funcret
  2348  000936                     __end_of_writeRegisters:
  2349                           	opt stack 0
  2350                           tblptru	equ	0xFF8
  2351                           tblptrh	equ	0xFF7
  2352                           tblptrl	equ	0xFF6
  2353                           tablat	equ	0xFF5
  2354                           prodh	equ	0xFF4
  2355                           prodl	equ	0xFF3
  2356                           intcon	equ	0xFF2
  2357                           intcon2	equ	0xFF1
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           indf2	equ	0xFDF
  2361                           postinc2	equ	0xFDE
  2362                           postdec2	equ	0xFDD
  2363                           fsr2h	equ	0xFDA
  2364                           fsr2l	equ	0xFD9
  2365                           status	equ	0xFD8
  2366                           
  2367 ;; *************** function _Delay *****************
  2368 ;; Defined at:
  2369 ;;		line 8 in file "Functions.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  wait            4   14[COMRAM] long 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  i               4   19[COMRAM] long 
  2374 ;; Return value:  Size  Location     Type
  2375 ;;		None               void
  2376 ;; Registers used:
  2377 ;;		wreg, status,2, status,0
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2383 ;;      Params:         4       0       0       0       0       0       0
  2384 ;;      Locals:         4       0       0       0       0       0       0
  2385 ;;      Temps:          1       0       0       0       0       0       0
  2386 ;;      Totals:         9       0       0       0       0       0       0
  2387 ;;Total ram usage:        9 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    2
  2390 ;; This function calls:
  2391 ;;		Nothing
  2392 ;; This function is called by:
  2393 ;;		_main
  2394 ;;		_StartUp595
  2395 ;;		_writeRegisters
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text17
  2400  000C50                     __ptext17:
  2401                           	opt stack 0
  2402  000C50                     _Delay:
  2403                           	opt stack 25
  2404                           
  2405                           ;Functions.c: 10: long int i = 0;
  2406                           
  2407                           ;incstack = 0
  2408  000C50  0E00               	movlw	0
  2409  000C52  6E49               	movwf	Delay@i,c
  2410  000C54  0E00               	movlw	0
  2411  000C56  6E4A               	movwf	Delay@i+1,c
  2412  000C58  0E00               	movlw	0
  2413  000C5A  6E4B               	movwf	Delay@i+2,c
  2414  000C5C  0E00               	movlw	0
  2415  000C5E  6E4C               	movwf	Delay@i+3,c
  2416                           
  2417                           ;Functions.c: 11: for(;wait>i;i++)
  2418  000C60  D00E               	goto	l1998
  2419  000C62                     l1994:
  2420                           
  2421                           ;Functions.c: 12: {
  2422                           ;Functions.c: 13: _delay((unsigned long)((1)*(8000000/4000.0)));
  2423  000C62  0E03               	movlw	3
  2424  000C64  6E48               	movwf	??_Delay& (0+255),c
  2425  000C66  0E98               	movlw	152
  2426  000C68                     u1207:
  2427  000C68  2EE8               	decfsz	wreg,f,c
  2428  000C6A  D7FE               	goto	u1207
  2429  000C6C  2E48               	decfsz	??_Delay& (0+255),f,c
  2430  000C6E  D7FC               	goto	u1207
  2431  000C70  0E01               	movlw	1
  2432  000C72  2649               	addwf	Delay@i,f,c
  2433  000C74  0E00               	movlw	0
  2434  000C76  224A               	addwfc	Delay@i+1,f,c
  2435  000C78  224B               	addwfc	Delay@i+2,f,c
  2436  000C7A  224C               	addwfc	Delay@i+3,f,c
  2437  000C7C  D000               	goto	l1998
  2438  000C7E                     l1998:
  2439  000C7E  5044               	movf	Delay@wait,w,c
  2440  000C80  5C49               	subwf	Delay@i,w,c
  2441  000C82  5045               	movf	Delay@wait+1,w,c
  2442  000C84  584A               	subwfb	Delay@i+1,w,c
  2443  000C86  5046               	movf	Delay@wait+2,w,c
  2444  000C88  584B               	subwfb	Delay@i+2,w,c
  2445  000C8A  504C               	movf	Delay@i+3,w,c
  2446  000C8C  0A80               	xorlw	128
  2447  000C8E  6E48               	movwf	??_Delay& (0+255),c
  2448  000C90  5047               	movf	Delay@wait+3,w,c
  2449  000C92  0A80               	xorlw	128
  2450  000C94  5848               	subwfb	??_Delay& (0+255),w,c
  2451  000C96  A0D8               	btfss	status,0,c
  2452  000C98  D7E4               	goto	l1994
  2453  000C9A  0012               	return		;funcret
  2454  000C9C                     __end_of_Delay:
  2455                           	opt stack 0
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           prodh	equ	0xFF4
  2461                           prodl	equ	0xFF3
  2462                           intcon	equ	0xFF2
  2463                           intcon2	equ	0xFF1
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           indf2	equ	0xFDF
  2467                           postinc2	equ	0xFDE
  2468                           postdec2	equ	0xFDD
  2469                           fsr2h	equ	0xFDA
  2470                           fsr2l	equ	0xFD9
  2471                           status	equ	0xFD8
  2472                           
  2473 ;; *************** function _EnableSlavePower *****************
  2474 ;; Defined at:
  2475 ;;		line 31 in file "PDU.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;  slave           1    wreg     enum E5
  2478 ;;  onof            2   24[COMRAM] int 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  slave           1   26[COMRAM] enum E5
  2481 ;; Return value:  Size  Location     Type
  2482 ;;		None               void
  2483 ;; Registers used:
  2484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2490 ;;      Params:         2       0       0       0       0       0       0
  2491 ;;      Locals:         1       0       0       0       0       0       0
  2492 ;;      Temps:          0       0       0       0       0       0       0
  2493 ;;      Totals:         3       0       0       0       0       0       0
  2494 ;;Total ram usage:        3 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    3
  2497 ;; This function calls:
  2498 ;;		_SetPin595
  2499 ;; This function is called by:
  2500 ;;		_PDUStartup
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text18
  2505  00078A                     __ptext18:
  2506                           	opt stack 0
  2507  00078A                     _EnableSlavePower:
  2508                           	opt stack 26
  2509                           
  2510                           ;incstack = 0
  2511                           ;EnableSlavePower@slave stored from wreg
  2512  00078A  6E50               	movwf	EnableSlavePower@slave,c
  2513                           
  2514                           ;PDU.c: 33: switch(slave)
  2515  00078C  D05A               	goto	l1766
  2516  00078E                     l1752:
  2517                           
  2518                           ;PDU.c: 36: SetPin595(2, 1, onof);
  2519  00078E  0E00               	movlw	0
  2520  000790  6E45               	movwf	SetPin595@Reg+1,c
  2521  000792  0E02               	movlw	2
  2522  000794  6E44               	movwf	SetPin595@Reg,c
  2523  000796  0E00               	movlw	0
  2524  000798  6E47               	movwf	SetPin595@pin+1,c
  2525  00079A  0E01               	movlw	1
  2526  00079C  6E46               	movwf	SetPin595@pin,c
  2527  00079E  C04E  F048         	movff	EnableSlavePower@onof,SetPin595@value
  2528  0007A2  C04F  F049         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  2529  0007A6  ECDB  F005         	call	_SetPin595	;wreg free
  2530                           
  2531                           ;PDU.c: 37: break;
  2532  0007AA  0012               	return	
  2533  0007AC                     l1754:
  2534                           
  2535                           ;PDU.c: 39: SetPin595(3, 1, onof);
  2536  0007AC  0E00               	movlw	0
  2537  0007AE  6E45               	movwf	SetPin595@Reg+1,c
  2538  0007B0  0E03               	movlw	3
  2539  0007B2  6E44               	movwf	SetPin595@Reg,c
  2540  0007B4  0E00               	movlw	0
  2541  0007B6  6E47               	movwf	SetPin595@pin+1,c
  2542  0007B8  0E01               	movlw	1
  2543  0007BA  6E46               	movwf	SetPin595@pin,c
  2544  0007BC  C04E  F048         	movff	EnableSlavePower@onof,SetPin595@value
  2545  0007C0  C04F  F049         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  2546  0007C4  ECDB  F005         	call	_SetPin595	;wreg free
  2547                           
  2548                           ;PDU.c: 40: break;
  2549  0007C8  0012               	return	
  2550  0007CA                     l1756:
  2551                           
  2552                           ;PDU.c: 42: SetPin595(2, 6, onof);
  2553  0007CA  0E00               	movlw	0
  2554  0007CC  6E45               	movwf	SetPin595@Reg+1,c
  2555  0007CE  0E02               	movlw	2
  2556  0007D0  6E44               	movwf	SetPin595@Reg,c
  2557  0007D2  0E00               	movlw	0
  2558  0007D4  6E47               	movwf	SetPin595@pin+1,c
  2559  0007D6  0E06               	movlw	6
  2560  0007D8  6E46               	movwf	SetPin595@pin,c
  2561  0007DA  C04E  F048         	movff	EnableSlavePower@onof,SetPin595@value
  2562  0007DE  C04F  F049         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  2563  0007E2  ECDB  F005         	call	_SetPin595	;wreg free
  2564                           
  2565                           ;PDU.c: 43: break;
  2566  0007E6  0012               	return	
  2567  0007E8                     l1758:
  2568                           
  2569                           ;PDU.c: 45: SetPin595(3, 6, onof);
  2570  0007E8  0E00               	movlw	0
  2571  0007EA  6E45               	movwf	SetPin595@Reg+1,c
  2572  0007EC  0E03               	movlw	3
  2573  0007EE  6E44               	movwf	SetPin595@Reg,c
  2574  0007F0  0E00               	movlw	0
  2575  0007F2  6E47               	movwf	SetPin595@pin+1,c
  2576  0007F4  0E06               	movlw	6
  2577  0007F6  6E46               	movwf	SetPin595@pin,c
  2578  0007F8  C04E  F048         	movff	EnableSlavePower@onof,SetPin595@value
  2579  0007FC  C04F  F049         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  2580  000800  ECDB  F005         	call	_SetPin595	;wreg free
  2581                           
  2582                           ;PDU.c: 46: break;
  2583  000804  0012               	return	
  2584  000806                     l1760:
  2585                           
  2586                           ;PDU.c: 48: SetPin595(1, 1, onof);
  2587  000806  0E00               	movlw	0
  2588  000808  6E45               	movwf	SetPin595@Reg+1,c
  2589  00080A  0E01               	movlw	1
  2590  00080C  6E44               	movwf	SetPin595@Reg,c
  2591  00080E  0E00               	movlw	0
  2592  000810  6E47               	movwf	SetPin595@pin+1,c
  2593  000812  0E01               	movlw	1
  2594  000814  6E46               	movwf	SetPin595@pin,c
  2595  000816  C04E  F048         	movff	EnableSlavePower@onof,SetPin595@value
  2596  00081A  C04F  F049         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  2597  00081E  ECDB  F005         	call	_SetPin595	;wreg free
  2598                           
  2599                           ;PDU.c: 49: break;
  2600  000822  0012               	return	
  2601  000824                     l1762:
  2602                           
  2603                           ;PDU.c: 51: SetPin595(1, 6, onof);
  2604  000824  0E00               	movlw	0
  2605  000826  6E45               	movwf	SetPin595@Reg+1,c
  2606  000828  0E01               	movlw	1
  2607  00082A  6E44               	movwf	SetPin595@Reg,c
  2608  00082C  0E00               	movlw	0
  2609  00082E  6E47               	movwf	SetPin595@pin+1,c
  2610  000830  0E06               	movlw	6
  2611  000832  6E46               	movwf	SetPin595@pin,c
  2612  000834  C04E  F048         	movff	EnableSlavePower@onof,SetPin595@value
  2613  000838  C04F  F049         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  2614  00083C  ECDB  F005         	call	_SetPin595	;wreg free
  2615                           
  2616                           ;PDU.c: 53: }
  2617                           
  2618                           ;PDU.c: 52: break;
  2619  000840  0012               	return	
  2620  000842                     l1766:
  2621  000842  5050               	movf	EnableSlavePower@slave,w,c
  2622                           
  2623                           ; Switch size 1, requested type "space"
  2624                           ; Number of cases is 6, Range of values is 1 to 6
  2625                           ; switch strategies available:
  2626                           ; Name         Instructions Cycles
  2627                           ; simple_byte           19    10 (average)
  2628                           ;	Chosen strategy is simple_byte
  2629  000844  0A01               	xorlw	1	; case 1
  2630  000846  B4D8               	btfsc	status,2,c
  2631  000848  D7DE               	goto	l1760
  2632  00084A  0A03               	xorlw	3	; case 2
  2633  00084C  B4D8               	btfsc	status,2,c
  2634  00084E  D7BD               	goto	l1756
  2635  000850  0A01               	xorlw	1	; case 3
  2636  000852  B4D8               	btfsc	status,2,c
  2637  000854  D7AB               	goto	l1754
  2638  000856  0A07               	xorlw	7	; case 4
  2639  000858  B4D8               	btfsc	status,2,c
  2640  00085A  D7C6               	goto	l1758
  2641  00085C  0A01               	xorlw	1	; case 5
  2642  00085E  B4D8               	btfsc	status,2,c
  2643  000860  D796               	goto	l1752
  2644  000862  0A03               	xorlw	3	; case 6
  2645  000864  A4D8               	btfss	status,2,c
  2646  000866  0012               	return	
  2647  000868  D7DD               	goto	l1762
  2648  00086A  0012               	return		;funcret
  2649  00086C                     __end_of_EnableSlavePower:
  2650                           	opt stack 0
  2651                           tblptru	equ	0xFF8
  2652                           tblptrh	equ	0xFF7
  2653                           tblptrl	equ	0xFF6
  2654                           tablat	equ	0xFF5
  2655                           prodh	equ	0xFF4
  2656                           prodl	equ	0xFF3
  2657                           intcon	equ	0xFF2
  2658                           intcon2	equ	0xFF1
  2659                           postinc0	equ	0xFEE
  2660                           wreg	equ	0xFE8
  2661                           indf2	equ	0xFDF
  2662                           postinc2	equ	0xFDE
  2663                           postdec2	equ	0xFDD
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _SetPin595 *****************
  2669 ;; Defined at:
  2670 ;;		line 31 in file "Shift595.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  Reg             2   14[COMRAM] int 
  2673 ;;  pin             2   16[COMRAM] int 
  2674 ;;  value           2   18[COMRAM] int 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;		None               void
  2679 ;; Registers used:
  2680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2686 ;;      Params:         6       0       0       0       0       0       0
  2687 ;;      Locals:         0       0       0       0       0       0       0
  2688 ;;      Temps:          4       0       0       0       0       0       0
  2689 ;;      Totals:        10       0       0       0       0       0       0
  2690 ;;Total ram usage:       10 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    2
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_EnableSlavePower
  2697 ;;		_ReadCurrent
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text19
  2702  000BB6                     __ptext19:
  2703                           	opt stack 0
  2704  000BB6                     _SetPin595:
  2705                           	opt stack 26
  2706                           
  2707                           ;Shift595.c: 32: registers[((Reg - 1)*8) + pin] = value;
  2708                           
  2709                           ;incstack = 0
  2710  000BB6  0EF0               	movlw	240
  2711  000BB8  6E4A               	movwf	??_SetPin595& (0+255),c
  2712  000BBA  0EFF               	movlw	255
  2713  000BBC  6E4B               	movwf	(??_SetPin595+1)& (0+255),c
  2714  000BBE  C044  F04C         	movff	SetPin595@Reg,??_SetPin595+2
  2715  000BC2  C045  F04D         	movff	SetPin595@Reg+1,??_SetPin595+3
  2716  000BC6  90D8               	bcf	status,0,c
  2717  000BC8  364C               	rlcf	??_SetPin595+2,f,c
  2718  000BCA  364D               	rlcf	??_SetPin595+3,f,c
  2719  000BCC  90D8               	bcf	status,0,c
  2720  000BCE  364C               	rlcf	??_SetPin595+2,f,c
  2721  000BD0  364D               	rlcf	??_SetPin595+3,f,c
  2722  000BD2  90D8               	bcf	status,0,c
  2723  000BD4  364C               	rlcf	??_SetPin595+2,f,c
  2724  000BD6  364D               	rlcf	??_SetPin595+3,f,c
  2725  000BD8  5046               	movf	SetPin595@pin,w,c
  2726  000BDA  264C               	addwf	??_SetPin595+2,f,c
  2727  000BDC  5047               	movf	SetPin595@pin+1,w,c
  2728  000BDE  224D               	addwfc	??_SetPin595+3,f,c
  2729  000BE0  90D8               	bcf	status,0,c
  2730  000BE2  364C               	rlcf	??_SetPin595+2,f,c
  2731  000BE4  364D               	rlcf	??_SetPin595+3,f,c
  2732  000BE6  504A               	movf	??_SetPin595,w,c
  2733  000BE8  264C               	addwf	??_SetPin595+2,f,c
  2734  000BEA  504B               	movf	??_SetPin595+1,w,c
  2735  000BEC  224D               	addwfc	??_SetPin595+3,f,c
  2736  000BEE  0E60               	movlw	low _registers
  2737  000BF0  244C               	addwf	??_SetPin595+2,w,c
  2738  000BF2  6ED9               	movwf	fsr2l,c
  2739  000BF4  0E00               	movlw	high _registers
  2740  000BF6  204D               	addwfc	??_SetPin595+3,w,c
  2741  000BF8  6EDA               	movwf	fsr2h,c
  2742  000BFA  C048  FFDE         	movff	SetPin595@value,postinc2
  2743  000BFE  C049  FFDD         	movff	SetPin595@value+1,postdec2
  2744  000C02  0012               	return		;funcret
  2745  000C04                     __end_of_SetPin595:
  2746                           	opt stack 0
  2747                           tblptru	equ	0xFF8
  2748                           tblptrh	equ	0xFF7
  2749                           tblptrl	equ	0xFF6
  2750                           tablat	equ	0xFF5
  2751                           prodh	equ	0xFF4
  2752                           prodl	equ	0xFF3
  2753                           intcon	equ	0xFF2
  2754                           intcon2	equ	0xFF1
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           indf2	equ	0xFDF
  2758                           postinc2	equ	0xFDE
  2759                           postdec2	equ	0xFDD
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function _ComputeStorageData *****************
  2765 ;; Defined at:
  2766 ;;		line 97 in file "PDU.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  i               2   17[COMRAM] int 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;		None               void
  2773 ;; Registers used:
  2774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2780 ;;      Params:         0       0       0       0       0       0       0
  2781 ;;      Locals:         2       0       0       0       0       0       0
  2782 ;;      Temps:          2       0       0       0       0       0       0
  2783 ;;      Totals:         4       0       0       0       0       0       0
  2784 ;;Total ram usage:        4 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    3
  2787 ;; This function calls:
  2788 ;;		_DATAEE_ReadByte
  2789 ;; This function is called by:
  2790 ;;		_PDUStartup
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text20
  2795  000936                     __ptext20:
  2796                           	opt stack 0
  2797  000936                     _ComputeStorageData:
  2798                           	opt stack 26
  2799                           
  2800                           ;PDU.c: 99: for(int i = 0;i<12;i++)
  2801                           
  2802                           ;incstack = 0
  2803  000936  0E00               	movlw	0
  2804  000938  6E48               	movwf	ComputeStorageData@i+1,c
  2805  00093A  0E00               	movlw	0
  2806  00093C  6E47               	movwf	ComputeStorageData@i,c
  2807  00093E                     l1250:
  2808  00093E  BE48               	btfsc	ComputeStorageData@i+1,7,c
  2809  000940  D008               	goto	l1254
  2810  000942  5048               	movf	ComputeStorageData@i+1,w,c
  2811  000944  E114               	bnz	l1260
  2812  000946  0E0C               	movlw	12
  2813  000948  5C47               	subwf	ComputeStorageData@i,w,c
  2814  00094A  B0D8               	btfsc	status,0,c
  2815  00094C  D010               	goto	l1260
  2816  00094E  D001               	goto	l1254
  2817  000950  D00E               	goto	l1260
  2818  000952                     l1254:
  2819                           
  2820                           ;PDU.c: 100: {
  2821                           ;PDU.c: 101: data[i] = DATAEE_ReadByte(i);
  2822  000952  0E19               	movlw	low _data
  2823  000954  2447               	addwf	ComputeStorageData@i,w,c
  2824  000956  6ED9               	movwf	fsr2l,c
  2825  000958  0E00               	movlw	high _data
  2826  00095A  2048               	addwfc	ComputeStorageData@i+1,w,c
  2827  00095C  6EDA               	movwf	fsr2h,c
  2828  00095E  5047               	movf	ComputeStorageData@i,w,c
  2829  000960  EC06  F007         	call	_DATAEE_ReadByte
  2830  000964  6EDF               	movwf	indf2,c
  2831  000966  4A47               	infsnz	ComputeStorageData@i,f,c
  2832  000968  2A48               	incf	ComputeStorageData@i+1,f,c
  2833  00096A  D7E9               	goto	l1250
  2834  00096C  D000               	goto	l1260
  2835  00096E                     l1260:
  2836                           
  2837                           ;PDU.c: 102: }
  2838                           ;PDU.c: 103: Currentcomp[0] = ((data[0] << 8) | data[1]);
  2839  00096E  501A               	movf	_data+1,w,c
  2840  000970  C019  F045         	movff	_data,??_ComputeStorageData
  2841  000974  6A46               	clrf	(??_ComputeStorageData+1)& (0+255),c
  2842  000976  C045  F046         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  2843  00097A  6A45               	clrf	??_ComputeStorageData,c
  2844  00097C  1045               	iorwf	??_ComputeStorageData,w,c
  2845  00097E  6E0D               	movwf	_Currentcomp,c
  2846  000980  5046               	movf	??_ComputeStorageData+1,w,c
  2847  000982  6E0E               	movwf	_Currentcomp+1,c
  2848                           
  2849                           ;PDU.c: 104: Currentcomp[1] = ((data[2] << 8) | data[3]);
  2850  000984  501C               	movf	_data+3,w,c
  2851  000986  C01B  F045         	movff	_data+2,??_ComputeStorageData
  2852  00098A  6A46               	clrf	(??_ComputeStorageData+1)& (0+255),c
  2853  00098C  C045  F046         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  2854  000990  6A45               	clrf	??_ComputeStorageData,c
  2855  000992  1045               	iorwf	??_ComputeStorageData,w,c
  2856  000994  6E0F               	movwf	_Currentcomp+2,c
  2857  000996  5046               	movf	??_ComputeStorageData+1,w,c
  2858  000998  6E10               	movwf	_Currentcomp+3,c
  2859                           
  2860                           ;PDU.c: 105: Currentcomp[2] = ((data[4] << 8) | data[5]);
  2861  00099A  501E               	movf	_data+5,w,c
  2862  00099C  C01D  F045         	movff	_data+4,??_ComputeStorageData
  2863  0009A0  6A46               	clrf	(??_ComputeStorageData+1)& (0+255),c
  2864  0009A2  C045  F046         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  2865  0009A6  6A45               	clrf	??_ComputeStorageData,c
  2866  0009A8  1045               	iorwf	??_ComputeStorageData,w,c
  2867  0009AA  6E11               	movwf	_Currentcomp+4,c
  2868  0009AC  5046               	movf	??_ComputeStorageData+1,w,c
  2869  0009AE  6E12               	movwf	_Currentcomp+5,c
  2870                           
  2871                           ;PDU.c: 106: Currentcomp[3] = ((data[6] << 8) | data[7]);
  2872  0009B0  5020               	movf	_data+7,w,c
  2873  0009B2  C01F  F045         	movff	_data+6,??_ComputeStorageData
  2874  0009B6  6A46               	clrf	(??_ComputeStorageData+1)& (0+255),c
  2875  0009B8  C045  F046         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  2876  0009BC  6A45               	clrf	??_ComputeStorageData,c
  2877  0009BE  1045               	iorwf	??_ComputeStorageData,w,c
  2878  0009C0  6E13               	movwf	_Currentcomp+6,c
  2879  0009C2  5046               	movf	??_ComputeStorageData+1,w,c
  2880  0009C4  6E14               	movwf	_Currentcomp+7,c
  2881                           
  2882                           ;PDU.c: 107: Currentcomp[4] = ((data[8] << 8) | data[9]);
  2883  0009C6  5022               	movf	_data+9,w,c
  2884  0009C8  C021  F045         	movff	_data+8,??_ComputeStorageData
  2885  0009CC  6A46               	clrf	(??_ComputeStorageData+1)& (0+255),c
  2886  0009CE  C045  F046         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  2887  0009D2  6A45               	clrf	??_ComputeStorageData,c
  2888  0009D4  1045               	iorwf	??_ComputeStorageData,w,c
  2889  0009D6  6E15               	movwf	_Currentcomp+8,c
  2890  0009D8  5046               	movf	??_ComputeStorageData+1,w,c
  2891  0009DA  6E16               	movwf	_Currentcomp+9,c
  2892                           
  2893                           ;PDU.c: 108: Currentcomp[5] = ((data[10] << 8) | data[11]);
  2894  0009DC  5024               	movf	_data+11,w,c
  2895  0009DE  C023  F045         	movff	_data+10,??_ComputeStorageData
  2896  0009E2  6A46               	clrf	(??_ComputeStorageData+1)& (0+255),c
  2897  0009E4  C045  F046         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  2898  0009E8  6A45               	clrf	??_ComputeStorageData,c
  2899  0009EA  1045               	iorwf	??_ComputeStorageData,w,c
  2900  0009EC  6E17               	movwf	_Currentcomp+10,c
  2901  0009EE  5046               	movf	??_ComputeStorageData+1,w,c
  2902  0009F0  6E18               	movwf	_Currentcomp+11,c
  2903  0009F2  0012               	return		;funcret
  2904  0009F4                     __end_of_ComputeStorageData:
  2905                           	opt stack 0
  2906                           tblptru	equ	0xFF8
  2907                           tblptrh	equ	0xFF7
  2908                           tblptrl	equ	0xFF6
  2909                           tablat	equ	0xFF5
  2910                           prodh	equ	0xFF4
  2911                           prodl	equ	0xFF3
  2912                           intcon	equ	0xFF2
  2913                           intcon2	equ	0xFF1
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           indf2	equ	0xFDF
  2917                           postinc2	equ	0xFDE
  2918                           postdec2	equ	0xFDD
  2919                           fsr2h	equ	0xFDA
  2920                           fsr2l	equ	0xFD9
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function _DATAEE_ReadByte *****************
  2924 ;; Defined at:
  2925 ;;		line 143 in file "mcc_generated_files/memory.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  bAdd            1    wreg     unsigned char 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  bAdd            1   14[COMRAM] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      unsigned char 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2939 ;;      Params:         0       0       0       0       0       0       0
  2940 ;;      Locals:         1       0       0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0
  2942 ;;      Totals:         1       0       0       0       0       0       0
  2943 ;;Total ram usage:        1 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    2
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_ComputeStorageData
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text21
  2954  000E0C                     __ptext21:
  2955                           	opt stack 0
  2956  000E0C                     _DATAEE_ReadByte:
  2957                           	opt stack 26
  2958                           
  2959                           ;incstack = 0
  2960                           ;DATAEE_ReadByte@bAdd stored from wreg
  2961  000E0C  6E44               	movwf	DATAEE_ReadByte@bAdd,c
  2962                           
  2963                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  2964  000E0E  C044  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  2965                           
  2966                           ;memory.c: 146: EECON1bits.CFGS = 0;
  2967  000E12  9CA6               	bcf	4006,6,c	;volatile
  2968                           
  2969                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  2970  000E14  9EA6               	bcf	4006,7,c	;volatile
  2971                           
  2972                           ;memory.c: 148: EECON1bits.RD = 1;
  2973  000E16  80A6               	bsf	4006,0,c	;volatile
  2974                           
  2975                           ;memory.c: 149: __nop();
  2976  000E18  F000               	nop	
  2977                           
  2978                           ;memory.c: 150: __nop();
  2979  000E1A  F000               	nop	
  2980                           
  2981                           ;memory.c: 152: return (EEDATA);
  2982  000E1C  50A8               	movf	4008,w,c	;volatile
  2983  000E1E  0012               	return	
  2984  000E20  0012               	return		;funcret
  2985  000E22                     __end_of_DATAEE_ReadByte:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           intcon	equ	0xFF2
  2994                           intcon2	equ	0xFF1
  2995                           postinc0	equ	0xFEE
  2996                           wreg	equ	0xFE8
  2997                           indf2	equ	0xFDF
  2998                           postinc2	equ	0xFDE
  2999                           postdec2	equ	0xFDD
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _INTERRUPT_InterruptManager *****************
  3005 ;; Defined at:
  3006 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;		None               void
  3013 ;; Registers used:
  3014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3020 ;;      Params:         0       0       0       0       0       0       0
  3021 ;;      Locals:         0       0       0       0       0       0       0
  3022 ;;      Temps:         14       0       0       0       0       0       0
  3023 ;;      Totals:        14       0       0       0       0       0       0
  3024 ;;Total ram usage:       14 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    1
  3027 ;; This function calls:
  3028 ;;		_ADC_ISR
  3029 ;;		_EUSART1_Receive_ISR
  3030 ;;		_EUSART1_Transmit_ISR
  3031 ;; This function is called by:
  3032 ;;		Interrupt level 2
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	intcode
  3037  000008                     __pintcode:
  3038                           	opt stack 0
  3039  000008                     _INTERRUPT_InterruptManager:
  3040                           	opt stack 24
  3041                           
  3042                           ;incstack = 0
  3043  000008  CFFA F036          	movff	pclath,??_INTERRUPT_InterruptManager
  3044  00000C  CFFB F037          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3045  000010  CFE9 F038          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3046  000014  CFEA F039          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3047  000018  CFE1 F03A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3048  00001C  CFE2 F03B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3049  000020  CFD9 F03C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3050  000024  CFDA F03D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3051  000028  CFF3 F03E          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3052  00002C  CFF4 F03F          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3053  000030  CFF6 F040          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3054  000034  CFF7 F041          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3055  000038  CFF8 F042          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3056  00003C  CFF5 F043          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3057                           
  3058                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  3059  000040  BA9D               	btfsc	3997,5,c	;volatile
  3060  000042  AA9E               	btfss	3998,5,c	;volatile
  3061  000044  D003               	goto	i2l164
  3062                           
  3063                           ;interrupt_manager.c: 71: {
  3064                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  3065  000046  ECC6  F006         	call	_EUSART1_Receive_ISR	;wreg free
  3066                           
  3067                           ;interrupt_manager.c: 73: }
  3068  00004A  D00C               	goto	i2l170
  3069  00004C                     i2l164:
  3070                           
  3071                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  3072  00004C  B89D               	btfsc	3997,4,c	;volatile
  3073  00004E  A89E               	btfss	3998,4,c	;volatile
  3074  000050  D003               	goto	i2l166
  3075                           
  3076                           ;interrupt_manager.c: 75: {
  3077                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  3078  000052  ECAD  F006         	call	_EUSART1_Transmit_ISR	;wreg free
  3079                           
  3080                           ;interrupt_manager.c: 77: }
  3081  000056  D006               	goto	i2l170
  3082  000058                     i2l166:
  3083                           
  3084                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  3085  000058  BC9D               	btfsc	3997,6,c	;volatile
  3086  00005A  AC9E               	btfss	3998,6,c	;volatile
  3087  00005C  D003               	goto	i2l170
  3088                           
  3089                           ;interrupt_manager.c: 79: {
  3090                           ;interrupt_manager.c: 80: ADC_ISR();
  3091  00005E  EC25  F007         	call	_ADC_ISR	;wreg free
  3092                           
  3093                           ;interrupt_manager.c: 82: else
  3094                           ;interrupt_manager.c: 83: {
  3095                           
  3096                           ;interrupt_manager.c: 81: }
  3097  000062  D000               	goto	i2l170
  3098  000064                     i2l170:
  3099  000064  C043  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3100  000068  C042  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3101  00006C  C041  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3102  000070  C040  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3103  000074  C03F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3104  000078  C03E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3105  00007C  C03D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3106  000080  C03C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3107  000084  C03B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3108  000088  C03A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3109  00008C  C039  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3110  000090  C038  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3111  000094  C037  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3112  000098  C036  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3113  00009C  0011               	retfie		f
  3114  00009E                     __end_of_INTERRUPT_InterruptManager:
  3115                           	opt stack 0
  3116                           pclatu	equ	0xFFB
  3117                           pclath	equ	0xFFA
  3118                           tblptru	equ	0xFF8
  3119                           tblptrh	equ	0xFF7
  3120                           tblptrl	equ	0xFF6
  3121                           tablat	equ	0xFF5
  3122                           prodh	equ	0xFF4
  3123                           prodl	equ	0xFF3
  3124                           intcon	equ	0xFF2
  3125                           intcon2	equ	0xFF1
  3126                           postinc0	equ	0xFEE
  3127                           fsr0h	equ	0xFEA
  3128                           fsr0l	equ	0xFE9
  3129                           wreg	equ	0xFE8
  3130                           fsr1h	equ	0xFE2
  3131                           fsr1l	equ	0xFE1
  3132                           indf2	equ	0xFDF
  3133                           postinc2	equ	0xFDE
  3134                           postdec2	equ	0xFDD
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8
  3138                           
  3139 ;; *************** function _EUSART1_Transmit_ISR *****************
  3140 ;; Defined at:
  3141 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;		None
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;		None
  3146 ;; Return value:  Size  Location     Type
  3147 ;;		None               void
  3148 ;; Registers used:
  3149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3155 ;;      Params:         0       0       0       0       0       0       0
  3156 ;;      Locals:         0       0       0       0       0       0       0
  3157 ;;      Temps:          0       0       0       0       0       0       0
  3158 ;;      Totals:         0       0       0       0       0       0       0
  3159 ;;Total ram usage:        0 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_INTERRUPT_InterruptManager
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text23
  3169  000D5A                     __ptext23:
  3170                           	opt stack 0
  3171  000D5A                     _EUSART1_Transmit_ISR:
  3172                           	opt stack 24
  3173                           
  3174                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  3175                           
  3176                           ;incstack = 0
  3177  000D5A  0E08               	movlw	8
  3178  000D5C  6051               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  3179  000D5E  D013               	goto	i2l99
  3180                           
  3181                           ;eusart1.c: 178: {
  3182                           ;eusart1.c: 179: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  3183  000D60  5035               	movf	_eusart1TxTail,w,c
  3184  000D62  0D01               	mullw	1
  3185  000D64  0E25               	movlw	low _eusart1TxBuffer
  3186  000D66  24F3               	addwf	prodl,w,c
  3187  000D68  6ED9               	movwf	fsr2l,c
  3188  000D6A  0E00               	movlw	high _eusart1TxBuffer
  3189  000D6C  20F4               	addwfc	prodh,w,c
  3190  000D6E  6EDA               	movwf	fsr2h,c
  3191  000D70  50DF               	movf	indf2,w,c
  3192  000D72  6EAD               	movwf	4013,c	;volatile
  3193  000D74  2A35               	incf	_eusart1TxTail,f,c
  3194                           
  3195                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  3196  000D76  0E07               	movlw	7
  3197  000D78  6435               	cpfsgt	_eusart1TxTail,c
  3198  000D7A  D003               	goto	i2l1342
  3199                           
  3200                           ;eusart1.c: 181: {
  3201                           ;eusart1.c: 182: eusart1TxTail = 0;
  3202  000D7C  0E00               	movlw	0
  3203  000D7E  6E35               	movwf	_eusart1TxTail,c
  3204  000D80  D000               	goto	i2l1342
  3205  000D82                     i2l1342:
  3206                           
  3207                           ;eusart1.c: 183: }
  3208                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  3209  000D82  2A51               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  3210                           
  3211                           ;eusart1.c: 185: }
  3212  000D84  0012               	return	
  3213  000D86                     i2l99:
  3214                           
  3215                           ;eusart1.c: 186: else
  3216                           ;eusart1.c: 187: {
  3217                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  3218  000D86  989D               	bcf	3997,4,c	;volatile
  3219  000D88  0012               	return	
  3220  000D8A  0012               	return		;funcret
  3221  000D8C                     __end_of_EUSART1_Transmit_ISR:
  3222                           	opt stack 0
  3223                           pclatu	equ	0xFFB
  3224                           pclath	equ	0xFFA
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           intcon2	equ	0xFF1
  3233                           postinc0	equ	0xFEE
  3234                           fsr0h	equ	0xFEA
  3235                           fsr0l	equ	0xFE9
  3236                           wreg	equ	0xFE8
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _EUSART1_Receive_ISR *****************
  3247 ;; Defined at:
  3248 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;		None
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;		None
  3253 ;; Return value:  Size  Location     Type
  3254 ;;		None               void
  3255 ;; Registers used:
  3256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3262 ;;      Params:         0       0       0       0       0       0       0
  3263 ;;      Locals:         0       0       0       0       0       0       0
  3264 ;;      Temps:          0       0       0       0       0       0       0
  3265 ;;      Totals:         0       0       0       0       0       0       0
  3266 ;;Total ram usage:        0 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; This function calls:
  3269 ;;		Nothing
  3270 ;; This function is called by:
  3271 ;;		_INTERRUPT_InterruptManager
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text24
  3276  000D8C                     __ptext24:
  3277                           	opt stack 0
  3278  000D8C                     _EUSART1_Receive_ISR:
  3279                           	opt stack 24
  3280                           
  3281                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  3282                           
  3283                           ;incstack = 0
  3284  000D8C  A2AB               	btfss	4011,1,c	;volatile
  3285  000D8E  D003               	goto	i2l1832
  3286                           
  3287                           ;eusart1.c: 195: {
  3288                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  3289  000D90  98AB               	bcf	4011,4,c	;volatile
  3290                           
  3291                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  3292  000D92  88AB               	bsf	4011,4,c	;volatile
  3293  000D94  D000               	goto	i2l1832
  3294  000D96                     i2l1832:
  3295                           
  3296                           ;eusart1.c: 200: }
  3297                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  3298  000D96  5032               	movf	_eusart1RxHead,w,c
  3299  000D98  0D01               	mullw	1
  3300  000D9A  0E90               	movlw	low _eusart1RxBuffer
  3301  000D9C  24F3               	addwf	prodl,w,c
  3302  000D9E  6ED9               	movwf	fsr2l,c
  3303  000DA0  0E00               	movlw	high _eusart1RxBuffer
  3304  000DA2  20F4               	addwfc	prodh,w,c
  3305  000DA4  6EDA               	movwf	fsr2h,c
  3306  000DA6  CFAE FFDF          	movff	4014,indf2	;volatile
  3307  000DAA  2A32               	incf	_eusart1RxHead,f,c
  3308                           
  3309                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  3310  000DAC  0E1F               	movlw	31
  3311  000DAE  6432               	cpfsgt	_eusart1RxHead,c
  3312  000DB0  D003               	goto	i2l1840
  3313                           
  3314                           ;eusart1.c: 205: {
  3315                           ;eusart1.c: 206: eusart1RxHead = 0;
  3316  000DB2  0E00               	movlw	0
  3317  000DB4  6E32               	movwf	_eusart1RxHead,c
  3318  000DB6  D000               	goto	i2l1840
  3319  000DB8                     i2l1840:
  3320                           
  3321                           ;eusart1.c: 207: }
  3322                           ;eusart1.c: 208: eusart1RxCount++;
  3323  000DB8  2A31               	incf	_eusart1RxCount,f,c	;volatile
  3324  000DBA  0012               	return		;funcret
  3325  000DBC                     __end_of_EUSART1_Receive_ISR:
  3326                           	opt stack 0
  3327                           pclatu	equ	0xFFB
  3328                           pclath	equ	0xFFA
  3329                           tblptru	equ	0xFF8
  3330                           tblptrh	equ	0xFF7
  3331                           tblptrl	equ	0xFF6
  3332                           tablat	equ	0xFF5
  3333                           prodh	equ	0xFF4
  3334                           prodl	equ	0xFF3
  3335                           intcon	equ	0xFF2
  3336                           intcon2	equ	0xFF1
  3337                           postinc0	equ	0xFEE
  3338                           fsr0h	equ	0xFEA
  3339                           fsr0l	equ	0xFE9
  3340                           wreg	equ	0xFE8
  3341                           fsr1h	equ	0xFE2
  3342                           fsr1l	equ	0xFE1
  3343                           indf2	equ	0xFDF
  3344                           postinc2	equ	0xFDE
  3345                           postdec2	equ	0xFDD
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _ADC_ISR *****************
  3351 ;; Defined at:
  3352 ;;		line 128 in file "mcc_generated_files/adc.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;		None
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;		None               void
  3359 ;; Registers used:
  3360 ;;		None
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3366 ;;      Params:         0       0       0       0       0       0       0
  3367 ;;      Locals:         0       0       0       0       0       0       0
  3368 ;;      Temps:          0       0       0       0       0       0       0
  3369 ;;      Totals:         0       0       0       0       0       0       0
  3370 ;;Total ram usage:        0 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; This function calls:
  3373 ;;		Nothing
  3374 ;; This function is called by:
  3375 ;;		_INTERRUPT_InterruptManager
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text25
  3380  000E4A                     __ptext25:
  3381                           	opt stack 0
  3382  000E4A                     _ADC_ISR:
  3383                           	opt stack 24
  3384                           
  3385                           ;adc.c: 131: PIR1bits.ADIF = 0;
  3386                           
  3387                           ;incstack = 0
  3388  000E4A  9C9E               	bcf	3998,6,c	;volatile
  3389  000E4C  0012               	return		;funcret
  3390  000E4E                     __end_of_ADC_ISR:
  3391                           	opt stack 0
  3392                           pclatu	equ	0xFFB
  3393                           pclath	equ	0xFFA
  3394                           tblptru	equ	0xFF8
  3395                           tblptrh	equ	0xFF7
  3396                           tblptrl	equ	0xFF6
  3397                           tablat	equ	0xFF5
  3398                           prodh	equ	0xFF4
  3399                           prodl	equ	0xFF3
  3400                           intcon	equ	0xFF2
  3401                           intcon2	equ	0xFF1
  3402                           postinc0	equ	0xFEE
  3403                           fsr0h	equ	0xFEA
  3404                           fsr0l	equ	0xFE9
  3405                           wreg	equ	0xFE8
  3406                           fsr1h	equ	0xFE2
  3407                           fsr1l	equ	0xFE1
  3408                           indf2	equ	0xFDF
  3409                           postinc2	equ	0xFDE
  3410                           postdec2	equ	0xFDD
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           pclatu	equ	0xFFB
  3415                           pclath	equ	0xFFA
  3416                           tblptru	equ	0xFF8
  3417                           tblptrh	equ	0xFF7
  3418                           tblptrl	equ	0xFF6
  3419                           tablat	equ	0xFF5
  3420                           prodh	equ	0xFF4
  3421                           prodl	equ	0xFF3
  3422                           intcon	equ	0xFF2
  3423                           intcon2	equ	0xFF1
  3424                           postinc0	equ	0xFEE
  3425                           fsr0h	equ	0xFEA
  3426                           fsr0l	equ	0xFE9
  3427                           wreg	equ	0xFE8
  3428                           fsr1h	equ	0xFE2
  3429                           fsr1l	equ	0xFE1
  3430                           indf2	equ	0xFDF
  3431                           postinc2	equ	0xFDE
  3432                           postdec2	equ	0xFDD
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437                           	psect	rparam
  3438  0000                     pclatu	equ	0xFFB
  3439                           pclath	equ	0xFFA
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           intcon	equ	0xFF2
  3447                           intcon2	equ	0xFF1
  3448                           postinc0	equ	0xFEE
  3449                           fsr0h	equ	0xFEA
  3450                           fsr0l	equ	0xFE9
  3451                           wreg	equ	0xFE8
  3452                           fsr1h	equ	0xFE2
  3453                           fsr1l	equ	0xFE1
  3454                           indf2	equ	0xFDF
  3455                           postinc2	equ	0xFDE
  3456                           postdec2	equ	0xFDD
  3457                           fsr2h	equ	0xFDA
  3458                           fsr2l	equ	0xFD9
  3459                           status	equ	0xFD8


Data Sizes:
    Strings     16
    Constant    10
    Data        0
    BSS         145
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     27      81
    BANK0           160      9     101
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _PDUStartup->_EnableSlavePower
    _Update->_writeRegisters
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _StartUp595->_Clear595

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10495
                              _Delay
                         _PDUStartup
                  _SYSTEM_Initialize
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              19    17      2    1487
                                             26 COMRAM     1     1      0
                                              0 BANK0      9     7      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             15 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      44
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0    8170
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (2) _Update                                               0     0      0    1005
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    1942
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    1104
                                              0 BANK0      2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (3) _writeRegisters                                       4     4      0    1005
                                             23 COMRAM     4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                9     5      4     838
                                             14 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _EnableSlavePower                                     3     1      2    5148
                                             24 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (3) _SetPin595                                           10     4      6    4674
                                             14 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0      75
                                             15 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0       0
                                              0 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      9      65       4       63.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1B      51       1       85.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B6       9        0.0%
DATA                 0      0      B6      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Jun 01 22:39:26 2015

           _eusart1TxBufferRemaining 0051                                   l87 0CF2  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l405 0928                                  l407 092C  
                                l409 0930                                  l390 08A2  
                                l392 08A6                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 002F  
                    __end_of_ADC_ISR 0E4E                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                               l1031 0AB2                                 l2000 0870  
                               l1041 0C46                                 l2002 087A  
                               l2020 08F0                                 l2012 08AA  
                               l2004 087E                                 l2022 0906  
                               l2024 090A                                 l2008 089A  
                               l2112 0C3A                                 l2104 0C12  
                               l2032 0CE2                                 l2120 062A  
                               l1250 093E                                 l2018 08E4  
                               l2050 0CA6                                 l2106 0C1C  
                               l2130 0678                                 l2210 0AE0  
                               l1260 096E                                 l2060 0CD8  
                               l2108 0C24                                 l2044 0D16  
                               l2140 06AA                                 l2124 063E  
                               l2212 0AE4                                 l1254 0952  
                               l2054 0CB0                                 l2070 0A3E  
                               l2046 0D1A                                 l2150 06E8  
                               l2142 06B0                                 l2214 0AFA  
                               l2072 0A56                                 l2064 09F8  
                               l2160 0708                                 l2128 064E  
                               l2216 0AFE                                 l2208 0ACA  
                               l2074 0A5A                                 l2066 0A0E  
                               l2154 06EE                                 l2146 06BE  
                               l2068 0A26                                 l2084 0A76  
                               l2164 0758                                 l2086 0A80  
                               l2158 0702                                 l2166 0768  
                               l2096 0AA6                                 l2088 0A88  
                               l1760 0806                                 l1752 078E  
                               l1762 0824                                 l1754 07AC  
                               l1756 07CA                                 l1758 07E8  
                               l1766 0842                                 l1994 0C62  
                               l1998 0C7E                                 STR_1 060B  
                               u1207 0C68                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               i2l99 0D86                                 _TMR1 000FCE  
                               _WPUB 000F61                        _EUSART1_Write 0CDE  
                               _data 0019                                 _main 0ABC  
           __end_of_EnableSlavePower 086C                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 009E                        __CFG_IESO$OFF 000000  
                       ___param_bank 000010       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 0E30                                ?_main 0036  
                              _EEADR 000FA9                                _T1CON 000FCD  
                              _LATB0 007C50                                _LATA4 007C4C  
                              _LATD4 007C64                                _LATD5 007C65  
                              _LATD6 007C66                                _LATD7 007C67  
                     __CFG_DEBUG$OFF 000000                      __end_of___lwdiv 0ABC  
                    __end_of___lwmod 0C50                                i2l170 0064  
                              i2l164 004C                                i2l166 0058  
                        ?_PDUStartup 0036                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                              _Delay 0C50                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 0D5A  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     ??_writeRegisters 004D  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      _DATAEE_ReadByte 0E0C  
                     __CFG_EBTRB$OFF 000000                      __end_of_dpowers 060B  
                 __CFG_MCLRE$EXTMCLR 000000                                _putch 0E30  
                     ?_EUSART1_Write 0036                                tablat 000FF5  
                              status 000FD8                     __end_of_Clear595 0CDE  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                    __initialization 0DBC           __end_of_EUSART1_Initialize 0D5A  
                       __end_of_main 0B14                           _CurrentADC 0001  
                          ??_ADC_ISR 0036          ?_INTERRUPT_InterruptManager 0036  
                             ??_main 0051                        __activetblptr 000002  
                             ?_Delay 0044                ?_EUSART1_Transmit_ISR 0036  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _EEDATA 000FA8  
                             _EECON2 000FA7                               _ANSELA 000F38  
                             ?_putch 0036                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                               _T1GCON 000FCC  
                             _RC1STA 000FAB                               i2l1342 0D82  
                             Delay@i 0049                       __CFG_WDTEN$OFF 000000  
                             i2l1840 0DB8                               i2l1832 0D96  
                             _TABLAT 000FF5                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                __size_of_PDUStartup 0054                       __CFG_XINST$OFF 000000  
                             _Update 0E44                   __size_of_SetPin595 004E  
                     __CFG_STVREN$ON 000000                            ??___lwdiv 0048  
                          ??___lwmod 004F                               clear_0 0DC2  
                             clear_1 0DCE                               _printf 061C  
            __end_of_DATAEE_ReadByte 0E22                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                           _StartUp595 09F4  
                    ??_EUSART1_Write 0044                      _eusart1RxBuffer 0090  
      __size_of_INTERRUPT_Initialize 000A                      _eusart1TxBuffer 0025  
                  _SYSTEM_Initialize 0DF6                           __accesstop 0060  
            __end_of__initialization 0DD4                   ?_SYSTEM_Initialize 0036  
                      ___rparam_used 000001                        __end_of_Delay 0C9C  
                     __pcstackCOMRAM 0036                  ??_SYSTEM_Initialize 0044  
                      __end_of_putch 0E3A          __size_of_ComputeStorageData 00BE  
                        _Currentcomp 000D               ??_EUSART1_Transmit_ISR 0036  
                          ?_Clear595 0036                              ??_Delay 0048  
        __end_of_EUSART1_Receive_ISR 0DBC                    __end_of_SetPin595 0C04  
          __end_of_SYSTEM_Initialize 0E0C                              ??_putch 0045  
                      _eusart1RxHead 0032                        _eusart1TxHead 0034  
                      _eusart1RxTail 0033                           __pbssBANK0 0060  
                      _eusart1TxTail 0035                      __CFG_PLLCFG$OFF 000000  
                         __pnvCOMRAM 0051                    ?_EnableSlavePower 004E  
                 ??_EnableSlavePower 0050                   __CFG_CCP2MX$PORTC1 000000  
                            ?_Update 0036                   __CFG_CCP3MX$PORTB5 000000  
                            _ADC_ISR 0E4A                              ?_printf 00BC  
            __size_of_ADC_Initialize 0018                     ?_DATAEE_ReadByte 0036  
                       ??_PDUStartup 0051                           ??_Clear595 0051  
                            _OSCCON2 000FD2                              _TBLPTRH 000FF7  
                            _TBLPTRL 000FF6                              _TBLPTRU 000FF8  
                        ?_StartUp595 0036                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                            _Current 00B0                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                              __Lparam 0000  
                 __end_of_PDUStartup 0B68                      __size_of_Update 0006  
                            ___lwdiv 0A60                              ___lwmod 0C04  
                       __psmallconst 0600                              __pcinit 0DBC  
                            __ramtop 0600                              __ptext0 0ABC  
                            __ptext1 061C                              __ptext2 0E30  
                            __ptext3 0CDE                              __ptext4 0C04  
                            __ptext5 0A60                              __ptext6 0DF6  
                            __ptext7 0B68                              __ptext8 0E22  
                            __ptext9 0E3A                      __size_of_printf 016E  
                          _T1CONbits 000FCD                              _dpowers 0601  
              _OSCILLATOR_Initialize 0E22                   _EUSART1_Initialize 0D1E  
           ??_PIN_MANAGER_Initialize 0044                            Clear595@i 00BC  
         __size_of_SYSTEM_Initialize 0016                 end_of_initialization 0DD4  
                          Delay@wait 0044                  ?_EUSART1_Initialize 0036  
                      __Lmediumconst 0000                              printf@c 00C4  
                            printf@f 00BC                              postdec2 000FDD  
                __size_of_StartUp595 006C                              postinc0 000FEE  
                            postinc2 000FDE                         SetPin595@Reg 0044  
               ??_EUSART1_Initialize 0044                         SetPin595@pin 0046  
                EUSART1_Write@txData 0044              __size_of_writeRegisters 00CA  
       __end_of_INTERRUPT_Initialize 0E44                       __end_of_Update 0E4A  
                     _ADC_Initialize 0DDE               ?_OSCILLATOR_Initialize 0036  
                     __end_of_printf 078A                  start_initialization 0DBC  
    __size_of_PIN_MANAGER_Initialize 004E                EnableSlavePower@slave 0050  
                  __size_of_Clear595 0042                          putch@txData 0045  
              __end_of_EUSART1_Write 0D1E                            _SetPin595 0BB6  
                DATAEE_ReadByte@bAdd 0044                             ??_Update 0051  
             __end_of_ADC_Initialize 0DF6           __end_of_ComputeStorageData 09F4  
                           ?_ADC_ISR 0036                             ??_printf 0050  
          __size_of_EnableSlavePower 00E2                       _eusart1RxCount 0031  
                        __pbssCOMRAM 0001        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 00BC                         ??_StartUp595 0051  
       __size_of_EUSART1_Receive_ISR 0030                           ?_SetPin595 0044  
                   ___lwdiv@dividend 0044               _PIN_MANAGER_Initialize 0B68  
                          __pintcode 0008                   __end_of_StartUp595 0A60  
                           ?___lwdiv 0044                             ?___lwmod 004B  
                    ?_ADC_Initialize 0036         ??_INTERRUPT_InterruptManager 0036  
                           _BAUD1CON 000FB8                          __smallconst 0600  
                     __size_of_Delay 004C                     ___lwdiv@quotient 0049  
           __size_of_DATAEE_ReadByte 0016                       __size_of_putch 000A  
               _INTERRUPT_Initialize 0E3A                       _writeRegisters 086C  
                          _registers 0060                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 0096  
                           _PIR1bits 000F9E                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                     __size_of_ADC_ISR 0004  
                         _ADCON0bits 000FC2                           printf@flag 00C0  
                           _Clear595 0C9C                           printf@prec 00C1  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0036  
             __end_of_writeRegisters 0936                          ??_SetPin595 004A  
               EnableSlavePower@onof 004E                           _EECON1bits 000FA6  
                           __Hrparam 0000                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 0044          __size_of_EUSART1_Initialize 003C  
                   __size_of___lwdiv 005C                     __size_of___lwmod 004C  
                   _EnableSlavePower 078A                      ___lwdiv@divisor 0046  
                    ___lwdiv@counter 0048                             __ptext10 0D1E  
                           __ptext11 0DDE                             __ptext20 0936  
                           __ptext12 0B14                             __ptext21 0E0C  
                           __ptext13 0E44                           _T1GCONbits 000FCC  
                           __ptext14 09F4                             __ptext23 0D5A  
                           __ptext15 0C9C                             __ptext24 0D8C  
                           __ptext16 086C                             __ptext25 0E4A  
                           __ptext17 0C50                             __ptext18 078A  
                           __ptext19 0BB6                      ?_writeRegisters 0036  
                      __size_of_main 0058                             _readwhat 002D  
                  ??_DATAEE_ReadByte 0044                           _RC1STAbits 000FAB  
                  writeRegisters@val 004D   __end_of_INTERRUPT_InterruptManager 009E  
         _INTERRUPT_InterruptManager 0008                            printf@val 00C2  
                _EUSART1_Receive_ISR 0D8C                           _INTCONbits 000FF2  
                ComputeStorageData@i 0047                   _ComputeStorageData 0936  
             ??_INTERRUPT_Initialize 0044                             intlevel2 0000  
               ?_EUSART1_Receive_ISR 0036                     ___lwmod@dividend 004B  
                ?_ComputeStorageData 0036              ?_PIN_MANAGER_Initialize 0036  
                     SetPin595@value 0048         __end_of_EUSART1_Transmit_ISR 0D8C  
                   ??_ADC_Initialize 0044                             printf@ap 00BE  
             __size_of_EUSART1_Write 0040                 ??_ComputeStorageData 0045  
                         _PDUStartup 0B14                      ___lwmod@divisor 004D  
                    ___lwmod@counter 004F                    __CFG_T3CMX$PORTC0 000000  
                    writeRegisters@i 004F                ??_EUSART1_Receive_ISR 0036  
     __end_of_PIN_MANAGER_Initialize 0BB6                    __CFG_FOSC$INTIO67 000000  
