

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Jun 02 18:42:23 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           	psect	idataCOMRAM
    73  001BAA                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _Transmit_stall
    77  001BAA  01                 	db	1
    78  0000                     _ANSELA	set	3896
    79  0000                     _ANSELB	set	3897
    80  0000                     _ANSELC	set	3898
    81  0000                     _ANSELCbits	set	3898
    82  0000                     _ANSELD	set	3899
    83  0000                     _ANSELE	set	3900
    84  0000                     _TMR1	set	4046
    85  0000                     _ADCON0	set	4034
    86  0000                     _ADCON0bits	set	4034
    87  0000                     _ADCON1	set	4033
    88  0000                     _ADCON2	set	4032
    89  0000                     _ADRESH	set	4036
    90  0000                     _ADRESL	set	4035
    91  0000                     _BAUD1CON	set	4024
    92  0000                     _EEADR	set	4009
    93  0000                     _EECON1bits	set	4006
    94  0000                     _EECON2	set	4007
    95  0000                     _EEDATA	set	4008
    96  0000                     _INTCON2bits	set	4081
    97  0000                     _INTCONbits	set	4082
    98  0000                     _IPR1bits	set	3999
    99  0000                     _LATA	set	3977
   100  0000                     _LATB	set	3978
   101  0000                     _LATC	set	3979
   102  0000                     _LATCbits	set	3979
   103  0000                     _LATD	set	3980
   104  0000                     _LATE	set	3981
   105  0000                     _OSCCON	set	4051
   106  0000                     _OSCCON2	set	4050
   107  0000                     _OSCTUNE	set	3995
   108  0000                     _PIE1bits	set	3997
   109  0000                     _PIR1bits	set	3998
   110  0000                     _RC1STA	set	4011
   111  0000                     _RC1STAbits	set	4011
   112  0000                     _RCONbits	set	4048
   113  0000                     _RCREG1	set	4014
   114  0000                     _SPBRG1	set	4015
   115  0000                     _SPBRGH1	set	4016
   116  0000                     _T1CON	set	4045
   117  0000                     _T1CONbits	set	4045
   118  0000                     _T1GCON	set	4044
   119  0000                     _T1GCONbits	set	4044
   120  0000                     _TABLAT	set	4085
   121  0000                     _TBLPTRH	set	4087
   122  0000                     _TBLPTRL	set	4086
   123  0000                     _TBLPTRU	set	4088
   124  0000                     _TMR1H	set	4047
   125  0000                     _TMR1L	set	4046
   126  0000                     _TRISA	set	3986
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISC	set	3988
   129  0000                     _TRISCbits	set	3988
   130  0000                     _TRISD	set	3989
   131  0000                     _TRISE	set	3990
   132  0000                     _TX1STA	set	4012
   133  0000                     _TXREG1	set	4013
   134  0000                     _WPUB	set	3937
   135  0000                     _LATB0	set	31824
   136  0000                     _LATD4	set	31844
   137  0000                     _LATD5	set	31845
   138  0000                     _LATD6	set	31846
   139  0000                     _LATD7	set	31847
   140                           
   141                           ; #config settings
   142  0000                     
   143                           	psect	cinit
   144  001608                     __pcinit:
   145                           	opt stack 0
   146  001608                     start_initialization:
   147                           	opt stack 0
   148  001608                     __initialization:
   149                           	opt stack 0
   150                           
   151                           ; Clear objects allocated to BANK4 (206 bytes)
   152  001608  EE04  F000         	lfsr	0,__pbssBANK4
   153  00160C  0ECE               	movlw	206
   154  00160E                     clear_0:
   155  00160E  6AEE               	clrf	postinc0,c
   156  001610  06E8               	decf	wreg,f,c
   157  001612  E1FD               	bnz	clear_0
   158                           
   159                           ; Clear objects allocated to BANK3 (206 bytes)
   160  001614  EE03  F000         	lfsr	0,__pbssBANK3
   161  001618  0ECE               	movlw	206
   162  00161A                     clear_1:
   163  00161A  6AEE               	clrf	postinc0,c
   164  00161C  06E8               	decf	wreg,f,c
   165  00161E  E1FD               	bnz	clear_1
   166                           
   167                           ; Clear objects allocated to BANK2 (200 bytes)
   168  001620  EE02  F000         	lfsr	0,__pbssBANK2
   169  001624  0EC8               	movlw	200
   170  001626                     clear_2:
   171  001626  6AEE               	clrf	postinc0,c
   172  001628  06E8               	decf	wreg,f,c
   173  00162A  E1FD               	bnz	clear_2
   174                           
   175                           ; Clear objects allocated to BANK1 (206 bytes)
   176  00162C  EE01  F000         	lfsr	0,__pbssBANK1
   177  001630  0ECE               	movlw	206
   178  001632                     clear_3:
   179  001632  6AEE               	clrf	postinc0,c
   180  001634  06E8               	decf	wreg,f,c
   181  001636  E1FD               	bnz	clear_3
   182                           
   183                           ; Clear objects allocated to BANK0 (157 bytes)
   184  001638  EE00  F060         	lfsr	0,__pbssBANK0
   185  00163C  0E9D               	movlw	157
   186  00163E                     clear_4:
   187  00163E  6AEE               	clrf	postinc0,c
   188  001640  06E8               	decf	wreg,f,c
   189  001642  E1FD               	bnz	clear_4
   190                           
   191                           ; Clear objects allocated to COMRAM (30 bytes)
   192  001644  EE00  F027         	lfsr	0,__pbssCOMRAM
   193  001648  0E1E               	movlw	30
   194  00164A                     clear_5:
   195  00164A  6AEE               	clrf	postinc0,c
   196  00164C  06E8               	decf	wreg,f,c
   197  00164E  E1FD               	bnz	clear_5
   198                           
   199                           ; Initialize objects allocated to COMRAM (1 bytes)
   200                           ; load TBLPTR registers with __pidataCOMRAM
   201  001650  0EAA               	movlw	low __pidataCOMRAM
   202  001652  6EF6               	movwf	tblptrl,c
   203  001654  0E1B               	movlw	high __pidataCOMRAM
   204  001656  6EF7               	movwf	tblptrh,c
   205  001658  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   206  00165A  6EF8               	movwf	tblptru,c
   207  00165C  0009               	tblrd		*+	;fetch initializer
   208  00165E  CFF5 F045          	movff	tablat,__pdataCOMRAM
   209  001662                     end_of_initialization:
   210                           	opt stack 0
   211  001662                     __end_of__initialization:
   212                           	opt stack 0
   213  001662  0E00               	movlw	low (__Lmediumconst shr (0+16))
   214  001664  6EF8               	movwf	tblptru,c
   215  001666  0100               	movlb	0
   216  001668  EF6C  F00D         	goto	_main	;jump to C main() function
   217                           tblptru	equ	0xFF8
   218                           tblptrh	equ	0xFF7
   219                           tblptrl	equ	0xFF6
   220                           tablat	equ	0xFF5
   221                           postinc0	equ	0xFEE
   222                           wreg	equ	0xFE8
   223                           
   224                           	psect	bssCOMRAM
   225  000027                     __pbssCOMRAM:
   226                           	opt stack 0
   227  000027                     _alignErrorCounter:
   228                           	opt stack 0
   229  000027                     	ds	2
   230  000029                     _crcErrorCounter:
   231                           	opt stack 0
   232  000029                     	ds	2
   233  00002B                     _readwhat:
   234                           	opt stack 0
   235  00002B                     	ds	2
   236  00002D                     _receiveArrayAddress:
   237                           	opt stack 0
   238  00002D                     	ds	2
   239  00002F                     _sendStructAddress:
   240                           	opt stack 0
   241  00002F                     	ds	2
   242  000031                     _serial_available:
   243                           	opt stack 0
   244  000031                     	ds	2
   245  000033                     _serial_peek:
   246                           	opt stack 0
   247  000033                     	ds	2
   248  000035                     _serial_read:
   249                           	opt stack 0
   250  000035                     	ds	2
   251  000037                     _serial_write:
   252                           	opt stack 0
   253  000037                     	ds	2
   254  000039                     _timer1ReloadVal:
   255                           	opt stack 0
   256  000039                     	ds	2
   257  00003B                     _AKNAKsend:
   258                           	opt stack 0
   259  00003B                     	ds	1
   260  00003C                     _calc_CS:
   261                           	opt stack 0
   262  00003C                     	ds	1
   263  00003D                     _maxDataAddress:
   264                           	opt stack 0
   265  00003D                     	ds	1
   266  00003E                     _moduleAddress:
   267                           	opt stack 0
   268  00003E                     	ds	1
   269  00003F                     _returnAddress:
   270                           	opt stack 0
   271  00003F                     	ds	1
   272  000040                     _rx_address:
   273                           	opt stack 0
   274  000040                     	ds	1
   275  000041                     _rx_array_inx:
   276                           	opt stack 0
   277  000041                     	ds	1
   278  000042                     _rx_len:
   279                           	opt stack 0
   280  000042                     	ds	1
   281  000043                     _group:
   282                           	opt stack 0
   283  000043                     	ds	2
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	dataCOMRAM
   292  000045                     __pdataCOMRAM:
   293                           	opt stack 0
   294  000045                     _Transmit_stall:
   295                           	opt stack 0
   296  000045                     	ds	1
   297                           tblptru	equ	0xFF8
   298                           tblptrh	equ	0xFF7
   299                           tblptrl	equ	0xFF6
   300                           tablat	equ	0xFF5
   301                           postinc0	equ	0xFEE
   302                           wreg	equ	0xFE8
   303                           
   304                           	psect	bssBANK0
   305  000060                     __pbssBANK0:
   306                           	opt stack 0
   307  000060                     _registers:
   308                           	opt stack 0
   309  000060                     	ds	48
   310  000090                     _Current:
   311                           	opt stack 0
   312  000090                     	ds	12
   313  00009C                     _CurrentADC:
   314                           	opt stack 0
   315  00009C                     	ds	12
   316  0000A8                     _Currentcomp:
   317                           	opt stack 0
   318  0000A8                     	ds	12
   319  0000B4                     _data:
   320                           	opt stack 0
   321  0000B4                     	ds	12
   322  0000C0                     _addressErrorCounter:
   323                           	opt stack 0
   324  0000C0                     	ds	2
   325  0000C2                     _dataAdressErrorCounter:
   326                           	opt stack 0
   327  0000C2                     	ds	2
   328  0000C4                     _receiveArray:
   329                           	opt stack 0
   330  0000C4                     	ds	40
   331  0000EC                     _crc_buffer:
   332                           	opt stack 0
   333  0000EC                     	ds	17
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           
   341                           	psect	bssBANK1
   342  000100                     __pbssBANK1:
   343                           	opt stack 0
   344  000100                     _ring_buffer:
   345                           	opt stack 0
   346  000100                     	ds	206
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           
   354                           	psect	bssBANK2
   355  000200                     __pbssBANK2:
   356                           	opt stack 0
   357  000200                     _rx_buffer:
   358                           	opt stack 0
   359  000200                     	ds	200
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           
   367                           	psect	bssBANK3
   368  000300                     __pbssBANK3:
   369                           	opt stack 0
   370  000300                     _input_buffer:
   371                           	opt stack 0
   372  000300                     	ds	206
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           
   380                           	psect	bssBANK4
   381  000400                     __pbssBANK4:
   382                           	opt stack 0
   383  000400                     _output_buffer:
   384                           	opt stack 0
   385  000400                     	ds	206
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           
   393                           	psect	cstackBANK1
   394  0001CE                     __pcstackBANK1:
   395                           	opt stack 0
   396  0001CE                     sendData@whereToSend:
   397                           	opt stack 0
   398  0001CE                     CRCcheck@SentCRC:
   399                           	opt stack 0
   400  0001CE                     writeRegisters@val:
   401                           	opt stack 0
   402  0001CE                     begin@ptr:
   403                           	opt stack 0
   404  0001CE                     ToSend@what:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x0
   408  0001CE                     	ds	1
   409  0001CF                     sendData@CS:
   410                           	opt stack 0
   411  0001CF                     CRCcheck@calculatedCRC:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x1
   415  0001CF                     	ds	1
   416  0001D0                     begin@maxSize:
   417                           	opt stack 0
   418  0001D0                     writeRegisters@i:
   419                           	opt stack 0
   420  0001D0                     sendData@i:
   421                           	opt stack 0
   422  0001D0                     CRCcheck@arrayHolder:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x2
   426  0001D0                     	ds	1
   427  0001D1                     begin@givenAddress:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x3
   431  0001D1                     	ds	1
   432  0001D2                     begin@error:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x4
   436  0001D2                     	ds	1
   437  0001D3                     begin@stufftosend:
   438                           	opt stack 0
   439  0001D3                     CRCcheck@rt:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x5
   443  0001D3                     	ds	2
   444  0001D5                     ??_receiveData:
   445  0001D5                     begin@stufftoreceive:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x7
   449  0001D5                     	ds	2
   450  0001D7                     begin@stuffavailable:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x9
   454  0001D7                     	ds	2
   455  0001D9                     begin@stuffpeek:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0xB
   459  0001D9                     	ds	2
   460  0001DB                     receiveData@holder:
   461                           	opt stack 0
   462                           
   463                           ; 3 bytes @ 0xD
   464  0001DB                     	ds	3
   465  0001DE                     receiveData@holder_1525:
   466                           	opt stack 0
   467                           
   468                           ; 3 bytes @ 0x10
   469  0001DE                     	ds	3
   470  0001E1                     receiveData@crcHolder:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x13
   474  0001E1                     	ds	1
   475  0001E2                     receiveData@crcHolder_1526:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x14
   479  0001E2                     	ds	1
   480  0001E3                     receiveData@u:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x15
   484  0001E3                     	ds	2
   485  0001E5                     receiveData@r:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x17
   489  0001E5                     	ds	2
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           postinc0	equ	0xFEE
   495                           wreg	equ	0xFE8
   496                           
   497                           	psect	cstackBANK0
   498  0000FD                     __pcstackBANK0:
   499                           	opt stack 0
   500  0000FD                     ??_FastTransfer_buffer_put:
   501  0000FD                     ??_sendData:
   502  0000FD                     EnableSlavePower@slave:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x0
   506  0000FD                     	ds	2
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           
   514                           	psect	cstackCOMRAM
   515  000001                     __pcstackCOMRAM:
   516                           	opt stack 0
   517  000001                     ?i2_UART_buff_size:
   518                           	opt stack 0
   519  000001                     ?i2_UART_buff_modulo_inc:
   520                           	opt stack 0
   521  000001                     i2UART_buff_size@_this:
   522                           	opt stack 0
   523  000001                     i2UART_buff_modulo_inc@value:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x0
   527  000001                     	ds	2
   528  000003                     i2UART_buff_modulo_inc@modulus:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x2
   532  000003                     	ds	2
   533  000005                     i2UART_buff_modulo_inc@my_value:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x4
   537  000005                     	ds	2
   538  000007                     i2UART_buff_put@_this:
   539                           	opt stack 0
   540  000007                     i2UART_buff_get@_this:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x6
   544  000007                     	ds	2
   545  000009                     ??i2_UART_buff_get:
   546  000009                     i2UART_buff_put@c:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x8
   550  000009                     	ds	1
   551  00000A                     ??i2_UART_buff_put:
   552                           
   553                           ; 0 bytes @ 0x9
   554  00000A                     	ds	1
   555  00000B                     i2UART_buff_get@c:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0xA
   559  00000B                     	ds	1
   560  00000C                     EUSART1_Receive_ISR@data:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0xB
   564  00000C                     	ds	1
   565  00000D                     ??_INTERRUPT_InterruptManager:
   566                           
   567                           ; 0 bytes @ 0xC
   568  00000D                     	ds	14
   569  00001B                     ?_UART_buff_modulo_inc:
   570                           	opt stack 0
   571  00001B                     ?_FastTransfer_buffer_modulo_inc:
   572                           	opt stack 0
   573  00001B                     ?_UART_buff_size:
   574                           	opt stack 0
   575  00001B                     ?___awdiv:
   576                           	opt stack 0
   577  00001B                     DATAEE_ReadByte@bAdd:
   578                           	opt stack 0
   579  00001B                     SetPin595@Reg:
   580                           	opt stack 0
   581  00001B                     UART_buff_size@_this:
   582                           	opt stack 0
   583  00001B                     UART_buff_modulo_inc@value:
   584                           	opt stack 0
   585  00001B                     UART_buff_peek@_this:
   586                           	opt stack 0
   587  00001B                     CRC8@data:
   588                           	opt stack 0
   589  00001B                     FastTransfer_buffer_modulo_inc@value:
   590                           	opt stack 0
   591  00001B                     crcBufS_put@_this:
   592                           	opt stack 0
   593  00001B                     crcBufS_status_put@_this:
   594                           	opt stack 0
   595  00001B                     crcBufS_get@_this:
   596                           	opt stack 0
   597  00001B                     ___awdiv@dividend:
   598                           	opt stack 0
   599  00001B                     memset@p1:
   600                           	opt stack 0
   601  00001B                     Delay@wait:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x1A
   605  00001B                     	ds	1
   606  00001C                     ??_ComputeStorageData:
   607                           
   608                           ; 0 bytes @ 0x1B
   609  00001C                     	ds	1
   610  00001D                     ??_UART_buff_peek:
   611  00001D                     ?_Receive_available:
   612                           	opt stack 0
   613  00001D                     CRC8@len:
   614                           	opt stack 0
   615  00001D                     crcBufS_put@address:
   616                           	opt stack 0
   617  00001D                     crcBufS_status_put@time:
   618                           	opt stack 0
   619  00001D                     crcBufS_get@time:
   620                           	opt stack 0
   621  00001D                     SetPin595@pin:
   622                           	opt stack 0
   623  00001D                     UART_buff_modulo_inc@modulus:
   624                           	opt stack 0
   625  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   626                           	opt stack 0
   627  00001D                     ___awdiv@divisor:
   628                           	opt stack 0
   629  00001D                     memset@c:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x1C
   633  00001D                     	ds	1
   634  00001E                     CRC8@sum:
   635                           	opt stack 0
   636  00001E                     crcBufS_put@oldCRC:
   637                           	opt stack 0
   638  00001E                     crcBufS_status_put@status:
   639                           	opt stack 0
   640  00001E                     crcBufS_get@space:
   641                           	opt stack 0
   642  00001E                     ComputeStorageData@i:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x1D
   646  00001E                     	ds	1
   647  00001F                     ??_Delay:
   648  00001F                     ??_crcBufS_get:
   649  00001F                     ??_crcBufS_status_put:
   650  00001F                     CRC8@extract:
   651                           	opt stack 0
   652  00001F                     crcBufS_put@status:
   653                           	opt stack 0
   654  00001F                     ___awdiv@counter:
   655                           	opt stack 0
   656  00001F                     SetPin595@value:
   657                           	opt stack 0
   658  00001F                     UART_buff_modulo_inc@my_value:
   659                           	opt stack 0
   660  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   661                           	opt stack 0
   662  00001F                     memset@n:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x1E
   666  00001F                     	ds	1
   667  000020                     ??_crcBufS_put:
   668  000020                     CRC8@tempI:
   669                           	opt stack 0
   670  000020                     ___awdiv@sign:
   671                           	opt stack 0
   672  000020                     Delay@i:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x1F
   676  000020                     	ds	1
   677  000021                     ??_SetPin595:
   678  000021                     CRC8@crc:
   679                           	opt stack 0
   680  000021                     UART_buff_put@_this:
   681                           	opt stack 0
   682  000021                     UART_buff_get@_this:
   683                           	opt stack 0
   684  000021                     FastTransfer_buffer_put@_this:
   685                           	opt stack 0
   686  000021                     ___awdiv@quotient:
   687                           	opt stack 0
   688  000021                     memset@p:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x20
   692  000021                     	ds	2
   693  000023                     ??_UART_buff_get:
   694  000023                     UART_buff_put@c:
   695                           	opt stack 0
   696  000023                     FastTransfer_buffer_put@towhere:
   697                           	opt stack 0
   698  000023                     UART_buff_init@_this:
   699                           	opt stack 0
   700  000023                     FastTransfer_buffer_flush@_this:
   701                           	opt stack 0
   702  000023                     crcBufS_status_put@wantedTime:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x22
   706  000023                     	ds	1
   707  000024                     ??_UART_buff_put:
   708  000024                     Clear595@i:
   709                           	opt stack 0
   710  000024                     FastTransfer_buffer_put@towhat:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x23
   714  000024                     	ds	1
   715  000025                     UART_buff_get@c:
   716                           	opt stack 0
   717  000025                     EnableSlavePower@onof:
   718                           	opt stack 0
   719  000025                     FastTransfer_buffer_flush@clearBuffer:
   720                           	opt stack 0
   721  000025                     crcBufS_get@wantedTime:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0x24
   725  000025                     	ds	1
   726  000026                     Send_put@_data:
   727                           	opt stack 0
   728  000026                     ToSend@where:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x25
   732  000026                     	ds	1
   733  000027                     tblptru	equ	0xFF8
   734                           tblptrh	equ	0xFF7
   735                           tblptrl	equ	0xFF6
   736                           tablat	equ	0xFF5
   737                           postinc0	equ	0xFEE
   738                           wreg	equ	0xFE8
   739                           
   740                           ; 0 bytes @ 0x26
   741 ;;
   742 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   743 ;;
   744 ;; *************** function _main *****************
   745 ;; Defined at:
   746 ;;		line 10 in file "main.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;		None
   749 ;; Auto vars:     Size  Location     Type
   750 ;;		None
   751 ;; Return value:  Size  Location     Type
   752 ;;		None               void
   753 ;; Registers used:
   754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   760 ;;      Params:         0       0       0       0       0       0       0
   761 ;;      Locals:         0       0       0       0       0       0       0
   762 ;;      Temps:          0       0       0       0       0       0       0
   763 ;;      Totals:         0       0       0       0       0       0       0
   764 ;;Total ram usage:        0 bytes
   765 ;; Hardware stack levels required when called:   10
   766 ;; This function calls:
   767 ;;		_PDUStartup
   768 ;;		_SYSTEM_Initialize
   769 ;;		_updateComms
   770 ;; This function is called by:
   771 ;;		Startup code after reset
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           	psect	text0
   776  001AD8                     __ptext0:
   777                           	opt stack 0
   778  001AD8                     _main:
   779                           	opt stack 21
   780                           
   781                           ;main.c: 12: SYSTEM_Initialize();
   782                           
   783                           ;incstack = 0
   784  001AD8  EC9D  F00A         	call	_SYSTEM_Initialize	;wreg free
   785                           
   786                           ;main.c: 13: PDUStartup();
   787  001ADC  EC94  F00B         	call	_PDUStartup	;wreg free
   788                           
   789                           ;main.c: 31: (INTCONbits.GIE = 1);
   790  001AE0  8EF2               	bsf	intcon,7,c	;volatile
   791                           
   792                           ;main.c: 34: (INTCONbits.PEIE = 1);
   793  001AE2  8CF2               	bsf	intcon,6,c	;volatile
   794                           
   795                           ;main.c: 42: LATCbits.LATC5 = 0;
   796  001AE4  9A8B               	bcf	3979,5,c	;volatile
   797  001AE6  D000               	goto	l3750
   798  001AE8                     l3750:
   799                           
   800                           ;main.c: 50: updateComms();
   801  001AE8  EC31  F00D         	call	_updateComms	;wreg free
   802  001AEC  D7FD               	goto	l3750
   803  001AEE  EF4F  F000         	goto	start
   804  001AF2                     __end_of_main:
   805                           	opt stack 0
   806                           tblptru	equ	0xFF8
   807                           tblptrh	equ	0xFF7
   808                           tblptrl	equ	0xFF6
   809                           tablat	equ	0xFF5
   810                           intcon	equ	0xFF2
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           
   814 ;; *************** function _updateComms *****************
   815 ;; Defined at:
   816 ;;		line 20 in file "Communications.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;		None
   819 ;; Auto vars:     Size  Location     Type
   820 ;;		None
   821 ;; Return value:  Size  Location     Type
   822 ;;		None               void
   823 ;; Registers used:
   824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   825 ;; Tracked objects:
   826 ;;		On entry : 0/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   830 ;;      Params:         0       0       0       0       0       0       0
   831 ;;      Locals:         0       0       0       0       0       0       0
   832 ;;      Temps:          0       0       0       0       0       0       0
   833 ;;      Totals:         0       0       0       0       0       0       0
   834 ;;Total ram usage:        0 bytes
   835 ;; Hardware stack levels used:    1
   836 ;; Hardware stack levels required when called:    9
   837 ;; This function calls:
   838 ;;		_receiveData
   839 ;;		_respondECU
   840 ;; This function is called by:
   841 ;;		_main
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text1
   846  001A62                     __ptext1:
   847                           	opt stack 0
   848  001A62                     _updateComms:
   849                           	opt stack 21
   850                           
   851                           ;Communications.c: 21: if (receiveData()) {
   852                           
   853                           ;incstack = 0
   854  001A62  EC51  F000         	call	_receiveData	;wreg free
   855  001A66  0900               	iorlw	0
   856  001A68  B4D8               	btfsc	status,2,c
   857  001A6A  0012               	return	
   858                           
   859                           ;Communications.c: 22: if (receiveArray[0] == 1) {
   860  001A6C  0100               	movlb	0	; () banked
   861  001A6E  05C4               	decf	_receiveArray& (0+255),w,b	;volatile
   862  001A70  0100               	movlb	0	; () banked
   863  001A72  11C5               	iorwf	(_receiveArray+1)& (0+255),w,b	;volatile
   864  001A74  A4D8               	btfss	status,2,c
   865  001A76  0012               	return	
   866                           
   867                           ; BSR set to: 0
   868                           ;Communications.c: 23: respondECU();
   869  001A78  EC34  F00C         	call	_respondECU	;wreg free
   870  001A7C  0012               	return	
   871  001A7E  0012               	return		;funcret
   872  001A80                     __end_of_updateComms:
   873                           	opt stack 0
   874                           tblptru	equ	0xFF8
   875                           tblptrh	equ	0xFF7
   876                           tblptrl	equ	0xFF6
   877                           tablat	equ	0xFF5
   878                           intcon	equ	0xFF2
   879                           postinc0	equ	0xFEE
   880                           wreg	equ	0xFE8
   881                           status	equ	0xFD8
   882                           
   883 ;; *************** function _respondECU *****************
   884 ;; Defined at:
   885 ;;		line 28 in file "Communications.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;		None
   888 ;; Auto vars:     Size  Location     Type
   889 ;;		None
   890 ;; Return value:  Size  Location     Type
   891 ;;		None               void
   892 ;; Registers used:
   893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   899 ;;      Params:         0       0       0       0       0       0       0
   900 ;;      Locals:         0       0       0       0       0       0       0
   901 ;;      Temps:          0       0       0       0       0       0       0
   902 ;;      Totals:         0       0       0       0       0       0       0
   903 ;;Total ram usage:        0 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; Hardware stack levels required when called:    8
   906 ;; This function calls:
   907 ;;		_Delay
   908 ;;		_ToSend
   909 ;;		_sendData
   910 ;; This function is called by:
   911 ;;		_updateComms
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text2
   916  001868                     __ptext2:
   917                           	opt stack 0
   918  001868                     _respondECU:
   919                           	opt stack 21
   920                           
   921                           ;Communications.c: 29: LATCbits.LATC5 = 1;
   922                           
   923                           ;incstack = 0
   924  001868  8A8B               	bsf	3979,5,c	;volatile
   925                           
   926                           ;Communications.c: 30: ToSend(0, 5);
   927  00186A  0E00               	movlw	0
   928  00186C  0101               	movlb	1	; () banked
   929  00186E  6FCF               	movwf	(ToSend@what+1)& (0+255),b
   930  001870  0E05               	movlw	5
   931  001872  6FCE               	movwf	ToSend@what& (0+255),b
   932  001874  0E00               	movlw	0
   933  001876  EC5E  F00D         	call	_ToSend
   934                           
   935                           ;Communications.c: 31: Delay(3);
   936  00187A  0E03               	movlw	3
   937  00187C  6E1B               	movwf	Delay@wait,c
   938  00187E  0E00               	movlw	0
   939  001880  6E1C               	movwf	Delay@wait+1,c
   940  001882  0E00               	movlw	0
   941  001884  6E1D               	movwf	Delay@wait+2,c
   942  001886  0E00               	movlw	0
   943  001888  6E1E               	movwf	Delay@wait+3,c
   944  00188A  EC0E  F00C         	call	_Delay	;wreg free
   945                           
   946                           ;Communications.c: 33: sendData(1);
   947  00188E  0E01               	movlw	1
   948  001890  EC28  F005         	call	_sendData
   949                           
   950                           ;Communications.c: 34: Delay(3);
   951  001894  0E03               	movlw	3
   952  001896  6E1B               	movwf	Delay@wait,c
   953  001898  0E00               	movlw	0
   954  00189A  6E1C               	movwf	Delay@wait+1,c
   955  00189C  0E00               	movlw	0
   956  00189E  6E1D               	movwf	Delay@wait+2,c
   957  0018A0  0E00               	movlw	0
   958  0018A2  6E1E               	movwf	Delay@wait+3,c
   959  0018A4  EC0E  F00C         	call	_Delay	;wreg free
   960                           
   961                           ;Communications.c: 35: LATCbits.LATC5 = 0;
   962  0018A8  9A8B               	bcf	3979,5,c	;volatile
   963  0018AA  0012               	return		;funcret
   964  0018AC                     __end_of_respondECU:
   965                           	opt stack 0
   966                           tblptru	equ	0xFF8
   967                           tblptrh	equ	0xFF7
   968                           tblptrl	equ	0xFF6
   969                           tablat	equ	0xFF5
   970                           intcon	equ	0xFF2
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           status	equ	0xFD8
   974                           
   975 ;; *************** function _sendData *****************
   976 ;; Defined at:
   977 ;;		line 53 in file "FastTransfer.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;  whereToSend     1    wreg     unsigned char 
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  whereToSend     1    0[BANK1 ] unsigned char 
   982 ;;  i               2    2[BANK1 ] int 
   983 ;;  CS              1    1[BANK1 ] unsigned char 
   984 ;; Return value:  Size  Location     Type
   985 ;;		None               void
   986 ;; Registers used:
   987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   993 ;;      Params:         0       0       0       0       0       0       0
   994 ;;      Locals:         0       0       4       0       0       0       0
   995 ;;      Temps:          0       1       0       0       0       0       0
   996 ;;      Totals:         0       1       4       0       0       0       0
   997 ;;Total ram usage:        5 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    7
  1000 ;; This function calls:
  1001 ;;		Absolute function
  1002 ;;		_CRC8
  1003 ;;		_FastTransfer_buffer_flush
  1004 ;;		_Send_put
  1005 ;;		_crcBufS_put
  1006 ;; This function is called by:
  1007 ;;		_respondECU
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           	psect	text3
  1012  000A50                     __ptext3:
  1013                           	opt stack 0
  1014  000A50                     _sendData:
  1015                           	opt stack 21
  1016                           
  1017                           ;incstack = 0
  1018                           ;sendData@whereToSend stored from wreg
  1019  000A50  0101               	movlb	1	; () banked
  1020  000A52  6FCE               	movwf	sendData@whereToSend& (0+255),b
  1021                           
  1022                           ; BSR set to: 1
  1023                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1024  000A54  C02F  F01B         	movff	_sendStructAddress,CRC8@data
  1025  000A58  C030  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1026  000A5C  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1027  000A60  ECBE  F00B         	call	_CRC8	;wreg free
  1028  000A64  0101               	movlb	1	; () banked
  1029  000A66  6FCF               	movwf	sendData@CS& (0+255),b
  1030                           
  1031                           ; BSR set to: 1
  1032                           ;FastTransfer.c: 58: serial_write(0x06);
  1033  000A68  D801               	call	u2898
  1034  000A6A  D00B               	goto	l3400
  1035  000A6C                     u2898:
  1036  000A6C  0005               	push	
  1037  000A6E  6EFA               	movwf	pclath,c
  1038  000A70  5037               	movf	_serial_write,w,c
  1039  000A72  6EFD               	movwf	tosl,c
  1040  000A74  5038               	movf	_serial_write+1,w,c
  1041  000A76  6EFE               	movwf	tosh,c
  1042  000A78  50F8               	movf	tblptru,w,c
  1043  000A7A  6EFF               	movwf	tosu,c
  1044  000A7C  50FA               	movf	pclath,w,c
  1045  000A7E  0E06               	movlw	6
  1046  000A80  0012               	return		;indir
  1047  000A82                     l3400:
  1048                           
  1049                           ;FastTransfer.c: 59: serial_write(0x85);
  1050  000A82  D801               	call	u2908
  1051  000A84  D00B               	goto	l3402
  1052  000A86                     u2908:
  1053  000A86  0005               	push	
  1054  000A88  6EFA               	movwf	pclath,c
  1055  000A8A  5037               	movf	_serial_write,w,c
  1056  000A8C  6EFD               	movwf	tosl,c
  1057  000A8E  5038               	movf	_serial_write+1,w,c
  1058  000A90  6EFE               	movwf	tosh,c
  1059  000A92  50F8               	movf	tblptru,w,c
  1060  000A94  6EFF               	movwf	tosu,c
  1061  000A96  50FA               	movf	pclath,w,c
  1062  000A98  0E85               	movlw	133
  1063  000A9A  0012               	return		;indir
  1064  000A9C                     l3402:
  1065                           
  1066                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1067  000A9C  D801               	call	u2918
  1068  000A9E  D00C               	goto	l3404
  1069  000AA0                     u2918:
  1070  000AA0  0005               	push	
  1071  000AA2  6EFA               	movwf	pclath,c
  1072  000AA4  5037               	movf	_serial_write,w,c
  1073  000AA6  6EFD               	movwf	tosl,c
  1074  000AA8  5038               	movf	_serial_write+1,w,c
  1075  000AAA  6EFE               	movwf	tosh,c
  1076  000AAC  50F8               	movf	tblptru,w,c
  1077  000AAE  6EFF               	movwf	tosu,c
  1078  000AB0  50FA               	movf	pclath,w,c
  1079  000AB2  0101               	movlb	1	; () banked
  1080  000AB4  51CE               	movf	sendData@whereToSend& (0+255),w,b
  1081  000AB6  0012               	return		;indir
  1082  000AB8                     l3404:
  1083                           
  1084                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1085  000AB8  D801               	call	u2928
  1086  000ABA  D00B               	goto	l3406
  1087  000ABC                     u2928:
  1088  000ABC  0005               	push	
  1089  000ABE  6EFA               	movwf	pclath,c
  1090  000AC0  5037               	movf	_serial_write,w,c
  1091  000AC2  6EFD               	movwf	tosl,c
  1092  000AC4  5038               	movf	_serial_write+1,w,c
  1093  000AC6  6EFE               	movwf	tosh,c
  1094  000AC8  50F8               	movf	tblptru,w,c
  1095  000ACA  6EFF               	movwf	tosu,c
  1096  000ACC  50FA               	movf	pclath,w,c
  1097  000ACE  503E               	movf	_moduleAddress,w,c
  1098  000AD0  0012               	return		;indir
  1099  000AD2                     l3406:
  1100                           
  1101                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1102  000AD2  D801               	call	u2938
  1103  000AD4  D00C               	goto	l3408
  1104  000AD6                     u2938:
  1105  000AD6  0005               	push	
  1106  000AD8  6EFA               	movwf	pclath,c
  1107  000ADA  5037               	movf	_serial_write,w,c
  1108  000ADC  6EFD               	movwf	tosl,c
  1109  000ADE  5038               	movf	_serial_write+1,w,c
  1110  000AE0  6EFE               	movwf	tosh,c
  1111  000AE2  50F8               	movf	tblptru,w,c
  1112  000AE4  6EFF               	movwf	tosu,c
  1113  000AE6  50FA               	movf	pclath,w,c
  1114  000AE8  0101               	movlb	1	; () banked
  1115  000AEA  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1116  000AEC  0012               	return		;indir
  1117  000AEE                     l3408:
  1118                           
  1119                           ;FastTransfer.c: 66: int i;
  1120                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1121  000AEE  0E00               	movlw	0
  1122  000AF0  0101               	movlb	1	; () banked
  1123  000AF2  6FD1               	movwf	(sendData@i+1)& (0+255),b
  1124  000AF4  0E00               	movlw	0
  1125  000AF6  6FD0               	movwf	sendData@i& (0+255),b
  1126  000AF8  D019               	goto	l3414
  1127  000AFA                     l3410:
  1128                           
  1129                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1130  000AFA  D801               	call	u2948
  1131  000AFC  D013               	goto	l3412
  1132  000AFE                     u2948:
  1133  000AFE  0005               	push	
  1134  000B00  6EFA               	movwf	pclath,c
  1135  000B02  5037               	movf	_serial_write,w,c
  1136  000B04  6EFD               	movwf	tosl,c
  1137  000B06  5038               	movf	_serial_write+1,w,c
  1138  000B08  6EFE               	movwf	tosh,c
  1139  000B0A  50F8               	movf	tblptru,w,c
  1140  000B0C  6EFF               	movwf	tosu,c
  1141  000B0E  50FA               	movf	pclath,w,c
  1142  000B10  0101               	movlb	1	; () banked
  1143  000B12  51D0               	movf	sendData@i& (0+255),w,b
  1144  000B14  242F               	addwf	_sendStructAddress,w,c
  1145  000B16  6ED9               	movwf	fsr2l,c
  1146  000B18  0101               	movlb	1	; () banked
  1147  000B1A  51D1               	movf	(sendData@i+1)& (0+255),w,b
  1148  000B1C  2030               	addwfc	_sendStructAddress+1,w,c
  1149  000B1E  6EDA               	movwf	fsr2h,c
  1150  000B20  50DF               	movf	indf2,w,c
  1151  000B22  0012               	return		;indir
  1152  000B24                     l3412:
  1153  000B24  0101               	movlb	1	; () banked
  1154  000B26  4BD0               	infsnz	sendData@i& (0+255),f,b
  1155  000B28  2BD1               	incf	(sendData@i+1)& (0+255),f,b
  1156  000B2A  D000               	goto	l3414
  1157  000B2C                     l3414:
  1158                           
  1159                           ; BSR set to: 1
  1160  000B2C  0101               	movlb	1	; () banked
  1161  000B2E  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1162  000B30  0101               	movlb	1	; () banked
  1163  000B32  5DD0               	subwf	sendData@i& (0+255),w,b
  1164  000B34  0101               	movlb	1	; () banked
  1165  000B36  51D1               	movf	(sendData@i+1)& (0+255),w,b
  1166  000B38  0A80               	xorlw	128
  1167  000B3A  0100               	movlb	0	; () banked
  1168  000B3C  6FFD               	movwf	??_sendData& (0+255),b
  1169  000B3E  0101               	movlb	1	; () banked
  1170  000B40  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1171  000B42  0A80               	xorlw	128
  1172  000B44  0100               	movlb	0	; () banked
  1173  000B46  59FD               	subwfb	??_sendData& (0+255),w,b
  1174  000B48  A0D8               	btfss	status,0,c
  1175  000B4A  D7D7               	goto	l3410
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;FastTransfer.c: 69: }
  1179                           ;FastTransfer.c: 72: serial_write(CS);
  1180                           
  1181                           ; BSR set to: 0
  1182  000B4C  D801               	call	u2968
  1183  000B4E  D00C               	goto	l3418
  1184  000B50                     u2968:
  1185  000B50  0005               	push	
  1186  000B52  6EFA               	movwf	pclath,c
  1187  000B54  5037               	movf	_serial_write,w,c
  1188  000B56  6EFD               	movwf	tosl,c
  1189  000B58  5038               	movf	_serial_write+1,w,c
  1190  000B5A  6EFE               	movwf	tosh,c
  1191  000B5C  50F8               	movf	tblptru,w,c
  1192  000B5E  6EFF               	movwf	tosu,c
  1193  000B60  50FA               	movf	pclath,w,c
  1194  000B62  0101               	movlb	1	; () banked
  1195  000B64  51CF               	movf	sendData@CS& (0+255),w,b
  1196  000B66  0012               	return		;indir
  1197  000B68                     l3418:
  1198                           
  1199                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1200  000B68  0EEC               	movlw	low _crc_buffer
  1201  000B6A  6E1B               	movwf	crcBufS_put@_this,c
  1202  000B6C  0E00               	movlw	high _crc_buffer
  1203  000B6E  6E1C               	movwf	crcBufS_put@_this+1,c
  1204  000B70  C1CE  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1205  000B74  C1CF  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1206  000B78  0E00               	movlw	0
  1207  000B7A  6E1F               	movwf	crcBufS_put@status,c
  1208  000B7C  ECAE  F008         	call	_crcBufS_put
  1209                           
  1210                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1211  000B80  0E00               	movlw	low _ring_buffer
  1212  000B82  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1213  000B84  0E01               	movlw	high _ring_buffer
  1214  000B86  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1215  000B88  0E00               	movlw	0
  1216  000B8A  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1217  000B8C  0E01               	movlw	1
  1218  000B8E  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1219  000B90  EC36  F00B         	call	_FastTransfer_buffer_flush	;wreg free
  1220  000B94  0012               	return		;funcret
  1221  000B96                     __end_of_sendData:
  1222                           	opt stack 0
  1223                           tosu	equ	0xFFF
  1224                           tosh	equ	0xFFE
  1225                           tosl	equ	0xFFD
  1226                           pclath	equ	0xFFA
  1227                           tblptru	equ	0xFF8
  1228                           tblptrh	equ	0xFF7
  1229                           tblptrl	equ	0xFF6
  1230                           tablat	equ	0xFF5
  1231                           intcon	equ	0xFF2
  1232                           postinc0	equ	0xFEE
  1233                           wreg	equ	0xFE8
  1234                           indf2	equ	0xFDF
  1235                           fsr2h	equ	0xFDA
  1236                           fsr2l	equ	0xFD9
  1237                           status	equ	0xFD8
  1238                           
  1239 ;; *************** function _crcBufS_put *****************
  1240 ;; Defined at:
  1241 ;;		line 321 in file "FastTransfer.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1244 ;;		 -> crc_buffer(17), 
  1245 ;;  address         1   28[COMRAM] unsigned char 
  1246 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1247 ;;  status          1   30[COMRAM] unsigned char 
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;		None
  1250 ;; Return value:  Size  Location     Type
  1251 ;;		None               void
  1252 ;; Registers used:
  1253 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1259 ;;      Params:         5       0       0       0       0       0       0
  1260 ;;      Locals:         0       0       0       0       0       0       0
  1261 ;;      Temps:          2       0       0       0       0       0       0
  1262 ;;      Totals:         7       0       0       0       0       0       0
  1263 ;;Total ram usage:        7 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    4
  1266 ;; This function calls:
  1267 ;;		Nothing
  1268 ;; This function is called by:
  1269 ;;		_sendData
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273                           	psect	text4
  1274  00115C                     __ptext4:
  1275                           	opt stack 0
  1276  00115C                     _crcBufS_put:
  1277                           	opt stack 23
  1278                           
  1279                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1280                           
  1281                           ;incstack = 0
  1282  00115C  EE20 F00F          	lfsr	2,15
  1283  001160  501B               	movf	crcBufS_put@_this,w,c
  1284  001162  26D9               	addwf	fsr2l,f,c
  1285  001164  501C               	movf	crcBufS_put@_this+1,w,c
  1286  001166  22DA               	addwfc	fsr2h,f,c
  1287  001168  CFDE F020          	movff	postinc2,??_crcBufS_put
  1288  00116C  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1289  001170  5020               	movf	??_crcBufS_put,w,c
  1290  001172  241B               	addwf	crcBufS_put@_this,w,c
  1291  001174  6ED9               	movwf	fsr2l,c
  1292  001176  5021               	movf	??_crcBufS_put+1,w,c
  1293  001178  201C               	addwfc	crcBufS_put@_this+1,w,c
  1294  00117A  6EDA               	movwf	fsr2h,c
  1295  00117C  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1296                           
  1297                           ;FastTransfer.c: 323: _this->head++;
  1298  001180  EE20 F00F          	lfsr	2,15
  1299  001184  501B               	movf	crcBufS_put@_this,w,c
  1300  001186  26D9               	addwf	fsr2l,f,c
  1301  001188  501C               	movf	crcBufS_put@_this+1,w,c
  1302  00118A  22DA               	addwfc	fsr2h,f,c
  1303  00118C  2ADE               	incf	postinc2,f,c
  1304  00118E  0E00               	movlw	0
  1305  001190  22DD               	addwfc	postdec2,f,c
  1306                           
  1307                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1308  001192  EE20 F00F          	lfsr	2,15
  1309  001196  501B               	movf	crcBufS_put@_this,w,c
  1310  001198  26D9               	addwf	fsr2l,f,c
  1311  00119A  501C               	movf	crcBufS_put@_this+1,w,c
  1312  00119C  22DA               	addwfc	fsr2h,f,c
  1313  00119E  CFDE F020          	movff	postinc2,??_crcBufS_put
  1314  0011A2  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1315  0011A6  5020               	movf	??_crcBufS_put,w,c
  1316  0011A8  241B               	addwf	crcBufS_put@_this,w,c
  1317  0011AA  6ED9               	movwf	fsr2l,c
  1318  0011AC  5021               	movf	??_crcBufS_put+1,w,c
  1319  0011AE  201C               	addwfc	crcBufS_put@_this+1,w,c
  1320  0011B0  6EDA               	movwf	fsr2h,c
  1321  0011B2  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1322                           
  1323                           ;FastTransfer.c: 325: _this->head++;
  1324  0011B6  EE20 F00F          	lfsr	2,15
  1325  0011BA  501B               	movf	crcBufS_put@_this,w,c
  1326  0011BC  26D9               	addwf	fsr2l,f,c
  1327  0011BE  501C               	movf	crcBufS_put@_this+1,w,c
  1328  0011C0  22DA               	addwfc	fsr2h,f,c
  1329  0011C2  2ADE               	incf	postinc2,f,c
  1330  0011C4  0E00               	movlw	0
  1331  0011C6  22DD               	addwfc	postdec2,f,c
  1332                           
  1333                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1334  0011C8  EE20 F00F          	lfsr	2,15
  1335  0011CC  501B               	movf	crcBufS_put@_this,w,c
  1336  0011CE  26D9               	addwf	fsr2l,f,c
  1337  0011D0  501C               	movf	crcBufS_put@_this+1,w,c
  1338  0011D2  22DA               	addwfc	fsr2h,f,c
  1339  0011D4  CFDE F020          	movff	postinc2,??_crcBufS_put
  1340  0011D8  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1341  0011DC  5020               	movf	??_crcBufS_put,w,c
  1342  0011DE  241B               	addwf	crcBufS_put@_this,w,c
  1343  0011E0  6ED9               	movwf	fsr2l,c
  1344  0011E2  5021               	movf	??_crcBufS_put+1,w,c
  1345  0011E4  201C               	addwfc	crcBufS_put@_this+1,w,c
  1346  0011E6  6EDA               	movwf	fsr2h,c
  1347  0011E8  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1348                           
  1349                           ;FastTransfer.c: 327: _this->head++;
  1350  0011EC  EE20 F00F          	lfsr	2,15
  1351  0011F0  501B               	movf	crcBufS_put@_this,w,c
  1352  0011F2  26D9               	addwf	fsr2l,f,c
  1353  0011F4  501C               	movf	crcBufS_put@_this+1,w,c
  1354  0011F6  22DA               	addwfc	fsr2h,f,c
  1355  0011F8  2ADE               	incf	postinc2,f,c
  1356  0011FA  0E00               	movlw	0
  1357  0011FC  22DD               	addwfc	postdec2,f,c
  1358                           
  1359                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1360  0011FE  EE20 F00F          	lfsr	2,15
  1361  001202  501B               	movf	crcBufS_put@_this,w,c
  1362  001204  26D9               	addwf	fsr2l,f,c
  1363  001206  501C               	movf	crcBufS_put@_this+1,w,c
  1364  001208  22DA               	addwfc	fsr2h,f,c
  1365  00120A  0E01               	movlw	1
  1366  00120C  BEDB               	btfsc	plusw2,7,c
  1367  00120E  0012               	return	
  1368  001210  0E01               	movlw	1
  1369  001212  50DB               	movf	plusw2,w,c
  1370  001214  E104               	bnz	u2790
  1371  001216  0E0F               	movlw	15
  1372  001218  5CDE               	subwf	postinc2,w,c
  1373  00121A  A0D8               	btfss	status,0,c
  1374  00121C  0012               	return	
  1375  00121E                     u2790:
  1376                           
  1377                           ;FastTransfer.c: 329: _this->head = 0;
  1378  00121E  EE20 F00F          	lfsr	2,15
  1379  001222  501B               	movf	crcBufS_put@_this,w,c
  1380  001224  26D9               	addwf	fsr2l,f,c
  1381  001226  501C               	movf	crcBufS_put@_this+1,w,c
  1382  001228  22DA               	addwfc	fsr2h,f,c
  1383  00122A  0E00               	movlw	0
  1384  00122C  6EDE               	movwf	postinc2,c
  1385  00122E  0E00               	movlw	0
  1386  001230  6EDD               	movwf	postdec2,c
  1387  001232  0012               	return	
  1388  001234  0012               	return		;funcret
  1389  001236                     __end_of_crcBufS_put:
  1390                           	opt stack 0
  1391                           tosu	equ	0xFFF
  1392                           tosh	equ	0xFFE
  1393                           tosl	equ	0xFFD
  1394                           pclath	equ	0xFFA
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           intcon	equ	0xFF2
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           indf2	equ	0xFDF
  1403                           postinc2	equ	0xFDE
  1404                           postdec2	equ	0xFDD
  1405                           plusw2	equ	0xFDB
  1406                           fsr2h	equ	0xFDA
  1407                           fsr2l	equ	0xFD9
  1408                           status	equ	0xFD8
  1409                           
  1410 ;; *************** function _FastTransfer_buffer_flush *****************
  1411 ;; Defined at:
  1412 ;;		line 261 in file "FastTransfer.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1415 ;;		 -> ring_buffer(206), 
  1416 ;;  clearBuffer     2   36[COMRAM] const int 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;		None
  1419 ;; Return value:  Size  Location     Type
  1420 ;;		None               void
  1421 ;; Registers used:
  1422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1428 ;;      Params:         4       0       0       0       0       0       0
  1429 ;;      Locals:         0       0       0       0       0       0       0
  1430 ;;      Temps:          0       0       0       0       0       0       0
  1431 ;;      Totals:         4       0       0       0       0       0       0
  1432 ;;Total ram usage:        4 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    5
  1435 ;; This function calls:
  1436 ;;		_memset
  1437 ;; This function is called by:
  1438 ;;		_sendData
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text5
  1443  00166C                     __ptext5:
  1444                           	opt stack 0
  1445  00166C                     _FastTransfer_buffer_flush:
  1446                           	opt stack 22
  1447                           
  1448                           ;FastTransfer.c: 262: _this->count = 0;
  1449                           
  1450                           ;incstack = 0
  1451  00166C  EE20 F0CC          	lfsr	2,204
  1452  001670  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1453  001672  26D9               	addwf	fsr2l,f,c
  1454  001674  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1455  001676  22DA               	addwfc	fsr2h,f,c
  1456  001678  0E00               	movlw	0
  1457  00167A  6EDE               	movwf	postinc2,c
  1458  00167C  0E00               	movlw	0
  1459  00167E  6EDD               	movwf	postdec2,c
  1460                           
  1461                           ;FastTransfer.c: 263: _this->head = 0;
  1462  001680  EE20 F0C8          	lfsr	2,200
  1463  001684  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1464  001686  26D9               	addwf	fsr2l,f,c
  1465  001688  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1466  00168A  22DA               	addwfc	fsr2h,f,c
  1467  00168C  0E00               	movlw	0
  1468  00168E  6EDE               	movwf	postinc2,c
  1469  001690  0E00               	movlw	0
  1470  001692  6EDD               	movwf	postdec2,c
  1471                           
  1472                           ;FastTransfer.c: 264: _this->tail = 0;
  1473  001694  EE20 F0CA          	lfsr	2,202
  1474  001698  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1475  00169A  26D9               	addwf	fsr2l,f,c
  1476  00169C  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1477  00169E  22DA               	addwfc	fsr2h,f,c
  1478  0016A0  0E00               	movlw	0
  1479  0016A2  6EDE               	movwf	postinc2,c
  1480  0016A4  0E00               	movlw	0
  1481  0016A6  6EDD               	movwf	postdec2,c
  1482                           
  1483                           ;FastTransfer.c: 265: if (clearBuffer) {
  1484  0016A8  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  1485  0016AA  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  1486  0016AC  B4D8               	btfsc	status,2,c
  1487  0016AE  0012               	return	
  1488                           
  1489                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1490  0016B0  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1491  0016B4  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1492  0016B8  0E00               	movlw	0
  1493  0016BA  6E1E               	movwf	memset@c+1,c
  1494  0016BC  0E00               	movlw	0
  1495  0016BE  6E1D               	movwf	memset@c,c
  1496  0016C0  0E00               	movlw	0
  1497  0016C2  6E20               	movwf	memset@n+1,c
  1498  0016C4  0EC8               	movlw	200
  1499  0016C6  6E1F               	movwf	memset@n,c
  1500  0016C8  ECF0  F00C         	call	_memset	;wreg free
  1501  0016CC  0012               	return	
  1502  0016CE  0012               	return		;funcret
  1503  0016D0                     __end_of_FastTransfer_buffer_flush:
  1504                           	opt stack 0
  1505                           tosu	equ	0xFFF
  1506                           tosh	equ	0xFFE
  1507                           tosl	equ	0xFFD
  1508                           pclath	equ	0xFFA
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           intcon	equ	0xFF2
  1514                           postinc0	equ	0xFEE
  1515                           wreg	equ	0xFE8
  1516                           indf2	equ	0xFDF
  1517                           postinc2	equ	0xFDE
  1518                           postdec2	equ	0xFDD
  1519                           plusw2	equ	0xFDB
  1520                           fsr2h	equ	0xFDA
  1521                           fsr2l	equ	0xFD9
  1522                           status	equ	0xFD8
  1523                           
  1524 ;; *************** function _ToSend *****************
  1525 ;; Defined at:
  1526 ;;		line 216 in file "FastTransfer.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;  where           1    wreg     unsigned char 
  1529 ;;  what            2    0[BANK1 ] unsigned int 
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;  where           1   37[COMRAM] unsigned char 
  1532 ;; Return value:  Size  Location     Type
  1533 ;;		None               void
  1534 ;; Registers used:
  1535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1541 ;;      Params:         0       0       2       0       0       0       0
  1542 ;;      Locals:         1       0       0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0
  1544 ;;      Totals:         1       0       2       0       0       0       0
  1545 ;;Total ram usage:        3 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; Hardware stack levels required when called:    6
  1548 ;; This function calls:
  1549 ;;		_FastTransfer_buffer_put
  1550 ;; This function is called by:
  1551 ;;		_respondECU
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text6
  1556  001ABC                     __ptext6:
  1557                           	opt stack 0
  1558  001ABC                     _ToSend:
  1559                           	opt stack 22
  1560                           
  1561                           ;incstack = 0
  1562                           ;ToSend@where stored from wreg
  1563  001ABC  6E26               	movwf	ToSend@where,c
  1564                           
  1565                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1566  001ABE  0E00               	movlw	low _ring_buffer
  1567  001AC0  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1568  001AC2  0E01               	movlw	high _ring_buffer
  1569  001AC4  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1570  001AC6  C026  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1571  001ACA  C1CE  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1572  001ACE  C1CF  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1573  001AD2  ECB7  F003         	call	_FastTransfer_buffer_put	;wreg free
  1574  001AD6  0012               	return		;funcret
  1575  001AD8                     __end_of_ToSend:
  1576                           	opt stack 0
  1577                           tosu	equ	0xFFF
  1578                           tosh	equ	0xFFE
  1579                           tosl	equ	0xFFD
  1580                           pclath	equ	0xFFA
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           intcon	equ	0xFF2
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           indf2	equ	0xFDF
  1589                           postinc2	equ	0xFDE
  1590                           postdec2	equ	0xFDD
  1591                           plusw2	equ	0xFDB
  1592                           fsr2h	equ	0xFDA
  1593                           fsr2l	equ	0xFD9
  1594                           status	equ	0xFD8
  1595                           
  1596 ;; *************** function _FastTransfer_buffer_put *****************
  1597 ;; Defined at:
  1598 ;;		line 223 in file "FastTransfer.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1601 ;;		 -> ring_buffer(206), 
  1602 ;;  towhere         1   34[COMRAM] unsigned char 
  1603 ;;  towhat          2   35[COMRAM] unsigned int 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;		None               void
  1608 ;; Registers used:
  1609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1615 ;;      Params:         5       0       0       0       0       0       0
  1616 ;;      Locals:         0       0       0       0       0       0       0
  1617 ;;      Temps:          0       2       0       0       0       0       0
  1618 ;;      Totals:         5       2       0       0       0       0       0
  1619 ;;Total ram usage:        7 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    5
  1622 ;; This function calls:
  1623 ;;		_FastTransfer_buffer_modulo_inc
  1624 ;; This function is called by:
  1625 ;;		_ToSend
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text7
  1630  00076E                     __ptext7:
  1631                           	opt stack 0
  1632  00076E                     _FastTransfer_buffer_put:
  1633                           	opt stack 22
  1634                           
  1635                           ;FastTransfer.c: 225: group.integer = towhat;
  1636                           
  1637                           ;incstack = 0
  1638  00076E  C024  F043         	movff	FastTransfer_buffer_put@towhat,_group
  1639  000772  C025  F044         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1640                           
  1641                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  1642  000776  EE20 F0CC          	lfsr	2,204
  1643  00077A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1644  00077C  26D9               	addwf	fsr2l,f,c
  1645  00077E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1646  000780  22DA               	addwfc	fsr2h,f,c
  1647  000782  0E01               	movlw	1
  1648  000784  BEDB               	btfsc	plusw2,7,c
  1649  000786  D007               	goto	l3322
  1650  000788  0E01               	movlw	1
  1651  00078A  50DB               	movf	plusw2,w,c
  1652  00078C  E103               	bnz	u2811
  1653  00078E  0EC5               	movlw	197
  1654  000790  5CDE               	subwf	postinc2,w,c
  1655  000792  B0D8               	btfsc	status,0,c
  1656  000794                     u2811:
  1657  000794  0012               	return	
  1658  000796                     l3322:
  1659                           
  1660                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  1661  000796  EE20 F0C8          	lfsr	2,200
  1662  00079A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1663  00079C  26D9               	addwf	fsr2l,f,c
  1664  00079E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1665  0007A0  22DA               	addwfc	fsr2h,f,c
  1666  0007A2  CFDE F0FD          	movff	postinc2,??_FastTransfer_buffer_put
  1667  0007A6  CFDD F0FE          	movff	postdec2,??_FastTransfer_buffer_put+1
  1668  0007AA  0100               	movlb	0	; () banked
  1669  0007AC  51FD               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1670  0007AE  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1671  0007B0  6ED9               	movwf	fsr2l,c
  1672  0007B2  0100               	movlb	0	; () banked
  1673  0007B4  51FE               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1674  0007B6  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1675  0007B8  6EDA               	movwf	fsr2h,c
  1676  0007BA  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1680  0007BE  EE20 F0C8          	lfsr	2,200
  1681  0007C2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1682  0007C4  26D9               	addwf	fsr2l,f,c
  1683  0007C6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1684  0007C8  22DA               	addwfc	fsr2h,f,c
  1685  0007CA  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1686  0007CE  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1687  0007D2  0E00               	movlw	0
  1688  0007D4  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1689  0007D6  0EC8               	movlw	200
  1690  0007D8  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1691  0007DA  ECC2  F00C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1692  0007DE  EE20 F0C8          	lfsr	2,200
  1693  0007E2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1694  0007E4  26D9               	addwf	fsr2l,f,c
  1695  0007E6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1696  0007E8  22DA               	addwfc	fsr2h,f,c
  1697  0007EA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1698  0007EE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1699                           
  1700                           ;FastTransfer.c: 230: ++_this->count;
  1701  0007F2  EE20 F0CC          	lfsr	2,204
  1702  0007F6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1703  0007F8  26D9               	addwf	fsr2l,f,c
  1704  0007FA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1705  0007FC  22DA               	addwfc	fsr2h,f,c
  1706  0007FE  2ADE               	incf	postinc2,f,c
  1707  000800  0E00               	movlw	0
  1708  000802  22DD               	addwfc	postdec2,f,c
  1709                           
  1710                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  1711  000804  EE20 F0C8          	lfsr	2,200
  1712  000808  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1713  00080A  26D9               	addwf	fsr2l,f,c
  1714  00080C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1715  00080E  22DA               	addwfc	fsr2h,f,c
  1716  000810  CFDE F0FD          	movff	postinc2,??_FastTransfer_buffer_put
  1717  000814  CFDD F0FE          	movff	postdec2,??_FastTransfer_buffer_put+1
  1718  000818  0100               	movlb	0	; () banked
  1719  00081A  51FD               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1720  00081C  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1721  00081E  6ED9               	movwf	fsr2l,c
  1722  000820  0100               	movlb	0	; () banked
  1723  000822  51FE               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1724  000824  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1725  000826  6EDA               	movwf	fsr2h,c
  1726  000828  C043  FFDF         	movff	_group,indf2
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1730  00082C  EE20 F0C8          	lfsr	2,200
  1731  000830  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1732  000832  26D9               	addwf	fsr2l,f,c
  1733  000834  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1734  000836  22DA               	addwfc	fsr2h,f,c
  1735  000838  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1736  00083C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1737  000840  0E00               	movlw	0
  1738  000842  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1739  000844  0EC8               	movlw	200
  1740  000846  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1741  000848  ECC2  F00C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1742  00084C  EE20 F0C8          	lfsr	2,200
  1743  000850  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1744  000852  26D9               	addwf	fsr2l,f,c
  1745  000854  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1746  000856  22DA               	addwfc	fsr2h,f,c
  1747  000858  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1748  00085C  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1749                           
  1750                           ;FastTransfer.c: 233: ++_this->count;
  1751  000860  EE20 F0CC          	lfsr	2,204
  1752  000864  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1753  000866  26D9               	addwf	fsr2l,f,c
  1754  000868  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1755  00086A  22DA               	addwfc	fsr2h,f,c
  1756  00086C  2ADE               	incf	postinc2,f,c
  1757  00086E  0E00               	movlw	0
  1758  000870  22DD               	addwfc	postdec2,f,c
  1759                           
  1760                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  1761  000872  EE20 F0C8          	lfsr	2,200
  1762  000876  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1763  000878  26D9               	addwf	fsr2l,f,c
  1764  00087A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1765  00087C  22DA               	addwfc	fsr2h,f,c
  1766  00087E  CFDE F0FD          	movff	postinc2,??_FastTransfer_buffer_put
  1767  000882  CFDD F0FE          	movff	postdec2,??_FastTransfer_buffer_put+1
  1768  000886  0100               	movlb	0	; () banked
  1769  000888  51FD               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1770  00088A  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1771  00088C  6ED9               	movwf	fsr2l,c
  1772  00088E  0100               	movlb	0	; () banked
  1773  000890  51FE               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1774  000892  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1775  000894  6EDA               	movwf	fsr2h,c
  1776  000896  C044  FFDF         	movff	_group+1,indf2
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1780  00089A  EE20 F0C8          	lfsr	2,200
  1781  00089E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1782  0008A0  26D9               	addwf	fsr2l,f,c
  1783  0008A2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1784  0008A4  22DA               	addwfc	fsr2h,f,c
  1785  0008A6  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1786  0008AA  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1787  0008AE  0E00               	movlw	0
  1788  0008B0  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1789  0008B2  0EC8               	movlw	200
  1790  0008B4  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1791  0008B6  ECC2  F00C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1792  0008BA  EE20 F0C8          	lfsr	2,200
  1793  0008BE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1794  0008C0  26D9               	addwf	fsr2l,f,c
  1795  0008C2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1796  0008C4  22DA               	addwfc	fsr2h,f,c
  1797  0008C6  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1798  0008CA  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1799                           
  1800                           ;FastTransfer.c: 236: ++_this->count;
  1801  0008CE  EE20 F0CC          	lfsr	2,204
  1802  0008D2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1803  0008D4  26D9               	addwf	fsr2l,f,c
  1804  0008D6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1805  0008D8  22DA               	addwfc	fsr2h,f,c
  1806  0008DA  2ADE               	incf	postinc2,f,c
  1807  0008DC  0E00               	movlw	0
  1808  0008DE  22DD               	addwfc	postdec2,f,c
  1809  0008E0  0012               	return	
  1810  0008E2  0012               	return		;funcret
  1811  0008E4                     __end_of_FastTransfer_buffer_put:
  1812                           	opt stack 0
  1813                           tosu	equ	0xFFF
  1814                           tosh	equ	0xFFE
  1815                           tosl	equ	0xFFD
  1816                           pclath	equ	0xFFA
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           intcon	equ	0xFF2
  1822                           postinc0	equ	0xFEE
  1823                           wreg	equ	0xFE8
  1824                           indf2	equ	0xFDF
  1825                           postinc2	equ	0xFDE
  1826                           postdec2	equ	0xFDD
  1827                           plusw2	equ	0xFDB
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1833 ;; Defined at:
  1834 ;;		line 273 in file "FastTransfer.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  value           2   26[COMRAM] const unsigned int 
  1837 ;;  modulus         2   28[COMRAM] const unsigned int 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;  my_value        2   30[COMRAM] unsigned int 
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  2   26[COMRAM] unsigned int 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1849 ;;      Params:         4       0       0       0       0       0       0
  1850 ;;      Locals:         2       0       0       0       0       0       0
  1851 ;;      Temps:          0       0       0       0       0       0       0
  1852 ;;      Totals:         6       0       0       0       0       0       0
  1853 ;;Total ram usage:        6 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    4
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_FastTransfer_buffer_put
  1860 ;;		_FastTransfer_buffer_get
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text8
  1865  001984                     __ptext8:
  1866                           	opt stack 0
  1867  001984                     _FastTransfer_buffer_modulo_inc:
  1868                           	opt stack 22
  1869                           
  1870                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  1871                           
  1872                           ;incstack = 0
  1873  001984  0E01               	movlw	1
  1874  001986  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1875  001988  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1876  00198A  0E00               	movlw	0
  1877  00198C  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1878  00198E  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1879                           
  1880                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  1881  001990  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1882  001992  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1883  001994  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1884  001996  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1885  001998  A0D8               	btfss	status,0,c
  1886  00199A  D005               	goto	l2408
  1887                           
  1888                           ;FastTransfer.c: 276: my_value = 0;
  1889  00199C  0E00               	movlw	0
  1890  00199E  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1891  0019A0  0E00               	movlw	0
  1892  0019A2  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1893  0019A4  D000               	goto	l2408
  1894  0019A6                     l2408:
  1895                           
  1896                           ;FastTransfer.c: 277: }
  1897                           ;FastTransfer.c: 278: return (my_value);
  1898  0019A6  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1899  0019AA  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1900  0019AE  0012               	return	
  1901  0019B0  0012               	return		;funcret
  1902  0019B2                     __end_of_FastTransfer_buffer_modulo_inc:
  1903                           	opt stack 0
  1904                           tosu	equ	0xFFF
  1905                           tosh	equ	0xFFE
  1906                           tosl	equ	0xFFD
  1907                           pclath	equ	0xFFA
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           intcon	equ	0xFF2
  1913                           postinc0	equ	0xFEE
  1914                           wreg	equ	0xFE8
  1915                           indf2	equ	0xFDF
  1916                           postinc2	equ	0xFDE
  1917                           postdec2	equ	0xFDD
  1918                           plusw2	equ	0xFDB
  1919                           fsr2h	equ	0xFDA
  1920                           fsr2l	equ	0xFD9
  1921                           status	equ	0xFD8
  1922                           
  1923 ;; *************** function _receiveData *****************
  1924 ;; Defined at:
  1925 ;;		line 82 in file "FastTransfer.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;		None
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  holder          3   16[BANK1 ] unsigned char [3]
  1930 ;;  crcHolder       1   20[BANK1 ] unsigned char 
  1931 ;;  holder          3   13[BANK1 ] unsigned char [3]
  1932 ;;  crcHolder       1   19[BANK1 ] unsigned char 
  1933 ;;  u               2   21[BANK1 ] int 
  1934 ;;  r               2   23[BANK1 ] int 
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      unsigned char 
  1937 ;; Registers used:
  1938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1944 ;;      Params:         0       0       0       0       0       0       0
  1945 ;;      Locals:         0       0      12       0       0       0       0
  1946 ;;      Temps:          0       0       6       0       0       0       0
  1947 ;;      Totals:         0       0      18       0       0       0       0
  1948 ;;Total ram usage:       18 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    8
  1951 ;; This function calls:
  1952 ;;		Absolute function
  1953 ;;		_CRC8
  1954 ;;		_CRCcheck
  1955 ;;		_Receive_available
  1956 ;;		_Receive_get
  1957 ;;		_Receive_peek
  1958 ;;		_Send_put
  1959 ;; This function is called by:
  1960 ;;		_updateComms
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text9
  1965  0000A2                     __ptext9:
  1966                           	opt stack 0
  1967  0000A2                     _receiveData:
  1968                           	opt stack 21
  1969                           
  1970                           ;FastTransfer.c: 85: if (rx_len == 0) {
  1971                           
  1972                           ;incstack = 0
  1973  0000A2  5042               	movf	_rx_len,w,c
  1974  0000A4  A4D8               	btfss	status,2,c
  1975  0000A6  D0AF               	goto	l3552
  1976                           
  1977                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  1978  0000A8  D801               	call	u3118
  1979  0000AA  D00A               	goto	u3119
  1980  0000AC                     u3118:
  1981  0000AC  0005               	push	
  1982  0000AE  6EFA               	movwf	pclath,c
  1983  0000B0  5031               	movf	_serial_available,w,c
  1984  0000B2  6EFD               	movwf	tosl,c
  1985  0000B4  5032               	movf	_serial_available+1,w,c
  1986  0000B6  6EFE               	movwf	tosh,c
  1987  0000B8  50F8               	movf	tblptru,w,c
  1988  0000BA  6EFF               	movwf	tosu,c
  1989  0000BC  50FA               	movf	pclath,w,c
  1990  0000BE  0012               	return		;indir
  1991  0000C0                     u3119:
  1992  0000C0  BE1E               	btfsc	?_Receive_available+1,7,c
  1993  0000C2  D0A1               	goto	l3552
  1994  0000C4  501E               	movf	?_Receive_available+1,w,c
  1995  0000C6  E11F               	bnz	l3528
  1996  0000C8  0E05               	movlw	5
  1997  0000CA  5C1D               	subwf	?_Receive_available,w,c
  1998  0000CC  B0D8               	btfsc	status,0,c
  1999  0000CE  D01B               	goto	l3528
  2000  0000D0  D09A               	goto	l3552
  2001                           
  2002                           ;FastTransfer.c: 89: while (serial_read() != 0x06) {
  2003  0000D2  D019               	goto	l3528
  2004  0000D4                     l3520:
  2005                           
  2006                           ;FastTransfer.c: 93: alignErrorCounter++;
  2007  0000D4  4A27               	infsnz	_alignErrorCounter,f,c
  2008  0000D6  2A28               	incf	_alignErrorCounter+1,f,c
  2009                           
  2010                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2011  0000D8  D801               	call	u3138
  2012  0000DA  D00A               	goto	u3139
  2013  0000DC                     u3138:
  2014  0000DC  0005               	push	
  2015  0000DE  6EFA               	movwf	pclath,c
  2016  0000E0  5031               	movf	_serial_available,w,c
  2017  0000E2  6EFD               	movwf	tosl,c
  2018  0000E4  5032               	movf	_serial_available+1,w,c
  2019  0000E6  6EFE               	movwf	tosh,c
  2020  0000E8  50F8               	movf	tblptru,w,c
  2021  0000EA  6EFF               	movwf	tosu,c
  2022  0000EC  50FA               	movf	pclath,w,c
  2023  0000EE  0012               	return		;indir
  2024  0000F0                     u3139:
  2025  0000F0  BE1E               	btfsc	?_Receive_available+1,7,c
  2026  0000F2  D006               	goto	l3524
  2027  0000F4  501E               	movf	?_Receive_available+1,w,c
  2028  0000F6  E107               	bnz	l3528
  2029  0000F8  0E05               	movlw	5
  2030  0000FA  5C1D               	subwf	?_Receive_available,w,c
  2031  0000FC  B0D8               	btfsc	status,0,c
  2032  0000FE  D003               	goto	l3528
  2033  000100                     l3524:
  2034                           
  2035                           ;FastTransfer.c: 95: return 0;
  2036  000100  0E00               	movlw	0
  2037  000102  0012               	return	
  2038  000104  D000               	goto	l3528
  2039  000106                     l3528:
  2040  000106  D801               	call	u3158
  2041  000108  D00A               	goto	u3159
  2042  00010A                     u3158:
  2043  00010A  0005               	push	
  2044  00010C  6EFA               	movwf	pclath,c
  2045  00010E  5035               	movf	_serial_read,w,c
  2046  000110  6EFD               	movwf	tosl,c
  2047  000112  5036               	movf	_serial_read+1,w,c
  2048  000114  6EFE               	movwf	tosh,c
  2049  000116  50F8               	movf	tblptru,w,c
  2050  000118  6EFF               	movwf	tosu,c
  2051  00011A  50FA               	movf	pclath,w,c
  2052  00011C  0012               	return		;indir
  2053  00011E                     u3159:
  2054  00011E  0A06               	xorlw	6
  2055  000120  A4D8               	btfss	status,2,c
  2056  000122  D7D8               	goto	l3520
  2057                           
  2058                           ;FastTransfer.c: 96: }
  2059                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2060  000124  D801               	call	u3178
  2061  000126  D00A               	goto	u3179
  2062  000128                     u3178:
  2063  000128  0005               	push	
  2064  00012A  6EFA               	movwf	pclath,c
  2065  00012C  5035               	movf	_serial_read,w,c
  2066  00012E  6EFD               	movwf	tosl,c
  2067  000130  5036               	movf	_serial_read+1,w,c
  2068  000132  6EFE               	movwf	tosh,c
  2069  000134  50F8               	movf	tblptru,w,c
  2070  000136  6EFF               	movwf	tosu,c
  2071  000138  50FA               	movf	pclath,w,c
  2072  00013A  0012               	return		;indir
  2073  00013C                     u3179:
  2074  00013C  0A85               	xorlw	133
  2075  00013E  A4D8               	btfss	status,2,c
  2076  000140  D062               	goto	l3552
  2077                           
  2078                           ;FastTransfer.c: 98: rx_address = serial_read();
  2079  000142  D801               	call	u3198
  2080  000144  D00A               	goto	u3199
  2081  000146                     u3198:
  2082  000146  0005               	push	
  2083  000148  6EFA               	movwf	pclath,c
  2084  00014A  5035               	movf	_serial_read,w,c
  2085  00014C  6EFD               	movwf	tosl,c
  2086  00014E  5036               	movf	_serial_read+1,w,c
  2087  000150  6EFE               	movwf	tosh,c
  2088  000152  50F8               	movf	tblptru,w,c
  2089  000154  6EFF               	movwf	tosu,c
  2090  000156  50FA               	movf	pclath,w,c
  2091  000158  0012               	return		;indir
  2092  00015A                     u3199:
  2093  00015A  6E40               	movwf	_rx_address,c
  2094                           
  2095                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2096  00015C  D801               	call	u3208
  2097  00015E  D00A               	goto	u3209
  2098  000160                     u3208:
  2099  000160  0005               	push	
  2100  000162  6EFA               	movwf	pclath,c
  2101  000164  5035               	movf	_serial_read,w,c
  2102  000166  6EFD               	movwf	tosl,c
  2103  000168  5036               	movf	_serial_read+1,w,c
  2104  00016A  6EFE               	movwf	tosh,c
  2105  00016C  50F8               	movf	tblptru,w,c
  2106  00016E  6EFF               	movwf	tosu,c
  2107  000170  50FA               	movf	pclath,w,c
  2108  000172  0012               	return		;indir
  2109  000174                     u3209:
  2110  000174  6E3F               	movwf	_returnAddress,c
  2111                           
  2112                           ;FastTransfer.c: 100: rx_len = serial_read();
  2113  000176  D801               	call	u3218
  2114  000178  D00A               	goto	u3219
  2115  00017A                     u3218:
  2116  00017A  0005               	push	
  2117  00017C  6EFA               	movwf	pclath,c
  2118  00017E  5035               	movf	_serial_read,w,c
  2119  000180  6EFD               	movwf	tosl,c
  2120  000182  5036               	movf	_serial_read+1,w,c
  2121  000184  6EFE               	movwf	tosh,c
  2122  000186  50F8               	movf	tblptru,w,c
  2123  000188  6EFF               	movwf	tosu,c
  2124  00018A  50FA               	movf	pclath,w,c
  2125  00018C  0012               	return		;indir
  2126  00018E                     u3219:
  2127  00018E  6E42               	movwf	_rx_len,c
  2128                           
  2129                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2130  000190  503E               	movf	_moduleAddress,w,c
  2131  000192  1840               	xorwf	_rx_address,w,c
  2132  000194  B4D8               	btfsc	status,2,c
  2133  000196  D037               	goto	l3552
  2134                           
  2135                           ;FastTransfer.c: 103: addressErrorCounter++;
  2136  000198  0100               	movlb	0	; () banked
  2137  00019A  4BC0               	infsnz	_addressErrorCounter& (0+255),f,b
  2138  00019C  2BC1               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;FastTransfer.c: 106: int u;
  2142                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2143  00019E  0E00               	movlw	0
  2144  0001A0  0101               	movlb	1	; () banked
  2145  0001A2  6FE4               	movwf	(receiveData@u+1)& (0+255),b
  2146  0001A4  0E00               	movlw	0
  2147  0001A6  6FE3               	movwf	receiveData@u& (0+255),b
  2148  0001A8  D010               	goto	l3544
  2149  0001AA                     l3540:
  2150                           
  2151                           ; BSR set to: 1
  2152                           ;FastTransfer.c: 108: serial_read();
  2153  0001AA  D801               	call	u3238
  2154  0001AC  D00A               	goto	l3542
  2155  0001AE                     u3238:
  2156  0001AE  0005               	push	
  2157  0001B0  6EFA               	movwf	pclath,c
  2158  0001B2  5035               	movf	_serial_read,w,c
  2159  0001B4  6EFD               	movwf	tosl,c
  2160  0001B6  5036               	movf	_serial_read+1,w,c
  2161  0001B8  6EFE               	movwf	tosh,c
  2162  0001BA  50F8               	movf	tblptru,w,c
  2163  0001BC  6EFF               	movwf	tosu,c
  2164  0001BE  50FA               	movf	pclath,w,c
  2165  0001C0  0012               	return		;indir
  2166  0001C2                     l3542:
  2167  0001C2  0101               	movlb	1	; () banked
  2168  0001C4  4BE3               	infsnz	receiveData@u& (0+255),f,b
  2169  0001C6  2BE4               	incf	(receiveData@u+1)& (0+255),f,b
  2170  0001C8  D000               	goto	l3544
  2171  0001CA                     l3544:
  2172                           
  2173                           ; BSR set to: 1
  2174  0001CA  5042               	movf	_rx_len,w,c
  2175  0001CC  0101               	movlb	1	; () banked
  2176  0001CE  6FD5               	movwf	??_receiveData& (0+255),b
  2177  0001D0  6BD6               	clrf	(??_receiveData+1)& (0+255),b
  2178  0001D2  0E01               	movlw	1
  2179  0001D4  0101               	movlb	1	; () banked
  2180  0001D6  27D5               	addwf	??_receiveData& (0+255),f,b
  2181  0001D8  0E00               	movlw	0
  2182  0001DA  23D6               	addwfc	(??_receiveData+1)& (0+255),f,b
  2183  0001DC  0101               	movlb	1	; () banked
  2184  0001DE  51E3               	movf	receiveData@u& (0+255),w,b
  2185  0001E0  0101               	movlb	1	; () banked
  2186  0001E2  5DD5               	subwf	??_receiveData& (0+255),w,b
  2187  0001E4  0101               	movlb	1	; () banked
  2188  0001E6  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2189  0001E8  0A80               	xorlw	128
  2190  0001EA  0101               	movlb	1	; () banked
  2191  0001EC  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2192  0001EE  0101               	movlb	1	; () banked
  2193  0001F0  51E4               	movf	(receiveData@u+1)& (0+255),w,b
  2194  0001F2  0A80               	xorlw	128
  2195  0001F4  0101               	movlb	1	; () banked
  2196  0001F6  59D7               	subwfb	(??_receiveData+2)& (0+255),w,b
  2197  0001F8  B0D8               	btfsc	status,0,c
  2198  0001FA  D7D7               	goto	l3540
  2199                           
  2200                           ; BSR set to: 1
  2201                           ;FastTransfer.c: 109: }
  2202                           ;FastTransfer.c: 110: rx_len = 0;
  2203                           
  2204                           ; BSR set to: 1
  2205  0001FC  0E00               	movlw	0
  2206  0001FE  6E42               	movwf	_rx_len,c
  2207                           
  2208                           ; BSR set to: 1
  2209                           ;FastTransfer.c: 111: return 0;
  2210  000200  0E00               	movlw	0
  2211                           
  2212                           ; BSR set to: 1
  2213  000202  0012               	return	
  2214                           
  2215                           ; BSR set to: 1
  2216                           
  2217                           ; BSR set to: 1
  2218                           
  2219                           ; BSR set to: 1
  2220  000204  D000               	goto	l3552
  2221  000206                     l3552:
  2222                           
  2223                           ;FastTransfer.c: 112: }
  2224                           ;FastTransfer.c: 114: }
  2225                           ;FastTransfer.c: 115: }
  2226                           ;FastTransfer.c: 116: }
  2227                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2228  000206  5042               	movf	_rx_len,w,c
  2229  000208  B4D8               	btfsc	status,2,c
  2230  00020A  D2AE               	goto	l3676
  2231                           
  2232                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2233  00020C  5041               	movf	_rx_array_inx,w,c
  2234  00020E  B4D8               	btfsc	status,2,c
  2235  000210  D002               	goto	l3558
  2236  000212  D048               	goto	l3576
  2237                           
  2238                           ;FastTransfer.c: 123: while (!(serial_available() >= 1));
  2239  000214  D000               	goto	l3558
  2240  000216                     l3558:
  2241  000216  D801               	call	u3278
  2242  000218  D00A               	goto	u3279
  2243  00021A                     u3278:
  2244  00021A  0005               	push	
  2245  00021C  6EFA               	movwf	pclath,c
  2246  00021E  5031               	movf	_serial_available,w,c
  2247  000220  6EFD               	movwf	tosl,c
  2248  000222  5032               	movf	_serial_available+1,w,c
  2249  000224  6EFE               	movwf	tosh,c
  2250  000226  50F8               	movf	tblptru,w,c
  2251  000228  6EFF               	movwf	tosu,c
  2252  00022A  50FA               	movf	pclath,w,c
  2253  00022C  0012               	return		;indir
  2254  00022E                     u3279:
  2255  00022E  BE1E               	btfsc	?_Receive_available+1,7,c
  2256  000230  D7F2               	goto	l3558
  2257  000232  501E               	movf	?_Receive_available+1,w,c
  2258  000234  E105               	bnz	l3560
  2259  000236  041D               	decf	?_Receive_available,w,c
  2260  000238  B0D8               	btfsc	status,0,c
  2261  00023A  D002               	goto	l3560
  2262  00023C  D7EC               	goto	l3558
  2263  00023E  D000               	goto	l3560
  2264  000240                     l3560:
  2265                           
  2266                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2267  000240  D801               	call	u3298
  2268  000242  D00A               	goto	u3299
  2269  000244                     u3298:
  2270  000244  0005               	push	
  2271  000246  6EFA               	movwf	pclath,c
  2272  000248  5033               	movf	_serial_peek,w,c
  2273  00024A  6EFD               	movwf	tosl,c
  2274  00024C  5034               	movf	_serial_peek+1,w,c
  2275  00024E  6EFE               	movwf	tosh,c
  2276  000250  50F8               	movf	tblptru,w,c
  2277  000252  6EFF               	movwf	tosu,c
  2278  000254  50FA               	movf	pclath,w,c
  2279  000256  0012               	return		;indir
  2280  000258                     u3299:
  2281  000258  0AFF               	xorlw	255
  2282  00025A  A4D8               	btfss	status,2,c
  2283  00025C  D023               	goto	l3576
  2284                           
  2285                           ;FastTransfer.c: 125: CRCcheck();
  2286  00025E  EC72  F004         	call	_CRCcheck	;wreg free
  2287                           
  2288                           ;FastTransfer.c: 126: rx_len = 0;
  2289  000262  0E00               	movlw	0
  2290  000264  6E42               	movwf	_rx_len,c
  2291                           
  2292                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2293  000266  0E00               	movlw	0
  2294  000268  6E41               	movwf	_rx_array_inx,c
  2295                           
  2296                           ;FastTransfer.c: 128: return 0;
  2297  00026A  0E00               	movlw	0
  2298  00026C  0012               	return	
  2299                           
  2300                           ;FastTransfer.c: 129: }
  2301                           ;FastTransfer.c: 130: }
  2302                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2303  00026E  D01A               	goto	l3576
  2304  000270                     l3572:
  2305                           
  2306                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2307  000270  D801               	call	u3318
  2308  000272  D00A               	goto	u3319
  2309  000274                     u3318:
  2310  000274  0005               	push	
  2311  000276  6EFA               	movwf	pclath,c
  2312  000278  5035               	movf	_serial_read,w,c
  2313  00027A  6EFD               	movwf	tosl,c
  2314  00027C  5036               	movf	_serial_read+1,w,c
  2315  00027E  6EFE               	movwf	tosh,c
  2316  000280  50F8               	movf	tblptru,w,c
  2317  000282  6EFF               	movwf	tosu,c
  2318  000284  50FA               	movf	pclath,w,c
  2319  000286  0012               	return		;indir
  2320  000288                     u3319:
  2321  000288  0101               	movlb	1	; () banked
  2322  00028A  6FD5               	movwf	??_receiveData& (0+255),b
  2323  00028C  5041               	movf	_rx_array_inx,w,c
  2324  00028E  0D01               	mullw	1
  2325  000290  0E00               	movlw	low _rx_buffer
  2326  000292  24F3               	addwf	prodl,w,c
  2327  000294  6ED9               	movwf	fsr2l,c
  2328  000296  0E02               	movlw	high _rx_buffer
  2329  000298  20F4               	addwfc	prodh,w,c
  2330  00029A  6EDA               	movwf	fsr2h,c
  2331  00029C  C1D5  FFDF         	movff	??_receiveData,indf2
  2332                           
  2333                           ; BSR set to: 1
  2334  0002A0  2A41               	incf	_rx_array_inx,f,c
  2335  0002A2  D000               	goto	l3576
  2336  0002A4                     l3576:
  2337  0002A4  D801               	call	u3328
  2338  0002A6  D00A               	goto	u3329
  2339  0002A8                     u3328:
  2340  0002A8  0005               	push	
  2341  0002AA  6EFA               	movwf	pclath,c
  2342  0002AC  5031               	movf	_serial_available,w,c
  2343  0002AE  6EFD               	movwf	tosl,c
  2344  0002B0  5032               	movf	_serial_available+1,w,c
  2345  0002B2  6EFE               	movwf	tosh,c
  2346  0002B4  50F8               	movf	tblptru,w,c
  2347  0002B6  6EFF               	movwf	tosu,c
  2348  0002B8  50FA               	movf	pclath,w,c
  2349  0002BA  0012               	return		;indir
  2350  0002BC                     u3329:
  2351  0002BC  501D               	movf	?_Receive_available,w,c
  2352  0002BE  101E               	iorwf	?_Receive_available+1,w,c
  2353  0002C0  B4D8               	btfsc	status,2,c
  2354  0002C2  D006               	goto	l3580
  2355  0002C4  5041               	movf	_rx_array_inx,w,c
  2356  0002C6  5C42               	subwf	_rx_len,w,c
  2357  0002C8  A0D8               	btfss	status,0,c
  2358  0002CA  D002               	goto	l3580
  2359  0002CC  D7D1               	goto	l3572
  2360  0002CE  D000               	goto	l3580
  2361  0002D0                     l3580:
  2362                           
  2363                           ;FastTransfer.c: 135: }
  2364                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2365  0002D0  5042               	movf	_rx_len,w,c
  2366  0002D2  0101               	movlb	1	; () banked
  2367  0002D4  6FD5               	movwf	??_receiveData& (0+255),b
  2368  0002D6  6BD6               	clrf	(??_receiveData+1)& (0+255),b
  2369  0002D8  0EFF               	movlw	255
  2370  0002DA  0101               	movlb	1	; () banked
  2371  0002DC  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2372  0002DE  0EFF               	movlw	255
  2373  0002E0  0101               	movlb	1	; () banked
  2374  0002E2  6FD8               	movwf	(??_receiveData+3)& (0+255),b
  2375  0002E4  5041               	movf	_rx_array_inx,w,c
  2376  0002E6  0101               	movlb	1	; () banked
  2377  0002E8  6FD9               	movwf	(??_receiveData+4)& (0+255),b
  2378  0002EA  6BDA               	clrf	(??_receiveData+5)& (0+255),b
  2379  0002EC  0101               	movlb	1	; () banked
  2380  0002EE  51D7               	movf	(??_receiveData+2)& (0+255),w,b
  2381  0002F0  0101               	movlb	1	; () banked
  2382  0002F2  27D9               	addwf	(??_receiveData+4)& (0+255),f,b
  2383  0002F4  0101               	movlb	1	; () banked
  2384  0002F6  51D8               	movf	(??_receiveData+3)& (0+255),w,b
  2385  0002F8  0101               	movlb	1	; () banked
  2386  0002FA  23DA               	addwfc	(??_receiveData+5)& (0+255),f,b
  2387  0002FC  0101               	movlb	1	; () banked
  2388  0002FE  51D5               	movf	??_receiveData& (0+255),w,b
  2389  000300  0101               	movlb	1	; () banked
  2390  000302  19D9               	xorwf	(??_receiveData+4)& (0+255),w,b
  2391  000304  E105               	bnz	u3351
  2392  000306  0101               	movlb	1	; () banked
  2393  000308  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2394  00030A  0101               	movlb	1	; () banked
  2395  00030C  19DA               	xorwf	(??_receiveData+5)& (0+255),w,b
  2396  00030E  A4D8               	btfss	status,2,c
  2397  000310                     u3351:
  2398  000310  D22B               	goto	l3676
  2399                           
  2400                           ; BSR set to: 1
  2401                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2402  000312  0E00               	movlw	low _rx_buffer
  2403  000314  6E1B               	movwf	CRC8@data,c
  2404  000316  0E02               	movlw	high _rx_buffer
  2405  000318  6E1C               	movwf	CRC8@data+1,c
  2406  00031A  C042  F01D         	movff	_rx_len,CRC8@len
  2407  00031E  ECBE  F00B         	call	_CRC8	;wreg free
  2408  000322  6E3C               	movwf	_calc_CS,c
  2409                           
  2410                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2411  000324  0EFF               	movlw	255
  2412  000326  0101               	movlb	1	; () banked
  2413  000328  6FD5               	movwf	??_receiveData& (0+255),b
  2414  00032A  0EFF               	movlw	255
  2415  00032C  0101               	movlb	1	; () banked
  2416  00032E  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2417  000330  5041               	movf	_rx_array_inx,w,c
  2418  000332  0101               	movlb	1	; () banked
  2419  000334  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2420  000336  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  2421  000338  0101               	movlb	1	; () banked
  2422  00033A  51D5               	movf	??_receiveData& (0+255),w,b
  2423  00033C  0101               	movlb	1	; () banked
  2424  00033E  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  2425  000340  0101               	movlb	1	; () banked
  2426  000342  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2427  000344  0101               	movlb	1	; () banked
  2428  000346  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2429  000348  0E00               	movlw	low _rx_buffer
  2430  00034A  0101               	movlb	1	; () banked
  2431  00034C  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  2432  00034E  6ED9               	movwf	fsr2l,c
  2433  000350  0E02               	movlw	high _rx_buffer
  2434  000352  0101               	movlb	1	; () banked
  2435  000354  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2436  000356  6EDA               	movwf	fsr2h,c
  2437  000358  503C               	movf	_calc_CS,w,c
  2438  00035A  18DE               	xorwf	postinc2,w,c
  2439  00035C  A4D8               	btfss	status,2,c
  2440  00035E  D13C               	goto	l3638
  2441                           
  2442                           ; BSR set to: 1
  2443                           ;FastTransfer.c: 147: int r;
  2444                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2445  000360  0E00               	movlw	0
  2446  000362  0101               	movlb	1	; () banked
  2447  000364  6FE6               	movwf	(receiveData@r+1)& (0+255),b
  2448  000366  0E00               	movlw	0
  2449  000368  6FE5               	movwf	receiveData@r& (0+255),b
  2450  00036A  D05C               	goto	l3598
  2451  00036C                     l3588:
  2452                           
  2453                           ; BSR set to: 1
  2454                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2455  00036C  0E00               	movlw	low _rx_buffer
  2456  00036E  0101               	movlb	1	; () banked
  2457  000370  25E5               	addwf	receiveData@r& (0+255),w,b
  2458  000372  6ED9               	movwf	fsr2l,c
  2459  000374  0E02               	movlw	high _rx_buffer
  2460  000376  0101               	movlb	1	; () banked
  2461  000378  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2462  00037A  6EDA               	movwf	fsr2h,c
  2463  00037C  503D               	movf	_maxDataAddress,w,c
  2464  00037E  5CDE               	subwf	postinc2,w,c
  2465  000380  B0D8               	btfsc	status,0,c
  2466  000382  D041               	goto	l3594
  2467                           
  2468                           ; BSR set to: 1
  2469                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2470  000384  0E01               	movlw	1
  2471  000386  0101               	movlb	1	; () banked
  2472  000388  25E5               	addwf	receiveData@r& (0+255),w,b
  2473  00038A  0101               	movlb	1	; () banked
  2474  00038C  6FD5               	movwf	??_receiveData& (0+255),b
  2475  00038E  0E00               	movlw	0
  2476  000390  0101               	movlb	1	; () banked
  2477  000392  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2478  000394  0101               	movlb	1	; () banked
  2479  000396  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2480  000398  0E00               	movlw	low _rx_buffer
  2481  00039A  0101               	movlb	1	; () banked
  2482  00039C  25D5               	addwf	??_receiveData& (0+255),w,b
  2483  00039E  6ED9               	movwf	fsr2l,c
  2484  0003A0  0E02               	movlw	high _rx_buffer
  2485  0003A2  0101               	movlb	1	; () banked
  2486  0003A4  21D6               	addwfc	(??_receiveData+1)& (0+255),w,b
  2487  0003A6  6EDA               	movwf	fsr2h,c
  2488  0003A8  50DF               	movf	indf2,w,c
  2489  0003AA  6E43               	movwf	_group,c
  2490                           
  2491                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2492  0003AC  0E02               	movlw	2
  2493  0003AE  0101               	movlb	1	; () banked
  2494  0003B0  25E5               	addwf	receiveData@r& (0+255),w,b
  2495  0003B2  0101               	movlb	1	; () banked
  2496  0003B4  6FD5               	movwf	??_receiveData& (0+255),b
  2497  0003B6  0E00               	movlw	0
  2498  0003B8  0101               	movlb	1	; () banked
  2499  0003BA  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2500  0003BC  0101               	movlb	1	; () banked
  2501  0003BE  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2502  0003C0  0E00               	movlw	low _rx_buffer
  2503  0003C2  0101               	movlb	1	; () banked
  2504  0003C4  25D5               	addwf	??_receiveData& (0+255),w,b
  2505  0003C6  6ED9               	movwf	fsr2l,c
  2506  0003C8  0E02               	movlw	high _rx_buffer
  2507  0003CA  0101               	movlb	1	; () banked
  2508  0003CC  21D6               	addwfc	(??_receiveData+1)& (0+255),w,b
  2509  0003CE  6EDA               	movwf	fsr2h,c
  2510  0003D0  50DF               	movf	indf2,w,c
  2511  0003D2  6E44               	movwf	_group+1,c
  2512                           
  2513                           ; BSR set to: 1
  2514                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2515  0003D4  0E00               	movlw	low _rx_buffer
  2516  0003D6  0101               	movlb	1	; () banked
  2517  0003D8  25E5               	addwf	receiveData@r& (0+255),w,b
  2518  0003DA  6ED9               	movwf	fsr2l,c
  2519  0003DC  0E02               	movlw	high _rx_buffer
  2520  0003DE  0101               	movlb	1	; () banked
  2521  0003E0  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2522  0003E2  6EDA               	movwf	fsr2h,c
  2523  0003E4  50DF               	movf	indf2,w,c
  2524  0003E6  0101               	movlb	1	; () banked
  2525  0003E8  6FD5               	movwf	??_receiveData& (0+255),b
  2526  0003EA  0101               	movlb	1	; () banked
  2527  0003EC  51D5               	movf	??_receiveData& (0+255),w,b
  2528  0003EE  0D02               	mullw	2
  2529  0003F0  50F3               	movf	prodl,w,c
  2530  0003F2  242D               	addwf	_receiveArrayAddress,w,c
  2531  0003F4  6ED9               	movwf	fsr2l,c
  2532  0003F6  50F4               	movf	prodh,w,c
  2533  0003F8  202E               	addwfc	_receiveArrayAddress+1,w,c
  2534  0003FA  6EDA               	movwf	fsr2h,c
  2535  0003FC  C043  FFDE         	movff	_group,postinc2
  2536  000400  C044  FFDD         	movff	_group+1,postdec2
  2537                           
  2538                           ;FastTransfer.c: 153: } else {
  2539  000404  D004               	goto	l3596
  2540  000406                     l3594:
  2541                           
  2542                           ; BSR set to: 1
  2543                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2544  000406  0100               	movlb	0	; () banked
  2545  000408  4BC2               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2546  00040A  2BC3               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2547  00040C  D000               	goto	l3596
  2548  00040E                     l3596:
  2549  00040E  0E03               	movlw	3
  2550  000410  0101               	movlb	1	; () banked
  2551  000412  25E5               	addwf	receiveData@r& (0+255),w,b
  2552  000414  0101               	movlb	1	; () banked
  2553  000416  6FE5               	movwf	receiveData@r& (0+255),b
  2554  000418  0E00               	movlw	0
  2555  00041A  0101               	movlb	1	; () banked
  2556  00041C  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2557  00041E  0101               	movlb	1	; () banked
  2558  000420  6FE6               	movwf	(receiveData@r+1)& (0+255),b
  2559  000422  D000               	goto	l3598
  2560  000424                     l3598:
  2561                           
  2562                           ; BSR set to: 1
  2563  000424  5042               	movf	_rx_len,w,c
  2564  000426  0101               	movlb	1	; () banked
  2565  000428  6FD5               	movwf	??_receiveData& (0+255),b
  2566  00042A  6BD6               	clrf	(??_receiveData+1)& (0+255),b
  2567  00042C  0101               	movlb	1	; () banked
  2568  00042E  51D5               	movf	??_receiveData& (0+255),w,b
  2569  000430  0101               	movlb	1	; () banked
  2570  000432  5DE5               	subwf	receiveData@r& (0+255),w,b
  2571  000434  0101               	movlb	1	; () banked
  2572  000436  51E6               	movf	(receiveData@r+1)& (0+255),w,b
  2573  000438  0A80               	xorlw	128
  2574  00043A  0101               	movlb	1	; () banked
  2575  00043C  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2576  00043E  0101               	movlb	1	; () banked
  2577  000440  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2578  000442  0A80               	xorlw	128
  2579  000444  0101               	movlb	1	; () banked
  2580  000446  59D7               	subwfb	(??_receiveData+2)& (0+255),w,b
  2581  000448  A0D8               	btfss	status,0,c
  2582  00044A  D790               	goto	l3588
  2583                           
  2584                           ; BSR set to: 1
  2585                           ;FastTransfer.c: 155: }
  2586                           ;FastTransfer.c: 156: }
  2587                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2588                           
  2589                           ; BSR set to: 1
  2590  00044C  503B               	movf	_AKNAKsend,w,c
  2591  00044E  B4D8               	btfsc	status,2,c
  2592  000450  D0BC               	goto	l3628
  2593                           
  2594                           ; BSR set to: 1
  2595                           ;FastTransfer.c: 160: unsigned char holder[3];
  2596                           ;FastTransfer.c: 161: holder[0] = 255;
  2597  000452  0101               	movlb	1	; () banked
  2598  000454  69DB               	setf	receiveData@holder& (0+255),b
  2599                           
  2600                           ; BSR set to: 1
  2601                           ;FastTransfer.c: 162: holder[1] = 1;
  2602  000456  0E01               	movlw	1
  2603  000458  0101               	movlb	1	; () banked
  2604  00045A  6FDC               	movwf	(receiveData@holder+1)& (0+255),b
  2605                           
  2606                           ; BSR set to: 1
  2607                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2608  00045C  0EFF               	movlw	255
  2609  00045E  0101               	movlb	1	; () banked
  2610  000460  6FD5               	movwf	??_receiveData& (0+255),b
  2611  000462  0EFF               	movlw	255
  2612  000464  0101               	movlb	1	; () banked
  2613  000466  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2614  000468  5041               	movf	_rx_array_inx,w,c
  2615  00046A  0101               	movlb	1	; () banked
  2616  00046C  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2617  00046E  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  2618  000470  0101               	movlb	1	; () banked
  2619  000472  51D5               	movf	??_receiveData& (0+255),w,b
  2620  000474  0101               	movlb	1	; () banked
  2621  000476  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  2622  000478  0101               	movlb	1	; () banked
  2623  00047A  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2624  00047C  0101               	movlb	1	; () banked
  2625  00047E  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2626  000480  0E00               	movlw	low _rx_buffer
  2627  000482  0101               	movlb	1	; () banked
  2628  000484  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  2629  000486  6ED9               	movwf	fsr2l,c
  2630  000488  0E02               	movlw	high _rx_buffer
  2631  00048A  0101               	movlb	1	; () banked
  2632  00048C  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2633  00048E  6EDA               	movwf	fsr2h,c
  2634  000490  50DF               	movf	indf2,w,c
  2635  000492  0101               	movlb	1	; () banked
  2636  000494  6FDD               	movwf	(receiveData@holder+2)& (0+255),b
  2637                           
  2638                           ; BSR set to: 1
  2639                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2640  000496  0EDB               	movlw	low receiveData@holder
  2641  000498  6E1B               	movwf	CRC8@data,c
  2642  00049A  0E01               	movlw	high receiveData@holder
  2643  00049C  6E1C               	movwf	CRC8@data+1,c
  2644  00049E  0E03               	movlw	3
  2645  0004A0  6E1D               	movwf	CRC8@len,c
  2646  0004A2  ECBE  F00B         	call	_CRC8	;wreg free
  2647  0004A6  0101               	movlb	1	; () banked
  2648  0004A8  6FE1               	movwf	receiveData@crcHolder& (0+255),b
  2649                           
  2650                           ; BSR set to: 1
  2651                           ;FastTransfer.c: 165: serial_write(0x06);
  2652  0004AA  D801               	call	u3408
  2653  0004AC  D00B               	goto	l3612
  2654  0004AE                     u3408:
  2655  0004AE  0005               	push	
  2656  0004B0  6EFA               	movwf	pclath,c
  2657  0004B2  5037               	movf	_serial_write,w,c
  2658  0004B4  6EFD               	movwf	tosl,c
  2659  0004B6  5038               	movf	_serial_write+1,w,c
  2660  0004B8  6EFE               	movwf	tosh,c
  2661  0004BA  50F8               	movf	tblptru,w,c
  2662  0004BC  6EFF               	movwf	tosu,c
  2663  0004BE  50FA               	movf	pclath,w,c
  2664  0004C0  0E06               	movlw	6
  2665  0004C2  0012               	return		;indir
  2666  0004C4                     l3612:
  2667                           
  2668                           ;FastTransfer.c: 166: serial_write(0x85);
  2669  0004C4  D801               	call	u3418
  2670  0004C6  D00B               	goto	l3614
  2671  0004C8                     u3418:
  2672  0004C8  0005               	push	
  2673  0004CA  6EFA               	movwf	pclath,c
  2674  0004CC  5037               	movf	_serial_write,w,c
  2675  0004CE  6EFD               	movwf	tosl,c
  2676  0004D0  5038               	movf	_serial_write+1,w,c
  2677  0004D2  6EFE               	movwf	tosh,c
  2678  0004D4  50F8               	movf	tblptru,w,c
  2679  0004D6  6EFF               	movwf	tosu,c
  2680  0004D8  50FA               	movf	pclath,w,c
  2681  0004DA  0E85               	movlw	133
  2682  0004DC  0012               	return		;indir
  2683  0004DE                     l3614:
  2684                           
  2685                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2686  0004DE  D801               	call	u3428
  2687  0004E0  D00B               	goto	l3616
  2688  0004E2                     u3428:
  2689  0004E2  0005               	push	
  2690  0004E4  6EFA               	movwf	pclath,c
  2691  0004E6  5037               	movf	_serial_write,w,c
  2692  0004E8  6EFD               	movwf	tosl,c
  2693  0004EA  5038               	movf	_serial_write+1,w,c
  2694  0004EC  6EFE               	movwf	tosh,c
  2695  0004EE  50F8               	movf	tblptru,w,c
  2696  0004F0  6EFF               	movwf	tosu,c
  2697  0004F2  50FA               	movf	pclath,w,c
  2698  0004F4  503F               	movf	_returnAddress,w,c
  2699  0004F6  0012               	return		;indir
  2700  0004F8                     l3616:
  2701                           
  2702                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2703  0004F8  D801               	call	u3438
  2704  0004FA  D00B               	goto	l3618
  2705  0004FC                     u3438:
  2706  0004FC  0005               	push	
  2707  0004FE  6EFA               	movwf	pclath,c
  2708  000500  5037               	movf	_serial_write,w,c
  2709  000502  6EFD               	movwf	tosl,c
  2710  000504  5038               	movf	_serial_write+1,w,c
  2711  000506  6EFE               	movwf	tosh,c
  2712  000508  50F8               	movf	tblptru,w,c
  2713  00050A  6EFF               	movwf	tosu,c
  2714  00050C  50FA               	movf	pclath,w,c
  2715  00050E  503E               	movf	_moduleAddress,w,c
  2716  000510  0012               	return		;indir
  2717  000512                     l3618:
  2718                           
  2719                           ;FastTransfer.c: 169: serial_write(3);
  2720  000512  D801               	call	u3448
  2721  000514  D00B               	goto	l3620
  2722  000516                     u3448:
  2723  000516  0005               	push	
  2724  000518  6EFA               	movwf	pclath,c
  2725  00051A  5037               	movf	_serial_write,w,c
  2726  00051C  6EFD               	movwf	tosl,c
  2727  00051E  5038               	movf	_serial_write+1,w,c
  2728  000520  6EFE               	movwf	tosh,c
  2729  000522  50F8               	movf	tblptru,w,c
  2730  000524  6EFF               	movwf	tosu,c
  2731  000526  50FA               	movf	pclath,w,c
  2732  000528  0E03               	movlw	3
  2733  00052A  0012               	return		;indir
  2734  00052C                     l3620:
  2735                           
  2736                           ;FastTransfer.c: 170: serial_write(255);
  2737  00052C  D801               	call	u3458
  2738  00052E  D00B               	goto	l3622
  2739  000530                     u3458:
  2740  000530  0005               	push	
  2741  000532  6EFA               	movwf	pclath,c
  2742  000534  5037               	movf	_serial_write,w,c
  2743  000536  6EFD               	movwf	tosl,c
  2744  000538  5038               	movf	_serial_write+1,w,c
  2745  00053A  6EFE               	movwf	tosh,c
  2746  00053C  50F8               	movf	tblptru,w,c
  2747  00053E  6EFF               	movwf	tosu,c
  2748  000540  50FA               	movf	pclath,w,c
  2749  000542  0EFF               	movlw	255
  2750  000544  0012               	return		;indir
  2751  000546                     l3622:
  2752                           
  2753                           ;FastTransfer.c: 171: serial_write(1);
  2754  000546  D801               	call	u3468
  2755  000548  D00B               	goto	l3624
  2756  00054A                     u3468:
  2757  00054A  0005               	push	
  2758  00054C  6EFA               	movwf	pclath,c
  2759  00054E  5037               	movf	_serial_write,w,c
  2760  000550  6EFD               	movwf	tosl,c
  2761  000552  5038               	movf	_serial_write+1,w,c
  2762  000554  6EFE               	movwf	tosh,c
  2763  000556  50F8               	movf	tblptru,w,c
  2764  000558  6EFF               	movwf	tosu,c
  2765  00055A  50FA               	movf	pclath,w,c
  2766  00055C  0E01               	movlw	1
  2767  00055E  0012               	return		;indir
  2768  000560                     l3624:
  2769                           
  2770                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2771  000560  D801               	call	u3478
  2772  000562  D025               	goto	l3626
  2773  000564                     u3478:
  2774  000564  0005               	push	
  2775  000566  6EFA               	movwf	pclath,c
  2776  000568  5037               	movf	_serial_write,w,c
  2777  00056A  6EFD               	movwf	tosl,c
  2778  00056C  5038               	movf	_serial_write+1,w,c
  2779  00056E  6EFE               	movwf	tosh,c
  2780  000570  50F8               	movf	tblptru,w,c
  2781  000572  6EFF               	movwf	tosu,c
  2782  000574  50FA               	movf	pclath,w,c
  2783  000576  0EFF               	movlw	255
  2784  000578  0101               	movlb	1	; () banked
  2785  00057A  6FD5               	movwf	??_receiveData& (0+255),b
  2786  00057C  0EFF               	movlw	255
  2787  00057E  0101               	movlb	1	; () banked
  2788  000580  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2789  000582  5041               	movf	_rx_array_inx,w,c
  2790  000584  0101               	movlb	1	; () banked
  2791  000586  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2792  000588  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  2793  00058A  0101               	movlb	1	; () banked
  2794  00058C  51D5               	movf	??_receiveData& (0+255),w,b
  2795  00058E  0101               	movlb	1	; () banked
  2796  000590  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  2797  000592  0101               	movlb	1	; () banked
  2798  000594  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2799  000596  0101               	movlb	1	; () banked
  2800  000598  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2801  00059A  0E00               	movlw	low _rx_buffer
  2802  00059C  0101               	movlb	1	; () banked
  2803  00059E  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  2804  0005A0  6ED9               	movwf	fsr2l,c
  2805  0005A2  0E02               	movlw	high _rx_buffer
  2806  0005A4  0101               	movlb	1	; () banked
  2807  0005A6  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2808  0005A8  6EDA               	movwf	fsr2h,c
  2809  0005AA  50DF               	movf	indf2,w,c
  2810  0005AC  0012               	return		;indir
  2811  0005AE                     l3626:
  2812                           
  2813                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2814  0005AE  D801               	call	u3488
  2815  0005B0  D00C               	goto	l3628
  2816  0005B2                     u3488:
  2817  0005B2  0005               	push	
  2818  0005B4  6EFA               	movwf	pclath,c
  2819  0005B6  5037               	movf	_serial_write,w,c
  2820  0005B8  6EFD               	movwf	tosl,c
  2821  0005BA  5038               	movf	_serial_write+1,w,c
  2822  0005BC  6EFE               	movwf	tosh,c
  2823  0005BE  50F8               	movf	tblptru,w,c
  2824  0005C0  6EFF               	movwf	tosu,c
  2825  0005C2  50FA               	movf	pclath,w,c
  2826  0005C4  0101               	movlb	1	; () banked
  2827  0005C6  51E1               	movf	receiveData@crcHolder& (0+255),w,b
  2828  0005C8  0012               	return		;indir
  2829  0005CA                     l3628:
  2830                           
  2831                           ;FastTransfer.c: 174: }
  2832                           ;FastTransfer.c: 178: rx_len = 0;
  2833  0005CA  0E00               	movlw	0
  2834  0005CC  6E42               	movwf	_rx_len,c
  2835                           
  2836                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2837  0005CE  0E00               	movlw	0
  2838  0005D0  6E41               	movwf	_rx_array_inx,c
  2839                           
  2840                           ;FastTransfer.c: 180: return 1;
  2841  0005D2  0E01               	movlw	1
  2842  0005D4  0012               	return	
  2843                           
  2844                           ;FastTransfer.c: 181: } else {
  2845  0005D6  D0C8               	goto	l3676
  2846  0005D8                     l3638:
  2847                           
  2848                           ;FastTransfer.c: 182: crcErrorCounter++;
  2849  0005D8  4A29               	infsnz	_crcErrorCounter,f,c
  2850  0005DA  2A2A               	incf	_crcErrorCounter+1,f,c
  2851                           
  2852                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2853  0005DC  503B               	movf	_AKNAKsend,w,c
  2854  0005DE  B4D8               	btfsc	status,2,c
  2855  0005E0  D0BC               	goto	l3668
  2856                           
  2857                           ;FastTransfer.c: 185: unsigned char holder[3];
  2858                           ;FastTransfer.c: 186: holder[0] = 255;
  2859  0005E2  0101               	movlb	1	; () banked
  2860  0005E4  69DE               	setf	receiveData@holder_1525& (0+255),b
  2861                           
  2862                           ; BSR set to: 1
  2863                           ;FastTransfer.c: 187: holder[1] = 2;
  2864  0005E6  0E02               	movlw	2
  2865  0005E8  0101               	movlb	1	; () banked
  2866  0005EA  6FDF               	movwf	(receiveData@holder_1525+1)& (0+255),b
  2867                           
  2868                           ; BSR set to: 1
  2869                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2870  0005EC  0EFF               	movlw	255
  2871  0005EE  0101               	movlb	1	; () banked
  2872  0005F0  6FD5               	movwf	??_receiveData& (0+255),b
  2873  0005F2  0EFF               	movlw	255
  2874  0005F4  0101               	movlb	1	; () banked
  2875  0005F6  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2876  0005F8  5041               	movf	_rx_array_inx,w,c
  2877  0005FA  0101               	movlb	1	; () banked
  2878  0005FC  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2879  0005FE  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  2880  000600  0101               	movlb	1	; () banked
  2881  000602  51D5               	movf	??_receiveData& (0+255),w,b
  2882  000604  0101               	movlb	1	; () banked
  2883  000606  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  2884  000608  0101               	movlb	1	; () banked
  2885  00060A  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2886  00060C  0101               	movlb	1	; () banked
  2887  00060E  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2888  000610  0E00               	movlw	low _rx_buffer
  2889  000612  0101               	movlb	1	; () banked
  2890  000614  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  2891  000616  6ED9               	movwf	fsr2l,c
  2892  000618  0E02               	movlw	high _rx_buffer
  2893  00061A  0101               	movlb	1	; () banked
  2894  00061C  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2895  00061E  6EDA               	movwf	fsr2h,c
  2896  000620  50DF               	movf	indf2,w,c
  2897  000622  0101               	movlb	1	; () banked
  2898  000624  6FE0               	movwf	(receiveData@holder_1525+2)& (0+255),b
  2899                           
  2900                           ; BSR set to: 1
  2901                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  2902  000626  0EDE               	movlw	low receiveData@holder_1525
  2903  000628  6E1B               	movwf	CRC8@data,c
  2904  00062A  0E01               	movlw	high receiveData@holder_1525
  2905  00062C  6E1C               	movwf	CRC8@data+1,c
  2906  00062E  0E03               	movlw	3
  2907  000630  6E1D               	movwf	CRC8@len,c
  2908  000632  ECBE  F00B         	call	_CRC8
  2909  000636  0101               	movlb	1	; () banked
  2910  000638  6FE2               	movwf	receiveData@crcHolder_1526& (0+255),b
  2911                           
  2912                           ; BSR set to: 1
  2913                           ;FastTransfer.c: 190: serial_write(0x06);
  2914  00063A  D801               	call	u3508
  2915  00063C  D00B               	goto	l3652
  2916  00063E                     u3508:
  2917  00063E  0005               	push	
  2918  000640  6EFA               	movwf	pclath,c
  2919  000642  5037               	movf	_serial_write,w,c
  2920  000644  6EFD               	movwf	tosl,c
  2921  000646  5038               	movf	_serial_write+1,w,c
  2922  000648  6EFE               	movwf	tosh,c
  2923  00064A  50F8               	movf	tblptru,w,c
  2924  00064C  6EFF               	movwf	tosu,c
  2925  00064E  50FA               	movf	pclath,w,c
  2926  000650  0E06               	movlw	6
  2927  000652  0012               	return		;indir
  2928  000654                     l3652:
  2929                           
  2930                           ;FastTransfer.c: 191: serial_write(0x85);
  2931  000654  D801               	call	u3518
  2932  000656  D00B               	goto	l3654
  2933  000658                     u3518:
  2934  000658  0005               	push	
  2935  00065A  6EFA               	movwf	pclath,c
  2936  00065C  5037               	movf	_serial_write,w,c
  2937  00065E  6EFD               	movwf	tosl,c
  2938  000660  5038               	movf	_serial_write+1,w,c
  2939  000662  6EFE               	movwf	tosh,c
  2940  000664  50F8               	movf	tblptru,w,c
  2941  000666  6EFF               	movwf	tosu,c
  2942  000668  50FA               	movf	pclath,w,c
  2943  00066A  0E85               	movlw	133
  2944  00066C  0012               	return		;indir
  2945  00066E                     l3654:
  2946                           
  2947                           ;FastTransfer.c: 192: serial_write(returnAddress);
  2948  00066E  D801               	call	u3528
  2949  000670  D00B               	goto	l3656
  2950  000672                     u3528:
  2951  000672  0005               	push	
  2952  000674  6EFA               	movwf	pclath,c
  2953  000676  5037               	movf	_serial_write,w,c
  2954  000678  6EFD               	movwf	tosl,c
  2955  00067A  5038               	movf	_serial_write+1,w,c
  2956  00067C  6EFE               	movwf	tosh,c
  2957  00067E  50F8               	movf	tblptru,w,c
  2958  000680  6EFF               	movwf	tosu,c
  2959  000682  50FA               	movf	pclath,w,c
  2960  000684  503F               	movf	_returnAddress,w,c
  2961  000686  0012               	return		;indir
  2962  000688                     l3656:
  2963                           
  2964                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  2965  000688  D801               	call	u3538
  2966  00068A  D00B               	goto	l3658
  2967  00068C                     u3538:
  2968  00068C  0005               	push	
  2969  00068E  6EFA               	movwf	pclath,c
  2970  000690  5037               	movf	_serial_write,w,c
  2971  000692  6EFD               	movwf	tosl,c
  2972  000694  5038               	movf	_serial_write+1,w,c
  2973  000696  6EFE               	movwf	tosh,c
  2974  000698  50F8               	movf	tblptru,w,c
  2975  00069A  6EFF               	movwf	tosu,c
  2976  00069C  50FA               	movf	pclath,w,c
  2977  00069E  503E               	movf	_moduleAddress,w,c
  2978  0006A0  0012               	return		;indir
  2979  0006A2                     l3658:
  2980                           
  2981                           ;FastTransfer.c: 194: serial_write(3);
  2982  0006A2  D801               	call	u3548
  2983  0006A4  D00B               	goto	l3660
  2984  0006A6                     u3548:
  2985  0006A6  0005               	push	
  2986  0006A8  6EFA               	movwf	pclath,c
  2987  0006AA  5037               	movf	_serial_write,w,c
  2988  0006AC  6EFD               	movwf	tosl,c
  2989  0006AE  5038               	movf	_serial_write+1,w,c
  2990  0006B0  6EFE               	movwf	tosh,c
  2991  0006B2  50F8               	movf	tblptru,w,c
  2992  0006B4  6EFF               	movwf	tosu,c
  2993  0006B6  50FA               	movf	pclath,w,c
  2994  0006B8  0E03               	movlw	3
  2995  0006BA  0012               	return		;indir
  2996  0006BC                     l3660:
  2997                           
  2998                           ;FastTransfer.c: 195: serial_write(255);
  2999  0006BC  D801               	call	u3558
  3000  0006BE  D00B               	goto	l3662
  3001  0006C0                     u3558:
  3002  0006C0  0005               	push	
  3003  0006C2  6EFA               	movwf	pclath,c
  3004  0006C4  5037               	movf	_serial_write,w,c
  3005  0006C6  6EFD               	movwf	tosl,c
  3006  0006C8  5038               	movf	_serial_write+1,w,c
  3007  0006CA  6EFE               	movwf	tosh,c
  3008  0006CC  50F8               	movf	tblptru,w,c
  3009  0006CE  6EFF               	movwf	tosu,c
  3010  0006D0  50FA               	movf	pclath,w,c
  3011  0006D2  0EFF               	movlw	255
  3012  0006D4  0012               	return		;indir
  3013  0006D6                     l3662:
  3014                           
  3015                           ;FastTransfer.c: 196: serial_write(2);
  3016  0006D6  D801               	call	u3568
  3017  0006D8  D00B               	goto	l3664
  3018  0006DA                     u3568:
  3019  0006DA  0005               	push	
  3020  0006DC  6EFA               	movwf	pclath,c
  3021  0006DE  5037               	movf	_serial_write,w,c
  3022  0006E0  6EFD               	movwf	tosl,c
  3023  0006E2  5038               	movf	_serial_write+1,w,c
  3024  0006E4  6EFE               	movwf	tosh,c
  3025  0006E6  50F8               	movf	tblptru,w,c
  3026  0006E8  6EFF               	movwf	tosu,c
  3027  0006EA  50FA               	movf	pclath,w,c
  3028  0006EC  0E02               	movlw	2
  3029  0006EE  0012               	return		;indir
  3030  0006F0                     l3664:
  3031                           
  3032                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3033  0006F0  D801               	call	u3578
  3034  0006F2  D025               	goto	l3666
  3035  0006F4                     u3578:
  3036  0006F4  0005               	push	
  3037  0006F6  6EFA               	movwf	pclath,c
  3038  0006F8  5037               	movf	_serial_write,w,c
  3039  0006FA  6EFD               	movwf	tosl,c
  3040  0006FC  5038               	movf	_serial_write+1,w,c
  3041  0006FE  6EFE               	movwf	tosh,c
  3042  000700  50F8               	movf	tblptru,w,c
  3043  000702  6EFF               	movwf	tosu,c
  3044  000704  50FA               	movf	pclath,w,c
  3045  000706  0EFF               	movlw	255
  3046  000708  0101               	movlb	1	; () banked
  3047  00070A  6FD5               	movwf	??_receiveData& (0+255),b
  3048  00070C  0EFF               	movlw	255
  3049  00070E  0101               	movlb	1	; () banked
  3050  000710  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  3051  000712  5041               	movf	_rx_array_inx,w,c
  3052  000714  0101               	movlb	1	; () banked
  3053  000716  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  3054  000718  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  3055  00071A  0101               	movlb	1	; () banked
  3056  00071C  51D5               	movf	??_receiveData& (0+255),w,b
  3057  00071E  0101               	movlb	1	; () banked
  3058  000720  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  3059  000722  0101               	movlb	1	; () banked
  3060  000724  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  3061  000726  0101               	movlb	1	; () banked
  3062  000728  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  3063  00072A  0E00               	movlw	low _rx_buffer
  3064  00072C  0101               	movlb	1	; () banked
  3065  00072E  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  3066  000730  6ED9               	movwf	fsr2l,c
  3067  000732  0E02               	movlw	high _rx_buffer
  3068  000734  0101               	movlb	1	; () banked
  3069  000736  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  3070  000738  6EDA               	movwf	fsr2h,c
  3071  00073A  50DF               	movf	indf2,w,c
  3072  00073C  0012               	return		;indir
  3073  00073E                     l3666:
  3074                           
  3075                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3076  00073E  D801               	call	u3588
  3077  000740  D00C               	goto	l3668
  3078  000742                     u3588:
  3079  000742  0005               	push	
  3080  000744  6EFA               	movwf	pclath,c
  3081  000746  5037               	movf	_serial_write,w,c
  3082  000748  6EFD               	movwf	tosl,c
  3083  00074A  5038               	movf	_serial_write+1,w,c
  3084  00074C  6EFE               	movwf	tosh,c
  3085  00074E  50F8               	movf	tblptru,w,c
  3086  000750  6EFF               	movwf	tosu,c
  3087  000752  50FA               	movf	pclath,w,c
  3088  000754  0101               	movlb	1	; () banked
  3089  000756  51E2               	movf	receiveData@crcHolder_1526& (0+255),w,b
  3090  000758  0012               	return		;indir
  3091  00075A                     l3668:
  3092                           
  3093                           ;FastTransfer.c: 199: }
  3094                           ;FastTransfer.c: 202: rx_len = 0;
  3095  00075A  0E00               	movlw	0
  3096  00075C  6E42               	movwf	_rx_len,c
  3097                           
  3098                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3099  00075E  0E00               	movlw	0
  3100  000760  6E41               	movwf	_rx_array_inx,c
  3101                           
  3102                           ;FastTransfer.c: 204: return 0;
  3103  000762  0E00               	movlw	0
  3104  000764  0012               	return	
  3105  000766  D000               	goto	l3676
  3106  000768                     l3676:
  3107                           
  3108                           ;FastTransfer.c: 205: }
  3109                           ;FastTransfer.c: 206: }
  3110                           ;FastTransfer.c: 207: }
  3111                           ;FastTransfer.c: 210: return 0;
  3112  000768  0E00               	movlw	0
  3113  00076A  0012               	return	
  3114  00076C  0012               	return		;funcret
  3115  00076E                     __end_of_receiveData:
  3116                           	opt stack 0
  3117                           tosu	equ	0xFFF
  3118                           tosh	equ	0xFFE
  3119                           tosl	equ	0xFFD
  3120                           pclath	equ	0xFFA
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           prodh	equ	0xFF4
  3126                           prodl	equ	0xFF3
  3127                           intcon	equ	0xFF2
  3128                           postinc0	equ	0xFEE
  3129                           wreg	equ	0xFE8
  3130                           indf2	equ	0xFDF
  3131                           postinc2	equ	0xFDE
  3132                           postdec2	equ	0xFDD
  3133                           plusw2	equ	0xFDB
  3134                           fsr2h	equ	0xFDA
  3135                           fsr2l	equ	0xFD9
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function _Send_put *****************
  3139 ;; Defined at:
  3140 ;;		line 130 in file "UART.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  _data           1    wreg     unsigned char 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  _data           1   37[COMRAM] unsigned char 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;		None               void
  3147 ;; Registers used:
  3148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3154 ;;      Params:         0       0       0       0       0       0       0
  3155 ;;      Locals:         1       0       0       0       0       0       0
  3156 ;;      Temps:          0       0       0       0       0       0       0
  3157 ;;      Totals:         1       0       0       0       0       0       0
  3158 ;;Total ram usage:        1 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    6
  3161 ;; This function calls:
  3162 ;;		_UART_buff_get
  3163 ;;		_UART_buff_put
  3164 ;; This function is called by:
  3165 ;;		_SYSTEM_Initialize
  3166 ;;		_putch
  3167 ;;		_sendData
  3168 ;;		_receiveData
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text10
  3173  001954                     __ptext10:
  3174                           	opt stack 0
  3175  001954                     _Send_put:
  3176                           	opt stack 21
  3177                           
  3178                           ;incstack = 0
  3179                           ;Send_put@_data stored from wreg
  3180  001954  6E26               	movwf	Send_put@_data,c
  3181                           
  3182                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3183  001956  0E00               	movlw	low _output_buffer
  3184  001958  6E21               	movwf	UART_buff_put@_this,c
  3185  00195A  0E04               	movlw	high _output_buffer
  3186  00195C  6E22               	movwf	UART_buff_put@_this+1,c
  3187  00195E  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3188  001962  ECCB  F005         	call	_UART_buff_put
  3189                           
  3190                           ;UART.c: 132: if (Transmit_stall == 1) {
  3191  001966  0445               	decf	_Transmit_stall,w,c
  3192  001968  A4D8               	btfss	status,2,c
  3193  00196A  0012               	return	
  3194                           
  3195                           ;UART.c: 133: Transmit_stall = 0;
  3196  00196C  0E00               	movlw	0
  3197  00196E  6E45               	movwf	_Transmit_stall,c
  3198                           
  3199                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3200  001970  0E00               	movlw	low _output_buffer
  3201  001972  6E21               	movwf	UART_buff_get@_this,c
  3202  001974  0E04               	movlw	high _output_buffer
  3203  001976  6E22               	movwf	UART_buff_get@_this+1,c
  3204  001978  ECD3  F009         	call	_UART_buff_get	;wreg free
  3205  00197C  6EAD               	movwf	4013,c	;volatile
  3206                           
  3207                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3208  00197E  889D               	bsf	3997,4,c	;volatile
  3209  001980  0012               	return	
  3210  001982  0012               	return		;funcret
  3211  001984                     __end_of_Send_put:
  3212                           	opt stack 0
  3213                           tosu	equ	0xFFF
  3214                           tosh	equ	0xFFE
  3215                           tosl	equ	0xFFD
  3216                           pclath	equ	0xFFA
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           prodh	equ	0xFF4
  3222                           prodl	equ	0xFF3
  3223                           intcon	equ	0xFF2
  3224                           postinc0	equ	0xFEE
  3225                           wreg	equ	0xFE8
  3226                           indf2	equ	0xFDF
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           plusw2	equ	0xFDB
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function _UART_buff_put *****************
  3235 ;; Defined at:
  3236 ;;		line 68 in file "UART.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3239 ;;		 -> output_buffer(206), input_buffer(206), 
  3240 ;;  c               1   34[COMRAM] const unsigned char 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;		None
  3243 ;; Return value:  Size  Location     Type
  3244 ;;		None               void
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3252 ;;      Params:         3       0       0       0       0       0       0
  3253 ;;      Locals:         0       0       0       0       0       0       0
  3254 ;;      Temps:          2       0       0       0       0       0       0
  3255 ;;      Totals:         5       0       0       0       0       0       0
  3256 ;;Total ram usage:        5 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    5
  3259 ;; This function calls:
  3260 ;;		_UART_buff_modulo_inc
  3261 ;; This function is called by:
  3262 ;;		_Send_put
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text11
  3267  000B96                     __ptext11:
  3268                           	opt stack 0
  3269  000B96                     _UART_buff_put:
  3270                           	opt stack 21
  3271                           
  3272                           ;UART.c: 69: if (_this->count < 200) {
  3273                           
  3274                           ;incstack = 0
  3275  000B96  EE20 F0CC          	lfsr	2,204
  3276  000B9A  5021               	movf	UART_buff_put@_this,w,c
  3277  000B9C  26D9               	addwf	fsr2l,f,c
  3278  000B9E  5022               	movf	UART_buff_put@_this+1,w,c
  3279  000BA0  22DA               	addwfc	fsr2h,f,c
  3280  000BA2  0E01               	movlw	1
  3281  000BA4  BEDB               	btfsc	plusw2,7,c
  3282  000BA6  D007               	goto	l3204
  3283  000BA8  0E01               	movlw	1
  3284  000BAA  50DB               	movf	plusw2,w,c
  3285  000BAC  E13A               	bnz	l3210
  3286  000BAE  0EC8               	movlw	200
  3287  000BB0  5CDE               	subwf	postinc2,w,c
  3288  000BB2  B0D8               	btfsc	status,0,c
  3289  000BB4  D036               	goto	l3210
  3290  000BB6                     l3204:
  3291                           
  3292                           ;UART.c: 70: _this->buf[_this->head] = c;
  3293  000BB6  EE20 F0C8          	lfsr	2,200
  3294  000BBA  5021               	movf	UART_buff_put@_this,w,c
  3295  000BBC  26D9               	addwf	fsr2l,f,c
  3296  000BBE  5022               	movf	UART_buff_put@_this+1,w,c
  3297  000BC0  22DA               	addwfc	fsr2h,f,c
  3298  000BC2  CFDE F024          	movff	postinc2,??_UART_buff_put
  3299  000BC6  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3300  000BCA  5024               	movf	??_UART_buff_put,w,c
  3301  000BCC  2421               	addwf	UART_buff_put@_this,w,c
  3302  000BCE  6ED9               	movwf	fsr2l,c
  3303  000BD0  5025               	movf	??_UART_buff_put+1,w,c
  3304  000BD2  2022               	addwfc	UART_buff_put@_this+1,w,c
  3305  000BD4  6EDA               	movwf	fsr2h,c
  3306  000BD6  C023  FFDF         	movff	UART_buff_put@c,indf2
  3307                           
  3308                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3309  000BDA  EE20 F0C8          	lfsr	2,200
  3310  000BDE  5021               	movf	UART_buff_put@_this,w,c
  3311  000BE0  26D9               	addwf	fsr2l,f,c
  3312  000BE2  5022               	movf	UART_buff_put@_this+1,w,c
  3313  000BE4  22DA               	addwfc	fsr2h,f,c
  3314  000BE6  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3315  000BEA  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3316  000BEE  0E00               	movlw	0
  3317  000BF0  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3318  000BF2  0EC8               	movlw	200
  3319  000BF4  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3320  000BF6  ECD9  F00C         	call	_UART_buff_modulo_inc	;wreg free
  3321  000BFA  EE20 F0C8          	lfsr	2,200
  3322  000BFE  5021               	movf	UART_buff_put@_this,w,c
  3323  000C00  26D9               	addwf	fsr2l,f,c
  3324  000C02  5022               	movf	UART_buff_put@_this+1,w,c
  3325  000C04  22DA               	addwfc	fsr2h,f,c
  3326  000C06  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3327  000C0A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3328                           
  3329                           ;UART.c: 72: ++_this->count;
  3330  000C0E  EE20 F0CC          	lfsr	2,204
  3331  000C12  5021               	movf	UART_buff_put@_this,w,c
  3332  000C14  26D9               	addwf	fsr2l,f,c
  3333  000C16  5022               	movf	UART_buff_put@_this+1,w,c
  3334  000C18  22DA               	addwfc	fsr2h,f,c
  3335  000C1A  2ADE               	incf	postinc2,f,c
  3336  000C1C  0E00               	movlw	0
  3337  000C1E  22DD               	addwfc	postdec2,f,c
  3338                           
  3339                           ;UART.c: 73: } else {
  3340  000C20  0012               	return	
  3341  000C22                     l3210:
  3342                           
  3343                           ;UART.c: 74: _this->buf[_this->head] = c;
  3344  000C22  EE20 F0C8          	lfsr	2,200
  3345  000C26  5021               	movf	UART_buff_put@_this,w,c
  3346  000C28  26D9               	addwf	fsr2l,f,c
  3347  000C2A  5022               	movf	UART_buff_put@_this+1,w,c
  3348  000C2C  22DA               	addwfc	fsr2h,f,c
  3349  000C2E  CFDE F024          	movff	postinc2,??_UART_buff_put
  3350  000C32  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3351  000C36  5024               	movf	??_UART_buff_put,w,c
  3352  000C38  2421               	addwf	UART_buff_put@_this,w,c
  3353  000C3A  6ED9               	movwf	fsr2l,c
  3354  000C3C  5025               	movf	??_UART_buff_put+1,w,c
  3355  000C3E  2022               	addwfc	UART_buff_put@_this+1,w,c
  3356  000C40  6EDA               	movwf	fsr2h,c
  3357  000C42  C023  FFDF         	movff	UART_buff_put@c,indf2
  3358                           
  3359                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3360  000C46  EE20 F0C8          	lfsr	2,200
  3361  000C4A  5021               	movf	UART_buff_put@_this,w,c
  3362  000C4C  26D9               	addwf	fsr2l,f,c
  3363  000C4E  5022               	movf	UART_buff_put@_this+1,w,c
  3364  000C50  22DA               	addwfc	fsr2h,f,c
  3365  000C52  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3366  000C56  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3367  000C5A  0E00               	movlw	0
  3368  000C5C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3369  000C5E  0EC8               	movlw	200
  3370  000C60  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3371  000C62  ECD9  F00C         	call	_UART_buff_modulo_inc	;wreg free
  3372  000C66  EE20 F0C8          	lfsr	2,200
  3373  000C6A  5021               	movf	UART_buff_put@_this,w,c
  3374  000C6C  26D9               	addwf	fsr2l,f,c
  3375  000C6E  5022               	movf	UART_buff_put@_this+1,w,c
  3376  000C70  22DA               	addwfc	fsr2h,f,c
  3377  000C72  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3378  000C76  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3379                           
  3380                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3381  000C7A  EE20 F0CA          	lfsr	2,202
  3382  000C7E  5021               	movf	UART_buff_put@_this,w,c
  3383  000C80  26D9               	addwf	fsr2l,f,c
  3384  000C82  5022               	movf	UART_buff_put@_this+1,w,c
  3385  000C84  22DA               	addwfc	fsr2h,f,c
  3386  000C86  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3387  000C8A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3388  000C8E  0E00               	movlw	0
  3389  000C90  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3390  000C92  0EC8               	movlw	200
  3391  000C94  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3392  000C96  ECD9  F00C         	call	_UART_buff_modulo_inc	;wreg free
  3393  000C9A  EE20 F0CA          	lfsr	2,202
  3394  000C9E  5021               	movf	UART_buff_put@_this,w,c
  3395  000CA0  26D9               	addwf	fsr2l,f,c
  3396  000CA2  5022               	movf	UART_buff_put@_this+1,w,c
  3397  000CA4  22DA               	addwfc	fsr2h,f,c
  3398  000CA6  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3399  000CAA  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3400  000CAE  0012               	return	
  3401  000CB0  0012               	return		;funcret
  3402  000CB2                     __end_of_UART_buff_put:
  3403                           	opt stack 0
  3404                           tosu	equ	0xFFF
  3405                           tosh	equ	0xFFE
  3406                           tosl	equ	0xFFD
  3407                           pclath	equ	0xFFA
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           intcon	equ	0xFF2
  3415                           postinc0	equ	0xFEE
  3416                           wreg	equ	0xFE8
  3417                           indf2	equ	0xFDF
  3418                           postinc2	equ	0xFDE
  3419                           postdec2	equ	0xFDD
  3420                           plusw2	equ	0xFDB
  3421                           fsr2h	equ	0xFDA
  3422                           fsr2l	equ	0xFD9
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function _Receive_peek *****************
  3426 ;; Defined at:
  3427 ;;		line 118 in file "UART.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      unsigned char 
  3434 ;; Registers used:
  3435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3441 ;;      Params:         0       0       0       0       0       0       0
  3442 ;;      Locals:         0       0       0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0
  3444 ;;      Totals:         0       0       0       0       0       0       0
  3445 ;;Total ram usage:        0 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    5
  3448 ;; This function calls:
  3449 ;;		_UART_buff_peek
  3450 ;; This function is called by:
  3451 ;;		_SYSTEM_Initialize
  3452 ;;		_receiveData
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text12
  3457  001B68                     __ptext12:
  3458                           	opt stack 0
  3459  001B68                     _Receive_peek:
  3460                           	opt stack 23
  3461                           
  3462                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3463                           
  3464                           ;incstack = 0
  3465  001B68  0E00               	movlw	low _input_buffer
  3466  001B6A  6E1B               	movwf	UART_buff_peek@_this,c
  3467  001B6C  0E03               	movlw	high _input_buffer
  3468  001B6E  6E1C               	movwf	UART_buff_peek@_this+1,c
  3469  001B70  EC1E  F00D         	call	_UART_buff_peek	;wreg free
  3470  001B74  0012               	return	
  3471  001B76  0012               	return		;funcret
  3472  001B78                     __end_of_Receive_peek:
  3473                           	opt stack 0
  3474                           tosu	equ	0xFFF
  3475                           tosh	equ	0xFFE
  3476                           tosl	equ	0xFFD
  3477                           pclath	equ	0xFFA
  3478                           tblptru	equ	0xFF8
  3479                           tblptrh	equ	0xFF7
  3480                           tblptrl	equ	0xFF6
  3481                           tablat	equ	0xFF5
  3482                           prodh	equ	0xFF4
  3483                           prodl	equ	0xFF3
  3484                           intcon	equ	0xFF2
  3485                           postinc0	equ	0xFEE
  3486                           wreg	equ	0xFE8
  3487                           indf2	equ	0xFDF
  3488                           postinc2	equ	0xFDE
  3489                           postdec2	equ	0xFDD
  3490                           plusw2	equ	0xFDB
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _UART_buff_peek *****************
  3496 ;; Defined at:
  3497 ;;		line 114 in file "UART.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3500 ;;		 -> input_buffer(206), 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      unsigned char 
  3505 ;; Registers used:
  3506 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3512 ;;      Params:         2       0       0       0       0       0       0
  3513 ;;      Locals:         0       0       0       0       0       0       0
  3514 ;;      Temps:          2       0       0       0       0       0       0
  3515 ;;      Totals:         4       0       0       0       0       0       0
  3516 ;;Total ram usage:        4 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    4
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		_Receive_peek
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text13
  3527  001A3C                     __ptext13:
  3528                           	opt stack 0
  3529  001A3C                     _UART_buff_peek:
  3530                           	opt stack 23
  3531                           
  3532                           ;UART.c: 115: return _this->buf[_this->tail];
  3533                           
  3534                           ;incstack = 0
  3535  001A3C  EE20 F0CA          	lfsr	2,202
  3536  001A40  501B               	movf	UART_buff_peek@_this,w,c
  3537  001A42  26D9               	addwf	fsr2l,f,c
  3538  001A44  501C               	movf	UART_buff_peek@_this+1,w,c
  3539  001A46  22DA               	addwfc	fsr2h,f,c
  3540  001A48  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3541  001A4C  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3542  001A50  501D               	movf	??_UART_buff_peek,w,c
  3543  001A52  241B               	addwf	UART_buff_peek@_this,w,c
  3544  001A54  6ED9               	movwf	fsr2l,c
  3545  001A56  501E               	movf	??_UART_buff_peek+1,w,c
  3546  001A58  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3547  001A5A  6EDA               	movwf	fsr2h,c
  3548  001A5C  50DF               	movf	indf2,w,c
  3549  001A5E  0012               	return	
  3550  001A60  0012               	return		;funcret
  3551  001A62                     __end_of_UART_buff_peek:
  3552                           	opt stack 0
  3553                           tosu	equ	0xFFF
  3554                           tosh	equ	0xFFE
  3555                           tosl	equ	0xFFD
  3556                           pclath	equ	0xFFA
  3557                           tblptru	equ	0xFF8
  3558                           tblptrh	equ	0xFF7
  3559                           tblptrl	equ	0xFF6
  3560                           tablat	equ	0xFF5
  3561                           prodh	equ	0xFF4
  3562                           prodl	equ	0xFF3
  3563                           intcon	equ	0xFF2
  3564                           postinc0	equ	0xFEE
  3565                           wreg	equ	0xFE8
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           plusw2	equ	0xFDB
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           
  3574 ;; *************** function _CRCcheck *****************
  3575 ;; Defined at:
  3576 ;;		line 373 in file "FastTransfer.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  rt              2    5[BANK1 ] int 
  3581 ;;  arrayHolder     3    2[BANK1 ] unsigned char [3]
  3582 ;;  calculatedCR    1    1[BANK1 ] unsigned char 
  3583 ;;  SentCRC         1    0[BANK1 ] unsigned char 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;		None               void
  3586 ;; Registers used:
  3587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3593 ;;      Params:         0       0       0       0       0       0       0
  3594 ;;      Locals:         0       0       7       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0
  3596 ;;      Totals:         0       0       7       0       0       0       0
  3597 ;;Total ram usage:        7 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    7
  3600 ;; This function calls:
  3601 ;;		Absolute function
  3602 ;;		_CRC8
  3603 ;;		_Receive_available
  3604 ;;		_Receive_get
  3605 ;;		_crcBufS_get
  3606 ;;		_crcBufS_status_put
  3607 ;; This function is called by:
  3608 ;;		_receiveData
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           	psect	text14
  3613  0008E4                     __ptext14:
  3614                           	opt stack 0
  3615  0008E4                     _CRCcheck:
  3616                           	opt stack 21
  3617                           
  3618                           ;FastTransfer.c: 375: while (!(serial_available() > 3));
  3619                           
  3620                           ;incstack = 0
  3621  0008E4  D000               	goto	l3424
  3622  0008E6                     l3424:
  3623  0008E6  D801               	call	u2978
  3624  0008E8  D00A               	goto	u2979
  3625  0008EA                     u2978:
  3626  0008EA  0005               	push	
  3627  0008EC  6EFA               	movwf	pclath,c
  3628  0008EE  5031               	movf	_serial_available,w,c
  3629  0008F0  6EFD               	movwf	tosl,c
  3630  0008F2  5032               	movf	_serial_available+1,w,c
  3631  0008F4  6EFE               	movwf	tosh,c
  3632  0008F6  50F8               	movf	tblptru,w,c
  3633  0008F8  6EFF               	movwf	tosu,c
  3634  0008FA  50FA               	movf	pclath,w,c
  3635  0008FC  0012               	return		;indir
  3636  0008FE                     u2979:
  3637  0008FE  BE1E               	btfsc	?_Receive_available+1,7,c
  3638  000900  D7F2               	goto	l3424
  3639  000902  501E               	movf	?_Receive_available+1,w,c
  3640  000904  E106               	bnz	l3426
  3641  000906  0E04               	movlw	4
  3642  000908  5C1D               	subwf	?_Receive_available,w,c
  3643  00090A  B0D8               	btfsc	status,0,c
  3644  00090C  D002               	goto	l3426
  3645  00090E  D7EB               	goto	l3424
  3646  000910  D000               	goto	l3426
  3647  000912                     l3426:
  3648                           
  3649                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3650                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3651  000912  D801               	call	u2998
  3652  000914  D00A               	goto	u2999
  3653  000916                     u2998:
  3654  000916  0005               	push	
  3655  000918  6EFA               	movwf	pclath,c
  3656  00091A  5035               	movf	_serial_read,w,c
  3657  00091C  6EFD               	movwf	tosl,c
  3658  00091E  5036               	movf	_serial_read+1,w,c
  3659  000920  6EFE               	movwf	tosh,c
  3660  000922  50F8               	movf	tblptru,w,c
  3661  000924  6EFF               	movwf	tosu,c
  3662  000926  50FA               	movf	pclath,w,c
  3663  000928  0012               	return		;indir
  3664  00092A                     u2999:
  3665  00092A  0101               	movlb	1	; () banked
  3666  00092C  6FD0               	movwf	CRCcheck@arrayHolder& (0+255),b
  3667                           
  3668                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3669  00092E  D801               	call	u3008
  3670  000930  D00A               	goto	u3009
  3671  000932                     u3008:
  3672  000932  0005               	push	
  3673  000934  6EFA               	movwf	pclath,c
  3674  000936  5035               	movf	_serial_read,w,c
  3675  000938  6EFD               	movwf	tosl,c
  3676  00093A  5036               	movf	_serial_read+1,w,c
  3677  00093C  6EFE               	movwf	tosh,c
  3678  00093E  50F8               	movf	tblptru,w,c
  3679  000940  6EFF               	movwf	tosu,c
  3680  000942  50FA               	movf	pclath,w,c
  3681  000944  0012               	return		;indir
  3682  000946                     u3009:
  3683  000946  0101               	movlb	1	; () banked
  3684  000948  6FD1               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3685                           
  3686                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3687  00094A  D801               	call	u3018
  3688  00094C  D00A               	goto	u3019
  3689  00094E                     u3018:
  3690  00094E  0005               	push	
  3691  000950  6EFA               	movwf	pclath,c
  3692  000952  5035               	movf	_serial_read,w,c
  3693  000954  6EFD               	movwf	tosl,c
  3694  000956  5036               	movf	_serial_read+1,w,c
  3695  000958  6EFE               	movwf	tosh,c
  3696  00095A  50F8               	movf	tblptru,w,c
  3697  00095C  6EFF               	movwf	tosu,c
  3698  00095E  50FA               	movf	pclath,w,c
  3699  000960  0012               	return		;indir
  3700  000962                     u3019:
  3701  000962  0101               	movlb	1	; () banked
  3702  000964  6FD2               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3703                           
  3704                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3705  000966  D801               	call	u3028
  3706  000968  D00A               	goto	u3029
  3707  00096A                     u3028:
  3708  00096A  0005               	push	
  3709  00096C  6EFA               	movwf	pclath,c
  3710  00096E  5035               	movf	_serial_read,w,c
  3711  000970  6EFD               	movwf	tosl,c
  3712  000972  5036               	movf	_serial_read+1,w,c
  3713  000974  6EFE               	movwf	tosh,c
  3714  000976  50F8               	movf	tblptru,w,c
  3715  000978  6EFF               	movwf	tosu,c
  3716  00097A  50FA               	movf	pclath,w,c
  3717  00097C  0012               	return		;indir
  3718  00097E                     u3029:
  3719  00097E  0101               	movlb	1	; () banked
  3720  000980  6FCE               	movwf	CRCcheck@SentCRC& (0+255),b
  3721                           
  3722                           ; BSR set to: 1
  3723                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3724  000982  0ED0               	movlw	low CRCcheck@arrayHolder
  3725  000984  6E1B               	movwf	CRC8@data,c
  3726  000986  0E01               	movlw	high CRCcheck@arrayHolder
  3727  000988  6E1C               	movwf	CRC8@data+1,c
  3728  00098A  0E03               	movlw	3
  3729  00098C  6E1D               	movwf	CRC8@len,c
  3730  00098E  ECBE  F00B         	call	_CRC8	;wreg free
  3731  000992  0101               	movlb	1	; () banked
  3732  000994  6FCF               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3733                           
  3734                           ; BSR set to: 1
  3735                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3736  000996  0101               	movlb	1	; () banked
  3737  000998  51CF               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3738  00099A  0101               	movlb	1	; () banked
  3739  00099C  19CE               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3740  00099E  A4D8               	btfss	status,2,c
  3741  0009A0  D053               	goto	l3456
  3742                           
  3743                           ; BSR set to: 1
  3744                           ;FastTransfer.c: 387: int rt;
  3745                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3746  0009A2  0E00               	movlw	0
  3747  0009A4  0101               	movlb	1	; () banked
  3748  0009A6  6FD4               	movwf	(CRCcheck@rt+1)& (0+255),b
  3749  0009A8  0E00               	movlw	0
  3750  0009AA  6FD3               	movwf	CRCcheck@rt& (0+255),b
  3751  0009AC                     l3434:
  3752                           
  3753                           ; BSR set to: 1
  3754  0009AC  0101               	movlb	1	; () banked
  3755  0009AE  BFD4               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3756  0009B0  D00A               	goto	l3438
  3757  0009B2  0101               	movlb	1	; () banked
  3758  0009B4  51D4               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3759  0009B6  E14B               	bnz	l718
  3760  0009B8  0E05               	movlw	5
  3761  0009BA  0101               	movlb	1	; () banked
  3762  0009BC  5DD3               	subwf	CRCcheck@rt& (0+255),w,b
  3763  0009BE  B0D8               	btfsc	status,0,c
  3764  0009C0  0012               	return	
  3765  0009C2  D001               	goto	l3438
  3766                           
  3767                           ; BSR set to: 1
  3768  0009C4  0012               	return	
  3769  0009C6                     l3438:
  3770                           
  3771                           ; BSR set to: 1
  3772                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3773  0009C6  0EEC               	movlw	low _crc_buffer
  3774  0009C8  6E1B               	movwf	crcBufS_get@_this,c
  3775  0009CA  0E00               	movlw	high _crc_buffer
  3776  0009CC  6E1C               	movwf	crcBufS_get@_this+1,c
  3777  0009CE  C1D3  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3778  0009D2  0E00               	movlw	0
  3779  0009D4  6E1E               	movwf	crcBufS_get@space,c
  3780  0009D6  ECE7  F006         	call	_crcBufS_get	;wreg free
  3781  0009DA  183F               	xorwf	_returnAddress,w,c
  3782  0009DC  A4D8               	btfss	status,2,c
  3783  0009DE  D02F               	goto	l3452
  3784                           
  3785                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3786  0009E0  0EEC               	movlw	low _crc_buffer
  3787  0009E2  6E1B               	movwf	crcBufS_get@_this,c
  3788  0009E4  0E00               	movlw	high _crc_buffer
  3789  0009E6  6E1C               	movwf	crcBufS_get@_this+1,c
  3790  0009E8  C1D3  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3791  0009EC  0E01               	movlw	1
  3792  0009EE  6E1E               	movwf	crcBufS_get@space,c
  3793  0009F0  ECE7  F006         	call	_crcBufS_get	;wreg free
  3794  0009F4  0101               	movlb	1	; () banked
  3795  0009F6  19D2               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3796  0009F8  A4D8               	btfss	status,2,c
  3797  0009FA  D021               	goto	l3452
  3798                           
  3799                           ; BSR set to: 1
  3800                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3801  0009FC  0101               	movlb	1	; () banked
  3802  0009FE  05D1               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3803  000A00  A4D8               	btfss	status,2,c
  3804  000A02  D00C               	goto	l3448
  3805                           
  3806                           ; BSR set to: 1
  3807                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3808  000A04  0EEC               	movlw	low _crc_buffer
  3809  000A06  6E1B               	movwf	crcBufS_status_put@_this,c
  3810  000A08  0E00               	movlw	high _crc_buffer
  3811  000A0A  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3812  000A0C  C1D3  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3813  000A10  0E01               	movlw	1
  3814  000A12  6E1E               	movwf	crcBufS_status_put@status,c
  3815  000A14  EC1B  F009         	call	_crcBufS_status_put	;wreg free
  3816                           
  3817                           ;FastTransfer.c: 393: break;
  3818  000A18  0012               	return	
  3819                           
  3820                           ;FastTransfer.c: 394: } else if (arrayHolder[1] == 2) {
  3821  000A1A  D011               	goto	l3452
  3822  000A1C                     l3448:
  3823  000A1C  0E02               	movlw	2
  3824  000A1E  0101               	movlb	1	; () banked
  3825  000A20  19D1               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3826  000A22  A4D8               	btfss	status,2,c
  3827  000A24  D00C               	goto	l3452
  3828                           
  3829                           ; BSR set to: 1
  3830                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3831  000A26  0EEC               	movlw	low _crc_buffer
  3832  000A28  6E1B               	movwf	crcBufS_status_put@_this,c
  3833  000A2A  0E00               	movlw	high _crc_buffer
  3834  000A2C  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3835  000A2E  C1D3  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3836  000A32  0E02               	movlw	2
  3837  000A34  6E1E               	movwf	crcBufS_status_put@status,c
  3838  000A36  EC1B  F009         	call	_crcBufS_status_put	;wreg free
  3839                           
  3840                           ;FastTransfer.c: 396: break;
  3841  000A3A  0012               	return	
  3842  000A3C  D000               	goto	l3452
  3843  000A3E                     l3452:
  3844  000A3E  0101               	movlb	1	; () banked
  3845  000A40  4BD3               	infsnz	CRCcheck@rt& (0+255),f,b
  3846  000A42  2BD4               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3847  000A44  D7B3               	goto	l3434
  3848                           
  3849                           ; BSR set to: 1
  3850                           ;FastTransfer.c: 397: }
  3851                           ;FastTransfer.c: 398: }
  3852                           ;FastTransfer.c: 399: }
  3853                           ;FastTransfer.c: 400: }
  3854                           ;FastTransfer.c: 401: } else {
  3855                           
  3856                           ; BSR set to: 1
  3857  000A46  0012               	return	
  3858  000A48                     l3456:
  3859                           
  3860                           ; BSR set to: 1
  3861                           ;FastTransfer.c: 402: crcErrorCounter++;
  3862  000A48  4A29               	infsnz	_crcErrorCounter,f,c
  3863  000A4A  2A2A               	incf	_crcErrorCounter+1,f,c
  3864  000A4C  0012               	return	
  3865  000A4E                     l718:
  3866  000A4E  0012               	return		;funcret
  3867  000A50                     __end_of_CRCcheck:
  3868                           	opt stack 0
  3869                           tosu	equ	0xFFF
  3870                           tosh	equ	0xFFE
  3871                           tosl	equ	0xFFD
  3872                           pclath	equ	0xFFA
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           prodh	equ	0xFF4
  3878                           prodl	equ	0xFF3
  3879                           intcon	equ	0xFF2
  3880                           postinc0	equ	0xFEE
  3881                           wreg	equ	0xFE8
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           postdec2	equ	0xFDD
  3885                           plusw2	equ	0xFDB
  3886                           fsr2h	equ	0xFDA
  3887                           fsr2l	equ	0xFD9
  3888                           status	equ	0xFD8
  3889                           
  3890 ;; *************** function _crcBufS_status_put *****************
  3891 ;; Defined at:
  3892 ;;		line 336 in file "FastTransfer.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3895 ;;		 -> crc_buffer(17), 
  3896 ;;  time            1   28[COMRAM] unsigned char 
  3897 ;;  status          1   29[COMRAM] unsigned char 
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  wantedTime      2   34[COMRAM] int 
  3900 ;; Return value:  Size  Location     Type
  3901 ;;		None               void
  3902 ;; Registers used:
  3903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3909 ;;      Params:         4       0       0       0       0       0       0
  3910 ;;      Locals:         2       0       0       0       0       0       0
  3911 ;;      Temps:          4       0       0       0       0       0       0
  3912 ;;      Totals:        10       0       0       0       0       0       0
  3913 ;;Total ram usage:       10 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    4
  3916 ;; This function calls:
  3917 ;;		Nothing
  3918 ;; This function is called by:
  3919 ;;		_CRCcheck
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           	psect	text15
  3924  001236                     __ptext15:
  3925                           	opt stack 0
  3926  001236                     _crcBufS_status_put:
  3927                           	opt stack 23
  3928                           
  3929                           ;FastTransfer.c: 337: if (time >= 5) {
  3930                           
  3931                           ;incstack = 0
  3932  001236  0E04               	movlw	4
  3933  001238  641D               	cpfsgt	crcBufS_status_put@time,c
  3934  00123A  D003               	goto	l3364
  3935                           
  3936                           ;FastTransfer.c: 338: time = 5 - 1;
  3937  00123C  0E04               	movlw	4
  3938  00123E  6E1D               	movwf	crcBufS_status_put@time,c
  3939  001240  D000               	goto	l3364
  3940  001242                     l3364:
  3941                           
  3942                           ;FastTransfer.c: 339: }
  3943                           ;FastTransfer.c: 340: time = time + 1;
  3944  001242  281D               	incf	crcBufS_status_put@time,w,c
  3945  001244  6E1D               	movwf	crcBufS_status_put@time,c
  3946                           
  3947                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3948  001246  501D               	movf	crcBufS_status_put@time,w,c
  3949  001248  0D03               	mullw	3
  3950  00124A  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3951  00124E  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3952                           
  3953                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3954  001252  EE20 F00F          	lfsr	2,15
  3955  001256  501B               	movf	crcBufS_status_put@_this,w,c
  3956  001258  26D9               	addwf	fsr2l,f,c
  3957  00125A  501C               	movf	crcBufS_status_put@_this+1,w,c
  3958  00125C  22DA               	addwfc	fsr2h,f,c
  3959  00125E  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3960  001260  5CDE               	subwf	postinc2,w,c
  3961  001262  50DE               	movf	postinc2,w,c
  3962  001264  0A80               	xorlw	128
  3963  001266  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3964  001268  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3965  00126A  0A80               	xorlw	128
  3966  00126C  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3967  00126E  B0D8               	btfsc	status,0,c
  3968  001270  D02B               	goto	l3372
  3969                           
  3970                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3971  001272  EE20 F00F          	lfsr	2,15
  3972  001276  501B               	movf	crcBufS_status_put@_this,w,c
  3973  001278  26D9               	addwf	fsr2l,f,c
  3974  00127A  501C               	movf	crcBufS_status_put@_this+1,w,c
  3975  00127C  22DA               	addwfc	fsr2h,f,c
  3976  00127E  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3977  001282  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3978  001286  1E1F               	comf	??_crcBufS_status_put,f,c
  3979  001288  1E20               	comf	??_crcBufS_status_put+1,f,c
  3980  00128A  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3981  00128C  2A20               	incf	??_crcBufS_status_put+1,f,c
  3982  00128E  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3983  001290  261F               	addwf	??_crcBufS_status_put,f,c
  3984  001292  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3985  001294  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3986  001296  1E1F               	comf	??_crcBufS_status_put,f,c
  3987  001298  1E20               	comf	??_crcBufS_status_put+1,f,c
  3988  00129A  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3989  00129C  2A20               	incf	??_crcBufS_status_put+1,f,c
  3990  00129E  0E0F               	movlw	15
  3991  0012A0  241F               	addwf	??_crcBufS_status_put,w,c
  3992  0012A2  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3993  0012A4  0E00               	movlw	0
  3994  0012A6  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3995  0012A8  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3996                           
  3997                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3998  0012AA  0E02               	movlw	2
  3999  0012AC  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4000  0012AE  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4001  0012B0  0E00               	movlw	0
  4002  0012B2  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4003  0012B4  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4004  0012B6  501F               	movf	??_crcBufS_status_put,w,c
  4005  0012B8  241B               	addwf	crcBufS_status_put@_this,w,c
  4006  0012BA  6ED9               	movwf	fsr2l,c
  4007  0012BC  5020               	movf	??_crcBufS_status_put+1,w,c
  4008  0012BE  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4009  0012C0  6EDA               	movwf	fsr2h,c
  4010  0012C2  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4011                           
  4012                           ;FastTransfer.c: 345: } else {
  4013  0012C6  0012               	return	
  4014  0012C8                     l3372:
  4015                           
  4016                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4017  0012C8  EE20 F00F          	lfsr	2,15
  4018  0012CC  501B               	movf	crcBufS_status_put@_this,w,c
  4019  0012CE  26D9               	addwf	fsr2l,f,c
  4020  0012D0  501C               	movf	crcBufS_status_put@_this+1,w,c
  4021  0012D2  22DA               	addwfc	fsr2h,f,c
  4022  0012D4  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4023  0012D8  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4024  0012DC  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4025  0012E0  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4026  0012E4  1E21               	comf	??_crcBufS_status_put+2,f,c
  4027  0012E6  1E22               	comf	??_crcBufS_status_put+3,f,c
  4028  0012E8  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4029  0012EA  2A22               	incf	??_crcBufS_status_put+3,f,c
  4030  0012EC  501F               	movf	??_crcBufS_status_put,w,c
  4031  0012EE  2621               	addwf	??_crcBufS_status_put+2,f,c
  4032  0012F0  5020               	movf	??_crcBufS_status_put+1,w,c
  4033  0012F2  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4034  0012F4  0E02               	movlw	2
  4035  0012F6  2621               	addwf	??_crcBufS_status_put+2,f,c
  4036  0012F8  0E00               	movlw	0
  4037  0012FA  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4038  0012FC  5021               	movf	??_crcBufS_status_put+2,w,c
  4039  0012FE  241B               	addwf	crcBufS_status_put@_this,w,c
  4040  001300  6ED9               	movwf	fsr2l,c
  4041  001302  5022               	movf	??_crcBufS_status_put+3,w,c
  4042  001304  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4043  001306  6EDA               	movwf	fsr2h,c
  4044  001308  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4045  00130C  0012               	return	
  4046  00130E  0012               	return		;funcret
  4047  001310                     __end_of_crcBufS_status_put:
  4048                           	opt stack 0
  4049                           tosu	equ	0xFFF
  4050                           tosh	equ	0xFFE
  4051                           tosl	equ	0xFFD
  4052                           pclath	equ	0xFFA
  4053                           tblptru	equ	0xFF8
  4054                           tblptrh	equ	0xFF7
  4055                           tblptrl	equ	0xFF6
  4056                           tablat	equ	0xFF5
  4057                           prodh	equ	0xFF4
  4058                           prodl	equ	0xFF3
  4059                           intcon	equ	0xFF2
  4060                           postinc0	equ	0xFEE
  4061                           wreg	equ	0xFE8
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           plusw2	equ	0xFDB
  4066                           fsr2h	equ	0xFDA
  4067                           fsr2l	equ	0xFD9
  4068                           status	equ	0xFD8
  4069                           
  4070 ;; *************** function _crcBufS_get *****************
  4071 ;; Defined at:
  4072 ;;		line 353 in file "FastTransfer.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4075 ;;		 -> crc_buffer(17), 
  4076 ;;  time            1   28[COMRAM] unsigned char 
  4077 ;;  space           1   29[COMRAM] unsigned char 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  wantedTime      2   36[COMRAM] int 
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  1    wreg      unsigned char 
  4082 ;; Registers used:
  4083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4089 ;;      Params:         4       0       0       0       0       0       0
  4090 ;;      Locals:         2       0       0       0       0       0       0
  4091 ;;      Temps:          6       0       0       0       0       0       0
  4092 ;;      Totals:        12       0       0       0       0       0       0
  4093 ;;Total ram usage:       12 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    4
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_CRCcheck
  4100 ;;		_AKNAK
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text16
  4105  000DCE                     __ptext16:
  4106                           	opt stack 0
  4107  000DCE                     _crcBufS_get:
  4108                           	opt stack 23
  4109                           
  4110                           ;FastTransfer.c: 354: if (time >= 5) {
  4111                           
  4112                           ;incstack = 0
  4113  000DCE  0E04               	movlw	4
  4114  000DD0  641D               	cpfsgt	crcBufS_get@time,c
  4115  000DD2  D003               	goto	l3340
  4116                           
  4117                           ;FastTransfer.c: 355: time = 5 - 1;
  4118  000DD4  0E04               	movlw	4
  4119  000DD6  6E1D               	movwf	crcBufS_get@time,c
  4120  000DD8  D000               	goto	l3340
  4121  000DDA                     l3340:
  4122                           
  4123                           ;FastTransfer.c: 356: }
  4124                           ;FastTransfer.c: 357: if (space >= 3) {
  4125  000DDA  0E02               	movlw	2
  4126  000DDC  641E               	cpfsgt	crcBufS_get@space,c
  4127  000DDE  D003               	goto	l3344
  4128                           
  4129                           ;FastTransfer.c: 358: space = 3 - 1;
  4130  000DE0  0E02               	movlw	2
  4131  000DE2  6E1E               	movwf	crcBufS_get@space,c
  4132  000DE4  D000               	goto	l3344
  4133  000DE6                     l3344:
  4134                           
  4135                           ;FastTransfer.c: 359: }
  4136                           ;FastTransfer.c: 360: time = time + 1;
  4137  000DE6  281D               	incf	crcBufS_get@time,w,c
  4138  000DE8  6E1D               	movwf	crcBufS_get@time,c
  4139                           
  4140                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4141  000DEA  501D               	movf	crcBufS_get@time,w,c
  4142  000DEC  0D03               	mullw	3
  4143  000DEE  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4144  000DF2  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4145                           
  4146                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4147  000DF6  EE20 F00F          	lfsr	2,15
  4148  000DFA  501B               	movf	crcBufS_get@_this,w,c
  4149  000DFC  26D9               	addwf	fsr2l,f,c
  4150  000DFE  501C               	movf	crcBufS_get@_this+1,w,c
  4151  000E00  22DA               	addwfc	fsr2h,f,c
  4152  000E02  5025               	movf	crcBufS_get@wantedTime,w,c
  4153  000E04  5CDE               	subwf	postinc2,w,c
  4154  000E06  50DE               	movf	postinc2,w,c
  4155  000E08  0A80               	xorlw	128
  4156  000E0A  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4157  000E0C  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4158  000E0E  0A80               	xorlw	128
  4159  000E10  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4160  000E12  B0D8               	btfsc	status,0,c
  4161  000E14  D02A               	goto	l3356
  4162                           
  4163                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4164  000E16  EE20 F00F          	lfsr	2,15
  4165  000E1A  501B               	movf	crcBufS_get@_this,w,c
  4166  000E1C  26D9               	addwf	fsr2l,f,c
  4167  000E1E  501C               	movf	crcBufS_get@_this+1,w,c
  4168  000E20  22DA               	addwfc	fsr2h,f,c
  4169  000E22  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4170  000E26  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4171  000E2A  1E1F               	comf	??_crcBufS_get,f,c
  4172  000E2C  1E20               	comf	??_crcBufS_get+1,f,c
  4173  000E2E  4A1F               	infsnz	??_crcBufS_get,f,c
  4174  000E30  2A20               	incf	??_crcBufS_get+1,f,c
  4175  000E32  5025               	movf	crcBufS_get@wantedTime,w,c
  4176  000E34  261F               	addwf	??_crcBufS_get,f,c
  4177  000E36  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4178  000E38  2220               	addwfc	??_crcBufS_get+1,f,c
  4179  000E3A  1E1F               	comf	??_crcBufS_get,f,c
  4180  000E3C  1E20               	comf	??_crcBufS_get+1,f,c
  4181  000E3E  4A1F               	infsnz	??_crcBufS_get,f,c
  4182  000E40  2A20               	incf	??_crcBufS_get+1,f,c
  4183  000E42  0E0F               	movlw	15
  4184  000E44  241F               	addwf	??_crcBufS_get,w,c
  4185  000E46  6E25               	movwf	crcBufS_get@wantedTime,c
  4186  000E48  0E00               	movlw	0
  4187  000E4A  2020               	addwfc	??_crcBufS_get+1,w,c
  4188  000E4C  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4189                           
  4190                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4191  000E4E  501E               	movf	crcBufS_get@space,w,c
  4192  000E50  2425               	addwf	crcBufS_get@wantedTime,w,c
  4193  000E52  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4194  000E54  0E00               	movlw	0
  4195  000E56  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4196  000E58  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4197  000E5A  501F               	movf	??_crcBufS_get,w,c
  4198  000E5C  241B               	addwf	crcBufS_get@_this,w,c
  4199  000E5E  6ED9               	movwf	fsr2l,c
  4200  000E60  5020               	movf	??_crcBufS_get+1,w,c
  4201  000E62  201C               	addwfc	crcBufS_get@_this+1,w,c
  4202  000E64  6EDA               	movwf	fsr2h,c
  4203  000E66  50DF               	movf	indf2,w,c
  4204                           
  4205                           ;FastTransfer.c: 365: } else {
  4206  000E68  0012               	return	
  4207  000E6A                     l3356:
  4208                           
  4209                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4210  000E6A  EE20 F00F          	lfsr	2,15
  4211  000E6E  501B               	movf	crcBufS_get@_this,w,c
  4212  000E70  26D9               	addwf	fsr2l,f,c
  4213  000E72  501C               	movf	crcBufS_get@_this+1,w,c
  4214  000E74  22DA               	addwfc	fsr2h,f,c
  4215  000E76  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4216  000E7A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4217  000E7E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4218  000E82  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4219  000E86  1E21               	comf	??_crcBufS_get+2,f,c
  4220  000E88  1E22               	comf	??_crcBufS_get+3,f,c
  4221  000E8A  4A21               	infsnz	??_crcBufS_get+2,f,c
  4222  000E8C  2A22               	incf	??_crcBufS_get+3,f,c
  4223  000E8E  501E               	movf	crcBufS_get@space,w,c
  4224  000E90  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4225  000E92  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4226  000E94  5021               	movf	??_crcBufS_get+2,w,c
  4227  000E96  2623               	addwf	??_crcBufS_get+4,f,c
  4228  000E98  5022               	movf	??_crcBufS_get+3,w,c
  4229  000E9A  2224               	addwfc	??_crcBufS_get+5,f,c
  4230  000E9C  501F               	movf	??_crcBufS_get,w,c
  4231  000E9E  2623               	addwf	??_crcBufS_get+4,f,c
  4232  000EA0  5020               	movf	??_crcBufS_get+1,w,c
  4233  000EA2  2224               	addwfc	??_crcBufS_get+5,f,c
  4234  000EA4  5023               	movf	??_crcBufS_get+4,w,c
  4235  000EA6  241B               	addwf	crcBufS_get@_this,w,c
  4236  000EA8  6ED9               	movwf	fsr2l,c
  4237  000EAA  5024               	movf	??_crcBufS_get+5,w,c
  4238  000EAC  201C               	addwfc	crcBufS_get@_this+1,w,c
  4239  000EAE  6EDA               	movwf	fsr2h,c
  4240  000EB0  50DF               	movf	indf2,w,c
  4241  000EB2  0012               	return	
  4242  000EB4  0012               	return		;funcret
  4243  000EB6                     __end_of_crcBufS_get:
  4244                           	opt stack 0
  4245                           tosu	equ	0xFFF
  4246                           tosh	equ	0xFFE
  4247                           tosl	equ	0xFFD
  4248                           pclath	equ	0xFFA
  4249                           tblptru	equ	0xFF8
  4250                           tblptrh	equ	0xFF7
  4251                           tblptrl	equ	0xFF6
  4252                           tablat	equ	0xFF5
  4253                           prodh	equ	0xFF4
  4254                           prodl	equ	0xFF3
  4255                           intcon	equ	0xFF2
  4256                           postinc0	equ	0xFEE
  4257                           wreg	equ	0xFE8
  4258                           indf2	equ	0xFDF
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           plusw2	equ	0xFDB
  4262                           fsr2h	equ	0xFDA
  4263                           fsr2l	equ	0xFD9
  4264                           status	equ	0xFD8
  4265                           
  4266 ;; *************** function _Receive_get *****************
  4267 ;; Defined at:
  4268 ;;		line 126 in file "UART.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      unsigned char 
  4275 ;; Registers used:
  4276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4282 ;;      Params:         0       0       0       0       0       0       0
  4283 ;;      Locals:         0       0       0       0       0       0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0
  4285 ;;      Totals:         0       0       0       0       0       0       0
  4286 ;;Total ram usage:        0 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    6
  4289 ;; This function calls:
  4290 ;;		_UART_buff_get
  4291 ;; This function is called by:
  4292 ;;		_SYSTEM_Initialize
  4293 ;;		_getch
  4294 ;;		_CRCcheck
  4295 ;;		_receiveData
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           	psect	text17
  4300  001B78                     __ptext17:
  4301                           	opt stack 0
  4302  001B78                     _Receive_get:
  4303                           	opt stack 22
  4304                           
  4305                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4306                           
  4307                           ;incstack = 0
  4308  001B78  0E00               	movlw	low _input_buffer
  4309  001B7A  6E21               	movwf	UART_buff_get@_this,c
  4310  001B7C  0E03               	movlw	high _input_buffer
  4311  001B7E  6E22               	movwf	UART_buff_get@_this+1,c
  4312  001B80  ECD3  F009         	call	_UART_buff_get	;wreg free
  4313  001B84  0012               	return	
  4314  001B86  0012               	return		;funcret
  4315  001B88                     __end_of_Receive_get:
  4316                           	opt stack 0
  4317                           tosu	equ	0xFFF
  4318                           tosh	equ	0xFFE
  4319                           tosl	equ	0xFFD
  4320                           pclath	equ	0xFFA
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           intcon	equ	0xFF2
  4328                           postinc0	equ	0xFEE
  4329                           wreg	equ	0xFE8
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           plusw2	equ	0xFDB
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function _UART_buff_get *****************
  4339 ;; Defined at:
  4340 ;;		line 81 in file "UART.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4343 ;;		 -> output_buffer(206), input_buffer(206), 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  c               1   36[COMRAM] unsigned char 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      unsigned char 
  4348 ;; Registers used:
  4349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4355 ;;      Params:         2       0       0       0       0       0       0
  4356 ;;      Locals:         1       0       0       0       0       0       0
  4357 ;;      Temps:          2       0       0       0       0       0       0
  4358 ;;      Totals:         5       0       0       0       0       0       0
  4359 ;;Total ram usage:        5 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    5
  4362 ;; This function calls:
  4363 ;;		_UART_buff_modulo_inc
  4364 ;; This function is called by:
  4365 ;;		_Receive_get
  4366 ;;		_Send_put
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text18
  4371  0013A6                     __ptext18:
  4372                           	opt stack 0
  4373  0013A6                     _UART_buff_get:
  4374                           	opt stack 21
  4375                           
  4376                           ;UART.c: 82: unsigned char c;
  4377                           ;UART.c: 83: if (_this->count > 0) {
  4378                           
  4379                           ;incstack = 0
  4380  0013A6  EE20 F0CC          	lfsr	2,204
  4381  0013AA  5021               	movf	UART_buff_get@_this,w,c
  4382  0013AC  26D9               	addwf	fsr2l,f,c
  4383  0013AE  5022               	movf	UART_buff_get@_this+1,w,c
  4384  0013B0  22DA               	addwfc	fsr2h,f,c
  4385  0013B2  0E01               	movlw	1
  4386  0013B4  BEDB               	btfsc	plusw2,7,c
  4387  0013B6  D03C               	goto	l3224
  4388  0013B8  0E01               	movlw	1
  4389  0013BA  50DB               	movf	plusw2,w,c
  4390  0013BC  E103               	bnz	u2700
  4391  0013BE  04DE               	decf	postinc2,w,c
  4392  0013C0  A0D8               	btfss	status,0,c
  4393  0013C2  D036               	goto	l3224
  4394  0013C4                     u2700:
  4395                           
  4396                           ;UART.c: 84: c = _this->buf[_this->tail];
  4397  0013C4  EE20 F0CA          	lfsr	2,202
  4398  0013C8  5021               	movf	UART_buff_get@_this,w,c
  4399  0013CA  26D9               	addwf	fsr2l,f,c
  4400  0013CC  5022               	movf	UART_buff_get@_this+1,w,c
  4401  0013CE  22DA               	addwfc	fsr2h,f,c
  4402  0013D0  CFDE F023          	movff	postinc2,??_UART_buff_get
  4403  0013D4  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4404  0013D8  5023               	movf	??_UART_buff_get,w,c
  4405  0013DA  2421               	addwf	UART_buff_get@_this,w,c
  4406  0013DC  6ED9               	movwf	fsr2l,c
  4407  0013DE  5024               	movf	??_UART_buff_get+1,w,c
  4408  0013E0  2022               	addwfc	UART_buff_get@_this+1,w,c
  4409  0013E2  6EDA               	movwf	fsr2h,c
  4410  0013E4  50DF               	movf	indf2,w,c
  4411  0013E6  6E25               	movwf	UART_buff_get@c,c
  4412                           
  4413                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4414  0013E8  EE20 F0CA          	lfsr	2,202
  4415  0013EC  5021               	movf	UART_buff_get@_this,w,c
  4416  0013EE  26D9               	addwf	fsr2l,f,c
  4417  0013F0  5022               	movf	UART_buff_get@_this+1,w,c
  4418  0013F2  22DA               	addwfc	fsr2h,f,c
  4419  0013F4  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4420  0013F8  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4421  0013FC  0E00               	movlw	0
  4422  0013FE  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4423  001400  0EC8               	movlw	200
  4424  001402  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4425  001404  ECD9  F00C         	call	_UART_buff_modulo_inc	;wreg free
  4426  001408  EE20 F0CA          	lfsr	2,202
  4427  00140C  5021               	movf	UART_buff_get@_this,w,c
  4428  00140E  26D9               	addwf	fsr2l,f,c
  4429  001410  5022               	movf	UART_buff_get@_this+1,w,c
  4430  001412  22DA               	addwfc	fsr2h,f,c
  4431  001414  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4432  001418  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4433                           
  4434                           ;UART.c: 86: --_this->count;
  4435  00141C  EE20 F0CC          	lfsr	2,204
  4436  001420  5021               	movf	UART_buff_get@_this,w,c
  4437  001422  26D9               	addwf	fsr2l,f,c
  4438  001424  5022               	movf	UART_buff_get@_this+1,w,c
  4439  001426  22DA               	addwfc	fsr2h,f,c
  4440  001428  06DE               	decf	postinc2,f,c
  4441  00142A  0E00               	movlw	0
  4442  00142C  5ADD               	subwfb	postdec2,f,c
  4443                           
  4444                           ;UART.c: 87: } else {
  4445  00142E  D002               	goto	l491
  4446  001430                     l3224:
  4447                           
  4448                           ;UART.c: 88: c = 0;
  4449  001430  0E00               	movlw	0
  4450  001432  6E25               	movwf	UART_buff_get@c,c
  4451  001434                     l491:
  4452                           
  4453                           ;UART.c: 89: }
  4454                           ;UART.c: 90: return (c);
  4455  001434  5025               	movf	UART_buff_get@c,w,c
  4456  001436  0012               	return	
  4457  001438  0012               	return		;funcret
  4458  00143A                     __end_of_UART_buff_get:
  4459                           	opt stack 0
  4460                           tosu	equ	0xFFF
  4461                           tosh	equ	0xFFE
  4462                           tosl	equ	0xFFD
  4463                           pclath	equ	0xFFA
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           prodh	equ	0xFF4
  4469                           prodl	equ	0xFF3
  4470                           intcon	equ	0xFF2
  4471                           postinc0	equ	0xFEE
  4472                           wreg	equ	0xFE8
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           plusw2	equ	0xFDB
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function _UART_buff_modulo_inc *****************
  4482 ;; Defined at:
  4483 ;;		line 106 in file "UART.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;  value           2   26[COMRAM] const unsigned int 
  4486 ;;  modulus         2   28[COMRAM] const unsigned int 
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;  my_value        2   30[COMRAM] unsigned int 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  2   26[COMRAM] unsigned int 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4498 ;;      Params:         4       0       0       0       0       0       0
  4499 ;;      Locals:         2       0       0       0       0       0       0
  4500 ;;      Temps:          0       0       0       0       0       0       0
  4501 ;;      Totals:         6       0       0       0       0       0       0
  4502 ;;Total ram usage:        6 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    4
  4505 ;; This function calls:
  4506 ;;		Nothing
  4507 ;; This function is called by:
  4508 ;;		_UART_buff_put
  4509 ;;		_UART_buff_get
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text19
  4514  0019B2                     __ptext19:
  4515                           	opt stack 0
  4516  0019B2                     _UART_buff_modulo_inc:
  4517                           	opt stack 21
  4518                           
  4519                           ;UART.c: 107: unsigned int my_value = value + 1;
  4520                           
  4521                           ;incstack = 0
  4522  0019B2  0E01               	movlw	1
  4523  0019B4  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4524  0019B6  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4525  0019B8  0E00               	movlw	0
  4526  0019BA  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4527  0019BC  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4528                           
  4529                           ;UART.c: 108: if (my_value >= modulus) {
  4530  0019BE  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4531  0019C0  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4532  0019C2  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4533  0019C4  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4534  0019C6  A0D8               	btfss	status,0,c
  4535  0019C8  D005               	goto	l3182
  4536                           
  4537                           ;UART.c: 109: my_value = 0;
  4538  0019CA  0E00               	movlw	0
  4539  0019CC  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4540  0019CE  0E00               	movlw	0
  4541  0019D0  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4542  0019D2  D000               	goto	l3182
  4543  0019D4                     l3182:
  4544                           
  4545                           ;UART.c: 110: }
  4546                           ;UART.c: 111: return (my_value);
  4547  0019D4  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4548  0019D8  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4549  0019DC  0012               	return	
  4550  0019DE  0012               	return		;funcret
  4551  0019E0                     __end_of_UART_buff_modulo_inc:
  4552                           	opt stack 0
  4553                           tosu	equ	0xFFF
  4554                           tosh	equ	0xFFE
  4555                           tosl	equ	0xFFD
  4556                           pclath	equ	0xFFA
  4557                           tblptru	equ	0xFF8
  4558                           tblptrh	equ	0xFF7
  4559                           tblptrl	equ	0xFF6
  4560                           tablat	equ	0xFF5
  4561                           prodh	equ	0xFF4
  4562                           prodl	equ	0xFF3
  4563                           intcon	equ	0xFF2
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           plusw2	equ	0xFDB
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8
  4573                           
  4574 ;; *************** function _Receive_available *****************
  4575 ;; Defined at:
  4576 ;;		line 122 in file "UART.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;		None
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;		None
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  2   28[COMRAM] int 
  4583 ;; Registers used:
  4584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4590 ;;      Params:         2       0       0       0       0       0       0
  4591 ;;      Locals:         0       0       0       0       0       0       0
  4592 ;;      Temps:          0       0       0       0       0       0       0
  4593 ;;      Totals:         2       0       0       0       0       0       0
  4594 ;;Total ram usage:        2 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    5
  4597 ;; This function calls:
  4598 ;;		_UART_buff_size
  4599 ;; This function is called by:
  4600 ;;		_SYSTEM_Initialize
  4601 ;;		_CRCcheck
  4602 ;;		_receiveData
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	text20
  4607  001AF2                     __ptext20:
  4608                           	opt stack 0
  4609  001AF2                     _Receive_available:
  4610                           	opt stack 23
  4611                           
  4612                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4613                           
  4614                           ;incstack = 0
  4615  001AF2  0E00               	movlw	low _input_buffer
  4616  001AF4  6E1B               	movwf	UART_buff_size@_this,c
  4617  001AF6  0E03               	movlw	high _input_buffer
  4618  001AF8  6E1C               	movwf	UART_buff_size@_this+1,c
  4619  001AFA  EC85  F00D         	call	_UART_buff_size	;wreg free
  4620  001AFE  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4621  001B02  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4622  001B06  0012               	return	
  4623  001B08  0012               	return		;funcret
  4624  001B0A                     __end_of_Receive_available:
  4625                           	opt stack 0
  4626                           tosu	equ	0xFFF
  4627                           tosh	equ	0xFFE
  4628                           tosl	equ	0xFFD
  4629                           pclath	equ	0xFFA
  4630                           tblptru	equ	0xFF8
  4631                           tblptrh	equ	0xFF7
  4632                           tblptrl	equ	0xFF6
  4633                           tablat	equ	0xFF5
  4634                           prodh	equ	0xFF4
  4635                           prodl	equ	0xFF3
  4636                           intcon	equ	0xFF2
  4637                           postinc0	equ	0xFEE
  4638                           wreg	equ	0xFE8
  4639                           indf2	equ	0xFDF
  4640                           postinc2	equ	0xFDE
  4641                           postdec2	equ	0xFDD
  4642                           plusw2	equ	0xFDB
  4643                           fsr2h	equ	0xFDA
  4644                           fsr2l	equ	0xFD9
  4645                           status	equ	0xFD8
  4646                           
  4647 ;; *************** function _UART_buff_size *****************
  4648 ;; Defined at:
  4649 ;;		line 102 in file "UART.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4652 ;;		 -> output_buffer(206), input_buffer(206), 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;		None
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  2   26[COMRAM] int 
  4657 ;; Registers used:
  4658 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4664 ;;      Params:         2       0       0       0       0       0       0
  4665 ;;      Locals:         0       0       0       0       0       0       0
  4666 ;;      Temps:          0       0       0       0       0       0       0
  4667 ;;      Totals:         2       0       0       0       0       0       0
  4668 ;;Total ram usage:        2 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    4
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_Receive_available
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text21
  4679  001B0A                     __ptext21:
  4680                           	opt stack 0
  4681  001B0A                     _UART_buff_size:
  4682                           	opt stack 23
  4683                           
  4684                           ;UART.c: 103: return (_this->count);
  4685                           
  4686                           ;incstack = 0
  4687  001B0A  EE20 F0CC          	lfsr	2,204
  4688  001B0E  501B               	movf	UART_buff_size@_this,w,c
  4689  001B10  26D9               	addwf	fsr2l,f,c
  4690  001B12  501C               	movf	UART_buff_size@_this+1,w,c
  4691  001B14  22DA               	addwfc	fsr2h,f,c
  4692  001B16  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4693  001B1A  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4694  001B1E  0012               	return	
  4695  001B20  0012               	return		;funcret
  4696  001B22                     __end_of_UART_buff_size:
  4697                           	opt stack 0
  4698                           tosu	equ	0xFFF
  4699                           tosh	equ	0xFFE
  4700                           tosl	equ	0xFFD
  4701                           pclath	equ	0xFFA
  4702                           tblptru	equ	0xFF8
  4703                           tblptrh	equ	0xFF7
  4704                           tblptrl	equ	0xFF6
  4705                           tablat	equ	0xFF5
  4706                           prodh	equ	0xFF4
  4707                           prodl	equ	0xFF3
  4708                           intcon	equ	0xFF2
  4709                           postinc0	equ	0xFEE
  4710                           wreg	equ	0xFE8
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           postdec2	equ	0xFDD
  4714                           plusw2	equ	0xFDB
  4715                           fsr2h	equ	0xFDA
  4716                           fsr2l	equ	0xFD9
  4717                           status	equ	0xFD8
  4718                           
  4719 ;; *************** function _CRC8 *****************
  4720 ;; Defined at:
  4721 ;;		line 34 in file "FastTransfer.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4724 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1525(3), receiveData@holder(3), 
  4725 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4726 ;;  len             1   28[COMRAM] unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  sum             1   29[COMRAM] unsigned char 
  4729 ;;  tempI           1   31[COMRAM] unsigned char 
  4730 ;;  extract         1   30[COMRAM] unsigned char 
  4731 ;;  crc             1   32[COMRAM] unsigned char 
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  1    wreg      unsigned char 
  4734 ;; Registers used:
  4735 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4741 ;;      Params:         3       0       0       0       0       0       0
  4742 ;;      Locals:         4       0       0       0       0       0       0
  4743 ;;      Temps:          0       0       0       0       0       0       0
  4744 ;;      Totals:         7       0       0       0       0       0       0
  4745 ;;Total ram usage:        7 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    4
  4748 ;; This function calls:
  4749 ;;		Nothing
  4750 ;; This function is called by:
  4751 ;;		_sendData
  4752 ;;		_receiveData
  4753 ;;		_CRCcheck
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text22
  4758  00177C                     __ptext22:
  4759                           	opt stack 0
  4760  00177C                     _CRC8:
  4761                           	opt stack 23
  4762                           
  4763                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4764                           
  4765                           ;incstack = 0
  4766  00177C  0E00               	movlw	0
  4767  00177E  6E21               	movwf	CRC8@crc,c
  4768                           
  4769                           ;FastTransfer.c: 36: while (len--) {
  4770  001780  D01F               	goto	l3302
  4771  001782                     l3286:
  4772                           
  4773                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4774  001782  C01B  FFD9         	movff	CRC8@data,fsr2l
  4775  001786  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4776  00178A  50DF               	movf	indf2,w,c
  4777  00178C  6E1F               	movwf	CRC8@extract,c
  4778  00178E  4A1B               	infsnz	CRC8@data,f,c
  4779  001790  2A1C               	incf	CRC8@data+1,f,c
  4780                           
  4781                           ;FastTransfer.c: 38: unsigned char tempI;
  4782                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4783  001792  0E08               	movlw	8
  4784  001794  6E20               	movwf	CRC8@tempI,c
  4785  001796  D00F               	goto	l3300
  4786  001798                     l3292:
  4787                           
  4788                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4789  001798  5021               	movf	CRC8@crc,w,c
  4790  00179A  181F               	xorwf	CRC8@extract,w,c
  4791  00179C  0B01               	andlw	1
  4792  00179E  6E1E               	movwf	CRC8@sum,c
  4793                           
  4794                           ;FastTransfer.c: 41: crc >>= 1;
  4795  0017A0  90D8               	bcf	status,0,c
  4796  0017A2  3221               	rrcf	CRC8@crc,f,c
  4797                           
  4798                           ;FastTransfer.c: 42: if (sum) {
  4799  0017A4  501E               	movf	CRC8@sum,w,c
  4800  0017A6  B4D8               	btfsc	status,2,c
  4801  0017A8  D002               	goto	l604
  4802                           
  4803                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4804  0017AA  0E8C               	movlw	140
  4805  0017AC  1A21               	xorwf	CRC8@crc,f,c
  4806  0017AE                     l604:
  4807                           
  4808                           ;FastTransfer.c: 44: }
  4809                           ;FastTransfer.c: 45: extract >>= 1;
  4810  0017AE  90D8               	bcf	status,0,c
  4811  0017B0  321F               	rrcf	CRC8@extract,f,c
  4812  0017B2  0620               	decf	CRC8@tempI,f,c
  4813  0017B4  D000               	goto	l3300
  4814  0017B6                     l3300:
  4815  0017B6  5020               	movf	CRC8@tempI,w,c
  4816  0017B8  B4D8               	btfsc	status,2,c
  4817  0017BA  D002               	goto	l3302
  4818  0017BC  D7ED               	goto	l3292
  4819  0017BE  D000               	goto	l3302
  4820  0017C0                     l3302:
  4821  0017C0  061D               	decf	CRC8@len,f,c
  4822  0017C2  281D               	incf	CRC8@len,w,c
  4823  0017C4  A4D8               	btfss	status,2,c
  4824  0017C6  D7DD               	goto	l3286
  4825                           
  4826                           ;FastTransfer.c: 46: }
  4827                           ;FastTransfer.c: 47: }
  4828                           ;FastTransfer.c: 48: return crc;
  4829  0017C8  5021               	movf	CRC8@crc,w,c
  4830  0017CA  0012               	return	
  4831  0017CC  0012               	return		;funcret
  4832  0017CE                     __end_of_CRC8:
  4833                           	opt stack 0
  4834                           tosu	equ	0xFFF
  4835                           tosh	equ	0xFFE
  4836                           tosl	equ	0xFFD
  4837                           pclath	equ	0xFFA
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           intcon	equ	0xFF2
  4845                           postinc0	equ	0xFEE
  4846                           wreg	equ	0xFE8
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           plusw2	equ	0xFDB
  4851                           fsr2h	equ	0xFDA
  4852                           fsr2l	equ	0xFD9
  4853                           status	equ	0xFD8
  4854                           
  4855 ;; *************** function _SYSTEM_Initialize *****************
  4856 ;; Defined at:
  4857 ;;		line 113 in file "mcc_generated_files/mcc.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;		None
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;		None
  4862 ;; Return value:  Size  Location     Type
  4863 ;;		None               void
  4864 ;; Registers used:
  4865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4871 ;;      Params:         0       0       0       0       0       0       0
  4872 ;;      Locals:         0       0       0       0       0       0       0
  4873 ;;      Temps:          0       0       0       0       0       0       0
  4874 ;;      Totals:         0       0       0       0       0       0       0
  4875 ;;Total ram usage:        0 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    7
  4878 ;; This function calls:
  4879 ;;		_ADC_Initialize
  4880 ;;		_EUSART1_Initialize
  4881 ;;		_INTERRUPT_Initialize
  4882 ;;		_OSCILLATOR_Initialize
  4883 ;;		_PIN_MANAGER_Initialize
  4884 ;;		_begin
  4885 ;; This function is called by:
  4886 ;;		_main
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text23
  4891  00153A                     __ptext23:
  4892                           	opt stack 0
  4893  00153A                     _SYSTEM_Initialize:
  4894                           	opt stack 23
  4895                           
  4896                           ;mcc.c: 114: OSCILLATOR_Initialize();
  4897                           
  4898                           ;incstack = 0
  4899  00153A  ECC4  F00D         	call	_OSCILLATOR_Initialize	;wreg free
  4900                           
  4901                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4902  00153E  ECD1  F00A         	call	_PIN_MANAGER_Initialize	;wreg free
  4903                           
  4904                           ;mcc.c: 116: INTERRUPT_Initialize();
  4905  001542  ECCB  F00D         	call	_INTERRUPT_Initialize	;wreg free
  4906                           
  4907                           ;mcc.c: 117: EUSART1_Initialize();
  4908  001546  EC56  F00C         	call	_EUSART1_Initialize	;wreg free
  4909                           
  4910                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  4911  00154A  0EC4               	movlw	low _receiveArray
  4912  00154C  0101               	movlb	1	; () banked
  4913  00154E  6FCE               	movwf	begin@ptr& (0+255),b
  4914  001550  0E00               	movlw	high _receiveArray
  4915  001552  0101               	movlb	1	; () banked
  4916  001554  6FCF               	movwf	(begin@ptr+1)& (0+255),b
  4917  001556  0E28               	movlw	40
  4918  001558  0101               	movlb	1	; () banked
  4919  00155A  6FD0               	movwf	begin@maxSize& (0+255),b
  4920  00155C  0E05               	movlw	5
  4921  00155E  0101               	movlb	1	; () banked
  4922  001560  6FD1               	movwf	begin@givenAddress& (0+255),b
  4923  001562  0E00               	movlw	0
  4924  001564  0101               	movlb	1	; () banked
  4925  001566  6FD2               	movwf	begin@error& (0+255),b
  4926  001568  0E54               	movlw	low _Send_put
  4927  00156A  0101               	movlb	1	; () banked
  4928  00156C  6FD3               	movwf	begin@stufftosend& (0+255),b
  4929  00156E  0E19               	movlw	high _Send_put
  4930  001570  0101               	movlb	1	; () banked
  4931  001572  6FD4               	movwf	(begin@stufftosend+1)& (0+255),b
  4932  001574  0E78               	movlw	low _Receive_get
  4933  001576  0101               	movlb	1	; () banked
  4934  001578  6FD5               	movwf	begin@stufftoreceive& (0+255),b
  4935  00157A  0E1B               	movlw	high _Receive_get
  4936  00157C  0101               	movlb	1	; () banked
  4937  00157E  6FD6               	movwf	(begin@stufftoreceive+1)& (0+255),b
  4938  001580  0EF2               	movlw	low _Receive_available
  4939  001582  0101               	movlb	1	; () banked
  4940  001584  6FD7               	movwf	begin@stuffavailable& (0+255),b
  4941  001586  0E1A               	movlw	high _Receive_available
  4942  001588  0101               	movlb	1	; () banked
  4943  00158A  6FD8               	movwf	(begin@stuffavailable+1)& (0+255),b
  4944  00158C  0E68               	movlw	low _Receive_peek
  4945  00158E  0101               	movlb	1	; () banked
  4946  001590  6FD9               	movwf	begin@stuffpeek& (0+255),b
  4947  001592  0E1B               	movlw	high _Receive_peek
  4948  001594  0101               	movlb	1	; () banked
  4949  001596  6FDA               	movwf	(begin@stuffpeek+1)& (0+255),b
  4950  001598  EC68  F00B         	call	_begin	;wreg free
  4951                           
  4952                           ;mcc.c: 120: ADC_Initialize();
  4953  00159C  EC91  F00D         	call	_ADC_Initialize	;wreg free
  4954  0015A0  0012               	return		;funcret
  4955  0015A2                     __end_of_SYSTEM_Initialize:
  4956                           	opt stack 0
  4957                           tosu	equ	0xFFF
  4958                           tosh	equ	0xFFE
  4959                           tosl	equ	0xFFD
  4960                           pclath	equ	0xFFA
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           intcon	equ	0xFF2
  4968                           postinc0	equ	0xFEE
  4969                           wreg	equ	0xFE8
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           postdec2	equ	0xFDD
  4973                           plusw2	equ	0xFDB
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _begin *****************
  4979 ;; Defined at:
  4980 ;;		line 18 in file "FastTransfer.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  ptr             2    0[BANK1 ] PTR volatile int 
  4983 ;;		 -> receiveArray(40), 
  4984 ;;  maxSize         1    2[BANK1 ] unsigned char 
  4985 ;;  givenAddress    1    3[BANK1 ] unsigned char 
  4986 ;;  error           1    4[BANK1 ] unsigned char 
  4987 ;;  stufftosend     2    5[BANK1 ] PTR FTN(unsigned char ,)
  4988 ;;		 -> Send_put(0), 
  4989 ;;  stufftorecei    2    7[BANK1 ] PTR FTN()unsigned char 
  4990 ;;		 -> Receive_get(1), 
  4991 ;;  stuffavailab    2    9[BANK1 ] PTR FTN()int 
  4992 ;;		 -> Receive_available(2), 
  4993 ;;  stuffpeek       2   11[BANK1 ] PTR FTN()unsigned char 
  4994 ;;		 -> Receive_peek(1), 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;		None
  4997 ;; Return value:  Size  Location     Type
  4998 ;;		None               void
  4999 ;; Registers used:
  5000 ;;		wreg, status,2, status,0, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5006 ;;      Params:         0       0      13       0       0       0       0
  5007 ;;      Locals:         0       0       0       0       0       0       0
  5008 ;;      Temps:          0       0       0       0       0       0       0
  5009 ;;      Totals:         0       0      13       0       0       0       0
  5010 ;;Total ram usage:       13 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    5
  5013 ;; This function calls:
  5014 ;;		___awdiv
  5015 ;; This function is called by:
  5016 ;;		_SYSTEM_Initialize
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text24
  5021  0016D0                     __ptext24:
  5022                           	opt stack 0
  5023  0016D0                     _begin:
  5024                           	opt stack 24
  5025                           
  5026                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  5027                           
  5028                           ;incstack = 0
  5029  0016D0  C1CE  F02D         	movff	begin@ptr,_receiveArrayAddress
  5030  0016D4  C1CF  F02E         	movff	begin@ptr+1,_receiveArrayAddress+1
  5031                           
  5032                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  5033  0016D8  C1D1  F03E         	movff	begin@givenAddress,_moduleAddress
  5034                           
  5035                           ;FastTransfer.c: 21: serial_write = stufftosend;
  5036  0016DC  C1D3  F037         	movff	begin@stufftosend,_serial_write
  5037  0016E0  C1D4  F038         	movff	begin@stufftosend+1,_serial_write+1
  5038                           
  5039                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  5040  0016E4  C1D7  F031         	movff	begin@stuffavailable,_serial_available
  5041  0016E8  C1D8  F032         	movff	begin@stuffavailable+1,_serial_available+1
  5042                           
  5043                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  5044  0016EC  C1D9  F033         	movff	begin@stuffpeek,_serial_peek
  5045  0016F0  C1DA  F034         	movff	begin@stuffpeek+1,_serial_peek+1
  5046                           
  5047                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  5048  0016F4  C1D5  F035         	movff	begin@stufftoreceive,_serial_read
  5049  0016F8  C1D6  F036         	movff	begin@stufftoreceive+1,_serial_read+1
  5050                           
  5051                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  5052  0016FC  C1D0  F01B         	movff	begin@maxSize,___awdiv@dividend
  5053  001700  6A1C               	clrf	___awdiv@dividend+1,c
  5054  001702  0E00               	movlw	0
  5055  001704  6E1E               	movwf	___awdiv@divisor+1,c
  5056  001706  0E02               	movlw	2
  5057  001708  6E1D               	movwf	___awdiv@divisor,c
  5058  00170A  EC88  F009         	call	___awdiv	;wreg free
  5059  00170E  501B               	movf	?___awdiv,w,c
  5060  001710  6E3D               	movwf	_maxDataAddress,c
  5061                           
  5062                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  5063  001712  0E00               	movlw	low _ring_buffer
  5064  001714  6E2F               	movwf	_sendStructAddress,c
  5065  001716  0E01               	movlw	high _ring_buffer
  5066  001718  6E30               	movwf	_sendStructAddress+1,c
  5067                           
  5068                           ;FastTransfer.c: 27: AKNAKsend = error;
  5069  00171A  C1D2  F03B         	movff	begin@error,_AKNAKsend
  5070                           
  5071                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  5072  00171E  0E00               	movlw	0
  5073  001720  6E28               	movwf	_alignErrorCounter+1,c
  5074  001722  0E00               	movlw	0
  5075  001724  6E27               	movwf	_alignErrorCounter,c
  5076  001726  0012               	return		;funcret
  5077  001728                     __end_of_begin:
  5078                           	opt stack 0
  5079                           tosu	equ	0xFFF
  5080                           tosh	equ	0xFFE
  5081                           tosl	equ	0xFFD
  5082                           pclath	equ	0xFFA
  5083                           tblptru	equ	0xFF8
  5084                           tblptrh	equ	0xFF7
  5085                           tblptrl	equ	0xFF6
  5086                           tablat	equ	0xFF5
  5087                           prodh	equ	0xFF4
  5088                           prodl	equ	0xFF3
  5089                           intcon	equ	0xFF2
  5090                           postinc0	equ	0xFEE
  5091                           wreg	equ	0xFE8
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           postdec2	equ	0xFDD
  5095                           plusw2	equ	0xFDB
  5096                           fsr2h	equ	0xFDA
  5097                           fsr2l	equ	0xFD9
  5098                           status	equ	0xFD8
  5099                           
  5100 ;; *************** function ___awdiv *****************
  5101 ;; Defined at:
  5102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  dividend        2   26[COMRAM] int 
  5105 ;;  divisor         2   28[COMRAM] int 
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;  quotient        2   32[COMRAM] int 
  5108 ;;  sign            1   31[COMRAM] unsigned char 
  5109 ;;  counter         1   30[COMRAM] unsigned char 
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  2   26[COMRAM] int 
  5112 ;; Registers used:
  5113 ;;		wreg, status,2, status,0
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5119 ;;      Params:         4       0       0       0       0       0       0
  5120 ;;      Locals:         4       0       0       0       0       0       0
  5121 ;;      Temps:          0       0       0       0       0       0       0
  5122 ;;      Totals:         8       0       0       0       0       0       0
  5123 ;;Total ram usage:        8 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    4
  5126 ;; This function calls:
  5127 ;;		Nothing
  5128 ;; This function is called by:
  5129 ;;		_begin
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text25
  5134  001310                     __ptext25:
  5135                           	opt stack 0
  5136  001310                     ___awdiv:
  5137                           	opt stack 24
  5138                           
  5139                           ;incstack = 0
  5140  001310  0E00               	movlw	0
  5141  001312  6E20               	movwf	___awdiv@sign,c
  5142  001314  AE1E               	btfss	___awdiv@divisor+1,7,c
  5143  001316  D007               	goto	l2664
  5144  001318  6C1D               	negf	___awdiv@divisor,c
  5145  00131A  1E1E               	comf	___awdiv@divisor+1,f,c
  5146  00131C  B0D8               	btfsc	status,0,c
  5147  00131E  2A1E               	incf	___awdiv@divisor+1,f,c
  5148  001320  0E01               	movlw	1
  5149  001322  6E20               	movwf	___awdiv@sign,c
  5150  001324  D000               	goto	l2664
  5151  001326                     l2664:
  5152  001326  AE1C               	btfss	___awdiv@dividend+1,7,c
  5153  001328  D007               	goto	l2670
  5154  00132A  6C1B               	negf	___awdiv@dividend,c
  5155  00132C  1E1C               	comf	___awdiv@dividend+1,f,c
  5156  00132E  B0D8               	btfsc	status,0,c
  5157  001330  2A1C               	incf	___awdiv@dividend+1,f,c
  5158  001332  0E01               	movlw	1
  5159  001334  1A20               	xorwf	___awdiv@sign,f,c
  5160  001336  D000               	goto	l2670
  5161  001338                     l2670:
  5162  001338  0E00               	movlw	0
  5163  00133A  6E22               	movwf	___awdiv@quotient+1,c
  5164  00133C  0E00               	movlw	0
  5165  00133E  6E21               	movwf	___awdiv@quotient,c
  5166  001340  501D               	movf	___awdiv@divisor,w,c
  5167  001342  101E               	iorwf	___awdiv@divisor+1,w,c
  5168  001344  B4D8               	btfsc	status,2,c
  5169  001346  D021               	goto	l2692
  5170  001348  0E01               	movlw	1
  5171  00134A  6E1F               	movwf	___awdiv@counter,c
  5172  00134C  D005               	goto	l2678
  5173  00134E                     l2676:
  5174  00134E  90D8               	bcf	status,0,c
  5175  001350  361D               	rlcf	___awdiv@divisor,f,c
  5176  001352  361E               	rlcf	___awdiv@divisor+1,f,c
  5177  001354  2A1F               	incf	___awdiv@counter,f,c
  5178  001356  D000               	goto	l2678
  5179  001358                     l2678:
  5180  001358  BE1E               	btfsc	___awdiv@divisor+1,7,c
  5181  00135A  D002               	goto	l2680
  5182  00135C  D7F8               	goto	l2676
  5183  00135E  D000               	goto	l2680
  5184  001360                     l2680:
  5185  001360  90D8               	bcf	status,0,c
  5186  001362  3621               	rlcf	___awdiv@quotient,f,c
  5187  001364  3622               	rlcf	___awdiv@quotient+1,f,c
  5188  001366  501D               	movf	___awdiv@divisor,w,c
  5189  001368  5C1B               	subwf	___awdiv@dividend,w,c
  5190  00136A  501E               	movf	___awdiv@divisor+1,w,c
  5191  00136C  581C               	subwfb	___awdiv@dividend+1,w,c
  5192  00136E  A0D8               	btfss	status,0,c
  5193  001370  D006               	goto	l2688
  5194  001372  501D               	movf	___awdiv@divisor,w,c
  5195  001374  5E1B               	subwf	___awdiv@dividend,f,c
  5196  001376  501E               	movf	___awdiv@divisor+1,w,c
  5197  001378  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5198  00137A  8021               	bsf	___awdiv@quotient,0,c
  5199  00137C  D000               	goto	l2688
  5200  00137E                     l2688:
  5201  00137E  90D8               	bcf	status,0,c
  5202  001380  321E               	rrcf	___awdiv@divisor+1,f,c
  5203  001382  321D               	rrcf	___awdiv@divisor,f,c
  5204  001384  2E1F               	decfsz	___awdiv@counter,f,c
  5205  001386  D7EC               	goto	l2680
  5206  001388  D000               	goto	l2692
  5207  00138A                     l2692:
  5208  00138A  5020               	movf	___awdiv@sign,w,c
  5209  00138C  B4D8               	btfsc	status,2,c
  5210  00138E  D005               	goto	l2696
  5211  001390  6C21               	negf	___awdiv@quotient,c
  5212  001392  1E22               	comf	___awdiv@quotient+1,f,c
  5213  001394  B0D8               	btfsc	status,0,c
  5214  001396  2A22               	incf	___awdiv@quotient+1,f,c
  5215  001398  D000               	goto	l2696
  5216  00139A                     l2696:
  5217  00139A  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5218  00139E  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5219  0013A2  0012               	return	
  5220  0013A4  0012               	return		;funcret
  5221  0013A6                     __end_of___awdiv:
  5222                           	opt stack 0
  5223                           tosu	equ	0xFFF
  5224                           tosh	equ	0xFFE
  5225                           tosl	equ	0xFFD
  5226                           pclath	equ	0xFFA
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           prodh	equ	0xFF4
  5232                           prodl	equ	0xFF3
  5233                           intcon	equ	0xFF2
  5234                           postinc0	equ	0xFEE
  5235                           wreg	equ	0xFE8
  5236                           indf2	equ	0xFDF
  5237                           postinc2	equ	0xFDE
  5238                           postdec2	equ	0xFDD
  5239                           plusw2	equ	0xFDB
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function _PIN_MANAGER_Initialize *****************
  5245 ;; Defined at:
  5246 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;		None               void
  5253 ;; Registers used:
  5254 ;;		wreg, status,2
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5260 ;;      Params:         0       0       0       0       0       0       0
  5261 ;;      Locals:         0       0       0       0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0
  5263 ;;      Totals:         0       0       0       0       0       0       0
  5264 ;;Total ram usage:        0 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    4
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_SYSTEM_Initialize
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text26
  5275  0015A2                     __ptext26:
  5276                           	opt stack 0
  5277  0015A2                     _PIN_MANAGER_Initialize:
  5278                           	opt stack 25
  5279                           
  5280                           ;pin_manager.c: 52: LATA = 0x00;
  5281                           
  5282                           ;incstack = 0
  5283  0015A2  0E00               	movlw	0
  5284  0015A4  6E89               	movwf	3977,c	;volatile
  5285                           
  5286                           ;pin_manager.c: 53: TRISA = 0xF7;
  5287  0015A6  0EF7               	movlw	247
  5288  0015A8  6E92               	movwf	3986,c	;volatile
  5289                           
  5290                           ;pin_manager.c: 54: ANSELA = 0x27;
  5291  0015AA  0E27               	movlw	39
  5292  0015AC  010F               	movlb	15	; () banked
  5293  0015AE  6F38               	movwf	56,b	;volatile
  5294                           
  5295                           ;pin_manager.c: 56: LATB = 0x01;
  5296  0015B0  0E01               	movlw	1
  5297  0015B2  6E8A               	movwf	3978,c	;volatile
  5298                           
  5299                           ;pin_manager.c: 57: TRISB = 0xFE;
  5300  0015B4  0EFE               	movlw	254
  5301  0015B6  6E93               	movwf	3987,c	;volatile
  5302                           
  5303                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5304  0015B8  0E3E               	movlw	62
  5305  0015BA  010F               	movlb	15	; () banked
  5306  0015BC  6F39               	movwf	57,b	;volatile
  5307                           
  5308                           ;pin_manager.c: 59: WPUB = 0x00;
  5309  0015BE  0E00               	movlw	0
  5310  0015C0  6E61               	movwf	3937,c	;volatile
  5311                           
  5312                           ;pin_manager.c: 61: LATC = 0x00;
  5313  0015C2  0E00               	movlw	0
  5314  0015C4  6E8B               	movwf	3979,c	;volatile
  5315                           
  5316                           ;pin_manager.c: 62: TRISC = 0xDF;
  5317  0015C6  0EDF               	movlw	223
  5318  0015C8  6E94               	movwf	3988,c	;volatile
  5319                           
  5320                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5321  0015CA  0E1C               	movlw	28
  5322  0015CC  010F               	movlb	15	; () banked
  5323  0015CE  6F3A               	movwf	58,b	;volatile
  5324                           
  5325                           ;pin_manager.c: 65: LATD = 0x00;
  5326  0015D0  0E00               	movlw	0
  5327  0015D2  6E8C               	movwf	3980,c	;volatile
  5328                           
  5329                           ;pin_manager.c: 66: TRISD = 0x0F;
  5330  0015D4  0E0F               	movlw	15
  5331  0015D6  6E95               	movwf	3989,c	;volatile
  5332                           
  5333                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5334  0015D8  0E0F               	movlw	15
  5335  0015DA  010F               	movlb	15	; () banked
  5336  0015DC  6F3B               	movwf	59,b	;volatile
  5337                           
  5338                           ;pin_manager.c: 69: LATE = 0x00;
  5339  0015DE  0E00               	movlw	0
  5340  0015E0  6E8D               	movwf	3981,c	;volatile
  5341                           
  5342                           ;pin_manager.c: 70: TRISE = 0x07;
  5343  0015E2  0E07               	movlw	7
  5344  0015E4  6E96               	movwf	3990,c	;volatile
  5345                           
  5346                           ;pin_manager.c: 71: ANSELE = 0x07;
  5347  0015E6  0E07               	movlw	7
  5348  0015E8  010F               	movlb	15	; () banked
  5349  0015EA  6F3C               	movwf	60,b	;volatile
  5350                           
  5351                           ; BSR set to: 15
  5352                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5353  0015EC  8C94               	bsf	3988,6,c	;volatile
  5354                           
  5355                           ; BSR set to: 15
  5356                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5357  0015EE  8E94               	bsf	3988,7,c	;volatile
  5358                           
  5359                           ; BSR set to: 15
  5360                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5361  0015F0  9A94               	bcf	3988,5,c	;volatile
  5362                           
  5363                           ; BSR set to: 15
  5364                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5365  0015F2  8A8B               	bsf	3979,5,c	;volatile
  5366                           
  5367                           ; BSR set to: 15
  5368                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5369  0015F4  8C8B               	bsf	3979,6,c	;volatile
  5370                           
  5371                           ; BSR set to: 15
  5372                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5373  0015F6  8E8B               	bsf	3979,7,c	;volatile
  5374                           
  5375                           ; BSR set to: 15
  5376                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5377  0015F8  010F               	movlb	15	; () banked
  5378  0015FA  9B3A               	bcf	58,5,b	;volatile
  5379                           
  5380                           ; BSR set to: 15
  5381                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5382  0015FC  010F               	movlb	15	; () banked
  5383  0015FE  9D3A               	bcf	58,6,b	;volatile
  5384                           
  5385                           ; BSR set to: 15
  5386                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5387  001600  010F               	movlb	15	; () banked
  5388  001602  9F3A               	bcf	58,7,b	;volatile
  5389                           
  5390                           ; BSR set to: 15
  5391                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5392  001604  8EF1               	bsf	intcon2,7,c	;volatile
  5393                           
  5394                           ; BSR set to: 15
  5395  001606  0012               	return		;funcret
  5396  001608                     __end_of_PIN_MANAGER_Initialize:
  5397                           	opt stack 0
  5398                           tosu	equ	0xFFF
  5399                           tosh	equ	0xFFE
  5400                           tosl	equ	0xFFD
  5401                           pclath	equ	0xFFA
  5402                           tblptru	equ	0xFF8
  5403                           tblptrh	equ	0xFF7
  5404                           tblptrl	equ	0xFF6
  5405                           tablat	equ	0xFF5
  5406                           prodh	equ	0xFF4
  5407                           prodl	equ	0xFF3
  5408                           intcon	equ	0xFF2
  5409                           intcon2	equ	0xFF1
  5410                           postinc0	equ	0xFEE
  5411                           wreg	equ	0xFE8
  5412                           indf2	equ	0xFDF
  5413                           postinc2	equ	0xFDE
  5414                           postdec2	equ	0xFDD
  5415                           plusw2	equ	0xFDB
  5416                           fsr2h	equ	0xFDA
  5417                           fsr2l	equ	0xFD9
  5418                           status	equ	0xFD8
  5419                           
  5420 ;; *************** function _OSCILLATOR_Initialize *****************
  5421 ;; Defined at:
  5422 ;;		line 123 in file "mcc_generated_files/mcc.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;		None               void
  5429 ;; Registers used:
  5430 ;;		wreg, status,2
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5436 ;;      Params:         0       0       0       0       0       0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    4
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_SYSTEM_Initialize
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text27
  5451  001B88                     __ptext27:
  5452                           	opt stack 0
  5453  001B88                     _OSCILLATOR_Initialize:
  5454                           	opt stack 25
  5455                           
  5456                           ;mcc.c: 125: OSCCON = 0x60;
  5457                           
  5458                           ; BSR set to: 15
  5459                           ;incstack = 0
  5460  001B88  0E60               	movlw	96
  5461  001B8A  6ED3               	movwf	4051,c	;volatile
  5462                           
  5463                           ;mcc.c: 127: OSCCON2 = 0x04;
  5464  001B8C  0E04               	movlw	4
  5465  001B8E  6ED2               	movwf	4050,c	;volatile
  5466                           
  5467                           ;mcc.c: 129: OSCTUNE = 0x00;
  5468  001B90  0E00               	movlw	0
  5469  001B92  6E9B               	movwf	3995,c	;volatile
  5470  001B94  0012               	return		;funcret
  5471  001B96                     __end_of_OSCILLATOR_Initialize:
  5472                           	opt stack 0
  5473                           tosu	equ	0xFFF
  5474                           tosh	equ	0xFFE
  5475                           tosl	equ	0xFFD
  5476                           pclath	equ	0xFFA
  5477                           tblptru	equ	0xFF8
  5478                           tblptrh	equ	0xFF7
  5479                           tblptrl	equ	0xFF6
  5480                           tablat	equ	0xFF5
  5481                           prodh	equ	0xFF4
  5482                           prodl	equ	0xFF3
  5483                           intcon	equ	0xFF2
  5484                           intcon2	equ	0xFF1
  5485                           postinc0	equ	0xFEE
  5486                           wreg	equ	0xFE8
  5487                           indf2	equ	0xFDF
  5488                           postinc2	equ	0xFDE
  5489                           postdec2	equ	0xFDD
  5490                           plusw2	equ	0xFDB
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495 ;; *************** function _INTERRUPT_Initialize *****************
  5496 ;; Defined at:
  5497 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;		None
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;		None
  5502 ;; Return value:  Size  Location     Type
  5503 ;;		None               void
  5504 ;; Registers used:
  5505 ;;		None
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5511 ;;      Params:         0       0       0       0       0       0       0
  5512 ;;      Locals:         0       0       0       0       0       0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0
  5514 ;;      Totals:         0       0       0       0       0       0       0
  5515 ;;Total ram usage:        0 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    4
  5518 ;; This function calls:
  5519 ;;		Nothing
  5520 ;; This function is called by:
  5521 ;;		_SYSTEM_Initialize
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text28
  5526  001B96                     __ptext28:
  5527                           	opt stack 0
  5528  001B96                     _INTERRUPT_Initialize:
  5529                           	opt stack 25
  5530                           
  5531                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5532                           
  5533                           ;incstack = 0
  5534  001B96  9ED0               	bcf	4048,7,c	;volatile
  5535                           
  5536                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  5537  001B98  9A9F               	bcf	3999,5,c	;volatile
  5538                           
  5539                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  5540  001B9A  989F               	bcf	3999,4,c	;volatile
  5541                           
  5542                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  5543  001B9C  9C9F               	bcf	3999,6,c	;volatile
  5544  001B9E  0012               	return		;funcret
  5545  001BA0                     __end_of_INTERRUPT_Initialize:
  5546                           	opt stack 0
  5547                           tosu	equ	0xFFF
  5548                           tosh	equ	0xFFE
  5549                           tosl	equ	0xFFD
  5550                           pclath	equ	0xFFA
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           intcon2	equ	0xFF1
  5559                           postinc0	equ	0xFEE
  5560                           wreg	equ	0xFE8
  5561                           indf2	equ	0xFDF
  5562                           postinc2	equ	0xFDE
  5563                           postdec2	equ	0xFDD
  5564                           plusw2	equ	0xFDB
  5565                           fsr2h	equ	0xFDA
  5566                           fsr2l	equ	0xFD9
  5567                           status	equ	0xFD8
  5568                           
  5569 ;; *************** function _EUSART1_Initialize *****************
  5570 ;; Defined at:
  5571 ;;		line 21 in file "UART.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;		None
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;		None               void
  5578 ;; Registers used:
  5579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5585 ;;      Params:         0       0       0       0       0       0       0
  5586 ;;      Locals:         0       0       0       0       0       0       0
  5587 ;;      Temps:          0       0       0       0       0       0       0
  5588 ;;      Totals:         0       0       0       0       0       0       0
  5589 ;;Total ram usage:        0 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    6
  5592 ;; This function calls:
  5593 ;;		_UART_buff_init
  5594 ;; This function is called by:
  5595 ;;		_SYSTEM_Initialize
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text29
  5600  0018AC                     __ptext29:
  5601                           	opt stack 0
  5602  0018AC                     _EUSART1_Initialize:
  5603                           	opt stack 23
  5604                           
  5605                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  5606                           
  5607                           ;incstack = 0
  5608  0018AC  9A9D               	bcf	3997,5,c	;volatile
  5609                           
  5610                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  5611  0018AE  989D               	bcf	3997,4,c	;volatile
  5612                           
  5613                           ;UART.c: 29: BAUD1CON = 0x48;
  5614  0018B0  0E48               	movlw	72
  5615  0018B2  6EB8               	movwf	4024,c	;volatile
  5616                           
  5617                           ;UART.c: 32: RC1STA = 0x98;
  5618  0018B4  0E98               	movlw	152
  5619  0018B6  6EAB               	movwf	4011,c	;volatile
  5620                           
  5621                           ;UART.c: 35: TX1STA = 0x26;
  5622  0018B8  0E26               	movlw	38
  5623  0018BA  6EAC               	movwf	4012,c	;volatile
  5624                           
  5625                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  5626  0018BC  0E33               	movlw	51
  5627  0018BE  6EAF               	movwf	4015,c	;volatile
  5628                           
  5629                           ;UART.c: 41: SPBRGH1 = 0x00;
  5630  0018C0  0E00               	movlw	0
  5631  0018C2  6EB0               	movwf	4016,c	;volatile
  5632                           
  5633                           ;UART.c: 44: TXREG1 = 0x00;
  5634  0018C4  0E00               	movlw	0
  5635  0018C6  6EAD               	movwf	4013,c	;volatile
  5636                           
  5637                           ;UART.c: 47: RCREG1 = 0x00;
  5638  0018C8  0E00               	movlw	0
  5639  0018CA  6EAE               	movwf	4014,c	;volatile
  5640                           
  5641                           ;UART.c: 49: UART_buff_init(&input_buffer);
  5642  0018CC  0E00               	movlw	low _input_buffer
  5643  0018CE  6E23               	movwf	UART_buff_init@_this,c
  5644  0018D0  0E03               	movlw	high _input_buffer
  5645  0018D2  6E24               	movwf	UART_buff_init@_this+1,c
  5646  0018D4  EC40  F00D         	call	_UART_buff_init	;wreg free
  5647                           
  5648                           ;UART.c: 50: UART_buff_init(&output_buffer);
  5649  0018D8  0E00               	movlw	low _output_buffer
  5650  0018DA  6E23               	movwf	UART_buff_init@_this,c
  5651  0018DC  0E04               	movlw	high _output_buffer
  5652  0018DE  6E24               	movwf	UART_buff_init@_this+1,c
  5653  0018E0  EC40  F00D         	call	_UART_buff_init	;wreg free
  5654                           
  5655                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  5656  0018E4  8A9D               	bsf	3997,5,c	;volatile
  5657  0018E6  0012               	return		;funcret
  5658  0018E8                     __end_of_EUSART1_Initialize:
  5659                           	opt stack 0
  5660                           tosu	equ	0xFFF
  5661                           tosh	equ	0xFFE
  5662                           tosl	equ	0xFFD
  5663                           pclath	equ	0xFFA
  5664                           tblptru	equ	0xFF8
  5665                           tblptrh	equ	0xFF7
  5666                           tblptrl	equ	0xFF6
  5667                           tablat	equ	0xFF5
  5668                           prodh	equ	0xFF4
  5669                           prodl	equ	0xFF3
  5670                           intcon	equ	0xFF2
  5671                           intcon2	equ	0xFF1
  5672                           postinc0	equ	0xFEE
  5673                           wreg	equ	0xFE8
  5674                           indf2	equ	0xFDF
  5675                           postinc2	equ	0xFDE
  5676                           postdec2	equ	0xFDD
  5677                           plusw2	equ	0xFDB
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function _UART_buff_init *****************
  5683 ;; Defined at:
  5684 ;;		line 56 in file "UART.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  5687 ;;		 -> output_buffer(206), input_buffer(206), 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;		None
  5690 ;; Return value:  Size  Location     Type
  5691 ;;		None               void
  5692 ;; Registers used:
  5693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5699 ;;      Params:         2       0       0       0       0       0       0
  5700 ;;      Locals:         0       0       0       0       0       0       0
  5701 ;;      Temps:          0       0       0       0       0       0       0
  5702 ;;      Totals:         2       0       0       0       0       0       0
  5703 ;;Total ram usage:        2 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    5
  5706 ;; This function calls:
  5707 ;;		_memset
  5708 ;; This function is called by:
  5709 ;;		_EUSART1_Initialize
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text30
  5714  001A80                     __ptext30:
  5715                           	opt stack 0
  5716  001A80                     _UART_buff_init:
  5717                           	opt stack 23
  5718                           
  5719                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  5720                           
  5721                           ;incstack = 0
  5722  001A80  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  5723  001A84  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  5724  001A88  0E00               	movlw	0
  5725  001A8A  6E1E               	movwf	memset@c+1,c
  5726  001A8C  0E00               	movlw	0
  5727  001A8E  6E1D               	movwf	memset@c,c
  5728  001A90  0E00               	movlw	0
  5729  001A92  6E20               	movwf	memset@n+1,c
  5730  001A94  0ECE               	movlw	206
  5731  001A96  6E1F               	movwf	memset@n,c
  5732  001A98  ECF0  F00C         	call	_memset	;wreg free
  5733  001A9C  0012               	return		;funcret
  5734  001A9E                     __end_of_UART_buff_init:
  5735                           	opt stack 0
  5736                           tosu	equ	0xFFF
  5737                           tosh	equ	0xFFE
  5738                           tosl	equ	0xFFD
  5739                           pclath	equ	0xFFA
  5740                           tblptru	equ	0xFF8
  5741                           tblptrh	equ	0xFF7
  5742                           tblptrl	equ	0xFF6
  5743                           tablat	equ	0xFF5
  5744                           prodh	equ	0xFF4
  5745                           prodl	equ	0xFF3
  5746                           intcon	equ	0xFF2
  5747                           intcon2	equ	0xFF1
  5748                           postinc0	equ	0xFEE
  5749                           wreg	equ	0xFE8
  5750                           indf2	equ	0xFDF
  5751                           postinc2	equ	0xFDE
  5752                           postdec2	equ	0xFDD
  5753                           plusw2	equ	0xFDB
  5754                           fsr2h	equ	0xFDA
  5755                           fsr2l	equ	0xFD9
  5756                           status	equ	0xFD8
  5757                           
  5758 ;; *************** function _memset *****************
  5759 ;; Defined at:
  5760 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\memset.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  p1              2   26[COMRAM] PTR void 
  5763 ;;		 -> ring_buffer(206), output_buffer(206), input_buffer(206), 
  5764 ;;  c               2   28[COMRAM] int 
  5765 ;;  n               2   30[COMRAM] unsigned int 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  p               2   32[COMRAM] PTR unsigned char 
  5768 ;;		 -> ring_buffer(206), output_buffer(206), input_buffer(206), 
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  2   26[COMRAM] PTR void 
  5771 ;; Registers used:
  5772 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5778 ;;      Params:         6       0       0       0       0       0       0
  5779 ;;      Locals:         2       0       0       0       0       0       0
  5780 ;;      Temps:          0       0       0       0       0       0       0
  5781 ;;      Totals:         8       0       0       0       0       0       0
  5782 ;;Total ram usage:        8 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    4
  5785 ;; This function calls:
  5786 ;;		Nothing
  5787 ;; This function is called by:
  5788 ;;		_UART_buff_init
  5789 ;;		_FastTransfer_buffer_flush
  5790 ;;		_UART_buff_flush
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text31
  5795  0019E0                     __ptext31:
  5796                           	opt stack 0
  5797  0019E0                     _memset:
  5798                           	opt stack 22
  5799                           
  5800                           ;incstack = 0
  5801  0019E0  C01B  F021         	movff	memset@p1,memset@p
  5802  0019E4  C01C  F022         	movff	memset@p1+1,memset@p+1
  5803  0019E8  D009               	goto	l3200
  5804  0019EA                     l3196:
  5805  0019EA  C021  FFD9         	movff	memset@p,fsr2l
  5806  0019EE  C022  FFDA         	movff	memset@p+1,fsr2h
  5807  0019F2  C01D  FFDF         	movff	memset@c,indf2
  5808  0019F6  4A21               	infsnz	memset@p,f,c
  5809  0019F8  2A22               	incf	memset@p+1,f,c
  5810  0019FA  D000               	goto	l3200
  5811  0019FC                     l3200:
  5812  0019FC  061F               	decf	memset@n,f,c
  5813  0019FE  A0D8               	btfss	status,0,c
  5814  001A00  0620               	decf	memset@n+1,f,c
  5815  001A02  281F               	incf	memset@n,w,c
  5816  001A04  E1F2               	bnz	l3196
  5817  001A06  2820               	incf	memset@n+1,w,c
  5818  001A08  A4D8               	btfss	status,2,c
  5819  001A0A  D7EF               	goto	l3196
  5820                           
  5821                           ;	Return value of _memset is never used
  5822  001A0C  0012               	return		;funcret
  5823  001A0E                     __end_of_memset:
  5824                           	opt stack 0
  5825                           tosu	equ	0xFFF
  5826                           tosh	equ	0xFFE
  5827                           tosl	equ	0xFFD
  5828                           pclath	equ	0xFFA
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           intcon	equ	0xFF2
  5836                           intcon2	equ	0xFF1
  5837                           postinc0	equ	0xFEE
  5838                           wreg	equ	0xFE8
  5839                           indf2	equ	0xFDF
  5840                           postinc2	equ	0xFDE
  5841                           postdec2	equ	0xFDD
  5842                           plusw2	equ	0xFDB
  5843                           fsr2h	equ	0xFDA
  5844                           fsr2l	equ	0xFD9
  5845                           status	equ	0xFD8
  5846                           
  5847 ;; *************** function _ADC_Initialize *****************
  5848 ;; Defined at:
  5849 ;;		line 59 in file "mcc_generated_files/adc.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;		None
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;		None
  5854 ;; Return value:  Size  Location     Type
  5855 ;;		None               void
  5856 ;; Registers used:
  5857 ;;		wreg, status,2
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5863 ;;      Params:         0       0       0       0       0       0       0
  5864 ;;      Locals:         0       0       0       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0
  5866 ;;      Totals:         0       0       0       0       0       0       0
  5867 ;;Total ram usage:        0 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    4
  5870 ;; This function calls:
  5871 ;;		Nothing
  5872 ;; This function is called by:
  5873 ;;		_SYSTEM_Initialize
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text32
  5878  001B22                     __ptext32:
  5879                           	opt stack 0
  5880  001B22                     _ADC_Initialize:
  5881                           	opt stack 25
  5882                           
  5883                           ;adc.c: 64: ADCON0 = 0x01;
  5884                           
  5885                           ;incstack = 0
  5886  001B22  0E01               	movlw	1
  5887  001B24  6EC2               	movwf	4034,c	;volatile
  5888                           
  5889                           ;adc.c: 67: ADCON1 = 0x80;
  5890  001B26  0E80               	movlw	128
  5891  001B28  6EC1               	movwf	4033,c	;volatile
  5892                           
  5893                           ;adc.c: 70: ADCON2 = 0x12;
  5894  001B2A  0E12               	movlw	18
  5895  001B2C  6EC0               	movwf	4032,c	;volatile
  5896                           
  5897                           ;adc.c: 73: ADRESL = 0x00;
  5898  001B2E  0E00               	movlw	0
  5899  001B30  6EC3               	movwf	4035,c	;volatile
  5900                           
  5901                           ;adc.c: 76: ADRESH = 0x00;
  5902  001B32  0E00               	movlw	0
  5903  001B34  6EC4               	movwf	4036,c	;volatile
  5904                           
  5905                           ;adc.c: 79: PIE1bits.ADIE = 1;
  5906  001B36  8C9D               	bsf	3997,6,c	;volatile
  5907  001B38  0012               	return		;funcret
  5908  001B3A                     __end_of_ADC_Initialize:
  5909                           	opt stack 0
  5910                           tosu	equ	0xFFF
  5911                           tosh	equ	0xFFE
  5912                           tosl	equ	0xFFD
  5913                           pclath	equ	0xFFA
  5914                           tblptru	equ	0xFF8
  5915                           tblptrh	equ	0xFF7
  5916                           tblptrl	equ	0xFF6
  5917                           tablat	equ	0xFF5
  5918                           prodh	equ	0xFF4
  5919                           prodl	equ	0xFF3
  5920                           intcon	equ	0xFF2
  5921                           intcon2	equ	0xFF1
  5922                           postinc0	equ	0xFEE
  5923                           wreg	equ	0xFE8
  5924                           indf2	equ	0xFDF
  5925                           postinc2	equ	0xFDE
  5926                           postdec2	equ	0xFDD
  5927                           plusw2	equ	0xFDB
  5928                           fsr2h	equ	0xFDA
  5929                           fsr2l	equ	0xFD9
  5930                           status	equ	0xFD8
  5931                           
  5932 ;; *************** function _PDUStartup *****************
  5933 ;; Defined at:
  5934 ;;		line 14 in file "PDU.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;		None
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;		None               void
  5941 ;; Registers used:
  5942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5948 ;;      Params:         0       0       0       0       0       0       0
  5949 ;;      Locals:         0       0       0       0       0       0       0
  5950 ;;      Temps:          0       0       0       0       0       0       0
  5951 ;;      Totals:         0       0       0       0       0       0       0
  5952 ;;Total ram usage:        0 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:    8
  5955 ;; This function calls:
  5956 ;;		_ComputeStorageData
  5957 ;;		_EnableSlavePower
  5958 ;;		_StartUp595
  5959 ;;		_Update
  5960 ;; This function is called by:
  5961 ;;		_main
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           	psect	text33
  5966  001728                     __ptext33:
  5967                           	opt stack 0
  5968  001728                     _PDUStartup:
  5969                           	opt stack 22
  5970                           
  5971                           ;PDU.c: 18: StartUp595();
  5972                           
  5973                           ;incstack = 0
  5974  001728  EC67  F00A         	call	_StartUp595	;wreg free
  5975                           
  5976                           ;PDU.c: 20: EnableSlavePower(SAS,ON);
  5977  00172C  0E00               	movlw	0
  5978  00172E  6E26               	movwf	EnableSlavePower@onof+1,c
  5979  001730  0E01               	movlw	1
  5980  001732  6E25               	movwf	EnableSlavePower@onof,c
  5981  001734  0E01               	movlw	1
  5982  001736  EC5B  F007         	call	_EnableSlavePower
  5983                           
  5984                           ;PDU.c: 21: EnableSlavePower(DDS,ON);
  5985  00173A  0E00               	movlw	0
  5986  00173C  6E26               	movwf	EnableSlavePower@onof+1,c
  5987  00173E  0E01               	movlw	1
  5988  001740  6E25               	movwf	EnableSlavePower@onof,c
  5989  001742  0E02               	movlw	2
  5990  001744  EC5B  F007         	call	_EnableSlavePower
  5991                           
  5992                           ;PDU.c: 22: EnableSlavePower(MCS,ON);
  5993  001748  0E00               	movlw	0
  5994  00174A  6E26               	movwf	EnableSlavePower@onof+1,c
  5995  00174C  0E01               	movlw	1
  5996  00174E  6E25               	movwf	EnableSlavePower@onof,c
  5997  001750  0E03               	movlw	3
  5998  001752  EC5B  F007         	call	_EnableSlavePower
  5999                           
  6000                           ;PDU.c: 23: EnableSlavePower(BMM,ON);
  6001  001756  0E00               	movlw	0
  6002  001758  6E26               	movwf	EnableSlavePower@onof+1,c
  6003  00175A  0E01               	movlw	1
  6004  00175C  6E25               	movwf	EnableSlavePower@onof,c
  6005  00175E  0E04               	movlw	4
  6006  001760  EC5B  F007         	call	_EnableSlavePower
  6007                           
  6008                           ;PDU.c: 24: EnableSlavePower(TSS,ON);
  6009  001764  0E00               	movlw	0
  6010  001766  6E26               	movwf	EnableSlavePower@onof+1,c
  6011  001768  0E01               	movlw	1
  6012  00176A  6E25               	movwf	EnableSlavePower@onof,c
  6013  00176C  0E05               	movlw	5
  6014  00176E  EC5B  F007         	call	_EnableSlavePower
  6015                           
  6016                           ;PDU.c: 25: Update();
  6017  001772  ECD0  F00D         	call	_Update	;wreg free
  6018                           
  6019                           ;PDU.c: 27: ComputeStorageData();
  6020  001776  ECCE  F007         	call	_ComputeStorageData	;wreg free
  6021  00177A  0012               	return		;funcret
  6022  00177C                     __end_of_PDUStartup:
  6023                           	opt stack 0
  6024                           tosu	equ	0xFFF
  6025                           tosh	equ	0xFFE
  6026                           tosl	equ	0xFFD
  6027                           pclath	equ	0xFFA
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           intcon	equ	0xFF2
  6035                           intcon2	equ	0xFF1
  6036                           postinc0	equ	0xFEE
  6037                           wreg	equ	0xFE8
  6038                           indf2	equ	0xFDF
  6039                           postinc2	equ	0xFDE
  6040                           postdec2	equ	0xFDD
  6041                           plusw2	equ	0xFDB
  6042                           fsr2h	equ	0xFDA
  6043                           fsr2l	equ	0xFD9
  6044                           status	equ	0xFD8
  6045                           
  6046 ;; *************** function _Update *****************
  6047 ;; Defined at:
  6048 ;;		line 130 in file "PDU.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;		None
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;		None
  6053 ;; Return value:  Size  Location     Type
  6054 ;;		None               void
  6055 ;; Registers used:
  6056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6057 ;; Tracked objects:
  6058 ;;		On entry : 0/0
  6059 ;;		On exit  : 0/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6062 ;;      Params:         0       0       0       0       0       0       0
  6063 ;;      Locals:         0       0       0       0       0       0       0
  6064 ;;      Temps:          0       0       0       0       0       0       0
  6065 ;;      Totals:         0       0       0       0       0       0       0
  6066 ;;Total ram usage:        0 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; Hardware stack levels required when called:    6
  6069 ;; This function calls:
  6070 ;;		_writeRegisters
  6071 ;; This function is called by:
  6072 ;;		_PDUStartup
  6073 ;;		_ReadCurrent
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text34
  6078  001BA0                     __ptext34:
  6079                           	opt stack 0
  6080  001BA0                     _Update:
  6081                           	opt stack 23
  6082                           
  6083                           ;PDU.c: 132: writeRegisters();
  6084                           
  6085                           ;incstack = 0
  6086  001BA0  EC3F  F008         	call	_writeRegisters	;wreg free
  6087  001BA4  0012               	return		;funcret
  6088  001BA6                     __end_of_Update:
  6089                           	opt stack 0
  6090                           tosu	equ	0xFFF
  6091                           tosh	equ	0xFFE
  6092                           tosl	equ	0xFFD
  6093                           pclath	equ	0xFFA
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodh	equ	0xFF4
  6099                           prodl	equ	0xFF3
  6100                           intcon	equ	0xFF2
  6101                           intcon2	equ	0xFF1
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           indf2	equ	0xFDF
  6105                           postinc2	equ	0xFDE
  6106                           postdec2	equ	0xFDD
  6107                           plusw2	equ	0xFDB
  6108                           fsr2h	equ	0xFDA
  6109                           fsr2l	equ	0xFD9
  6110                           status	equ	0xFD8
  6111                           
  6112 ;; *************** function _StartUp595 *****************
  6113 ;; Defined at:
  6114 ;;		line 10 in file "Shift595.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;		None
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;		None
  6119 ;; Return value:  Size  Location     Type
  6120 ;;		None               void
  6121 ;; Registers used:
  6122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6128 ;;      Params:         0       0       0       0       0       0       0
  6129 ;;      Locals:         0       0       0       0       0       0       0
  6130 ;;      Temps:          0       0       0       0       0       0       0
  6131 ;;      Totals:         0       0       0       0       0       0       0
  6132 ;;Total ram usage:        0 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    7
  6135 ;; This function calls:
  6136 ;;		_Clear595
  6137 ;;		_Delay
  6138 ;; This function is called by:
  6139 ;;		_PDUStartup
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           	psect	text35
  6144  0014CE                     __ptext35:
  6145                           	opt stack 0
  6146  0014CE                     _StartUp595:
  6147                           	opt stack 22
  6148                           
  6149                           ;incstack = 0
  6150                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6151  0014CE  8A8C               	bsf	3980,5,c	;volatile
  6152  0014D0  D000               	goto	l3482
  6153  0014D2                     l3482:
  6154                           
  6155                           ;Shift595.c: 14: Delay(2);
  6156  0014D2  0E02               	movlw	2
  6157  0014D4  6E1B               	movwf	Delay@wait,c
  6158  0014D6  0E00               	movlw	0
  6159  0014D8  6E1C               	movwf	Delay@wait+1,c
  6160  0014DA  0E00               	movlw	0
  6161  0014DC  6E1D               	movwf	Delay@wait+2,c
  6162  0014DE  0E00               	movlw	0
  6163  0014E0  6E1E               	movwf	Delay@wait+3,c
  6164  0014E2  EC0E  F00C         	call	_Delay	;wreg free
  6165  0014E6  D000               	goto	l3484
  6166  0014E8                     l3484:
  6167  0014E8  808A               	bsf	3978,0,c	;volatile
  6168                           
  6169                           ;Shift595.c: 16: Delay(2);
  6170  0014EA  0E02               	movlw	2
  6171  0014EC  6E1B               	movwf	Delay@wait,c
  6172  0014EE  0E00               	movlw	0
  6173  0014F0  6E1C               	movwf	Delay@wait+1,c
  6174  0014F2  0E00               	movlw	0
  6175  0014F4  6E1D               	movwf	Delay@wait+2,c
  6176  0014F6  0E00               	movlw	0
  6177  0014F8  6E1E               	movwf	Delay@wait+3,c
  6178  0014FA  EC0E  F00C         	call	_Delay	;wreg free
  6179  0014FE  D000               	goto	l3486
  6180  001500                     l3486:
  6181  001500  908A               	bcf	3978,0,c	;volatile
  6182                           
  6183                           ;Shift595.c: 18: Delay(2);
  6184  001502  0E02               	movlw	2
  6185  001504  6E1B               	movwf	Delay@wait,c
  6186  001506  0E00               	movlw	0
  6187  001508  6E1C               	movwf	Delay@wait+1,c
  6188  00150A  0E00               	movlw	0
  6189  00150C  6E1D               	movwf	Delay@wait+2,c
  6190  00150E  0E00               	movlw	0
  6191  001510  6E1E               	movwf	Delay@wait+3,c
  6192  001512  EC0E  F00C         	call	_Delay	;wreg free
  6193  001516  D000               	goto	l3488
  6194  001518                     l3488:
  6195  001518  808A               	bsf	3978,0,c	;volatile
  6196                           
  6197                           ;Shift595.c: 20: Delay(2);
  6198  00151A  0E02               	movlw	2
  6199  00151C  6E1B               	movwf	Delay@wait,c
  6200  00151E  0E00               	movlw	0
  6201  001520  6E1C               	movwf	Delay@wait+1,c
  6202  001522  0E00               	movlw	0
  6203  001524  6E1D               	movwf	Delay@wait+2,c
  6204  001526  0E00               	movlw	0
  6205  001528  6E1E               	movwf	Delay@wait+3,c
  6206  00152A  EC0E  F00C         	call	_Delay	;wreg free
  6207  00152E  D000               	goto	l3490
  6208  001530                     l3490:
  6209  001530  9A8C               	bcf	3980,5,c	;volatile
  6210  001532  D000               	goto	l3492
  6211  001534                     l3492:
  6212                           
  6213                           ;Shift595.c: 23: Clear595();
  6214  001534  EC74  F00C         	call	_Clear595	;wreg free
  6215  001538  0012               	return		;funcret
  6216  00153A                     __end_of_StartUp595:
  6217                           	opt stack 0
  6218                           tosu	equ	0xFFF
  6219                           tosh	equ	0xFFE
  6220                           tosl	equ	0xFFD
  6221                           pclath	equ	0xFFA
  6222                           tblptru	equ	0xFF8
  6223                           tblptrh	equ	0xFF7
  6224                           tblptrl	equ	0xFF6
  6225                           tablat	equ	0xFF5
  6226                           prodh	equ	0xFF4
  6227                           prodl	equ	0xFF3
  6228                           intcon	equ	0xFF2
  6229                           intcon2	equ	0xFF1
  6230                           postinc0	equ	0xFEE
  6231                           wreg	equ	0xFE8
  6232                           indf2	equ	0xFDF
  6233                           postinc2	equ	0xFDE
  6234                           postdec2	equ	0xFDD
  6235                           plusw2	equ	0xFDB
  6236                           fsr2h	equ	0xFDA
  6237                           fsr2l	equ	0xFD9
  6238                           status	equ	0xFD8
  6239                           
  6240 ;; *************** function _Clear595 *****************
  6241 ;; Defined at:
  6242 ;;		line 38 in file "Shift595.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;		None
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  i               2   35[COMRAM] int 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;		None               void
  6249 ;; Registers used:
  6250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6256 ;;      Params:         0       0       0       0       0       0       0
  6257 ;;      Locals:         2       0       0       0       0       0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0
  6259 ;;      Totals:         2       0       0       0       0       0       0
  6260 ;;Total ram usage:        2 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    6
  6263 ;; This function calls:
  6264 ;;		_writeRegisters
  6265 ;; This function is called by:
  6266 ;;		_StartUp595
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           	psect	text36
  6271  0018E8                     __ptext36:
  6272                           	opt stack 0
  6273  0018E8                     _Clear595:
  6274                           	opt stack 22
  6275                           
  6276                           ;Shift595.c: 39: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6277                           
  6278                           ;incstack = 0
  6279  0018E8  0E00               	movlw	0
  6280  0018EA  6E25               	movwf	Clear595@i+1,c
  6281  0018EC  0E17               	movlw	23
  6282  0018EE  6E24               	movwf	Clear595@i,c
  6283  0018F0                     l3376:
  6284  0018F0  BE25               	btfsc	Clear595@i+1,7,c
  6285  0018F2  D013               	goto	l3386
  6286  0018F4  D001               	goto	l3380
  6287  0018F6  D011               	goto	l3386
  6288  0018F8                     l3380:
  6289                           
  6290                           ;Shift595.c: 40: registers[i] = 0;
  6291  0018F8  90D8               	bcf	status,0,c
  6292  0018FA  3424               	rlcf	Clear595@i,w,c
  6293  0018FC  6ED9               	movwf	fsr2l,c
  6294  0018FE  3425               	rlcf	Clear595@i+1,w,c
  6295  001900  6EDA               	movwf	fsr2h,c
  6296  001902  0E60               	movlw	low _registers
  6297  001904  26D9               	addwf	fsr2l,f,c
  6298  001906  0E00               	movlw	high _registers
  6299  001908  22DA               	addwfc	fsr2h,f,c
  6300  00190A  0E00               	movlw	0
  6301  00190C  6EDE               	movwf	postinc2,c
  6302  00190E  0E00               	movlw	0
  6303  001910  6EDD               	movwf	postdec2,c
  6304  001912  0624               	decf	Clear595@i,f,c
  6305  001914  A0D8               	btfss	status,0,c
  6306  001916  0625               	decf	Clear595@i+1,f,c
  6307  001918  D7EB               	goto	l3376
  6308  00191A                     l3386:
  6309                           
  6310                           ;Shift595.c: 41: }
  6311                           ;Shift595.c: 43: writeRegisters();
  6312  00191A  EC3F  F008         	call	_writeRegisters	;wreg free
  6313  00191E  0012               	return		;funcret
  6314  001920                     __end_of_Clear595:
  6315                           	opt stack 0
  6316                           tosu	equ	0xFFF
  6317                           tosh	equ	0xFFE
  6318                           tosl	equ	0xFFD
  6319                           pclath	equ	0xFFA
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           intcon2	equ	0xFF1
  6328                           postinc0	equ	0xFEE
  6329                           wreg	equ	0xFE8
  6330                           indf2	equ	0xFDF
  6331                           postinc2	equ	0xFDE
  6332                           postdec2	equ	0xFDD
  6333                           plusw2	equ	0xFDB
  6334                           fsr2h	equ	0xFDA
  6335                           fsr2l	equ	0xFD9
  6336                           status	equ	0xFD8
  6337                           
  6338 ;; *************** function _writeRegisters *****************
  6339 ;; Defined at:
  6340 ;;		line 49 in file "Shift595.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;		None
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  i               2    2[BANK1 ] int 
  6345 ;;  val             2    0[BANK1 ] int 
  6346 ;; Return value:  Size  Location     Type
  6347 ;;		None               void
  6348 ;; Registers used:
  6349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6355 ;;      Params:         0       0       0       0       0       0       0
  6356 ;;      Locals:         0       0       4       0       0       0       0
  6357 ;;      Temps:          0       0       0       0       0       0       0
  6358 ;;      Totals:         0       0       4       0       0       0       0
  6359 ;;Total ram usage:        4 bytes
  6360 ;; Hardware stack levels used:    1
  6361 ;; Hardware stack levels required when called:    5
  6362 ;; This function calls:
  6363 ;;		_Delay
  6364 ;; This function is called by:
  6365 ;;		_Clear595
  6366 ;;		_Update
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text37
  6371  00107E                     __ptext37:
  6372                           	opt stack 0
  6373  00107E                     _writeRegisters:
  6374                           	opt stack 23
  6375                           
  6376                           ;incstack = 0
  6377                           ;Shift595.c: 50: do { LATD5 = 1; } while(0);
  6378  00107E  8A8C               	bsf	3980,5,c	;volatile
  6379  001080  D000               	goto	l3232
  6380  001082                     l3232:
  6381                           
  6382                           ;Shift595.c: 51: int val = 0;
  6383  001082  0E00               	movlw	0
  6384  001084  0101               	movlb	1	; () banked
  6385  001086  6FCF               	movwf	(writeRegisters@val+1)& (0+255),b
  6386  001088  0E00               	movlw	0
  6387  00108A  6FCE               	movwf	writeRegisters@val& (0+255),b
  6388  00108C  D000               	goto	l3234
  6389  00108E                     l3234:
  6390                           
  6391                           ; BSR set to: 1
  6392  00108E  9C8C               	bcf	3980,6,c	;volatile
  6393  001090  D000               	goto	l3236
  6394  001092                     l3236:
  6395                           
  6396                           ; BSR set to: 1
  6397                           ;Shift595.c: 53: Delay(2);
  6398  001092  0E02               	movlw	2
  6399  001094  6E1B               	movwf	Delay@wait,c
  6400  001096  0E00               	movlw	0
  6401  001098  6E1C               	movwf	Delay@wait+1,c
  6402  00109A  0E00               	movlw	0
  6403  00109C  6E1D               	movwf	Delay@wait+2,c
  6404  00109E  0E00               	movlw	0
  6405  0010A0  6E1E               	movwf	Delay@wait+3,c
  6406  0010A2  EC0E  F00C         	call	_Delay	;wreg free
  6407                           
  6408                           ;Shift595.c: 54: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6409  0010A6  0E00               	movlw	0
  6410  0010A8  0101               	movlb	1	; () banked
  6411  0010AA  6FD1               	movwf	(writeRegisters@i+1)& (0+255),b
  6412  0010AC  0E17               	movlw	23
  6413  0010AE  6FD0               	movwf	writeRegisters@i& (0+255),b
  6414  0010B0                     l3240:
  6415                           
  6416                           ; BSR set to: 1
  6417  0010B0  0101               	movlb	1	; () banked
  6418  0010B2  BFD1               	btfsc	(writeRegisters@i+1)& (0+255),7,b
  6419  0010B4  D04C               	goto	l365
  6420  0010B6  D001               	goto	l350
  6421                           
  6422                           ; BSR set to: 1
  6423  0010B8  D04A               	goto	l365
  6424  0010BA                     l350:
  6425                           
  6426                           ; BSR set to: 1
  6427  0010BA  9E8C               	bcf	3980,7,c	;volatile
  6428  0010BC  D000               	goto	l352
  6429  0010BE                     l352:
  6430                           
  6431                           ; BSR set to: 1
  6432  0010BE  9C8C               	bcf	3980,6,c	;volatile
  6433  0010C0  D000               	goto	l3244
  6434  0010C2                     l3244:
  6435                           
  6436                           ; BSR set to: 1
  6437                           ;Shift595.c: 57: Delay(2);
  6438  0010C2  0E02               	movlw	2
  6439  0010C4  6E1B               	movwf	Delay@wait,c
  6440  0010C6  0E00               	movlw	0
  6441  0010C8  6E1C               	movwf	Delay@wait+1,c
  6442  0010CA  0E00               	movlw	0
  6443  0010CC  6E1D               	movwf	Delay@wait+2,c
  6444  0010CE  0E00               	movlw	0
  6445  0010D0  6E1E               	movwf	Delay@wait+3,c
  6446  0010D2  EC0E  F00C         	call	_Delay	;wreg free
  6447                           
  6448                           ;Shift595.c: 58: val = registers[i];
  6449  0010D6  90D8               	bcf	status,0,c
  6450  0010D8  0101               	movlb	1	; () banked
  6451  0010DA  35D0               	rlcf	writeRegisters@i& (0+255),w,b
  6452  0010DC  6ED9               	movwf	fsr2l,c
  6453  0010DE  0101               	movlb	1	; () banked
  6454  0010E0  35D1               	rlcf	(writeRegisters@i+1)& (0+255),w,b
  6455  0010E2  6EDA               	movwf	fsr2h,c
  6456  0010E4  0E60               	movlw	low _registers
  6457  0010E6  26D9               	addwf	fsr2l,f,c
  6458  0010E8  0E00               	movlw	high _registers
  6459  0010EA  22DA               	addwfc	fsr2h,f,c
  6460  0010EC  CFDE F1CE          	movff	postinc2,writeRegisters@val
  6461  0010F0  CFDD F1CF          	movff	postdec2,writeRegisters@val+1
  6462                           
  6463                           ; BSR set to: 1
  6464                           ;Shift595.c: 59: if (val == 1) {
  6465  0010F4  0101               	movlb	1	; () banked
  6466  0010F6  05CE               	decf	writeRegisters@val& (0+255),w,b
  6467  0010F8  0101               	movlb	1	; () banked
  6468  0010FA  11CF               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6469  0010FC  A4D8               	btfss	status,2,c
  6470  0010FE  D002               	goto	l3250
  6471                           
  6472                           ; BSR set to: 1
  6473                           
  6474                           ;Shift595.c: 60: do { LATD4 = 1; } while(0);
  6475  001100  888C               	bsf	3980,4,c	;volatile
  6476                           
  6477                           ; BSR set to: 1
  6478                           ;Shift595.c: 61: } else if (val == 0) {
  6479  001102  D008               	goto	l3252
  6480  001104                     l3250:
  6481                           
  6482                           ; BSR set to: 1
  6483  001104  0101               	movlb	1	; () banked
  6484  001106  51CE               	movf	writeRegisters@val& (0+255),w,b
  6485  001108  0101               	movlb	1	; () banked
  6486  00110A  11CF               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6487  00110C  A4D8               	btfss	status,2,c
  6488  00110E  D002               	goto	l3252
  6489                           
  6490                           ; BSR set to: 1
  6491                           
  6492                           ;Shift595.c: 62: do { LATD4 = 0; } while(0);
  6493  001110  988C               	bcf	3980,4,c	;volatile
  6494                           
  6495                           ; BSR set to: 1
  6496                           
  6497                           ; BSR set to: 1
  6498  001112  D000               	goto	l3252
  6499  001114                     l3252:
  6500                           
  6501                           ; BSR set to: 1
  6502                           ;Shift595.c: 63: }
  6503                           ;Shift595.c: 64: Delay(2);
  6504  001114  0E02               	movlw	2
  6505  001116  6E1B               	movwf	Delay@wait,c
  6506  001118  0E00               	movlw	0
  6507  00111A  6E1C               	movwf	Delay@wait+1,c
  6508  00111C  0E00               	movlw	0
  6509  00111E  6E1D               	movwf	Delay@wait+2,c
  6510  001120  0E00               	movlw	0
  6511  001122  6E1E               	movwf	Delay@wait+3,c
  6512  001124  EC0E  F00C         	call	_Delay	;wreg free
  6513  001128  D000               	goto	l3254
  6514  00112A                     l3254:
  6515  00112A  8E8C               	bsf	3980,7,c	;volatile
  6516  00112C  D000               	goto	l3256
  6517  00112E                     l3256:
  6518  00112E  8C8C               	bsf	3980,6,c	;volatile
  6519                           
  6520                           ;Shift595.c: 67: Delay(2);
  6521  001130  0E02               	movlw	2
  6522  001132  6E1B               	movwf	Delay@wait,c
  6523  001134  0E00               	movlw	0
  6524  001136  6E1C               	movwf	Delay@wait+1,c
  6525  001138  0E00               	movlw	0
  6526  00113A  6E1D               	movwf	Delay@wait+2,c
  6527  00113C  0E00               	movlw	0
  6528  00113E  6E1E               	movwf	Delay@wait+3,c
  6529  001140  EC0E  F00C         	call	_Delay	;wreg free
  6530  001144  0101               	movlb	1	; () banked
  6531  001146  07D0               	decf	writeRegisters@i& (0+255),f,b
  6532  001148  A0D8               	btfss	status,0,c
  6533  00114A  07D1               	decf	(writeRegisters@i+1)& (0+255),f,b
  6534  00114C  D7B1               	goto	l3240
  6535  00114E                     l365:
  6536                           
  6537                           ; BSR set to: 1
  6538  00114E  9C8C               	bcf	3980,6,c	;volatile
  6539  001150  D000               	goto	l367
  6540  001152                     l367:
  6541                           
  6542                           ; BSR set to: 1
  6543  001152  9E8C               	bcf	3980,7,c	;volatile
  6544  001154  D000               	goto	l369
  6545  001156                     l369:
  6546                           
  6547                           ; BSR set to: 1
  6548  001156  9A8C               	bcf	3980,5,c	;volatile
  6549  001158  0012               	return	
  6550                           
  6551                           ; BSR set to: 1
  6552                           
  6553                           ; BSR set to: 1
  6554  00115A  0012               	return		;funcret
  6555  00115C                     __end_of_writeRegisters:
  6556                           	opt stack 0
  6557                           tosu	equ	0xFFF
  6558                           tosh	equ	0xFFE
  6559                           tosl	equ	0xFFD
  6560                           pclath	equ	0xFFA
  6561                           tblptru	equ	0xFF8
  6562                           tblptrh	equ	0xFF7
  6563                           tblptrl	equ	0xFF6
  6564                           tablat	equ	0xFF5
  6565                           prodh	equ	0xFF4
  6566                           prodl	equ	0xFF3
  6567                           intcon	equ	0xFF2
  6568                           intcon2	equ	0xFF1
  6569                           postinc0	equ	0xFEE
  6570                           wreg	equ	0xFE8
  6571                           indf2	equ	0xFDF
  6572                           postinc2	equ	0xFDE
  6573                           postdec2	equ	0xFDD
  6574                           plusw2	equ	0xFDB
  6575                           fsr2h	equ	0xFDA
  6576                           fsr2l	equ	0xFD9
  6577                           status	equ	0xFD8
  6578                           
  6579 ;; *************** function _Delay *****************
  6580 ;; Defined at:
  6581 ;;		line 8 in file "Functions.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;  wait            4   26[COMRAM] long 
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;  i               4   31[COMRAM] long 
  6586 ;; Return value:  Size  Location     Type
  6587 ;;		None               void
  6588 ;; Registers used:
  6589 ;;		wreg, status,2, status,0
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6595 ;;      Params:         4       0       0       0       0       0       0
  6596 ;;      Locals:         4       0       0       0       0       0       0
  6597 ;;      Temps:          1       0       0       0       0       0       0
  6598 ;;      Totals:         9       0       0       0       0       0       0
  6599 ;;Total ram usage:        9 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    4
  6602 ;; This function calls:
  6603 ;;		Nothing
  6604 ;; This function is called by:
  6605 ;;		_StartUp595
  6606 ;;		_writeRegisters
  6607 ;;		_respondECU
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           	psect	text38
  6612  00181C                     __ptext38:
  6613                           	opt stack 0
  6614  00181C                     _Delay:
  6615                           	opt stack 24
  6616                           
  6617                           ;Functions.c: 10: long int i = 0;
  6618                           
  6619                           ; BSR set to: 1
  6620                           ;incstack = 0
  6621  00181C  0E00               	movlw	0
  6622  00181E  6E20               	movwf	Delay@i,c
  6623  001820  0E00               	movlw	0
  6624  001822  6E21               	movwf	Delay@i+1,c
  6625  001824  0E00               	movlw	0
  6626  001826  6E22               	movwf	Delay@i+2,c
  6627  001828  0E00               	movlw	0
  6628  00182A  6E23               	movwf	Delay@i+3,c
  6629                           
  6630                           ;Functions.c: 11: for(;wait>i;i++)
  6631  00182C  D00E               	goto	l3192
  6632  00182E                     l3188:
  6633                           
  6634                           ;Functions.c: 12: {
  6635                           ;Functions.c: 13: _delay((unsigned long)((1)*(8000000/4000.0)));
  6636  00182E  0E03               	movlw	3
  6637  001830  6E1F               	movwf	??_Delay& (0+255),c
  6638  001832  0E98               	movlw	152
  6639  001834                     u3677:
  6640  001834  2EE8               	decfsz	wreg,f,c
  6641  001836  D7FE               	goto	u3677
  6642  001838  2E1F               	decfsz	??_Delay& (0+255),f,c
  6643  00183A  D7FC               	goto	u3677
  6644  00183C  0E01               	movlw	1
  6645  00183E  2620               	addwf	Delay@i,f,c
  6646  001840  0E00               	movlw	0
  6647  001842  2221               	addwfc	Delay@i+1,f,c
  6648  001844  2222               	addwfc	Delay@i+2,f,c
  6649  001846  2223               	addwfc	Delay@i+3,f,c
  6650  001848  D000               	goto	l3192
  6651  00184A                     l3192:
  6652  00184A  501B               	movf	Delay@wait,w,c
  6653  00184C  5C20               	subwf	Delay@i,w,c
  6654  00184E  501C               	movf	Delay@wait+1,w,c
  6655  001850  5821               	subwfb	Delay@i+1,w,c
  6656  001852  501D               	movf	Delay@wait+2,w,c
  6657  001854  5822               	subwfb	Delay@i+2,w,c
  6658  001856  5023               	movf	Delay@i+3,w,c
  6659  001858  0A80               	xorlw	128
  6660  00185A  6E1F               	movwf	??_Delay& (0+255),c
  6661  00185C  501E               	movf	Delay@wait+3,w,c
  6662  00185E  0A80               	xorlw	128
  6663  001860  581F               	subwfb	??_Delay& (0+255),w,c
  6664  001862  A0D8               	btfss	status,0,c
  6665  001864  D7E4               	goto	l3188
  6666  001866  0012               	return		;funcret
  6667  001868                     __end_of_Delay:
  6668                           	opt stack 0
  6669                           tosu	equ	0xFFF
  6670                           tosh	equ	0xFFE
  6671                           tosl	equ	0xFFD
  6672                           pclath	equ	0xFFA
  6673                           tblptru	equ	0xFF8
  6674                           tblptrh	equ	0xFF7
  6675                           tblptrl	equ	0xFF6
  6676                           tablat	equ	0xFF5
  6677                           prodh	equ	0xFF4
  6678                           prodl	equ	0xFF3
  6679                           intcon	equ	0xFF2
  6680                           intcon2	equ	0xFF1
  6681                           postinc0	equ	0xFEE
  6682                           wreg	equ	0xFE8
  6683                           indf2	equ	0xFDF
  6684                           postinc2	equ	0xFDE
  6685                           postdec2	equ	0xFDD
  6686                           plusw2	equ	0xFDB
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691 ;; *************** function _EnableSlavePower *****************
  6692 ;; Defined at:
  6693 ;;		line 31 in file "PDU.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  slave           1    wreg     enum E5
  6696 ;;  onof            2   36[COMRAM] int 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  slave           1    0[BANK0 ] enum E5
  6699 ;; Return value:  Size  Location     Type
  6700 ;;		None               void
  6701 ;; Registers used:
  6702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6708 ;;      Params:         2       0       0       0       0       0       0
  6709 ;;      Locals:         0       1       0       0       0       0       0
  6710 ;;      Temps:          0       0       0       0       0       0       0
  6711 ;;      Totals:         2       1       0       0       0       0       0
  6712 ;;Total ram usage:        3 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; Hardware stack levels required when called:    5
  6715 ;; This function calls:
  6716 ;;		_SetPin595
  6717 ;; This function is called by:
  6718 ;;		_PDUStartup
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           	psect	text39
  6723  000EB6                     __ptext39:
  6724                           	opt stack 0
  6725  000EB6                     _EnableSlavePower:
  6726                           	opt stack 24
  6727                           
  6728                           ;incstack = 0
  6729                           ;EnableSlavePower@slave stored from wreg
  6730  000EB6  0100               	movlb	0	; () banked
  6731  000EB8  6FFD               	movwf	EnableSlavePower@slave& (0+255),b
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;PDU.c: 33: switch(slave)
  6735  000EBA  D05A               	goto	l3510
  6736  000EBC                     l3496:
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;PDU.c: 36: SetPin595(2, 1, onof);
  6740  000EBC  0E00               	movlw	0
  6741  000EBE  6E1C               	movwf	SetPin595@Reg+1,c
  6742  000EC0  0E02               	movlw	2
  6743  000EC2  6E1B               	movwf	SetPin595@Reg,c
  6744  000EC4  0E00               	movlw	0
  6745  000EC6  6E1E               	movwf	SetPin595@pin+1,c
  6746  000EC8  0E01               	movlw	1
  6747  000ECA  6E1D               	movwf	SetPin595@pin,c
  6748  000ECC  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6749  000ED0  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6750  000ED4  ECE7  F00B         	call	_SetPin595	;wreg free
  6751                           
  6752                           ;PDU.c: 37: break;
  6753  000ED8  0012               	return	
  6754  000EDA                     l3498:
  6755                           
  6756                           ;PDU.c: 39: SetPin595(3, 1, onof);
  6757  000EDA  0E00               	movlw	0
  6758  000EDC  6E1C               	movwf	SetPin595@Reg+1,c
  6759  000EDE  0E03               	movlw	3
  6760  000EE0  6E1B               	movwf	SetPin595@Reg,c
  6761  000EE2  0E00               	movlw	0
  6762  000EE4  6E1E               	movwf	SetPin595@pin+1,c
  6763  000EE6  0E01               	movlw	1
  6764  000EE8  6E1D               	movwf	SetPin595@pin,c
  6765  000EEA  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6766  000EEE  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6767  000EF2  ECE7  F00B         	call	_SetPin595	;wreg free
  6768                           
  6769                           ;PDU.c: 40: break;
  6770  000EF6  0012               	return	
  6771  000EF8                     l3500:
  6772                           
  6773                           ;PDU.c: 42: SetPin595(2, 6, onof);
  6774  000EF8  0E00               	movlw	0
  6775  000EFA  6E1C               	movwf	SetPin595@Reg+1,c
  6776  000EFC  0E02               	movlw	2
  6777  000EFE  6E1B               	movwf	SetPin595@Reg,c
  6778  000F00  0E00               	movlw	0
  6779  000F02  6E1E               	movwf	SetPin595@pin+1,c
  6780  000F04  0E06               	movlw	6
  6781  000F06  6E1D               	movwf	SetPin595@pin,c
  6782  000F08  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6783  000F0C  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6784  000F10  ECE7  F00B         	call	_SetPin595	;wreg free
  6785                           
  6786                           ;PDU.c: 43: break;
  6787  000F14  0012               	return	
  6788  000F16                     l3502:
  6789                           
  6790                           ;PDU.c: 45: SetPin595(3, 6, onof);
  6791  000F16  0E00               	movlw	0
  6792  000F18  6E1C               	movwf	SetPin595@Reg+1,c
  6793  000F1A  0E03               	movlw	3
  6794  000F1C  6E1B               	movwf	SetPin595@Reg,c
  6795  000F1E  0E00               	movlw	0
  6796  000F20  6E1E               	movwf	SetPin595@pin+1,c
  6797  000F22  0E06               	movlw	6
  6798  000F24  6E1D               	movwf	SetPin595@pin,c
  6799  000F26  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6800  000F2A  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6801  000F2E  ECE7  F00B         	call	_SetPin595	;wreg free
  6802                           
  6803                           ;PDU.c: 46: break;
  6804  000F32  0012               	return	
  6805  000F34                     l3504:
  6806                           
  6807                           ;PDU.c: 48: SetPin595(1, 1, onof);
  6808  000F34  0E00               	movlw	0
  6809  000F36  6E1C               	movwf	SetPin595@Reg+1,c
  6810  000F38  0E01               	movlw	1
  6811  000F3A  6E1B               	movwf	SetPin595@Reg,c
  6812  000F3C  0E00               	movlw	0
  6813  000F3E  6E1E               	movwf	SetPin595@pin+1,c
  6814  000F40  0E01               	movlw	1
  6815  000F42  6E1D               	movwf	SetPin595@pin,c
  6816  000F44  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6817  000F48  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6818  000F4C  ECE7  F00B         	call	_SetPin595	;wreg free
  6819                           
  6820                           ;PDU.c: 49: break;
  6821  000F50  0012               	return	
  6822  000F52                     l3506:
  6823                           
  6824                           ;PDU.c: 51: SetPin595(1, 6, onof);
  6825  000F52  0E00               	movlw	0
  6826  000F54  6E1C               	movwf	SetPin595@Reg+1,c
  6827  000F56  0E01               	movlw	1
  6828  000F58  6E1B               	movwf	SetPin595@Reg,c
  6829  000F5A  0E00               	movlw	0
  6830  000F5C  6E1E               	movwf	SetPin595@pin+1,c
  6831  000F5E  0E06               	movlw	6
  6832  000F60  6E1D               	movwf	SetPin595@pin,c
  6833  000F62  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6834  000F66  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6835  000F6A  ECE7  F00B         	call	_SetPin595	;wreg free
  6836                           
  6837                           ;PDU.c: 53: }
  6838                           
  6839                           ;PDU.c: 52: break;
  6840  000F6E  0012               	return	
  6841  000F70                     l3510:
  6842  000F70  0100               	movlb	0	; () banked
  6843  000F72  51FD               	movf	EnableSlavePower@slave& (0+255),w,b
  6844                           
  6845                           ; Switch size 1, requested type "space"
  6846                           ; Number of cases is 6, Range of values is 1 to 6
  6847                           ; switch strategies available:
  6848                           ; Name         Instructions Cycles
  6849                           ; simple_byte           19    10 (average)
  6850                           ;	Chosen strategy is simple_byte
  6851  000F74  0A01               	xorlw	1	; case 1
  6852  000F76  B4D8               	btfsc	status,2,c
  6853  000F78  D7DD               	goto	l3504
  6854  000F7A  0A03               	xorlw	3	; case 2
  6855  000F7C  B4D8               	btfsc	status,2,c
  6856  000F7E  D7BC               	goto	l3500
  6857  000F80  0A01               	xorlw	1	; case 3
  6858  000F82  B4D8               	btfsc	status,2,c
  6859  000F84  D7AA               	goto	l3498
  6860  000F86  0A07               	xorlw	7	; case 4
  6861  000F88  B4D8               	btfsc	status,2,c
  6862  000F8A  D7C5               	goto	l3502
  6863  000F8C  0A01               	xorlw	1	; case 5
  6864  000F8E  B4D8               	btfsc	status,2,c
  6865  000F90  D795               	goto	l3496
  6866  000F92  0A03               	xorlw	3	; case 6
  6867  000F94  A4D8               	btfss	status,2,c
  6868  000F96  0012               	return	
  6869  000F98  D7DC               	goto	l3506
  6870                           
  6871                           ; BSR set to: 0
  6872  000F9A  0012               	return		;funcret
  6873  000F9C                     __end_of_EnableSlavePower:
  6874                           	opt stack 0
  6875                           tosu	equ	0xFFF
  6876                           tosh	equ	0xFFE
  6877                           tosl	equ	0xFFD
  6878                           pclath	equ	0xFFA
  6879                           tblptru	equ	0xFF8
  6880                           tblptrh	equ	0xFF7
  6881                           tblptrl	equ	0xFF6
  6882                           tablat	equ	0xFF5
  6883                           prodh	equ	0xFF4
  6884                           prodl	equ	0xFF3
  6885                           intcon	equ	0xFF2
  6886                           intcon2	equ	0xFF1
  6887                           postinc0	equ	0xFEE
  6888                           wreg	equ	0xFE8
  6889                           indf2	equ	0xFDF
  6890                           postinc2	equ	0xFDE
  6891                           postdec2	equ	0xFDD
  6892                           plusw2	equ	0xFDB
  6893                           fsr2h	equ	0xFDA
  6894                           fsr2l	equ	0xFD9
  6895                           status	equ	0xFD8
  6896                           
  6897 ;; *************** function _SetPin595 *****************
  6898 ;; Defined at:
  6899 ;;		line 31 in file "Shift595.c"
  6900 ;; Parameters:    Size  Location     Type
  6901 ;;  Reg             2   26[COMRAM] int 
  6902 ;;  pin             2   28[COMRAM] int 
  6903 ;;  value           2   30[COMRAM] int 
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;		None
  6906 ;; Return value:  Size  Location     Type
  6907 ;;		None               void
  6908 ;; Registers used:
  6909 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6915 ;;      Params:         6       0       0       0       0       0       0
  6916 ;;      Locals:         0       0       0       0       0       0       0
  6917 ;;      Temps:          4       0       0       0       0       0       0
  6918 ;;      Totals:        10       0       0       0       0       0       0
  6919 ;;Total ram usage:       10 bytes
  6920 ;; Hardware stack levels used:    1
  6921 ;; Hardware stack levels required when called:    4
  6922 ;; This function calls:
  6923 ;;		Nothing
  6924 ;; This function is called by:
  6925 ;;		_EnableSlavePower
  6926 ;;		_ReadCurrent
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           	psect	text40
  6931  0017CE                     __ptext40:
  6932                           	opt stack 0
  6933  0017CE                     _SetPin595:
  6934                           	opt stack 24
  6935                           
  6936                           ;Shift595.c: 32: registers[((Reg - 1)*8) + pin] = value;
  6937                           
  6938                           ;incstack = 0
  6939  0017CE  0EF0               	movlw	240
  6940  0017D0  6E21               	movwf	??_SetPin595& (0+255),c
  6941  0017D2  0EFF               	movlw	255
  6942  0017D4  6E22               	movwf	(??_SetPin595+1)& (0+255),c
  6943  0017D6  C01B  F023         	movff	SetPin595@Reg,??_SetPin595+2
  6944  0017DA  C01C  F024         	movff	SetPin595@Reg+1,??_SetPin595+3
  6945  0017DE  90D8               	bcf	status,0,c
  6946  0017E0  3623               	rlcf	??_SetPin595+2,f,c
  6947  0017E2  3624               	rlcf	??_SetPin595+3,f,c
  6948  0017E4  90D8               	bcf	status,0,c
  6949  0017E6  3623               	rlcf	??_SetPin595+2,f,c
  6950  0017E8  3624               	rlcf	??_SetPin595+3,f,c
  6951  0017EA  90D8               	bcf	status,0,c
  6952  0017EC  3623               	rlcf	??_SetPin595+2,f,c
  6953  0017EE  3624               	rlcf	??_SetPin595+3,f,c
  6954  0017F0  501D               	movf	SetPin595@pin,w,c
  6955  0017F2  2623               	addwf	??_SetPin595+2,f,c
  6956  0017F4  501E               	movf	SetPin595@pin+1,w,c
  6957  0017F6  2224               	addwfc	??_SetPin595+3,f,c
  6958  0017F8  90D8               	bcf	status,0,c
  6959  0017FA  3623               	rlcf	??_SetPin595+2,f,c
  6960  0017FC  3624               	rlcf	??_SetPin595+3,f,c
  6961  0017FE  5021               	movf	??_SetPin595,w,c
  6962  001800  2623               	addwf	??_SetPin595+2,f,c
  6963  001802  5022               	movf	??_SetPin595+1,w,c
  6964  001804  2224               	addwfc	??_SetPin595+3,f,c
  6965  001806  0E60               	movlw	low _registers
  6966  001808  2423               	addwf	??_SetPin595+2,w,c
  6967  00180A  6ED9               	movwf	fsr2l,c
  6968  00180C  0E00               	movlw	high _registers
  6969  00180E  2024               	addwfc	??_SetPin595+3,w,c
  6970  001810  6EDA               	movwf	fsr2h,c
  6971  001812  C01F  FFDE         	movff	SetPin595@value,postinc2
  6972  001816  C020  FFDD         	movff	SetPin595@value+1,postdec2
  6973  00181A  0012               	return		;funcret
  6974  00181C                     __end_of_SetPin595:
  6975                           	opt stack 0
  6976                           tosu	equ	0xFFF
  6977                           tosh	equ	0xFFE
  6978                           tosl	equ	0xFFD
  6979                           pclath	equ	0xFFA
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           prodh	equ	0xFF4
  6985                           prodl	equ	0xFF3
  6986                           intcon	equ	0xFF2
  6987                           intcon2	equ	0xFF1
  6988                           postinc0	equ	0xFEE
  6989                           wreg	equ	0xFE8
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           plusw2	equ	0xFDB
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function _ComputeStorageData *****************
  6999 ;; Defined at:
  7000 ;;		line 97 in file "PDU.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;  i               2   29[COMRAM] int 
  7005 ;; Return value:  Size  Location     Type
  7006 ;;		None               void
  7007 ;; Registers used:
  7008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7014 ;;      Params:         0       0       0       0       0       0       0
  7015 ;;      Locals:         2       0       0       0       0       0       0
  7016 ;;      Temps:          2       0       0       0       0       0       0
  7017 ;;      Totals:         4       0       0       0       0       0       0
  7018 ;;Total ram usage:        4 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    5
  7021 ;; This function calls:
  7022 ;;		_DATAEE_ReadByte
  7023 ;; This function is called by:
  7024 ;;		_PDUStartup
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text41
  7029  000F9C                     __ptext41:
  7030                           	opt stack 0
  7031  000F9C                     _ComputeStorageData:
  7032                           	opt stack 24
  7033                           
  7034                           ;PDU.c: 99: for(int i = 0;i<12;i++)
  7035                           
  7036                           ;incstack = 0
  7037  000F9C  0E00               	movlw	0
  7038  000F9E  6E1F               	movwf	ComputeStorageData@i+1,c
  7039  000FA0  0E00               	movlw	0
  7040  000FA2  6E1E               	movwf	ComputeStorageData@i,c
  7041  000FA4                     l2794:
  7042  000FA4  BE1F               	btfsc	ComputeStorageData@i+1,7,c
  7043  000FA6  D008               	goto	l2798
  7044  000FA8  501F               	movf	ComputeStorageData@i+1,w,c
  7045  000FAA  E114               	bnz	l2804
  7046  000FAC  0E0C               	movlw	12
  7047  000FAE  5C1E               	subwf	ComputeStorageData@i,w,c
  7048  000FB0  B0D8               	btfsc	status,0,c
  7049  000FB2  D010               	goto	l2804
  7050  000FB4  D001               	goto	l2798
  7051  000FB6  D00E               	goto	l2804
  7052  000FB8                     l2798:
  7053                           
  7054                           ;PDU.c: 100: {
  7055                           ;PDU.c: 101: data[i] = DATAEE_ReadByte(i);
  7056  000FB8  0EB4               	movlw	low _data
  7057  000FBA  241E               	addwf	ComputeStorageData@i,w,c
  7058  000FBC  6ED9               	movwf	fsr2l,c
  7059  000FBE  0E00               	movlw	high _data
  7060  000FC0  201F               	addwfc	ComputeStorageData@i+1,w,c
  7061  000FC2  6EDA               	movwf	fsr2h,c
  7062  000FC4  501E               	movf	ComputeStorageData@i,w,c
  7063  000FC6  ECA9  F00D         	call	_DATAEE_ReadByte
  7064  000FCA  6EDF               	movwf	indf2,c
  7065  000FCC  4A1E               	infsnz	ComputeStorageData@i,f,c
  7066  000FCE  2A1F               	incf	ComputeStorageData@i+1,f,c
  7067  000FD0  D7E9               	goto	l2794
  7068  000FD2  D000               	goto	l2804
  7069  000FD4                     l2804:
  7070                           
  7071                           ;PDU.c: 102: }
  7072                           ;PDU.c: 103: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7073  000FD4  0100               	movlb	0	; () banked
  7074  000FD6  51B5               	movf	(_data+1)& (0+255),w,b
  7075  000FD8  C0B4  F01C         	movff	_data,??_ComputeStorageData
  7076  000FDC  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7077  000FDE  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7078  000FE2  6A1C               	clrf	??_ComputeStorageData,c
  7079  000FE4  101C               	iorwf	??_ComputeStorageData,w,c
  7080  000FE6  0100               	movlb	0	; () banked
  7081  000FE8  6FA8               	movwf	_Currentcomp& (0+255),b
  7082  000FEA  501D               	movf	??_ComputeStorageData+1,w,c
  7083  000FEC  0100               	movlb	0	; () banked
  7084  000FEE  6FA9               	movwf	(_Currentcomp+1)& (0+255),b
  7085                           
  7086                           ;PDU.c: 104: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7087  000FF0  0100               	movlb	0	; () banked
  7088  000FF2  51B7               	movf	(_data+3)& (0+255),w,b
  7089  000FF4  C0B6  F01C         	movff	_data+2,??_ComputeStorageData
  7090  000FF8  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7091  000FFA  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7092  000FFE  6A1C               	clrf	??_ComputeStorageData,c
  7093  001000  101C               	iorwf	??_ComputeStorageData,w,c
  7094  001002  0100               	movlb	0	; () banked
  7095  001004  6FAA               	movwf	(_Currentcomp+2)& (0+255),b
  7096  001006  501D               	movf	??_ComputeStorageData+1,w,c
  7097  001008  0100               	movlb	0	; () banked
  7098  00100A  6FAB               	movwf	(_Currentcomp+3)& (0+255),b
  7099                           
  7100                           ;PDU.c: 105: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7101  00100C  0100               	movlb	0	; () banked
  7102  00100E  51B9               	movf	(_data+5)& (0+255),w,b
  7103  001010  C0B8  F01C         	movff	_data+4,??_ComputeStorageData
  7104  001014  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7105  001016  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7106  00101A  6A1C               	clrf	??_ComputeStorageData,c
  7107  00101C  101C               	iorwf	??_ComputeStorageData,w,c
  7108  00101E  0100               	movlb	0	; () banked
  7109  001020  6FAC               	movwf	(_Currentcomp+4)& (0+255),b
  7110  001022  501D               	movf	??_ComputeStorageData+1,w,c
  7111  001024  0100               	movlb	0	; () banked
  7112  001026  6FAD               	movwf	(_Currentcomp+5)& (0+255),b
  7113                           
  7114                           ;PDU.c: 106: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7115  001028  0100               	movlb	0	; () banked
  7116  00102A  51BB               	movf	(_data+7)& (0+255),w,b
  7117  00102C  C0BA  F01C         	movff	_data+6,??_ComputeStorageData
  7118  001030  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7119  001032  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7120  001036  6A1C               	clrf	??_ComputeStorageData,c
  7121  001038  101C               	iorwf	??_ComputeStorageData,w,c
  7122  00103A  0100               	movlb	0	; () banked
  7123  00103C  6FAE               	movwf	(_Currentcomp+6)& (0+255),b
  7124  00103E  501D               	movf	??_ComputeStorageData+1,w,c
  7125  001040  0100               	movlb	0	; () banked
  7126  001042  6FAF               	movwf	(_Currentcomp+7)& (0+255),b
  7127                           
  7128                           ;PDU.c: 107: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7129  001044  0100               	movlb	0	; () banked
  7130  001046  51BD               	movf	(_data+9)& (0+255),w,b
  7131  001048  C0BC  F01C         	movff	_data+8,??_ComputeStorageData
  7132  00104C  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7133  00104E  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7134  001052  6A1C               	clrf	??_ComputeStorageData,c
  7135  001054  101C               	iorwf	??_ComputeStorageData,w,c
  7136  001056  0100               	movlb	0	; () banked
  7137  001058  6FB0               	movwf	(_Currentcomp+8)& (0+255),b
  7138  00105A  501D               	movf	??_ComputeStorageData+1,w,c
  7139  00105C  0100               	movlb	0	; () banked
  7140  00105E  6FB1               	movwf	(_Currentcomp+9)& (0+255),b
  7141                           
  7142                           ;PDU.c: 108: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7143  001060  0100               	movlb	0	; () banked
  7144  001062  51BF               	movf	(_data+11)& (0+255),w,b
  7145  001064  C0BE  F01C         	movff	_data+10,??_ComputeStorageData
  7146  001068  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7147  00106A  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7148  00106E  6A1C               	clrf	??_ComputeStorageData,c
  7149  001070  101C               	iorwf	??_ComputeStorageData,w,c
  7150  001072  0100               	movlb	0	; () banked
  7151  001074  6FB2               	movwf	(_Currentcomp+10)& (0+255),b
  7152  001076  501D               	movf	??_ComputeStorageData+1,w,c
  7153  001078  0100               	movlb	0	; () banked
  7154  00107A  6FB3               	movwf	(_Currentcomp+11)& (0+255),b
  7155                           
  7156                           ; BSR set to: 0
  7157  00107C  0012               	return		;funcret
  7158  00107E                     __end_of_ComputeStorageData:
  7159                           	opt stack 0
  7160                           tosu	equ	0xFFF
  7161                           tosh	equ	0xFFE
  7162                           tosl	equ	0xFFD
  7163                           pclath	equ	0xFFA
  7164                           tblptru	equ	0xFF8
  7165                           tblptrh	equ	0xFF7
  7166                           tblptrl	equ	0xFF6
  7167                           tablat	equ	0xFF5
  7168                           prodh	equ	0xFF4
  7169                           prodl	equ	0xFF3
  7170                           intcon	equ	0xFF2
  7171                           intcon2	equ	0xFF1
  7172                           postinc0	equ	0xFEE
  7173                           wreg	equ	0xFE8
  7174                           indf2	equ	0xFDF
  7175                           postinc2	equ	0xFDE
  7176                           postdec2	equ	0xFDD
  7177                           plusw2	equ	0xFDB
  7178                           fsr2h	equ	0xFDA
  7179                           fsr2l	equ	0xFD9
  7180                           status	equ	0xFD8
  7181                           
  7182 ;; *************** function _DATAEE_ReadByte *****************
  7183 ;; Defined at:
  7184 ;;		line 143 in file "mcc_generated_files/memory.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;  bAdd            1    wreg     unsigned char 
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;  bAdd            1   26[COMRAM] unsigned char 
  7189 ;; Return value:  Size  Location     Type
  7190 ;;                  1    wreg      unsigned char 
  7191 ;; Registers used:
  7192 ;;		wreg, status,2
  7193 ;; Tracked objects:
  7194 ;;		On entry : 0/0
  7195 ;;		On exit  : 0/0
  7196 ;;		Unchanged: 0/0
  7197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7198 ;;      Params:         0       0       0       0       0       0       0
  7199 ;;      Locals:         1       0       0       0       0       0       0
  7200 ;;      Temps:          0       0       0       0       0       0       0
  7201 ;;      Totals:         1       0       0       0       0       0       0
  7202 ;;Total ram usage:        1 bytes
  7203 ;; Hardware stack levels used:    1
  7204 ;; Hardware stack levels required when called:    4
  7205 ;; This function calls:
  7206 ;;		Nothing
  7207 ;; This function is called by:
  7208 ;;		_ComputeStorageData
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           	psect	text42
  7213  001B52                     __ptext42:
  7214                           	opt stack 0
  7215  001B52                     _DATAEE_ReadByte:
  7216                           	opt stack 24
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;incstack = 0
  7220                           ;DATAEE_ReadByte@bAdd stored from wreg
  7221  001B52  6E1B               	movwf	DATAEE_ReadByte@bAdd,c
  7222                           
  7223                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7224  001B54  C01B  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7225                           
  7226                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7227  001B58  9CA6               	bcf	4006,6,c	;volatile
  7228                           
  7229                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7230  001B5A  9EA6               	bcf	4006,7,c	;volatile
  7231                           
  7232                           ;memory.c: 148: EECON1bits.RD = 1;
  7233  001B5C  80A6               	bsf	4006,0,c	;volatile
  7234                           
  7235                           ;memory.c: 149: __nop();
  7236  001B5E  F000               	nop	
  7237                           
  7238                           ;memory.c: 150: __nop();
  7239  001B60  F000               	nop	
  7240                           
  7241                           ;memory.c: 152: return (EEDATA);
  7242  001B62  50A8               	movf	4008,w,c	;volatile
  7243  001B64  0012               	return	
  7244  001B66  0012               	return		;funcret
  7245  001B68                     __end_of_DATAEE_ReadByte:
  7246                           	opt stack 0
  7247                           tosu	equ	0xFFF
  7248                           tosh	equ	0xFFE
  7249                           tosl	equ	0xFFD
  7250                           pclath	equ	0xFFA
  7251                           tblptru	equ	0xFF8
  7252                           tblptrh	equ	0xFF7
  7253                           tblptrl	equ	0xFF6
  7254                           tablat	equ	0xFF5
  7255                           prodh	equ	0xFF4
  7256                           prodl	equ	0xFF3
  7257                           intcon	equ	0xFF2
  7258                           intcon2	equ	0xFF1
  7259                           postinc0	equ	0xFEE
  7260                           wreg	equ	0xFE8
  7261                           indf2	equ	0xFDF
  7262                           postinc2	equ	0xFDE
  7263                           postdec2	equ	0xFDD
  7264                           plusw2	equ	0xFDB
  7265                           fsr2h	equ	0xFDA
  7266                           fsr2l	equ	0xFD9
  7267                           status	equ	0xFD8
  7268                           
  7269 ;; *************** function _INTERRUPT_InterruptManager *****************
  7270 ;; Defined at:
  7271 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;		None
  7274 ;; Auto vars:     Size  Location     Type
  7275 ;;		None
  7276 ;; Return value:  Size  Location     Type
  7277 ;;		None               void
  7278 ;; Registers used:
  7279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7280 ;; Tracked objects:
  7281 ;;		On entry : 0/0
  7282 ;;		On exit  : 0/0
  7283 ;;		Unchanged: 0/0
  7284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7285 ;;      Params:         0       0       0       0       0       0       0
  7286 ;;      Locals:         0       0       0       0       0       0       0
  7287 ;;      Temps:         14       0       0       0       0       0       0
  7288 ;;      Totals:        14       0       0       0       0       0       0
  7289 ;;Total ram usage:       14 bytes
  7290 ;; Hardware stack levels used:    1
  7291 ;; Hardware stack levels required when called:    3
  7292 ;; This function calls:
  7293 ;;		_ADC_ISR
  7294 ;;		_EUSART1_Receive_ISR
  7295 ;;		_EUSART1_Transmit_ISR
  7296 ;; This function is called by:
  7297 ;;		Interrupt level 2
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           	psect	intcode
  7302  000008                     __pintcode:
  7303                           	opt stack 0
  7304  000008                     _INTERRUPT_InterruptManager:
  7305                           	opt stack 21
  7306                           
  7307                           ;incstack = 0
  7308  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  7309  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7310  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7311  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7312  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7313  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7314  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7315  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7316  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7317  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7318  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7319  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7320  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7321  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7322                           
  7323                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7324  000040  BA9D               	btfsc	3997,5,c	;volatile
  7325  000042  AA9E               	btfss	3998,5,c	;volatile
  7326  000044  D003               	goto	i2l106
  7327                           
  7328                           ;interrupt_manager.c: 71: {
  7329                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  7330  000046  EC4F  F00D         	call	_EUSART1_Receive_ISR	;wreg free
  7331                           
  7332                           ;interrupt_manager.c: 73: }
  7333  00004A  D00C               	goto	i2l112
  7334  00004C                     i2l106:
  7335                           
  7336                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7337  00004C  B89D               	btfsc	3997,4,c	;volatile
  7338  00004E  A89E               	btfss	3998,4,c	;volatile
  7339  000050  D003               	goto	i2l108
  7340                           
  7341                           ;interrupt_manager.c: 75: {
  7342                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  7343  000052  EC90  F00C         	call	_EUSART1_Transmit_ISR	;wreg free
  7344                           
  7345                           ;interrupt_manager.c: 77: }
  7346  000056  D006               	goto	i2l112
  7347  000058                     i2l108:
  7348                           
  7349                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7350  000058  BC9D               	btfsc	3997,6,c	;volatile
  7351  00005A  AC9E               	btfss	3998,6,c	;volatile
  7352  00005C  D003               	goto	i2l112
  7353                           
  7354                           ;interrupt_manager.c: 79: {
  7355                           ;interrupt_manager.c: 80: ADC_ISR();
  7356  00005E  ECD3  F00D         	call	_ADC_ISR	;wreg free
  7357                           
  7358                           ;interrupt_manager.c: 82: else
  7359                           ;interrupt_manager.c: 83: {
  7360                           
  7361                           ;interrupt_manager.c: 81: }
  7362  000062  D000               	goto	i2l112
  7363  000064                     i2l112:
  7364  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7365  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7366  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7367  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7368  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7369  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7370  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7371  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7372  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7373  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7374  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7375  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7376  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7377  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7378  00009C  0011               	retfie		f
  7379  00009E                     __end_of_INTERRUPT_InterruptManager:
  7380                           	opt stack 0
  7381                           tosu	equ	0xFFF
  7382                           tosh	equ	0xFFE
  7383                           tosl	equ	0xFFD
  7384                           pclatu	equ	0xFFB
  7385                           pclath	equ	0xFFA
  7386                           tblptru	equ	0xFF8
  7387                           tblptrh	equ	0xFF7
  7388                           tblptrl	equ	0xFF6
  7389                           tablat	equ	0xFF5
  7390                           prodh	equ	0xFF4
  7391                           prodl	equ	0xFF3
  7392                           intcon	equ	0xFF2
  7393                           intcon2	equ	0xFF1
  7394                           postinc0	equ	0xFEE
  7395                           fsr0h	equ	0xFEA
  7396                           fsr0l	equ	0xFE9
  7397                           wreg	equ	0xFE8
  7398                           fsr1h	equ	0xFE2
  7399                           fsr1l	equ	0xFE1
  7400                           indf2	equ	0xFDF
  7401                           postinc2	equ	0xFDE
  7402                           postdec2	equ	0xFDD
  7403                           plusw2	equ	0xFDB
  7404                           fsr2h	equ	0xFDA
  7405                           fsr2l	equ	0xFD9
  7406                           status	equ	0xFD8
  7407                           
  7408 ;; *************** function _EUSART1_Transmit_ISR *****************
  7409 ;; Defined at:
  7410 ;;		line 150 in file "UART.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;		None
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;		None
  7415 ;; Return value:  Size  Location     Type
  7416 ;;		None               void
  7417 ;; Registers used:
  7418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7424 ;;      Params:         0       0       0       0       0       0       0
  7425 ;;      Locals:         0       0       0       0       0       0       0
  7426 ;;      Temps:          0       0       0       0       0       0       0
  7427 ;;      Totals:         0       0       0       0       0       0       0
  7428 ;;Total ram usage:        0 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    2
  7431 ;; This function calls:
  7432 ;;		i2_UART_buff_get
  7433 ;;		i2_UART_buff_size
  7434 ;; This function is called by:
  7435 ;;		_INTERRUPT_InterruptManager
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           	psect	text44
  7440  001920                     __ptext44:
  7441                           	opt stack 0
  7442  001920                     _EUSART1_Transmit_ISR:
  7443                           	opt stack 21
  7444                           
  7445                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  7446                           
  7447                           ;incstack = 0
  7448  001920  0E00               	movlw	low _output_buffer
  7449  001922  6E01               	movwf	i2UART_buff_size@_this,c
  7450  001924  0E04               	movlw	high _output_buffer
  7451  001926  6E02               	movwf	i2UART_buff_size@_this+1,c
  7452  001928  EC9D  F00D         	call	i2_UART_buff_size	;wreg free
  7453  00192C  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  7454  00192E  D00D               	goto	i2l3034
  7455  001930  5002               	movf	?i2_UART_buff_size+1,w,c
  7456  001932  E103               	bnz	i2u246_40
  7457  001934  0401               	decf	?i2_UART_buff_size,w,c
  7458  001936  A0D8               	btfss	status,0,c
  7459  001938  D008               	goto	i2l3034
  7460  00193A                     i2u246_40:
  7461                           
  7462                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  7463  00193A  0E00               	movlw	low _output_buffer
  7464  00193C  6E07               	movwf	i2UART_buff_get@_this,c
  7465  00193E  0E04               	movlw	high _output_buffer
  7466  001940  6E08               	movwf	i2UART_buff_get@_this+1,c
  7467  001942  EC1D  F00A         	call	i2_UART_buff_get	;wreg free
  7468  001946  6EAD               	movwf	4013,c	;volatile
  7469                           
  7470                           ;UART.c: 154: } else {
  7471  001948  0012               	return	
  7472  00194A                     i2l3034:
  7473                           
  7474                           ;UART.c: 155: Transmit_stall = 1;
  7475  00194A  0E01               	movlw	1
  7476  00194C  6E45               	movwf	_Transmit_stall,c
  7477                           
  7478                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  7479  00194E  989D               	bcf	3997,4,c	;volatile
  7480  001950  0012               	return	
  7481  001952  0012               	return		;funcret
  7482  001954                     __end_of_EUSART1_Transmit_ISR:
  7483                           	opt stack 0
  7484                           tosu	equ	0xFFF
  7485                           tosh	equ	0xFFE
  7486                           tosl	equ	0xFFD
  7487                           pclatu	equ	0xFFB
  7488                           pclath	equ	0xFFA
  7489                           tblptru	equ	0xFF8
  7490                           tblptrh	equ	0xFF7
  7491                           tblptrl	equ	0xFF6
  7492                           tablat	equ	0xFF5
  7493                           prodh	equ	0xFF4
  7494                           prodl	equ	0xFF3
  7495                           intcon	equ	0xFF2
  7496                           intcon2	equ	0xFF1
  7497                           postinc0	equ	0xFEE
  7498                           fsr0h	equ	0xFEA
  7499                           fsr0l	equ	0xFE9
  7500                           wreg	equ	0xFE8
  7501                           fsr1h	equ	0xFE2
  7502                           fsr1l	equ	0xFE1
  7503                           indf2	equ	0xFDF
  7504                           postinc2	equ	0xFDE
  7505                           postdec2	equ	0xFDD
  7506                           plusw2	equ	0xFDB
  7507                           fsr2h	equ	0xFDA
  7508                           fsr2l	equ	0xFD9
  7509                           status	equ	0xFD8
  7510                           
  7511 ;; *************** function i2_UART_buff_size *****************
  7512 ;; Defined at:
  7513 ;;		line 102 in file "UART.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7516 ;;		 -> output_buffer(206), input_buffer(206), 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;		None
  7519 ;; Return value:  Size  Location     Type
  7520 ;;                  2    0[COMRAM] int 
  7521 ;; Registers used:
  7522 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7523 ;; Tracked objects:
  7524 ;;		On entry : 0/0
  7525 ;;		On exit  : 0/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7528 ;;      Params:         2       0       0       0       0       0       0
  7529 ;;      Locals:         0       0       0       0       0       0       0
  7530 ;;      Temps:          0       0       0       0       0       0       0
  7531 ;;      Totals:         2       0       0       0       0       0       0
  7532 ;;Total ram usage:        2 bytes
  7533 ;; Hardware stack levels used:    1
  7534 ;; This function calls:
  7535 ;;		Nothing
  7536 ;; This function is called by:
  7537 ;;		_EUSART1_Transmit_ISR
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text45
  7542  001B3A                     __ptext45:
  7543                           	opt stack 0
  7544  001B3A                     i2_UART_buff_size:
  7545                           	opt stack 22
  7546                           
  7547                           ;UART.c: 103: return (_this->count);
  7548                           
  7549                           ;incstack = 0
  7550  001B3A  EE20 F0CC          	lfsr	2,204
  7551  001B3E  5001               	movf	i2UART_buff_size@_this,w,c
  7552  001B40  26D9               	addwf	fsr2l,f,c
  7553  001B42  5002               	movf	i2UART_buff_size@_this+1,w,c
  7554  001B44  22DA               	addwfc	fsr2h,f,c
  7555  001B46  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  7556  001B4A  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  7557  001B4E  0012               	return	
  7558  001B50  0012               	return		;funcret
  7559  001B52                     __end_ofi2_UART_buff_size:
  7560                           	opt stack 0
  7561                           tosu	equ	0xFFF
  7562                           tosh	equ	0xFFE
  7563                           tosl	equ	0xFFD
  7564                           pclatu	equ	0xFFB
  7565                           pclath	equ	0xFFA
  7566                           tblptru	equ	0xFF8
  7567                           tblptrh	equ	0xFF7
  7568                           tblptrl	equ	0xFF6
  7569                           tablat	equ	0xFF5
  7570                           prodh	equ	0xFF4
  7571                           prodl	equ	0xFF3
  7572                           intcon	equ	0xFF2
  7573                           intcon2	equ	0xFF1
  7574                           postinc0	equ	0xFEE
  7575                           fsr0h	equ	0xFEA
  7576                           fsr0l	equ	0xFE9
  7577                           wreg	equ	0xFE8
  7578                           fsr1h	equ	0xFE2
  7579                           fsr1l	equ	0xFE1
  7580                           indf2	equ	0xFDF
  7581                           postinc2	equ	0xFDE
  7582                           postdec2	equ	0xFDD
  7583                           plusw2	equ	0xFDB
  7584                           fsr2h	equ	0xFDA
  7585                           fsr2l	equ	0xFD9
  7586                           status	equ	0xFD8
  7587                           
  7588 ;; *************** function i2_UART_buff_get *****************
  7589 ;; Defined at:
  7590 ;;		line 81 in file "UART.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7593 ;;		 -> output_buffer(206), input_buffer(206), 
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  7596 ;; Return value:  Size  Location     Type
  7597 ;;                  1    wreg      unsigned char 
  7598 ;; Registers used:
  7599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7600 ;; Tracked objects:
  7601 ;;		On entry : 0/0
  7602 ;;		On exit  : 0/0
  7603 ;;		Unchanged: 0/0
  7604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7605 ;;      Params:         2       0       0       0       0       0       0
  7606 ;;      Locals:         1       0       0       0       0       0       0
  7607 ;;      Temps:          2       0       0       0       0       0       0
  7608 ;;      Totals:         5       0       0       0       0       0       0
  7609 ;;Total ram usage:        5 bytes
  7610 ;; Hardware stack levels used:    1
  7611 ;; Hardware stack levels required when called:    1
  7612 ;; This function calls:
  7613 ;;		i2_UART_buff_modulo_inc
  7614 ;; This function is called by:
  7615 ;;		_EUSART1_Transmit_ISR
  7616 ;; This function uses a non-reentrant model
  7617 ;;
  7618                           
  7619                           	psect	text46
  7620  00143A                     __ptext46:
  7621                           	opt stack 0
  7622  00143A                     i2_UART_buff_get:
  7623                           	opt stack 21
  7624                           
  7625                           ;UART.c: 82: unsigned char c;
  7626                           ;UART.c: 83: if (_this->count > 0) {
  7627                           
  7628                           ;incstack = 0
  7629  00143A  EE20 F0CC          	lfsr	2,204
  7630  00143E  5007               	movf	i2UART_buff_get@_this,w,c
  7631  001440  26D9               	addwf	fsr2l,f,c
  7632  001442  5008               	movf	i2UART_buff_get@_this+1,w,c
  7633  001444  22DA               	addwfc	fsr2h,f,c
  7634  001446  0E01               	movlw	1
  7635  001448  BEDB               	btfsc	plusw2,7,c
  7636  00144A  D03C               	goto	i2l3006
  7637  00144C  0E01               	movlw	1
  7638  00144E  50DB               	movf	plusw2,w,c
  7639  001450  E103               	bnz	i2u243_40
  7640  001452  04DE               	decf	postinc2,w,c
  7641  001454  A0D8               	btfss	status,0,c
  7642  001456  D036               	goto	i2l3006
  7643  001458                     i2u243_40:
  7644                           
  7645                           ;UART.c: 84: c = _this->buf[_this->tail];
  7646  001458  EE20 F0CA          	lfsr	2,202
  7647  00145C  5007               	movf	i2UART_buff_get@_this,w,c
  7648  00145E  26D9               	addwf	fsr2l,f,c
  7649  001460  5008               	movf	i2UART_buff_get@_this+1,w,c
  7650  001462  22DA               	addwfc	fsr2h,f,c
  7651  001464  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  7652  001468  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  7653  00146C  5009               	movf	??i2_UART_buff_get,w,c
  7654  00146E  2407               	addwf	i2UART_buff_get@_this,w,c
  7655  001470  6ED9               	movwf	fsr2l,c
  7656  001472  500A               	movf	??i2_UART_buff_get+1,w,c
  7657  001474  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  7658  001476  6EDA               	movwf	fsr2h,c
  7659  001478  50DF               	movf	indf2,w,c
  7660  00147A  6E0B               	movwf	i2UART_buff_get@c,c
  7661                           
  7662                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7663  00147C  EE20 F0CA          	lfsr	2,202
  7664  001480  5007               	movf	i2UART_buff_get@_this,w,c
  7665  001482  26D9               	addwf	fsr2l,f,c
  7666  001484  5008               	movf	i2UART_buff_get@_this+1,w,c
  7667  001486  22DA               	addwfc	fsr2h,f,c
  7668  001488  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7669  00148C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7670  001490  0E00               	movlw	0
  7671  001492  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7672  001494  0EC8               	movlw	200
  7673  001496  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7674  001498  EC07  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  7675  00149C  EE20 F0CA          	lfsr	2,202
  7676  0014A0  5007               	movf	i2UART_buff_get@_this,w,c
  7677  0014A2  26D9               	addwf	fsr2l,f,c
  7678  0014A4  5008               	movf	i2UART_buff_get@_this+1,w,c
  7679  0014A6  22DA               	addwfc	fsr2h,f,c
  7680  0014A8  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7681  0014AC  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7682                           
  7683                           ;UART.c: 86: --_this->count;
  7684  0014B0  EE20 F0CC          	lfsr	2,204
  7685  0014B4  5007               	movf	i2UART_buff_get@_this,w,c
  7686  0014B6  26D9               	addwf	fsr2l,f,c
  7687  0014B8  5008               	movf	i2UART_buff_get@_this+1,w,c
  7688  0014BA  22DA               	addwfc	fsr2h,f,c
  7689  0014BC  06DE               	decf	postinc2,f,c
  7690  0014BE  0E00               	movlw	0
  7691  0014C0  5ADD               	subwfb	postdec2,f,c
  7692                           
  7693                           ;UART.c: 87: } else {
  7694  0014C2  D002               	goto	i2l491
  7695  0014C4                     i2l3006:
  7696                           
  7697                           ;UART.c: 88: c = 0;
  7698  0014C4  0E00               	movlw	0
  7699  0014C6  6E0B               	movwf	i2UART_buff_get@c,c
  7700  0014C8                     i2l491:
  7701                           
  7702                           ;UART.c: 89: }
  7703                           ;UART.c: 90: return (c);
  7704  0014C8  500B               	movf	i2UART_buff_get@c,w,c
  7705  0014CA  0012               	return	
  7706  0014CC  0012               	return		;funcret
  7707  0014CE                     __end_ofi2_UART_buff_get:
  7708                           	opt stack 0
  7709                           tosu	equ	0xFFF
  7710                           tosh	equ	0xFFE
  7711                           tosl	equ	0xFFD
  7712                           pclatu	equ	0xFFB
  7713                           pclath	equ	0xFFA
  7714                           tblptru	equ	0xFF8
  7715                           tblptrh	equ	0xFF7
  7716                           tblptrl	equ	0xFF6
  7717                           tablat	equ	0xFF5
  7718                           prodh	equ	0xFF4
  7719                           prodl	equ	0xFF3
  7720                           intcon	equ	0xFF2
  7721                           intcon2	equ	0xFF1
  7722                           postinc0	equ	0xFEE
  7723                           fsr0h	equ	0xFEA
  7724                           fsr0l	equ	0xFE9
  7725                           wreg	equ	0xFE8
  7726                           fsr1h	equ	0xFE2
  7727                           fsr1l	equ	0xFE1
  7728                           indf2	equ	0xFDF
  7729                           postinc2	equ	0xFDE
  7730                           postdec2	equ	0xFDD
  7731                           plusw2	equ	0xFDB
  7732                           fsr2h	equ	0xFDA
  7733                           fsr2l	equ	0xFD9
  7734                           status	equ	0xFD8
  7735                           
  7736 ;; *************** function _EUSART1_Receive_ISR *****************
  7737 ;; Defined at:
  7738 ;;		line 139 in file "UART.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;		None
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  data            1   11[COMRAM] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;		None               void
  7745 ;; Registers used:
  7746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7752 ;;      Params:         0       0       0       0       0       0       0
  7753 ;;      Locals:         1       0       0       0       0       0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0
  7755 ;;      Totals:         1       0       0       0       0       0       0
  7756 ;;Total ram usage:        1 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    2
  7759 ;; This function calls:
  7760 ;;		i2_UART_buff_put
  7761 ;; This function is called by:
  7762 ;;		_INTERRUPT_InterruptManager
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           	psect	text47
  7767  001A9E                     __ptext47:
  7768                           	opt stack 0
  7769  001A9E                     _EUSART1_Receive_ISR:
  7770                           	opt stack 21
  7771                           
  7772                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  7773                           
  7774                           ;incstack = 0
  7775  001A9E  A2AB               	btfss	4011,1,c	;volatile
  7776  001AA0  D002               	goto	i2l522
  7777                           
  7778                           ;UART.c: 143: RC1STAbits.CREN = 0;
  7779  001AA2  98AB               	bcf	4011,4,c	;volatile
  7780                           
  7781                           ;UART.c: 144: RC1STAbits.CREN = 1;
  7782  001AA4  88AB               	bsf	4011,4,c	;volatile
  7783  001AA6                     i2l522:
  7784                           
  7785                           ;UART.c: 145: }
  7786                           ;UART.c: 146: unsigned char data = RCREG1;
  7787  001AA6  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  7788                           
  7789                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  7790  001AAA  0E00               	movlw	low _input_buffer
  7791  001AAC  6E07               	movwf	i2UART_buff_put@_this,c
  7792  001AAE  0E03               	movlw	high _input_buffer
  7793  001AB0  6E08               	movwf	i2UART_buff_put@_this+1,c
  7794  001AB2  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  7795  001AB6  EC59  F006         	call	i2_UART_buff_put	;wreg free
  7796  001ABA  0012               	return		;funcret
  7797  001ABC                     __end_of_EUSART1_Receive_ISR:
  7798                           	opt stack 0
  7799                           tosu	equ	0xFFF
  7800                           tosh	equ	0xFFE
  7801                           tosl	equ	0xFFD
  7802                           pclatu	equ	0xFFB
  7803                           pclath	equ	0xFFA
  7804                           tblptru	equ	0xFF8
  7805                           tblptrh	equ	0xFF7
  7806                           tblptrl	equ	0xFF6
  7807                           tablat	equ	0xFF5
  7808                           prodh	equ	0xFF4
  7809                           prodl	equ	0xFF3
  7810                           intcon	equ	0xFF2
  7811                           intcon2	equ	0xFF1
  7812                           postinc0	equ	0xFEE
  7813                           fsr0h	equ	0xFEA
  7814                           fsr0l	equ	0xFE9
  7815                           wreg	equ	0xFE8
  7816                           fsr1h	equ	0xFE2
  7817                           fsr1l	equ	0xFE1
  7818                           indf2	equ	0xFDF
  7819                           postinc2	equ	0xFDE
  7820                           postdec2	equ	0xFDD
  7821                           plusw2	equ	0xFDB
  7822                           fsr2h	equ	0xFDA
  7823                           fsr2l	equ	0xFD9
  7824                           status	equ	0xFD8
  7825                           
  7826 ;; *************** function i2_UART_buff_put *****************
  7827 ;; Defined at:
  7828 ;;		line 68 in file "UART.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7831 ;;		 -> output_buffer(206), input_buffer(206), 
  7832 ;;  c               1    8[COMRAM] const unsigned char 
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;		None               void
  7837 ;; Registers used:
  7838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7844 ;;      Params:         3       0       0       0       0       0       0
  7845 ;;      Locals:         0       0       0       0       0       0       0
  7846 ;;      Temps:          2       0       0       0       0       0       0
  7847 ;;      Totals:         5       0       0       0       0       0       0
  7848 ;;Total ram usage:        5 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    1
  7851 ;; This function calls:
  7852 ;;		i2_UART_buff_modulo_inc
  7853 ;; This function is called by:
  7854 ;;		_EUSART1_Receive_ISR
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           	psect	text48
  7859  000CB2                     __ptext48:
  7860                           	opt stack 0
  7861  000CB2                     i2_UART_buff_put:
  7862                           	opt stack 21
  7863                           
  7864                           ;UART.c: 69: if (_this->count < 200) {
  7865                           
  7866                           ;incstack = 0
  7867  000CB2  EE20 F0CC          	lfsr	2,204
  7868  000CB6  5007               	movf	i2UART_buff_put@_this,w,c
  7869  000CB8  26D9               	addwf	fsr2l,f,c
  7870  000CBA  5008               	movf	i2UART_buff_put@_this+1,w,c
  7871  000CBC  22DA               	addwfc	fsr2h,f,c
  7872  000CBE  0E01               	movlw	1
  7873  000CC0  BEDB               	btfsc	plusw2,7,c
  7874  000CC2  D007               	goto	i2l2986
  7875  000CC4  0E01               	movlw	1
  7876  000CC6  50DB               	movf	plusw2,w,c
  7877  000CC8  E13A               	bnz	i2l2992
  7878  000CCA  0EC8               	movlw	200
  7879  000CCC  5CDE               	subwf	postinc2,w,c
  7880  000CCE  B0D8               	btfsc	status,0,c
  7881  000CD0  D036               	goto	i2l2992
  7882  000CD2                     i2l2986:
  7883                           
  7884                           ;UART.c: 70: _this->buf[_this->head] = c;
  7885  000CD2  EE20 F0C8          	lfsr	2,200
  7886  000CD6  5007               	movf	i2UART_buff_put@_this,w,c
  7887  000CD8  26D9               	addwf	fsr2l,f,c
  7888  000CDA  5008               	movf	i2UART_buff_put@_this+1,w,c
  7889  000CDC  22DA               	addwfc	fsr2h,f,c
  7890  000CDE  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  7891  000CE2  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  7892  000CE6  500A               	movf	??i2_UART_buff_put,w,c
  7893  000CE8  2407               	addwf	i2UART_buff_put@_this,w,c
  7894  000CEA  6ED9               	movwf	fsr2l,c
  7895  000CEC  500B               	movf	??i2_UART_buff_put+1,w,c
  7896  000CEE  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  7897  000CF0  6EDA               	movwf	fsr2h,c
  7898  000CF2  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  7899                           
  7900                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7901  000CF6  EE20 F0C8          	lfsr	2,200
  7902  000CFA  5007               	movf	i2UART_buff_put@_this,w,c
  7903  000CFC  26D9               	addwf	fsr2l,f,c
  7904  000CFE  5008               	movf	i2UART_buff_put@_this+1,w,c
  7905  000D00  22DA               	addwfc	fsr2h,f,c
  7906  000D02  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7907  000D06  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7908  000D0A  0E00               	movlw	0
  7909  000D0C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7910  000D0E  0EC8               	movlw	200
  7911  000D10  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7912  000D12  EC07  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  7913  000D16  EE20 F0C8          	lfsr	2,200
  7914  000D1A  5007               	movf	i2UART_buff_put@_this,w,c
  7915  000D1C  26D9               	addwf	fsr2l,f,c
  7916  000D1E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7917  000D20  22DA               	addwfc	fsr2h,f,c
  7918  000D22  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7919  000D26  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7920                           
  7921                           ;UART.c: 72: ++_this->count;
  7922  000D2A  EE20 F0CC          	lfsr	2,204
  7923  000D2E  5007               	movf	i2UART_buff_put@_this,w,c
  7924  000D30  26D9               	addwf	fsr2l,f,c
  7925  000D32  5008               	movf	i2UART_buff_put@_this+1,w,c
  7926  000D34  22DA               	addwfc	fsr2h,f,c
  7927  000D36  2ADE               	incf	postinc2,f,c
  7928  000D38  0E00               	movlw	0
  7929  000D3A  22DD               	addwfc	postdec2,f,c
  7930                           
  7931                           ;UART.c: 73: } else {
  7932  000D3C  0012               	return	
  7933  000D3E                     i2l2992:
  7934                           
  7935                           ;UART.c: 74: _this->buf[_this->head] = c;
  7936  000D3E  EE20 F0C8          	lfsr	2,200
  7937  000D42  5007               	movf	i2UART_buff_put@_this,w,c
  7938  000D44  26D9               	addwf	fsr2l,f,c
  7939  000D46  5008               	movf	i2UART_buff_put@_this+1,w,c
  7940  000D48  22DA               	addwfc	fsr2h,f,c
  7941  000D4A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  7942  000D4E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  7943  000D52  500A               	movf	??i2_UART_buff_put,w,c
  7944  000D54  2407               	addwf	i2UART_buff_put@_this,w,c
  7945  000D56  6ED9               	movwf	fsr2l,c
  7946  000D58  500B               	movf	??i2_UART_buff_put+1,w,c
  7947  000D5A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  7948  000D5C  6EDA               	movwf	fsr2h,c
  7949  000D5E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  7950                           
  7951                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7952  000D62  EE20 F0C8          	lfsr	2,200
  7953  000D66  5007               	movf	i2UART_buff_put@_this,w,c
  7954  000D68  26D9               	addwf	fsr2l,f,c
  7955  000D6A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7956  000D6C  22DA               	addwfc	fsr2h,f,c
  7957  000D6E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7958  000D72  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7959  000D76  0E00               	movlw	0
  7960  000D78  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7961  000D7A  0EC8               	movlw	200
  7962  000D7C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7963  000D7E  EC07  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  7964  000D82  EE20 F0C8          	lfsr	2,200
  7965  000D86  5007               	movf	i2UART_buff_put@_this,w,c
  7966  000D88  26D9               	addwf	fsr2l,f,c
  7967  000D8A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7968  000D8C  22DA               	addwfc	fsr2h,f,c
  7969  000D8E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7970  000D92  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7971                           
  7972                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7973  000D96  EE20 F0CA          	lfsr	2,202
  7974  000D9A  5007               	movf	i2UART_buff_put@_this,w,c
  7975  000D9C  26D9               	addwf	fsr2l,f,c
  7976  000D9E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7977  000DA0  22DA               	addwfc	fsr2h,f,c
  7978  000DA2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7979  000DA6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7980  000DAA  0E00               	movlw	0
  7981  000DAC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7982  000DAE  0EC8               	movlw	200
  7983  000DB0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7984  000DB2  EC07  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  7985  000DB6  EE20 F0CA          	lfsr	2,202
  7986  000DBA  5007               	movf	i2UART_buff_put@_this,w,c
  7987  000DBC  26D9               	addwf	fsr2l,f,c
  7988  000DBE  5008               	movf	i2UART_buff_put@_this+1,w,c
  7989  000DC0  22DA               	addwfc	fsr2h,f,c
  7990  000DC2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7991  000DC6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7992  000DCA  0012               	return	
  7993  000DCC  0012               	return		;funcret
  7994  000DCE                     __end_ofi2_UART_buff_put:
  7995                           	opt stack 0
  7996                           tosu	equ	0xFFF
  7997                           tosh	equ	0xFFE
  7998                           tosl	equ	0xFFD
  7999                           pclatu	equ	0xFFB
  8000                           pclath	equ	0xFFA
  8001                           tblptru	equ	0xFF8
  8002                           tblptrh	equ	0xFF7
  8003                           tblptrl	equ	0xFF6
  8004                           tablat	equ	0xFF5
  8005                           prodh	equ	0xFF4
  8006                           prodl	equ	0xFF3
  8007                           intcon	equ	0xFF2
  8008                           intcon2	equ	0xFF1
  8009                           postinc0	equ	0xFEE
  8010                           fsr0h	equ	0xFEA
  8011                           fsr0l	equ	0xFE9
  8012                           wreg	equ	0xFE8
  8013                           fsr1h	equ	0xFE2
  8014                           fsr1l	equ	0xFE1
  8015                           indf2	equ	0xFDF
  8016                           postinc2	equ	0xFDE
  8017                           postdec2	equ	0xFDD
  8018                           plusw2	equ	0xFDB
  8019                           fsr2h	equ	0xFDA
  8020                           fsr2l	equ	0xFD9
  8021                           status	equ	0xFD8
  8022                           
  8023 ;; *************** function i2_UART_buff_modulo_inc *****************
  8024 ;; Defined at:
  8025 ;;		line 106 in file "UART.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  value           2    0[COMRAM] const unsigned int 
  8028 ;;  modulus         2    2[COMRAM] const unsigned int 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  2    0[COMRAM] unsigned int 
  8033 ;; Registers used:
  8034 ;;		wreg, status,2, status,0
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8040 ;;      Params:         4       0       0       0       0       0       0
  8041 ;;      Locals:         2       0       0       0       0       0       0
  8042 ;;      Temps:          0       0       0       0       0       0       0
  8043 ;;      Totals:         6       0       0       0       0       0       0
  8044 ;;Total ram usage:        6 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; This function calls:
  8047 ;;		Nothing
  8048 ;; This function is called by:
  8049 ;;		i2_UART_buff_put
  8050 ;;		i2_UART_buff_get
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           	psect	text49
  8055  001A0E                     __ptext49:
  8056                           	opt stack 0
  8057  001A0E                     i2_UART_buff_modulo_inc:
  8058                           	opt stack 21
  8059                           
  8060                           ;UART.c: 107: unsigned int my_value = value + 1;
  8061                           
  8062                           ;incstack = 0
  8063  001A0E  0E01               	movlw	1
  8064  001A10  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  8065  001A12  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8066  001A14  0E00               	movlw	0
  8067  001A16  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  8068  001A18  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8069                           
  8070                           ;UART.c: 108: if (my_value >= modulus) {
  8071  001A1A  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  8072  001A1C  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  8073  001A1E  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  8074  001A20  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  8075  001A22  A0D8               	btfss	status,0,c
  8076  001A24  D005               	goto	i2l2704
  8077                           
  8078                           ;UART.c: 109: my_value = 0;
  8079  001A26  0E00               	movlw	0
  8080  001A28  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8081  001A2A  0E00               	movlw	0
  8082  001A2C  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8083  001A2E  D000               	goto	i2l2704
  8084  001A30                     i2l2704:
  8085                           
  8086                           ;UART.c: 110: }
  8087                           ;UART.c: 111: return (my_value);
  8088  001A30  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  8089  001A34  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  8090  001A38  0012               	return	
  8091  001A3A  0012               	return		;funcret
  8092  001A3C                     __end_ofi2_UART_buff_modulo_inc:
  8093                           	opt stack 0
  8094                           tosu	equ	0xFFF
  8095                           tosh	equ	0xFFE
  8096                           tosl	equ	0xFFD
  8097                           pclatu	equ	0xFFB
  8098                           pclath	equ	0xFFA
  8099                           tblptru	equ	0xFF8
  8100                           tblptrh	equ	0xFF7
  8101                           tblptrl	equ	0xFF6
  8102                           tablat	equ	0xFF5
  8103                           prodh	equ	0xFF4
  8104                           prodl	equ	0xFF3
  8105                           intcon	equ	0xFF2
  8106                           intcon2	equ	0xFF1
  8107                           postinc0	equ	0xFEE
  8108                           fsr0h	equ	0xFEA
  8109                           fsr0l	equ	0xFE9
  8110                           wreg	equ	0xFE8
  8111                           fsr1h	equ	0xFE2
  8112                           fsr1l	equ	0xFE1
  8113                           indf2	equ	0xFDF
  8114                           postinc2	equ	0xFDE
  8115                           postdec2	equ	0xFDD
  8116                           plusw2	equ	0xFDB
  8117                           fsr2h	equ	0xFDA
  8118                           fsr2l	equ	0xFD9
  8119                           status	equ	0xFD8
  8120                           
  8121 ;; *************** function _ADC_ISR *****************
  8122 ;; Defined at:
  8123 ;;		line 128 in file "mcc_generated_files/adc.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;		None
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;		None
  8128 ;; Return value:  Size  Location     Type
  8129 ;;		None               void
  8130 ;; Registers used:
  8131 ;;		None
  8132 ;; Tracked objects:
  8133 ;;		On entry : 0/0
  8134 ;;		On exit  : 0/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8137 ;;      Params:         0       0       0       0       0       0       0
  8138 ;;      Locals:         0       0       0       0       0       0       0
  8139 ;;      Temps:          0       0       0       0       0       0       0
  8140 ;;      Totals:         0       0       0       0       0       0       0
  8141 ;;Total ram usage:        0 bytes
  8142 ;; Hardware stack levels used:    1
  8143 ;; This function calls:
  8144 ;;		Nothing
  8145 ;; This function is called by:
  8146 ;;		_INTERRUPT_InterruptManager
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           	psect	text50
  8151  001BA6                     __ptext50:
  8152                           	opt stack 0
  8153  001BA6                     _ADC_ISR:
  8154                           	opt stack 23
  8155                           
  8156                           ;adc.c: 131: PIR1bits.ADIF = 0;
  8157                           
  8158                           ;incstack = 0
  8159  001BA6  9C9E               	bcf	3998,6,c	;volatile
  8160  001BA8  0012               	return		;funcret
  8161  001BAA                     __end_of_ADC_ISR:
  8162                           	opt stack 0
  8163  0000                     tosu	equ	0xFFF
  8164                           tosh	equ	0xFFE
  8165                           tosl	equ	0xFFD
  8166                           pclatu	equ	0xFFB
  8167                           pclath	equ	0xFFA
  8168                           tblptru	equ	0xFF8
  8169                           tblptrh	equ	0xFF7
  8170                           tblptrl	equ	0xFF6
  8171                           tablat	equ	0xFF5
  8172                           prodh	equ	0xFF4
  8173                           prodl	equ	0xFF3
  8174                           intcon	equ	0xFF2
  8175                           intcon2	equ	0xFF1
  8176                           postinc0	equ	0xFEE
  8177                           fsr0h	equ	0xFEA
  8178                           fsr0l	equ	0xFE9
  8179                           wreg	equ	0xFE8
  8180                           fsr1h	equ	0xFE2
  8181                           fsr1l	equ	0xFE1
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           postdec2	equ	0xFDD
  8185                           plusw2	equ	0xFDB
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           tosu	equ	0xFFF
  8190                           tosh	equ	0xFFE
  8191                           tosl	equ	0xFFD
  8192                           pclatu	equ	0xFFB
  8193                           pclath	equ	0xFFA
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           intcon	equ	0xFF2
  8201                           intcon2	equ	0xFF1
  8202                           postinc0	equ	0xFEE
  8203                           fsr0h	equ	0xFEA
  8204                           fsr0l	equ	0xFE9
  8205                           wreg	equ	0xFE8
  8206                           fsr1h	equ	0xFE2
  8207                           fsr1l	equ	0xFE1
  8208                           indf2	equ	0xFDF
  8209                           postinc2	equ	0xFDE
  8210                           postdec2	equ	0xFDD
  8211                           plusw2	equ	0xFDB
  8212                           fsr2h	equ	0xFDA
  8213                           fsr2l	equ	0xFD9
  8214                           status	equ	0xFD8
  8215                           
  8216                           	psect	text51
  8217  000000                     __ptext51:
  8218                           	opt stack 0
  8219                           tosu	equ	0xFFF
  8220                           tosh	equ	0xFFE
  8221                           tosl	equ	0xFFD
  8222                           pclatu	equ	0xFFB
  8223                           pclath	equ	0xFFA
  8224                           tblptru	equ	0xFF8
  8225                           tblptrh	equ	0xFF7
  8226                           tblptrl	equ	0xFF6
  8227                           tablat	equ	0xFF5
  8228                           prodh	equ	0xFF4
  8229                           prodl	equ	0xFF3
  8230                           intcon	equ	0xFF2
  8231                           intcon2	equ	0xFF1
  8232                           postinc0	equ	0xFEE
  8233                           fsr0h	equ	0xFEA
  8234                           fsr0l	equ	0xFE9
  8235                           wreg	equ	0xFE8
  8236                           fsr1h	equ	0xFE2
  8237                           fsr1l	equ	0xFE1
  8238                           indf2	equ	0xFDF
  8239                           postinc2	equ	0xFDE
  8240                           postdec2	equ	0xFDD
  8241                           plusw2	equ	0xFDB
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246                           	psect	rparam
  8247  0000                     tosu	equ	0xFFF
  8248                           tosh	equ	0xFFE
  8249                           tosl	equ	0xFFD
  8250                           pclatu	equ	0xFFB
  8251                           pclath	equ	0xFFA
  8252                           tblptru	equ	0xFF8
  8253                           tblptrh	equ	0xFF7
  8254                           tblptrl	equ	0xFF6
  8255                           tablat	equ	0xFF5
  8256                           prodh	equ	0xFF4
  8257                           prodl	equ	0xFF3
  8258                           intcon	equ	0xFF2
  8259                           intcon2	equ	0xFF1
  8260                           postinc0	equ	0xFEE
  8261                           fsr0h	equ	0xFEA
  8262                           fsr0l	equ	0xFE9
  8263                           wreg	equ	0xFE8
  8264                           fsr1h	equ	0xFE2
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           plusw2	equ	0xFDB
  8270                           fsr2h	equ	0xFDA
  8271                           fsr2l	equ	0xFD9
  8272                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         1005
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      69
    BANK0           160      2     159
    BANK1           256     25     231
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK1[3]), receiveData@holder_1525(BANK1[3]), receiveData@holder(BANK1[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 


Critical Paths under _main in COMRAM

    _respondECU->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _PDUStartup->_EnableSlavePower
    _StartUp595->_Clear595
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _ToSend->_FastTransfer_buffer_put
    _PDUStartup->_EnableSlavePower

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData
    _respondECU->_sendData
    _receiveData->_CRCcheck
    _SYSTEM_Initialize->_begin
    _Update->_writeRegisters
    _Clear595->_writeRegisters

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   30392
                         _PDUStartup
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   18787
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    8072
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              0 BANK0      1     1      0
                                              0 BANK1      4     4      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1530
                                             37 COMRAM     1     1      0
                                              0 BANK1      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              7 BANK1     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK1      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2307
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1292
                                              0 BANK1     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0    9298
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (2) _Update                                               0     0      0    1005
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    1942
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    1104
                                             35 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (3) _writeRegisters                                       4     4      0    1005
                                              0 BANK1      4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     838
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _EnableSlavePower                                     3     1      2    6239
                                             36 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                          _SetPin595
 ---------------------------------------------------------------------------------
 (3) _SetPin595                                           10     4      6    5637
                                             26 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     112
                                             27 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _begin
       ___awdiv
   _updateComms
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100     19      E7       6       90.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      2      9F       4       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     42F       9        0.0%
DATA                 0      0     42F      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Jun 02 18:42:23 2015

      __end_of_FastTransfer_buffer_flush 16D0                   i2_UART_buff_modulo_inc 1A0E  
                           _rx_array_inx 0041                             ___awdiv@sign 0020  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l350 10BA                                      l352 10BE  
                                    l604 17AE                                      l365 114E  
                                    l367 1152                                      l369 1156  
                                    l491 1434                                      l718 0A4E  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0039                          __end_of_ADC_ISR 1BAA  
   FastTransfer_buffer_flush@clearBuffer 0025                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l3200 19FC                                     l3210 0C22  
                                   l3300 17B6                                     l3204 0BB6  
                                   l3302 17C0                                     l3240 10B0  
                                   l3232 1082                                     l3224 1430  
                                   l2408 19A6                                     l3400 0A82  
                                   l3250 1104                                     l3234 108E  
                                   l3322 0796                                     l3410 0AFA  
                                   l3402 0A9C                                     l3500 0EF8  
                                   l3252 1114                                     l3244 10C2  
                                   l3236 1092                                     l3340 0DDA  
                                   l3412 0B24                                     l3404 0AB8  
                                   l3502 0F16                                     l3510 0F70  
                                   l3254 112A                                     l3182 19D4  
                                   l3414 0B2C                                     l3406 0AD2  
                                   l3504 0F34                                     l3192 184A  
                                   l3256 112E                                     l3344 0DE6  
                                   l3424 08E6                                     l3520 00D4  
                                   l3408 0AEE                                     l3506 0F52  
                                   l3434 09AC                                     l3426 0912  
                                   l3418 0B68                                     l2804 0FD4  
                                   l3188 182E                                     l3380 18F8  
                                   l3196 19EA                                     l3292 1798  
                                   l3356 0E6A                                     l3372 12C8  
                                   l3364 1242                                     l3452 0A3E  
                                   l3620 052C                                     l3612 04C4  
                                   l3540 01AA                                     l3524 0100  
                                   l2670 1338                                     l3286 1782  
                                   l3438 09C6                                     l3622 0546  
                                   l3614 04DE                                     l3542 01C2  
                                   l3376 18F0                                     l2680 1360  
                                   l2664 1326                                     l3448 0A1C  
                                   l3456 0A48                                     l3624 0560  
                                   l3616 04F8                                     l3560 0240  
                                   l3544 01CA                                     l3528 0106  
                                   l3552 0206                                     l3386 191A  
                                   l3490 1530                                     l3482 14D2  
                                   l3626 05AE                                     l3618 0512  
                                   l3492 1534                                     l3484 14E8  
                                   l2676 134E                                     l2692 138A  
                                   l3660 06BC                                     l3652 0654  
                                   l3628 05CA                                     l3580 02D0  
                                   l3572 0270                                     l3486 1500  
                                   l2678 1358                                     l3662 06D6  
                                   l3654 066E                                     l3638 05D8  
                                   l3558 0216                                     l3750 1AE8  
                                   l3496 0EBC                                     l3488 1518  
                                   l2696 139A                                     l2688 137E  
                                   l3664 06F0                                     l3656 0688  
                                   l3576 02A4                                     l2794 0FA4  
                                   l3498 0EDA                                     l3666 073E  
                                   l3658 06A2                                     l3594 0406  
                                   l3668 075A                                     l3596 040E  
                                   l3588 036C                                     l3676 0768  
                                   l2798 0FB8                                     l3598 0424  
                   receiveData@crcHolder 01E1                                     _CRC8 177C  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u3008 0932  
                                   _LATD 000F8C                                     u3009 0946  
                                   _LATE 000F8D                                     u3018 094E  
                                   u3019 0962                                     u3028 096A  
                                   u3029 097E                                     u3118 00AC  
                                   u3119 00C0                                     u3208 0160  
                                   u3209 0174                                     u3218 017A  
                                   u3138 00DC                                     u3219 018E  
                                   u3139 00F0                                     u2700 13C4  
                                   u3318 0274                                     u3238 01AE  
                                   u3158 010A                                     u3351 0310  
                                   u3319 0288                                     u3159 011E  
                                   u3408 04AE                                     u3328 02A8  
                                   u3329 02BC                                     u3418 04C8  
                                   u3178 0128                                     u3179 013C  
                                   u2811 0794                                     u3508 063E  
                                   u3428 04E2                                     u3518 0658  
                                   u3438 04FC                                     u3278 021A  
                                   u3198 0146                                     u3279 022E  
                                   u3199 015A                                     u3528 0672  
                                   u3448 0516                                     u3538 068C  
                                   u3458 0530                                     u3298 0244  
                                   u3299 0258                                     u3548 06A6  
                                   u3468 054A                                     u2908 0A86  
                                   u3558 06C0                                     u3478 0564  
                                   u2790 121E                                     u2918 0AA0  
                                   u3568 06DA                                     u3488 05B2  
                                   u2928 0ABC                                     u3578 06F4  
                                   u2938 0AD6                                     u3588 0742  
                                   u2948 0AFE                                     u3677 1834  
                                   u2968 0B50                                     u2978 08EA  
                                   u2898 0A6C                                     u2979 08FE  
                                   u2998 0916                                     u2999 092A  
                                   _TMR1 000FCE                                     _WPUB 000F61  
                                   _data 00B4                                     _main 1AD8  
               __end_of_EnableSlavePower 0F9C                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 08E4                                     start 009E  
                          __CFG_IESO$OFF 000000                             ___param_bank 000010  
         i2UART_buff_modulo_inc@my_value 0005                                    ?_CRC8 001B  
                       __end_of_CRCcheck 0A50           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 1B96                       crcBufS_put@address 001D  
                                  ?_main 0001                          __end_of___awdiv 13A6  
                                  _EEADR 000FA9                          ___awdiv@divisor 001D  
                                  _T1CON 000FCD                                    _LATB0 007C50  
                                  _LATD4 007C64                                    _LATD5 007C65  
                                  _LATD6 007C66                                    _LATD7 007C67  
                         __CFG_DEBUG$OFF 000000                                    i2l112 0064  
                                  i2l106 004C                                    i2l108 0058  
                            ?_PDUStartup 0001                                    i2l522 1AA6  
                                  i2l491 14C8                          ___awdiv@counter 001F  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 181C  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1920                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       ??_writeRegisters 0024                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _begin 16D0                          _DATAEE_ReadByte 1B52  
                         __CFG_EBTRB$OFF 000000                                    _group 0043  
                     __CFG_MCLRE$EXTMCLR 000000                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0026  
                   __size_of_crcBufS_get 00E8                                    plusw2 000FDB  
                         begin@stuffpeek 01D9                     __size_of_crcBufS_put 00DA  
                                  status 000FD8                         __end_of_Clear595 1920  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 17CE  
                        CRCcheck@SentCRC 01CE                          __initialization 1608  
             __end_of_EUSART1_Initialize 18E8                             __end_of_main 1AF2  
                             _CurrentADC 009C                               ToSend@what 01CE  
                                 ??_CRC8 001E                                ??_ADC_ISR 0001  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 0027  
                          __activetblptr 000002                         __end_of_Send_put 1984  
              __size_ofi2_UART_buff_size 0018                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                          ?_Receive_peek 0001                                   ?_begin 01CE  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                                   _T1GCON 000FCC  
                        i2_UART_buff_get 143A                                   _RC1STA 000FAB  
                                 i2l3006 14C4                          i2_UART_buff_put 0CB2  
                                 i2l3034 194A                                   Delay@i 0020  
                         __CFG_WDTEN$OFF 000000                                   i2l2704 1A30  
            UART_buff_modulo_inc@modulus 001D                                   i2l2992 0D3E  
                                 i2l2986 0CD2                                   _TABLAT 000FF5  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                      __size_of_PDUStartup 0054  
                         __CFG_XINST$OFF 000000                                   _ToSend 1ABC  
                    __end_of_Receive_get 1B88                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                                   _Update 1BA0  
                     __size_of_SetPin595 004E                            _output_buffer 0400  
                       crcBufS_get@space 001E                                ??___awdiv 001F  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                                 _memset 19E0                                   clear_0 160E  
                                 clear_1 161A                                   clear_2 1626  
                                 clear_3 1632                                   clear_4 163E  
                                 clear_5 164A                         ___awdiv@quotient 0021  
                                 _rx_len 0042                         __end_of_sendData 0B96  
                __end_of_DATAEE_ReadByte 1B68                             __pdataCOMRAM 0045  
                          Send_put@_data 0026                           ??_Receive_peek 001F  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0176  
                             _StartUp595 14CE             __end_of_UART_buff_modulo_inc 19E0  
          __size_of_INTERRUPT_Initialize 000A                        _SYSTEM_Initialize 153A  
                             __accesstop 0060                  __end_of__initialization 1662  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                            __end_of_Delay 1868  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 1236  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 1728   __end_of_FastTransfer_buffer_modulo_inc 19B2  
__size_of_FastTransfer_buffer_modulo_inc 002E           _FastTransfer_buffer_modulo_inc 1984  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 0026  
            __size_of_ComputeStorageData 00E2                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                              _Currentcomp 00A8  
                  __end_of_UART_buff_get 143A                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 0CB2                                ?_Clear595 0001  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 14CE  
                __end_ofi2_UART_buff_put 0DCE              __end_of_EUSART1_Receive_ISR 1ABC  
              _FastTransfer_buffer_flush 166C                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                        __end_of_SetPin595 181C  
              __end_of_SYSTEM_Initialize 15A2                   receiveData@holder_1525 01DE  
                    _addressErrorCounter 00C0                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 1B78  
                             ??_CRCcheck 0027                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 1A3C                        begin@givenAddress 01D1  
                      ?_EnableSlavePower 0025                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0026                  __size_of_UART_buff_size 0018  
                              ?_Send_put 0001                       ??_EnableSlavePower 0027  
                   __size_of_receiveData 06CC                                  ?_ToSend 01CE  
                     __CFG_CCP2MX$PORTC1 000000                                  ?_Update 0001  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                _ADC_ISR 1BA6                                  ?_memset 001B  
                             _crc_buffer 00EC                  __size_of_ADC_Initialize 0018  
                       ?_DATAEE_ReadByte 0001                             ??_PDUStartup 0027  
                     UART_buff_put@_this 0021                               ??_Clear595 0024  
                       i2_UART_buff_size 1B3A              i2UART_buff_modulo_inc@value 0001  
                                _OSCCON2 000FD2                                  _TBLPTRH 000FF7  
                                _TBLPTRL 000FF6                                  _TBLPTRU 000FF8  
                            ?_StartUp595 0001                        _Receive_available 1AF2  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 01CE                      _receiveArrayAddress 002D  
                     ?_Receive_available 001D                               begin@error 01D2  
                    ??_Receive_available 001F                                ?_sendData 0001  
                                _Current 0090                        _alignErrorCounter 0027  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  __Lparam 0000  
                     __end_of_PDUStartup 177C                          __size_of_ToSend 001C  
                   __end_of_Receive_peek 1B78                                _AKNAKsend 003B  
                        __size_of_Update 0006                                  ___awdiv 1310  
                   _UART_buff_modulo_inc 19B2                                  _calc_CS 003C  
                                __pcinit 1608                          __size_of_memset 002E  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 1AD8                                  __ptext1 1A62  
                                __ptext2 1868                                  __ptext3 0A50  
                                __ptext4 115C                                  __ptext5 166C  
                                __ptext6 1ABC                                  __ptext7 076E  
                                __ptext8 1984                                  __ptext9 00A2  
                       i2UART_buff_put@c 0009                                _T1CONbits 000FCD  
                  _OSCILLATOR_Initialize 1B88                __end_of_Receive_available 1B0A  
                _FastTransfer_buffer_put 076E                    CRCcheck@calculatedCRC 01CF  
                     _EUSART1_Initialize 18AC                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                                Clear595@i 0024  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0068                     end_of_initialization 1662  
                              Delay@wait 001B                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                             ??_sendData 00FD                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 001E                                  postdec2 000FDD  
                    __size_of_StartUp595 006C                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 1868  
                       begin@stufftosend 01D3                      CRCcheck@arrayHolder 01D0  
                           SetPin595@Reg 001B                     ??_EUSART1_Initialize 0025  
                           SetPin595@pin 001D                   _dataAdressErrorCounter 00C2  
                             _rx_address 0040                                _TRISCbits 000F94  
                           begin@maxSize 01D0       __size_of_FastTransfer_buffer_flush 0064  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 1A80  
                         _UART_buff_peek 1A3C                           _UART_buff_size 1B0A  
                    __end_of_crcBufS_get 0EB6                  __size_of_writeRegisters 00DE  
                    __end_of_crcBufS_put 1236                        __size_of_CRCcheck 016C  
                          _moduleAddress 003E                               CRCcheck@rt 01D3  
                         __end_of_ToSend 1AD8             __end_of_INTERRUPT_Initialize 1BA0  
                         __end_of_Update 1BA6                          _crcErrorCounter 0029  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1BAA  
                         _ADC_Initialize 1B22                ??_FastTransfer_buffer_put 00FD  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_memset 1A0E  
                      crcBufS_put@status 001F                             receiveData@r 01E5  
             __size_of_Receive_available 0018                             receiveData@u 01E3  
                    start_initialization 1608          __size_of_PIN_MANAGER_Initialize 0066  
                  crcBufS_get@wantedTime 0025                    EnableSlavePower@slave 00FD  
                      __size_of_Clear595 0038                   __end_of_UART_buff_init 1A9E  
                 __end_of_UART_buff_peek 1A62                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 1B22                             ?_Receive_get 0001  
                              _SetPin595 17CE                           UART_buff_put@c 0023  
                  __size_of_Receive_peek 0010                      DATAEE_ReadByte@bAdd 001B  
               __end_ofi2_UART_buff_size 1B52                                 ??_ToSend 0026  
                 ??_UART_buff_modulo_inc 001F                                 CRC8@data 001B  
                               ??_Update 0024                          crcBufS_get@time 001D  
                      __size_of_Send_put 0030                              ?_respondECU 0001  
                 __end_of_ADC_Initialize 1B3A               __end_of_ComputeStorageData 107E  
                               ?_ADC_ISR 0001                                 ??_memset 0021  
              __size_of_EnableSlavePower 00E6                              __pbssCOMRAM 0027  
          __size_of_EUSART1_Transmit_ISR 0034                            __pcstackBANK0 00FD  
                          __pcstackBANK1 01CE                             ??_StartUp595 0026  
                           _Receive_peek 1B68                      UART_buff_init@_this 0023  
                            _crcBufS_get 0DCE                      UART_buff_peek@_this 001B  
                            _crcBufS_put 115C                          ?_UART_buff_init 0023  
                        ?_UART_buff_peek 001B                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 001E                               ?_SetPin595 001B  
                          ??_receiveData 01D5              __size_of_crcBufS_status_put 00DA  
                             sendData@CS 01CF                   __size_of_UART_buff_get 0094  
                 __size_of_UART_buff_put 011C                   _PIN_MANAGER_Initialize 15A2  
                      __size_of_sendData 0146                                __pintcode 0008  
                               ?___awdiv 001B                       __end_of_StartUp595 153A  
                        ?_ADC_Initialize 0001             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                                 _BAUD1CON 000FB8  
                         __size_of_Delay 004C                           __size_of_begin 0058  
               __size_of_DATAEE_ReadByte 0016                      __size_of_respondECU 0044  
                   _INTERRUPT_Initialize 1B96                             _receiveArray 00C4  
                               _CRCcheck 08E4                                 _LATCbits 000F8B  
                         _writeRegisters 107E                      UART_buff_size@_this 001B  
                              _registers 0060                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D      __size_of_INTERRUPT_InterruptManager 0096  
                               i2u243_40 1458                                 i2u246_40 193A  
                               _PIR1bits 000F9E                      begin@stuffavailable 01D7  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 076E           FastTransfer_buffer_flush@_this 0023  
                           _input_buffer 0300                                _rx_buffer 0200  
                       __size_of_ADC_ISR 0004                               _ADCON0bits 000FC2  
                   i2UART_buff_put@_this 0007                                 _Clear595 18E8  
                          _UART_buff_get 13A6                            _UART_buff_put 0B96  
               ??i2_UART_buff_modulo_inc 0005                              _INTCON2bits 000FF1  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 002F  
                 __end_of_writeRegisters 115C                              ??_SetPin595 0021  
                   EnableSlavePower@onof 0025                 __size_ofi2_UART_buff_get 0094  
               __size_ofi2_UART_buff_put 011C                               _EECON1bits 000FA6  
                          ??_updateComms 0027                     __size_of_Receive_get 0010  
                               __Hrparam 0000                                 _Send_put 1954  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                       __size_of___awdiv 0096              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 01D5                         _EnableSlavePower 0EB6  
                             _ANSELCbits 000F3A                           ?_UART_buff_get 0021  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 01D0                 crcBufS_status_put@status 001E  
                               __ptext10 1954                                 __ptext11 0B96  
                               __ptext20 1AF2                                 __ptext12 1B68  
                               __ptext21 1B0A                                 __ptext13 1A3C  
                             _T1GCONbits 000FCC                                 __ptext30 1A80  
                               __ptext22 177C                                 __ptext14 08E4  
                               __ptext31 19E0                                 __ptext23 153A  
                               __ptext15 1236                                 __ptext40 17CE  
                               __ptext32 1B22                                 __ptext24 16D0  
                               __ptext16 0DCE                                 __ptext41 0F9C  
                               __ptext33 1728                                 __ptext25 1310  
                               __ptext17 1B78                                 __ptext50 1BA6  
                               __ptext42 1B52                                 __ptext34 1BA0  
                               __ptext26 15A2                                 __ptext18 13A6  
                               __ptext51 0000                                 __ptext35 14CE  
                               __ptext27 1B88                                 __ptext19 19B2  
                               __ptext44 1920                                 __ptext36 18E8  
                               __ptext28 1B96                                 __ptext45 1B3A  
                               __ptext37 107E                                 __ptext29 18AC  
                               __ptext46 143A                                 __ptext38 181C  
                               __ptext47 1A9E                                 __ptext39 0EB6  
                               __ptext48 0CB2                                 __ptext49 1A0E  
                          __size_of_CRC8 0052                                 begin@ptr 01CE  
                EUSART1_Receive_ISR@data 000C                          ?_writeRegisters 0001  
                          _returnAddress 003F                            __size_of_main 001A  
                            _receiveData 00A2                                 _readwhat 002B  
                         _Transmit_stall 0045                                 _sendData 0A50  
                      ??_DATAEE_ReadByte 001B                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                             ??_respondECU 0027  
                     ??i2_UART_buff_size 0003                        writeRegisters@val 01CE  
                           _serial_write 0037                      __end_of_updateComms 1A80  
     __end_of_INTERRUPT_InterruptManager 009E               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 1A9E                        receiveData@holder 01DB  
                             _INTCONbits 000FF2                      ComputeStorageData@i 001E  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                     _ComputeStorageData 0F9C                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0031  
        __size_ofi2_UART_buff_modulo_inc 002E                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 18AC  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                      ?_ComputeStorageData 0001  
                ?_PIN_MANAGER_Initialize 0001                           SetPin595@value 001F  
           __end_of_EUSART1_Transmit_ISR 1954                              _ring_buffer 0100  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 0023  
                      ??i2_UART_buff_get 0009                              _serial_peek 0033  
                            _serial_read 0035                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002E  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
                   ??_ComputeStorageData 001C    FastTransfer_buffer_modulo_inc@modulus 001D  
                             _PDUStartup 1728                   crcBufS_status_put@time 001D  
              receiveData@crcHolder_1526 01E2                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003D                          writeRegisters@i 01D0  
             __end_of_crcBufS_status_put 1310                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 1608         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 1A62  
