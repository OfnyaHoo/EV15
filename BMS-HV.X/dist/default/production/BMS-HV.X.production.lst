

Microchip Technology PIC18 LITE Macro Assembler V1.31 build 56723 
                                                                                               Wed Mar 25 17:59:08 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30  0000                     _TMR1	set	4046
    31  0000                     _ADCON0	set	4034
    32  0000                     _ADCON0bits	set	4034
    33  0000                     _ADCON1	set	4033
    34  0000                     _ADCON2	set	4032
    35  0000                     _ADRESH	set	4036
    36  0000                     _ADRESL	set	4035
    37  0000                     _ANSELA	set	3896
    38  0000                     _ANSELB	set	3897
    39  0000                     _ANSELC	set	3898
    40  0000                     _ANSELD	set	3899
    41  0000                     _ANSELE	set	3900
    42  0000                     _BAUD1CON	set	4024
    43  0000                     _INTCON2bits	set	4081
    44  0000                     _INTCONbits	set	4082
    45  0000                     _IPR1bits	set	3999
    46  0000                     _LATA	set	3977
    47  0000                     _LATB	set	3978
    48  0000                     _LATC	set	3979
    49  0000                     _LATD	set	3980
    50  0000                     _LATE	set	3981
    51  0000                     _OSCCON	set	4051
    52  0000                     _OSCCON2	set	4050
    53  0000                     _OSCTUNE	set	3995
    54  0000                     _PIE1bits	set	3997
    55  0000                     _PIR1bits	set	3998
    56  0000                     _RC1REG	set	4014
    57  0000                     _RC1STA	set	4011
    58  0000                     _RC1STAbits	set	4011
    59  0000                     _RCONbits	set	4048
    60  0000                     _RCREG1	set	4014
    61  0000                     _SPBRG1	set	4015
    62  0000                     _SPBRGH1	set	4016
    63  0000                     _T1CON	set	4045
    64  0000                     _T1CONbits	set	4045
    65  0000                     _T1GCON	set	4044
    66  0000                     _T1GCONbits	set	4044
    67  0000                     _TMR1H	set	4047
    68  0000                     _TMR1L	set	4046
    69  0000                     _TRISA	set	3986
    70  0000                     _TRISB	set	3987
    71  0000                     _TRISC	set	3988
    72  0000                     _TRISD	set	3989
    73  0000                     _TRISE	set	3990
    74  0000                     _TX1REG	set	4013
    75  0000                     _TX1STA	set	4012
    76  0000                     _TXREG1	set	4013
    77  0000                     _WPUB	set	3937
    78                           
    79                           	psect	nvCOMRAM
    80  0000'                    __pnvCOMRAM:
    81                           	opt stack 0
    82  0000'                    _timer1ReloadVal:
    83                           	opt stack 0
    84  0000'                    	ds	2
    85  0002'                    _eusart1TxBufferRemaining:
    86                           	opt stack 0
    87  0002'                    	ds	1
    88                           
    89                           ; #config settings
    90  0000                     
    91                           	psect	cinit
    92  0000'                    __pcinit:
    93                           	opt stack 0
    94  0000'                    start_initialization:
    95                           	opt stack 0
    96  0000'                    __initialization:
    97                           	opt stack 0
    98                           
    99                           ; Clear objects allocated to BANK0 (40 bytes)
   100  0000' EE00' F000'        	lfsr	0,__pbssBANK0
   101  0004' 0E28               	movlw	40
   102  0006'                    clear_0:
   103  0006' 6AEE               	clrf	postinc0,c
   104  0008' 06E8               	decf	wreg,f,c
   105  000A' E1FD               	bnz	clear_0
   106                           
   107                           ; Clear objects allocated to COMRAM (45 bytes)
   108  000C' EE00' F000'        	lfsr	0,__pbssCOMRAM
   109  0010' 0E2D               	movlw	45
   110  0012'                    clear_1:
   111  0012' 6AEE               	clrf	postinc0,c
   112  0014' 06E8               	decf	wreg,f,c
   113  0016' E1FD               	bnz	clear_1
   114  0018'                    end_of_initialization:
   115                           	opt stack 0
   116  0018'                    __end_of__initialization:
   117                           	opt stack 0
   118  0018' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   119  001A' 6EF8               	movwf	tblptru,c
   120  001C' 0100               	movlb	0
   121  001E' EF00' F000'        	goto	_main	;jump to C main() function
   122                           tblptru	equ	0xFF8
   123                           postinc0	equ	0xFEE
   124                           wreg	equ	0xFE8
   125                           
   126                           	psect	bssCOMRAM
   127  0000'                    __pbssCOMRAM:
   128                           	opt stack 0
   129  0000'                    _Battery_Adc:
   130                           	opt stack 0
   131  0000'                    	ds	20
   132  0014'                    _eusart1RxBuffer:
   133                           	opt stack 0
   134  0014'                    	ds	8
   135  001C'                    _eusart1TxBuffer:
   136                           	opt stack 0
   137  001C'                    	ds	8
   138  0024'                    _ADC_Buffer_Point:
   139                           	opt stack 0
   140  0024'                    	ds	2
   141  0026'                    _Temp_Get:
   142                           	opt stack 0
   143  0026'                    	ds	1
   144  0027'                    _Volt_Get:
   145                           	opt stack 0
   146  0027'                    	ds	1
   147  0028'                    _eusart1RxCount:
   148                           	opt stack 0
   149  0028'                    	ds	1
   150  0029'                    _eusart1RxHead:
   151                           	opt stack 0
   152  0029'                    	ds	1
   153  002A'                    _eusart1RxTail:
   154                           	opt stack 0
   155  002A'                    	ds	1
   156  002B'                    _eusart1TxHead:
   157                           	opt stack 0
   158  002B'                    	ds	1
   159  002C'                    _eusart1TxTail:
   160                           	opt stack 0
   161  002C'                    	ds	1
   162                           tblptru	equ	0xFF8
   163                           postinc0	equ	0xFEE
   164                           wreg	equ	0xFE8
   165                           
   166                           	psect	bssBANK0
   167  0000'                    __pbssBANK0:
   168                           	opt stack 0
   169  0000'                    _Battery_Volt:
   170                           	opt stack 0
   171  0000'                    	ds	20
   172  0014'                    _Temp_Adc:
   173                           	opt stack 0
   174  0014'                    	ds	20
   175                           tblptru	equ	0xFF8
   176                           postinc0	equ	0xFEE
   177                           wreg	equ	0xFE8
   178                           
   179                           	psect	cstackBANK0
   180  0000'                    __pcstackBANK0:
   181                           	opt stack 0
   182  0000'                    
   183                           ; 2 bytes @ 0x0
   184  0000'                    	ds	2
   185  0002'                    
   186                           ; 3 bytes @ 0x2
   187  0002'                    	ds	3
   188                           tblptru	equ	0xFF8
   189                           postinc0	equ	0xFEE
   190                           wreg	equ	0xFE8
   191                           
   192                           	psect	cstackCOMRAM
   193  0000'                    __pcstackCOMRAM:
   194                           	opt stack 0
   195  0000'                    ??_TMR1_ISR:
   196  0000'                    ??_EUSART1_Transmit_ISR:
   197  0000'                    ??_EUSART1_Receive_ISR:
   198  0000'                    ??_ADC_StartConversion:
   199  0000'                    ?_ADC_GetConversionResult:
   200                           	opt stack 0
   201                           
   202                           ; 2 bytes @ 0x0
   203  0000'                    	ds	1
   204  0001'                    ADC_StartConversion@channel:
   205                           	opt stack 0
   206                           
   207                           ; 1 bytes @ 0x1
   208  0001'                    	ds	1
   209  0002'                    ??_ADC_GetConversionResult:
   210                           
   211                           ; 0 bytes @ 0x2
   212  0002'                    	ds	2
   213  0004'                    ??_ADC_ISR:
   214                           
   215                           ; 0 bytes @ 0x4
   216  0004'                    	ds	2
   217  0006'                    ADC_ISR@ADC_Result:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x6
   221  0006'                    	ds	2
   222  0008'                    ??_INTERRUPT_InterruptManager:
   223                           
   224                           ; 0 bytes @ 0x8
   225  0008'                    	ds	14
   226  0016'                    ??_EUSART1_Initialize:
   227  0016'                    
   228                           ; 0 bytes @ 0x16
   229  0016'                    	ds	1
   230  0017'                    tblptru	equ	0xFF8
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           
   234                           ; 0 bytes @ 0x17
   235 ;;
   236 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   237 ;;
   238 ;; *************** function _main *****************
   239 ;; Defined at:
   240 ;;		line 26 in file "bms.c"
   241 ;; Parameters:    Size  Location     Type
   242 ;;  argc            2    0[BANK0 ] int 
   243 ;;  argv            3    2[BANK0 ] PTR PTR unsigned char 
   244 ;; Auto vars:     Size  Location     Type
   245 ;;		None
   246 ;; Return value:  Size  Location     Type
   247 ;;                  2    0[BANK0 ] int 
   248 ;; Registers used:
   249 ;;		wreg, status,2, cstack
   250 ;; Tracked objects:
   251 ;;		On entry : 0/0
   252 ;;		On exit  : 0/0
   253 ;;		Unchanged: 0/0
   254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   255 ;;      Params:         0       5       0       0       0       0       0
   256 ;;      Locals:         0       0       0       0       0       0       0
   257 ;;      Temps:          0       0       0       0       0       0       0
   258 ;;      Totals:         0       5       0       0       0       0       0
   259 ;;Total ram usage:        5 bytes
   260 ;; Hardware stack levels required when called:    6
   261 ;; This function calls:
   262 ;;		_SYSTEM_Initialize
   263 ;; This function is called by:
   264 ;;		Startup code after reset
   265 ;; This function uses a non-reentrant model
   266 ;;
   267                           
   268                           	psect	text0
   269  0000'                    __ptext0:
   270                           	opt stack 0
   271  0000'                    _main:
   272                           	opt stack 25
   273                           
   274                           ;bms.c: 28: SYSTEM_Initialize();
   275                           
   276                           ;incstack = 0
   277  0000' EC00' F000'        	call	_SYSTEM_Initialize	;wreg free
   278                           
   279                           ;bms.c: 47: (INTCONbits.GIE = 1);
   280  0004' 8EF2               	bsf	intcon,7,c	;volatile
   281                           
   282                           ;bms.c: 50: (INTCONbits.PEIE = 1);
   283  0006' 8CF2               	bsf	intcon,6,c	;volatile
   284  0008'                    l297:
   285                           
   286                           ;bms.c: 60: {
   287  0008' D7FF               	goto	l297
   288  000A'                    __end_of_main:
   289                           	opt stack 0
   290                           tblptru	equ	0xFF8
   291                           intcon	equ	0xFF2
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           
   295 ;; *************** function _SYSTEM_Initialize *****************
   296 ;; Defined at:
   297 ;;		line 112 in file "mcc_generated_files/mcc.c"
   298 ;; Parameters:    Size  Location     Type
   299 ;;		None
   300 ;; Auto vars:     Size  Location     Type
   301 ;;		None
   302 ;; Return value:  Size  Location     Type
   303 ;;		None               void
   304 ;; Registers used:
   305 ;;		wreg, status,2, cstack
   306 ;; Tracked objects:
   307 ;;		On entry : 0/0
   308 ;;		On exit  : 0/0
   309 ;;		Unchanged: 0/0
   310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   311 ;;      Params:         0       0       0       0       0       0       0
   312 ;;      Locals:         0       0       0       0       0       0       0
   313 ;;      Temps:          0       0       0       0       0       0       0
   314 ;;      Totals:         0       0       0       0       0       0       0
   315 ;;Total ram usage:        0 bytes
   316 ;; Hardware stack levels used:    1
   317 ;; Hardware stack levels required when called:    5
   318 ;; This function calls:
   319 ;;		_ADC_Initialize
   320 ;;		_EUSART1_Initialize
   321 ;;		_INTERRUPT_Initialize
   322 ;;		_OSCILLATOR_Initialize
   323 ;;		_PIN_MANAGER_Initialize
   324 ;;		_TMR1_Initialize
   325 ;; This function is called by:
   326 ;;		_main
   327 ;; This function uses a non-reentrant model
   328 ;;
   329                           
   330                           	psect	text1
   331  0000'                    __ptext1:
   332                           	opt stack 0
   333  0000'                    _SYSTEM_Initialize:
   334                           	opt stack 25
   335                           
   336                           ;mcc.c: 114: OSCILLATOR_Initialize();
   337                           
   338                           ;incstack = 0
   339  0000' EC00' F000'        	call	_OSCILLATOR_Initialize	;wreg free
   340                           
   341                           ;mcc.c: 115: PIN_MANAGER_Initialize();
   342  0004' EC00' F000'        	call	_PIN_MANAGER_Initialize	;wreg free
   343                           
   344                           ;mcc.c: 116: INTERRUPT_Initialize();
   345  0008' EC00' F000'        	call	_INTERRUPT_Initialize	;wreg free
   346                           
   347                           ;mcc.c: 117: ADC_Initialize();
   348  000C' EC00' F000'        	call	_ADC_Initialize	;wreg free
   349                           
   350                           ;mcc.c: 118: EUSART1_Initialize();
   351  0010' EC00' F000'        	call	_EUSART1_Initialize	;wreg free
   352                           
   353                           ;mcc.c: 119: TMR1_Initialize();
   354  0014' EC00' F000'        	call	_TMR1_Initialize	;wreg free
   355  0018' 0012               	return	
   356  001A'                    __end_of_SYSTEM_Initialize:
   357                           	opt stack 0
   358                           tblptru	equ	0xFF8
   359                           intcon	equ	0xFF2
   360                           postinc0	equ	0xFEE
   361                           wreg	equ	0xFE8
   362                           
   363 ;; *************** function _TMR1_Initialize *****************
   364 ;; Defined at:
   365 ;;		line 63 in file "mcc_generated_files/tmr1.c"
   366 ;; Parameters:    Size  Location     Type
   367 ;;		None
   368 ;; Auto vars:     Size  Location     Type
   369 ;;		None
   370 ;; Return value:  Size  Location     Type
   371 ;;		None               void
   372 ;; Registers used:
   373 ;;		wreg, status,2, cstack
   374 ;; Tracked objects:
   375 ;;		On entry : 0/0
   376 ;;		On exit  : 0/0
   377 ;;		Unchanged: 0/0
   378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   379 ;;      Params:         0       0       0       0       0       0       0
   380 ;;      Locals:         0       0       0       0       0       0       0
   381 ;;      Temps:          0       0       0       0       0       0       0
   382 ;;      Totals:         0       0       0       0       0       0       0
   383 ;;Total ram usage:        0 bytes
   384 ;; Hardware stack levels used:    1
   385 ;; Hardware stack levels required when called:    4
   386 ;; This function calls:
   387 ;;		_TMR1_StartTimer
   388 ;; This function is called by:
   389 ;;		_SYSTEM_Initialize
   390 ;; This function uses a non-reentrant model
   391 ;;
   392                           
   393                           	psect	text2
   394  0000'                    __ptext2:
   395                           	opt stack 0
   396  0000'                    _TMR1_Initialize:
   397                           	opt stack 25
   398                           
   399                           ;tmr1.c: 68: T1CON = 0x00;
   400                           
   401                           ;incstack = 0
   402  0000' 0E00               	movlw	0
   403  0002' 6ECD               	movwf	4045,c	;volatile
   404                           
   405                           ;tmr1.c: 71: T1GCON = 0x00;
   406  0004' 0E00               	movlw	0
   407  0006' 6ECC               	movwf	4044,c	;volatile
   408                           
   409                           ;tmr1.c: 74: TMR1H = 0xB1;
   410  0008' 0EB1               	movlw	177
   411  000A' 6ECF               	movwf	4047,c	;volatile
   412                           
   413                           ;tmr1.c: 77: TMR1L = 0xE0;
   414  000C' 0EE0               	movlw	224
   415  000E' 6ECE               	movwf	4046,c	;volatile
   416                           
   417                           ;tmr1.c: 80: timer1ReloadVal=TMR1;
   418  0010' CFCE F000'         	movff	4046,_timer1ReloadVal	;volatile
   419  0014' CFCF F001'         	movff	4047,_timer1ReloadVal+1	;volatile
   420                           
   421                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
   422  0018' 909E               	bcf	3998,0,c	;volatile
   423                           
   424                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
   425  001A' 809D               	bsf	3997,0,c	;volatile
   426                           
   427                           ;tmr1.c: 89: TMR1_StartTimer();
   428  001C' EC00' F000'        	call	_TMR1_StartTimer	;wreg free
   429  0020' 0012               	return	
   430  0022'                    __end_of_TMR1_Initialize:
   431                           	opt stack 0
   432                           tblptru	equ	0xFF8
   433                           intcon	equ	0xFF2
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437 ;; *************** function _TMR1_StartTimer *****************
   438 ;; Defined at:
   439 ;;		line 92 in file "mcc_generated_files/tmr1.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;		None
   442 ;; Auto vars:     Size  Location     Type
   443 ;;		None
   444 ;; Return value:  Size  Location     Type
   445 ;;		None               void
   446 ;; Registers used:
   447 ;;		None
   448 ;; Tracked objects:
   449 ;;		On entry : 0/0
   450 ;;		On exit  : 0/0
   451 ;;		Unchanged: 0/0
   452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   453 ;;      Params:         0       0       0       0       0       0       0
   454 ;;      Locals:         0       0       0       0       0       0       0
   455 ;;      Temps:          0       0       0       0       0       0       0
   456 ;;      Totals:         0       0       0       0       0       0       0
   457 ;;Total ram usage:        0 bytes
   458 ;; Hardware stack levels used:    1
   459 ;; Hardware stack levels required when called:    3
   460 ;; This function calls:
   461 ;;		Nothing
   462 ;; This function is called by:
   463 ;;		_TMR1_Initialize
   464 ;; This function uses a non-reentrant model
   465 ;;
   466                           
   467                           	psect	text3
   468  0000'                    __ptext3:
   469                           	opt stack 0
   470  0000'                    _TMR1_StartTimer:
   471                           	opt stack 25
   472                           
   473                           ;tmr1.c: 95: T1CONbits.TMR1ON = 1;
   474                           
   475                           ;incstack = 0
   476  0000' 80CD               	bsf	4045,0,c	;volatile
   477  0002' 0012               	return	
   478  0004'                    __end_of_TMR1_StartTimer:
   479                           	opt stack 0
   480                           tblptru	equ	0xFF8
   481                           intcon	equ	0xFF2
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           
   485 ;; *************** function _PIN_MANAGER_Initialize *****************
   486 ;; Defined at:
   487 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;		None
   492 ;; Return value:  Size  Location     Type
   493 ;;		None               void
   494 ;; Registers used:
   495 ;;		wreg, status,2
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   501 ;;      Params:         0       0       0       0       0       0       0
   502 ;;      Locals:         0       0       0       0       0       0       0
   503 ;;      Temps:          0       0       0       0       0       0       0
   504 ;;      Totals:         0       0       0       0       0       0       0
   505 ;;Total ram usage:        0 bytes
   506 ;; Hardware stack levels used:    1
   507 ;; Hardware stack levels required when called:    3
   508 ;; This function calls:
   509 ;;		Nothing
   510 ;; This function is called by:
   511 ;;		_SYSTEM_Initialize
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515                           	psect	text4
   516  0000'                    __ptext4:
   517                           	opt stack 0
   518  0000'                    _PIN_MANAGER_Initialize:
   519                           	opt stack 26
   520                           
   521                           ;pin_manager.c: 52: LATA = 0x00;
   522                           
   523                           ;incstack = 0
   524  0000' 0E00               	movlw	0
   525  0002' 6E89               	movwf	3977,c	;volatile
   526                           
   527                           ;pin_manager.c: 53: TRISA = 0xBE;
   528  0004' 0EBE               	movlw	190
   529  0006' 6E92               	movwf	3986,c	;volatile
   530                           
   531                           ;pin_manager.c: 54: ANSELA = 0x2E;
   532  0008' 0E2E               	movlw	46
   533  000A' 010F               	movlb	15	; () banked
   534  000C' 010F               	movlb	15	; () banked
   535  000E' 6F38               	movwf	56,b	;volatile
   536                           
   537                           ;pin_manager.c: 56: LATB = 0x00;
   538  0010' 0E00               	movlw	0
   539  0012' 6E8A               	movwf	3978,c	;volatile
   540                           
   541                           ;pin_manager.c: 57: TRISB = 0xF4;
   542  0014' 0EF4               	movlw	244
   543  0016' 6E93               	movwf	3987,c	;volatile
   544                           
   545                           ;pin_manager.c: 58: ANSELB = 0x34;
   546  0018' 0E34               	movlw	52
   547  001A' 010F               	movlb	15	; () banked
   548  001C' 010F               	movlb	15	; () banked
   549  001E' 6F39               	movwf	57,b	;volatile
   550                           
   551                           ;pin_manager.c: 59: WPUB = 0x00;
   552  0020' 0E00               	movlw	0
   553  0022' 6E61               	movwf	3937,c	;volatile
   554                           
   555                           ;pin_manager.c: 61: LATC = 0x08;
   556  0024' 0E08               	movlw	8
   557  0026' 6E8B               	movwf	3979,c	;volatile
   558                           
   559                           ;pin_manager.c: 62: TRISC = 0xC4;
   560  0028' 0EC4               	movlw	196
   561  002A' 6E94               	movwf	3988,c	;volatile
   562                           
   563                           ;pin_manager.c: 63: ANSELC = 0x04;
   564  002C' 0E04               	movlw	4
   565  002E' 010F               	movlb	15	; () banked
   566  0030' 010F               	movlb	15	; () banked
   567  0032' 6F3A               	movwf	58,b	;volatile
   568                           
   569                           ;pin_manager.c: 65: LATD = 0x00;
   570  0034' 0E00               	movlw	0
   571  0036' 6E8C               	movwf	3980,c	;volatile
   572                           
   573                           ;pin_manager.c: 66: TRISD = 0xD1;
   574  0038' 0ED1               	movlw	209
   575  003A' 6E95               	movwf	3989,c	;volatile
   576                           
   577                           ;pin_manager.c: 67: ANSELD = 0xD1;
   578  003C' 0ED1               	movlw	209
   579  003E' 010F               	movlb	15	; () banked
   580  0040' 010F               	movlb	15	; () banked
   581  0042' 6F3B               	movwf	59,b	;volatile
   582                           
   583                           ;pin_manager.c: 69: LATE = 0x00;
   584  0044' 0E00               	movlw	0
   585  0046' 6E8D               	movwf	3981,c	;volatile
   586                           
   587                           ;pin_manager.c: 70: TRISE = 0x05;
   588  0048' 0E05               	movlw	5
   589  004A' 6E96               	movwf	3990,c	;volatile
   590                           
   591                           ;pin_manager.c: 71: ANSELE = 0x05;
   592  004C' 0E05               	movlw	5
   593  004E' 010F               	movlb	15	; () banked
   594  0050' 010F               	movlb	15	; () banked
   595  0052' 6F3C               	movwf	60,b	;volatile
   596                           
   597                           ; BSR set to: 15
   598                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
   599  0054' 8EF1               	bsf	intcon2,7,c	;volatile
   600                           
   601                           ; BSR set to: 15
   602  0056' 0012               	return	
   603  0058'                    __end_of_PIN_MANAGER_Initialize:
   604                           	opt stack 0
   605                           tblptru	equ	0xFF8
   606                           intcon	equ	0xFF2
   607                           intcon2	equ	0xFF1
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           
   611 ;; *************** function _OSCILLATOR_Initialize *****************
   612 ;; Defined at:
   613 ;;		line 122 in file "mcc_generated_files/mcc.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;		None
   616 ;; Auto vars:     Size  Location     Type
   617 ;;		None
   618 ;; Return value:  Size  Location     Type
   619 ;;		None               void
   620 ;; Registers used:
   621 ;;		wreg, status,2
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   627 ;;      Params:         0       0       0       0       0       0       0
   628 ;;      Locals:         0       0       0       0       0       0       0
   629 ;;      Temps:          0       0       0       0       0       0       0
   630 ;;      Totals:         0       0       0       0       0       0       0
   631 ;;Total ram usage:        0 bytes
   632 ;; Hardware stack levels used:    1
   633 ;; Hardware stack levels required when called:    3
   634 ;; This function calls:
   635 ;;		Nothing
   636 ;; This function is called by:
   637 ;;		_SYSTEM_Initialize
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           	psect	text5
   642  0000'                    __ptext5:
   643                           	opt stack 0
   644  0000'                    _OSCILLATOR_Initialize:
   645                           	opt stack 26
   646                           
   647                           ;mcc.c: 125: OSCCON = 0x62;
   648                           
   649                           ; BSR set to: 15
   650                           ;incstack = 0
   651  0000' 0E62               	movlw	98
   652  0002' 6ED3               	movwf	4051,c	;volatile
   653                           
   654                           ;mcc.c: 127: OSCCON2 = 0x04;
   655  0004' 0E04               	movlw	4
   656  0006' 6ED2               	movwf	4050,c	;volatile
   657                           
   658                           ;mcc.c: 129: OSCTUNE = 0x00;
   659  0008' 0E00               	movlw	0
   660  000A' 6E9B               	movwf	3995,c	;volatile
   661  000C' 0012               	return	
   662  000E'                    __end_of_OSCILLATOR_Initialize:
   663                           	opt stack 0
   664                           tblptru	equ	0xFF8
   665                           intcon	equ	0xFF2
   666                           intcon2	equ	0xFF1
   667                           postinc0	equ	0xFEE
   668                           wreg	equ	0xFE8
   669                           
   670 ;; *************** function _INTERRUPT_Initialize *****************
   671 ;; Defined at:
   672 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;		None               void
   679 ;; Registers used:
   680 ;;		None
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   686 ;;      Params:         0       0       0       0       0       0       0
   687 ;;      Locals:         0       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0
   689 ;;      Totals:         0       0       0       0       0       0       0
   690 ;;Total ram usage:        0 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    3
   693 ;; This function calls:
   694 ;;		Nothing
   695 ;; This function is called by:
   696 ;;		_SYSTEM_Initialize
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text6
   701  0000'                    __ptext6:
   702                           	opt stack 0
   703  0000'                    _INTERRUPT_Initialize:
   704                           	opt stack 26
   705                           
   706                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
   707                           
   708                           ;incstack = 0
   709  0000' 9ED0               	bcf	4048,7,c	;volatile
   710                           
   711                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
   712  0002' 9A9F               	bcf	3999,5,c	;volatile
   713                           
   714                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
   715  0004' 9C9F               	bcf	3999,6,c	;volatile
   716                           
   717                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
   718  0006' 909F               	bcf	3999,0,c	;volatile
   719                           
   720                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
   721  0008' 989F               	bcf	3999,4,c	;volatile
   722  000A' 0012               	return	
   723  000C'                    __end_of_INTERRUPT_Initialize:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           intcon	equ	0xFF2
   727                           intcon2	equ	0xFF1
   728                           postinc0	equ	0xFEE
   729                           wreg	equ	0xFE8
   730                           
   731 ;; *************** function _EUSART1_Initialize *****************
   732 ;; Defined at:
   733 ;;		line 76 in file "mcc_generated_files/eusart1.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;		None
   736 ;; Auto vars:     Size  Location     Type
   737 ;;		None
   738 ;; Return value:  Size  Location     Type
   739 ;;		None               void
   740 ;; Registers used:
   741 ;;		wreg, status,2
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   747 ;;      Params:         0       0       0       0       0       0       0
   748 ;;      Locals:         0       0       0       0       0       0       0
   749 ;;      Temps:          1       0       0       0       0       0       0
   750 ;;      Totals:         1       0       0       0       0       0       0
   751 ;;Total ram usage:        1 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; Hardware stack levels required when called:    3
   754 ;; This function calls:
   755 ;;		Nothing
   756 ;; This function is called by:
   757 ;;		_SYSTEM_Initialize
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           	psect	text7
   762  0000'                    __ptext7:
   763                           	opt stack 0
   764  0000'                    _EUSART1_Initialize:
   765                           	opt stack 26
   766                           
   767                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
   768                           
   769                           ;incstack = 0
   770  0000' 9A9D               	bcf	3997,5,c	;volatile
   771                           
   772                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
   773  0002' 989D               	bcf	3997,4,c	;volatile
   774                           
   775                           ;eusart1.c: 85: BAUD1CON = 0x48;
   776  0004' 0E48               	movlw	72
   777  0006' 6EB8               	movwf	4024,c	;volatile
   778                           
   779                           ;eusart1.c: 88: RC1STA = 0x98;
   780  0008' 0E98               	movlw	152
   781  000A' 6EAB               	movwf	4011,c	;volatile
   782                           
   783                           ;eusart1.c: 91: TX1STA = 0x26;
   784  000C' 0E26               	movlw	38
   785  000E' 6EAC               	movwf	4012,c	;volatile
   786                           
   787                           ;eusart1.c: 94: SPBRG1 = 0x22;
   788  0010' 0E22               	movlw	34
   789  0012' 6EAF               	movwf	4015,c	;volatile
   790                           
   791                           ;eusart1.c: 97: SPBRGH1 = 0x00;
   792  0014' 0E00               	movlw	0
   793  0016' 6EB0               	movwf	4016,c	;volatile
   794                           
   795                           ;eusart1.c: 100: TXREG1 = 0x00;
   796  0018' 0E00               	movlw	0
   797  001A' 6EAD               	movwf	4013,c	;volatile
   798                           
   799                           ;eusart1.c: 103: RCREG1 = 0x00;
   800  001C' 0E00               	movlw	0
   801  001E' 6EAE               	movwf	4014,c	;volatile
   802                           
   803                           ;eusart1.c: 107: eusart1TxHead = 0;
   804  0020' 6E00'              	movwf	??_EUSART1_Initialize& (0+255),c
   805  0022' 0E00               	movlw	0
   806  0024' 6E2B'              	movwf	_eusart1TxHead,c
   807  0026' 5000'              	movf	??_EUSART1_Initialize& (0+255),w,c
   808                           
   809                           ;eusart1.c: 108: eusart1TxTail = 0;
   810  0028' 6E00'              	movwf	??_EUSART1_Initialize& (0+255),c
   811  002A' 0E00               	movlw	0
   812  002C' 6E2C'              	movwf	_eusart1TxTail,c
   813  002E' 5000'              	movf	??_EUSART1_Initialize& (0+255),w,c
   814                           
   815                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
   816  0030' 0E08               	movlw	8
   817  0032' 6E02'              	movwf	_eusart1TxBufferRemaining,c	;volatile
   818                           
   819                           ;eusart1.c: 111: eusart1RxHead = 0;
   820  0034' 6E00'              	movwf	??_EUSART1_Initialize& (0+255),c
   821  0036' 0E00               	movlw	0
   822  0038' 6E29'              	movwf	_eusart1RxHead,c
   823  003A' 5000'              	movf	??_EUSART1_Initialize& (0+255),w,c
   824                           
   825                           ;eusart1.c: 112: eusart1RxTail = 0;
   826  003C' 6E00'              	movwf	??_EUSART1_Initialize& (0+255),c
   827  003E' 0E00               	movlw	0
   828  0040' 6E2A'              	movwf	_eusart1RxTail,c
   829  0042' 5000'              	movf	??_EUSART1_Initialize& (0+255),w,c
   830                           
   831                           ;eusart1.c: 113: eusart1RxCount = 0;
   832  0044' 0E00               	movlw	0
   833  0046' 6E28'              	movwf	_eusart1RxCount,c	;volatile
   834                           
   835                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
   836  0048' 8A9D               	bsf	3997,5,c	;volatile
   837  004A' 0012               	return	
   838  004C'                    __end_of_EUSART1_Initialize:
   839                           	opt stack 0
   840                           tblptru	equ	0xFF8
   841                           intcon	equ	0xFF2
   842                           intcon2	equ	0xFF1
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           
   846 ;; *************** function _ADC_Initialize *****************
   847 ;; Defined at:
   848 ;;		line 12 in file "mcc_generated_files/adc.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;		None
   851 ;; Auto vars:     Size  Location     Type
   852 ;;		None
   853 ;; Return value:  Size  Location     Type
   854 ;;		None               void
   855 ;; Registers used:
   856 ;;		wreg, status,2
   857 ;; Tracked objects:
   858 ;;		On entry : 0/0
   859 ;;		On exit  : 0/0
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   862 ;;      Params:         0       0       0       0       0       0       0
   863 ;;      Locals:         0       0       0       0       0       0       0
   864 ;;      Temps:          0       0       0       0       0       0       0
   865 ;;      Totals:         0       0       0       0       0       0       0
   866 ;;Total ram usage:        0 bytes
   867 ;; Hardware stack levels used:    1
   868 ;; Hardware stack levels required when called:    3
   869 ;; This function calls:
   870 ;;		Nothing
   871 ;; This function is called by:
   872 ;;		_SYSTEM_Initialize
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           	psect	text8
   877  0000'                    __ptext8:
   878                           	opt stack 0
   879  0000'                    _ADC_Initialize:
   880                           	opt stack 26
   881                           
   882                           ;adc.c: 17: ADCON0 = 0x01;
   883                           
   884                           ;incstack = 0
   885  0000' 0E01               	movlw	1
   886  0002' 6EC2               	movwf	4034,c	;volatile
   887                           
   888                           ;adc.c: 20: ADCON1 = 0x81;
   889  0004' 0E81               	movlw	129
   890  0006' 6EC1               	movwf	4033,c	;volatile
   891                           
   892                           ;adc.c: 23: ADCON2 = 0x0A;
   893  0008' 0E0A               	movlw	10
   894  000A' 6EC0               	movwf	4032,c	;volatile
   895                           
   896                           ;adc.c: 26: ADRESL = 0x00;
   897  000C' 0E00               	movlw	0
   898  000E' 6EC3               	movwf	4035,c	;volatile
   899                           
   900                           ;adc.c: 29: ADRESH = 0x00;
   901  0010' 0E00               	movlw	0
   902  0012' 6EC4               	movwf	4036,c	;volatile
   903                           
   904                           ;adc.c: 32: PIE1bits.ADIE = 1;
   905  0014' 8C9D               	bsf	3997,6,c	;volatile
   906  0016' 0012               	return	
   907  0018'                    __end_of_ADC_Initialize:
   908                           	opt stack 0
   909                           tblptru	equ	0xFF8
   910                           intcon	equ	0xFF2
   911                           intcon2	equ	0xFF1
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           
   915 ;; *************** function _INTERRUPT_InterruptManager *****************
   916 ;; Defined at:
   917 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;		None               void
   924 ;; Registers used:
   925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   931 ;;      Params:         0       0       0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0       0       0
   933 ;;      Temps:         14       0       0       0       0       0       0
   934 ;;      Totals:        14       0       0       0       0       0       0
   935 ;;Total ram usage:       14 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    2
   938 ;; This function calls:
   939 ;;		_ADC_ISR
   940 ;;		_EUSART1_Receive_ISR
   941 ;;		_EUSART1_Transmit_ISR
   942 ;;		_TMR1_ISR
   943 ;; This function is called by:
   944 ;;		Interrupt level 2
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	intcode
   949  0000'                    __pintcode:
   950                           	opt stack 0
   951  0000'                    _INTERRUPT_InterruptManager:
   952                           	opt stack 25
   953                           
   954                           ;incstack = 0
   955  0000' CFFA F008'         	movff	pclath,??_INTERRUPT_InterruptManager
   956  0004' CFFB F009'         	movff	pclatu,??_INTERRUPT_InterruptManager+1
   957  0008' CFE9 F00A'         	movff	fsr0l,??_INTERRUPT_InterruptManager+2
   958  000C' CFEA F00B'         	movff	fsr0h,??_INTERRUPT_InterruptManager+3
   959  0010' CFE1 F00C'         	movff	fsr1l,??_INTERRUPT_InterruptManager+4
   960  0014' CFE2 F00D'         	movff	fsr1h,??_INTERRUPT_InterruptManager+5
   961  0018' CFD9 F00E'         	movff	fsr2l,??_INTERRUPT_InterruptManager+6
   962  001C' CFDA F00F'         	movff	fsr2h,??_INTERRUPT_InterruptManager+7
   963  0020' CFF3 F010'         	movff	prodl,??_INTERRUPT_InterruptManager+8
   964  0024' CFF4 F011'         	movff	prodh,??_INTERRUPT_InterruptManager+9
   965  0028' CFF6 F012'         	movff	tblptrl,??_INTERRUPT_InterruptManager+10
   966  002C' CFF7 F013'         	movff	tblptrh,??_INTERRUPT_InterruptManager+11
   967  0030' CFF8 F014'         	movff	tblptru,??_INTERRUPT_InterruptManager+12
   968  0034' CFF5 F015'         	movff	tablat,??_INTERRUPT_InterruptManager+13
   969                           
   970                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
   971  0038' BA9D               	btfsc	3997,5,c	;volatile
   972  003A' AA9E               	btfss	3998,5,c	;volatile
   973  003C' D003               	goto	i2l258
   974                           
   975                           ;interrupt_manager.c: 73: {
   976                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
   977  003E' EC00' F000'        	call	_EUSART1_Receive_ISR	;wreg free
   978                           
   979                           ;interrupt_manager.c: 75: }
   980  0042' D011               	goto	i2l266
   981  0044'                    i2l258:
   982                           
   983                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
   984  0044' BC9D               	btfsc	3997,6,c	;volatile
   985  0046' AC9E               	btfss	3998,6,c	;volatile
   986  0048' D003               	goto	i2l260
   987                           
   988                           ;interrupt_manager.c: 77: {
   989                           ;interrupt_manager.c: 78: ADC_ISR();
   990  004A' EC00' F000'        	call	_ADC_ISR	;wreg free
   991                           
   992                           ;interrupt_manager.c: 79: }
   993  004E' D00B               	goto	i2l266
   994  0050'                    i2l260:
   995                           
   996                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
   997  0050' B09D               	btfsc	3997,0,c	;volatile
   998  0052' A09E               	btfss	3998,0,c	;volatile
   999  0054' D003               	goto	i2l262
  1000                           
  1001                           ;interrupt_manager.c: 81: {
  1002                           ;interrupt_manager.c: 82: TMR1_ISR();
  1003  0056' EC00' F000'        	call	_TMR1_ISR	;wreg free
  1004                           
  1005                           ;interrupt_manager.c: 83: }
  1006  005A' D005               	goto	i2l266
  1007  005C'                    i2l262:
  1008                           
  1009                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  1010  005C' B89D               	btfsc	3997,4,c	;volatile
  1011  005E' A89E               	btfss	3998,4,c	;volatile
  1012  0060' D002               	goto	i2l266
  1013                           
  1014                           ;interrupt_manager.c: 85: {
  1015                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  1016  0062' EC00' F000'        	call	_EUSART1_Transmit_ISR	;wreg free
  1017  0066'                    i2l266:
  1018  0066' C015' FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  1019  006A' C014' FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  1020  006E' C013' FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  1021  0072' C012' FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  1022  0076' C011' FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  1023  007A' C010' FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  1024  007E' C00F' FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  1025  0082' C00E' FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  1026  0086' C00D' FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  1027  008A' C00C' FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  1028  008E' C00B' FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  1029  0092' C00A' FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  1030  0096' C009' FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  1031  009A' C008' FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  1032  009E' 0011               	retfie		f
  1033  00A0'                    __end_of_INTERRUPT_InterruptManager:
  1034                           	opt stack 0
  1035                           pclatu	equ	0xFFB
  1036                           pclath	equ	0xFFA
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           prodh	equ	0xFF4
  1042                           prodl	equ	0xFF3
  1043                           intcon	equ	0xFF2
  1044                           intcon2	equ	0xFF1
  1045                           postinc0	equ	0xFEE
  1046                           fsr0h	equ	0xFEA
  1047                           fsr0l	equ	0xFE9
  1048                           wreg	equ	0xFE8
  1049                           fsr1h	equ	0xFE2
  1050                           fsr1l	equ	0xFE1
  1051                           fsr2h	equ	0xFDA
  1052                           fsr2l	equ	0xFD9
  1053                           
  1054 ;; *************** function _TMR1_ISR *****************
  1055 ;; Defined at:
  1056 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;		None
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;		None
  1061 ;; Return value:  Size  Location     Type
  1062 ;;		None               void
  1063 ;; Registers used:
  1064 ;;		wreg, status,2, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1070 ;;      Params:         0       0       0       0       0       0       0
  1071 ;;      Locals:         0       0       0       0       0       0       0
  1072 ;;      Temps:          3       0       0       0       0       0       0
  1073 ;;      Totals:         3       0       0       0       0       0       0
  1074 ;;Total ram usage:        3 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    1
  1077 ;; This function calls:
  1078 ;;		_TMR1_CallBack
  1079 ;; This function is called by:
  1080 ;;		_INTERRUPT_InterruptManager
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text10
  1085  0000'                    __ptext10:
  1086                           	opt stack 0
  1087  0000'                    _TMR1_ISR:
  1088                           	opt stack 25
  1089                           
  1090                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
  1091                           
  1092                           ;incstack = 0
  1093  0000' 909E               	bcf	3998,0,c	;volatile
  1094                           
  1095                           ;tmr1.c: 164: TMR1H = (timer1ReloadVal >> 8);
  1096  0002' C001' F000'        	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  1097  0006' C000' F001'        	movff	??_TMR1_ISR,??_TMR1_ISR+1
  1098  000A' 6A00'              	clrf	(??_TMR1_ISR+2)& (0+255),c
  1099  000C' 5001'              	movf	??_TMR1_ISR+1,w,c
  1100  000E' 6ECF               	movwf	4047,c	;volatile
  1101                           
  1102                           ;tmr1.c: 165: TMR1L = (uint8_t) timer1ReloadVal;
  1103  0010' C000' FFCE         	movff	_timer1ReloadVal,4046	;volatile
  1104                           
  1105                           ;tmr1.c: 169: TMR1_CallBack();
  1106  0014' EC00' F000'        	call	_TMR1_CallBack	;wreg free
  1107  0018' 0012               	return	
  1108  001A'                    __end_of_TMR1_ISR:
  1109                           	opt stack 0
  1110                           pclatu	equ	0xFFB
  1111                           pclath	equ	0xFFA
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           prodh	equ	0xFF4
  1117                           prodl	equ	0xFF3
  1118                           intcon	equ	0xFF2
  1119                           intcon2	equ	0xFF1
  1120                           postinc0	equ	0xFEE
  1121                           fsr0h	equ	0xFEA
  1122                           fsr0l	equ	0xFE9
  1123                           wreg	equ	0xFE8
  1124                           fsr1h	equ	0xFE2
  1125                           fsr1l	equ	0xFE1
  1126                           fsr2h	equ	0xFDA
  1127                           fsr2l	equ	0xFD9
  1128                           
  1129 ;; *************** function _TMR1_CallBack *****************
  1130 ;; Defined at:
  1131 ;;		line 173 in file "mcc_generated_files/tmr1.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;		None
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;		None
  1136 ;; Return value:  Size  Location     Type
  1137 ;;		None               void
  1138 ;; Registers used:
  1139 ;;		None
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1145 ;;      Params:         0       0       0       0       0       0       0
  1146 ;;      Locals:         0       0       0       0       0       0       0
  1147 ;;      Temps:          0       0       0       0       0       0       0
  1148 ;;      Totals:         0       0       0       0       0       0       0
  1149 ;;Total ram usage:        0 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; This function calls:
  1152 ;;		Nothing
  1153 ;; This function is called by:
  1154 ;;		_TMR1_ISR
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text11
  1159  0000'                    __ptext11:
  1160                           	opt stack 0
  1161  0000'                    _TMR1_CallBack:
  1162                           	opt stack 25
  1163                           
  1164                           ;incstack = 0
  1165  0000' 0012               	return	
  1166  0002'                    __end_of_TMR1_CallBack:
  1167                           	opt stack 0
  1168                           pclatu	equ	0xFFB
  1169                           pclath	equ	0xFFA
  1170                           tblptru	equ	0xFF8
  1171                           tblptrh	equ	0xFF7
  1172                           tblptrl	equ	0xFF6
  1173                           tablat	equ	0xFF5
  1174                           prodh	equ	0xFF4
  1175                           prodl	equ	0xFF3
  1176                           intcon	equ	0xFF2
  1177                           intcon2	equ	0xFF1
  1178                           postinc0	equ	0xFEE
  1179                           fsr0h	equ	0xFEA
  1180                           fsr0l	equ	0xFE9
  1181                           wreg	equ	0xFE8
  1182                           fsr1h	equ	0xFE2
  1183                           fsr1l	equ	0xFE1
  1184                           fsr2h	equ	0xFDA
  1185                           fsr2l	equ	0xFD9
  1186                           
  1187 ;; *************** function _EUSART1_Transmit_ISR *****************
  1188 ;; Defined at:
  1189 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;		None
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;		None
  1194 ;; Return value:  Size  Location     Type
  1195 ;;		None               void
  1196 ;; Registers used:
  1197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1203 ;;      Params:         0       0       0       0       0       0       0
  1204 ;;      Locals:         0       0       0       0       0       0       0
  1205 ;;      Temps:          1       0       0       0       0       0       0
  1206 ;;      Totals:         1       0       0       0       0       0       0
  1207 ;;Total ram usage:        1 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; This function calls:
  1210 ;;		Nothing
  1211 ;; This function is called by:
  1212 ;;		_INTERRUPT_InterruptManager
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text12
  1217  0000'                    __ptext12:
  1218                           	opt stack 0
  1219  0000'                    _EUSART1_Transmit_ISR:
  1220                           	opt stack 26
  1221                           
  1222                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  1223                           
  1224                           ;incstack = 0
  1225  0000' 0E08               	movlw	8
  1226  0002' 5C02'              	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  1227  0004' B0D8               	btfsc	status,0,c
  1228  0006' D014               	goto	i2l122
  1229                           
  1230                           ;eusart1.c: 178: {
  1231                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  1232  0008' 502C'              	movf	_eusart1TxTail,w,c
  1233  000A' 0D01               	mullw	1
  1234  000C' 0E00'              	movlw	low _eusart1TxBuffer
  1235  000E' 24F3               	addwf	prodl,w,c
  1236  0010' 6ED9               	movwf	fsr2l,c
  1237  0012' 0E00'              	movlw	high _eusart1TxBuffer
  1238  0014' 20F4               	addwfc	prodh,w,c
  1239  0016' 6EDA               	movwf	fsr2h,c
  1240  0018' 50DF               	movf	indf2,w,c
  1241  001A' 6EAD               	movwf	4013,c	;volatile
  1242  001C' 2A2C'              	incf	_eusart1TxTail,f,c
  1243                           
  1244                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  1245  001E' 0E07               	movlw	7
  1246  0020' 642C'              	cpfsgt	_eusart1TxTail,c
  1247  0022' D004               	goto	i2l1068
  1248                           
  1249                           ;eusart1.c: 181: {
  1250                           ;eusart1.c: 182: eusart1TxTail = 0;
  1251  0024' 6E00'              	movwf	??_EUSART1_Transmit_ISR& (0+255),c
  1252  0026' 0E00               	movlw	0
  1253  0028' 6E2C'              	movwf	_eusart1TxTail,c
  1254  002A' 5000'              	movf	??_EUSART1_Transmit_ISR& (0+255),w,c
  1255  002C'                    i2l1068:
  1256                           
  1257                           ;eusart1.c: 183: }
  1258                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  1259  002C' 2A02'              	incf	_eusart1TxBufferRemaining,f,c	;volatile
  1260                           
  1261                           ;eusart1.c: 185: }
  1262  002E' 0012               	return	
  1263  0030'                    i2l122:
  1264                           
  1265                           ;eusart1.c: 186: else
  1266                           ;eusart1.c: 187: {
  1267                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  1268  0030' 989D               	bcf	3997,4,c	;volatile
  1269  0032' 0012               	return	
  1270  0034'                    __end_of_EUSART1_Transmit_ISR:
  1271                           	opt stack 0
  1272                           pclatu	equ	0xFFB
  1273                           pclath	equ	0xFFA
  1274                           tblptru	equ	0xFF8
  1275                           tblptrh	equ	0xFF7
  1276                           tblptrl	equ	0xFF6
  1277                           tablat	equ	0xFF5
  1278                           prodh	equ	0xFF4
  1279                           prodl	equ	0xFF3
  1280                           intcon	equ	0xFF2
  1281                           intcon2	equ	0xFF1
  1282                           postinc0	equ	0xFEE
  1283                           fsr0h	equ	0xFEA
  1284                           fsr0l	equ	0xFE9
  1285                           wreg	equ	0xFE8
  1286                           fsr1h	equ	0xFE2
  1287                           fsr1l	equ	0xFE1
  1288                           indf2	equ	0xFDF
  1289                           fsr2h	equ	0xFDA
  1290                           fsr2l	equ	0xFD9
  1291                           status	equ	0xFD8
  1292                           
  1293 ;; *************** function _EUSART1_Receive_ISR *****************
  1294 ;; Defined at:
  1295 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;		None
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;		None
  1300 ;; Return value:  Size  Location     Type
  1301 ;;		None               void
  1302 ;; Registers used:
  1303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1309 ;;      Params:         0       0       0       0       0       0       0
  1310 ;;      Locals:         0       0       0       0       0       0       0
  1311 ;;      Temps:          1       0       0       0       0       0       0
  1312 ;;      Totals:         1       0       0       0       0       0       0
  1313 ;;Total ram usage:        1 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; This function calls:
  1316 ;;		Nothing
  1317 ;; This function is called by:
  1318 ;;		_INTERRUPT_InterruptManager
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text13
  1323  0000'                    __ptext13:
  1324                           	opt stack 0
  1325  0000'                    _EUSART1_Receive_ISR:
  1326                           	opt stack 26
  1327                           
  1328                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  1329                           
  1330                           ;incstack = 0
  1331  0000' A2AB               	btfss	4011,1,c	;volatile
  1332  0002' D002               	goto	i2l1074
  1333                           
  1334                           ;eusart1.c: 195: {
  1335                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  1336  0004' 98AB               	bcf	4011,4,c	;volatile
  1337                           
  1338                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  1339  0006' 88AB               	bsf	4011,4,c	;volatile
  1340  0008'                    i2l1074:
  1341                           
  1342                           ;eusart1.c: 200: }
  1343                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  1344  0008' 5029'              	movf	_eusart1RxHead,w,c
  1345  000A' 0D01               	mullw	1
  1346  000C' 0E00'              	movlw	low _eusart1RxBuffer
  1347  000E' 24F3               	addwf	prodl,w,c
  1348  0010' 6ED9               	movwf	fsr2l,c
  1349  0012' 0E00'              	movlw	high _eusart1RxBuffer
  1350  0014' 20F4               	addwfc	prodh,w,c
  1351  0016' 6EDA               	movwf	fsr2h,c
  1352  0018' CFAE FFDF          	movff	4014,indf2	;volatile
  1353  001C' 2A29'              	incf	_eusart1RxHead,f,c
  1354                           
  1355                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  1356  001E' 0E07               	movlw	7
  1357  0020' 6429'              	cpfsgt	_eusart1RxHead,c
  1358  0022' D004               	goto	i2l1082
  1359                           
  1360                           ;eusart1.c: 205: {
  1361                           ;eusart1.c: 206: eusart1RxHead = 0;
  1362  0024' 6E00'              	movwf	??_EUSART1_Receive_ISR& (0+255),c
  1363  0026' 0E00               	movlw	0
  1364  0028' 6E29'              	movwf	_eusart1RxHead,c
  1365  002A' 5000'              	movf	??_EUSART1_Receive_ISR& (0+255),w,c
  1366  002C'                    i2l1082:
  1367                           
  1368                           ;eusart1.c: 207: }
  1369                           ;eusart1.c: 208: eusart1RxCount++;
  1370  002C' 2A28'              	incf	_eusart1RxCount,f,c	;volatile
  1371  002E' 0012               	return	
  1372  0030'                    __end_of_EUSART1_Receive_ISR:
  1373                           	opt stack 0
  1374                           pclatu	equ	0xFFB
  1375                           pclath	equ	0xFFA
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           prodh	equ	0xFF4
  1381                           prodl	equ	0xFF3
  1382                           intcon	equ	0xFF2
  1383                           intcon2	equ	0xFF1
  1384                           postinc0	equ	0xFEE
  1385                           fsr0h	equ	0xFEA
  1386                           fsr0l	equ	0xFE9
  1387                           wreg	equ	0xFE8
  1388                           fsr1h	equ	0xFE2
  1389                           fsr1l	equ	0xFE1
  1390                           indf2	equ	0xFDF
  1391                           fsr2h	equ	0xFDA
  1392                           fsr2l	equ	0xFD9
  1393                           status	equ	0xFD8
  1394                           
  1395 ;; *************** function _ADC_ISR *****************
  1396 ;; Defined at:
  1397 ;;		line 81 in file "mcc_generated_files/adc.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;		None
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  ADC_Result      2    6[COMRAM] int 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;		None               void
  1404 ;; Registers used:
  1405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1411 ;;      Params:         0       0       0       0       0       0       0
  1412 ;;      Locals:         2       0       0       0       0       0       0
  1413 ;;      Temps:          2       0       0       0       0       0       0
  1414 ;;      Totals:         4       0       0       0       0       0       0
  1415 ;;Total ram usage:        4 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    1
  1418 ;; This function calls:
  1419 ;;		_ADC_GetConversionResult
  1420 ;;		_ADC_StartConversion
  1421 ;; This function is called by:
  1422 ;;		_INTERRUPT_InterruptManager
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text14
  1427  0000'                    __ptext14:
  1428                           	opt stack 0
  1429  0000'                    _ADC_ISR:
  1430                           	opt stack 25
  1431                           
  1432                           ;adc.c: 85: PIR1bits.ADIF = 0;
  1433                           
  1434                           ;incstack = 0
  1435  0000' 9C9E               	bcf	3998,6,c	;volatile
  1436                           
  1437                           ;adc.c: 86: int ADC_Result = 0;
  1438  0002' 0E00               	movlw	0
  1439  0004' 6E07'              	movwf	ADC_ISR@ADC_Result+1,c
  1440  0006' 0E00               	movlw	0
  1441  0008' 6E06'              	movwf	ADC_ISR@ADC_Result,c
  1442                           
  1443                           ;adc.c: 87: if (Temp_Aquire){
  1444  000A' 0100'              	movlb	_Temp_Aquire shr (0+8)	; () unknown bank
  1445  000C' 0100'              	movlb	_Temp_Aquire shr (0+8)	; () unknown bank
  1446  000E' 5100'              	movf	_Temp_Aquire& (0+255),w,b
  1447  0010' B4D8               	btfsc	status,2,c
  1448  0012' D066               	goto	i2l1118
  1449                           
  1450                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  1451  0014' EC00' F000'        	call	_ADC_GetConversionResult	;wreg free
  1452  0018' C000' F006'        	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  1453  001C' C001' F007'        	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  1454                           
  1455                           ;adc.c: 90: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  1456  0020' 90D8               	bcf	status,0,c
  1457  0022' 3424'              	rlcf	_ADC_Buffer_Point,w,c
  1458  0024' 6E00'              	movwf	??_ADC_ISR& (0+255),c
  1459  0026' 3425'              	rlcf	_ADC_Buffer_Point+1,w,c
  1460  0028' 6E00'              	movwf	(??_ADC_ISR+1)& (0+255),c
  1461  002A' 0E00'              	movlw	low _Battery_Adc
  1462  002C' 2404'              	addwf	??_ADC_ISR,w,c
  1463  002E' 6ED9               	movwf	fsr2l,c
  1464  0030' 0E00'              	movlw	high _Battery_Adc
  1465  0032' 2005'              	addwfc	??_ADC_ISR+1,w,c
  1466  0034' 6EDA               	movwf	fsr2h,c
  1467  0036' C006' FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  1468  003A' C007' FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  1469                           
  1470                           ;adc.c: 91: ADC_Buffer_Point++;
  1471  003E' 4A24'              	infsnz	_ADC_Buffer_Point,f,c
  1472  0040' 2A25'              	incf	_ADC_Buffer_Point+1,f,c
  1473                           
  1474                           ;adc.c: 92: switch ( ADC_Buffer_Point )
  1475  0042' D02A               	goto	i2l1116
  1476  0044'                    i2l1094:
  1477                           
  1478                           ;adc.c: 95: ADC_StartConversion(Battery2);
  1479  0044' 0E03               	movlw	3
  1480  0046' EC00' F000'        	call	_ADC_StartConversion
  1481                           
  1482                           ;adc.c: 96: break;
  1483  004A' D04A               	goto	i2l1118
  1484  004C'                    i2l1096:
  1485                           
  1486                           ;adc.c: 98: ADC_StartConversion(Battery3);
  1487  004C' 0E04               	movlw	4
  1488  004E' EC00' F000'        	call	_ADC_StartConversion
  1489                           
  1490                           ;adc.c: 99: break;
  1491  0052' D046               	goto	i2l1118
  1492  0054'                    i2l1098:
  1493                           
  1494                           ;adc.c: 101: ADC_StartConversion(Battery4);
  1495  0054' 0E05               	movlw	5
  1496  0056' EC00' F000'        	call	_ADC_StartConversion
  1497                           
  1498                           ;adc.c: 102: break;
  1499  005A' D042               	goto	i2l1118
  1500  005C'                    i2l1100:
  1501                           
  1502                           ;adc.c: 104: ADC_StartConversion(Battery5);
  1503  005C' 0E18               	movlw	24
  1504  005E' EC00' F000'        	call	_ADC_StartConversion
  1505                           
  1506                           ;adc.c: 105: break;
  1507  0062' D03E               	goto	i2l1118
  1508  0064'                    i2l1102:
  1509                           
  1510                           ;adc.c: 107: ADC_StartConversion(Battery6);
  1511  0064' 0E1A               	movlw	26
  1512  0066' EC00' F000'        	call	_ADC_StartConversion
  1513                           
  1514                           ;adc.c: 108: break;
  1515  006A' D03A               	goto	i2l1118
  1516  006C'                    i2l1104:
  1517                           
  1518                           ;adc.c: 110: ADC_StartConversion(Battery7);
  1519  006C' 0E1B               	movlw	27
  1520  006E' EC00' F000'        	call	_ADC_StartConversion
  1521                           
  1522                           ;adc.c: 111: break;
  1523  0072' D036               	goto	i2l1118
  1524  0074'                    i2l1106:
  1525                           
  1526                           ;adc.c: 113: ADC_StartConversion(Battery8);
  1527  0074' 0E08               	movlw	8
  1528  0076' EC00' F000'        	call	_ADC_StartConversion
  1529                           
  1530                           ;adc.c: 114: break;
  1531  007A' D032               	goto	i2l1118
  1532  007C'                    i2l1108:
  1533                           
  1534                           ;adc.c: 116: ADC_StartConversion(Battery9);
  1535  007C' 0E0B               	movlw	11
  1536  007E' EC00' F000'        	call	_ADC_StartConversion
  1537                           
  1538                           ;adc.c: 117: break;
  1539  0082' D02E               	goto	i2l1118
  1540  0084'                    i2l1110:
  1541                           
  1542                           ;adc.c: 119: Temp_Aquire = 0;
  1543  0084' 6E00'              	movwf	??_ADC_ISR& (0+255),c
  1544  0086' 0E00               	movlw	0
  1545  0088' 0100'              	movlb	_Temp_Aquire shr (0+8)	; () unknown bank
  1546  008A' 0100'              	movlb	_Temp_Aquire shr (0+8)	; () unknown bank
  1547  008C' 6F00'              	movwf	_Temp_Aquire& (0+255),b
  1548  008E' 5000'              	movf	??_ADC_ISR& (0+255),w,c
  1549                           
  1550                           ;adc.c: 120: ADC_StartConversion(Battery10);
  1551  0090' 0E0D               	movlw	13
  1552  0092' EC00' F000'        	call	_ADC_StartConversion
  1553                           
  1554                           ;adc.c: 121: break;
  1555  0096' D024               	goto	i2l1118
  1556  0098'                    i2l1116:
  1557  0098' C024' F004'        	movff	_ADC_Buffer_Point,??_ADC_ISR
  1558  009C' C025' F005'        	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  1559                           
  1560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1561                           ; Switch size 1, requested type "space"
  1562                           ; Number of cases is 1, Range of values is 0 to 0
  1563                           ; switch strategies available:
  1564                           ; Name         Instructions Cycles
  1565                           ; simple_byte            4     3 (average)
  1566                           ;	Chosen strategy is simple_byte
  1567  00A0' 5005'              	movf	??_ADC_ISR+1,w,c
  1568  00A2' 0A00               	xorlw	0	; case 0
  1569  00A4' A4D8               	btfss	status,2,c
  1570  00A6' D01C               	goto	i2l1118
  1571                           
  1572                           ; Switch size 1, requested type "space"
  1573                           ; Number of cases is 9, Range of values is 1 to 9
  1574                           ; switch strategies available:
  1575                           ; Name         Instructions Cycles
  1576                           ; simple_byte           28    15 (average)
  1577                           ;	Chosen strategy is simple_byte
  1578  00A8' 5004'              	movf	??_ADC_ISR,w,c
  1579  00AA' 0A01               	xorlw	1	; case 1
  1580  00AC' B4D8               	btfsc	status,2,c
  1581  00AE' D7CA               	goto	i2l1094
  1582  00B0' 0A03               	xorlw	3	; case 2
  1583  00B2' B4D8               	btfsc	status,2,c
  1584  00B4' D7CB               	goto	i2l1096
  1585  00B6' 0A01               	xorlw	1	; case 3
  1586  00B8' B4D8               	btfsc	status,2,c
  1587  00BA' D7CC               	goto	i2l1098
  1588  00BC' 0A07               	xorlw	7	; case 4
  1589  00BE' B4D8               	btfsc	status,2,c
  1590  00C0' D7CD               	goto	i2l1100
  1591  00C2' 0A01               	xorlw	1	; case 5
  1592  00C4' B4D8               	btfsc	status,2,c
  1593  00C6' D7CE               	goto	i2l1102
  1594  00C8' 0A03               	xorlw	3	; case 6
  1595  00CA' B4D8               	btfsc	status,2,c
  1596  00CC' D7CF               	goto	i2l1104
  1597  00CE' 0A01               	xorlw	1	; case 7
  1598  00D0' B4D8               	btfsc	status,2,c
  1599  00D2' D7D0               	goto	i2l1106
  1600  00D4' 0A0F               	xorlw	15	; case 8
  1601  00D6' B4D8               	btfsc	status,2,c
  1602  00D8' D7D1               	goto	i2l1108
  1603  00DA' 0A01               	xorlw	1	; case 9
  1604  00DC' B4D8               	btfsc	status,2,c
  1605  00DE' D7D2               	goto	i2l1110
  1606  00E0'                    i2l1118:
  1607                           
  1608                           ;adc.c: 123: }
  1609                           ;adc.c: 124: if (Volt_Aquire){
  1610  00E0' 0100'              	movlb	_Volt_Aquire shr (0+8)	; () unknown bank
  1611  00E2' 0100'              	movlb	_Volt_Aquire shr (0+8)	; () unknown bank
  1612  00E4' 5100'              	movf	_Volt_Aquire& (0+255),w,b
  1613  00E6' B4D8               	btfsc	status,2,c
  1614  00E8' 0012               	return	
  1615                           
  1616                           ;adc.c: 127: ADC_Result = ADC_GetConversionResult();
  1617  00EA' EC00' F000'        	call	_ADC_GetConversionResult	;wreg free
  1618  00EE' C000' F006'        	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  1619  00F2' C001' F007'        	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  1620                           
  1621                           ;adc.c: 128: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  1622  00F6' 90D8               	bcf	status,0,c
  1623  00F8' 3424'              	rlcf	_ADC_Buffer_Point,w,c
  1624  00FA' 6E00'              	movwf	??_ADC_ISR& (0+255),c
  1625  00FC' 3425'              	rlcf	_ADC_Buffer_Point+1,w,c
  1626  00FE' 6E00'              	movwf	(??_ADC_ISR+1)& (0+255),c
  1627  0100' 0E00'              	movlw	low _Battery_Adc
  1628  0102' 2404'              	addwf	??_ADC_ISR,w,c
  1629  0104' 6ED9               	movwf	fsr2l,c
  1630  0106' 0E00'              	movlw	high _Battery_Adc
  1631  0108' 2005'              	addwfc	??_ADC_ISR+1,w,c
  1632  010A' 6EDA               	movwf	fsr2h,c
  1633  010C' C006' FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  1634  0110' C007' FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  1635                           
  1636                           ;adc.c: 129: ADC_Buffer_Point++;
  1637  0114' 4A24'              	infsnz	_ADC_Buffer_Point,f,c
  1638  0116' 2A25'              	incf	_ADC_Buffer_Point+1,f,c
  1639                           
  1640                           ;adc.c: 130: switch ( ADC_Buffer_Point )
  1641  0118' D02A               	goto	i2l1148
  1642  011A'                    i2l1126:
  1643                           
  1644                           ;adc.c: 133: ADC_StartConversion(Battery2);
  1645  011A' 0E03               	movlw	3
  1646  011C' EC00' F000'        	call	_ADC_StartConversion
  1647                           
  1648                           ;adc.c: 134: break;
  1649  0120' 0012               	return	
  1650  0122'                    i2l1128:
  1651                           
  1652                           ;adc.c: 136: ADC_StartConversion(Battery3);
  1653  0122' 0E04               	movlw	4
  1654  0124' EC00' F000'        	call	_ADC_StartConversion
  1655                           
  1656                           ;adc.c: 137: break;
  1657  0128' 0012               	return	
  1658  012A'                    i2l1130:
  1659                           
  1660                           ;adc.c: 139: ADC_StartConversion(Battery4);
  1661  012A' 0E05               	movlw	5
  1662  012C' EC00' F000'        	call	_ADC_StartConversion
  1663                           
  1664                           ;adc.c: 140: break;
  1665  0130' 0012               	return	
  1666  0132'                    i2l1132:
  1667                           
  1668                           ;adc.c: 142: ADC_StartConversion(Battery5);
  1669  0132' 0E18               	movlw	24
  1670  0134' EC00' F000'        	call	_ADC_StartConversion
  1671                           
  1672                           ;adc.c: 143: break;
  1673  0138' 0012               	return	
  1674  013A'                    i2l1134:
  1675                           
  1676                           ;adc.c: 145: ADC_StartConversion(Battery6);
  1677  013A' 0E1A               	movlw	26
  1678  013C' EC00' F000'        	call	_ADC_StartConversion
  1679                           
  1680                           ;adc.c: 146: break;
  1681  0140' 0012               	return	
  1682  0142'                    i2l1136:
  1683                           
  1684                           ;adc.c: 148: ADC_StartConversion(Battery7);
  1685  0142' 0E1B               	movlw	27
  1686  0144' EC00' F000'        	call	_ADC_StartConversion
  1687                           
  1688                           ;adc.c: 149: break;
  1689  0148' 0012               	return	
  1690  014A'                    i2l1138:
  1691                           
  1692                           ;adc.c: 151: ADC_StartConversion(Battery8);
  1693  014A' 0E08               	movlw	8
  1694  014C' EC00' F000'        	call	_ADC_StartConversion
  1695                           
  1696                           ;adc.c: 152: break;
  1697  0150' 0012               	return	
  1698  0152'                    i2l1140:
  1699                           
  1700                           ;adc.c: 154: ADC_StartConversion(Battery9);
  1701  0152' 0E0B               	movlw	11
  1702  0154' EC00' F000'        	call	_ADC_StartConversion
  1703                           
  1704                           ;adc.c: 155: break;
  1705  0158' 0012               	return	
  1706  015A'                    i2l1142:
  1707                           
  1708                           ;adc.c: 157: Volt_Aquire = 0;
  1709  015A' 6E00'              	movwf	??_ADC_ISR& (0+255),c
  1710  015C' 0E00               	movlw	0
  1711  015E' 0100'              	movlb	_Volt_Aquire shr (0+8)	; () unknown bank
  1712  0160' 0100'              	movlb	_Volt_Aquire shr (0+8)	; () unknown bank
  1713  0162' 6F00'              	movwf	_Volt_Aquire& (0+255),b
  1714  0164' 5000'              	movf	??_ADC_ISR& (0+255),w,c
  1715                           
  1716                           ;adc.c: 158: ADC_StartConversion(Battery10);
  1717  0166' 0E0D               	movlw	13
  1718  0168' EC00' F000'        	call	_ADC_StartConversion
  1719                           
  1720                           ;adc.c: 159: break;
  1721  016C' 0012               	return	
  1722  016E'                    i2l1148:
  1723  016E' C024' F004'        	movff	_ADC_Buffer_Point,??_ADC_ISR
  1724  0172' C025' F005'        	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  1725                           
  1726                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1727                           ; Switch size 1, requested type "space"
  1728                           ; Number of cases is 1, Range of values is 0 to 0
  1729                           ; switch strategies available:
  1730                           ; Name         Instructions Cycles
  1731                           ; simple_byte            4     3 (average)
  1732                           ;	Chosen strategy is simple_byte
  1733  0176' 5005'              	movf	??_ADC_ISR+1,w,c
  1734  0178' 0A00               	xorlw	0	; case 0
  1735  017A' A4D8               	btfss	status,2,c
  1736  017C' 0012               	return	
  1737                           
  1738                           ; Switch size 1, requested type "space"
  1739                           ; Number of cases is 9, Range of values is 1 to 9
  1740                           ; switch strategies available:
  1741                           ; Name         Instructions Cycles
  1742                           ; simple_byte           28    15 (average)
  1743                           ;	Chosen strategy is simple_byte
  1744  017E' 5004'              	movf	??_ADC_ISR,w,c
  1745  0180' 0A01               	xorlw	1	; case 1
  1746  0182' B4D8               	btfsc	status,2,c
  1747  0184' D7CA               	goto	i2l1126
  1748  0186' 0A03               	xorlw	3	; case 2
  1749  0188' B4D8               	btfsc	status,2,c
  1750  018A' D7CB               	goto	i2l1128
  1751  018C' 0A01               	xorlw	1	; case 3
  1752  018E' B4D8               	btfsc	status,2,c
  1753  0190' D7CC               	goto	i2l1130
  1754  0192' 0A07               	xorlw	7	; case 4
  1755  0194' B4D8               	btfsc	status,2,c
  1756  0196' D7CD               	goto	i2l1132
  1757  0198' 0A01               	xorlw	1	; case 5
  1758  019A' B4D8               	btfsc	status,2,c
  1759  019C' D7CE               	goto	i2l1134
  1760  019E' 0A03               	xorlw	3	; case 6
  1761  01A0' B4D8               	btfsc	status,2,c
  1762  01A2' D7CF               	goto	i2l1136
  1763  01A4' 0A01               	xorlw	1	; case 7
  1764  01A6' B4D8               	btfsc	status,2,c
  1765  01A8' D7D0               	goto	i2l1138
  1766  01AA' 0A0F               	xorlw	15	; case 8
  1767  01AC' B4D8               	btfsc	status,2,c
  1768  01AE' D7D1               	goto	i2l1140
  1769  01B0' 0A01               	xorlw	1	; case 9
  1770  01B2' A4D8               	btfss	status,2,c
  1771  01B4' 0012               	return	
  1772  01B6' D7D1               	goto	i2l1142
  1773  01B8'                    __end_of_ADC_ISR:
  1774                           	opt stack 0
  1775                           pclatu	equ	0xFFB
  1776                           pclath	equ	0xFFA
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           prodh	equ	0xFF4
  1782                           prodl	equ	0xFF3
  1783                           intcon	equ	0xFF2
  1784                           intcon2	equ	0xFF1
  1785                           postinc0	equ	0xFEE
  1786                           fsr0h	equ	0xFEA
  1787                           fsr0l	equ	0xFE9
  1788                           wreg	equ	0xFE8
  1789                           fsr1h	equ	0xFE2
  1790                           fsr1l	equ	0xFE1
  1791                           indf2	equ	0xFDF
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _ADC_StartConversion *****************
  1799 ;; Defined at:
  1800 ;;		line 35 in file "mcc_generated_files/adc.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  channel         1    wreg     enum E8837
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  channel         1    1[COMRAM] enum E8837
  1805 ;; Return value:  Size  Location     Type
  1806 ;;		None               void
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1814 ;;      Params:         0       0       0       0       0       0       0
  1815 ;;      Locals:         1       0       0       0       0       0       0
  1816 ;;      Temps:          1       0       0       0       0       0       0
  1817 ;;      Totals:         2       0       0       0       0       0       0
  1818 ;;Total ram usage:        2 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; This function calls:
  1821 ;;		Nothing
  1822 ;; This function is called by:
  1823 ;;		_ADC_ISR
  1824 ;;		_Battery_Read
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text15
  1829  0000'                    __ptext15:
  1830                           	opt stack 0
  1831  0000'                    _ADC_StartConversion:
  1832                           	opt stack 25
  1833                           
  1834                           ;incstack = 0
  1835                           ;ADC_StartConversion@channel stored from wreg
  1836  0000' CFE8 F001'         	movff	wreg,ADC_StartConversion@channel
  1837                           
  1838                           ;adc.c: 38: ADCON0bits.CHS = channel;
  1839  0004' C001' F000'        	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  1840  0008' 4600'              	rlncf	??_ADC_StartConversion,f,c
  1841  000A' 4600'              	rlncf	??_ADC_StartConversion,f,c
  1842  000C' 50C2               	movf	4034,w,c	;volatile
  1843  000E' 1800'              	xorwf	??_ADC_StartConversion,w,c
  1844  0010' 0B83               	andlw	-125
  1845  0012' 1800'              	xorwf	??_ADC_StartConversion,w,c
  1846  0014' 6EC2               	movwf	4034,c	;volatile
  1847                           
  1848                           ;adc.c: 41: ADCON0bits.ADON = 1;
  1849  0016' 80C2               	bsf	4034,0,c	;volatile
  1850                           
  1851                           ;adc.c: 45: ADCON0bits.GO_nDONE = 1;
  1852  0018' 82C2               	bsf	4034,1,c	;volatile
  1853  001A' 0012               	return	
  1854  001C'                    __end_of_ADC_StartConversion:
  1855                           	opt stack 0
  1856                           pclatu	equ	0xFFB
  1857                           pclath	equ	0xFFA
  1858                           tblptru	equ	0xFF8
  1859                           tblptrh	equ	0xFF7
  1860                           tblptrl	equ	0xFF6
  1861                           tablat	equ	0xFF5
  1862                           prodh	equ	0xFF4
  1863                           prodl	equ	0xFF3
  1864                           intcon	equ	0xFF2
  1865                           intcon2	equ	0xFF1
  1866                           postinc0	equ	0xFEE
  1867                           fsr0h	equ	0xFEA
  1868                           fsr0l	equ	0xFE9
  1869                           wreg	equ	0xFE8
  1870                           fsr1h	equ	0xFE2
  1871                           fsr1l	equ	0xFE1
  1872                           indf2	equ	0xFDF
  1873                           postinc2	equ	0xFDE
  1874                           postdec2	equ	0xFDD
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _ADC_GetConversionResult *****************
  1880 ;; Defined at:
  1881 ;;		line 54 in file "mcc_generated_files/adc.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  2    0[COMRAM] unsigned int 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1895 ;;      Params:         2       0       0       0       0       0       0
  1896 ;;      Locals:         0       0       0       0       0       0       0
  1897 ;;      Temps:          2       0       0       0       0       0       0
  1898 ;;      Totals:         4       0       0       0       0       0       0
  1899 ;;Total ram usage:        4 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_ADC_ISR
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text16
  1909  0000'                    __ptext16:
  1910                           	opt stack 0
  1911  0000'                    _ADC_GetConversionResult:
  1912                           	opt stack 25
  1913                           
  1914                           ;adc.c: 57: return ((ADRESH << 8) + ADRESL);
  1915                           
  1916                           ;incstack = 0
  1917  0000' 50C4               	movf	4036,w,c	;volatile
  1918  0002' 6E00'              	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  1919  0004' 6A00'              	clrf	??_ADC_GetConversionResult& (0+255),c
  1920  0006' 50C3               	movf	4035,w,c	;volatile
  1921  0008' 2402'              	addwf	??_ADC_GetConversionResult,w,c
  1922  000A' 6E00'              	movwf	?_ADC_GetConversionResult,c
  1923  000C' 0E00               	movlw	0
  1924  000E' 2003'              	addwfc	??_ADC_GetConversionResult+1,w,c
  1925  0010' 6E01'              	movwf	?_ADC_GetConversionResult+1,c
  1926  0012' 0012               	return	
  1927  0014'                    __end_of_ADC_GetConversionResult:
  1928                           	opt stack 0
  1929  0000                     pclatu	equ	0xFFB
  1930                           pclath	equ	0xFFA
  1931                           tblptru	equ	0xFF8
  1932                           tblptrh	equ	0xFF7
  1933                           tblptrl	equ	0xFF6
  1934                           tablat	equ	0xFF5
  1935                           prodh	equ	0xFF4
  1936                           prodl	equ	0xFF3
  1937                           intcon	equ	0xFF2
  1938                           intcon2	equ	0xFF1
  1939                           postinc0	equ	0xFEE
  1940                           fsr0h	equ	0xFEA
  1941                           fsr0l	equ	0xFE9
  1942                           wreg	equ	0xFE8
  1943                           fsr1h	equ	0xFE2
  1944                           fsr1l	equ	0xFE1
  1945                           indf2	equ	0xFDF
  1946                           postinc2	equ	0xFDE
  1947                           postdec2	equ	0xFDD
  1948                           fsr2h	equ	0xFDA
  1949                           fsr2l	equ	0xFD9
  1950                           status	equ	0xFD8
  1951                           pclatu	equ	0xFFB
  1952                           pclath	equ	0xFFA
  1953                           tblptru	equ	0xFF8
  1954                           tblptrh	equ	0xFF7
  1955                           tblptrl	equ	0xFF6
  1956                           tablat	equ	0xFF5
  1957                           prodh	equ	0xFF4
  1958                           prodl	equ	0xFF3
  1959                           intcon	equ	0xFF2
  1960                           intcon2	equ	0xFF1
  1961                           postinc0	equ	0xFEE
  1962                           fsr0h	equ	0xFEA
  1963                           fsr0l	equ	0xFE9
  1964                           wreg	equ	0xFE8
  1965                           fsr1h	equ	0xFE2
  1966                           fsr1l	equ	0xFE1
  1967                           indf2	equ	0xFDF
  1968                           postinc2	equ	0xFDE
  1969                           postdec2	equ	0xFDD
  1970                           fsr2h	equ	0xFDA
  1971                           fsr2l	equ	0xFD9
  1972                           status	equ	0xFD8
  1973                           
  1974                           	psect	rparam
  1975  0000                     pclatu	equ	0xFFB
  1976                           pclath	equ	0xFFA
  1977                           tblptru	equ	0xFF8
  1978                           tblptrh	equ	0xFF7
  1979                           tblptrl	equ	0xFF6
  1980                           tablat	equ	0xFF5
  1981                           prodh	equ	0xFF4
  1982                           prodl	equ	0xFF3
  1983                           intcon	equ	0xFF2
  1984                           intcon2	equ	0xFF1
  1985                           postinc0	equ	0xFEE
  1986                           fsr0h	equ	0xFEA
  1987                           fsr0l	equ	0xFE9
  1988                           wreg	equ	0xFE8
  1989                           fsr1h	equ	0xFE2
  1990                           fsr1l	equ	0xFE1
  1991                           indf2	equ	0xFDF
  1992                           postinc2	equ	0xFDE
  1993                           postdec2	equ	0xFDD
  1994                           fsr2h	equ	0xFDA
  1995                           fsr2l	equ	0xFD9
  1996                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         87
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      71
    BANK0           160      5      45
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _SYSTEM_Initialize->_EUSART1_Initialize

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _ADC_ISR->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5       0
                                              0 BANK0      5     0      5
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   1     1      0       0
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0      45
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             3     3      0       0
                                              0 COMRAM     3     3      0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Transmit_ISR                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Receive_ISR                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              4     4      0      45
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (6) _ADC_StartConversion                                  2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      5      2D       4       28.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      47       1       74.7%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74       9        0.0%
DATA                 0      0      74      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Wed Mar 25 17:59:08 2015

           _eusart1TxBufferRemaining 000002                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l297 000008  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 000000                      __end_of_ADC_ISR 0001B8  
                                prod 000FF3                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               _TMR1 000FCE                                 _WPUB 000F61  
                               _main 000000                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000000*                       __CFG_IESO$OFF 000000  
                  ADC_ISR@ADC_Result 000006       __size_of_OSCILLATOR_Initialize 000000  
      __end_of_OSCILLATOR_Initialize 00000E                                ?_main 000000  
                    _TMR1_StartTimer 000000                                _T1CON 000FCD  
                     __CFG_DEBUG$OFF 000000                                i2l122 000030  
                              i2l260 000050                                i2l262 00005C  
                              i2l266 000066                                i2l258 000044  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 000000                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR1_ISR 00001A                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                   __CFG_MCLRE$EXTMCLR 000000  
            __end_of_TMR1_Initialize 000022                          _Battery_Adc 000000  
                              tablat 000FF5                                status 000FD8  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                    __initialization 000000           __end_of_EUSART1_Initialize 00004C  
                       __end_of_main 00000A                            ??_ADC_ISR 000004  
        ?_INTERRUPT_InterruptManager 000000                               ??_main 000017  
                      __activetblptr 000002           ADC_StartConversion@channel 000001  
              ?_EUSART1_Transmit_ISR 000000                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                               _T1GCON 000FCC  
                             _RC1REG 000FAE                               _RC1STA 000FAB  
                             i2l1100 00005C                               i2l1110 000084  
                             i2l1102 000064                               i2l1104 00006C  
                             i2l1130 00012A                               i2l1106 000074  
                             i2l1140 000152                               i2l1132 000132  
                             i2l1108 00007C                               i2l1116 000098  
                             i2l1142 00015A                               i2l1134 00013A  
                             i2l1126 00011A                               i2l1118 0000E0  
                             i2l1136 000142                               i2l1128 000122  
                             i2l1138 00014A                               i2l1082 00002C  
                             i2l1074 000008                               i2l1148 00016E  
                             i2l1068 00002C                               i2l1094 000044  
                             i2l1096 00004C                               i2l1098 000054  
                     __CFG_WDTEN$OFF 000000                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1REG 000FAD                               _TX1STA 000FAC  
                             _TXREG1 000FAD                       __CFG_XINST$OFF 000000  
            __end_of_TMR1_StartTimer 000004                       __CFG_STVREN$ON 000000  
                             clear_0 000006                               clear_1 000012  
                       _Battery_Volt 000000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    _eusart1RxBuffer 000014        __size_of_INTERRUPT_Initialize 000000  
              __end_of_TMR1_CallBack 000002                      _eusart1TxBuffer 00001C  
                   ?_TMR1_Initialize 000000                    _SYSTEM_Initialize 000000  
                         __accesstop 000000*             __end_of__initialization 000018  
                 ?_SYSTEM_Initialize 000000         __size_of_ADC_StartConversion 000000  
                     __pcstackCOMRAM 000000                  ??_SYSTEM_Initialize 000017  
                          ?_TMR1_ISR 000000               ??_EUSART1_Transmit_ISR 000000  
            _ADC_GetConversionResult 000000          __end_of_EUSART1_Receive_ISR 000030  
          __end_of_SYSTEM_Initialize 00001A                        _eusart1RxHead 000029  
                      _eusart1TxHead 00002B                        _eusart1RxTail 00002A  
                         __pbssBANK0 000000                        _eusart1TxTail 00002C  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 000000  
                 __CFG_CCP2MX$PORTC1 000000                     ?_TMR1_StartTimer 000000  
                         ??_TMR1_ISR 000000                   __CFG_CCP3MX$PORTB5 000000  
                            _ADC_ISR 000000              __size_of_ADC_Initialize 000000  
                            _OSCCON2 000FD2                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                        _Temp_Aquire 000000*                     __CFG_PWRTEN$OFF 000000  
                            __Hparam 000000                              __Lparam 000000  
          ??_ADC_GetConversionResult 000002                              __pcinit 000000  
                            __ramtop 000000*                             __ptext0 000000  
                            __ptext1 000000                              __ptext2 000000  
                            __ptext3 000000                              __ptext4 000000  
                            __ptext5 000000                              __ptext6 000000  
                            __ptext7 000000                              __ptext8 000000  
                          _T1CONbits 000FCD                _OSCILLATOR_Initialize 000000  
                 _EUSART1_Initialize 000000             ??_PIN_MANAGER_Initialize 000016  
         __size_of_SYSTEM_Initialize 000000                 end_of_initialization 000018  
                ?_EUSART1_Initialize 000000                        __Lmediumconst 000000* 
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                 ??_EUSART1_Initialize 000016  
                _ADC_StartConversion 000000                          _Volt_Aquire 000000* 
               ?_ADC_StartConversion 000000         __end_of_INTERRUPT_Initialize 00000C  
                  __size_of_TMR1_ISR 000000                       _ADC_Initialize 000000  
             ?_OSCILLATOR_Initialize 000000                  start_initialization 000000  
    __size_of_PIN_MANAGER_Initialize 000000                ??_ADC_StartConversion 000000  
           __size_of_TMR1_Initialize 000000               __end_of_ADC_Initialize 000018  
                           ?_ADC_ISR 000000               __size_of_TMR1_CallBack 000000  
                     _eusart1RxCount 000028                          __pbssCOMRAM 000000  
      __size_of_EUSART1_Transmit_ISR 000000                        __pcstackBANK0 000000  
       __size_of_EUSART1_Receive_ISR 000000               _PIN_MANAGER_Initialize 000000  
                          __pintcode 000000                      ?_ADC_Initialize 000000  
       ??_INTERRUPT_InterruptManager 000008                             _BAUD1CON 000FB8  
           __size_of_TMR1_StartTimer 000000                 _INTERRUPT_Initialize 000000  
                      _TMR1_CallBack 000000                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 000000  
                           _PIR1bits 000F9E                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 000000  
                  ??_TMR1_Initialize 000016                     __size_of_ADC_ISR 000000  
                         _ADCON0bits 000FC2                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 000000                       ?_TMR1_CallBack 000000  
                           __Hrparam 000000*                            _Temp_Adc 000014  
                           _Temp_Get 000026                             __Lrparam 000000* 
           ?_ADC_GetConversionResult 000000                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 000016  
                           _Volt_Get 000027          __size_of_EUSART1_Initialize 000000  
                           __ptext10 000000                             __ptext11 000000  
                           __ptext12 000000                             __ptext13 000000  
                         _T1GCONbits 000FCC                             __ptext14 000000  
                           __ptext15 000000                             __ptext16 000000  
                  ??_TMR1_StartTimer 000016                        __size_of_main 000000  
                         _RC1STAbits 000FAB   __end_of_INTERRUPT_InterruptManager 0000A0  
         _INTERRUPT_InterruptManager 000000                             main@argc 000000  
                           main@argv 000002                  _EUSART1_Receive_ISR 000000  
                         _INTCONbits 000FF2               ??_INTERRUPT_Initialize 000016  
                    ??_TMR1_CallBack 000000                             intlevel2 000000* 
               ?_EUSART1_Receive_ISR 000000          __end_of_ADC_StartConversion 00001C  
            ?_PIN_MANAGER_Initialize 000000      __end_of_ADC_GetConversionResult 000014  
       __end_of_EUSART1_Transmit_ISR 000034                     ??_ADC_Initialize 000016  
                  __CFG_T3CMX$PORTC0 000000                ??_EUSART1_Receive_ISR 000000  
     __end_of_PIN_MANAGER_Initialize 000058                    __CFG_FOSC$INTIO67 000000  
                    _TMR1_Initialize 000000                     _ADC_Buffer_Point 000024  
