

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Oct 08 17:14:05 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1
    97                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    98                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    99  0000                     
   100                           	psect	idataCOMRAM
   101  003AA2                     __pidataCOMRAM:
   102                           	opt stack 0
   103                           
   104                           ;initializer for _Transmit_stall
   105  003AA2  01                 	db	1
   106                           
   107                           	psect	idataBANK0
   108  003A86                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _Temp_DegF
   112  003A86  00                 	db	0
   113  003A87  8C                 	db	140
   114  003A88  42                 	db	66
   115  003A89  00                 	db	0
   116  003A8A  8C                 	db	140
   117  003A8B  42                 	db	66
   118  003A8C  00                 	db	0
   119  003A8D  8C                 	db	140
   120  003A8E  42                 	db	66
   121  003A8F  00                 	db	0
   122  003A90  8C                 	db	140
   123  003A91  42                 	db	66
   124                           
   125                           	psect	idataBANK1
   126  003946                     __pidataBANK1:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _Battery_Volt
   130  003946  00                 	db	0
   131  003947  40                 	db	64
   132  003948  40                 	db	64
   133  003949  00                 	db	0
   134  00394A  40                 	db	64
   135  00394B  40                 	db	64
   136  00394C  00                 	db	0
   137  00394D  40                 	db	64
   138  00394E  40                 	db	64
   139  00394F  00                 	db	0
   140  003950  40                 	db	64
   141  003951  40                 	db	64
   142  003952  00                 	db	0
   143  003953  40                 	db	64
   144  003954  40                 	db	64
   145  003955  00                 	db	0
   146  003956  40                 	db	64
   147  003957  40                 	db	64
   148  003958  00                 	db	0
   149  003959  40                 	db	64
   150  00395A  40                 	db	64
   151  00395B  00                 	db	0
   152  00395C  40                 	db	64
   153  00395D  40                 	db	64
   154  00395E  00                 	db	0
   155  00395F  40                 	db	64
   156  003960  40                 	db	64
   157  003961  00                 	db	0
   158  003962  40                 	db	64
   159  003963  40                 	db	64
   160                           
   161                           	psect	smallconst
   162  000600                     __psmallconst:
   163                           	opt stack 0
   164  000600  00                 	db	0
   165  000601                     log@coeff:
   166                           	opt stack 0
   167  000601  00                 	db	0
   168  000602  00                 	db	0
   169  000603  00                 	db	0
   170  000604  00                 	db	0
   171  000605  80                 	db	128
   172  000606  3F                 	db	63
   173  000607  F0                 	db	240
   174  000608  FF                 	db	255
   175  000609  BE                 	db	190
   176  00060A  E2                 	db	226
   177  00060B  A9                 	db	169
   178  00060C  3E                 	db	62
   179  00060D  83                 	db	131
   180  00060E  76                 	db	118
   181  00060F  BE                 	db	190
   182  000610  AE                 	db	174
   183  000611  2B                 	db	43
   184  000612  3E                 	db	62
   185  000613  3C                 	db	60
   186  000614  C3                 	db	195
   187  000615  BD                 	db	189
   188  000616  D2                 	db	210
   189  000617  13                 	db	19
   190  000618  3D                 	db	61
   191  000619  78                 	db	120
   192  00061A  D3                 	db	211
   193  00061B  BB                 	db	187
   194  00061C                     __end_oflog@coeff:
   195                           	opt stack 0
   196  0000                     _ANSELA	set	3896
   197  0000                     _ANSELB	set	3897
   198  0000                     _ANSELC	set	3898
   199  0000                     _ANSELD	set	3899
   200  0000                     _ANSELE	set	3900
   201  0000                     _TMR1	set	4046
   202  0000                     _ADCON0	set	4034
   203  0000                     _ADCON0bits	set	4034
   204  0000                     _ADCON1	set	4033
   205  0000                     _ADCON2	set	4032
   206  0000                     _ADRESH	set	4036
   207  0000                     _ADRESL	set	4035
   208  0000                     _BAUD1CON	set	4024
   209  0000                     _INTCON2bits	set	4081
   210  0000                     _INTCONbits	set	4082
   211  0000                     _IPR1bits	set	3999
   212  0000                     _LATA	set	3977
   213  0000                     _LATAbits	set	3977
   214  0000                     _LATB	set	3978
   215  0000                     _LATC	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATE	set	3981
   218  0000                     _LATEbits	set	3981
   219  0000                     _OSCCON	set	4051
   220  0000                     _OSCCON2	set	4050
   221  0000                     _OSCTUNE	set	3995
   222  0000                     _PIE1bits	set	3997
   223  0000                     _PIR1bits	set	3998
   224  0000                     _RC1STA	set	4011
   225  0000                     _RC1STAbits	set	4011
   226  0000                     _RCONbits	set	4048
   227  0000                     _RCREG1	set	4014
   228  0000                     _SPBRG1	set	4015
   229  0000                     _SPBRGH1	set	4016
   230  0000                     _T1CON	set	4045
   231  0000                     _T1CONbits	set	4045
   232  0000                     _T1GCON	set	4044
   233  0000                     _T1GCONbits	set	4044
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TRISA	set	3986
   237  0000                     _TRISB	set	3987
   238  0000                     _TRISC	set	3988
   239  0000                     _TRISCbits	set	3988
   240  0000                     _TRISD	set	3989
   241  0000                     _TRISE	set	3990
   242  0000                     _TX1STA	set	4012
   243  0000                     _TXREG1	set	4013
   244  0000                     _WPUB	set	3937
   245  0000                     _LATA0	set	31816
   246  0000                     _LATA4	set	31820
   247  0000                     _LATA6	set	31822
   248  0000                     _LATB0	set	31824
   249  0000                     _LATB1	set	31825
   250  0000                     _LATB3	set	31827
   251  0000                     _LATC0	set	31832
   252  0000                     _LATC1	set	31833
   253  0000                     _LATC4	set	31836
   254  0000                     _LATC5	set	31837
   255  0000                     _LATD1	set	31841
   256  0000                     _LATD2	set	31842
   257  0000                     _LATD3	set	31843
   258  0000                     _LATD5	set	31845
   259                           
   260                           ; #config settings
   261  00061C  00                 	db	0	; dummy byte at the end
   262  0000                     
   263                           	psect	cinit
   264  002E90                     __pcinit:
   265                           	opt stack 0
   266  002E90                     start_initialization:
   267                           	opt stack 0
   268  002E90                     __initialization:
   269                           	opt stack 0
   270                           
   271                           ; Clear objects allocated to BANK5 (206 bytes)
   272  002E90  EE05  F000         	lfsr	0,__pbssBANK5
   273  002E94  0ECE               	movlw	206
   274  002E96                     clear_0:
   275  002E96  6AEE               	clrf	postinc0,c
   276  002E98  06E8               	decf	wreg,f,c
   277  002E9A  E1FD               	bnz	clear_0
   278                           
   279                           ; Clear objects allocated to BANK4 (206 bytes)
   280  002E9C  EE04  F000         	lfsr	0,__pbssBANK4
   281  002EA0  0ECE               	movlw	206
   282  002EA2                     clear_1:
   283  002EA2  6AEE               	clrf	postinc0,c
   284  002EA4  06E8               	decf	wreg,f,c
   285  002EA6  E1FD               	bnz	clear_1
   286                           
   287                           ; Clear objects allocated to BANK3 (200 bytes)
   288  002EA8  EE03  F000         	lfsr	0,__pbssBANK3
   289  002EAC  0EC8               	movlw	200
   290  002EAE                     clear_2:
   291  002EAE  6AEE               	clrf	postinc0,c
   292  002EB0  06E8               	decf	wreg,f,c
   293  002EB2  E1FD               	bnz	clear_2
   294                           
   295                           ; Clear objects allocated to BANK2 (206 bytes)
   296  002EB4  EE02  F000         	lfsr	0,__pbssBANK2
   297  002EB8  0ECE               	movlw	206
   298  002EBA                     clear_3:
   299  002EBA  6AEE               	clrf	postinc0,c
   300  002EBC  06E8               	decf	wreg,f,c
   301  002EBE  E1FD               	bnz	clear_3
   302                           
   303                           ; Clear objects allocated to BANK1 (112 bytes)
   304  002EC0  EE01  F000         	lfsr	0,__pbssBANK1
   305  002EC4  0E70               	movlw	112
   306  002EC6                     clear_4:
   307  002EC6  6AEE               	clrf	postinc0,c
   308  002EC8  06E8               	decf	wreg,f,c
   309  002ECA  E1FD               	bnz	clear_4
   310                           
   311                           ; Clear objects allocated to BANK0 (97 bytes)
   312  002ECC  EE00  F060         	lfsr	0,__pbssBANK0
   313  002ED0  0E61               	movlw	97
   314  002ED2                     clear_5:
   315  002ED2  6AEE               	clrf	postinc0,c
   316  002ED4  06E8               	decf	wreg,f,c
   317  002ED6  E1FD               	bnz	clear_5
   318                           
   319                           ; Clear objects allocated to COMRAM (24 bytes)
   320  002ED8  EE00  F02C         	lfsr	0,__pbssCOMRAM
   321  002EDC  0E18               	movlw	24
   322  002EDE                     clear_6:
   323  002EDE  6AEE               	clrf	postinc0,c
   324  002EE0  06E8               	decf	wreg,f,c
   325  002EE2  E1FD               	bnz	clear_6
   326                           
   327                           ; Initialize objects allocated to BANK1 (30 bytes)
   328                           ; load TBLPTR registers with __pidataBANK1
   329  002EE4  0E46               	movlw	low __pidataBANK1
   330  002EE6  6EF6               	movwf	tblptrl,c
   331  002EE8  0E39               	movlw	high __pidataBANK1
   332  002EEA  6EF7               	movwf	tblptrh,c
   333  002EEC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   334  002EEE  6EF8               	movwf	tblptru,c
   335  002EF0  EE01  F070         	lfsr	0,__pdataBANK1
   336  002EF4  EE10 F01E          	lfsr	1,30
   337  002EF8                     copy_data0:
   338  002EF8  0009               	tblrd		*+
   339  002EFA  CFF5 FFEE          	movff	tablat,postinc0
   340  002EFE  50E5               	movf	postdec1,w,c
   341  002F00  50E1               	movf	fsr1l,w,c
   342  002F02  E1FA               	bnz	copy_data0
   343                           
   344                           ; Initialize objects allocated to BANK0 (12 bytes)
   345                           ; load TBLPTR registers with __pidataBANK0
   346  002F04  0E86               	movlw	low __pidataBANK0
   347  002F06  6EF6               	movwf	tblptrl,c
   348  002F08  0E3A               	movlw	high __pidataBANK0
   349  002F0A  6EF7               	movwf	tblptrh,c
   350  002F0C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   351  002F0E  6EF8               	movwf	tblptru,c
   352  002F10  EE00  F0F4         	lfsr	0,__pdataBANK0
   353  002F14  EE10 F00C          	lfsr	1,12
   354  002F18                     copy_data1:
   355  002F18  0009               	tblrd		*+
   356  002F1A  CFF5 FFEE          	movff	tablat,postinc0
   357  002F1E  50E5               	movf	postdec1,w,c
   358  002F20  50E1               	movf	fsr1l,w,c
   359  002F22  E1FA               	bnz	copy_data1
   360                           
   361                           ; Initialize objects allocated to COMRAM (1 bytes)
   362                           ; load TBLPTR registers with __pidataCOMRAM
   363  002F24  0EA2               	movlw	low __pidataCOMRAM
   364  002F26  6EF6               	movwf	tblptrl,c
   365  002F28  0E3A               	movlw	high __pidataCOMRAM
   366  002F2A  6EF7               	movwf	tblptrh,c
   367  002F2C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   368  002F2E  6EF8               	movwf	tblptru,c
   369  002F30  0009               	tblrd		*+	;fetch initializer
   370  002F32  CFF5 F044          	movff	tablat,__pdataCOMRAM
   371  002F36                     end_of_initialization:
   372                           	opt stack 0
   373  002F36                     __end_of__initialization:
   374                           	opt stack 0
   375  002F36  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   376  002F38  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   377  002F3A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   378  002F3C  6EF8               	movwf	tblptru,c
   379  002F3E  0100               	movlb	0
   380  002F40  EF6F  F01B         	goto	_main	;jump to C main() function
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           postdec1	equ	0xFE5
   388                           fsr1l	equ	0xFE1
   389                           
   390                           	psect	bssCOMRAM
   391  00002C                     __pbssCOMRAM:
   392                           	opt stack 0
   393  00002C                     _ADC_Buffer_Point:
   394                           	opt stack 0
   395  00002C                     	ds	2
   396  00002E                     _CountCallBack:
   397                           	opt stack 0
   398  00002E                     	ds	2
   399  000030                     _group:
   400                           	opt stack 0
   401  000030                     	ds	2
   402  000032                     _serial_available:
   403                           	opt stack 0
   404  000032                     	ds	2
   405  000034                     _serial_read:
   406                           	opt stack 0
   407  000034                     	ds	2
   408  000036                     _serial_write:
   409                           	opt stack 0
   410  000036                     	ds	2
   411  000038                     _timer1ReloadVal:
   412                           	opt stack 0
   413  000038                     	ds	2
   414  00003A                     _AKNAKsend:
   415                           	opt stack 0
   416  00003A                     	ds	1
   417  00003B                     _Temp_Aquire:
   418                           	opt stack 0
   419  00003B                     	ds	1
   420  00003C                     _Volt_Aquire:
   421                           	opt stack 0
   422  00003C                     	ds	1
   423  00003D                     _calc_CS:
   424                           	opt stack 0
   425  00003D                     	ds	1
   426  00003E                     _maxDataAddress:
   427                           	opt stack 0
   428  00003E                     	ds	1
   429  00003F                     _moduleAddress:
   430                           	opt stack 0
   431  00003F                     	ds	1
   432  000040                     _returnAddress:
   433                           	opt stack 0
   434  000040                     	ds	1
   435  000041                     _rx_address:
   436                           	opt stack 0
   437  000041                     	ds	1
   438  000042                     _rx_array_inx:
   439                           	opt stack 0
   440  000042                     	ds	1
   441  000043                     _rx_len:
   442                           	opt stack 0
   443  000043                     	ds	1
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           postdec1	equ	0xFE5
   451                           fsr1l	equ	0xFE1
   452                           
   453                           	psect	dataCOMRAM
   454  000044                     __pdataCOMRAM:
   455                           	opt stack 0
   456  000044                     _Transmit_stall:
   457                           	opt stack 0
   458  000044                     	ds	1
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           postdec1	equ	0xFE5
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	bssBANK0
   469  000060                     __pbssBANK0:
   470                           	opt stack 0
   471  000060                     _Battery_Adc:
   472                           	opt stack 0
   473  000060                     	ds	40
   474  000088                     _Temp_Done:
   475                           	opt stack 0
   476  000088                     	ds	2
   477  00008A                     _Volt_Done:
   478                           	opt stack 0
   479  00008A                     	ds	2
   480  00008C                     _addressErrorCounter:
   481                           	opt stack 0
   482  00008C                     	ds	2
   483  00008E                     _alignErrorCounter:
   484                           	opt stack 0
   485  00008E                     	ds	2
   486  000090                     _crcErrorCounter:
   487                           	opt stack 0
   488  000090                     	ds	2
   489  000092                     _dataAdressErrorCounter:
   490                           	opt stack 0
   491  000092                     	ds	2
   492  000094                     _errno:
   493                           	opt stack 0
   494  000094                     	ds	2
   495  000096                     _receiveArrayAddress:
   496                           	opt stack 0
   497  000096                     	ds	2
   498  000098                     _sendStructAddress:
   499                           	opt stack 0
   500  000098                     	ds	2
   501  00009A                     _serial_peek:
   502                           	opt stack 0
   503  00009A                     	ds	2
   504  00009C                     _crc_buffer:
   505                           	opt stack 0
   506  00009C                     	ds	17
   507  0000AD                     _TmpTemp_DegF:
   508                           	opt stack 0
   509  0000AD                     	ds	12
   510  0000B9                     _Temp_Adc:
   511                           	opt stack 0
   512  0000B9                     	ds	8
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           postdec1	equ	0xFE5
   520                           fsr1l	equ	0xFE1
   521                           
   522                           	psect	dataBANK0
   523  0000F4                     __pdataBANK0:
   524                           	opt stack 0
   525  0000F4                     _Temp_DegF:
   526                           	opt stack 0
   527  0000F4                     	ds	12
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           postdec1	equ	0xFE5
   535                           fsr1l	equ	0xFE1
   536                           
   537                           	psect	bssBANK1
   538  000100                     __pbssBANK1:
   539                           	opt stack 0
   540  000100                     _PrevBattery_Volt:
   541                           	opt stack 0
   542  000100                     	ds	30
   543  00011E                     _PrevTemp_DegF:
   544                           	opt stack 0
   545  00011E                     	ds	12
   546  00012A                     _receiveArray:
   547                           	opt stack 0
   548  00012A                     	ds	40
   549  000152                     _TempBattery_Volt:
   550                           	opt stack 0
   551  000152                     	ds	30
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           wreg	equ	0xFE8
   558                           postdec1	equ	0xFE5
   559                           fsr1l	equ	0xFE1
   560                           
   561                           	psect	dataBANK1
   562  000170                     __pdataBANK1:
   563                           	opt stack 0
   564  000170                     _Battery_Volt:
   565                           	opt stack 0
   566  000170                     	ds	30
   567                           tblptru	equ	0xFF8
   568                           tblptrh	equ	0xFF7
   569                           tblptrl	equ	0xFF6
   570                           tablat	equ	0xFF5
   571                           postinc0	equ	0xFEE
   572                           wreg	equ	0xFE8
   573                           postdec1	equ	0xFE5
   574                           fsr1l	equ	0xFE1
   575                           
   576                           	psect	bssBANK2
   577  000200                     __pbssBANK2:
   578                           	opt stack 0
   579  000200                     _ring_buffer:
   580                           	opt stack 0
   581  000200                     	ds	206
   582                           tblptru	equ	0xFF8
   583                           tblptrh	equ	0xFF7
   584                           tblptrl	equ	0xFF6
   585                           tablat	equ	0xFF5
   586                           postinc0	equ	0xFEE
   587                           wreg	equ	0xFE8
   588                           postdec1	equ	0xFE5
   589                           fsr1l	equ	0xFE1
   590                           
   591                           	psect	bssBANK3
   592  000300                     __pbssBANK3:
   593                           	opt stack 0
   594  000300                     _rx_buffer:
   595                           	opt stack 0
   596  000300                     	ds	200
   597                           tblptru	equ	0xFF8
   598                           tblptrh	equ	0xFF7
   599                           tblptrl	equ	0xFF6
   600                           tablat	equ	0xFF5
   601                           postinc0	equ	0xFEE
   602                           wreg	equ	0xFE8
   603                           postdec1	equ	0xFE5
   604                           fsr1l	equ	0xFE1
   605                           
   606                           	psect	bssBANK4
   607  000400                     __pbssBANK4:
   608                           	opt stack 0
   609  000400                     _input_buffer:
   610                           	opt stack 0
   611  000400                     	ds	206
   612                           tblptru	equ	0xFF8
   613                           tblptrh	equ	0xFF7
   614                           tblptrl	equ	0xFF6
   615                           tablat	equ	0xFF5
   616                           postinc0	equ	0xFEE
   617                           wreg	equ	0xFE8
   618                           postdec1	equ	0xFE5
   619                           fsr1l	equ	0xFE1
   620                           
   621                           	psect	bssBANK5
   622  000500                     __pbssBANK5:
   623                           	opt stack 0
   624  000500                     _output_buffer:
   625                           	opt stack 0
   626  000500                     	ds	206
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           postdec1	equ	0xFE5
   634                           fsr1l	equ	0xFE1
   635                           
   636                           	psect	cstackBANK1
   637  00018E                     __pcstackBANK1:
   638                           	opt stack 0
   639  00018E                     ??_eval_poly:
   640                           
   641                           ; 0 bytes @ 0x0
   642  00018E                     	ds	2
   643  000190                     eval_poly@res:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x2
   647  000190                     	ds	3
   648  000193                     ?_log:
   649                           	opt stack 0
   650  000193                     log@x:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0x5
   654  000193                     	ds	3
   655  000196                     log@exponent:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x8
   659  000196                     	ds	2
   660  000198                     _Temp_Convert$2240:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0xA
   664  000198                     	ds	2
   665  00019A                     _Temp_Convert$2241:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0xC
   669  00019A                     	ds	2
   670  00019C                     Temp_Convert@x:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0xE
   674  00019C                     	ds	2
   675  00019E                     Temp_Convert@steinhart:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x10
   679  00019E                     	ds	3
   680  0001A1                     
   681                           ; 2 bytes @ 0x13
   682  0001A1                     	ds	2
   683  0001A3                     
   684                           ; 3 bytes @ 0x15
   685  0001A3                     	ds	3
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           postdec1	equ	0xFE5
   693                           fsr1l	equ	0xFE1
   694                           
   695                           	psect	cstackBANK0
   696  0000C1                     __pcstackBANK0:
   697                           	opt stack 0
   698  0000C1                     Battery_Fault@fault:
   699                           	opt stack 0
   700  0000C1                     Temp_Fault@fault:
   701                           	opt stack 0
   702  0000C1                     CRCcheck@SentCRC:
   703                           	opt stack 0
   704  0000C1                     ___altoft@exp:
   705                           	opt stack 0
   706  0000C1                     RunBypas@cellbyp:
   707                           	opt stack 0
   708  0000C1                     begin@ptr:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x0
   712  0000C1                     	ds	1
   713  0000C2                     CRCcheck@calculatedCRC:
   714                           	opt stack 0
   715  0000C2                     ___altoft@sign:
   716                           	opt stack 0
   717  0000C2                     Battery_Fault@i:
   718                           	opt stack 0
   719  0000C2                     Temp_Fault@i:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x1
   723  0000C2                     	ds	1
   724  0000C3                     ?___ftdiv:
   725                           	opt stack 0
   726  0000C3                     begin@maxSize:
   727                           	opt stack 0
   728  0000C3                     RunBypas@batvolt:
   729                           	opt stack 0
   730  0000C3                     CRCcheck@arrayHolder:
   731                           	opt stack 0
   732  0000C3                     ___ftdiv@f1:
   733                           	opt stack 0
   734                           
   735                           ; 3 bytes @ 0x2
   736  0000C3                     	ds	1
   737  0000C4                     begin@givenAddress:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x3
   741  0000C4                     	ds	1
   742  0000C5                     begin@error:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x4
   746  0000C5                     	ds	1
   747  0000C6                     RunBypas@i:
   748                           	opt stack 0
   749  0000C6                     begin@stufftosend:
   750                           	opt stack 0
   751  0000C6                     CRCcheck@rt:
   752                           	opt stack 0
   753  0000C6                     ___ftdiv@f2:
   754                           	opt stack 0
   755                           
   756                           ; 3 bytes @ 0x5
   757  0000C6                     	ds	2
   758  0000C8                     ??_receiveData:
   759  0000C8                     begin@stufftoreceive:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x7
   763  0000C8                     	ds	1
   764  0000C9                     ??___ftdiv:
   765                           
   766                           ; 0 bytes @ 0x8
   767  0000C9                     	ds	1
   768  0000CA                     begin@stuffavailable:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x9
   772  0000CA                     	ds	2
   773  0000CC                     ___ftdiv@cntr:
   774                           	opt stack 0
   775  0000CC                     begin@stuffpeek:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0xB
   779  0000CC                     	ds	1
   780  0000CD                     ___ftdiv@f3:
   781                           	opt stack 0
   782                           
   783                           ; 3 bytes @ 0xC
   784  0000CD                     	ds	1
   785  0000CE                     receiveData@holder:
   786                           	opt stack 0
   787                           
   788                           ; 3 bytes @ 0xD
   789  0000CE                     	ds	2
   790  0000D0                     ___ftdiv@exp:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0xF
   794  0000D0                     	ds	1
   795  0000D1                     ___ftdiv@sign:
   796                           	opt stack 0
   797  0000D1                     receiveData@holder_1131:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x10
   801  0000D1                     	ds	1
   802  0000D2                     ?___ftmul:
   803                           	opt stack 0
   804  0000D2                     ___ftmul@f1:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x11
   808  0000D2                     	ds	2
   809  0000D4                     receiveData@crcHolder:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x13
   813  0000D4                     	ds	1
   814  0000D5                     receiveData@crcHolder_1132:
   815                           	opt stack 0
   816  0000D5                     ___ftmul@f2:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x14
   820  0000D5                     	ds	1
   821  0000D6                     receiveData@u:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x15
   825  0000D6                     	ds	2
   826  0000D8                     ??___ftmul:
   827  0000D8                     receiveData@r:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x17
   831  0000D8                     	ds	3
   832  0000DB                     ___ftmul@exp:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x1A
   836  0000DB                     	ds	1
   837  0000DC                     ___ftmul@f3_as_product:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x1B
   841  0000DC                     	ds	3
   842  0000DF                     ___ftmul@cntr:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x1E
   846  0000DF                     	ds	1
   847  0000E0                     ___ftmul@sign:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x1F
   851  0000E0                     	ds	1
   852  0000E1                     ?___ftadd:
   853                           	opt stack 0
   854  0000E1                     ?___fttol:
   855                           	opt stack 0
   856  0000E1                     ___ftadd@f1:
   857                           	opt stack 0
   858  0000E1                     ___fttol@f1:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x20
   862  0000E1                     	ds	3
   863  0000E4                     ___ftadd@f2:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x23
   867  0000E4                     	ds	1
   868  0000E5                     ??___fttol:
   869                           
   870                           ; 0 bytes @ 0x24
   871  0000E5                     	ds	2
   872  0000E7                     ??___ftadd:
   873                           
   874                           ; 0 bytes @ 0x26
   875  0000E7                     	ds	3
   876  0000EA                     ___ftadd@sign:
   877                           	opt stack 0
   878  0000EA                     ___fttol@sign1:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x29
   882  0000EA                     	ds	1
   883  0000EB                     ___ftadd@exp2:
   884                           	opt stack 0
   885  0000EB                     ___fttol@lval:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x2A
   889  0000EB                     	ds	1
   890  0000EC                     ___ftadd@exp1:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x2B
   894  0000EC                     	ds	1
   895  0000ED                     ?___ftsub:
   896                           	opt stack 0
   897  0000ED                     ?_eval_poly:
   898                           	opt stack 0
   899  0000ED                     Battery_Filter@x:
   900                           	opt stack 0
   901  0000ED                     Temp_Filter@x:
   902                           	opt stack 0
   903  0000ED                     ___ftsub@f1:
   904                           	opt stack 0
   905  0000ED                     eval_poly@x:
   906                           	opt stack 0
   907                           
   908                           ; 3 bytes @ 0x2C
   909  0000ED                     	ds	2
   910  0000EF                     ??_Battery_Convert:
   911  0000EF                     ___fttol@exp1:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x2E
   915  0000EF                     	ds	1
   916  0000F0                     ToSend@what:
   917                           	opt stack 0
   918  0000F0                     eval_poly@d:
   919                           	opt stack 0
   920  0000F0                     ___ftsub@f2:
   921                           	opt stack 0
   922                           
   923                           ; 3 bytes @ 0x2F
   924  0000F0                     	ds	1
   925  0000F1                     Battery_Convert@x:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x30
   929  0000F1                     	ds	1
   930  0000F2                     eval_poly@n:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x31
   934  0000F2                     	ds	2
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           postdec1	equ	0xFE5
   942                           fsr1l	equ	0xFE1
   943                           
   944                           	psect	cstackCOMRAM
   945  000001                     __pcstackCOMRAM:
   946                           	opt stack 0
   947  000001                     ??_ADC_StartConversion:
   948  000001                     ?_ADC_GetConversionResult:
   949                           	opt stack 0
   950  000001                     ?i2_UART_buff_size:
   951                           	opt stack 0
   952  000001                     ?i2_UART_buff_modulo_inc:
   953                           	opt stack 0
   954  000001                     Set_4051@Channel:
   955                           	opt stack 0
   956  000001                     i2UART_buff_size@_this:
   957                           	opt stack 0
   958  000001                     i2UART_buff_modulo_inc@value:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x0
   962  000001                     	ds	1
   963  000002                     ADC_StartConversion@channel:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x1
   967  000002                     	ds	1
   968  000003                     ??_Set_4051:
   969  000003                     ??_ADC_GetConversionResult:
   970  000003                     i2UART_buff_modulo_inc@modulus:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x2
   974  000003                     	ds	2
   975  000005                     ??_ADC_ISR:
   976  000005                     i2UART_buff_modulo_inc@my_value:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x4
   980  000005                     	ds	2
   981  000007                     i2UART_buff_put@_this:
   982                           	opt stack 0
   983  000007                     i2UART_buff_get@_this:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x6
   987  000007                     	ds	2
   988  000009                     ??i2_UART_buff_get:
   989  000009                     i2UART_buff_put@c:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x8
   993  000009                     	ds	1
   994  00000A                     ??i2_UART_buff_put:
   995                           
   996                           ; 0 bytes @ 0x9
   997  00000A                     	ds	1
   998  00000B                     i2UART_buff_get@c:
   999                           	opt stack 0
  1000  00000B                     ADC_ISR@ADC_Result:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0xA
  1004  00000B                     	ds	1
  1005  00000C                     EUSART1_Receive_ISR@data:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0xB
  1009  00000C                     	ds	1
  1010  00000D                     ??_INTERRUPT_InterruptManager:
  1011                           
  1012                           ; 0 bytes @ 0xC
  1013  00000D                     	ds	14
  1014  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1015                           	opt stack 0
  1016  00001B                     ?_UART_buff_modulo_inc:
  1017                           	opt stack 0
  1018  00001B                     ?_UART_buff_size:
  1019                           	opt stack 0
  1020  00001B                     ?___wmul:
  1021                           	opt stack 0
  1022  00001B                     ?___awdiv:
  1023                           	opt stack 0
  1024  00001B                     ?___ftpack:
  1025                           	opt stack 0
  1026  00001B                     ?_frexp:
  1027                           	opt stack 0
  1028  00001B                     SetBypass@pin:
  1029                           	opt stack 0
  1030  00001B                     CRC8@data:
  1031                           	opt stack 0
  1032  00001B                     FastTransfer_buffer_modulo_inc@value:
  1033                           	opt stack 0
  1034  00001B                     crcBufS_put@_this:
  1035                           	opt stack 0
  1036  00001B                     crcBufS_status_put@_this:
  1037                           	opt stack 0
  1038  00001B                     crcBufS_get@_this:
  1039                           	opt stack 0
  1040  00001B                     UART_buff_size@_this:
  1041                           	opt stack 0
  1042  00001B                     UART_buff_modulo_inc@value:
  1043                           	opt stack 0
  1044  00001B                     UART_buff_peek@_this:
  1045                           	opt stack 0
  1046  00001B                     ___wmul@multiplier:
  1047                           	opt stack 0
  1048  00001B                     ___awdiv@dividend:
  1049                           	opt stack 0
  1050  00001B                     memset@p1:
  1051                           	opt stack 0
  1052  00001B                     ___ftpack@arg:
  1053                           	opt stack 0
  1054  00001B                     frexp@value:
  1055                           	opt stack 0
  1056  00001B                     Delay@d_lenth:
  1057                           	opt stack 0
  1058                           
  1059                           ; 4 bytes @ 0x1A
  1060  00001B                     	ds	2
  1061  00001D                     ??_UART_buff_peek:
  1062  00001D                     ?_Receive_available:
  1063                           	opt stack 0
  1064  00001D                     CRC8@len:
  1065                           	opt stack 0
  1066  00001D                     crcBufS_put@address:
  1067                           	opt stack 0
  1068  00001D                     crcBufS_status_put@time:
  1069                           	opt stack 0
  1070  00001D                     crcBufS_get@time:
  1071                           	opt stack 0
  1072  00001D                     SetBypass@state:
  1073                           	opt stack 0
  1074  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1075                           	opt stack 0
  1076  00001D                     UART_buff_modulo_inc@modulus:
  1077                           	opt stack 0
  1078  00001D                     ___wmul@multiplicand:
  1079                           	opt stack 0
  1080  00001D                     ___awdiv@divisor:
  1081                           	opt stack 0
  1082  00001D                     memset@c:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x1C
  1086  00001D                     	ds	1
  1087  00001E                     CRC8@sum:
  1088                           	opt stack 0
  1089  00001E                     crcBufS_put@oldCRC:
  1090                           	opt stack 0
  1091  00001E                     crcBufS_status_put@status:
  1092                           	opt stack 0
  1093  00001E                     crcBufS_get@space:
  1094                           	opt stack 0
  1095  00001E                     ___ftpack@exp:
  1096                           	opt stack 0
  1097  00001E                     frexp@eptr:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x1D
  1101  00001E                     	ds	1
  1102  00001F                     ??_crcBufS_get:
  1103  00001F                     ??_Delay:
  1104  00001F                     ??_SetBypass:
  1105  00001F                     ??_crcBufS_status_put:
  1106  00001F                     CRC8@extract:
  1107                           	opt stack 0
  1108  00001F                     crcBufS_put@status:
  1109                           	opt stack 0
  1110  00001F                     ___awdiv@counter:
  1111                           	opt stack 0
  1112  00001F                     ___ftpack@sign:
  1113                           	opt stack 0
  1114  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1115                           	opt stack 0
  1116  00001F                     UART_buff_modulo_inc@my_value:
  1117                           	opt stack 0
  1118  00001F                     ___wmul@product:
  1119                           	opt stack 0
  1120  00001F                     memset@n:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x1E
  1124  00001F                     	ds	1
  1125  000020                     ??_crcBufS_put:
  1126  000020                     ??___ftpack:
  1127  000020                     ??_frexp:
  1128  000020                     CRC8@tempI:
  1129                           	opt stack 0
  1130  000020                     ___awdiv@sign:
  1131                           	opt stack 0
  1132  000020                     Delay@wait:
  1133                           	opt stack 0
  1134                           
  1135                           ; 4 bytes @ 0x1F
  1136  000020                     	ds	1
  1137  000021                     ?_Battery_Get:
  1138                           	opt stack 0
  1139  000021                     ?_Tempeture_Get:
  1140                           	opt stack 0
  1141  000021                     CRC8@crc:
  1142                           	opt stack 0
  1143  000021                     Battery_Get@channelnum:
  1144                           	opt stack 0
  1145  000021                     Tempeture_Get@channelnum:
  1146                           	opt stack 0
  1147  000021                     FastTransfer_buffer_put@_this:
  1148                           	opt stack 0
  1149  000021                     UART_buff_put@_this:
  1150                           	opt stack 0
  1151  000021                     UART_buff_get@_this:
  1152                           	opt stack 0
  1153  000021                     ___awdiv@quotient:
  1154                           	opt stack 0
  1155  000021                     memset@p:
  1156                           	opt stack 0
  1157  000021                     ___ftge@ff1:
  1158                           	opt stack 0
  1159                           
  1160                           ; 3 bytes @ 0x20
  1161  000021                     	ds	2
  1162  000023                     ??_UART_buff_get:
  1163  000023                     ?___altoft:
  1164                           	opt stack 0
  1165  000023                     ?___awtoft:
  1166                           	opt stack 0
  1167  000023                     FastTransfer_buffer_put@towhere:
  1168                           	opt stack 0
  1169  000023                     UART_buff_put@c:
  1170                           	opt stack 0
  1171  000023                     FastTransfer_buffer_flush@_this:
  1172                           	opt stack 0
  1173  000023                     crcBufS_status_put@wantedTime:
  1174                           	opt stack 0
  1175  000023                     UART_buff_init@_this:
  1176                           	opt stack 0
  1177  000023                     ___awtoft@c:
  1178                           	opt stack 0
  1179  000023                     ___altoft@c:
  1180                           	opt stack 0
  1181                           
  1182                           ; 4 bytes @ 0x22
  1183  000023                     	ds	1
  1184  000024                     ??_UART_buff_put:
  1185  000024                     FastTransfer_buffer_put@towhat:
  1186                           	opt stack 0
  1187  000024                     ___ftge@ff2:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0x23
  1191  000024                     	ds	1
  1192  000025                     UART_buff_get@c:
  1193                           	opt stack 0
  1194  000025                     FastTransfer_buffer_flush@clearBuffer:
  1195                           	opt stack 0
  1196  000025                     crcBufS_get@wantedTime:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x24
  1200  000025                     	ds	1
  1201  000026                     ??_FastTransfer_buffer_put:
  1202  000026                     Send_put@_data:
  1203                           	opt stack 0
  1204  000026                     ___awtoft@sign:
  1205                           	opt stack 0
  1206                           
  1207                           ; 1 bytes @ 0x25
  1208  000026                     	ds	1
  1209  000027                     ??_sendData:
  1210  000027                     ??___altoft:
  1211  000027                     ??___ftge:
  1212                           
  1213                           ; 0 bytes @ 0x26
  1214  000027                     	ds	1
  1215  000028                     sendData@whereToSend:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x27
  1219  000028                     	ds	1
  1220  000029                     sendData@CS:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x28
  1224  000029                     	ds	1
  1225  00002A                     sendData@i:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x29
  1229  00002A                     	ds	1
  1230  00002B                     ToSend@where:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x2A
  1234  00002B                     	ds	1
  1235  00002C                     tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1l	equ	0xFE1
  1243                           
  1244                           ; 0 bytes @ 0x2B
  1245 ;;
  1246 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1247 ;;
  1248 ;; *************** function _main *****************
  1249 ;; Defined at:
  1250 ;;		line 30 in file "Main.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  argc            2   19[BANK1 ] int 
  1253 ;;  argv            3   21[BANK1 ] PTR PTR unsigned char 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;		None
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  2   19[BANK1 ] int 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1265 ;;      Params:         0       0       5       0       0       0       0
  1266 ;;      Locals:         0       0       0       0       0       0       0
  1267 ;;      Temps:          0       0       0       0       0       0       0
  1268 ;;      Totals:         0       0       5       0       0       0       0
  1269 ;;Total ram usage:        5 bytes
  1270 ;; Hardware stack levels required when called:   10
  1271 ;; This function calls:
  1272 ;;		_Battery_Convert
  1273 ;;		_Battery_Fault
  1274 ;;		_RunBypas
  1275 ;;		_SYSTEM_Initialize
  1276 ;;		_Temp_Convert
  1277 ;;		_Temp_Fault
  1278 ;;		_updateComms
  1279 ;; This function is called by:
  1280 ;;		Startup code after reset
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text0
  1285  0036DE                     __ptext0:
  1286                           	opt stack 0
  1287  0036DE                     _main:
  1288                           	opt stack 21
  1289                           
  1290                           ;Main.c: 32: SYSTEM_Initialize();
  1291                           
  1292                           ;incstack = 0
  1293  0036DE  ECD8  F019         	call	_SYSTEM_Initialize	;wreg free
  1294                           
  1295                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1296  0036E2  8EF2               	bsf	intcon,7,c	;volatile
  1297                           
  1298                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1299  0036E4  8CF2               	bsf	intcon,6,c	;volatile
  1300  0036E6                     l5363:
  1301                           
  1302                           ;Main.c: 65: {
  1303                           ;Main.c: 66: if (Temp_Done)
  1304  0036E6  0100               	movlb	0	; () banked
  1305  0036E8  5188               	movf	_Temp_Done& (0+255),w,b
  1306  0036EA  0100               	movlb	0	; () banked
  1307  0036EC  1189               	iorwf	(_Temp_Done+1)& (0+255),w,b
  1308  0036EE  B4D8               	btfsc	status,2,c
  1309  0036F0  D004               	goto	l5369
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;Main.c: 67: {
  1313                           ;Main.c: 68: Temp_Convert();
  1314  0036F2  ECC9  F00B         	call	_Temp_Convert	;wreg free
  1315                           
  1316                           ;Main.c: 69: Temp_Fault();
  1317  0036F6  EC9D  F019         	call	_Temp_Fault	;wreg free
  1318  0036FA                     l5369:
  1319                           
  1320                           ;Main.c: 74: }
  1321                           ;Main.c: 75: if (Volt_Done)
  1322  0036FA  0100               	movlb	0	; () banked
  1323  0036FC  518A               	movf	_Volt_Done& (0+255),w,b
  1324  0036FE  0100               	movlb	0	; () banked
  1325  003700  118B               	iorwf	(_Volt_Done+1)& (0+255),w,b
  1326  003702  B4D8               	btfsc	status,2,c
  1327  003704  D006               	goto	l5377
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;Main.c: 76: {
  1331                           ;Main.c: 77: Battery_Convert();
  1332  003706  EC3A  F015         	call	_Battery_Convert	;wreg free
  1333                           
  1334                           ;Main.c: 78: Battery_Fault();
  1335  00370A  ECED  F016         	call	_Battery_Fault	;wreg free
  1336                           
  1337                           ;Main.c: 79: RunBypas();
  1338  00370E  ECA9  F015         	call	_RunBypas	;wreg free
  1339  003712                     l5377:
  1340                           
  1341                           ;Main.c: 84: }
  1342                           ;Main.c: 85: updateComms();
  1343  003712  EC93  F008         	call	_updateComms	;wreg free
  1344  003716  D7E7               	goto	l5363
  1345  003718                     __end_of_main:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           intcon	equ	0xFF2
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           postdec1	equ	0xFE5
  1355                           fsr1l	equ	0xFE1
  1356                           status	equ	0xFD8
  1357                           
  1358 ;; *************** function _updateComms *****************
  1359 ;; Defined at:
  1360 ;;		line 12 in file "Communications.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;		None               void
  1367 ;; Registers used:
  1368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1374 ;;      Params:         0       0       0       0       0       0       0
  1375 ;;      Locals:         0       0       0       0       0       0       0
  1376 ;;      Temps:          0       0       0       0       0       0       0
  1377 ;;      Totals:         0       0       0       0       0       0       0
  1378 ;;Total ram usage:        0 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    9
  1381 ;; This function calls:
  1382 ;;		_Battery_Get
  1383 ;;		_Delay
  1384 ;;		_Tempeture_Get
  1385 ;;		_ToSend
  1386 ;;		___ftmul
  1387 ;;		___fttol
  1388 ;;		_receiveData
  1389 ;;		_sendData
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  001126                     __ptext1:
  1397                           	opt stack 0
  1398  001126                     _updateComms:
  1399                           	opt stack 21
  1400                           
  1401                           ;Communications.c: 15: if (receiveData()) {
  1402                           
  1403                           ;incstack = 0
  1404  001126  EC0F  F003         	call	_receiveData	;wreg free
  1405  00112A  0900               	iorlw	0
  1406  00112C  B4D8               	btfsc	status,2,c
  1407  00112E  0012               	return	
  1408                           
  1409                           ;Communications.c: 16: Delay(5);
  1410  001130  0E05               	movlw	5
  1411  001132  6E1B               	movwf	Delay@d_lenth,c
  1412  001134  0E00               	movlw	0
  1413  001136  6E1C               	movwf	Delay@d_lenth+1,c
  1414  001138  0E00               	movlw	0
  1415  00113A  6E1D               	movwf	Delay@d_lenth+2,c
  1416  00113C  0E00               	movlw	0
  1417  00113E  6E1E               	movwf	Delay@d_lenth+3,c
  1418  001140  ECE2  F01A         	call	_Delay	;wreg free
  1419                           
  1420                           ;Communications.c: 17: LATEbits.LATE1 = 1;
  1421  001144  828D               	bsf	3981,1,c	;volatile
  1422                           
  1423                           ;Communications.c: 18: Delay(5);
  1424  001146  0E05               	movlw	5
  1425  001148  6E1B               	movwf	Delay@d_lenth,c
  1426  00114A  0E00               	movlw	0
  1427  00114C  6E1C               	movwf	Delay@d_lenth+1,c
  1428  00114E  0E00               	movlw	0
  1429  001150  6E1D               	movwf	Delay@d_lenth+2,c
  1430  001152  0E00               	movlw	0
  1431  001154  6E1E               	movwf	Delay@d_lenth+3,c
  1432  001156  ECE2  F01A         	call	_Delay	;wreg free
  1433                           
  1434                           ;Communications.c: 19: ToSend(0, 7);
  1435  00115A  0E00               	movlw	0
  1436  00115C  0100               	movlb	0	; () banked
  1437  00115E  6FF1               	movwf	(ToSend@what+1)& (0+255),b
  1438  001160  0E07               	movlw	7
  1439  001162  6FF0               	movwf	ToSend@what& (0+255),b
  1440  001164  0E00               	movlw	0
  1441  001166  ECD0  F01C         	call	_ToSend
  1442                           
  1443                           ;Communications.c: 20: ToSend(1, (int) (Battery_Get(0)*1000.0));
  1444  00116A  0E00               	movlw	0
  1445  00116C  0100               	movlb	0	; () banked
  1446  00116E  6FD5               	movwf	___ftmul@f2& (0+255),b
  1447  001170  0E7A               	movlw	122
  1448  001172  0100               	movlb	0	; () banked
  1449  001174  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1450  001176  0E44               	movlw	68
  1451  001178  0100               	movlb	0	; () banked
  1452  00117A  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1453  00117C  0E00               	movlw	0
  1454  00117E  6E22               	movwf	Battery_Get@channelnum+1,c
  1455  001180  0E00               	movlw	0
  1456  001182  6E21               	movwf	Battery_Get@channelnum,c
  1457  001184  ECEF  F01B         	call	_Battery_Get	;wreg free
  1458  001188  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1459  00118C  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1460  001190  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1461  001194  ECE8  F00E         	call	___ftmul	;wreg free
  1462  001198  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1463  00119C  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1464  0011A0  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1465  0011A4  EC8C  F011         	call	___fttol	;wreg free
  1466  0011A8  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1467  0011AC  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1468  0011B0  0E01               	movlw	1
  1469  0011B2  ECD0  F01C         	call	_ToSend
  1470                           
  1471                           ;Communications.c: 21: ToSend(2, (int) (Battery_Get(1)*1000.0));
  1472  0011B6  0E00               	movlw	0
  1473  0011B8  0100               	movlb	0	; () banked
  1474  0011BA  6FD5               	movwf	___ftmul@f2& (0+255),b
  1475  0011BC  0E7A               	movlw	122
  1476  0011BE  0100               	movlb	0	; () banked
  1477  0011C0  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1478  0011C2  0E44               	movlw	68
  1479  0011C4  0100               	movlb	0	; () banked
  1480  0011C6  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1481  0011C8  0E00               	movlw	0
  1482  0011CA  6E22               	movwf	Battery_Get@channelnum+1,c
  1483  0011CC  0E01               	movlw	1
  1484  0011CE  6E21               	movwf	Battery_Get@channelnum,c
  1485  0011D0  ECEF  F01B         	call	_Battery_Get	;wreg free
  1486  0011D4  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1487  0011D8  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1488  0011DC  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1489  0011E0  ECE8  F00E         	call	___ftmul	;wreg free
  1490  0011E4  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1491  0011E8  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1492  0011EC  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1493  0011F0  EC8C  F011         	call	___fttol	;wreg free
  1494  0011F4  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1495  0011F8  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1496  0011FC  0E02               	movlw	2
  1497  0011FE  ECD0  F01C         	call	_ToSend
  1498                           
  1499                           ;Communications.c: 22: ToSend(3, (int) (Battery_Get(2)*1000.0));
  1500  001202  0E00               	movlw	0
  1501  001204  0100               	movlb	0	; () banked
  1502  001206  6FD5               	movwf	___ftmul@f2& (0+255),b
  1503  001208  0E7A               	movlw	122
  1504  00120A  0100               	movlb	0	; () banked
  1505  00120C  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1506  00120E  0E44               	movlw	68
  1507  001210  0100               	movlb	0	; () banked
  1508  001212  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1509  001214  0E00               	movlw	0
  1510  001216  6E22               	movwf	Battery_Get@channelnum+1,c
  1511  001218  0E02               	movlw	2
  1512  00121A  6E21               	movwf	Battery_Get@channelnum,c
  1513  00121C  ECEF  F01B         	call	_Battery_Get	;wreg free
  1514  001220  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1515  001224  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1516  001228  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1517  00122C  ECE8  F00E         	call	___ftmul	;wreg free
  1518  001230  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1519  001234  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1520  001238  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1521  00123C  EC8C  F011         	call	___fttol	;wreg free
  1522  001240  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1523  001244  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1524  001248  0E03               	movlw	3
  1525  00124A  ECD0  F01C         	call	_ToSend
  1526                           
  1527                           ;Communications.c: 23: ToSend(4, (int) (Battery_Get(3)*1000.0));
  1528  00124E  0E00               	movlw	0
  1529  001250  0100               	movlb	0	; () banked
  1530  001252  6FD5               	movwf	___ftmul@f2& (0+255),b
  1531  001254  0E7A               	movlw	122
  1532  001256  0100               	movlb	0	; () banked
  1533  001258  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1534  00125A  0E44               	movlw	68
  1535  00125C  0100               	movlb	0	; () banked
  1536  00125E  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1537  001260  0E00               	movlw	0
  1538  001262  6E22               	movwf	Battery_Get@channelnum+1,c
  1539  001264  0E03               	movlw	3
  1540  001266  6E21               	movwf	Battery_Get@channelnum,c
  1541  001268  ECEF  F01B         	call	_Battery_Get	;wreg free
  1542  00126C  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1543  001270  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1544  001274  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1545  001278  ECE8  F00E         	call	___ftmul	;wreg free
  1546  00127C  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1547  001280  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1548  001284  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1549  001288  EC8C  F011         	call	___fttol	;wreg free
  1550  00128C  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1551  001290  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1552  001294  0E04               	movlw	4
  1553  001296  ECD0  F01C         	call	_ToSend
  1554                           
  1555                           ;Communications.c: 24: ToSend(5, (int) (Battery_Get(4)*1000.0));
  1556  00129A  0E00               	movlw	0
  1557  00129C  0100               	movlb	0	; () banked
  1558  00129E  6FD5               	movwf	___ftmul@f2& (0+255),b
  1559  0012A0  0E7A               	movlw	122
  1560  0012A2  0100               	movlb	0	; () banked
  1561  0012A4  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1562  0012A6  0E44               	movlw	68
  1563  0012A8  0100               	movlb	0	; () banked
  1564  0012AA  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1565  0012AC  0E00               	movlw	0
  1566  0012AE  6E22               	movwf	Battery_Get@channelnum+1,c
  1567  0012B0  0E04               	movlw	4
  1568  0012B2  6E21               	movwf	Battery_Get@channelnum,c
  1569  0012B4  ECEF  F01B         	call	_Battery_Get	;wreg free
  1570  0012B8  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1571  0012BC  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1572  0012C0  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1573  0012C4  ECE8  F00E         	call	___ftmul	;wreg free
  1574  0012C8  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1575  0012CC  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1576  0012D0  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1577  0012D4  EC8C  F011         	call	___fttol	;wreg free
  1578  0012D8  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1579  0012DC  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1580  0012E0  0E05               	movlw	5
  1581  0012E2  ECD0  F01C         	call	_ToSend
  1582                           
  1583                           ;Communications.c: 25: ToSend(6, (int) (Battery_Get(5)*1000.0));
  1584  0012E6  0E00               	movlw	0
  1585  0012E8  0100               	movlb	0	; () banked
  1586  0012EA  6FD5               	movwf	___ftmul@f2& (0+255),b
  1587  0012EC  0E7A               	movlw	122
  1588  0012EE  0100               	movlb	0	; () banked
  1589  0012F0  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1590  0012F2  0E44               	movlw	68
  1591  0012F4  0100               	movlb	0	; () banked
  1592  0012F6  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1593  0012F8  0E00               	movlw	0
  1594  0012FA  6E22               	movwf	Battery_Get@channelnum+1,c
  1595  0012FC  0E05               	movlw	5
  1596  0012FE  6E21               	movwf	Battery_Get@channelnum,c
  1597  001300  ECEF  F01B         	call	_Battery_Get	;wreg free
  1598  001304  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1599  001308  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1600  00130C  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1601  001310  ECE8  F00E         	call	___ftmul	;wreg free
  1602  001314  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1603  001318  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1604  00131C  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1605  001320  EC8C  F011         	call	___fttol	;wreg free
  1606  001324  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1607  001328  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1608  00132C  0E06               	movlw	6
  1609  00132E  ECD0  F01C         	call	_ToSend
  1610                           
  1611                           ;Communications.c: 26: ToSend(7, (int) (Battery_Get(6)*1000.0));
  1612  001332  0E00               	movlw	0
  1613  001334  0100               	movlb	0	; () banked
  1614  001336  6FD5               	movwf	___ftmul@f2& (0+255),b
  1615  001338  0E7A               	movlw	122
  1616  00133A  0100               	movlb	0	; () banked
  1617  00133C  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1618  00133E  0E44               	movlw	68
  1619  001340  0100               	movlb	0	; () banked
  1620  001342  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1621  001344  0E00               	movlw	0
  1622  001346  6E22               	movwf	Battery_Get@channelnum+1,c
  1623  001348  0E06               	movlw	6
  1624  00134A  6E21               	movwf	Battery_Get@channelnum,c
  1625  00134C  ECEF  F01B         	call	_Battery_Get	;wreg free
  1626  001350  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1627  001354  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1628  001358  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1629  00135C  ECE8  F00E         	call	___ftmul	;wreg free
  1630  001360  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1631  001364  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1632  001368  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1633  00136C  EC8C  F011         	call	___fttol	;wreg free
  1634  001370  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1635  001374  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1636  001378  0E07               	movlw	7
  1637  00137A  ECD0  F01C         	call	_ToSend
  1638                           
  1639                           ;Communications.c: 27: ToSend(8, (int) (Battery_Get(7)*1000.0));
  1640  00137E  0E00               	movlw	0
  1641  001380  0100               	movlb	0	; () banked
  1642  001382  6FD5               	movwf	___ftmul@f2& (0+255),b
  1643  001384  0E7A               	movlw	122
  1644  001386  0100               	movlb	0	; () banked
  1645  001388  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1646  00138A  0E44               	movlw	68
  1647  00138C  0100               	movlb	0	; () banked
  1648  00138E  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1649  001390  0E00               	movlw	0
  1650  001392  6E22               	movwf	Battery_Get@channelnum+1,c
  1651  001394  0E07               	movlw	7
  1652  001396  6E21               	movwf	Battery_Get@channelnum,c
  1653  001398  ECEF  F01B         	call	_Battery_Get	;wreg free
  1654  00139C  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1655  0013A0  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1656  0013A4  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1657  0013A8  ECE8  F00E         	call	___ftmul	;wreg free
  1658  0013AC  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1659  0013B0  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1660  0013B4  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1661  0013B8  EC8C  F011         	call	___fttol	;wreg free
  1662  0013BC  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1663  0013C0  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1664  0013C4  0E08               	movlw	8
  1665  0013C6  ECD0  F01C         	call	_ToSend
  1666                           
  1667                           ;Communications.c: 28: ToSend(9, (int) (Battery_Get(8)*1000.0));
  1668  0013CA  0E00               	movlw	0
  1669  0013CC  0100               	movlb	0	; () banked
  1670  0013CE  6FD5               	movwf	___ftmul@f2& (0+255),b
  1671  0013D0  0E7A               	movlw	122
  1672  0013D2  0100               	movlb	0	; () banked
  1673  0013D4  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1674  0013D6  0E44               	movlw	68
  1675  0013D8  0100               	movlb	0	; () banked
  1676  0013DA  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1677  0013DC  0E00               	movlw	0
  1678  0013DE  6E22               	movwf	Battery_Get@channelnum+1,c
  1679  0013E0  0E08               	movlw	8
  1680  0013E2  6E21               	movwf	Battery_Get@channelnum,c
  1681  0013E4  ECEF  F01B         	call	_Battery_Get	;wreg free
  1682  0013E8  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1683  0013EC  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1684  0013F0  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1685  0013F4  ECE8  F00E         	call	___ftmul	;wreg free
  1686  0013F8  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1687  0013FC  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1688  001400  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1689  001404  EC8C  F011         	call	___fttol	;wreg free
  1690  001408  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1691  00140C  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1692  001410  0E09               	movlw	9
  1693  001412  ECD0  F01C         	call	_ToSend
  1694                           
  1695                           ;Communications.c: 29: ToSend(10, (int) (Battery_Get(9)*1000.0));
  1696  001416  0E00               	movlw	0
  1697  001418  0100               	movlb	0	; () banked
  1698  00141A  6FD5               	movwf	___ftmul@f2& (0+255),b
  1699  00141C  0E7A               	movlw	122
  1700  00141E  0100               	movlb	0	; () banked
  1701  001420  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  1702  001422  0E44               	movlw	68
  1703  001424  0100               	movlb	0	; () banked
  1704  001426  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  1705  001428  0E00               	movlw	0
  1706  00142A  6E22               	movwf	Battery_Get@channelnum+1,c
  1707  00142C  0E09               	movlw	9
  1708  00142E  6E21               	movwf	Battery_Get@channelnum,c
  1709  001430  ECEF  F01B         	call	_Battery_Get	;wreg free
  1710  001434  C021  F0D2         	movff	?_Battery_Get,___ftmul@f1
  1711  001438  C022  F0D3         	movff	?_Battery_Get+1,___ftmul@f1+1
  1712  00143C  C023  F0D4         	movff	?_Battery_Get+2,___ftmul@f1+2
  1713  001440  ECE8  F00E         	call	___ftmul	;wreg free
  1714  001444  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  1715  001448  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  1716  00144C  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  1717  001450  EC8C  F011         	call	___fttol	;wreg free
  1718  001454  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1719  001458  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1720  00145C  0E0A               	movlw	10
  1721  00145E  ECD0  F01C         	call	_ToSend
  1722                           
  1723                           ;Communications.c: 30: ToSend(11, (int) Tempeture_Get(0));
  1724  001462  0E00               	movlw	0
  1725  001464  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1726  001466  0E00               	movlw	0
  1727  001468  6E21               	movwf	Tempeture_Get@channelnum,c
  1728  00146A  ECD8  F01B         	call	_Tempeture_Get	;wreg free
  1729  00146E  C021  F0E1         	movff	?_Tempeture_Get,___fttol@f1
  1730  001472  C022  F0E2         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1731  001476  C023  F0E3         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1732  00147A  EC8C  F011         	call	___fttol	;wreg free
  1733  00147E  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1734  001482  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1735  001486  0E0B               	movlw	11
  1736  001488  ECD0  F01C         	call	_ToSend
  1737                           
  1738                           ;Communications.c: 31: ToSend(12, (int) Tempeture_Get(1));
  1739  00148C  0E00               	movlw	0
  1740  00148E  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1741  001490  0E01               	movlw	1
  1742  001492  6E21               	movwf	Tempeture_Get@channelnum,c
  1743  001494  ECD8  F01B         	call	_Tempeture_Get	;wreg free
  1744  001498  C021  F0E1         	movff	?_Tempeture_Get,___fttol@f1
  1745  00149C  C022  F0E2         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1746  0014A0  C023  F0E3         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1747  0014A4  EC8C  F011         	call	___fttol	;wreg free
  1748  0014A8  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1749  0014AC  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1750  0014B0  0E0C               	movlw	12
  1751  0014B2  ECD0  F01C         	call	_ToSend
  1752                           
  1753                           ;Communications.c: 32: ToSend(13, (int) Tempeture_Get(2));
  1754  0014B6  0E00               	movlw	0
  1755  0014B8  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1756  0014BA  0E02               	movlw	2
  1757  0014BC  6E21               	movwf	Tempeture_Get@channelnum,c
  1758  0014BE  ECD8  F01B         	call	_Tempeture_Get	;wreg free
  1759  0014C2  C021  F0E1         	movff	?_Tempeture_Get,___fttol@f1
  1760  0014C6  C022  F0E2         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1761  0014CA  C023  F0E3         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1762  0014CE  EC8C  F011         	call	___fttol	;wreg free
  1763  0014D2  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1764  0014D6  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1765  0014DA  0E0D               	movlw	13
  1766  0014DC  ECD0  F01C         	call	_ToSend
  1767                           
  1768                           ;Communications.c: 33: ToSend(14, (int) Tempeture_Get(3));
  1769  0014E0  0E00               	movlw	0
  1770  0014E2  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1771  0014E4  0E03               	movlw	3
  1772  0014E6  6E21               	movwf	Tempeture_Get@channelnum,c
  1773  0014E8  ECD8  F01B         	call	_Tempeture_Get	;wreg free
  1774  0014EC  C021  F0E1         	movff	?_Tempeture_Get,___fttol@f1
  1775  0014F0  C022  F0E2         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1776  0014F4  C023  F0E3         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1777  0014F8  EC8C  F011         	call	___fttol	;wreg free
  1778  0014FC  C0E1  F0F0         	movff	?___fttol,ToSend@what
  1779  001500  C0E2  F0F1         	movff	?___fttol+1,ToSend@what+1
  1780  001504  0E0E               	movlw	14
  1781  001506  ECD0  F01C         	call	_ToSend
  1782                           
  1783                           ;Communications.c: 34: sendData(16);
  1784  00150A  0E10               	movlw	16
  1785  00150C  EC2E  F012         	call	_sendData
  1786                           
  1787                           ;Communications.c: 35: Delay(10);
  1788  001510  0E0A               	movlw	10
  1789  001512  6E1B               	movwf	Delay@d_lenth,c
  1790  001514  0E00               	movlw	0
  1791  001516  6E1C               	movwf	Delay@d_lenth+1,c
  1792  001518  0E00               	movlw	0
  1793  00151A  6E1D               	movwf	Delay@d_lenth+2,c
  1794  00151C  0E00               	movlw	0
  1795  00151E  6E1E               	movwf	Delay@d_lenth+3,c
  1796  001520  ECE2  F01A         	call	_Delay	;wreg free
  1797                           
  1798                           ;Communications.c: 36: LATEbits.LATE1 = 0;
  1799  001524  928D               	bcf	3981,1,c	;volatile
  1800                           
  1801                           ;Communications.c: 37: LATAbits.LATA4 ^= 1;
  1802  001526  7889               	btg	3977,4,c	;volatile
  1803  001528  0012               	return	
  1804  00152A                     __end_of_updateComms:
  1805                           	opt stack 0
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           intcon	equ	0xFF2
  1811                           postinc0	equ	0xFEE
  1812                           wreg	equ	0xFE8
  1813                           postdec1	equ	0xFE5
  1814                           fsr1l	equ	0xFE1
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _sendData *****************
  1818 ;; Defined at:
  1819 ;;		line 53 in file "FastTransfer.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  whereToSend     1    wreg     unsigned char 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  whereToSend     1   39[COMRAM] unsigned char 
  1824 ;;  i               2   41[COMRAM] int 
  1825 ;;  CS              1   40[COMRAM] unsigned char 
  1826 ;; Return value:  Size  Location     Type
  1827 ;;		None               void
  1828 ;; Registers used:
  1829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1835 ;;      Params:         0       0       0       0       0       0       0
  1836 ;;      Locals:         4       0       0       0       0       0       0
  1837 ;;      Temps:          1       0       0       0       0       0       0
  1838 ;;      Totals:         5       0       0       0       0       0       0
  1839 ;;Total ram usage:        5 bytes
  1840 ;; Hardware stack levels used:    1
  1841 ;; Hardware stack levels required when called:    7
  1842 ;; This function calls:
  1843 ;;		Absolute function
  1844 ;;		_CRC8
  1845 ;;		_FastTransfer_buffer_flush
  1846 ;;		_Send_put
  1847 ;;		_crcBufS_put
  1848 ;; This function is called by:
  1849 ;;		_updateComms
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text2
  1854  00245C                     __ptext2:
  1855                           	opt stack 0
  1856  00245C                     _sendData:
  1857                           	opt stack 22
  1858                           
  1859                           ;incstack = 0
  1860                           ;sendData@whereToSend stored from wreg
  1861  00245C  6E28               	movwf	sendData@whereToSend,c
  1862                           
  1863                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1864  00245E  C098  F01B         	movff	_sendStructAddress,CRC8@data
  1865  002462  C099  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1866  002466  C2CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1867  00246A  ECBD  F01A         	call	_CRC8	;wreg free
  1868  00246E  6E29               	movwf	sendData@CS,c
  1869                           
  1870                           ;FastTransfer.c: 58: serial_write(0x06);
  1871  002470  D801               	call	u5378
  1872  002472  D00B               	goto	l4925
  1873  002474                     u5378:
  1874  002474  0005               	push	
  1875  002476  6EFA               	movwf	pclath,c
  1876  002478  5036               	movf	_serial_write,w,c
  1877  00247A  6EFD               	movwf	tosl,c
  1878  00247C  5037               	movf	_serial_write+1,w,c
  1879  00247E  6EFE               	movwf	tosh,c
  1880  002480  50F8               	movf	tblptru,w,c
  1881  002482  6EFF               	movwf	tosu,c
  1882  002484  50FA               	movf	pclath,w,c
  1883  002486  0E06               	movlw	6
  1884  002488  0012               	return		;indir
  1885  00248A                     l4925:
  1886                           
  1887                           ;FastTransfer.c: 59: serial_write(0x85);
  1888  00248A  D801               	call	u5388
  1889  00248C  D00B               	goto	l4927
  1890  00248E                     u5388:
  1891  00248E  0005               	push	
  1892  002490  6EFA               	movwf	pclath,c
  1893  002492  5036               	movf	_serial_write,w,c
  1894  002494  6EFD               	movwf	tosl,c
  1895  002496  5037               	movf	_serial_write+1,w,c
  1896  002498  6EFE               	movwf	tosh,c
  1897  00249A  50F8               	movf	tblptru,w,c
  1898  00249C  6EFF               	movwf	tosu,c
  1899  00249E  50FA               	movf	pclath,w,c
  1900  0024A0  0E85               	movlw	133
  1901  0024A2  0012               	return		;indir
  1902  0024A4                     l4927:
  1903                           
  1904                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1905  0024A4  D801               	call	u5398
  1906  0024A6  D00B               	goto	l4929
  1907  0024A8                     u5398:
  1908  0024A8  0005               	push	
  1909  0024AA  6EFA               	movwf	pclath,c
  1910  0024AC  5036               	movf	_serial_write,w,c
  1911  0024AE  6EFD               	movwf	tosl,c
  1912  0024B0  5037               	movf	_serial_write+1,w,c
  1913  0024B2  6EFE               	movwf	tosh,c
  1914  0024B4  50F8               	movf	tblptru,w,c
  1915  0024B6  6EFF               	movwf	tosu,c
  1916  0024B8  50FA               	movf	pclath,w,c
  1917  0024BA  5028               	movf	sendData@whereToSend,w,c
  1918  0024BC  0012               	return		;indir
  1919  0024BE                     l4929:
  1920                           
  1921                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1922  0024BE  D801               	call	u5408
  1923  0024C0  D00B               	goto	l4931
  1924  0024C2                     u5408:
  1925  0024C2  0005               	push	
  1926  0024C4  6EFA               	movwf	pclath,c
  1927  0024C6  5036               	movf	_serial_write,w,c
  1928  0024C8  6EFD               	movwf	tosl,c
  1929  0024CA  5037               	movf	_serial_write+1,w,c
  1930  0024CC  6EFE               	movwf	tosh,c
  1931  0024CE  50F8               	movf	tblptru,w,c
  1932  0024D0  6EFF               	movwf	tosu,c
  1933  0024D2  50FA               	movf	pclath,w,c
  1934  0024D4  503F               	movf	_moduleAddress,w,c
  1935  0024D6  0012               	return		;indir
  1936  0024D8                     l4931:
  1937                           
  1938                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1939  0024D8  D801               	call	u5418
  1940  0024DA  D00C               	goto	l4933
  1941  0024DC                     u5418:
  1942  0024DC  0005               	push	
  1943  0024DE  6EFA               	movwf	pclath,c
  1944  0024E0  5036               	movf	_serial_write,w,c
  1945  0024E2  6EFD               	movwf	tosl,c
  1946  0024E4  5037               	movf	_serial_write+1,w,c
  1947  0024E6  6EFE               	movwf	tosh,c
  1948  0024E8  50F8               	movf	tblptru,w,c
  1949  0024EA  6EFF               	movwf	tosu,c
  1950  0024EC  50FA               	movf	pclath,w,c
  1951  0024EE  0102               	movlb	2	; () banked
  1952  0024F0  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1953  0024F2  0012               	return		;indir
  1954  0024F4                     l4933:
  1955                           
  1956                           ;FastTransfer.c: 66: int i;
  1957                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1958  0024F4  0E00               	movlw	0
  1959  0024F6  6E2B               	movwf	sendData@i+1,c
  1960  0024F8  0E00               	movlw	0
  1961  0024FA  6E2A               	movwf	sendData@i,c
  1962  0024FC  D017               	goto	l4939
  1963  0024FE                     l4935:
  1964                           
  1965                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1966  0024FE  D801               	call	u5428
  1967  002500  D013               	goto	l4937
  1968  002502                     u5428:
  1969  002502  0005               	push	
  1970  002504  6EFA               	movwf	pclath,c
  1971  002506  5036               	movf	_serial_write,w,c
  1972  002508  6EFD               	movwf	tosl,c
  1973  00250A  5037               	movf	_serial_write+1,w,c
  1974  00250C  6EFE               	movwf	tosh,c
  1975  00250E  50F8               	movf	tblptru,w,c
  1976  002510  6EFF               	movwf	tosu,c
  1977  002512  50FA               	movf	pclath,w,c
  1978  002514  502A               	movf	sendData@i,w,c
  1979  002516  0100               	movlb	0	; () banked
  1980  002518  2598               	addwf	_sendStructAddress& (0+255),w,b
  1981  00251A  6ED9               	movwf	fsr2l,c
  1982  00251C  502B               	movf	sendData@i+1,w,c
  1983  00251E  0100               	movlb	0	; () banked
  1984  002520  2199               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  1985  002522  6EDA               	movwf	fsr2h,c
  1986  002524  50DF               	movf	indf2,w,c
  1987  002526  0012               	return		;indir
  1988  002528                     l4937:
  1989  002528  4A2A               	infsnz	sendData@i,f,c
  1990  00252A  2A2B               	incf	sendData@i+1,f,c
  1991  00252C                     l4939:
  1992  00252C  0102               	movlb	2	; () banked
  1993  00252E  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1994  002530  5C2A               	subwf	sendData@i,w,c
  1995  002532  502B               	movf	sendData@i+1,w,c
  1996  002534  0A80               	xorlw	128
  1997  002536  6E27               	movwf	??_sendData& (0+255),c
  1998  002538  0102               	movlb	2	; () banked
  1999  00253A  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  2000  00253C  0A80               	xorlw	128
  2001  00253E  5827               	subwfb	??_sendData& (0+255),w,c
  2002  002540  A0D8               	btfss	status,0,c
  2003  002542  D7DD               	goto	l4935
  2004                           
  2005                           ; BSR set to: 2
  2006                           ;FastTransfer.c: 69: }
  2007                           ;FastTransfer.c: 72: serial_write(CS);
  2008                           
  2009                           ; BSR set to: 2
  2010  002544  D801               	call	u5448
  2011  002546  D00B               	goto	l4943
  2012  002548                     u5448:
  2013  002548  0005               	push	
  2014  00254A  6EFA               	movwf	pclath,c
  2015  00254C  5036               	movf	_serial_write,w,c
  2016  00254E  6EFD               	movwf	tosl,c
  2017  002550  5037               	movf	_serial_write+1,w,c
  2018  002552  6EFE               	movwf	tosh,c
  2019  002554  50F8               	movf	tblptru,w,c
  2020  002556  6EFF               	movwf	tosu,c
  2021  002558  50FA               	movf	pclath,w,c
  2022  00255A  5029               	movf	sendData@CS,w,c
  2023  00255C  0012               	return		;indir
  2024  00255E                     l4943:
  2025                           
  2026                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  2027  00255E  0E9C               	movlw	low _crc_buffer
  2028  002560  6E1B               	movwf	crcBufS_put@_this,c
  2029  002562  0E00               	movlw	high _crc_buffer
  2030  002564  6E1C               	movwf	crcBufS_put@_this+1,c
  2031  002566  C028  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  2032  00256A  C029  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  2033  00256E  0E00               	movlw	0
  2034  002570  6E1F               	movwf	crcBufS_put@status,c
  2035  002572  EC16  F016         	call	_crcBufS_put
  2036                           
  2037                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  2038  002576  0E00               	movlw	low _ring_buffer
  2039  002578  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  2040  00257A  0E02               	movlw	high _ring_buffer
  2041  00257C  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  2042  00257E  0E00               	movlw	0
  2043  002580  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  2044  002582  0E01               	movlw	1
  2045  002584  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  2046  002586  EC0E  F01A         	call	_FastTransfer_buffer_flush	;wreg free
  2047  00258A  0012               	return		;funcret
  2048  00258C                     __end_of_sendData:
  2049                           	opt stack 0
  2050                           tosu	equ	0xFFF
  2051                           tosh	equ	0xFFE
  2052                           tosl	equ	0xFFD
  2053                           pclath	equ	0xFFA
  2054                           tblptru	equ	0xFF8
  2055                           tblptrh	equ	0xFF7
  2056                           tblptrl	equ	0xFF6
  2057                           tablat	equ	0xFF5
  2058                           intcon	equ	0xFF2
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1l	equ	0xFE1
  2063                           indf2	equ	0xFDF
  2064                           fsr2h	equ	0xFDA
  2065                           fsr2l	equ	0xFD9
  2066                           status	equ	0xFD8
  2067                           
  2068 ;; *************** function _crcBufS_put *****************
  2069 ;; Defined at:
  2070 ;;		line 321 in file "FastTransfer.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2073 ;;		 -> crc_buffer(17), 
  2074 ;;  address         1   28[COMRAM] unsigned char 
  2075 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2076 ;;  status          1   30[COMRAM] unsigned char 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;		None               void
  2081 ;; Registers used:
  2082 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2088 ;;      Params:         5       0       0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0
  2090 ;;      Temps:          2       0       0       0       0       0       0
  2091 ;;      Totals:         7       0       0       0       0       0       0
  2092 ;;Total ram usage:        7 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    4
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_sendData
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text3
  2103  002C2C                     __ptext3:
  2104                           	opt stack 0
  2105  002C2C                     _crcBufS_put:
  2106                           	opt stack 24
  2107                           
  2108                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  2109                           
  2110                           ;incstack = 0
  2111  002C2C  EE20 F00F          	lfsr	2,15
  2112  002C30  501B               	movf	crcBufS_put@_this,w,c
  2113  002C32  26D9               	addwf	fsr2l,f,c
  2114  002C34  501C               	movf	crcBufS_put@_this+1,w,c
  2115  002C36  22DA               	addwfc	fsr2h,f,c
  2116  002C38  CFDE F020          	movff	postinc2,??_crcBufS_put
  2117  002C3C  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2118  002C40  5020               	movf	??_crcBufS_put,w,c
  2119  002C42  241B               	addwf	crcBufS_put@_this,w,c
  2120  002C44  6ED9               	movwf	fsr2l,c
  2121  002C46  5021               	movf	??_crcBufS_put+1,w,c
  2122  002C48  201C               	addwfc	crcBufS_put@_this+1,w,c
  2123  002C4A  6EDA               	movwf	fsr2h,c
  2124  002C4C  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2125                           
  2126                           ;FastTransfer.c: 323: _this->head++;
  2127  002C50  EE20 F00F          	lfsr	2,15
  2128  002C54  501B               	movf	crcBufS_put@_this,w,c
  2129  002C56  26D9               	addwf	fsr2l,f,c
  2130  002C58  501C               	movf	crcBufS_put@_this+1,w,c
  2131  002C5A  22DA               	addwfc	fsr2h,f,c
  2132  002C5C  2ADE               	incf	postinc2,f,c
  2133  002C5E  0E00               	movlw	0
  2134  002C60  22DD               	addwfc	postdec2,f,c
  2135                           
  2136                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  2137  002C62  EE20 F00F          	lfsr	2,15
  2138  002C66  501B               	movf	crcBufS_put@_this,w,c
  2139  002C68  26D9               	addwf	fsr2l,f,c
  2140  002C6A  501C               	movf	crcBufS_put@_this+1,w,c
  2141  002C6C  22DA               	addwfc	fsr2h,f,c
  2142  002C6E  CFDE F020          	movff	postinc2,??_crcBufS_put
  2143  002C72  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2144  002C76  5020               	movf	??_crcBufS_put,w,c
  2145  002C78  241B               	addwf	crcBufS_put@_this,w,c
  2146  002C7A  6ED9               	movwf	fsr2l,c
  2147  002C7C  5021               	movf	??_crcBufS_put+1,w,c
  2148  002C7E  201C               	addwfc	crcBufS_put@_this+1,w,c
  2149  002C80  6EDA               	movwf	fsr2h,c
  2150  002C82  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2151                           
  2152                           ;FastTransfer.c: 325: _this->head++;
  2153  002C86  EE20 F00F          	lfsr	2,15
  2154  002C8A  501B               	movf	crcBufS_put@_this,w,c
  2155  002C8C  26D9               	addwf	fsr2l,f,c
  2156  002C8E  501C               	movf	crcBufS_put@_this+1,w,c
  2157  002C90  22DA               	addwfc	fsr2h,f,c
  2158  002C92  2ADE               	incf	postinc2,f,c
  2159  002C94  0E00               	movlw	0
  2160  002C96  22DD               	addwfc	postdec2,f,c
  2161                           
  2162                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  2163  002C98  EE20 F00F          	lfsr	2,15
  2164  002C9C  501B               	movf	crcBufS_put@_this,w,c
  2165  002C9E  26D9               	addwf	fsr2l,f,c
  2166  002CA0  501C               	movf	crcBufS_put@_this+1,w,c
  2167  002CA2  22DA               	addwfc	fsr2h,f,c
  2168  002CA4  CFDE F020          	movff	postinc2,??_crcBufS_put
  2169  002CA8  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2170  002CAC  5020               	movf	??_crcBufS_put,w,c
  2171  002CAE  241B               	addwf	crcBufS_put@_this,w,c
  2172  002CB0  6ED9               	movwf	fsr2l,c
  2173  002CB2  5021               	movf	??_crcBufS_put+1,w,c
  2174  002CB4  201C               	addwfc	crcBufS_put@_this+1,w,c
  2175  002CB6  6EDA               	movwf	fsr2h,c
  2176  002CB8  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2177                           
  2178                           ;FastTransfer.c: 327: _this->head++;
  2179  002CBC  EE20 F00F          	lfsr	2,15
  2180  002CC0  501B               	movf	crcBufS_put@_this,w,c
  2181  002CC2  26D9               	addwf	fsr2l,f,c
  2182  002CC4  501C               	movf	crcBufS_put@_this+1,w,c
  2183  002CC6  22DA               	addwfc	fsr2h,f,c
  2184  002CC8  2ADE               	incf	postinc2,f,c
  2185  002CCA  0E00               	movlw	0
  2186  002CCC  22DD               	addwfc	postdec2,f,c
  2187                           
  2188                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  2189  002CCE  EE20 F00F          	lfsr	2,15
  2190  002CD2  501B               	movf	crcBufS_put@_this,w,c
  2191  002CD4  26D9               	addwf	fsr2l,f,c
  2192  002CD6  501C               	movf	crcBufS_put@_this+1,w,c
  2193  002CD8  22DA               	addwfc	fsr2h,f,c
  2194  002CDA  0E01               	movlw	1
  2195  002CDC  BEDB               	btfsc	plusw2,7,c
  2196  002CDE  0012               	return	
  2197  002CE0  0E01               	movlw	1
  2198  002CE2  50DB               	movf	plusw2,w,c
  2199  002CE4  E104               	bnz	u2820
  2200  002CE6  0E0F               	movlw	15
  2201  002CE8  5CDE               	subwf	postinc2,w,c
  2202  002CEA  A0D8               	btfss	status,0,c
  2203  002CEC  0012               	return	
  2204  002CEE                     u2820:
  2205                           
  2206                           ;FastTransfer.c: 329: _this->head = 0;
  2207  002CEE  EE20 F00F          	lfsr	2,15
  2208  002CF2  501B               	movf	crcBufS_put@_this,w,c
  2209  002CF4  26D9               	addwf	fsr2l,f,c
  2210  002CF6  501C               	movf	crcBufS_put@_this+1,w,c
  2211  002CF8  22DA               	addwfc	fsr2h,f,c
  2212  002CFA  0E00               	movlw	0
  2213  002CFC  6EDE               	movwf	postinc2,c
  2214  002CFE  0E00               	movlw	0
  2215  002D00  6EDD               	movwf	postdec2,c
  2216  002D02  0012               	return	
  2217  002D04                     __end_of_crcBufS_put:
  2218                           	opt stack 0
  2219                           tosu	equ	0xFFF
  2220                           tosh	equ	0xFFE
  2221                           tosl	equ	0xFFD
  2222                           pclath	equ	0xFFA
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           intcon	equ	0xFF2
  2228                           postinc0	equ	0xFEE
  2229                           wreg	equ	0xFE8
  2230                           postdec1	equ	0xFE5
  2231                           fsr1l	equ	0xFE1
  2232                           indf2	equ	0xFDF
  2233                           postinc2	equ	0xFDE
  2234                           postdec2	equ	0xFDD
  2235                           plusw2	equ	0xFDB
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _FastTransfer_buffer_flush *****************
  2241 ;; Defined at:
  2242 ;;		line 261 in file "FastTransfer.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  2245 ;;		 -> ring_buffer(206), 
  2246 ;;  clearBuffer     2   36[COMRAM] const int 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;		None               void
  2251 ;; Registers used:
  2252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2258 ;;      Params:         4       0       0       0       0       0       0
  2259 ;;      Locals:         0       0       0       0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0
  2261 ;;      Totals:         4       0       0       0       0       0       0
  2262 ;;Total ram usage:        4 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    5
  2265 ;; This function calls:
  2266 ;;		_memset
  2267 ;; This function is called by:
  2268 ;;		_sendData
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text4
  2273  00341C                     __ptext4:
  2274                           	opt stack 0
  2275  00341C                     _FastTransfer_buffer_flush:
  2276                           	opt stack 23
  2277                           
  2278                           ;FastTransfer.c: 262: _this->count = 0;
  2279                           
  2280                           ;incstack = 0
  2281  00341C  EE20 F0CC          	lfsr	2,204
  2282  003420  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2283  003422  26D9               	addwf	fsr2l,f,c
  2284  003424  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2285  003426  22DA               	addwfc	fsr2h,f,c
  2286  003428  0E00               	movlw	0
  2287  00342A  6EDE               	movwf	postinc2,c
  2288  00342C  0E00               	movlw	0
  2289  00342E  6EDD               	movwf	postdec2,c
  2290                           
  2291                           ;FastTransfer.c: 263: _this->head = 0;
  2292  003430  EE20 F0C8          	lfsr	2,200
  2293  003434  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2294  003436  26D9               	addwf	fsr2l,f,c
  2295  003438  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2296  00343A  22DA               	addwfc	fsr2h,f,c
  2297  00343C  0E00               	movlw	0
  2298  00343E  6EDE               	movwf	postinc2,c
  2299  003440  0E00               	movlw	0
  2300  003442  6EDD               	movwf	postdec2,c
  2301                           
  2302                           ;FastTransfer.c: 264: _this->tail = 0;
  2303  003444  EE20 F0CA          	lfsr	2,202
  2304  003448  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2305  00344A  26D9               	addwf	fsr2l,f,c
  2306  00344C  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2307  00344E  22DA               	addwfc	fsr2h,f,c
  2308  003450  0E00               	movlw	0
  2309  003452  6EDE               	movwf	postinc2,c
  2310  003454  0E00               	movlw	0
  2311  003456  6EDD               	movwf	postdec2,c
  2312                           
  2313                           ;FastTransfer.c: 265: if (clearBuffer) {
  2314  003458  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  2315  00345A  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  2316  00345C  B4D8               	btfsc	status,2,c
  2317  00345E  0012               	return	
  2318                           
  2319                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2320  003460  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2321  003464  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2322  003468  0E00               	movlw	0
  2323  00346A  6E1E               	movwf	memset@c+1,c
  2324  00346C  0E00               	movlw	0
  2325  00346E  6E1D               	movwf	memset@c,c
  2326  003470  0E00               	movlw	0
  2327  003472  6E20               	movwf	memset@n+1,c
  2328  003474  0EC8               	movlw	200
  2329  003476  6E1F               	movwf	memset@n,c
  2330  003478  EC06  F01C         	call	_memset	;wreg free
  2331  00347C  0012               	return	
  2332  00347E                     __end_of_FastTransfer_buffer_flush:
  2333                           	opt stack 0
  2334                           tosu	equ	0xFFF
  2335                           tosh	equ	0xFFE
  2336                           tosl	equ	0xFFD
  2337                           pclath	equ	0xFFA
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           intcon	equ	0xFF2
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           postdec1	equ	0xFE5
  2346                           fsr1l	equ	0xFE1
  2347                           indf2	equ	0xFDF
  2348                           postinc2	equ	0xFDE
  2349                           postdec2	equ	0xFDD
  2350                           plusw2	equ	0xFDB
  2351                           fsr2h	equ	0xFDA
  2352                           fsr2l	equ	0xFD9
  2353                           status	equ	0xFD8
  2354                           
  2355 ;; *************** function _receiveData *****************
  2356 ;; Defined at:
  2357 ;;		line 82 in file "FastTransfer.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;		None
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  holder          3   16[BANK0 ] unsigned char [3]
  2362 ;;  crcHolder       1   20[BANK0 ] unsigned char 
  2363 ;;  holder          3   13[BANK0 ] unsigned char [3]
  2364 ;;  crcHolder       1   19[BANK0 ] unsigned char 
  2365 ;;  u               2   21[BANK0 ] int 
  2366 ;;  r               2   23[BANK0 ] int 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      unsigned char 
  2369 ;; Registers used:
  2370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2376 ;;      Params:         0       0       0       0       0       0       0
  2377 ;;      Locals:         0      12       0       0       0       0       0
  2378 ;;      Temps:          0       6       0       0       0       0       0
  2379 ;;      Totals:         0      18       0       0       0       0       0
  2380 ;;Total ram usage:       18 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    8
  2383 ;; This function calls:
  2384 ;;		Absolute function
  2385 ;;		_CRC8
  2386 ;;		_CRCcheck
  2387 ;;		_Receive_available
  2388 ;;		_Receive_get
  2389 ;;		_Receive_peek
  2390 ;;		_Send_put
  2391 ;; This function is called by:
  2392 ;;		_updateComms
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text5
  2397  00061E                     __ptext5:
  2398                           	opt stack 0
  2399  00061E                     _receiveData:
  2400                           	opt stack 21
  2401                           
  2402                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2403                           
  2404                           ;incstack = 0
  2405  00061E  5043               	movf	_rx_len,w,c
  2406  000620  A4D8               	btfss	status,2,c
  2407  000622  D0AC               	goto	l4985
  2408                           
  2409                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2410  000624  D801               	call	u5468
  2411  000626  D00A               	goto	u5469
  2412  000628                     u5468:
  2413  000628  0005               	push	
  2414  00062A  6EFA               	movwf	pclath,c
  2415  00062C  5032               	movf	_serial_available,w,c
  2416  00062E  6EFD               	movwf	tosl,c
  2417  000630  5033               	movf	_serial_available+1,w,c
  2418  000632  6EFE               	movwf	tosh,c
  2419  000634  50F8               	movf	tblptru,w,c
  2420  000636  6EFF               	movwf	tosu,c
  2421  000638  50FA               	movf	pclath,w,c
  2422  00063A  0012               	return		;indir
  2423  00063C                     u5469:
  2424  00063C  BE1E               	btfsc	?_Receive_available+1,7,c
  2425  00063E  D09E               	goto	l4985
  2426  000640  501E               	movf	?_Receive_available+1,w,c
  2427  000642  E11E               	bnz	l4961
  2428  000644  0E05               	movlw	5
  2429  000646  5C1D               	subwf	?_Receive_available,w,c
  2430  000648  B0D8               	btfsc	status,0,c
  2431  00064A  D01A               	goto	l4961
  2432  00064C  D097               	goto	l4985
  2433  00064E                     l4953:
  2434                           
  2435                           ;FastTransfer.c: 93: alignErrorCounter++;
  2436  00064E  0100               	movlb	0	; () banked
  2437  000650  4B8E               	infsnz	_alignErrorCounter& (0+255),f,b
  2438  000652  2B8F               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2442  000654  D801               	call	u5488
  2443  000656  D00A               	goto	u5489
  2444  000658                     u5488:
  2445  000658  0005               	push	
  2446  00065A  6EFA               	movwf	pclath,c
  2447  00065C  5032               	movf	_serial_available,w,c
  2448  00065E  6EFD               	movwf	tosl,c
  2449  000660  5033               	movf	_serial_available+1,w,c
  2450  000662  6EFE               	movwf	tosh,c
  2451  000664  50F8               	movf	tblptru,w,c
  2452  000666  6EFF               	movwf	tosu,c
  2453  000668  50FA               	movf	pclath,w,c
  2454  00066A  0012               	return		;indir
  2455  00066C                     u5489:
  2456  00066C  BE1E               	btfsc	?_Receive_available+1,7,c
  2457  00066E  D006               	goto	l4957
  2458  000670  501E               	movf	?_Receive_available+1,w,c
  2459  000672  E106               	bnz	l4961
  2460  000674  0E05               	movlw	5
  2461  000676  5C1D               	subwf	?_Receive_available,w,c
  2462  000678  B0D8               	btfsc	status,0,c
  2463  00067A  D002               	goto	l4961
  2464  00067C                     l4957:
  2465                           
  2466                           ;FastTransfer.c: 95: return 0;
  2467  00067C  0E00               	movlw	0
  2468  00067E  0012               	return	
  2469  000680                     l4961:
  2470  000680  D801               	call	u5508
  2471  000682  D00A               	goto	u5509
  2472  000684                     u5508:
  2473  000684  0005               	push	
  2474  000686  6EFA               	movwf	pclath,c
  2475  000688  5034               	movf	_serial_read,w,c
  2476  00068A  6EFD               	movwf	tosl,c
  2477  00068C  5035               	movf	_serial_read+1,w,c
  2478  00068E  6EFE               	movwf	tosh,c
  2479  000690  50F8               	movf	tblptru,w,c
  2480  000692  6EFF               	movwf	tosu,c
  2481  000694  50FA               	movf	pclath,w,c
  2482  000696  0012               	return		;indir
  2483  000698                     u5509:
  2484  000698  0A06               	xorlw	6
  2485  00069A  A4D8               	btfss	status,2,c
  2486  00069C  D7D8               	goto	l4953
  2487                           
  2488                           ;FastTransfer.c: 96: }
  2489                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2490  00069E  D801               	call	u5528
  2491  0006A0  D00A               	goto	u5529
  2492  0006A2                     u5528:
  2493  0006A2  0005               	push	
  2494  0006A4  6EFA               	movwf	pclath,c
  2495  0006A6  5034               	movf	_serial_read,w,c
  2496  0006A8  6EFD               	movwf	tosl,c
  2497  0006AA  5035               	movf	_serial_read+1,w,c
  2498  0006AC  6EFE               	movwf	tosh,c
  2499  0006AE  50F8               	movf	tblptru,w,c
  2500  0006B0  6EFF               	movwf	tosu,c
  2501  0006B2  50FA               	movf	pclath,w,c
  2502  0006B4  0012               	return		;indir
  2503  0006B6                     u5529:
  2504  0006B6  0A85               	xorlw	133
  2505  0006B8  A4D8               	btfss	status,2,c
  2506  0006BA  D060               	goto	l4985
  2507                           
  2508                           ;FastTransfer.c: 98: rx_address = serial_read();
  2509  0006BC  D801               	call	u5548
  2510  0006BE  D00A               	goto	u5549
  2511  0006C0                     u5548:
  2512  0006C0  0005               	push	
  2513  0006C2  6EFA               	movwf	pclath,c
  2514  0006C4  5034               	movf	_serial_read,w,c
  2515  0006C6  6EFD               	movwf	tosl,c
  2516  0006C8  5035               	movf	_serial_read+1,w,c
  2517  0006CA  6EFE               	movwf	tosh,c
  2518  0006CC  50F8               	movf	tblptru,w,c
  2519  0006CE  6EFF               	movwf	tosu,c
  2520  0006D0  50FA               	movf	pclath,w,c
  2521  0006D2  0012               	return		;indir
  2522  0006D4                     u5549:
  2523  0006D4  6E41               	movwf	_rx_address,c
  2524                           
  2525                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2526  0006D6  D801               	call	u5558
  2527  0006D8  D00A               	goto	u5559
  2528  0006DA                     u5558:
  2529  0006DA  0005               	push	
  2530  0006DC  6EFA               	movwf	pclath,c
  2531  0006DE  5034               	movf	_serial_read,w,c
  2532  0006E0  6EFD               	movwf	tosl,c
  2533  0006E2  5035               	movf	_serial_read+1,w,c
  2534  0006E4  6EFE               	movwf	tosh,c
  2535  0006E6  50F8               	movf	tblptru,w,c
  2536  0006E8  6EFF               	movwf	tosu,c
  2537  0006EA  50FA               	movf	pclath,w,c
  2538  0006EC  0012               	return		;indir
  2539  0006EE                     u5559:
  2540  0006EE  6E40               	movwf	_returnAddress,c
  2541                           
  2542                           ;FastTransfer.c: 100: rx_len = serial_read();
  2543  0006F0  D801               	call	u5568
  2544  0006F2  D00A               	goto	u5569
  2545  0006F4                     u5568:
  2546  0006F4  0005               	push	
  2547  0006F6  6EFA               	movwf	pclath,c
  2548  0006F8  5034               	movf	_serial_read,w,c
  2549  0006FA  6EFD               	movwf	tosl,c
  2550  0006FC  5035               	movf	_serial_read+1,w,c
  2551  0006FE  6EFE               	movwf	tosh,c
  2552  000700  50F8               	movf	tblptru,w,c
  2553  000702  6EFF               	movwf	tosu,c
  2554  000704  50FA               	movf	pclath,w,c
  2555  000706  0012               	return		;indir
  2556  000708                     u5569:
  2557  000708  6E43               	movwf	_rx_len,c
  2558                           
  2559                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2560  00070A  503F               	movf	_moduleAddress,w,c
  2561  00070C  1841               	xorwf	_rx_address,w,c
  2562  00070E  B4D8               	btfsc	status,2,c
  2563  000710  D035               	goto	l4985
  2564                           
  2565                           ;FastTransfer.c: 103: addressErrorCounter++;
  2566  000712  0100               	movlb	0	; () banked
  2567  000714  4B8C               	infsnz	_addressErrorCounter& (0+255),f,b
  2568  000716  2B8D               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;FastTransfer.c: 106: int u;
  2572                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2573  000718  0E00               	movlw	0
  2574  00071A  0100               	movlb	0	; () banked
  2575  00071C  6FD7               	movwf	(receiveData@u+1)& (0+255),b
  2576  00071E  0E00               	movlw	0
  2577  000720  6FD6               	movwf	receiveData@u& (0+255),b
  2578  000722  D00F               	goto	l4977
  2579  000724                     l4973:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;FastTransfer.c: 108: serial_read();
  2583  000724  D801               	call	u5588
  2584  000726  D00A               	goto	l4975
  2585  000728                     u5588:
  2586  000728  0005               	push	
  2587  00072A  6EFA               	movwf	pclath,c
  2588  00072C  5034               	movf	_serial_read,w,c
  2589  00072E  6EFD               	movwf	tosl,c
  2590  000730  5035               	movf	_serial_read+1,w,c
  2591  000732  6EFE               	movwf	tosh,c
  2592  000734  50F8               	movf	tblptru,w,c
  2593  000736  6EFF               	movwf	tosu,c
  2594  000738  50FA               	movf	pclath,w,c
  2595  00073A  0012               	return		;indir
  2596  00073C                     l4975:
  2597  00073C  0100               	movlb	0	; () banked
  2598  00073E  4BD6               	infsnz	receiveData@u& (0+255),f,b
  2599  000740  2BD7               	incf	(receiveData@u+1)& (0+255),f,b
  2600  000742                     l4977:
  2601                           
  2602                           ; BSR set to: 0
  2603  000742  5043               	movf	_rx_len,w,c
  2604  000744  0100               	movlb	0	; () banked
  2605  000746  6FC8               	movwf	??_receiveData& (0+255),b
  2606  000748  6BC9               	clrf	(??_receiveData+1)& (0+255),b
  2607  00074A  0E01               	movlw	1
  2608  00074C  0100               	movlb	0	; () banked
  2609  00074E  27C8               	addwf	??_receiveData& (0+255),f,b
  2610  000750  0E00               	movlw	0
  2611  000752  23C9               	addwfc	(??_receiveData+1)& (0+255),f,b
  2612  000754  0100               	movlb	0	; () banked
  2613  000756  51D6               	movf	receiveData@u& (0+255),w,b
  2614  000758  0100               	movlb	0	; () banked
  2615  00075A  5DC8               	subwf	??_receiveData& (0+255),w,b
  2616  00075C  0100               	movlb	0	; () banked
  2617  00075E  51C9               	movf	(??_receiveData+1)& (0+255),w,b
  2618  000760  0A80               	xorlw	128
  2619  000762  0100               	movlb	0	; () banked
  2620  000764  6FCA               	movwf	(??_receiveData+2)& (0+255),b
  2621  000766  0100               	movlb	0	; () banked
  2622  000768  51D7               	movf	(receiveData@u+1)& (0+255),w,b
  2623  00076A  0A80               	xorlw	128
  2624  00076C  0100               	movlb	0	; () banked
  2625  00076E  59CA               	subwfb	(??_receiveData+2)& (0+255),w,b
  2626  000770  B0D8               	btfsc	status,0,c
  2627  000772  D7D8               	goto	l4973
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;FastTransfer.c: 109: }
  2631                           ;FastTransfer.c: 110: rx_len = 0;
  2632                           
  2633                           ; BSR set to: 0
  2634  000774  0E00               	movlw	0
  2635  000776  6E43               	movwf	_rx_len,c
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;FastTransfer.c: 111: return 0;
  2639  000778  0E00               	movlw	0
  2640                           
  2641                           ; BSR set to: 0
  2642  00077A  0012               	return	
  2643  00077C                     l4985:
  2644                           
  2645                           ;FastTransfer.c: 112: }
  2646                           ;FastTransfer.c: 114: }
  2647                           ;FastTransfer.c: 115: }
  2648                           ;FastTransfer.c: 116: }
  2649                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2650  00077C  5043               	movf	_rx_len,w,c
  2651  00077E  B4D8               	btfsc	status,2,c
  2652  000780  D2A6               	goto	l5109
  2653                           
  2654                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2655  000782  5042               	movf	_rx_array_inx,w,c
  2656  000784  A4D8               	btfss	status,2,c
  2657  000786  D044               	goto	l5009
  2658  000788                     l4991:
  2659  000788  D801               	call	u5628
  2660  00078A  D00A               	goto	u5629
  2661  00078C                     u5628:
  2662  00078C  0005               	push	
  2663  00078E  6EFA               	movwf	pclath,c
  2664  000790  5032               	movf	_serial_available,w,c
  2665  000792  6EFD               	movwf	tosl,c
  2666  000794  5033               	movf	_serial_available+1,w,c
  2667  000796  6EFE               	movwf	tosh,c
  2668  000798  50F8               	movf	tblptru,w,c
  2669  00079A  6EFF               	movwf	tosu,c
  2670  00079C  50FA               	movf	pclath,w,c
  2671  00079E  0012               	return		;indir
  2672  0007A0                     u5629:
  2673  0007A0  BE1E               	btfsc	?_Receive_available+1,7,c
  2674  0007A2  D7F2               	goto	l4991
  2675  0007A4  501E               	movf	?_Receive_available+1,w,c
  2676  0007A6  E103               	bnz	l4993
  2677  0007A8  041D               	decf	?_Receive_available,w,c
  2678  0007AA  A0D8               	btfss	status,0,c
  2679  0007AC  D7ED               	goto	l4991
  2680  0007AE                     l4993:
  2681                           
  2682                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2683  0007AE  D801               	call	u5648
  2684  0007B0  D00B               	goto	u5649
  2685  0007B2                     u5648:
  2686  0007B2  0005               	push	
  2687  0007B4  0100               	movlb	0	; () banked
  2688  0007B6  6EFA               	movwf	pclath,c
  2689  0007B8  519A               	movf	_serial_peek& (0+255),w,b
  2690  0007BA  6EFD               	movwf	tosl,c
  2691  0007BC  519B               	movf	(_serial_peek+1)& (0+255),w,b
  2692  0007BE  6EFE               	movwf	tosh,c
  2693  0007C0  50F8               	movf	tblptru,w,c
  2694  0007C2  6EFF               	movwf	tosu,c
  2695  0007C4  50FA               	movf	pclath,w,c
  2696  0007C6  0012               	return		;indir
  2697  0007C8                     u5649:
  2698  0007C8  0AFF               	xorlw	255
  2699  0007CA  A4D8               	btfss	status,2,c
  2700  0007CC  D021               	goto	l5009
  2701                           
  2702                           ;FastTransfer.c: 125: CRCcheck();
  2703  0007CE  EC39  F00E         	call	_CRCcheck	;wreg free
  2704                           
  2705                           ;FastTransfer.c: 126: rx_len = 0;
  2706  0007D2  0E00               	movlw	0
  2707  0007D4  6E43               	movwf	_rx_len,c
  2708                           
  2709                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2710  0007D6  0E00               	movlw	0
  2711  0007D8  6E42               	movwf	_rx_array_inx,c
  2712                           
  2713                           ;FastTransfer.c: 128: return 0;
  2714  0007DA  0E00               	movlw	0
  2715  0007DC  0012               	return	
  2716  0007DE                     l5005:
  2717                           
  2718                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2719  0007DE  D801               	call	u5668
  2720  0007E0  D00A               	goto	u5669
  2721  0007E2                     u5668:
  2722  0007E2  0005               	push	
  2723  0007E4  6EFA               	movwf	pclath,c
  2724  0007E6  5034               	movf	_serial_read,w,c
  2725  0007E8  6EFD               	movwf	tosl,c
  2726  0007EA  5035               	movf	_serial_read+1,w,c
  2727  0007EC  6EFE               	movwf	tosh,c
  2728  0007EE  50F8               	movf	tblptru,w,c
  2729  0007F0  6EFF               	movwf	tosu,c
  2730  0007F2  50FA               	movf	pclath,w,c
  2731  0007F4  0012               	return		;indir
  2732  0007F6                     u5669:
  2733  0007F6  0100               	movlb	0	; () banked
  2734  0007F8  6FC8               	movwf	??_receiveData& (0+255),b
  2735  0007FA  5042               	movf	_rx_array_inx,w,c
  2736  0007FC  0D01               	mullw	1
  2737  0007FE  0E00               	movlw	low _rx_buffer
  2738  000800  24F3               	addwf	prodl,w,c
  2739  000802  6ED9               	movwf	fsr2l,c
  2740  000804  0E03               	movlw	high _rx_buffer
  2741  000806  20F4               	addwfc	prodh,w,c
  2742  000808  6EDA               	movwf	fsr2h,c
  2743  00080A  C0C8  FFDF         	movff	??_receiveData,indf2
  2744                           
  2745                           ; BSR set to: 0
  2746  00080E  2A42               	incf	_rx_array_inx,f,c
  2747  000810                     l5009:
  2748  000810  D801               	call	u5678
  2749  000812  D00A               	goto	u5679
  2750  000814                     u5678:
  2751  000814  0005               	push	
  2752  000816  6EFA               	movwf	pclath,c
  2753  000818  5032               	movf	_serial_available,w,c
  2754  00081A  6EFD               	movwf	tosl,c
  2755  00081C  5033               	movf	_serial_available+1,w,c
  2756  00081E  6EFE               	movwf	tosh,c
  2757  000820  50F8               	movf	tblptru,w,c
  2758  000822  6EFF               	movwf	tosu,c
  2759  000824  50FA               	movf	pclath,w,c
  2760  000826  0012               	return		;indir
  2761  000828                     u5679:
  2762  000828  501D               	movf	?_Receive_available,w,c
  2763  00082A  101E               	iorwf	?_Receive_available+1,w,c
  2764  00082C  B4D8               	btfsc	status,2,c
  2765  00082E  D004               	goto	l5013
  2766  000830  5042               	movf	_rx_array_inx,w,c
  2767  000832  5C43               	subwf	_rx_len,w,c
  2768  000834  B0D8               	btfsc	status,0,c
  2769  000836  D7D3               	goto	l5005
  2770  000838                     l5013:
  2771                           
  2772                           ;FastTransfer.c: 135: }
  2773                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2774  000838  5043               	movf	_rx_len,w,c
  2775  00083A  0100               	movlb	0	; () banked
  2776  00083C  6FC8               	movwf	??_receiveData& (0+255),b
  2777  00083E  6BC9               	clrf	(??_receiveData+1)& (0+255),b
  2778  000840  0EFF               	movlw	255
  2779  000842  0100               	movlb	0	; () banked
  2780  000844  6FCA               	movwf	(??_receiveData+2)& (0+255),b
  2781  000846  0EFF               	movlw	255
  2782  000848  0100               	movlb	0	; () banked
  2783  00084A  6FCB               	movwf	(??_receiveData+3)& (0+255),b
  2784  00084C  5042               	movf	_rx_array_inx,w,c
  2785  00084E  0100               	movlb	0	; () banked
  2786  000850  6FCC               	movwf	(??_receiveData+4)& (0+255),b
  2787  000852  6BCD               	clrf	(??_receiveData+5)& (0+255),b
  2788  000854  0100               	movlb	0	; () banked
  2789  000856  51CA               	movf	(??_receiveData+2)& (0+255),w,b
  2790  000858  0100               	movlb	0	; () banked
  2791  00085A  27CC               	addwf	(??_receiveData+4)& (0+255),f,b
  2792  00085C  0100               	movlb	0	; () banked
  2793  00085E  51CB               	movf	(??_receiveData+3)& (0+255),w,b
  2794  000860  0100               	movlb	0	; () banked
  2795  000862  23CD               	addwfc	(??_receiveData+5)& (0+255),f,b
  2796  000864  0100               	movlb	0	; () banked
  2797  000866  51C8               	movf	??_receiveData& (0+255),w,b
  2798  000868  0100               	movlb	0	; () banked
  2799  00086A  19CC               	xorwf	(??_receiveData+4)& (0+255),w,b
  2800  00086C  E105               	bnz	u5701
  2801  00086E  0100               	movlb	0	; () banked
  2802  000870  51C9               	movf	(??_receiveData+1)& (0+255),w,b
  2803  000872  0100               	movlb	0	; () banked
  2804  000874  19CD               	xorwf	(??_receiveData+5)& (0+255),w,b
  2805  000876  A4D8               	btfss	status,2,c
  2806  000878                     u5701:
  2807  000878  D22A               	goto	l5109
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2811  00087A  0E00               	movlw	low _rx_buffer
  2812  00087C  6E1B               	movwf	CRC8@data,c
  2813  00087E  0E03               	movlw	high _rx_buffer
  2814  000880  6E1C               	movwf	CRC8@data+1,c
  2815  000882  C043  F01D         	movff	_rx_len,CRC8@len
  2816  000886  ECBD  F01A         	call	_CRC8	;wreg free
  2817  00088A  6E3D               	movwf	_calc_CS,c
  2818                           
  2819                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2820  00088C  0EFF               	movlw	255
  2821  00088E  0100               	movlb	0	; () banked
  2822  000890  6FC8               	movwf	??_receiveData& (0+255),b
  2823  000892  0EFF               	movlw	255
  2824  000894  0100               	movlb	0	; () banked
  2825  000896  6FC9               	movwf	(??_receiveData+1)& (0+255),b
  2826  000898  5042               	movf	_rx_array_inx,w,c
  2827  00089A  0100               	movlb	0	; () banked
  2828  00089C  6FCA               	movwf	(??_receiveData+2)& (0+255),b
  2829  00089E  6BCB               	clrf	(??_receiveData+3)& (0+255),b
  2830  0008A0  0100               	movlb	0	; () banked
  2831  0008A2  51C8               	movf	??_receiveData& (0+255),w,b
  2832  0008A4  0100               	movlb	0	; () banked
  2833  0008A6  27CA               	addwf	(??_receiveData+2)& (0+255),f,b
  2834  0008A8  0100               	movlb	0	; () banked
  2835  0008AA  51C9               	movf	(??_receiveData+1)& (0+255),w,b
  2836  0008AC  0100               	movlb	0	; () banked
  2837  0008AE  23CB               	addwfc	(??_receiveData+3)& (0+255),f,b
  2838  0008B0  0E00               	movlw	low _rx_buffer
  2839  0008B2  0100               	movlb	0	; () banked
  2840  0008B4  25CA               	addwf	(??_receiveData+2)& (0+255),w,b
  2841  0008B6  6ED9               	movwf	fsr2l,c
  2842  0008B8  0E03               	movlw	high _rx_buffer
  2843  0008BA  0100               	movlb	0	; () banked
  2844  0008BC  21CB               	addwfc	(??_receiveData+3)& (0+255),w,b
  2845  0008BE  6EDA               	movwf	fsr2h,c
  2846  0008C0  503D               	movf	_calc_CS,w,c
  2847  0008C2  18DE               	xorwf	postinc2,w,c
  2848  0008C4  A4D8               	btfss	status,2,c
  2849  0008C6  D13B               	goto	l5071
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;FastTransfer.c: 147: int r;
  2853                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2854  0008C8  0E00               	movlw	0
  2855  0008CA  0100               	movlb	0	; () banked
  2856  0008CC  6FD9               	movwf	(receiveData@r+1)& (0+255),b
  2857  0008CE  0E00               	movlw	0
  2858  0008D0  6FD8               	movwf	receiveData@r& (0+255),b
  2859  0008D2  D05C               	goto	l5031
  2860  0008D4                     l5021:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2864  0008D4  0E00               	movlw	low _rx_buffer
  2865  0008D6  0100               	movlb	0	; () banked
  2866  0008D8  25D8               	addwf	receiveData@r& (0+255),w,b
  2867  0008DA  6ED9               	movwf	fsr2l,c
  2868  0008DC  0E03               	movlw	high _rx_buffer
  2869  0008DE  0100               	movlb	0	; () banked
  2870  0008E0  21D9               	addwfc	(receiveData@r+1)& (0+255),w,b
  2871  0008E2  6EDA               	movwf	fsr2h,c
  2872  0008E4  503E               	movf	_maxDataAddress,w,c
  2873  0008E6  5CDE               	subwf	postinc2,w,c
  2874  0008E8  B0D8               	btfsc	status,0,c
  2875  0008EA  D043               	goto	l5027
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2879  0008EC  0E01               	movlw	1
  2880  0008EE  0100               	movlb	0	; () banked
  2881  0008F0  25D8               	addwf	receiveData@r& (0+255),w,b
  2882  0008F2  0100               	movlb	0	; () banked
  2883  0008F4  6FC8               	movwf	??_receiveData& (0+255),b
  2884  0008F6  0E00               	movlw	0
  2885  0008F8  0100               	movlb	0	; () banked
  2886  0008FA  21D9               	addwfc	(receiveData@r+1)& (0+255),w,b
  2887  0008FC  0100               	movlb	0	; () banked
  2888  0008FE  6FC9               	movwf	(??_receiveData+1)& (0+255),b
  2889  000900  0E00               	movlw	low _rx_buffer
  2890  000902  0100               	movlb	0	; () banked
  2891  000904  25C8               	addwf	??_receiveData& (0+255),w,b
  2892  000906  6ED9               	movwf	fsr2l,c
  2893  000908  0E03               	movlw	high _rx_buffer
  2894  00090A  0100               	movlb	0	; () banked
  2895  00090C  21C9               	addwfc	(??_receiveData+1)& (0+255),w,b
  2896  00090E  6EDA               	movwf	fsr2h,c
  2897  000910  50DF               	movf	indf2,w,c
  2898  000912  6E30               	movwf	_group,c
  2899                           
  2900                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2901  000914  0E02               	movlw	2
  2902  000916  0100               	movlb	0	; () banked
  2903  000918  25D8               	addwf	receiveData@r& (0+255),w,b
  2904  00091A  0100               	movlb	0	; () banked
  2905  00091C  6FC8               	movwf	??_receiveData& (0+255),b
  2906  00091E  0E00               	movlw	0
  2907  000920  0100               	movlb	0	; () banked
  2908  000922  21D9               	addwfc	(receiveData@r+1)& (0+255),w,b
  2909  000924  0100               	movlb	0	; () banked
  2910  000926  6FC9               	movwf	(??_receiveData+1)& (0+255),b
  2911  000928  0E00               	movlw	low _rx_buffer
  2912  00092A  0100               	movlb	0	; () banked
  2913  00092C  25C8               	addwf	??_receiveData& (0+255),w,b
  2914  00092E  6ED9               	movwf	fsr2l,c
  2915  000930  0E03               	movlw	high _rx_buffer
  2916  000932  0100               	movlb	0	; () banked
  2917  000934  21C9               	addwfc	(??_receiveData+1)& (0+255),w,b
  2918  000936  6EDA               	movwf	fsr2h,c
  2919  000938  50DF               	movf	indf2,w,c
  2920  00093A  6E31               	movwf	_group+1,c
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2924  00093C  0E00               	movlw	low _rx_buffer
  2925  00093E  0100               	movlb	0	; () banked
  2926  000940  25D8               	addwf	receiveData@r& (0+255),w,b
  2927  000942  6ED9               	movwf	fsr2l,c
  2928  000944  0E03               	movlw	high _rx_buffer
  2929  000946  0100               	movlb	0	; () banked
  2930  000948  21D9               	addwfc	(receiveData@r+1)& (0+255),w,b
  2931  00094A  6EDA               	movwf	fsr2h,c
  2932  00094C  50DF               	movf	indf2,w,c
  2933  00094E  0100               	movlb	0	; () banked
  2934  000950  6FC8               	movwf	??_receiveData& (0+255),b
  2935  000952  0100               	movlb	0	; () banked
  2936  000954  51C8               	movf	??_receiveData& (0+255),w,b
  2937  000956  0D02               	mullw	2
  2938  000958  50F3               	movf	prodl,w,c
  2939  00095A  0100               	movlb	0	; () banked
  2940  00095C  2596               	addwf	_receiveArrayAddress& (0+255),w,b
  2941  00095E  6ED9               	movwf	fsr2l,c
  2942  000960  50F4               	movf	prodh,w,c
  2943  000962  0100               	movlb	0	; () banked
  2944  000964  2197               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2945  000966  6EDA               	movwf	fsr2h,c
  2946  000968  C030  FFDE         	movff	_group,postinc2
  2947  00096C  C031  FFDD         	movff	_group+1,postdec2
  2948                           
  2949                           ;FastTransfer.c: 153: } else {
  2950  000970  D003               	goto	l5029
  2951  000972                     l5027:
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2955  000972  0100               	movlb	0	; () banked
  2956  000974  4B92               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2957  000976  2B93               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2958  000978                     l5029:
  2959                           
  2960                           ; BSR set to: 0
  2961  000978  0E03               	movlw	3
  2962  00097A  0100               	movlb	0	; () banked
  2963  00097C  25D8               	addwf	receiveData@r& (0+255),w,b
  2964  00097E  0100               	movlb	0	; () banked
  2965  000980  6FD8               	movwf	receiveData@r& (0+255),b
  2966  000982  0E00               	movlw	0
  2967  000984  0100               	movlb	0	; () banked
  2968  000986  21D9               	addwfc	(receiveData@r+1)& (0+255),w,b
  2969  000988  0100               	movlb	0	; () banked
  2970  00098A  6FD9               	movwf	(receiveData@r+1)& (0+255),b
  2971  00098C                     l5031:
  2972                           
  2973                           ; BSR set to: 0
  2974  00098C  5043               	movf	_rx_len,w,c
  2975  00098E  0100               	movlb	0	; () banked
  2976  000990  6FC8               	movwf	??_receiveData& (0+255),b
  2977  000992  6BC9               	clrf	(??_receiveData+1)& (0+255),b
  2978  000994  0100               	movlb	0	; () banked
  2979  000996  51C8               	movf	??_receiveData& (0+255),w,b
  2980  000998  0100               	movlb	0	; () banked
  2981  00099A  5DD8               	subwf	receiveData@r& (0+255),w,b
  2982  00099C  0100               	movlb	0	; () banked
  2983  00099E  51D9               	movf	(receiveData@r+1)& (0+255),w,b
  2984  0009A0  0A80               	xorlw	128
  2985  0009A2  0100               	movlb	0	; () banked
  2986  0009A4  6FCA               	movwf	(??_receiveData+2)& (0+255),b
  2987  0009A6  0100               	movlb	0	; () banked
  2988  0009A8  51C9               	movf	(??_receiveData+1)& (0+255),w,b
  2989  0009AA  0A80               	xorlw	128
  2990  0009AC  0100               	movlb	0	; () banked
  2991  0009AE  59CA               	subwfb	(??_receiveData+2)& (0+255),w,b
  2992  0009B0  A0D8               	btfss	status,0,c
  2993  0009B2  D790               	goto	l5021
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;FastTransfer.c: 155: }
  2997                           ;FastTransfer.c: 156: }
  2998                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2999                           
  3000                           ; BSR set to: 0
  3001  0009B4  503A               	movf	_AKNAKsend,w,c
  3002  0009B6  B4D8               	btfsc	status,2,c
  3003  0009B8  D0BC               	goto	l5061
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;FastTransfer.c: 160: unsigned char holder[3];
  3007                           ;FastTransfer.c: 161: holder[0] = 255;
  3008  0009BA  0100               	movlb	0	; () banked
  3009  0009BC  69CE               	setf	receiveData@holder& (0+255),b
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;FastTransfer.c: 162: holder[1] = 1;
  3013  0009BE  0E01               	movlw	1
  3014  0009C0  0100               	movlb	0	; () banked
  3015  0009C2  6FCF               	movwf	(receiveData@holder+1)& (0+255),b
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  3019  0009C4  0EFF               	movlw	255
  3020  0009C6  0100               	movlb	0	; () banked
  3021  0009C8  6FC8               	movwf	??_receiveData& (0+255),b
  3022  0009CA  0EFF               	movlw	255
  3023  0009CC  0100               	movlb	0	; () banked
  3024  0009CE  6FC9               	movwf	(??_receiveData+1)& (0+255),b
  3025  0009D0  5042               	movf	_rx_array_inx,w,c
  3026  0009D2  0100               	movlb	0	; () banked
  3027  0009D4  6FCA               	movwf	(??_receiveData+2)& (0+255),b
  3028  0009D6  6BCB               	clrf	(??_receiveData+3)& (0+255),b
  3029  0009D8  0100               	movlb	0	; () banked
  3030  0009DA  51C8               	movf	??_receiveData& (0+255),w,b
  3031  0009DC  0100               	movlb	0	; () banked
  3032  0009DE  27CA               	addwf	(??_receiveData+2)& (0+255),f,b
  3033  0009E0  0100               	movlb	0	; () banked
  3034  0009E2  51C9               	movf	(??_receiveData+1)& (0+255),w,b
  3035  0009E4  0100               	movlb	0	; () banked
  3036  0009E6  23CB               	addwfc	(??_receiveData+3)& (0+255),f,b
  3037  0009E8  0E00               	movlw	low _rx_buffer
  3038  0009EA  0100               	movlb	0	; () banked
  3039  0009EC  25CA               	addwf	(??_receiveData+2)& (0+255),w,b
  3040  0009EE  6ED9               	movwf	fsr2l,c
  3041  0009F0  0E03               	movlw	high _rx_buffer
  3042  0009F2  0100               	movlb	0	; () banked
  3043  0009F4  21CB               	addwfc	(??_receiveData+3)& (0+255),w,b
  3044  0009F6  6EDA               	movwf	fsr2h,c
  3045  0009F8  50DF               	movf	indf2,w,c
  3046  0009FA  0100               	movlb	0	; () banked
  3047  0009FC  6FD0               	movwf	(receiveData@holder+2)& (0+255),b
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  3051  0009FE  0ECE               	movlw	low receiveData@holder
  3052  000A00  6E1B               	movwf	CRC8@data,c
  3053  000A02  0E00               	movlw	high receiveData@holder
  3054  000A04  6E1C               	movwf	CRC8@data+1,c
  3055  000A06  0E03               	movlw	3
  3056  000A08  6E1D               	movwf	CRC8@len,c
  3057  000A0A  ECBD  F01A         	call	_CRC8	;wreg free
  3058  000A0E  0100               	movlb	0	; () banked
  3059  000A10  6FD4               	movwf	receiveData@crcHolder& (0+255),b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;FastTransfer.c: 165: serial_write(0x06);
  3063  000A12  D801               	call	u5758
  3064  000A14  D00B               	goto	l5045
  3065  000A16                     u5758:
  3066  000A16  0005               	push	
  3067  000A18  6EFA               	movwf	pclath,c
  3068  000A1A  5036               	movf	_serial_write,w,c
  3069  000A1C  6EFD               	movwf	tosl,c
  3070  000A1E  5037               	movf	_serial_write+1,w,c
  3071  000A20  6EFE               	movwf	tosh,c
  3072  000A22  50F8               	movf	tblptru,w,c
  3073  000A24  6EFF               	movwf	tosu,c
  3074  000A26  50FA               	movf	pclath,w,c
  3075  000A28  0E06               	movlw	6
  3076  000A2A  0012               	return		;indir
  3077  000A2C                     l5045:
  3078                           
  3079                           ;FastTransfer.c: 166: serial_write(0x85);
  3080  000A2C  D801               	call	u5768
  3081  000A2E  D00B               	goto	l5047
  3082  000A30                     u5768:
  3083  000A30  0005               	push	
  3084  000A32  6EFA               	movwf	pclath,c
  3085  000A34  5036               	movf	_serial_write,w,c
  3086  000A36  6EFD               	movwf	tosl,c
  3087  000A38  5037               	movf	_serial_write+1,w,c
  3088  000A3A  6EFE               	movwf	tosh,c
  3089  000A3C  50F8               	movf	tblptru,w,c
  3090  000A3E  6EFF               	movwf	tosu,c
  3091  000A40  50FA               	movf	pclath,w,c
  3092  000A42  0E85               	movlw	133
  3093  000A44  0012               	return		;indir
  3094  000A46                     l5047:
  3095                           
  3096                           ;FastTransfer.c: 167: serial_write(returnAddress);
  3097  000A46  D801               	call	u5778
  3098  000A48  D00B               	goto	l5049
  3099  000A4A                     u5778:
  3100  000A4A  0005               	push	
  3101  000A4C  6EFA               	movwf	pclath,c
  3102  000A4E  5036               	movf	_serial_write,w,c
  3103  000A50  6EFD               	movwf	tosl,c
  3104  000A52  5037               	movf	_serial_write+1,w,c
  3105  000A54  6EFE               	movwf	tosh,c
  3106  000A56  50F8               	movf	tblptru,w,c
  3107  000A58  6EFF               	movwf	tosu,c
  3108  000A5A  50FA               	movf	pclath,w,c
  3109  000A5C  5040               	movf	_returnAddress,w,c
  3110  000A5E  0012               	return		;indir
  3111  000A60                     l5049:
  3112                           
  3113                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  3114  000A60  D801               	call	u5788
  3115  000A62  D00B               	goto	l5051
  3116  000A64                     u5788:
  3117  000A64  0005               	push	
  3118  000A66  6EFA               	movwf	pclath,c
  3119  000A68  5036               	movf	_serial_write,w,c
  3120  000A6A  6EFD               	movwf	tosl,c
  3121  000A6C  5037               	movf	_serial_write+1,w,c
  3122  000A6E  6EFE               	movwf	tosh,c
  3123  000A70  50F8               	movf	tblptru,w,c
  3124  000A72  6EFF               	movwf	tosu,c
  3125  000A74  50FA               	movf	pclath,w,c
  3126  000A76  503F               	movf	_moduleAddress,w,c
  3127  000A78  0012               	return		;indir
  3128  000A7A                     l5051:
  3129                           
  3130                           ;FastTransfer.c: 169: serial_write(3);
  3131  000A7A  D801               	call	u5798
  3132  000A7C  D00B               	goto	l5053
  3133  000A7E                     u5798:
  3134  000A7E  0005               	push	
  3135  000A80  6EFA               	movwf	pclath,c
  3136  000A82  5036               	movf	_serial_write,w,c
  3137  000A84  6EFD               	movwf	tosl,c
  3138  000A86  5037               	movf	_serial_write+1,w,c
  3139  000A88  6EFE               	movwf	tosh,c
  3140  000A8A  50F8               	movf	tblptru,w,c
  3141  000A8C  6EFF               	movwf	tosu,c
  3142  000A8E  50FA               	movf	pclath,w,c
  3143  000A90  0E03               	movlw	3
  3144  000A92  0012               	return		;indir
  3145  000A94                     l5053:
  3146                           
  3147                           ;FastTransfer.c: 170: serial_write(255);
  3148  000A94  D801               	call	u5808
  3149  000A96  D00B               	goto	l5055
  3150  000A98                     u5808:
  3151  000A98  0005               	push	
  3152  000A9A  6EFA               	movwf	pclath,c
  3153  000A9C  5036               	movf	_serial_write,w,c
  3154  000A9E  6EFD               	movwf	tosl,c
  3155  000AA0  5037               	movf	_serial_write+1,w,c
  3156  000AA2  6EFE               	movwf	tosh,c
  3157  000AA4  50F8               	movf	tblptru,w,c
  3158  000AA6  6EFF               	movwf	tosu,c
  3159  000AA8  50FA               	movf	pclath,w,c
  3160  000AAA  0EFF               	movlw	255
  3161  000AAC  0012               	return		;indir
  3162  000AAE                     l5055:
  3163                           
  3164                           ;FastTransfer.c: 171: serial_write(1);
  3165  000AAE  D801               	call	u5818
  3166  000AB0  D00B               	goto	l5057
  3167  000AB2                     u5818:
  3168  000AB2  0005               	push	
  3169  000AB4  6EFA               	movwf	pclath,c
  3170  000AB6  5036               	movf	_serial_write,w,c
  3171  000AB8  6EFD               	movwf	tosl,c
  3172  000ABA  5037               	movf	_serial_write+1,w,c
  3173  000ABC  6EFE               	movwf	tosh,c
  3174  000ABE  50F8               	movf	tblptru,w,c
  3175  000AC0  6EFF               	movwf	tosu,c
  3176  000AC2  50FA               	movf	pclath,w,c
  3177  000AC4  0E01               	movlw	1
  3178  000AC6  0012               	return		;indir
  3179  000AC8                     l5057:
  3180                           
  3181                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  3182  000AC8  D801               	call	u5828
  3183  000ACA  D025               	goto	l5059
  3184  000ACC                     u5828:
  3185  000ACC  0005               	push	
  3186  000ACE  6EFA               	movwf	pclath,c
  3187  000AD0  5036               	movf	_serial_write,w,c
  3188  000AD2  6EFD               	movwf	tosl,c
  3189  000AD4  5037               	movf	_serial_write+1,w,c
  3190  000AD6  6EFE               	movwf	tosh,c
  3191  000AD8  50F8               	movf	tblptru,w,c
  3192  000ADA  6EFF               	movwf	tosu,c
  3193  000ADC  50FA               	movf	pclath,w,c
  3194  000ADE  0EFF               	movlw	255
  3195  000AE0  0100               	movlb	0	; () banked
  3196  000AE2  6FC8               	movwf	??_receiveData& (0+255),b
  3197  000AE4  0EFF               	movlw	255
  3198  000AE6  0100               	movlb	0	; () banked
  3199  000AE8  6FC9               	movwf	(??_receiveData+1)& (0+255),b
  3200  000AEA  5042               	movf	_rx_array_inx,w,c
  3201  000AEC  0100               	movlb	0	; () banked
  3202  000AEE  6FCA               	movwf	(??_receiveData+2)& (0+255),b
  3203  000AF0  6BCB               	clrf	(??_receiveData+3)& (0+255),b
  3204  000AF2  0100               	movlb	0	; () banked
  3205  000AF4  51C8               	movf	??_receiveData& (0+255),w,b
  3206  000AF6  0100               	movlb	0	; () banked
  3207  000AF8  27CA               	addwf	(??_receiveData+2)& (0+255),f,b
  3208  000AFA  0100               	movlb	0	; () banked
  3209  000AFC  51C9               	movf	(??_receiveData+1)& (0+255),w,b
  3210  000AFE  0100               	movlb	0	; () banked
  3211  000B00  23CB               	addwfc	(??_receiveData+3)& (0+255),f,b
  3212  000B02  0E00               	movlw	low _rx_buffer
  3213  000B04  0100               	movlb	0	; () banked
  3214  000B06  25CA               	addwf	(??_receiveData+2)& (0+255),w,b
  3215  000B08  6ED9               	movwf	fsr2l,c
  3216  000B0A  0E03               	movlw	high _rx_buffer
  3217  000B0C  0100               	movlb	0	; () banked
  3218  000B0E  21CB               	addwfc	(??_receiveData+3)& (0+255),w,b
  3219  000B10  6EDA               	movwf	fsr2h,c
  3220  000B12  50DF               	movf	indf2,w,c
  3221  000B14  0012               	return		;indir
  3222  000B16                     l5059:
  3223                           
  3224                           ;FastTransfer.c: 173: serial_write(crcHolder);
  3225  000B16  D801               	call	u5838
  3226  000B18  D00C               	goto	l5061
  3227  000B1A                     u5838:
  3228  000B1A  0005               	push	
  3229  000B1C  6EFA               	movwf	pclath,c
  3230  000B1E  5036               	movf	_serial_write,w,c
  3231  000B20  6EFD               	movwf	tosl,c
  3232  000B22  5037               	movf	_serial_write+1,w,c
  3233  000B24  6EFE               	movwf	tosh,c
  3234  000B26  50F8               	movf	tblptru,w,c
  3235  000B28  6EFF               	movwf	tosu,c
  3236  000B2A  50FA               	movf	pclath,w,c
  3237  000B2C  0100               	movlb	0	; () banked
  3238  000B2E  51D4               	movf	receiveData@crcHolder& (0+255),w,b
  3239  000B30  0012               	return		;indir
  3240  000B32                     l5061:
  3241                           
  3242                           ;FastTransfer.c: 174: }
  3243                           ;FastTransfer.c: 178: rx_len = 0;
  3244  000B32  0E00               	movlw	0
  3245  000B34  6E43               	movwf	_rx_len,c
  3246                           
  3247                           ;FastTransfer.c: 179: rx_array_inx = 0;
  3248  000B36  0E00               	movlw	0
  3249  000B38  6E42               	movwf	_rx_array_inx,c
  3250                           
  3251                           ;FastTransfer.c: 180: return 1;
  3252  000B3A  0E01               	movlw	1
  3253  000B3C  0012               	return	
  3254  000B3E                     l5071:
  3255                           
  3256                           ;FastTransfer.c: 182: crcErrorCounter++;
  3257  000B3E  0100               	movlb	0	; () banked
  3258  000B40  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  3259  000B42  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;FastTransfer.c: 184: if (AKNAKsend) {
  3263  000B44  503A               	movf	_AKNAKsend,w,c
  3264  000B46  B4D8               	btfsc	status,2,c
  3265  000B48  D0BC               	goto	l5101
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;FastTransfer.c: 185: unsigned char holder[3];
  3269                           ;FastTransfer.c: 186: holder[0] = 255;
  3270  000B4A  0100               	movlb	0	; () banked
  3271  000B4C  69D1               	setf	receiveData@holder_1131& (0+255),b
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;FastTransfer.c: 187: holder[1] = 2;
  3275  000B4E  0E02               	movlw	2
  3276  000B50  0100               	movlb	0	; () banked
  3277  000B52  6FD2               	movwf	(receiveData@holder_1131+1)& (0+255),b
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  3281  000B54  0EFF               	movlw	255
  3282  000B56  0100               	movlb	0	; () banked
  3283  000B58  6FC8               	movwf	??_receiveData& (0+255),b
  3284  000B5A  0EFF               	movlw	255
  3285  000B5C  0100               	movlb	0	; () banked
  3286  000B5E  6FC9               	movwf	(??_receiveData+1)& (0+255),b
  3287  000B60  5042               	movf	_rx_array_inx,w,c
  3288  000B62  0100               	movlb	0	; () banked
  3289  000B64  6FCA               	movwf	(??_receiveData+2)& (0+255),b
  3290  000B66  6BCB               	clrf	(??_receiveData+3)& (0+255),b
  3291  000B68  0100               	movlb	0	; () banked
  3292  000B6A  51C8               	movf	??_receiveData& (0+255),w,b
  3293  000B6C  0100               	movlb	0	; () banked
  3294  000B6E  27CA               	addwf	(??_receiveData+2)& (0+255),f,b
  3295  000B70  0100               	movlb	0	; () banked
  3296  000B72  51C9               	movf	(??_receiveData+1)& (0+255),w,b
  3297  000B74  0100               	movlb	0	; () banked
  3298  000B76  23CB               	addwfc	(??_receiveData+3)& (0+255),f,b
  3299  000B78  0E00               	movlw	low _rx_buffer
  3300  000B7A  0100               	movlb	0	; () banked
  3301  000B7C  25CA               	addwf	(??_receiveData+2)& (0+255),w,b
  3302  000B7E  6ED9               	movwf	fsr2l,c
  3303  000B80  0E03               	movlw	high _rx_buffer
  3304  000B82  0100               	movlb	0	; () banked
  3305  000B84  21CB               	addwfc	(??_receiveData+3)& (0+255),w,b
  3306  000B86  6EDA               	movwf	fsr2h,c
  3307  000B88  50DF               	movf	indf2,w,c
  3308  000B8A  0100               	movlb	0	; () banked
  3309  000B8C  6FD3               	movwf	(receiveData@holder_1131+2)& (0+255),b
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  3313  000B8E  0ED1               	movlw	low receiveData@holder_1131
  3314  000B90  6E1B               	movwf	CRC8@data,c
  3315  000B92  0E00               	movlw	high receiveData@holder_1131
  3316  000B94  6E1C               	movwf	CRC8@data+1,c
  3317  000B96  0E03               	movlw	3
  3318  000B98  6E1D               	movwf	CRC8@len,c
  3319  000B9A  ECBD  F01A         	call	_CRC8
  3320  000B9E  0100               	movlb	0	; () banked
  3321  000BA0  6FD5               	movwf	receiveData@crcHolder_1132& (0+255),b
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;FastTransfer.c: 190: serial_write(0x06);
  3325  000BA2  D801               	call	u5858
  3326  000BA4  D00B               	goto	l5085
  3327  000BA6                     u5858:
  3328  000BA6  0005               	push	
  3329  000BA8  6EFA               	movwf	pclath,c
  3330  000BAA  5036               	movf	_serial_write,w,c
  3331  000BAC  6EFD               	movwf	tosl,c
  3332  000BAE  5037               	movf	_serial_write+1,w,c
  3333  000BB0  6EFE               	movwf	tosh,c
  3334  000BB2  50F8               	movf	tblptru,w,c
  3335  000BB4  6EFF               	movwf	tosu,c
  3336  000BB6  50FA               	movf	pclath,w,c
  3337  000BB8  0E06               	movlw	6
  3338  000BBA  0012               	return		;indir
  3339  000BBC                     l5085:
  3340                           
  3341                           ;FastTransfer.c: 191: serial_write(0x85);
  3342  000BBC  D801               	call	u5868
  3343  000BBE  D00B               	goto	l5087
  3344  000BC0                     u5868:
  3345  000BC0  0005               	push	
  3346  000BC2  6EFA               	movwf	pclath,c
  3347  000BC4  5036               	movf	_serial_write,w,c
  3348  000BC6  6EFD               	movwf	tosl,c
  3349  000BC8  5037               	movf	_serial_write+1,w,c
  3350  000BCA  6EFE               	movwf	tosh,c
  3351  000BCC  50F8               	movf	tblptru,w,c
  3352  000BCE  6EFF               	movwf	tosu,c
  3353  000BD0  50FA               	movf	pclath,w,c
  3354  000BD2  0E85               	movlw	133
  3355  000BD4  0012               	return		;indir
  3356  000BD6                     l5087:
  3357                           
  3358                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3359  000BD6  D801               	call	u5878
  3360  000BD8  D00B               	goto	l5089
  3361  000BDA                     u5878:
  3362  000BDA  0005               	push	
  3363  000BDC  6EFA               	movwf	pclath,c
  3364  000BDE  5036               	movf	_serial_write,w,c
  3365  000BE0  6EFD               	movwf	tosl,c
  3366  000BE2  5037               	movf	_serial_write+1,w,c
  3367  000BE4  6EFE               	movwf	tosh,c
  3368  000BE6  50F8               	movf	tblptru,w,c
  3369  000BE8  6EFF               	movwf	tosu,c
  3370  000BEA  50FA               	movf	pclath,w,c
  3371  000BEC  5040               	movf	_returnAddress,w,c
  3372  000BEE  0012               	return		;indir
  3373  000BF0                     l5089:
  3374                           
  3375                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3376  000BF0  D801               	call	u5888
  3377  000BF2  D00B               	goto	l5091
  3378  000BF4                     u5888:
  3379  000BF4  0005               	push	
  3380  000BF6  6EFA               	movwf	pclath,c
  3381  000BF8  5036               	movf	_serial_write,w,c
  3382  000BFA  6EFD               	movwf	tosl,c
  3383  000BFC  5037               	movf	_serial_write+1,w,c
  3384  000BFE  6EFE               	movwf	tosh,c
  3385  000C00  50F8               	movf	tblptru,w,c
  3386  000C02  6EFF               	movwf	tosu,c
  3387  000C04  50FA               	movf	pclath,w,c
  3388  000C06  503F               	movf	_moduleAddress,w,c
  3389  000C08  0012               	return		;indir
  3390  000C0A                     l5091:
  3391                           
  3392                           ;FastTransfer.c: 194: serial_write(3);
  3393  000C0A  D801               	call	u5898
  3394  000C0C  D00B               	goto	l5093
  3395  000C0E                     u5898:
  3396  000C0E  0005               	push	
  3397  000C10  6EFA               	movwf	pclath,c
  3398  000C12  5036               	movf	_serial_write,w,c
  3399  000C14  6EFD               	movwf	tosl,c
  3400  000C16  5037               	movf	_serial_write+1,w,c
  3401  000C18  6EFE               	movwf	tosh,c
  3402  000C1A  50F8               	movf	tblptru,w,c
  3403  000C1C  6EFF               	movwf	tosu,c
  3404  000C1E  50FA               	movf	pclath,w,c
  3405  000C20  0E03               	movlw	3
  3406  000C22  0012               	return		;indir
  3407  000C24                     l5093:
  3408                           
  3409                           ;FastTransfer.c: 195: serial_write(255);
  3410  000C24  D801               	call	u5908
  3411  000C26  D00B               	goto	l5095
  3412  000C28                     u5908:
  3413  000C28  0005               	push	
  3414  000C2A  6EFA               	movwf	pclath,c
  3415  000C2C  5036               	movf	_serial_write,w,c
  3416  000C2E  6EFD               	movwf	tosl,c
  3417  000C30  5037               	movf	_serial_write+1,w,c
  3418  000C32  6EFE               	movwf	tosh,c
  3419  000C34  50F8               	movf	tblptru,w,c
  3420  000C36  6EFF               	movwf	tosu,c
  3421  000C38  50FA               	movf	pclath,w,c
  3422  000C3A  0EFF               	movlw	255
  3423  000C3C  0012               	return		;indir
  3424  000C3E                     l5095:
  3425                           
  3426                           ;FastTransfer.c: 196: serial_write(2);
  3427  000C3E  D801               	call	u5918
  3428  000C40  D00B               	goto	l5097
  3429  000C42                     u5918:
  3430  000C42  0005               	push	
  3431  000C44  6EFA               	movwf	pclath,c
  3432  000C46  5036               	movf	_serial_write,w,c
  3433  000C48  6EFD               	movwf	tosl,c
  3434  000C4A  5037               	movf	_serial_write+1,w,c
  3435  000C4C  6EFE               	movwf	tosh,c
  3436  000C4E  50F8               	movf	tblptru,w,c
  3437  000C50  6EFF               	movwf	tosu,c
  3438  000C52  50FA               	movf	pclath,w,c
  3439  000C54  0E02               	movlw	2
  3440  000C56  0012               	return		;indir
  3441  000C58                     l5097:
  3442                           
  3443                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3444  000C58  D801               	call	u5928
  3445  000C5A  D025               	goto	l5099
  3446  000C5C                     u5928:
  3447  000C5C  0005               	push	
  3448  000C5E  6EFA               	movwf	pclath,c
  3449  000C60  5036               	movf	_serial_write,w,c
  3450  000C62  6EFD               	movwf	tosl,c
  3451  000C64  5037               	movf	_serial_write+1,w,c
  3452  000C66  6EFE               	movwf	tosh,c
  3453  000C68  50F8               	movf	tblptru,w,c
  3454  000C6A  6EFF               	movwf	tosu,c
  3455  000C6C  50FA               	movf	pclath,w,c
  3456  000C6E  0EFF               	movlw	255
  3457  000C70  0100               	movlb	0	; () banked
  3458  000C72  6FC8               	movwf	??_receiveData& (0+255),b
  3459  000C74  0EFF               	movlw	255
  3460  000C76  0100               	movlb	0	; () banked
  3461  000C78  6FC9               	movwf	(??_receiveData+1)& (0+255),b
  3462  000C7A  5042               	movf	_rx_array_inx,w,c
  3463  000C7C  0100               	movlb	0	; () banked
  3464  000C7E  6FCA               	movwf	(??_receiveData+2)& (0+255),b
  3465  000C80  6BCB               	clrf	(??_receiveData+3)& (0+255),b
  3466  000C82  0100               	movlb	0	; () banked
  3467  000C84  51C8               	movf	??_receiveData& (0+255),w,b
  3468  000C86  0100               	movlb	0	; () banked
  3469  000C88  27CA               	addwf	(??_receiveData+2)& (0+255),f,b
  3470  000C8A  0100               	movlb	0	; () banked
  3471  000C8C  51C9               	movf	(??_receiveData+1)& (0+255),w,b
  3472  000C8E  0100               	movlb	0	; () banked
  3473  000C90  23CB               	addwfc	(??_receiveData+3)& (0+255),f,b
  3474  000C92  0E00               	movlw	low _rx_buffer
  3475  000C94  0100               	movlb	0	; () banked
  3476  000C96  25CA               	addwf	(??_receiveData+2)& (0+255),w,b
  3477  000C98  6ED9               	movwf	fsr2l,c
  3478  000C9A  0E03               	movlw	high _rx_buffer
  3479  000C9C  0100               	movlb	0	; () banked
  3480  000C9E  21CB               	addwfc	(??_receiveData+3)& (0+255),w,b
  3481  000CA0  6EDA               	movwf	fsr2h,c
  3482  000CA2  50DF               	movf	indf2,w,c
  3483  000CA4  0012               	return		;indir
  3484  000CA6                     l5099:
  3485                           
  3486                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3487  000CA6  D801               	call	u5938
  3488  000CA8  D00C               	goto	l5101
  3489  000CAA                     u5938:
  3490  000CAA  0005               	push	
  3491  000CAC  6EFA               	movwf	pclath,c
  3492  000CAE  5036               	movf	_serial_write,w,c
  3493  000CB0  6EFD               	movwf	tosl,c
  3494  000CB2  5037               	movf	_serial_write+1,w,c
  3495  000CB4  6EFE               	movwf	tosh,c
  3496  000CB6  50F8               	movf	tblptru,w,c
  3497  000CB8  6EFF               	movwf	tosu,c
  3498  000CBA  50FA               	movf	pclath,w,c
  3499  000CBC  0100               	movlb	0	; () banked
  3500  000CBE  51D5               	movf	receiveData@crcHolder_1132& (0+255),w,b
  3501  000CC0  0012               	return		;indir
  3502  000CC2                     l5101:
  3503                           
  3504                           ;FastTransfer.c: 199: }
  3505                           ;FastTransfer.c: 202: rx_len = 0;
  3506  000CC2  0E00               	movlw	0
  3507  000CC4  6E43               	movwf	_rx_len,c
  3508                           
  3509                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3510  000CC6  0E00               	movlw	0
  3511  000CC8  6E42               	movwf	_rx_array_inx,c
  3512                           
  3513                           ;FastTransfer.c: 204: return 0;
  3514  000CCA  0E00               	movlw	0
  3515  000CCC  0012               	return	
  3516  000CCE                     l5109:
  3517                           
  3518                           ;FastTransfer.c: 205: }
  3519                           ;FastTransfer.c: 206: }
  3520                           ;FastTransfer.c: 207: }
  3521                           ;FastTransfer.c: 210: return 0;
  3522  000CCE  0E00               	movlw	0
  3523  000CD0  0012               	return	
  3524  000CD2                     __end_of_receiveData:
  3525                           	opt stack 0
  3526                           tosu	equ	0xFFF
  3527                           tosh	equ	0xFFE
  3528                           tosl	equ	0xFFD
  3529                           pclath	equ	0xFFA
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           prodh	equ	0xFF4
  3535                           prodl	equ	0xFF3
  3536                           intcon	equ	0xFF2
  3537                           postinc0	equ	0xFEE
  3538                           wreg	equ	0xFE8
  3539                           postdec1	equ	0xFE5
  3540                           fsr1l	equ	0xFE1
  3541                           indf2	equ	0xFDF
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           plusw2	equ	0xFDB
  3545                           fsr2h	equ	0xFDA
  3546                           fsr2l	equ	0xFD9
  3547                           status	equ	0xFD8
  3548                           
  3549 ;; *************** function _Send_put *****************
  3550 ;; Defined at:
  3551 ;;		line 130 in file "UART.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;  _data           1    wreg     unsigned char 
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  _data           1   37[COMRAM] unsigned char 
  3556 ;; Return value:  Size  Location     Type
  3557 ;;		None               void
  3558 ;; Registers used:
  3559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3560 ;; Tracked objects:
  3561 ;;		On entry : 0/0
  3562 ;;		On exit  : 0/0
  3563 ;;		Unchanged: 0/0
  3564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3565 ;;      Params:         0       0       0       0       0       0       0
  3566 ;;      Locals:         1       0       0       0       0       0       0
  3567 ;;      Temps:          0       0       0       0       0       0       0
  3568 ;;      Totals:         1       0       0       0       0       0       0
  3569 ;;Total ram usage:        1 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; Hardware stack levels required when called:    6
  3572 ;; This function calls:
  3573 ;;		_UART_buff_get
  3574 ;;		_UART_buff_put
  3575 ;; This function is called by:
  3576 ;;		_SYSTEM_Initialize
  3577 ;;		_putch
  3578 ;;		_sendData
  3579 ;;		_receiveData
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text6
  3584  003782                     __ptext6:
  3585                           	opt stack 0
  3586  003782                     _Send_put:
  3587                           	opt stack 22
  3588                           
  3589                           ;incstack = 0
  3590                           ;Send_put@_data stored from wreg
  3591  003782  6E26               	movwf	Send_put@_data,c
  3592                           
  3593                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3594  003784  0E00               	movlw	low _output_buffer
  3595  003786  6E21               	movwf	UART_buff_put@_this,c
  3596  003788  0E05               	movlw	high _output_buffer
  3597  00378A  6E22               	movwf	UART_buff_put@_this+1,c
  3598  00378C  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3599  003790  ECC6  F012         	call	_UART_buff_put
  3600                           
  3601                           ;UART.c: 132: if (Transmit_stall == 1) {
  3602  003794  0444               	decf	_Transmit_stall,w,c
  3603  003796  A4D8               	btfss	status,2,c
  3604  003798  0012               	return	
  3605                           
  3606                           ;UART.c: 133: Transmit_stall = 0;
  3607  00379A  0E00               	movlw	0
  3608  00379C  6E44               	movwf	_Transmit_stall,c
  3609                           
  3610                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3611  00379E  0E00               	movlw	low _output_buffer
  3612  0037A0  6E21               	movwf	UART_buff_get@_this,c
  3613  0037A2  0E05               	movlw	high _output_buffer
  3614  0037A4  6E22               	movwf	UART_buff_get@_this+1,c
  3615  0037A6  ECF9  F017         	call	_UART_buff_get	;wreg free
  3616  0037AA  6EAD               	movwf	4013,c	;volatile
  3617                           
  3618                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3619  0037AC  889D               	bsf	3997,4,c	;volatile
  3620  0037AE  0012               	return	
  3621  0037B0                     __end_of_Send_put:
  3622                           	opt stack 0
  3623                           tosu	equ	0xFFF
  3624                           tosh	equ	0xFFE
  3625                           tosl	equ	0xFFD
  3626                           pclath	equ	0xFFA
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           prodh	equ	0xFF4
  3632                           prodl	equ	0xFF3
  3633                           intcon	equ	0xFF2
  3634                           postinc0	equ	0xFEE
  3635                           wreg	equ	0xFE8
  3636                           postdec1	equ	0xFE5
  3637                           fsr1l	equ	0xFE1
  3638                           indf2	equ	0xFDF
  3639                           postinc2	equ	0xFDE
  3640                           postdec2	equ	0xFDD
  3641                           plusw2	equ	0xFDB
  3642                           fsr2h	equ	0xFDA
  3643                           fsr2l	equ	0xFD9
  3644                           status	equ	0xFD8
  3645                           
  3646 ;; *************** function _UART_buff_put *****************
  3647 ;; Defined at:
  3648 ;;		line 68 in file "UART.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3651 ;;		 -> output_buffer(206), input_buffer(206), 
  3652 ;;  c               1   34[COMRAM] const unsigned char 
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;		None               void
  3657 ;; Registers used:
  3658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3664 ;;      Params:         3       0       0       0       0       0       0
  3665 ;;      Locals:         0       0       0       0       0       0       0
  3666 ;;      Temps:          2       0       0       0       0       0       0
  3667 ;;      Totals:         5       0       0       0       0       0       0
  3668 ;;Total ram usage:        5 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    5
  3671 ;; This function calls:
  3672 ;;		_UART_buff_modulo_inc
  3673 ;; This function is called by:
  3674 ;;		_Send_put
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           	psect	text7
  3679  00258C                     __ptext7:
  3680                           	opt stack 0
  3681  00258C                     _UART_buff_put:
  3682                           	opt stack 22
  3683                           
  3684                           ;UART.c: 69: if (_this->count < 200) {
  3685                           
  3686                           ;incstack = 0
  3687  00258C  EE20 F0CC          	lfsr	2,204
  3688  002590  5021               	movf	UART_buff_put@_this,w,c
  3689  002592  26D9               	addwf	fsr2l,f,c
  3690  002594  5022               	movf	UART_buff_put@_this+1,w,c
  3691  002596  22DA               	addwfc	fsr2h,f,c
  3692  002598  0E01               	movlw	1
  3693  00259A  BEDB               	btfsc	plusw2,7,c
  3694  00259C  D007               	goto	l4515
  3695  00259E  0E01               	movlw	1
  3696  0025A0  50DB               	movf	plusw2,w,c
  3697  0025A2  E13A               	bnz	l4521
  3698  0025A4  0EC8               	movlw	200
  3699  0025A6  5CDE               	subwf	postinc2,w,c
  3700  0025A8  B0D8               	btfsc	status,0,c
  3701  0025AA  D036               	goto	l4521
  3702  0025AC                     l4515:
  3703                           
  3704                           ;UART.c: 70: _this->buf[_this->head] = c;
  3705  0025AC  EE20 F0C8          	lfsr	2,200
  3706  0025B0  5021               	movf	UART_buff_put@_this,w,c
  3707  0025B2  26D9               	addwf	fsr2l,f,c
  3708  0025B4  5022               	movf	UART_buff_put@_this+1,w,c
  3709  0025B6  22DA               	addwfc	fsr2h,f,c
  3710  0025B8  CFDE F024          	movff	postinc2,??_UART_buff_put
  3711  0025BC  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3712  0025C0  5024               	movf	??_UART_buff_put,w,c
  3713  0025C2  2421               	addwf	UART_buff_put@_this,w,c
  3714  0025C4  6ED9               	movwf	fsr2l,c
  3715  0025C6  5025               	movf	??_UART_buff_put+1,w,c
  3716  0025C8  2022               	addwfc	UART_buff_put@_this+1,w,c
  3717  0025CA  6EDA               	movwf	fsr2h,c
  3718  0025CC  C023  FFDF         	movff	UART_buff_put@c,indf2
  3719                           
  3720                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3721  0025D0  EE20 F0C8          	lfsr	2,200
  3722  0025D4  5021               	movf	UART_buff_put@_this,w,c
  3723  0025D6  26D9               	addwf	fsr2l,f,c
  3724  0025D8  5022               	movf	UART_buff_put@_this+1,w,c
  3725  0025DA  22DA               	addwfc	fsr2h,f,c
  3726  0025DC  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3727  0025E0  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3728  0025E4  0E00               	movlw	0
  3729  0025E6  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3730  0025E8  0EC8               	movlw	200
  3731  0025EA  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3732  0025EC  EC1C  F01C         	call	_UART_buff_modulo_inc	;wreg free
  3733  0025F0  EE20 F0C8          	lfsr	2,200
  3734  0025F4  5021               	movf	UART_buff_put@_this,w,c
  3735  0025F6  26D9               	addwf	fsr2l,f,c
  3736  0025F8  5022               	movf	UART_buff_put@_this+1,w,c
  3737  0025FA  22DA               	addwfc	fsr2h,f,c
  3738  0025FC  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3739  002600  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3740                           
  3741                           ;UART.c: 72: ++_this->count;
  3742  002604  EE20 F0CC          	lfsr	2,204
  3743  002608  5021               	movf	UART_buff_put@_this,w,c
  3744  00260A  26D9               	addwf	fsr2l,f,c
  3745  00260C  5022               	movf	UART_buff_put@_this+1,w,c
  3746  00260E  22DA               	addwfc	fsr2h,f,c
  3747  002610  2ADE               	incf	postinc2,f,c
  3748  002612  0E00               	movlw	0
  3749  002614  22DD               	addwfc	postdec2,f,c
  3750                           
  3751                           ;UART.c: 73: } else {
  3752  002616  0012               	return	
  3753  002618                     l4521:
  3754                           
  3755                           ;UART.c: 74: _this->buf[_this->head] = c;
  3756  002618  EE20 F0C8          	lfsr	2,200
  3757  00261C  5021               	movf	UART_buff_put@_this,w,c
  3758  00261E  26D9               	addwf	fsr2l,f,c
  3759  002620  5022               	movf	UART_buff_put@_this+1,w,c
  3760  002622  22DA               	addwfc	fsr2h,f,c
  3761  002624  CFDE F024          	movff	postinc2,??_UART_buff_put
  3762  002628  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3763  00262C  5024               	movf	??_UART_buff_put,w,c
  3764  00262E  2421               	addwf	UART_buff_put@_this,w,c
  3765  002630  6ED9               	movwf	fsr2l,c
  3766  002632  5025               	movf	??_UART_buff_put+1,w,c
  3767  002634  2022               	addwfc	UART_buff_put@_this+1,w,c
  3768  002636  6EDA               	movwf	fsr2h,c
  3769  002638  C023  FFDF         	movff	UART_buff_put@c,indf2
  3770                           
  3771                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3772  00263C  EE20 F0C8          	lfsr	2,200
  3773  002640  5021               	movf	UART_buff_put@_this,w,c
  3774  002642  26D9               	addwf	fsr2l,f,c
  3775  002644  5022               	movf	UART_buff_put@_this+1,w,c
  3776  002646  22DA               	addwfc	fsr2h,f,c
  3777  002648  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3778  00264C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3779  002650  0E00               	movlw	0
  3780  002652  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3781  002654  0EC8               	movlw	200
  3782  002656  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3783  002658  EC1C  F01C         	call	_UART_buff_modulo_inc	;wreg free
  3784  00265C  EE20 F0C8          	lfsr	2,200
  3785  002660  5021               	movf	UART_buff_put@_this,w,c
  3786  002662  26D9               	addwf	fsr2l,f,c
  3787  002664  5022               	movf	UART_buff_put@_this+1,w,c
  3788  002666  22DA               	addwfc	fsr2h,f,c
  3789  002668  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3790  00266C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3791                           
  3792                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3793  002670  EE20 F0CA          	lfsr	2,202
  3794  002674  5021               	movf	UART_buff_put@_this,w,c
  3795  002676  26D9               	addwf	fsr2l,f,c
  3796  002678  5022               	movf	UART_buff_put@_this+1,w,c
  3797  00267A  22DA               	addwfc	fsr2h,f,c
  3798  00267C  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3799  002680  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3800  002684  0E00               	movlw	0
  3801  002686  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3802  002688  0EC8               	movlw	200
  3803  00268A  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3804  00268C  EC1C  F01C         	call	_UART_buff_modulo_inc	;wreg free
  3805  002690  EE20 F0CA          	lfsr	2,202
  3806  002694  5021               	movf	UART_buff_put@_this,w,c
  3807  002696  26D9               	addwf	fsr2l,f,c
  3808  002698  5022               	movf	UART_buff_put@_this+1,w,c
  3809  00269A  22DA               	addwfc	fsr2h,f,c
  3810  00269C  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3811  0026A0  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3812  0026A4  0012               	return	
  3813  0026A6                     __end_of_UART_buff_put:
  3814                           	opt stack 0
  3815                           tosu	equ	0xFFF
  3816                           tosh	equ	0xFFE
  3817                           tosl	equ	0xFFD
  3818                           pclath	equ	0xFFA
  3819                           tblptru	equ	0xFF8
  3820                           tblptrh	equ	0xFF7
  3821                           tblptrl	equ	0xFF6
  3822                           tablat	equ	0xFF5
  3823                           prodh	equ	0xFF4
  3824                           prodl	equ	0xFF3
  3825                           intcon	equ	0xFF2
  3826                           postinc0	equ	0xFEE
  3827                           wreg	equ	0xFE8
  3828                           postdec1	equ	0xFE5
  3829                           fsr1l	equ	0xFE1
  3830                           indf2	equ	0xFDF
  3831                           postinc2	equ	0xFDE
  3832                           postdec2	equ	0xFDD
  3833                           plusw2	equ	0xFDB
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _Receive_peek *****************
  3839 ;; Defined at:
  3840 ;;		line 118 in file "UART.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;		None
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      unsigned char 
  3847 ;; Registers used:
  3848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3854 ;;      Params:         0       0       0       0       0       0       0
  3855 ;;      Locals:         0       0       0       0       0       0       0
  3856 ;;      Temps:          0       0       0       0       0       0       0
  3857 ;;      Totals:         0       0       0       0       0       0       0
  3858 ;;Total ram usage:        0 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    5
  3861 ;; This function calls:
  3862 ;;		_UART_buff_peek
  3863 ;; This function is called by:
  3864 ;;		_SYSTEM_Initialize
  3865 ;;		_receiveData
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text8
  3870  003A5C                     __ptext8:
  3871                           	opt stack 0
  3872  003A5C                     _Receive_peek:
  3873                           	opt stack 23
  3874                           
  3875                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3876                           
  3877                           ;incstack = 0
  3878  003A5C  0E00               	movlw	low _input_buffer
  3879  003A5E  6E1B               	movwf	UART_buff_peek@_this,c
  3880  003A60  0E04               	movlw	high _input_buffer
  3881  003A62  6E1C               	movwf	UART_buff_peek@_this+1,c
  3882  003A64  EC6E  F01C         	call	_UART_buff_peek	;wreg free
  3883  003A68  0012               	return	
  3884  003A6A                     __end_of_Receive_peek:
  3885                           	opt stack 0
  3886                           tosu	equ	0xFFF
  3887                           tosh	equ	0xFFE
  3888                           tosl	equ	0xFFD
  3889                           pclath	equ	0xFFA
  3890                           tblptru	equ	0xFF8
  3891                           tblptrh	equ	0xFF7
  3892                           tblptrl	equ	0xFF6
  3893                           tablat	equ	0xFF5
  3894                           prodh	equ	0xFF4
  3895                           prodl	equ	0xFF3
  3896                           intcon	equ	0xFF2
  3897                           postinc0	equ	0xFEE
  3898                           wreg	equ	0xFE8
  3899                           postdec1	equ	0xFE5
  3900                           fsr1l	equ	0xFE1
  3901                           indf2	equ	0xFDF
  3902                           postinc2	equ	0xFDE
  3903                           postdec2	equ	0xFDD
  3904                           plusw2	equ	0xFDB
  3905                           fsr2h	equ	0xFDA
  3906                           fsr2l	equ	0xFD9
  3907                           status	equ	0xFD8
  3908                           
  3909 ;; *************** function _UART_buff_peek *****************
  3910 ;; Defined at:
  3911 ;;		line 114 in file "UART.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3914 ;;		 -> input_buffer(206), 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      unsigned char 
  3919 ;; Registers used:
  3920 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3926 ;;      Params:         2       0       0       0       0       0       0
  3927 ;;      Locals:         0       0       0       0       0       0       0
  3928 ;;      Temps:          2       0       0       0       0       0       0
  3929 ;;      Totals:         4       0       0       0       0       0       0
  3930 ;;Total ram usage:        4 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    4
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_Receive_peek
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           	psect	text9
  3941  0038DC                     __ptext9:
  3942                           	opt stack 0
  3943  0038DC                     _UART_buff_peek:
  3944                           	opt stack 23
  3945                           
  3946                           ;UART.c: 115: return _this->buf[_this->tail];
  3947                           
  3948                           ;incstack = 0
  3949  0038DC  EE20 F0CA          	lfsr	2,202
  3950  0038E0  501B               	movf	UART_buff_peek@_this,w,c
  3951  0038E2  26D9               	addwf	fsr2l,f,c
  3952  0038E4  501C               	movf	UART_buff_peek@_this+1,w,c
  3953  0038E6  22DA               	addwfc	fsr2h,f,c
  3954  0038E8  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3955  0038EC  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3956  0038F0  501D               	movf	??_UART_buff_peek,w,c
  3957  0038F2  241B               	addwf	UART_buff_peek@_this,w,c
  3958  0038F4  6ED9               	movwf	fsr2l,c
  3959  0038F6  501E               	movf	??_UART_buff_peek+1,w,c
  3960  0038F8  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3961  0038FA  6EDA               	movwf	fsr2h,c
  3962  0038FC  50DF               	movf	indf2,w,c
  3963  0038FE  0012               	return	
  3964  003900                     __end_of_UART_buff_peek:
  3965                           	opt stack 0
  3966                           tosu	equ	0xFFF
  3967                           tosh	equ	0xFFE
  3968                           tosl	equ	0xFFD
  3969                           pclath	equ	0xFFA
  3970                           tblptru	equ	0xFF8
  3971                           tblptrh	equ	0xFF7
  3972                           tblptrl	equ	0xFF6
  3973                           tablat	equ	0xFF5
  3974                           prodh	equ	0xFF4
  3975                           prodl	equ	0xFF3
  3976                           intcon	equ	0xFF2
  3977                           postinc0	equ	0xFEE
  3978                           wreg	equ	0xFE8
  3979                           postdec1	equ	0xFE5
  3980                           fsr1l	equ	0xFE1
  3981                           indf2	equ	0xFDF
  3982                           postinc2	equ	0xFDE
  3983                           postdec2	equ	0xFDD
  3984                           plusw2	equ	0xFDB
  3985                           fsr2h	equ	0xFDA
  3986                           fsr2l	equ	0xFD9
  3987                           status	equ	0xFD8
  3988                           
  3989 ;; *************** function _CRCcheck *****************
  3990 ;; Defined at:
  3991 ;;		line 373 in file "FastTransfer.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;		None
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  rt              2    5[BANK0 ] int 
  3996 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3997 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3998 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3999 ;; Return value:  Size  Location     Type
  4000 ;;		None               void
  4001 ;; Registers used:
  4002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4008 ;;      Params:         0       0       0       0       0       0       0
  4009 ;;      Locals:         0       7       0       0       0       0       0
  4010 ;;      Temps:          0       0       0       0       0       0       0
  4011 ;;      Totals:         0       7       0       0       0       0       0
  4012 ;;Total ram usage:        7 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    7
  4015 ;; This function calls:
  4016 ;;		Absolute function
  4017 ;;		_CRC8
  4018 ;;		_Receive_available
  4019 ;;		_Receive_get
  4020 ;;		_crcBufS_get
  4021 ;;		_crcBufS_status_put
  4022 ;; This function is called by:
  4023 ;;		_receiveData
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text10
  4028  001C72                     __ptext10:
  4029                           	opt stack 0
  4030  001C72                     _CRCcheck:
  4031                           	opt stack 21
  4032  001C72                     l4665:
  4033  001C72  D801               	call	u4948
  4034  001C74  D00A               	goto	u4949
  4035  001C76                     u4948:
  4036  001C76  0005               	push	
  4037  001C78  6EFA               	movwf	pclath,c
  4038  001C7A  5032               	movf	_serial_available,w,c
  4039  001C7C  6EFD               	movwf	tosl,c
  4040  001C7E  5033               	movf	_serial_available+1,w,c
  4041  001C80  6EFE               	movwf	tosh,c
  4042  001C82  50F8               	movf	tblptru,w,c
  4043  001C84  6EFF               	movwf	tosu,c
  4044  001C86  50FA               	movf	pclath,w,c
  4045  001C88  0012               	return		;indir
  4046  001C8A                     u4949:
  4047  001C8A  BE1E               	btfsc	?_Receive_available+1,7,c
  4048  001C8C  D7F2               	goto	l4665
  4049  001C8E  501E               	movf	?_Receive_available+1,w,c
  4050  001C90  E104               	bnz	l4667
  4051  001C92  0E04               	movlw	4
  4052  001C94  5C1D               	subwf	?_Receive_available,w,c
  4053  001C96  A0D8               	btfss	status,0,c
  4054  001C98  D7EC               	goto	l4665
  4055  001C9A                     l4667:
  4056                           
  4057                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  4058                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  4059  001C9A  D801               	call	u4968
  4060  001C9C  D00A               	goto	u4969
  4061  001C9E                     u4968:
  4062  001C9E  0005               	push	
  4063  001CA0  6EFA               	movwf	pclath,c
  4064  001CA2  5034               	movf	_serial_read,w,c
  4065  001CA4  6EFD               	movwf	tosl,c
  4066  001CA6  5035               	movf	_serial_read+1,w,c
  4067  001CA8  6EFE               	movwf	tosh,c
  4068  001CAA  50F8               	movf	tblptru,w,c
  4069  001CAC  6EFF               	movwf	tosu,c
  4070  001CAE  50FA               	movf	pclath,w,c
  4071  001CB0  0012               	return		;indir
  4072  001CB2                     u4969:
  4073  001CB2  0100               	movlb	0	; () banked
  4074  001CB4  6FC3               	movwf	CRCcheck@arrayHolder& (0+255),b
  4075                           
  4076                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  4077  001CB6  D801               	call	u4978
  4078  001CB8  D00A               	goto	u4979
  4079  001CBA                     u4978:
  4080  001CBA  0005               	push	
  4081  001CBC  6EFA               	movwf	pclath,c
  4082  001CBE  5034               	movf	_serial_read,w,c
  4083  001CC0  6EFD               	movwf	tosl,c
  4084  001CC2  5035               	movf	_serial_read+1,w,c
  4085  001CC4  6EFE               	movwf	tosh,c
  4086  001CC6  50F8               	movf	tblptru,w,c
  4087  001CC8  6EFF               	movwf	tosu,c
  4088  001CCA  50FA               	movf	pclath,w,c
  4089  001CCC  0012               	return		;indir
  4090  001CCE                     u4979:
  4091  001CCE  0100               	movlb	0	; () banked
  4092  001CD0  6FC4               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  4093                           
  4094                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  4095  001CD2  D801               	call	u4988
  4096  001CD4  D00A               	goto	u4989
  4097  001CD6                     u4988:
  4098  001CD6  0005               	push	
  4099  001CD8  6EFA               	movwf	pclath,c
  4100  001CDA  5034               	movf	_serial_read,w,c
  4101  001CDC  6EFD               	movwf	tosl,c
  4102  001CDE  5035               	movf	_serial_read+1,w,c
  4103  001CE0  6EFE               	movwf	tosh,c
  4104  001CE2  50F8               	movf	tblptru,w,c
  4105  001CE4  6EFF               	movwf	tosu,c
  4106  001CE6  50FA               	movf	pclath,w,c
  4107  001CE8  0012               	return		;indir
  4108  001CEA                     u4989:
  4109  001CEA  0100               	movlb	0	; () banked
  4110  001CEC  6FC5               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  4111                           
  4112                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  4113  001CEE  D801               	call	u4998
  4114  001CF0  D00A               	goto	u4999
  4115  001CF2                     u4998:
  4116  001CF2  0005               	push	
  4117  001CF4  6EFA               	movwf	pclath,c
  4118  001CF6  5034               	movf	_serial_read,w,c
  4119  001CF8  6EFD               	movwf	tosl,c
  4120  001CFA  5035               	movf	_serial_read+1,w,c
  4121  001CFC  6EFE               	movwf	tosh,c
  4122  001CFE  50F8               	movf	tblptru,w,c
  4123  001D00  6EFF               	movwf	tosu,c
  4124  001D02  50FA               	movf	pclath,w,c
  4125  001D04  0012               	return		;indir
  4126  001D06                     u4999:
  4127  001D06  0100               	movlb	0	; () banked
  4128  001D08  6FC1               	movwf	CRCcheck@SentCRC& (0+255),b
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  4132  001D0A  0EC3               	movlw	low CRCcheck@arrayHolder
  4133  001D0C  6E1B               	movwf	CRC8@data,c
  4134  001D0E  0E00               	movlw	high CRCcheck@arrayHolder
  4135  001D10  6E1C               	movwf	CRC8@data+1,c
  4136  001D12  0E03               	movlw	3
  4137  001D14  6E1D               	movwf	CRC8@len,c
  4138  001D16  ECBD  F01A         	call	_CRC8	;wreg free
  4139  001D1A  0100               	movlb	0	; () banked
  4140  001D1C  6FC2               	movwf	CRCcheck@calculatedCRC& (0+255),b
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  4144  001D1E  0100               	movlb	0	; () banked
  4145  001D20  51C2               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  4146  001D22  0100               	movlb	0	; () banked
  4147  001D24  19C1               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  4148  001D26  A4D8               	btfss	status,2,c
  4149  001D28  D04E               	goto	l4697
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;FastTransfer.c: 387: int rt;
  4153                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  4154  001D2A  0E00               	movlw	0
  4155  001D2C  0100               	movlb	0	; () banked
  4156  001D2E  6FC7               	movwf	(CRCcheck@rt+1)& (0+255),b
  4157  001D30  0E00               	movlw	0
  4158  001D32  6FC6               	movwf	CRCcheck@rt& (0+255),b
  4159  001D34                     l4675:
  4160                           
  4161                           ; BSR set to: 0
  4162  001D34  0100               	movlb	0	; () banked
  4163  001D36  BFC7               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4164  001D38  D008               	goto	l4679
  4165  001D3A  0100               	movlb	0	; () banked
  4166  001D3C  51C7               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4167  001D3E  E147               	bnz	l713
  4168  001D40  0E05               	movlw	5
  4169  001D42  0100               	movlb	0	; () banked
  4170  001D44  5DC6               	subwf	CRCcheck@rt& (0+255),w,b
  4171  001D46  B0D8               	btfsc	status,0,c
  4172  001D48  0012               	return	
  4173  001D4A                     l4679:
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4177  001D4A  0E9C               	movlw	low _crc_buffer
  4178  001D4C  6E1B               	movwf	crcBufS_get@_this,c
  4179  001D4E  0E00               	movlw	high _crc_buffer
  4180  001D50  6E1C               	movwf	crcBufS_get@_this+1,c
  4181  001D52  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4182  001D56  0E00               	movlw	0
  4183  001D58  6E1E               	movwf	crcBufS_get@space,c
  4184  001D5A  EC59  F014         	call	_crcBufS_get	;wreg free
  4185  001D5E  1840               	xorwf	_returnAddress,w,c
  4186  001D60  A4D8               	btfss	status,2,c
  4187  001D62  D02D               	goto	l4693
  4188                           
  4189                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4190  001D64  0E9C               	movlw	low _crc_buffer
  4191  001D66  6E1B               	movwf	crcBufS_get@_this,c
  4192  001D68  0E00               	movlw	high _crc_buffer
  4193  001D6A  6E1C               	movwf	crcBufS_get@_this+1,c
  4194  001D6C  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4195  001D70  0E01               	movlw	1
  4196  001D72  6E1E               	movwf	crcBufS_get@space,c
  4197  001D74  EC59  F014         	call	_crcBufS_get	;wreg free
  4198  001D78  0100               	movlb	0	; () banked
  4199  001D7A  19C5               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4200  001D7C  A4D8               	btfss	status,2,c
  4201  001D7E  D01F               	goto	l4693
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  4205  001D80  0100               	movlb	0	; () banked
  4206  001D82  05C4               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4207  001D84  A4D8               	btfss	status,2,c
  4208  001D86  D00B               	goto	l4689
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  4212  001D88  0E9C               	movlw	low _crc_buffer
  4213  001D8A  6E1B               	movwf	crcBufS_status_put@_this,c
  4214  001D8C  0E00               	movlw	high _crc_buffer
  4215  001D8E  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4216  001D90  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4217  001D94  0E01               	movlw	1
  4218  001D96  6E1E               	movwf	crcBufS_status_put@status,c
  4219  001D98  EC82  F016         	call	_crcBufS_status_put	;wreg free
  4220                           
  4221                           ;FastTransfer.c: 393: break;
  4222  001D9C  0012               	return	
  4223  001D9E                     l4689:
  4224  001D9E  0E02               	movlw	2
  4225  001DA0  0100               	movlb	0	; () banked
  4226  001DA2  19C4               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4227  001DA4  A4D8               	btfss	status,2,c
  4228  001DA6  D00B               	goto	l4693
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  4232  001DA8  0E9C               	movlw	low _crc_buffer
  4233  001DAA  6E1B               	movwf	crcBufS_status_put@_this,c
  4234  001DAC  0E00               	movlw	high _crc_buffer
  4235  001DAE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4236  001DB0  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4237  001DB4  0E02               	movlw	2
  4238  001DB6  6E1E               	movwf	crcBufS_status_put@status,c
  4239  001DB8  EC82  F016         	call	_crcBufS_status_put	;wreg free
  4240                           
  4241                           ;FastTransfer.c: 396: break;
  4242  001DBC  0012               	return	
  4243  001DBE                     l4693:
  4244  001DBE  0100               	movlb	0	; () banked
  4245  001DC0  4BC6               	infsnz	CRCcheck@rt& (0+255),f,b
  4246  001DC2  2BC7               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4247  001DC4  D7B7               	goto	l4675
  4248  001DC6                     l4697:
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;FastTransfer.c: 402: crcErrorCounter++;
  4252  001DC6  0100               	movlb	0	; () banked
  4253  001DC8  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  4254  001DCA  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4255  001DCC  0012               	return	
  4256  001DCE                     l713:
  4257  001DCE  0012               	return		;funcret
  4258  001DD0                     __end_of_CRCcheck:
  4259                           	opt stack 0
  4260                           tosu	equ	0xFFF
  4261                           tosh	equ	0xFFE
  4262                           tosl	equ	0xFFD
  4263                           pclath	equ	0xFFA
  4264                           tblptru	equ	0xFF8
  4265                           tblptrh	equ	0xFF7
  4266                           tblptrl	equ	0xFF6
  4267                           tablat	equ	0xFF5
  4268                           prodh	equ	0xFF4
  4269                           prodl	equ	0xFF3
  4270                           intcon	equ	0xFF2
  4271                           postinc0	equ	0xFEE
  4272                           wreg	equ	0xFE8
  4273                           postdec1	equ	0xFE5
  4274                           fsr1l	equ	0xFE1
  4275                           indf2	equ	0xFDF
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           plusw2	equ	0xFDB
  4279                           fsr2h	equ	0xFDA
  4280                           fsr2l	equ	0xFD9
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _crcBufS_status_put *****************
  4284 ;; Defined at:
  4285 ;;		line 336 in file "FastTransfer.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4288 ;;		 -> crc_buffer(17), 
  4289 ;;  time            1   28[COMRAM] unsigned char 
  4290 ;;  status          1   29[COMRAM] unsigned char 
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  wantedTime      2   34[COMRAM] int 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;		None               void
  4295 ;; Registers used:
  4296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4302 ;;      Params:         4       0       0       0       0       0       0
  4303 ;;      Locals:         2       0       0       0       0       0       0
  4304 ;;      Temps:          4       0       0       0       0       0       0
  4305 ;;      Totals:        10       0       0       0       0       0       0
  4306 ;;Total ram usage:       10 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    4
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_CRCcheck
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text11
  4317  002D04                     __ptext11:
  4318                           	opt stack 0
  4319  002D04                     _crcBufS_status_put:
  4320                           	opt stack 23
  4321                           
  4322                           ;FastTransfer.c: 337: if (time >= 5) {
  4323                           
  4324                           ;incstack = 0
  4325  002D04  0E04               	movlw	4
  4326  002D06  641D               	cpfsgt	crcBufS_status_put@time,c
  4327  002D08  D002               	goto	l4503
  4328                           
  4329                           ;FastTransfer.c: 338: time = 5 - 1;
  4330  002D0A  0E04               	movlw	4
  4331  002D0C  6E1D               	movwf	crcBufS_status_put@time,c
  4332  002D0E                     l4503:
  4333                           
  4334                           ;FastTransfer.c: 339: }
  4335                           ;FastTransfer.c: 340: time = time + 1;
  4336  002D0E  281D               	incf	crcBufS_status_put@time,w,c
  4337  002D10  6E1D               	movwf	crcBufS_status_put@time,c
  4338                           
  4339                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4340  002D12  501D               	movf	crcBufS_status_put@time,w,c
  4341  002D14  0D03               	mullw	3
  4342  002D16  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4343  002D1A  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4344                           
  4345                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4346  002D1E  EE20 F00F          	lfsr	2,15
  4347  002D22  501B               	movf	crcBufS_status_put@_this,w,c
  4348  002D24  26D9               	addwf	fsr2l,f,c
  4349  002D26  501C               	movf	crcBufS_status_put@_this+1,w,c
  4350  002D28  22DA               	addwfc	fsr2h,f,c
  4351  002D2A  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4352  002D2C  5CDE               	subwf	postinc2,w,c
  4353  002D2E  50DE               	movf	postinc2,w,c
  4354  002D30  0A80               	xorlw	128
  4355  002D32  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4356  002D34  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4357  002D36  0A80               	xorlw	128
  4358  002D38  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4359  002D3A  B0D8               	btfsc	status,0,c
  4360  002D3C  D02B               	goto	l4511
  4361                           
  4362                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4363  002D3E  EE20 F00F          	lfsr	2,15
  4364  002D42  501B               	movf	crcBufS_status_put@_this,w,c
  4365  002D44  26D9               	addwf	fsr2l,f,c
  4366  002D46  501C               	movf	crcBufS_status_put@_this+1,w,c
  4367  002D48  22DA               	addwfc	fsr2h,f,c
  4368  002D4A  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4369  002D4E  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4370  002D52  1E1F               	comf	??_crcBufS_status_put,f,c
  4371  002D54  1E20               	comf	??_crcBufS_status_put+1,f,c
  4372  002D56  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4373  002D58  2A20               	incf	??_crcBufS_status_put+1,f,c
  4374  002D5A  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4375  002D5C  261F               	addwf	??_crcBufS_status_put,f,c
  4376  002D5E  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4377  002D60  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4378  002D62  1E1F               	comf	??_crcBufS_status_put,f,c
  4379  002D64  1E20               	comf	??_crcBufS_status_put+1,f,c
  4380  002D66  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4381  002D68  2A20               	incf	??_crcBufS_status_put+1,f,c
  4382  002D6A  0E0F               	movlw	15
  4383  002D6C  241F               	addwf	??_crcBufS_status_put,w,c
  4384  002D6E  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4385  002D70  0E00               	movlw	0
  4386  002D72  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4387  002D74  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4388                           
  4389                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4390  002D76  0E02               	movlw	2
  4391  002D78  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4392  002D7A  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4393  002D7C  0E00               	movlw	0
  4394  002D7E  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4395  002D80  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4396  002D82  501F               	movf	??_crcBufS_status_put,w,c
  4397  002D84  241B               	addwf	crcBufS_status_put@_this,w,c
  4398  002D86  6ED9               	movwf	fsr2l,c
  4399  002D88  5020               	movf	??_crcBufS_status_put+1,w,c
  4400  002D8A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4401  002D8C  6EDA               	movwf	fsr2h,c
  4402  002D8E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4403                           
  4404                           ;FastTransfer.c: 345: } else {
  4405  002D92  0012               	return	
  4406  002D94                     l4511:
  4407                           
  4408                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4409  002D94  EE20 F00F          	lfsr	2,15
  4410  002D98  501B               	movf	crcBufS_status_put@_this,w,c
  4411  002D9A  26D9               	addwf	fsr2l,f,c
  4412  002D9C  501C               	movf	crcBufS_status_put@_this+1,w,c
  4413  002D9E  22DA               	addwfc	fsr2h,f,c
  4414  002DA0  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4415  002DA4  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4416  002DA8  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4417  002DAC  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4418  002DB0  1E21               	comf	??_crcBufS_status_put+2,f,c
  4419  002DB2  1E22               	comf	??_crcBufS_status_put+3,f,c
  4420  002DB4  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4421  002DB6  2A22               	incf	??_crcBufS_status_put+3,f,c
  4422  002DB8  501F               	movf	??_crcBufS_status_put,w,c
  4423  002DBA  2621               	addwf	??_crcBufS_status_put+2,f,c
  4424  002DBC  5020               	movf	??_crcBufS_status_put+1,w,c
  4425  002DBE  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4426  002DC0  0E02               	movlw	2
  4427  002DC2  2621               	addwf	??_crcBufS_status_put+2,f,c
  4428  002DC4  0E00               	movlw	0
  4429  002DC6  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4430  002DC8  5021               	movf	??_crcBufS_status_put+2,w,c
  4431  002DCA  241B               	addwf	crcBufS_status_put@_this,w,c
  4432  002DCC  6ED9               	movwf	fsr2l,c
  4433  002DCE  5022               	movf	??_crcBufS_status_put+3,w,c
  4434  002DD0  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4435  002DD2  6EDA               	movwf	fsr2h,c
  4436  002DD4  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4437  002DD8  0012               	return	
  4438  002DDA                     __end_of_crcBufS_status_put:
  4439                           	opt stack 0
  4440                           tosu	equ	0xFFF
  4441                           tosh	equ	0xFFE
  4442                           tosl	equ	0xFFD
  4443                           pclath	equ	0xFFA
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           intcon	equ	0xFF2
  4451                           postinc0	equ	0xFEE
  4452                           wreg	equ	0xFE8
  4453                           postdec1	equ	0xFE5
  4454                           fsr1l	equ	0xFE1
  4455                           indf2	equ	0xFDF
  4456                           postinc2	equ	0xFDE
  4457                           postdec2	equ	0xFDD
  4458                           plusw2	equ	0xFDB
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _crcBufS_get *****************
  4464 ;; Defined at:
  4465 ;;		line 353 in file "FastTransfer.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4468 ;;		 -> crc_buffer(17), 
  4469 ;;  time            1   28[COMRAM] unsigned char 
  4470 ;;  space           1   29[COMRAM] unsigned char 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  wantedTime      2   36[COMRAM] int 
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      unsigned char 
  4475 ;; Registers used:
  4476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4482 ;;      Params:         4       0       0       0       0       0       0
  4483 ;;      Locals:         2       0       0       0       0       0       0
  4484 ;;      Temps:          6       0       0       0       0       0       0
  4485 ;;      Totals:        12       0       0       0       0       0       0
  4486 ;;Total ram usage:       12 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    4
  4489 ;; This function calls:
  4490 ;;		Nothing
  4491 ;; This function is called by:
  4492 ;;		_CRCcheck
  4493 ;;		_AKNAK
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text12
  4498  0028B2                     __ptext12:
  4499                           	opt stack 0
  4500  0028B2                     _crcBufS_get:
  4501                           	opt stack 23
  4502                           
  4503                           ;FastTransfer.c: 354: if (time >= 5) {
  4504                           
  4505                           ;incstack = 0
  4506  0028B2  0E04               	movlw	4
  4507  0028B4  641D               	cpfsgt	crcBufS_get@time,c
  4508  0028B6  D002               	goto	l4479
  4509                           
  4510                           ;FastTransfer.c: 355: time = 5 - 1;
  4511  0028B8  0E04               	movlw	4
  4512  0028BA  6E1D               	movwf	crcBufS_get@time,c
  4513  0028BC                     l4479:
  4514                           
  4515                           ;FastTransfer.c: 356: }
  4516                           ;FastTransfer.c: 357: if (space >= 3) {
  4517  0028BC  0E02               	movlw	2
  4518  0028BE  641E               	cpfsgt	crcBufS_get@space,c
  4519  0028C0  D002               	goto	l4483
  4520                           
  4521                           ;FastTransfer.c: 358: space = 3 - 1;
  4522  0028C2  0E02               	movlw	2
  4523  0028C4  6E1E               	movwf	crcBufS_get@space,c
  4524  0028C6                     l4483:
  4525                           
  4526                           ;FastTransfer.c: 359: }
  4527                           ;FastTransfer.c: 360: time = time + 1;
  4528  0028C6  281D               	incf	crcBufS_get@time,w,c
  4529  0028C8  6E1D               	movwf	crcBufS_get@time,c
  4530                           
  4531                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4532  0028CA  501D               	movf	crcBufS_get@time,w,c
  4533  0028CC  0D03               	mullw	3
  4534  0028CE  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4535  0028D2  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4536                           
  4537                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4538  0028D6  EE20 F00F          	lfsr	2,15
  4539  0028DA  501B               	movf	crcBufS_get@_this,w,c
  4540  0028DC  26D9               	addwf	fsr2l,f,c
  4541  0028DE  501C               	movf	crcBufS_get@_this+1,w,c
  4542  0028E0  22DA               	addwfc	fsr2h,f,c
  4543  0028E2  5025               	movf	crcBufS_get@wantedTime,w,c
  4544  0028E4  5CDE               	subwf	postinc2,w,c
  4545  0028E6  50DE               	movf	postinc2,w,c
  4546  0028E8  0A80               	xorlw	128
  4547  0028EA  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4548  0028EC  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4549  0028EE  0A80               	xorlw	128
  4550  0028F0  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4551  0028F2  B0D8               	btfsc	status,0,c
  4552  0028F4  D02A               	goto	l4495
  4553                           
  4554                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4555  0028F6  EE20 F00F          	lfsr	2,15
  4556  0028FA  501B               	movf	crcBufS_get@_this,w,c
  4557  0028FC  26D9               	addwf	fsr2l,f,c
  4558  0028FE  501C               	movf	crcBufS_get@_this+1,w,c
  4559  002900  22DA               	addwfc	fsr2h,f,c
  4560  002902  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4561  002906  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4562  00290A  1E1F               	comf	??_crcBufS_get,f,c
  4563  00290C  1E20               	comf	??_crcBufS_get+1,f,c
  4564  00290E  4A1F               	infsnz	??_crcBufS_get,f,c
  4565  002910  2A20               	incf	??_crcBufS_get+1,f,c
  4566  002912  5025               	movf	crcBufS_get@wantedTime,w,c
  4567  002914  261F               	addwf	??_crcBufS_get,f,c
  4568  002916  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4569  002918  2220               	addwfc	??_crcBufS_get+1,f,c
  4570  00291A  1E1F               	comf	??_crcBufS_get,f,c
  4571  00291C  1E20               	comf	??_crcBufS_get+1,f,c
  4572  00291E  4A1F               	infsnz	??_crcBufS_get,f,c
  4573  002920  2A20               	incf	??_crcBufS_get+1,f,c
  4574  002922  0E0F               	movlw	15
  4575  002924  241F               	addwf	??_crcBufS_get,w,c
  4576  002926  6E25               	movwf	crcBufS_get@wantedTime,c
  4577  002928  0E00               	movlw	0
  4578  00292A  2020               	addwfc	??_crcBufS_get+1,w,c
  4579  00292C  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4580                           
  4581                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4582  00292E  501E               	movf	crcBufS_get@space,w,c
  4583  002930  2425               	addwf	crcBufS_get@wantedTime,w,c
  4584  002932  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4585  002934  0E00               	movlw	0
  4586  002936  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4587  002938  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4588  00293A  501F               	movf	??_crcBufS_get,w,c
  4589  00293C  241B               	addwf	crcBufS_get@_this,w,c
  4590  00293E  6ED9               	movwf	fsr2l,c
  4591  002940  5020               	movf	??_crcBufS_get+1,w,c
  4592  002942  201C               	addwfc	crcBufS_get@_this+1,w,c
  4593  002944  6EDA               	movwf	fsr2h,c
  4594  002946  50DF               	movf	indf2,w,c
  4595                           
  4596                           ;FastTransfer.c: 365: } else {
  4597  002948  0012               	return	
  4598  00294A                     l4495:
  4599                           
  4600                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4601  00294A  EE20 F00F          	lfsr	2,15
  4602  00294E  501B               	movf	crcBufS_get@_this,w,c
  4603  002950  26D9               	addwf	fsr2l,f,c
  4604  002952  501C               	movf	crcBufS_get@_this+1,w,c
  4605  002954  22DA               	addwfc	fsr2h,f,c
  4606  002956  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4607  00295A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4608  00295E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4609  002962  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4610  002966  1E21               	comf	??_crcBufS_get+2,f,c
  4611  002968  1E22               	comf	??_crcBufS_get+3,f,c
  4612  00296A  4A21               	infsnz	??_crcBufS_get+2,f,c
  4613  00296C  2A22               	incf	??_crcBufS_get+3,f,c
  4614  00296E  501E               	movf	crcBufS_get@space,w,c
  4615  002970  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4616  002972  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4617  002974  5021               	movf	??_crcBufS_get+2,w,c
  4618  002976  2623               	addwf	??_crcBufS_get+4,f,c
  4619  002978  5022               	movf	??_crcBufS_get+3,w,c
  4620  00297A  2224               	addwfc	??_crcBufS_get+5,f,c
  4621  00297C  501F               	movf	??_crcBufS_get,w,c
  4622  00297E  2623               	addwf	??_crcBufS_get+4,f,c
  4623  002980  5020               	movf	??_crcBufS_get+1,w,c
  4624  002982  2224               	addwfc	??_crcBufS_get+5,f,c
  4625  002984  5023               	movf	??_crcBufS_get+4,w,c
  4626  002986  241B               	addwf	crcBufS_get@_this,w,c
  4627  002988  6ED9               	movwf	fsr2l,c
  4628  00298A  5024               	movf	??_crcBufS_get+5,w,c
  4629  00298C  201C               	addwfc	crcBufS_get@_this+1,w,c
  4630  00298E  6EDA               	movwf	fsr2h,c
  4631  002990  50DF               	movf	indf2,w,c
  4632  002992  0012               	return	
  4633  002994                     __end_of_crcBufS_get:
  4634                           	opt stack 0
  4635                           tosu	equ	0xFFF
  4636                           tosh	equ	0xFFE
  4637                           tosl	equ	0xFFD
  4638                           pclath	equ	0xFFA
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           prodh	equ	0xFF4
  4644                           prodl	equ	0xFF3
  4645                           intcon	equ	0xFF2
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           postdec1	equ	0xFE5
  4649                           fsr1l	equ	0xFE1
  4650                           indf2	equ	0xFDF
  4651                           postinc2	equ	0xFDE
  4652                           postdec2	equ	0xFDD
  4653                           plusw2	equ	0xFDB
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           
  4658 ;; *************** function _Receive_get *****************
  4659 ;; Defined at:
  4660 ;;		line 126 in file "UART.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;		None
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;		None
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      unsigned char 
  4667 ;; Registers used:
  4668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4674 ;;      Params:         0       0       0       0       0       0       0
  4675 ;;      Locals:         0       0       0       0       0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0
  4677 ;;      Totals:         0       0       0       0       0       0       0
  4678 ;;Total ram usage:        0 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    6
  4681 ;; This function calls:
  4682 ;;		_UART_buff_get
  4683 ;; This function is called by:
  4684 ;;		_SYSTEM_Initialize
  4685 ;;		_getch
  4686 ;;		_CRCcheck
  4687 ;;		_receiveData
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text13
  4692  003A6A                     __ptext13:
  4693                           	opt stack 0
  4694  003A6A                     _Receive_get:
  4695                           	opt stack 22
  4696                           
  4697                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4698                           
  4699                           ;incstack = 0
  4700  003A6A  0E00               	movlw	low _input_buffer
  4701  003A6C  6E21               	movwf	UART_buff_get@_this,c
  4702  003A6E  0E04               	movlw	high _input_buffer
  4703  003A70  6E22               	movwf	UART_buff_get@_this+1,c
  4704  003A72  ECF9  F017         	call	_UART_buff_get	;wreg free
  4705  003A76  0012               	return	
  4706  003A78                     __end_of_Receive_get:
  4707                           	opt stack 0
  4708                           tosu	equ	0xFFF
  4709                           tosh	equ	0xFFE
  4710                           tosl	equ	0xFFD
  4711                           pclath	equ	0xFFA
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           prodh	equ	0xFF4
  4717                           prodl	equ	0xFF3
  4718                           intcon	equ	0xFF2
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           postdec1	equ	0xFE5
  4722                           fsr1l	equ	0xFE1
  4723                           indf2	equ	0xFDF
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           plusw2	equ	0xFDB
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _UART_buff_get *****************
  4732 ;; Defined at:
  4733 ;;		line 81 in file "UART.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4736 ;;		 -> output_buffer(206), input_buffer(206), 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;  c               1   36[COMRAM] unsigned char 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  1    wreg      unsigned char 
  4741 ;; Registers used:
  4742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4748 ;;      Params:         2       0       0       0       0       0       0
  4749 ;;      Locals:         1       0       0       0       0       0       0
  4750 ;;      Temps:          2       0       0       0       0       0       0
  4751 ;;      Totals:         5       0       0       0       0       0       0
  4752 ;;Total ram usage:        5 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    5
  4755 ;; This function calls:
  4756 ;;		_UART_buff_modulo_inc
  4757 ;; This function is called by:
  4758 ;;		_Receive_get
  4759 ;;		_Send_put
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text14
  4764  002FF2                     __ptext14:
  4765                           	opt stack 0
  4766  002FF2                     _UART_buff_get:
  4767                           	opt stack 22
  4768                           
  4769                           ;UART.c: 82: unsigned char c;
  4770                           ;UART.c: 83: if (_this->count > 0) {
  4771                           
  4772                           ;incstack = 0
  4773  002FF2  EE20 F0CC          	lfsr	2,204
  4774  002FF6  5021               	movf	UART_buff_get@_this,w,c
  4775  002FF8  26D9               	addwf	fsr2l,f,c
  4776  002FFA  5022               	movf	UART_buff_get@_this+1,w,c
  4777  002FFC  22DA               	addwfc	fsr2h,f,c
  4778  002FFE  0E01               	movlw	1
  4779  003000  BEDB               	btfsc	plusw2,7,c
  4780  003002  D03C               	goto	l4399
  4781  003004  0E01               	movlw	1
  4782  003006  50DB               	movf	plusw2,w,c
  4783  003008  E103               	bnz	u4480
  4784  00300A  04DE               	decf	postinc2,w,c
  4785  00300C  A0D8               	btfss	status,0,c
  4786  00300E  D036               	goto	l4399
  4787  003010                     u4480:
  4788                           
  4789                           ;UART.c: 84: c = _this->buf[_this->tail];
  4790  003010  EE20 F0CA          	lfsr	2,202
  4791  003014  5021               	movf	UART_buff_get@_this,w,c
  4792  003016  26D9               	addwf	fsr2l,f,c
  4793  003018  5022               	movf	UART_buff_get@_this+1,w,c
  4794  00301A  22DA               	addwfc	fsr2h,f,c
  4795  00301C  CFDE F023          	movff	postinc2,??_UART_buff_get
  4796  003020  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4797  003024  5023               	movf	??_UART_buff_get,w,c
  4798  003026  2421               	addwf	UART_buff_get@_this,w,c
  4799  003028  6ED9               	movwf	fsr2l,c
  4800  00302A  5024               	movf	??_UART_buff_get+1,w,c
  4801  00302C  2022               	addwfc	UART_buff_get@_this+1,w,c
  4802  00302E  6EDA               	movwf	fsr2h,c
  4803  003030  50DF               	movf	indf2,w,c
  4804  003032  6E25               	movwf	UART_buff_get@c,c
  4805                           
  4806                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4807  003034  EE20 F0CA          	lfsr	2,202
  4808  003038  5021               	movf	UART_buff_get@_this,w,c
  4809  00303A  26D9               	addwf	fsr2l,f,c
  4810  00303C  5022               	movf	UART_buff_get@_this+1,w,c
  4811  00303E  22DA               	addwfc	fsr2h,f,c
  4812  003040  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4813  003044  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4814  003048  0E00               	movlw	0
  4815  00304A  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4816  00304C  0EC8               	movlw	200
  4817  00304E  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4818  003050  EC1C  F01C         	call	_UART_buff_modulo_inc	;wreg free
  4819  003054  EE20 F0CA          	lfsr	2,202
  4820  003058  5021               	movf	UART_buff_get@_this,w,c
  4821  00305A  26D9               	addwf	fsr2l,f,c
  4822  00305C  5022               	movf	UART_buff_get@_this+1,w,c
  4823  00305E  22DA               	addwfc	fsr2h,f,c
  4824  003060  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4825  003064  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4826                           
  4827                           ;UART.c: 86: --_this->count;
  4828  003068  EE20 F0CC          	lfsr	2,204
  4829  00306C  5021               	movf	UART_buff_get@_this,w,c
  4830  00306E  26D9               	addwf	fsr2l,f,c
  4831  003070  5022               	movf	UART_buff_get@_this+1,w,c
  4832  003072  22DA               	addwfc	fsr2h,f,c
  4833  003074  06DE               	decf	postinc2,f,c
  4834  003076  0E00               	movlw	0
  4835  003078  5ADD               	subwfb	postdec2,f,c
  4836                           
  4837                           ;UART.c: 87: } else {
  4838  00307A  D002               	goto	l778
  4839  00307C                     l4399:
  4840                           
  4841                           ;UART.c: 88: c = 0;
  4842  00307C  0E00               	movlw	0
  4843  00307E  6E25               	movwf	UART_buff_get@c,c
  4844  003080                     l778:
  4845                           
  4846                           ;UART.c: 89: }
  4847                           ;UART.c: 90: return (c);
  4848  003080  5025               	movf	UART_buff_get@c,w,c
  4849  003082  0012               	return	
  4850  003084                     __end_of_UART_buff_get:
  4851                           	opt stack 0
  4852                           tosu	equ	0xFFF
  4853                           tosh	equ	0xFFE
  4854                           tosl	equ	0xFFD
  4855                           pclath	equ	0xFFA
  4856                           tblptru	equ	0xFF8
  4857                           tblptrh	equ	0xFF7
  4858                           tblptrl	equ	0xFF6
  4859                           tablat	equ	0xFF5
  4860                           prodh	equ	0xFF4
  4861                           prodl	equ	0xFF3
  4862                           intcon	equ	0xFF2
  4863                           postinc0	equ	0xFEE
  4864                           wreg	equ	0xFE8
  4865                           postdec1	equ	0xFE5
  4866                           fsr1l	equ	0xFE1
  4867                           indf2	equ	0xFDF
  4868                           postinc2	equ	0xFDE
  4869                           postdec2	equ	0xFDD
  4870                           plusw2	equ	0xFDB
  4871                           fsr2h	equ	0xFDA
  4872                           fsr2l	equ	0xFD9
  4873                           status	equ	0xFD8
  4874                           
  4875 ;; *************** function _UART_buff_modulo_inc *****************
  4876 ;; Defined at:
  4877 ;;		line 106 in file "UART.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;  value           2   26[COMRAM] const unsigned int 
  4880 ;;  modulus         2   28[COMRAM] const unsigned int 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;  my_value        2   30[COMRAM] unsigned int 
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  2   26[COMRAM] unsigned int 
  4885 ;; Registers used:
  4886 ;;		wreg, status,2, status,0
  4887 ;; Tracked objects:
  4888 ;;		On entry : 0/0
  4889 ;;		On exit  : 0/0
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4892 ;;      Params:         4       0       0       0       0       0       0
  4893 ;;      Locals:         2       0       0       0       0       0       0
  4894 ;;      Temps:          0       0       0       0       0       0       0
  4895 ;;      Totals:         6       0       0       0       0       0       0
  4896 ;;Total ram usage:        6 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:    4
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		_UART_buff_put
  4903 ;;		_UART_buff_get
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text15
  4908  003838                     __ptext15:
  4909                           	opt stack 0
  4910  003838                     _UART_buff_modulo_inc:
  4911                           	opt stack 22
  4912                           
  4913                           ;UART.c: 107: unsigned int my_value = value + 1;
  4914                           
  4915                           ;incstack = 0
  4916  003838  0E01               	movlw	1
  4917  00383A  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4918  00383C  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4919  00383E  0E00               	movlw	0
  4920  003840  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4921  003842  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4922                           
  4923                           ;UART.c: 108: if (my_value >= modulus) {
  4924  003844  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4925  003846  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4926  003848  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4927  00384A  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4928  00384C  A0D8               	btfss	status,0,c
  4929  00384E  D004               	goto	l4387
  4930                           
  4931                           ;UART.c: 109: my_value = 0;
  4932  003850  0E00               	movlw	0
  4933  003852  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4934  003854  0E00               	movlw	0
  4935  003856  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4936  003858                     l4387:
  4937                           
  4938                           ;UART.c: 110: }
  4939                           ;UART.c: 111: return (my_value);
  4940  003858  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4941  00385C  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4942  003860  0012               	return	
  4943  003862                     __end_of_UART_buff_modulo_inc:
  4944                           	opt stack 0
  4945                           tosu	equ	0xFFF
  4946                           tosh	equ	0xFFE
  4947                           tosl	equ	0xFFD
  4948                           pclath	equ	0xFFA
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           postdec1	equ	0xFE5
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           plusw2	equ	0xFDB
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968 ;; *************** function _Receive_available *****************
  4969 ;; Defined at:
  4970 ;;		line 122 in file "UART.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;		None
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;		None
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  2   28[COMRAM] int 
  4977 ;; Registers used:
  4978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4984 ;;      Params:         2       0       0       0       0       0       0
  4985 ;;      Locals:         0       0       0       0       0       0       0
  4986 ;;      Temps:          0       0       0       0       0       0       0
  4987 ;;      Totals:         2       0       0       0       0       0       0
  4988 ;;Total ram usage:        2 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    5
  4991 ;; This function calls:
  4992 ;;		_UART_buff_size
  4993 ;; This function is called by:
  4994 ;;		_SYSTEM_Initialize
  4995 ;;		_CRCcheck
  4996 ;;		_receiveData
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text16
  5001  003A06                     __ptext16:
  5002                           	opt stack 0
  5003  003A06                     _Receive_available:
  5004                           	opt stack 23
  5005                           
  5006                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  5007                           
  5008                           ;incstack = 0
  5009  003A06  0E00               	movlw	low _input_buffer
  5010  003A08  6E1B               	movwf	UART_buff_size@_this,c
  5011  003A0A  0E04               	movlw	high _input_buffer
  5012  003A0C  6E1C               	movwf	UART_buff_size@_this+1,c
  5013  003A0E  EC0E  F01D         	call	_UART_buff_size	;wreg free
  5014  003A12  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  5015  003A16  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  5016  003A1A  0012               	return	
  5017  003A1C                     __end_of_Receive_available:
  5018                           	opt stack 0
  5019                           tosu	equ	0xFFF
  5020                           tosh	equ	0xFFE
  5021                           tosl	equ	0xFFD
  5022                           pclath	equ	0xFFA
  5023                           tblptru	equ	0xFF8
  5024                           tblptrh	equ	0xFF7
  5025                           tblptrl	equ	0xFF6
  5026                           tablat	equ	0xFF5
  5027                           prodh	equ	0xFF4
  5028                           prodl	equ	0xFF3
  5029                           intcon	equ	0xFF2
  5030                           postinc0	equ	0xFEE
  5031                           wreg	equ	0xFE8
  5032                           postdec1	equ	0xFE5
  5033                           fsr1l	equ	0xFE1
  5034                           indf2	equ	0xFDF
  5035                           postinc2	equ	0xFDE
  5036                           postdec2	equ	0xFDD
  5037                           plusw2	equ	0xFDB
  5038                           fsr2h	equ	0xFDA
  5039                           fsr2l	equ	0xFD9
  5040                           status	equ	0xFD8
  5041                           
  5042 ;; *************** function _UART_buff_size *****************
  5043 ;; Defined at:
  5044 ;;		line 102 in file "UART.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  5047 ;;		 -> output_buffer(206), input_buffer(206), 
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  2   26[COMRAM] int 
  5052 ;; Registers used:
  5053 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5059 ;;      Params:         2       0       0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0
  5062 ;;      Totals:         2       0       0       0       0       0       0
  5063 ;;Total ram usage:        2 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    4
  5066 ;; This function calls:
  5067 ;;		Nothing
  5068 ;; This function is called by:
  5069 ;;		_Receive_available
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text17
  5074  003A1C                     __ptext17:
  5075                           	opt stack 0
  5076  003A1C                     _UART_buff_size:
  5077                           	opt stack 23
  5078                           
  5079                           ;UART.c: 103: return (_this->count);
  5080                           
  5081                           ;incstack = 0
  5082  003A1C  EE20 F0CC          	lfsr	2,204
  5083  003A20  501B               	movf	UART_buff_size@_this,w,c
  5084  003A22  26D9               	addwf	fsr2l,f,c
  5085  003A24  501C               	movf	UART_buff_size@_this+1,w,c
  5086  003A26  22DA               	addwfc	fsr2h,f,c
  5087  003A28  CFDE F01B          	movff	postinc2,?_UART_buff_size
  5088  003A2C  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  5089  003A30  0012               	return	
  5090  003A32                     __end_of_UART_buff_size:
  5091                           	opt stack 0
  5092                           tosu	equ	0xFFF
  5093                           tosh	equ	0xFFE
  5094                           tosl	equ	0xFFD
  5095                           pclath	equ	0xFFA
  5096                           tblptru	equ	0xFF8
  5097                           tblptrh	equ	0xFF7
  5098                           tblptrl	equ	0xFF6
  5099                           tablat	equ	0xFF5
  5100                           prodh	equ	0xFF4
  5101                           prodl	equ	0xFF3
  5102                           intcon	equ	0xFF2
  5103                           postinc0	equ	0xFEE
  5104                           wreg	equ	0xFE8
  5105                           postdec1	equ	0xFE5
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           plusw2	equ	0xFDB
  5111                           fsr2h	equ	0xFDA
  5112                           fsr2l	equ	0xFD9
  5113                           status	equ	0xFD8
  5114                           
  5115 ;; *************** function _CRC8 *****************
  5116 ;; Defined at:
  5117 ;;		line 34 in file "FastTransfer.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;  data            2   26[COMRAM] PTR const unsigned char 
  5120 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1131(3), receiveData@holder(3), 
  5121 ;;		 -> rx_buffer(200), ring_buffer(206), 
  5122 ;;  len             1   28[COMRAM] unsigned char 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  sum             1   29[COMRAM] unsigned char 
  5125 ;;  tempI           1   31[COMRAM] unsigned char 
  5126 ;;  extract         1   30[COMRAM] unsigned char 
  5127 ;;  crc             1   32[COMRAM] unsigned char 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      unsigned char 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5137 ;;      Params:         3       0       0       0       0       0       0
  5138 ;;      Locals:         4       0       0       0       0       0       0
  5139 ;;      Temps:          0       0       0       0       0       0       0
  5140 ;;      Totals:         7       0       0       0       0       0       0
  5141 ;;Total ram usage:        7 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    4
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_sendData
  5148 ;;		_receiveData
  5149 ;;		_CRCcheck
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text18
  5154  00357A                     __ptext18:
  5155                           	opt stack 0
  5156  00357A                     _CRC8:
  5157                           	opt stack 24
  5158                           
  5159                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  5160                           
  5161                           ;incstack = 0
  5162  00357A  0E00               	movlw	0
  5163  00357C  6E21               	movwf	CRC8@crc,c
  5164                           
  5165                           ;FastTransfer.c: 36: while (len--) {
  5166  00357E  D01C               	goto	l4461
  5167  003580                     l4445:
  5168                           
  5169                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  5170  003580  C01B  FFD9         	movff	CRC8@data,fsr2l
  5171  003584  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5172  003588  50DF               	movf	indf2,w,c
  5173  00358A  6E1F               	movwf	CRC8@extract,c
  5174  00358C  4A1B               	infsnz	CRC8@data,f,c
  5175  00358E  2A1C               	incf	CRC8@data+1,f,c
  5176                           
  5177                           ;FastTransfer.c: 38: unsigned char tempI;
  5178                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  5179  003590  0E08               	movlw	8
  5180  003592  6E20               	movwf	CRC8@tempI,c
  5181  003594  D00E               	goto	l4459
  5182  003596                     l4451:
  5183                           
  5184                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  5185  003596  5021               	movf	CRC8@crc,w,c
  5186  003598  181F               	xorwf	CRC8@extract,w,c
  5187  00359A  0B01               	andlw	1
  5188  00359C  6E1E               	movwf	CRC8@sum,c
  5189                           
  5190                           ;FastTransfer.c: 41: crc >>= 1;
  5191  00359E  90D8               	bcf	status,0,c
  5192  0035A0  3221               	rrcf	CRC8@crc,f,c
  5193                           
  5194                           ;FastTransfer.c: 42: if (sum) {
  5195  0035A2  501E               	movf	CRC8@sum,w,c
  5196  0035A4  B4D8               	btfsc	status,2,c
  5197  0035A6  D002               	goto	l599
  5198                           
  5199                           ;FastTransfer.c: 43: crc ^= 0x8C;
  5200  0035A8  0E8C               	movlw	140
  5201  0035AA  1A21               	xorwf	CRC8@crc,f,c
  5202  0035AC                     l599:
  5203                           
  5204                           ;FastTransfer.c: 44: }
  5205                           ;FastTransfer.c: 45: extract >>= 1;
  5206  0035AC  90D8               	bcf	status,0,c
  5207  0035AE  321F               	rrcf	CRC8@extract,f,c
  5208  0035B0  0620               	decf	CRC8@tempI,f,c
  5209  0035B2                     l4459:
  5210  0035B2  5020               	movf	CRC8@tempI,w,c
  5211  0035B4  A4D8               	btfss	status,2,c
  5212  0035B6  D7EF               	goto	l4451
  5213  0035B8                     l4461:
  5214  0035B8  061D               	decf	CRC8@len,f,c
  5215  0035BA  281D               	incf	CRC8@len,w,c
  5216  0035BC  A4D8               	btfss	status,2,c
  5217  0035BE  D7E0               	goto	l4445
  5218                           
  5219                           ;FastTransfer.c: 46: }
  5220                           ;FastTransfer.c: 47: }
  5221                           ;FastTransfer.c: 48: return crc;
  5222  0035C0  5021               	movf	CRC8@crc,w,c
  5223  0035C2  0012               	return	
  5224  0035C4                     __end_of_CRC8:
  5225                           	opt stack 0
  5226                           tosu	equ	0xFFF
  5227                           tosh	equ	0xFFE
  5228                           tosl	equ	0xFFD
  5229                           pclath	equ	0xFFA
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodh	equ	0xFF4
  5235                           prodl	equ	0xFF3
  5236                           intcon	equ	0xFF2
  5237                           postinc0	equ	0xFEE
  5238                           wreg	equ	0xFE8
  5239                           postdec1	equ	0xFE5
  5240                           fsr1l	equ	0xFE1
  5241                           indf2	equ	0xFDF
  5242                           postinc2	equ	0xFDE
  5243                           postdec2	equ	0xFDD
  5244                           plusw2	equ	0xFDB
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function ___fttol *****************
  5250 ;; Defined at:
  5251 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  f1              3   32[BANK0 ] float 
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  lval            4   42[BANK0 ] unsigned long 
  5256 ;;  exp1            1   46[BANK0 ] unsigned char 
  5257 ;;  sign1           1   41[BANK0 ] unsigned char 
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  4   32[BANK0 ] long 
  5260 ;; Registers used:
  5261 ;;		wreg, status,2, status,0
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5267 ;;      Params:         0       4       0       0       0       0       0
  5268 ;;      Locals:         0       6       0       0       0       0       0
  5269 ;;      Temps:          0       5       0       0       0       0       0
  5270 ;;      Totals:         0      15       0       0       0       0       0
  5271 ;;Total ram usage:       15 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    4
  5274 ;; This function calls:
  5275 ;;		Nothing
  5276 ;; This function is called by:
  5277 ;;		_updateComms
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           	psect	text19
  5282  002318                     __ptext19:
  5283                           	opt stack 0
  5284  002318                     ___fttol:
  5285                           	opt stack 25
  5286                           
  5287                           ;incstack = 0
  5288  002318  C0E3  F0E5         	movff	___fttol@f1+2,??___fttol
  5289  00231C  0100               	movlb	0	; () banked
  5290  00231E  6BE6               	clrf	(??___fttol+1)& (0+255),b
  5291  002320  6BE7               	clrf	(??___fttol+2)& (0+255),b
  5292  002322  0100               	movlb	0	; () banked
  5293  002324  35E2               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5294  002326  0100               	movlb	0	; () banked
  5295  002328  37E5               	rlcf	??___fttol& (0+255),f,b
  5296  00232A  E301               	bnc	u3971
  5297  00232C  81E6               	bsf	(??___fttol+1)& (0+255),0,b
  5298  00232E                     u3971:
  5299  00232E  0100               	movlb	0	; () banked
  5300  002330  51E5               	movf	??___fttol& (0+255),w,b
  5301  002332  0100               	movlb	0	; () banked
  5302  002334  6FEF               	movwf	___fttol@exp1& (0+255),b
  5303  002336  0100               	movlb	0	; () banked
  5304  002338  51EF               	movf	___fttol@exp1& (0+255),w,b
  5305  00233A  A4D8               	btfss	status,2,c
  5306  00233C  D00A               	goto	l3891
  5307                           
  5308                           ; BSR set to: 0
  5309  00233E  0E00               	movlw	0
  5310  002340  0100               	movlb	0	; () banked
  5311  002342  6FE1               	movwf	?___fttol& (0+255),b
  5312  002344  0E00               	movlw	0
  5313  002346  6FE2               	movwf	(?___fttol+1)& (0+255),b
  5314  002348  0E00               	movlw	0
  5315  00234A  6FE3               	movwf	(?___fttol+2)& (0+255),b
  5316  00234C  0E00               	movlw	0
  5317  00234E  6FE4               	movwf	(?___fttol+3)& (0+255),b
  5318                           
  5319                           ; BSR set to: 0
  5320  002350  0012               	return	
  5321  002352                     l3891:
  5322                           
  5323                           ; BSR set to: 0
  5324  002352  0E17               	movlw	23
  5325  002354  0100               	movlb	0	; () banked
  5326  002356  6FE5               	movwf	??___fttol& (0+255),b
  5327  002358  C0E1  F0E6         	movff	___fttol@f1,??___fttol+1
  5328  00235C  C0E2  F0E7         	movff	___fttol@f1+1,??___fttol+2
  5329  002360  C0E3  F0E8         	movff	___fttol@f1+2,??___fttol+3
  5330  002364  0100               	movlb	0	; () banked
  5331  002366  29E5               	incf	??___fttol& (0+255),w,b
  5332  002368  0100               	movlb	0	; () banked
  5333  00236A  6FE9               	movwf	(??___fttol+4)& (0+255),b
  5334  00236C  D005               	goto	u3990
  5335  00236E                     u3995:
  5336  00236E  0100               	movlb	0	; () banked
  5337  002370  90D8               	bcf	status,0,c
  5338  002372  33E8               	rrcf	(??___fttol+3)& (0+255),f,b
  5339  002374  33E7               	rrcf	(??___fttol+2)& (0+255),f,b
  5340  002376  33E6               	rrcf	(??___fttol+1)& (0+255),f,b
  5341  002378                     u3990:
  5342  002378  0100               	movlb	0	; () banked
  5343  00237A  2FE9               	decfsz	(??___fttol+4)& (0+255),f,b
  5344  00237C  D7F8               	goto	u3995
  5345  00237E  0100               	movlb	0	; () banked
  5346  002380  51E6               	movf	(??___fttol+1)& (0+255),w,b
  5347  002382  0100               	movlb	0	; () banked
  5348  002384  6FEA               	movwf	___fttol@sign1& (0+255),b
  5349                           
  5350                           ; BSR set to: 0
  5351  002386  0100               	movlb	0	; () banked
  5352  002388  8FE2               	bsf	(___fttol@f1+1)& (0+255),7,b
  5353                           
  5354                           ; BSR set to: 0
  5355  00238A  0EFF               	movlw	255
  5356  00238C  0100               	movlb	0	; () banked
  5357  00238E  17E1               	andwf	___fttol@f1& (0+255),f,b
  5358  002390  0EFF               	movlw	255
  5359  002392  0100               	movlb	0	; () banked
  5360  002394  17E2               	andwf	(___fttol@f1+1)& (0+255),f,b
  5361  002396  0E00               	movlw	0
  5362  002398  0100               	movlb	0	; () banked
  5363  00239A  17E3               	andwf	(___fttol@f1+2)& (0+255),f,b
  5364                           
  5365                           ; BSR set to: 0
  5366  00239C  0100               	movlb	0	; () banked
  5367  00239E  51E1               	movf	___fttol@f1& (0+255),w,b
  5368  0023A0  0100               	movlb	0	; () banked
  5369  0023A2  6FEB               	movwf	___fttol@lval& (0+255),b
  5370  0023A4  0100               	movlb	0	; () banked
  5371  0023A6  51E2               	movf	(___fttol@f1+1)& (0+255),w,b
  5372  0023A8  0100               	movlb	0	; () banked
  5373  0023AA  6FEC               	movwf	(___fttol@lval+1)& (0+255),b
  5374  0023AC  0100               	movlb	0	; () banked
  5375  0023AE  51E3               	movf	(___fttol@f1+2)& (0+255),w,b
  5376  0023B0  0100               	movlb	0	; () banked
  5377  0023B2  6FED               	movwf	(___fttol@lval+2)& (0+255),b
  5378  0023B4  0100               	movlb	0	; () banked
  5379  0023B6  6BEE               	clrf	(___fttol@lval+3)& (0+255),b
  5380                           
  5381                           ; BSR set to: 0
  5382  0023B8  0E8E               	movlw	142
  5383  0023BA  0100               	movlb	0	; () banked
  5384  0023BC  5FEF               	subwf	___fttol@exp1& (0+255),f,b
  5385                           
  5386                           ; BSR set to: 0
  5387  0023BE  0100               	movlb	0	; () banked
  5388  0023C0  AFEF               	btfss	___fttol@exp1& (0+255),7,b
  5389  0023C2  D01A               	goto	l3913
  5390                           
  5391                           ; BSR set to: 0
  5392  0023C4  0100               	movlb	0	; () banked
  5393  0023C6  51EF               	movf	___fttol@exp1& (0+255),w,b
  5394  0023C8  0A80               	xorlw	128
  5395  0023CA  0F8F               	addlw	143
  5396  0023CC  B0D8               	btfsc	status,0,c
  5397  0023CE  D00A               	goto	l3909
  5398                           
  5399                           ; BSR set to: 0
  5400  0023D0  0E00               	movlw	0
  5401  0023D2  0100               	movlb	0	; () banked
  5402  0023D4  6FE1               	movwf	?___fttol& (0+255),b
  5403  0023D6  0E00               	movlw	0
  5404  0023D8  6FE2               	movwf	(?___fttol+1)& (0+255),b
  5405  0023DA  0E00               	movlw	0
  5406  0023DC  6FE3               	movwf	(?___fttol+2)& (0+255),b
  5407  0023DE  0E00               	movlw	0
  5408  0023E0  6FE4               	movwf	(?___fttol+3)& (0+255),b
  5409                           
  5410                           ; BSR set to: 0
  5411  0023E2  0012               	return	
  5412  0023E4                     l3909:
  5413                           
  5414                           ; BSR set to: 0
  5415  0023E4  0100               	movlb	0	; () banked
  5416  0023E6  90D8               	bcf	status,0,c
  5417  0023E8  33EE               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5418  0023EA  33ED               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5419  0023EC  33EC               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5420  0023EE  33EB               	rrcf	___fttol@lval& (0+255),f,b
  5421                           
  5422                           ; BSR set to: 0
  5423  0023F0  0100               	movlb	0	; () banked
  5424  0023F2  3FEF               	incfsz	___fttol@exp1& (0+255),f,b
  5425  0023F4  D7F7               	goto	l3909
  5426                           
  5427                           ; BSR set to: 0
  5428  0023F6  D01B               	goto	l3923
  5429  0023F8                     l3913:
  5430                           
  5431                           ; BSR set to: 0
  5432  0023F8  0E17               	movlw	23
  5433  0023FA  0100               	movlb	0	; () banked
  5434  0023FC  65EF               	cpfsgt	___fttol@exp1& (0+255),b
  5435  0023FE  D012               	goto	l3921
  5436                           
  5437                           ; BSR set to: 0
  5438  002400  0E00               	movlw	0
  5439  002402  0100               	movlb	0	; () banked
  5440  002404  6FE1               	movwf	?___fttol& (0+255),b
  5441  002406  0E00               	movlw	0
  5442  002408  6FE2               	movwf	(?___fttol+1)& (0+255),b
  5443  00240A  0E00               	movlw	0
  5444  00240C  6FE3               	movwf	(?___fttol+2)& (0+255),b
  5445  00240E  0E00               	movlw	0
  5446  002410  6FE4               	movwf	(?___fttol+3)& (0+255),b
  5447                           
  5448                           ; BSR set to: 0
  5449  002412  0012               	return	
  5450  002414                     l3919:
  5451                           
  5452                           ; BSR set to: 0
  5453  002414  0100               	movlb	0	; () banked
  5454  002416  90D8               	bcf	status,0,c
  5455  002418  37EB               	rlcf	___fttol@lval& (0+255),f,b
  5456  00241A  37EC               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5457  00241C  37ED               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5458  00241E  37EE               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5459  002420  0100               	movlb	0	; () banked
  5460  002422  07EF               	decf	___fttol@exp1& (0+255),f,b
  5461  002424                     l3921:
  5462                           
  5463                           ; BSR set to: 0
  5464  002424  0100               	movlb	0	; () banked
  5465  002426  51EF               	movf	___fttol@exp1& (0+255),w,b
  5466  002428  0100               	movlb	0	; () banked
  5467  00242A  A4D8               	btfss	status,2,c
  5468  00242C  D7F3               	goto	l3919
  5469  00242E                     l3923:
  5470                           
  5471                           ; BSR set to: 0
  5472  00242E  0100               	movlb	0	; () banked
  5473  002430  51EA               	movf	___fttol@sign1& (0+255),w,b
  5474  002432  0100               	movlb	0	; () banked
  5475  002434  B4D8               	btfsc	status,2,c
  5476  002436  D009               	goto	l3927
  5477                           
  5478                           ; BSR set to: 0
  5479  002438  0100               	movlb	0	; () banked
  5480  00243A  1FEE               	comf	(___fttol@lval+3)& (0+255),f,b
  5481  00243C  1FED               	comf	(___fttol@lval+2)& (0+255),f,b
  5482  00243E  1FEC               	comf	(___fttol@lval+1)& (0+255),f,b
  5483  002440  6DEB               	negf	___fttol@lval& (0+255),b
  5484  002442  0E00               	movlw	0
  5485  002444  23EC               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5486  002446  23ED               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5487  002448  23EE               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5488  00244A                     l3927:
  5489                           
  5490                           ; BSR set to: 0
  5491  00244A  C0EB  F0E1         	movff	___fttol@lval,?___fttol
  5492  00244E  C0EC  F0E2         	movff	___fttol@lval+1,?___fttol+1
  5493  002452  C0ED  F0E3         	movff	___fttol@lval+2,?___fttol+2
  5494  002456  C0EE  F0E4         	movff	___fttol@lval+3,?___fttol+3
  5495  00245A  0012               	return	
  5496  00245C                     __end_of___fttol:
  5497                           	opt stack 0
  5498                           tosu	equ	0xFFF
  5499                           tosh	equ	0xFFE
  5500                           tosl	equ	0xFFD
  5501                           pclath	equ	0xFFA
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           prodh	equ	0xFF4
  5507                           prodl	equ	0xFF3
  5508                           intcon	equ	0xFF2
  5509                           postinc0	equ	0xFEE
  5510                           wreg	equ	0xFE8
  5511                           postdec1	equ	0xFE5
  5512                           fsr1l	equ	0xFE1
  5513                           indf2	equ	0xFDF
  5514                           postinc2	equ	0xFDE
  5515                           postdec2	equ	0xFDD
  5516                           plusw2	equ	0xFDB
  5517                           fsr2h	equ	0xFDA
  5518                           fsr2l	equ	0xFD9
  5519                           status	equ	0xFD8
  5520                           
  5521 ;; *************** function _ToSend *****************
  5522 ;; Defined at:
  5523 ;;		line 216 in file "FastTransfer.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  where           1    wreg     unsigned char 
  5526 ;;  what            2   47[BANK0 ] unsigned int 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  where           1   42[COMRAM] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;		None               void
  5531 ;; Registers used:
  5532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5538 ;;      Params:         0       2       0       0       0       0       0
  5539 ;;      Locals:         1       0       0       0       0       0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0
  5541 ;;      Totals:         1       2       0       0       0       0       0
  5542 ;;Total ram usage:        3 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    6
  5545 ;; This function calls:
  5546 ;;		_FastTransfer_buffer_put
  5547 ;; This function is called by:
  5548 ;;		_updateComms
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           	psect	text20
  5553  0039A0                     __ptext20:
  5554                           	opt stack 0
  5555  0039A0                     _ToSend:
  5556                           	opt stack 23
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;incstack = 0
  5560                           ;ToSend@where stored from wreg
  5561  0039A0  6E2B               	movwf	ToSend@where,c
  5562                           
  5563                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  5564  0039A2  0E00               	movlw	low _ring_buffer
  5565  0039A4  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5566  0039A6  0E02               	movlw	high _ring_buffer
  5567  0039A8  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5568  0039AA  C02B  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5569  0039AE  C0F0  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5570  0039B2  C0F1  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5571  0039B6  EC85  F00D         	call	_FastTransfer_buffer_put	;wreg free
  5572  0039BA  0012               	return		;funcret
  5573  0039BC                     __end_of_ToSend:
  5574                           	opt stack 0
  5575                           tosu	equ	0xFFF
  5576                           tosh	equ	0xFFE
  5577                           tosl	equ	0xFFD
  5578                           pclath	equ	0xFFA
  5579                           tblptru	equ	0xFF8
  5580                           tblptrh	equ	0xFF7
  5581                           tblptrl	equ	0xFF6
  5582                           tablat	equ	0xFF5
  5583                           prodh	equ	0xFF4
  5584                           prodl	equ	0xFF3
  5585                           intcon	equ	0xFF2
  5586                           postinc0	equ	0xFEE
  5587                           wreg	equ	0xFE8
  5588                           postdec1	equ	0xFE5
  5589                           fsr1l	equ	0xFE1
  5590                           indf2	equ	0xFDF
  5591                           postinc2	equ	0xFDE
  5592                           postdec2	equ	0xFDD
  5593                           plusw2	equ	0xFDB
  5594                           fsr2h	equ	0xFDA
  5595                           fsr2l	equ	0xFD9
  5596                           status	equ	0xFD8
  5597                           
  5598 ;; *************** function _FastTransfer_buffer_put *****************
  5599 ;; Defined at:
  5600 ;;		line 223 in file "FastTransfer.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5603 ;;		 -> ring_buffer(206), 
  5604 ;;  towhere         1   34[COMRAM] unsigned char 
  5605 ;;  towhat          2   35[COMRAM] unsigned int 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;		None               void
  5610 ;; Registers used:
  5611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5617 ;;      Params:         5       0       0       0       0       0       0
  5618 ;;      Locals:         0       0       0       0       0       0       0
  5619 ;;      Temps:          2       0       0       0       0       0       0
  5620 ;;      Totals:         7       0       0       0       0       0       0
  5621 ;;Total ram usage:        7 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    5
  5624 ;; This function calls:
  5625 ;;		_FastTransfer_buffer_modulo_inc
  5626 ;; This function is called by:
  5627 ;;		_ToSend
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text21
  5632  001B0A                     __ptext21:
  5633                           	opt stack 0
  5634  001B0A                     _FastTransfer_buffer_put:
  5635                           	opt stack 23
  5636                           
  5637                           ;FastTransfer.c: 225: group.integer = towhat;
  5638                           
  5639                           ;incstack = 0
  5640  001B0A  C024  F030         	movff	FastTransfer_buffer_put@towhat,_group
  5641  001B0E  C025  F031         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5642                           
  5643                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  5644  001B12  EE20 F0CC          	lfsr	2,204
  5645  001B16  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5646  001B18  26D9               	addwf	fsr2l,f,c
  5647  001B1A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5648  001B1C  22DA               	addwfc	fsr2h,f,c
  5649  001B1E  0E01               	movlw	1
  5650  001B20  BEDB               	btfsc	plusw2,7,c
  5651  001B22  D007               	goto	l4703
  5652  001B24  0E01               	movlw	1
  5653  001B26  50DB               	movf	plusw2,w,c
  5654  001B28  E103               	bnz	u5071
  5655  001B2A  0EC5               	movlw	197
  5656  001B2C  5CDE               	subwf	postinc2,w,c
  5657  001B2E  B0D8               	btfsc	status,0,c
  5658  001B30                     u5071:
  5659  001B30  0012               	return	
  5660  001B32                     l4703:
  5661                           
  5662                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  5663  001B32  EE20 F0C8          	lfsr	2,200
  5664  001B36  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5665  001B38  26D9               	addwf	fsr2l,f,c
  5666  001B3A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5667  001B3C  22DA               	addwfc	fsr2h,f,c
  5668  001B3E  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5669  001B42  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5670  001B46  5026               	movf	??_FastTransfer_buffer_put,w,c
  5671  001B48  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5672  001B4A  6ED9               	movwf	fsr2l,c
  5673  001B4C  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5674  001B4E  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5675  001B50  6EDA               	movwf	fsr2h,c
  5676  001B52  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5677                           
  5678                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5679  001B56  EE20 F0C8          	lfsr	2,200
  5680  001B5A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5681  001B5C  26D9               	addwf	fsr2l,f,c
  5682  001B5E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5683  001B60  22DA               	addwfc	fsr2h,f,c
  5684  001B62  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5685  001B66  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5686  001B6A  0E00               	movlw	0
  5687  001B6C  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5688  001B6E  0EC8               	movlw	200
  5689  001B70  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5690  001B72  EC31  F01C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5691  001B76  EE20 F0C8          	lfsr	2,200
  5692  001B7A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5693  001B7C  26D9               	addwf	fsr2l,f,c
  5694  001B7E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5695  001B80  22DA               	addwfc	fsr2h,f,c
  5696  001B82  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5697  001B86  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5698                           
  5699                           ;FastTransfer.c: 230: ++_this->count;
  5700  001B8A  EE20 F0CC          	lfsr	2,204
  5701  001B8E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5702  001B90  26D9               	addwf	fsr2l,f,c
  5703  001B92  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5704  001B94  22DA               	addwfc	fsr2h,f,c
  5705  001B96  2ADE               	incf	postinc2,f,c
  5706  001B98  0E00               	movlw	0
  5707  001B9A  22DD               	addwfc	postdec2,f,c
  5708                           
  5709                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  5710  001B9C  EE20 F0C8          	lfsr	2,200
  5711  001BA0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5712  001BA2  26D9               	addwf	fsr2l,f,c
  5713  001BA4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5714  001BA6  22DA               	addwfc	fsr2h,f,c
  5715  001BA8  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5716  001BAC  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5717  001BB0  5026               	movf	??_FastTransfer_buffer_put,w,c
  5718  001BB2  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5719  001BB4  6ED9               	movwf	fsr2l,c
  5720  001BB6  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5721  001BB8  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5722  001BBA  6EDA               	movwf	fsr2h,c
  5723  001BBC  C030  FFDF         	movff	_group,indf2
  5724                           
  5725                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5726  001BC0  EE20 F0C8          	lfsr	2,200
  5727  001BC4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5728  001BC6  26D9               	addwf	fsr2l,f,c
  5729  001BC8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5730  001BCA  22DA               	addwfc	fsr2h,f,c
  5731  001BCC  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5732  001BD0  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5733  001BD4  0E00               	movlw	0
  5734  001BD6  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5735  001BD8  0EC8               	movlw	200
  5736  001BDA  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5737  001BDC  EC31  F01C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5738  001BE0  EE20 F0C8          	lfsr	2,200
  5739  001BE4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5740  001BE6  26D9               	addwf	fsr2l,f,c
  5741  001BE8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5742  001BEA  22DA               	addwfc	fsr2h,f,c
  5743  001BEC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5744  001BF0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5745                           
  5746                           ;FastTransfer.c: 233: ++_this->count;
  5747  001BF4  EE20 F0CC          	lfsr	2,204
  5748  001BF8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5749  001BFA  26D9               	addwf	fsr2l,f,c
  5750  001BFC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5751  001BFE  22DA               	addwfc	fsr2h,f,c
  5752  001C00  2ADE               	incf	postinc2,f,c
  5753  001C02  0E00               	movlw	0
  5754  001C04  22DD               	addwfc	postdec2,f,c
  5755                           
  5756                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  5757  001C06  EE20 F0C8          	lfsr	2,200
  5758  001C0A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5759  001C0C  26D9               	addwf	fsr2l,f,c
  5760  001C0E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5761  001C10  22DA               	addwfc	fsr2h,f,c
  5762  001C12  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5763  001C16  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5764  001C1A  5026               	movf	??_FastTransfer_buffer_put,w,c
  5765  001C1C  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5766  001C1E  6ED9               	movwf	fsr2l,c
  5767  001C20  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5768  001C22  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5769  001C24  6EDA               	movwf	fsr2h,c
  5770  001C26  C031  FFDF         	movff	_group+1,indf2
  5771                           
  5772                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5773  001C2A  EE20 F0C8          	lfsr	2,200
  5774  001C2E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5775  001C30  26D9               	addwf	fsr2l,f,c
  5776  001C32  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5777  001C34  22DA               	addwfc	fsr2h,f,c
  5778  001C36  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5779  001C3A  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5780  001C3E  0E00               	movlw	0
  5781  001C40  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5782  001C42  0EC8               	movlw	200
  5783  001C44  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5784  001C46  EC31  F01C         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5785  001C4A  EE20 F0C8          	lfsr	2,200
  5786  001C4E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5787  001C50  26D9               	addwf	fsr2l,f,c
  5788  001C52  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5789  001C54  22DA               	addwfc	fsr2h,f,c
  5790  001C56  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5791  001C5A  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5792                           
  5793                           ;FastTransfer.c: 236: ++_this->count;
  5794  001C5E  EE20 F0CC          	lfsr	2,204
  5795  001C62  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5796  001C64  26D9               	addwf	fsr2l,f,c
  5797  001C66  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5798  001C68  22DA               	addwfc	fsr2h,f,c
  5799  001C6A  2ADE               	incf	postinc2,f,c
  5800  001C6C  0E00               	movlw	0
  5801  001C6E  22DD               	addwfc	postdec2,f,c
  5802  001C70  0012               	return	
  5803  001C72                     __end_of_FastTransfer_buffer_put:
  5804                           	opt stack 0
  5805                           tosu	equ	0xFFF
  5806                           tosh	equ	0xFFE
  5807                           tosl	equ	0xFFD
  5808                           pclath	equ	0xFFA
  5809                           tblptru	equ	0xFF8
  5810                           tblptrh	equ	0xFF7
  5811                           tblptrl	equ	0xFF6
  5812                           tablat	equ	0xFF5
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           postinc0	equ	0xFEE
  5817                           wreg	equ	0xFE8
  5818                           postdec1	equ	0xFE5
  5819                           fsr1l	equ	0xFE1
  5820                           indf2	equ	0xFDF
  5821                           postinc2	equ	0xFDE
  5822                           postdec2	equ	0xFDD
  5823                           plusw2	equ	0xFDB
  5824                           fsr2h	equ	0xFDA
  5825                           fsr2l	equ	0xFD9
  5826                           status	equ	0xFD8
  5827                           
  5828 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5829 ;; Defined at:
  5830 ;;		line 273 in file "FastTransfer.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;  value           2   26[COMRAM] const unsigned int 
  5833 ;;  modulus         2   28[COMRAM] const unsigned int 
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;  my_value        2   30[COMRAM] unsigned int 
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  2   26[COMRAM] unsigned int 
  5838 ;; Registers used:
  5839 ;;		wreg, status,2, status,0
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5845 ;;      Params:         4       0       0       0       0       0       0
  5846 ;;      Locals:         2       0       0       0       0       0       0
  5847 ;;      Temps:          0       0       0       0       0       0       0
  5848 ;;      Totals:         6       0       0       0       0       0       0
  5849 ;;Total ram usage:        6 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    4
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_FastTransfer_buffer_put
  5856 ;;		_FastTransfer_buffer_get
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           	psect	text22
  5861  003862                     __ptext22:
  5862                           	opt stack 0
  5863  003862                     _FastTransfer_buffer_modulo_inc:
  5864                           	opt stack 23
  5865                           
  5866                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  5867                           
  5868                           ;incstack = 0
  5869  003862  0E01               	movlw	1
  5870  003864  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5871  003866  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5872  003868  0E00               	movlw	0
  5873  00386A  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5874  00386C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5875                           
  5876                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  5877  00386E  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5878  003870  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5879  003872  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5880  003874  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5881  003876  A0D8               	btfss	status,0,c
  5882  003878  D004               	goto	l4471
  5883                           
  5884                           ;FastTransfer.c: 276: my_value = 0;
  5885  00387A  0E00               	movlw	0
  5886  00387C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5887  00387E  0E00               	movlw	0
  5888  003880  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5889  003882                     l4471:
  5890                           
  5891                           ;FastTransfer.c: 277: }
  5892                           ;FastTransfer.c: 278: return (my_value);
  5893  003882  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5894  003886  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5895  00388A  0012               	return	
  5896  00388C                     __end_of_FastTransfer_buffer_modulo_inc:
  5897                           	opt stack 0
  5898                           tosu	equ	0xFFF
  5899                           tosh	equ	0xFFE
  5900                           tosl	equ	0xFFD
  5901                           pclath	equ	0xFFA
  5902                           tblptru	equ	0xFF8
  5903                           tblptrh	equ	0xFF7
  5904                           tblptrl	equ	0xFF6
  5905                           tablat	equ	0xFF5
  5906                           prodh	equ	0xFF4
  5907                           prodl	equ	0xFF3
  5908                           intcon	equ	0xFF2
  5909                           postinc0	equ	0xFEE
  5910                           wreg	equ	0xFE8
  5911                           postdec1	equ	0xFE5
  5912                           fsr1l	equ	0xFE1
  5913                           indf2	equ	0xFDF
  5914                           postinc2	equ	0xFDE
  5915                           postdec2	equ	0xFDD
  5916                           plusw2	equ	0xFDB
  5917                           fsr2h	equ	0xFDA
  5918                           fsr2l	equ	0xFD9
  5919                           status	equ	0xFD8
  5920                           
  5921 ;; *************** function _Tempeture_Get *****************
  5922 ;; Defined at:
  5923 ;;		line 83 in file "Tempeture.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;  channelnum      2   32[COMRAM] int 
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;		None
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  3   32[COMRAM] float 
  5930 ;; Registers used:
  5931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5937 ;;      Params:         3       0       0       0       0       0       0
  5938 ;;      Locals:         0       0       0       0       0       0       0
  5939 ;;      Temps:          0       0       0       0       0       0       0
  5940 ;;      Totals:         3       0       0       0       0       0       0
  5941 ;;Total ram usage:        3 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    5
  5944 ;; This function calls:
  5945 ;;		___wmul
  5946 ;; This function is called by:
  5947 ;;		_updateComms
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           	psect	text23
  5952  0037B0                     __ptext23:
  5953                           	opt stack 0
  5954  0037B0                     _Tempeture_Get:
  5955                           	opt stack 24
  5956                           
  5957                           ;Tempeture.c: 84: return Temp_DegF[channelnum];
  5958                           
  5959                           ;incstack = 0
  5960  0037B0  C021  F01B         	movff	Tempeture_Get@channelnum,___wmul@multiplier
  5961  0037B4  C022  F01C         	movff	Tempeture_Get@channelnum+1,___wmul@multiplier+1
  5962  0037B8  0E00               	movlw	0
  5963  0037BA  6E1E               	movwf	___wmul@multiplicand+1,c
  5964  0037BC  0E03               	movlw	3
  5965  0037BE  6E1D               	movwf	___wmul@multiplicand,c
  5966  0037C0  EC5B  F01C         	call	___wmul	;wreg free
  5967  0037C4  0EF4               	movlw	low _Temp_DegF
  5968  0037C6  241B               	addwf	?___wmul,w,c
  5969  0037C8  6ED9               	movwf	fsr2l,c
  5970  0037CA  0E00               	movlw	high _Temp_DegF
  5971  0037CC  201C               	addwfc	?___wmul+1,w,c
  5972  0037CE  6EDA               	movwf	fsr2h,c
  5973  0037D0  CFDE F021          	movff	postinc2,?_Tempeture_Get
  5974  0037D4  CFDE F022          	movff	postinc2,?_Tempeture_Get+1
  5975  0037D8  CFDD F023          	movff	postdec2,?_Tempeture_Get+2
  5976  0037DC  0012               	return	
  5977  0037DE                     __end_of_Tempeture_Get:
  5978                           	opt stack 0
  5979                           tosu	equ	0xFFF
  5980                           tosh	equ	0xFFE
  5981                           tosl	equ	0xFFD
  5982                           pclath	equ	0xFFA
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           postinc0	equ	0xFEE
  5991                           wreg	equ	0xFE8
  5992                           postdec1	equ	0xFE5
  5993                           fsr1l	equ	0xFE1
  5994                           indf2	equ	0xFDF
  5995                           postinc2	equ	0xFDE
  5996                           postdec2	equ	0xFDD
  5997                           plusw2	equ	0xFDB
  5998                           fsr2h	equ	0xFDA
  5999                           fsr2l	equ	0xFD9
  6000                           status	equ	0xFD8
  6001                           
  6002 ;; *************** function _Delay *****************
  6003 ;; Defined at:
  6004 ;;		line 37 in file "Functions.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;  d_lenth         4   26[COMRAM] long 
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;  wait            4   31[COMRAM] long 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;		None               void
  6011 ;; Registers used:
  6012 ;;		wreg, status,2, status,0
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6018 ;;      Params:         4       0       0       0       0       0       0
  6019 ;;      Locals:         4       0       0       0       0       0       0
  6020 ;;      Temps:          1       0       0       0       0       0       0
  6021 ;;      Totals:         9       0       0       0       0       0       0
  6022 ;;Total ram usage:        9 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    4
  6025 ;; This function calls:
  6026 ;;		Nothing
  6027 ;; This function is called by:
  6028 ;;		_updateComms
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           	psect	text24
  6033  0035C4                     __ptext24:
  6034                           	opt stack 0
  6035  0035C4                     _Delay:
  6036                           	opt stack 25
  6037                           
  6038                           ;Functions.c: 39: long int wait = 0;
  6039                           
  6040                           ;incstack = 0
  6041  0035C4  0E00               	movlw	0
  6042  0035C6  6E20               	movwf	Delay@wait,c
  6043  0035C8  0E00               	movlw	0
  6044  0035CA  6E21               	movwf	Delay@wait+1,c
  6045  0035CC  0E00               	movlw	0
  6046  0035CE  6E22               	movwf	Delay@wait+2,c
  6047  0035D0  0E00               	movlw	0
  6048  0035D2  6E23               	movwf	Delay@wait+3,c
  6049  0035D4  D00D               	goto	l3571
  6050  0035D6                     l3567:
  6051                           
  6052                           ;Functions.c: 41: {
  6053                           ;Functions.c: 42: _delay((unsigned long)((1)*(8000000/4000.0)));
  6054  0035D6  0E03               	movlw	3
  6055  0035D8  6E1F               	movwf	??_Delay& (0+255),c
  6056  0035DA  0E98               	movlw	152
  6057  0035DC                     u6277:
  6058  0035DC  2EE8               	decfsz	wreg,f,c
  6059  0035DE  D7FE               	goto	u6277
  6060  0035E0  2E1F               	decfsz	??_Delay& (0+255),f,c
  6061  0035E2  D7FC               	goto	u6277
  6062  0035E4  0E01               	movlw	1
  6063  0035E6  2620               	addwf	Delay@wait,f,c
  6064  0035E8  0E00               	movlw	0
  6065  0035EA  2221               	addwfc	Delay@wait+1,f,c
  6066  0035EC  2222               	addwfc	Delay@wait+2,f,c
  6067  0035EE  2223               	addwfc	Delay@wait+3,f,c
  6068  0035F0                     l3571:
  6069  0035F0  501B               	movf	Delay@d_lenth,w,c
  6070  0035F2  5C20               	subwf	Delay@wait,w,c
  6071  0035F4  501C               	movf	Delay@d_lenth+1,w,c
  6072  0035F6  5821               	subwfb	Delay@wait+1,w,c
  6073  0035F8  501D               	movf	Delay@d_lenth+2,w,c
  6074  0035FA  5822               	subwfb	Delay@wait+2,w,c
  6075  0035FC  5023               	movf	Delay@wait+3,w,c
  6076  0035FE  0A80               	xorlw	128
  6077  003600  6E1F               	movwf	??_Delay& (0+255),c
  6078  003602  501E               	movf	Delay@d_lenth+3,w,c
  6079  003604  0A80               	xorlw	128
  6080  003606  581F               	subwfb	??_Delay& (0+255),w,c
  6081  003608  B0D8               	btfsc	status,0,c
  6082  00360A  0012               	return	
  6083  00360C  D7E4               	goto	l3567
  6084  00360E                     __end_of_Delay:
  6085                           	opt stack 0
  6086                           tosu	equ	0xFFF
  6087                           tosh	equ	0xFFE
  6088                           tosl	equ	0xFFD
  6089                           pclath	equ	0xFFA
  6090                           tblptru	equ	0xFF8
  6091                           tblptrh	equ	0xFF7
  6092                           tblptrl	equ	0xFF6
  6093                           tablat	equ	0xFF5
  6094                           prodh	equ	0xFF4
  6095                           prodl	equ	0xFF3
  6096                           intcon	equ	0xFF2
  6097                           postinc0	equ	0xFEE
  6098                           wreg	equ	0xFE8
  6099                           postdec1	equ	0xFE5
  6100                           fsr1l	equ	0xFE1
  6101                           indf2	equ	0xFDF
  6102                           postinc2	equ	0xFDE
  6103                           postdec2	equ	0xFDD
  6104                           plusw2	equ	0xFDB
  6105                           fsr2h	equ	0xFDA
  6106                           fsr2l	equ	0xFD9
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function _Temp_Fault *****************
  6110 ;; Defined at:
  6111 ;;		line 17 in file "Tempeture.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;		None
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  i               2    1[BANK0 ] int 
  6116 ;;  fault           1    0[BANK0 ] unsigned char 
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      unsigned char 
  6119 ;; Registers used:
  6120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6126 ;;      Params:         0       0       0       0       0       0       0
  6127 ;;      Locals:         0       3       0       0       0       0       0
  6128 ;;      Temps:          0       0       0       0       0       0       0
  6129 ;;      Totals:         0       3       0       0       0       0       0
  6130 ;;Total ram usage:        3 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    5
  6133 ;; This function calls:
  6134 ;;		___ftge
  6135 ;;		___wmul
  6136 ;; This function is called by:
  6137 ;;		_main
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           	psect	text25
  6142  00333A                     __ptext25:
  6143                           	opt stack 0
  6144  00333A                     _Temp_Fault:
  6145                           	opt stack 25
  6146                           
  6147                           ;Tempeture.c: 19: char fault = 0;
  6148                           
  6149                           ;incstack = 0
  6150  00333A  0E00               	movlw	0
  6151  00333C  0100               	movlb	0	; () banked
  6152  00333E  6FC1               	movwf	Temp_Fault@fault& (0+255),b
  6153                           
  6154                           ;Tempeture.c: 20: for (int i = 0; i < 4; i++) {
  6155  003340  0E00               	movlw	0
  6156  003342  0100               	movlb	0	; () banked
  6157  003344  6FC3               	movwf	(Temp_Fault@i+1)& (0+255),b
  6158  003346  0E00               	movlw	0
  6159  003348  6FC2               	movwf	Temp_Fault@i& (0+255),b
  6160  00334A                     l5247:
  6161                           
  6162                           ; BSR set to: 0
  6163  00334A  0100               	movlb	0	; () banked
  6164  00334C  BFC3               	btfsc	(Temp_Fault@i+1)& (0+255),7,b
  6165  00334E  D008               	goto	l5251
  6166  003350  0100               	movlb	0	; () banked
  6167  003352  51C3               	movf	(Temp_Fault@i+1)& (0+255),w,b
  6168  003354  E12C               	bnz	l341
  6169  003356  0E04               	movlw	4
  6170  003358  0100               	movlb	0	; () banked
  6171  00335A  5DC2               	subwf	Temp_Fault@i& (0+255),w,b
  6172  00335C  B0D8               	btfsc	status,0,c
  6173  00335E  0012               	return	
  6174  003360                     l5251:
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;Tempeture.c: 21: if (60.5 > Temp_DegF[i]) {
  6178  003360  C0C2  F01B         	movff	Temp_Fault@i,___wmul@multiplier
  6179  003364  C0C3  F01C         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  6180  003368  0E00               	movlw	0
  6181  00336A  6E1E               	movwf	___wmul@multiplicand+1,c
  6182  00336C  0E03               	movlw	3
  6183  00336E  6E1D               	movwf	___wmul@multiplicand,c
  6184  003370  EC5B  F01C         	call	___wmul	;wreg free
  6185  003374  0EF4               	movlw	low _Temp_DegF
  6186  003376  241B               	addwf	?___wmul,w,c
  6187  003378  6ED9               	movwf	fsr2l,c
  6188  00337A  0E00               	movlw	high _Temp_DegF
  6189  00337C  201C               	addwfc	?___wmul+1,w,c
  6190  00337E  6EDA               	movwf	fsr2h,c
  6191  003380  CFDE F021          	movff	postinc2,___ftge@ff1
  6192  003384  CFDE F022          	movff	postinc2,___ftge@ff1+1
  6193  003388  CFDD F023          	movff	postdec2,___ftge@ff1+2
  6194  00338C  0E00               	movlw	0
  6195  00338E  6E24               	movwf	___ftge@ff2,c
  6196  003390  0E72               	movlw	114
  6197  003392  6E25               	movwf	___ftge@ff2+1,c
  6198  003394  0E42               	movlw	66
  6199  003396  6E26               	movwf	___ftge@ff2+2,c
  6200  003398  ECD3  F018         	call	___ftge	;wreg free
  6201  00339C  B0D8               	btfsc	status,0,c
  6202  00339E  D003               	goto	l5255
  6203                           
  6204                           ;Tempeture.c: 22: fault = 1;
  6205  0033A0  0E01               	movlw	1
  6206  0033A2  0100               	movlb	0	; () banked
  6207  0033A4  6FC1               	movwf	Temp_Fault@fault& (0+255),b
  6208  0033A6                     l5255:
  6209  0033A6  0100               	movlb	0	; () banked
  6210  0033A8  4BC2               	infsnz	Temp_Fault@i& (0+255),f,b
  6211  0033AA  2BC3               	incf	(Temp_Fault@i+1)& (0+255),f,b
  6212  0033AC  D7CE               	goto	l5247
  6213  0033AE                     l341:
  6214                           
  6215                           ; BSR set to: 0
  6216  0033AE  0012               	return		;funcret
  6217  0033B0                     __end_of_Temp_Fault:
  6218                           	opt stack 0
  6219                           tosu	equ	0xFFF
  6220                           tosh	equ	0xFFE
  6221                           tosl	equ	0xFFD
  6222                           pclath	equ	0xFFA
  6223                           tblptru	equ	0xFF8
  6224                           tblptrh	equ	0xFF7
  6225                           tblptrl	equ	0xFF6
  6226                           tablat	equ	0xFF5
  6227                           prodh	equ	0xFF4
  6228                           prodl	equ	0xFF3
  6229                           intcon	equ	0xFF2
  6230                           postinc0	equ	0xFEE
  6231                           wreg	equ	0xFE8
  6232                           postdec1	equ	0xFE5
  6233                           fsr1l	equ	0xFE1
  6234                           indf2	equ	0xFDF
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           plusw2	equ	0xFDB
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _Temp_Convert *****************
  6243 ;; Defined at:
  6244 ;;		line 62 in file "Tempeture.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;		None
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  steinhart       3   16[BANK1 ] float 
  6249 ;;  x               2   14[BANK1 ] int 
  6250 ;; Return value:  Size  Location     Type
  6251 ;;		None               void
  6252 ;; Registers used:
  6253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6259 ;;      Params:         0       0       0       0       0       0       0
  6260 ;;      Locals:         0       0       9       0       0       0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0
  6262 ;;      Totals:         0       0       9       0       0       0       0
  6263 ;;Total ram usage:        9 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    8
  6266 ;; This function calls:
  6267 ;;		_Temp_Filter
  6268 ;;		___awdiv
  6269 ;;		___awtoft
  6270 ;;		___ftadd
  6271 ;;		___ftdiv
  6272 ;;		___ftmul
  6273 ;;		___ftsub
  6274 ;;		___wmul
  6275 ;;		_log
  6276 ;; This function is called by:
  6277 ;;		_main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text26
  6282  001792                     __ptext26:
  6283                           	opt stack 0
  6284  001792                     _Temp_Convert:
  6285                           	opt stack 22
  6286                           
  6287                           ;Tempeture.c: 63: int x;
  6288                           ;Tempeture.c: 64: float steinhart;
  6289                           ;Tempeture.c: 65: for (x = 0; x < 4; x++) {
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;incstack = 0
  6293  001792  0E00               	movlw	0
  6294  001794  0101               	movlb	1	; () banked
  6295  001796  6F9D               	movwf	(Temp_Convert@x+1)& (0+255),b
  6296  001798  0E00               	movlw	0
  6297  00179A  6F9C               	movwf	Temp_Convert@x& (0+255),b
  6298                           
  6299                           ; BSR set to: 1
  6300  00179C  0101               	movlb	1	; () banked
  6301  00179E  BF9D               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6302  0017A0  D00A               	goto	l5265
  6303  0017A2  0101               	movlb	1	; () banked
  6304  0017A4  519D               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6305  0017A6  E106               	bnz	u6140
  6306  0017A8  0E04               	movlw	4
  6307  0017AA  0101               	movlb	1	; () banked
  6308  0017AC  5D9C               	subwf	Temp_Convert@x& (0+255),w,b
  6309  0017AE  B0D8               	btfsc	status,0,c
  6310  0017B0  D0F4               	goto	l5289
  6311  0017B2  D001               	goto	l5265
  6312  0017B4                     u6140:
  6313                           
  6314                           ; BSR set to: 1
  6315  0017B4  D0F2               	goto	l5289
  6316  0017B6                     l5265:
  6317                           
  6318                           ; BSR set to: 1
  6319                           ;Tempeture.c: 66: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6320  0017B6  90D8               	bcf	status,0,c
  6321  0017B8  0101               	movlb	1	; () banked
  6322  0017BA  359C               	rlcf	Temp_Convert@x& (0+255),w,b
  6323  0017BC  6ED9               	movwf	fsr2l,c
  6324  0017BE  0101               	movlb	1	; () banked
  6325  0017C0  359D               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  6326  0017C2  6EDA               	movwf	fsr2h,c
  6327  0017C4  0EB9               	movlw	low _Temp_Adc
  6328  0017C6  26D9               	addwf	fsr2l,f,c
  6329  0017C8  0E00               	movlw	high _Temp_Adc
  6330  0017CA  22DA               	addwfc	fsr2h,f,c
  6331  0017CC  CFDE F01D          	movff	postinc2,___awdiv@divisor
  6332  0017D0  CFDD F01E          	movff	postdec2,___awdiv@divisor+1
  6333  0017D4  0E03               	movlw	3
  6334  0017D6  6E1C               	movwf	___awdiv@dividend+1,c
  6335  0017D8  681B               	setf	___awdiv@dividend,c
  6336  0017DA  EC1B  F019         	call	___awdiv	;wreg free
  6337  0017DE  0EFF               	movlw	255
  6338  0017E0  241B               	addwf	?___awdiv,w,c
  6339  0017E2  0101               	movlb	1	; () banked
  6340  0017E4  6F98               	movwf	_Temp_Convert$2240& (0+255),b
  6341  0017E6  0EFF               	movlw	255
  6342  0017E8  201C               	addwfc	?___awdiv+1,w,c
  6343  0017EA  0101               	movlb	1	; () banked
  6344  0017EC  6F99               	movwf	(_Temp_Convert$2240+1)& (0+255),b
  6345                           
  6346                           ; BSR set to: 1
  6347                           ;Tempeture.c: 66: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6348  0017EE  C198  F01D         	movff	_Temp_Convert$2240,___awdiv@divisor
  6349  0017F2  C199  F01E         	movff	_Temp_Convert$2240+1,___awdiv@divisor+1
  6350  0017F6  0E27               	movlw	39
  6351  0017F8  6E1C               	movwf	___awdiv@dividend+1,c
  6352  0017FA  0E10               	movlw	16
  6353  0017FC  6E1B               	movwf	___awdiv@dividend,c
  6354  0017FE  EC1B  F019         	call	___awdiv	;wreg free
  6355  001802  C01B  F19A         	movff	?___awdiv,_Temp_Convert$2241
  6356  001806  C01C  F19B         	movff	?___awdiv+1,_Temp_Convert$2241+1
  6357                           
  6358                           ;Tempeture.c: 66: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6359  00180A  0E27               	movlw	39
  6360  00180C  6E1E               	movwf	___awdiv@divisor+1,c
  6361  00180E  0E10               	movlw	16
  6362  001810  6E1D               	movwf	___awdiv@divisor,c
  6363  001812  C19A  F01B         	movff	_Temp_Convert$2241,___awdiv@dividend
  6364  001816  C19B  F01C         	movff	_Temp_Convert$2241+1,___awdiv@dividend+1
  6365  00181A  EC1B  F019         	call	___awdiv	;wreg free
  6366  00181E  C01B  F023         	movff	?___awdiv,___awtoft@c
  6367  001822  C01C  F024         	movff	?___awdiv+1,___awtoft@c+1
  6368  001826  EC8C  F01B         	call	___awtoft	;wreg free
  6369  00182A  C023  F19E         	movff	?___awtoft,Temp_Convert@steinhart
  6370  00182E  C024  F19F         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  6371  001832  C025  F1A0         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  6372                           
  6373                           ;Tempeture.c: 67: steinhart = log(steinhart);
  6374  001836  C19E  F193         	movff	Temp_Convert@steinhart,log@x
  6375  00183A  C19F  F194         	movff	Temp_Convert@steinhart+1,log@x+1
  6376  00183E  C1A0  F195         	movff	Temp_Convert@steinhart+2,log@x+2
  6377  001842  EC40  F010         	call	_log	;wreg free
  6378  001846  C193  F19E         	movff	?_log,Temp_Convert@steinhart
  6379  00184A  C194  F19F         	movff	?_log+1,Temp_Convert@steinhart+1
  6380  00184E  C195  F1A0         	movff	?_log+2,Temp_Convert@steinhart+2
  6381                           
  6382                           ;Tempeture.c: 68: steinhart /= 3950;
  6383  001852  C19E  F0C3         	movff	Temp_Convert@steinhart,___ftdiv@f1
  6384  001856  C19F  F0C4         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  6385  00185A  C1A0  F0C5         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  6386  00185E  0EE0               	movlw	224
  6387  001860  0100               	movlb	0	; () banked
  6388  001862  6FC6               	movwf	___ftdiv@f2& (0+255),b
  6389  001864  0E76               	movlw	118
  6390  001866  0100               	movlb	0	; () banked
  6391  001868  6FC7               	movwf	(___ftdiv@f2+1)& (0+255),b
  6392  00186A  0E45               	movlw	69
  6393  00186C  0100               	movlb	0	; () banked
  6394  00186E  6FC8               	movwf	(___ftdiv@f2+2)& (0+255),b
  6395  001870  ECE6  F010         	call	___ftdiv	;wreg free
  6396  001874  C0C3  F19E         	movff	?___ftdiv,Temp_Convert@steinhart
  6397  001878  C0C4  F19F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6398  00187C  C0C5  F1A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6399                           
  6400                           ;Tempeture.c: 69: steinhart += 1.0 / (25 + 273.15);
  6401  001880  C19E  F0E1         	movff	Temp_Convert@steinhart,___ftadd@f1
  6402  001884  C19F  F0E2         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  6403  001888  C1A0  F0E3         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  6404  00188C  0ECF               	movlw	207
  6405  00188E  0100               	movlb	0	; () banked
  6406  001890  6FE4               	movwf	___ftadd@f2& (0+255),b
  6407  001892  0E5B               	movlw	91
  6408  001894  0100               	movlb	0	; () banked
  6409  001896  6FE5               	movwf	(___ftadd@f2+1)& (0+255),b
  6410  001898  0E3B               	movlw	59
  6411  00189A  0100               	movlb	0	; () banked
  6412  00189C  6FE6               	movwf	(___ftadd@f2+2)& (0+255),b
  6413  00189E  EC95  F00A         	call	___ftadd	;wreg free
  6414  0018A2  C0E1  F19E         	movff	?___ftadd,Temp_Convert@steinhart
  6415  0018A6  C0E2  F19F         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6416  0018AA  C0E3  F1A0         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6417                           
  6418                           ;Tempeture.c: 70: steinhart = 1.0 / steinhart;
  6419  0018AE  0E00               	movlw	0
  6420  0018B0  0100               	movlb	0	; () banked
  6421  0018B2  6FC3               	movwf	___ftdiv@f1& (0+255),b
  6422  0018B4  0E80               	movlw	128
  6423  0018B6  0100               	movlb	0	; () banked
  6424  0018B8  6FC4               	movwf	(___ftdiv@f1+1)& (0+255),b
  6425  0018BA  0E3F               	movlw	63
  6426  0018BC  0100               	movlb	0	; () banked
  6427  0018BE  6FC5               	movwf	(___ftdiv@f1+2)& (0+255),b
  6428  0018C0  C19E  F0C6         	movff	Temp_Convert@steinhart,___ftdiv@f2
  6429  0018C4  C19F  F0C7         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  6430  0018C8  C1A0  F0C8         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  6431  0018CC  ECE6  F010         	call	___ftdiv	;wreg free
  6432  0018D0  C0C3  F19E         	movff	?___ftdiv,Temp_Convert@steinhart
  6433  0018D4  C0C4  F19F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6434  0018D8  C0C5  F1A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6435                           
  6436                           ;Tempeture.c: 71: steinhart -= 273.15;
  6437  0018DC  C19E  F0ED         	movff	Temp_Convert@steinhart,___ftsub@f1
  6438  0018E0  C19F  F0EE         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  6439  0018E4  C1A0  F0EF         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  6440  0018E8  0E93               	movlw	147
  6441  0018EA  0100               	movlb	0	; () banked
  6442  0018EC  6FF0               	movwf	___ftsub@f2& (0+255),b
  6443  0018EE  0E88               	movlw	136
  6444  0018F0  0100               	movlb	0	; () banked
  6445  0018F2  6FF1               	movwf	(___ftsub@f2+1)& (0+255),b
  6446  0018F4  0E43               	movlw	67
  6447  0018F6  0100               	movlb	0	; () banked
  6448  0018F8  6FF2               	movwf	(___ftsub@f2+2)& (0+255),b
  6449  0018FA  EC97  F01A         	call	___ftsub	;wreg free
  6450  0018FE  C0ED  F19E         	movff	?___ftsub,Temp_Convert@steinhart
  6451  001902  C0EE  F19F         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  6452  001906  C0EF  F1A0         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  6453                           
  6454                           ;Tempeture.c: 72: steinhart = (steinhart * 1.800) + 32.00;
  6455  00190A  0E66               	movlw	102
  6456  00190C  0100               	movlb	0	; () banked
  6457  00190E  6FD5               	movwf	___ftmul@f2& (0+255),b
  6458  001910  0EE6               	movlw	230
  6459  001912  0100               	movlb	0	; () banked
  6460  001914  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  6461  001916  0E3F               	movlw	63
  6462  001918  0100               	movlb	0	; () banked
  6463  00191A  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  6464  00191C  C19E  F0D2         	movff	Temp_Convert@steinhart,___ftmul@f1
  6465  001920  C19F  F0D3         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  6466  001924  C1A0  F0D4         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  6467  001928  ECE8  F00E         	call	___ftmul	;wreg free
  6468  00192C  C0D2  F0E1         	movff	?___ftmul,___ftadd@f1
  6469  001930  C0D3  F0E2         	movff	?___ftmul+1,___ftadd@f1+1
  6470  001934  C0D4  F0E3         	movff	?___ftmul+2,___ftadd@f1+2
  6471  001938  0E00               	movlw	0
  6472  00193A  0100               	movlb	0	; () banked
  6473  00193C  6FE4               	movwf	___ftadd@f2& (0+255),b
  6474  00193E  0E00               	movlw	0
  6475  001940  0100               	movlb	0	; () banked
  6476  001942  6FE5               	movwf	(___ftadd@f2+1)& (0+255),b
  6477  001944  0E42               	movlw	66
  6478  001946  0100               	movlb	0	; () banked
  6479  001948  6FE6               	movwf	(___ftadd@f2+2)& (0+255),b
  6480  00194A  EC95  F00A         	call	___ftadd	;wreg free
  6481  00194E  C0E1  F19E         	movff	?___ftadd,Temp_Convert@steinhart
  6482  001952  C0E2  F19F         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6483  001956  C0E3  F1A0         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6484                           
  6485                           ;Tempeture.c: 73: TmpTemp_DegF[x] = steinhart;
  6486  00195A  C19C  F01B         	movff	Temp_Convert@x,___wmul@multiplier
  6487  00195E  C19D  F01C         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6488  001962  0E00               	movlw	0
  6489  001964  6E1E               	movwf	___wmul@multiplicand+1,c
  6490  001966  0E03               	movlw	3
  6491  001968  6E1D               	movwf	___wmul@multiplicand,c
  6492  00196A  EC5B  F01C         	call	___wmul	;wreg free
  6493  00196E  0EAD               	movlw	low _TmpTemp_DegF
  6494  001970  241B               	addwf	?___wmul,w,c
  6495  001972  6ED9               	movwf	fsr2l,c
  6496  001974  0E00               	movlw	high _TmpTemp_DegF
  6497  001976  201C               	addwfc	?___wmul+1,w,c
  6498  001978  6EDA               	movwf	fsr2h,c
  6499  00197A  C19E  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6500  00197E  C19F  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6501  001982  C1A0  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  6502  001986  0101               	movlb	1	; () banked
  6503  001988  4B9C               	infsnz	Temp_Convert@x& (0+255),f,b
  6504  00198A  2B9D               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6505                           
  6506                           ; BSR set to: 1
  6507  00198C  0101               	movlb	1	; () banked
  6508  00198E  BF9D               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6509  001990  D712               	goto	l5265
  6510  001992  0101               	movlb	1	; () banked
  6511  001994  519D               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6512  001996  E101               	bnz	l5289
  6513  001998  D707               	goto	L1
  6514  00199A                     l5289:
  6515                           
  6516                           ; BSR set to: 1
  6517                           ;Tempeture.c: 74: }
  6518                           ;Tempeture.c: 75: Temp_Filter();
  6519  00199A  ECD0  F00C         	call	_Temp_Filter	;wreg free
  6520  00199E  0012               	return		;funcret
  6521  0019A0                     __end_of_Temp_Convert:
  6522                           	opt stack 0
  6523                           tosu	equ	0xFFF
  6524                           tosh	equ	0xFFE
  6525                           tosl	equ	0xFFD
  6526                           pclath	equ	0xFFA
  6527                           tblptru	equ	0xFF8
  6528                           tblptrh	equ	0xFF7
  6529                           tblptrl	equ	0xFF6
  6530                           tablat	equ	0xFF5
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           intcon	equ	0xFF2
  6534                           postinc0	equ	0xFEE
  6535                           wreg	equ	0xFE8
  6536                           postdec1	equ	0xFE5
  6537                           fsr1l	equ	0xFE1
  6538                           indf2	equ	0xFDF
  6539                           postinc2	equ	0xFDE
  6540                           postdec2	equ	0xFDD
  6541                           plusw2	equ	0xFDB
  6542                           fsr2h	equ	0xFDA
  6543                           fsr2l	equ	0xFD9
  6544                           status	equ	0xFD8
  6545                           
  6546 ;; *************** function _log *****************
  6547 ;; Defined at:
  6548 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\log.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;  x               3    5[BANK1 ] int 
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;  exponent        2    8[BANK1 ] int 
  6553 ;; Return value:  Size  Location     Type
  6554 ;;                  3    5[BANK1 ] int 
  6555 ;; Registers used:
  6556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6562 ;;      Params:         0       0       3       0       0       0       0
  6563 ;;      Locals:         0       0       2       0       0       0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0
  6565 ;;      Totals:         0       0       5       0       0       0       0
  6566 ;;Total ram usage:        5 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    7
  6569 ;; This function calls:
  6570 ;;		___awtoft
  6571 ;;		___ftadd
  6572 ;;		___ftmul
  6573 ;;		_eval_poly
  6574 ;;		_frexp
  6575 ;; This function is called by:
  6576 ;;		_Temp_Convert
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           	psect	text27
  6581  002080                     __ptext27:
  6582                           	opt stack 0
  6583  002080                     _log:
  6584                           	opt stack 22
  6585                           
  6586                           ;incstack = 0
  6587  002080  0101               	movlb	1	; () banked
  6588  002082  AF95               	btfss	(log@x+2)& (0+255),7,b
  6589  002084  D00F               	goto	l4871
  6590                           
  6591                           ; BSR set to: 1
  6592  002086  0E00               	movlw	0
  6593  002088  0100               	movlb	0	; () banked
  6594  00208A  6F95               	movwf	(_errno+1)& (0+255),b
  6595  00208C  0E21               	movlw	33
  6596  00208E  6F94               	movwf	_errno& (0+255),b
  6597  002090  0E00               	movlw	0
  6598  002092  0101               	movlb	1	; () banked
  6599  002094  6F93               	movwf	?_log& (0+255),b
  6600  002096  0E00               	movlw	0
  6601  002098  0101               	movlb	1	; () banked
  6602  00209A  6F94               	movwf	(?_log+1)& (0+255),b
  6603  00209C  0E00               	movlw	0
  6604  00209E  0101               	movlb	1	; () banked
  6605  0020A0  6F95               	movwf	(?_log+2)& (0+255),b
  6606                           
  6607                           ; BSR set to: 1
  6608  0020A2  0012               	return	
  6609  0020A4                     l4871:
  6610                           
  6611                           ; BSR set to: 1
  6612  0020A4  0101               	movlb	1	; () banked
  6613  0020A6  5193               	movf	log@x& (0+255),w,b
  6614  0020A8  0101               	movlb	1	; () banked
  6615  0020AA  1194               	iorwf	(log@x+1)& (0+255),w,b
  6616  0020AC  0101               	movlb	1	; () banked
  6617  0020AE  1195               	iorwf	(log@x+2)& (0+255),w,b
  6618  0020B0  A4D8               	btfss	status,2,c
  6619  0020B2  D00F               	goto	l4877
  6620                           
  6621                           ; BSR set to: 1
  6622  0020B4  0E00               	movlw	0
  6623  0020B6  0100               	movlb	0	; () banked
  6624  0020B8  6F95               	movwf	(_errno+1)& (0+255),b
  6625  0020BA  0E22               	movlw	34
  6626  0020BC  6F94               	movwf	_errno& (0+255),b
  6627  0020BE  0E00               	movlw	0
  6628  0020C0  0101               	movlb	1	; () banked
  6629  0020C2  6F93               	movwf	?_log& (0+255),b
  6630  0020C4  0E00               	movlw	0
  6631  0020C6  0101               	movlb	1	; () banked
  6632  0020C8  6F94               	movwf	(?_log+1)& (0+255),b
  6633  0020CA  0E00               	movlw	0
  6634  0020CC  0101               	movlb	1	; () banked
  6635  0020CE  6F95               	movwf	(?_log+2)& (0+255),b
  6636                           
  6637                           ; BSR set to: 1
  6638  0020D0  0012               	return	
  6639  0020D2                     l4877:
  6640                           
  6641                           ; BSR set to: 1
  6642  0020D2  0E00               	movlw	0
  6643  0020D4  0100               	movlb	0	; () banked
  6644  0020D6  6FD5               	movwf	___ftmul@f2& (0+255),b
  6645  0020D8  0E00               	movlw	0
  6646  0020DA  0100               	movlb	0	; () banked
  6647  0020DC  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  6648  0020DE  0E40               	movlw	64
  6649  0020E0  0100               	movlb	0	; () banked
  6650  0020E2  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  6651  0020E4  0E96               	movlw	low log@exponent
  6652  0020E6  6E1E               	movwf	frexp@eptr,c
  6653  0020E8  0E01               	movlw	high log@exponent
  6654  0020EA  6E1F               	movwf	frexp@eptr+1,c
  6655  0020EC  C193  F01B         	movff	log@x,frexp@value
  6656  0020F0  C194  F01C         	movff	log@x+1,frexp@value+1
  6657  0020F4  C195  F01D         	movff	log@x+2,frexp@value+2
  6658  0020F8  EC8B  F018         	call	_frexp	;wreg free
  6659  0020FC  C01B  F0D2         	movff	?_frexp,___ftmul@f1
  6660  002100  C01C  F0D3         	movff	?_frexp+1,___ftmul@f1+1
  6661  002104  C01D  F0D4         	movff	?_frexp+2,___ftmul@f1+2
  6662  002108  ECE8  F00E         	call	___ftmul	;wreg free
  6663  00210C  C0D2  F0E1         	movff	?___ftmul,___ftadd@f1
  6664  002110  C0D3  F0E2         	movff	?___ftmul+1,___ftadd@f1+1
  6665  002114  C0D4  F0E3         	movff	?___ftmul+2,___ftadd@f1+2
  6666  002118  0E00               	movlw	0
  6667  00211A  0100               	movlb	0	; () banked
  6668  00211C  6FE4               	movwf	___ftadd@f2& (0+255),b
  6669  00211E  0E80               	movlw	128
  6670  002120  0100               	movlb	0	; () banked
  6671  002122  6FE5               	movwf	(___ftadd@f2+1)& (0+255),b
  6672  002124  0EBF               	movlw	191
  6673  002126  0100               	movlb	0	; () banked
  6674  002128  6FE6               	movwf	(___ftadd@f2+2)& (0+255),b
  6675  00212A  EC95  F00A         	call	___ftadd	;wreg free
  6676  00212E  C0E1  F193         	movff	?___ftadd,log@x
  6677  002132  C0E2  F194         	movff	?___ftadd+1,log@x+1
  6678  002136  C0E3  F195         	movff	?___ftadd+2,log@x+2
  6679  00213A  0101               	movlb	1	; () banked
  6680  00213C  0796               	decf	log@exponent& (0+255),f,b
  6681  00213E  A0D8               	btfss	status,0,c
  6682  002140  0797               	decf	(log@exponent+1)& (0+255),f,b
  6683                           
  6684                           ; BSR set to: 1
  6685  002142  C193  F0ED         	movff	log@x,eval_poly@x
  6686  002146  C194  F0EE         	movff	log@x+1,eval_poly@x+1
  6687  00214A  C195  F0EF         	movff	log@x+2,eval_poly@x+2
  6688  00214E  0E01               	movlw	low log@coeff
  6689  002150  0100               	movlb	0	; () banked
  6690  002152  6FF0               	movwf	eval_poly@d& (0+255),b
  6691  002154  0E06               	movlw	high log@coeff
  6692  002156  0100               	movlb	0	; () banked
  6693  002158  6FF1               	movwf	(eval_poly@d+1)& (0+255),b
  6694  00215A  0E00               	movlw	0
  6695  00215C  0100               	movlb	0	; () banked
  6696  00215E  6FF3               	movwf	(eval_poly@n+1)& (0+255),b
  6697  002160  0E08               	movlw	8
  6698  002162  6FF2               	movwf	eval_poly@n& (0+255),b
  6699  002164  ECCA  F014         	call	_eval_poly	;wreg free
  6700  002168  C0ED  F193         	movff	?_eval_poly,log@x
  6701  00216C  C0EE  F194         	movff	?_eval_poly+1,log@x+1
  6702  002170  C0EF  F195         	movff	?_eval_poly+2,log@x+2
  6703  002174  0E72               	movlw	114
  6704  002176  0100               	movlb	0	; () banked
  6705  002178  6FD5               	movwf	___ftmul@f2& (0+255),b
  6706  00217A  0E31               	movlw	49
  6707  00217C  0100               	movlb	0	; () banked
  6708  00217E  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  6709  002180  0E3F               	movlw	63
  6710  002182  0100               	movlb	0	; () banked
  6711  002184  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  6712  002186  C196  F023         	movff	log@exponent,___awtoft@c
  6713  00218A  C197  F024         	movff	log@exponent+1,___awtoft@c+1
  6714  00218E  EC8C  F01B         	call	___awtoft	;wreg free
  6715  002192  C023  F0D2         	movff	?___awtoft,___ftmul@f1
  6716  002196  C024  F0D3         	movff	?___awtoft+1,___ftmul@f1+1
  6717  00219A  C025  F0D4         	movff	?___awtoft+2,___ftmul@f1+2
  6718  00219E  ECE8  F00E         	call	___ftmul	;wreg free
  6719  0021A2  C0D2  F0E1         	movff	?___ftmul,___ftadd@f1
  6720  0021A6  C0D3  F0E2         	movff	?___ftmul+1,___ftadd@f1+1
  6721  0021AA  C0D4  F0E3         	movff	?___ftmul+2,___ftadd@f1+2
  6722  0021AE  C193  F0E4         	movff	log@x,___ftadd@f2
  6723  0021B2  C194  F0E5         	movff	log@x+1,___ftadd@f2+1
  6724  0021B6  C195  F0E6         	movff	log@x+2,___ftadd@f2+2
  6725  0021BA  EC95  F00A         	call	___ftadd	;wreg free
  6726  0021BE  C0E1  F193         	movff	?___ftadd,?_log
  6727  0021C2  C0E2  F194         	movff	?___ftadd+1,?_log+1
  6728  0021C6  C0E3  F195         	movff	?___ftadd+2,?_log+2
  6729  0021CA  0012               	return	
  6730  0021CC                     __end_of_log:
  6731                           	opt stack 0
  6732                           tosu	equ	0xFFF
  6733                           tosh	equ	0xFFE
  6734                           tosl	equ	0xFFD
  6735                           pclath	equ	0xFFA
  6736                           tblptru	equ	0xFF8
  6737                           tblptrh	equ	0xFF7
  6738                           tblptrl	equ	0xFF6
  6739                           tablat	equ	0xFF5
  6740                           prodh	equ	0xFF4
  6741                           prodl	equ	0xFF3
  6742                           intcon	equ	0xFF2
  6743                           postinc0	equ	0xFEE
  6744                           wreg	equ	0xFE8
  6745                           postdec1	equ	0xFE5
  6746                           fsr1l	equ	0xFE1
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           plusw2	equ	0xFDB
  6751                           fsr2h	equ	0xFDA
  6752                           fsr2l	equ	0xFD9
  6753                           status	equ	0xFD8
  6754                           
  6755 ;; *************** function _frexp *****************
  6756 ;; Defined at:
  6757 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;  value           3   26[COMRAM] int 
  6760 ;;  eptr            2   29[COMRAM] PTR int 
  6761 ;;		 -> log@exponent(2), 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  3   26[COMRAM] PTR int 
  6766 ;; Registers used:
  6767 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6773 ;;      Params:         5       0       0       0       0       0       0
  6774 ;;      Locals:         0       0       0       0       0       0       0
  6775 ;;      Temps:          2       0       0       0       0       0       0
  6776 ;;      Totals:         7       0       0       0       0       0       0
  6777 ;;Total ram usage:        7 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    4
  6780 ;; This function calls:
  6781 ;;		Nothing
  6782 ;; This function is called by:
  6783 ;;		_log
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text28
  6788  003116                     __ptext28:
  6789                           	opt stack 0
  6790  003116                     _frexp:
  6791                           	opt stack 24
  6792                           
  6793                           ;incstack = 0
  6794  003116  501B               	movf	frexp@value,w,c
  6795  003118  101C               	iorwf	frexp@value+1,w,c
  6796  00311A  101D               	iorwf	frexp@value+2,w,c
  6797  00311C  A4D8               	btfss	status,2,c
  6798  00311E  D00F               	goto	l4795
  6799  003120  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6800  003124  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6801  003128  0E00               	movlw	0
  6802  00312A  6EDE               	movwf	postinc2,c
  6803  00312C  0E00               	movlw	0
  6804  00312E  6EDD               	movwf	postdec2,c
  6805  003130  0E00               	movlw	0
  6806  003132  6E1B               	movwf	?_frexp,c
  6807  003134  0E00               	movlw	0
  6808  003136  6E1C               	movwf	?_frexp+1,c
  6809  003138  0E00               	movlw	0
  6810  00313A  6E1D               	movwf	?_frexp+2,c
  6811  00313C  0012               	return	
  6812  00313E                     l4795:
  6813  00313E  501D               	movf	frexp@value+2,w,c
  6814  003140  0B7F               	andlw	127
  6815  003142  6E20               	movwf	??_frexp& (0+255),c
  6816  003144  6A21               	clrf	(??_frexp+1)& (0+255),c
  6817  003146  90D8               	bcf	status,0,c
  6818  003148  3620               	rlcf	??_frexp,f,c
  6819  00314A  3621               	rlcf	??_frexp+1,f,c
  6820  00314C  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6821  003150  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6822  003154  C020  FFDE         	movff	??_frexp,postinc2
  6823  003158  C021  FFDD         	movff	??_frexp+1,postdec2
  6824  00315C  AE1C               	btfss	frexp@value+1,7,c
  6825  00315E  D003               	goto	u5170
  6826  003160  6A20               	clrf	??_frexp& (0+255),c
  6827  003162  2A20               	incf	??_frexp& (0+255),f,c
  6828  003164  D001               	goto	u5178
  6829  003166                     u5170:
  6830  003166  6A20               	clrf	??_frexp& (0+255),c
  6831  003168                     u5178:
  6832  003168  5020               	movf	??_frexp,w,c
  6833  00316A  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6834  00316E  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6835  003172  12DE               	iorwf	postinc2,f,c
  6836  003174  0E00               	movlw	0
  6837  003176  12DD               	iorwf	postdec2,f,c
  6838  003178  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6839  00317C  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6840  003180  0E82               	movlw	130
  6841  003182  26DE               	addwf	postinc2,f,c
  6842  003184  0EFF               	movlw	255
  6843  003186  22DD               	addwfc	postdec2,f,c
  6844  003188  801D               	bsf	frexp@value+2,0,c
  6845  00318A  821D               	bsf	frexp@value+2,1,c
  6846  00318C  841D               	bsf	frexp@value+2,2,c
  6847  00318E  861D               	bsf	frexp@value+2,3,c
  6848  003190  881D               	bsf	frexp@value+2,4,c
  6849  003192  8A1D               	bsf	frexp@value+2,5,c
  6850  003194  9C1D               	bcf	frexp@value+2,6,c
  6851  003196  9E1C               	bcf	frexp@value+1,7,c
  6852  003198  C01B  F01B         	movff	frexp@value,?_frexp
  6853  00319C  C01C  F01C         	movff	frexp@value+1,?_frexp+1
  6854  0031A0  C01D  F01D         	movff	frexp@value+2,?_frexp+2
  6855  0031A4  0012               	return	
  6856  0031A6                     __end_of_frexp:
  6857                           	opt stack 0
  6858                           tosu	equ	0xFFF
  6859                           tosh	equ	0xFFE
  6860                           tosl	equ	0xFFD
  6861                           pclath	equ	0xFFA
  6862                           tblptru	equ	0xFF8
  6863                           tblptrh	equ	0xFF7
  6864                           tblptrl	equ	0xFF6
  6865                           tablat	equ	0xFF5
  6866                           prodh	equ	0xFF4
  6867                           prodl	equ	0xFF3
  6868                           intcon	equ	0xFF2
  6869                           postinc0	equ	0xFEE
  6870                           wreg	equ	0xFE8
  6871                           postdec1	equ	0xFE5
  6872                           fsr1l	equ	0xFE1
  6873                           indf2	equ	0xFDF
  6874                           postinc2	equ	0xFDE
  6875                           postdec2	equ	0xFDD
  6876                           plusw2	equ	0xFDB
  6877                           fsr2h	equ	0xFDA
  6878                           fsr2l	equ	0xFD9
  6879                           status	equ	0xFD8
  6880                           
  6881 ;; *************** function _eval_poly *****************
  6882 ;; Defined at:
  6883 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\evalpoly.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;  x               3   44[BANK0 ] PTR int 
  6886 ;;  d               2   47[BANK0 ] PTR const 
  6887 ;;		 -> log@coeff(27), 
  6888 ;;  n               2   49[BANK0 ] int 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  res             3    2[BANK1 ] int 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  3   44[BANK0 ] int 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6900 ;;      Params:         0       7       0       0       0       0       0
  6901 ;;      Locals:         0       0       3       0       0       0       0
  6902 ;;      Temps:          0       0       2       0       0       0       0
  6903 ;;      Totals:         0       7       5       0       0       0       0
  6904 ;;Total ram usage:       12 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    6
  6907 ;; This function calls:
  6908 ;;		___ftadd
  6909 ;;		___ftmul
  6910 ;;		___wmul
  6911 ;; This function is called by:
  6912 ;;		_log
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text29
  6917  002994                     __ptext29:
  6918                           	opt stack 0
  6919  002994                     _eval_poly:
  6920                           	opt stack 22
  6921                           
  6922                           ;incstack = 0
  6923  002994  C0F2  F01B         	movff	eval_poly@n,___wmul@multiplier
  6924  002998  C0F3  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  6925  00299C  0E00               	movlw	0
  6926  00299E  6E1E               	movwf	___wmul@multiplicand+1,c
  6927  0029A0  0E03               	movlw	3
  6928  0029A2  6E1D               	movwf	___wmul@multiplicand,c
  6929  0029A4  EC5B  F01C         	call	___wmul	;wreg free
  6930  0029A8  C0F0  F18E         	movff	eval_poly@d,??_eval_poly
  6931  0029AC  C0F1  F18F         	movff	eval_poly@d+1,??_eval_poly+1
  6932  0029B0  501B               	movf	?___wmul,w,c
  6933  0029B2  0101               	movlb	1	; () banked
  6934  0029B4  278E               	addwf	??_eval_poly& (0+255),f,b
  6935  0029B6  501C               	movf	?___wmul+1,w,c
  6936  0029B8  0101               	movlb	1	; () banked
  6937  0029BA  238F               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6938  0029BC  C18E  FFF6         	movff	??_eval_poly,tblptrl
  6939  0029C0  C18F  FFF7         	movff	??_eval_poly+1,tblptrh
  6940  0029C4                     	if	0	;tblptru may be non-zero
  6941  0029C4                     	endif
  6942  0029C4                     	if	0	;tblptru may be non-zero
  6943  0029C4                     	endif
  6944  0029C4  0009               	tblrd		*+
  6945  0029C6  CFF5 F190          	movff	tablat,eval_poly@res
  6946  0029CA  0009               	tblrd		*+
  6947  0029CC  CFF5 F191          	movff	tablat,eval_poly@res+1
  6948  0029D0  000A               	tblrd		*-
  6949  0029D2  CFF5 F192          	movff	tablat,eval_poly@res+2
  6950  0029D6  D041               	goto	l4811
  6951  0029D8                     l4809:
  6952  0029D8  C190  F0D5         	movff	eval_poly@res,___ftmul@f2
  6953  0029DC  C191  F0D6         	movff	eval_poly@res+1,___ftmul@f2+1
  6954  0029E0  C192  F0D7         	movff	eval_poly@res+2,___ftmul@f2+2
  6955  0029E4  C0ED  F0D2         	movff	eval_poly@x,___ftmul@f1
  6956  0029E8  C0EE  F0D3         	movff	eval_poly@x+1,___ftmul@f1+1
  6957  0029EC  C0EF  F0D4         	movff	eval_poly@x+2,___ftmul@f1+2
  6958  0029F0  ECE8  F00E         	call	___ftmul	;wreg free
  6959  0029F4  C0D2  F0E1         	movff	?___ftmul,___ftadd@f1
  6960  0029F8  C0D3  F0E2         	movff	?___ftmul+1,___ftadd@f1+1
  6961  0029FC  C0D4  F0E3         	movff	?___ftmul+2,___ftadd@f1+2
  6962  002A00  0E00               	movlw	0
  6963  002A02  6E1E               	movwf	___wmul@multiplicand+1,c
  6964  002A04  0E03               	movlw	3
  6965  002A06  6E1D               	movwf	___wmul@multiplicand,c
  6966  002A08  0100               	movlb	0	; () banked
  6967  002A0A  07F2               	decf	eval_poly@n& (0+255),f,b
  6968  002A0C  A0D8               	btfss	status,0,c
  6969  002A0E  07F3               	decf	(eval_poly@n+1)& (0+255),f,b
  6970  002A10  C0F2  F01B         	movff	eval_poly@n,___wmul@multiplier
  6971  002A14  C0F3  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  6972  002A18  EC5B  F01C         	call	___wmul	;wreg free
  6973  002A1C  C0F0  F18E         	movff	eval_poly@d,??_eval_poly
  6974  002A20  C0F1  F18F         	movff	eval_poly@d+1,??_eval_poly+1
  6975  002A24  501B               	movf	?___wmul,w,c
  6976  002A26  0101               	movlb	1	; () banked
  6977  002A28  278E               	addwf	??_eval_poly& (0+255),f,b
  6978  002A2A  501C               	movf	?___wmul+1,w,c
  6979  002A2C  0101               	movlb	1	; () banked
  6980  002A2E  238F               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6981  002A30  C18E  FFF6         	movff	??_eval_poly,tblptrl
  6982  002A34  C18F  FFF7         	movff	??_eval_poly+1,tblptrh
  6983  002A38                     	if	0	;tblptru may be non-zero
  6984  002A38                     	endif
  6985  002A38                     	if	0	;tblptru may be non-zero
  6986  002A38                     	endif
  6987  002A38  0009               	tblrd		*+
  6988  002A3A  CFF5 F0E4          	movff	tablat,___ftadd@f2
  6989  002A3E  0009               	tblrd		*+
  6990  002A40  CFF5 F0E5          	movff	tablat,___ftadd@f2+1
  6991  002A44  000A               	tblrd		*-
  6992  002A46  CFF5 F0E6          	movff	tablat,___ftadd@f2+2
  6993  002A4A  EC95  F00A         	call	___ftadd	;wreg free
  6994  002A4E  C0E1  F190         	movff	?___ftadd,eval_poly@res
  6995  002A52  C0E2  F191         	movff	?___ftadd+1,eval_poly@res+1
  6996  002A56  C0E3  F192         	movff	?___ftadd+2,eval_poly@res+2
  6997  002A5A                     l4811:
  6998  002A5A  0100               	movlb	0	; () banked
  6999  002A5C  51F2               	movf	eval_poly@n& (0+255),w,b
  7000  002A5E  0100               	movlb	0	; () banked
  7001  002A60  11F3               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7002  002A62  A4D8               	btfss	status,2,c
  7003  002A64  D7B9               	goto	l4809
  7004                           
  7005                           ; BSR set to: 0
  7006  002A66  C190  F0ED         	movff	eval_poly@res,?_eval_poly
  7007  002A6A  C191  F0EE         	movff	eval_poly@res+1,?_eval_poly+1
  7008  002A6E  C192  F0EF         	movff	eval_poly@res+2,?_eval_poly+2
  7009                           
  7010                           ; BSR set to: 0
  7011  002A72  0012               	return		;funcret
  7012  002A74                     __end_of_eval_poly:
  7013                           	opt stack 0
  7014                           tosu	equ	0xFFF
  7015                           tosh	equ	0xFFE
  7016                           tosl	equ	0xFFD
  7017                           pclath	equ	0xFFA
  7018                           tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           intcon	equ	0xFF2
  7025                           postinc0	equ	0xFEE
  7026                           wreg	equ	0xFE8
  7027                           postdec1	equ	0xFE5
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           postinc2	equ	0xFDE
  7031                           postdec2	equ	0xFDD
  7032                           plusw2	equ	0xFDB
  7033                           fsr2h	equ	0xFDA
  7034                           fsr2l	equ	0xFD9
  7035                           status	equ	0xFD8
  7036                           
  7037 ;; *************** function ___awtoft *****************
  7038 ;; Defined at:
  7039 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  c               2   34[COMRAM] int 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  sign            1   37[COMRAM] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  3   34[COMRAM] float 
  7046 ;; Registers used:
  7047 ;;		wreg, status,2, status,0, cstack
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7053 ;;      Params:         3       0       0       0       0       0       0
  7054 ;;      Locals:         1       0       0       0       0       0       0
  7055 ;;      Temps:          0       0       0       0       0       0       0
  7056 ;;      Totals:         4       0       0       0       0       0       0
  7057 ;;Total ram usage:        4 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    5
  7060 ;; This function calls:
  7061 ;;		___ftpack
  7062 ;; This function is called by:
  7063 ;;		_Temp_Convert
  7064 ;;		_log
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068                           	psect	text30
  7069  003718                     __ptext30:
  7070                           	opt stack 0
  7071  003718                     ___awtoft:
  7072                           	opt stack 23
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;incstack = 0
  7076  003718  0E00               	movlw	0
  7077  00371A  6E26               	movwf	___awtoft@sign,c
  7078  00371C  AE24               	btfss	___awtoft@c+1,7,c
  7079  00371E  D006               	goto	l4783
  7080  003720  6C23               	negf	___awtoft@c,c
  7081  003722  1E24               	comf	___awtoft@c+1,f,c
  7082  003724  B0D8               	btfsc	status,0,c
  7083  003726  2A24               	incf	___awtoft@c+1,f,c
  7084  003728  0E01               	movlw	1
  7085  00372A  6E26               	movwf	___awtoft@sign,c
  7086  00372C                     l4783:
  7087  00372C  C023  F01B         	movff	___awtoft@c,___ftpack@arg
  7088  003730  C024  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
  7089  003734  6A1D               	clrf	___ftpack@arg+2,c
  7090  003736  0E8E               	movlw	142
  7091  003738  6E1E               	movwf	___ftpack@exp,c
  7092  00373A  C026  F01F         	movff	___awtoft@sign,___ftpack@sign
  7093  00373E  ECA2  F017         	call	___ftpack	;wreg free
  7094  003742  C01B  F023         	movff	?___ftpack,?___awtoft
  7095  003746  C01C  F024         	movff	?___ftpack+1,?___awtoft+1
  7096  00374A  C01D  F025         	movff	?___ftpack+2,?___awtoft+2
  7097  00374E  0012               	return	
  7098  003750                     __end_of___awtoft:
  7099                           	opt stack 0
  7100                           tosu	equ	0xFFF
  7101                           tosh	equ	0xFFE
  7102                           tosl	equ	0xFFD
  7103                           pclath	equ	0xFFA
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           intcon	equ	0xFF2
  7111                           postinc0	equ	0xFEE
  7112                           wreg	equ	0xFE8
  7113                           postdec1	equ	0xFE5
  7114                           fsr1l	equ	0xFE1
  7115                           indf2	equ	0xFDF
  7116                           postinc2	equ	0xFDE
  7117                           postdec2	equ	0xFDD
  7118                           plusw2	equ	0xFDB
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function ___ftsub *****************
  7124 ;; Defined at:
  7125 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftsub.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  f1              3   44[BANK0 ] float 
  7128 ;;  f2              3   47[BANK0 ] float 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;		None
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  3   44[BANK0 ] float 
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7140 ;;      Params:         0       6       0       0       0       0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0
  7143 ;;      Totals:         0       6       0       0       0       0       0
  7144 ;;Total ram usage:        6 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    6
  7147 ;; This function calls:
  7148 ;;		___ftadd
  7149 ;; This function is called by:
  7150 ;;		_Temp_Convert
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text31
  7155  00352E                     __ptext31:
  7156                           	opt stack 0
  7157  00352E                     ___ftsub:
  7158                           	opt stack 23
  7159                           
  7160                           ;incstack = 0
  7161  00352E  0100               	movlb	0	; () banked
  7162  003530  51F0               	movf	___ftsub@f2& (0+255),w,b
  7163  003532  0100               	movlb	0	; () banked
  7164  003534  11F1               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7165  003536  0100               	movlb	0	; () banked
  7166  003538  11F2               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7167  00353A  B4D8               	btfsc	status,2,c
  7168  00353C  D009               	goto	l5181
  7169                           
  7170                           ; BSR set to: 0
  7171  00353E  0E00               	movlw	0
  7172  003540  0100               	movlb	0	; () banked
  7173  003542  1BF0               	xorwf	___ftsub@f2& (0+255),f,b
  7174  003544  0E00               	movlw	0
  7175  003546  0100               	movlb	0	; () banked
  7176  003548  1BF1               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7177  00354A  0E80               	movlw	128
  7178  00354C  0100               	movlb	0	; () banked
  7179  00354E  1BF2               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7180  003550                     l5181:
  7181                           
  7182                           ; BSR set to: 0
  7183  003550  C0ED  F0E1         	movff	___ftsub@f1,___ftadd@f1
  7184  003554  C0EE  F0E2         	movff	___ftsub@f1+1,___ftadd@f1+1
  7185  003558  C0EF  F0E3         	movff	___ftsub@f1+2,___ftadd@f1+2
  7186  00355C  C0F0  F0E4         	movff	___ftsub@f2,___ftadd@f2
  7187  003560  C0F1  F0E5         	movff	___ftsub@f2+1,___ftadd@f2+1
  7188  003564  C0F2  F0E6         	movff	___ftsub@f2+2,___ftadd@f2+2
  7189  003568  EC95  F00A         	call	___ftadd	;wreg free
  7190  00356C  C0E1  F0ED         	movff	?___ftadd,?___ftsub
  7191  003570  C0E2  F0EE         	movff	?___ftadd+1,?___ftsub+1
  7192  003574  C0E3  F0EF         	movff	?___ftadd+2,?___ftsub+2
  7193  003578  0012               	return	
  7194  00357A                     __end_of___ftsub:
  7195                           	opt stack 0
  7196                           tosu	equ	0xFFF
  7197                           tosh	equ	0xFFE
  7198                           tosl	equ	0xFFD
  7199                           pclath	equ	0xFFA
  7200                           tblptru	equ	0xFF8
  7201                           tblptrh	equ	0xFF7
  7202                           tblptrl	equ	0xFF6
  7203                           tablat	equ	0xFF5
  7204                           prodh	equ	0xFF4
  7205                           prodl	equ	0xFF3
  7206                           intcon	equ	0xFF2
  7207                           postinc0	equ	0xFEE
  7208                           wreg	equ	0xFE8
  7209                           postdec1	equ	0xFE5
  7210                           fsr1l	equ	0xFE1
  7211                           indf2	equ	0xFDF
  7212                           postinc2	equ	0xFDE
  7213                           postdec2	equ	0xFDD
  7214                           plusw2	equ	0xFDB
  7215                           fsr2h	equ	0xFDA
  7216                           fsr2l	equ	0xFD9
  7217                           status	equ	0xFD8
  7218                           
  7219 ;; *************** function _Temp_Filter *****************
  7220 ;; Defined at:
  7221 ;;		line 46 in file "Tempeture.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;		None
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  x               2   44[BANK0 ] int 
  7226 ;; Return value:  Size  Location     Type
  7227 ;;		None               void
  7228 ;; Registers used:
  7229 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7235 ;;      Params:         0       0       0       0       0       0       0
  7236 ;;      Locals:         0       2       0       0       0       0       0
  7237 ;;      Temps:          0       0       0       0       0       0       0
  7238 ;;      Totals:         0       2       0       0       0       0       0
  7239 ;;Total ram usage:        2 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:    6
  7242 ;; This function calls:
  7243 ;;		___ftadd
  7244 ;;		___ftmul
  7245 ;;		___wmul
  7246 ;; This function is called by:
  7247 ;;		_Temp_Convert
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text32
  7252  0019A0                     __ptext32:
  7253                           	opt stack 0
  7254  0019A0                     _Temp_Filter:
  7255                           	opt stack 23
  7256                           
  7257                           ;Tempeture.c: 48: int x;
  7258                           ;Tempeture.c: 49: for (x = 0; x < 4; x++) {
  7259                           
  7260                           ;incstack = 0
  7261  0019A0  0E00               	movlw	0
  7262  0019A2  0100               	movlb	0	; () banked
  7263  0019A4  6FEE               	movwf	(Temp_Filter@x+1)& (0+255),b
  7264  0019A6  0E00               	movlw	0
  7265  0019A8  6FED               	movwf	Temp_Filter@x& (0+255),b
  7266  0019AA                     l4843:
  7267                           
  7268                           ; BSR set to: 0
  7269  0019AA  0100               	movlb	0	; () banked
  7270  0019AC  BFEE               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  7271  0019AE  D008               	goto	l4847
  7272  0019B0  0100               	movlb	0	; () banked
  7273  0019B2  51EE               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7274  0019B4  E16F               	bnz	l4853
  7275  0019B6  0E04               	movlw	4
  7276  0019B8  0100               	movlb	0	; () banked
  7277  0019BA  5DED               	subwf	Temp_Filter@x& (0+255),w,b
  7278  0019BC  B0D8               	btfsc	status,0,c
  7279  0019BE  D06A               	goto	l4853
  7280  0019C0                     l4847:
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;Tempeture.c: 50: Temp_DegF[x] = (0.88 * TmpTemp_DegF[x] + ((1 - 0.88) * PrevTemp_DegF[x
      +                          ]));
  7284  0019C0  C0ED  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7285  0019C4  C0EE  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7286  0019C8  0E00               	movlw	0
  7287  0019CA  6E1E               	movwf	___wmul@multiplicand+1,c
  7288  0019CC  0E03               	movlw	3
  7289  0019CE  6E1D               	movwf	___wmul@multiplicand,c
  7290  0019D0  EC5B  F01C         	call	___wmul	;wreg free
  7291  0019D4  0EF4               	movlw	low _Temp_DegF
  7292  0019D6  241B               	addwf	?___wmul,w,c
  7293  0019D8  6ED9               	movwf	fsr2l,c
  7294  0019DA  0E00               	movlw	high _Temp_DegF
  7295  0019DC  201C               	addwfc	?___wmul+1,w,c
  7296  0019DE  6EDA               	movwf	fsr2h,c
  7297  0019E0  0E48               	movlw	72
  7298  0019E2  0100               	movlb	0	; () banked
  7299  0019E4  6FD5               	movwf	___ftmul@f2& (0+255),b
  7300  0019E6  0E61               	movlw	97
  7301  0019E8  0100               	movlb	0	; () banked
  7302  0019EA  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  7303  0019EC  0E3F               	movlw	63
  7304  0019EE  0100               	movlb	0	; () banked
  7305  0019F0  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  7306  0019F2  C0ED  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7307  0019F6  C0EE  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7308  0019FA  0E00               	movlw	0
  7309  0019FC  6E1E               	movwf	___wmul@multiplicand+1,c
  7310  0019FE  0E03               	movlw	3
  7311  001A00  6E1D               	movwf	___wmul@multiplicand,c
  7312  001A02  EC5B  F01C         	call	___wmul	;wreg free
  7313  001A06  0EAD               	movlw	low _TmpTemp_DegF
  7314  001A08  241B               	addwf	?___wmul,w,c
  7315  001A0A  6EE1               	movwf	fsr1l,c
  7316  001A0C  0E00               	movlw	high _TmpTemp_DegF
  7317  001A0E  201C               	addwfc	?___wmul+1,w,c
  7318  001A10  6EE2               	movwf	fsr1h,c
  7319  001A12  CFE6 F0D2          	movff	postinc1,___ftmul@f1
  7320  001A16  CFE6 F0D3          	movff	postinc1,___ftmul@f1+1
  7321  001A1A  CFE5 F0D4          	movff	postdec1,___ftmul@f1+2
  7322  001A1E  ECE8  F00E         	call	___ftmul	;wreg free
  7323  001A22  C0D2  F0E1         	movff	?___ftmul,___ftadd@f1
  7324  001A26  C0D3  F0E2         	movff	?___ftmul+1,___ftadd@f1+1
  7325  001A2A  C0D4  F0E3         	movff	?___ftmul+2,___ftadd@f1+2
  7326  001A2E  0EC3               	movlw	195
  7327  001A30  0100               	movlb	0	; () banked
  7328  001A32  6FD5               	movwf	___ftmul@f2& (0+255),b
  7329  001A34  0EF5               	movlw	245
  7330  001A36  0100               	movlb	0	; () banked
  7331  001A38  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  7332  001A3A  0E3D               	movlw	61
  7333  001A3C  0100               	movlb	0	; () banked
  7334  001A3E  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  7335  001A40  0E00               	movlw	0
  7336  001A42  6E1E               	movwf	___wmul@multiplicand+1,c
  7337  001A44  0E03               	movlw	3
  7338  001A46  6E1D               	movwf	___wmul@multiplicand,c
  7339  001A48  C0ED  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7340  001A4C  C0EE  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7341  001A50  EC5B  F01C         	call	___wmul	;wreg free
  7342  001A54  0E1E               	movlw	low _PrevTemp_DegF
  7343  001A56  241B               	addwf	?___wmul,w,c
  7344  001A58  6EE1               	movwf	fsr1l,c
  7345  001A5A  0E01               	movlw	high _PrevTemp_DegF
  7346  001A5C  201C               	addwfc	?___wmul+1,w,c
  7347  001A5E  6EE2               	movwf	fsr1h,c
  7348  001A60  CFE6 F0D2          	movff	postinc1,___ftmul@f1
  7349  001A64  CFE6 F0D3          	movff	postinc1,___ftmul@f1+1
  7350  001A68  CFE5 F0D4          	movff	postdec1,___ftmul@f1+2
  7351  001A6C  ECE8  F00E         	call	___ftmul	;wreg free
  7352  001A70  C0D2  F0E4         	movff	?___ftmul,___ftadd@f2
  7353  001A74  C0D3  F0E5         	movff	?___ftmul+1,___ftadd@f2+1
  7354  001A78  C0D4  F0E6         	movff	?___ftmul+2,___ftadd@f2+2
  7355  001A7C  EC95  F00A         	call	___ftadd	;wreg free
  7356  001A80  C0E1  FFDE         	movff	?___ftadd,postinc2
  7357  001A84  C0E2  FFDE         	movff	?___ftadd+1,postinc2
  7358  001A88  C0E3  FFDE         	movff	?___ftadd+2,postinc2
  7359  001A8C  0100               	movlb	0	; () banked
  7360  001A8E  4BED               	infsnz	Temp_Filter@x& (0+255),f,b
  7361  001A90  2BEE               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7362  001A92  D78B               	goto	l4843
  7363  001A94                     l4853:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;Tempeture.c: 51: }
  7367                           ;Tempeture.c: 52: for (x = 0; x < 4; x++) {
  7368  001A94  0E00               	movlw	0
  7369  001A96  0100               	movlb	0	; () banked
  7370  001A98  6FEE               	movwf	(Temp_Filter@x+1)& (0+255),b
  7371  001A9A  0E00               	movlw	0
  7372  001A9C  6FED               	movwf	Temp_Filter@x& (0+255),b
  7373  001A9E                     l4855:
  7374                           
  7375                           ; BSR set to: 0
  7376  001A9E  0100               	movlb	0	; () banked
  7377  001AA0  BFEE               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  7378  001AA2  D008               	goto	l4859
  7379  001AA4  0100               	movlb	0	; () banked
  7380  001AA6  51EE               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7381  001AA8  E12F               	bnz	l351
  7382  001AAA  0E04               	movlw	4
  7383  001AAC  0100               	movlb	0	; () banked
  7384  001AAE  5DED               	subwf	Temp_Filter@x& (0+255),w,b
  7385  001AB0  B0D8               	btfsc	status,0,c
  7386  001AB2  0012               	return	
  7387  001AB4                     l4859:
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;Tempeture.c: 53: PrevTemp_DegF[x] = Temp_DegF[x];
  7391  001AB4  C0ED  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7392  001AB8  C0EE  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7393  001ABC  0E00               	movlw	0
  7394  001ABE  6E1E               	movwf	___wmul@multiplicand+1,c
  7395  001AC0  0E03               	movlw	3
  7396  001AC2  6E1D               	movwf	___wmul@multiplicand,c
  7397  001AC4  EC5B  F01C         	call	___wmul	;wreg free
  7398  001AC8  0EF4               	movlw	low _Temp_DegF
  7399  001ACA  241B               	addwf	?___wmul,w,c
  7400  001ACC  6ED9               	movwf	fsr2l,c
  7401  001ACE  0E00               	movlw	high _Temp_DegF
  7402  001AD0  201C               	addwfc	?___wmul+1,w,c
  7403  001AD2  6EDA               	movwf	fsr2h,c
  7404  001AD4  C0ED  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7405  001AD8  C0EE  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7406  001ADC  0E00               	movlw	0
  7407  001ADE  6E1E               	movwf	___wmul@multiplicand+1,c
  7408  001AE0  0E03               	movlw	3
  7409  001AE2  6E1D               	movwf	___wmul@multiplicand,c
  7410  001AE4  EC5B  F01C         	call	___wmul	;wreg free
  7411  001AE8  0E1E               	movlw	low _PrevTemp_DegF
  7412  001AEA  241B               	addwf	?___wmul,w,c
  7413  001AEC  6EE1               	movwf	fsr1l,c
  7414  001AEE  0E01               	movlw	high _PrevTemp_DegF
  7415  001AF0  201C               	addwfc	?___wmul+1,w,c
  7416  001AF2  6EE2               	movwf	fsr1h,c
  7417  001AF4  CFDE FFE6          	movff	postinc2,postinc1
  7418  001AF8  CFDE FFE6          	movff	postinc2,postinc1
  7419  001AFC  CFDE FFE6          	movff	postinc2,postinc1
  7420  001B00  0100               	movlb	0	; () banked
  7421  001B02  4BED               	infsnz	Temp_Filter@x& (0+255),f,b
  7422  001B04  2BEE               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7423  001B06  D7CB               	goto	l4855
  7424  001B08                     l351:
  7425                           
  7426                           ; BSR set to: 0
  7427  001B08  0012               	return		;funcret
  7428  001B0A                     __end_of_Temp_Filter:
  7429                           	opt stack 0
  7430                           tosu	equ	0xFFF
  7431                           tosh	equ	0xFFE
  7432                           tosl	equ	0xFFD
  7433                           pclath	equ	0xFFA
  7434                           tblptru	equ	0xFF8
  7435                           tblptrh	equ	0xFF7
  7436                           tblptrl	equ	0xFF6
  7437                           tablat	equ	0xFF5
  7438                           prodh	equ	0xFF4
  7439                           prodl	equ	0xFF3
  7440                           intcon	equ	0xFF2
  7441                           postinc0	equ	0xFEE
  7442                           wreg	equ	0xFE8
  7443                           postinc1	equ	0xFE6
  7444                           postdec1	equ	0xFE5
  7445                           fsr1h	equ	0xFE2
  7446                           fsr1l	equ	0xFE1
  7447                           indf2	equ	0xFDF
  7448                           postinc2	equ	0xFDE
  7449                           postdec2	equ	0xFDD
  7450                           plusw2	equ	0xFDB
  7451                           fsr2h	equ	0xFDA
  7452                           fsr2l	equ	0xFD9
  7453                           status	equ	0xFD8
  7454                           
  7455 ;; *************** function _SYSTEM_Initialize *****************
  7456 ;; Defined at:
  7457 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;		None
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;		None               void
  7464 ;; Registers used:
  7465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7471 ;;      Params:         0       0       0       0       0       0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0
  7474 ;;      Totals:         0       0       0       0       0       0       0
  7475 ;;Total ram usage:        0 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    7
  7478 ;; This function calls:
  7479 ;;		_ADC_Initialize
  7480 ;;		_EUSART1_Initialize
  7481 ;;		_INTERRUPT_Initialize
  7482 ;;		_OSCILLATOR_Initialize
  7483 ;;		_PIN_MANAGER_Initialize
  7484 ;;		_TMR1_Initialize
  7485 ;;		_begin
  7486 ;; This function is called by:
  7487 ;;		_main
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           	psect	text33
  7492  0033B0                     __ptext33:
  7493                           	opt stack 0
  7494  0033B0                     _SYSTEM_Initialize:
  7495                           	opt stack 23
  7496                           
  7497                           ;mcc.c: 113: OSCILLATOR_Initialize();
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;incstack = 0
  7501  0033B0  EC3C  F01D         	call	_OSCILLATOR_Initialize	;wreg free
  7502                           
  7503                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  7504  0033B4  EC6E  F01A         	call	_PIN_MANAGER_Initialize	;wreg free
  7505                           
  7506                           ;mcc.c: 115: INTERRUPT_Initialize();
  7507  0033B8  EC49  F01D         	call	_INTERRUPT_Initialize	;wreg free
  7508                           
  7509                           ;mcc.c: 116: ADC_Initialize();
  7510  0033BC  ECEB  F01C         	call	_ADC_Initialize	;wreg free
  7511                           
  7512                           ;mcc.c: 117: EUSART1_Initialize();
  7513  0033C0  EC51  F01B         	call	_EUSART1_Initialize	;wreg free
  7514                           
  7515                           ;mcc.c: 118: TMR1_Initialize();
  7516  0033C4  EC92  F01C         	call	_TMR1_Initialize	;wreg free
  7517                           
  7518                           ;mcc.c: 119: begin(receiveArray, sizeof (receiveArray), 7, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  7519  0033C8  0E2A               	movlw	low _receiveArray
  7520  0033CA  0100               	movlb	0	; () banked
  7521  0033CC  6FC1               	movwf	begin@ptr& (0+255),b
  7522  0033CE  0E01               	movlw	high _receiveArray
  7523  0033D0  0100               	movlb	0	; () banked
  7524  0033D2  6FC2               	movwf	(begin@ptr+1)& (0+255),b
  7525  0033D4  0E28               	movlw	40
  7526  0033D6  0100               	movlb	0	; () banked
  7527  0033D8  6FC3               	movwf	begin@maxSize& (0+255),b
  7528  0033DA  0E07               	movlw	7
  7529  0033DC  0100               	movlb	0	; () banked
  7530  0033DE  6FC4               	movwf	begin@givenAddress& (0+255),b
  7531  0033E0  0E00               	movlw	0
  7532  0033E2  0100               	movlb	0	; () banked
  7533  0033E4  6FC5               	movwf	begin@error& (0+255),b
  7534  0033E6  0E82               	movlw	low _Send_put
  7535  0033E8  0100               	movlb	0	; () banked
  7536  0033EA  6FC6               	movwf	begin@stufftosend& (0+255),b
  7537  0033EC  0E37               	movlw	high _Send_put
  7538  0033EE  0100               	movlb	0	; () banked
  7539  0033F0  6FC7               	movwf	(begin@stufftosend+1)& (0+255),b
  7540  0033F2  0E6A               	movlw	low _Receive_get
  7541  0033F4  0100               	movlb	0	; () banked
  7542  0033F6  6FC8               	movwf	begin@stufftoreceive& (0+255),b
  7543  0033F8  0E3A               	movlw	high _Receive_get
  7544  0033FA  0100               	movlb	0	; () banked
  7545  0033FC  6FC9               	movwf	(begin@stufftoreceive+1)& (0+255),b
  7546  0033FE  0E06               	movlw	low _Receive_available
  7547  003400  0100               	movlb	0	; () banked
  7548  003402  6FCA               	movwf	begin@stuffavailable& (0+255),b
  7549  003404  0E3A               	movlw	high _Receive_available
  7550  003406  0100               	movlb	0	; () banked
  7551  003408  6FCB               	movwf	(begin@stuffavailable+1)& (0+255),b
  7552  00340A  0E5C               	movlw	low _Receive_peek
  7553  00340C  0100               	movlb	0	; () banked
  7554  00340E  6FCC               	movwf	begin@stuffpeek& (0+255),b
  7555  003410  0E3A               	movlw	high _Receive_peek
  7556  003412  0100               	movlb	0	; () banked
  7557  003414  6FCD               	movwf	(begin@stuffpeek+1)& (0+255),b
  7558  003416  EC3F  F01A         	call	_begin	;wreg free
  7559  00341A  0012               	return		;funcret
  7560  00341C                     __end_of_SYSTEM_Initialize:
  7561                           	opt stack 0
  7562                           tosu	equ	0xFFF
  7563                           tosh	equ	0xFFE
  7564                           tosl	equ	0xFFD
  7565                           pclath	equ	0xFFA
  7566                           tblptru	equ	0xFF8
  7567                           tblptrh	equ	0xFF7
  7568                           tblptrl	equ	0xFF6
  7569                           tablat	equ	0xFF5
  7570                           prodh	equ	0xFF4
  7571                           prodl	equ	0xFF3
  7572                           intcon	equ	0xFF2
  7573                           postinc0	equ	0xFEE
  7574                           wreg	equ	0xFE8
  7575                           postinc1	equ	0xFE6
  7576                           postdec1	equ	0xFE5
  7577                           fsr1h	equ	0xFE2
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           postdec2	equ	0xFDD
  7582                           plusw2	equ	0xFDB
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _begin *****************
  7588 ;; Defined at:
  7589 ;;		line 18 in file "FastTransfer.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  7592 ;;		 -> receiveArray(40), 
  7593 ;;  maxSize         1    2[BANK0 ] unsigned char 
  7594 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  7595 ;;  error           1    4[BANK0 ] unsigned char 
  7596 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  7597 ;;		 -> Send_put(0), 
  7598 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  7599 ;;		 -> Receive_get(1), 
  7600 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  7601 ;;		 -> Receive_available(2), 
  7602 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  7603 ;;		 -> Receive_peek(1), 
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;		None
  7606 ;; Return value:  Size  Location     Type
  7607 ;;		None               void
  7608 ;; Registers used:
  7609 ;;		wreg, status,2, status,0, cstack
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7615 ;;      Params:         0      13       0       0       0       0       0
  7616 ;;      Locals:         0       0       0       0       0       0       0
  7617 ;;      Temps:          0       0       0       0       0       0       0
  7618 ;;      Totals:         0      13       0       0       0       0       0
  7619 ;;Total ram usage:       13 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    5
  7622 ;; This function calls:
  7623 ;;		___awdiv
  7624 ;; This function is called by:
  7625 ;;		_SYSTEM_Initialize
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text34
  7630  00347E                     __ptext34:
  7631                           	opt stack 0
  7632  00347E                     _begin:
  7633                           	opt stack 24
  7634                           
  7635                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  7636                           
  7637                           ;incstack = 0
  7638  00347E  C0C1  F096         	movff	begin@ptr,_receiveArrayAddress
  7639  003482  C0C2  F097         	movff	begin@ptr+1,_receiveArrayAddress+1
  7640                           
  7641                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  7642  003486  C0C4  F03F         	movff	begin@givenAddress,_moduleAddress
  7643                           
  7644                           ;FastTransfer.c: 21: serial_write = stufftosend;
  7645  00348A  C0C6  F036         	movff	begin@stufftosend,_serial_write
  7646  00348E  C0C7  F037         	movff	begin@stufftosend+1,_serial_write+1
  7647                           
  7648                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  7649  003492  C0CA  F032         	movff	begin@stuffavailable,_serial_available
  7650  003496  C0CB  F033         	movff	begin@stuffavailable+1,_serial_available+1
  7651                           
  7652                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  7653  00349A  C0CC  F09A         	movff	begin@stuffpeek,_serial_peek
  7654  00349E  C0CD  F09B         	movff	begin@stuffpeek+1,_serial_peek+1
  7655                           
  7656                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  7657  0034A2  C0C8  F034         	movff	begin@stufftoreceive,_serial_read
  7658  0034A6  C0C9  F035         	movff	begin@stufftoreceive+1,_serial_read+1
  7659                           
  7660                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  7661  0034AA  C0C3  F01B         	movff	begin@maxSize,___awdiv@dividend
  7662  0034AE  6A1C               	clrf	___awdiv@dividend+1,c
  7663  0034B0  0E00               	movlw	0
  7664  0034B2  6E1E               	movwf	___awdiv@divisor+1,c
  7665  0034B4  0E02               	movlw	2
  7666  0034B6  6E1D               	movwf	___awdiv@divisor,c
  7667  0034B8  EC1B  F019         	call	___awdiv	;wreg free
  7668  0034BC  501B               	movf	?___awdiv,w,c
  7669  0034BE  6E3E               	movwf	_maxDataAddress,c
  7670                           
  7671                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  7672  0034C0  0E00               	movlw	low _ring_buffer
  7673  0034C2  0100               	movlb	0	; () banked
  7674  0034C4  6F98               	movwf	_sendStructAddress& (0+255),b
  7675  0034C6  0E02               	movlw	high _ring_buffer
  7676  0034C8  0100               	movlb	0	; () banked
  7677  0034CA  6F99               	movwf	(_sendStructAddress+1)& (0+255),b
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;FastTransfer.c: 27: AKNAKsend = error;
  7681  0034CC  C0C5  F03A         	movff	begin@error,_AKNAKsend
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  7685  0034D0  0E00               	movlw	0
  7686  0034D2  0100               	movlb	0	; () banked
  7687  0034D4  6F8F               	movwf	(_alignErrorCounter+1)& (0+255),b
  7688  0034D6  0E00               	movlw	0
  7689  0034D8  6F8E               	movwf	_alignErrorCounter& (0+255),b
  7690                           
  7691                           ; BSR set to: 0
  7692  0034DA  0012               	return		;funcret
  7693  0034DC                     __end_of_begin:
  7694                           	opt stack 0
  7695                           tosu	equ	0xFFF
  7696                           tosh	equ	0xFFE
  7697                           tosl	equ	0xFFD
  7698                           pclath	equ	0xFFA
  7699                           tblptru	equ	0xFF8
  7700                           tblptrh	equ	0xFF7
  7701                           tblptrl	equ	0xFF6
  7702                           tablat	equ	0xFF5
  7703                           prodh	equ	0xFF4
  7704                           prodl	equ	0xFF3
  7705                           intcon	equ	0xFF2
  7706                           postinc0	equ	0xFEE
  7707                           wreg	equ	0xFE8
  7708                           postinc1	equ	0xFE6
  7709                           postdec1	equ	0xFE5
  7710                           fsr1h	equ	0xFE2
  7711                           fsr1l	equ	0xFE1
  7712                           indf2	equ	0xFDF
  7713                           postinc2	equ	0xFDE
  7714                           postdec2	equ	0xFDD
  7715                           plusw2	equ	0xFDB
  7716                           fsr2h	equ	0xFDA
  7717                           fsr2l	equ	0xFD9
  7718                           status	equ	0xFD8
  7719                           
  7720 ;; *************** function ___awdiv *****************
  7721 ;; Defined at:
  7722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  7723 ;; Parameters:    Size  Location     Type
  7724 ;;  dividend        2   26[COMRAM] int 
  7725 ;;  divisor         2   28[COMRAM] int 
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;  quotient        2   32[COMRAM] int 
  7728 ;;  sign            1   31[COMRAM] unsigned char 
  7729 ;;  counter         1   30[COMRAM] unsigned char 
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  2   26[COMRAM] int 
  7732 ;; Registers used:
  7733 ;;		wreg, status,2, status,0
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7739 ;;      Params:         4       0       0       0       0       0       0
  7740 ;;      Locals:         4       0       0       0       0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0
  7742 ;;      Totals:         8       0       0       0       0       0       0
  7743 ;;Total ram usage:        8 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    4
  7746 ;; This function calls:
  7747 ;;		Nothing
  7748 ;; This function is called by:
  7749 ;;		_Temp_Convert
  7750 ;;		_begin
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           	psect	text35
  7755  003236                     __ptext35:
  7756                           	opt stack 0
  7757  003236                     ___awdiv:
  7758                           	opt stack 25
  7759                           
  7760                           ; BSR set to: 0
  7761                           ;incstack = 0
  7762  003236  0E00               	movlw	0
  7763  003238  6E20               	movwf	___awdiv@sign,c
  7764  00323A  AE1E               	btfss	___awdiv@divisor+1,7,c
  7765  00323C  D006               	goto	l4739
  7766  00323E  6C1D               	negf	___awdiv@divisor,c
  7767  003240  1E1E               	comf	___awdiv@divisor+1,f,c
  7768  003242  B0D8               	btfsc	status,0,c
  7769  003244  2A1E               	incf	___awdiv@divisor+1,f,c
  7770  003246  0E01               	movlw	1
  7771  003248  6E20               	movwf	___awdiv@sign,c
  7772  00324A                     l4739:
  7773  00324A  AE1C               	btfss	___awdiv@dividend+1,7,c
  7774  00324C  D006               	goto	l4745
  7775  00324E  6C1B               	negf	___awdiv@dividend,c
  7776  003250  1E1C               	comf	___awdiv@dividend+1,f,c
  7777  003252  B0D8               	btfsc	status,0,c
  7778  003254  2A1C               	incf	___awdiv@dividend+1,f,c
  7779  003256  0E01               	movlw	1
  7780  003258  1A20               	xorwf	___awdiv@sign,f,c
  7781  00325A                     l4745:
  7782  00325A  0E00               	movlw	0
  7783  00325C  6E22               	movwf	___awdiv@quotient+1,c
  7784  00325E  0E00               	movlw	0
  7785  003260  6E21               	movwf	___awdiv@quotient,c
  7786  003262  501D               	movf	___awdiv@divisor,w,c
  7787  003264  101E               	iorwf	___awdiv@divisor+1,w,c
  7788  003266  B4D8               	btfsc	status,2,c
  7789  003268  D01C               	goto	l4767
  7790  00326A  0E01               	movlw	1
  7791  00326C  6E1F               	movwf	___awdiv@counter,c
  7792  00326E  D004               	goto	l4753
  7793  003270                     l4751:
  7794  003270  90D8               	bcf	status,0,c
  7795  003272  361D               	rlcf	___awdiv@divisor,f,c
  7796  003274  361E               	rlcf	___awdiv@divisor+1,f,c
  7797  003276  2A1F               	incf	___awdiv@counter,f,c
  7798  003278                     l4753:
  7799  003278  AE1E               	btfss	___awdiv@divisor+1,7,c
  7800  00327A  D7FA               	goto	l4751
  7801  00327C                     l4755:
  7802  00327C  90D8               	bcf	status,0,c
  7803  00327E  3621               	rlcf	___awdiv@quotient,f,c
  7804  003280  3622               	rlcf	___awdiv@quotient+1,f,c
  7805  003282  501D               	movf	___awdiv@divisor,w,c
  7806  003284  5C1B               	subwf	___awdiv@dividend,w,c
  7807  003286  501E               	movf	___awdiv@divisor+1,w,c
  7808  003288  581C               	subwfb	___awdiv@dividend+1,w,c
  7809  00328A  A0D8               	btfss	status,0,c
  7810  00328C  D005               	goto	l4763
  7811  00328E  501D               	movf	___awdiv@divisor,w,c
  7812  003290  5E1B               	subwf	___awdiv@dividend,f,c
  7813  003292  501E               	movf	___awdiv@divisor+1,w,c
  7814  003294  5A1C               	subwfb	___awdiv@dividend+1,f,c
  7815  003296  8021               	bsf	___awdiv@quotient,0,c
  7816  003298                     l4763:
  7817  003298  90D8               	bcf	status,0,c
  7818  00329A  321E               	rrcf	___awdiv@divisor+1,f,c
  7819  00329C  321D               	rrcf	___awdiv@divisor,f,c
  7820  00329E  2E1F               	decfsz	___awdiv@counter,f,c
  7821  0032A0  D7ED               	goto	l4755
  7822  0032A2                     l4767:
  7823  0032A2  5020               	movf	___awdiv@sign,w,c
  7824  0032A4  B4D8               	btfsc	status,2,c
  7825  0032A6  D004               	goto	l4771
  7826  0032A8  6C21               	negf	___awdiv@quotient,c
  7827  0032AA  1E22               	comf	___awdiv@quotient+1,f,c
  7828  0032AC  B0D8               	btfsc	status,0,c
  7829  0032AE  2A22               	incf	___awdiv@quotient+1,f,c
  7830  0032B0                     l4771:
  7831  0032B0  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  7832  0032B4  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  7833  0032B8  0012               	return	
  7834  0032BA                     __end_of___awdiv:
  7835                           	opt stack 0
  7836                           tosu	equ	0xFFF
  7837                           tosh	equ	0xFFE
  7838                           tosl	equ	0xFFD
  7839                           pclath	equ	0xFFA
  7840                           tblptru	equ	0xFF8
  7841                           tblptrh	equ	0xFF7
  7842                           tblptrl	equ	0xFF6
  7843                           tablat	equ	0xFF5
  7844                           prodh	equ	0xFF4
  7845                           prodl	equ	0xFF3
  7846                           intcon	equ	0xFF2
  7847                           postinc0	equ	0xFEE
  7848                           wreg	equ	0xFE8
  7849                           postinc1	equ	0xFE6
  7850                           postdec1	equ	0xFE5
  7851                           fsr1h	equ	0xFE2
  7852                           fsr1l	equ	0xFE1
  7853                           indf2	equ	0xFDF
  7854                           postinc2	equ	0xFDE
  7855                           postdec2	equ	0xFDD
  7856                           plusw2	equ	0xFDB
  7857                           fsr2h	equ	0xFDA
  7858                           fsr2l	equ	0xFD9
  7859                           status	equ	0xFD8
  7860                           
  7861 ;; *************** function _TMR1_Initialize *****************
  7862 ;; Defined at:
  7863 ;;		line 18 in file "mcc_generated_files/tmr1.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;		None
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;		None
  7868 ;; Return value:  Size  Location     Type
  7869 ;;		None               void
  7870 ;; Registers used:
  7871 ;;		wreg, status,2, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7877 ;;      Params:         0       0       0       0       0       0       0
  7878 ;;      Locals:         0       0       0       0       0       0       0
  7879 ;;      Temps:          0       0       0       0       0       0       0
  7880 ;;      Totals:         0       0       0       0       0       0       0
  7881 ;;Total ram usage:        0 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    5
  7884 ;; This function calls:
  7885 ;;		_TMR1_StartTimer
  7886 ;; This function is called by:
  7887 ;;		_SYSTEM_Initialize
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           	psect	text36
  7892  003924                     __ptext36:
  7893                           	opt stack 0
  7894  003924                     _TMR1_Initialize:
  7895                           	opt stack 24
  7896                           
  7897                           ;tmr1.c: 23: T1CON = 0x30;
  7898                           
  7899                           ;incstack = 0
  7900  003924  0E30               	movlw	48
  7901  003926  6ECD               	movwf	4045,c	;volatile
  7902                           
  7903                           ;tmr1.c: 26: T1GCON = 0x00;
  7904  003928  0E00               	movlw	0
  7905  00392A  6ECC               	movwf	4044,c	;volatile
  7906                           
  7907                           ;tmr1.c: 29: TMR1H = 0x0B;
  7908  00392C  0E0B               	movlw	11
  7909  00392E  6ECF               	movwf	4047,c	;volatile
  7910                           
  7911                           ;tmr1.c: 32: TMR1L = 0xDC;
  7912  003930  0EDC               	movlw	220
  7913  003932  6ECE               	movwf	4046,c	;volatile
  7914                           
  7915                           ;tmr1.c: 35: timer1ReloadVal=TMR1;
  7916  003934  CFCE F038          	movff	4046,_timer1ReloadVal	;volatile
  7917  003938  CFCF F039          	movff	4047,_timer1ReloadVal+1	;volatile
  7918                           
  7919                           ;tmr1.c: 38: PIR1bits.TMR1IF = 0;
  7920  00393C  909E               	bcf	3998,0,c	;volatile
  7921                           
  7922                           ;tmr1.c: 41: PIE1bits.TMR1IE = 1;
  7923  00393E  809D               	bsf	3997,0,c	;volatile
  7924                           
  7925                           ;tmr1.c: 44: TMR1_StartTimer();
  7926  003940  EC4F  F01D         	call	_TMR1_StartTimer	;wreg free
  7927  003944  0012               	return		;funcret
  7928  003946                     __end_of_TMR1_Initialize:
  7929                           	opt stack 0
  7930                           tosu	equ	0xFFF
  7931                           tosh	equ	0xFFE
  7932                           tosl	equ	0xFFD
  7933                           pclath	equ	0xFFA
  7934                           tblptru	equ	0xFF8
  7935                           tblptrh	equ	0xFF7
  7936                           tblptrl	equ	0xFF6
  7937                           tablat	equ	0xFF5
  7938                           prodh	equ	0xFF4
  7939                           prodl	equ	0xFF3
  7940                           intcon	equ	0xFF2
  7941                           postinc0	equ	0xFEE
  7942                           wreg	equ	0xFE8
  7943                           postinc1	equ	0xFE6
  7944                           postdec1	equ	0xFE5
  7945                           fsr1h	equ	0xFE2
  7946                           fsr1l	equ	0xFE1
  7947                           indf2	equ	0xFDF
  7948                           postinc2	equ	0xFDE
  7949                           postdec2	equ	0xFDD
  7950                           plusw2	equ	0xFDB
  7951                           fsr2h	equ	0xFDA
  7952                           fsr2l	equ	0xFD9
  7953                           status	equ	0xFD8
  7954                           
  7955 ;; *************** function _TMR1_StartTimer *****************
  7956 ;; Defined at:
  7957 ;;		line 47 in file "mcc_generated_files/tmr1.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;		None
  7962 ;; Return value:  Size  Location     Type
  7963 ;;		None               void
  7964 ;; Registers used:
  7965 ;;		None
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7971 ;;      Params:         0       0       0       0       0       0       0
  7972 ;;      Locals:         0       0       0       0       0       0       0
  7973 ;;      Temps:          0       0       0       0       0       0       0
  7974 ;;      Totals:         0       0       0       0       0       0       0
  7975 ;;Total ram usage:        0 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    4
  7978 ;; This function calls:
  7979 ;;		Nothing
  7980 ;; This function is called by:
  7981 ;;		_TMR1_Initialize
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           	psect	text37
  7986  003A9E                     __ptext37:
  7987                           	opt stack 0
  7988  003A9E                     _TMR1_StartTimer:
  7989                           	opt stack 24
  7990                           
  7991                           ;tmr1.c: 50: T1CONbits.TMR1ON = 1;
  7992                           
  7993                           ;incstack = 0
  7994  003A9E  80CD               	bsf	4045,0,c	;volatile
  7995  003AA0  0012               	return		;funcret
  7996  003AA2                     __end_of_TMR1_StartTimer:
  7997                           	opt stack 0
  7998                           tosu	equ	0xFFF
  7999                           tosh	equ	0xFFE
  8000                           tosl	equ	0xFFD
  8001                           pclath	equ	0xFFA
  8002                           tblptru	equ	0xFF8
  8003                           tblptrh	equ	0xFF7
  8004                           tblptrl	equ	0xFF6
  8005                           tablat	equ	0xFF5
  8006                           prodh	equ	0xFF4
  8007                           prodl	equ	0xFF3
  8008                           intcon	equ	0xFF2
  8009                           postinc0	equ	0xFEE
  8010                           wreg	equ	0xFE8
  8011                           postinc1	equ	0xFE6
  8012                           postdec1	equ	0xFE5
  8013                           fsr1h	equ	0xFE2
  8014                           fsr1l	equ	0xFE1
  8015                           indf2	equ	0xFDF
  8016                           postinc2	equ	0xFDE
  8017                           postdec2	equ	0xFDD
  8018                           plusw2	equ	0xFDB
  8019                           fsr2h	equ	0xFDA
  8020                           fsr2l	equ	0xFD9
  8021                           status	equ	0xFD8
  8022                           
  8023 ;; *************** function _PIN_MANAGER_Initialize *****************
  8024 ;; Defined at:
  8025 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;		None
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;		None
  8030 ;; Return value:  Size  Location     Type
  8031 ;;		None               void
  8032 ;; Registers used:
  8033 ;;		wreg, status,2
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8039 ;;      Params:         0       0       0       0       0       0       0
  8040 ;;      Locals:         0       0       0       0       0       0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0
  8042 ;;      Totals:         0       0       0       0       0       0       0
  8043 ;;Total ram usage:        0 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    4
  8046 ;; This function calls:
  8047 ;;		Nothing
  8048 ;; This function is called by:
  8049 ;;		_SYSTEM_Initialize
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text38
  8054  0034DC                     __ptext38:
  8055                           	opt stack 0
  8056  0034DC                     _PIN_MANAGER_Initialize:
  8057                           	opt stack 25
  8058                           
  8059                           ;pin_manager.c: 8: LATA = 0x00;
  8060                           
  8061                           ;incstack = 0
  8062  0034DC  0E00               	movlw	0
  8063  0034DE  6E89               	movwf	3977,c	;volatile
  8064                           
  8065                           ;pin_manager.c: 9: TRISA = 0xAE;
  8066  0034E0  0EAE               	movlw	174
  8067  0034E2  6E92               	movwf	3986,c	;volatile
  8068                           
  8069                           ;pin_manager.c: 10: ANSELA = 0x2E;
  8070  0034E4  0E2E               	movlw	46
  8071  0034E6  010F               	movlb	15	; () banked
  8072  0034E8  6F38               	movwf	56,b	;volatile
  8073                           
  8074                           ;pin_manager.c: 12: LATB = 0x00;
  8075  0034EA  0E00               	movlw	0
  8076  0034EC  6E8A               	movwf	3978,c	;volatile
  8077                           
  8078                           ;pin_manager.c: 13: TRISB = 0xF4;
  8079  0034EE  0EF4               	movlw	244
  8080  0034F0  6E93               	movwf	3987,c	;volatile
  8081                           
  8082                           ;pin_manager.c: 14: ANSELB = 0x34;
  8083  0034F2  0E34               	movlw	52
  8084  0034F4  010F               	movlb	15	; () banked
  8085  0034F6  6F39               	movwf	57,b	;volatile
  8086                           
  8087                           ;pin_manager.c: 15: WPUB = 0x00;
  8088  0034F8  0E00               	movlw	0
  8089  0034FA  6E61               	movwf	3937,c	;volatile
  8090                           
  8091                           ;pin_manager.c: 17: LATC = 0x48;
  8092  0034FC  0E48               	movlw	72
  8093  0034FE  6E8B               	movwf	3979,c	;volatile
  8094                           
  8095                           ;pin_manager.c: 18: TRISC = 0xC4;
  8096  003500  0EC4               	movlw	196
  8097  003502  6E94               	movwf	3988,c	;volatile
  8098                           
  8099                           ;pin_manager.c: 19: ANSELC = 0x04;
  8100  003504  0E04               	movlw	4
  8101  003506  010F               	movlb	15	; () banked
  8102  003508  6F3A               	movwf	58,b	;volatile
  8103                           
  8104                           ;pin_manager.c: 21: LATD = 0x00;
  8105  00350A  0E00               	movlw	0
  8106  00350C  6E8C               	movwf	3980,c	;volatile
  8107                           
  8108                           ;pin_manager.c: 22: TRISD = 0xD1;
  8109  00350E  0ED1               	movlw	209
  8110  003510  6E95               	movwf	3989,c	;volatile
  8111                           
  8112                           ;pin_manager.c: 23: ANSELD = 0xD1;
  8113  003512  0ED1               	movlw	209
  8114  003514  010F               	movlb	15	; () banked
  8115  003516  6F3B               	movwf	59,b	;volatile
  8116                           
  8117                           ;pin_manager.c: 25: LATE = 0x00;
  8118  003518  0E00               	movlw	0
  8119  00351A  6E8D               	movwf	3981,c	;volatile
  8120                           
  8121                           ;pin_manager.c: 26: TRISE = 0x04;
  8122  00351C  0E04               	movlw	4
  8123  00351E  6E96               	movwf	3990,c	;volatile
  8124                           
  8125                           ;pin_manager.c: 27: ANSELE = 0x04;
  8126  003520  0E04               	movlw	4
  8127  003522  010F               	movlb	15	; () banked
  8128  003524  6F3C               	movwf	60,b	;volatile
  8129                           
  8130                           ; BSR set to: 15
  8131                           ;pin_manager.c: 29: TRISCbits.TRISC6 = 1;
  8132  003526  8C94               	bsf	3988,6,c	;volatile
  8133                           
  8134                           ; BSR set to: 15
  8135                           ;pin_manager.c: 30: TRISCbits.TRISC7 = 1;
  8136  003528  8E94               	bsf	3988,7,c	;volatile
  8137                           
  8138                           ; BSR set to: 15
  8139                           ;pin_manager.c: 34: INTCON2bits.nRBPU = 0x01;
  8140  00352A  8EF1               	bsf	intcon2,7,c	;volatile
  8141                           
  8142                           ; BSR set to: 15
  8143  00352C  0012               	return		;funcret
  8144  00352E                     __end_of_PIN_MANAGER_Initialize:
  8145                           	opt stack 0
  8146                           tosu	equ	0xFFF
  8147                           tosh	equ	0xFFE
  8148                           tosl	equ	0xFFD
  8149                           pclath	equ	0xFFA
  8150                           tblptru	equ	0xFF8
  8151                           tblptrh	equ	0xFF7
  8152                           tblptrl	equ	0xFF6
  8153                           tablat	equ	0xFF5
  8154                           prodh	equ	0xFF4
  8155                           prodl	equ	0xFF3
  8156                           intcon	equ	0xFF2
  8157                           intcon2	equ	0xFF1
  8158                           postinc0	equ	0xFEE
  8159                           wreg	equ	0xFE8
  8160                           postinc1	equ	0xFE6
  8161                           postdec1	equ	0xFE5
  8162                           fsr1h	equ	0xFE2
  8163                           fsr1l	equ	0xFE1
  8164                           indf2	equ	0xFDF
  8165                           postinc2	equ	0xFDE
  8166                           postdec2	equ	0xFDD
  8167                           plusw2	equ	0xFDB
  8168                           fsr2h	equ	0xFDA
  8169                           fsr2l	equ	0xFD9
  8170                           status	equ	0xFD8
  8171                           
  8172 ;; *************** function _OSCILLATOR_Initialize *****************
  8173 ;; Defined at:
  8174 ;;		line 124 in file "mcc_generated_files/mcc.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;		None               void
  8181 ;; Registers used:
  8182 ;;		wreg, status,2
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8188 ;;      Params:         0       0       0       0       0       0       0
  8189 ;;      Locals:         0       0       0       0       0       0       0
  8190 ;;      Temps:          0       0       0       0       0       0       0
  8191 ;;      Totals:         0       0       0       0       0       0       0
  8192 ;;Total ram usage:        0 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    4
  8195 ;; This function calls:
  8196 ;;		Nothing
  8197 ;; This function is called by:
  8198 ;;		_SYSTEM_Initialize
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           	psect	text39
  8203  003A78                     __ptext39:
  8204                           	opt stack 0
  8205  003A78                     _OSCILLATOR_Initialize:
  8206                           	opt stack 25
  8207                           
  8208                           ;mcc.c: 126: OSCCON = 0x62;
  8209                           
  8210                           ; BSR set to: 15
  8211                           ;incstack = 0
  8212  003A78  0E62               	movlw	98
  8213  003A7A  6ED3               	movwf	4051,c	;volatile
  8214                           
  8215                           ;mcc.c: 128: OSCCON2 = 0x04;
  8216  003A7C  0E04               	movlw	4
  8217  003A7E  6ED2               	movwf	4050,c	;volatile
  8218                           
  8219                           ;mcc.c: 130: OSCTUNE = 0x00;
  8220  003A80  0E00               	movlw	0
  8221  003A82  6E9B               	movwf	3995,c	;volatile
  8222  003A84  0012               	return		;funcret
  8223  003A86                     __end_of_OSCILLATOR_Initialize:
  8224                           	opt stack 0
  8225                           tosu	equ	0xFFF
  8226                           tosh	equ	0xFFE
  8227                           tosl	equ	0xFFD
  8228                           pclath	equ	0xFFA
  8229                           tblptru	equ	0xFF8
  8230                           tblptrh	equ	0xFF7
  8231                           tblptrl	equ	0xFF6
  8232                           tablat	equ	0xFF5
  8233                           prodh	equ	0xFF4
  8234                           prodl	equ	0xFF3
  8235                           intcon	equ	0xFF2
  8236                           intcon2	equ	0xFF1
  8237                           postinc0	equ	0xFEE
  8238                           wreg	equ	0xFE8
  8239                           postinc1	equ	0xFE6
  8240                           postdec1	equ	0xFE5
  8241                           fsr1h	equ	0xFE2
  8242                           fsr1l	equ	0xFE1
  8243                           indf2	equ	0xFDF
  8244                           postinc2	equ	0xFDE
  8245                           postdec2	equ	0xFDD
  8246                           plusw2	equ	0xFDB
  8247                           fsr2h	equ	0xFDA
  8248                           fsr2l	equ	0xFD9
  8249                           status	equ	0xFD8
  8250                           
  8251 ;; *************** function _INTERRUPT_Initialize *****************
  8252 ;; Defined at:
  8253 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;		None
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;		None
  8258 ;; Return value:  Size  Location     Type
  8259 ;;		None               void
  8260 ;; Registers used:
  8261 ;;		None
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8267 ;;      Params:         0       0       0       0       0       0       0
  8268 ;;      Locals:         0       0       0       0       0       0       0
  8269 ;;      Temps:          0       0       0       0       0       0       0
  8270 ;;      Totals:         0       0       0       0       0       0       0
  8271 ;;Total ram usage:        0 bytes
  8272 ;; Hardware stack levels used:    1
  8273 ;; Hardware stack levels required when called:    4
  8274 ;; This function calls:
  8275 ;;		Nothing
  8276 ;; This function is called by:
  8277 ;;		_SYSTEM_Initialize
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           	psect	text40
  8282  003A92                     __ptext40:
  8283                           	opt stack 0
  8284  003A92                     _INTERRUPT_Initialize:
  8285                           	opt stack 25
  8286                           
  8287                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  8288                           
  8289                           ;incstack = 0
  8290  003A92  9ED0               	bcf	4048,7,c	;volatile
  8291                           
  8292                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  8293  003A94  9A9F               	bcf	3999,5,c	;volatile
  8294                           
  8295                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  8296  003A96  9C9F               	bcf	3999,6,c	;volatile
  8297                           
  8298                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  8299  003A98  909F               	bcf	3999,0,c	;volatile
  8300                           
  8301                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  8302  003A9A  989F               	bcf	3999,4,c	;volatile
  8303  003A9C  0012               	return		;funcret
  8304  003A9E                     __end_of_INTERRUPT_Initialize:
  8305                           	opt stack 0
  8306                           tosu	equ	0xFFF
  8307                           tosh	equ	0xFFE
  8308                           tosl	equ	0xFFD
  8309                           pclath	equ	0xFFA
  8310                           tblptru	equ	0xFF8
  8311                           tblptrh	equ	0xFF7
  8312                           tblptrl	equ	0xFF6
  8313                           tablat	equ	0xFF5
  8314                           prodh	equ	0xFF4
  8315                           prodl	equ	0xFF3
  8316                           intcon	equ	0xFF2
  8317                           intcon2	equ	0xFF1
  8318                           postinc0	equ	0xFEE
  8319                           wreg	equ	0xFE8
  8320                           postinc1	equ	0xFE6
  8321                           postdec1	equ	0xFE5
  8322                           fsr1h	equ	0xFE2
  8323                           fsr1l	equ	0xFE1
  8324                           indf2	equ	0xFDF
  8325                           postinc2	equ	0xFDE
  8326                           postdec2	equ	0xFDD
  8327                           plusw2	equ	0xFDB
  8328                           fsr2h	equ	0xFDA
  8329                           fsr2l	equ	0xFD9
  8330                           status	equ	0xFD8
  8331                           
  8332 ;; *************** function _EUSART1_Initialize *****************
  8333 ;; Defined at:
  8334 ;;		line 21 in file "UART.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;		None
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;		None               void
  8341 ;; Registers used:
  8342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8348 ;;      Params:         0       0       0       0       0       0       0
  8349 ;;      Locals:         0       0       0       0       0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0
  8351 ;;      Totals:         0       0       0       0       0       0       0
  8352 ;;Total ram usage:        0 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    6
  8355 ;; This function calls:
  8356 ;;		_UART_buff_init
  8357 ;; This function is called by:
  8358 ;;		_SYSTEM_Initialize
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           	psect	text41
  8363  0036A2                     __ptext41:
  8364                           	opt stack 0
  8365  0036A2                     _EUSART1_Initialize:
  8366                           	opt stack 23
  8367                           
  8368                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  8369                           
  8370                           ;incstack = 0
  8371  0036A2  9A9D               	bcf	3997,5,c	;volatile
  8372                           
  8373                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  8374  0036A4  989D               	bcf	3997,4,c	;volatile
  8375                           
  8376                           ;UART.c: 29: BAUD1CON = 0x48;
  8377  0036A6  0E48               	movlw	72
  8378  0036A8  6EB8               	movwf	4024,c	;volatile
  8379                           
  8380                           ;UART.c: 32: RC1STA = 0x98;
  8381  0036AA  0E98               	movlw	152
  8382  0036AC  6EAB               	movwf	4011,c	;volatile
  8383                           
  8384                           ;UART.c: 35: TX1STA = 0x26;
  8385  0036AE  0E26               	movlw	38
  8386  0036B0  6EAC               	movwf	4012,c	;volatile
  8387                           
  8388                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  8389  0036B2  0E33               	movlw	51
  8390  0036B4  6EAF               	movwf	4015,c	;volatile
  8391                           
  8392                           ;UART.c: 41: SPBRGH1 = 0x00;
  8393  0036B6  0E00               	movlw	0
  8394  0036B8  6EB0               	movwf	4016,c	;volatile
  8395                           
  8396                           ;UART.c: 44: TXREG1 = 0x00;
  8397  0036BA  0E00               	movlw	0
  8398  0036BC  6EAD               	movwf	4013,c	;volatile
  8399                           
  8400                           ;UART.c: 47: RCREG1 = 0x00;
  8401  0036BE  0E00               	movlw	0
  8402  0036C0  6EAE               	movwf	4014,c	;volatile
  8403                           
  8404                           ;UART.c: 49: UART_buff_init(&input_buffer);
  8405  0036C2  0E00               	movlw	low _input_buffer
  8406  0036C4  6E23               	movwf	UART_buff_init@_this,c
  8407  0036C6  0E04               	movlw	high _input_buffer
  8408  0036C8  6E24               	movwf	UART_buff_init@_this+1,c
  8409  0036CA  ECB2  F01C         	call	_UART_buff_init	;wreg free
  8410                           
  8411                           ;UART.c: 50: UART_buff_init(&output_buffer);
  8412  0036CE  0E00               	movlw	low _output_buffer
  8413  0036D0  6E23               	movwf	UART_buff_init@_this,c
  8414  0036D2  0E05               	movlw	high _output_buffer
  8415  0036D4  6E24               	movwf	UART_buff_init@_this+1,c
  8416  0036D6  ECB2  F01C         	call	_UART_buff_init	;wreg free
  8417                           
  8418                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  8419  0036DA  8A9D               	bsf	3997,5,c	;volatile
  8420  0036DC  0012               	return		;funcret
  8421  0036DE                     __end_of_EUSART1_Initialize:
  8422                           	opt stack 0
  8423                           tosu	equ	0xFFF
  8424                           tosh	equ	0xFFE
  8425                           tosl	equ	0xFFD
  8426                           pclath	equ	0xFFA
  8427                           tblptru	equ	0xFF8
  8428                           tblptrh	equ	0xFF7
  8429                           tblptrl	equ	0xFF6
  8430                           tablat	equ	0xFF5
  8431                           prodh	equ	0xFF4
  8432                           prodl	equ	0xFF3
  8433                           intcon	equ	0xFF2
  8434                           intcon2	equ	0xFF1
  8435                           postinc0	equ	0xFEE
  8436                           wreg	equ	0xFE8
  8437                           postinc1	equ	0xFE6
  8438                           postdec1	equ	0xFE5
  8439                           fsr1h	equ	0xFE2
  8440                           fsr1l	equ	0xFE1
  8441                           indf2	equ	0xFDF
  8442                           postinc2	equ	0xFDE
  8443                           postdec2	equ	0xFDD
  8444                           plusw2	equ	0xFDB
  8445                           fsr2h	equ	0xFDA
  8446                           fsr2l	equ	0xFD9
  8447                           status	equ	0xFD8
  8448                           
  8449 ;; *************** function _UART_buff_init *****************
  8450 ;; Defined at:
  8451 ;;		line 56 in file "UART.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  8454 ;;		 -> output_buffer(206), input_buffer(206), 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;		None
  8457 ;; Return value:  Size  Location     Type
  8458 ;;		None               void
  8459 ;; Registers used:
  8460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8461 ;; Tracked objects:
  8462 ;;		On entry : 0/0
  8463 ;;		On exit  : 0/0
  8464 ;;		Unchanged: 0/0
  8465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8466 ;;      Params:         2       0       0       0       0       0       0
  8467 ;;      Locals:         0       0       0       0       0       0       0
  8468 ;;      Temps:          0       0       0       0       0       0       0
  8469 ;;      Totals:         2       0       0       0       0       0       0
  8470 ;;Total ram usage:        2 bytes
  8471 ;; Hardware stack levels used:    1
  8472 ;; Hardware stack levels required when called:    5
  8473 ;; This function calls:
  8474 ;;		_memset
  8475 ;; This function is called by:
  8476 ;;		_EUSART1_Initialize
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           	psect	text42
  8481  003964                     __ptext42:
  8482                           	opt stack 0
  8483  003964                     _UART_buff_init:
  8484                           	opt stack 23
  8485                           
  8486                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  8487                           
  8488                           ;incstack = 0
  8489  003964  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  8490  003968  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  8491  00396C  0E00               	movlw	0
  8492  00396E  6E1E               	movwf	memset@c+1,c
  8493  003970  0E00               	movlw	0
  8494  003972  6E1D               	movwf	memset@c,c
  8495  003974  0E00               	movlw	0
  8496  003976  6E20               	movwf	memset@n+1,c
  8497  003978  0ECE               	movlw	206
  8498  00397A  6E1F               	movwf	memset@n,c
  8499  00397C  EC06  F01C         	call	_memset	;wreg free
  8500  003980  0012               	return		;funcret
  8501  003982                     __end_of_UART_buff_init:
  8502                           	opt stack 0
  8503                           tosu	equ	0xFFF
  8504                           tosh	equ	0xFFE
  8505                           tosl	equ	0xFFD
  8506                           pclath	equ	0xFFA
  8507                           tblptru	equ	0xFF8
  8508                           tblptrh	equ	0xFF7
  8509                           tblptrl	equ	0xFF6
  8510                           tablat	equ	0xFF5
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           intcon2	equ	0xFF1
  8515                           postinc0	equ	0xFEE
  8516                           wreg	equ	0xFE8
  8517                           postinc1	equ	0xFE6
  8518                           postdec1	equ	0xFE5
  8519                           fsr1h	equ	0xFE2
  8520                           fsr1l	equ	0xFE1
  8521                           indf2	equ	0xFDF
  8522                           postinc2	equ	0xFDE
  8523                           postdec2	equ	0xFDD
  8524                           plusw2	equ	0xFDB
  8525                           fsr2h	equ	0xFDA
  8526                           fsr2l	equ	0xFD9
  8527                           status	equ	0xFD8
  8528                           
  8529 ;; *************** function _memset *****************
  8530 ;; Defined at:
  8531 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;  p1              2   26[COMRAM] PTR void 
  8534 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8535 ;;  c               2   28[COMRAM] int 
  8536 ;;  n               2   30[COMRAM] unsigned int 
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;  p               2   32[COMRAM] PTR unsigned char 
  8539 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8540 ;; Return value:  Size  Location     Type
  8541 ;;                  2   26[COMRAM] PTR void 
  8542 ;; Registers used:
  8543 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8549 ;;      Params:         6       0       0       0       0       0       0
  8550 ;;      Locals:         2       0       0       0       0       0       0
  8551 ;;      Temps:          0       0       0       0       0       0       0
  8552 ;;      Totals:         8       0       0       0       0       0       0
  8553 ;;Total ram usage:        8 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    4
  8556 ;; This function calls:
  8557 ;;		Nothing
  8558 ;; This function is called by:
  8559 ;;		_FastTransfer_buffer_flush
  8560 ;;		_UART_buff_init
  8561 ;;		_UART_buff_flush
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           	psect	text43
  8566  00380C                     __ptext43:
  8567                           	opt stack 0
  8568  00380C                     _memset:
  8569                           	opt stack 23
  8570                           
  8571                           ;incstack = 0
  8572  00380C  C01B  F021         	movff	memset@p1,memset@p
  8573  003810  C01C  F022         	movff	memset@p1+1,memset@p+1
  8574  003814  D008               	goto	l3063
  8575  003816                     l3059:
  8576  003816  C021  FFD9         	movff	memset@p,fsr2l
  8577  00381A  C022  FFDA         	movff	memset@p+1,fsr2h
  8578  00381E  C01D  FFDF         	movff	memset@c,indf2
  8579  003822  4A21               	infsnz	memset@p,f,c
  8580  003824  2A22               	incf	memset@p+1,f,c
  8581  003826                     l3063:
  8582  003826  061F               	decf	memset@n,f,c
  8583  003828  A0D8               	btfss	status,0,c
  8584  00382A  0620               	decf	memset@n+1,f,c
  8585  00382C  281F               	incf	memset@n,w,c
  8586  00382E  E1F3               	bnz	l3059
  8587  003830  2820               	incf	memset@n+1,w,c
  8588  003832  B4D8               	btfsc	status,2,c
  8589  003834  0012               	return	
  8590  003836  D7EF               	goto	l3059
  8591  003838                     __end_of_memset:
  8592                           	opt stack 0
  8593                           tosu	equ	0xFFF
  8594                           tosh	equ	0xFFE
  8595                           tosl	equ	0xFFD
  8596                           pclath	equ	0xFFA
  8597                           tblptru	equ	0xFF8
  8598                           tblptrh	equ	0xFF7
  8599                           tblptrl	equ	0xFF6
  8600                           tablat	equ	0xFF5
  8601                           prodh	equ	0xFF4
  8602                           prodl	equ	0xFF3
  8603                           intcon	equ	0xFF2
  8604                           intcon2	equ	0xFF1
  8605                           postinc0	equ	0xFEE
  8606                           wreg	equ	0xFE8
  8607                           postinc1	equ	0xFE6
  8608                           postdec1	equ	0xFE5
  8609                           fsr1h	equ	0xFE2
  8610                           fsr1l	equ	0xFE1
  8611                           indf2	equ	0xFDF
  8612                           postinc2	equ	0xFDE
  8613                           postdec2	equ	0xFDD
  8614                           plusw2	equ	0xFDB
  8615                           fsr2h	equ	0xFDA
  8616                           fsr2l	equ	0xFD9
  8617                           status	equ	0xFD8
  8618                           
  8619 ;; *************** function _ADC_Initialize *****************
  8620 ;; Defined at:
  8621 ;;		line 13 in file "mcc_generated_files/adc.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;		None
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;		None
  8626 ;; Return value:  Size  Location     Type
  8627 ;;		None               void
  8628 ;; Registers used:
  8629 ;;		wreg, status,2
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8635 ;;      Params:         0       0       0       0       0       0       0
  8636 ;;      Locals:         0       0       0       0       0       0       0
  8637 ;;      Temps:          0       0       0       0       0       0       0
  8638 ;;      Totals:         0       0       0       0       0       0       0
  8639 ;;Total ram usage:        0 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    4
  8642 ;; This function calls:
  8643 ;;		Nothing
  8644 ;; This function is called by:
  8645 ;;		_SYSTEM_Initialize
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           	psect	text44
  8650  0039D6                     __ptext44:
  8651                           	opt stack 0
  8652  0039D6                     _ADC_Initialize:
  8653                           	opt stack 25
  8654                           
  8655                           ;adc.c: 18: ADCON0 = 0x01;
  8656                           
  8657                           ;incstack = 0
  8658  0039D6  0E01               	movlw	1
  8659  0039D8  6EC2               	movwf	4034,c	;volatile
  8660                           
  8661                           ;adc.c: 21: ADCON1 = 0x80;
  8662  0039DA  0E80               	movlw	128
  8663  0039DC  6EC1               	movwf	4033,c	;volatile
  8664                           
  8665                           ;adc.c: 24: ADCON2 = 0xA9;
  8666  0039DE  0EA9               	movlw	169
  8667  0039E0  6EC0               	movwf	4032,c	;volatile
  8668                           
  8669                           ;adc.c: 27: ADRESL = 0x00;
  8670  0039E2  0E00               	movlw	0
  8671  0039E4  6EC3               	movwf	4035,c	;volatile
  8672                           
  8673                           ;adc.c: 30: ADRESH = 0x00;
  8674  0039E6  0E00               	movlw	0
  8675  0039E8  6EC4               	movwf	4036,c	;volatile
  8676                           
  8677                           ;adc.c: 33: PIE1bits.ADIE = 1;
  8678  0039EA  8C9D               	bsf	3997,6,c	;volatile
  8679  0039EC  0012               	return		;funcret
  8680  0039EE                     __end_of_ADC_Initialize:
  8681                           	opt stack 0
  8682                           tosu	equ	0xFFF
  8683                           tosh	equ	0xFFE
  8684                           tosl	equ	0xFFD
  8685                           pclath	equ	0xFFA
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           intcon2	equ	0xFF1
  8694                           postinc0	equ	0xFEE
  8695                           wreg	equ	0xFE8
  8696                           postinc1	equ	0xFE6
  8697                           postdec1	equ	0xFE5
  8698                           fsr1h	equ	0xFE2
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           plusw2	equ	0xFDB
  8704                           fsr2h	equ	0xFDA
  8705                           fsr2l	equ	0xFD9
  8706                           status	equ	0xFD8
  8707                           
  8708 ;; *************** function _RunBypas *****************
  8709 ;; Defined at:
  8710 ;;		line 129 in file "Bypass.c"
  8711 ;; Parameters:    Size  Location     Type
  8712 ;;		None
  8713 ;; Auto vars:     Size  Location     Type
  8714 ;;  batvolt         3    2[BANK0 ] float 
  8715 ;;  i               2    5[BANK0 ] int 
  8716 ;;  cellbyp         2    0[BANK0 ] int 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  2  409[None  ] int 
  8719 ;; Registers used:
  8720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8726 ;;      Params:         0       0       0       0       0       0       0
  8727 ;;      Locals:         0       7       0       0       0       0       0
  8728 ;;      Temps:          0       0       0       0       0       0       0
  8729 ;;      Totals:         0       7       0       0       0       0       0
  8730 ;;Total ram usage:        7 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    6
  8733 ;; This function calls:
  8734 ;;		_Battery_Get
  8735 ;;		_SetBypass
  8736 ;;		___ftge
  8737 ;; This function is called by:
  8738 ;;		_main
  8739 ;; This function uses a non-reentrant model
  8740 ;;
  8741                           
  8742                           	psect	text45
  8743  002B52                     __ptext45:
  8744                           	opt stack 0
  8745  002B52                     _RunBypas:
  8746                           	opt stack 24
  8747                           
  8748                           ;Bypass.c: 131: int cellbyp = 0;
  8749                           
  8750                           ;incstack = 0
  8751  002B52  0E00               	movlw	0
  8752  002B54  0100               	movlb	0	; () banked
  8753  002B56  6FC2               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8754  002B58  0E00               	movlw	0
  8755  002B5A  6FC1               	movwf	RunBypas@cellbyp& (0+255),b
  8756                           
  8757                           ;Bypass.c: 132: int i = 0;
  8758  002B5C  0E00               	movlw	0
  8759  002B5E  0100               	movlb	0	; () banked
  8760  002B60  6FC7               	movwf	(RunBypas@i+1)& (0+255),b
  8761  002B62  0E00               	movlw	0
  8762  002B64  6FC6               	movwf	RunBypas@i& (0+255),b
  8763                           
  8764                           ;Bypass.c: 133: float batvolt = 0;
  8765  002B66  0E00               	movlw	0
  8766  002B68  0100               	movlb	0	; () banked
  8767  002B6A  6FC3               	movwf	RunBypas@batvolt& (0+255),b
  8768  002B6C  0E00               	movlw	0
  8769  002B6E  0100               	movlb	0	; () banked
  8770  002B70  6FC4               	movwf	(RunBypas@batvolt+1)& (0+255),b
  8771  002B72  0E00               	movlw	0
  8772  002B74  0100               	movlb	0	; () banked
  8773  002B76  6FC5               	movwf	(RunBypas@batvolt+2)& (0+255),b
  8774                           
  8775                           ;Bypass.c: 135: for(i = 0; i<=9;i++)
  8776  002B78  0E00               	movlw	0
  8777  002B7A  0100               	movlb	0	; () banked
  8778  002B7C  6FC7               	movwf	(RunBypas@i+1)& (0+255),b
  8779  002B7E  0E00               	movlw	0
  8780  002B80  6FC6               	movwf	RunBypas@i& (0+255),b
  8781  002B82                     l5293:
  8782                           
  8783                           ; BSR set to: 0
  8784  002B82  0100               	movlb	0	; () banked
  8785  002B84  BFC7               	btfsc	(RunBypas@i+1)& (0+255),7,b
  8786  002B86  D008               	goto	l5297
  8787  002B88  0100               	movlb	0	; () banked
  8788  002B8A  51C7               	movf	(RunBypas@i+1)& (0+255),w,b
  8789  002B8C  E14E               	bnz	l529
  8790  002B8E  0E0A               	movlw	10
  8791  002B90  0100               	movlb	0	; () banked
  8792  002B92  5DC6               	subwf	RunBypas@i& (0+255),w,b
  8793  002B94  B0D8               	btfsc	status,0,c
  8794  002B96  0012               	return	
  8795  002B98                     l5297:
  8796                           
  8797                           ; BSR set to: 0
  8798                           ;Bypass.c: 136: {
  8799                           ;Bypass.c: 137: batvolt = Battery_Get(i);
  8800  002B98  C0C6  F021         	movff	RunBypas@i,Battery_Get@channelnum
  8801  002B9C  C0C7  F022         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  8802  002BA0  ECEF  F01B         	call	_Battery_Get	;wreg free
  8803  002BA4  C021  F0C3         	movff	?_Battery_Get,RunBypas@batvolt
  8804  002BA8  C022  F0C4         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  8805  002BAC  C023  F0C5         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  8806                           
  8807                           ;Bypass.c: 139: if(batvolt >= 4.18)
  8808  002BB0  C0C3  F021         	movff	RunBypas@batvolt,___ftge@ff1
  8809  002BB4  C0C4  F022         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  8810  002BB8  C0C5  F023         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  8811  002BBC  0EC3               	movlw	195
  8812  002BBE  6E24               	movwf	___ftge@ff2,c
  8813  002BC0  0E85               	movlw	133
  8814  002BC2  6E25               	movwf	___ftge@ff2+1,c
  8815  002BC4  0E40               	movlw	64
  8816  002BC6  6E26               	movwf	___ftge@ff2+2,c
  8817  002BC8  ECD3  F018         	call	___ftge	;wreg free
  8818  002BCC  A0D8               	btfss	status,0,c
  8819  002BCE  D00F               	goto	l5305
  8820                           
  8821                           ;Bypass.c: 140: {
  8822                           ;Bypass.c: 141: SetBypass(i,1);
  8823  002BD0  C0C6  F01B         	movff	RunBypas@i,SetBypass@pin
  8824  002BD4  C0C7  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8825  002BD8  0E00               	movlw	0
  8826  002BDA  6E1E               	movwf	SetBypass@state+1,c
  8827  002BDC  0E01               	movlw	1
  8828  002BDE  6E1D               	movwf	SetBypass@state,c
  8829  002BE0  ECE0  F013         	call	_SetBypass	;wreg free
  8830                           
  8831                           ;Bypass.c: 142: cellbyp = 1;
  8832  002BE4  0E00               	movlw	0
  8833  002BE6  0100               	movlb	0	; () banked
  8834  002BE8  6FC2               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8835  002BEA  0E01               	movlw	1
  8836  002BEC  6FC1               	movwf	RunBypas@cellbyp& (0+255),b
  8837  002BEE                     l5305:
  8838                           
  8839                           ;Bypass.c: 143: }
  8840                           ;Bypass.c: 144: if(batvolt <= 4.15)
  8841  002BEE  0ECD               	movlw	205
  8842  002BF0  6E21               	movwf	___ftge@ff1,c
  8843  002BF2  0E84               	movlw	132
  8844  002BF4  6E22               	movwf	___ftge@ff1+1,c
  8845  002BF6  0E40               	movlw	64
  8846  002BF8  6E23               	movwf	___ftge@ff1+2,c
  8847  002BFA  C0C3  F024         	movff	RunBypas@batvolt,___ftge@ff2
  8848  002BFE  C0C4  F025         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  8849  002C02  C0C5  F026         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  8850  002C06  ECD3  F018         	call	___ftge	;wreg free
  8851  002C0A  A0D8               	btfss	status,0,c
  8852  002C0C  D00A               	goto	l5309
  8853                           
  8854                           ;Bypass.c: 145: {
  8855                           ;Bypass.c: 146: SetBypass(i,0);
  8856  002C0E  C0C6  F01B         	movff	RunBypas@i,SetBypass@pin
  8857  002C12  C0C7  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8858  002C16  0E00               	movlw	0
  8859  002C18  6E1E               	movwf	SetBypass@state+1,c
  8860  002C1A  0E00               	movlw	0
  8861  002C1C  6E1D               	movwf	SetBypass@state,c
  8862  002C1E  ECE0  F013         	call	_SetBypass	;wreg free
  8863  002C22                     l5309:
  8864  002C22  0100               	movlb	0	; () banked
  8865  002C24  4BC6               	infsnz	RunBypas@i& (0+255),f,b
  8866  002C26  2BC7               	incf	(RunBypas@i+1)& (0+255),f,b
  8867  002C28  D7AC               	goto	l5293
  8868  002C2A                     l529:
  8869                           
  8870                           ; BSR set to: 0
  8871  002C2A  0012               	return		;funcret
  8872  002C2C                     __end_of_RunBypas:
  8873                           	opt stack 0
  8874                           tosu	equ	0xFFF
  8875                           tosh	equ	0xFFE
  8876                           tosl	equ	0xFFD
  8877                           pclath	equ	0xFFA
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           intcon2	equ	0xFF1
  8886                           postinc0	equ	0xFEE
  8887                           wreg	equ	0xFE8
  8888                           postinc1	equ	0xFE6
  8889                           postdec1	equ	0xFE5
  8890                           fsr1h	equ	0xFE2
  8891                           fsr1l	equ	0xFE1
  8892                           indf2	equ	0xFDF
  8893                           postinc2	equ	0xFDE
  8894                           postdec2	equ	0xFDD
  8895                           plusw2	equ	0xFDB
  8896                           fsr2h	equ	0xFDA
  8897                           fsr2l	equ	0xFD9
  8898                           status	equ	0xFD8
  8899                           
  8900 ;; *************** function _SetBypass *****************
  8901 ;; Defined at:
  8902 ;;		line 18 in file "Bypass.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;  pin             2   26[COMRAM] int 
  8905 ;;  state           2   28[COMRAM] int 
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;		None
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  2   26[COMRAM] int 
  8910 ;; Registers used:
  8911 ;;		wreg, status,2, status,0
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/0
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8917 ;;      Params:         4       0       0       0       0       0       0
  8918 ;;      Locals:         0       0       0       0       0       0       0
  8919 ;;      Temps:          2       0       0       0       0       0       0
  8920 ;;      Totals:         6       0       0       0       0       0       0
  8921 ;;Total ram usage:        6 bytes
  8922 ;; Hardware stack levels used:    1
  8923 ;; Hardware stack levels required when called:    4
  8924 ;; This function calls:
  8925 ;;		Nothing
  8926 ;; This function is called by:
  8927 ;;		_RunBypas
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           	psect	text46
  8932  0027C0                     __ptext46:
  8933                           	opt stack 0
  8934  0027C0                     _SetBypass:
  8935                           	opt stack 25
  8936                           
  8937                           ;Bypass.c: 20: switch (pin) {
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;incstack = 0
  8941  0027C0  D050               	goto	l4915
  8942  0027C2                     l4893:
  8943                           
  8944                           ;Bypass.c: 22: if (state)
  8945  0027C2  501D               	movf	SetBypass@state,w,c
  8946  0027C4  101E               	iorwf	SetBypass@state+1,w,c
  8947  0027C6  B4D8               	btfsc	status,2,c
  8948  0027C8  D002               	goto	l456
  8949                           
  8950                           ;Bypass.c: 23: {
  8951                           ;Bypass.c: 24: do { LATC5 = 1; } while(0);
  8952  0027CA  8A8B               	bsf	3979,5,c	;volatile
  8953                           
  8954                           ;Bypass.c: 25: }
  8955  0027CC  0012               	return	
  8956  0027CE                     l456:
  8957  0027CE  9A8B               	bcf	3979,5,c	;volatile
  8958                           
  8959                           ;Bypass.c: 29: }
  8960                           ;Bypass.c: 30: break;
  8961  0027D0  0012               	return	
  8962  0027D2                     l4895:
  8963                           
  8964                           ;Bypass.c: 32: if (state)
  8965  0027D2  501D               	movf	SetBypass@state,w,c
  8966  0027D4  101E               	iorwf	SetBypass@state+1,w,c
  8967  0027D6  B4D8               	btfsc	status,2,c
  8968  0027D8  D002               	goto	l464
  8969                           
  8970                           ;Bypass.c: 33: {
  8971                           ;Bypass.c: 34: do { LATC4 = 1; } while(0);
  8972  0027DA  888B               	bsf	3979,4,c	;volatile
  8973                           
  8974                           ;Bypass.c: 35: }
  8975  0027DC  0012               	return	
  8976  0027DE                     l464:
  8977  0027DE  988B               	bcf	3979,4,c	;volatile
  8978                           
  8979                           ;Bypass.c: 39: }
  8980                           ;Bypass.c: 40: break;
  8981  0027E0  0012               	return	
  8982  0027E2                     l4897:
  8983                           
  8984                           ;Bypass.c: 42: if (state)
  8985  0027E2  501D               	movf	SetBypass@state,w,c
  8986  0027E4  101E               	iorwf	SetBypass@state+1,w,c
  8987  0027E6  B4D8               	btfsc	status,2,c
  8988  0027E8  D002               	goto	l471
  8989                           
  8990                           ;Bypass.c: 43: {
  8991                           ;Bypass.c: 44: do { LATD3 = 1; } while(0);
  8992  0027EA  868C               	bsf	3980,3,c	;volatile
  8993                           
  8994                           ;Bypass.c: 45: }
  8995  0027EC  0012               	return	
  8996  0027EE                     l471:
  8997  0027EE  968C               	bcf	3980,3,c	;volatile
  8998                           
  8999                           ;Bypass.c: 49: }
  9000                           ;Bypass.c: 50: break;
  9001  0027F0  0012               	return	
  9002  0027F2                     l4899:
  9003                           
  9004                           ;Bypass.c: 52: if (state)
  9005  0027F2  501D               	movf	SetBypass@state,w,c
  9006  0027F4  101E               	iorwf	SetBypass@state+1,w,c
  9007  0027F6  B4D8               	btfsc	status,2,c
  9008  0027F8  D002               	goto	l478
  9009                           
  9010                           ;Bypass.c: 53: {
  9011                           ;Bypass.c: 54: do { LATD2 = 1; } while(0);
  9012  0027FA  848C               	bsf	3980,2,c	;volatile
  9013                           
  9014                           ;Bypass.c: 55: }
  9015  0027FC  0012               	return	
  9016  0027FE                     l478:
  9017  0027FE  948C               	bcf	3980,2,c	;volatile
  9018                           
  9019                           ;Bypass.c: 59: }
  9020                           ;Bypass.c: 60: break;
  9021  002800  0012               	return	
  9022  002802                     l4901:
  9023                           
  9024                           ;Bypass.c: 62: if (state)
  9025  002802  501D               	movf	SetBypass@state,w,c
  9026  002804  101E               	iorwf	SetBypass@state+1,w,c
  9027  002806  B4D8               	btfsc	status,2,c
  9028  002808  D002               	goto	l485
  9029                           
  9030                           ;Bypass.c: 63: {
  9031                           ;Bypass.c: 64: do { LATD1 = 1; } while(0);
  9032  00280A  828C               	bsf	3980,1,c	;volatile
  9033                           
  9034                           ;Bypass.c: 65: }
  9035  00280C  0012               	return	
  9036  00280E                     l485:
  9037  00280E  928C               	bcf	3980,1,c	;volatile
  9038                           
  9039                           ;Bypass.c: 69: }
  9040                           ;Bypass.c: 70: break;
  9041  002810  0012               	return	
  9042  002812                     l4903:
  9043                           
  9044                           ;Bypass.c: 72: if (state)
  9045  002812  501D               	movf	SetBypass@state,w,c
  9046  002814  101E               	iorwf	SetBypass@state+1,w,c
  9047  002816  B4D8               	btfsc	status,2,c
  9048  002818  D002               	goto	l492
  9049                           
  9050                           ;Bypass.c: 73: {
  9051                           ;Bypass.c: 74: do { LATD5 = 1; } while(0);
  9052  00281A  8A8C               	bsf	3980,5,c	;volatile
  9053                           
  9054                           ;Bypass.c: 75: }
  9055  00281C  0012               	return	
  9056  00281E                     l492:
  9057  00281E  9A8C               	bcf	3980,5,c	;volatile
  9058                           
  9059                           ;Bypass.c: 79: }
  9060                           ;Bypass.c: 80: break;
  9061  002820  0012               	return	
  9062  002822                     l4905:
  9063                           
  9064                           ;Bypass.c: 82: if (state)
  9065  002822  501D               	movf	SetBypass@state,w,c
  9066  002824  101E               	iorwf	SetBypass@state+1,w,c
  9067  002826  B4D8               	btfsc	status,2,c
  9068  002828  D002               	goto	l499
  9069                           
  9070                           ;Bypass.c: 83: {
  9071                           ;Bypass.c: 84: do { LATB0 = 1; } while(0);
  9072  00282A  808A               	bsf	3978,0,c	;volatile
  9073                           
  9074                           ;Bypass.c: 85: }
  9075  00282C  0012               	return	
  9076  00282E                     l499:
  9077  00282E  908A               	bcf	3978,0,c	;volatile
  9078                           
  9079                           ;Bypass.c: 89: }
  9080                           ;Bypass.c: 90: break;
  9081  002830  0012               	return	
  9082  002832                     l4907:
  9083                           
  9084                           ;Bypass.c: 92: if (state)
  9085  002832  501D               	movf	SetBypass@state,w,c
  9086  002834  101E               	iorwf	SetBypass@state+1,w,c
  9087  002836  B4D8               	btfsc	status,2,c
  9088  002838  D002               	goto	l506
  9089                           
  9090                           ;Bypass.c: 93: {
  9091                           ;Bypass.c: 94: do { LATB1 = 1; } while(0);
  9092  00283A  828A               	bsf	3978,1,c	;volatile
  9093                           
  9094                           ;Bypass.c: 95: }
  9095  00283C  0012               	return	
  9096  00283E                     l506:
  9097  00283E  928A               	bcf	3978,1,c	;volatile
  9098                           
  9099                           ;Bypass.c: 99: }
  9100                           ;Bypass.c: 100: break;
  9101  002840  0012               	return	
  9102  002842                     l4909:
  9103                           
  9104                           ;Bypass.c: 102: if (state)
  9105  002842  501D               	movf	SetBypass@state,w,c
  9106  002844  101E               	iorwf	SetBypass@state+1,w,c
  9107  002846  B4D8               	btfsc	status,2,c
  9108  002848  D002               	goto	l513
  9109                           
  9110                           ;Bypass.c: 103: {
  9111                           ;Bypass.c: 104: do { LATB3 = 1; } while(0);
  9112  00284A  868A               	bsf	3978,3,c	;volatile
  9113                           
  9114                           ;Bypass.c: 105: }
  9115  00284C  0012               	return	
  9116  00284E                     l513:
  9117  00284E  968A               	bcf	3978,3,c	;volatile
  9118                           
  9119                           ;Bypass.c: 109: }
  9120                           ;Bypass.c: 110: break;
  9121  002850  0012               	return	
  9122  002852                     l4911:
  9123                           
  9124                           ;Bypass.c: 112: if (state)
  9125  002852  501D               	movf	SetBypass@state,w,c
  9126  002854  101E               	iorwf	SetBypass@state+1,w,c
  9127  002856  B4D8               	btfsc	status,2,c
  9128  002858  D002               	goto	l520
  9129                           
  9130                           ;Bypass.c: 113: {
  9131                           ;Bypass.c: 114: do { LATA0 = 1; } while(0);
  9132  00285A  8089               	bsf	3977,0,c	;volatile
  9133                           
  9134                           ;Bypass.c: 115: }
  9135  00285C  0012               	return	
  9136  00285E                     l520:
  9137  00285E  9089               	bcf	3977,0,c	;volatile
  9138                           
  9139                           ;Bypass.c: 121: }
  9140                           
  9141                           ;Bypass.c: 119: }
  9142                           ;Bypass.c: 120: break;
  9143  002860  0012               	return	
  9144  002862                     l4915:
  9145  002862  C01B  F01F         	movff	SetBypass@pin,??_SetBypass
  9146  002866  C01C  F020         	movff	SetBypass@pin+1,??_SetBypass+1
  9147                           
  9148                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9149                           ; Switch size 1, requested type "space"
  9150                           ; Number of cases is 1, Range of values is 0 to 0
  9151                           ; switch strategies available:
  9152                           ; Name         Instructions Cycles
  9153                           ; simple_byte            4     3 (average)
  9154                           ;	Chosen strategy is simple_byte
  9155  00286A  5020               	movf	??_SetBypass+1,w,c
  9156  00286C  0A00               	xorlw	0	; case 0
  9157  00286E  A4D8               	btfss	status,2,c
  9158  002870  0012               	return	
  9159                           
  9160                           ; Switch size 1, requested type "space"
  9161                           ; Number of cases is 10, Range of values is 0 to 9
  9162                           ; switch strategies available:
  9163                           ; Name         Instructions Cycles
  9164                           ; simple_byte           31    16 (average)
  9165                           ;	Chosen strategy is simple_byte
  9166  002872  501F               	movf	??_SetBypass,w,c
  9167  002874  0A00               	xorlw	0	; case 0
  9168  002876  B4D8               	btfsc	status,2,c
  9169  002878  D7A4               	goto	l4893
  9170  00287A  0A01               	xorlw	1	; case 1
  9171  00287C  B4D8               	btfsc	status,2,c
  9172  00287E  D7A9               	goto	l4895
  9173  002880  0A03               	xorlw	3	; case 2
  9174  002882  B4D8               	btfsc	status,2,c
  9175  002884  D7AE               	goto	l4897
  9176  002886  0A01               	xorlw	1	; case 3
  9177  002888  B4D8               	btfsc	status,2,c
  9178  00288A  D7B3               	goto	l4899
  9179  00288C  0A07               	xorlw	7	; case 4
  9180  00288E  B4D8               	btfsc	status,2,c
  9181  002890  D7B8               	goto	l4901
  9182  002892  0A01               	xorlw	1	; case 5
  9183  002894  B4D8               	btfsc	status,2,c
  9184  002896  D7BD               	goto	l4903
  9185  002898  0A03               	xorlw	3	; case 6
  9186  00289A  B4D8               	btfsc	status,2,c
  9187  00289C  D7C2               	goto	l4905
  9188  00289E  0A01               	xorlw	1	; case 7
  9189  0028A0  B4D8               	btfsc	status,2,c
  9190  0028A2  D7C7               	goto	l4907
  9191  0028A4  0A0F               	xorlw	15	; case 8
  9192  0028A6  B4D8               	btfsc	status,2,c
  9193  0028A8  D7CC               	goto	l4909
  9194  0028AA  0A01               	xorlw	1	; case 9
  9195  0028AC  A4D8               	btfss	status,2,c
  9196  0028AE  0012               	return	
  9197  0028B0  D7D0               	goto	l4911
  9198  0028B2                     __end_of_SetBypass:
  9199                           	opt stack 0
  9200                           tosu	equ	0xFFF
  9201                           tosh	equ	0xFFE
  9202                           tosl	equ	0xFFD
  9203                           pclath	equ	0xFFA
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           intcon	equ	0xFF2
  9211                           intcon2	equ	0xFF1
  9212                           postinc0	equ	0xFEE
  9213                           wreg	equ	0xFE8
  9214                           postinc1	equ	0xFE6
  9215                           postdec1	equ	0xFE5
  9216                           fsr1h	equ	0xFE2
  9217                           fsr1l	equ	0xFE1
  9218                           indf2	equ	0xFDF
  9219                           postinc2	equ	0xFDE
  9220                           postdec2	equ	0xFDD
  9221                           plusw2	equ	0xFDB
  9222                           fsr2h	equ	0xFDA
  9223                           fsr2l	equ	0xFD9
  9224                           status	equ	0xFD8
  9225                           
  9226 ;; *************** function _Battery_Get *****************
  9227 ;; Defined at:
  9228 ;;		line 87 in file "Battery.c"
  9229 ;; Parameters:    Size  Location     Type
  9230 ;;  channelnum      2   32[COMRAM] int 
  9231 ;; Auto vars:     Size  Location     Type
  9232 ;;		None
  9233 ;; Return value:  Size  Location     Type
  9234 ;;                  3   32[COMRAM] float 
  9235 ;; Registers used:
  9236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9237 ;; Tracked objects:
  9238 ;;		On entry : 0/0
  9239 ;;		On exit  : 0/0
  9240 ;;		Unchanged: 0/0
  9241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9242 ;;      Params:         3       0       0       0       0       0       0
  9243 ;;      Locals:         0       0       0       0       0       0       0
  9244 ;;      Temps:          0       0       0       0       0       0       0
  9245 ;;      Totals:         3       0       0       0       0       0       0
  9246 ;;Total ram usage:        3 bytes
  9247 ;; Hardware stack levels used:    1
  9248 ;; Hardware stack levels required when called:    5
  9249 ;; This function calls:
  9250 ;;		___wmul
  9251 ;; This function is called by:
  9252 ;;		_RunBypas
  9253 ;;		_updateComms
  9254 ;; This function uses a non-reentrant model
  9255 ;;
  9256                           
  9257                           	psect	text47
  9258  0037DE                     __ptext47:
  9259                           	opt stack 0
  9260  0037DE                     _Battery_Get:
  9261                           	opt stack 24
  9262                           
  9263                           ;Battery.c: 89: return Battery_Volt[channelnum];
  9264                           
  9265                           ;incstack = 0
  9266  0037DE  C021  F01B         	movff	Battery_Get@channelnum,___wmul@multiplier
  9267  0037E2  C022  F01C         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  9268  0037E6  0E00               	movlw	0
  9269  0037E8  6E1E               	movwf	___wmul@multiplicand+1,c
  9270  0037EA  0E03               	movlw	3
  9271  0037EC  6E1D               	movwf	___wmul@multiplicand,c
  9272  0037EE  EC5B  F01C         	call	___wmul	;wreg free
  9273  0037F2  0E70               	movlw	low _Battery_Volt
  9274  0037F4  241B               	addwf	?___wmul,w,c
  9275  0037F6  6ED9               	movwf	fsr2l,c
  9276  0037F8  0E01               	movlw	high _Battery_Volt
  9277  0037FA  201C               	addwfc	?___wmul+1,w,c
  9278  0037FC  6EDA               	movwf	fsr2h,c
  9279  0037FE  CFDE F021          	movff	postinc2,?_Battery_Get
  9280  003802  CFDE F022          	movff	postinc2,?_Battery_Get+1
  9281  003806  CFDD F023          	movff	postdec2,?_Battery_Get+2
  9282  00380A  0012               	return	
  9283  00380C                     __end_of_Battery_Get:
  9284                           	opt stack 0
  9285                           tosu	equ	0xFFF
  9286                           tosh	equ	0xFFE
  9287                           tosl	equ	0xFFD
  9288                           pclath	equ	0xFFA
  9289                           tblptru	equ	0xFF8
  9290                           tblptrh	equ	0xFF7
  9291                           tblptrl	equ	0xFF6
  9292                           tablat	equ	0xFF5
  9293                           prodh	equ	0xFF4
  9294                           prodl	equ	0xFF3
  9295                           intcon	equ	0xFF2
  9296                           intcon2	equ	0xFF1
  9297                           postinc0	equ	0xFEE
  9298                           wreg	equ	0xFE8
  9299                           postinc1	equ	0xFE6
  9300                           postdec1	equ	0xFE5
  9301                           fsr1h	equ	0xFE2
  9302                           fsr1l	equ	0xFE1
  9303                           indf2	equ	0xFDF
  9304                           postinc2	equ	0xFDE
  9305                           postdec2	equ	0xFDD
  9306                           plusw2	equ	0xFDB
  9307                           fsr2h	equ	0xFDA
  9308                           fsr2l	equ	0xFD9
  9309                           status	equ	0xFD8
  9310                           
  9311 ;; *************** function _Battery_Fault *****************
  9312 ;; Defined at:
  9313 ;;		line 66 in file "Battery.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;		None
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;  i               2    1[BANK0 ] int 
  9318 ;;  fault           1    0[BANK0 ] unsigned char 
  9319 ;; Return value:  Size  Location     Type
  9320 ;;                  1    wreg      unsigned char 
  9321 ;; Registers used:
  9322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9328 ;;      Params:         0       0       0       0       0       0       0
  9329 ;;      Locals:         0       3       0       0       0       0       0
  9330 ;;      Temps:          0       0       0       0       0       0       0
  9331 ;;      Totals:         0       3       0       0       0       0       0
  9332 ;;Total ram usage:        3 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; Hardware stack levels required when called:    5
  9335 ;; This function calls:
  9336 ;;		___ftge
  9337 ;;		___wmul
  9338 ;; This function is called by:
  9339 ;;		_main
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text48
  9344  002DDA                     __ptext48:
  9345                           	opt stack 0
  9346  002DDA                     _Battery_Fault:
  9347                           	opt stack 25
  9348                           
  9349                           ;Battery.c: 68: char fault = 0;
  9350                           
  9351                           ;incstack = 0
  9352  002DDA  0E00               	movlw	0
  9353  002DDC  0100               	movlb	0	; () banked
  9354  002DDE  6FC1               	movwf	Battery_Fault@fault& (0+255),b
  9355                           
  9356                           ;Battery.c: 69: for(int i = 0;i<9;i++)
  9357  002DE0  0E00               	movlw	0
  9358  002DE2  0100               	movlb	0	; () banked
  9359  002DE4  6FC3               	movwf	(Battery_Fault@i+1)& (0+255),b
  9360  002DE6  0E00               	movlw	0
  9361  002DE8  6FC2               	movwf	Battery_Fault@i& (0+255),b
  9362  002DEA                     l5231:
  9363                           
  9364                           ; BSR set to: 0
  9365  002DEA  0100               	movlb	0	; () banked
  9366  002DEC  BFC3               	btfsc	(Battery_Fault@i+1)& (0+255),7,b
  9367  002DEE  D008               	goto	l5235
  9368  002DF0  0100               	movlb	0	; () banked
  9369  002DF2  51C3               	movf	(Battery_Fault@i+1)& (0+255),w,b
  9370  002DF4  E14C               	bnz	l296
  9371  002DF6  0E09               	movlw	9
  9372  002DF8  0100               	movlb	0	; () banked
  9373  002DFA  5DC2               	subwf	Battery_Fault@i& (0+255),w,b
  9374  002DFC  B0D8               	btfsc	status,0,c
  9375  002DFE  0012               	return	
  9376  002E00                     l5235:
  9377                           
  9378                           ; BSR set to: 0
  9379                           ;Battery.c: 70: {
  9380                           ;Battery.c: 71: if ((3.00 > Battery_Volt[i]) || (4.21 > Battery_Volt[i]))
  9381  002E00  C0C2  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9382  002E04  C0C3  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9383  002E08  0E00               	movlw	0
  9384  002E0A  6E1E               	movwf	___wmul@multiplicand+1,c
  9385  002E0C  0E03               	movlw	3
  9386  002E0E  6E1D               	movwf	___wmul@multiplicand,c
  9387  002E10  EC5B  F01C         	call	___wmul	;wreg free
  9388  002E14  0E70               	movlw	low _Battery_Volt
  9389  002E16  241B               	addwf	?___wmul,w,c
  9390  002E18  6ED9               	movwf	fsr2l,c
  9391  002E1A  0E01               	movlw	high _Battery_Volt
  9392  002E1C  201C               	addwfc	?___wmul+1,w,c
  9393  002E1E  6EDA               	movwf	fsr2h,c
  9394  002E20  CFDE F021          	movff	postinc2,___ftge@ff1
  9395  002E24  CFDE F022          	movff	postinc2,___ftge@ff1+1
  9396  002E28  CFDD F023          	movff	postdec2,___ftge@ff1+2
  9397  002E2C  0E00               	movlw	0
  9398  002E2E  6E24               	movwf	___ftge@ff2,c
  9399  002E30  0E40               	movlw	64
  9400  002E32  6E25               	movwf	___ftge@ff2+1,c
  9401  002E34  0E40               	movlw	64
  9402  002E36  6E26               	movwf	___ftge@ff2+2,c
  9403  002E38  ECD3  F018         	call	___ftge	;wreg free
  9404  002E3C  A0D8               	btfss	status,0,c
  9405  002E3E  D020               	goto	l5239
  9406  002E40  C0C2  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9407  002E44  C0C3  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9408  002E48  0E00               	movlw	0
  9409  002E4A  6E1E               	movwf	___wmul@multiplicand+1,c
  9410  002E4C  0E03               	movlw	3
  9411  002E4E  6E1D               	movwf	___wmul@multiplicand,c
  9412  002E50  EC5B  F01C         	call	___wmul	;wreg free
  9413  002E54  0E70               	movlw	low _Battery_Volt
  9414  002E56  241B               	addwf	?___wmul,w,c
  9415  002E58  6ED9               	movwf	fsr2l,c
  9416  002E5A  0E01               	movlw	high _Battery_Volt
  9417  002E5C  201C               	addwfc	?___wmul+1,w,c
  9418  002E5E  6EDA               	movwf	fsr2h,c
  9419  002E60  CFDE F021          	movff	postinc2,___ftge@ff1
  9420  002E64  CFDE F022          	movff	postinc2,___ftge@ff1+1
  9421  002E68  CFDD F023          	movff	postdec2,___ftge@ff1+2
  9422  002E6C  0EB8               	movlw	184
  9423  002E6E  6E24               	movwf	___ftge@ff2,c
  9424  002E70  0E86               	movlw	134
  9425  002E72  6E25               	movwf	___ftge@ff2+1,c
  9426  002E74  0E40               	movlw	64
  9427  002E76  6E26               	movwf	___ftge@ff2+2,c
  9428  002E78  ECD3  F018         	call	___ftge	;wreg free
  9429  002E7C  B0D8               	btfsc	status,0,c
  9430  002E7E  D003               	goto	l5241
  9431  002E80                     l5239:
  9432                           
  9433                           ;Battery.c: 72: {
  9434                           ;Battery.c: 73: fault = 1;
  9435  002E80  0E01               	movlw	1
  9436  002E82  0100               	movlb	0	; () banked
  9437  002E84  6FC1               	movwf	Battery_Fault@fault& (0+255),b
  9438  002E86                     l5241:
  9439  002E86  0100               	movlb	0	; () banked
  9440  002E88  4BC2               	infsnz	Battery_Fault@i& (0+255),f,b
  9441  002E8A  2BC3               	incf	(Battery_Fault@i+1)& (0+255),f,b
  9442  002E8C  D7AE               	goto	l5231
  9443  002E8E                     l296:
  9444                           
  9445                           ; BSR set to: 0
  9446  002E8E  0012               	return		;funcret
  9447  002E90                     __end_of_Battery_Fault:
  9448                           	opt stack 0
  9449                           tosu	equ	0xFFF
  9450                           tosh	equ	0xFFE
  9451                           tosl	equ	0xFFD
  9452                           pclath	equ	0xFFA
  9453                           tblptru	equ	0xFF8
  9454                           tblptrh	equ	0xFF7
  9455                           tblptrl	equ	0xFF6
  9456                           tablat	equ	0xFF5
  9457                           prodh	equ	0xFF4
  9458                           prodl	equ	0xFF3
  9459                           intcon	equ	0xFF2
  9460                           intcon2	equ	0xFF1
  9461                           postinc0	equ	0xFEE
  9462                           wreg	equ	0xFE8
  9463                           postinc1	equ	0xFE6
  9464                           postdec1	equ	0xFE5
  9465                           fsr1h	equ	0xFE2
  9466                           fsr1l	equ	0xFE1
  9467                           indf2	equ	0xFDF
  9468                           postinc2	equ	0xFDE
  9469                           postdec2	equ	0xFDD
  9470                           plusw2	equ	0xFDB
  9471                           fsr2h	equ	0xFDA
  9472                           fsr2l	equ	0xFD9
  9473                           status	equ	0xFD8
  9474                           
  9475 ;; *************** function ___ftge *****************
  9476 ;; Defined at:
  9477 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;  ff1             3   32[COMRAM] float 
  9480 ;;  ff2             3   35[COMRAM] float 
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;		None
  9483 ;; Return value:  Size  Location     Type
  9484 ;;		None               void
  9485 ;; Registers used:
  9486 ;;		wreg, status,2, status,0
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9492 ;;      Params:         6       0       0       0       0       0       0
  9493 ;;      Locals:         0       0       0       0       0       0       0
  9494 ;;      Temps:          3       0       0       0       0       0       0
  9495 ;;      Totals:         9       0       0       0       0       0       0
  9496 ;;Total ram usage:        9 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    4
  9499 ;; This function calls:
  9500 ;;		Nothing
  9501 ;; This function is called by:
  9502 ;;		_Battery_Fault
  9503 ;;		_Temp_Fault
  9504 ;;		_RunBypas
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           	psect	text49
  9509  0031A6                     __ptext49:
  9510                           	opt stack 0
  9511  0031A6                     ___ftge:
  9512                           	opt stack 25
  9513                           
  9514                           ; BSR set to: 0
  9515                           ;incstack = 0
  9516  0031A6  AE23               	btfss	___ftge@ff1+2,7,c
  9517  0031A8  D016               	goto	l5189
  9518  0031AA  C021  F027         	movff	___ftge@ff1,??___ftge
  9519  0031AE  C022  F028         	movff	___ftge@ff1+1,??___ftge+1
  9520  0031B2  C023  F029         	movff	___ftge@ff1+2,??___ftge+2
  9521  0031B6  1E27               	comf	??___ftge,f,c
  9522  0031B8  1E28               	comf	??___ftge+1,f,c
  9523  0031BA  1E29               	comf	??___ftge+2,f,c
  9524  0031BC  2A27               	incf	??___ftge,f,c
  9525  0031BE  0E00               	movlw	0
  9526  0031C0  2228               	addwfc	??___ftge+1,f,c
  9527  0031C2  2229               	addwfc	??___ftge+2,f,c
  9528  0031C4  0E00               	movlw	0
  9529  0031C6  2427               	addwf	??___ftge,w,c
  9530  0031C8  6E21               	movwf	___ftge@ff1,c
  9531  0031CA  0E00               	movlw	0
  9532  0031CC  2028               	addwfc	??___ftge+1,w,c
  9533  0031CE  6E22               	movwf	___ftge@ff1+1,c
  9534  0031D0  0E80               	movlw	128
  9535  0031D2  2029               	addwfc	??___ftge+2,w,c
  9536  0031D4  6E23               	movwf	___ftge@ff1+2,c
  9537  0031D6                     l5189:
  9538  0031D6  AE26               	btfss	___ftge@ff2+2,7,c
  9539  0031D8  D016               	goto	l5193
  9540  0031DA  C024  F027         	movff	___ftge@ff2,??___ftge
  9541  0031DE  C025  F028         	movff	___ftge@ff2+1,??___ftge+1
  9542  0031E2  C026  F029         	movff	___ftge@ff2+2,??___ftge+2
  9543  0031E6  1E27               	comf	??___ftge,f,c
  9544  0031E8  1E28               	comf	??___ftge+1,f,c
  9545  0031EA  1E29               	comf	??___ftge+2,f,c
  9546  0031EC  2A27               	incf	??___ftge,f,c
  9547  0031EE  0E00               	movlw	0
  9548  0031F0  2228               	addwfc	??___ftge+1,f,c
  9549  0031F2  2229               	addwfc	??___ftge+2,f,c
  9550  0031F4  0E00               	movlw	0
  9551  0031F6  2427               	addwf	??___ftge,w,c
  9552  0031F8  6E24               	movwf	___ftge@ff2,c
  9553  0031FA  0E00               	movlw	0
  9554  0031FC  2028               	addwfc	??___ftge+1,w,c
  9555  0031FE  6E25               	movwf	___ftge@ff2+1,c
  9556  003200  0E80               	movlw	128
  9557  003202  2029               	addwfc	??___ftge+2,w,c
  9558  003204  6E26               	movwf	___ftge@ff2+2,c
  9559  003206                     l5193:
  9560  003206  0E00               	movlw	0
  9561  003208  1A21               	xorwf	___ftge@ff1,f,c
  9562  00320A  0E00               	movlw	0
  9563  00320C  1A22               	xorwf	___ftge@ff1+1,f,c
  9564  00320E  0E80               	movlw	128
  9565  003210  1A23               	xorwf	___ftge@ff1+2,f,c
  9566  003212  0E00               	movlw	0
  9567  003214  1A24               	xorwf	___ftge@ff2,f,c
  9568  003216  0E00               	movlw	0
  9569  003218  1A25               	xorwf	___ftge@ff2+1,f,c
  9570  00321A  0E80               	movlw	128
  9571  00321C  1A26               	xorwf	___ftge@ff2+2,f,c
  9572  00321E  5024               	movf	___ftge@ff2,w,c
  9573  003220  5C21               	subwf	___ftge@ff1,w,c
  9574  003222  5025               	movf	___ftge@ff2+1,w,c
  9575  003224  5822               	subwfb	___ftge@ff1+1,w,c
  9576  003226  5026               	movf	___ftge@ff2+2,w,c
  9577  003228  5823               	subwfb	___ftge@ff1+2,w,c
  9578  00322A  B0D8               	btfsc	status,0,c
  9579  00322C  D002               	goto	l5199
  9580  00322E  90D8               	bcf	status,0,c
  9581  003230  0012               	return	
  9582  003232                     l5199:
  9583  003232  80D8               	bsf	status,0,c
  9584  003234  0012               	return	
  9585  003236                     __end_of___ftge:
  9586                           	opt stack 0
  9587                           tosu	equ	0xFFF
  9588                           tosh	equ	0xFFE
  9589                           tosl	equ	0xFFD
  9590                           pclath	equ	0xFFA
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           intcon2	equ	0xFF1
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           postinc1	equ	0xFE6
  9602                           postdec1	equ	0xFE5
  9603                           fsr1h	equ	0xFE2
  9604                           fsr1l	equ	0xFE1
  9605                           indf2	equ	0xFDF
  9606                           postinc2	equ	0xFDE
  9607                           postdec2	equ	0xFDD
  9608                           plusw2	equ	0xFDB
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613 ;; *************** function _Battery_Convert *****************
  9614 ;; Defined at:
  9615 ;;		line 33 in file "Battery.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;		None
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;  x               2   48[BANK0 ] int 
  9620 ;; Return value:  Size  Location     Type
  9621 ;;		None               void
  9622 ;; Registers used:
  9623 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9624 ;; Tracked objects:
  9625 ;;		On entry : 0/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9629 ;;      Params:         0       0       0       0       0       0       0
  9630 ;;      Locals:         0       2       0       0       0       0       0
  9631 ;;      Temps:          0       2       0       0       0       0       0
  9632 ;;      Totals:         0       4       0       0       0       0       0
  9633 ;;Total ram usage:        4 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    7
  9636 ;; This function calls:
  9637 ;;		_Battery_Filter
  9638 ;;		___altoft
  9639 ;;		___ftdiv
  9640 ;;		___ftmul
  9641 ;;		___wmul
  9642 ;; This function is called by:
  9643 ;;		_main
  9644 ;; This function uses a non-reentrant model
  9645 ;;
  9646                           
  9647                           	psect	text50
  9648  002A74                     __ptext50:
  9649                           	opt stack 0
  9650  002A74                     _Battery_Convert:
  9651                           	opt stack 23
  9652                           
  9653                           ;Battery.c: 35: for(int x = 0; x < 9; x++)
  9654                           
  9655                           ;incstack = 0
  9656  002A74  0E00               	movlw	0
  9657  002A76  0100               	movlb	0	; () banked
  9658  002A78  6FF2               	movwf	(Battery_Convert@x+1)& (0+255),b
  9659  002A7A  0E00               	movlw	0
  9660  002A7C  6FF1               	movwf	Battery_Convert@x& (0+255),b
  9661  002A7E                     l5217:
  9662                           
  9663                           ; BSR set to: 0
  9664  002A7E  0100               	movlb	0	; () banked
  9665  002A80  BFF2               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
  9666  002A82  D008               	goto	l5221
  9667  002A84  0100               	movlb	0	; () banked
  9668  002A86  51F2               	movf	(Battery_Convert@x+1)& (0+255),w,b
  9669  002A88  E161               	bnz	l5227
  9670  002A8A  0E09               	movlw	9
  9671  002A8C  0100               	movlb	0	; () banked
  9672  002A8E  5DF1               	subwf	Battery_Convert@x& (0+255),w,b
  9673  002A90  B0D8               	btfsc	status,0,c
  9674  002A92  D05C               	goto	l5227
  9675  002A94                     l5221:
  9676                           
  9677                           ; BSR set to: 0
  9678                           ;Battery.c: 36: {
  9679                           ;Battery.c: 37: TempBattery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0);
  9680  002A94  C0F1  F01B         	movff	Battery_Convert@x,___wmul@multiplier
  9681  002A98  C0F2  F01C         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  9682  002A9C  0E00               	movlw	0
  9683  002A9E  6E1E               	movwf	___wmul@multiplicand+1,c
  9684  002AA0  0E03               	movlw	3
  9685  002AA2  6E1D               	movwf	___wmul@multiplicand,c
  9686  002AA4  EC5B  F01C         	call	___wmul	;wreg free
  9687  002AA8  0E52               	movlw	low _TempBattery_Volt
  9688  002AAA  241B               	addwf	?___wmul,w,c
  9689  002AAC  6ED9               	movwf	fsr2l,c
  9690  002AAE  0E01               	movlw	high _TempBattery_Volt
  9691  002AB0  201C               	addwfc	?___wmul+1,w,c
  9692  002AB2  6EDA               	movwf	fsr2h,c
  9693  002AB4  0E00               	movlw	0
  9694  002AB6  0100               	movlb	0	; () banked
  9695  002AB8  6FC6               	movwf	___ftdiv@f2& (0+255),b
  9696  002ABA  0E80               	movlw	128
  9697  002ABC  0100               	movlb	0	; () banked
  9698  002ABE  6FC7               	movwf	(___ftdiv@f2+1)& (0+255),b
  9699  002AC0  0E44               	movlw	68
  9700  002AC2  0100               	movlb	0	; () banked
  9701  002AC4  6FC8               	movwf	(___ftdiv@f2+2)& (0+255),b
  9702  002AC6  0E60               	movlw	low _Battery_Adc
  9703  002AC8  0100               	movlb	0	; () banked
  9704  002ACA  6FEF               	movwf	??_Battery_Convert& (0+255),b
  9705  002ACC  0E00               	movlw	high _Battery_Adc
  9706  002ACE  0100               	movlb	0	; () banked
  9707  002AD0  6FF0               	movwf	(??_Battery_Convert+1)& (0+255),b
  9708  002AD2  90D8               	bcf	status,0,c
  9709  002AD4  0100               	movlb	0	; () banked
  9710  002AD6  35F1               	rlcf	Battery_Convert@x& (0+255),w,b
  9711  002AD8  6EE1               	movwf	fsr1l,c
  9712  002ADA  0100               	movlb	0	; () banked
  9713  002ADC  35F2               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  9714  002ADE  6EE2               	movwf	fsr1h,c
  9715  002AE0  90D8               	bcf	status,0,c
  9716  002AE2  36E1               	rlcf	fsr1l,f,c
  9717  002AE4  36E2               	rlcf	fsr1h,f,c
  9718  002AE6  0100               	movlb	0	; () banked
  9719  002AE8  51EF               	movf	??_Battery_Convert& (0+255),w,b
  9720  002AEA  26E1               	addwf	fsr1l,f,c
  9721  002AEC  0100               	movlb	0	; () banked
  9722  002AEE  51F0               	movf	(??_Battery_Convert+1)& (0+255),w,b
  9723  002AF0  22E2               	addwfc	fsr1h,f,c
  9724  002AF2  CFE6 F023          	movff	postinc1,___altoft@c
  9725  002AF6  CFE6 F024          	movff	postinc1,___altoft@c+1
  9726  002AFA  CFE6 F025          	movff	postinc1,___altoft@c+2
  9727  002AFE  CFE6 F026          	movff	postinc1,___altoft@c+3
  9728  002B02  EC5D  F019         	call	___altoft	;wreg free
  9729  002B06  C023  F0C3         	movff	?___altoft,___ftdiv@f1
  9730  002B0A  C024  F0C4         	movff	?___altoft+1,___ftdiv@f1+1
  9731  002B0E  C025  F0C5         	movff	?___altoft+2,___ftdiv@f1+2
  9732  002B12  ECE6  F010         	call	___ftdiv	;wreg free
  9733  002B16  C0C3  F0D2         	movff	?___ftdiv,___ftmul@f1
  9734  002B1A  C0C4  F0D3         	movff	?___ftdiv+1,___ftmul@f1+1
  9735  002B1E  C0C5  F0D4         	movff	?___ftdiv+2,___ftmul@f1+2
  9736  002B22  0E00               	movlw	0
  9737  002B24  0100               	movlb	0	; () banked
  9738  002B26  6FD5               	movwf	___ftmul@f2& (0+255),b
  9739  002B28  0EA0               	movlw	160
  9740  002B2A  0100               	movlb	0	; () banked
  9741  002B2C  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  9742  002B2E  0E40               	movlw	64
  9743  002B30  0100               	movlb	0	; () banked
  9744  002B32  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  9745  002B34  ECE8  F00E         	call	___ftmul	;wreg free
  9746  002B38  C0D2  FFDE         	movff	?___ftmul,postinc2
  9747  002B3C  C0D3  FFDE         	movff	?___ftmul+1,postinc2
  9748  002B40  C0D4  FFDE         	movff	?___ftmul+2,postinc2
  9749  002B44  0100               	movlb	0	; () banked
  9750  002B46  4BF1               	infsnz	Battery_Convert@x& (0+255),f,b
  9751  002B48  2BF2               	incf	(Battery_Convert@x+1)& (0+255),f,b
  9752  002B4A  D799               	goto	l5217
  9753  002B4C                     l5227:
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;Battery.c: 38: }
  9757                           ;Battery.c: 39: Battery_Filter();
  9758  002B4C  EC97  F00F         	call	_Battery_Filter	;wreg free
  9759  002B50  0012               	return		;funcret
  9760  002B52                     __end_of_Battery_Convert:
  9761                           	opt stack 0
  9762                           tosu	equ	0xFFF
  9763                           tosh	equ	0xFFE
  9764                           tosl	equ	0xFFD
  9765                           pclath	equ	0xFFA
  9766                           tblptru	equ	0xFF8
  9767                           tblptrh	equ	0xFF7
  9768                           tblptrl	equ	0xFF6
  9769                           tablat	equ	0xFF5
  9770                           prodh	equ	0xFF4
  9771                           prodl	equ	0xFF3
  9772                           intcon	equ	0xFF2
  9773                           intcon2	equ	0xFF1
  9774                           postinc0	equ	0xFEE
  9775                           wreg	equ	0xFE8
  9776                           postinc1	equ	0xFE6
  9777                           postdec1	equ	0xFE5
  9778                           fsr1h	equ	0xFE2
  9779                           fsr1l	equ	0xFE1
  9780                           indf2	equ	0xFDF
  9781                           postinc2	equ	0xFDE
  9782                           postdec2	equ	0xFDD
  9783                           plusw2	equ	0xFDB
  9784                           fsr2h	equ	0xFDA
  9785                           fsr2l	equ	0xFD9
  9786                           status	equ	0xFD8
  9787                           
  9788 ;; *************** function ___ftdiv *****************
  9789 ;; Defined at:
  9790 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;  f1              3    2[BANK0 ] float 
  9793 ;;  f2              3    5[BANK0 ] float 
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;  f3              3   12[BANK0 ] float 
  9796 ;;  sign            1   16[BANK0 ] unsigned char 
  9797 ;;  exp             1   15[BANK0 ] unsigned char 
  9798 ;;  cntr            1   11[BANK0 ] unsigned char 
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  3    2[BANK0 ] float 
  9801 ;; Registers used:
  9802 ;;		wreg, status,2, status,0, cstack
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9808 ;;      Params:         0       6       0       0       0       0       0
  9809 ;;      Locals:         0       6       0       0       0       0       0
  9810 ;;      Temps:          0       3       0       0       0       0       0
  9811 ;;      Totals:         0      15       0       0       0       0       0
  9812 ;;Total ram usage:       15 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:    5
  9815 ;; This function calls:
  9816 ;;		___ftpack
  9817 ;; This function is called by:
  9818 ;;		_Battery_Convert
  9819 ;;		_Temp_Convert
  9820 ;; This function uses a non-reentrant model
  9821 ;;
  9822                           
  9823                           	psect	text51
  9824  0021CC                     __ptext51:
  9825                           	opt stack 0
  9826  0021CC                     ___ftdiv:
  9827                           	opt stack 24
  9828                           
  9829                           ;incstack = 0
  9830  0021CC  C0C5  F0C9         	movff	___ftdiv@f1+2,??___ftdiv
  9831  0021D0  0100               	movlb	0	; () banked
  9832  0021D2  6BCA               	clrf	(??___ftdiv+1)& (0+255),b
  9833  0021D4  6BCB               	clrf	(??___ftdiv+2)& (0+255),b
  9834  0021D6  0100               	movlb	0	; () banked
  9835  0021D8  35C4               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9836  0021DA  0100               	movlb	0	; () banked
  9837  0021DC  37C9               	rlcf	??___ftdiv& (0+255),f,b
  9838  0021DE  E301               	bnc	u5961
  9839  0021E0  81CA               	bsf	(??___ftdiv+1)& (0+255),0,b
  9840  0021E2                     u5961:
  9841  0021E2  0100               	movlb	0	; () banked
  9842  0021E4  51C9               	movf	??___ftdiv& (0+255),w,b
  9843  0021E6  0100               	movlb	0	; () banked
  9844  0021E8  6FD0               	movwf	___ftdiv@exp& (0+255),b
  9845  0021EA  0100               	movlb	0	; () banked
  9846  0021EC  51D0               	movf	___ftdiv@exp& (0+255),w,b
  9847  0021EE  A4D8               	btfss	status,2,c
  9848  0021F0  D00A               	goto	l5137
  9849                           
  9850                           ; BSR set to: 0
  9851  0021F2  0E00               	movlw	0
  9852  0021F4  0100               	movlb	0	; () banked
  9853  0021F6  6FC3               	movwf	?___ftdiv& (0+255),b
  9854  0021F8  0E00               	movlw	0
  9855  0021FA  0100               	movlb	0	; () banked
  9856  0021FC  6FC4               	movwf	(?___ftdiv+1)& (0+255),b
  9857  0021FE  0E00               	movlw	0
  9858  002200  0100               	movlb	0	; () banked
  9859  002202  6FC5               	movwf	(?___ftdiv+2)& (0+255),b
  9860                           
  9861                           ; BSR set to: 0
  9862  002204  0012               	return	
  9863  002206                     l5137:
  9864                           
  9865                           ; BSR set to: 0
  9866  002206  C0C8  F0C9         	movff	___ftdiv@f2+2,??___ftdiv
  9867  00220A  0100               	movlb	0	; () banked
  9868  00220C  6BCA               	clrf	(??___ftdiv+1)& (0+255),b
  9869  00220E  6BCB               	clrf	(??___ftdiv+2)& (0+255),b
  9870  002210  0100               	movlb	0	; () banked
  9871  002212  35C7               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9872  002214  0100               	movlb	0	; () banked
  9873  002216  37C9               	rlcf	??___ftdiv& (0+255),f,b
  9874  002218  E301               	bnc	u5981
  9875  00221A  81CA               	bsf	(??___ftdiv+1)& (0+255),0,b
  9876  00221C                     u5981:
  9877  00221C  0100               	movlb	0	; () banked
  9878  00221E  51C9               	movf	??___ftdiv& (0+255),w,b
  9879  002220  0100               	movlb	0	; () banked
  9880  002222  6FD1               	movwf	___ftdiv@sign& (0+255),b
  9881  002224  0100               	movlb	0	; () banked
  9882  002226  51D1               	movf	___ftdiv@sign& (0+255),w,b
  9883  002228  A4D8               	btfss	status,2,c
  9884  00222A  D00A               	goto	l5143
  9885                           
  9886                           ; BSR set to: 0
  9887  00222C  0E00               	movlw	0
  9888  00222E  0100               	movlb	0	; () banked
  9889  002230  6FC3               	movwf	?___ftdiv& (0+255),b
  9890  002232  0E00               	movlw	0
  9891  002234  0100               	movlb	0	; () banked
  9892  002236  6FC4               	movwf	(?___ftdiv+1)& (0+255),b
  9893  002238  0E00               	movlw	0
  9894  00223A  0100               	movlb	0	; () banked
  9895  00223C  6FC5               	movwf	(?___ftdiv+2)& (0+255),b
  9896                           
  9897                           ; BSR set to: 0
  9898  00223E  0012               	return	
  9899  002240                     l5143:
  9900                           
  9901                           ; BSR set to: 0
  9902  002240  0E00               	movlw	0
  9903  002242  0100               	movlb	0	; () banked
  9904  002244  6FCD               	movwf	___ftdiv@f3& (0+255),b
  9905  002246  0E00               	movlw	0
  9906  002248  0100               	movlb	0	; () banked
  9907  00224A  6FCE               	movwf	(___ftdiv@f3+1)& (0+255),b
  9908  00224C  0E00               	movlw	0
  9909  00224E  0100               	movlb	0	; () banked
  9910  002250  6FCF               	movwf	(___ftdiv@f3+2)& (0+255),b
  9911                           
  9912                           ; BSR set to: 0
  9913  002252  0100               	movlb	0	; () banked
  9914  002254  51D1               	movf	___ftdiv@sign& (0+255),w,b
  9915  002256  0F89               	addlw	137
  9916  002258  0100               	movlb	0	; () banked
  9917  00225A  5FD0               	subwf	___ftdiv@exp& (0+255),f,b
  9918                           
  9919                           ; BSR set to: 0
  9920  00225C  C0C5  F0D1         	movff	___ftdiv@f1+2,___ftdiv@sign
  9921                           
  9922                           ; BSR set to: 0
  9923  002260  0100               	movlb	0	; () banked
  9924  002262  51C8               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9925  002264  0100               	movlb	0	; () banked
  9926  002266  1BD1               	xorwf	___ftdiv@sign& (0+255),f,b
  9927                           
  9928                           ; BSR set to: 0
  9929  002268  0E80               	movlw	128
  9930  00226A  0100               	movlb	0	; () banked
  9931  00226C  17D1               	andwf	___ftdiv@sign& (0+255),f,b
  9932                           
  9933                           ; BSR set to: 0
  9934  00226E  0100               	movlb	0	; () banked
  9935  002270  8FC4               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9936                           
  9937                           ; BSR set to: 0
  9938  002272  0EFF               	movlw	255
  9939  002274  0100               	movlb	0	; () banked
  9940  002276  17C3               	andwf	___ftdiv@f1& (0+255),f,b
  9941  002278  0EFF               	movlw	255
  9942  00227A  0100               	movlb	0	; () banked
  9943  00227C  17C4               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9944  00227E  0E00               	movlw	0
  9945  002280  0100               	movlb	0	; () banked
  9946  002282  17C5               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9947                           
  9948                           ; BSR set to: 0
  9949  002284  0100               	movlb	0	; () banked
  9950  002286  8FC7               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9951                           
  9952                           ; BSR set to: 0
  9953  002288  0EFF               	movlw	255
  9954  00228A  0100               	movlb	0	; () banked
  9955  00228C  17C6               	andwf	___ftdiv@f2& (0+255),f,b
  9956  00228E  0EFF               	movlw	255
  9957  002290  0100               	movlb	0	; () banked
  9958  002292  17C7               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9959  002294  0E00               	movlw	0
  9960  002296  0100               	movlb	0	; () banked
  9961  002298  17C8               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9962                           
  9963                           ; BSR set to: 0
  9964  00229A  0E18               	movlw	24
  9965  00229C  0100               	movlb	0	; () banked
  9966  00229E  6FCC               	movwf	___ftdiv@cntr& (0+255),b
  9967  0022A0                     l5163:
  9968                           
  9969                           ; BSR set to: 0
  9970  0022A0  0100               	movlb	0	; () banked
  9971  0022A2  90D8               	bcf	status,0,c
  9972  0022A4  37CD               	rlcf	___ftdiv@f3& (0+255),f,b
  9973  0022A6  37CE               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9974  0022A8  37CF               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9975                           
  9976                           ; BSR set to: 0
  9977  0022AA  0100               	movlb	0	; () banked
  9978  0022AC  51C6               	movf	___ftdiv@f2& (0+255),w,b
  9979  0022AE  0100               	movlb	0	; () banked
  9980  0022B0  5DC3               	subwf	___ftdiv@f1& (0+255),w,b
  9981  0022B2  0100               	movlb	0	; () banked
  9982  0022B4  51C7               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9983  0022B6  0100               	movlb	0	; () banked
  9984  0022B8  59C4               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9985  0022BA  0100               	movlb	0	; () banked
  9986  0022BC  51C8               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9987  0022BE  0100               	movlb	0	; () banked
  9988  0022C0  59C5               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9989  0022C2  A0D8               	btfss	status,0,c
  9990  0022C4  D00E               	goto	l1104
  9991                           
  9992                           ; BSR set to: 0
  9993  0022C6  0100               	movlb	0	; () banked
  9994  0022C8  51C6               	movf	___ftdiv@f2& (0+255),w,b
  9995  0022CA  0100               	movlb	0	; () banked
  9996  0022CC  5FC3               	subwf	___ftdiv@f1& (0+255),f,b
  9997  0022CE  0100               	movlb	0	; () banked
  9998  0022D0  51C7               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9999  0022D2  0100               	movlb	0	; () banked
 10000  0022D4  5BC4               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10001  0022D6  0100               	movlb	0	; () banked
 10002  0022D8  51C8               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10003  0022DA  0100               	movlb	0	; () banked
 10004  0022DC  5BC5               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10005                           
 10006                           ; BSR set to: 0
 10007  0022DE  0100               	movlb	0	; () banked
 10008  0022E0  81CD               	bsf	___ftdiv@f3& (0+255),0,b
 10009  0022E2                     l1104:
 10010                           
 10011                           ; BSR set to: 0
 10012  0022E2  0100               	movlb	0	; () banked
 10013  0022E4  90D8               	bcf	status,0,c
 10014  0022E6  37C3               	rlcf	___ftdiv@f1& (0+255),f,b
 10015  0022E8  37C4               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10016  0022EA  37C5               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10017                           
 10018                           ; BSR set to: 0
 10019  0022EC  0100               	movlb	0	; () banked
 10020  0022EE  2FCC               	decfsz	___ftdiv@cntr& (0+255),f,b
 10021  0022F0  D7D7               	goto	l5163
 10022                           
 10023                           ; BSR set to: 0
 10024                           
 10025                           ; BSR set to: 0
 10026  0022F2  C0CD  F01B         	movff	___ftdiv@f3,___ftpack@arg
 10027  0022F6  C0CE  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10028  0022FA  C0CF  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10029  0022FE  C0D0  F01E         	movff	___ftdiv@exp,___ftpack@exp
 10030  002302  C0D1  F01F         	movff	___ftdiv@sign,___ftpack@sign
 10031  002306  ECA2  F017         	call	___ftpack	;wreg free
 10032  00230A  C01B  F0C3         	movff	?___ftpack,?___ftdiv
 10033  00230E  C01C  F0C4         	movff	?___ftpack+1,?___ftdiv+1
 10034  002312  C01D  F0C5         	movff	?___ftpack+2,?___ftdiv+2
 10035  002316  0012               	return	
 10036  002318                     __end_of___ftdiv:
 10037                           	opt stack 0
 10038                           tosu	equ	0xFFF
 10039                           tosh	equ	0xFFE
 10040                           tosl	equ	0xFFD
 10041                           pclath	equ	0xFFA
 10042                           tblptru	equ	0xFF8
 10043                           tblptrh	equ	0xFF7
 10044                           tblptrl	equ	0xFF6
 10045                           tablat	equ	0xFF5
 10046                           prodh	equ	0xFF4
 10047                           prodl	equ	0xFF3
 10048                           intcon	equ	0xFF2
 10049                           intcon2	equ	0xFF1
 10050                           postinc0	equ	0xFEE
 10051                           wreg	equ	0xFE8
 10052                           postinc1	equ	0xFE6
 10053                           postdec1	equ	0xFE5
 10054                           fsr1h	equ	0xFE2
 10055                           fsr1l	equ	0xFE1
 10056                           indf2	equ	0xFDF
 10057                           postinc2	equ	0xFDE
 10058                           postdec2	equ	0xFDD
 10059                           plusw2	equ	0xFDB
 10060                           fsr2h	equ	0xFDA
 10061                           fsr2l	equ	0xFD9
 10062                           status	equ	0xFD8
 10063                           
 10064 ;; *************** function ___altoft *****************
 10065 ;; Defined at:
 10066 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\altoft.c"
 10067 ;; Parameters:    Size  Location     Type
 10068 ;;  c               4   34[COMRAM] long 
 10069 ;; Auto vars:     Size  Location     Type
 10070 ;;  sign            1    1[BANK0 ] unsigned char 
 10071 ;;  exp             1    0[BANK0 ] unsigned char 
 10072 ;; Return value:  Size  Location     Type
 10073 ;;                  3   34[COMRAM] float 
 10074 ;; Registers used:
 10075 ;;		wreg, status,2, status,0, cstack
 10076 ;; Tracked objects:
 10077 ;;		On entry : 0/0
 10078 ;;		On exit  : 0/0
 10079 ;;		Unchanged: 0/0
 10080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10081 ;;      Params:         4       0       0       0       0       0       0
 10082 ;;      Locals:         0       2       0       0       0       0       0
 10083 ;;      Temps:          4       0       0       0       0       0       0
 10084 ;;      Totals:         8       2       0       0       0       0       0
 10085 ;;Total ram usage:       10 bytes
 10086 ;; Hardware stack levels used:    1
 10087 ;; Hardware stack levels required when called:    5
 10088 ;; This function calls:
 10089 ;;		___ftpack
 10090 ;; This function is called by:
 10091 ;;		_Battery_Convert
 10092 ;; This function uses a non-reentrant model
 10093 ;;
 10094                           
 10095                           	psect	text52
 10096  0032BA                     __ptext52:
 10097                           	opt stack 0
 10098  0032BA                     ___altoft:
 10099                           	opt stack 24
 10100                           
 10101                           ;incstack = 0
 10102  0032BA  0E00               	movlw	0
 10103  0032BC  0100               	movlb	0	; () banked
 10104  0032BE  6FC2               	movwf	___altoft@sign& (0+255),b
 10105  0032C0  0E8E               	movlw	142
 10106  0032C2  0100               	movlb	0	; () banked
 10107  0032C4  6FC1               	movwf	___altoft@exp& (0+255),b
 10108                           
 10109                           ; BSR set to: 0
 10110  0032C6  AE26               	btfss	___altoft@c+3,7,c
 10111  0032C8  D013               	goto	l5125
 10112                           
 10113                           ; BSR set to: 0
 10114  0032CA  1E26               	comf	___altoft@c+3,f,c
 10115  0032CC  1E25               	comf	___altoft@c+2,f,c
 10116  0032CE  1E24               	comf	___altoft@c+1,f,c
 10117  0032D0  6C23               	negf	___altoft@c,c
 10118  0032D2  0E00               	movlw	0
 10119  0032D4  2224               	addwfc	___altoft@c+1,f,c
 10120  0032D6  2225               	addwfc	___altoft@c+2,f,c
 10121  0032D8  2226               	addwfc	___altoft@c+3,f,c
 10122                           
 10123                           ; BSR set to: 0
 10124  0032DA  0E01               	movlw	1
 10125  0032DC  0100               	movlb	0	; () banked
 10126  0032DE  6FC2               	movwf	___altoft@sign& (0+255),b
 10127                           
 10128                           ; BSR set to: 0
 10129  0032E0  D007               	goto	l5125
 10130  0032E2                     l5123:
 10131                           
 10132                           ; BSR set to: 0
 10133  0032E2  90D8               	bcf	status,0,c
 10134  0032E4  3226               	rrcf	___altoft@c+3,f,c
 10135  0032E6  3225               	rrcf	___altoft@c+2,f,c
 10136  0032E8  3224               	rrcf	___altoft@c+1,f,c
 10137  0032EA  3223               	rrcf	___altoft@c,f,c
 10138  0032EC  0100               	movlb	0	; () banked
 10139  0032EE  2BC1               	incf	___altoft@exp& (0+255),f,b
 10140  0032F0                     l5125:
 10141                           
 10142                           ; BSR set to: 0
 10143  0032F0  0E00               	movlw	0
 10144  0032F2  1423               	andwf	___altoft@c,w,c
 10145  0032F4  6E27               	movwf	??___altoft& (0+255),c
 10146  0032F6  0E00               	movlw	0
 10147  0032F8  1424               	andwf	___altoft@c+1,w,c
 10148  0032FA  6E28               	movwf	(??___altoft+1)& (0+255),c
 10149  0032FC  0E00               	movlw	0
 10150  0032FE  1425               	andwf	___altoft@c+2,w,c
 10151  003300  6E29               	movwf	(??___altoft+2)& (0+255),c
 10152  003302  0EFF               	movlw	255
 10153  003304  1426               	andwf	___altoft@c+3,w,c
 10154  003306  6E2A               	movwf	(??___altoft+3)& (0+255),c
 10155  003308  5027               	movf	??___altoft,w,c
 10156  00330A  1028               	iorwf	??___altoft+1,w,c
 10157  00330C  1029               	iorwf	??___altoft+2,w,c
 10158  00330E  102A               	iorwf	??___altoft+3,w,c
 10159  003310  A4D8               	btfss	status,2,c
 10160  003312  D7E7               	goto	l5123
 10161                           
 10162                           ; BSR set to: 0
 10163                           
 10164                           ; BSR set to: 0
 10165  003314  C023  F01B         	movff	___altoft@c,___ftpack@arg
 10166  003318  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
 10167  00331C  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
 10168  003320  C0C1  F01E         	movff	___altoft@exp,___ftpack@exp
 10169  003324  C0C2  F01F         	movff	___altoft@sign,___ftpack@sign
 10170  003328  ECA2  F017         	call	___ftpack	;wreg free
 10171  00332C  C01B  F023         	movff	?___ftpack,?___altoft
 10172  003330  C01C  F024         	movff	?___ftpack+1,?___altoft+1
 10173  003334  C01D  F025         	movff	?___ftpack+2,?___altoft+2
 10174  003338  0012               	return	
 10175  00333A                     __end_of___altoft:
 10176                           	opt stack 0
 10177                           tosu	equ	0xFFF
 10178                           tosh	equ	0xFFE
 10179                           tosl	equ	0xFFD
 10180                           pclath	equ	0xFFA
 10181                           tblptru	equ	0xFF8
 10182                           tblptrh	equ	0xFF7
 10183                           tblptrl	equ	0xFF6
 10184                           tablat	equ	0xFF5
 10185                           prodh	equ	0xFF4
 10186                           prodl	equ	0xFF3
 10187                           intcon	equ	0xFF2
 10188                           intcon2	equ	0xFF1
 10189                           postinc0	equ	0xFEE
 10190                           wreg	equ	0xFE8
 10191                           postinc1	equ	0xFE6
 10192                           postdec1	equ	0xFE5
 10193                           fsr1h	equ	0xFE2
 10194                           fsr1l	equ	0xFE1
 10195                           indf2	equ	0xFDF
 10196                           postinc2	equ	0xFDE
 10197                           postdec2	equ	0xFDD
 10198                           plusw2	equ	0xFDB
 10199                           fsr2h	equ	0xFDA
 10200                           fsr2l	equ	0xFD9
 10201                           status	equ	0xFD8
 10202                           
 10203 ;; *************** function _Battery_Filter *****************
 10204 ;; Defined at:
 10205 ;;		line 49 in file "Battery.c"
 10206 ;; Parameters:    Size  Location     Type
 10207 ;;		None
 10208 ;; Auto vars:     Size  Location     Type
 10209 ;;  x               2   44[BANK0 ] int 
 10210 ;; Return value:  Size  Location     Type
 10211 ;;		None               void
 10212 ;; Registers used:
 10213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10219 ;;      Params:         0       0       0       0       0       0       0
 10220 ;;      Locals:         0       2       0       0       0       0       0
 10221 ;;      Temps:          0       0       0       0       0       0       0
 10222 ;;      Totals:         0       2       0       0       0       0       0
 10223 ;;Total ram usage:        2 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:    6
 10226 ;; This function calls:
 10227 ;;		___ftadd
 10228 ;;		___ftmul
 10229 ;;		___wmul
 10230 ;; This function is called by:
 10231 ;;		_Battery_Convert
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235                           	psect	text53
 10236  001F2E                     __ptext53:
 10237                           	opt stack 0
 10238  001F2E                     _Battery_Filter:
 10239                           	opt stack 23
 10240                           
 10241                           ;Battery.c: 52: for(int x = 0; x < 9; x++)
 10242                           
 10243                           ;incstack = 0
 10244  001F2E  0E00               	movlw	0
 10245  001F30  0100               	movlb	0	; () banked
 10246  001F32  6FEE               	movwf	(Battery_Filter@x+1)& (0+255),b
 10247  001F34  0E00               	movlw	0
 10248  001F36  6FED               	movwf	Battery_Filter@x& (0+255),b
 10249                           
 10250                           ; BSR set to: 0
 10251  001F38  0100               	movlb	0	; () banked
 10252  001F3A  BFEE               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
 10253  001F3C  D00A               	goto	l4831
 10254  001F3E  0100               	movlb	0	; () banked
 10255  001F40  51EE               	movf	(Battery_Filter@x+1)& (0+255),w,b
 10256  001F42  E106               	bnz	u5190
 10257  001F44  0E09               	movlw	9
 10258  001F46  0100               	movlb	0	; () banked
 10259  001F48  5DED               	subwf	Battery_Filter@x& (0+255),w,b
 10260  001F4A  B0D8               	btfsc	status,0,c
 10261  001F4C  0012               	return	
 10262  001F4E  D001               	goto	l4831
 10263  001F50                     u5190:
 10264                           
 10265                           ; BSR set to: 0
 10266  001F50  0012               	return	
 10267  001F52                     l4831:
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;Battery.c: 53: {
 10271                           ;Battery.c: 54: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
 10272  001F52  C0ED  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10273  001F56  C0EE  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10274  001F5A  0E00               	movlw	0
 10275  001F5C  6E1E               	movwf	___wmul@multiplicand+1,c
 10276  001F5E  0E03               	movlw	3
 10277  001F60  6E1D               	movwf	___wmul@multiplicand,c
 10278  001F62  EC5B  F01C         	call	___wmul	;wreg free
 10279  001F66  0E70               	movlw	low _Battery_Volt
 10280  001F68  241B               	addwf	?___wmul,w,c
 10281  001F6A  6ED9               	movwf	fsr2l,c
 10282  001F6C  0E01               	movlw	high _Battery_Volt
 10283  001F6E  201C               	addwfc	?___wmul+1,w,c
 10284  001F70  6EDA               	movwf	fsr2h,c
 10285  001F72  0E48               	movlw	72
 10286  001F74  0100               	movlb	0	; () banked
 10287  001F76  6FD5               	movwf	___ftmul@f2& (0+255),b
 10288  001F78  0E61               	movlw	97
 10289  001F7A  0100               	movlb	0	; () banked
 10290  001F7C  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
 10291  001F7E  0E3F               	movlw	63
 10292  001F80  0100               	movlb	0	; () banked
 10293  001F82  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
 10294  001F84  C0ED  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10295  001F88  C0EE  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10296  001F8C  0E00               	movlw	0
 10297  001F8E  6E1E               	movwf	___wmul@multiplicand+1,c
 10298  001F90  0E03               	movlw	3
 10299  001F92  6E1D               	movwf	___wmul@multiplicand,c
 10300  001F94  EC5B  F01C         	call	___wmul	;wreg free
 10301  001F98  0E52               	movlw	low _TempBattery_Volt
 10302  001F9A  241B               	addwf	?___wmul,w,c
 10303  001F9C  6EE1               	movwf	fsr1l,c
 10304  001F9E  0E01               	movlw	high _TempBattery_Volt
 10305  001FA0  201C               	addwfc	?___wmul+1,w,c
 10306  001FA2  6EE2               	movwf	fsr1h,c
 10307  001FA4  CFE6 F0D2          	movff	postinc1,___ftmul@f1
 10308  001FA8  CFE6 F0D3          	movff	postinc1,___ftmul@f1+1
 10309  001FAC  CFE5 F0D4          	movff	postdec1,___ftmul@f1+2
 10310  001FB0  ECE8  F00E         	call	___ftmul	;wreg free
 10311  001FB4  C0D2  F0E1         	movff	?___ftmul,___ftadd@f1
 10312  001FB8  C0D3  F0E2         	movff	?___ftmul+1,___ftadd@f1+1
 10313  001FBC  C0D4  F0E3         	movff	?___ftmul+2,___ftadd@f1+2
 10314  001FC0  0EC3               	movlw	195
 10315  001FC2  0100               	movlb	0	; () banked
 10316  001FC4  6FD5               	movwf	___ftmul@f2& (0+255),b
 10317  001FC6  0EF5               	movlw	245
 10318  001FC8  0100               	movlb	0	; () banked
 10319  001FCA  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
 10320  001FCC  0E3D               	movlw	61
 10321  001FCE  0100               	movlb	0	; () banked
 10322  001FD0  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
 10323  001FD2  0E00               	movlw	0
 10324  001FD4  6E1E               	movwf	___wmul@multiplicand+1,c
 10325  001FD6  0E03               	movlw	3
 10326  001FD8  6E1D               	movwf	___wmul@multiplicand,c
 10327  001FDA  C0ED  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10328  001FDE  C0EE  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10329  001FE2  EC5B  F01C         	call	___wmul	;wreg free
 10330  001FE6  0E00               	movlw	low _PrevBattery_Volt
 10331  001FE8  241B               	addwf	?___wmul,w,c
 10332  001FEA  6EE1               	movwf	fsr1l,c
 10333  001FEC  0E01               	movlw	high _PrevBattery_Volt
 10334  001FEE  201C               	addwfc	?___wmul+1,w,c
 10335  001FF0  6EE2               	movwf	fsr1h,c
 10336  001FF2  CFE6 F0D2          	movff	postinc1,___ftmul@f1
 10337  001FF6  CFE6 F0D3          	movff	postinc1,___ftmul@f1+1
 10338  001FFA  CFE5 F0D4          	movff	postdec1,___ftmul@f1+2
 10339  001FFE  ECE8  F00E         	call	___ftmul	;wreg free
 10340  002002  C0D2  F0E4         	movff	?___ftmul,___ftadd@f2
 10341  002006  C0D3  F0E5         	movff	?___ftmul+1,___ftadd@f2+1
 10342  00200A  C0D4  F0E6         	movff	?___ftmul+2,___ftadd@f2+2
 10343  00200E  EC95  F00A         	call	___ftadd	;wreg free
 10344  002012  C0E1  FFDE         	movff	?___ftadd,postinc2
 10345  002016  C0E2  FFDE         	movff	?___ftadd+1,postinc2
 10346  00201A  C0E3  FFDE         	movff	?___ftadd+2,postinc2
 10347                           
 10348                           ;Battery.c: 55: PrevBattery_Volt[x] = Battery_Volt[x];
 10349  00201E  C0ED  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10350  002022  C0EE  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10351  002026  0E00               	movlw	0
 10352  002028  6E1E               	movwf	___wmul@multiplicand+1,c
 10353  00202A  0E03               	movlw	3
 10354  00202C  6E1D               	movwf	___wmul@multiplicand,c
 10355  00202E  EC5B  F01C         	call	___wmul	;wreg free
 10356  002032  0E70               	movlw	low _Battery_Volt
 10357  002034  241B               	addwf	?___wmul,w,c
 10358  002036  6ED9               	movwf	fsr2l,c
 10359  002038  0E01               	movlw	high _Battery_Volt
 10360  00203A  201C               	addwfc	?___wmul+1,w,c
 10361  00203C  6EDA               	movwf	fsr2h,c
 10362  00203E  C0ED  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10363  002042  C0EE  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10364  002046  0E00               	movlw	0
 10365  002048  6E1E               	movwf	___wmul@multiplicand+1,c
 10366  00204A  0E03               	movlw	3
 10367  00204C  6E1D               	movwf	___wmul@multiplicand,c
 10368  00204E  EC5B  F01C         	call	___wmul	;wreg free
 10369  002052  0E00               	movlw	low _PrevBattery_Volt
 10370  002054  241B               	addwf	?___wmul,w,c
 10371  002056  6EE1               	movwf	fsr1l,c
 10372  002058  0E01               	movlw	high _PrevBattery_Volt
 10373  00205A  201C               	addwfc	?___wmul+1,w,c
 10374  00205C  6EE2               	movwf	fsr1h,c
 10375  00205E  CFDE FFE6          	movff	postinc2,postinc1
 10376  002062  CFDE FFE6          	movff	postinc2,postinc1
 10377  002066  CFDE FFE6          	movff	postinc2,postinc1
 10378  00206A  0100               	movlb	0	; () banked
 10379  00206C  4BED               	infsnz	Battery_Filter@x& (0+255),f,b
 10380  00206E  2BEE               	incf	(Battery_Filter@x+1)& (0+255),f,b
 10381                           
 10382                           ; BSR set to: 0
 10383  002070  0100               	movlb	0	; () banked
 10384  002072  BFEE               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
 10385  002074  D76E               	goto	l4831
 10386  002076  0100               	movlb	0	; () banked
 10387  002078  51EE               	movf	(Battery_Filter@x+1)& (0+255),w,b
 10388  00207A  E101               	bnz	l288
 10389  00207C  D763               	goto	L3
 10390  00207E                     l288:
 10391                           
 10392                           ; BSR set to: 0
 10393  00207E  0012               	return		;funcret
 10394  002080                     __end_of_Battery_Filter:
 10395                           	opt stack 0
 10396                           tosu	equ	0xFFF
 10397                           tosh	equ	0xFFE
 10398                           tosl	equ	0xFFD
 10399                           pclath	equ	0xFFA
 10400                           tblptru	equ	0xFF8
 10401                           tblptrh	equ	0xFF7
 10402                           tblptrl	equ	0xFF6
 10403                           tablat	equ	0xFF5
 10404                           prodh	equ	0xFF4
 10405                           prodl	equ	0xFF3
 10406                           intcon	equ	0xFF2
 10407                           intcon2	equ	0xFF1
 10408                           postinc0	equ	0xFEE
 10409                           wreg	equ	0xFE8
 10410                           postinc1	equ	0xFE6
 10411                           postdec1	equ	0xFE5
 10412                           fsr1h	equ	0xFE2
 10413                           fsr1l	equ	0xFE1
 10414                           indf2	equ	0xFDF
 10415                           postinc2	equ	0xFDE
 10416                           postdec2	equ	0xFDD
 10417                           plusw2	equ	0xFDB
 10418                           fsr2h	equ	0xFDA
 10419                           fsr2l	equ	0xFD9
 10420                           status	equ	0xFD8
 10421                           
 10422 ;; *************** function ___wmul *****************
 10423 ;; Defined at:
 10424 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;  multiplier      2   26[COMRAM] unsigned int 
 10427 ;;  multiplicand    2   28[COMRAM] unsigned int 
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;  product         2   30[COMRAM] unsigned int 
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  2   26[COMRAM] unsigned int 
 10432 ;; Registers used:
 10433 ;;		wreg, status,2, status,0, prodl, prodh
 10434 ;; Tracked objects:
 10435 ;;		On entry : 0/0
 10436 ;;		On exit  : 0/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10439 ;;      Params:         4       0       0       0       0       0       0
 10440 ;;      Locals:         2       0       0       0       0       0       0
 10441 ;;      Temps:          0       0       0       0       0       0       0
 10442 ;;      Totals:         6       0       0       0       0       0       0
 10443 ;;Total ram usage:        6 bytes
 10444 ;; Hardware stack levels used:    1
 10445 ;; Hardware stack levels required when called:    4
 10446 ;; This function calls:
 10447 ;;		Nothing
 10448 ;; This function is called by:
 10449 ;;		_Battery_Convert
 10450 ;;		_Battery_Filter
 10451 ;;		_Battery_Fault
 10452 ;;		_Battery_Get
 10453 ;;		_Temp_Fault
 10454 ;;		_Temp_Filter
 10455 ;;		_Temp_Convert
 10456 ;;		_Tempeture_Get
 10457 ;;		_eval_poly
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           	psect	text54
 10462  0038B6                     __ptext54:
 10463                           	opt stack 0
 10464  0038B6                     ___wmul:
 10465                           	opt stack 24
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;incstack = 0
 10469  0038B6  501B               	movf	___wmul@multiplier,w,c
 10470  0038B8  021D               	mulwf	___wmul@multiplicand,c
 10471  0038BA  CFF3 F01F          	movff	prodl,___wmul@product
 10472  0038BE  CFF4 F020          	movff	prodh,___wmul@product+1
 10473  0038C2  501B               	movf	___wmul@multiplier,w,c
 10474  0038C4  021E               	mulwf	___wmul@multiplicand+1,c
 10475  0038C6  50F3               	movf	prodl,w,c
 10476  0038C8  2620               	addwf	___wmul@product+1,f,c
 10477  0038CA  501C               	movf	___wmul@multiplier+1,w,c
 10478  0038CC  021D               	mulwf	___wmul@multiplicand,c
 10479  0038CE  50F3               	movf	prodl,w,c
 10480  0038D0  2620               	addwf	___wmul@product+1,f,c
 10481  0038D2  C01F  F01B         	movff	___wmul@product,?___wmul
 10482  0038D6  C020  F01C         	movff	___wmul@product+1,?___wmul+1
 10483  0038DA  0012               	return	
 10484  0038DC                     __end_of___wmul:
 10485                           	opt stack 0
 10486                           tosu	equ	0xFFF
 10487                           tosh	equ	0xFFE
 10488                           tosl	equ	0xFFD
 10489                           pclath	equ	0xFFA
 10490                           tblptru	equ	0xFF8
 10491                           tblptrh	equ	0xFF7
 10492                           tblptrl	equ	0xFF6
 10493                           tablat	equ	0xFF5
 10494                           prodh	equ	0xFF4
 10495                           prodl	equ	0xFF3
 10496                           intcon	equ	0xFF2
 10497                           intcon2	equ	0xFF1
 10498                           postinc0	equ	0xFEE
 10499                           wreg	equ	0xFE8
 10500                           postinc1	equ	0xFE6
 10501                           postdec1	equ	0xFE5
 10502                           fsr1h	equ	0xFE2
 10503                           fsr1l	equ	0xFE1
 10504                           indf2	equ	0xFDF
 10505                           postinc2	equ	0xFDE
 10506                           postdec2	equ	0xFDD
 10507                           plusw2	equ	0xFDB
 10508                           fsr2h	equ	0xFDA
 10509                           fsr2l	equ	0xFD9
 10510                           status	equ	0xFD8
 10511                           
 10512 ;; *************** function ___ftmul *****************
 10513 ;; Defined at:
 10514 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;  f1              3   17[BANK0 ] float 
 10517 ;;  f2              3   20[BANK0 ] float 
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
 10520 ;;  sign            1   31[BANK0 ] unsigned char 
 10521 ;;  cntr            1   30[BANK0 ] unsigned char 
 10522 ;;  exp             1   26[BANK0 ] unsigned char 
 10523 ;; Return value:  Size  Location     Type
 10524 ;;                  3   17[BANK0 ] float 
 10525 ;; Registers used:
 10526 ;;		wreg, status,2, status,0, cstack
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10532 ;;      Params:         0       6       0       0       0       0       0
 10533 ;;      Locals:         0       6       0       0       0       0       0
 10534 ;;      Temps:          0       3       0       0       0       0       0
 10535 ;;      Totals:         0      15       0       0       0       0       0
 10536 ;;Total ram usage:       15 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    5
 10539 ;; This function calls:
 10540 ;;		___ftpack
 10541 ;; This function is called by:
 10542 ;;		_Battery_Convert
 10543 ;;		_Battery_Filter
 10544 ;;		_Temp_Filter
 10545 ;;		_Temp_Convert
 10546 ;;		_updateComms
 10547 ;;		_log
 10548 ;;		_eval_poly
 10549 ;; This function uses a non-reentrant model
 10550 ;;
 10551                           
 10552                           	psect	text55
 10553  001DD0                     __ptext55:
 10554                           	opt stack 0
 10555  001DD0                     ___ftmul:
 10556                           	opt stack 24
 10557                           
 10558                           ;incstack = 0
 10559  001DD0  C0D4  F0D8         	movff	___ftmul@f1+2,??___ftmul
 10560  001DD4  0100               	movlb	0	; () banked
 10561  001DD6  6BD9               	clrf	(??___ftmul+1)& (0+255),b
 10562  001DD8  6BDA               	clrf	(??___ftmul+2)& (0+255),b
 10563  001DDA  0100               	movlb	0	; () banked
 10564  001DDC  35D3               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10565  001DDE  0100               	movlb	0	; () banked
 10566  001DE0  37D8               	rlcf	??___ftmul& (0+255),f,b
 10567  001DE2  E301               	bnc	u4881
 10568  001DE4  81D9               	bsf	(??___ftmul+1)& (0+255),0,b
 10569  001DE6                     u4881:
 10570  001DE6  0100               	movlb	0	; () banked
 10571  001DE8  51D8               	movf	??___ftmul& (0+255),w,b
 10572  001DEA  0100               	movlb	0	; () banked
 10573  001DEC  6FDB               	movwf	___ftmul@exp& (0+255),b
 10574  001DEE  0100               	movlb	0	; () banked
 10575  001DF0  51DB               	movf	___ftmul@exp& (0+255),w,b
 10576  001DF2  A4D8               	btfss	status,2,c
 10577  001DF4  D00A               	goto	l4621
 10578                           
 10579                           ; BSR set to: 0
 10580  001DF6  0E00               	movlw	0
 10581  001DF8  0100               	movlb	0	; () banked
 10582  001DFA  6FD2               	movwf	?___ftmul& (0+255),b
 10583  001DFC  0E00               	movlw	0
 10584  001DFE  0100               	movlb	0	; () banked
 10585  001E00  6FD3               	movwf	(?___ftmul+1)& (0+255),b
 10586  001E02  0E00               	movlw	0
 10587  001E04  0100               	movlb	0	; () banked
 10588  001E06  6FD4               	movwf	(?___ftmul+2)& (0+255),b
 10589                           
 10590                           ; BSR set to: 0
 10591  001E08  0012               	return	
 10592  001E0A                     l4621:
 10593                           
 10594                           ; BSR set to: 0
 10595  001E0A  C0D7  F0D8         	movff	___ftmul@f2+2,??___ftmul
 10596  001E0E  0100               	movlb	0	; () banked
 10597  001E10  6BD9               	clrf	(??___ftmul+1)& (0+255),b
 10598  001E12  6BDA               	clrf	(??___ftmul+2)& (0+255),b
 10599  001E14  0100               	movlb	0	; () banked
 10600  001E16  35D6               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10601  001E18  0100               	movlb	0	; () banked
 10602  001E1A  37D8               	rlcf	??___ftmul& (0+255),f,b
 10603  001E1C  E301               	bnc	u4901
 10604  001E1E  81D9               	bsf	(??___ftmul+1)& (0+255),0,b
 10605  001E20                     u4901:
 10606  001E20  0100               	movlb	0	; () banked
 10607  001E22  51D8               	movf	??___ftmul& (0+255),w,b
 10608  001E24  0100               	movlb	0	; () banked
 10609  001E26  6FE0               	movwf	___ftmul@sign& (0+255),b
 10610  001E28  0100               	movlb	0	; () banked
 10611  001E2A  51E0               	movf	___ftmul@sign& (0+255),w,b
 10612  001E2C  A4D8               	btfss	status,2,c
 10613  001E2E  D00A               	goto	l4627
 10614                           
 10615                           ; BSR set to: 0
 10616  001E30  0E00               	movlw	0
 10617  001E32  0100               	movlb	0	; () banked
 10618  001E34  6FD2               	movwf	?___ftmul& (0+255),b
 10619  001E36  0E00               	movlw	0
 10620  001E38  0100               	movlb	0	; () banked
 10621  001E3A  6FD3               	movwf	(?___ftmul+1)& (0+255),b
 10622  001E3C  0E00               	movlw	0
 10623  001E3E  0100               	movlb	0	; () banked
 10624  001E40  6FD4               	movwf	(?___ftmul+2)& (0+255),b
 10625                           
 10626                           ; BSR set to: 0
 10627  001E42  0012               	return	
 10628  001E44                     l4627:
 10629                           
 10630                           ; BSR set to: 0
 10631  001E44  0100               	movlb	0	; () banked
 10632  001E46  51E0               	movf	___ftmul@sign& (0+255),w,b
 10633  001E48  0F7B               	addlw	123
 10634  001E4A  0100               	movlb	0	; () banked
 10635  001E4C  27DB               	addwf	___ftmul@exp& (0+255),f,b
 10636                           
 10637                           ; BSR set to: 0
 10638  001E4E  C0D4  F0E0         	movff	___ftmul@f1+2,___ftmul@sign
 10639  001E52  0100               	movlb	0	; () banked
 10640  001E54  51D7               	movf	(___ftmul@f2+2)& (0+255),w,b
 10641  001E56  0100               	movlb	0	; () banked
 10642  001E58  1BE0               	xorwf	___ftmul@sign& (0+255),f,b
 10643  001E5A  0E80               	movlw	128
 10644  001E5C  0100               	movlb	0	; () banked
 10645  001E5E  17E0               	andwf	___ftmul@sign& (0+255),f,b
 10646                           
 10647                           ; BSR set to: 0
 10648  001E60  0100               	movlb	0	; () banked
 10649  001E62  8FD3               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10650                           
 10651                           ; BSR set to: 0
 10652  001E64  0100               	movlb	0	; () banked
 10653  001E66  8FD6               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10654                           
 10655                           ; BSR set to: 0
 10656  001E68  0EFF               	movlw	255
 10657  001E6A  0100               	movlb	0	; () banked
 10658  001E6C  17D5               	andwf	___ftmul@f2& (0+255),f,b
 10659  001E6E  0EFF               	movlw	255
 10660  001E70  0100               	movlb	0	; () banked
 10661  001E72  17D6               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10662  001E74  0E00               	movlw	0
 10663  001E76  0100               	movlb	0	; () banked
 10664  001E78  17D7               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10665                           
 10666                           ; BSR set to: 0
 10667  001E7A  0E00               	movlw	0
 10668  001E7C  0100               	movlb	0	; () banked
 10669  001E7E  6FDC               	movwf	___ftmul@f3_as_product& (0+255),b
 10670  001E80  0E00               	movlw	0
 10671  001E82  0100               	movlb	0	; () banked
 10672  001E84  6FDD               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10673  001E86  0E00               	movlw	0
 10674  001E88  0100               	movlb	0	; () banked
 10675  001E8A  6FDE               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10676                           
 10677                           ; BSR set to: 0
 10678  001E8C  0E07               	movlw	7
 10679  001E8E  0100               	movlb	0	; () banked
 10680  001E90  6FDF               	movwf	___ftmul@cntr& (0+255),b
 10681  001E92                     l4641:
 10682                           
 10683                           ; BSR set to: 0
 10684  001E92  0100               	movlb	0	; () banked
 10685  001E94  A1D2               	btfss	___ftmul@f1& (0+255),0,b
 10686  001E96  D00C               	goto	l4645
 10687                           
 10688                           ; BSR set to: 0
 10689  001E98  0100               	movlb	0	; () banked
 10690  001E9A  51D5               	movf	___ftmul@f2& (0+255),w,b
 10691  001E9C  0100               	movlb	0	; () banked
 10692  001E9E  27DC               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10693  001EA0  0100               	movlb	0	; () banked
 10694  001EA2  51D6               	movf	(___ftmul@f2+1)& (0+255),w,b
 10695  001EA4  0100               	movlb	0	; () banked
 10696  001EA6  23DD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10697  001EA8  0100               	movlb	0	; () banked
 10698  001EAA  51D7               	movf	(___ftmul@f2+2)& (0+255),w,b
 10699  001EAC  0100               	movlb	0	; () banked
 10700  001EAE  23DE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10701  001EB0                     l4645:
 10702                           
 10703                           ; BSR set to: 0
 10704  001EB0  0100               	movlb	0	; () banked
 10705  001EB2  90D8               	bcf	status,0,c
 10706  001EB4  33D4               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10707  001EB6  33D3               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10708  001EB8  33D2               	rrcf	___ftmul@f1& (0+255),f,b
 10709  001EBA  0100               	movlb	0	; () banked
 10710  001EBC  90D8               	bcf	status,0,c
 10711  001EBE  37D5               	rlcf	___ftmul@f2& (0+255),f,b
 10712  001EC0  37D6               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10713  001EC2  37D7               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10714                           
 10715                           ; BSR set to: 0
 10716  001EC4  0100               	movlb	0	; () banked
 10717  001EC6  2FDF               	decfsz	___ftmul@cntr& (0+255),f,b
 10718  001EC8  D7E4               	goto	l4641
 10719                           
 10720                           ; BSR set to: 0
 10721                           
 10722                           ; BSR set to: 0
 10723  001ECA  0E09               	movlw	9
 10724  001ECC  0100               	movlb	0	; () banked
 10725  001ECE  6FDF               	movwf	___ftmul@cntr& (0+255),b
 10726  001ED0                     l4651:
 10727                           
 10728                           ; BSR set to: 0
 10729  001ED0  0100               	movlb	0	; () banked
 10730  001ED2  A1D2               	btfss	___ftmul@f1& (0+255),0,b
 10731  001ED4  D00C               	goto	l4655
 10732                           
 10733                           ; BSR set to: 0
 10734  001ED6  0100               	movlb	0	; () banked
 10735  001ED8  51D5               	movf	___ftmul@f2& (0+255),w,b
 10736  001EDA  0100               	movlb	0	; () banked
 10737  001EDC  27DC               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10738  001EDE  0100               	movlb	0	; () banked
 10739  001EE0  51D6               	movf	(___ftmul@f2+1)& (0+255),w,b
 10740  001EE2  0100               	movlb	0	; () banked
 10741  001EE4  23DD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10742  001EE6  0100               	movlb	0	; () banked
 10743  001EE8  51D7               	movf	(___ftmul@f2+2)& (0+255),w,b
 10744  001EEA  0100               	movlb	0	; () banked
 10745  001EEC  23DE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10746  001EEE                     l4655:
 10747                           
 10748                           ; BSR set to: 0
 10749  001EEE  0100               	movlb	0	; () banked
 10750  001EF0  90D8               	bcf	status,0,c
 10751  001EF2  33D4               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10752  001EF4  33D3               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10753  001EF6  33D2               	rrcf	___ftmul@f1& (0+255),f,b
 10754  001EF8  0100               	movlb	0	; () banked
 10755  001EFA  90D8               	bcf	status,0,c
 10756  001EFC  33DE               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10757  001EFE  33DD               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10758  001F00  33DC               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10759                           
 10760                           ; BSR set to: 0
 10761  001F02  0100               	movlb	0	; () banked
 10762  001F04  2FDF               	decfsz	___ftmul@cntr& (0+255),f,b
 10763  001F06  D7E4               	goto	l4651
 10764                           
 10765                           ; BSR set to: 0
 10766                           
 10767                           ; BSR set to: 0
 10768  001F08  C0DC  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
 10769  001F0C  C0DD  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10770  001F10  C0DE  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10771  001F14  C0DB  F01E         	movff	___ftmul@exp,___ftpack@exp
 10772  001F18  C0E0  F01F         	movff	___ftmul@sign,___ftpack@sign
 10773  001F1C  ECA2  F017         	call	___ftpack	;wreg free
 10774  001F20  C01B  F0D2         	movff	?___ftpack,?___ftmul
 10775  001F24  C01C  F0D3         	movff	?___ftpack+1,?___ftmul+1
 10776  001F28  C01D  F0D4         	movff	?___ftpack+2,?___ftmul+2
 10777  001F2C  0012               	return	
 10778  001F2E                     __end_of___ftmul:
 10779                           	opt stack 0
 10780                           tosu	equ	0xFFF
 10781                           tosh	equ	0xFFE
 10782                           tosl	equ	0xFFD
 10783                           pclath	equ	0xFFA
 10784                           tblptru	equ	0xFF8
 10785                           tblptrh	equ	0xFF7
 10786                           tblptrl	equ	0xFF6
 10787                           tablat	equ	0xFF5
 10788                           prodh	equ	0xFF4
 10789                           prodl	equ	0xFF3
 10790                           intcon	equ	0xFF2
 10791                           intcon2	equ	0xFF1
 10792                           postinc0	equ	0xFEE
 10793                           wreg	equ	0xFE8
 10794                           postinc1	equ	0xFE6
 10795                           postdec1	equ	0xFE5
 10796                           fsr1h	equ	0xFE2
 10797                           fsr1l	equ	0xFE1
 10798                           indf2	equ	0xFDF
 10799                           postinc2	equ	0xFDE
 10800                           postdec2	equ	0xFDD
 10801                           plusw2	equ	0xFDB
 10802                           fsr2h	equ	0xFDA
 10803                           fsr2l	equ	0xFD9
 10804                           status	equ	0xFD8
 10805                           
 10806 ;; *************** function ___ftadd *****************
 10807 ;; Defined at:
 10808 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;  f1              3   32[BANK0 ] float 
 10811 ;;  f2              3   35[BANK0 ] float 
 10812 ;; Auto vars:     Size  Location     Type
 10813 ;;  exp1            1   43[BANK0 ] unsigned char 
 10814 ;;  exp2            1   42[BANK0 ] unsigned char 
 10815 ;;  sign            1   41[BANK0 ] unsigned char 
 10816 ;; Return value:  Size  Location     Type
 10817 ;;                  3   32[BANK0 ] float 
 10818 ;; Registers used:
 10819 ;;		wreg, status,2, status,0, cstack
 10820 ;; Tracked objects:
 10821 ;;		On entry : 0/0
 10822 ;;		On exit  : 0/0
 10823 ;;		Unchanged: 0/0
 10824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10825 ;;      Params:         0       6       0       0       0       0       0
 10826 ;;      Locals:         0       3       0       0       0       0       0
 10827 ;;      Temps:          0       3       0       0       0       0       0
 10828 ;;      Totals:         0      12       0       0       0       0       0
 10829 ;;Total ram usage:       12 bytes
 10830 ;; Hardware stack levels used:    1
 10831 ;; Hardware stack levels required when called:    5
 10832 ;; This function calls:
 10833 ;;		___ftpack
 10834 ;; This function is called by:
 10835 ;;		_Battery_Filter
 10836 ;;		_Temp_Filter
 10837 ;;		_Temp_Convert
 10838 ;;		___ftsub
 10839 ;;		_log
 10840 ;;		_eval_poly
 10841 ;; This function uses a non-reentrant model
 10842 ;;
 10843                           
 10844                           	psect	text56
 10845  00152A                     __ptext56:
 10846                           	opt stack 0
 10847  00152A                     ___ftadd:
 10848                           	opt stack 22
 10849                           
 10850                           ;incstack = 0
 10851  00152A  C0E3  F0E7         	movff	___ftadd@f1+2,??___ftadd
 10852  00152E  0100               	movlb	0	; () banked
 10853  001530  6BE8               	clrf	(??___ftadd+1)& (0+255),b
 10854  001532  6BE9               	clrf	(??___ftadd+2)& (0+255),b
 10855  001534  0100               	movlb	0	; () banked
 10856  001536  35E2               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10857  001538  0100               	movlb	0	; () banked
 10858  00153A  37E7               	rlcf	??___ftadd& (0+255),f,b
 10859  00153C  E301               	bnc	u4671
 10860  00153E  81E8               	bsf	(??___ftadd+1)& (0+255),0,b
 10861  001540                     u4671:
 10862  001540  0100               	movlb	0	; () banked
 10863  001542  51E7               	movf	??___ftadd& (0+255),w,b
 10864  001544  0100               	movlb	0	; () banked
 10865  001546  6FEC               	movwf	___ftadd@exp1& (0+255),b
 10866  001548  C0E6  F0E7         	movff	___ftadd@f2+2,??___ftadd
 10867  00154C  0100               	movlb	0	; () banked
 10868  00154E  6BE8               	clrf	(??___ftadd+1)& (0+255),b
 10869  001550  6BE9               	clrf	(??___ftadd+2)& (0+255),b
 10870  001552  0100               	movlb	0	; () banked
 10871  001554  35E5               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10872  001556  0100               	movlb	0	; () banked
 10873  001558  37E7               	rlcf	??___ftadd& (0+255),f,b
 10874  00155A  E301               	bnc	u4681
 10875  00155C  81E8               	bsf	(??___ftadd+1)& (0+255),0,b
 10876  00155E                     u4681:
 10877  00155E  0100               	movlb	0	; () banked
 10878  001560  51E7               	movf	??___ftadd& (0+255),w,b
 10879  001562  0100               	movlb	0	; () banked
 10880  001564  6FEB               	movwf	___ftadd@exp2& (0+255),b
 10881                           
 10882                           ; BSR set to: 0
 10883  001566  0100               	movlb	0	; () banked
 10884  001568  51EC               	movf	___ftadd@exp1& (0+255),w,b
 10885  00156A  0100               	movlb	0	; () banked
 10886  00156C  B4D8               	btfsc	status,2,c
 10887  00156E  D011               	goto	l1069
 10888                           
 10889                           ; BSR set to: 0
 10890  001570  0100               	movlb	0	; () banked
 10891  001572  51EB               	movf	___ftadd@exp2& (0+255),w,b
 10892  001574  0100               	movlb	0	; () banked
 10893  001576  5DEC               	subwf	___ftadd@exp1& (0+255),w,b
 10894  001578  B0D8               	btfsc	status,0,c
 10895  00157A  D012               	goto	l4553
 10896                           
 10897                           ; BSR set to: 0
 10898  00157C  0100               	movlb	0	; () banked
 10899  00157E  51EC               	movf	___ftadd@exp1& (0+255),w,b
 10900  001580  0800               	sublw	0
 10901  001582  0100               	movlb	0	; () banked
 10902  001584  25EB               	addwf	___ftadd@exp2& (0+255),w,b
 10903  001586  0100               	movlb	0	; () banked
 10904  001588  6FE7               	movwf	??___ftadd& (0+255),b
 10905  00158A  0E18               	movlw	24
 10906  00158C  0100               	movlb	0	; () banked
 10907  00158E  65E7               	cpfsgt	??___ftadd& (0+255),b
 10908  001590  D007               	goto	l4553
 10909  001592                     l1069:
 10910                           
 10911                           ; BSR set to: 0
 10912  001592  C0E4  F0E1         	movff	___ftadd@f2,?___ftadd
 10913  001596  C0E5  F0E2         	movff	___ftadd@f2+1,?___ftadd+1
 10914  00159A  C0E6  F0E3         	movff	___ftadd@f2+2,?___ftadd+2
 10915  00159E  0012               	return	
 10916  0015A0                     l4553:
 10917                           
 10918                           ; BSR set to: 0
 10919  0015A0  0100               	movlb	0	; () banked
 10920  0015A2  51EB               	movf	___ftadd@exp2& (0+255),w,b
 10921  0015A4  0100               	movlb	0	; () banked
 10922  0015A6  B4D8               	btfsc	status,2,c
 10923  0015A8  D011               	goto	l1073
 10924                           
 10925                           ; BSR set to: 0
 10926  0015AA  0100               	movlb	0	; () banked
 10927  0015AC  51EC               	movf	___ftadd@exp1& (0+255),w,b
 10928  0015AE  0100               	movlb	0	; () banked
 10929  0015B0  5DEB               	subwf	___ftadd@exp2& (0+255),w,b
 10930  0015B2  B0D8               	btfsc	status,0,c
 10931  0015B4  D012               	goto	l4559
 10932                           
 10933                           ; BSR set to: 0
 10934  0015B6  0100               	movlb	0	; () banked
 10935  0015B8  51EB               	movf	___ftadd@exp2& (0+255),w,b
 10936  0015BA  0800               	sublw	0
 10937  0015BC  0100               	movlb	0	; () banked
 10938  0015BE  25EC               	addwf	___ftadd@exp1& (0+255),w,b
 10939  0015C0  0100               	movlb	0	; () banked
 10940  0015C2  6FE7               	movwf	??___ftadd& (0+255),b
 10941  0015C4  0E18               	movlw	24
 10942  0015C6  0100               	movlb	0	; () banked
 10943  0015C8  65E7               	cpfsgt	??___ftadd& (0+255),b
 10944  0015CA  D007               	goto	l4559
 10945  0015CC                     l1073:
 10946                           
 10947                           ; BSR set to: 0
 10948  0015CC  C0E1  F0E1         	movff	___ftadd@f1,?___ftadd
 10949  0015D0  C0E2  F0E2         	movff	___ftadd@f1+1,?___ftadd+1
 10950  0015D4  C0E3  F0E3         	movff	___ftadd@f1+2,?___ftadd+2
 10951  0015D8  0012               	return	
 10952  0015DA                     l4559:
 10953                           
 10954                           ; BSR set to: 0
 10955  0015DA  0E06               	movlw	6
 10956  0015DC  0100               	movlb	0	; () banked
 10957  0015DE  6FEA               	movwf	___ftadd@sign& (0+255),b
 10958                           
 10959                           ; BSR set to: 0
 10960  0015E0  0100               	movlb	0	; () banked
 10961  0015E2  AFE3               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10962  0015E4  D002               	goto	l4565
 10963                           
 10964                           ; BSR set to: 0
 10965  0015E6  0100               	movlb	0	; () banked
 10966  0015E8  8FEA               	bsf	___ftadd@sign& (0+255),7,b
 10967  0015EA                     l4565:
 10968                           
 10969                           ; BSR set to: 0
 10970  0015EA  0100               	movlb	0	; () banked
 10971  0015EC  AFE6               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10972  0015EE  D002               	goto	l1075
 10973                           
 10974                           ; BSR set to: 0
 10975  0015F0  0100               	movlb	0	; () banked
 10976  0015F2  8DEA               	bsf	___ftadd@sign& (0+255),6,b
 10977  0015F4                     l1075:
 10978                           
 10979                           ; BSR set to: 0
 10980  0015F4  0100               	movlb	0	; () banked
 10981  0015F6  8FE2               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10982                           
 10983                           ; BSR set to: 0
 10984  0015F8  0EFF               	movlw	255
 10985  0015FA  0100               	movlb	0	; () banked
 10986  0015FC  17E1               	andwf	___ftadd@f1& (0+255),f,b
 10987  0015FE  0EFF               	movlw	255
 10988  001600  0100               	movlb	0	; () banked
 10989  001602  17E2               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10990  001604  0E00               	movlw	0
 10991  001606  0100               	movlb	0	; () banked
 10992  001608  17E3               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10993  00160A  0100               	movlb	0	; () banked
 10994  00160C  8FE5               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10995                           
 10996                           ; BSR set to: 0
 10997  00160E  0EFF               	movlw	255
 10998  001610  0100               	movlb	0	; () banked
 10999  001612  17E4               	andwf	___ftadd@f2& (0+255),f,b
 11000  001614  0EFF               	movlw	255
 11001  001616  0100               	movlb	0	; () banked
 11002  001618  17E5               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11003  00161A  0E00               	movlw	0
 11004  00161C  0100               	movlb	0	; () banked
 11005  00161E  17E6               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11006                           
 11007                           ; BSR set to: 0
 11008  001620  0100               	movlb	0	; () banked
 11009  001622  51EB               	movf	___ftadd@exp2& (0+255),w,b
 11010  001624  0100               	movlb	0	; () banked
 11011  001626  5DEC               	subwf	___ftadd@exp1& (0+255),w,b
 11012  001628  B0D8               	btfsc	status,0,c
 11013  00162A  D025               	goto	l4585
 11014  00162C                     l4575:
 11015                           
 11016                           ; BSR set to: 0
 11017  00162C  0100               	movlb	0	; () banked
 11018  00162E  90D8               	bcf	status,0,c
 11019  001630  37E4               	rlcf	___ftadd@f2& (0+255),f,b
 11020  001632  37E5               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11021  001634  37E6               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11022  001636  0100               	movlb	0	; () banked
 11023  001638  07EB               	decf	___ftadd@exp2& (0+255),f,b
 11024                           
 11025                           ; BSR set to: 0
 11026  00163A  0100               	movlb	0	; () banked
 11027  00163C  51EC               	movf	___ftadd@exp1& (0+255),w,b
 11028  00163E  0100               	movlb	0	; () banked
 11029  001640  19EB               	xorwf	___ftadd@exp2& (0+255),w,b
 11030  001642  B4D8               	btfsc	status,2,c
 11031  001644  D011               	goto	l4583
 11032                           
 11033                           ; BSR set to: 0
 11034  001646  0100               	movlb	0	; () banked
 11035  001648  07EA               	decf	___ftadd@sign& (0+255),f,b
 11036  00164A  C0EA  F0E7         	movff	___ftadd@sign,??___ftadd
 11037  00164E  0E07               	movlw	7
 11038  001650  0100               	movlb	0	; () banked
 11039  001652  17E7               	andwf	??___ftadd& (0+255),f,b
 11040  001654  B4D8               	btfsc	status,2,c
 11041  001656  D008               	goto	l4583
 11042  001658  D7E9               	goto	l4575
 11043  00165A                     l4581:
 11044                           
 11045                           ; BSR set to: 0
 11046  00165A  0100               	movlb	0	; () banked
 11047  00165C  90D8               	bcf	status,0,c
 11048  00165E  33E3               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11049  001660  33E2               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11050  001662  33E1               	rrcf	___ftadd@f1& (0+255),f,b
 11051  001664  0100               	movlb	0	; () banked
 11052  001666  2BEC               	incf	___ftadd@exp1& (0+255),f,b
 11053  001668                     l4583:
 11054                           
 11055                           ; BSR set to: 0
 11056  001668  0100               	movlb	0	; () banked
 11057  00166A  51EB               	movf	___ftadd@exp2& (0+255),w,b
 11058  00166C  0100               	movlb	0	; () banked
 11059  00166E  19EC               	xorwf	___ftadd@exp1& (0+255),w,b
 11060  001670  B4D8               	btfsc	status,2,c
 11061  001672  D02B               	goto	l1084
 11062  001674  D7F2               	goto	l4581
 11063  001676                     l4585:
 11064                           
 11065                           ; BSR set to: 0
 11066  001676  0100               	movlb	0	; () banked
 11067  001678  51EC               	movf	___ftadd@exp1& (0+255),w,b
 11068  00167A  0100               	movlb	0	; () banked
 11069  00167C  5DEB               	subwf	___ftadd@exp2& (0+255),w,b
 11070  00167E  B0D8               	btfsc	status,0,c
 11071  001680  D024               	goto	l1084
 11072  001682                     l4587:
 11073                           
 11074                           ; BSR set to: 0
 11075  001682  0100               	movlb	0	; () banked
 11076  001684  90D8               	bcf	status,0,c
 11077  001686  37E1               	rlcf	___ftadd@f1& (0+255),f,b
 11078  001688  37E2               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11079  00168A  37E3               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11080  00168C  0100               	movlb	0	; () banked
 11081  00168E  07EC               	decf	___ftadd@exp1& (0+255),f,b
 11082                           
 11083                           ; BSR set to: 0
 11084  001690  0100               	movlb	0	; () banked
 11085  001692  51EC               	movf	___ftadd@exp1& (0+255),w,b
 11086  001694  0100               	movlb	0	; () banked
 11087  001696  19EB               	xorwf	___ftadd@exp2& (0+255),w,b
 11088  001698  B4D8               	btfsc	status,2,c
 11089  00169A  D011               	goto	l4595
 11090                           
 11091                           ; BSR set to: 0
 11092  00169C  0100               	movlb	0	; () banked
 11093  00169E  07EA               	decf	___ftadd@sign& (0+255),f,b
 11094  0016A0  C0EA  F0E7         	movff	___ftadd@sign,??___ftadd
 11095  0016A4  0E07               	movlw	7
 11096  0016A6  0100               	movlb	0	; () banked
 11097  0016A8  17E7               	andwf	??___ftadd& (0+255),f,b
 11098  0016AA  B4D8               	btfsc	status,2,c
 11099  0016AC  D008               	goto	l4595
 11100  0016AE  D7E9               	goto	l4587
 11101  0016B0                     l4593:
 11102                           
 11103                           ; BSR set to: 0
 11104  0016B0  0100               	movlb	0	; () banked
 11105  0016B2  90D8               	bcf	status,0,c
 11106  0016B4  33E6               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11107  0016B6  33E5               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11108  0016B8  33E4               	rrcf	___ftadd@f2& (0+255),f,b
 11109  0016BA  0100               	movlb	0	; () banked
 11110  0016BC  2BEB               	incf	___ftadd@exp2& (0+255),f,b
 11111  0016BE                     l4595:
 11112                           
 11113                           ; BSR set to: 0
 11114  0016BE  0100               	movlb	0	; () banked
 11115  0016C0  51EB               	movf	___ftadd@exp2& (0+255),w,b
 11116  0016C2  0100               	movlb	0	; () banked
 11117  0016C4  19EC               	xorwf	___ftadd@exp1& (0+255),w,b
 11118  0016C6  A4D8               	btfss	status,2,c
 11119  0016C8  D7F3               	goto	l4593
 11120  0016CA                     l1084:
 11121                           
 11122                           ; BSR set to: 0
 11123  0016CA  0100               	movlb	0	; () banked
 11124  0016CC  AFEA               	btfss	___ftadd@sign& (0+255),7,b
 11125  0016CE  D012               	goto	l1093
 11126                           
 11127                           ; BSR set to: 0
 11128  0016D0  0EFF               	movlw	255
 11129  0016D2  0100               	movlb	0	; () banked
 11130  0016D4  1BE1               	xorwf	___ftadd@f1& (0+255),f,b
 11131  0016D6  0EFF               	movlw	255
 11132  0016D8  0100               	movlb	0	; () banked
 11133  0016DA  1BE2               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11134  0016DC  0EFF               	movlw	255
 11135  0016DE  0100               	movlb	0	; () banked
 11136  0016E0  1BE3               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11137  0016E2  0E01               	movlw	1
 11138  0016E4  0100               	movlb	0	; () banked
 11139  0016E6  27E1               	addwf	___ftadd@f1& (0+255),f,b
 11140  0016E8  0E00               	movlw	0
 11141  0016EA  0100               	movlb	0	; () banked
 11142  0016EC  23E2               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11143  0016EE  0E00               	movlw	0
 11144  0016F0  0100               	movlb	0	; () banked
 11145  0016F2  23E3               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11146  0016F4                     l1093:
 11147                           
 11148                           ; BSR set to: 0
 11149  0016F4  0100               	movlb	0	; () banked
 11150  0016F6  ADEA               	btfss	___ftadd@sign& (0+255),6,b
 11151  0016F8  D012               	goto	l4601
 11152                           
 11153                           ; BSR set to: 0
 11154  0016FA  0EFF               	movlw	255
 11155  0016FC  0100               	movlb	0	; () banked
 11156  0016FE  1BE4               	xorwf	___ftadd@f2& (0+255),f,b
 11157  001700  0EFF               	movlw	255
 11158  001702  0100               	movlb	0	; () banked
 11159  001704  1BE5               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11160  001706  0EFF               	movlw	255
 11161  001708  0100               	movlb	0	; () banked
 11162  00170A  1BE6               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11163  00170C  0E01               	movlw	1
 11164  00170E  0100               	movlb	0	; () banked
 11165  001710  27E4               	addwf	___ftadd@f2& (0+255),f,b
 11166  001712  0E00               	movlw	0
 11167  001714  0100               	movlb	0	; () banked
 11168  001716  23E5               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11169  001718  0E00               	movlw	0
 11170  00171A  0100               	movlb	0	; () banked
 11171  00171C  23E6               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11172  00171E                     l4601:
 11173                           
 11174                           ; BSR set to: 0
 11175  00171E  0E00               	movlw	0
 11176  001720  0100               	movlb	0	; () banked
 11177  001722  6FEA               	movwf	___ftadd@sign& (0+255),b
 11178                           
 11179                           ; BSR set to: 0
 11180  001724  0100               	movlb	0	; () banked
 11181  001726  51E1               	movf	___ftadd@f1& (0+255),w,b
 11182  001728  0100               	movlb	0	; () banked
 11183  00172A  27E4               	addwf	___ftadd@f2& (0+255),f,b
 11184  00172C  0100               	movlb	0	; () banked
 11185  00172E  51E2               	movf	(___ftadd@f1+1)& (0+255),w,b
 11186  001730  0100               	movlb	0	; () banked
 11187  001732  23E5               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11188  001734  0100               	movlb	0	; () banked
 11189  001736  51E3               	movf	(___ftadd@f1+2)& (0+255),w,b
 11190  001738  0100               	movlb	0	; () banked
 11191  00173A  23E6               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11192                           
 11193                           ; BSR set to: 0
 11194  00173C  0100               	movlb	0	; () banked
 11195  00173E  AFE6               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11196  001740  D015               	goto	l4611
 11197                           
 11198                           ; BSR set to: 0
 11199  001742  0EFF               	movlw	255
 11200  001744  0100               	movlb	0	; () banked
 11201  001746  1BE4               	xorwf	___ftadd@f2& (0+255),f,b
 11202  001748  0EFF               	movlw	255
 11203  00174A  0100               	movlb	0	; () banked
 11204  00174C  1BE5               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11205  00174E  0EFF               	movlw	255
 11206  001750  0100               	movlb	0	; () banked
 11207  001752  1BE6               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11208  001754  0E01               	movlw	1
 11209  001756  0100               	movlb	0	; () banked
 11210  001758  27E4               	addwf	___ftadd@f2& (0+255),f,b
 11211  00175A  0E00               	movlw	0
 11212  00175C  0100               	movlb	0	; () banked
 11213  00175E  23E5               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11214  001760  0E00               	movlw	0
 11215  001762  0100               	movlb	0	; () banked
 11216  001764  23E6               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11217                           
 11218                           ; BSR set to: 0
 11219  001766  0E01               	movlw	1
 11220  001768  0100               	movlb	0	; () banked
 11221  00176A  6FEA               	movwf	___ftadd@sign& (0+255),b
 11222  00176C                     l4611:
 11223                           
 11224                           ; BSR set to: 0
 11225  00176C  C0E4  F01B         	movff	___ftadd@f2,___ftpack@arg
 11226  001770  C0E5  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
 11227  001774  C0E6  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
 11228  001778  C0EC  F01E         	movff	___ftadd@exp1,___ftpack@exp
 11229  00177C  C0EA  F01F         	movff	___ftadd@sign,___ftpack@sign
 11230  001780  ECA2  F017         	call	___ftpack	;wreg free
 11231  001784  C01B  F0E1         	movff	?___ftpack,?___ftadd
 11232  001788  C01C  F0E2         	movff	?___ftpack+1,?___ftadd+1
 11233  00178C  C01D  F0E3         	movff	?___ftpack+2,?___ftadd+2
 11234  001790  0012               	return	
 11235  001792                     __end_of___ftadd:
 11236                           	opt stack 0
 11237                           tosu	equ	0xFFF
 11238                           tosh	equ	0xFFE
 11239                           tosl	equ	0xFFD
 11240                           pclath	equ	0xFFA
 11241                           tblptru	equ	0xFF8
 11242                           tblptrh	equ	0xFF7
 11243                           tblptrl	equ	0xFF6
 11244                           tablat	equ	0xFF5
 11245                           prodh	equ	0xFF4
 11246                           prodl	equ	0xFF3
 11247                           intcon	equ	0xFF2
 11248                           intcon2	equ	0xFF1
 11249                           postinc0	equ	0xFEE
 11250                           wreg	equ	0xFE8
 11251                           postinc1	equ	0xFE6
 11252                           postdec1	equ	0xFE5
 11253                           fsr1h	equ	0xFE2
 11254                           fsr1l	equ	0xFE1
 11255                           indf2	equ	0xFDF
 11256                           postinc2	equ	0xFDE
 11257                           postdec2	equ	0xFDD
 11258                           plusw2	equ	0xFDB
 11259                           fsr2h	equ	0xFDA
 11260                           fsr2l	equ	0xFD9
 11261                           status	equ	0xFD8
 11262                           
 11263 ;; *************** function ___ftpack *****************
 11264 ;; Defined at:
 11265 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;  arg             3   26[COMRAM] unsigned um
 11268 ;;  exp             1   29[COMRAM] unsigned char 
 11269 ;;  sign            1   30[COMRAM] unsigned char 
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;		None
 11272 ;; Return value:  Size  Location     Type
 11273 ;;                  3   26[COMRAM] float 
 11274 ;; Registers used:
 11275 ;;		wreg, status,2, status,0
 11276 ;; Tracked objects:
 11277 ;;		On entry : 0/0
 11278 ;;		On exit  : 0/0
 11279 ;;		Unchanged: 0/0
 11280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11281 ;;      Params:         5       0       0       0       0       0       0
 11282 ;;      Locals:         0       0       0       0       0       0       0
 11283 ;;      Temps:          3       0       0       0       0       0       0
 11284 ;;      Totals:         8       0       0       0       0       0       0
 11285 ;;Total ram usage:        8 bytes
 11286 ;; Hardware stack levels used:    1
 11287 ;; Hardware stack levels required when called:    4
 11288 ;; This function calls:
 11289 ;;		Nothing
 11290 ;; This function is called by:
 11291 ;;		___altoft
 11292 ;;		___awtoft
 11293 ;;		___ftadd
 11294 ;;		___ftdiv
 11295 ;;		___ftmul
 11296 ;; This function uses a non-reentrant model
 11297 ;;
 11298                           
 11299                           	psect	text57
 11300  002F44                     __ptext57:
 11301                           	opt stack 0
 11302  002F44                     ___ftpack:
 11303                           	opt stack 24
 11304                           
 11305                           ;incstack = 0
 11306  002F44  501E               	movf	___ftpack@exp,w,c
 11307  002F46  B4D8               	btfsc	status,2,c
 11308  002F48  D005               	goto	l4411
 11309  002F4A  501B               	movf	___ftpack@arg,w,c
 11310  002F4C  101C               	iorwf	___ftpack@arg+1,w,c
 11311  002F4E  101D               	iorwf	___ftpack@arg+2,w,c
 11312  002F50  A4D8               	btfss	status,2,c
 11313  002F52  D00C               	goto	l4417
 11314  002F54                     l4411:
 11315  002F54  0E00               	movlw	0
 11316  002F56  6E1B               	movwf	?___ftpack,c
 11317  002F58  0E00               	movlw	0
 11318  002F5A  6E1C               	movwf	?___ftpack+1,c
 11319  002F5C  0E00               	movlw	0
 11320  002F5E  6E1D               	movwf	?___ftpack+2,c
 11321  002F60  0012               	return	
 11322  002F62                     l4415:
 11323  002F62  2A1E               	incf	___ftpack@exp,f,c
 11324  002F64  90D8               	bcf	status,0,c
 11325  002F66  321D               	rrcf	___ftpack@arg+2,f,c
 11326  002F68  321C               	rrcf	___ftpack@arg+1,f,c
 11327  002F6A  321B               	rrcf	___ftpack@arg,f,c
 11328  002F6C                     l4417:
 11329  002F6C  0E00               	movlw	0
 11330  002F6E  141B               	andwf	___ftpack@arg,w,c
 11331  002F70  6E20               	movwf	??___ftpack& (0+255),c
 11332  002F72  0E00               	movlw	0
 11333  002F74  141C               	andwf	___ftpack@arg+1,w,c
 11334  002F76  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11335  002F78  0EFE               	movlw	254
 11336  002F7A  141D               	andwf	___ftpack@arg+2,w,c
 11337  002F7C  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11338  002F7E  5020               	movf	??___ftpack,w,c
 11339  002F80  1021               	iorwf	??___ftpack+1,w,c
 11340  002F82  1022               	iorwf	??___ftpack+2,w,c
 11341  002F84  B4D8               	btfsc	status,2,c
 11342  002F86  D00C               	goto	l4423
 11343  002F88  D7EC               	goto	l4415
 11344  002F8A                     l4419:
 11345  002F8A  2A1E               	incf	___ftpack@exp,f,c
 11346  002F8C  0E01               	movlw	1
 11347  002F8E  261B               	addwf	___ftpack@arg,f,c
 11348  002F90  0E00               	movlw	0
 11349  002F92  221C               	addwfc	___ftpack@arg+1,f,c
 11350  002F94  0E00               	movlw	0
 11351  002F96  221D               	addwfc	___ftpack@arg+2,f,c
 11352  002F98  90D8               	bcf	status,0,c
 11353  002F9A  321D               	rrcf	___ftpack@arg+2,f,c
 11354  002F9C  321C               	rrcf	___ftpack@arg+1,f,c
 11355  002F9E  321B               	rrcf	___ftpack@arg,f,c
 11356  002FA0                     l4423:
 11357  002FA0  0E00               	movlw	0
 11358  002FA2  141B               	andwf	___ftpack@arg,w,c
 11359  002FA4  6E20               	movwf	??___ftpack& (0+255),c
 11360  002FA6  0E00               	movlw	0
 11361  002FA8  141C               	andwf	___ftpack@arg+1,w,c
 11362  002FAA  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11363  002FAC  0EFF               	movlw	255
 11364  002FAE  141D               	andwf	___ftpack@arg+2,w,c
 11365  002FB0  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11366  002FB2  5020               	movf	??___ftpack,w,c
 11367  002FB4  1021               	iorwf	??___ftpack+1,w,c
 11368  002FB6  1022               	iorwf	??___ftpack+2,w,c
 11369  002FB8  B4D8               	btfsc	status,2,c
 11370  002FBA  D006               	goto	l4427
 11371  002FBC  D7E6               	goto	l4419
 11372  002FBE                     l4425:
 11373  002FBE  061E               	decf	___ftpack@exp,f,c
 11374  002FC0  90D8               	bcf	status,0,c
 11375  002FC2  361B               	rlcf	___ftpack@arg,f,c
 11376  002FC4  361C               	rlcf	___ftpack@arg+1,f,c
 11377  002FC6  361D               	rlcf	___ftpack@arg+2,f,c
 11378  002FC8                     l4427:
 11379  002FC8  BE1C               	btfsc	___ftpack@arg+1,7,c
 11380  002FCA  D003               	goto	l1046
 11381  002FCC  0E02               	movlw	2
 11382  002FCE  601E               	cpfslt	___ftpack@exp,c
 11383  002FD0  D7F6               	goto	l4425
 11384  002FD2                     l1046:
 11385  002FD2  A01E               	btfss	___ftpack@exp,0,c
 11386  002FD4  9E1C               	bcf	___ftpack@arg+1,7,c
 11387  002FD6  90D8               	bcf	status,0,c
 11388  002FD8  321E               	rrcf	___ftpack@exp,f,c
 11389  002FDA  501E               	movf	___ftpack@exp,w,c
 11390  002FDC  121D               	iorwf	___ftpack@arg+2,f,c
 11391  002FDE  501F               	movf	___ftpack@sign,w,c
 11392  002FE0  A4D8               	btfss	status,2,c
 11393  002FE2  8E1D               	bsf	___ftpack@arg+2,7,c
 11394  002FE4  C01B  F01B         	movff	___ftpack@arg,?___ftpack
 11395  002FE8  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
 11396  002FEC  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
 11397  002FF0  0012               	return	
 11398  002FF2                     __end_of___ftpack:
 11399                           	opt stack 0
 11400                           tosu	equ	0xFFF
 11401                           tosh	equ	0xFFE
 11402                           tosl	equ	0xFFD
 11403                           pclath	equ	0xFFA
 11404                           tblptru	equ	0xFF8
 11405                           tblptrh	equ	0xFF7
 11406                           tblptrl	equ	0xFF6
 11407                           tablat	equ	0xFF5
 11408                           prodh	equ	0xFF4
 11409                           prodl	equ	0xFF3
 11410                           intcon	equ	0xFF2
 11411                           intcon2	equ	0xFF1
 11412                           postinc0	equ	0xFEE
 11413                           wreg	equ	0xFE8
 11414                           postinc1	equ	0xFE6
 11415                           postdec1	equ	0xFE5
 11416                           fsr1h	equ	0xFE2
 11417                           fsr1l	equ	0xFE1
 11418                           indf2	equ	0xFDF
 11419                           postinc2	equ	0xFDE
 11420                           postdec2	equ	0xFDD
 11421                           plusw2	equ	0xFDB
 11422                           fsr2h	equ	0xFDA
 11423                           fsr2l	equ	0xFD9
 11424                           status	equ	0xFD8
 11425                           
 11426 ;; *************** function _INTERRUPT_InterruptManager *****************
 11427 ;; Defined at:
 11428 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;		None
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;		None
 11433 ;; Return value:  Size  Location     Type
 11434 ;;		None               void
 11435 ;; Registers used:
 11436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11437 ;; Tracked objects:
 11438 ;;		On entry : 0/0
 11439 ;;		On exit  : 0/0
 11440 ;;		Unchanged: 0/0
 11441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11442 ;;      Params:         0       0       0       0       0       0       0
 11443 ;;      Locals:         0       0       0       0       0       0       0
 11444 ;;      Temps:         14       0       0       0       0       0       0
 11445 ;;      Totals:        14       0       0       0       0       0       0
 11446 ;;Total ram usage:       14 bytes
 11447 ;; Hardware stack levels used:    1
 11448 ;; Hardware stack levels required when called:    3
 11449 ;; This function calls:
 11450 ;;		_ADC_ISR
 11451 ;;		_EUSART1_Receive_ISR
 11452 ;;		_EUSART1_Transmit_ISR
 11453 ;;		_TMR1_ISR
 11454 ;; This function is called by:
 11455 ;;		Interrupt level 2
 11456 ;; This function uses a non-reentrant model
 11457 ;;
 11458                           
 11459                           	psect	intcode
 11460  000008                     __pintcode:
 11461                           	opt stack 0
 11462  000008                     _INTERRUPT_InterruptManager:
 11463                           	opt stack 21
 11464                           
 11465                           ;incstack = 0
 11466  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11467  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
 11468  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 11469  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 11470  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 11471  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 11472  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 11473  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 11474  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 11475  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
 11476  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
 11477  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 11478  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 11479  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 11480  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
 11481                           
 11482                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 11483  000042  BA9D               	btfsc	3997,5,c	;volatile
 11484  000044  AA9E               	btfss	3998,5,c	;volatile
 11485  000046  D003               	goto	i2l207
 11486                           
 11487                           ;interrupt_manager.c: 73: {
 11488                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
 11489  000048  ECC1  F01C         	call	_EUSART1_Receive_ISR	;wreg free
 11490                           
 11491                           ;interrupt_manager.c: 75: }
 11492  00004C  D011               	goto	i2l215
 11493  00004E                     i2l207:
 11494                           
 11495                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 11496  00004E  BC9D               	btfsc	3997,6,c	;volatile
 11497  000050  AC9E               	btfss	3998,6,c	;volatile
 11498  000052  D003               	goto	i2l209
 11499                           
 11500                           ;interrupt_manager.c: 77: {
 11501                           ;interrupt_manager.c: 78: ADC_ISR();
 11502  000054  EC69  F006         	call	_ADC_ISR	;wreg free
 11503                           
 11504                           ;interrupt_manager.c: 79: }
 11505  000058  D00B               	goto	i2l215
 11506  00005A                     i2l209:
 11507                           
 11508                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 11509  00005A  B09D               	btfsc	3997,0,c	;volatile
 11510  00005C  A09E               	btfss	3998,0,c	;volatile
 11511  00005E  D003               	goto	i2l211
 11512                           
 11513                           ;interrupt_manager.c: 81: {
 11514                           ;interrupt_manager.c: 82: TMR1_ISR();
 11515  000060  EC07  F01B         	call	_TMR1_ISR	;wreg free
 11516                           
 11517                           ;interrupt_manager.c: 83: }
 11518  000064  D005               	goto	i2l215
 11519  000066                     i2l211:
 11520                           
 11521                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 11522  000066  B89D               	btfsc	3997,4,c	;volatile
 11523  000068  A89E               	btfss	3998,4,c	;volatile
 11524  00006A  D002               	goto	i2l215
 11525                           
 11526                           ;interrupt_manager.c: 85: {
 11527                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
 11528  00006C  ECA8  F01B         	call	_EUSART1_Transmit_ISR	;wreg free
 11529  000070                     i2l215:
 11530  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 11531  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 11532  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 11533  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 11534  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 11535  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 11536  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 11537  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 11538  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 11539  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 11540  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 11541  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 11542  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 11543  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 11544  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11545  0000AA  0011               	retfie		f
 11546  0000AC                     __end_of_INTERRUPT_InterruptManager:
 11547                           	opt stack 0
 11548                           tosu	equ	0xFFF
 11549                           tosh	equ	0xFFE
 11550                           tosl	equ	0xFFD
 11551                           pclatu	equ	0xFFB
 11552                           pclath	equ	0xFFA
 11553                           tblptru	equ	0xFF8
 11554                           tblptrh	equ	0xFF7
 11555                           tblptrl	equ	0xFF6
 11556                           tablat	equ	0xFF5
 11557                           prodh	equ	0xFF4
 11558                           prodl	equ	0xFF3
 11559                           intcon	equ	0xFF2
 11560                           intcon2	equ	0xFF1
 11561                           postinc0	equ	0xFEE
 11562                           fsr0h	equ	0xFEA
 11563                           fsr0l	equ	0xFE9
 11564                           wreg	equ	0xFE8
 11565                           postinc1	equ	0xFE6
 11566                           postdec1	equ	0xFE5
 11567                           fsr1h	equ	0xFE2
 11568                           fsr1l	equ	0xFE1
 11569                           indf2	equ	0xFDF
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           plusw2	equ	0xFDB
 11573                           fsr2h	equ	0xFDA
 11574                           fsr2l	equ	0xFD9
 11575                           status	equ	0xFD8
 11576                           
 11577 ;; *************** function _TMR1_ISR *****************
 11578 ;; Defined at:
 11579 ;;		line 112 in file "mcc_generated_files/tmr1.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;		None
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;		None
 11584 ;; Return value:  Size  Location     Type
 11585 ;;		None               void
 11586 ;; Registers used:
 11587 ;;		wreg, status,2, status,0, cstack
 11588 ;; Tracked objects:
 11589 ;;		On entry : 0/0
 11590 ;;		On exit  : 0/0
 11591 ;;		Unchanged: 0/0
 11592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11593 ;;      Params:         0       0       0       0       0       0       0
 11594 ;;      Locals:         0       0       0       0       0       0       0
 11595 ;;      Temps:          0       0       0       0       0       0       0
 11596 ;;      Totals:         0       0       0       0       0       0       0
 11597 ;;Total ram usage:        0 bytes
 11598 ;; Hardware stack levels used:    1
 11599 ;; Hardware stack levels required when called:    2
 11600 ;; This function calls:
 11601 ;;		_Battery_Read
 11602 ;;		_Temp_Read
 11603 ;; This function is called by:
 11604 ;;		_INTERRUPT_InterruptManager
 11605 ;; This function uses a non-reentrant model
 11606 ;;
 11607                           
 11608                           	psect	text59
 11609  00360E                     __ptext59:
 11610                           	opt stack 0
 11611  00360E                     _TMR1_ISR:
 11612                           	opt stack 21
 11613                           
 11614                           ;tmr1.c: 116: PIR1bits.TMR1IF = 0;
 11615                           
 11616                           ;incstack = 0
 11617  00360E  909E               	bcf	3998,0,c	;volatile
 11618                           
 11619                           ;tmr1.c: 119: TMR1H = (timer1ReloadVal >> 8);
 11620  003610  5039               	movf	_timer1ReloadVal+1,w,c	;volatile
 11621  003612  6ECF               	movwf	4047,c	;volatile
 11622                           
 11623                           ;tmr1.c: 120: TMR1L = (uint8_t) timer1ReloadVal;
 11624  003614  C038  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 11625                           
 11626                           ;tmr1.c: 123: if (++CountCallBack >= 4)
 11627  003618  4A2E               	infsnz	_CountCallBack,f,c
 11628  00361A  2A2F               	incf	_CountCallBack+1,f,c
 11629  00361C  BE2F               	btfsc	_CountCallBack+1,7,c
 11630  00361E  D00F               	goto	i2l3971
 11631  003620  502F               	movf	_CountCallBack+1,w,c
 11632  003622  E104               	bnz	i2u407_40
 11633  003624  0E04               	movlw	4
 11634  003626  5C2E               	subwf	_CountCallBack,w,c
 11635  003628  A0D8               	btfss	status,0,c
 11636  00362A  D009               	goto	i2l3971
 11637  00362C                     i2u407_40:
 11638                           
 11639                           ;tmr1.c: 124: {
 11640                           ;tmr1.c: 126: do { LATA4 = ~LATA4; } while(0);
 11641  00362C  B889               	btfsc	3977,4,c	;volatile
 11642  00362E  D002               	goto	i2u408_40
 11643  003630  8889               	bsf	3977,4,c	;volatile
 11644  003632  D001               	goto	i2l3969
 11645  003634                     i2u408_40:
 11646  003634  9889               	bcf	3977,4,c	;volatile
 11647  003636                     i2l3969:
 11648                           
 11649                           ;tmr1.c: 129: CountCallBack = 0;
 11650  003636  0E00               	movlw	0
 11651  003638  6E2F               	movwf	_CountCallBack+1,c
 11652  00363A  0E00               	movlw	0
 11653  00363C  6E2E               	movwf	_CountCallBack,c
 11654  00363E                     i2l3971:
 11655                           
 11656                           ;tmr1.c: 130: }
 11657                           ;tmr1.c: 135: if(CountCallBack == 1)
 11658  00363E  042E               	decf	_CountCallBack,w,c
 11659  003640  102F               	iorwf	_CountCallBack+1,w,c
 11660  003642  B4D8               	btfsc	status,2,c
 11661                           
 11662                           ;tmr1.c: 136: {
 11663                           ;tmr1.c: 137: Battery_Read();
 11664  003644  ECF7  F01C         	call	_Battery_Read	;wreg free
 11665                           
 11666                           ;tmr1.c: 138: }
 11667                           ;tmr1.c: 139: if(CountCallBack == 3)
 11668  003648  0E03               	movlw	3
 11669  00364A  182E               	xorwf	_CountCallBack,w,c
 11670  00364C  102F               	iorwf	_CountCallBack+1,w,c
 11671  00364E  A4D8               	btfss	status,2,c
 11672  003650  0012               	return	
 11673                           
 11674                           ;tmr1.c: 140: {
 11675                           ;tmr1.c: 141: Temp_Read();
 11676  003652  EC80  F01C         	call	_Temp_Read	;wreg free
 11677  003656  0012               	return	
 11678  003658                     __end_of_TMR1_ISR:
 11679                           	opt stack 0
 11680                           tosu	equ	0xFFF
 11681                           tosh	equ	0xFFE
 11682                           tosl	equ	0xFFD
 11683                           pclatu	equ	0xFFB
 11684                           pclath	equ	0xFFA
 11685                           tblptru	equ	0xFF8
 11686                           tblptrh	equ	0xFF7
 11687                           tblptrl	equ	0xFF6
 11688                           tablat	equ	0xFF5
 11689                           prodh	equ	0xFF4
 11690                           prodl	equ	0xFF3
 11691                           intcon	equ	0xFF2
 11692                           intcon2	equ	0xFF1
 11693                           postinc0	equ	0xFEE
 11694                           fsr0h	equ	0xFEA
 11695                           fsr0l	equ	0xFE9
 11696                           wreg	equ	0xFE8
 11697                           postinc1	equ	0xFE6
 11698                           postdec1	equ	0xFE5
 11699                           fsr1h	equ	0xFE2
 11700                           fsr1l	equ	0xFE1
 11701                           indf2	equ	0xFDF
 11702                           postinc2	equ	0xFDE
 11703                           postdec2	equ	0xFDD
 11704                           plusw2	equ	0xFDB
 11705                           fsr2h	equ	0xFDA
 11706                           fsr2l	equ	0xFD9
 11707                           status	equ	0xFD8
 11708                           
 11709 ;; *************** function _Temp_Read *****************
 11710 ;; Defined at:
 11711 ;;		line 33 in file "Tempeture.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;		None
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;		None
 11716 ;; Return value:  Size  Location     Type
 11717 ;;		None               void
 11718 ;; Registers used:
 11719 ;;		wreg, status,2, status,0, cstack
 11720 ;; Tracked objects:
 11721 ;;		On entry : 0/0
 11722 ;;		On exit  : 0/0
 11723 ;;		Unchanged: 0/0
 11724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11725 ;;      Params:         0       0       0       0       0       0       0
 11726 ;;      Locals:         0       0       0       0       0       0       0
 11727 ;;      Temps:          0       0       0       0       0       0       0
 11728 ;;      Totals:         0       0       0       0       0       0       0
 11729 ;;Total ram usage:        0 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    1
 11732 ;; This function calls:
 11733 ;;		_ADC_StartConversion
 11734 ;;		_Set_4051
 11735 ;; This function is called by:
 11736 ;;		_TMR1_ISR
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           	psect	text60
 11741  003900                     __ptext60:
 11742                           	opt stack 0
 11743  003900                     _Temp_Read:
 11744                           	opt stack 21
 11745                           
 11746                           ;Tempeture.c: 35: ADC_Buffer_Point = 0;
 11747                           
 11748                           ;incstack = 0
 11749  003900  0E00               	movlw	0
 11750  003902  6E2D               	movwf	_ADC_Buffer_Point+1,c
 11751  003904  0E00               	movlw	0
 11752  003906  6E2C               	movwf	_ADC_Buffer_Point,c
 11753                           
 11754                           ;Tempeture.c: 36: Temp_Aquire = 1;
 11755  003908  0E01               	movlw	1
 11756  00390A  6E3B               	movwf	_Temp_Aquire,c
 11757                           
 11758                           ;Tempeture.c: 37: Set_4051(1);
 11759  00390C  0E00               	movlw	0
 11760  00390E  6E02               	movwf	Set_4051@Channel+1,c
 11761  003910  0E01               	movlw	1
 11762  003912  6E01               	movwf	Set_4051@Channel,c
 11763  003914  EC2C  F01B         	call	_Set_4051	;wreg free
 11764                           
 11765                           ;Tempeture.c: 38: ADCON1 = 0x80;
 11766  003918  0E80               	movlw	128
 11767  00391A  6EC1               	movwf	4033,c	;volatile
 11768                           
 11769                           ;Tempeture.c: 39: ADC_StartConversion(Temp1);
 11770  00391C  0E0E               	movlw	14
 11771  00391E  ECDE  F01C         	call	_ADC_StartConversion
 11772  003922  0012               	return		;funcret
 11773  003924                     __end_of_Temp_Read:
 11774                           	opt stack 0
 11775                           tosu	equ	0xFFF
 11776                           tosh	equ	0xFFE
 11777                           tosl	equ	0xFFD
 11778                           pclatu	equ	0xFFB
 11779                           pclath	equ	0xFFA
 11780                           tblptru	equ	0xFF8
 11781                           tblptrh	equ	0xFF7
 11782                           tblptrl	equ	0xFF6
 11783                           tablat	equ	0xFF5
 11784                           prodh	equ	0xFF4
 11785                           prodl	equ	0xFF3
 11786                           intcon	equ	0xFF2
 11787                           intcon2	equ	0xFF1
 11788                           postinc0	equ	0xFEE
 11789                           fsr0h	equ	0xFEA
 11790                           fsr0l	equ	0xFE9
 11791                           wreg	equ	0xFE8
 11792                           postinc1	equ	0xFE6
 11793                           postdec1	equ	0xFE5
 11794                           fsr1h	equ	0xFE2
 11795                           fsr1l	equ	0xFE1
 11796                           indf2	equ	0xFDF
 11797                           postinc2	equ	0xFDE
 11798                           postdec2	equ	0xFDD
 11799                           plusw2	equ	0xFDB
 11800                           fsr2h	equ	0xFDA
 11801                           fsr2l	equ	0xFD9
 11802                           status	equ	0xFD8
 11803                           
 11804 ;; *************** function _Battery_Read *****************
 11805 ;; Defined at:
 11806 ;;		line 18 in file "Battery.c"
 11807 ;; Parameters:    Size  Location     Type
 11808 ;;		None
 11809 ;; Auto vars:     Size  Location     Type
 11810 ;;		None
 11811 ;; Return value:  Size  Location     Type
 11812 ;;		None               void
 11813 ;; Registers used:
 11814 ;;		wreg, status,2, status,0, cstack
 11815 ;; Tracked objects:
 11816 ;;		On entry : 0/0
 11817 ;;		On exit  : 0/0
 11818 ;;		Unchanged: 0/0
 11819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11820 ;;      Params:         0       0       0       0       0       0       0
 11821 ;;      Locals:         0       0       0       0       0       0       0
 11822 ;;      Temps:          0       0       0       0       0       0       0
 11823 ;;      Totals:         0       0       0       0       0       0       0
 11824 ;;Total ram usage:        0 bytes
 11825 ;; Hardware stack levels used:    1
 11826 ;; Hardware stack levels required when called:    1
 11827 ;; This function calls:
 11828 ;;		_ADC_StartConversion
 11829 ;; This function is called by:
 11830 ;;		_TMR1_ISR
 11831 ;; This function uses a non-reentrant model
 11832 ;;
 11833                           
 11834                           	psect	text61
 11835  0039EE                     __ptext61:
 11836                           	opt stack 0
 11837  0039EE                     _Battery_Read:
 11838                           	opt stack 21
 11839                           
 11840                           ;Battery.c: 20: ADC_Buffer_Point = 0;
 11841                           
 11842                           ;incstack = 0
 11843  0039EE  0E00               	movlw	0
 11844  0039F0  6E2D               	movwf	_ADC_Buffer_Point+1,c
 11845  0039F2  0E00               	movlw	0
 11846  0039F4  6E2C               	movwf	_ADC_Buffer_Point,c
 11847                           
 11848                           ;Battery.c: 21: Volt_Aquire = 1;
 11849  0039F6  0E01               	movlw	1
 11850  0039F8  6E3C               	movwf	_Volt_Aquire,c
 11851                           
 11852                           ;Battery.c: 22: ADCON1 = 0x80;
 11853  0039FA  0E80               	movlw	128
 11854  0039FC  6EC1               	movwf	4033,c	;volatile
 11855                           
 11856                           ;Battery.c: 23: ADC_StartConversion(Battery1);
 11857  0039FE  0E01               	movlw	1
 11858  003A00  ECDE  F01C         	call	_ADC_StartConversion
 11859  003A04  0012               	return		;funcret
 11860  003A06                     __end_of_Battery_Read:
 11861                           	opt stack 0
 11862                           tosu	equ	0xFFF
 11863                           tosh	equ	0xFFE
 11864                           tosl	equ	0xFFD
 11865                           pclatu	equ	0xFFB
 11866                           pclath	equ	0xFFA
 11867                           tblptru	equ	0xFF8
 11868                           tblptrh	equ	0xFF7
 11869                           tblptrl	equ	0xFF6
 11870                           tablat	equ	0xFF5
 11871                           prodh	equ	0xFF4
 11872                           prodl	equ	0xFF3
 11873                           intcon	equ	0xFF2
 11874                           intcon2	equ	0xFF1
 11875                           postinc0	equ	0xFEE
 11876                           fsr0h	equ	0xFEA
 11877                           fsr0l	equ	0xFE9
 11878                           wreg	equ	0xFE8
 11879                           postinc1	equ	0xFE6
 11880                           postdec1	equ	0xFE5
 11881                           fsr1h	equ	0xFE2
 11882                           fsr1l	equ	0xFE1
 11883                           indf2	equ	0xFDF
 11884                           postinc2	equ	0xFDE
 11885                           postdec2	equ	0xFDD
 11886                           plusw2	equ	0xFDB
 11887                           fsr2h	equ	0xFDA
 11888                           fsr2l	equ	0xFD9
 11889                           status	equ	0xFD8
 11890                           
 11891 ;; *************** function _EUSART1_Transmit_ISR *****************
 11892 ;; Defined at:
 11893 ;;		line 157 in file "UART.c"
 11894 ;; Parameters:    Size  Location     Type
 11895 ;;		None
 11896 ;; Auto vars:     Size  Location     Type
 11897 ;;		None
 11898 ;; Return value:  Size  Location     Type
 11899 ;;		None               void
 11900 ;; Registers used:
 11901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11902 ;; Tracked objects:
 11903 ;;		On entry : 0/0
 11904 ;;		On exit  : 0/0
 11905 ;;		Unchanged: 0/0
 11906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11907 ;;      Params:         0       0       0       0       0       0       0
 11908 ;;      Locals:         0       0       0       0       0       0       0
 11909 ;;      Temps:          0       0       0       0       0       0       0
 11910 ;;      Totals:         0       0       0       0       0       0       0
 11911 ;;Total ram usage:        0 bytes
 11912 ;; Hardware stack levels used:    1
 11913 ;; Hardware stack levels required when called:    2
 11914 ;; This function calls:
 11915 ;;		i2_UART_buff_get
 11916 ;;		i2_UART_buff_size
 11917 ;; This function is called by:
 11918 ;;		_INTERRUPT_InterruptManager
 11919 ;; This function uses a non-reentrant model
 11920 ;;
 11921                           
 11922                           	psect	text62
 11923  003750                     __ptext62:
 11924                           	opt stack 0
 11925  003750                     _EUSART1_Transmit_ISR:
 11926                           	opt stack 21
 11927                           
 11928                           ;UART.c: 159: if (UART_buff_size(&output_buffer) > 0) {
 11929                           
 11930                           ;incstack = 0
 11931  003750  0E00               	movlw	low _output_buffer
 11932  003752  6E01               	movwf	i2UART_buff_size@_this,c
 11933  003754  0E05               	movlw	high _output_buffer
 11934  003756  6E02               	movwf	i2UART_buff_size@_this+1,c
 11935  003758  EC19  F01D         	call	i2_UART_buff_size	;wreg free
 11936  00375C  BE02               	btfsc	?i2_UART_buff_size+1,7,c
 11937  00375E  D00D               	goto	i2l4085
 11938  003760  5002               	movf	?i2_UART_buff_size+1,w,c
 11939  003762  E103               	bnz	i2u415_40
 11940  003764  0401               	decf	?i2_UART_buff_size,w,c
 11941  003766  A0D8               	btfss	status,0,c
 11942  003768  D008               	goto	i2l4085
 11943  00376A                     i2u415_40:
 11944                           
 11945                           ;UART.c: 160: TXREG1 = UART_buff_get(&output_buffer);
 11946  00376A  0E00               	movlw	low _output_buffer
 11947  00376C  6E07               	movwf	i2UART_buff_get@_this,c
 11948  00376E  0E05               	movlw	high _output_buffer
 11949  003770  6E08               	movwf	i2UART_buff_get@_this+1,c
 11950  003772  EC42  F018         	call	i2_UART_buff_get	;wreg free
 11951  003776  6EAD               	movwf	4013,c	;volatile
 11952                           
 11953                           ;UART.c: 161: } else {
 11954  003778  0012               	return	
 11955  00377A                     i2l4085:
 11956                           
 11957                           ;UART.c: 162: Transmit_stall = 1;
 11958  00377A  0E01               	movlw	1
 11959  00377C  6E44               	movwf	_Transmit_stall,c
 11960                           
 11961                           ;UART.c: 163: PIE1bits.TX1IE = 0;
 11962  00377E  989D               	bcf	3997,4,c	;volatile
 11963  003780  0012               	return	
 11964  003782                     __end_of_EUSART1_Transmit_ISR:
 11965                           	opt stack 0
 11966                           tosu	equ	0xFFF
 11967                           tosh	equ	0xFFE
 11968                           tosl	equ	0xFFD
 11969                           pclatu	equ	0xFFB
 11970                           pclath	equ	0xFFA
 11971                           tblptru	equ	0xFF8
 11972                           tblptrh	equ	0xFF7
 11973                           tblptrl	equ	0xFF6
 11974                           tablat	equ	0xFF5
 11975                           prodh	equ	0xFF4
 11976                           prodl	equ	0xFF3
 11977                           intcon	equ	0xFF2
 11978                           intcon2	equ	0xFF1
 11979                           postinc0	equ	0xFEE
 11980                           fsr0h	equ	0xFEA
 11981                           fsr0l	equ	0xFE9
 11982                           wreg	equ	0xFE8
 11983                           postinc1	equ	0xFE6
 11984                           postdec1	equ	0xFE5
 11985                           fsr1h	equ	0xFE2
 11986                           fsr1l	equ	0xFE1
 11987                           indf2	equ	0xFDF
 11988                           postinc2	equ	0xFDE
 11989                           postdec2	equ	0xFDD
 11990                           plusw2	equ	0xFDB
 11991                           fsr2h	equ	0xFDA
 11992                           fsr2l	equ	0xFD9
 11993                           status	equ	0xFD8
 11994                           
 11995 ;; *************** function i2_UART_buff_size *****************
 11996 ;; Defined at:
 11997 ;;		line 102 in file "UART.c"
 11998 ;; Parameters:    Size  Location     Type
 11999 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 12000 ;;		 -> output_buffer(206), input_buffer(206), 
 12001 ;; Auto vars:     Size  Location     Type
 12002 ;;		None
 12003 ;; Return value:  Size  Location     Type
 12004 ;;                  2    0[COMRAM] int 
 12005 ;; Registers used:
 12006 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12007 ;; Tracked objects:
 12008 ;;		On entry : 0/0
 12009 ;;		On exit  : 0/0
 12010 ;;		Unchanged: 0/0
 12011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12012 ;;      Params:         2       0       0       0       0       0       0
 12013 ;;      Locals:         0       0       0       0       0       0       0
 12014 ;;      Temps:          0       0       0       0       0       0       0
 12015 ;;      Totals:         2       0       0       0       0       0       0
 12016 ;;Total ram usage:        2 bytes
 12017 ;; Hardware stack levels used:    1
 12018 ;; This function calls:
 12019 ;;		Nothing
 12020 ;; This function is called by:
 12021 ;;		_EUSART1_Transmit_ISR
 12022 ;; This function uses a non-reentrant model
 12023 ;;
 12024                           
 12025                           	psect	text63
 12026  003A32                     __ptext63:
 12027                           	opt stack 0
 12028  003A32                     i2_UART_buff_size:
 12029                           	opt stack 22
 12030                           
 12031                           ;UART.c: 103: return (_this->count);
 12032                           
 12033                           ;incstack = 0
 12034  003A32  EE20 F0CC          	lfsr	2,204
 12035  003A36  5001               	movf	i2UART_buff_size@_this,w,c
 12036  003A38  26D9               	addwf	fsr2l,f,c
 12037  003A3A  5002               	movf	i2UART_buff_size@_this+1,w,c
 12038  003A3C  22DA               	addwfc	fsr2h,f,c
 12039  003A3E  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 12040  003A42  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 12041  003A46  0012               	return	
 12042  003A48                     __end_ofi2_UART_buff_size:
 12043                           	opt stack 0
 12044                           tosu	equ	0xFFF
 12045                           tosh	equ	0xFFE
 12046                           tosl	equ	0xFFD
 12047                           pclatu	equ	0xFFB
 12048                           pclath	equ	0xFFA
 12049                           tblptru	equ	0xFF8
 12050                           tblptrh	equ	0xFF7
 12051                           tblptrl	equ	0xFF6
 12052                           tablat	equ	0xFF5
 12053                           prodh	equ	0xFF4
 12054                           prodl	equ	0xFF3
 12055                           intcon	equ	0xFF2
 12056                           intcon2	equ	0xFF1
 12057                           postinc0	equ	0xFEE
 12058                           fsr0h	equ	0xFEA
 12059                           fsr0l	equ	0xFE9
 12060                           wreg	equ	0xFE8
 12061                           postinc1	equ	0xFE6
 12062                           postdec1	equ	0xFE5
 12063                           fsr1h	equ	0xFE2
 12064                           fsr1l	equ	0xFE1
 12065                           indf2	equ	0xFDF
 12066                           postinc2	equ	0xFDE
 12067                           postdec2	equ	0xFDD
 12068                           plusw2	equ	0xFDB
 12069                           fsr2h	equ	0xFDA
 12070                           fsr2l	equ	0xFD9
 12071                           status	equ	0xFD8
 12072                           
 12073 ;; *************** function i2_UART_buff_get *****************
 12074 ;; Defined at:
 12075 ;;		line 81 in file "UART.c"
 12076 ;; Parameters:    Size  Location     Type
 12077 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12078 ;;		 -> output_buffer(206), input_buffer(206), 
 12079 ;; Auto vars:     Size  Location     Type
 12080 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 12081 ;; Return value:  Size  Location     Type
 12082 ;;                  1    wreg      unsigned char 
 12083 ;; Registers used:
 12084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12085 ;; Tracked objects:
 12086 ;;		On entry : 0/0
 12087 ;;		On exit  : 0/0
 12088 ;;		Unchanged: 0/0
 12089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12090 ;;      Params:         2       0       0       0       0       0       0
 12091 ;;      Locals:         1       0       0       0       0       0       0
 12092 ;;      Temps:          2       0       0       0       0       0       0
 12093 ;;      Totals:         5       0       0       0       0       0       0
 12094 ;;Total ram usage:        5 bytes
 12095 ;; Hardware stack levels used:    1
 12096 ;; Hardware stack levels required when called:    1
 12097 ;; This function calls:
 12098 ;;		i2_UART_buff_modulo_inc
 12099 ;; This function is called by:
 12100 ;;		_EUSART1_Transmit_ISR
 12101 ;; This function uses a non-reentrant model
 12102 ;;
 12103                           
 12104                           	psect	text64
 12105  003084                     __ptext64:
 12106                           	opt stack 0
 12107  003084                     i2_UART_buff_get:
 12108                           	opt stack 21
 12109                           
 12110                           ;UART.c: 82: unsigned char c;
 12111                           ;UART.c: 83: if (_this->count > 0) {
 12112                           
 12113                           ;incstack = 0
 12114  003084  EE20 F0CC          	lfsr	2,204
 12115  003088  5007               	movf	i2UART_buff_get@_this,w,c
 12116  00308A  26D9               	addwf	fsr2l,f,c
 12117  00308C  5008               	movf	i2UART_buff_get@_this+1,w,c
 12118  00308E  22DA               	addwfc	fsr2h,f,c
 12119  003090  0E01               	movlw	1
 12120  003092  BEDB               	btfsc	plusw2,7,c
 12121  003094  D03C               	goto	i2l3953
 12122  003096  0E01               	movlw	1
 12123  003098  50DB               	movf	plusw2,w,c
 12124  00309A  E103               	bnz	i2u406_40
 12125  00309C  04DE               	decf	postinc2,w,c
 12126  00309E  A0D8               	btfss	status,0,c
 12127  0030A0  D036               	goto	i2l3953
 12128  0030A2                     i2u406_40:
 12129                           
 12130                           ;UART.c: 84: c = _this->buf[_this->tail];
 12131  0030A2  EE20 F0CA          	lfsr	2,202
 12132  0030A6  5007               	movf	i2UART_buff_get@_this,w,c
 12133  0030A8  26D9               	addwf	fsr2l,f,c
 12134  0030AA  5008               	movf	i2UART_buff_get@_this+1,w,c
 12135  0030AC  22DA               	addwfc	fsr2h,f,c
 12136  0030AE  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 12137  0030B2  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 12138  0030B6  5009               	movf	??i2_UART_buff_get,w,c
 12139  0030B8  2407               	addwf	i2UART_buff_get@_this,w,c
 12140  0030BA  6ED9               	movwf	fsr2l,c
 12141  0030BC  500A               	movf	??i2_UART_buff_get+1,w,c
 12142  0030BE  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 12143  0030C0  6EDA               	movwf	fsr2h,c
 12144  0030C2  50DF               	movf	indf2,w,c
 12145  0030C4  6E0B               	movwf	i2UART_buff_get@c,c
 12146                           
 12147                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12148  0030C6  EE20 F0CA          	lfsr	2,202
 12149  0030CA  5007               	movf	i2UART_buff_get@_this,w,c
 12150  0030CC  26D9               	addwf	fsr2l,f,c
 12151  0030CE  5008               	movf	i2UART_buff_get@_this+1,w,c
 12152  0030D0  22DA               	addwfc	fsr2h,f,c
 12153  0030D2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12154  0030D6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12155  0030DA  0E00               	movlw	0
 12156  0030DC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12157  0030DE  0EC8               	movlw	200
 12158  0030E0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12159  0030E2  EC46  F01C         	call	i2_UART_buff_modulo_inc	;wreg free
 12160  0030E6  EE20 F0CA          	lfsr	2,202
 12161  0030EA  5007               	movf	i2UART_buff_get@_this,w,c
 12162  0030EC  26D9               	addwf	fsr2l,f,c
 12163  0030EE  5008               	movf	i2UART_buff_get@_this+1,w,c
 12164  0030F0  22DA               	addwfc	fsr2h,f,c
 12165  0030F2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12166  0030F6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12167                           
 12168                           ;UART.c: 86: --_this->count;
 12169  0030FA  EE20 F0CC          	lfsr	2,204
 12170  0030FE  5007               	movf	i2UART_buff_get@_this,w,c
 12171  003100  26D9               	addwf	fsr2l,f,c
 12172  003102  5008               	movf	i2UART_buff_get@_this+1,w,c
 12173  003104  22DA               	addwfc	fsr2h,f,c
 12174  003106  06DE               	decf	postinc2,f,c
 12175  003108  0E00               	movlw	0
 12176  00310A  5ADD               	subwfb	postdec2,f,c
 12177                           
 12178                           ;UART.c: 87: } else {
 12179  00310C  D002               	goto	i2l778
 12180  00310E                     i2l3953:
 12181                           
 12182                           ;UART.c: 88: c = 0;
 12183  00310E  0E00               	movlw	0
 12184  003110  6E0B               	movwf	i2UART_buff_get@c,c
 12185  003112                     i2l778:
 12186                           
 12187                           ;UART.c: 89: }
 12188                           ;UART.c: 90: return (c);
 12189  003112  500B               	movf	i2UART_buff_get@c,w,c
 12190  003114  0012               	return	
 12191  003116                     __end_ofi2_UART_buff_get:
 12192                           	opt stack 0
 12193                           tosu	equ	0xFFF
 12194                           tosh	equ	0xFFE
 12195                           tosl	equ	0xFFD
 12196                           pclatu	equ	0xFFB
 12197                           pclath	equ	0xFFA
 12198                           tblptru	equ	0xFF8
 12199                           tblptrh	equ	0xFF7
 12200                           tblptrl	equ	0xFF6
 12201                           tablat	equ	0xFF5
 12202                           prodh	equ	0xFF4
 12203                           prodl	equ	0xFF3
 12204                           intcon	equ	0xFF2
 12205                           intcon2	equ	0xFF1
 12206                           postinc0	equ	0xFEE
 12207                           fsr0h	equ	0xFEA
 12208                           fsr0l	equ	0xFE9
 12209                           wreg	equ	0xFE8
 12210                           postinc1	equ	0xFE6
 12211                           postdec1	equ	0xFE5
 12212                           fsr1h	equ	0xFE2
 12213                           fsr1l	equ	0xFE1
 12214                           indf2	equ	0xFDF
 12215                           postinc2	equ	0xFDE
 12216                           postdec2	equ	0xFDD
 12217                           plusw2	equ	0xFDB
 12218                           fsr2h	equ	0xFDA
 12219                           fsr2l	equ	0xFD9
 12220                           status	equ	0xFD8
 12221                           
 12222 ;; *************** function _EUSART1_Receive_ISR *****************
 12223 ;; Defined at:
 12224 ;;		line 139 in file "UART.c"
 12225 ;; Parameters:    Size  Location     Type
 12226 ;;		None
 12227 ;; Auto vars:     Size  Location     Type
 12228 ;;  data            1   11[COMRAM] unsigned char 
 12229 ;; Return value:  Size  Location     Type
 12230 ;;		None               void
 12231 ;; Registers used:
 12232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12233 ;; Tracked objects:
 12234 ;;		On entry : 0/0
 12235 ;;		On exit  : 0/0
 12236 ;;		Unchanged: 0/0
 12237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12238 ;;      Params:         0       0       0       0       0       0       0
 12239 ;;      Locals:         1       0       0       0       0       0       0
 12240 ;;      Temps:          0       0       0       0       0       0       0
 12241 ;;      Totals:         1       0       0       0       0       0       0
 12242 ;;Total ram usage:        1 bytes
 12243 ;; Hardware stack levels used:    1
 12244 ;; Hardware stack levels required when called:    2
 12245 ;; This function calls:
 12246 ;;		i2_UART_buff_put
 12247 ;; This function is called by:
 12248 ;;		_INTERRUPT_InterruptManager
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           	psect	text65
 12253  003982                     __ptext65:
 12254                           	opt stack 0
 12255  003982                     _EUSART1_Receive_ISR:
 12256                           	opt stack 21
 12257                           
 12258                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
 12259                           
 12260                           ;incstack = 0
 12261  003982  A2AB               	btfss	4011,1,c	;volatile
 12262  003984  D002               	goto	i2l809
 12263                           
 12264                           ;UART.c: 143: RC1STAbits.CREN = 0;
 12265  003986  98AB               	bcf	4011,4,c	;volatile
 12266                           
 12267                           ;UART.c: 144: RC1STAbits.CREN = 1;
 12268  003988  88AB               	bsf	4011,4,c	;volatile
 12269  00398A                     i2l809:
 12270                           
 12271                           ;UART.c: 145: }
 12272                           ;UART.c: 153: unsigned char data = RCREG1;
 12273  00398A  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 12274                           
 12275                           ;UART.c: 154: UART_buff_put(&input_buffer, data);
 12276  00398E  0E00               	movlw	low _input_buffer
 12277  003990  6E07               	movwf	i2UART_buff_put@_this,c
 12278  003992  0E04               	movlw	high _input_buffer
 12279  003994  6E08               	movwf	i2UART_buff_put@_this+1,c
 12280  003996  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 12281  00399A  EC53  F013         	call	i2_UART_buff_put	;wreg free
 12282  00399E  0012               	return		;funcret
 12283  0039A0                     __end_of_EUSART1_Receive_ISR:
 12284                           	opt stack 0
 12285                           tosu	equ	0xFFF
 12286                           tosh	equ	0xFFE
 12287                           tosl	equ	0xFFD
 12288                           pclatu	equ	0xFFB
 12289                           pclath	equ	0xFFA
 12290                           tblptru	equ	0xFF8
 12291                           tblptrh	equ	0xFF7
 12292                           tblptrl	equ	0xFF6
 12293                           tablat	equ	0xFF5
 12294                           prodh	equ	0xFF4
 12295                           prodl	equ	0xFF3
 12296                           intcon	equ	0xFF2
 12297                           intcon2	equ	0xFF1
 12298                           postinc0	equ	0xFEE
 12299                           fsr0h	equ	0xFEA
 12300                           fsr0l	equ	0xFE9
 12301                           wreg	equ	0xFE8
 12302                           postinc1	equ	0xFE6
 12303                           postdec1	equ	0xFE5
 12304                           fsr1h	equ	0xFE2
 12305                           fsr1l	equ	0xFE1
 12306                           indf2	equ	0xFDF
 12307                           postinc2	equ	0xFDE
 12308                           postdec2	equ	0xFDD
 12309                           plusw2	equ	0xFDB
 12310                           fsr2h	equ	0xFDA
 12311                           fsr2l	equ	0xFD9
 12312                           status	equ	0xFD8
 12313                           
 12314 ;; *************** function i2_UART_buff_put *****************
 12315 ;; Defined at:
 12316 ;;		line 68 in file "UART.c"
 12317 ;; Parameters:    Size  Location     Type
 12318 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12319 ;;		 -> output_buffer(206), input_buffer(206), 
 12320 ;;  c               1    8[COMRAM] const unsigned char 
 12321 ;; Auto vars:     Size  Location     Type
 12322 ;;		None
 12323 ;; Return value:  Size  Location     Type
 12324 ;;		None               void
 12325 ;; Registers used:
 12326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12327 ;; Tracked objects:
 12328 ;;		On entry : 0/0
 12329 ;;		On exit  : 0/0
 12330 ;;		Unchanged: 0/0
 12331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12332 ;;      Params:         3       0       0       0       0       0       0
 12333 ;;      Locals:         0       0       0       0       0       0       0
 12334 ;;      Temps:          2       0       0       0       0       0       0
 12335 ;;      Totals:         5       0       0       0       0       0       0
 12336 ;;Total ram usage:        5 bytes
 12337 ;; Hardware stack levels used:    1
 12338 ;; Hardware stack levels required when called:    1
 12339 ;; This function calls:
 12340 ;;		i2_UART_buff_modulo_inc
 12341 ;; This function is called by:
 12342 ;;		_EUSART1_Receive_ISR
 12343 ;; This function uses a non-reentrant model
 12344 ;;
 12345                           
 12346                           	psect	text66
 12347  0026A6                     __ptext66:
 12348                           	opt stack 0
 12349  0026A6                     i2_UART_buff_put:
 12350                           	opt stack 21
 12351                           
 12352                           ;UART.c: 69: if (_this->count < 200) {
 12353                           
 12354                           ;incstack = 0
 12355  0026A6  EE20 F0CC          	lfsr	2,204
 12356  0026AA  5007               	movf	i2UART_buff_put@_this,w,c
 12357  0026AC  26D9               	addwf	fsr2l,f,c
 12358  0026AE  5008               	movf	i2UART_buff_put@_this+1,w,c
 12359  0026B0  22DA               	addwfc	fsr2h,f,c
 12360  0026B2  0E01               	movlw	1
 12361  0026B4  BEDB               	btfsc	plusw2,7,c
 12362  0026B6  D007               	goto	i2l3933
 12363  0026B8  0E01               	movlw	1
 12364  0026BA  50DB               	movf	plusw2,w,c
 12365  0026BC  E13A               	bnz	i2l3939
 12366  0026BE  0EC8               	movlw	200
 12367  0026C0  5CDE               	subwf	postinc2,w,c
 12368  0026C2  B0D8               	btfsc	status,0,c
 12369  0026C4  D036               	goto	i2l3939
 12370  0026C6                     i2l3933:
 12371                           
 12372                           ;UART.c: 70: _this->buf[_this->head] = c;
 12373  0026C6  EE20 F0C8          	lfsr	2,200
 12374  0026CA  5007               	movf	i2UART_buff_put@_this,w,c
 12375  0026CC  26D9               	addwf	fsr2l,f,c
 12376  0026CE  5008               	movf	i2UART_buff_put@_this+1,w,c
 12377  0026D0  22DA               	addwfc	fsr2h,f,c
 12378  0026D2  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12379  0026D6  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12380  0026DA  500A               	movf	??i2_UART_buff_put,w,c
 12381  0026DC  2407               	addwf	i2UART_buff_put@_this,w,c
 12382  0026DE  6ED9               	movwf	fsr2l,c
 12383  0026E0  500B               	movf	??i2_UART_buff_put+1,w,c
 12384  0026E2  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12385  0026E4  6EDA               	movwf	fsr2h,c
 12386  0026E6  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12387                           
 12388                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12389  0026EA  EE20 F0C8          	lfsr	2,200
 12390  0026EE  5007               	movf	i2UART_buff_put@_this,w,c
 12391  0026F0  26D9               	addwf	fsr2l,f,c
 12392  0026F2  5008               	movf	i2UART_buff_put@_this+1,w,c
 12393  0026F4  22DA               	addwfc	fsr2h,f,c
 12394  0026F6  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12395  0026FA  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12396  0026FE  0E00               	movlw	0
 12397  002700  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12398  002702  0EC8               	movlw	200
 12399  002704  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12400  002706  EC46  F01C         	call	i2_UART_buff_modulo_inc	;wreg free
 12401  00270A  EE20 F0C8          	lfsr	2,200
 12402  00270E  5007               	movf	i2UART_buff_put@_this,w,c
 12403  002710  26D9               	addwf	fsr2l,f,c
 12404  002712  5008               	movf	i2UART_buff_put@_this+1,w,c
 12405  002714  22DA               	addwfc	fsr2h,f,c
 12406  002716  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12407  00271A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12408                           
 12409                           ;UART.c: 72: ++_this->count;
 12410  00271E  EE20 F0CC          	lfsr	2,204
 12411  002722  5007               	movf	i2UART_buff_put@_this,w,c
 12412  002724  26D9               	addwf	fsr2l,f,c
 12413  002726  5008               	movf	i2UART_buff_put@_this+1,w,c
 12414  002728  22DA               	addwfc	fsr2h,f,c
 12415  00272A  2ADE               	incf	postinc2,f,c
 12416  00272C  0E00               	movlw	0
 12417  00272E  22DD               	addwfc	postdec2,f,c
 12418                           
 12419                           ;UART.c: 73: } else {
 12420  002730  0012               	return	
 12421  002732                     i2l3939:
 12422                           
 12423                           ;UART.c: 74: _this->buf[_this->head] = c;
 12424  002732  EE20 F0C8          	lfsr	2,200
 12425  002736  5007               	movf	i2UART_buff_put@_this,w,c
 12426  002738  26D9               	addwf	fsr2l,f,c
 12427  00273A  5008               	movf	i2UART_buff_put@_this+1,w,c
 12428  00273C  22DA               	addwfc	fsr2h,f,c
 12429  00273E  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12430  002742  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12431  002746  500A               	movf	??i2_UART_buff_put,w,c
 12432  002748  2407               	addwf	i2UART_buff_put@_this,w,c
 12433  00274A  6ED9               	movwf	fsr2l,c
 12434  00274C  500B               	movf	??i2_UART_buff_put+1,w,c
 12435  00274E  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12436  002750  6EDA               	movwf	fsr2h,c
 12437  002752  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12438                           
 12439                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12440  002756  EE20 F0C8          	lfsr	2,200
 12441  00275A  5007               	movf	i2UART_buff_put@_this,w,c
 12442  00275C  26D9               	addwf	fsr2l,f,c
 12443  00275E  5008               	movf	i2UART_buff_put@_this+1,w,c
 12444  002760  22DA               	addwfc	fsr2h,f,c
 12445  002762  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12446  002766  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12447  00276A  0E00               	movlw	0
 12448  00276C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12449  00276E  0EC8               	movlw	200
 12450  002770  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12451  002772  EC46  F01C         	call	i2_UART_buff_modulo_inc	;wreg free
 12452  002776  EE20 F0C8          	lfsr	2,200
 12453  00277A  5007               	movf	i2UART_buff_put@_this,w,c
 12454  00277C  26D9               	addwf	fsr2l,f,c
 12455  00277E  5008               	movf	i2UART_buff_put@_this+1,w,c
 12456  002780  22DA               	addwfc	fsr2h,f,c
 12457  002782  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12458  002786  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12459                           
 12460                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12461  00278A  EE20 F0CA          	lfsr	2,202
 12462  00278E  5007               	movf	i2UART_buff_put@_this,w,c
 12463  002790  26D9               	addwf	fsr2l,f,c
 12464  002792  5008               	movf	i2UART_buff_put@_this+1,w,c
 12465  002794  22DA               	addwfc	fsr2h,f,c
 12466  002796  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12467  00279A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12468  00279E  0E00               	movlw	0
 12469  0027A0  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12470  0027A2  0EC8               	movlw	200
 12471  0027A4  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12472  0027A6  EC46  F01C         	call	i2_UART_buff_modulo_inc	;wreg free
 12473  0027AA  EE20 F0CA          	lfsr	2,202
 12474  0027AE  5007               	movf	i2UART_buff_put@_this,w,c
 12475  0027B0  26D9               	addwf	fsr2l,f,c
 12476  0027B2  5008               	movf	i2UART_buff_put@_this+1,w,c
 12477  0027B4  22DA               	addwfc	fsr2h,f,c
 12478  0027B6  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12479  0027BA  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12480  0027BE  0012               	return	
 12481  0027C0                     __end_ofi2_UART_buff_put:
 12482                           	opt stack 0
 12483                           tosu	equ	0xFFF
 12484                           tosh	equ	0xFFE
 12485                           tosl	equ	0xFFD
 12486                           pclatu	equ	0xFFB
 12487                           pclath	equ	0xFFA
 12488                           tblptru	equ	0xFF8
 12489                           tblptrh	equ	0xFF7
 12490                           tblptrl	equ	0xFF6
 12491                           tablat	equ	0xFF5
 12492                           prodh	equ	0xFF4
 12493                           prodl	equ	0xFF3
 12494                           intcon	equ	0xFF2
 12495                           intcon2	equ	0xFF1
 12496                           postinc0	equ	0xFEE
 12497                           fsr0h	equ	0xFEA
 12498                           fsr0l	equ	0xFE9
 12499                           wreg	equ	0xFE8
 12500                           postinc1	equ	0xFE6
 12501                           postdec1	equ	0xFE5
 12502                           fsr1h	equ	0xFE2
 12503                           fsr1l	equ	0xFE1
 12504                           indf2	equ	0xFDF
 12505                           postinc2	equ	0xFDE
 12506                           postdec2	equ	0xFDD
 12507                           plusw2	equ	0xFDB
 12508                           fsr2h	equ	0xFDA
 12509                           fsr2l	equ	0xFD9
 12510                           status	equ	0xFD8
 12511                           
 12512 ;; *************** function i2_UART_buff_modulo_inc *****************
 12513 ;; Defined at:
 12514 ;;		line 106 in file "UART.c"
 12515 ;; Parameters:    Size  Location     Type
 12516 ;;  value           2    0[COMRAM] const unsigned int 
 12517 ;;  modulus         2    2[COMRAM] const unsigned int 
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  2    0[COMRAM] unsigned int 
 12522 ;; Registers used:
 12523 ;;		wreg, status,2, status,0
 12524 ;; Tracked objects:
 12525 ;;		On entry : 0/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12529 ;;      Params:         4       0       0       0       0       0       0
 12530 ;;      Locals:         2       0       0       0       0       0       0
 12531 ;;      Temps:          0       0       0       0       0       0       0
 12532 ;;      Totals:         6       0       0       0       0       0       0
 12533 ;;Total ram usage:        6 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; This function calls:
 12536 ;;		Nothing
 12537 ;; This function is called by:
 12538 ;;		i2_UART_buff_put
 12539 ;;		i2_UART_buff_get
 12540 ;; This function uses a non-reentrant model
 12541 ;;
 12542                           
 12543                           	psect	text67
 12544  00388C                     __ptext67:
 12545                           	opt stack 0
 12546  00388C                     i2_UART_buff_modulo_inc:
 12547                           	opt stack 21
 12548                           
 12549                           ;UART.c: 107: unsigned int my_value = value + 1;
 12550                           
 12551                           ;incstack = 0
 12552  00388C  0E01               	movlw	1
 12553  00388E  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 12554  003890  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12555  003892  0E00               	movlw	0
 12556  003894  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 12557  003896  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12558                           
 12559                           ;UART.c: 108: if (my_value >= modulus) {
 12560  003898  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 12561  00389A  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 12562  00389C  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 12563  00389E  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 12564  0038A0  A0D8               	btfss	status,0,c
 12565  0038A2  D004               	goto	i2l3433
 12566                           
 12567                           ;UART.c: 109: my_value = 0;
 12568  0038A4  0E00               	movlw	0
 12569  0038A6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12570  0038A8  0E00               	movlw	0
 12571  0038AA  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12572  0038AC                     i2l3433:
 12573                           
 12574                           ;UART.c: 110: }
 12575                           ;UART.c: 111: return (my_value);
 12576  0038AC  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 12577  0038B0  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 12578  0038B4  0012               	return	
 12579  0038B6                     __end_ofi2_UART_buff_modulo_inc:
 12580                           	opt stack 0
 12581                           tosu	equ	0xFFF
 12582                           tosh	equ	0xFFE
 12583                           tosl	equ	0xFFD
 12584                           pclatu	equ	0xFFB
 12585                           pclath	equ	0xFFA
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           intcon	equ	0xFF2
 12593                           intcon2	equ	0xFF1
 12594                           postinc0	equ	0xFEE
 12595                           fsr0h	equ	0xFEA
 12596                           fsr0l	equ	0xFE9
 12597                           wreg	equ	0xFE8
 12598                           postinc1	equ	0xFE6
 12599                           postdec1	equ	0xFE5
 12600                           fsr1h	equ	0xFE2
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           postdec2	equ	0xFDD
 12605                           plusw2	equ	0xFDB
 12606                           fsr2h	equ	0xFDA
 12607                           fsr2l	equ	0xFD9
 12608                           status	equ	0xFD8
 12609                           
 12610 ;; *************** function _ADC_ISR *****************
 12611 ;; Defined at:
 12612 ;;		line 82 in file "mcc_generated_files/adc.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;		None
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  ADC_Result      2   10[COMRAM] int 
 12617 ;; Return value:  Size  Location     Type
 12618 ;;		None               void
 12619 ;; Registers used:
 12620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12621 ;; Tracked objects:
 12622 ;;		On entry : 0/0
 12623 ;;		On exit  : 0/0
 12624 ;;		Unchanged: 0/0
 12625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12626 ;;      Params:         0       0       0       0       0       0       0
 12627 ;;      Locals:         2       0       0       0       0       0       0
 12628 ;;      Temps:          6       0       0       0       0       0       0
 12629 ;;      Totals:         8       0       0       0       0       0       0
 12630 ;;Total ram usage:        8 bytes
 12631 ;; Hardware stack levels used:    1
 12632 ;; Hardware stack levels required when called:    1
 12633 ;; This function calls:
 12634 ;;		_ADC_GetConversionResult
 12635 ;;		_ADC_StartConversion
 12636 ;;		_Set_4051
 12637 ;; This function is called by:
 12638 ;;		_INTERRUPT_InterruptManager
 12639 ;; This function uses a non-reentrant model
 12640 ;;
 12641                           
 12642                           	psect	text68
 12643  000CD2                     __ptext68:
 12644                           	opt stack 0
 12645  000CD2                     _ADC_ISR:
 12646                           	opt stack 22
 12647                           
 12648                           ;adc.c: 85: PIR1bits.ADIF = 0;
 12649                           
 12650                           ;incstack = 0
 12651  000CD2  9C9E               	bcf	3998,6,c	;volatile
 12652                           
 12653                           ;adc.c: 86: int ADC_Result = 0;
 12654  000CD4  0E00               	movlw	0
 12655  000CD6  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
 12656  000CD8  0E00               	movlw	0
 12657  000CDA  6E0B               	movwf	ADC_ISR@ADC_Result,c
 12658                           
 12659                           ;adc.c: 87: if (Temp_Aquire){
 12660  000CDC  503B               	movf	_Temp_Aquire,w,c
 12661  000CDE  B4D8               	btfsc	status,2,c
 12662  000CE0  D078               	goto	i2l4015
 12663                           
 12664                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 12665  000CE2  EC24  F01D         	call	_ADC_GetConversionResult	;wreg free
 12666  000CE6  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12667  000CEA  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12668                           
 12669                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 12670  000CEE  D05A               	goto	i2l4011
 12671  000CF0                     i2l3985:
 12672                           
 12673                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12674  000CF0  90D8               	bcf	status,0,c
 12675  000CF2  342C               	rlcf	_ADC_Buffer_Point,w,c
 12676  000CF4  6ED9               	movwf	fsr2l,c
 12677  000CF6  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 12678  000CF8  6EDA               	movwf	fsr2h,c
 12679  000CFA  0EB9               	movlw	low _Temp_Adc
 12680  000CFC  26D9               	addwf	fsr2l,f,c
 12681  000CFE  0E00               	movlw	high _Temp_Adc
 12682  000D00  22DA               	addwfc	fsr2h,f,c
 12683  000D02  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12684  000D06  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12685                           
 12686                           ;adc.c: 94: Set_4051(2);
 12687  000D0A  0E00               	movlw	0
 12688  000D0C  6E02               	movwf	Set_4051@Channel+1,c
 12689  000D0E  0E02               	movlw	2
 12690  000D10  6E01               	movwf	Set_4051@Channel,c
 12691  000D12  EC2C  F01B         	call	_Set_4051	;wreg free
 12692                           
 12693                           ;adc.c: 95: ADC_StartConversion(Temp1);
 12694  000D16  0E0E               	movlw	14
 12695  000D18  ECDE  F01C         	call	_ADC_StartConversion
 12696                           
 12697                           ;adc.c: 96: break;
 12698  000D1C  D058               	goto	i2l4013
 12699  000D1E                     i2l3991:
 12700                           
 12701                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12702  000D1E  90D8               	bcf	status,0,c
 12703  000D20  342C               	rlcf	_ADC_Buffer_Point,w,c
 12704  000D22  6ED9               	movwf	fsr2l,c
 12705  000D24  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 12706  000D26  6EDA               	movwf	fsr2h,c
 12707  000D28  0EB9               	movlw	low _Temp_Adc
 12708  000D2A  26D9               	addwf	fsr2l,f,c
 12709  000D2C  0E00               	movlw	high _Temp_Adc
 12710  000D2E  22DA               	addwfc	fsr2h,f,c
 12711  000D30  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12712  000D34  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12713                           
 12714                           ;adc.c: 99: Set_4051(4);
 12715  000D38  0E00               	movlw	0
 12716  000D3A  6E02               	movwf	Set_4051@Channel+1,c
 12717  000D3C  0E04               	movlw	4
 12718  000D3E  6E01               	movwf	Set_4051@Channel,c
 12719  000D40  EC2C  F01B         	call	_Set_4051	;wreg free
 12720                           
 12721                           ;adc.c: 100: ADC_StartConversion(Temp1);
 12722  000D44  0E0E               	movlw	14
 12723  000D46  ECDE  F01C         	call	_ADC_StartConversion
 12724                           
 12725                           ;adc.c: 101: break;
 12726  000D4A  D041               	goto	i2l4013
 12727  000D4C                     i2l3997:
 12728                           
 12729                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12730  000D4C  90D8               	bcf	status,0,c
 12731  000D4E  342C               	rlcf	_ADC_Buffer_Point,w,c
 12732  000D50  6ED9               	movwf	fsr2l,c
 12733  000D52  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 12734  000D54  6EDA               	movwf	fsr2h,c
 12735  000D56  0EB9               	movlw	low _Temp_Adc
 12736  000D58  26D9               	addwf	fsr2l,f,c
 12737  000D5A  0E00               	movlw	high _Temp_Adc
 12738  000D5C  22DA               	addwfc	fsr2h,f,c
 12739  000D5E  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12740  000D62  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12741                           
 12742                           ;adc.c: 104: Set_4051(5);
 12743  000D66  0E00               	movlw	0
 12744  000D68  6E02               	movwf	Set_4051@Channel+1,c
 12745  000D6A  0E05               	movlw	5
 12746  000D6C  6E01               	movwf	Set_4051@Channel,c
 12747  000D6E  EC2C  F01B         	call	_Set_4051	;wreg free
 12748                           
 12749                           ;adc.c: 105: ADC_StartConversion(Temp1);
 12750  000D72  0E0E               	movlw	14
 12751  000D74  ECDE  F01C         	call	_ADC_StartConversion
 12752                           
 12753                           ;adc.c: 106: break;
 12754  000D78  D02A               	goto	i2l4013
 12755  000D7A                     i2l4003:
 12756                           
 12757                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12758  000D7A  90D8               	bcf	status,0,c
 12759  000D7C  342C               	rlcf	_ADC_Buffer_Point,w,c
 12760  000D7E  6ED9               	movwf	fsr2l,c
 12761  000D80  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 12762  000D82  6EDA               	movwf	fsr2h,c
 12763  000D84  0EB9               	movlw	low _Temp_Adc
 12764  000D86  26D9               	addwf	fsr2l,f,c
 12765  000D88  0E00               	movlw	high _Temp_Adc
 12766  000D8A  22DA               	addwfc	fsr2h,f,c
 12767  000D8C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12768  000D90  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12769                           
 12770                           ;adc.c: 109: Temp_Aquire = 0;
 12771  000D94  0E00               	movlw	0
 12772  000D96  6E3B               	movwf	_Temp_Aquire,c
 12773                           
 12774                           ;adc.c: 110: Temp_Done = 1;
 12775  000D98  0E00               	movlw	0
 12776  000D9A  0100               	movlb	0	; () banked
 12777  000D9C  6F89               	movwf	(_Temp_Done+1)& (0+255),b
 12778  000D9E  0E01               	movlw	1
 12779  000DA0  6F88               	movwf	_Temp_Done& (0+255),b
 12780                           
 12781                           ; BSR set to: 0
 12782                           ;adc.c: 143: }
 12783                           
 12784                           ;adc.c: 112: break;
 12785  000DA2  D015               	goto	i2l4013
 12786  000DA4                     i2l4011:
 12787  000DA4  C02C  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 12788  000DA8  C02D  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 12789                           
 12790                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12791                           ; Switch size 1, requested type "space"
 12792                           ; Number of cases is 1, Range of values is 0 to 0
 12793                           ; switch strategies available:
 12794                           ; Name         Instructions Cycles
 12795                           ; simple_byte            4     3 (average)
 12796                           ;	Chosen strategy is simple_byte
 12797  000DAC  5006               	movf	??_ADC_ISR+1,w,c
 12798  000DAE  0A00               	xorlw	0	; case 0
 12799  000DB0  A4D8               	btfss	status,2,c
 12800  000DB2  D00D               	goto	i2l4013
 12801                           
 12802                           ; Switch size 1, requested type "space"
 12803                           ; Number of cases is 4, Range of values is 0 to 3
 12804                           ; switch strategies available:
 12805                           ; Name         Instructions Cycles
 12806                           ; simple_byte           13     7 (average)
 12807                           ;	Chosen strategy is simple_byte
 12808  000DB4  5005               	movf	??_ADC_ISR,w,c
 12809  000DB6  0A00               	xorlw	0	; case 0
 12810  000DB8  B4D8               	btfsc	status,2,c
 12811  000DBA  D79A               	goto	i2l3985
 12812  000DBC  0A01               	xorlw	1	; case 1
 12813  000DBE  B4D8               	btfsc	status,2,c
 12814  000DC0  D7AE               	goto	i2l3991
 12815  000DC2  0A03               	xorlw	3	; case 2
 12816  000DC4  B4D8               	btfsc	status,2,c
 12817  000DC6  D7C2               	goto	i2l3997
 12818  000DC8  0A01               	xorlw	1	; case 3
 12819  000DCA  B4D8               	btfsc	status,2,c
 12820  000DCC  D7D6               	goto	i2l4003
 12821  000DCE                     i2l4013:
 12822                           
 12823                           ;adc.c: 144: ADC_Buffer_Point++;
 12824  000DCE  4A2C               	infsnz	_ADC_Buffer_Point,f,c
 12825  000DD0  2A2D               	incf	_ADC_Buffer_Point+1,f,c
 12826  000DD2                     i2l4015:
 12827                           
 12828                           ;adc.c: 145: }
 12829                           ;adc.c: 146: if (Volt_Aquire){
 12830  000DD2  503C               	movf	_Volt_Aquire,w,c
 12831  000DD4  B4D8               	btfsc	status,2,c
 12832  000DD6  0012               	return	
 12833                           
 12834                           ;adc.c: 148: ADC_Result = ADC_GetConversionResult();
 12835  000DD8  EC24  F01D         	call	_ADC_GetConversionResult	;wreg free
 12836  000DDC  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12837  000DE0  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12838                           
 12839                           ;adc.c: 149: switch ( ADC_Buffer_Point )
 12840  000DE4  D176               	goto	i2l4063
 12841  000DE6                     i2l4019:
 12842                           
 12843                           ;adc.c: 152: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12844  000DE6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12845  000DEA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12846  000DEE  0E00               	movlw	0
 12847  000DF0  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12848  000DF2  0EFF               	movlw	255
 12849  000DF4  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12850  000DF6  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12851  000DF8  0E60               	movlw	low _Battery_Adc
 12852  000DFA  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12853  000DFC  0E00               	movlw	high _Battery_Adc
 12854  000DFE  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12855  000E00  90D8               	bcf	status,0,c
 12856  000E02  342C               	rlcf	_ADC_Buffer_Point,w,c
 12857  000E04  6ED9               	movwf	fsr2l,c
 12858  000E06  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 12859  000E08  6EDA               	movwf	fsr2h,c
 12860  000E0A  90D8               	bcf	status,0,c
 12861  000E0C  36D9               	rlcf	fsr2l,f,c
 12862  000E0E  36DA               	rlcf	fsr2h,f,c
 12863  000E10  5009               	movf	??_ADC_ISR+4,w,c
 12864  000E12  26D9               	addwf	fsr2l,f,c
 12865  000E14  500A               	movf	??_ADC_ISR+5,w,c
 12866  000E16  22DA               	addwfc	fsr2h,f,c
 12867  000E18  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12868  000E1C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12869  000E20  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12870  000E24  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 12871                           
 12872                           ;adc.c: 153: ADC_StartConversion(Battery2);
 12873  000E28  0E03               	movlw	3
 12874  000E2A  ECDE  F01C         	call	_ADC_StartConversion
 12875                           
 12876                           ;adc.c: 154: break;
 12877  000E2E  D178               	goto	i2l4065
 12878  000E30                     i2l4023:
 12879                           
 12880                           ;adc.c: 156: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12881  000E30  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12882  000E34  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12883  000E38  0E00               	movlw	0
 12884  000E3A  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12885  000E3C  0EFF               	movlw	255
 12886  000E3E  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12887  000E40  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12888  000E42  0E60               	movlw	low _Battery_Adc
 12889  000E44  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12890  000E46  0E00               	movlw	high _Battery_Adc
 12891  000E48  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12892  000E4A  90D8               	bcf	status,0,c
 12893  000E4C  342C               	rlcf	_ADC_Buffer_Point,w,c
 12894  000E4E  6ED9               	movwf	fsr2l,c
 12895  000E50  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 12896  000E52  6EDA               	movwf	fsr2h,c
 12897  000E54  90D8               	bcf	status,0,c
 12898  000E56  36D9               	rlcf	fsr2l,f,c
 12899  000E58  36DA               	rlcf	fsr2h,f,c
 12900  000E5A  5009               	movf	??_ADC_ISR+4,w,c
 12901  000E5C  26D9               	addwf	fsr2l,f,c
 12902  000E5E  500A               	movf	??_ADC_ISR+5,w,c
 12903  000E60  22DA               	addwfc	fsr2h,f,c
 12904  000E62  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12905  000E66  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12906  000E6A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12907  000E6E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 12908                           
 12909                           ;adc.c: 157: ADC_StartConversion(Battery3);
 12910  000E72  0E04               	movlw	4
 12911  000E74  ECDE  F01C         	call	_ADC_StartConversion
 12912                           
 12913                           ;adc.c: 158: break;
 12914  000E78  D153               	goto	i2l4065
 12915  000E7A                     i2l4027:
 12916                           
 12917                           ;adc.c: 160: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12918  000E7A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12919  000E7E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12920  000E82  0E00               	movlw	0
 12921  000E84  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12922  000E86  0EFF               	movlw	255
 12923  000E88  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12924  000E8A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12925  000E8C  0E60               	movlw	low _Battery_Adc
 12926  000E8E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12927  000E90  0E00               	movlw	high _Battery_Adc
 12928  000E92  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12929  000E94  90D8               	bcf	status,0,c
 12930  000E96  342C               	rlcf	_ADC_Buffer_Point,w,c
 12931  000E98  6ED9               	movwf	fsr2l,c
 12932  000E9A  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 12933  000E9C  6EDA               	movwf	fsr2h,c
 12934  000E9E  90D8               	bcf	status,0,c
 12935  000EA0  36D9               	rlcf	fsr2l,f,c
 12936  000EA2  36DA               	rlcf	fsr2h,f,c
 12937  000EA4  5009               	movf	??_ADC_ISR+4,w,c
 12938  000EA6  26D9               	addwf	fsr2l,f,c
 12939  000EA8  500A               	movf	??_ADC_ISR+5,w,c
 12940  000EAA  22DA               	addwfc	fsr2h,f,c
 12941  000EAC  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12942  000EB0  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12943  000EB4  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12944  000EB8  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 12945                           
 12946                           ;adc.c: 161: ADC_StartConversion(Battery4);
 12947  000EBC  0E05               	movlw	5
 12948  000EBE  ECDE  F01C         	call	_ADC_StartConversion
 12949                           
 12950                           ;adc.c: 162: break;
 12951  000EC2  D12E               	goto	i2l4065
 12952  000EC4                     i2l4031:
 12953                           
 12954                           ;adc.c: 164: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12955  000EC4  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12956  000EC8  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12957  000ECC  0E00               	movlw	0
 12958  000ECE  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12959  000ED0  0EFF               	movlw	255
 12960  000ED2  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12961  000ED4  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12962  000ED6  0E60               	movlw	low _Battery_Adc
 12963  000ED8  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12964  000EDA  0E00               	movlw	high _Battery_Adc
 12965  000EDC  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12966  000EDE  90D8               	bcf	status,0,c
 12967  000EE0  342C               	rlcf	_ADC_Buffer_Point,w,c
 12968  000EE2  6ED9               	movwf	fsr2l,c
 12969  000EE4  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 12970  000EE6  6EDA               	movwf	fsr2h,c
 12971  000EE8  90D8               	bcf	status,0,c
 12972  000EEA  36D9               	rlcf	fsr2l,f,c
 12973  000EEC  36DA               	rlcf	fsr2h,f,c
 12974  000EEE  5009               	movf	??_ADC_ISR+4,w,c
 12975  000EF0  26D9               	addwf	fsr2l,f,c
 12976  000EF2  500A               	movf	??_ADC_ISR+5,w,c
 12977  000EF4  22DA               	addwfc	fsr2h,f,c
 12978  000EF6  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12979  000EFA  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12980  000EFE  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12981  000F02  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 12982                           
 12983                           ;adc.c: 165: ADC_StartConversion(Battery5);
 12984  000F06  0E18               	movlw	24
 12985  000F08  ECDE  F01C         	call	_ADC_StartConversion
 12986                           
 12987                           ;adc.c: 166: break;
 12988  000F0C  D109               	goto	i2l4065
 12989  000F0E                     i2l4035:
 12990                           
 12991                           ;adc.c: 168: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12992  000F0E  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12993  000F12  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12994  000F16  0E00               	movlw	0
 12995  000F18  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12996  000F1A  0EFF               	movlw	255
 12997  000F1C  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12998  000F1E  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12999  000F20  0E60               	movlw	low _Battery_Adc
 13000  000F22  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13001  000F24  0E00               	movlw	high _Battery_Adc
 13002  000F26  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13003  000F28  90D8               	bcf	status,0,c
 13004  000F2A  342C               	rlcf	_ADC_Buffer_Point,w,c
 13005  000F2C  6ED9               	movwf	fsr2l,c
 13006  000F2E  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 13007  000F30  6EDA               	movwf	fsr2h,c
 13008  000F32  90D8               	bcf	status,0,c
 13009  000F34  36D9               	rlcf	fsr2l,f,c
 13010  000F36  36DA               	rlcf	fsr2h,f,c
 13011  000F38  5009               	movf	??_ADC_ISR+4,w,c
 13012  000F3A  26D9               	addwf	fsr2l,f,c
 13013  000F3C  500A               	movf	??_ADC_ISR+5,w,c
 13014  000F3E  22DA               	addwfc	fsr2h,f,c
 13015  000F40  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13016  000F44  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13017  000F48  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13018  000F4C  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13019                           
 13020                           ;adc.c: 169: ADC_StartConversion(Battery6);
 13021  000F50  0E1A               	movlw	26
 13022  000F52  ECDE  F01C         	call	_ADC_StartConversion
 13023                           
 13024                           ;adc.c: 170: break;
 13025  000F56  D0E4               	goto	i2l4065
 13026  000F58                     i2l4039:
 13027                           
 13028                           ;adc.c: 172: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13029  000F58  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13030  000F5C  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13031  000F60  0E00               	movlw	0
 13032  000F62  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13033  000F64  0EFF               	movlw	255
 13034  000F66  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13035  000F68  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13036  000F6A  0E60               	movlw	low _Battery_Adc
 13037  000F6C  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13038  000F6E  0E00               	movlw	high _Battery_Adc
 13039  000F70  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13040  000F72  90D8               	bcf	status,0,c
 13041  000F74  342C               	rlcf	_ADC_Buffer_Point,w,c
 13042  000F76  6ED9               	movwf	fsr2l,c
 13043  000F78  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 13044  000F7A  6EDA               	movwf	fsr2h,c
 13045  000F7C  90D8               	bcf	status,0,c
 13046  000F7E  36D9               	rlcf	fsr2l,f,c
 13047  000F80  36DA               	rlcf	fsr2h,f,c
 13048  000F82  5009               	movf	??_ADC_ISR+4,w,c
 13049  000F84  26D9               	addwf	fsr2l,f,c
 13050  000F86  500A               	movf	??_ADC_ISR+5,w,c
 13051  000F88  22DA               	addwfc	fsr2h,f,c
 13052  000F8A  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13053  000F8E  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13054  000F92  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13055  000F96  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13056                           
 13057                           ;adc.c: 173: ADC_StartConversion(Battery7);
 13058  000F9A  0E1B               	movlw	27
 13059  000F9C  ECDE  F01C         	call	_ADC_StartConversion
 13060                           
 13061                           ;adc.c: 174: break;
 13062  000FA0  D0BF               	goto	i2l4065
 13063  000FA2                     i2l4043:
 13064                           
 13065                           ;adc.c: 176: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13066  000FA2  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13067  000FA6  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13068  000FAA  0E00               	movlw	0
 13069  000FAC  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13070  000FAE  0EFF               	movlw	255
 13071  000FB0  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13072  000FB2  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13073  000FB4  0E60               	movlw	low _Battery_Adc
 13074  000FB6  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13075  000FB8  0E00               	movlw	high _Battery_Adc
 13076  000FBA  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13077  000FBC  90D8               	bcf	status,0,c
 13078  000FBE  342C               	rlcf	_ADC_Buffer_Point,w,c
 13079  000FC0  6ED9               	movwf	fsr2l,c
 13080  000FC2  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 13081  000FC4  6EDA               	movwf	fsr2h,c
 13082  000FC6  90D8               	bcf	status,0,c
 13083  000FC8  36D9               	rlcf	fsr2l,f,c
 13084  000FCA  36DA               	rlcf	fsr2h,f,c
 13085  000FCC  5009               	movf	??_ADC_ISR+4,w,c
 13086  000FCE  26D9               	addwf	fsr2l,f,c
 13087  000FD0  500A               	movf	??_ADC_ISR+5,w,c
 13088  000FD2  22DA               	addwfc	fsr2h,f,c
 13089  000FD4  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13090  000FD8  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13091  000FDC  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13092  000FE0  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13093                           
 13094                           ;adc.c: 177: ADC_StartConversion(Battery8);
 13095  000FE4  0E08               	movlw	8
 13096  000FE6  ECDE  F01C         	call	_ADC_StartConversion
 13097                           
 13098                           ;adc.c: 178: break;
 13099  000FEA  D09A               	goto	i2l4065
 13100  000FEC                     i2l4047:
 13101                           
 13102                           ;adc.c: 180: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13103  000FEC  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13104  000FF0  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13105  000FF4  0E00               	movlw	0
 13106  000FF6  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13107  000FF8  0EFF               	movlw	255
 13108  000FFA  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13109  000FFC  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13110  000FFE  0E60               	movlw	low _Battery_Adc
 13111  001000  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13112  001002  0E00               	movlw	high _Battery_Adc
 13113  001004  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13114  001006  90D8               	bcf	status,0,c
 13115  001008  342C               	rlcf	_ADC_Buffer_Point,w,c
 13116  00100A  6ED9               	movwf	fsr2l,c
 13117  00100C  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 13118  00100E  6EDA               	movwf	fsr2h,c
 13119  001010  90D8               	bcf	status,0,c
 13120  001012  36D9               	rlcf	fsr2l,f,c
 13121  001014  36DA               	rlcf	fsr2h,f,c
 13122  001016  5009               	movf	??_ADC_ISR+4,w,c
 13123  001018  26D9               	addwf	fsr2l,f,c
 13124  00101A  500A               	movf	??_ADC_ISR+5,w,c
 13125  00101C  22DA               	addwfc	fsr2h,f,c
 13126  00101E  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13127  001022  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13128  001026  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13129  00102A  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13130                           
 13131                           ;adc.c: 181: ADC_StartConversion(Battery9);
 13132  00102E  0E0B               	movlw	11
 13133  001030  ECDE  F01C         	call	_ADC_StartConversion
 13134                           
 13135                           ;adc.c: 182: break;
 13136  001034  D075               	goto	i2l4065
 13137  001036                     i2l4051:
 13138                           
 13139                           ;adc.c: 184: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13140  001036  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13141  00103A  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13142  00103E  0E00               	movlw	0
 13143  001040  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13144  001042  0EFF               	movlw	255
 13145  001044  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13146  001046  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13147  001048  0E60               	movlw	low _Battery_Adc
 13148  00104A  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13149  00104C  0E00               	movlw	high _Battery_Adc
 13150  00104E  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13151  001050  90D8               	bcf	status,0,c
 13152  001052  342C               	rlcf	_ADC_Buffer_Point,w,c
 13153  001054  6ED9               	movwf	fsr2l,c
 13154  001056  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 13155  001058  6EDA               	movwf	fsr2h,c
 13156  00105A  90D8               	bcf	status,0,c
 13157  00105C  36D9               	rlcf	fsr2l,f,c
 13158  00105E  36DA               	rlcf	fsr2h,f,c
 13159  001060  5009               	movf	??_ADC_ISR+4,w,c
 13160  001062  26D9               	addwf	fsr2l,f,c
 13161  001064  500A               	movf	??_ADC_ISR+5,w,c
 13162  001066  22DA               	addwfc	fsr2h,f,c
 13163  001068  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13164  00106C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13165  001070  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13166  001074  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13167                           
 13168                           ;adc.c: 185: ADC_StartConversion(Battery10);
 13169  001078  0E0D               	movlw	13
 13170  00107A  ECDE  F01C         	call	_ADC_StartConversion
 13171                           
 13172                           ;adc.c: 186: break;
 13173  00107E  D050               	goto	i2l4065
 13174  001080                     i2l4055:
 13175                           
 13176                           ;adc.c: 188: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13177  001080  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13178  001084  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13179  001088  0E00               	movlw	0
 13180  00108A  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13181  00108C  0EFF               	movlw	255
 13182  00108E  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13183  001090  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13184  001092  0E60               	movlw	low _Battery_Adc
 13185  001094  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13186  001096  0E00               	movlw	high _Battery_Adc
 13187  001098  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13188  00109A  90D8               	bcf	status,0,c
 13189  00109C  342C               	rlcf	_ADC_Buffer_Point,w,c
 13190  00109E  6ED9               	movwf	fsr2l,c
 13191  0010A0  342D               	rlcf	_ADC_Buffer_Point+1,w,c
 13192  0010A2  6EDA               	movwf	fsr2h,c
 13193  0010A4  90D8               	bcf	status,0,c
 13194  0010A6  36D9               	rlcf	fsr2l,f,c
 13195  0010A8  36DA               	rlcf	fsr2h,f,c
 13196  0010AA  5009               	movf	??_ADC_ISR+4,w,c
 13197  0010AC  26D9               	addwf	fsr2l,f,c
 13198  0010AE  500A               	movf	??_ADC_ISR+5,w,c
 13199  0010B0  22DA               	addwfc	fsr2h,f,c
 13200  0010B2  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13201  0010B6  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13202  0010BA  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13203  0010BE  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13204                           
 13205                           ;adc.c: 189: Volt_Aquire = 0;
 13206  0010C2  0E00               	movlw	0
 13207  0010C4  6E3C               	movwf	_Volt_Aquire,c
 13208                           
 13209                           ;adc.c: 190: Volt_Done = 1;
 13210  0010C6  0E00               	movlw	0
 13211  0010C8  0100               	movlb	0	; () banked
 13212  0010CA  6F8B               	movwf	(_Volt_Done+1)& (0+255),b
 13213  0010CC  0E01               	movlw	1
 13214  0010CE  6F8A               	movwf	_Volt_Done& (0+255),b
 13215                           
 13216                           ; BSR set to: 0
 13217                           ;adc.c: 192: }
 13218                           
 13219                           ;adc.c: 191: break;
 13220  0010D0  D027               	goto	i2l4065
 13221  0010D2                     i2l4063:
 13222  0010D2  C02C  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 13223  0010D6  C02D  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 13224                           
 13225                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13226                           ; Switch size 1, requested type "space"
 13227                           ; Number of cases is 1, Range of values is 0 to 0
 13228                           ; switch strategies available:
 13229                           ; Name         Instructions Cycles
 13230                           ; simple_byte            4     3 (average)
 13231                           ;	Chosen strategy is simple_byte
 13232  0010DA  5006               	movf	??_ADC_ISR+1,w,c
 13233  0010DC  0A00               	xorlw	0	; case 0
 13234  0010DE  A4D8               	btfss	status,2,c
 13235  0010E0  D01F               	goto	i2l4065
 13236                           
 13237                           ; Switch size 1, requested type "space"
 13238                           ; Number of cases is 10, Range of values is 0 to 9
 13239                           ; switch strategies available:
 13240                           ; Name         Instructions Cycles
 13241                           ; simple_byte           31    16 (average)
 13242                           ;	Chosen strategy is simple_byte
 13243  0010E2  5005               	movf	??_ADC_ISR,w,c
 13244  0010E4  0A00               	xorlw	0	; case 0
 13245  0010E6  B4D8               	btfsc	status,2,c
 13246  0010E8  D67E               	goto	i2l4019
 13247  0010EA  0A01               	xorlw	1	; case 1
 13248  0010EC  B4D8               	btfsc	status,2,c
 13249  0010EE  D6A0               	goto	i2l4023
 13250  0010F0  0A03               	xorlw	3	; case 2
 13251  0010F2  B4D8               	btfsc	status,2,c
 13252  0010F4  D6C2               	goto	i2l4027
 13253  0010F6  0A01               	xorlw	1	; case 3
 13254  0010F8  B4D8               	btfsc	status,2,c
 13255  0010FA  D6E4               	goto	i2l4031
 13256  0010FC  0A07               	xorlw	7	; case 4
 13257  0010FE  B4D8               	btfsc	status,2,c
 13258  001100  D706               	goto	i2l4035
 13259  001102  0A01               	xorlw	1	; case 5
 13260  001104  B4D8               	btfsc	status,2,c
 13261  001106  D728               	goto	i2l4039
 13262  001108  0A03               	xorlw	3	; case 6
 13263  00110A  B4D8               	btfsc	status,2,c
 13264  00110C  D74A               	goto	i2l4043
 13265  00110E  0A01               	xorlw	1	; case 7
 13266  001110  B4D8               	btfsc	status,2,c
 13267  001112  D76C               	goto	i2l4047
 13268  001114  0A0F               	xorlw	15	; case 8
 13269  001116  B4D8               	btfsc	status,2,c
 13270  001118  D78E               	goto	i2l4051
 13271  00111A  0A01               	xorlw	1	; case 9
 13272  00111C  B4D8               	btfsc	status,2,c
 13273  00111E  D7B0               	goto	i2l4055
 13274  001120                     i2l4065:
 13275                           
 13276                           ;adc.c: 193: ADC_Buffer_Point++;
 13277  001120  4A2C               	infsnz	_ADC_Buffer_Point,f,c
 13278  001122  2A2D               	incf	_ADC_Buffer_Point+1,f,c
 13279  001124  0012               	return	
 13280  001126                     __end_of_ADC_ISR:
 13281                           	opt stack 0
 13282                           tosu	equ	0xFFF
 13283                           tosh	equ	0xFFE
 13284                           tosl	equ	0xFFD
 13285                           pclatu	equ	0xFFB
 13286                           pclath	equ	0xFFA
 13287                           tblptru	equ	0xFF8
 13288                           tblptrh	equ	0xFF7
 13289                           tblptrl	equ	0xFF6
 13290                           tablat	equ	0xFF5
 13291                           prodh	equ	0xFF4
 13292                           prodl	equ	0xFF3
 13293                           intcon	equ	0xFF2
 13294                           intcon2	equ	0xFF1
 13295                           postinc0	equ	0xFEE
 13296                           fsr0h	equ	0xFEA
 13297                           fsr0l	equ	0xFE9
 13298                           wreg	equ	0xFE8
 13299                           postinc1	equ	0xFE6
 13300                           postdec1	equ	0xFE5
 13301                           fsr1h	equ	0xFE2
 13302                           fsr1l	equ	0xFE1
 13303                           indf2	equ	0xFDF
 13304                           postinc2	equ	0xFDE
 13305                           postdec2	equ	0xFDD
 13306                           plusw2	equ	0xFDB
 13307                           fsr2h	equ	0xFDA
 13308                           fsr2l	equ	0xFD9
 13309                           status	equ	0xFD8
 13310                           
 13311 ;; *************** function _Set_4051 *****************
 13312 ;; Defined at:
 13313 ;;		line 15 in file "Functions.c"
 13314 ;; Parameters:    Size  Location     Type
 13315 ;;  Channel         2    0[COMRAM] int 
 13316 ;; Auto vars:     Size  Location     Type
 13317 ;;		None
 13318 ;; Return value:  Size  Location     Type
 13319 ;;		None               void
 13320 ;; Registers used:
 13321 ;;		wreg, status,2, status,0
 13322 ;; Tracked objects:
 13323 ;;		On entry : 0/0
 13324 ;;		On exit  : 0/0
 13325 ;;		Unchanged: 0/0
 13326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13327 ;;      Params:         2       0       0       0       0       0       0
 13328 ;;      Locals:         0       0       0       0       0       0       0
 13329 ;;      Temps:          2       0       0       0       0       0       0
 13330 ;;      Totals:         4       0       0       0       0       0       0
 13331 ;;Total ram usage:        4 bytes
 13332 ;; Hardware stack levels used:    1
 13333 ;; This function calls:
 13334 ;;		Nothing
 13335 ;; This function is called by:
 13336 ;;		_ADC_ISR
 13337 ;;		_Temp_Read
 13338 ;; This function uses a non-reentrant model
 13339 ;;
 13340                           
 13341                           	psect	text69
 13342  003658                     __ptext69:
 13343                           	opt stack 0
 13344  003658                     _Set_4051:
 13345                           	opt stack 21
 13346                           
 13347                           ;Functions.c: 17: if (Channel & 0x01)
 13348                           
 13349                           ;incstack = 0
 13350  003658  A001               	btfss	Set_4051@Channel,0,c
 13351  00365A  D005               	goto	i2l3263
 13352                           
 13353                           ;Functions.c: 18: {
 13354                           ;Functions.c: 19: do { LATA6 = ~LATA6; } while(0);
 13355  00365C  BC89               	btfsc	3977,6,c	;volatile
 13356  00365E  D002               	goto	i2u274_40
 13357  003660  8C89               	bsf	3977,6,c	;volatile
 13358  003662  D001               	goto	i2l3263
 13359  003664                     i2u274_40:
 13360  003664  9C89               	bcf	3977,6,c	;volatile
 13361  003666                     i2l3263:
 13362                           
 13363                           ;Functions.c: 20: }
 13364                           ;Functions.c: 21: if ((Channel>>1) & 0x01)
 13365  003666  3402               	rlcf	Set_4051@Channel+1,w,c
 13366  003668  3002               	rrcf	Set_4051@Channel+1,w,c
 13367  00366A  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 13368  00366C  3001               	rrcf	Set_4051@Channel,w,c
 13369  00366E  6E03               	movwf	??_Set_4051& (0+255),c
 13370  003670  A003               	btfss	??_Set_4051,0,c
 13371  003672  D005               	goto	i2l3265
 13372                           
 13373                           ;Functions.c: 22: {
 13374                           ;Functions.c: 23: do { LATC0 = ~LATC0; } while(0);
 13375  003674  B08B               	btfsc	3979,0,c	;volatile
 13376  003676  D002               	goto	i2u277_40
 13377  003678  808B               	bsf	3979,0,c	;volatile
 13378  00367A  D001               	goto	i2l3265
 13379  00367C                     i2u277_40:
 13380  00367C  908B               	bcf	3979,0,c	;volatile
 13381  00367E                     i2l3265:
 13382                           
 13383                           ;Functions.c: 24: }
 13384                           ;Functions.c: 25: if ((Channel>>2) & 0x01)
 13385  00367E  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 13386  003682  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 13387  003686  3404               	rlcf	??_Set_4051+1,w,c
 13388  003688  3204               	rrcf	??_Set_4051+1,f,c
 13389  00368A  3203               	rrcf	??_Set_4051,f,c
 13390  00368C  3404               	rlcf	??_Set_4051+1,w,c
 13391  00368E  3204               	rrcf	??_Set_4051+1,f,c
 13392  003690  3203               	rrcf	??_Set_4051,f,c
 13393  003692  A003               	btfss	??_Set_4051,0,c
 13394  003694  0012               	return	
 13395                           
 13396                           ;Functions.c: 26: {
 13397                           ;Functions.c: 27: do { LATC1 = ~LATC1; } while(0);
 13398  003696  B28B               	btfsc	3979,1,c	;volatile
 13399  003698  D002               	goto	i2u280_40
 13400  00369A  828B               	bsf	3979,1,c	;volatile
 13401  00369C  0012               	return	
 13402  00369E                     i2u280_40:
 13403  00369E  928B               	bcf	3979,1,c	;volatile
 13404  0036A0  0012               	return	
 13405  0036A2                     __end_of_Set_4051:
 13406                           	opt stack 0
 13407                           tosu	equ	0xFFF
 13408                           tosh	equ	0xFFE
 13409                           tosl	equ	0xFFD
 13410                           pclatu	equ	0xFFB
 13411                           pclath	equ	0xFFA
 13412                           tblptru	equ	0xFF8
 13413                           tblptrh	equ	0xFF7
 13414                           tblptrl	equ	0xFF6
 13415                           tablat	equ	0xFF5
 13416                           prodh	equ	0xFF4
 13417                           prodl	equ	0xFF3
 13418                           intcon	equ	0xFF2
 13419                           intcon2	equ	0xFF1
 13420                           postinc0	equ	0xFEE
 13421                           fsr0h	equ	0xFEA
 13422                           fsr0l	equ	0xFE9
 13423                           wreg	equ	0xFE8
 13424                           postinc1	equ	0xFE6
 13425                           postdec1	equ	0xFE5
 13426                           fsr1h	equ	0xFE2
 13427                           fsr1l	equ	0xFE1
 13428                           indf2	equ	0xFDF
 13429                           postinc2	equ	0xFDE
 13430                           postdec2	equ	0xFDD
 13431                           plusw2	equ	0xFDB
 13432                           fsr2h	equ	0xFDA
 13433                           fsr2l	equ	0xFD9
 13434                           status	equ	0xFD8
 13435                           
 13436 ;; *************** function _ADC_StartConversion *****************
 13437 ;; Defined at:
 13438 ;;		line 36 in file "mcc_generated_files/adc.c"
 13439 ;; Parameters:    Size  Location     Type
 13440 ;;  channel         1    wreg     enum E7855
 13441 ;; Auto vars:     Size  Location     Type
 13442 ;;  channel         1    1[COMRAM] enum E7855
 13443 ;; Return value:  Size  Location     Type
 13444 ;;		None               void
 13445 ;; Registers used:
 13446 ;;		wreg, status,2, status,0
 13447 ;; Tracked objects:
 13448 ;;		On entry : 0/0
 13449 ;;		On exit  : 0/0
 13450 ;;		Unchanged: 0/0
 13451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13452 ;;      Params:         0       0       0       0       0       0       0
 13453 ;;      Locals:         1       0       0       0       0       0       0
 13454 ;;      Temps:          1       0       0       0       0       0       0
 13455 ;;      Totals:         2       0       0       0       0       0       0
 13456 ;;Total ram usage:        2 bytes
 13457 ;; Hardware stack levels used:    1
 13458 ;; This function calls:
 13459 ;;		Nothing
 13460 ;; This function is called by:
 13461 ;;		_ADC_ISR
 13462 ;;		_Battery_Read
 13463 ;;		_Temp_Read
 13464 ;; This function uses a non-reentrant model
 13465 ;;
 13466                           
 13467                           	psect	text70
 13468  0039BC                     __ptext70:
 13469                           	opt stack 0
 13470  0039BC                     _ADC_StartConversion:
 13471                           	opt stack 21
 13472                           
 13473                           ;incstack = 0
 13474                           ;ADC_StartConversion@channel stored from wreg
 13475  0039BC  6E02               	movwf	ADC_StartConversion@channel,c
 13476                           
 13477                           ;adc.c: 39: ADCON0bits.CHS = channel;
 13478  0039BE  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 13479  0039C2  4601               	rlncf	??_ADC_StartConversion,f,c
 13480  0039C4  4601               	rlncf	??_ADC_StartConversion,f,c
 13481  0039C6  50C2               	movf	4034,w,c	;volatile
 13482  0039C8  1801               	xorwf	??_ADC_StartConversion,w,c
 13483  0039CA  0B83               	andlw	-125
 13484  0039CC  1801               	xorwf	??_ADC_StartConversion,w,c
 13485  0039CE  6EC2               	movwf	4034,c	;volatile
 13486                           
 13487                           ;adc.c: 42: ADCON0bits.ADON = 1;
 13488  0039D0  80C2               	bsf	4034,0,c	;volatile
 13489                           
 13490                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 13491  0039D2  82C2               	bsf	4034,1,c	;volatile
 13492  0039D4  0012               	return		;funcret
 13493  0039D6                     __end_of_ADC_StartConversion:
 13494                           	opt stack 0
 13495                           tosu	equ	0xFFF
 13496                           tosh	equ	0xFFE
 13497                           tosl	equ	0xFFD
 13498                           pclatu	equ	0xFFB
 13499                           pclath	equ	0xFFA
 13500                           tblptru	equ	0xFF8
 13501                           tblptrh	equ	0xFF7
 13502                           tblptrl	equ	0xFF6
 13503                           tablat	equ	0xFF5
 13504                           prodh	equ	0xFF4
 13505                           prodl	equ	0xFF3
 13506                           intcon	equ	0xFF2
 13507                           intcon2	equ	0xFF1
 13508                           postinc0	equ	0xFEE
 13509                           fsr0h	equ	0xFEA
 13510                           fsr0l	equ	0xFE9
 13511                           wreg	equ	0xFE8
 13512                           postinc1	equ	0xFE6
 13513                           postdec1	equ	0xFE5
 13514                           fsr1h	equ	0xFE2
 13515                           fsr1l	equ	0xFE1
 13516                           indf2	equ	0xFDF
 13517                           postinc2	equ	0xFDE
 13518                           postdec2	equ	0xFDD
 13519                           plusw2	equ	0xFDB
 13520                           fsr2h	equ	0xFDA
 13521                           fsr2l	equ	0xFD9
 13522                           status	equ	0xFD8
 13523                           
 13524 ;; *************** function _ADC_GetConversionResult *****************
 13525 ;; Defined at:
 13526 ;;		line 55 in file "mcc_generated_files/adc.c"
 13527 ;; Parameters:    Size  Location     Type
 13528 ;;		None
 13529 ;; Auto vars:     Size  Location     Type
 13530 ;;		None
 13531 ;; Return value:  Size  Location     Type
 13532 ;;                  2    0[COMRAM] unsigned int 
 13533 ;; Registers used:
 13534 ;;		wreg, status,2, status,0
 13535 ;; Tracked objects:
 13536 ;;		On entry : 0/0
 13537 ;;		On exit  : 0/0
 13538 ;;		Unchanged: 0/0
 13539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13540 ;;      Params:         2       0       0       0       0       0       0
 13541 ;;      Locals:         0       0       0       0       0       0       0
 13542 ;;      Temps:          2       0       0       0       0       0       0
 13543 ;;      Totals:         4       0       0       0       0       0       0
 13544 ;;Total ram usage:        4 bytes
 13545 ;; Hardware stack levels used:    1
 13546 ;; This function calls:
 13547 ;;		Nothing
 13548 ;; This function is called by:
 13549 ;;		_ADC_ISR
 13550 ;; This function uses a non-reentrant model
 13551 ;;
 13552                           
 13553                           	psect	text71
 13554  003A48                     __ptext71:
 13555                           	opt stack 0
 13556  003A48                     _ADC_GetConversionResult:
 13557                           	opt stack 22
 13558                           
 13559                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 13560                           
 13561                           ;incstack = 0
 13562  003A48  50C4               	movf	4036,w,c	;volatile
 13563  003A4A  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 13564  003A4C  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 13565  003A4E  50C3               	movf	4035,w,c	;volatile
 13566  003A50  2403               	addwf	??_ADC_GetConversionResult,w,c
 13567  003A52  6E01               	movwf	?_ADC_GetConversionResult,c
 13568  003A54  0E00               	movlw	0
 13569  003A56  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 13570  003A58  6E02               	movwf	?_ADC_GetConversionResult+1,c
 13571  003A5A  0012               	return	
 13572  003A5C                     __end_of_ADC_GetConversionResult:
 13573                           	opt stack 0
 13574                           tosu	equ	0xFFF
 13575                           tosh	equ	0xFFE
 13576                           tosl	equ	0xFFD
 13577                           pclatu	equ	0xFFB
 13578                           pclath	equ	0xFFA
 13579                           tblptru	equ	0xFF8
 13580                           tblptrh	equ	0xFF7
 13581                           tblptrl	equ	0xFF6
 13582                           tablat	equ	0xFF5
 13583                           prodh	equ	0xFF4
 13584                           prodl	equ	0xFF3
 13585                           intcon	equ	0xFF2
 13586                           intcon2	equ	0xFF1
 13587                           postinc0	equ	0xFEE
 13588                           fsr0h	equ	0xFEA
 13589                           fsr0l	equ	0xFE9
 13590                           wreg	equ	0xFE8
 13591                           postinc1	equ	0xFE6
 13592                           postdec1	equ	0xFE5
 13593                           fsr1h	equ	0xFE2
 13594                           fsr1l	equ	0xFE1
 13595                           indf2	equ	0xFDF
 13596                           postinc2	equ	0xFDE
 13597                           postdec2	equ	0xFDD
 13598                           plusw2	equ	0xFDB
 13599                           fsr2h	equ	0xFDA
 13600                           fsr2l	equ	0xFD9
 13601                           status	equ	0xFD8
 13602                           tosu	equ	0xFFF
 13603                           tosh	equ	0xFFE
 13604                           tosl	equ	0xFFD
 13605                           pclatu	equ	0xFFB
 13606                           pclath	equ	0xFFA
 13607                           tblptru	equ	0xFF8
 13608                           tblptrh	equ	0xFF7
 13609                           tblptrl	equ	0xFF6
 13610                           tablat	equ	0xFF5
 13611                           prodh	equ	0xFF4
 13612                           prodl	equ	0xFF3
 13613                           intcon	equ	0xFF2
 13614                           intcon2	equ	0xFF1
 13615                           postinc0	equ	0xFEE
 13616                           fsr0h	equ	0xFEA
 13617                           fsr0l	equ	0xFE9
 13618                           wreg	equ	0xFE8
 13619                           postinc1	equ	0xFE6
 13620                           postdec1	equ	0xFE5
 13621                           fsr1h	equ	0xFE2
 13622                           fsr1l	equ	0xFE1
 13623                           indf2	equ	0xFDF
 13624                           postinc2	equ	0xFDE
 13625                           postdec2	equ	0xFDD
 13626                           plusw2	equ	0xFDB
 13627                           fsr2h	equ	0xFDA
 13628                           fsr2l	equ	0xFD9
 13629                           status	equ	0xFD8
 13630                           
 13631                           	psect	text72
 13632  000000                     __ptext72:
 13633                           	opt stack 0
 13634                           tosu	equ	0xFFF
 13635                           tosh	equ	0xFFE
 13636                           tosl	equ	0xFFD
 13637                           pclatu	equ	0xFFB
 13638                           pclath	equ	0xFFA
 13639                           tblptru	equ	0xFF8
 13640                           tblptrh	equ	0xFF7
 13641                           tblptrl	equ	0xFF6
 13642                           tablat	equ	0xFF5
 13643                           prodh	equ	0xFF4
 13644                           prodl	equ	0xFF3
 13645                           intcon	equ	0xFF2
 13646                           intcon2	equ	0xFF1
 13647                           postinc0	equ	0xFEE
 13648                           fsr0h	equ	0xFEA
 13649                           fsr0l	equ	0xFE9
 13650                           wreg	equ	0xFE8
 13651                           postinc1	equ	0xFE6
 13652                           postdec1	equ	0xFE5
 13653                           fsr1h	equ	0xFE2
 13654                           fsr1l	equ	0xFE1
 13655                           indf2	equ	0xFDF
 13656                           postinc2	equ	0xFDE
 13657                           postdec2	equ	0xFDD
 13658                           plusw2	equ	0xFDB
 13659                           fsr2h	equ	0xFDA
 13660                           fsr2l	equ	0xFD9
 13661                           status	equ	0xFD8
 13662                           
 13663                           	psect	rparam
 13664  0000                     tosu	equ	0xFFF
 13665                           tosh	equ	0xFFE
 13666                           tosl	equ	0xFFD
 13667                           pclatu	equ	0xFFB
 13668                           pclath	equ	0xFFA
 13669                           tblptru	equ	0xFF8
 13670                           tblptrh	equ	0xFF7
 13671                           tblptrl	equ	0xFF6
 13672                           tablat	equ	0xFF5
 13673                           prodh	equ	0xFF4
 13674                           prodl	equ	0xFF3
 13675                           intcon	equ	0xFF2
 13676                           intcon2	equ	0xFF1
 13677                           postinc0	equ	0xFEE
 13678                           fsr0h	equ	0xFEA
 13679                           fsr0l	equ	0xFE9
 13680                           wreg	equ	0xFE8
 13681                           postinc1	equ	0xFE6
 13682                           postdec1	equ	0xFE5
 13683                           fsr1h	equ	0xFE2
 13684                           fsr1l	equ	0xFE1
 13685                           indf2	equ	0xFDF
 13686                           postinc2	equ	0xFDE
 13687                           postdec2	equ	0xFDD
 13688                           plusw2	equ	0xFDB
 13689                           fsr2h	equ	0xFDA
 13690                           fsr2l	equ	0xFD9
 13691                           status	equ	0xFD8
 13692                           
 13693                           	psect	temp
 13694  000045                     btemp:
 13695                           	opt stack 0
 13696  000045                     	ds	1
 13697  0000                     int$flags	set	btemp
 13698                           tosu	equ	0xFFF
 13699                           tosh	equ	0xFFE
 13700                           tosl	equ	0xFFD
 13701                           pclatu	equ	0xFFB
 13702                           pclath	equ	0xFFA
 13703                           tblptru	equ	0xFF8
 13704                           tblptrh	equ	0xFF7
 13705                           tblptrl	equ	0xFF6
 13706                           tablat	equ	0xFF5
 13707                           prodh	equ	0xFF4
 13708                           prodl	equ	0xFF3
 13709                           intcon	equ	0xFF2
 13710                           intcon2	equ	0xFF1
 13711                           postinc0	equ	0xFEE
 13712                           fsr0h	equ	0xFEA
 13713                           fsr0l	equ	0xFE9
 13714                           wreg	equ	0xFE8
 13715                           postinc1	equ	0xFE6
 13716                           postdec1	equ	0xFE5
 13717                           fsr1h	equ	0xFE2
 13718                           fsr1l	equ	0xFE1
 13719                           indf2	equ	0xFDF
 13720                           postinc2	equ	0xFDE
 13721                           postdec2	equ	0xFDD
 13722                           plusw2	equ	0xFDB
 13723                           fsr2h	equ	0xFDA
 13724                           fsr2l	equ	0xFD9
 13725                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        43
    BSS         1051
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      68
    BANK0           160     51     160
    BANK1           256     24     166
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256      0     206

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK1[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK4[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1131(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK3[200]), ring_buffer(BANK2[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK2[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK1[40]), 


Critical Paths under _main in COMRAM

    _updateComms->_ToSend
    _updateComms->_sendData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Tempeture_Get->___wmul
    _Temp_Fault->___ftge
    ___awtoft->___awdiv
    ___awtoft->___ftpack
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___altoft
    ___ftdiv->___altoft
    ___altoft->___ftpack
    ___ftmul->___altoft

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _Temp_Read->_Set_4051
    _Battery_Read->_ADC_StartConversion
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _updateComms->_ToSend
    _receiveData->_CRCcheck
    ___fttol->___ftmul
    _ToSend->___fttol
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _SYSTEM_Initialize->_begin
    _Battery_Convert->_Battery_Filter
    ___ftdiv->___altoft
    _Battery_Filter->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Temp_Convert
    _Temp_Convert->_log
    _log->_eval_poly

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  153674
                                             19 BANK1      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   33849
                        _Battery_Get
                              _Delay
                      _Tempeture_Get
                             _ToSend
                            ___ftmul
                            ___fttol
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (2) _sendData                                             5     5      0    5297
                                             38 COMRAM     5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (3) _crcBufS_put                                          7     2      5     564
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_flush                            4     0      4     910
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              7 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (3) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (4) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1148
                                             32 BANK0     15    11      4
                        _Battery_Get (ARG)
                      _Tempeture_Get (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ToSend                                               3     1      2    2752
                                             42 COMRAM     1     1      0
                                             47 BANK0      2     0      2
                        _Battery_Get (ARG)
            _FastTransfer_buffer_put
                      _Tempeture_Get (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Tempeture_Get                                        3     0      3    3497
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Delay                                                9     5      4     238
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    4238
                                              0 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                         9     9      0   72252
                                             10 BANK1      9     9      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   29836
                                              5 BANK1      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   14904
                                             44 BANK0      7     0      7
                                              0 BANK1      5     5      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2811
                                             34 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5459
                                             44 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   14710
                                             44 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2747
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1925
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1061
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    5898
                                              0 BANK0      7     7      0
                        _Battery_Get
                          _SetBypass
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypass                                            6     2      4     649
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    4036
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    4269
                                              0 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     968
                                             32 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   30421
                                             46 BANK0      4     4      0
                     _Battery_Filter
                           ___altoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3520
                                              2 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2805
                                             34 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   14642
                                             44 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3158
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    6166
                                             17 BANK0     15     9      6
                        _Battery_Get (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5095
                                             32 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    2230
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0     366
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (9) _Temp_Read                                            0     0      0     344
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (9) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              8     8      0     655
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (10) _Set_4051                                            4     2      2     322
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _ADC_StartConversion                                 2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___altoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___wmul
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _RunBypas
     _Battery_Get
       ___wmul
     _SetBypass
     ___ftge
       ___wmul (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _begin
       ___awdiv
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___wmul
     _log
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Battery_Get (ARG)
               ___wmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _updateComms
     _Battery_Get
       ___wmul
     _Delay
     _Tempeture_Get
       ___wmul
     _ToSend
       _Battery_Get (ARG)
         ___wmul
       _FastTransfer_buffer_put (ARG)
         _FastTransfer_buffer_modulo_inc
       _Tempeture_Get (ARG)
         ___wmul
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         _Battery_Get (ARG)
           ___wmul
         _Tempeture_Get (ARG)
           ___wmul
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___fttol
       _Battery_Get (ARG)
         ___wmul
       _Tempeture_Get (ARG)
         ___wmul
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion
       _Set_4051

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      CE      15       80.5%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100     18      A6       6       64.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     33      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4BC       9        0.0%
DATA                 0      0     4BC      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Oct 08 17:14:05 2015

      __end_of_FastTransfer_buffer_flush 347E                   i2_UART_buff_modulo_inc 388C  
                           ___altoft@exp 00C1                             _rx_array_inx 0042  
                          ___altoft@sign 00C2                             ___awdiv@sign 0020  
                    ___wmul@multiplicand 001D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                             ___ftadd@exp1 00EC  
                           ___ftadd@exp2 00EB                             ___ftadd@sign 00EA  
                                    l341 33AE                                      l351 1B08  
                                    l520 285E                                      l513 284E  
                                    l506 283E                                      l471 27EE  
                                    l288 207E                                      l296 2E8E  
                                    l464 27DE                                      l456 27CE  
                                    l529 2C2A                                      l713 1DCE  
                                    l492 281E                                      l485 280E  
                                    l478 27FE                                      l499 282E  
                                    l599 35AC                                      l778 3080  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0038                                      _log 2080  
                        __end_of_ADC_ISR 1126     FastTransfer_buffer_flush@clearBuffer 0025  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8            i2UART_buff_modulo_inc@modulus 0003  
                           __CFG_LVP$OFF 000000                          ?_Battery_Filter 0001  
                           ___ftdiv@cntr 00CC                             ___ftdiv@sign 00D1  
                                   l1104 22E2                                     l1046 2FD2  
                                   l1073 15CC                                     l1075 15F4  
                                   l1084 16CA                                     l1093 16F4  
                                   l1069 1592                                     l3063 3826  
                                   l3059 3816                                     l5101 0CC2  
                                   l5021 08D4                                     l5013 0838  
                                   l5005 07DE                                     l5031 098C  
                                   l5009 0810                                     l4411 2F54  
                                   l5123 32E2                                     l5051 0A7A  
                                   l5027 0972                                     l5125 32F0  
                                   l5221 2A94                                     l5053 0A94  
                                   l5045 0A2C                                     l5061 0B32  
                                   l5029 0978                                     l5109 0CCE  
                                   l4423 2FA0                                     l4415 2F62  
                                   l5143 2240                                     l5231 2DEA  
                                   l4511 2D94                                     l4503 2D0E  
                                   l5055 0AAE                                     l5047 0A46  
                                   l5071 0B3E                                     l4425 2FBE  
                                   l4417 2F6C                                     l4601 171E  
                                   l5137 2206                                     l5217 2A7E  
                                   l5241 2E86                                     l5305 2BEE  
                                   l4521 2618                                     l5057 0AC8  
                                   l5049 0A60                                     l4427 2FC8  
                                   l4419 2F8A                                     l4611 176C  
                                   l5163 22A0                                     l5227 2B4C  
                                   l5235 2E00                                     l5251 3360  
                                   l3571 35F0                                     l4451 3596  
                                   l4515 25AC                                     l5091 0C0A  
                                   l5059 0B16                                     l4621 1E0A  
                                   l5309 2C22                                     l5181 3550  
                                   l4445 3580                                     l4461 35B8  
                                   l5093 0C24                                     l5085 0BBC  
                                   l5239 2E80                                     l5255 33A6  
                                   l5247 334A                                     l3567 35D6  
                                   l4471 3882                                     l4703 1B32  
                                   l5095 0C3E                                     l5087 0BD6  
                                   l4553 15A0                                     l4641 1E92  
                                   l5193 3206                                     l5265 17B6  
                                   l3921 2424                                     l3913 23F8  
                                   l5097 0C58                                     l5089 0BF0  
                                   l4651 1ED0                                     l4627 1E44  
                                   l4811 2A5A                                     l3923 242E  
                                   l4459 35B2                                     l4387 3858  
                                   l4483 28C6                                     l5099 0CA6  
                                   l5363 36E6                                     l4581 165A  
                                   l4565 15EA                                     l4645 1EB0  
                                   l5189 31D6                                     l4901 2802  
                                   l5293 2B82                                     l3909 23E4  
                                   l4583 1668                                     l4575 162C  
                                   l4559 15DA                                     l4655 1EEE  
                                   l4831 1F52                                     l5199 3232  
                                   l4911 2852                                     l4903 2812  
                                   l4751 3270                                     l3927 244A  
                                   l3919 2414                                     l4399 307C  
                                   l4495 294A                                     l4479 28BC  
                                   l4593 16B0                                     l4585 1676  
                                   l4905 2822                                     l5297 2B98  
                                   l4753 3278                                     l4745 325A  
                                   l4809 29D8                                     l5289 199A  
                                   l4665 1C72                                     l5377 3712  
                                   l5369 36FA                     receiveData@crcHolder 00D4  
                                   l4595 16BE                                     l4587 1682  
                                   l4907 2832                                     l4915 2862  
                                   l4771 32B0                                     l4763 3298  
                                   l4755 327C                                     l4739 324A  
                                   l4843 19AA                                     l3891 2352  
                                   l4675 1D34                                     l4667 1C9A  
                                   l4931 24D8                                     l4909 2842  
                                   l4853 1A94                                     l4693 1DBE  
                                   l4933 24F4                                     l4925 248A  
                                   ?_log 0193                                     l4767 32A2  
                                   l4855 1A9E                                     l4847 19C0  
                                   l4783 372C                                     l4871 20A4  
                                   l4679 1D4A                                     l4943 255E  
                                   l4935 24FE                                     l4927 24A4  
                                   l4689 1D9E                                     l4697 1DC6  
                                   l4953 064E                                     l4961 0680  
                                   l4937 2528                                     l4929 24BE  
                                   l4859 1AB4                                     l4795 313E  
                                   l4939 252C                                     l4893 27C2  
                                   l4877 20D2                                     l4973 0724  
                                   l4957 067C                                     l4895 27D2  
                                   l4991 0788                                     l4975 073C  
                                   l4897 27E2                                     l4993 07AE  
                                   l4977 0742                                     l4985 077C  
                                   l4899 27F2                                     _CRC8 357A  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u2820 2CEE  
                                   u5071 1B30                                     u5170 3166  
                                   u6140 17B4                                     u5190 1F50  
                                   u4480 3010                                     u5408 24C2  
                                   u5178 3168                                     u5418 24DC  
                                   u5508 0684                                     u5428 2502  
                                   u4901 1E20                                     u5701 0878  
                                   u5509 0698                                     u4671 1540  
                                   u5528 06A2                                     u5448 2548  
                                   u4681 155E                                     u5529 06B6  
                                   u5378 2474                                     u3971 232E  
                                   u5628 078C                                     u5548 06C0  
                                   u5468 0628                                     u5388 248E  
                                   u6277 35DC                                     u5629 07A0  
                                   u5549 06D4                                     u5469 063C  
                                   u3990 2378                                     u5558 06DA  
                                   u5398 24A8                                     u5559 06EE  
                                   u5808 0A98                                     u5648 07B2  
                                   u5568 06F4                                     u5488 0658  
                                   u4881 1DE6                                     u5649 07C8  
                                   u5569 0708                                     u5489 066C  
                                   u5818 0AB2                                     u3995 236E  
                                   u4948 1C76                                     u5908 0C28  
                                   u5828 0ACC                                     u5668 07E2  
                                   u5588 0728                                     u4949 1C8A  
                                   u5669 07F6                                     u5918 0C42  
                                   u5838 0B1A                                     u5758 0A16  
                                   u5678 0814                                     u5679 0828  
                                   u4968 1C9E                                     u5928 0C5C  
                                   u5768 0A30                                     u5961 21E2  
                                   u4969 1CB2                                     u4978 1CBA  
                                   u5938 0CAA                                     u5858 0BA6  
                                   u5778 0A4A                                     u4979 1CCE  
                                   u4988 1CD6                                     u5868 0BC0  
                                   u5788 0A64                                     u5981 221C  
                                   u4989 1CEA                                     u4998 1CF2  
                                   u5878 0BDA                                     u5798 0A7E  
                                   u4999 1D06                                     u5888 0BF4  
                                   u5898 0C0E                                     _TMR1 000FCE  
                                   _WPUB 000F61                  Tempeture_Get@channelnum 0021  
                                   _main 36DE                             ___ftpack@arg 001B  
                           ___ftpack@exp 001E                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   log@x 0193                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 1C72                                     start 00AC  
                          __CFG_IESO$OFF 000000                             ___ftmul@cntr 00DF  
                           ___param_bank 000010                             ___ftmul@sign 00E0  
         i2UART_buff_modulo_inc@my_value 0005                        ADC_ISR@ADC_Result 000B  
                           ___fttol@exp1 00EF                                    ??_log 002B  
                           ___fttol@lval 00EB                                    ?_CRC8 001B  
                       __end_of_CRCcheck 1DD0                         ?_Battery_Convert 0001  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 3A86  
                     crcBufS_put@address 001D                                    ?_main 01A1  
                        __end_of___awdiv 32BA                          __end_of___ftadd 1792  
                        __end_of___ftdiv 2318                          _TMR1_StartTimer 3A9E  
                        __end_of___ftmul 1F2E                          ___awdiv@divisor 001D  
                                  _T1CON 000FCD                          __end_of___ftsub 357A  
                        __end_of___fttol 245C                                    _LATA0 007C48  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATC0 007C58                                    _LATA4 007C4C  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATA6 007C4E                                    _LATD1 007C61  
                                  _LATD2 007C62                                    _LATC4 007C5C  
                                  _LATD3 007C63                                    _LATC5 007C5D  
                                  _LATD5 007C65                           __CFG_DEBUG$OFF 000000  
                                  i2l211 0066                                    i2l215 0070  
                                  i2l207 004E                                    i2l209 005A  
                                  i2l809 398A                                    i2l778 3112  
                        ___awdiv@counter 001F                                    _TMR1H 000FCF  
                                  _TMR1L 000FCE                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
       __size_of_ADC_GetConversionResult 0014                                    _Delay 35C4  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 3750                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR1_ISR 3658                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _begin 347E                           __CFG_EBTRB$OFF 000000  
                          ___awtoft@sign 0026                                    _frexp 3116  
                                  _errno 0094                                    _group 0030  
                     __CFG_MCLRE$EXTMCLR 000000                            ___ftpack@sign 001F  
                         SetBypass@state 001D                  __end_of_TMR1_Initialize 3946  
                                  pclath 000FFA                              _Battery_Adc 0060  
                                  tablat 000FF5                              _Battery_Get 37DE  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00E2  
                                  plusw2 000FDB                           begin@stuffpeek 00CC  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                        RunBypas@cellbyp 00C1                          RunBypas@batvolt 00C3  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 35C4  
                        CRCcheck@SentCRC 00C1                          __initialization 2E90  
                            log@exponent 0196               __end_of_EUSART1_Initialize 36DE  
                           __end_of_main 3718                               ToSend@what 00F0  
                                 ??_CRC8 001E                         __end_of_Set_4051 36A2  
                              ??_ADC_ISR 0005              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 002C                            ___fttol@sign1 00EA  
                          __activetblptr 000002                         __end_of_Send_put 37B0  
             ADC_StartConversion@channel 0002                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                         __end_of_RunBypas 2C2C  
                          ?_Receive_peek 0001                                   ?_begin 00C1  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_frexp 001B  
                       __end_of___altoft 333A                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                         ___awdiv@dividend 001B  
                       __end_of___awtoft 3750                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                       __end_of___ftpack 2FF2                                   _T1GCON 000FCC  
                        i2_UART_buff_get 3084                                   _RC1STA 000FAB  
                  __size_of_Battery_Read 0018                          i2_UART_buff_put 26A6  
                                 i2l4003 0D7A                                   i2l4011 0DA4  
                                 i2l4013 0DCE                                   i2l4031 0EC4  
                                 i2l4023 0E30                                   i2l4015 0DD2  
                                 i2l4051 1036                                   i2l4043 0FA2  
                                 i2l4035 0F0E                                   i2l4027 0E7A  
                                 i2l4019 0DE6                           __CFG_WDTEN$OFF 000000  
                                 i2l3263 3666                                   i2l4055 1080  
                                 i2l4047 0FEC                                   i2l4039 0F58  
                                 i2l4063 10D2                                   i2l3265 367E  
                                 i2l4065 1120                                   i2l3433 38AC  
                                 i2l4085 377A              UART_buff_modulo_inc@modulus 001D  
                                 i2l3933 26C6                                   i2l3953 310E  
                                 i2l3939 2732                                   i2l3971 363E  
                                 i2l3991 0D1E                                   i2l3985 0CF0  
                                 i2l3969 3636                                   i2l3997 0D4C  
                                 _RCREG1 000FAE                            ??_Temp_Filter 002B  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _TX1STA 000FAC                                   _TXREG1 000FAD  
                             _Temp_Fault 333A                           __CFG_XINST$OFF 000000  
                                 _ToSend 39A0                      __end_of_Receive_get 3A78  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0027  
                  __end_of_Tempeture_Get 37DE                                   ___ftge 31A6  
                          _output_buffer 0500                         crcBufS_get@space 001E  
                __end_of_TMR1_StartTimer 3AA2                       __size_of_SetBypass 00F2  
                                 ___wmul 38B6                                ??___awdiv 001F  
                              CRC8@tempI 0020                                ??___ftadd 00E7  
                         __CFG_STVREN$ON 000000                                ??___ftdiv 00C9  
                              ??___ftmul 00D8                                ??___ftsub 002B  
                              ??___fttol 00E5                                   _memset 380C  
                                 clear_0 2E96                                   clear_1 2EA2  
                                 clear_2 2EAE                                   clear_3 2EBA  
                                 clear_4 2EC6                                   clear_5 2ED2  
                                 clear_6 2EDE                         ___awdiv@quotient 0021  
                     __size_of_Temp_Read 0024                                   _rx_len 0043  
                       __end_of_sendData 258C                    ___ftmul@f3_as_product 00DC  
                           __pdataCOMRAM 0044                             _Battery_Read 39EE  
                          Send_put@_data 0026                             _Battery_Volt 0170  
                           __mediumconst 0000                           ??_Receive_peek 001F  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0168  
           __end_of_UART_buff_modulo_inc 3862            __size_of_INTERRUPT_Initialize 000C  
                       ?_TMR1_Initialize 0001                        _SYSTEM_Initialize 33B0  
                       __end_oflog@coeff 061C                               __accesstop 0060  
                __end_of__initialization 2F36                               ___altoft@c 0023  
                              ?_CRCcheck 0001                               ___ftadd@f1 00E1  
                             ___ftadd@f2 00E4                               ___ftge@ff1 0021  
                             ___ftge@ff2 0024                       ?_SYSTEM_Initialize 0001  
                           eval_poly@res 0190                            ___rparam_used 000001  
                             ___ftdiv@f1 00C3                               ___ftdiv@f2 00C6  
                             ___ftdiv@f3 00CD                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                               ___awtoft@c 0023  
                          __end_of_Delay 360E                               ___ftmul@f1 00D2  
                             ___ftmul@f2 00D5                               ___ftsub@f1 00ED  
                             ___ftsub@f2 00F0                      __end_of_Temp_Filter 1B0A  
                             ___fttol@f1 00E1             __size_of_ADC_StartConversion 001A  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 2D04  
                           __pidataBANK0 3A86                             __pidataBANK1 3946  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 34DC                                ?_TMR1_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 388C  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 3862                            __end_of_frexp 31A6  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 002B  
                     UART_buff_get@_this 0021                      ?_crcBufS_status_put 001B  
                  Battery_Get@channelnum 0021                    __end_of_UART_buff_get 3084  
                 ??_EUSART1_Transmit_ISR 000C                  _ADC_GetConversionResult 3A48  
                  __end_of_UART_buff_put 26A6                         ??_Battery_Filter 002B  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 3116  
                __end_ofi2_UART_buff_put 27C0              __end_of_EUSART1_Receive_ISR 39A0  
              _FastTransfer_buffer_flush 341C                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                            ?_Temp_Convert 0001  
                                ??_frexp 0020                __end_of_SYSTEM_Initialize 341C  
                 receiveData@holder_1131 00D1                        __end_of_SetBypass 28B2  
                    _addressErrorCounter 008C                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                             __pbssBANK5 0500                       __size_of_eval_poly 00E0  
                        __CFG_PLLCFG$OFF 000000                        __end_of_Temp_Read 3924  
                            _Receive_get 3A6A                                ?_Set_4051 0001  
                             ??_CRCcheck 0027                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 38B6                        begin@givenAddress 00C4  
                  Temp_Convert@steinhart 019E                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0024                              ?_Temp_Fault 0001  
                __size_of_UART_buff_size 0016                                ?_Send_put 0001  
                   __size_of_receiveData 06B4                                  ?_ToSend 00F0  
                     __CFG_CCP2MX$PORTC1 000000                              Temp_Fault@i 00C2  
                                ?___ftge 0021                                ?_RunBypas 0001  
                                ?___wmul 001B                         ?_TMR1_StartTimer 0001  
                             ??_TMR1_ISR 0005                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                ?___altoft 0023  
                                _ADC_ISR 0CD2                                  ?_memset 001B  
                             _crc_buffer 009C                                ?___awtoft 0023  
                              ?___ftpack 001B                  __size_of_ADC_Initialize 0018  
                          Temp_Convert@x 019C                   __size_of_Battery_Fault 00B6  
                        Temp_Fault@fault 00C1                       UART_buff_put@_this 0021  
                       i2_UART_buff_size 3A32              i2UART_buff_modulo_inc@value 0001  
                         Battery_Fault@i 00C2                                  _OSCCON2 000FD2  
                         ??_Temp_Convert 002B                        _Receive_available 3A06  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 0028                      _receiveArrayAddress 0096  
                     ?_Receive_available 001D                               begin@error 00C5  
                           ?_Battery_Get 0021                               ??_Set_4051 0003  
                            _Temp_Filter 19A0                              _Temp_Aquire 003B  
                    ??_Receive_available 001F                                ?_sendData 0001  
                      _alignErrorCounter 008E                          __CFG_PWRTEN$OFF 000000  
                             ??_Send_put 0026                                  __Hparam 0000  
                                __Lparam 0000                          __size_of_ToSend 001C  
                   __end_of_Receive_peek 3A6A                                _AKNAKsend 003A  
                             ??_RunBypas 002A                          __size_of___ftge 0090  
                                ___awdiv 3236                                  ___ftadd 152A  
                   _UART_buff_modulo_inc 3838                                  ___ftdiv 21CC  
                        __size_of___wmul 0026                                  ___ftmul 1DD0  
                                ___ftsub 352E                                  ___fttol 2318  
                                _calc_CS 003D                             __psmallconst 0600  
                             ??___altoft 0027                ??_ADC_GetConversionResult 0003  
                                __pcinit 2E90                               ??___awtoft 0026  
                             ??___ftpack 0020                        __end_of_eval_poly 2A74  
                        __size_of_memset 002C                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 36DE  
                                __ptext1 1126                                  __ptext2 245C  
                                __ptext3 2C2C                                  __ptext4 341C  
                                __ptext5 061E                                  __ptext6 3782  
                                __ptext7 258C                                  __ptext8 3A5C  
                                __ptext9 38DC                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 3A78  
              __end_of_Receive_available 3A1C                             __size_of_log 014C  
                _FastTransfer_buffer_put 1B0A                      __size_of_Temp_Fault 0076  
                  CRCcheck@calculatedCRC 00C2                       _EUSART1_Initialize 36A2  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 001B  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
               __size_of_Battery_Convert 00DE                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 006C  
                   end_of_initialization 2F36                                Delay@wait 0020  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                            _Battery_Fault 2DDA  
                             ??_sendData 0027                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 0404                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc1 000FE6                                  postinc2 000FDE  
                       Battery_Convert@x 00F1                         begin@stufftosend 00C6  
                    CRCcheck@arrayHolder 00C3                     ??_EUSART1_Initialize 0025  
                 _dataAdressErrorCounter 0092                               _rx_address 0041  
                              _TRISCbits 000F94                      _ADC_StartConversion 39BC  
                            _Volt_Aquire 003C                             begin@maxSize 00C3  
                         ?_Battery_Fault 0001       __size_of_FastTransfer_buffer_flush 0062  
                            ___ftdiv@exp 00D0                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 3964                           _UART_buff_peek 38DC  
                         _UART_buff_size 3A1C                      __end_of_crcBufS_get 2994  
                    __end_of_crcBufS_put 2D04                             SetBypass@pin 001B  
                      __size_of_CRCcheck 015E                             Delay@d_lenth 001B  
                            ___ftmul@exp 00DB                     ?_ADC_StartConversion 0001  
                          _moduleAddress 003F                     __end_of_Temp_Convert 19A0  
                             CRCcheck@rt 00C6                           __end_of_ToSend 39BC  
           __end_of_INTERRUPT_Initialize 3A9E                           __end_of___ftge 3236  
                        _crcErrorCounter 0090                           __end_of___wmul 38DC  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 3AA2  
                      __size_of_TMR1_ISR 004A                           _ADC_Initialize 39D6  
              ??_FastTransfer_buffer_put 0026                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 3838                        crcBufS_put@status 001F  
                           receiveData@r 00D8               __size_of_Receive_available 0016  
                           receiveData@u 00D6                      start_initialization 2E90  
                             eval_poly@d 00F0                               eval_poly@n 00F2  
                             eval_poly@x 00ED          __size_of_PIN_MANAGER_Initialize 0052  
                  crcBufS_get@wantedTime 0025                              __end_of_log 21CC  
                 __size_of_Tempeture_Get 002E                   __end_of_UART_buff_init 3982  
                 __end_of_UART_buff_peek 3900                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 3A32                               frexp@value 001B  
                           ?_Receive_get 0001                        ??_Battery_Convert 00EF  
                         UART_buff_put@c 0023                                _SetBypass 27C0  
                  __size_of_Receive_peek 000E                     __size_of_Battery_Get 002E  
                           ??_Temp_Fault 002A                 __end_ofi2_UART_buff_size 3A48  
                      __size_of_Set_4051 004A                                _Temp_DegF 00F4  
                       _PrevBattery_Volt 0100                                _Temp_Done 0088  
                              _Temp_Read 3900                    ??_ADC_StartConversion 0001  
                               ??_ToSend 002B                   ??_UART_buff_modulo_inc 001F  
               __size_of_TMR1_Initialize 0022                                 CRC8@data 001B  
                        crcBufS_get@time 001D                                 ??___ftge 0027  
                      __size_of_Send_put 002E                                 ??___wmul 001F  
                 __end_of_ADC_Initialize 39EE                              __pdataBANK0 00F4  
                            __pdataBANK1 0170                                RunBypas@i 00C6  
                               ?_ADC_ISR 0001                                 ??_memset 0021  
                      __size_of_RunBypas 00DA                        __size_of___altoft 0080  
                      __size_of___awtoft 0038                        __size_of___ftpack 00AE  
                              _Volt_Done 008A                              __pbssCOMRAM 002C  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 00C1  
                          __pcstackBANK1 018E                       __end_of_Temp_Fault 33B0  
                           _Receive_peek 3A5C                      UART_buff_init@_this 0023  
                          _PrevTemp_DegF 011E                              _crcBufS_get 28B2  
                    UART_buff_peek@_this 001B                              _crcBufS_put 2C2C  
                        ??_Battery_Fault 002A                          ?_UART_buff_init 0023  
                        ?_UART_buff_peek 001B                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 001E                             ?_Temp_Filter 0001  
                          ??_receiveData 00C8                               ?_SetBypass 001B  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 0029  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                             ?_Temp_Read 0001                   _PIN_MANAGER_Initialize 34DC  
                      __size_of_sendData 0130                                __pintcode 0008  
                      _Temp_Convert$2240 0198                        _Temp_Convert$2241 019A  
                          _Tempeture_Get 37B0                                 ?___awdiv 001B  
                               ?___ftadd 00E1                                 ?___ftdiv 00C3  
                               ?___ftmul 00D2                                 ?___ftsub 00ED  
                               ?___fttol 00E1                             Temp_Filter@x 00ED  
                        ?_ADC_Initialize 0001             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                                 _BAUD1CON 000FB8  
                            __smallconst 0600                 __size_of_TMR1_StartTimer 0004  
                              _eval_poly 2994                           __size_of_Delay 004A  
                         __size_of_begin 005E                           __size_of_frexp 0090  
                   _INTERRUPT_Initialize 3A92                             _receiveArray 012A  
                __size_of_Battery_Filter 0152                                 _CRCcheck 1C72  
                         ___wmul@product 001F                                 _LATAbits 000F89  
                               _LATEbits 000F8D                    __size_of_Temp_Convert 020E  
                    UART_buff_size@_this 001B                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D      __size_of_INTERRUPT_InterruptManager 00A4  
                               i2u406_40 30A2                                 i2u415_40 376A  
                               i2u407_40 362C                                 i2u280_40 369E  
                               i2u408_40 3634                                 _PIR1bits 000F9E  
                               i2u274_40 3664                                 i2u277_40 367C  
                        Battery_Filter@x 00ED                      begin@stuffavailable 00CA  
                         ?_Tempeture_Get 0021                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0CD2  
                               _TMR1_ISR 360E           FastTransfer_buffer_flush@_this 0023  
                           _input_buffer 0400                                _rx_buffer 0300  
                      ??_TMR1_Initialize 001B                         __size_of_ADC_ISR 0454  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 001B  
                   i2UART_buff_put@_this 0007                            _UART_buff_get 2FF2  
                          ?_Battery_Read 0001                            _UART_buff_put 258C  
                             ?_eval_poly 00ED                 ??i2_UART_buff_modulo_inc 0005  
                           _Temp_Convert 1792                              _INTCON2bits 000FF1  
                              copy_data0 2EF8                                copy_data1 2F18  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 0098  
               __size_ofi2_UART_buff_get 0092                                 _Set_4051 3658  
               __size_ofi2_UART_buff_put 011A                              ??_SetBypass 001F  
                              frexp@eptr 001E                            ??_updateComms 002C  
                   __size_of_Receive_get 000E                                 __Hrparam 0000  
                            ??_Temp_Read 0005                                 _Send_put 3782  
                               _Temp_Adc 00B9                                 __Lrparam 0000  
               ?_ADC_GetConversionResult 0001                       __CFG_BOREN$SBORDIS 000000  
                               _RunBypas 2B52                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                         __size_of___awdiv 0084  
                       __size_of___ftadd 0268                         __size_of___ftdiv 014C  
                               ___altoft 32BA                         __size_of___ftmul 015E  
                       __size_of___ftsub 004C                         __size_of___fttol 0144  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 00C8  
                               ___awtoft 3718                                 ___ftpack 2F44  
                         ?_UART_buff_get 0021                           ??_Battery_Read 0003  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 002A                          _Battery_Convert 2A74  
                     Battery_Fault@fault 00C1                 crcBufS_status_put@status 001E  
                               __ptext10 1C72                                 __ptext11 2D04  
                               __ptext20 39A0                                 __ptext12 28B2  
                               __ptext21 1B0A                                 __ptext13 3A6A  
                             _T1GCONbits 000FCC                                 __ptext30 3718  
                               __ptext22 3862                                 __ptext14 2FF2  
                               __ptext31 352E                                 __ptext23 37B0  
                               __ptext15 3838                                 __ptext40 3A92  
                               __ptext32 19A0                                 __ptext24 35C4  
                               __ptext16 3A06                                 __ptext41 36A2  
                               __ptext33 33B0                                 __ptext25 333A  
                               __ptext17 3A1C                                 __ptext50 2A74  
                               __ptext42 3964                                 __ptext34 347E  
                               __ptext26 1792                                 __ptext18 357A  
                               __ptext51 21CC                                 __ptext43 380C  
                               __ptext35 3236                                 __ptext27 2080  
                               __ptext19 2318                                 __ptext60 3900  
                               __ptext52 32BA                                 __ptext44 39D6  
                               __ptext36 3924                                 __ptext28 3116  
                               __ptext61 39EE                                 __ptext53 1F2E  
                               __ptext45 2B52                                 __ptext37 3A9E  
                               __ptext29 2994                                 __ptext70 39BC  
                               __ptext62 3750                                 __ptext54 38B6  
                               __ptext46 27C0                                 __ptext38 34DC  
                               __ptext71 3A48                                 __ptext63 3A32  
                               __ptext55 1DD0                                 __ptext47 37DE  
                               __ptext39 3A78                                 __ptext72 0000  
                               __ptext64 3084                                 __ptext56 152A  
                               __ptext48 2DDA                                 __ptext65 3982  
                               __ptext57 2F44                                 __ptext49 31A6  
                               __ptext66 26A6                                 __ptext67 388C  
                               __ptext59 360E                                 __ptext68 0CD2  
                               __ptext69 3658                        ??_TMR1_StartTimer 001B  
                          __size_of_CRC8 004A                                 begin@ptr 00C1  
                EUSART1_Receive_ISR@data 000C                            _returnAddress 0040  
                          __size_of_main 003A                              _receiveData 061E  
                         _Transmit_stall 0044                                 _sendData 245C  
                           _TmpTemp_DegF 00AD                     __size_of_Temp_Filter 016A  
                        ??_Tempeture_Get 0024                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                       ??i2_UART_buff_size 0003  
                               int$flags 0045                             _serial_write 0036  
                    __end_of_updateComms 152A       __end_of_INTERRUPT_InterruptManager 00AC  
             _INTERRUPT_InterruptManager 0008                                 main@argc 01A1  
                               main@argv 01A3                      _EUSART1_Receive_ISR 3982  
                      receiveData@holder 00CE                                 log@coeff 0601  
                             _INTCONbits 000FF2                              ??_eval_poly 018E  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                 ??_INTERRUPT_Initialize 001B                                 memset@p1 001B  
                       _serial_available 0032          __size_ofi2_UART_buff_modulo_inc 002A  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                          ??_Battery_Get 0024                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                           _Battery_Filter 1F2E  
                          _CountCallBack 002E                     ?_EUSART1_Receive_ISR 0001  
            __end_of_ADC_StartConversion 39D6   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                         _TempBattery_Volt 0152  
                ?_PIN_MANAGER_Initialize 0001          __end_of_ADC_GetConversionResult 3A5C  
           __end_of_EUSART1_Transmit_ISR 3782                              _ring_buffer 0200  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 0023  
                      ??i2_UART_buff_get 0009                              _serial_peek 009A  
                            _serial_read 0034                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                __end_of_Battery_Convert 2B52                          ??_UART_buff_get 0023  
                        ??_UART_buff_put 0024    FastTransfer_buffer_modulo_inc@modulus 001D  
                 crcBufS_status_put@time 001D                receiveData@crcHolder_1132 00D5  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003E  
                 __end_of_Battery_Filter 2080               __end_of_crcBufS_status_put 2DDA  
                  ??_EUSART1_Receive_ISR 000C           __end_of_PIN_MANAGER_Initialize 352E  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                  __end_of_Battery_Fault 2E90                        __CFG_FOSC$INTIO67 000000  
                   __end_of_Battery_Read 3A06                          _TMR1_Initialize 3924  
                            _updateComms 1126                         _ADC_Buffer_Point 002C  
                    __end_of_Battery_Get 380C                          Set_4051@Channel 0001  
