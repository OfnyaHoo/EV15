

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Jun 11 23:18:46 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           	psect	idataCOMRAM
    80  002A78                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _Transmit_stall
    84  002A78  01                 	db	1
    85                           
    86                           	psect	idataBANK0
    87  002902                     __pidataBANK0:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _Battery_Volt
    91  002902  00                 	db	0
    92  002903  40                 	db	64
    93  002904  40                 	db	64
    94  002905  00                 	db	0
    95  002906  40                 	db	64
    96  002907  40                 	db	64
    97  002908  00                 	db	0
    98  002909  40                 	db	64
    99  00290A  40                 	db	64
   100  00290B  00                 	db	0
   101  00290C  40                 	db	64
   102  00290D  40                 	db	64
   103  00290E  00                 	db	0
   104  00290F  40                 	db	64
   105  002910  40                 	db	64
   106  002911  00                 	db	0
   107  002912  40                 	db	64
   108  002913  40                 	db	64
   109  002914  00                 	db	0
   110  002915  40                 	db	64
   111  002916  40                 	db	64
   112  002917  00                 	db	0
   113  002918  40                 	db	64
   114  002919  40                 	db	64
   115  00291A  00                 	db	0
   116  00291B  40                 	db	64
   117  00291C  40                 	db	64
   118  00291D  00                 	db	0
   119  00291E  40                 	db	64
   120  00291F  40                 	db	64
   121                           
   122                           	psect	idataBANK1
   123  002920                     __pidataBANK1:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _Temp_DegF
   127  002920  00                 	db	0
   128  002921  8C                 	db	140
   129  002922  42                 	db	66
   130  002923  00                 	db	0
   131  002924  8C                 	db	140
   132  002925  42                 	db	66
   133  002926  00                 	db	0
   134  002927  8C                 	db	140
   135  002928  42                 	db	66
   136  002929  00                 	db	0
   137  00292A  8C                 	db	140
   138  00292B  42                 	db	66
   139  00292C  00                 	db	0
   140  00292D  8C                 	db	140
   141  00292E  42                 	db	66
   142  00292F  00                 	db	0
   143  002930  8C                 	db	140
   144  002931  42                 	db	66
   145  002932  00                 	db	0
   146  002933  8C                 	db	140
   147  002934  42                 	db	66
   148  002935  00                 	db	0
   149  002936  8C                 	db	140
   150  002937  42                 	db	66
   151  002938  00                 	db	0
   152  002939  8C                 	db	140
   153  00293A  42                 	db	66
   154  00293B  00                 	db	0
   155  00293C  8C                 	db	140
   156  00293D  42                 	db	66
   157                           
   158                           	psect	smallconst
   159  000600                     __psmallconst:
   160                           	opt stack 0
   161  000600  00                 	db	0
   162  000601                     log@coeff:
   163                           	opt stack 0
   164  000601  00                 	db	0
   165  000602  00                 	db	0
   166  000603  00                 	db	0
   167  000604  00                 	db	0
   168  000605  80                 	db	128
   169  000606  3F                 	db	63
   170  000607  F0                 	db	240
   171  000608  FF                 	db	255
   172  000609  BE                 	db	190
   173  00060A  E2                 	db	226
   174  00060B  A9                 	db	169
   175  00060C  3E                 	db	62
   176  00060D  83                 	db	131
   177  00060E  76                 	db	118
   178  00060F  BE                 	db	190
   179  000610  AE                 	db	174
   180  000611  2B                 	db	43
   181  000612  3E                 	db	62
   182  000613  3C                 	db	60
   183  000614  C3                 	db	195
   184  000615  BD                 	db	189
   185  000616  D2                 	db	210
   186  000617  13                 	db	19
   187  000618  3D                 	db	61
   188  000619  78                 	db	120
   189  00061A  D3                 	db	211
   190  00061B  BB                 	db	187
   191  00061C                     __end_oflog@coeff:
   192                           	opt stack 0
   193  0000                     _ANSELA	set	3896
   194  0000                     _ANSELB	set	3897
   195  0000                     _ANSELC	set	3898
   196  0000                     _ANSELD	set	3899
   197  0000                     _ANSELE	set	3900
   198  0000                     _TMR1	set	4046
   199  0000                     _ADCON0	set	4034
   200  0000                     _ADCON0bits	set	4034
   201  0000                     _ADCON1	set	4033
   202  0000                     _ADCON2	set	4032
   203  0000                     _ADRESH	set	4036
   204  0000                     _ADRESL	set	4035
   205  0000                     _BAUD1CON	set	4024
   206  0000                     _INTCON2bits	set	4081
   207  0000                     _INTCONbits	set	4082
   208  0000                     _IPR1bits	set	3999
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATD	set	3980
   214  0000                     _LATE	set	3981
   215  0000                     _LATEbits	set	3981
   216  0000                     _OSCCON	set	4051
   217  0000                     _OSCCON2	set	4050
   218  0000                     _OSCTUNE	set	3995
   219  0000                     _PIE1bits	set	3997
   220  0000                     _PIR1bits	set	3998
   221  0000                     _RC1STA	set	4011
   222  0000                     _RC1STAbits	set	4011
   223  0000                     _RCONbits	set	4048
   224  0000                     _RCREG1	set	4014
   225  0000                     _SPBRG1	set	4015
   226  0000                     _SPBRGH1	set	4016
   227  0000                     _T1CON	set	4045
   228  0000                     _T1CONbits	set	4045
   229  0000                     _T1GCON	set	4044
   230  0000                     _T1GCONbits	set	4044
   231  0000                     _TMR1H	set	4047
   232  0000                     _TMR1L	set	4046
   233  0000                     _TRISA	set	3986
   234  0000                     _TRISB	set	3987
   235  0000                     _TRISC	set	3988
   236  0000                     _TRISCbits	set	3988
   237  0000                     _TRISD	set	3989
   238  0000                     _TRISE	set	3990
   239  0000                     _TX1STA	set	4012
   240  0000                     _TXREG1	set	4013
   241  0000                     _WPUB	set	3937
   242  0000                     _LATA0	set	31816
   243  0000                     _LATA6	set	31822
   244  0000                     _LATB0	set	31824
   245  0000                     _LATB1	set	31825
   246  0000                     _LATB3	set	31827
   247  0000                     _LATC0	set	31832
   248  0000                     _LATC1	set	31833
   249  0000                     _LATC4	set	31836
   250  0000                     _LATC5	set	31837
   251  0000                     _LATD1	set	31841
   252  0000                     _LATD2	set	31842
   253  0000                     _LATD3	set	31843
   254  0000                     _LATD5	set	31845
   255                           
   256                           ; #config settings
   257  00061C  00                 	db	0	; dummy byte at the end
   258  0000                     
   259                           	psect	cinit
   260  0021D0                     __pcinit:
   261                           	opt stack 0
   262  0021D0                     start_initialization:
   263                           	opt stack 0
   264  0021D0                     __initialization:
   265                           	opt stack 0
   266                           
   267                           ; Clear objects allocated to BANK5 (206 bytes)
   268  0021D0  EE05  F000         	lfsr	0,__pbssBANK5
   269  0021D4  0ECE               	movlw	206
   270  0021D6                     clear_0:
   271  0021D6  6AEE               	clrf	postinc0,c
   272  0021D8  06E8               	decf	wreg,f,c
   273  0021DA  E1FD               	bnz	clear_0
   274                           
   275                           ; Clear objects allocated to BANK4 (206 bytes)
   276  0021DC  EE04  F000         	lfsr	0,__pbssBANK4
   277  0021E0  0ECE               	movlw	206
   278  0021E2                     clear_1:
   279  0021E2  6AEE               	clrf	postinc0,c
   280  0021E4  06E8               	decf	wreg,f,c
   281  0021E6  E1FD               	bnz	clear_1
   282                           
   283                           ; Clear objects allocated to BANK3 (200 bytes)
   284  0021E8  EE03  F000         	lfsr	0,__pbssBANK3
   285  0021EC  0EC8               	movlw	200
   286  0021EE                     clear_2:
   287  0021EE  6AEE               	clrf	postinc0,c
   288  0021F0  06E8               	decf	wreg,f,c
   289  0021F2  E1FD               	bnz	clear_2
   290                           
   291                           ; Clear objects allocated to BANK2 (206 bytes)
   292  0021F4  EE02  F000         	lfsr	0,__pbssBANK2
   293  0021F8  0ECE               	movlw	206
   294  0021FA                     clear_3:
   295  0021FA  6AEE               	clrf	postinc0,c
   296  0021FC  06E8               	decf	wreg,f,c
   297  0021FE  E1FD               	bnz	clear_3
   298                           
   299                           ; Clear objects allocated to BANK1 (160 bytes)
   300  002200  EE01  F000         	lfsr	0,__pbssBANK1
   301  002204  0EA0               	movlw	160
   302  002206                     clear_4:
   303  002206  6AEE               	clrf	postinc0,c
   304  002208  06E8               	decf	wreg,f,c
   305  00220A  E1FD               	bnz	clear_4
   306                           
   307                           ; Clear objects allocated to BANK0 (97 bytes)
   308  00220C  EE00  F060         	lfsr	0,__pbssBANK0
   309  002210  0E61               	movlw	97
   310  002212                     clear_5:
   311  002212  6AEE               	clrf	postinc0,c
   312  002214  06E8               	decf	wreg,f,c
   313  002216  E1FD               	bnz	clear_5
   314                           
   315                           ; Clear objects allocated to COMRAM (24 bytes)
   316  002218  EE00  F02D         	lfsr	0,__pbssCOMRAM
   317  00221C  0E18               	movlw	24
   318  00221E                     clear_6:
   319  00221E  6AEE               	clrf	postinc0,c
   320  002220  06E8               	decf	wreg,f,c
   321  002222  E1FD               	bnz	clear_6
   322                           
   323                           ; Initialize objects allocated to BANK1 (30 bytes)
   324                           ; load TBLPTR registers with __pidataBANK1
   325  002224  0E20               	movlw	low __pidataBANK1
   326  002226  6EF6               	movwf	tblptrl,c
   327  002228  0E29               	movlw	high __pidataBANK1
   328  00222A  6EF7               	movwf	tblptrh,c
   329  00222C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   330  00222E  6EF8               	movwf	tblptru,c
   331  002230  EE01  F0A0         	lfsr	0,__pdataBANK1
   332  002234  EE10 F01E          	lfsr	1,30
   333  002238                     copy_data0:
   334  002238  0009               	tblrd		*+
   335  00223A  CFF5 FFEE          	movff	tablat,postinc0
   336  00223E  50E5               	movf	postdec1,w,c
   337  002240  50E1               	movf	fsr1l,w,c
   338  002242  E1FA               	bnz	copy_data0
   339                           
   340                           ; Initialize objects allocated to BANK0 (30 bytes)
   341                           ; load TBLPTR registers with __pidataBANK0
   342  002244  0E02               	movlw	low __pidataBANK0
   343  002246  6EF6               	movwf	tblptrl,c
   344  002248  0E29               	movlw	high __pidataBANK0
   345  00224A  6EF7               	movwf	tblptrh,c
   346  00224C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   347  00224E  6EF8               	movwf	tblptru,c
   348  002250  EE00  F0E0         	lfsr	0,__pdataBANK0
   349  002254  EE10 F01E          	lfsr	1,30
   350  002258                     copy_data1:
   351  002258  0009               	tblrd		*+
   352  00225A  CFF5 FFEE          	movff	tablat,postinc0
   353  00225E  50E5               	movf	postdec1,w,c
   354  002260  50E1               	movf	fsr1l,w,c
   355  002262  E1FA               	bnz	copy_data1
   356                           
   357                           ; Initialize objects allocated to COMRAM (1 bytes)
   358                           ; load TBLPTR registers with __pidataCOMRAM
   359  002264  0E78               	movlw	low __pidataCOMRAM
   360  002266  6EF6               	movwf	tblptrl,c
   361  002268  0E2A               	movlw	high __pidataCOMRAM
   362  00226A  6EF7               	movwf	tblptrh,c
   363  00226C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   364  00226E  6EF8               	movwf	tblptru,c
   365  002270  0009               	tblrd		*+	;fetch initializer
   366  002272  CFF5 F045          	movff	tablat,__pdataCOMRAM
   367  002276                     end_of_initialization:
   368                           	opt stack 0
   369  002276                     __end_of__initialization:
   370                           	opt stack 0
   371  002276  0E00               	movlw	low (__Lmediumconst shr (0+16))
   372  002278  6EF8               	movwf	tblptru,c
   373  00227A  0100               	movlb	0
   374  00227C  EF13  F015         	goto	_main	;jump to C main() function
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           postdec1	equ	0xFE5
   382                           fsr1l	equ	0xFE1
   383                           
   384                           	psect	bssCOMRAM
   385  00002D                     __pbssCOMRAM:
   386                           	opt stack 0
   387  00002D                     _ADC_Buffer_Point:
   388                           	opt stack 0
   389  00002D                     	ds	2
   390  00002F                     _CountCallBack:
   391                           	opt stack 0
   392  00002F                     	ds	2
   393  000031                     _serial_available:
   394                           	opt stack 0
   395  000031                     	ds	2
   396  000033                     _serial_read:
   397                           	opt stack 0
   398  000033                     	ds	2
   399  000035                     _serial_write:
   400                           	opt stack 0
   401  000035                     	ds	2
   402  000037                     _timer1ReloadVal:
   403                           	opt stack 0
   404  000037                     	ds	2
   405  000039                     _AKNAKsend:
   406                           	opt stack 0
   407  000039                     	ds	1
   408  00003A                     _Temp_Aquire:
   409                           	opt stack 0
   410  00003A                     	ds	1
   411  00003B                     _Volt_Aquire:
   412                           	opt stack 0
   413  00003B                     	ds	1
   414  00003C                     _calc_CS:
   415                           	opt stack 0
   416  00003C                     	ds	1
   417  00003D                     _maxDataAddress:
   418                           	opt stack 0
   419  00003D                     	ds	1
   420  00003E                     _moduleAddress:
   421                           	opt stack 0
   422  00003E                     	ds	1
   423  00003F                     _returnAddress:
   424                           	opt stack 0
   425  00003F                     	ds	1
   426  000040                     _rx_address:
   427                           	opt stack 0
   428  000040                     	ds	1
   429  000041                     _rx_array_inx:
   430                           	opt stack 0
   431  000041                     	ds	1
   432  000042                     _rx_len:
   433                           	opt stack 0
   434  000042                     	ds	1
   435  000043                     _group:
   436                           	opt stack 0
   437  000043                     	ds	2
   438                           tblptru	equ	0xFF8
   439                           tblptrh	equ	0xFF7
   440                           tblptrl	equ	0xFF6
   441                           tablat	equ	0xFF5
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           postdec1	equ	0xFE5
   445                           fsr1l	equ	0xFE1
   446                           
   447                           	psect	dataCOMRAM
   448  000045                     __pdataCOMRAM:
   449                           	opt stack 0
   450  000045                     _Transmit_stall:
   451                           	opt stack 0
   452  000045                     	ds	1
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           postdec1	equ	0xFE5
   460                           fsr1l	equ	0xFE1
   461                           
   462                           	psect	bssBANK0
   463  000060                     __pbssBANK0:
   464                           	opt stack 0
   465  000060                     _Battery_Adc:
   466                           	opt stack 0
   467  000060                     	ds	40
   468  000088                     _Temp_Done:
   469                           	opt stack 0
   470  000088                     	ds	2
   471  00008A                     _Volt_Done:
   472                           	opt stack 0
   473  00008A                     	ds	2
   474  00008C                     _addressErrorCounter:
   475                           	opt stack 0
   476  00008C                     	ds	2
   477  00008E                     _alignErrorCounter:
   478                           	opt stack 0
   479  00008E                     	ds	2
   480  000090                     _crcErrorCounter:
   481                           	opt stack 0
   482  000090                     	ds	2
   483  000092                     _dataAdressErrorCounter:
   484                           	opt stack 0
   485  000092                     	ds	2
   486  000094                     _errno:
   487                           	opt stack 0
   488  000094                     	ds	2
   489  000096                     _receiveArrayAddress:
   490                           	opt stack 0
   491  000096                     	ds	2
   492  000098                     _sendStructAddress:
   493                           	opt stack 0
   494  000098                     	ds	2
   495  00009A                     _serial_peek:
   496                           	opt stack 0
   497  00009A                     	ds	2
   498  00009C                     _Temp_Adc:
   499                           	opt stack 0
   500  00009C                     	ds	20
   501  0000B0                     _crc_buffer:
   502                           	opt stack 0
   503  0000B0                     	ds	17
   504                           tblptru	equ	0xFF8
   505                           tblptrh	equ	0xFF7
   506                           tblptrl	equ	0xFF6
   507                           tablat	equ	0xFF5
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           postdec1	equ	0xFE5
   511                           fsr1l	equ	0xFE1
   512                           
   513                           	psect	dataBANK0
   514  0000E0                     __pdataBANK0:
   515                           	opt stack 0
   516  0000E0                     _Battery_Volt:
   517                           	opt stack 0
   518  0000E0                     	ds	30
   519                           tblptru	equ	0xFF8
   520                           tblptrh	equ	0xFF7
   521                           tblptrl	equ	0xFF6
   522                           tablat	equ	0xFF5
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           postdec1	equ	0xFE5
   526                           fsr1l	equ	0xFE1
   527                           
   528                           	psect	bssBANK1
   529  000100                     __pbssBANK1:
   530                           	opt stack 0
   531  000100                     _PrevBattery_Volt:
   532                           	opt stack 0
   533  000100                     	ds	30
   534  00011E                     _PrevTemp_DegF:
   535                           	opt stack 0
   536  00011E                     	ds	30
   537  00013C                     _receiveArray:
   538                           	opt stack 0
   539  00013C                     	ds	40
   540  000164                     _TempBattery_Volt:
   541                           	opt stack 0
   542  000164                     	ds	30
   543  000182                     _TmpTemp_DegF:
   544                           	opt stack 0
   545  000182                     	ds	30
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           postdec1	equ	0xFE5
   553                           fsr1l	equ	0xFE1
   554                           
   555                           	psect	dataBANK1
   556  0001A0                     __pdataBANK1:
   557                           	opt stack 0
   558  0001A0                     _Temp_DegF:
   559                           	opt stack 0
   560  0001A0                     	ds	30
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postdec1	equ	0xFE5
   568                           fsr1l	equ	0xFE1
   569                           
   570                           	psect	bssBANK2
   571  000200                     __pbssBANK2:
   572                           	opt stack 0
   573  000200                     _ring_buffer:
   574                           	opt stack 0
   575  000200                     	ds	206
   576                           tblptru	equ	0xFF8
   577                           tblptrh	equ	0xFF7
   578                           tblptrl	equ	0xFF6
   579                           tablat	equ	0xFF5
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           postdec1	equ	0xFE5
   583                           fsr1l	equ	0xFE1
   584                           
   585                           	psect	bssBANK3
   586  000300                     __pbssBANK3:
   587                           	opt stack 0
   588  000300                     _rx_buffer:
   589                           	opt stack 0
   590  000300                     	ds	200
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           postdec1	equ	0xFE5
   598                           fsr1l	equ	0xFE1
   599                           
   600                           	psect	bssBANK4
   601  000400                     __pbssBANK4:
   602                           	opt stack 0
   603  000400                     _input_buffer:
   604                           	opt stack 0
   605  000400                     	ds	206
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           postinc0	equ	0xFEE
   611                           wreg	equ	0xFE8
   612                           postdec1	equ	0xFE5
   613                           fsr1l	equ	0xFE1
   614                           
   615                           	psect	bssBANK5
   616  000500                     __pbssBANK5:
   617                           	opt stack 0
   618  000500                     _output_buffer:
   619                           	opt stack 0
   620  000500                     	ds	206
   621                           tblptru	equ	0xFF8
   622                           tblptrh	equ	0xFF7
   623                           tblptrl	equ	0xFF6
   624                           tablat	equ	0xFF5
   625                           postinc0	equ	0xFEE
   626                           wreg	equ	0xFE8
   627                           postdec1	equ	0xFE5
   628                           fsr1l	equ	0xFE1
   629                           
   630                           	psect	cstackBANK0
   631  0000C1                     __pcstackBANK0:
   632                           	opt stack 0
   633  0000C1                     CRCcheck@SentCRC:
   634                           	opt stack 0
   635  0000C1                     ___ftmul@exp:
   636                           	opt stack 0
   637  0000C1                     begin@ptr:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x0
   641  0000C1                     	ds	1
   642  0000C2                     CRCcheck@calculatedCRC:
   643                           	opt stack 0
   644  0000C2                     ___ftmul@f3_as_product:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x1
   648  0000C2                     	ds	1
   649  0000C3                     begin@maxSize:
   650                           	opt stack 0
   651  0000C3                     CRCcheck@arrayHolder:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x2
   655  0000C3                     	ds	1
   656  0000C4                     begin@givenAddress:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x3
   660  0000C4                     	ds	1
   661  0000C5                     begin@error:
   662                           	opt stack 0
   663  0000C5                     ___ftmul@cntr:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x4
   667  0000C5                     	ds	1
   668  0000C6                     ___ftmul@sign:
   669                           	opt stack 0
   670  0000C6                     begin@stufftosend:
   671                           	opt stack 0
   672  0000C6                     CRCcheck@rt:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x5
   676  0000C6                     	ds	1
   677  0000C7                     ?_Battery_Get:
   678                           	opt stack 0
   679  0000C7                     Battery_Get@channelnum:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x6
   683  0000C7                     	ds	1
   684  0000C8                     begin@stufftoreceive:
   685                           	opt stack 0
   686  0000C8                     receiveData@holder:
   687                           	opt stack 0
   688                           
   689                           ; 3 bytes @ 0x7
   690  0000C8                     	ds	2
   691  0000CA                     ?___fttol:
   692                           	opt stack 0
   693  0000CA                     begin@stuffavailable:
   694                           	opt stack 0
   695  0000CA                     ___fttol@f1:
   696                           	opt stack 0
   697                           
   698                           ; 3 bytes @ 0x9
   699  0000CA                     	ds	1
   700  0000CB                     receiveData@holder_1107:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0xA
   704  0000CB                     	ds	1
   705  0000CC                     begin@stuffpeek:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0xB
   709  0000CC                     	ds	2
   710  0000CE                     ??___fttol:
   711  0000CE                     receiveData@crcHolder:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0xD
   715  0000CE                     	ds	1
   716  0000CF                     receiveData@crcHolder_1108:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0xE
   720  0000CF                     	ds	1
   721  0000D0                     receiveData@u:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0xF
   725  0000D0                     	ds	2
   726  0000D2                     receiveData@r:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x11
   730  0000D2                     	ds	1
   731  0000D3                     ___fttol@sign1:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x12
   735  0000D3                     	ds	1
   736  0000D4                     ___fttol@lval:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x13
   740  0000D4                     	ds	4
   741  0000D8                     ___fttol@exp1:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x17
   745  0000D8                     	ds	1
   746  0000D9                     ToSend@what:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x18
   750  0000D9                     	ds	2
   751  0000DB                     
   752                           ; 2 bytes @ 0x1A
   753  0000DB                     	ds	2
   754  0000DD                     
   755                           ; 3 bytes @ 0x1C
   756  0000DD                     	ds	3
   757                           tblptru	equ	0xFF8
   758                           tblptrh	equ	0xFF7
   759                           tblptrl	equ	0xFF6
   760                           tablat	equ	0xFF5
   761                           postinc0	equ	0xFEE
   762                           wreg	equ	0xFE8
   763                           postdec1	equ	0xFE5
   764                           fsr1l	equ	0xFE1
   765                           
   766                           	psect	cstackCOMRAM
   767  000001                     __pcstackCOMRAM:
   768                           	opt stack 0
   769  000001                     ??_ADC_StartConversion:
   770  000001                     ?_ADC_GetConversionResult:
   771                           	opt stack 0
   772  000001                     ?i2_UART_buff_size:
   773                           	opt stack 0
   774  000001                     ?i2_UART_buff_modulo_inc:
   775                           	opt stack 0
   776  000001                     Set_4051@Channel:
   777                           	opt stack 0
   778  000001                     i2UART_buff_size@_this:
   779                           	opt stack 0
   780  000001                     i2UART_buff_modulo_inc@value:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x0
   784  000001                     	ds	1
   785  000002                     ADC_StartConversion@channel:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x1
   789  000002                     	ds	1
   790  000003                     ??_Set_4051:
   791  000003                     ??_ADC_GetConversionResult:
   792  000003                     i2UART_buff_modulo_inc@modulus:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x2
   796  000003                     	ds	2
   797  000005                     ??_ADC_ISR:
   798  000005                     i2UART_buff_modulo_inc@my_value:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x4
   802  000005                     	ds	2
   803  000007                     i2UART_buff_put@_this:
   804                           	opt stack 0
   805  000007                     i2UART_buff_get@_this:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x6
   809  000007                     	ds	2
   810  000009                     ??i2_UART_buff_get:
   811  000009                     i2UART_buff_put@c:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x8
   815  000009                     	ds	1
   816  00000A                     ??i2_UART_buff_put:
   817                           
   818                           ; 0 bytes @ 0x9
   819  00000A                     	ds	1
   820  00000B                     i2UART_buff_get@c:
   821                           	opt stack 0
   822  00000B                     ADC_ISR@ADC_Result:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0xA
   826  00000B                     	ds	1
   827  00000C                     EUSART1_Receive_ISR@data:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0xB
   831  00000C                     	ds	1
   832  00000D                     ??_INTERRUPT_InterruptManager:
   833                           
   834                           ; 0 bytes @ 0xC
   835  00000D                     	ds	14
   836  00001B                     ?_FastTransfer_buffer_modulo_inc:
   837                           	opt stack 0
   838  00001B                     ?_UART_buff_modulo_inc:
   839                           	opt stack 0
   840  00001B                     ?_UART_buff_size:
   841                           	opt stack 0
   842  00001B                     ?___wmul:
   843                           	opt stack 0
   844  00001B                     ?___awdiv:
   845                           	opt stack 0
   846  00001B                     ?___ftpack:
   847                           	opt stack 0
   848  00001B                     CRC8@data:
   849                           	opt stack 0
   850  00001B                     FastTransfer_buffer_modulo_inc@value:
   851                           	opt stack 0
   852  00001B                     crcBufS_put@_this:
   853                           	opt stack 0
   854  00001B                     crcBufS_status_put@_this:
   855                           	opt stack 0
   856  00001B                     crcBufS_get@_this:
   857                           	opt stack 0
   858  00001B                     UART_buff_size@_this:
   859                           	opt stack 0
   860  00001B                     UART_buff_modulo_inc@value:
   861                           	opt stack 0
   862  00001B                     UART_buff_peek@_this:
   863                           	opt stack 0
   864  00001B                     ___wmul@multiplier:
   865                           	opt stack 0
   866  00001B                     ___awdiv@dividend:
   867                           	opt stack 0
   868  00001B                     memset@p1:
   869                           	opt stack 0
   870  00001B                     ___ftpack@arg:
   871                           	opt stack 0
   872  00001B                     Delay@d_lenth:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x1A
   876  00001B                     	ds	2
   877  00001D                     ??_UART_buff_peek:
   878  00001D                     ?_Receive_available:
   879                           	opt stack 0
   880  00001D                     CRC8@len:
   881                           	opt stack 0
   882  00001D                     crcBufS_put@address:
   883                           	opt stack 0
   884  00001D                     crcBufS_status_put@time:
   885                           	opt stack 0
   886  00001D                     crcBufS_get@time:
   887                           	opt stack 0
   888  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   889                           	opt stack 0
   890  00001D                     UART_buff_modulo_inc@modulus:
   891                           	opt stack 0
   892  00001D                     ___wmul@multiplicand:
   893                           	opt stack 0
   894  00001D                     ___awdiv@divisor:
   895                           	opt stack 0
   896  00001D                     memset@c:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x1C
   900  00001D                     	ds	1
   901  00001E                     CRC8@sum:
   902                           	opt stack 0
   903  00001E                     crcBufS_put@oldCRC:
   904                           	opt stack 0
   905  00001E                     crcBufS_status_put@status:
   906                           	opt stack 0
   907  00001E                     crcBufS_get@space:
   908                           	opt stack 0
   909  00001E                     ___ftpack@exp:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x1D
   913  00001E                     	ds	1
   914  00001F                     ??_crcBufS_get:
   915  00001F                     ??_Delay:
   916  00001F                     ??_crcBufS_status_put:
   917  00001F                     CRC8@extract:
   918                           	opt stack 0
   919  00001F                     crcBufS_put@status:
   920                           	opt stack 0
   921  00001F                     ___awdiv@counter:
   922                           	opt stack 0
   923  00001F                     ___ftpack@sign:
   924                           	opt stack 0
   925  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   926                           	opt stack 0
   927  00001F                     UART_buff_modulo_inc@my_value:
   928                           	opt stack 0
   929  00001F                     ___wmul@product:
   930                           	opt stack 0
   931  00001F                     memset@n:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x1E
   935  00001F                     	ds	1
   936  000020                     ??_crcBufS_put:
   937  000020                     ??___ftpack:
   938  000020                     CRC8@tempI:
   939                           	opt stack 0
   940  000020                     ___awdiv@sign:
   941                           	opt stack 0
   942  000020                     Delay@wait:
   943                           	opt stack 0
   944                           
   945                           ; 4 bytes @ 0x1F
   946  000020                     	ds	1
   947  000021                     ?_Tempeture_Get:
   948                           	opt stack 0
   949  000021                     CRC8@crc:
   950                           	opt stack 0
   951  000021                     Tempeture_Get@channelnum:
   952                           	opt stack 0
   953  000021                     FastTransfer_buffer_put@_this:
   954                           	opt stack 0
   955  000021                     UART_buff_put@_this:
   956                           	opt stack 0
   957  000021                     UART_buff_get@_this:
   958                           	opt stack 0
   959  000021                     ___awdiv@quotient:
   960                           	opt stack 0
   961  000021                     memset@p:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x20
   965  000021                     	ds	2
   966  000023                     ??_UART_buff_get:
   967  000023                     ?___ftmul:
   968                           	opt stack 0
   969  000023                     FastTransfer_buffer_put@towhere:
   970                           	opt stack 0
   971  000023                     UART_buff_put@c:
   972                           	opt stack 0
   973  000023                     FastTransfer_buffer_flush@_this:
   974                           	opt stack 0
   975  000023                     crcBufS_status_put@wantedTime:
   976                           	opt stack 0
   977  000023                     UART_buff_init@_this:
   978                           	opt stack 0
   979  000023                     ___ftmul@f1:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0x22
   983  000023                     	ds	1
   984  000024                     ??_UART_buff_put:
   985  000024                     FastTransfer_buffer_put@towhat:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x23
   989  000024                     	ds	1
   990  000025                     UART_buff_get@c:
   991                           	opt stack 0
   992  000025                     FastTransfer_buffer_flush@clearBuffer:
   993                           	opt stack 0
   994  000025                     crcBufS_get@wantedTime:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x24
   998  000025                     	ds	1
   999  000026                     ??_FastTransfer_buffer_put:
  1000  000026                     Send_put@_data:
  1001                           	opt stack 0
  1002  000026                     ___ftmul@f2:
  1003                           	opt stack 0
  1004                           
  1005                           ; 3 bytes @ 0x25
  1006  000026                     	ds	1
  1007  000027                     ??_sendData:
  1008  000027                     ??_receiveData:
  1009                           
  1010                           ; 0 bytes @ 0x26
  1011  000027                     	ds	1
  1012  000028                     sendData@whereToSend:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x27
  1016  000028                     	ds	1
  1017  000029                     ??___ftmul:
  1018  000029                     sendData@CS:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x28
  1022  000029                     	ds	1
  1023  00002A                     sendData@i:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x29
  1027  00002A                     	ds	2
  1028  00002C                     ToSend@where:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x2B
  1032  00002C                     	ds	1
  1033  00002D                     tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           fsr1l	equ	0xFE1
  1041                           
  1042                           ; 0 bytes @ 0x2C
  1043 ;;
  1044 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1045 ;;
  1046 ;; *************** function _main *****************
  1047 ;; Defined at:
  1048 ;;		line 30 in file "Main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  argc            2   26[BANK0 ] int 
  1051 ;;  argv            3   28[BANK0 ] PTR PTR unsigned char 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;		None
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  2   26[BANK0 ] int 
  1056 ;; Registers used:
  1057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1063 ;;      Params:         0       5       0       0       0       0       0
  1064 ;;      Locals:         0       0       0       0       0       0       0
  1065 ;;      Temps:          0       0       0       0       0       0       0
  1066 ;;      Totals:         0       5       0       0       0       0       0
  1067 ;;Total ram usage:        5 bytes
  1068 ;; Hardware stack levels required when called:   10
  1069 ;; This function calls:
  1070 ;;		_SYSTEM_Initialize
  1071 ;;		_updateComms
  1072 ;; This function is called by:
  1073 ;;		Startup code after reset
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text0
  1078  002A26                     __ptext0:
  1079                           	opt stack 0
  1080  002A26                     _main:
  1081                           	opt stack 21
  1082                           
  1083                           ;Main.c: 32: SYSTEM_Initialize();
  1084                           
  1085                           ;incstack = 0
  1086  002A26  EC1F  F012         	call	_SYSTEM_Initialize	;wreg free
  1087                           
  1088                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1089  002A2A  8EF2               	bsf	intcon,7,c	;volatile
  1090                           
  1091                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1092  002A2C  8CF2               	bsf	intcon,6,c	;volatile
  1093  002A2E  D000               	goto	l4906
  1094  002A30                     l4906:
  1095                           
  1096                           ;Main.c: 65: {
  1097                           ;Main.c: 85: updateComms();
  1098  002A30  ECF5  F008         	call	_updateComms	;wreg free
  1099  002A34  D7FD               	goto	l4906
  1100                           
  1101                           ;Main.c: 102: }
  1102                           ;Main.c: 103: return (0);
  1103                           ;	Return value of _main is never used
  1104  002A36  EF55  F000         	goto	start
  1105  002A3A                     __end_of_main:
  1106                           	opt stack 0
  1107                           tblptru	equ	0xFF8
  1108                           tblptrh	equ	0xFF7
  1109                           tblptrl	equ	0xFF6
  1110                           tablat	equ	0xFF5
  1111                           intcon	equ	0xFF2
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           
  1117 ;; *************** function _updateComms *****************
  1118 ;; Defined at:
  1119 ;;		line 12 in file "Communications.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;		None               void
  1126 ;; Registers used:
  1127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1133 ;;      Params:         0       0       0       0       0       0       0
  1134 ;;      Locals:         0       0       0       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0       0       0
  1136 ;;      Totals:         0       0       0       0       0       0       0
  1137 ;;Total ram usage:        0 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    9
  1140 ;; This function calls:
  1141 ;;		_Battery_Get
  1142 ;;		_Delay
  1143 ;;		_Tempeture_Get
  1144 ;;		_ToSend
  1145 ;;		___fttol
  1146 ;;		_receiveData
  1147 ;;		_sendData
  1148 ;; This function is called by:
  1149 ;;		_main
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text1
  1154  0011EA                     __ptext1:
  1155                           	opt stack 0
  1156  0011EA                     _updateComms:
  1157                           	opt stack 21
  1158                           
  1159                           ;Communications.c: 15: if (receiveData()) {
  1160                           
  1161                           ;incstack = 0
  1162  0011EA  EC0F  F003         	call	_receiveData	;wreg free
  1163  0011EE  0900               	iorlw	0
  1164  0011F0  B4D8               	btfsc	status,2,c
  1165  0011F2  0012               	return	
  1166                           
  1167                           ;Communications.c: 16: Delay(3);
  1168  0011F4  0E03               	movlw	3
  1169  0011F6  6E1B               	movwf	Delay@d_lenth,c
  1170  0011F8  0E00               	movlw	0
  1171  0011FA  6E1C               	movwf	Delay@d_lenth+1,c
  1172  0011FC  0E00               	movlw	0
  1173  0011FE  6E1D               	movwf	Delay@d_lenth+2,c
  1174  001200  0E00               	movlw	0
  1175  001202  6E1E               	movwf	Delay@d_lenth+3,c
  1176  001204  EC08  F013         	call	_Delay	;wreg free
  1177                           
  1178                           ;Communications.c: 17: LATEbits.LATE1 = 1;
  1179  001208  828D               	bsf	3981,1,c	;volatile
  1180                           
  1181                           ;Communications.c: 18: Delay(4);
  1182  00120A  0E04               	movlw	4
  1183  00120C  6E1B               	movwf	Delay@d_lenth,c
  1184  00120E  0E00               	movlw	0
  1185  001210  6E1C               	movwf	Delay@d_lenth+1,c
  1186  001212  0E00               	movlw	0
  1187  001214  6E1D               	movwf	Delay@d_lenth+2,c
  1188  001216  0E00               	movlw	0
  1189  001218  6E1E               	movwf	Delay@d_lenth+3,c
  1190  00121A  EC08  F013         	call	_Delay	;wreg free
  1191                           
  1192                           ;Communications.c: 19: ToSend(0, 1);
  1193  00121E  0E00               	movlw	0
  1194  001220  0100               	movlb	0	; () banked
  1195  001222  6FDA               	movwf	(ToSend@what+1)& (0+255),b
  1196  001224  0E01               	movlw	1
  1197  001226  6FD9               	movwf	ToSend@what& (0+255),b
  1198  001228  0E00               	movlw	0
  1199  00122A  ECBD  F014         	call	_ToSend
  1200                           
  1201                           ;Communications.c: 20: ToSend(1, Battery_Get(0));
  1202  00122E  0E00               	movlw	0
  1203  001230  0100               	movlb	0	; () banked
  1204  001232  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1205  001234  0E00               	movlw	0
  1206  001236  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1207  001238  EC2E  F013         	call	_Battery_Get	;wreg free
  1208  00123C  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1209  001240  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1210  001244  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1211  001248  EC42  F00C         	call	___fttol	;wreg free
  1212  00124C  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1213  001250  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1214  001254  0E01               	movlw	1
  1215  001256  ECBD  F014         	call	_ToSend
  1216                           
  1217                           ;Communications.c: 21: ToSend(2, Battery_Get(1));
  1218  00125A  0E00               	movlw	0
  1219  00125C  0100               	movlb	0	; () banked
  1220  00125E  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1221  001260  0E01               	movlw	1
  1222  001262  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1223  001264  EC2E  F013         	call	_Battery_Get	;wreg free
  1224  001268  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1225  00126C  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1226  001270  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1227  001274  EC42  F00C         	call	___fttol	;wreg free
  1228  001278  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1229  00127C  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1230  001280  0E02               	movlw	2
  1231  001282  ECBD  F014         	call	_ToSend
  1232                           
  1233                           ;Communications.c: 22: ToSend(3, Battery_Get(2));
  1234  001286  0E00               	movlw	0
  1235  001288  0100               	movlb	0	; () banked
  1236  00128A  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1237  00128C  0E02               	movlw	2
  1238  00128E  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1239  001290  EC2E  F013         	call	_Battery_Get	;wreg free
  1240  001294  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1241  001298  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1242  00129C  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1243  0012A0  EC42  F00C         	call	___fttol	;wreg free
  1244  0012A4  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1245  0012A8  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1246  0012AC  0E03               	movlw	3
  1247  0012AE  ECBD  F014         	call	_ToSend
  1248                           
  1249                           ;Communications.c: 23: ToSend(4, Battery_Get(3));
  1250  0012B2  0E00               	movlw	0
  1251  0012B4  0100               	movlb	0	; () banked
  1252  0012B6  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1253  0012B8  0E03               	movlw	3
  1254  0012BA  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1255  0012BC  EC2E  F013         	call	_Battery_Get	;wreg free
  1256  0012C0  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1257  0012C4  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1258  0012C8  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1259  0012CC  EC42  F00C         	call	___fttol	;wreg free
  1260  0012D0  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1261  0012D4  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1262  0012D8  0E04               	movlw	4
  1263  0012DA  ECBD  F014         	call	_ToSend
  1264                           
  1265                           ;Communications.c: 24: ToSend(5, Battery_Get(4));
  1266  0012DE  0E00               	movlw	0
  1267  0012E0  0100               	movlb	0	; () banked
  1268  0012E2  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1269  0012E4  0E04               	movlw	4
  1270  0012E6  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1271  0012E8  EC2E  F013         	call	_Battery_Get	;wreg free
  1272  0012EC  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1273  0012F0  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1274  0012F4  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1275  0012F8  EC42  F00C         	call	___fttol	;wreg free
  1276  0012FC  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1277  001300  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1278  001304  0E05               	movlw	5
  1279  001306  ECBD  F014         	call	_ToSend
  1280                           
  1281                           ;Communications.c: 25: ToSend(6, Battery_Get(5));
  1282  00130A  0E00               	movlw	0
  1283  00130C  0100               	movlb	0	; () banked
  1284  00130E  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1285  001310  0E05               	movlw	5
  1286  001312  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1287  001314  EC2E  F013         	call	_Battery_Get	;wreg free
  1288  001318  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1289  00131C  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1290  001320  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1291  001324  EC42  F00C         	call	___fttol	;wreg free
  1292  001328  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1293  00132C  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1294  001330  0E06               	movlw	6
  1295  001332  ECBD  F014         	call	_ToSend
  1296                           
  1297                           ;Communications.c: 26: ToSend(7, Battery_Get(6));
  1298  001336  0E00               	movlw	0
  1299  001338  0100               	movlb	0	; () banked
  1300  00133A  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1301  00133C  0E06               	movlw	6
  1302  00133E  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1303  001340  EC2E  F013         	call	_Battery_Get	;wreg free
  1304  001344  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1305  001348  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1306  00134C  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1307  001350  EC42  F00C         	call	___fttol	;wreg free
  1308  001354  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1309  001358  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1310  00135C  0E07               	movlw	7
  1311  00135E  ECBD  F014         	call	_ToSend
  1312                           
  1313                           ;Communications.c: 27: ToSend(8, Battery_Get(7));
  1314  001362  0E00               	movlw	0
  1315  001364  0100               	movlb	0	; () banked
  1316  001366  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1317  001368  0E07               	movlw	7
  1318  00136A  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1319  00136C  EC2E  F013         	call	_Battery_Get	;wreg free
  1320  001370  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1321  001374  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1322  001378  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1323  00137C  EC42  F00C         	call	___fttol	;wreg free
  1324  001380  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1325  001384  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1326  001388  0E08               	movlw	8
  1327  00138A  ECBD  F014         	call	_ToSend
  1328                           
  1329                           ;Communications.c: 28: ToSend(9, Battery_Get(8));
  1330  00138E  0E00               	movlw	0
  1331  001390  0100               	movlb	0	; () banked
  1332  001392  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1333  001394  0E08               	movlw	8
  1334  001396  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1335  001398  EC2E  F013         	call	_Battery_Get	;wreg free
  1336  00139C  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1337  0013A0  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1338  0013A4  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1339  0013A8  EC42  F00C         	call	___fttol	;wreg free
  1340  0013AC  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1341  0013B0  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1342  0013B4  0E09               	movlw	9
  1343  0013B6  ECBD  F014         	call	_ToSend
  1344                           
  1345                           ;Communications.c: 29: ToSend(10, Battery_Get(9));
  1346  0013BA  0E00               	movlw	0
  1347  0013BC  0100               	movlb	0	; () banked
  1348  0013BE  6FC8               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1349  0013C0  0E09               	movlw	9
  1350  0013C2  6FC7               	movwf	Battery_Get@channelnum& (0+255),b
  1351  0013C4  EC2E  F013         	call	_Battery_Get	;wreg free
  1352  0013C8  C0C7  F0CA         	movff	?_Battery_Get,___fttol@f1
  1353  0013CC  C0C8  F0CB         	movff	?_Battery_Get+1,___fttol@f1+1
  1354  0013D0  C0C9  F0CC         	movff	?_Battery_Get+2,___fttol@f1+2
  1355  0013D4  EC42  F00C         	call	___fttol	;wreg free
  1356  0013D8  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1357  0013DC  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1358  0013E0  0E0A               	movlw	10
  1359  0013E2  ECBD  F014         	call	_ToSend
  1360                           
  1361                           ;Communications.c: 30: ToSend(11, Tempeture_Get(0));
  1362  0013E6  0E00               	movlw	0
  1363  0013E8  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1364  0013EA  0E00               	movlw	0
  1365  0013EC  6E21               	movwf	Tempeture_Get@channelnum,c
  1366  0013EE  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1367  0013F2  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1368  0013F6  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1369  0013FA  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1370  0013FE  EC42  F00C         	call	___fttol	;wreg free
  1371  001402  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1372  001406  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1373  00140A  0E0B               	movlw	11
  1374  00140C  ECBD  F014         	call	_ToSend
  1375                           
  1376                           ;Communications.c: 31: ToSend(12, Tempeture_Get(1));
  1377  001410  0E00               	movlw	0
  1378  001412  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1379  001414  0E01               	movlw	1
  1380  001416  6E21               	movwf	Tempeture_Get@channelnum,c
  1381  001418  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1382  00141C  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1383  001420  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1384  001424  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1385  001428  EC42  F00C         	call	___fttol	;wreg free
  1386  00142C  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1387  001430  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1388  001434  0E0C               	movlw	12
  1389  001436  ECBD  F014         	call	_ToSend
  1390                           
  1391                           ;Communications.c: 32: ToSend(13, Tempeture_Get(2));
  1392  00143A  0E00               	movlw	0
  1393  00143C  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1394  00143E  0E02               	movlw	2
  1395  001440  6E21               	movwf	Tempeture_Get@channelnum,c
  1396  001442  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1397  001446  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1398  00144A  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1399  00144E  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1400  001452  EC42  F00C         	call	___fttol	;wreg free
  1401  001456  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1402  00145A  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1403  00145E  0E0D               	movlw	13
  1404  001460  ECBD  F014         	call	_ToSend
  1405                           
  1406                           ;Communications.c: 33: ToSend(14, Tempeture_Get(3));
  1407  001464  0E00               	movlw	0
  1408  001466  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1409  001468  0E03               	movlw	3
  1410  00146A  6E21               	movwf	Tempeture_Get@channelnum,c
  1411  00146C  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1412  001470  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1413  001474  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1414  001478  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1415  00147C  EC42  F00C         	call	___fttol	;wreg free
  1416  001480  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1417  001484  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1418  001488  0E0E               	movlw	14
  1419  00148A  ECBD  F014         	call	_ToSend
  1420                           
  1421                           ;Communications.c: 34: ToSend(15, Tempeture_Get(4));
  1422  00148E  0E00               	movlw	0
  1423  001490  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1424  001492  0E04               	movlw	4
  1425  001494  6E21               	movwf	Tempeture_Get@channelnum,c
  1426  001496  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1427  00149A  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1428  00149E  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1429  0014A2  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1430  0014A6  EC42  F00C         	call	___fttol	;wreg free
  1431  0014AA  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1432  0014AE  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1433  0014B2  0E0F               	movlw	15
  1434  0014B4  ECBD  F014         	call	_ToSend
  1435                           
  1436                           ;Communications.c: 35: ToSend(16, Tempeture_Get(5));
  1437  0014B8  0E00               	movlw	0
  1438  0014BA  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1439  0014BC  0E05               	movlw	5
  1440  0014BE  6E21               	movwf	Tempeture_Get@channelnum,c
  1441  0014C0  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1442  0014C4  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1443  0014C8  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1444  0014CC  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1445  0014D0  EC42  F00C         	call	___fttol	;wreg free
  1446  0014D4  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1447  0014D8  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1448  0014DC  0E10               	movlw	16
  1449  0014DE  ECBD  F014         	call	_ToSend
  1450                           
  1451                           ;Communications.c: 36: ToSend(17, Tempeture_Get(6));
  1452  0014E2  0E00               	movlw	0
  1453  0014E4  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1454  0014E6  0E06               	movlw	6
  1455  0014E8  6E21               	movwf	Tempeture_Get@channelnum,c
  1456  0014EA  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1457  0014EE  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1458  0014F2  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1459  0014F6  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1460  0014FA  EC42  F00C         	call	___fttol	;wreg free
  1461  0014FE  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1462  001502  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1463  001506  0E11               	movlw	17
  1464  001508  ECBD  F014         	call	_ToSend
  1465                           
  1466                           ;Communications.c: 37: ToSend(18, Tempeture_Get(7));
  1467  00150C  0E00               	movlw	0
  1468  00150E  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1469  001510  0E07               	movlw	7
  1470  001512  6E21               	movwf	Tempeture_Get@channelnum,c
  1471  001514  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1472  001518  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1473  00151C  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1474  001520  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1475  001524  EC42  F00C         	call	___fttol	;wreg free
  1476  001528  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1477  00152C  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1478  001530  0E12               	movlw	18
  1479  001532  ECBD  F014         	call	_ToSend
  1480                           
  1481                           ;Communications.c: 38: ToSend(19, Tempeture_Get(8));
  1482  001536  0E00               	movlw	0
  1483  001538  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1484  00153A  0E08               	movlw	8
  1485  00153C  6E21               	movwf	Tempeture_Get@channelnum,c
  1486  00153E  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1487  001542  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1488  001546  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1489  00154A  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1490  00154E  EC42  F00C         	call	___fttol	;wreg free
  1491  001552  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1492  001556  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1493  00155A  0E13               	movlw	19
  1494  00155C  ECBD  F014         	call	_ToSend
  1495                           
  1496                           ;Communications.c: 39: ToSend(20, Tempeture_Get(9));
  1497  001560  0E00               	movlw	0
  1498  001562  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1499  001564  0E09               	movlw	9
  1500  001566  6E21               	movwf	Tempeture_Get@channelnum,c
  1501  001568  ECC0  F013         	call	_Tempeture_Get	;wreg free
  1502  00156C  C021  F0CA         	movff	?_Tempeture_Get,___fttol@f1
  1503  001570  C022  F0CB         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1504  001574  C023  F0CC         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1505  001578  EC42  F00C         	call	___fttol	;wreg free
  1506  00157C  C0CA  F0D9         	movff	?___fttol,ToSend@what
  1507  001580  C0CB  F0DA         	movff	?___fttol+1,ToSend@what+1
  1508  001584  0E14               	movlw	20
  1509  001586  ECBD  F014         	call	_ToSend
  1510                           
  1511                           ;Communications.c: 40: sendData(16);
  1512  00158A  0E10               	movlw	16
  1513  00158C  ECEB  F00C         	call	_sendData
  1514                           
  1515                           ;Communications.c: 41: Delay(10);
  1516  001590  0E0A               	movlw	10
  1517  001592  6E1B               	movwf	Delay@d_lenth,c
  1518  001594  0E00               	movlw	0
  1519  001596  6E1C               	movwf	Delay@d_lenth+1,c
  1520  001598  0E00               	movlw	0
  1521  00159A  6E1D               	movwf	Delay@d_lenth+2,c
  1522  00159C  0E00               	movlw	0
  1523  00159E  6E1E               	movwf	Delay@d_lenth+3,c
  1524  0015A0  EC08  F013         	call	_Delay	;wreg free
  1525                           
  1526                           ;Communications.c: 42: LATEbits.LATE1 = 0;
  1527  0015A4  928D               	bcf	3981,1,c	;volatile
  1528                           
  1529                           ;Communications.c: 43: LATAbits.LATA4 ^= 1;
  1530  0015A6  7889               	btg	3977,4,c	;volatile
  1531  0015A8  0012               	return	
  1532  0015AA  0012               	return		;funcret
  1533  0015AC                     __end_of_updateComms:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           intcon	equ	0xFF2
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           fsr1l	equ	0xFE1
  1544                           status	equ	0xFD8
  1545                           
  1546 ;; *************** function _sendData *****************
  1547 ;; Defined at:
  1548 ;;		line 53 in file "FastTransfer.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  whereToSend     1    wreg     unsigned char 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  whereToSend     1   39[COMRAM] unsigned char 
  1553 ;;  i               2   41[COMRAM] int 
  1554 ;;  CS              1   40[COMRAM] unsigned char 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;		None               void
  1557 ;; Registers used:
  1558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1564 ;;      Params:         0       0       0       0       0       0       0
  1565 ;;      Locals:         4       0       0       0       0       0       0
  1566 ;;      Temps:          1       0       0       0       0       0       0
  1567 ;;      Totals:         5       0       0       0       0       0       0
  1568 ;;Total ram usage:        5 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    7
  1571 ;; This function calls:
  1572 ;;		Absolute function
  1573 ;;		_CRC8
  1574 ;;		_FastTransfer_buffer_flush
  1575 ;;		_Send_put
  1576 ;;		_crcBufS_put
  1577 ;; This function is called by:
  1578 ;;		_updateComms
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text2
  1583  0019D6                     __ptext2:
  1584                           	opt stack 0
  1585  0019D6                     _sendData:
  1586                           	opt stack 22
  1587                           
  1588                           ;incstack = 0
  1589                           ;sendData@whereToSend stored from wreg
  1590  0019D6  6E28               	movwf	sendData@whereToSend,c
  1591                           
  1592                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1593  0019D8  C098  F01B         	movff	_sendStructAddress,CRC8@data
  1594  0019DC  C099  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1595  0019E0  C2CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1596  0019E4  ECB6  F012         	call	_CRC8	;wreg free
  1597  0019E8  6E29               	movwf	sendData@CS,c
  1598                           
  1599                           ;FastTransfer.c: 58: serial_write(0x06);
  1600  0019EA  D801               	call	u4198
  1601  0019EC  D00B               	goto	l4398
  1602  0019EE                     u4198:
  1603  0019EE  0005               	push	
  1604  0019F0  6EFA               	movwf	pclath,c
  1605  0019F2  5035               	movf	_serial_write,w,c
  1606  0019F4  6EFD               	movwf	tosl,c
  1607  0019F6  5036               	movf	_serial_write+1,w,c
  1608  0019F8  6EFE               	movwf	tosh,c
  1609  0019FA  50F8               	movf	tblptru,w,c
  1610  0019FC  6EFF               	movwf	tosu,c
  1611  0019FE  50FA               	movf	pclath,w,c
  1612  001A00  0E06               	movlw	6
  1613  001A02  0012               	return		;indir
  1614  001A04                     l4398:
  1615                           
  1616                           ;FastTransfer.c: 59: serial_write(0x85);
  1617  001A04  D801               	call	u4208
  1618  001A06  D00B               	goto	l4400
  1619  001A08                     u4208:
  1620  001A08  0005               	push	
  1621  001A0A  6EFA               	movwf	pclath,c
  1622  001A0C  5035               	movf	_serial_write,w,c
  1623  001A0E  6EFD               	movwf	tosl,c
  1624  001A10  5036               	movf	_serial_write+1,w,c
  1625  001A12  6EFE               	movwf	tosh,c
  1626  001A14  50F8               	movf	tblptru,w,c
  1627  001A16  6EFF               	movwf	tosu,c
  1628  001A18  50FA               	movf	pclath,w,c
  1629  001A1A  0E85               	movlw	133
  1630  001A1C  0012               	return		;indir
  1631  001A1E                     l4400:
  1632                           
  1633                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1634  001A1E  D801               	call	u4218
  1635  001A20  D00B               	goto	l4402
  1636  001A22                     u4218:
  1637  001A22  0005               	push	
  1638  001A24  6EFA               	movwf	pclath,c
  1639  001A26  5035               	movf	_serial_write,w,c
  1640  001A28  6EFD               	movwf	tosl,c
  1641  001A2A  5036               	movf	_serial_write+1,w,c
  1642  001A2C  6EFE               	movwf	tosh,c
  1643  001A2E  50F8               	movf	tblptru,w,c
  1644  001A30  6EFF               	movwf	tosu,c
  1645  001A32  50FA               	movf	pclath,w,c
  1646  001A34  5028               	movf	sendData@whereToSend,w,c
  1647  001A36  0012               	return		;indir
  1648  001A38                     l4402:
  1649                           
  1650                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1651  001A38  D801               	call	u4228
  1652  001A3A  D00B               	goto	l4404
  1653  001A3C                     u4228:
  1654  001A3C  0005               	push	
  1655  001A3E  6EFA               	movwf	pclath,c
  1656  001A40  5035               	movf	_serial_write,w,c
  1657  001A42  6EFD               	movwf	tosl,c
  1658  001A44  5036               	movf	_serial_write+1,w,c
  1659  001A46  6EFE               	movwf	tosh,c
  1660  001A48  50F8               	movf	tblptru,w,c
  1661  001A4A  6EFF               	movwf	tosu,c
  1662  001A4C  50FA               	movf	pclath,w,c
  1663  001A4E  503E               	movf	_moduleAddress,w,c
  1664  001A50  0012               	return		;indir
  1665  001A52                     l4404:
  1666                           
  1667                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1668  001A52  D801               	call	u4238
  1669  001A54  D00C               	goto	l4406
  1670  001A56                     u4238:
  1671  001A56  0005               	push	
  1672  001A58  6EFA               	movwf	pclath,c
  1673  001A5A  5035               	movf	_serial_write,w,c
  1674  001A5C  6EFD               	movwf	tosl,c
  1675  001A5E  5036               	movf	_serial_write+1,w,c
  1676  001A60  6EFE               	movwf	tosh,c
  1677  001A62  50F8               	movf	tblptru,w,c
  1678  001A64  6EFF               	movwf	tosu,c
  1679  001A66  50FA               	movf	pclath,w,c
  1680  001A68  0102               	movlb	2	; () banked
  1681  001A6A  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1682  001A6C  0012               	return		;indir
  1683  001A6E                     l4406:
  1684                           
  1685                           ;FastTransfer.c: 66: int i;
  1686                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1687  001A6E  0E00               	movlw	0
  1688  001A70  6E2B               	movwf	sendData@i+1,c
  1689  001A72  0E00               	movlw	0
  1690  001A74  6E2A               	movwf	sendData@i,c
  1691  001A76  D018               	goto	l4412
  1692  001A78                     l4408:
  1693                           
  1694                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1695  001A78  D801               	call	u4248
  1696  001A7A  D013               	goto	l4410
  1697  001A7C                     u4248:
  1698  001A7C  0005               	push	
  1699  001A7E  6EFA               	movwf	pclath,c
  1700  001A80  5035               	movf	_serial_write,w,c
  1701  001A82  6EFD               	movwf	tosl,c
  1702  001A84  5036               	movf	_serial_write+1,w,c
  1703  001A86  6EFE               	movwf	tosh,c
  1704  001A88  50F8               	movf	tblptru,w,c
  1705  001A8A  6EFF               	movwf	tosu,c
  1706  001A8C  50FA               	movf	pclath,w,c
  1707  001A8E  502A               	movf	sendData@i,w,c
  1708  001A90  0100               	movlb	0	; () banked
  1709  001A92  2598               	addwf	_sendStructAddress& (0+255),w,b
  1710  001A94  6ED9               	movwf	fsr2l,c
  1711  001A96  502B               	movf	sendData@i+1,w,c
  1712  001A98  0100               	movlb	0	; () banked
  1713  001A9A  2199               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  1714  001A9C  6EDA               	movwf	fsr2h,c
  1715  001A9E  50DF               	movf	indf2,w,c
  1716  001AA0  0012               	return		;indir
  1717  001AA2                     l4410:
  1718  001AA2  4A2A               	infsnz	sendData@i,f,c
  1719  001AA4  2A2B               	incf	sendData@i+1,f,c
  1720  001AA6  D000               	goto	l4412
  1721  001AA8                     l4412:
  1722  001AA8  0102               	movlb	2	; () banked
  1723  001AAA  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1724  001AAC  5C2A               	subwf	sendData@i,w,c
  1725  001AAE  502B               	movf	sendData@i+1,w,c
  1726  001AB0  0A80               	xorlw	128
  1727  001AB2  6E27               	movwf	??_sendData& (0+255),c
  1728  001AB4  0102               	movlb	2	; () banked
  1729  001AB6  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1730  001AB8  0A80               	xorlw	128
  1731  001ABA  5827               	subwfb	??_sendData& (0+255),w,c
  1732  001ABC  A0D8               	btfss	status,0,c
  1733  001ABE  D7DC               	goto	l4408
  1734                           
  1735                           ; BSR set to: 2
  1736                           ;FastTransfer.c: 69: }
  1737                           ;FastTransfer.c: 72: serial_write(CS);
  1738                           
  1739                           ; BSR set to: 2
  1740  001AC0  D801               	call	u4268
  1741  001AC2  D00B               	goto	l4416
  1742  001AC4                     u4268:
  1743  001AC4  0005               	push	
  1744  001AC6  6EFA               	movwf	pclath,c
  1745  001AC8  5035               	movf	_serial_write,w,c
  1746  001ACA  6EFD               	movwf	tosl,c
  1747  001ACC  5036               	movf	_serial_write+1,w,c
  1748  001ACE  6EFE               	movwf	tosh,c
  1749  001AD0  50F8               	movf	tblptru,w,c
  1750  001AD2  6EFF               	movwf	tosu,c
  1751  001AD4  50FA               	movf	pclath,w,c
  1752  001AD6  5029               	movf	sendData@CS,w,c
  1753  001AD8  0012               	return		;indir
  1754  001ADA                     l4416:
  1755                           
  1756                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1757  001ADA  0EB0               	movlw	low _crc_buffer
  1758  001ADC  6E1B               	movwf	crcBufS_put@_this,c
  1759  001ADE  0E00               	movlw	high _crc_buffer
  1760  001AE0  6E1C               	movwf	crcBufS_put@_this+1,c
  1761  001AE2  C028  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1762  001AE6  C029  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1763  001AEA  0E00               	movlw	0
  1764  001AEC  6E1F               	movwf	crcBufS_put@status,c
  1765  001AEE  ECAB  F00F         	call	_crcBufS_put
  1766                           
  1767                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1768  001AF2  0E00               	movlw	low _ring_buffer
  1769  001AF4  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1770  001AF6  0E02               	movlw	high _ring_buffer
  1771  001AF8  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1772  001AFA  0E00               	movlw	0
  1773  001AFC  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1774  001AFE  0E01               	movlw	1
  1775  001B00  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1776  001B02  EC55  F012         	call	_FastTransfer_buffer_flush	;wreg free
  1777  001B06  0012               	return		;funcret
  1778  001B08                     __end_of_sendData:
  1779                           	opt stack 0
  1780                           tosu	equ	0xFFF
  1781                           tosh	equ	0xFFE
  1782                           tosl	equ	0xFFD
  1783                           pclath	equ	0xFFA
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           intcon	equ	0xFF2
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           postdec1	equ	0xFE5
  1792                           fsr1l	equ	0xFE1
  1793                           indf2	equ	0xFDF
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _crcBufS_put *****************
  1799 ;; Defined at:
  1800 ;;		line 321 in file "FastTransfer.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1803 ;;		 -> crc_buffer(17), 
  1804 ;;  address         1   28[COMRAM] unsigned char 
  1805 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1806 ;;  status          1   30[COMRAM] unsigned char 
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;		None
  1809 ;; Return value:  Size  Location     Type
  1810 ;;		None               void
  1811 ;; Registers used:
  1812 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1818 ;;      Params:         5       0       0       0       0       0       0
  1819 ;;      Locals:         0       0       0       0       0       0       0
  1820 ;;      Temps:          2       0       0       0       0       0       0
  1821 ;;      Totals:         7       0       0       0       0       0       0
  1822 ;;Total ram usage:        7 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; Hardware stack levels required when called:    4
  1825 ;; This function calls:
  1826 ;;		Nothing
  1827 ;; This function is called by:
  1828 ;;		_sendData
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	text3
  1833  001F56                     __ptext3:
  1834                           	opt stack 0
  1835  001F56                     _crcBufS_put:
  1836                           	opt stack 24
  1837                           
  1838                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1839                           
  1840                           ;incstack = 0
  1841  001F56  EE20 F00F          	lfsr	2,15
  1842  001F5A  501B               	movf	crcBufS_put@_this,w,c
  1843  001F5C  26D9               	addwf	fsr2l,f,c
  1844  001F5E  501C               	movf	crcBufS_put@_this+1,w,c
  1845  001F60  22DA               	addwfc	fsr2h,f,c
  1846  001F62  CFDE F020          	movff	postinc2,??_crcBufS_put
  1847  001F66  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1848  001F6A  5020               	movf	??_crcBufS_put,w,c
  1849  001F6C  241B               	addwf	crcBufS_put@_this,w,c
  1850  001F6E  6ED9               	movwf	fsr2l,c
  1851  001F70  5021               	movf	??_crcBufS_put+1,w,c
  1852  001F72  201C               	addwfc	crcBufS_put@_this+1,w,c
  1853  001F74  6EDA               	movwf	fsr2h,c
  1854  001F76  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1855                           
  1856                           ;FastTransfer.c: 323: _this->head++;
  1857  001F7A  EE20 F00F          	lfsr	2,15
  1858  001F7E  501B               	movf	crcBufS_put@_this,w,c
  1859  001F80  26D9               	addwf	fsr2l,f,c
  1860  001F82  501C               	movf	crcBufS_put@_this+1,w,c
  1861  001F84  22DA               	addwfc	fsr2h,f,c
  1862  001F86  2ADE               	incf	postinc2,f,c
  1863  001F88  0E00               	movlw	0
  1864  001F8A  22DD               	addwfc	postdec2,f,c
  1865                           
  1866                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1867  001F8C  EE20 F00F          	lfsr	2,15
  1868  001F90  501B               	movf	crcBufS_put@_this,w,c
  1869  001F92  26D9               	addwf	fsr2l,f,c
  1870  001F94  501C               	movf	crcBufS_put@_this+1,w,c
  1871  001F96  22DA               	addwfc	fsr2h,f,c
  1872  001F98  CFDE F020          	movff	postinc2,??_crcBufS_put
  1873  001F9C  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1874  001FA0  5020               	movf	??_crcBufS_put,w,c
  1875  001FA2  241B               	addwf	crcBufS_put@_this,w,c
  1876  001FA4  6ED9               	movwf	fsr2l,c
  1877  001FA6  5021               	movf	??_crcBufS_put+1,w,c
  1878  001FA8  201C               	addwfc	crcBufS_put@_this+1,w,c
  1879  001FAA  6EDA               	movwf	fsr2h,c
  1880  001FAC  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1881                           
  1882                           ;FastTransfer.c: 325: _this->head++;
  1883  001FB0  EE20 F00F          	lfsr	2,15
  1884  001FB4  501B               	movf	crcBufS_put@_this,w,c
  1885  001FB6  26D9               	addwf	fsr2l,f,c
  1886  001FB8  501C               	movf	crcBufS_put@_this+1,w,c
  1887  001FBA  22DA               	addwfc	fsr2h,f,c
  1888  001FBC  2ADE               	incf	postinc2,f,c
  1889  001FBE  0E00               	movlw	0
  1890  001FC0  22DD               	addwfc	postdec2,f,c
  1891                           
  1892                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1893  001FC2  EE20 F00F          	lfsr	2,15
  1894  001FC6  501B               	movf	crcBufS_put@_this,w,c
  1895  001FC8  26D9               	addwf	fsr2l,f,c
  1896  001FCA  501C               	movf	crcBufS_put@_this+1,w,c
  1897  001FCC  22DA               	addwfc	fsr2h,f,c
  1898  001FCE  CFDE F020          	movff	postinc2,??_crcBufS_put
  1899  001FD2  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1900  001FD6  5020               	movf	??_crcBufS_put,w,c
  1901  001FD8  241B               	addwf	crcBufS_put@_this,w,c
  1902  001FDA  6ED9               	movwf	fsr2l,c
  1903  001FDC  5021               	movf	??_crcBufS_put+1,w,c
  1904  001FDE  201C               	addwfc	crcBufS_put@_this+1,w,c
  1905  001FE0  6EDA               	movwf	fsr2h,c
  1906  001FE2  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1907                           
  1908                           ;FastTransfer.c: 327: _this->head++;
  1909  001FE6  EE20 F00F          	lfsr	2,15
  1910  001FEA  501B               	movf	crcBufS_put@_this,w,c
  1911  001FEC  26D9               	addwf	fsr2l,f,c
  1912  001FEE  501C               	movf	crcBufS_put@_this+1,w,c
  1913  001FF0  22DA               	addwfc	fsr2h,f,c
  1914  001FF2  2ADE               	incf	postinc2,f,c
  1915  001FF4  0E00               	movlw	0
  1916  001FF6  22DD               	addwfc	postdec2,f,c
  1917                           
  1918                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1919  001FF8  EE20 F00F          	lfsr	2,15
  1920  001FFC  501B               	movf	crcBufS_put@_this,w,c
  1921  001FFE  26D9               	addwf	fsr2l,f,c
  1922  002000  501C               	movf	crcBufS_put@_this+1,w,c
  1923  002002  22DA               	addwfc	fsr2h,f,c
  1924  002004  0E01               	movlw	1
  1925  002006  BEDB               	btfsc	plusw2,7,c
  1926  002008  0012               	return	
  1927  00200A  0E01               	movlw	1
  1928  00200C  50DB               	movf	plusw2,w,c
  1929  00200E  E104               	bnz	u1980
  1930  002010  0E0F               	movlw	15
  1931  002012  5CDE               	subwf	postinc2,w,c
  1932  002014  A0D8               	btfss	status,0,c
  1933  002016  0012               	return	
  1934  002018                     u1980:
  1935                           
  1936                           ;FastTransfer.c: 329: _this->head = 0;
  1937  002018  EE20 F00F          	lfsr	2,15
  1938  00201C  501B               	movf	crcBufS_put@_this,w,c
  1939  00201E  26D9               	addwf	fsr2l,f,c
  1940  002020  501C               	movf	crcBufS_put@_this+1,w,c
  1941  002022  22DA               	addwfc	fsr2h,f,c
  1942  002024  0E00               	movlw	0
  1943  002026  6EDE               	movwf	postinc2,c
  1944  002028  0E00               	movlw	0
  1945  00202A  6EDD               	movwf	postdec2,c
  1946  00202C  0012               	return	
  1947  00202E  0012               	return		;funcret
  1948  002030                     __end_of_crcBufS_put:
  1949                           	opt stack 0
  1950                           tosu	equ	0xFFF
  1951                           tosh	equ	0xFFE
  1952                           tosl	equ	0xFFD
  1953                           pclath	equ	0xFFA
  1954                           tblptru	equ	0xFF8
  1955                           tblptrh	equ	0xFF7
  1956                           tblptrl	equ	0xFF6
  1957                           tablat	equ	0xFF5
  1958                           intcon	equ	0xFF2
  1959                           postinc0	equ	0xFEE
  1960                           wreg	equ	0xFE8
  1961                           postdec1	equ	0xFE5
  1962                           fsr1l	equ	0xFE1
  1963                           indf2	equ	0xFDF
  1964                           postinc2	equ	0xFDE
  1965                           postdec2	equ	0xFDD
  1966                           plusw2	equ	0xFDB
  1967                           fsr2h	equ	0xFDA
  1968                           fsr2l	equ	0xFD9
  1969                           status	equ	0xFD8
  1970                           
  1971 ;; *************** function _FastTransfer_buffer_flush *****************
  1972 ;; Defined at:
  1973 ;;		line 261 in file "FastTransfer.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1976 ;;		 -> ring_buffer(206), 
  1977 ;;  clearBuffer     2   36[COMRAM] const int 
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;		None               void
  1982 ;; Registers used:
  1983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1989 ;;      Params:         4       0       0       0       0       0       0
  1990 ;;      Locals:         0       0       0       0       0       0       0
  1991 ;;      Temps:          0       0       0       0       0       0       0
  1992 ;;      Totals:         4       0       0       0       0       0       0
  1993 ;;Total ram usage:        4 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    5
  1996 ;; This function calls:
  1997 ;;		_memset
  1998 ;; This function is called by:
  1999 ;;		_sendData
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text4
  2004  0024AA                     __ptext4:
  2005                           	opt stack 0
  2006  0024AA                     _FastTransfer_buffer_flush:
  2007                           	opt stack 23
  2008                           
  2009                           ;FastTransfer.c: 262: _this->count = 0;
  2010                           
  2011                           ;incstack = 0
  2012  0024AA  EE20 F0CC          	lfsr	2,204
  2013  0024AE  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2014  0024B0  26D9               	addwf	fsr2l,f,c
  2015  0024B2  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2016  0024B4  22DA               	addwfc	fsr2h,f,c
  2017  0024B6  0E00               	movlw	0
  2018  0024B8  6EDE               	movwf	postinc2,c
  2019  0024BA  0E00               	movlw	0
  2020  0024BC  6EDD               	movwf	postdec2,c
  2021                           
  2022                           ;FastTransfer.c: 263: _this->head = 0;
  2023  0024BE  EE20 F0C8          	lfsr	2,200
  2024  0024C2  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2025  0024C4  26D9               	addwf	fsr2l,f,c
  2026  0024C6  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2027  0024C8  22DA               	addwfc	fsr2h,f,c
  2028  0024CA  0E00               	movlw	0
  2029  0024CC  6EDE               	movwf	postinc2,c
  2030  0024CE  0E00               	movlw	0
  2031  0024D0  6EDD               	movwf	postdec2,c
  2032                           
  2033                           ;FastTransfer.c: 264: _this->tail = 0;
  2034  0024D2  EE20 F0CA          	lfsr	2,202
  2035  0024D6  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2036  0024D8  26D9               	addwf	fsr2l,f,c
  2037  0024DA  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2038  0024DC  22DA               	addwfc	fsr2h,f,c
  2039  0024DE  0E00               	movlw	0
  2040  0024E0  6EDE               	movwf	postinc2,c
  2041  0024E2  0E00               	movlw	0
  2042  0024E4  6EDD               	movwf	postdec2,c
  2043                           
  2044                           ;FastTransfer.c: 265: if (clearBuffer) {
  2045  0024E6  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  2046  0024E8  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  2047  0024EA  B4D8               	btfsc	status,2,c
  2048  0024EC  0012               	return	
  2049                           
  2050                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2051  0024EE  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2052  0024F2  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2053  0024F6  0E00               	movlw	0
  2054  0024F8  6E1E               	movwf	memset@c+1,c
  2055  0024FA  0E00               	movlw	0
  2056  0024FC  6E1D               	movwf	memset@c,c
  2057  0024FE  0E00               	movlw	0
  2058  002500  6E20               	movwf	memset@n+1,c
  2059  002502  0EC8               	movlw	200
  2060  002504  6E1F               	movwf	memset@n,c
  2061  002506  EC06  F014         	call	_memset	;wreg free
  2062  00250A  0012               	return	
  2063  00250C  0012               	return		;funcret
  2064  00250E                     __end_of_FastTransfer_buffer_flush:
  2065                           	opt stack 0
  2066                           tosu	equ	0xFFF
  2067                           tosh	equ	0xFFE
  2068                           tosl	equ	0xFFD
  2069                           pclath	equ	0xFFA
  2070                           tblptru	equ	0xFF8
  2071                           tblptrh	equ	0xFF7
  2072                           tblptrl	equ	0xFF6
  2073                           tablat	equ	0xFF5
  2074                           intcon	equ	0xFF2
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           postdec1	equ	0xFE5
  2078                           fsr1l	equ	0xFE1
  2079                           indf2	equ	0xFDF
  2080                           postinc2	equ	0xFDE
  2081                           postdec2	equ	0xFDD
  2082                           plusw2	equ	0xFDB
  2083                           fsr2h	equ	0xFDA
  2084                           fsr2l	equ	0xFD9
  2085                           status	equ	0xFD8
  2086                           
  2087 ;; *************** function _receiveData *****************
  2088 ;; Defined at:
  2089 ;;		line 82 in file "FastTransfer.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;		None
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  holder          3   10[BANK0 ] unsigned char [3]
  2094 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2095 ;;  holder          3    7[BANK0 ] unsigned char [3]
  2096 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2097 ;;  u               2   15[BANK0 ] int 
  2098 ;;  r               2   17[BANK0 ] int 
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      unsigned char 
  2101 ;; Registers used:
  2102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2108 ;;      Params:         0       0       0       0       0       0       0
  2109 ;;      Locals:         0      12       0       0       0       0       0
  2110 ;;      Temps:          6       0       0       0       0       0       0
  2111 ;;      Totals:         6      12       0       0       0       0       0
  2112 ;;Total ram usage:       18 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    8
  2115 ;; This function calls:
  2116 ;;		Absolute function
  2117 ;;		_CRC8
  2118 ;;		_CRCcheck
  2119 ;;		_Receive_available
  2120 ;;		_Receive_get
  2121 ;;		_Receive_peek
  2122 ;;		_Send_put
  2123 ;; This function is called by:
  2124 ;;		_updateComms
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text5
  2129  00061E                     __ptext5:
  2130                           	opt stack 0
  2131  00061E                     _receiveData:
  2132                           	opt stack 21
  2133                           
  2134                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2135                           
  2136                           ;incstack = 0
  2137  00061E  5042               	movf	_rx_len,w,c
  2138  000620  A4D8               	btfss	status,2,c
  2139  000622  D0AA               	goto	l4458
  2140                           
  2141                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2142  000624  D801               	call	u4288
  2143  000626  D00A               	goto	u4289
  2144  000628                     u4288:
  2145  000628  0005               	push	
  2146  00062A  6EFA               	movwf	pclath,c
  2147  00062C  5031               	movf	_serial_available,w,c
  2148  00062E  6EFD               	movwf	tosl,c
  2149  000630  5032               	movf	_serial_available+1,w,c
  2150  000632  6EFE               	movwf	tosh,c
  2151  000634  50F8               	movf	tblptru,w,c
  2152  000636  6EFF               	movwf	tosu,c
  2153  000638  50FA               	movf	pclath,w,c
  2154  00063A  0012               	return		;indir
  2155  00063C                     u4289:
  2156  00063C  BE1E               	btfsc	?_Receive_available+1,7,c
  2157  00063E  D09C               	goto	l4458
  2158  000640  501E               	movf	?_Receive_available+1,w,c
  2159  000642  E120               	bnz	l4434
  2160  000644  0E05               	movlw	5
  2161  000646  5C1D               	subwf	?_Receive_available,w,c
  2162  000648  B0D8               	btfsc	status,0,c
  2163  00064A  D01C               	goto	l4434
  2164  00064C  D095               	goto	l4458
  2165                           
  2166                           ;FastTransfer.c: 89: while (serial_read() != 0x06) {
  2167  00064E  D01A               	goto	l4434
  2168  000650                     l4426:
  2169                           
  2170                           ;FastTransfer.c: 93: alignErrorCounter++;
  2171  000650  0100               	movlb	0	; () banked
  2172  000652  4B8E               	infsnz	_alignErrorCounter& (0+255),f,b
  2173  000654  2B8F               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2177  000656  D801               	call	u4308
  2178  000658  D00A               	goto	u4309
  2179  00065A                     u4308:
  2180  00065A  0005               	push	
  2181  00065C  6EFA               	movwf	pclath,c
  2182  00065E  5031               	movf	_serial_available,w,c
  2183  000660  6EFD               	movwf	tosl,c
  2184  000662  5032               	movf	_serial_available+1,w,c
  2185  000664  6EFE               	movwf	tosh,c
  2186  000666  50F8               	movf	tblptru,w,c
  2187  000668  6EFF               	movwf	tosu,c
  2188  00066A  50FA               	movf	pclath,w,c
  2189  00066C  0012               	return		;indir
  2190  00066E                     u4309:
  2191  00066E  BE1E               	btfsc	?_Receive_available+1,7,c
  2192  000670  D006               	goto	l4430
  2193  000672  501E               	movf	?_Receive_available+1,w,c
  2194  000674  E107               	bnz	l4434
  2195  000676  0E05               	movlw	5
  2196  000678  5C1D               	subwf	?_Receive_available,w,c
  2197  00067A  B0D8               	btfsc	status,0,c
  2198  00067C  D003               	goto	l4434
  2199  00067E                     l4430:
  2200                           
  2201                           ;FastTransfer.c: 95: return 0;
  2202  00067E  0E00               	movlw	0
  2203  000680  0012               	return	
  2204  000682  D000               	goto	l4434
  2205  000684                     l4434:
  2206  000684  D801               	call	u4328
  2207  000686  D00A               	goto	u4329
  2208  000688                     u4328:
  2209  000688  0005               	push	
  2210  00068A  6EFA               	movwf	pclath,c
  2211  00068C  5033               	movf	_serial_read,w,c
  2212  00068E  6EFD               	movwf	tosl,c
  2213  000690  5034               	movf	_serial_read+1,w,c
  2214  000692  6EFE               	movwf	tosh,c
  2215  000694  50F8               	movf	tblptru,w,c
  2216  000696  6EFF               	movwf	tosu,c
  2217  000698  50FA               	movf	pclath,w,c
  2218  00069A  0012               	return		;indir
  2219  00069C                     u4329:
  2220  00069C  0A06               	xorlw	6
  2221  00069E  A4D8               	btfss	status,2,c
  2222  0006A0  D7D7               	goto	l4426
  2223                           
  2224                           ;FastTransfer.c: 96: }
  2225                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2226  0006A2  D801               	call	u4348
  2227  0006A4  D00A               	goto	u4349
  2228  0006A6                     u4348:
  2229  0006A6  0005               	push	
  2230  0006A8  6EFA               	movwf	pclath,c
  2231  0006AA  5033               	movf	_serial_read,w,c
  2232  0006AC  6EFD               	movwf	tosl,c
  2233  0006AE  5034               	movf	_serial_read+1,w,c
  2234  0006B0  6EFE               	movwf	tosh,c
  2235  0006B2  50F8               	movf	tblptru,w,c
  2236  0006B4  6EFF               	movwf	tosu,c
  2237  0006B6  50FA               	movf	pclath,w,c
  2238  0006B8  0012               	return		;indir
  2239  0006BA                     u4349:
  2240  0006BA  0A85               	xorlw	133
  2241  0006BC  A4D8               	btfss	status,2,c
  2242  0006BE  D05C               	goto	l4458
  2243                           
  2244                           ;FastTransfer.c: 98: rx_address = serial_read();
  2245  0006C0  D801               	call	u4368
  2246  0006C2  D00A               	goto	u4369
  2247  0006C4                     u4368:
  2248  0006C4  0005               	push	
  2249  0006C6  6EFA               	movwf	pclath,c
  2250  0006C8  5033               	movf	_serial_read,w,c
  2251  0006CA  6EFD               	movwf	tosl,c
  2252  0006CC  5034               	movf	_serial_read+1,w,c
  2253  0006CE  6EFE               	movwf	tosh,c
  2254  0006D0  50F8               	movf	tblptru,w,c
  2255  0006D2  6EFF               	movwf	tosu,c
  2256  0006D4  50FA               	movf	pclath,w,c
  2257  0006D6  0012               	return		;indir
  2258  0006D8                     u4369:
  2259  0006D8  6E40               	movwf	_rx_address,c
  2260                           
  2261                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2262  0006DA  D801               	call	u4378
  2263  0006DC  D00A               	goto	u4379
  2264  0006DE                     u4378:
  2265  0006DE  0005               	push	
  2266  0006E0  6EFA               	movwf	pclath,c
  2267  0006E2  5033               	movf	_serial_read,w,c
  2268  0006E4  6EFD               	movwf	tosl,c
  2269  0006E6  5034               	movf	_serial_read+1,w,c
  2270  0006E8  6EFE               	movwf	tosh,c
  2271  0006EA  50F8               	movf	tblptru,w,c
  2272  0006EC  6EFF               	movwf	tosu,c
  2273  0006EE  50FA               	movf	pclath,w,c
  2274  0006F0  0012               	return		;indir
  2275  0006F2                     u4379:
  2276  0006F2  6E3F               	movwf	_returnAddress,c
  2277                           
  2278                           ;FastTransfer.c: 100: rx_len = serial_read();
  2279  0006F4  D801               	call	u4388
  2280  0006F6  D00A               	goto	u4389
  2281  0006F8                     u4388:
  2282  0006F8  0005               	push	
  2283  0006FA  6EFA               	movwf	pclath,c
  2284  0006FC  5033               	movf	_serial_read,w,c
  2285  0006FE  6EFD               	movwf	tosl,c
  2286  000700  5034               	movf	_serial_read+1,w,c
  2287  000702  6EFE               	movwf	tosh,c
  2288  000704  50F8               	movf	tblptru,w,c
  2289  000706  6EFF               	movwf	tosu,c
  2290  000708  50FA               	movf	pclath,w,c
  2291  00070A  0012               	return		;indir
  2292  00070C                     u4389:
  2293  00070C  6E42               	movwf	_rx_len,c
  2294                           
  2295                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2296  00070E  503E               	movf	_moduleAddress,w,c
  2297  000710  1840               	xorwf	_rx_address,w,c
  2298  000712  B4D8               	btfsc	status,2,c
  2299  000714  D031               	goto	l4458
  2300                           
  2301                           ;FastTransfer.c: 103: addressErrorCounter++;
  2302  000716  0100               	movlb	0	; () banked
  2303  000718  4B8C               	infsnz	_addressErrorCounter& (0+255),f,b
  2304  00071A  2B8D               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;FastTransfer.c: 106: int u;
  2308                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2309  00071C  0E00               	movlw	0
  2310  00071E  0100               	movlb	0	; () banked
  2311  000720  6FD1               	movwf	(receiveData@u+1)& (0+255),b
  2312  000722  0E00               	movlw	0
  2313  000724  6FD0               	movwf	receiveData@u& (0+255),b
  2314  000726  D010               	goto	l4450
  2315  000728                     l4446:
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;FastTransfer.c: 108: serial_read();
  2319  000728  D801               	call	u4408
  2320  00072A  D00A               	goto	l4448
  2321  00072C                     u4408:
  2322  00072C  0005               	push	
  2323  00072E  6EFA               	movwf	pclath,c
  2324  000730  5033               	movf	_serial_read,w,c
  2325  000732  6EFD               	movwf	tosl,c
  2326  000734  5034               	movf	_serial_read+1,w,c
  2327  000736  6EFE               	movwf	tosh,c
  2328  000738  50F8               	movf	tblptru,w,c
  2329  00073A  6EFF               	movwf	tosu,c
  2330  00073C  50FA               	movf	pclath,w,c
  2331  00073E  0012               	return		;indir
  2332  000740                     l4448:
  2333  000740  0100               	movlb	0	; () banked
  2334  000742  4BD0               	infsnz	receiveData@u& (0+255),f,b
  2335  000744  2BD1               	incf	(receiveData@u+1)& (0+255),f,b
  2336  000746  D000               	goto	l4450
  2337  000748                     l4450:
  2338                           
  2339                           ; BSR set to: 0
  2340  000748  5042               	movf	_rx_len,w,c
  2341  00074A  6E27               	movwf	??_receiveData& (0+255),c
  2342  00074C  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2343  00074E  0E01               	movlw	1
  2344  000750  2627               	addwf	??_receiveData,f,c
  2345  000752  0E00               	movlw	0
  2346  000754  2228               	addwfc	??_receiveData+1,f,c
  2347  000756  0100               	movlb	0	; () banked
  2348  000758  51D0               	movf	receiveData@u& (0+255),w,b
  2349  00075A  5C27               	subwf	??_receiveData,w,c
  2350  00075C  5028               	movf	??_receiveData+1,w,c
  2351  00075E  0A80               	xorlw	128
  2352  000760  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2353  000762  0100               	movlb	0	; () banked
  2354  000764  51D1               	movf	(receiveData@u+1)& (0+255),w,b
  2355  000766  0A80               	xorlw	128
  2356  000768  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2357  00076A  B0D8               	btfsc	status,0,c
  2358  00076C  D7DD               	goto	l4446
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;FastTransfer.c: 109: }
  2362                           ;FastTransfer.c: 110: rx_len = 0;
  2363                           
  2364                           ; BSR set to: 0
  2365  00076E  0E00               	movlw	0
  2366  000770  6E42               	movwf	_rx_len,c
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;FastTransfer.c: 111: return 0;
  2370  000772  0E00               	movlw	0
  2371                           
  2372                           ; BSR set to: 0
  2373  000774  0012               	return	
  2374                           
  2375                           ; BSR set to: 0
  2376                           
  2377                           ; BSR set to: 0
  2378                           
  2379                           ; BSR set to: 0
  2380  000776  D000               	goto	l4458
  2381  000778                     l4458:
  2382                           
  2383                           ;FastTransfer.c: 112: }
  2384                           ;FastTransfer.c: 114: }
  2385                           ;FastTransfer.c: 115: }
  2386                           ;FastTransfer.c: 116: }
  2387                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2388  000778  5042               	movf	_rx_len,w,c
  2389  00077A  B4D8               	btfsc	status,2,c
  2390  00077C  D269               	goto	l4582
  2391                           
  2392                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2393  00077E  5041               	movf	_rx_array_inx,w,c
  2394  000780  B4D8               	btfsc	status,2,c
  2395  000782  D002               	goto	l4464
  2396  000784  D048               	goto	l4482
  2397                           
  2398                           ;FastTransfer.c: 123: while (!(serial_available() >= 1));
  2399  000786  D000               	goto	l4464
  2400  000788                     l4464:
  2401  000788  D801               	call	u4448
  2402  00078A  D00A               	goto	u4449
  2403  00078C                     u4448:
  2404  00078C  0005               	push	
  2405  00078E  6EFA               	movwf	pclath,c
  2406  000790  5031               	movf	_serial_available,w,c
  2407  000792  6EFD               	movwf	tosl,c
  2408  000794  5032               	movf	_serial_available+1,w,c
  2409  000796  6EFE               	movwf	tosh,c
  2410  000798  50F8               	movf	tblptru,w,c
  2411  00079A  6EFF               	movwf	tosu,c
  2412  00079C  50FA               	movf	pclath,w,c
  2413  00079E  0012               	return		;indir
  2414  0007A0                     u4449:
  2415  0007A0  BE1E               	btfsc	?_Receive_available+1,7,c
  2416  0007A2  D7F2               	goto	l4464
  2417  0007A4  501E               	movf	?_Receive_available+1,w,c
  2418  0007A6  E105               	bnz	l4466
  2419  0007A8  041D               	decf	?_Receive_available,w,c
  2420  0007AA  B0D8               	btfsc	status,0,c
  2421  0007AC  D002               	goto	l4466
  2422  0007AE  D7EC               	goto	l4464
  2423  0007B0  D000               	goto	l4466
  2424  0007B2                     l4466:
  2425                           
  2426                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2427  0007B2  D801               	call	u4468
  2428  0007B4  D00B               	goto	u4469
  2429  0007B6                     u4468:
  2430  0007B6  0005               	push	
  2431  0007B8  0100               	movlb	0	; () banked
  2432  0007BA  6EFA               	movwf	pclath,c
  2433  0007BC  519A               	movf	_serial_peek& (0+255),w,b
  2434  0007BE  6EFD               	movwf	tosl,c
  2435  0007C0  519B               	movf	(_serial_peek+1)& (0+255),w,b
  2436  0007C2  6EFE               	movwf	tosh,c
  2437  0007C4  50F8               	movf	tblptru,w,c
  2438  0007C6  6EFF               	movwf	tosu,c
  2439  0007C8  50FA               	movf	pclath,w,c
  2440  0007CA  0012               	return		;indir
  2441  0007CC                     u4469:
  2442  0007CC  0AFF               	xorlw	255
  2443  0007CE  A4D8               	btfss	status,2,c
  2444  0007D0  D022               	goto	l4482
  2445                           
  2446                           ;FastTransfer.c: 125: CRCcheck();
  2447  0007D2  ECD6  F00A         	call	_CRCcheck	;wreg free
  2448                           
  2449                           ;FastTransfer.c: 126: rx_len = 0;
  2450  0007D6  0E00               	movlw	0
  2451  0007D8  6E42               	movwf	_rx_len,c
  2452                           
  2453                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2454  0007DA  0E00               	movlw	0
  2455  0007DC  6E41               	movwf	_rx_array_inx,c
  2456                           
  2457                           ;FastTransfer.c: 128: return 0;
  2458  0007DE  0E00               	movlw	0
  2459  0007E0  0012               	return	
  2460                           
  2461                           ;FastTransfer.c: 129: }
  2462                           ;FastTransfer.c: 130: }
  2463                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2464  0007E2  D019               	goto	l4482
  2465  0007E4                     l4478:
  2466                           
  2467                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2468  0007E4  D801               	call	u4488
  2469  0007E6  D00A               	goto	u4489
  2470  0007E8                     u4488:
  2471  0007E8  0005               	push	
  2472  0007EA  6EFA               	movwf	pclath,c
  2473  0007EC  5033               	movf	_serial_read,w,c
  2474  0007EE  6EFD               	movwf	tosl,c
  2475  0007F0  5034               	movf	_serial_read+1,w,c
  2476  0007F2  6EFE               	movwf	tosh,c
  2477  0007F4  50F8               	movf	tblptru,w,c
  2478  0007F6  6EFF               	movwf	tosu,c
  2479  0007F8  50FA               	movf	pclath,w,c
  2480  0007FA  0012               	return		;indir
  2481  0007FC                     u4489:
  2482  0007FC  6E27               	movwf	??_receiveData& (0+255),c
  2483  0007FE  5041               	movf	_rx_array_inx,w,c
  2484  000800  0D01               	mullw	1
  2485  000802  0E00               	movlw	low _rx_buffer
  2486  000804  24F3               	addwf	prodl,w,c
  2487  000806  6ED9               	movwf	fsr2l,c
  2488  000808  0E03               	movlw	high _rx_buffer
  2489  00080A  20F4               	addwfc	prodh,w,c
  2490  00080C  6EDA               	movwf	fsr2h,c
  2491  00080E  C027  FFDF         	movff	??_receiveData,indf2
  2492  000812  2A41               	incf	_rx_array_inx,f,c
  2493  000814  D000               	goto	l4482
  2494  000816                     l4482:
  2495  000816  D801               	call	u4498
  2496  000818  D00A               	goto	u4499
  2497  00081A                     u4498:
  2498  00081A  0005               	push	
  2499  00081C  6EFA               	movwf	pclath,c
  2500  00081E  5031               	movf	_serial_available,w,c
  2501  000820  6EFD               	movwf	tosl,c
  2502  000822  5032               	movf	_serial_available+1,w,c
  2503  000824  6EFE               	movwf	tosh,c
  2504  000826  50F8               	movf	tblptru,w,c
  2505  000828  6EFF               	movwf	tosu,c
  2506  00082A  50FA               	movf	pclath,w,c
  2507  00082C  0012               	return		;indir
  2508  00082E                     u4499:
  2509  00082E  501D               	movf	?_Receive_available,w,c
  2510  000830  101E               	iorwf	?_Receive_available+1,w,c
  2511  000832  B4D8               	btfsc	status,2,c
  2512  000834  D006               	goto	l4486
  2513  000836  5041               	movf	_rx_array_inx,w,c
  2514  000838  5C42               	subwf	_rx_len,w,c
  2515  00083A  A0D8               	btfss	status,0,c
  2516  00083C  D002               	goto	l4486
  2517  00083E  D7D2               	goto	l4478
  2518  000840  D000               	goto	l4486
  2519  000842                     l4486:
  2520                           
  2521                           ;FastTransfer.c: 135: }
  2522                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2523  000842  5042               	movf	_rx_len,w,c
  2524  000844  6E27               	movwf	??_receiveData& (0+255),c
  2525  000846  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2526  000848  0EFF               	movlw	255
  2527  00084A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2528  00084C  0EFF               	movlw	255
  2529  00084E  6E2A               	movwf	(??_receiveData+3)& (0+255),c
  2530  000850  5041               	movf	_rx_array_inx,w,c
  2531  000852  6E2B               	movwf	(??_receiveData+4)& (0+255),c
  2532  000854  6A2C               	clrf	(??_receiveData+5)& (0+255),c
  2533  000856  5029               	movf	??_receiveData+2,w,c
  2534  000858  262B               	addwf	??_receiveData+4,f,c
  2535  00085A  502A               	movf	??_receiveData+3,w,c
  2536  00085C  222C               	addwfc	??_receiveData+5,f,c
  2537  00085E  5027               	movf	??_receiveData,w,c
  2538  000860  182B               	xorwf	??_receiveData+4,w,c
  2539  000862  E103               	bnz	u4521
  2540  000864  5028               	movf	??_receiveData+1,w,c
  2541  000866  182C               	xorwf	??_receiveData+5,w,c
  2542  000868  A4D8               	btfss	status,2,c
  2543  00086A                     u4521:
  2544  00086A  D1F2               	goto	l4582
  2545                           
  2546                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2547  00086C  0E00               	movlw	low _rx_buffer
  2548  00086E  6E1B               	movwf	CRC8@data,c
  2549  000870  0E03               	movlw	high _rx_buffer
  2550  000872  6E1C               	movwf	CRC8@data+1,c
  2551  000874  C042  F01D         	movff	_rx_len,CRC8@len
  2552  000878  ECB6  F012         	call	_CRC8	;wreg free
  2553  00087C  6E3C               	movwf	_calc_CS,c
  2554                           
  2555                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2556  00087E  0EFF               	movlw	255
  2557  000880  6E27               	movwf	??_receiveData& (0+255),c
  2558  000882  0EFF               	movlw	255
  2559  000884  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2560  000886  5041               	movf	_rx_array_inx,w,c
  2561  000888  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2562  00088A  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2563  00088C  5027               	movf	??_receiveData,w,c
  2564  00088E  2629               	addwf	??_receiveData+2,f,c
  2565  000890  5028               	movf	??_receiveData+1,w,c
  2566  000892  222A               	addwfc	??_receiveData+3,f,c
  2567  000894  0E00               	movlw	low _rx_buffer
  2568  000896  2429               	addwf	??_receiveData+2,w,c
  2569  000898  6ED9               	movwf	fsr2l,c
  2570  00089A  0E03               	movlw	high _rx_buffer
  2571  00089C  202A               	addwfc	??_receiveData+3,w,c
  2572  00089E  6EDA               	movwf	fsr2h,c
  2573  0008A0  503C               	movf	_calc_CS,w,c
  2574  0008A2  18DE               	xorwf	postinc2,w,c
  2575  0008A4  A4D8               	btfss	status,2,c
  2576  0008A6  D11D               	goto	l4544
  2577                           
  2578                           ;FastTransfer.c: 147: int r;
  2579                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2580  0008A8  0E00               	movlw	0
  2581  0008AA  0100               	movlb	0	; () banked
  2582  0008AC  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  2583  0008AE  0E00               	movlw	0
  2584  0008B0  6FD2               	movwf	receiveData@r& (0+255),b
  2585  0008B2  D054               	goto	l4504
  2586  0008B4                     l4494:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2590  0008B4  0E00               	movlw	low _rx_buffer
  2591  0008B6  0100               	movlb	0	; () banked
  2592  0008B8  25D2               	addwf	receiveData@r& (0+255),w,b
  2593  0008BA  6ED9               	movwf	fsr2l,c
  2594  0008BC  0E03               	movlw	high _rx_buffer
  2595  0008BE  0100               	movlb	0	; () banked
  2596  0008C0  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2597  0008C2  6EDA               	movwf	fsr2h,c
  2598  0008C4  503D               	movf	_maxDataAddress,w,c
  2599  0008C6  5CDE               	subwf	postinc2,w,c
  2600  0008C8  B0D8               	btfsc	status,0,c
  2601  0008CA  D039               	goto	l4500
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2605  0008CC  0E01               	movlw	1
  2606  0008CE  0100               	movlb	0	; () banked
  2607  0008D0  25D2               	addwf	receiveData@r& (0+255),w,b
  2608  0008D2  6E27               	movwf	??_receiveData& (0+255),c
  2609  0008D4  0E00               	movlw	0
  2610  0008D6  0100               	movlb	0	; () banked
  2611  0008D8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2612  0008DA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2613  0008DC  0E00               	movlw	low _rx_buffer
  2614  0008DE  2427               	addwf	??_receiveData,w,c
  2615  0008E0  6ED9               	movwf	fsr2l,c
  2616  0008E2  0E03               	movlw	high _rx_buffer
  2617  0008E4  2028               	addwfc	??_receiveData+1,w,c
  2618  0008E6  6EDA               	movwf	fsr2h,c
  2619  0008E8  50DF               	movf	indf2,w,c
  2620  0008EA  6E43               	movwf	_group,c
  2621                           
  2622                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2623  0008EC  0E02               	movlw	2
  2624  0008EE  0100               	movlb	0	; () banked
  2625  0008F0  25D2               	addwf	receiveData@r& (0+255),w,b
  2626  0008F2  6E27               	movwf	??_receiveData& (0+255),c
  2627  0008F4  0E00               	movlw	0
  2628  0008F6  0100               	movlb	0	; () banked
  2629  0008F8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2630  0008FA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2631  0008FC  0E00               	movlw	low _rx_buffer
  2632  0008FE  2427               	addwf	??_receiveData,w,c
  2633  000900  6ED9               	movwf	fsr2l,c
  2634  000902  0E03               	movlw	high _rx_buffer
  2635  000904  2028               	addwfc	??_receiveData+1,w,c
  2636  000906  6EDA               	movwf	fsr2h,c
  2637  000908  50DF               	movf	indf2,w,c
  2638  00090A  6E44               	movwf	_group+1,c
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2642  00090C  0E00               	movlw	low _rx_buffer
  2643  00090E  0100               	movlb	0	; () banked
  2644  000910  25D2               	addwf	receiveData@r& (0+255),w,b
  2645  000912  6ED9               	movwf	fsr2l,c
  2646  000914  0E03               	movlw	high _rx_buffer
  2647  000916  0100               	movlb	0	; () banked
  2648  000918  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2649  00091A  6EDA               	movwf	fsr2h,c
  2650  00091C  50DF               	movf	indf2,w,c
  2651  00091E  6E27               	movwf	??_receiveData& (0+255),c
  2652  000920  5027               	movf	??_receiveData,w,c
  2653  000922  0D02               	mullw	2
  2654  000924  50F3               	movf	prodl,w,c
  2655  000926  0100               	movlb	0	; () banked
  2656  000928  2596               	addwf	_receiveArrayAddress& (0+255),w,b
  2657  00092A  6ED9               	movwf	fsr2l,c
  2658  00092C  50F4               	movf	prodh,w,c
  2659  00092E  0100               	movlb	0	; () banked
  2660  000930  2197               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2661  000932  6EDA               	movwf	fsr2h,c
  2662  000934  C043  FFDE         	movff	_group,postinc2
  2663  000938  C044  FFDD         	movff	_group+1,postdec2
  2664                           
  2665                           ;FastTransfer.c: 153: } else {
  2666  00093C  D004               	goto	l4502
  2667  00093E                     l4500:
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2671  00093E  0100               	movlb	0	; () banked
  2672  000940  4B92               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2673  000942  2B93               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2674  000944  D000               	goto	l4502
  2675  000946                     l4502:
  2676                           
  2677                           ; BSR set to: 0
  2678  000946  0E03               	movlw	3
  2679  000948  0100               	movlb	0	; () banked
  2680  00094A  25D2               	addwf	receiveData@r& (0+255),w,b
  2681  00094C  0100               	movlb	0	; () banked
  2682  00094E  6FD2               	movwf	receiveData@r& (0+255),b
  2683  000950  0E00               	movlw	0
  2684  000952  0100               	movlb	0	; () banked
  2685  000954  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2686  000956  0100               	movlb	0	; () banked
  2687  000958  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  2688  00095A  D000               	goto	l4504
  2689  00095C                     l4504:
  2690                           
  2691                           ; BSR set to: 0
  2692  00095C  5042               	movf	_rx_len,w,c
  2693  00095E  6E27               	movwf	??_receiveData& (0+255),c
  2694  000960  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2695  000962  5027               	movf	??_receiveData,w,c
  2696  000964  0100               	movlb	0	; () banked
  2697  000966  5DD2               	subwf	receiveData@r& (0+255),w,b
  2698  000968  0100               	movlb	0	; () banked
  2699  00096A  51D3               	movf	(receiveData@r+1)& (0+255),w,b
  2700  00096C  0A80               	xorlw	128
  2701  00096E  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2702  000970  5028               	movf	??_receiveData+1,w,c
  2703  000972  0A80               	xorlw	128
  2704  000974  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2705  000976  A0D8               	btfss	status,0,c
  2706  000978  D79D               	goto	l4494
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;FastTransfer.c: 155: }
  2710                           ;FastTransfer.c: 156: }
  2711                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2712                           
  2713                           ; BSR set to: 0
  2714  00097A  5039               	movf	_AKNAKsend,w,c
  2715  00097C  B4D8               	btfsc	status,2,c
  2716  00097E  D0AA               	goto	l4534
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;FastTransfer.c: 160: unsigned char holder[3];
  2720                           ;FastTransfer.c: 161: holder[0] = 255;
  2721  000980  0100               	movlb	0	; () banked
  2722  000982  69C8               	setf	receiveData@holder& (0+255),b
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;FastTransfer.c: 162: holder[1] = 1;
  2726  000984  0E01               	movlw	1
  2727  000986  0100               	movlb	0	; () banked
  2728  000988  6FC9               	movwf	(receiveData@holder+1)& (0+255),b
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2732  00098A  0EFF               	movlw	255
  2733  00098C  6E27               	movwf	??_receiveData& (0+255),c
  2734  00098E  0EFF               	movlw	255
  2735  000990  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2736  000992  5041               	movf	_rx_array_inx,w,c
  2737  000994  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2738  000996  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2739  000998  5027               	movf	??_receiveData,w,c
  2740  00099A  2629               	addwf	??_receiveData+2,f,c
  2741  00099C  5028               	movf	??_receiveData+1,w,c
  2742  00099E  222A               	addwfc	??_receiveData+3,f,c
  2743  0009A0  0E00               	movlw	low _rx_buffer
  2744  0009A2  2429               	addwf	??_receiveData+2,w,c
  2745  0009A4  6ED9               	movwf	fsr2l,c
  2746  0009A6  0E03               	movlw	high _rx_buffer
  2747  0009A8  202A               	addwfc	??_receiveData+3,w,c
  2748  0009AA  6EDA               	movwf	fsr2h,c
  2749  0009AC  50DF               	movf	indf2,w,c
  2750  0009AE  0100               	movlb	0	; () banked
  2751  0009B0  6FCA               	movwf	(receiveData@holder+2)& (0+255),b
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2755  0009B2  0EC8               	movlw	low receiveData@holder
  2756  0009B4  6E1B               	movwf	CRC8@data,c
  2757  0009B6  0E00               	movlw	high receiveData@holder
  2758  0009B8  6E1C               	movwf	CRC8@data+1,c
  2759  0009BA  0E03               	movlw	3
  2760  0009BC  6E1D               	movwf	CRC8@len,c
  2761  0009BE  ECB6  F012         	call	_CRC8	;wreg free
  2762  0009C2  0100               	movlb	0	; () banked
  2763  0009C4  6FCE               	movwf	receiveData@crcHolder& (0+255),b
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;FastTransfer.c: 165: serial_write(0x06);
  2767  0009C6  D801               	call	u4578
  2768  0009C8  D00B               	goto	l4518
  2769  0009CA                     u4578:
  2770  0009CA  0005               	push	
  2771  0009CC  6EFA               	movwf	pclath,c
  2772  0009CE  5035               	movf	_serial_write,w,c
  2773  0009D0  6EFD               	movwf	tosl,c
  2774  0009D2  5036               	movf	_serial_write+1,w,c
  2775  0009D4  6EFE               	movwf	tosh,c
  2776  0009D6  50F8               	movf	tblptru,w,c
  2777  0009D8  6EFF               	movwf	tosu,c
  2778  0009DA  50FA               	movf	pclath,w,c
  2779  0009DC  0E06               	movlw	6
  2780  0009DE  0012               	return		;indir
  2781  0009E0                     l4518:
  2782                           
  2783                           ;FastTransfer.c: 166: serial_write(0x85);
  2784  0009E0  D801               	call	u4588
  2785  0009E2  D00B               	goto	l4520
  2786  0009E4                     u4588:
  2787  0009E4  0005               	push	
  2788  0009E6  6EFA               	movwf	pclath,c
  2789  0009E8  5035               	movf	_serial_write,w,c
  2790  0009EA  6EFD               	movwf	tosl,c
  2791  0009EC  5036               	movf	_serial_write+1,w,c
  2792  0009EE  6EFE               	movwf	tosh,c
  2793  0009F0  50F8               	movf	tblptru,w,c
  2794  0009F2  6EFF               	movwf	tosu,c
  2795  0009F4  50FA               	movf	pclath,w,c
  2796  0009F6  0E85               	movlw	133
  2797  0009F8  0012               	return		;indir
  2798  0009FA                     l4520:
  2799                           
  2800                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2801  0009FA  D801               	call	u4598
  2802  0009FC  D00B               	goto	l4522
  2803  0009FE                     u4598:
  2804  0009FE  0005               	push	
  2805  000A00  6EFA               	movwf	pclath,c
  2806  000A02  5035               	movf	_serial_write,w,c
  2807  000A04  6EFD               	movwf	tosl,c
  2808  000A06  5036               	movf	_serial_write+1,w,c
  2809  000A08  6EFE               	movwf	tosh,c
  2810  000A0A  50F8               	movf	tblptru,w,c
  2811  000A0C  6EFF               	movwf	tosu,c
  2812  000A0E  50FA               	movf	pclath,w,c
  2813  000A10  503F               	movf	_returnAddress,w,c
  2814  000A12  0012               	return		;indir
  2815  000A14                     l4522:
  2816                           
  2817                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2818  000A14  D801               	call	u4608
  2819  000A16  D00B               	goto	l4524
  2820  000A18                     u4608:
  2821  000A18  0005               	push	
  2822  000A1A  6EFA               	movwf	pclath,c
  2823  000A1C  5035               	movf	_serial_write,w,c
  2824  000A1E  6EFD               	movwf	tosl,c
  2825  000A20  5036               	movf	_serial_write+1,w,c
  2826  000A22  6EFE               	movwf	tosh,c
  2827  000A24  50F8               	movf	tblptru,w,c
  2828  000A26  6EFF               	movwf	tosu,c
  2829  000A28  50FA               	movf	pclath,w,c
  2830  000A2A  503E               	movf	_moduleAddress,w,c
  2831  000A2C  0012               	return		;indir
  2832  000A2E                     l4524:
  2833                           
  2834                           ;FastTransfer.c: 169: serial_write(3);
  2835  000A2E  D801               	call	u4618
  2836  000A30  D00B               	goto	l4526
  2837  000A32                     u4618:
  2838  000A32  0005               	push	
  2839  000A34  6EFA               	movwf	pclath,c
  2840  000A36  5035               	movf	_serial_write,w,c
  2841  000A38  6EFD               	movwf	tosl,c
  2842  000A3A  5036               	movf	_serial_write+1,w,c
  2843  000A3C  6EFE               	movwf	tosh,c
  2844  000A3E  50F8               	movf	tblptru,w,c
  2845  000A40  6EFF               	movwf	tosu,c
  2846  000A42  50FA               	movf	pclath,w,c
  2847  000A44  0E03               	movlw	3
  2848  000A46  0012               	return		;indir
  2849  000A48                     l4526:
  2850                           
  2851                           ;FastTransfer.c: 170: serial_write(255);
  2852  000A48  D801               	call	u4628
  2853  000A4A  D00B               	goto	l4528
  2854  000A4C                     u4628:
  2855  000A4C  0005               	push	
  2856  000A4E  6EFA               	movwf	pclath,c
  2857  000A50  5035               	movf	_serial_write,w,c
  2858  000A52  6EFD               	movwf	tosl,c
  2859  000A54  5036               	movf	_serial_write+1,w,c
  2860  000A56  6EFE               	movwf	tosh,c
  2861  000A58  50F8               	movf	tblptru,w,c
  2862  000A5A  6EFF               	movwf	tosu,c
  2863  000A5C  50FA               	movf	pclath,w,c
  2864  000A5E  0EFF               	movlw	255
  2865  000A60  0012               	return		;indir
  2866  000A62                     l4528:
  2867                           
  2868                           ;FastTransfer.c: 171: serial_write(1);
  2869  000A62  D801               	call	u4638
  2870  000A64  D00B               	goto	l4530
  2871  000A66                     u4638:
  2872  000A66  0005               	push	
  2873  000A68  6EFA               	movwf	pclath,c
  2874  000A6A  5035               	movf	_serial_write,w,c
  2875  000A6C  6EFD               	movwf	tosl,c
  2876  000A6E  5036               	movf	_serial_write+1,w,c
  2877  000A70  6EFE               	movwf	tosh,c
  2878  000A72  50F8               	movf	tblptru,w,c
  2879  000A74  6EFF               	movwf	tosu,c
  2880  000A76  50FA               	movf	pclath,w,c
  2881  000A78  0E01               	movlw	1
  2882  000A7A  0012               	return		;indir
  2883  000A7C                     l4530:
  2884                           
  2885                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2886  000A7C  D801               	call	u4648
  2887  000A7E  D01C               	goto	l4532
  2888  000A80                     u4648:
  2889  000A80  0005               	push	
  2890  000A82  6EFA               	movwf	pclath,c
  2891  000A84  5035               	movf	_serial_write,w,c
  2892  000A86  6EFD               	movwf	tosl,c
  2893  000A88  5036               	movf	_serial_write+1,w,c
  2894  000A8A  6EFE               	movwf	tosh,c
  2895  000A8C  50F8               	movf	tblptru,w,c
  2896  000A8E  6EFF               	movwf	tosu,c
  2897  000A90  50FA               	movf	pclath,w,c
  2898  000A92  0EFF               	movlw	255
  2899  000A94  6E27               	movwf	??_receiveData& (0+255),c
  2900  000A96  0EFF               	movlw	255
  2901  000A98  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2902  000A9A  5041               	movf	_rx_array_inx,w,c
  2903  000A9C  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2904  000A9E  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2905  000AA0  5027               	movf	??_receiveData,w,c
  2906  000AA2  2629               	addwf	??_receiveData+2,f,c
  2907  000AA4  5028               	movf	??_receiveData+1,w,c
  2908  000AA6  222A               	addwfc	??_receiveData+3,f,c
  2909  000AA8  0E00               	movlw	low _rx_buffer
  2910  000AAA  2429               	addwf	??_receiveData+2,w,c
  2911  000AAC  6ED9               	movwf	fsr2l,c
  2912  000AAE  0E03               	movlw	high _rx_buffer
  2913  000AB0  202A               	addwfc	??_receiveData+3,w,c
  2914  000AB2  6EDA               	movwf	fsr2h,c
  2915  000AB4  50DF               	movf	indf2,w,c
  2916  000AB6  0012               	return		;indir
  2917  000AB8                     l4532:
  2918                           
  2919                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2920  000AB8  D801               	call	u4658
  2921  000ABA  D00C               	goto	l4534
  2922  000ABC                     u4658:
  2923  000ABC  0005               	push	
  2924  000ABE  6EFA               	movwf	pclath,c
  2925  000AC0  5035               	movf	_serial_write,w,c
  2926  000AC2  6EFD               	movwf	tosl,c
  2927  000AC4  5036               	movf	_serial_write+1,w,c
  2928  000AC6  6EFE               	movwf	tosh,c
  2929  000AC8  50F8               	movf	tblptru,w,c
  2930  000ACA  6EFF               	movwf	tosu,c
  2931  000ACC  50FA               	movf	pclath,w,c
  2932  000ACE  0100               	movlb	0	; () banked
  2933  000AD0  51CE               	movf	receiveData@crcHolder& (0+255),w,b
  2934  000AD2  0012               	return		;indir
  2935  000AD4                     l4534:
  2936                           
  2937                           ;FastTransfer.c: 174: }
  2938                           ;FastTransfer.c: 178: rx_len = 0;
  2939  000AD4  0E00               	movlw	0
  2940  000AD6  6E42               	movwf	_rx_len,c
  2941                           
  2942                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2943  000AD8  0E00               	movlw	0
  2944  000ADA  6E41               	movwf	_rx_array_inx,c
  2945                           
  2946                           ;FastTransfer.c: 180: return 1;
  2947  000ADC  0E01               	movlw	1
  2948  000ADE  0012               	return	
  2949                           
  2950                           ;FastTransfer.c: 181: } else {
  2951  000AE0  D0B7               	goto	l4582
  2952  000AE2                     l4544:
  2953                           
  2954                           ;FastTransfer.c: 182: crcErrorCounter++;
  2955  000AE2  0100               	movlb	0	; () banked
  2956  000AE4  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  2957  000AE6  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2961  000AE8  5039               	movf	_AKNAKsend,w,c
  2962  000AEA  B4D8               	btfsc	status,2,c
  2963  000AEC  D0AA               	goto	l4574
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;FastTransfer.c: 185: unsigned char holder[3];
  2967                           ;FastTransfer.c: 186: holder[0] = 255;
  2968  000AEE  0100               	movlb	0	; () banked
  2969  000AF0  69CB               	setf	receiveData@holder_1107& (0+255),b
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;FastTransfer.c: 187: holder[1] = 2;
  2973  000AF2  0E02               	movlw	2
  2974  000AF4  0100               	movlb	0	; () banked
  2975  000AF6  6FCC               	movwf	(receiveData@holder_1107+1)& (0+255),b
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2979  000AF8  0EFF               	movlw	255
  2980  000AFA  6E27               	movwf	??_receiveData& (0+255),c
  2981  000AFC  0EFF               	movlw	255
  2982  000AFE  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2983  000B00  5041               	movf	_rx_array_inx,w,c
  2984  000B02  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2985  000B04  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2986  000B06  5027               	movf	??_receiveData,w,c
  2987  000B08  2629               	addwf	??_receiveData+2,f,c
  2988  000B0A  5028               	movf	??_receiveData+1,w,c
  2989  000B0C  222A               	addwfc	??_receiveData+3,f,c
  2990  000B0E  0E00               	movlw	low _rx_buffer
  2991  000B10  2429               	addwf	??_receiveData+2,w,c
  2992  000B12  6ED9               	movwf	fsr2l,c
  2993  000B14  0E03               	movlw	high _rx_buffer
  2994  000B16  202A               	addwfc	??_receiveData+3,w,c
  2995  000B18  6EDA               	movwf	fsr2h,c
  2996  000B1A  50DF               	movf	indf2,w,c
  2997  000B1C  0100               	movlb	0	; () banked
  2998  000B1E  6FCD               	movwf	(receiveData@holder_1107+2)& (0+255),b
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  3002  000B20  0ECB               	movlw	low receiveData@holder_1107
  3003  000B22  6E1B               	movwf	CRC8@data,c
  3004  000B24  0E00               	movlw	high receiveData@holder_1107
  3005  000B26  6E1C               	movwf	CRC8@data+1,c
  3006  000B28  0E03               	movlw	3
  3007  000B2A  6E1D               	movwf	CRC8@len,c
  3008  000B2C  ECB6  F012         	call	_CRC8
  3009  000B30  0100               	movlb	0	; () banked
  3010  000B32  6FCF               	movwf	receiveData@crcHolder_1108& (0+255),b
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;FastTransfer.c: 190: serial_write(0x06);
  3014  000B34  D801               	call	u4678
  3015  000B36  D00B               	goto	l4558
  3016  000B38                     u4678:
  3017  000B38  0005               	push	
  3018  000B3A  6EFA               	movwf	pclath,c
  3019  000B3C  5035               	movf	_serial_write,w,c
  3020  000B3E  6EFD               	movwf	tosl,c
  3021  000B40  5036               	movf	_serial_write+1,w,c
  3022  000B42  6EFE               	movwf	tosh,c
  3023  000B44  50F8               	movf	tblptru,w,c
  3024  000B46  6EFF               	movwf	tosu,c
  3025  000B48  50FA               	movf	pclath,w,c
  3026  000B4A  0E06               	movlw	6
  3027  000B4C  0012               	return		;indir
  3028  000B4E                     l4558:
  3029                           
  3030                           ;FastTransfer.c: 191: serial_write(0x85);
  3031  000B4E  D801               	call	u4688
  3032  000B50  D00B               	goto	l4560
  3033  000B52                     u4688:
  3034  000B52  0005               	push	
  3035  000B54  6EFA               	movwf	pclath,c
  3036  000B56  5035               	movf	_serial_write,w,c
  3037  000B58  6EFD               	movwf	tosl,c
  3038  000B5A  5036               	movf	_serial_write+1,w,c
  3039  000B5C  6EFE               	movwf	tosh,c
  3040  000B5E  50F8               	movf	tblptru,w,c
  3041  000B60  6EFF               	movwf	tosu,c
  3042  000B62  50FA               	movf	pclath,w,c
  3043  000B64  0E85               	movlw	133
  3044  000B66  0012               	return		;indir
  3045  000B68                     l4560:
  3046                           
  3047                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3048  000B68  D801               	call	u4698
  3049  000B6A  D00B               	goto	l4562
  3050  000B6C                     u4698:
  3051  000B6C  0005               	push	
  3052  000B6E  6EFA               	movwf	pclath,c
  3053  000B70  5035               	movf	_serial_write,w,c
  3054  000B72  6EFD               	movwf	tosl,c
  3055  000B74  5036               	movf	_serial_write+1,w,c
  3056  000B76  6EFE               	movwf	tosh,c
  3057  000B78  50F8               	movf	tblptru,w,c
  3058  000B7A  6EFF               	movwf	tosu,c
  3059  000B7C  50FA               	movf	pclath,w,c
  3060  000B7E  503F               	movf	_returnAddress,w,c
  3061  000B80  0012               	return		;indir
  3062  000B82                     l4562:
  3063                           
  3064                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3065  000B82  D801               	call	u4708
  3066  000B84  D00B               	goto	l4564
  3067  000B86                     u4708:
  3068  000B86  0005               	push	
  3069  000B88  6EFA               	movwf	pclath,c
  3070  000B8A  5035               	movf	_serial_write,w,c
  3071  000B8C  6EFD               	movwf	tosl,c
  3072  000B8E  5036               	movf	_serial_write+1,w,c
  3073  000B90  6EFE               	movwf	tosh,c
  3074  000B92  50F8               	movf	tblptru,w,c
  3075  000B94  6EFF               	movwf	tosu,c
  3076  000B96  50FA               	movf	pclath,w,c
  3077  000B98  503E               	movf	_moduleAddress,w,c
  3078  000B9A  0012               	return		;indir
  3079  000B9C                     l4564:
  3080                           
  3081                           ;FastTransfer.c: 194: serial_write(3);
  3082  000B9C  D801               	call	u4718
  3083  000B9E  D00B               	goto	l4566
  3084  000BA0                     u4718:
  3085  000BA0  0005               	push	
  3086  000BA2  6EFA               	movwf	pclath,c
  3087  000BA4  5035               	movf	_serial_write,w,c
  3088  000BA6  6EFD               	movwf	tosl,c
  3089  000BA8  5036               	movf	_serial_write+1,w,c
  3090  000BAA  6EFE               	movwf	tosh,c
  3091  000BAC  50F8               	movf	tblptru,w,c
  3092  000BAE  6EFF               	movwf	tosu,c
  3093  000BB0  50FA               	movf	pclath,w,c
  3094  000BB2  0E03               	movlw	3
  3095  000BB4  0012               	return		;indir
  3096  000BB6                     l4566:
  3097                           
  3098                           ;FastTransfer.c: 195: serial_write(255);
  3099  000BB6  D801               	call	u4728
  3100  000BB8  D00B               	goto	l4568
  3101  000BBA                     u4728:
  3102  000BBA  0005               	push	
  3103  000BBC  6EFA               	movwf	pclath,c
  3104  000BBE  5035               	movf	_serial_write,w,c
  3105  000BC0  6EFD               	movwf	tosl,c
  3106  000BC2  5036               	movf	_serial_write+1,w,c
  3107  000BC4  6EFE               	movwf	tosh,c
  3108  000BC6  50F8               	movf	tblptru,w,c
  3109  000BC8  6EFF               	movwf	tosu,c
  3110  000BCA  50FA               	movf	pclath,w,c
  3111  000BCC  0EFF               	movlw	255
  3112  000BCE  0012               	return		;indir
  3113  000BD0                     l4568:
  3114                           
  3115                           ;FastTransfer.c: 196: serial_write(2);
  3116  000BD0  D801               	call	u4738
  3117  000BD2  D00B               	goto	l4570
  3118  000BD4                     u4738:
  3119  000BD4  0005               	push	
  3120  000BD6  6EFA               	movwf	pclath,c
  3121  000BD8  5035               	movf	_serial_write,w,c
  3122  000BDA  6EFD               	movwf	tosl,c
  3123  000BDC  5036               	movf	_serial_write+1,w,c
  3124  000BDE  6EFE               	movwf	tosh,c
  3125  000BE0  50F8               	movf	tblptru,w,c
  3126  000BE2  6EFF               	movwf	tosu,c
  3127  000BE4  50FA               	movf	pclath,w,c
  3128  000BE6  0E02               	movlw	2
  3129  000BE8  0012               	return		;indir
  3130  000BEA                     l4570:
  3131                           
  3132                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3133  000BEA  D801               	call	u4748
  3134  000BEC  D01C               	goto	l4572
  3135  000BEE                     u4748:
  3136  000BEE  0005               	push	
  3137  000BF0  6EFA               	movwf	pclath,c
  3138  000BF2  5035               	movf	_serial_write,w,c
  3139  000BF4  6EFD               	movwf	tosl,c
  3140  000BF6  5036               	movf	_serial_write+1,w,c
  3141  000BF8  6EFE               	movwf	tosh,c
  3142  000BFA  50F8               	movf	tblptru,w,c
  3143  000BFC  6EFF               	movwf	tosu,c
  3144  000BFE  50FA               	movf	pclath,w,c
  3145  000C00  0EFF               	movlw	255
  3146  000C02  6E27               	movwf	??_receiveData& (0+255),c
  3147  000C04  0EFF               	movlw	255
  3148  000C06  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3149  000C08  5041               	movf	_rx_array_inx,w,c
  3150  000C0A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3151  000C0C  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3152  000C0E  5027               	movf	??_receiveData,w,c
  3153  000C10  2629               	addwf	??_receiveData+2,f,c
  3154  000C12  5028               	movf	??_receiveData+1,w,c
  3155  000C14  222A               	addwfc	??_receiveData+3,f,c
  3156  000C16  0E00               	movlw	low _rx_buffer
  3157  000C18  2429               	addwf	??_receiveData+2,w,c
  3158  000C1A  6ED9               	movwf	fsr2l,c
  3159  000C1C  0E03               	movlw	high _rx_buffer
  3160  000C1E  202A               	addwfc	??_receiveData+3,w,c
  3161  000C20  6EDA               	movwf	fsr2h,c
  3162  000C22  50DF               	movf	indf2,w,c
  3163  000C24  0012               	return		;indir
  3164  000C26                     l4572:
  3165                           
  3166                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3167  000C26  D801               	call	u4758
  3168  000C28  D00C               	goto	l4574
  3169  000C2A                     u4758:
  3170  000C2A  0005               	push	
  3171  000C2C  6EFA               	movwf	pclath,c
  3172  000C2E  5035               	movf	_serial_write,w,c
  3173  000C30  6EFD               	movwf	tosl,c
  3174  000C32  5036               	movf	_serial_write+1,w,c
  3175  000C34  6EFE               	movwf	tosh,c
  3176  000C36  50F8               	movf	tblptru,w,c
  3177  000C38  6EFF               	movwf	tosu,c
  3178  000C3A  50FA               	movf	pclath,w,c
  3179  000C3C  0100               	movlb	0	; () banked
  3180  000C3E  51CF               	movf	receiveData@crcHolder_1108& (0+255),w,b
  3181  000C40  0012               	return		;indir
  3182  000C42                     l4574:
  3183                           
  3184                           ;FastTransfer.c: 199: }
  3185                           ;FastTransfer.c: 202: rx_len = 0;
  3186  000C42  0E00               	movlw	0
  3187  000C44  6E42               	movwf	_rx_len,c
  3188                           
  3189                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3190  000C46  0E00               	movlw	0
  3191  000C48  6E41               	movwf	_rx_array_inx,c
  3192                           
  3193                           ;FastTransfer.c: 204: return 0;
  3194  000C4A  0E00               	movlw	0
  3195  000C4C  0012               	return	
  3196  000C4E  D000               	goto	l4582
  3197  000C50                     l4582:
  3198                           
  3199                           ;FastTransfer.c: 205: }
  3200                           ;FastTransfer.c: 206: }
  3201                           ;FastTransfer.c: 207: }
  3202                           ;FastTransfer.c: 210: return 0;
  3203  000C50  0E00               	movlw	0
  3204  000C52  0012               	return	
  3205  000C54  0012               	return		;funcret
  3206  000C56                     __end_of_receiveData:
  3207                           	opt stack 0
  3208                           tosu	equ	0xFFF
  3209                           tosh	equ	0xFFE
  3210                           tosl	equ	0xFFD
  3211                           pclath	equ	0xFFA
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           prodh	equ	0xFF4
  3217                           prodl	equ	0xFF3
  3218                           intcon	equ	0xFF2
  3219                           postinc0	equ	0xFEE
  3220                           wreg	equ	0xFE8
  3221                           postdec1	equ	0xFE5
  3222                           fsr1l	equ	0xFE1
  3223                           indf2	equ	0xFDF
  3224                           postinc2	equ	0xFDE
  3225                           postdec2	equ	0xFDD
  3226                           plusw2	equ	0xFDB
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           
  3231 ;; *************** function _Send_put *****************
  3232 ;; Defined at:
  3233 ;;		line 130 in file "UART.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  _data           1    wreg     unsigned char 
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  _data           1   37[COMRAM] unsigned char 
  3238 ;; Return value:  Size  Location     Type
  3239 ;;		None               void
  3240 ;; Registers used:
  3241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3242 ;; Tracked objects:
  3243 ;;		On entry : 0/0
  3244 ;;		On exit  : 0/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3247 ;;      Params:         0       0       0       0       0       0       0
  3248 ;;      Locals:         1       0       0       0       0       0       0
  3249 ;;      Temps:          0       0       0       0       0       0       0
  3250 ;;      Totals:         1       0       0       0       0       0       0
  3251 ;;Total ram usage:        1 bytes
  3252 ;; Hardware stack levels used:    1
  3253 ;; Hardware stack levels required when called:    6
  3254 ;; This function calls:
  3255 ;;		_UART_buff_get
  3256 ;;		_UART_buff_put
  3257 ;; This function is called by:
  3258 ;;		_SYSTEM_Initialize
  3259 ;;		_putch
  3260 ;;		_sendData
  3261 ;;		_receiveData
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text6
  3266  002750                     __ptext6:
  3267                           	opt stack 0
  3268  002750                     _Send_put:
  3269                           	opt stack 22
  3270                           
  3271                           ;incstack = 0
  3272                           ;Send_put@_data stored from wreg
  3273  002750  6E26               	movwf	Send_put@_data,c
  3274                           
  3275                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3276  002752  0E00               	movlw	low _output_buffer
  3277  002754  6E21               	movwf	UART_buff_put@_this,c
  3278  002756  0E05               	movlw	high _output_buffer
  3279  002758  6E22               	movwf	UART_buff_put@_this+1,c
  3280  00275A  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3281  00275E  EC1B  F00E         	call	_UART_buff_put
  3282                           
  3283                           ;UART.c: 132: if (Transmit_stall == 1) {
  3284  002762  0445               	decf	_Transmit_stall,w,c
  3285  002764  A4D8               	btfss	status,2,c
  3286  002766  0012               	return	
  3287                           
  3288                           ;UART.c: 133: Transmit_stall = 0;
  3289  002768  0E00               	movlw	0
  3290  00276A  6E45               	movwf	_Transmit_stall,c
  3291                           
  3292                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3293  00276C  0E00               	movlw	low _output_buffer
  3294  00276E  6E21               	movwf	UART_buff_get@_this,c
  3295  002770  0E05               	movlw	high _output_buffer
  3296  002772  6E22               	movwf	UART_buff_get@_this+1,c
  3297  002774  EC8B  F011         	call	_UART_buff_get	;wreg free
  3298  002778  6EAD               	movwf	4013,c	;volatile
  3299                           
  3300                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3301  00277A  889D               	bsf	3997,4,c	;volatile
  3302  00277C  0012               	return	
  3303  00277E  0012               	return		;funcret
  3304  002780                     __end_of_Send_put:
  3305                           	opt stack 0
  3306                           tosu	equ	0xFFF
  3307                           tosh	equ	0xFFE
  3308                           tosl	equ	0xFFD
  3309                           pclath	equ	0xFFA
  3310                           tblptru	equ	0xFF8
  3311                           tblptrh	equ	0xFF7
  3312                           tblptrl	equ	0xFF6
  3313                           tablat	equ	0xFF5
  3314                           prodh	equ	0xFF4
  3315                           prodl	equ	0xFF3
  3316                           intcon	equ	0xFF2
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           postdec1	equ	0xFE5
  3320                           fsr1l	equ	0xFE1
  3321                           indf2	equ	0xFDF
  3322                           postinc2	equ	0xFDE
  3323                           postdec2	equ	0xFDD
  3324                           plusw2	equ	0xFDB
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function _UART_buff_put *****************
  3330 ;; Defined at:
  3331 ;;		line 68 in file "UART.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3334 ;;		 -> output_buffer(206), input_buffer(206), 
  3335 ;;  c               1   34[COMRAM] const unsigned char 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;		None               void
  3340 ;; Registers used:
  3341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3347 ;;      Params:         3       0       0       0       0       0       0
  3348 ;;      Locals:         0       0       0       0       0       0       0
  3349 ;;      Temps:          2       0       0       0       0       0       0
  3350 ;;      Totals:         5       0       0       0       0       0       0
  3351 ;;Total ram usage:        5 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    5
  3354 ;; This function calls:
  3355 ;;		_UART_buff_modulo_inc
  3356 ;; This function is called by:
  3357 ;;		_Send_put
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text7
  3362  001C36                     __ptext7:
  3363                           	opt stack 0
  3364  001C36                     _UART_buff_put:
  3365                           	opt stack 22
  3366                           
  3367                           ;UART.c: 69: if (_this->count < 200) {
  3368                           
  3369                           ;incstack = 0
  3370  001C36  EE20 F0CC          	lfsr	2,204
  3371  001C3A  5021               	movf	UART_buff_put@_this,w,c
  3372  001C3C  26D9               	addwf	fsr2l,f,c
  3373  001C3E  5022               	movf	UART_buff_put@_this+1,w,c
  3374  001C40  22DA               	addwfc	fsr2h,f,c
  3375  001C42  0E01               	movlw	1
  3376  001C44  BEDB               	btfsc	plusw2,7,c
  3377  001C46  D007               	goto	l4202
  3378  001C48  0E01               	movlw	1
  3379  001C4A  50DB               	movf	plusw2,w,c
  3380  001C4C  E13A               	bnz	l4208
  3381  001C4E  0EC8               	movlw	200
  3382  001C50  5CDE               	subwf	postinc2,w,c
  3383  001C52  B0D8               	btfsc	status,0,c
  3384  001C54  D036               	goto	l4208
  3385  001C56                     l4202:
  3386                           
  3387                           ;UART.c: 70: _this->buf[_this->head] = c;
  3388  001C56  EE20 F0C8          	lfsr	2,200
  3389  001C5A  5021               	movf	UART_buff_put@_this,w,c
  3390  001C5C  26D9               	addwf	fsr2l,f,c
  3391  001C5E  5022               	movf	UART_buff_put@_this+1,w,c
  3392  001C60  22DA               	addwfc	fsr2h,f,c
  3393  001C62  CFDE F024          	movff	postinc2,??_UART_buff_put
  3394  001C66  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3395  001C6A  5024               	movf	??_UART_buff_put,w,c
  3396  001C6C  2421               	addwf	UART_buff_put@_this,w,c
  3397  001C6E  6ED9               	movwf	fsr2l,c
  3398  001C70  5025               	movf	??_UART_buff_put+1,w,c
  3399  001C72  2022               	addwfc	UART_buff_put@_this+1,w,c
  3400  001C74  6EDA               	movwf	fsr2h,c
  3401  001C76  C023  FFDF         	movff	UART_buff_put@c,indf2
  3402                           
  3403                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3404  001C7A  EE20 F0C8          	lfsr	2,200
  3405  001C7E  5021               	movf	UART_buff_put@_this,w,c
  3406  001C80  26D9               	addwf	fsr2l,f,c
  3407  001C82  5022               	movf	UART_buff_put@_this+1,w,c
  3408  001C84  22DA               	addwfc	fsr2h,f,c
  3409  001C86  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3410  001C8A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3411  001C8E  0E00               	movlw	0
  3412  001C90  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3413  001C92  0EC8               	movlw	200
  3414  001C94  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3415  001C96  ECD8  F013         	call	_UART_buff_modulo_inc	;wreg free
  3416  001C9A  EE20 F0C8          	lfsr	2,200
  3417  001C9E  5021               	movf	UART_buff_put@_this,w,c
  3418  001CA0  26D9               	addwf	fsr2l,f,c
  3419  001CA2  5022               	movf	UART_buff_put@_this+1,w,c
  3420  001CA4  22DA               	addwfc	fsr2h,f,c
  3421  001CA6  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3422  001CAA  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3423                           
  3424                           ;UART.c: 72: ++_this->count;
  3425  001CAE  EE20 F0CC          	lfsr	2,204
  3426  001CB2  5021               	movf	UART_buff_put@_this,w,c
  3427  001CB4  26D9               	addwf	fsr2l,f,c
  3428  001CB6  5022               	movf	UART_buff_put@_this+1,w,c
  3429  001CB8  22DA               	addwfc	fsr2h,f,c
  3430  001CBA  2ADE               	incf	postinc2,f,c
  3431  001CBC  0E00               	movlw	0
  3432  001CBE  22DD               	addwfc	postdec2,f,c
  3433                           
  3434                           ;UART.c: 73: } else {
  3435  001CC0  0012               	return	
  3436  001CC2                     l4208:
  3437                           
  3438                           ;UART.c: 74: _this->buf[_this->head] = c;
  3439  001CC2  EE20 F0C8          	lfsr	2,200
  3440  001CC6  5021               	movf	UART_buff_put@_this,w,c
  3441  001CC8  26D9               	addwf	fsr2l,f,c
  3442  001CCA  5022               	movf	UART_buff_put@_this+1,w,c
  3443  001CCC  22DA               	addwfc	fsr2h,f,c
  3444  001CCE  CFDE F024          	movff	postinc2,??_UART_buff_put
  3445  001CD2  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3446  001CD6  5024               	movf	??_UART_buff_put,w,c
  3447  001CD8  2421               	addwf	UART_buff_put@_this,w,c
  3448  001CDA  6ED9               	movwf	fsr2l,c
  3449  001CDC  5025               	movf	??_UART_buff_put+1,w,c
  3450  001CDE  2022               	addwfc	UART_buff_put@_this+1,w,c
  3451  001CE0  6EDA               	movwf	fsr2h,c
  3452  001CE2  C023  FFDF         	movff	UART_buff_put@c,indf2
  3453                           
  3454                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3455  001CE6  EE20 F0C8          	lfsr	2,200
  3456  001CEA  5021               	movf	UART_buff_put@_this,w,c
  3457  001CEC  26D9               	addwf	fsr2l,f,c
  3458  001CEE  5022               	movf	UART_buff_put@_this+1,w,c
  3459  001CF0  22DA               	addwfc	fsr2h,f,c
  3460  001CF2  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3461  001CF6  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3462  001CFA  0E00               	movlw	0
  3463  001CFC  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3464  001CFE  0EC8               	movlw	200
  3465  001D00  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3466  001D02  ECD8  F013         	call	_UART_buff_modulo_inc	;wreg free
  3467  001D06  EE20 F0C8          	lfsr	2,200
  3468  001D0A  5021               	movf	UART_buff_put@_this,w,c
  3469  001D0C  26D9               	addwf	fsr2l,f,c
  3470  001D0E  5022               	movf	UART_buff_put@_this+1,w,c
  3471  001D10  22DA               	addwfc	fsr2h,f,c
  3472  001D12  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3473  001D16  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3474                           
  3475                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3476  001D1A  EE20 F0CA          	lfsr	2,202
  3477  001D1E  5021               	movf	UART_buff_put@_this,w,c
  3478  001D20  26D9               	addwf	fsr2l,f,c
  3479  001D22  5022               	movf	UART_buff_put@_this+1,w,c
  3480  001D24  22DA               	addwfc	fsr2h,f,c
  3481  001D26  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3482  001D2A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3483  001D2E  0E00               	movlw	0
  3484  001D30  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3485  001D32  0EC8               	movlw	200
  3486  001D34  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3487  001D36  ECD8  F013         	call	_UART_buff_modulo_inc	;wreg free
  3488  001D3A  EE20 F0CA          	lfsr	2,202
  3489  001D3E  5021               	movf	UART_buff_put@_this,w,c
  3490  001D40  26D9               	addwf	fsr2l,f,c
  3491  001D42  5022               	movf	UART_buff_put@_this+1,w,c
  3492  001D44  22DA               	addwfc	fsr2h,f,c
  3493  001D46  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3494  001D4A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3495  001D4E  0012               	return	
  3496  001D50  0012               	return		;funcret
  3497  001D52                     __end_of_UART_buff_put:
  3498                           	opt stack 0
  3499                           tosu	equ	0xFFF
  3500                           tosh	equ	0xFFE
  3501                           tosl	equ	0xFFD
  3502                           pclath	equ	0xFFA
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           prodh	equ	0xFF4
  3508                           prodl	equ	0xFF3
  3509                           intcon	equ	0xFF2
  3510                           postinc0	equ	0xFEE
  3511                           wreg	equ	0xFE8
  3512                           postdec1	equ	0xFE5
  3513                           fsr1l	equ	0xFE1
  3514                           indf2	equ	0xFDF
  3515                           postinc2	equ	0xFDE
  3516                           postdec2	equ	0xFDD
  3517                           plusw2	equ	0xFDB
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function _Receive_peek *****************
  3523 ;; Defined at:
  3524 ;;		line 118 in file "UART.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      unsigned char 
  3531 ;; Registers used:
  3532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3538 ;;      Params:         0       0       0       0       0       0       0
  3539 ;;      Locals:         0       0       0       0       0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0
  3541 ;;      Totals:         0       0       0       0       0       0       0
  3542 ;;Total ram usage:        0 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    5
  3545 ;; This function calls:
  3546 ;;		_UART_buff_peek
  3547 ;; This function is called by:
  3548 ;;		_SYSTEM_Initialize
  3549 ;;		_receiveData
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text8
  3554  002A3A                     __ptext8:
  3555                           	opt stack 0
  3556  002A3A                     _Receive_peek:
  3557                           	opt stack 23
  3558                           
  3559                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3560                           
  3561                           ;incstack = 0
  3562  002A3A  0E00               	movlw	low _input_buffer
  3563  002A3C  6E1B               	movwf	UART_buff_peek@_this,c
  3564  002A3E  0E04               	movlw	high _input_buffer
  3565  002A40  6E1C               	movwf	UART_buff_peek@_this+1,c
  3566  002A42  EC5D  F014         	call	_UART_buff_peek	;wreg free
  3567  002A46  0012               	return	
  3568  002A48  0012               	return		;funcret
  3569  002A4A                     __end_of_Receive_peek:
  3570                           	opt stack 0
  3571                           tosu	equ	0xFFF
  3572                           tosh	equ	0xFFE
  3573                           tosl	equ	0xFFD
  3574                           pclath	equ	0xFFA
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           tblptrl	equ	0xFF6
  3578                           tablat	equ	0xFF5
  3579                           prodh	equ	0xFF4
  3580                           prodl	equ	0xFF3
  3581                           intcon	equ	0xFF2
  3582                           postinc0	equ	0xFEE
  3583                           wreg	equ	0xFE8
  3584                           postdec1	equ	0xFE5
  3585                           fsr1l	equ	0xFE1
  3586                           indf2	equ	0xFDF
  3587                           postinc2	equ	0xFDE
  3588                           postdec2	equ	0xFDD
  3589                           plusw2	equ	0xFDB
  3590                           fsr2h	equ	0xFDA
  3591                           fsr2l	equ	0xFD9
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function _UART_buff_peek *****************
  3595 ;; Defined at:
  3596 ;;		line 114 in file "UART.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3599 ;;		 -> input_buffer(206), 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;		None
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  1    wreg      unsigned char 
  3604 ;; Registers used:
  3605 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3611 ;;      Params:         2       0       0       0       0       0       0
  3612 ;;      Locals:         0       0       0       0       0       0       0
  3613 ;;      Temps:          2       0       0       0       0       0       0
  3614 ;;      Totals:         4       0       0       0       0       0       0
  3615 ;;Total ram usage:        4 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:    4
  3618 ;; This function calls:
  3619 ;;		Nothing
  3620 ;; This function is called by:
  3621 ;;		_Receive_peek
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           	psect	text9
  3626  0028BA                     __ptext9:
  3627                           	opt stack 0
  3628  0028BA                     _UART_buff_peek:
  3629                           	opt stack 23
  3630                           
  3631                           ;UART.c: 115: return _this->buf[_this->tail];
  3632                           
  3633                           ;incstack = 0
  3634  0028BA  EE20 F0CA          	lfsr	2,202
  3635  0028BE  501B               	movf	UART_buff_peek@_this,w,c
  3636  0028C0  26D9               	addwf	fsr2l,f,c
  3637  0028C2  501C               	movf	UART_buff_peek@_this+1,w,c
  3638  0028C4  22DA               	addwfc	fsr2h,f,c
  3639  0028C6  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3640  0028CA  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3641  0028CE  501D               	movf	??_UART_buff_peek,w,c
  3642  0028D0  241B               	addwf	UART_buff_peek@_this,w,c
  3643  0028D2  6ED9               	movwf	fsr2l,c
  3644  0028D4  501E               	movf	??_UART_buff_peek+1,w,c
  3645  0028D6  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3646  0028D8  6EDA               	movwf	fsr2h,c
  3647  0028DA  50DF               	movf	indf2,w,c
  3648  0028DC  0012               	return	
  3649  0028DE  0012               	return		;funcret
  3650  0028E0                     __end_of_UART_buff_peek:
  3651                           	opt stack 0
  3652                           tosu	equ	0xFFF
  3653                           tosh	equ	0xFFE
  3654                           tosl	equ	0xFFD
  3655                           pclath	equ	0xFFA
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           postinc0	equ	0xFEE
  3664                           wreg	equ	0xFE8
  3665                           postdec1	equ	0xFE5
  3666                           fsr1l	equ	0xFE1
  3667                           indf2	equ	0xFDF
  3668                           postinc2	equ	0xFDE
  3669                           postdec2	equ	0xFDD
  3670                           plusw2	equ	0xFDB
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _CRCcheck *****************
  3676 ;; Defined at:
  3677 ;;		line 373 in file "FastTransfer.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  rt              2    5[BANK0 ] int 
  3682 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3683 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3684 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;		None               void
  3687 ;; Registers used:
  3688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3694 ;;      Params:         0       0       0       0       0       0       0
  3695 ;;      Locals:         0       7       0       0       0       0       0
  3696 ;;      Temps:          0       0       0       0       0       0       0
  3697 ;;      Totals:         0       7       0       0       0       0       0
  3698 ;;Total ram usage:        7 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    7
  3701 ;; This function calls:
  3702 ;;		Absolute function
  3703 ;;		_CRC8
  3704 ;;		_Receive_available
  3705 ;;		_Receive_get
  3706 ;;		_crcBufS_get
  3707 ;;		_crcBufS_status_put
  3708 ;; This function is called by:
  3709 ;;		_receiveData
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           	psect	text10
  3714  0015AC                     __ptext10:
  3715                           	opt stack 0
  3716  0015AC                     _CRCcheck:
  3717                           	opt stack 21
  3718                           
  3719                           ;FastTransfer.c: 375: while (!(serial_available() > 3));
  3720                           
  3721                           ;incstack = 0
  3722  0015AC  D000               	goto	l4264
  3723  0015AE                     l4264:
  3724  0015AE  D801               	call	u3988
  3725  0015B0  D00A               	goto	u3989
  3726  0015B2                     u3988:
  3727  0015B2  0005               	push	
  3728  0015B4  6EFA               	movwf	pclath,c
  3729  0015B6  5031               	movf	_serial_available,w,c
  3730  0015B8  6EFD               	movwf	tosl,c
  3731  0015BA  5032               	movf	_serial_available+1,w,c
  3732  0015BC  6EFE               	movwf	tosh,c
  3733  0015BE  50F8               	movf	tblptru,w,c
  3734  0015C0  6EFF               	movwf	tosu,c
  3735  0015C2  50FA               	movf	pclath,w,c
  3736  0015C4  0012               	return		;indir
  3737  0015C6                     u3989:
  3738  0015C6  BE1E               	btfsc	?_Receive_available+1,7,c
  3739  0015C8  D7F2               	goto	l4264
  3740  0015CA  501E               	movf	?_Receive_available+1,w,c
  3741  0015CC  E106               	bnz	l4266
  3742  0015CE  0E04               	movlw	4
  3743  0015D0  5C1D               	subwf	?_Receive_available,w,c
  3744  0015D2  B0D8               	btfsc	status,0,c
  3745  0015D4  D002               	goto	l4266
  3746  0015D6  D7EB               	goto	l4264
  3747  0015D8  D000               	goto	l4266
  3748  0015DA                     l4266:
  3749                           
  3750                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3751                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3752  0015DA  D801               	call	u4008
  3753  0015DC  D00A               	goto	u4009
  3754  0015DE                     u4008:
  3755  0015DE  0005               	push	
  3756  0015E0  6EFA               	movwf	pclath,c
  3757  0015E2  5033               	movf	_serial_read,w,c
  3758  0015E4  6EFD               	movwf	tosl,c
  3759  0015E6  5034               	movf	_serial_read+1,w,c
  3760  0015E8  6EFE               	movwf	tosh,c
  3761  0015EA  50F8               	movf	tblptru,w,c
  3762  0015EC  6EFF               	movwf	tosu,c
  3763  0015EE  50FA               	movf	pclath,w,c
  3764  0015F0  0012               	return		;indir
  3765  0015F2                     u4009:
  3766  0015F2  0100               	movlb	0	; () banked
  3767  0015F4  6FC3               	movwf	CRCcheck@arrayHolder& (0+255),b
  3768                           
  3769                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3770  0015F6  D801               	call	u4018
  3771  0015F8  D00A               	goto	u4019
  3772  0015FA                     u4018:
  3773  0015FA  0005               	push	
  3774  0015FC  6EFA               	movwf	pclath,c
  3775  0015FE  5033               	movf	_serial_read,w,c
  3776  001600  6EFD               	movwf	tosl,c
  3777  001602  5034               	movf	_serial_read+1,w,c
  3778  001604  6EFE               	movwf	tosh,c
  3779  001606  50F8               	movf	tblptru,w,c
  3780  001608  6EFF               	movwf	tosu,c
  3781  00160A  50FA               	movf	pclath,w,c
  3782  00160C  0012               	return		;indir
  3783  00160E                     u4019:
  3784  00160E  0100               	movlb	0	; () banked
  3785  001610  6FC4               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3786                           
  3787                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3788  001612  D801               	call	u4028
  3789  001614  D00A               	goto	u4029
  3790  001616                     u4028:
  3791  001616  0005               	push	
  3792  001618  6EFA               	movwf	pclath,c
  3793  00161A  5033               	movf	_serial_read,w,c
  3794  00161C  6EFD               	movwf	tosl,c
  3795  00161E  5034               	movf	_serial_read+1,w,c
  3796  001620  6EFE               	movwf	tosh,c
  3797  001622  50F8               	movf	tblptru,w,c
  3798  001624  6EFF               	movwf	tosu,c
  3799  001626  50FA               	movf	pclath,w,c
  3800  001628  0012               	return		;indir
  3801  00162A                     u4029:
  3802  00162A  0100               	movlb	0	; () banked
  3803  00162C  6FC5               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3804                           
  3805                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3806  00162E  D801               	call	u4038
  3807  001630  D00A               	goto	u4039
  3808  001632                     u4038:
  3809  001632  0005               	push	
  3810  001634  6EFA               	movwf	pclath,c
  3811  001636  5033               	movf	_serial_read,w,c
  3812  001638  6EFD               	movwf	tosl,c
  3813  00163A  5034               	movf	_serial_read+1,w,c
  3814  00163C  6EFE               	movwf	tosh,c
  3815  00163E  50F8               	movf	tblptru,w,c
  3816  001640  6EFF               	movwf	tosu,c
  3817  001642  50FA               	movf	pclath,w,c
  3818  001644  0012               	return		;indir
  3819  001646                     u4039:
  3820  001646  0100               	movlb	0	; () banked
  3821  001648  6FC1               	movwf	CRCcheck@SentCRC& (0+255),b
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3825  00164A  0EC3               	movlw	low CRCcheck@arrayHolder
  3826  00164C  6E1B               	movwf	CRC8@data,c
  3827  00164E  0E00               	movlw	high CRCcheck@arrayHolder
  3828  001650  6E1C               	movwf	CRC8@data+1,c
  3829  001652  0E03               	movlw	3
  3830  001654  6E1D               	movwf	CRC8@len,c
  3831  001656  ECB6  F012         	call	_CRC8	;wreg free
  3832  00165A  0100               	movlb	0	; () banked
  3833  00165C  6FC2               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3837  00165E  0100               	movlb	0	; () banked
  3838  001660  51C2               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3839  001662  0100               	movlb	0	; () banked
  3840  001664  19C1               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3841  001666  A4D8               	btfss	status,2,c
  3842  001668  D053               	goto	l4296
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;FastTransfer.c: 387: int rt;
  3846                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3847  00166A  0E00               	movlw	0
  3848  00166C  0100               	movlb	0	; () banked
  3849  00166E  6FC7               	movwf	(CRCcheck@rt+1)& (0+255),b
  3850  001670  0E00               	movlw	0
  3851  001672  6FC6               	movwf	CRCcheck@rt& (0+255),b
  3852  001674                     l4274:
  3853                           
  3854                           ; BSR set to: 0
  3855  001674  0100               	movlb	0	; () banked
  3856  001676  BFC7               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3857  001678  D00A               	goto	l4278
  3858  00167A  0100               	movlb	0	; () banked
  3859  00167C  51C7               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3860  00167E  E14C               	bnz	l692
  3861  001680  0E05               	movlw	5
  3862  001682  0100               	movlb	0	; () banked
  3863  001684  5DC6               	subwf	CRCcheck@rt& (0+255),w,b
  3864  001686  B0D8               	btfsc	status,0,c
  3865  001688  0012               	return	
  3866  00168A  D001               	goto	l4278
  3867                           
  3868                           ; BSR set to: 0
  3869  00168C  0012               	return	
  3870  00168E                     l4278:
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3874  00168E  0EB0               	movlw	low _crc_buffer
  3875  001690  6E1B               	movwf	crcBufS_get@_this,c
  3876  001692  0E00               	movlw	high _crc_buffer
  3877  001694  6E1C               	movwf	crcBufS_get@_this+1,c
  3878  001696  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3879  00169A  0E00               	movlw	0
  3880  00169C  6E1E               	movwf	crcBufS_get@space,c
  3881  00169E  EC37  F00F         	call	_crcBufS_get	;wreg free
  3882  0016A2  183F               	xorwf	_returnAddress,w,c
  3883  0016A4  A4D8               	btfss	status,2,c
  3884  0016A6  D02F               	goto	l4292
  3885                           
  3886                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3887  0016A8  0EB0               	movlw	low _crc_buffer
  3888  0016AA  6E1B               	movwf	crcBufS_get@_this,c
  3889  0016AC  0E00               	movlw	high _crc_buffer
  3890  0016AE  6E1C               	movwf	crcBufS_get@_this+1,c
  3891  0016B0  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3892  0016B4  0E01               	movlw	1
  3893  0016B6  6E1E               	movwf	crcBufS_get@space,c
  3894  0016B8  EC37  F00F         	call	_crcBufS_get	;wreg free
  3895  0016BC  0100               	movlb	0	; () banked
  3896  0016BE  19C5               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3897  0016C0  A4D8               	btfss	status,2,c
  3898  0016C2  D021               	goto	l4292
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3902  0016C4  0100               	movlb	0	; () banked
  3903  0016C6  05C4               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3904  0016C8  A4D8               	btfss	status,2,c
  3905  0016CA  D00C               	goto	l4288
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3909  0016CC  0EB0               	movlw	low _crc_buffer
  3910  0016CE  6E1B               	movwf	crcBufS_status_put@_this,c
  3911  0016D0  0E00               	movlw	high _crc_buffer
  3912  0016D2  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3913  0016D4  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3914  0016D8  0E01               	movlw	1
  3915  0016DA  6E1E               	movwf	crcBufS_status_put@status,c
  3916  0016DC  EC18  F010         	call	_crcBufS_status_put	;wreg free
  3917                           
  3918                           ;FastTransfer.c: 393: break;
  3919  0016E0  0012               	return	
  3920                           
  3921                           ;FastTransfer.c: 394: } else if (arrayHolder[1] == 2) {
  3922  0016E2  D011               	goto	l4292
  3923  0016E4                     l4288:
  3924  0016E4  0E02               	movlw	2
  3925  0016E6  0100               	movlb	0	; () banked
  3926  0016E8  19C4               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3927  0016EA  A4D8               	btfss	status,2,c
  3928  0016EC  D00C               	goto	l4292
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3932  0016EE  0EB0               	movlw	low _crc_buffer
  3933  0016F0  6E1B               	movwf	crcBufS_status_put@_this,c
  3934  0016F2  0E00               	movlw	high _crc_buffer
  3935  0016F4  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3936  0016F6  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3937  0016FA  0E02               	movlw	2
  3938  0016FC  6E1E               	movwf	crcBufS_status_put@status,c
  3939  0016FE  EC18  F010         	call	_crcBufS_status_put	;wreg free
  3940                           
  3941                           ;FastTransfer.c: 396: break;
  3942  001702  0012               	return	
  3943  001704  D000               	goto	l4292
  3944  001706                     l4292:
  3945  001706  0100               	movlb	0	; () banked
  3946  001708  4BC6               	infsnz	CRCcheck@rt& (0+255),f,b
  3947  00170A  2BC7               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3948  00170C  D7B3               	goto	l4274
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;FastTransfer.c: 397: }
  3952                           ;FastTransfer.c: 398: }
  3953                           ;FastTransfer.c: 399: }
  3954                           ;FastTransfer.c: 400: }
  3955                           ;FastTransfer.c: 401: } else {
  3956                           
  3957                           ; BSR set to: 0
  3958  00170E  0012               	return	
  3959  001710                     l4296:
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;FastTransfer.c: 402: crcErrorCounter++;
  3963  001710  0100               	movlb	0	; () banked
  3964  001712  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  3965  001714  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3966  001716  0012               	return	
  3967  001718                     l692:
  3968  001718  0012               	return		;funcret
  3969  00171A                     __end_of_CRCcheck:
  3970                           	opt stack 0
  3971                           tosu	equ	0xFFF
  3972                           tosh	equ	0xFFE
  3973                           tosl	equ	0xFFD
  3974                           pclath	equ	0xFFA
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           intcon	equ	0xFF2
  3982                           postinc0	equ	0xFEE
  3983                           wreg	equ	0xFE8
  3984                           postdec1	equ	0xFE5
  3985                           fsr1l	equ	0xFE1
  3986                           indf2	equ	0xFDF
  3987                           postinc2	equ	0xFDE
  3988                           postdec2	equ	0xFDD
  3989                           plusw2	equ	0xFDB
  3990                           fsr2h	equ	0xFDA
  3991                           fsr2l	equ	0xFD9
  3992                           status	equ	0xFD8
  3993                           
  3994 ;; *************** function _crcBufS_status_put *****************
  3995 ;; Defined at:
  3996 ;;		line 336 in file "FastTransfer.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3999 ;;		 -> crc_buffer(17), 
  4000 ;;  time            1   28[COMRAM] unsigned char 
  4001 ;;  status          1   29[COMRAM] unsigned char 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  wantedTime      2   34[COMRAM] int 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;		None               void
  4006 ;; Registers used:
  4007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4013 ;;      Params:         4       0       0       0       0       0       0
  4014 ;;      Locals:         2       0       0       0       0       0       0
  4015 ;;      Temps:          4       0       0       0       0       0       0
  4016 ;;      Totals:        10       0       0       0       0       0       0
  4017 ;;Total ram usage:       10 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    4
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_CRCcheck
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text11
  4028  002030                     __ptext11:
  4029                           	opt stack 0
  4030  002030                     _crcBufS_status_put:
  4031                           	opt stack 23
  4032                           
  4033                           ;FastTransfer.c: 337: if (time >= 5) {
  4034                           
  4035                           ;incstack = 0
  4036  002030  0E04               	movlw	4
  4037  002032  641D               	cpfsgt	crcBufS_status_put@time,c
  4038  002034  D003               	goto	l4190
  4039                           
  4040                           ;FastTransfer.c: 338: time = 5 - 1;
  4041  002036  0E04               	movlw	4
  4042  002038  6E1D               	movwf	crcBufS_status_put@time,c
  4043  00203A  D000               	goto	l4190
  4044  00203C                     l4190:
  4045                           
  4046                           ;FastTransfer.c: 339: }
  4047                           ;FastTransfer.c: 340: time = time + 1;
  4048  00203C  281D               	incf	crcBufS_status_put@time,w,c
  4049  00203E  6E1D               	movwf	crcBufS_status_put@time,c
  4050                           
  4051                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4052  002040  501D               	movf	crcBufS_status_put@time,w,c
  4053  002042  0D03               	mullw	3
  4054  002044  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4055  002048  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4056                           
  4057                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4058  00204C  EE20 F00F          	lfsr	2,15
  4059  002050  501B               	movf	crcBufS_status_put@_this,w,c
  4060  002052  26D9               	addwf	fsr2l,f,c
  4061  002054  501C               	movf	crcBufS_status_put@_this+1,w,c
  4062  002056  22DA               	addwfc	fsr2h,f,c
  4063  002058  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4064  00205A  5CDE               	subwf	postinc2,w,c
  4065  00205C  50DE               	movf	postinc2,w,c
  4066  00205E  0A80               	xorlw	128
  4067  002060  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4068  002062  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4069  002064  0A80               	xorlw	128
  4070  002066  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4071  002068  B0D8               	btfsc	status,0,c
  4072  00206A  D02B               	goto	l4198
  4073                           
  4074                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4075  00206C  EE20 F00F          	lfsr	2,15
  4076  002070  501B               	movf	crcBufS_status_put@_this,w,c
  4077  002072  26D9               	addwf	fsr2l,f,c
  4078  002074  501C               	movf	crcBufS_status_put@_this+1,w,c
  4079  002076  22DA               	addwfc	fsr2h,f,c
  4080  002078  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4081  00207C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4082  002080  1E1F               	comf	??_crcBufS_status_put,f,c
  4083  002082  1E20               	comf	??_crcBufS_status_put+1,f,c
  4084  002084  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4085  002086  2A20               	incf	??_crcBufS_status_put+1,f,c
  4086  002088  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4087  00208A  261F               	addwf	??_crcBufS_status_put,f,c
  4088  00208C  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4089  00208E  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4090  002090  1E1F               	comf	??_crcBufS_status_put,f,c
  4091  002092  1E20               	comf	??_crcBufS_status_put+1,f,c
  4092  002094  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4093  002096  2A20               	incf	??_crcBufS_status_put+1,f,c
  4094  002098  0E0F               	movlw	15
  4095  00209A  241F               	addwf	??_crcBufS_status_put,w,c
  4096  00209C  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4097  00209E  0E00               	movlw	0
  4098  0020A0  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4099  0020A2  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4100                           
  4101                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4102  0020A4  0E02               	movlw	2
  4103  0020A6  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4104  0020A8  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4105  0020AA  0E00               	movlw	0
  4106  0020AC  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4107  0020AE  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4108  0020B0  501F               	movf	??_crcBufS_status_put,w,c
  4109  0020B2  241B               	addwf	crcBufS_status_put@_this,w,c
  4110  0020B4  6ED9               	movwf	fsr2l,c
  4111  0020B6  5020               	movf	??_crcBufS_status_put+1,w,c
  4112  0020B8  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4113  0020BA  6EDA               	movwf	fsr2h,c
  4114  0020BC  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4115                           
  4116                           ;FastTransfer.c: 345: } else {
  4117  0020C0  0012               	return	
  4118  0020C2                     l4198:
  4119                           
  4120                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4121  0020C2  EE20 F00F          	lfsr	2,15
  4122  0020C6  501B               	movf	crcBufS_status_put@_this,w,c
  4123  0020C8  26D9               	addwf	fsr2l,f,c
  4124  0020CA  501C               	movf	crcBufS_status_put@_this+1,w,c
  4125  0020CC  22DA               	addwfc	fsr2h,f,c
  4126  0020CE  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4127  0020D2  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4128  0020D6  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4129  0020DA  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4130  0020DE  1E21               	comf	??_crcBufS_status_put+2,f,c
  4131  0020E0  1E22               	comf	??_crcBufS_status_put+3,f,c
  4132  0020E2  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4133  0020E4  2A22               	incf	??_crcBufS_status_put+3,f,c
  4134  0020E6  501F               	movf	??_crcBufS_status_put,w,c
  4135  0020E8  2621               	addwf	??_crcBufS_status_put+2,f,c
  4136  0020EA  5020               	movf	??_crcBufS_status_put+1,w,c
  4137  0020EC  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4138  0020EE  0E02               	movlw	2
  4139  0020F0  2621               	addwf	??_crcBufS_status_put+2,f,c
  4140  0020F2  0E00               	movlw	0
  4141  0020F4  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4142  0020F6  5021               	movf	??_crcBufS_status_put+2,w,c
  4143  0020F8  241B               	addwf	crcBufS_status_put@_this,w,c
  4144  0020FA  6ED9               	movwf	fsr2l,c
  4145  0020FC  5022               	movf	??_crcBufS_status_put+3,w,c
  4146  0020FE  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4147  002100  6EDA               	movwf	fsr2h,c
  4148  002102  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4149  002106  0012               	return	
  4150  002108  0012               	return		;funcret
  4151  00210A                     __end_of_crcBufS_status_put:
  4152                           	opt stack 0
  4153                           tosu	equ	0xFFF
  4154                           tosh	equ	0xFFE
  4155                           tosl	equ	0xFFD
  4156                           pclath	equ	0xFFA
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodh	equ	0xFF4
  4162                           prodl	equ	0xFF3
  4163                           intcon	equ	0xFF2
  4164                           postinc0	equ	0xFEE
  4165                           wreg	equ	0xFE8
  4166                           postdec1	equ	0xFE5
  4167                           fsr1l	equ	0xFE1
  4168                           indf2	equ	0xFDF
  4169                           postinc2	equ	0xFDE
  4170                           postdec2	equ	0xFDD
  4171                           plusw2	equ	0xFDB
  4172                           fsr2h	equ	0xFDA
  4173                           fsr2l	equ	0xFD9
  4174                           status	equ	0xFD8
  4175                           
  4176 ;; *************** function _crcBufS_get *****************
  4177 ;; Defined at:
  4178 ;;		line 353 in file "FastTransfer.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4181 ;;		 -> crc_buffer(17), 
  4182 ;;  time            1   28[COMRAM] unsigned char 
  4183 ;;  space           1   29[COMRAM] unsigned char 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  wantedTime      2   36[COMRAM] int 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      unsigned char 
  4188 ;; Registers used:
  4189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4195 ;;      Params:         4       0       0       0       0       0       0
  4196 ;;      Locals:         2       0       0       0       0       0       0
  4197 ;;      Temps:          6       0       0       0       0       0       0
  4198 ;;      Totals:        12       0       0       0       0       0       0
  4199 ;;Total ram usage:       12 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    4
  4202 ;; This function calls:
  4203 ;;		Nothing
  4204 ;; This function is called by:
  4205 ;;		_CRCcheck
  4206 ;;		_AKNAK
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text12
  4211  001E6E                     __ptext12:
  4212                           	opt stack 0
  4213  001E6E                     _crcBufS_get:
  4214                           	opt stack 23
  4215                           
  4216                           ;FastTransfer.c: 354: if (time >= 5) {
  4217                           
  4218                           ;incstack = 0
  4219  001E6E  0E04               	movlw	4
  4220  001E70  641D               	cpfsgt	crcBufS_get@time,c
  4221  001E72  D003               	goto	l4166
  4222                           
  4223                           ;FastTransfer.c: 355: time = 5 - 1;
  4224  001E74  0E04               	movlw	4
  4225  001E76  6E1D               	movwf	crcBufS_get@time,c
  4226  001E78  D000               	goto	l4166
  4227  001E7A                     l4166:
  4228                           
  4229                           ;FastTransfer.c: 356: }
  4230                           ;FastTransfer.c: 357: if (space >= 3) {
  4231  001E7A  0E02               	movlw	2
  4232  001E7C  641E               	cpfsgt	crcBufS_get@space,c
  4233  001E7E  D003               	goto	l4170
  4234                           
  4235                           ;FastTransfer.c: 358: space = 3 - 1;
  4236  001E80  0E02               	movlw	2
  4237  001E82  6E1E               	movwf	crcBufS_get@space,c
  4238  001E84  D000               	goto	l4170
  4239  001E86                     l4170:
  4240                           
  4241                           ;FastTransfer.c: 359: }
  4242                           ;FastTransfer.c: 360: time = time + 1;
  4243  001E86  281D               	incf	crcBufS_get@time,w,c
  4244  001E88  6E1D               	movwf	crcBufS_get@time,c
  4245                           
  4246                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4247  001E8A  501D               	movf	crcBufS_get@time,w,c
  4248  001E8C  0D03               	mullw	3
  4249  001E8E  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4250  001E92  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4251                           
  4252                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4253  001E96  EE20 F00F          	lfsr	2,15
  4254  001E9A  501B               	movf	crcBufS_get@_this,w,c
  4255  001E9C  26D9               	addwf	fsr2l,f,c
  4256  001E9E  501C               	movf	crcBufS_get@_this+1,w,c
  4257  001EA0  22DA               	addwfc	fsr2h,f,c
  4258  001EA2  5025               	movf	crcBufS_get@wantedTime,w,c
  4259  001EA4  5CDE               	subwf	postinc2,w,c
  4260  001EA6  50DE               	movf	postinc2,w,c
  4261  001EA8  0A80               	xorlw	128
  4262  001EAA  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4263  001EAC  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4264  001EAE  0A80               	xorlw	128
  4265  001EB0  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4266  001EB2  B0D8               	btfsc	status,0,c
  4267  001EB4  D02A               	goto	l4182
  4268                           
  4269                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4270  001EB6  EE20 F00F          	lfsr	2,15
  4271  001EBA  501B               	movf	crcBufS_get@_this,w,c
  4272  001EBC  26D9               	addwf	fsr2l,f,c
  4273  001EBE  501C               	movf	crcBufS_get@_this+1,w,c
  4274  001EC0  22DA               	addwfc	fsr2h,f,c
  4275  001EC2  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4276  001EC6  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4277  001ECA  1E1F               	comf	??_crcBufS_get,f,c
  4278  001ECC  1E20               	comf	??_crcBufS_get+1,f,c
  4279  001ECE  4A1F               	infsnz	??_crcBufS_get,f,c
  4280  001ED0  2A20               	incf	??_crcBufS_get+1,f,c
  4281  001ED2  5025               	movf	crcBufS_get@wantedTime,w,c
  4282  001ED4  261F               	addwf	??_crcBufS_get,f,c
  4283  001ED6  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4284  001ED8  2220               	addwfc	??_crcBufS_get+1,f,c
  4285  001EDA  1E1F               	comf	??_crcBufS_get,f,c
  4286  001EDC  1E20               	comf	??_crcBufS_get+1,f,c
  4287  001EDE  4A1F               	infsnz	??_crcBufS_get,f,c
  4288  001EE0  2A20               	incf	??_crcBufS_get+1,f,c
  4289  001EE2  0E0F               	movlw	15
  4290  001EE4  241F               	addwf	??_crcBufS_get,w,c
  4291  001EE6  6E25               	movwf	crcBufS_get@wantedTime,c
  4292  001EE8  0E00               	movlw	0
  4293  001EEA  2020               	addwfc	??_crcBufS_get+1,w,c
  4294  001EEC  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4295                           
  4296                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4297  001EEE  501E               	movf	crcBufS_get@space,w,c
  4298  001EF0  2425               	addwf	crcBufS_get@wantedTime,w,c
  4299  001EF2  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4300  001EF4  0E00               	movlw	0
  4301  001EF6  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4302  001EF8  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4303  001EFA  501F               	movf	??_crcBufS_get,w,c
  4304  001EFC  241B               	addwf	crcBufS_get@_this,w,c
  4305  001EFE  6ED9               	movwf	fsr2l,c
  4306  001F00  5020               	movf	??_crcBufS_get+1,w,c
  4307  001F02  201C               	addwfc	crcBufS_get@_this+1,w,c
  4308  001F04  6EDA               	movwf	fsr2h,c
  4309  001F06  50DF               	movf	indf2,w,c
  4310                           
  4311                           ;FastTransfer.c: 365: } else {
  4312  001F08  0012               	return	
  4313  001F0A                     l4182:
  4314                           
  4315                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4316  001F0A  EE20 F00F          	lfsr	2,15
  4317  001F0E  501B               	movf	crcBufS_get@_this,w,c
  4318  001F10  26D9               	addwf	fsr2l,f,c
  4319  001F12  501C               	movf	crcBufS_get@_this+1,w,c
  4320  001F14  22DA               	addwfc	fsr2h,f,c
  4321  001F16  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4322  001F1A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4323  001F1E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4324  001F22  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4325  001F26  1E21               	comf	??_crcBufS_get+2,f,c
  4326  001F28  1E22               	comf	??_crcBufS_get+3,f,c
  4327  001F2A  4A21               	infsnz	??_crcBufS_get+2,f,c
  4328  001F2C  2A22               	incf	??_crcBufS_get+3,f,c
  4329  001F2E  501E               	movf	crcBufS_get@space,w,c
  4330  001F30  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4331  001F32  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4332  001F34  5021               	movf	??_crcBufS_get+2,w,c
  4333  001F36  2623               	addwf	??_crcBufS_get+4,f,c
  4334  001F38  5022               	movf	??_crcBufS_get+3,w,c
  4335  001F3A  2224               	addwfc	??_crcBufS_get+5,f,c
  4336  001F3C  501F               	movf	??_crcBufS_get,w,c
  4337  001F3E  2623               	addwf	??_crcBufS_get+4,f,c
  4338  001F40  5020               	movf	??_crcBufS_get+1,w,c
  4339  001F42  2224               	addwfc	??_crcBufS_get+5,f,c
  4340  001F44  5023               	movf	??_crcBufS_get+4,w,c
  4341  001F46  241B               	addwf	crcBufS_get@_this,w,c
  4342  001F48  6ED9               	movwf	fsr2l,c
  4343  001F4A  5024               	movf	??_crcBufS_get+5,w,c
  4344  001F4C  201C               	addwfc	crcBufS_get@_this+1,w,c
  4345  001F4E  6EDA               	movwf	fsr2h,c
  4346  001F50  50DF               	movf	indf2,w,c
  4347  001F52  0012               	return	
  4348  001F54  0012               	return		;funcret
  4349  001F56                     __end_of_crcBufS_get:
  4350                           	opt stack 0
  4351                           tosu	equ	0xFFF
  4352                           tosh	equ	0xFFE
  4353                           tosl	equ	0xFFD
  4354                           pclath	equ	0xFFA
  4355                           tblptru	equ	0xFF8
  4356                           tblptrh	equ	0xFF7
  4357                           tblptrl	equ	0xFF6
  4358                           tablat	equ	0xFF5
  4359                           prodh	equ	0xFF4
  4360                           prodl	equ	0xFF3
  4361                           intcon	equ	0xFF2
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           postdec1	equ	0xFE5
  4365                           fsr1l	equ	0xFE1
  4366                           indf2	equ	0xFDF
  4367                           postinc2	equ	0xFDE
  4368                           postdec2	equ	0xFDD
  4369                           plusw2	equ	0xFDB
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function _Receive_get *****************
  4375 ;; Defined at:
  4376 ;;		line 126 in file "UART.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;		None
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;		None
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  1    wreg      unsigned char 
  4383 ;; Registers used:
  4384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4390 ;;      Params:         0       0       0       0       0       0       0
  4391 ;;      Locals:         0       0       0       0       0       0       0
  4392 ;;      Temps:          0       0       0       0       0       0       0
  4393 ;;      Totals:         0       0       0       0       0       0       0
  4394 ;;Total ram usage:        0 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    6
  4397 ;; This function calls:
  4398 ;;		_UART_buff_get
  4399 ;; This function is called by:
  4400 ;;		_SYSTEM_Initialize
  4401 ;;		_getch
  4402 ;;		_CRCcheck
  4403 ;;		_receiveData
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text13
  4408  002A4A                     __ptext13:
  4409                           	opt stack 0
  4410  002A4A                     _Receive_get:
  4411                           	opt stack 22
  4412                           
  4413                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4414                           
  4415                           ;incstack = 0
  4416  002A4A  0E00               	movlw	low _input_buffer
  4417  002A4C  6E21               	movwf	UART_buff_get@_this,c
  4418  002A4E  0E04               	movlw	high _input_buffer
  4419  002A50  6E22               	movwf	UART_buff_get@_this+1,c
  4420  002A52  EC8B  F011         	call	_UART_buff_get	;wreg free
  4421  002A56  0012               	return	
  4422  002A58  0012               	return		;funcret
  4423  002A5A                     __end_of_Receive_get:
  4424                           	opt stack 0
  4425                           tosu	equ	0xFFF
  4426                           tosh	equ	0xFFE
  4427                           tosl	equ	0xFFD
  4428                           pclath	equ	0xFFA
  4429                           tblptru	equ	0xFF8
  4430                           tblptrh	equ	0xFF7
  4431                           tblptrl	equ	0xFF6
  4432                           tablat	equ	0xFF5
  4433                           prodh	equ	0xFF4
  4434                           prodl	equ	0xFF3
  4435                           intcon	equ	0xFF2
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           postdec1	equ	0xFE5
  4439                           fsr1l	equ	0xFE1
  4440                           indf2	equ	0xFDF
  4441                           postinc2	equ	0xFDE
  4442                           postdec2	equ	0xFDD
  4443                           plusw2	equ	0xFDB
  4444                           fsr2h	equ	0xFDA
  4445                           fsr2l	equ	0xFD9
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _UART_buff_get *****************
  4449 ;; Defined at:
  4450 ;;		line 81 in file "UART.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4453 ;;		 -> output_buffer(206), input_buffer(206), 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  c               1   36[COMRAM] unsigned char 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      unsigned char 
  4458 ;; Registers used:
  4459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4465 ;;      Params:         2       0       0       0       0       0       0
  4466 ;;      Locals:         1       0       0       0       0       0       0
  4467 ;;      Temps:          2       0       0       0       0       0       0
  4468 ;;      Totals:         5       0       0       0       0       0       0
  4469 ;;Total ram usage:        5 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    5
  4472 ;; This function calls:
  4473 ;;		_UART_buff_modulo_inc
  4474 ;; This function is called by:
  4475 ;;		_Receive_get
  4476 ;;		_Send_put
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text14
  4481  002316                     __ptext14:
  4482                           	opt stack 0
  4483  002316                     _UART_buff_get:
  4484                           	opt stack 22
  4485                           
  4486                           ;UART.c: 82: unsigned char c;
  4487                           ;UART.c: 83: if (_this->count > 0) {
  4488                           
  4489                           ;incstack = 0
  4490  002316  EE20 F0CC          	lfsr	2,204
  4491  00231A  5021               	movf	UART_buff_get@_this,w,c
  4492  00231C  26D9               	addwf	fsr2l,f,c
  4493  00231E  5022               	movf	UART_buff_get@_this+1,w,c
  4494  002320  22DA               	addwfc	fsr2h,f,c
  4495  002322  0E01               	movlw	1
  4496  002324  BEDB               	btfsc	plusw2,7,c
  4497  002326  D03C               	goto	l4122
  4498  002328  0E01               	movlw	1
  4499  00232A  50DB               	movf	plusw2,w,c
  4500  00232C  E103               	bnz	u3790
  4501  00232E  04DE               	decf	postinc2,w,c
  4502  002330  A0D8               	btfss	status,0,c
  4503  002332  D036               	goto	l4122
  4504  002334                     u3790:
  4505                           
  4506                           ;UART.c: 84: c = _this->buf[_this->tail];
  4507  002334  EE20 F0CA          	lfsr	2,202
  4508  002338  5021               	movf	UART_buff_get@_this,w,c
  4509  00233A  26D9               	addwf	fsr2l,f,c
  4510  00233C  5022               	movf	UART_buff_get@_this+1,w,c
  4511  00233E  22DA               	addwfc	fsr2h,f,c
  4512  002340  CFDE F023          	movff	postinc2,??_UART_buff_get
  4513  002344  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4514  002348  5023               	movf	??_UART_buff_get,w,c
  4515  00234A  2421               	addwf	UART_buff_get@_this,w,c
  4516  00234C  6ED9               	movwf	fsr2l,c
  4517  00234E  5024               	movf	??_UART_buff_get+1,w,c
  4518  002350  2022               	addwfc	UART_buff_get@_this+1,w,c
  4519  002352  6EDA               	movwf	fsr2h,c
  4520  002354  50DF               	movf	indf2,w,c
  4521  002356  6E25               	movwf	UART_buff_get@c,c
  4522                           
  4523                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4524  002358  EE20 F0CA          	lfsr	2,202
  4525  00235C  5021               	movf	UART_buff_get@_this,w,c
  4526  00235E  26D9               	addwf	fsr2l,f,c
  4527  002360  5022               	movf	UART_buff_get@_this+1,w,c
  4528  002362  22DA               	addwfc	fsr2h,f,c
  4529  002364  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4530  002368  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4531  00236C  0E00               	movlw	0
  4532  00236E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4533  002370  0EC8               	movlw	200
  4534  002372  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4535  002374  ECD8  F013         	call	_UART_buff_modulo_inc	;wreg free
  4536  002378  EE20 F0CA          	lfsr	2,202
  4537  00237C  5021               	movf	UART_buff_get@_this,w,c
  4538  00237E  26D9               	addwf	fsr2l,f,c
  4539  002380  5022               	movf	UART_buff_get@_this+1,w,c
  4540  002382  22DA               	addwfc	fsr2h,f,c
  4541  002384  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4542  002388  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4543                           
  4544                           ;UART.c: 86: --_this->count;
  4545  00238C  EE20 F0CC          	lfsr	2,204
  4546  002390  5021               	movf	UART_buff_get@_this,w,c
  4547  002392  26D9               	addwf	fsr2l,f,c
  4548  002394  5022               	movf	UART_buff_get@_this+1,w,c
  4549  002396  22DA               	addwfc	fsr2h,f,c
  4550  002398  06DE               	decf	postinc2,f,c
  4551  00239A  0E00               	movlw	0
  4552  00239C  5ADD               	subwfb	postdec2,f,c
  4553                           
  4554                           ;UART.c: 87: } else {
  4555  00239E  D002               	goto	l757
  4556  0023A0                     l4122:
  4557                           
  4558                           ;UART.c: 88: c = 0;
  4559  0023A0  0E00               	movlw	0
  4560  0023A2  6E25               	movwf	UART_buff_get@c,c
  4561  0023A4                     l757:
  4562                           
  4563                           ;UART.c: 89: }
  4564                           ;UART.c: 90: return (c);
  4565  0023A4  5025               	movf	UART_buff_get@c,w,c
  4566  0023A6  0012               	return	
  4567  0023A8  0012               	return		;funcret
  4568  0023AA                     __end_of_UART_buff_get:
  4569                           	opt stack 0
  4570                           tosu	equ	0xFFF
  4571                           tosh	equ	0xFFE
  4572                           tosl	equ	0xFFD
  4573                           pclath	equ	0xFFA
  4574                           tblptru	equ	0xFF8
  4575                           tblptrh	equ	0xFF7
  4576                           tblptrl	equ	0xFF6
  4577                           tablat	equ	0xFF5
  4578                           prodh	equ	0xFF4
  4579                           prodl	equ	0xFF3
  4580                           intcon	equ	0xFF2
  4581                           postinc0	equ	0xFEE
  4582                           wreg	equ	0xFE8
  4583                           postdec1	equ	0xFE5
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           postdec2	equ	0xFDD
  4588                           plusw2	equ	0xFDB
  4589                           fsr2h	equ	0xFDA
  4590                           fsr2l	equ	0xFD9
  4591                           status	equ	0xFD8
  4592                           
  4593 ;; *************** function _UART_buff_modulo_inc *****************
  4594 ;; Defined at:
  4595 ;;		line 106 in file "UART.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  value           2   26[COMRAM] const unsigned int 
  4598 ;;  modulus         2   28[COMRAM] const unsigned int 
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;  my_value        2   30[COMRAM] unsigned int 
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  2   26[COMRAM] unsigned int 
  4603 ;; Registers used:
  4604 ;;		wreg, status,2, status,0
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4610 ;;      Params:         4       0       0       0       0       0       0
  4611 ;;      Locals:         2       0       0       0       0       0       0
  4612 ;;      Temps:          0       0       0       0       0       0       0
  4613 ;;      Totals:         6       0       0       0       0       0       0
  4614 ;;Total ram usage:        6 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    4
  4617 ;; This function calls:
  4618 ;;		Nothing
  4619 ;; This function is called by:
  4620 ;;		_UART_buff_put
  4621 ;;		_UART_buff_get
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text15
  4626  0027B0                     __ptext15:
  4627                           	opt stack 0
  4628  0027B0                     _UART_buff_modulo_inc:
  4629                           	opt stack 22
  4630                           
  4631                           ;UART.c: 107: unsigned int my_value = value + 1;
  4632                           
  4633                           ;incstack = 0
  4634  0027B0  0E01               	movlw	1
  4635  0027B2  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4636  0027B4  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4637  0027B6  0E00               	movlw	0
  4638  0027B8  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4639  0027BA  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4640                           
  4641                           ;UART.c: 108: if (my_value >= modulus) {
  4642  0027BC  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4643  0027BE  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4644  0027C0  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4645  0027C2  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4646  0027C4  A0D8               	btfss	status,0,c
  4647  0027C6  D005               	goto	l4110
  4648                           
  4649                           ;UART.c: 109: my_value = 0;
  4650  0027C8  0E00               	movlw	0
  4651  0027CA  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4652  0027CC  0E00               	movlw	0
  4653  0027CE  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4654  0027D0  D000               	goto	l4110
  4655  0027D2                     l4110:
  4656                           
  4657                           ;UART.c: 110: }
  4658                           ;UART.c: 111: return (my_value);
  4659  0027D2  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4660  0027D6  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4661  0027DA  0012               	return	
  4662  0027DC  0012               	return		;funcret
  4663  0027DE                     __end_of_UART_buff_modulo_inc:
  4664                           	opt stack 0
  4665                           tosu	equ	0xFFF
  4666                           tosh	equ	0xFFE
  4667                           tosl	equ	0xFFD
  4668                           pclath	equ	0xFFA
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           intcon	equ	0xFF2
  4676                           postinc0	equ	0xFEE
  4677                           wreg	equ	0xFE8
  4678                           postdec1	equ	0xFE5
  4679                           fsr1l	equ	0xFE1
  4680                           indf2	equ	0xFDF
  4681                           postinc2	equ	0xFDE
  4682                           postdec2	equ	0xFDD
  4683                           plusw2	equ	0xFDB
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function _Receive_available *****************
  4689 ;; Defined at:
  4690 ;;		line 122 in file "UART.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;		None
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;		None
  4695 ;; Return value:  Size  Location     Type
  4696 ;;                  2   28[COMRAM] int 
  4697 ;; Registers used:
  4698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4699 ;; Tracked objects:
  4700 ;;		On entry : 0/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4704 ;;      Params:         2       0       0       0       0       0       0
  4705 ;;      Locals:         0       0       0       0       0       0       0
  4706 ;;      Temps:          0       0       0       0       0       0       0
  4707 ;;      Totals:         2       0       0       0       0       0       0
  4708 ;;Total ram usage:        2 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; Hardware stack levels required when called:    5
  4711 ;; This function calls:
  4712 ;;		_UART_buff_size
  4713 ;; This function is called by:
  4714 ;;		_SYSTEM_Initialize
  4715 ;;		_CRCcheck
  4716 ;;		_receiveData
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text16
  4721  0029B0                     __ptext16:
  4722                           	opt stack 0
  4723  0029B0                     _Receive_available:
  4724                           	opt stack 23
  4725                           
  4726                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4727                           
  4728                           ;incstack = 0
  4729  0029B0  0E00               	movlw	low _input_buffer
  4730  0029B2  6E1B               	movwf	UART_buff_size@_this,c
  4731  0029B4  0E04               	movlw	high _input_buffer
  4732  0029B6  6E1C               	movwf	UART_buff_size@_this+1,c
  4733  0029B8  ECE4  F014         	call	_UART_buff_size	;wreg free
  4734  0029BC  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4735  0029C0  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4736  0029C4  0012               	return	
  4737  0029C6  0012               	return		;funcret
  4738  0029C8                     __end_of_Receive_available:
  4739                           	opt stack 0
  4740                           tosu	equ	0xFFF
  4741                           tosh	equ	0xFFE
  4742                           tosl	equ	0xFFD
  4743                           pclath	equ	0xFFA
  4744                           tblptru	equ	0xFF8
  4745                           tblptrh	equ	0xFF7
  4746                           tblptrl	equ	0xFF6
  4747                           tablat	equ	0xFF5
  4748                           prodh	equ	0xFF4
  4749                           prodl	equ	0xFF3
  4750                           intcon	equ	0xFF2
  4751                           postinc0	equ	0xFEE
  4752                           wreg	equ	0xFE8
  4753                           postdec1	equ	0xFE5
  4754                           fsr1l	equ	0xFE1
  4755                           indf2	equ	0xFDF
  4756                           postinc2	equ	0xFDE
  4757                           postdec2	equ	0xFDD
  4758                           plusw2	equ	0xFDB
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function _UART_buff_size *****************
  4764 ;; Defined at:
  4765 ;;		line 102 in file "UART.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4768 ;;		 -> output_buffer(206), input_buffer(206), 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  2   26[COMRAM] int 
  4773 ;; Registers used:
  4774 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4780 ;;      Params:         2       0       0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0
  4783 ;;      Totals:         2       0       0       0       0       0       0
  4784 ;;Total ram usage:        2 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    4
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_Receive_available
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text17
  4795  0029C8                     __ptext17:
  4796                           	opt stack 0
  4797  0029C8                     _UART_buff_size:
  4798                           	opt stack 23
  4799                           
  4800                           ;UART.c: 103: return (_this->count);
  4801                           
  4802                           ;incstack = 0
  4803  0029C8  EE20 F0CC          	lfsr	2,204
  4804  0029CC  501B               	movf	UART_buff_size@_this,w,c
  4805  0029CE  26D9               	addwf	fsr2l,f,c
  4806  0029D0  501C               	movf	UART_buff_size@_this+1,w,c
  4807  0029D2  22DA               	addwfc	fsr2h,f,c
  4808  0029D4  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4809  0029D8  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4810  0029DC  0012               	return	
  4811  0029DE  0012               	return		;funcret
  4812  0029E0                     __end_of_UART_buff_size:
  4813                           	opt stack 0
  4814                           tosu	equ	0xFFF
  4815                           tosh	equ	0xFFE
  4816                           tosl	equ	0xFFD
  4817                           pclath	equ	0xFFA
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           intcon	equ	0xFF2
  4825                           postinc0	equ	0xFEE
  4826                           wreg	equ	0xFE8
  4827                           postdec1	equ	0xFE5
  4828                           fsr1l	equ	0xFE1
  4829                           indf2	equ	0xFDF
  4830                           postinc2	equ	0xFDE
  4831                           postdec2	equ	0xFDD
  4832                           plusw2	equ	0xFDB
  4833                           fsr2h	equ	0xFDA
  4834                           fsr2l	equ	0xFD9
  4835                           status	equ	0xFD8
  4836                           
  4837 ;; *************** function _CRC8 *****************
  4838 ;; Defined at:
  4839 ;;		line 34 in file "FastTransfer.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4842 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1107(3), receiveData@holder(3), 
  4843 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4844 ;;  len             1   28[COMRAM] unsigned char 
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  sum             1   29[COMRAM] unsigned char 
  4847 ;;  tempI           1   31[COMRAM] unsigned char 
  4848 ;;  extract         1   30[COMRAM] unsigned char 
  4849 ;;  crc             1   32[COMRAM] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      unsigned char 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4859 ;;      Params:         3       0       0       0       0       0       0
  4860 ;;      Locals:         4       0       0       0       0       0       0
  4861 ;;      Temps:          0       0       0       0       0       0       0
  4862 ;;      Totals:         7       0       0       0       0       0       0
  4863 ;;Total ram usage:        7 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    4
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_sendData
  4870 ;;		_receiveData
  4871 ;;		_CRCcheck
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text18
  4876  00256C                     __ptext18:
  4877                           	opt stack 0
  4878  00256C                     _CRC8:
  4879                           	opt stack 24
  4880                           
  4881                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4882                           
  4883                           ;incstack = 0
  4884  00256C  0E00               	movlw	0
  4885  00256E  6E21               	movwf	CRC8@crc,c
  4886                           
  4887                           ;FastTransfer.c: 36: while (len--) {
  4888  002570  D01F               	goto	l4148
  4889  002572                     l4132:
  4890                           
  4891                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4892  002572  C01B  FFD9         	movff	CRC8@data,fsr2l
  4893  002576  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4894  00257A  50DF               	movf	indf2,w,c
  4895  00257C  6E1F               	movwf	CRC8@extract,c
  4896  00257E  4A1B               	infsnz	CRC8@data,f,c
  4897  002580  2A1C               	incf	CRC8@data+1,f,c
  4898                           
  4899                           ;FastTransfer.c: 38: unsigned char tempI;
  4900                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4901  002582  0E08               	movlw	8
  4902  002584  6E20               	movwf	CRC8@tempI,c
  4903  002586  D00F               	goto	l4146
  4904  002588                     l4138:
  4905                           
  4906                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4907  002588  5021               	movf	CRC8@crc,w,c
  4908  00258A  181F               	xorwf	CRC8@extract,w,c
  4909  00258C  0B01               	andlw	1
  4910  00258E  6E1E               	movwf	CRC8@sum,c
  4911                           
  4912                           ;FastTransfer.c: 41: crc >>= 1;
  4913  002590  90D8               	bcf	status,0,c
  4914  002592  3221               	rrcf	CRC8@crc,f,c
  4915                           
  4916                           ;FastTransfer.c: 42: if (sum) {
  4917  002594  501E               	movf	CRC8@sum,w,c
  4918  002596  B4D8               	btfsc	status,2,c
  4919  002598  D002               	goto	l578
  4920                           
  4921                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4922  00259A  0E8C               	movlw	140
  4923  00259C  1A21               	xorwf	CRC8@crc,f,c
  4924  00259E                     l578:
  4925                           
  4926                           ;FastTransfer.c: 44: }
  4927                           ;FastTransfer.c: 45: extract >>= 1;
  4928  00259E  90D8               	bcf	status,0,c
  4929  0025A0  321F               	rrcf	CRC8@extract,f,c
  4930  0025A2  0620               	decf	CRC8@tempI,f,c
  4931  0025A4  D000               	goto	l4146
  4932  0025A6                     l4146:
  4933  0025A6  5020               	movf	CRC8@tempI,w,c
  4934  0025A8  B4D8               	btfsc	status,2,c
  4935  0025AA  D002               	goto	l4148
  4936  0025AC  D7ED               	goto	l4138
  4937  0025AE  D000               	goto	l4148
  4938  0025B0                     l4148:
  4939  0025B0  061D               	decf	CRC8@len,f,c
  4940  0025B2  281D               	incf	CRC8@len,w,c
  4941  0025B4  A4D8               	btfss	status,2,c
  4942  0025B6  D7DD               	goto	l4132
  4943                           
  4944                           ;FastTransfer.c: 46: }
  4945                           ;FastTransfer.c: 47: }
  4946                           ;FastTransfer.c: 48: return crc;
  4947  0025B8  5021               	movf	CRC8@crc,w,c
  4948  0025BA  0012               	return	
  4949  0025BC  0012               	return		;funcret
  4950  0025BE                     __end_of_CRC8:
  4951                           	opt stack 0
  4952                           tosu	equ	0xFFF
  4953                           tosh	equ	0xFFE
  4954                           tosl	equ	0xFFD
  4955                           pclath	equ	0xFFA
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           postinc0	equ	0xFEE
  4964                           wreg	equ	0xFE8
  4965                           postdec1	equ	0xFE5
  4966                           fsr1l	equ	0xFE1
  4967                           indf2	equ	0xFDF
  4968                           postinc2	equ	0xFDE
  4969                           postdec2	equ	0xFDD
  4970                           plusw2	equ	0xFDB
  4971                           fsr2h	equ	0xFDA
  4972                           fsr2l	equ	0xFD9
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function ___fttol *****************
  4976 ;; Defined at:
  4977 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  f1              3    9[BANK0 ] float 
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  lval            4   19[BANK0 ] unsigned long 
  4982 ;;  exp1            1   23[BANK0 ] unsigned char 
  4983 ;;  sign1           1   18[BANK0 ] unsigned char 
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  4    9[BANK0 ] long 
  4986 ;; Registers used:
  4987 ;;		wreg, status,2, status,0
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4993 ;;      Params:         0       4       0       0       0       0       0
  4994 ;;      Locals:         0       6       0       0       0       0       0
  4995 ;;      Temps:          0       5       0       0       0       0       0
  4996 ;;      Totals:         0      15       0       0       0       0       0
  4997 ;;Total ram usage:       15 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    4
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_updateComms
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           	psect	text19
  5008  001884                     __ptext19:
  5009                           	opt stack 0
  5010  001884                     ___fttol:
  5011                           	opt stack 25
  5012                           
  5013                           ;incstack = 0
  5014  001884  C0CC  F0CE         	movff	___fttol@f1+2,??___fttol
  5015  001888  0100               	movlb	0	; () banked
  5016  00188A  6BCF               	clrf	(??___fttol+1)& (0+255),b
  5017  00188C  6BD0               	clrf	(??___fttol+2)& (0+255),b
  5018  00188E  0100               	movlb	0	; () banked
  5019  001890  35CB               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5020  001892  0100               	movlb	0	; () banked
  5021  001894  37CE               	rlcf	??___fttol& (0+255),f,b
  5022  001896  E301               	bnc	u4771
  5023  001898  81CF               	bsf	(??___fttol+1)& (0+255),0,b
  5024  00189A                     u4771:
  5025  00189A  0100               	movlb	0	; () banked
  5026  00189C  51CE               	movf	??___fttol& (0+255),w,b
  5027  00189E  0100               	movlb	0	; () banked
  5028  0018A0  6FD8               	movwf	___fttol@exp1& (0+255),b
  5029  0018A2  0100               	movlb	0	; () banked
  5030  0018A4  51D8               	movf	___fttol@exp1& (0+255),w,b
  5031  0018A6  A4D8               	btfss	status,2,c
  5032  0018A8  D00A               	goto	l4606
  5033                           
  5034                           ; BSR set to: 0
  5035  0018AA  0E00               	movlw	0
  5036  0018AC  0100               	movlb	0	; () banked
  5037  0018AE  6FCA               	movwf	?___fttol& (0+255),b
  5038  0018B0  0E00               	movlw	0
  5039  0018B2  6FCB               	movwf	(?___fttol+1)& (0+255),b
  5040  0018B4  0E00               	movlw	0
  5041  0018B6  6FCC               	movwf	(?___fttol+2)& (0+255),b
  5042  0018B8  0E00               	movlw	0
  5043  0018BA  6FCD               	movwf	(?___fttol+3)& (0+255),b
  5044                           
  5045                           ; BSR set to: 0
  5046  0018BC  0012               	return	
  5047  0018BE                     l4606:
  5048                           
  5049                           ; BSR set to: 0
  5050  0018BE  0E17               	movlw	23
  5051  0018C0  0100               	movlb	0	; () banked
  5052  0018C2  6FCE               	movwf	??___fttol& (0+255),b
  5053  0018C4  C0CA  F0CF         	movff	___fttol@f1,??___fttol+1
  5054  0018C8  C0CB  F0D0         	movff	___fttol@f1+1,??___fttol+2
  5055  0018CC  C0CC  F0D1         	movff	___fttol@f1+2,??___fttol+3
  5056  0018D0  0100               	movlb	0	; () banked
  5057  0018D2  29CE               	incf	??___fttol& (0+255),w,b
  5058  0018D4  0100               	movlb	0	; () banked
  5059  0018D6  6FD2               	movwf	(??___fttol+4)& (0+255),b
  5060  0018D8  D005               	goto	u4790
  5061  0018DA                     u4795:
  5062  0018DA  0100               	movlb	0	; () banked
  5063  0018DC  90D8               	bcf	status,0,c
  5064  0018DE  33D1               	rrcf	(??___fttol+3)& (0+255),f,b
  5065  0018E0  33D0               	rrcf	(??___fttol+2)& (0+255),f,b
  5066  0018E2  33CF               	rrcf	(??___fttol+1)& (0+255),f,b
  5067  0018E4                     u4790:
  5068  0018E4  0100               	movlb	0	; () banked
  5069  0018E6  2FD2               	decfsz	(??___fttol+4)& (0+255),f,b
  5070  0018E8  D7F8               	goto	u4795
  5071  0018EA  0100               	movlb	0	; () banked
  5072  0018EC  51CF               	movf	(??___fttol+1)& (0+255),w,b
  5073  0018EE  0100               	movlb	0	; () banked
  5074  0018F0  6FD3               	movwf	___fttol@sign1& (0+255),b
  5075                           
  5076                           ; BSR set to: 0
  5077  0018F2  0100               	movlb	0	; () banked
  5078  0018F4  8FCB               	bsf	(___fttol@f1+1)& (0+255),7,b
  5079                           
  5080                           ; BSR set to: 0
  5081  0018F6  0EFF               	movlw	255
  5082  0018F8  0100               	movlb	0	; () banked
  5083  0018FA  17CA               	andwf	___fttol@f1& (0+255),f,b
  5084  0018FC  0EFF               	movlw	255
  5085  0018FE  0100               	movlb	0	; () banked
  5086  001900  17CB               	andwf	(___fttol@f1+1)& (0+255),f,b
  5087  001902  0E00               	movlw	0
  5088  001904  0100               	movlb	0	; () banked
  5089  001906  17CC               	andwf	(___fttol@f1+2)& (0+255),f,b
  5090                           
  5091                           ; BSR set to: 0
  5092  001908  0100               	movlb	0	; () banked
  5093  00190A  51CA               	movf	___fttol@f1& (0+255),w,b
  5094  00190C  0100               	movlb	0	; () banked
  5095  00190E  6FD4               	movwf	___fttol@lval& (0+255),b
  5096  001910  0100               	movlb	0	; () banked
  5097  001912  51CB               	movf	(___fttol@f1+1)& (0+255),w,b
  5098  001914  0100               	movlb	0	; () banked
  5099  001916  6FD5               	movwf	(___fttol@lval+1)& (0+255),b
  5100  001918  0100               	movlb	0	; () banked
  5101  00191A  51CC               	movf	(___fttol@f1+2)& (0+255),w,b
  5102  00191C  0100               	movlb	0	; () banked
  5103  00191E  6FD6               	movwf	(___fttol@lval+2)& (0+255),b
  5104  001920  0100               	movlb	0	; () banked
  5105  001922  6BD7               	clrf	(___fttol@lval+3)& (0+255),b
  5106                           
  5107                           ; BSR set to: 0
  5108  001924  0E8E               	movlw	142
  5109  001926  0100               	movlb	0	; () banked
  5110  001928  5FD8               	subwf	___fttol@exp1& (0+255),f,b
  5111                           
  5112                           ; BSR set to: 0
  5113  00192A  0100               	movlb	0	; () banked
  5114  00192C  AFD8               	btfss	___fttol@exp1& (0+255),7,b
  5115  00192E  D01B               	goto	l4628
  5116                           
  5117                           ; BSR set to: 0
  5118  001930  0100               	movlb	0	; () banked
  5119  001932  51D8               	movf	___fttol@exp1& (0+255),w,b
  5120  001934  0A80               	xorlw	128
  5121  001936  0F8F               	addlw	143
  5122  001938  B0D8               	btfsc	status,0,c
  5123  00193A  D00B               	goto	l4624
  5124                           
  5125                           ; BSR set to: 0
  5126  00193C  0E00               	movlw	0
  5127  00193E  0100               	movlb	0	; () banked
  5128  001940  6FCA               	movwf	?___fttol& (0+255),b
  5129  001942  0E00               	movlw	0
  5130  001944  6FCB               	movwf	(?___fttol+1)& (0+255),b
  5131  001946  0E00               	movlw	0
  5132  001948  6FCC               	movwf	(?___fttol+2)& (0+255),b
  5133  00194A  0E00               	movlw	0
  5134  00194C  6FCD               	movwf	(?___fttol+3)& (0+255),b
  5135                           
  5136                           ; BSR set to: 0
  5137  00194E  0012               	return	
  5138                           
  5139                           ; BSR set to: 0
  5140  001950  D000               	goto	l4624
  5141  001952                     l4624:
  5142                           
  5143                           ; BSR set to: 0
  5144  001952  0100               	movlb	0	; () banked
  5145  001954  90D8               	bcf	status,0,c
  5146  001956  33D7               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5147  001958  33D6               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5148  00195A  33D5               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5149  00195C  33D4               	rrcf	___fttol@lval& (0+255),f,b
  5150                           
  5151                           ; BSR set to: 0
  5152  00195E  0100               	movlb	0	; () banked
  5153  001960  3FD8               	incfsz	___fttol@exp1& (0+255),f,b
  5154  001962  D7F7               	goto	l4624
  5155                           
  5156                           ; BSR set to: 0
  5157  001964  D01F               	goto	l4638
  5158  001966                     l4628:
  5159                           
  5160                           ; BSR set to: 0
  5161  001966  0E17               	movlw	23
  5162  001968  0100               	movlb	0	; () banked
  5163  00196A  65D8               	cpfsgt	___fttol@exp1& (0+255),b
  5164  00196C  D014               	goto	l4636
  5165                           
  5166                           ; BSR set to: 0
  5167  00196E  0E00               	movlw	0
  5168  001970  0100               	movlb	0	; () banked
  5169  001972  6FCA               	movwf	?___fttol& (0+255),b
  5170  001974  0E00               	movlw	0
  5171  001976  6FCB               	movwf	(?___fttol+1)& (0+255),b
  5172  001978  0E00               	movlw	0
  5173  00197A  6FCC               	movwf	(?___fttol+2)& (0+255),b
  5174  00197C  0E00               	movlw	0
  5175  00197E  6FCD               	movwf	(?___fttol+3)& (0+255),b
  5176                           
  5177                           ; BSR set to: 0
  5178  001980  0012               	return	
  5179                           
  5180                           ; BSR set to: 0
  5181  001982  D009               	goto	l4636
  5182  001984                     l4634:
  5183                           
  5184                           ; BSR set to: 0
  5185  001984  0100               	movlb	0	; () banked
  5186  001986  90D8               	bcf	status,0,c
  5187  001988  37D4               	rlcf	___fttol@lval& (0+255),f,b
  5188  00198A  37D5               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5189  00198C  37D6               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5190  00198E  37D7               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5191  001990  0100               	movlb	0	; () banked
  5192  001992  07D8               	decf	___fttol@exp1& (0+255),f,b
  5193  001994  D000               	goto	l4636
  5194  001996                     l4636:
  5195                           
  5196                           ; BSR set to: 0
  5197  001996  0100               	movlb	0	; () banked
  5198  001998  51D8               	movf	___fttol@exp1& (0+255),w,b
  5199  00199A  0100               	movlb	0	; () banked
  5200  00199C  B4D8               	btfsc	status,2,c
  5201  00199E  D002               	goto	l4638
  5202  0019A0  D7F1               	goto	l4634
  5203                           
  5204                           ; BSR set to: 0
  5205  0019A2  D000               	goto	l4638
  5206  0019A4                     l4638:
  5207                           
  5208                           ; BSR set to: 0
  5209  0019A4  0100               	movlb	0	; () banked
  5210  0019A6  51D3               	movf	___fttol@sign1& (0+255),w,b
  5211  0019A8  0100               	movlb	0	; () banked
  5212  0019AA  B4D8               	btfsc	status,2,c
  5213  0019AC  D00A               	goto	l4642
  5214                           
  5215                           ; BSR set to: 0
  5216  0019AE  0100               	movlb	0	; () banked
  5217  0019B0  1FD7               	comf	(___fttol@lval+3)& (0+255),f,b
  5218  0019B2  1FD6               	comf	(___fttol@lval+2)& (0+255),f,b
  5219  0019B4  1FD5               	comf	(___fttol@lval+1)& (0+255),f,b
  5220  0019B6  6DD4               	negf	___fttol@lval& (0+255),b
  5221  0019B8  0E00               	movlw	0
  5222  0019BA  23D5               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5223  0019BC  23D6               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5224  0019BE  23D7               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5225  0019C0  D000               	goto	l4642
  5226  0019C2                     l4642:
  5227                           
  5228                           ; BSR set to: 0
  5229  0019C2  C0D4  F0CA         	movff	___fttol@lval,?___fttol
  5230  0019C6  C0D5  F0CB         	movff	___fttol@lval+1,?___fttol+1
  5231  0019CA  C0D6  F0CC         	movff	___fttol@lval+2,?___fttol+2
  5232  0019CE  C0D7  F0CD         	movff	___fttol@lval+3,?___fttol+3
  5233  0019D2  0012               	return	
  5234                           
  5235                           ; BSR set to: 0
  5236                           
  5237                           ; BSR set to: 0
  5238  0019D4  0012               	return		;funcret
  5239  0019D6                     __end_of___fttol:
  5240                           	opt stack 0
  5241                           tosu	equ	0xFFF
  5242                           tosh	equ	0xFFE
  5243                           tosl	equ	0xFFD
  5244                           pclath	equ	0xFFA
  5245                           tblptru	equ	0xFF8
  5246                           tblptrh	equ	0xFF7
  5247                           tblptrl	equ	0xFF6
  5248                           tablat	equ	0xFF5
  5249                           prodh	equ	0xFF4
  5250                           prodl	equ	0xFF3
  5251                           intcon	equ	0xFF2
  5252                           postinc0	equ	0xFEE
  5253                           wreg	equ	0xFE8
  5254                           postdec1	equ	0xFE5
  5255                           fsr1l	equ	0xFE1
  5256                           indf2	equ	0xFDF
  5257                           postinc2	equ	0xFDE
  5258                           postdec2	equ	0xFDD
  5259                           plusw2	equ	0xFDB
  5260                           fsr2h	equ	0xFDA
  5261                           fsr2l	equ	0xFD9
  5262                           status	equ	0xFD8
  5263                           
  5264 ;; *************** function _ToSend *****************
  5265 ;; Defined at:
  5266 ;;		line 216 in file "FastTransfer.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;  where           1    wreg     unsigned char 
  5269 ;;  what            2   24[BANK0 ] unsigned int 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  where           1   43[COMRAM] unsigned char 
  5272 ;; Return value:  Size  Location     Type
  5273 ;;		None               void
  5274 ;; Registers used:
  5275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5281 ;;      Params:         0       2       0       0       0       0       0
  5282 ;;      Locals:         1       0       0       0       0       0       0
  5283 ;;      Temps:          0       0       0       0       0       0       0
  5284 ;;      Totals:         1       2       0       0       0       0       0
  5285 ;;Total ram usage:        3 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:    6
  5288 ;; This function calls:
  5289 ;;		_FastTransfer_buffer_put
  5290 ;; This function is called by:
  5291 ;;		_updateComms
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text20
  5296  00297A                     __ptext20:
  5297                           	opt stack 0
  5298  00297A                     _ToSend:
  5299                           	opt stack 23
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;incstack = 0
  5303                           ;ToSend@where stored from wreg
  5304  00297A  6E2C               	movwf	ToSend@where,c
  5305                           
  5306                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  5307  00297C  0E00               	movlw	low _ring_buffer
  5308  00297E  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5309  002980  0E02               	movlw	high _ring_buffer
  5310  002982  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5311  002984  C02C  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5312  002988  C0D9  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5313  00298C  C0DA  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5314  002990  EC8D  F00B         	call	_FastTransfer_buffer_put	;wreg free
  5315  002994  0012               	return		;funcret
  5316  002996                     __end_of_ToSend:
  5317                           	opt stack 0
  5318                           tosu	equ	0xFFF
  5319                           tosh	equ	0xFFE
  5320                           tosl	equ	0xFFD
  5321                           pclath	equ	0xFFA
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           intcon	equ	0xFF2
  5329                           postinc0	equ	0xFEE
  5330                           wreg	equ	0xFE8
  5331                           postdec1	equ	0xFE5
  5332                           fsr1l	equ	0xFE1
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           postdec2	equ	0xFDD
  5336                           plusw2	equ	0xFDB
  5337                           fsr2h	equ	0xFDA
  5338                           fsr2l	equ	0xFD9
  5339                           status	equ	0xFD8
  5340                           
  5341 ;; *************** function _FastTransfer_buffer_put *****************
  5342 ;; Defined at:
  5343 ;;		line 223 in file "FastTransfer.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5346 ;;		 -> ring_buffer(206), 
  5347 ;;  towhere         1   34[COMRAM] unsigned char 
  5348 ;;  towhat          2   35[COMRAM] unsigned int 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;		None
  5351 ;; Return value:  Size  Location     Type
  5352 ;;		None               void
  5353 ;; Registers used:
  5354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5360 ;;      Params:         5       0       0       0       0       0       0
  5361 ;;      Locals:         0       0       0       0       0       0       0
  5362 ;;      Temps:          2       0       0       0       0       0       0
  5363 ;;      Totals:         7       0       0       0       0       0       0
  5364 ;;Total ram usage:        7 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    5
  5367 ;; This function calls:
  5368 ;;		_FastTransfer_buffer_modulo_inc
  5369 ;; This function is called by:
  5370 ;;		_ToSend
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text21
  5375  00171A                     __ptext21:
  5376                           	opt stack 0
  5377  00171A                     _FastTransfer_buffer_put:
  5378                           	opt stack 23
  5379                           
  5380                           ;FastTransfer.c: 225: group.integer = towhat;
  5381                           
  5382                           ;incstack = 0
  5383  00171A  C024  F043         	movff	FastTransfer_buffer_put@towhat,_group
  5384  00171E  C025  F044         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5385                           
  5386                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  5387  001722  EE20 F0CC          	lfsr	2,204
  5388  001726  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5389  001728  26D9               	addwf	fsr2l,f,c
  5390  00172A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5391  00172C  22DA               	addwfc	fsr2h,f,c
  5392  00172E  0E01               	movlw	1
  5393  001730  BEDB               	btfsc	plusw2,7,c
  5394  001732  D007               	goto	l4302
  5395  001734  0E01               	movlw	1
  5396  001736  50DB               	movf	plusw2,w,c
  5397  001738  E103               	bnz	u4111
  5398  00173A  0EC5               	movlw	197
  5399  00173C  5CDE               	subwf	postinc2,w,c
  5400  00173E  B0D8               	btfsc	status,0,c
  5401  001740                     u4111:
  5402  001740  0012               	return	
  5403  001742                     l4302:
  5404                           
  5405                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  5406  001742  EE20 F0C8          	lfsr	2,200
  5407  001746  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5408  001748  26D9               	addwf	fsr2l,f,c
  5409  00174A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5410  00174C  22DA               	addwfc	fsr2h,f,c
  5411  00174E  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5412  001752  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5413  001756  5026               	movf	??_FastTransfer_buffer_put,w,c
  5414  001758  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5415  00175A  6ED9               	movwf	fsr2l,c
  5416  00175C  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5417  00175E  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5418  001760  6EDA               	movwf	fsr2h,c
  5419  001762  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5420                           
  5421                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5422  001766  EE20 F0C8          	lfsr	2,200
  5423  00176A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5424  00176C  26D9               	addwf	fsr2l,f,c
  5425  00176E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5426  001770  22DA               	addwfc	fsr2h,f,c
  5427  001772  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5428  001776  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5429  00177A  0E00               	movlw	0
  5430  00177C  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5431  00177E  0EC8               	movlw	200
  5432  001780  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5433  001782  ECEF  F013         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5434  001786  EE20 F0C8          	lfsr	2,200
  5435  00178A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5436  00178C  26D9               	addwf	fsr2l,f,c
  5437  00178E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5438  001790  22DA               	addwfc	fsr2h,f,c
  5439  001792  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5440  001796  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5441                           
  5442                           ;FastTransfer.c: 230: ++_this->count;
  5443  00179A  EE20 F0CC          	lfsr	2,204
  5444  00179E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5445  0017A0  26D9               	addwf	fsr2l,f,c
  5446  0017A2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5447  0017A4  22DA               	addwfc	fsr2h,f,c
  5448  0017A6  2ADE               	incf	postinc2,f,c
  5449  0017A8  0E00               	movlw	0
  5450  0017AA  22DD               	addwfc	postdec2,f,c
  5451                           
  5452                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  5453  0017AC  EE20 F0C8          	lfsr	2,200
  5454  0017B0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5455  0017B2  26D9               	addwf	fsr2l,f,c
  5456  0017B4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5457  0017B6  22DA               	addwfc	fsr2h,f,c
  5458  0017B8  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5459  0017BC  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5460  0017C0  5026               	movf	??_FastTransfer_buffer_put,w,c
  5461  0017C2  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5462  0017C4  6ED9               	movwf	fsr2l,c
  5463  0017C6  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5464  0017C8  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5465  0017CA  6EDA               	movwf	fsr2h,c
  5466  0017CC  C043  FFDF         	movff	_group,indf2
  5467                           
  5468                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5469  0017D0  EE20 F0C8          	lfsr	2,200
  5470  0017D4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5471  0017D6  26D9               	addwf	fsr2l,f,c
  5472  0017D8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5473  0017DA  22DA               	addwfc	fsr2h,f,c
  5474  0017DC  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5475  0017E0  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5476  0017E4  0E00               	movlw	0
  5477  0017E6  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5478  0017E8  0EC8               	movlw	200
  5479  0017EA  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5480  0017EC  ECEF  F013         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5481  0017F0  EE20 F0C8          	lfsr	2,200
  5482  0017F4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5483  0017F6  26D9               	addwf	fsr2l,f,c
  5484  0017F8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5485  0017FA  22DA               	addwfc	fsr2h,f,c
  5486  0017FC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5487  001800  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5488                           
  5489                           ;FastTransfer.c: 233: ++_this->count;
  5490  001804  EE20 F0CC          	lfsr	2,204
  5491  001808  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5492  00180A  26D9               	addwf	fsr2l,f,c
  5493  00180C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5494  00180E  22DA               	addwfc	fsr2h,f,c
  5495  001810  2ADE               	incf	postinc2,f,c
  5496  001812  0E00               	movlw	0
  5497  001814  22DD               	addwfc	postdec2,f,c
  5498                           
  5499                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  5500  001816  EE20 F0C8          	lfsr	2,200
  5501  00181A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5502  00181C  26D9               	addwf	fsr2l,f,c
  5503  00181E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5504  001820  22DA               	addwfc	fsr2h,f,c
  5505  001822  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5506  001826  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5507  00182A  5026               	movf	??_FastTransfer_buffer_put,w,c
  5508  00182C  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5509  00182E  6ED9               	movwf	fsr2l,c
  5510  001830  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5511  001832  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5512  001834  6EDA               	movwf	fsr2h,c
  5513  001836  C044  FFDF         	movff	_group+1,indf2
  5514                           
  5515                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5516  00183A  EE20 F0C8          	lfsr	2,200
  5517  00183E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5518  001840  26D9               	addwf	fsr2l,f,c
  5519  001842  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5520  001844  22DA               	addwfc	fsr2h,f,c
  5521  001846  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5522  00184A  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5523  00184E  0E00               	movlw	0
  5524  001850  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5525  001852  0EC8               	movlw	200
  5526  001854  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5527  001856  ECEF  F013         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5528  00185A  EE20 F0C8          	lfsr	2,200
  5529  00185E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5530  001860  26D9               	addwf	fsr2l,f,c
  5531  001862  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5532  001864  22DA               	addwfc	fsr2h,f,c
  5533  001866  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5534  00186A  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5535                           
  5536                           ;FastTransfer.c: 236: ++_this->count;
  5537  00186E  EE20 F0CC          	lfsr	2,204
  5538  001872  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5539  001874  26D9               	addwf	fsr2l,f,c
  5540  001876  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5541  001878  22DA               	addwfc	fsr2h,f,c
  5542  00187A  2ADE               	incf	postinc2,f,c
  5543  00187C  0E00               	movlw	0
  5544  00187E  22DD               	addwfc	postdec2,f,c
  5545  001880  0012               	return	
  5546  001882  0012               	return		;funcret
  5547  001884                     __end_of_FastTransfer_buffer_put:
  5548                           	opt stack 0
  5549                           tosu	equ	0xFFF
  5550                           tosh	equ	0xFFE
  5551                           tosl	equ	0xFFD
  5552                           pclath	equ	0xFFA
  5553                           tblptru	equ	0xFF8
  5554                           tblptrh	equ	0xFF7
  5555                           tblptrl	equ	0xFF6
  5556                           tablat	equ	0xFF5
  5557                           prodh	equ	0xFF4
  5558                           prodl	equ	0xFF3
  5559                           intcon	equ	0xFF2
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           postdec1	equ	0xFE5
  5563                           fsr1l	equ	0xFE1
  5564                           indf2	equ	0xFDF
  5565                           postinc2	equ	0xFDE
  5566                           postdec2	equ	0xFDD
  5567                           plusw2	equ	0xFDB
  5568                           fsr2h	equ	0xFDA
  5569                           fsr2l	equ	0xFD9
  5570                           status	equ	0xFD8
  5571                           
  5572 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5573 ;; Defined at:
  5574 ;;		line 273 in file "FastTransfer.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  value           2   26[COMRAM] const unsigned int 
  5577 ;;  modulus         2   28[COMRAM] const unsigned int 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  my_value        2   30[COMRAM] unsigned int 
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  2   26[COMRAM] unsigned int 
  5582 ;; Registers used:
  5583 ;;		wreg, status,2, status,0
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5589 ;;      Params:         4       0       0       0       0       0       0
  5590 ;;      Locals:         2       0       0       0       0       0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0
  5592 ;;      Totals:         6       0       0       0       0       0       0
  5593 ;;Total ram usage:        6 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    4
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_FastTransfer_buffer_put
  5600 ;;		_FastTransfer_buffer_get
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text22
  5605  0027DE                     __ptext22:
  5606                           	opt stack 0
  5607  0027DE                     _FastTransfer_buffer_modulo_inc:
  5608                           	opt stack 23
  5609                           
  5610                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  5611                           
  5612                           ;incstack = 0
  5613  0027DE  0E01               	movlw	1
  5614  0027E0  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5615  0027E2  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5616  0027E4  0E00               	movlw	0
  5617  0027E6  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5618  0027E8  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5619                           
  5620                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  5621  0027EA  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5622  0027EC  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5623  0027EE  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5624  0027F0  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5625  0027F2  A0D8               	btfss	status,0,c
  5626  0027F4  D005               	goto	l4158
  5627                           
  5628                           ;FastTransfer.c: 276: my_value = 0;
  5629  0027F6  0E00               	movlw	0
  5630  0027F8  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5631  0027FA  0E00               	movlw	0
  5632  0027FC  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5633  0027FE  D000               	goto	l4158
  5634  002800                     l4158:
  5635                           
  5636                           ;FastTransfer.c: 277: }
  5637                           ;FastTransfer.c: 278: return (my_value);
  5638  002800  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5639  002804  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5640  002808  0012               	return	
  5641  00280A  0012               	return		;funcret
  5642  00280C                     __end_of_FastTransfer_buffer_modulo_inc:
  5643                           	opt stack 0
  5644                           tosu	equ	0xFFF
  5645                           tosh	equ	0xFFE
  5646                           tosl	equ	0xFFD
  5647                           pclath	equ	0xFFA
  5648                           tblptru	equ	0xFF8
  5649                           tblptrh	equ	0xFF7
  5650                           tblptrl	equ	0xFF6
  5651                           tablat	equ	0xFF5
  5652                           prodh	equ	0xFF4
  5653                           prodl	equ	0xFF3
  5654                           intcon	equ	0xFF2
  5655                           postinc0	equ	0xFEE
  5656                           wreg	equ	0xFE8
  5657                           postdec1	equ	0xFE5
  5658                           fsr1l	equ	0xFE1
  5659                           indf2	equ	0xFDF
  5660                           postinc2	equ	0xFDE
  5661                           postdec2	equ	0xFDD
  5662                           plusw2	equ	0xFDB
  5663                           fsr2h	equ	0xFDA
  5664                           fsr2l	equ	0xFD9
  5665                           status	equ	0xFD8
  5666                           
  5667 ;; *************** function _Tempeture_Get *****************
  5668 ;; Defined at:
  5669 ;;		line 91 in file "Tempeture.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;  channelnum      2   32[COMRAM] int 
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  3   32[COMRAM] float 
  5676 ;; Registers used:
  5677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5683 ;;      Params:         3       0       0       0       0       0       0
  5684 ;;      Locals:         0       0       0       0       0       0       0
  5685 ;;      Temps:          0       0       0       0       0       0       0
  5686 ;;      Totals:         3       0       0       0       0       0       0
  5687 ;;Total ram usage:        3 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    5
  5690 ;; This function calls:
  5691 ;;		___wmul
  5692 ;; This function is called by:
  5693 ;;		_updateComms
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text23
  5698  002780                     __ptext23:
  5699                           	opt stack 0
  5700  002780                     _Tempeture_Get:
  5701                           	opt stack 24
  5702                           
  5703                           ;Tempeture.c: 93: return Temp_DegF[channelnum];
  5704                           
  5705                           ;incstack = 0
  5706  002780  C021  F01B         	movff	Tempeture_Get@channelnum,___wmul@multiplier
  5707  002784  C022  F01C         	movff	Tempeture_Get@channelnum+1,___wmul@multiplier+1
  5708  002788  0E00               	movlw	0
  5709  00278A  6E1E               	movwf	___wmul@multiplicand+1,c
  5710  00278C  0E03               	movlw	3
  5711  00278E  6E1D               	movwf	___wmul@multiplicand,c
  5712  002790  EC49  F014         	call	___wmul	;wreg free
  5713  002794  0EA0               	movlw	low _Temp_DegF
  5714  002796  241B               	addwf	?___wmul,w,c
  5715  002798  6ED9               	movwf	fsr2l,c
  5716  00279A  0E01               	movlw	high _Temp_DegF
  5717  00279C  201C               	addwfc	?___wmul+1,w,c
  5718  00279E  6EDA               	movwf	fsr2h,c
  5719  0027A0  CFDE F021          	movff	postinc2,?_Tempeture_Get
  5720  0027A4  CFDE F022          	movff	postinc2,?_Tempeture_Get+1
  5721  0027A8  CFDD F023          	movff	postdec2,?_Tempeture_Get+2
  5722  0027AC  0012               	return	
  5723  0027AE  0012               	return		;funcret
  5724  0027B0                     __end_of_Tempeture_Get:
  5725                           	opt stack 0
  5726                           tosu	equ	0xFFF
  5727                           tosh	equ	0xFFE
  5728                           tosl	equ	0xFFD
  5729                           pclath	equ	0xFFA
  5730                           tblptru	equ	0xFF8
  5731                           tblptrh	equ	0xFF7
  5732                           tblptrl	equ	0xFF6
  5733                           tablat	equ	0xFF5
  5734                           prodh	equ	0xFF4
  5735                           prodl	equ	0xFF3
  5736                           intcon	equ	0xFF2
  5737                           postinc0	equ	0xFEE
  5738                           wreg	equ	0xFE8
  5739                           postdec1	equ	0xFE5
  5740                           fsr1l	equ	0xFE1
  5741                           indf2	equ	0xFDF
  5742                           postinc2	equ	0xFDE
  5743                           postdec2	equ	0xFDD
  5744                           plusw2	equ	0xFDB
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function _Delay *****************
  5750 ;; Defined at:
  5751 ;;		line 37 in file "Functions.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  d_lenth         4   26[COMRAM] long 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  wait            4   31[COMRAM] long 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;		None               void
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5765 ;;      Params:         4       0       0       0       0       0       0
  5766 ;;      Locals:         4       0       0       0       0       0       0
  5767 ;;      Temps:          1       0       0       0       0       0       0
  5768 ;;      Totals:         9       0       0       0       0       0       0
  5769 ;;Total ram usage:        9 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    4
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_updateComms
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text24
  5780  002610                     __ptext24:
  5781                           	opt stack 0
  5782  002610                     _Delay:
  5783                           	opt stack 25
  5784                           
  5785                           ;Functions.c: 39: long int wait = 0;
  5786                           
  5787                           ;incstack = 0
  5788  002610  0E00               	movlw	0
  5789  002612  6E20               	movwf	Delay@wait,c
  5790  002614  0E00               	movlw	0
  5791  002616  6E21               	movwf	Delay@wait+1,c
  5792  002618  0E00               	movlw	0
  5793  00261A  6E22               	movwf	Delay@wait+2,c
  5794  00261C  0E00               	movlw	0
  5795  00261E  6E23               	movwf	Delay@wait+3,c
  5796  002620  D00E               	goto	l3146
  5797  002622                     l3142:
  5798                           
  5799                           ;Functions.c: 41: {
  5800                           ;Functions.c: 42: _delay((unsigned long)((1)*(8000000/4000.0)));
  5801  002622  0E03               	movlw	3
  5802  002624  6E1F               	movwf	??_Delay& (0+255),c
  5803  002626  0E98               	movlw	152
  5804  002628                     u5387:
  5805  002628  2EE8               	decfsz	wreg,f,c
  5806  00262A  D7FE               	goto	u5387
  5807  00262C  2E1F               	decfsz	??_Delay& (0+255),f,c
  5808  00262E  D7FC               	goto	u5387
  5809  002630  0E01               	movlw	1
  5810  002632  2620               	addwf	Delay@wait,f,c
  5811  002634  0E00               	movlw	0
  5812  002636  2221               	addwfc	Delay@wait+1,f,c
  5813  002638  2222               	addwfc	Delay@wait+2,f,c
  5814  00263A  2223               	addwfc	Delay@wait+3,f,c
  5815  00263C  D000               	goto	l3146
  5816  00263E                     l3146:
  5817  00263E  501B               	movf	Delay@d_lenth,w,c
  5818  002640  5C20               	subwf	Delay@wait,w,c
  5819  002642  501C               	movf	Delay@d_lenth+1,w,c
  5820  002644  5821               	subwfb	Delay@wait+1,w,c
  5821  002646  501D               	movf	Delay@d_lenth+2,w,c
  5822  002648  5822               	subwfb	Delay@wait+2,w,c
  5823  00264A  5023               	movf	Delay@wait+3,w,c
  5824  00264C  0A80               	xorlw	128
  5825  00264E  6E1F               	movwf	??_Delay& (0+255),c
  5826  002650  501E               	movf	Delay@d_lenth+3,w,c
  5827  002652  0A80               	xorlw	128
  5828  002654  581F               	subwfb	??_Delay& (0+255),w,c
  5829  002656  A0D8               	btfss	status,0,c
  5830  002658  D7E4               	goto	l3142
  5831  00265A  0012               	return		;funcret
  5832  00265C                     __end_of_Delay:
  5833                           	opt stack 0
  5834                           tosu	equ	0xFFF
  5835                           tosh	equ	0xFFE
  5836                           tosl	equ	0xFFD
  5837                           pclath	equ	0xFFA
  5838                           tblptru	equ	0xFF8
  5839                           tblptrh	equ	0xFF7
  5840                           tblptrl	equ	0xFF6
  5841                           tablat	equ	0xFF5
  5842                           prodh	equ	0xFF4
  5843                           prodl	equ	0xFF3
  5844                           intcon	equ	0xFF2
  5845                           postinc0	equ	0xFEE
  5846                           wreg	equ	0xFE8
  5847                           postdec1	equ	0xFE5
  5848                           fsr1l	equ	0xFE1
  5849                           indf2	equ	0xFDF
  5850                           postinc2	equ	0xFDE
  5851                           postdec2	equ	0xFDD
  5852                           plusw2	equ	0xFDB
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function _Battery_Get *****************
  5858 ;; Defined at:
  5859 ;;		line 84 in file "Battery.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;  channelnum      2    6[BANK0 ] int 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  3    6[BANK0 ] float 
  5866 ;; Registers used:
  5867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5873 ;;      Params:         0       3       0       0       0       0       0
  5874 ;;      Locals:         0       0       0       0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0
  5876 ;;      Totals:         0       3       0       0       0       0       0
  5877 ;;Total ram usage:        3 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    6
  5880 ;; This function calls:
  5881 ;;		___ftmul
  5882 ;;		___wmul
  5883 ;; This function is called by:
  5884 ;;		_updateComms
  5885 ;;		_RunBypas
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           	psect	text25
  5890  00265C                     __ptext25:
  5891                           	opt stack 0
  5892  00265C                     _Battery_Get:
  5893                           	opt stack 23
  5894                           
  5895                           ;Battery.c: 86: return Battery_Volt[channelnum]*1000.0;
  5896                           
  5897                           ;incstack = 0
  5898  00265C  C0C7  F01B         	movff	Battery_Get@channelnum,___wmul@multiplier
  5899  002660  C0C8  F01C         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  5900  002664  0E00               	movlw	0
  5901  002666  6E1E               	movwf	___wmul@multiplicand+1,c
  5902  002668  0E03               	movlw	3
  5903  00266A  6E1D               	movwf	___wmul@multiplicand,c
  5904  00266C  EC49  F014         	call	___wmul	;wreg free
  5905  002670  0EE0               	movlw	low _Battery_Volt
  5906  002672  241B               	addwf	?___wmul,w,c
  5907  002674  6ED9               	movwf	fsr2l,c
  5908  002676  0E00               	movlw	high _Battery_Volt
  5909  002678  201C               	addwfc	?___wmul+1,w,c
  5910  00267A  6EDA               	movwf	fsr2h,c
  5911  00267C  CFDE F023          	movff	postinc2,___ftmul@f1
  5912  002680  CFDE F024          	movff	postinc2,___ftmul@f1+1
  5913  002684  CFDD F025          	movff	postdec2,___ftmul@f1+2
  5914  002688  0E00               	movlw	0
  5915  00268A  6E26               	movwf	___ftmul@f2,c
  5916  00268C  0E7A               	movlw	122
  5917  00268E  6E27               	movwf	___ftmul@f2+1,c
  5918  002690  0E44               	movlw	68
  5919  002692  6E28               	movwf	___ftmul@f2+2,c
  5920  002694  EC84  F00D         	call	___ftmul	;wreg free
  5921  002698  C023  F0C7         	movff	?___ftmul,?_Battery_Get
  5922  00269C  C024  F0C8         	movff	?___ftmul+1,?_Battery_Get+1
  5923  0026A0  C025  F0C9         	movff	?___ftmul+2,?_Battery_Get+2
  5924  0026A4  0012               	return	
  5925  0026A6  0012               	return		;funcret
  5926  0026A8                     __end_of_Battery_Get:
  5927                           	opt stack 0
  5928                           tosu	equ	0xFFF
  5929                           tosh	equ	0xFFE
  5930                           tosl	equ	0xFFD
  5931                           pclath	equ	0xFFA
  5932                           tblptru	equ	0xFF8
  5933                           tblptrh	equ	0xFF7
  5934                           tblptrl	equ	0xFF6
  5935                           tablat	equ	0xFF5
  5936                           prodh	equ	0xFF4
  5937                           prodl	equ	0xFF3
  5938                           intcon	equ	0xFF2
  5939                           postinc0	equ	0xFEE
  5940                           wreg	equ	0xFE8
  5941                           postdec1	equ	0xFE5
  5942                           fsr1l	equ	0xFE1
  5943                           indf2	equ	0xFDF
  5944                           postinc2	equ	0xFDE
  5945                           postdec2	equ	0xFDD
  5946                           plusw2	equ	0xFDB
  5947                           fsr2h	equ	0xFDA
  5948                           fsr2l	equ	0xFD9
  5949                           status	equ	0xFD8
  5950                           
  5951 ;; *************** function ___wmul *****************
  5952 ;; Defined at:
  5953 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;  multiplier      2   26[COMRAM] unsigned int 
  5956 ;;  multiplicand    2   28[COMRAM] unsigned int 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  product         2   30[COMRAM] unsigned int 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  2   26[COMRAM] unsigned int 
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, status,0, prodl, prodh
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5968 ;;      Params:         4       0       0       0       0       0       0
  5969 ;;      Locals:         2       0       0       0       0       0       0
  5970 ;;      Temps:          0       0       0       0       0       0       0
  5971 ;;      Totals:         6       0       0       0       0       0       0
  5972 ;;Total ram usage:        6 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    4
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		_Battery_Get
  5979 ;;		_Tempeture_Get
  5980 ;;		_Battery_Convert
  5981 ;;		_Battery_Filter
  5982 ;;		_Battery_Fault
  5983 ;;		_Temp_Fault
  5984 ;;		_Temp_Filter
  5985 ;;		_Temp_Convert
  5986 ;;		_eval_poly
  5987 ;; This function uses a non-reentrant model
  5988 ;;
  5989                           
  5990                           	psect	text26
  5991  002892                     __ptext26:
  5992                           	opt stack 0
  5993  002892                     ___wmul:
  5994                           	opt stack 24
  5995                           
  5996                           ;incstack = 0
  5997  002892  501B               	movf	___wmul@multiplier,w,c
  5998  002894  021D               	mulwf	___wmul@multiplicand,c
  5999  002896  CFF3 F01F          	movff	prodl,___wmul@product
  6000  00289A  CFF4 F020          	movff	prodh,___wmul@product+1
  6001  00289E  501B               	movf	___wmul@multiplier,w,c
  6002  0028A0  021E               	mulwf	___wmul@multiplicand+1,c
  6003  0028A2  50F3               	movf	prodl,w,c
  6004  0028A4  2620               	addwf	___wmul@product+1,f,c
  6005  0028A6  501C               	movf	___wmul@multiplier+1,w,c
  6006  0028A8  021D               	mulwf	___wmul@multiplicand,c
  6007  0028AA  50F3               	movf	prodl,w,c
  6008  0028AC  2620               	addwf	___wmul@product+1,f,c
  6009  0028AE  C01F  F01B         	movff	___wmul@product,?___wmul
  6010  0028B2  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  6011  0028B6  0012               	return	
  6012  0028B8  0012               	return		;funcret
  6013  0028BA                     __end_of___wmul:
  6014                           	opt stack 0
  6015                           tosu	equ	0xFFF
  6016                           tosh	equ	0xFFE
  6017                           tosl	equ	0xFFD
  6018                           pclath	equ	0xFFA
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           postinc0	equ	0xFEE
  6027                           wreg	equ	0xFE8
  6028                           postdec1	equ	0xFE5
  6029                           fsr1l	equ	0xFE1
  6030                           indf2	equ	0xFDF
  6031                           postinc2	equ	0xFDE
  6032                           postdec2	equ	0xFDD
  6033                           plusw2	equ	0xFDB
  6034                           fsr2h	equ	0xFDA
  6035                           fsr2l	equ	0xFD9
  6036                           status	equ	0xFD8
  6037                           
  6038 ;; *************** function ___ftmul *****************
  6039 ;; Defined at:
  6040 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  f1              3   34[COMRAM] float 
  6043 ;;  f2              3   37[COMRAM] float 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  6046 ;;  sign            1    5[BANK0 ] unsigned char 
  6047 ;;  cntr            1    4[BANK0 ] unsigned char 
  6048 ;;  exp             1    0[BANK0 ] unsigned char 
  6049 ;; Return value:  Size  Location     Type
  6050 ;;                  3   34[COMRAM] float 
  6051 ;; Registers used:
  6052 ;;		wreg, status,2, status,0, cstack
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6058 ;;      Params:         6       0       0       0       0       0       0
  6059 ;;      Locals:         0       6       0       0       0       0       0
  6060 ;;      Temps:          3       0       0       0       0       0       0
  6061 ;;      Totals:         9       6       0       0       0       0       0
  6062 ;;Total ram usage:       15 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    5
  6065 ;; This function calls:
  6066 ;;		___ftpack
  6067 ;; This function is called by:
  6068 ;;		_Battery_Get
  6069 ;;		_Battery_Convert
  6070 ;;		_Battery_Filter
  6071 ;;		_Temp_Filter
  6072 ;;		_Temp_Convert
  6073 ;;		_log
  6074 ;;		_eval_poly
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	text27
  6079  001B08                     __ptext27:
  6080                           	opt stack 0
  6081  001B08                     ___ftmul:
  6082                           	opt stack 23
  6083                           
  6084                           ;incstack = 0
  6085  001B08  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  6086  001B0C  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  6087  001B0E  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  6088  001B10  3424               	rlcf	___ftmul@f1+1,w,c
  6089  001B12  3629               	rlcf	??___ftmul& (0+255),f,c
  6090  001B14  E301               	bnc	u4131
  6091  001B16  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  6092  001B18                     u4131:
  6093  001B18  5029               	movf	??___ftmul,w,c
  6094  001B1A  0100               	movlb	0	; () banked
  6095  001B1C  6FC1               	movwf	___ftmul@exp& (0+255),b
  6096  001B1E  0100               	movlb	0	; () banked
  6097  001B20  51C1               	movf	___ftmul@exp& (0+255),w,b
  6098  001B22  A4D8               	btfss	status,2,c
  6099  001B24  D007               	goto	l4336
  6100                           
  6101                           ; BSR set to: 0
  6102  001B26  0E00               	movlw	0
  6103  001B28  6E23               	movwf	?___ftmul,c
  6104  001B2A  0E00               	movlw	0
  6105  001B2C  6E24               	movwf	?___ftmul+1,c
  6106  001B2E  0E00               	movlw	0
  6107  001B30  6E25               	movwf	?___ftmul+2,c
  6108                           
  6109                           ; BSR set to: 0
  6110  001B32  0012               	return	
  6111  001B34                     l4336:
  6112                           
  6113                           ; BSR set to: 0
  6114  001B34  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  6115  001B38  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  6116  001B3A  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  6117  001B3C  3427               	rlcf	___ftmul@f2+1,w,c
  6118  001B3E  3629               	rlcf	??___ftmul& (0+255),f,c
  6119  001B40  E301               	bnc	u4151
  6120  001B42  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  6121  001B44                     u4151:
  6122  001B44  5029               	movf	??___ftmul,w,c
  6123  001B46  0100               	movlb	0	; () banked
  6124  001B48  6FC6               	movwf	___ftmul@sign& (0+255),b
  6125  001B4A  0100               	movlb	0	; () banked
  6126  001B4C  51C6               	movf	___ftmul@sign& (0+255),w,b
  6127  001B4E  A4D8               	btfss	status,2,c
  6128  001B50  D007               	goto	l4342
  6129                           
  6130                           ; BSR set to: 0
  6131  001B52  0E00               	movlw	0
  6132  001B54  6E23               	movwf	?___ftmul,c
  6133  001B56  0E00               	movlw	0
  6134  001B58  6E24               	movwf	?___ftmul+1,c
  6135  001B5A  0E00               	movlw	0
  6136  001B5C  6E25               	movwf	?___ftmul+2,c
  6137                           
  6138                           ; BSR set to: 0
  6139  001B5E  0012               	return	
  6140  001B60                     l4342:
  6141                           
  6142                           ; BSR set to: 0
  6143  001B60  0100               	movlb	0	; () banked
  6144  001B62  51C6               	movf	___ftmul@sign& (0+255),w,b
  6145  001B64  0F7B               	addlw	123
  6146  001B66  0100               	movlb	0	; () banked
  6147  001B68  27C1               	addwf	___ftmul@exp& (0+255),f,b
  6148                           
  6149                           ; BSR set to: 0
  6150  001B6A  C025  F0C6         	movff	___ftmul@f1+2,___ftmul@sign
  6151  001B6E  5028               	movf	___ftmul@f2+2,w,c
  6152  001B70  0100               	movlb	0	; () banked
  6153  001B72  1BC6               	xorwf	___ftmul@sign& (0+255),f,b
  6154  001B74  0E80               	movlw	128
  6155  001B76  0100               	movlb	0	; () banked
  6156  001B78  17C6               	andwf	___ftmul@sign& (0+255),f,b
  6157                           
  6158                           ; BSR set to: 0
  6159  001B7A  8E24               	bsf	___ftmul@f1+1,7,c
  6160                           
  6161                           ; BSR set to: 0
  6162  001B7C  8E27               	bsf	___ftmul@f2+1,7,c
  6163                           
  6164                           ; BSR set to: 0
  6165  001B7E  0EFF               	movlw	255
  6166  001B80  1626               	andwf	___ftmul@f2,f,c
  6167  001B82  0EFF               	movlw	255
  6168  001B84  1627               	andwf	___ftmul@f2+1,f,c
  6169  001B86  0E00               	movlw	0
  6170  001B88  1628               	andwf	___ftmul@f2+2,f,c
  6171                           
  6172                           ; BSR set to: 0
  6173  001B8A  0E00               	movlw	0
  6174  001B8C  0100               	movlb	0	; () banked
  6175  001B8E  6FC2               	movwf	___ftmul@f3_as_product& (0+255),b
  6176  001B90  0E00               	movlw	0
  6177  001B92  0100               	movlb	0	; () banked
  6178  001B94  6FC3               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6179  001B96  0E00               	movlw	0
  6180  001B98  0100               	movlb	0	; () banked
  6181  001B9A  6FC4               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6182                           
  6183                           ; BSR set to: 0
  6184  001B9C  0E07               	movlw	7
  6185  001B9E  0100               	movlb	0	; () banked
  6186  001BA0  6FC5               	movwf	___ftmul@cntr& (0+255),b
  6187  001BA2  D000               	goto	l4356
  6188  001BA4                     l4356:
  6189                           
  6190                           ; BSR set to: 0
  6191  001BA4  A023               	btfss	___ftmul@f1,0,c
  6192  001BA6  D00A               	goto	l4360
  6193                           
  6194                           ; BSR set to: 0
  6195  001BA8  5026               	movf	___ftmul@f2,w,c
  6196  001BAA  0100               	movlb	0	; () banked
  6197  001BAC  27C2               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6198  001BAE  5027               	movf	___ftmul@f2+1,w,c
  6199  001BB0  0100               	movlb	0	; () banked
  6200  001BB2  23C3               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6201  001BB4  5028               	movf	___ftmul@f2+2,w,c
  6202  001BB6  0100               	movlb	0	; () banked
  6203  001BB8  23C4               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6204  001BBA  D000               	goto	l4360
  6205  001BBC                     l4360:
  6206                           
  6207                           ; BSR set to: 0
  6208  001BBC  90D8               	bcf	status,0,c
  6209  001BBE  3225               	rrcf	___ftmul@f1+2,f,c
  6210  001BC0  3224               	rrcf	___ftmul@f1+1,f,c
  6211  001BC2  3223               	rrcf	___ftmul@f1,f,c
  6212  001BC4  90D8               	bcf	status,0,c
  6213  001BC6  3626               	rlcf	___ftmul@f2,f,c
  6214  001BC8  3627               	rlcf	___ftmul@f2+1,f,c
  6215  001BCA  3628               	rlcf	___ftmul@f2+2,f,c
  6216                           
  6217                           ; BSR set to: 0
  6218  001BCC  0100               	movlb	0	; () banked
  6219  001BCE  2FC5               	decfsz	___ftmul@cntr& (0+255),f,b
  6220  001BD0  D7E9               	goto	l4356
  6221  001BD2  D000               	goto	l4364
  6222  001BD4                     l4364:
  6223                           
  6224                           ; BSR set to: 0
  6225  001BD4  0E09               	movlw	9
  6226  001BD6  0100               	movlb	0	; () banked
  6227  001BD8  6FC5               	movwf	___ftmul@cntr& (0+255),b
  6228  001BDA  D000               	goto	l4366
  6229  001BDC                     l4366:
  6230                           
  6231                           ; BSR set to: 0
  6232  001BDC  A023               	btfss	___ftmul@f1,0,c
  6233  001BDE  D00A               	goto	l4370
  6234                           
  6235                           ; BSR set to: 0
  6236  001BE0  5026               	movf	___ftmul@f2,w,c
  6237  001BE2  0100               	movlb	0	; () banked
  6238  001BE4  27C2               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6239  001BE6  5027               	movf	___ftmul@f2+1,w,c
  6240  001BE8  0100               	movlb	0	; () banked
  6241  001BEA  23C3               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6242  001BEC  5028               	movf	___ftmul@f2+2,w,c
  6243  001BEE  0100               	movlb	0	; () banked
  6244  001BF0  23C4               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6245  001BF2  D000               	goto	l4370
  6246  001BF4                     l4370:
  6247                           
  6248                           ; BSR set to: 0
  6249  001BF4  90D8               	bcf	status,0,c
  6250  001BF6  3225               	rrcf	___ftmul@f1+2,f,c
  6251  001BF8  3224               	rrcf	___ftmul@f1+1,f,c
  6252  001BFA  3223               	rrcf	___ftmul@f1,f,c
  6253  001BFC  0100               	movlb	0	; () banked
  6254  001BFE  90D8               	bcf	status,0,c
  6255  001C00  33C4               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6256  001C02  33C3               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6257  001C04  33C2               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6258                           
  6259                           ; BSR set to: 0
  6260  001C06  0100               	movlb	0	; () banked
  6261  001C08  2FC5               	decfsz	___ftmul@cntr& (0+255),f,b
  6262  001C0A  D7E8               	goto	l4366
  6263  001C0C  D000               	goto	l4374
  6264  001C0E                     l4374:
  6265                           
  6266                           ; BSR set to: 0
  6267  001C0E  C0C2  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
  6268  001C12  C0C3  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6269  001C16  C0C4  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6270  001C1A  C0C1  F01E         	movff	___ftmul@exp,___ftpack@exp
  6271  001C1E  C0C6  F01F         	movff	___ftmul@sign,___ftpack@sign
  6272  001C22  EC85  F010         	call	___ftpack	;wreg free
  6273  001C26  C01B  F023         	movff	?___ftpack,?___ftmul
  6274  001C2A  C01C  F024         	movff	?___ftpack+1,?___ftmul+1
  6275  001C2E  C01D  F025         	movff	?___ftpack+2,?___ftmul+2
  6276  001C32  0012               	return	
  6277  001C34  0012               	return		;funcret
  6278  001C36                     __end_of___ftmul:
  6279                           	opt stack 0
  6280                           tosu	equ	0xFFF
  6281                           tosh	equ	0xFFE
  6282                           tosl	equ	0xFFD
  6283                           pclath	equ	0xFFA
  6284                           tblptru	equ	0xFF8
  6285                           tblptrh	equ	0xFF7
  6286                           tblptrl	equ	0xFF6
  6287                           tablat	equ	0xFF5
  6288                           prodh	equ	0xFF4
  6289                           prodl	equ	0xFF3
  6290                           intcon	equ	0xFF2
  6291                           postinc0	equ	0xFEE
  6292                           wreg	equ	0xFE8
  6293                           postdec1	equ	0xFE5
  6294                           fsr1l	equ	0xFE1
  6295                           indf2	equ	0xFDF
  6296                           postinc2	equ	0xFDE
  6297                           postdec2	equ	0xFDD
  6298                           plusw2	equ	0xFDB
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8
  6302                           
  6303 ;; *************** function ___ftpack *****************
  6304 ;; Defined at:
  6305 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  arg             3   26[COMRAM] unsigned um
  6308 ;;  exp             1   29[COMRAM] unsigned char 
  6309 ;;  sign            1   30[COMRAM] unsigned char 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;		None
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  3   26[COMRAM] float 
  6314 ;; Registers used:
  6315 ;;		wreg, status,2, status,0
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6321 ;;      Params:         5       0       0       0       0       0       0
  6322 ;;      Locals:         0       0       0       0       0       0       0
  6323 ;;      Temps:          3       0       0       0       0       0       0
  6324 ;;      Totals:         8       0       0       0       0       0       0
  6325 ;;Total ram usage:        8 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    4
  6328 ;; This function calls:
  6329 ;;		Nothing
  6330 ;; This function is called by:
  6331 ;;		___ftmul
  6332 ;;		___awtoft
  6333 ;;		___ftdiv
  6334 ;;		___ftadd
  6335 ;;		___altoft
  6336 ;; This function uses a non-reentrant model
  6337 ;;
  6338                           
  6339                           	psect	text28
  6340  00210A                     __ptext28:
  6341                           	opt stack 0
  6342  00210A                     ___ftpack:
  6343                           	opt stack 23
  6344                           
  6345                           ;incstack = 0
  6346  00210A  501E               	movf	___ftpack@exp,w,c
  6347  00210C  B4D8               	btfsc	status,2,c
  6348  00210E  D005               	goto	l4230
  6349  002110  501B               	movf	___ftpack@arg,w,c
  6350  002112  101C               	iorwf	___ftpack@arg+1,w,c
  6351  002114  101D               	iorwf	___ftpack@arg+2,w,c
  6352  002116  A4D8               	btfss	status,2,c
  6353  002118  D00E               	goto	l4236
  6354  00211A                     l4230:
  6355  00211A  0E00               	movlw	0
  6356  00211C  6E1B               	movwf	?___ftpack,c
  6357  00211E  0E00               	movlw	0
  6358  002120  6E1C               	movwf	?___ftpack+1,c
  6359  002122  0E00               	movlw	0
  6360  002124  6E1D               	movwf	?___ftpack+2,c
  6361  002126  0012               	return	
  6362  002128  D006               	goto	l4236
  6363  00212A                     l4234:
  6364  00212A  2A1E               	incf	___ftpack@exp,f,c
  6365  00212C  90D8               	bcf	status,0,c
  6366  00212E  321D               	rrcf	___ftpack@arg+2,f,c
  6367  002130  321C               	rrcf	___ftpack@arg+1,f,c
  6368  002132  321B               	rrcf	___ftpack@arg,f,c
  6369  002134  D000               	goto	l4236
  6370  002136                     l4236:
  6371  002136  0E00               	movlw	0
  6372  002138  141B               	andwf	___ftpack@arg,w,c
  6373  00213A  6E20               	movwf	??___ftpack& (0+255),c
  6374  00213C  0E00               	movlw	0
  6375  00213E  141C               	andwf	___ftpack@arg+1,w,c
  6376  002140  6E21               	movwf	(??___ftpack+1)& (0+255),c
  6377  002142  0EFE               	movlw	254
  6378  002144  141D               	andwf	___ftpack@arg+2,w,c
  6379  002146  6E22               	movwf	(??___ftpack+2)& (0+255),c
  6380  002148  5020               	movf	??___ftpack,w,c
  6381  00214A  1021               	iorwf	??___ftpack+1,w,c
  6382  00214C  1022               	iorwf	??___ftpack+2,w,c
  6383  00214E  B4D8               	btfsc	status,2,c
  6384  002150  D00E               	goto	l4242
  6385  002152  D7EB               	goto	l4234
  6386  002154  D00C               	goto	l4242
  6387  002156                     l4238:
  6388  002156  2A1E               	incf	___ftpack@exp,f,c
  6389  002158  0E01               	movlw	1
  6390  00215A  261B               	addwf	___ftpack@arg,f,c
  6391  00215C  0E00               	movlw	0
  6392  00215E  221C               	addwfc	___ftpack@arg+1,f,c
  6393  002160  0E00               	movlw	0
  6394  002162  221D               	addwfc	___ftpack@arg+2,f,c
  6395  002164  90D8               	bcf	status,0,c
  6396  002166  321D               	rrcf	___ftpack@arg+2,f,c
  6397  002168  321C               	rrcf	___ftpack@arg+1,f,c
  6398  00216A  321B               	rrcf	___ftpack@arg,f,c
  6399  00216C  D000               	goto	l4242
  6400  00216E                     l4242:
  6401  00216E  0E00               	movlw	0
  6402  002170  141B               	andwf	___ftpack@arg,w,c
  6403  002172  6E20               	movwf	??___ftpack& (0+255),c
  6404  002174  0E00               	movlw	0
  6405  002176  141C               	andwf	___ftpack@arg+1,w,c
  6406  002178  6E21               	movwf	(??___ftpack+1)& (0+255),c
  6407  00217A  0EFF               	movlw	255
  6408  00217C  141D               	andwf	___ftpack@arg+2,w,c
  6409  00217E  6E22               	movwf	(??___ftpack+2)& (0+255),c
  6410  002180  5020               	movf	??___ftpack,w,c
  6411  002182  1021               	iorwf	??___ftpack+1,w,c
  6412  002184  1022               	iorwf	??___ftpack+2,w,c
  6413  002186  B4D8               	btfsc	status,2,c
  6414  002188  D008               	goto	l4246
  6415  00218A  D7E5               	goto	l4238
  6416  00218C  D006               	goto	l4246
  6417  00218E                     l4244:
  6418  00218E  061E               	decf	___ftpack@exp,f,c
  6419  002190  90D8               	bcf	status,0,c
  6420  002192  361B               	rlcf	___ftpack@arg,f,c
  6421  002194  361C               	rlcf	___ftpack@arg+1,f,c
  6422  002196  361D               	rlcf	___ftpack@arg+2,f,c
  6423  002198  D000               	goto	l4246
  6424  00219A                     l4246:
  6425  00219A  BE1C               	btfsc	___ftpack@arg+1,7,c
  6426  00219C  D004               	goto	l1122
  6427  00219E  0E02               	movlw	2
  6428  0021A0  601E               	cpfslt	___ftpack@exp,c
  6429  0021A2  D7F5               	goto	l4244
  6430  0021A4  D000               	goto	l1122
  6431  0021A6                     l1122:
  6432  0021A6  B01E               	btfsc	___ftpack@exp,0,c
  6433  0021A8  D002               	goto	l4252
  6434  0021AA  9E1C               	bcf	___ftpack@arg+1,7,c
  6435  0021AC  D000               	goto	l4252
  6436  0021AE                     l4252:
  6437  0021AE  90D8               	bcf	status,0,c
  6438  0021B0  321E               	rrcf	___ftpack@exp,f,c
  6439  0021B2  501E               	movf	___ftpack@exp,w,c
  6440  0021B4  121D               	iorwf	___ftpack@arg+2,f,c
  6441  0021B6  501F               	movf	___ftpack@sign,w,c
  6442  0021B8  B4D8               	btfsc	status,2,c
  6443  0021BA  D002               	goto	l4258
  6444  0021BC  8E1D               	bsf	___ftpack@arg+2,7,c
  6445  0021BE  D000               	goto	l4258
  6446  0021C0                     l4258:
  6447  0021C0  C01B  F01B         	movff	___ftpack@arg,?___ftpack
  6448  0021C4  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
  6449  0021C8  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
  6450  0021CC  0012               	return	
  6451  0021CE  0012               	return		;funcret
  6452  0021D0                     __end_of___ftpack:
  6453                           	opt stack 0
  6454                           tosu	equ	0xFFF
  6455                           tosh	equ	0xFFE
  6456                           tosl	equ	0xFFD
  6457                           pclath	equ	0xFFA
  6458                           tblptru	equ	0xFF8
  6459                           tblptrh	equ	0xFF7
  6460                           tblptrl	equ	0xFF6
  6461                           tablat	equ	0xFF5
  6462                           prodh	equ	0xFF4
  6463                           prodl	equ	0xFF3
  6464                           intcon	equ	0xFF2
  6465                           postinc0	equ	0xFEE
  6466                           wreg	equ	0xFE8
  6467                           postdec1	equ	0xFE5
  6468                           fsr1l	equ	0xFE1
  6469                           indf2	equ	0xFDF
  6470                           postinc2	equ	0xFDE
  6471                           postdec2	equ	0xFDD
  6472                           plusw2	equ	0xFDB
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function _SYSTEM_Initialize *****************
  6478 ;; Defined at:
  6479 ;;		line 113 in file "mcc_generated_files/mcc.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;		None
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;		None
  6484 ;; Return value:  Size  Location     Type
  6485 ;;		None               void
  6486 ;; Registers used:
  6487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6493 ;;      Params:         0       0       0       0       0       0       0
  6494 ;;      Locals:         0       0       0       0       0       0       0
  6495 ;;      Temps:          0       0       0       0       0       0       0
  6496 ;;      Totals:         0       0       0       0       0       0       0
  6497 ;;Total ram usage:        0 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    7
  6500 ;; This function calls:
  6501 ;;		_ADC_Initialize
  6502 ;;		_EUSART1_Initialize
  6503 ;;		_INTERRUPT_Initialize
  6504 ;;		_OSCILLATOR_Initialize
  6505 ;;		_PIN_MANAGER_Initialize
  6506 ;;		_TMR1_Initialize
  6507 ;;		_begin
  6508 ;; This function is called by:
  6509 ;;		_main
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text29
  6514  00243E                     __ptext29:
  6515                           	opt stack 0
  6516  00243E                     _SYSTEM_Initialize:
  6517                           	opt stack 23
  6518                           
  6519                           ;mcc.c: 114: OSCILLATOR_Initialize();
  6520                           
  6521                           ;incstack = 0
  6522  00243E  EC2D  F015         	call	_OSCILLATOR_Initialize	;wreg free
  6523                           
  6524                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  6525  002442  ECDF  F012         	call	_PIN_MANAGER_Initialize	;wreg free
  6526                           
  6527                           ;mcc.c: 116: INTERRUPT_Initialize();
  6528  002446  EC34  F015         	call	_INTERRUPT_Initialize	;wreg free
  6529                           
  6530                           ;mcc.c: 117: ADC_Initialize();
  6531  00244A  ECF0  F014         	call	_ADC_Initialize	;wreg free
  6532                           
  6533                           ;mcc.c: 118: EUSART1_Initialize();
  6534  00244E  EC54  F013         	call	_EUSART1_Initialize	;wreg free
  6535                           
  6536                           ;mcc.c: 119: TMR1_Initialize();
  6537  002452  EC70  F014         	call	_TMR1_Initialize	;wreg free
  6538                           
  6539                           ;mcc.c: 120: begin(receiveArray, sizeof (receiveArray), 1, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  6540  002456  0E3C               	movlw	low _receiveArray
  6541  002458  0100               	movlb	0	; () banked
  6542  00245A  6FC1               	movwf	begin@ptr& (0+255),b
  6543  00245C  0E01               	movlw	high _receiveArray
  6544  00245E  0100               	movlb	0	; () banked
  6545  002460  6FC2               	movwf	(begin@ptr+1)& (0+255),b
  6546  002462  0E28               	movlw	40
  6547  002464  0100               	movlb	0	; () banked
  6548  002466  6FC3               	movwf	begin@maxSize& (0+255),b
  6549  002468  0E01               	movlw	1
  6550  00246A  0100               	movlb	0	; () banked
  6551  00246C  6FC4               	movwf	begin@givenAddress& (0+255),b
  6552  00246E  0E00               	movlw	0
  6553  002470  0100               	movlb	0	; () banked
  6554  002472  6FC5               	movwf	begin@error& (0+255),b
  6555  002474  0E50               	movlw	low _Send_put
  6556  002476  0100               	movlb	0	; () banked
  6557  002478  6FC6               	movwf	begin@stufftosend& (0+255),b
  6558  00247A  0E27               	movlw	high _Send_put
  6559  00247C  0100               	movlb	0	; () banked
  6560  00247E  6FC7               	movwf	(begin@stufftosend+1)& (0+255),b
  6561  002480  0E4A               	movlw	low _Receive_get
  6562  002482  0100               	movlb	0	; () banked
  6563  002484  6FC8               	movwf	begin@stufftoreceive& (0+255),b
  6564  002486  0E2A               	movlw	high _Receive_get
  6565  002488  0100               	movlb	0	; () banked
  6566  00248A  6FC9               	movwf	(begin@stufftoreceive+1)& (0+255),b
  6567  00248C  0EB0               	movlw	low _Receive_available
  6568  00248E  0100               	movlb	0	; () banked
  6569  002490  6FCA               	movwf	begin@stuffavailable& (0+255),b
  6570  002492  0E29               	movlw	high _Receive_available
  6571  002494  0100               	movlb	0	; () banked
  6572  002496  6FCB               	movwf	(begin@stuffavailable+1)& (0+255),b
  6573  002498  0E3A               	movlw	low _Receive_peek
  6574  00249A  0100               	movlb	0	; () banked
  6575  00249C  6FCC               	movwf	begin@stuffpeek& (0+255),b
  6576  00249E  0E2A               	movlw	high _Receive_peek
  6577  0024A0  0100               	movlb	0	; () banked
  6578  0024A2  6FCD               	movwf	(begin@stuffpeek+1)& (0+255),b
  6579  0024A4  EC87  F012         	call	_begin	;wreg free
  6580  0024A8  0012               	return		;funcret
  6581  0024AA                     __end_of_SYSTEM_Initialize:
  6582                           	opt stack 0
  6583                           tosu	equ	0xFFF
  6584                           tosh	equ	0xFFE
  6585                           tosl	equ	0xFFD
  6586                           pclath	equ	0xFFA
  6587                           tblptru	equ	0xFF8
  6588                           tblptrh	equ	0xFF7
  6589                           tblptrl	equ	0xFF6
  6590                           tablat	equ	0xFF5
  6591                           prodh	equ	0xFF4
  6592                           prodl	equ	0xFF3
  6593                           intcon	equ	0xFF2
  6594                           postinc0	equ	0xFEE
  6595                           wreg	equ	0xFE8
  6596                           postdec1	equ	0xFE5
  6597                           fsr1l	equ	0xFE1
  6598                           indf2	equ	0xFDF
  6599                           postinc2	equ	0xFDE
  6600                           postdec2	equ	0xFDD
  6601                           plusw2	equ	0xFDB
  6602                           fsr2h	equ	0xFDA
  6603                           fsr2l	equ	0xFD9
  6604                           status	equ	0xFD8
  6605                           
  6606 ;; *************** function _begin *****************
  6607 ;; Defined at:
  6608 ;;		line 18 in file "FastTransfer.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  6611 ;;		 -> receiveArray(40), 
  6612 ;;  maxSize         1    2[BANK0 ] unsigned char 
  6613 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  6614 ;;  error           1    4[BANK0 ] unsigned char 
  6615 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  6616 ;;		 -> Send_put(0), 
  6617 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  6618 ;;		 -> Receive_get(1), 
  6619 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  6620 ;;		 -> Receive_available(2), 
  6621 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  6622 ;;		 -> Receive_peek(1), 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;		None
  6625 ;; Return value:  Size  Location     Type
  6626 ;;		None               void
  6627 ;; Registers used:
  6628 ;;		wreg, status,2, status,0, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6634 ;;      Params:         0      13       0       0       0       0       0
  6635 ;;      Locals:         0       0       0       0       0       0       0
  6636 ;;      Temps:          0       0       0       0       0       0       0
  6637 ;;      Totals:         0      13       0       0       0       0       0
  6638 ;;Total ram usage:       13 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    5
  6641 ;; This function calls:
  6642 ;;		___awdiv
  6643 ;; This function is called by:
  6644 ;;		_SYSTEM_Initialize
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           	psect	text30
  6649  00250E                     __ptext30:
  6650                           	opt stack 0
  6651  00250E                     _begin:
  6652                           	opt stack 24
  6653                           
  6654                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  6655                           
  6656                           ;incstack = 0
  6657  00250E  C0C1  F096         	movff	begin@ptr,_receiveArrayAddress
  6658  002512  C0C2  F097         	movff	begin@ptr+1,_receiveArrayAddress+1
  6659                           
  6660                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  6661  002516  C0C4  F03E         	movff	begin@givenAddress,_moduleAddress
  6662                           
  6663                           ;FastTransfer.c: 21: serial_write = stufftosend;
  6664  00251A  C0C6  F035         	movff	begin@stufftosend,_serial_write
  6665  00251E  C0C7  F036         	movff	begin@stufftosend+1,_serial_write+1
  6666                           
  6667                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  6668  002522  C0CA  F031         	movff	begin@stuffavailable,_serial_available
  6669  002526  C0CB  F032         	movff	begin@stuffavailable+1,_serial_available+1
  6670                           
  6671                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  6672  00252A  C0CC  F09A         	movff	begin@stuffpeek,_serial_peek
  6673  00252E  C0CD  F09B         	movff	begin@stuffpeek+1,_serial_peek+1
  6674                           
  6675                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  6676  002532  C0C8  F033         	movff	begin@stufftoreceive,_serial_read
  6677  002536  C0C9  F034         	movff	begin@stufftoreceive+1,_serial_read+1
  6678                           
  6679                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  6680  00253A  C0C3  F01B         	movff	begin@maxSize,___awdiv@dividend
  6681  00253E  6A1C               	clrf	___awdiv@dividend+1,c
  6682  002540  0E00               	movlw	0
  6683  002542  6E1E               	movwf	___awdiv@divisor+1,c
  6684  002544  0E02               	movlw	2
  6685  002546  6E1D               	movwf	___awdiv@divisor,c
  6686  002548  EC40  F011         	call	___awdiv	;wreg free
  6687  00254C  501B               	movf	?___awdiv,w,c
  6688  00254E  6E3D               	movwf	_maxDataAddress,c
  6689                           
  6690                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  6691  002550  0E00               	movlw	low _ring_buffer
  6692  002552  0100               	movlb	0	; () banked
  6693  002554  6F98               	movwf	_sendStructAddress& (0+255),b
  6694  002556  0E02               	movlw	high _ring_buffer
  6695  002558  0100               	movlb	0	; () banked
  6696  00255A  6F99               	movwf	(_sendStructAddress+1)& (0+255),b
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;FastTransfer.c: 27: AKNAKsend = error;
  6700  00255C  C0C5  F039         	movff	begin@error,_AKNAKsend
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  6704  002560  0E00               	movlw	0
  6705  002562  0100               	movlb	0	; () banked
  6706  002564  6F8F               	movwf	(_alignErrorCounter+1)& (0+255),b
  6707  002566  0E00               	movlw	0
  6708  002568  6F8E               	movwf	_alignErrorCounter& (0+255),b
  6709                           
  6710                           ; BSR set to: 0
  6711  00256A  0012               	return		;funcret
  6712  00256C                     __end_of_begin:
  6713                           	opt stack 0
  6714                           tosu	equ	0xFFF
  6715                           tosh	equ	0xFFE
  6716                           tosl	equ	0xFFD
  6717                           pclath	equ	0xFFA
  6718                           tblptru	equ	0xFF8
  6719                           tblptrh	equ	0xFF7
  6720                           tblptrl	equ	0xFF6
  6721                           tablat	equ	0xFF5
  6722                           prodh	equ	0xFF4
  6723                           prodl	equ	0xFF3
  6724                           intcon	equ	0xFF2
  6725                           postinc0	equ	0xFEE
  6726                           wreg	equ	0xFE8
  6727                           postdec1	equ	0xFE5
  6728                           fsr1l	equ	0xFE1
  6729                           indf2	equ	0xFDF
  6730                           postinc2	equ	0xFDE
  6731                           postdec2	equ	0xFDD
  6732                           plusw2	equ	0xFDB
  6733                           fsr2h	equ	0xFDA
  6734                           fsr2l	equ	0xFD9
  6735                           status	equ	0xFD8
  6736                           
  6737 ;; *************** function ___awdiv *****************
  6738 ;; Defined at:
  6739 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  6740 ;; Parameters:    Size  Location     Type
  6741 ;;  dividend        2   26[COMRAM] int 
  6742 ;;  divisor         2   28[COMRAM] int 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  quotient        2   32[COMRAM] int 
  6745 ;;  sign            1   31[COMRAM] unsigned char 
  6746 ;;  counter         1   30[COMRAM] unsigned char 
  6747 ;; Return value:  Size  Location     Type
  6748 ;;                  2   26[COMRAM] int 
  6749 ;; Registers used:
  6750 ;;		wreg, status,2, status,0
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6756 ;;      Params:         4       0       0       0       0       0       0
  6757 ;;      Locals:         4       0       0       0       0       0       0
  6758 ;;      Temps:          0       0       0       0       0       0       0
  6759 ;;      Totals:         8       0       0       0       0       0       0
  6760 ;;Total ram usage:        8 bytes
  6761 ;; Hardware stack levels used:    1
  6762 ;; Hardware stack levels required when called:    4
  6763 ;; This function calls:
  6764 ;;		Nothing
  6765 ;; This function is called by:
  6766 ;;		_begin
  6767 ;;		_Temp_Convert
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	text31
  6772  002280                     __ptext31:
  6773                           	opt stack 0
  6774  002280                     ___awdiv:
  6775                           	opt stack 24
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;incstack = 0
  6779  002280  0E00               	movlw	0
  6780  002282  6E20               	movwf	___awdiv@sign,c
  6781  002284  AE1E               	btfss	___awdiv@divisor+1,7,c
  6782  002286  D007               	goto	l3024
  6783  002288  6C1D               	negf	___awdiv@divisor,c
  6784  00228A  1E1E               	comf	___awdiv@divisor+1,f,c
  6785  00228C  B0D8               	btfsc	status,0,c
  6786  00228E  2A1E               	incf	___awdiv@divisor+1,f,c
  6787  002290  0E01               	movlw	1
  6788  002292  6E20               	movwf	___awdiv@sign,c
  6789  002294  D000               	goto	l3024
  6790  002296                     l3024:
  6791  002296  AE1C               	btfss	___awdiv@dividend+1,7,c
  6792  002298  D007               	goto	l3030
  6793  00229A  6C1B               	negf	___awdiv@dividend,c
  6794  00229C  1E1C               	comf	___awdiv@dividend+1,f,c
  6795  00229E  B0D8               	btfsc	status,0,c
  6796  0022A0  2A1C               	incf	___awdiv@dividend+1,f,c
  6797  0022A2  0E01               	movlw	1
  6798  0022A4  1A20               	xorwf	___awdiv@sign,f,c
  6799  0022A6  D000               	goto	l3030
  6800  0022A8                     l3030:
  6801  0022A8  0E00               	movlw	0
  6802  0022AA  6E22               	movwf	___awdiv@quotient+1,c
  6803  0022AC  0E00               	movlw	0
  6804  0022AE  6E21               	movwf	___awdiv@quotient,c
  6805  0022B0  501D               	movf	___awdiv@divisor,w,c
  6806  0022B2  101E               	iorwf	___awdiv@divisor+1,w,c
  6807  0022B4  B4D8               	btfsc	status,2,c
  6808  0022B6  D021               	goto	l3052
  6809  0022B8  0E01               	movlw	1
  6810  0022BA  6E1F               	movwf	___awdiv@counter,c
  6811  0022BC  D005               	goto	l3038
  6812  0022BE                     l3036:
  6813  0022BE  90D8               	bcf	status,0,c
  6814  0022C0  361D               	rlcf	___awdiv@divisor,f,c
  6815  0022C2  361E               	rlcf	___awdiv@divisor+1,f,c
  6816  0022C4  2A1F               	incf	___awdiv@counter,f,c
  6817  0022C6  D000               	goto	l3038
  6818  0022C8                     l3038:
  6819  0022C8  BE1E               	btfsc	___awdiv@divisor+1,7,c
  6820  0022CA  D002               	goto	l3040
  6821  0022CC  D7F8               	goto	l3036
  6822  0022CE  D000               	goto	l3040
  6823  0022D0                     l3040:
  6824  0022D0  90D8               	bcf	status,0,c
  6825  0022D2  3621               	rlcf	___awdiv@quotient,f,c
  6826  0022D4  3622               	rlcf	___awdiv@quotient+1,f,c
  6827  0022D6  501D               	movf	___awdiv@divisor,w,c
  6828  0022D8  5C1B               	subwf	___awdiv@dividend,w,c
  6829  0022DA  501E               	movf	___awdiv@divisor+1,w,c
  6830  0022DC  581C               	subwfb	___awdiv@dividend+1,w,c
  6831  0022DE  A0D8               	btfss	status,0,c
  6832  0022E0  D006               	goto	l3048
  6833  0022E2  501D               	movf	___awdiv@divisor,w,c
  6834  0022E4  5E1B               	subwf	___awdiv@dividend,f,c
  6835  0022E6  501E               	movf	___awdiv@divisor+1,w,c
  6836  0022E8  5A1C               	subwfb	___awdiv@dividend+1,f,c
  6837  0022EA  8021               	bsf	___awdiv@quotient,0,c
  6838  0022EC  D000               	goto	l3048
  6839  0022EE                     l3048:
  6840  0022EE  90D8               	bcf	status,0,c
  6841  0022F0  321E               	rrcf	___awdiv@divisor+1,f,c
  6842  0022F2  321D               	rrcf	___awdiv@divisor,f,c
  6843  0022F4  2E1F               	decfsz	___awdiv@counter,f,c
  6844  0022F6  D7EC               	goto	l3040
  6845  0022F8  D000               	goto	l3052
  6846  0022FA                     l3052:
  6847  0022FA  5020               	movf	___awdiv@sign,w,c
  6848  0022FC  B4D8               	btfsc	status,2,c
  6849  0022FE  D005               	goto	l3056
  6850  002300  6C21               	negf	___awdiv@quotient,c
  6851  002302  1E22               	comf	___awdiv@quotient+1,f,c
  6852  002304  B0D8               	btfsc	status,0,c
  6853  002306  2A22               	incf	___awdiv@quotient+1,f,c
  6854  002308  D000               	goto	l3056
  6855  00230A                     l3056:
  6856  00230A  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  6857  00230E  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  6858  002312  0012               	return	
  6859  002314  0012               	return		;funcret
  6860  002316                     __end_of___awdiv:
  6861                           	opt stack 0
  6862                           tosu	equ	0xFFF
  6863                           tosh	equ	0xFFE
  6864                           tosl	equ	0xFFD
  6865                           pclath	equ	0xFFA
  6866                           tblptru	equ	0xFF8
  6867                           tblptrh	equ	0xFF7
  6868                           tblptrl	equ	0xFF6
  6869                           tablat	equ	0xFF5
  6870                           prodh	equ	0xFF4
  6871                           prodl	equ	0xFF3
  6872                           intcon	equ	0xFF2
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           postdec1	equ	0xFE5
  6876                           fsr1l	equ	0xFE1
  6877                           indf2	equ	0xFDF
  6878                           postinc2	equ	0xFDE
  6879                           postdec2	equ	0xFDD
  6880                           plusw2	equ	0xFDB
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function _TMR1_Initialize *****************
  6886 ;; Defined at:
  6887 ;;		line 18 in file "mcc_generated_files/tmr1.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;		None
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;		None
  6892 ;; Return value:  Size  Location     Type
  6893 ;;		None               void
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6901 ;;      Params:         0       0       0       0       0       0       0
  6902 ;;      Locals:         0       0       0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0
  6904 ;;      Totals:         0       0       0       0       0       0       0
  6905 ;;Total ram usage:        0 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    5
  6908 ;; This function calls:
  6909 ;;		_TMR1_StartTimer
  6910 ;; This function is called by:
  6911 ;;		_SYSTEM_Initialize
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           	psect	text32
  6916  0028E0                     __ptext32:
  6917                           	opt stack 0
  6918  0028E0                     _TMR1_Initialize:
  6919                           	opt stack 24
  6920                           
  6921                           ;tmr1.c: 23: T1CON = 0x30;
  6922                           
  6923                           ;incstack = 0
  6924  0028E0  0E30               	movlw	48
  6925  0028E2  6ECD               	movwf	4045,c	;volatile
  6926                           
  6927                           ;tmr1.c: 26: T1GCON = 0x00;
  6928  0028E4  0E00               	movlw	0
  6929  0028E6  6ECC               	movwf	4044,c	;volatile
  6930                           
  6931                           ;tmr1.c: 29: TMR1H = 0x0B;
  6932  0028E8  0E0B               	movlw	11
  6933  0028EA  6ECF               	movwf	4047,c	;volatile
  6934                           
  6935                           ;tmr1.c: 32: TMR1L = 0xDC;
  6936  0028EC  0EDC               	movlw	220
  6937  0028EE  6ECE               	movwf	4046,c	;volatile
  6938                           
  6939                           ;tmr1.c: 35: timer1ReloadVal=TMR1;
  6940  0028F0  CFCE F037          	movff	4046,_timer1ReloadVal	;volatile
  6941  0028F4  CFCF F038          	movff	4047,_timer1ReloadVal+1	;volatile
  6942                           
  6943                           ;tmr1.c: 38: PIR1bits.TMR1IF = 0;
  6944  0028F8  909E               	bcf	3998,0,c	;volatile
  6945                           
  6946                           ;tmr1.c: 41: PIE1bits.TMR1IE = 1;
  6947  0028FA  809D               	bsf	3997,0,c	;volatile
  6948                           
  6949                           ;tmr1.c: 44: TMR1_StartTimer();
  6950  0028FC  EC3A  F015         	call	_TMR1_StartTimer	;wreg free
  6951  002900  0012               	return		;funcret
  6952  002902                     __end_of_TMR1_Initialize:
  6953                           	opt stack 0
  6954                           tosu	equ	0xFFF
  6955                           tosh	equ	0xFFE
  6956                           tosl	equ	0xFFD
  6957                           pclath	equ	0xFFA
  6958                           tblptru	equ	0xFF8
  6959                           tblptrh	equ	0xFF7
  6960                           tblptrl	equ	0xFF6
  6961                           tablat	equ	0xFF5
  6962                           prodh	equ	0xFF4
  6963                           prodl	equ	0xFF3
  6964                           intcon	equ	0xFF2
  6965                           postinc0	equ	0xFEE
  6966                           wreg	equ	0xFE8
  6967                           postdec1	equ	0xFE5
  6968                           fsr1l	equ	0xFE1
  6969                           indf2	equ	0xFDF
  6970                           postinc2	equ	0xFDE
  6971                           postdec2	equ	0xFDD
  6972                           plusw2	equ	0xFDB
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _TMR1_StartTimer *****************
  6978 ;; Defined at:
  6979 ;;		line 47 in file "mcc_generated_files/tmr1.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;		None
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;		None
  6984 ;; Return value:  Size  Location     Type
  6985 ;;		None               void
  6986 ;; Registers used:
  6987 ;;		None
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6993 ;;      Params:         0       0       0       0       0       0       0
  6994 ;;      Locals:         0       0       0       0       0       0       0
  6995 ;;      Temps:          0       0       0       0       0       0       0
  6996 ;;      Totals:         0       0       0       0       0       0       0
  6997 ;;Total ram usage:        0 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    4
  7000 ;; This function calls:
  7001 ;;		Nothing
  7002 ;; This function is called by:
  7003 ;;		_TMR1_Initialize
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text33
  7008  002A74                     __ptext33:
  7009                           	opt stack 0
  7010  002A74                     _TMR1_StartTimer:
  7011                           	opt stack 24
  7012                           
  7013                           ;tmr1.c: 50: T1CONbits.TMR1ON = 1;
  7014                           
  7015                           ;incstack = 0
  7016  002A74  80CD               	bsf	4045,0,c	;volatile
  7017  002A76  0012               	return		;funcret
  7018  002A78                     __end_of_TMR1_StartTimer:
  7019                           	opt stack 0
  7020                           tosu	equ	0xFFF
  7021                           tosh	equ	0xFFE
  7022                           tosl	equ	0xFFD
  7023                           pclath	equ	0xFFA
  7024                           tblptru	equ	0xFF8
  7025                           tblptrh	equ	0xFF7
  7026                           tblptrl	equ	0xFF6
  7027                           tablat	equ	0xFF5
  7028                           prodh	equ	0xFF4
  7029                           prodl	equ	0xFF3
  7030                           intcon	equ	0xFF2
  7031                           postinc0	equ	0xFEE
  7032                           wreg	equ	0xFE8
  7033                           postdec1	equ	0xFE5
  7034                           fsr1l	equ	0xFE1
  7035                           indf2	equ	0xFDF
  7036                           postinc2	equ	0xFDE
  7037                           postdec2	equ	0xFDD
  7038                           plusw2	equ	0xFDB
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8
  7042                           
  7043 ;; *************** function _PIN_MANAGER_Initialize *****************
  7044 ;; Defined at:
  7045 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;		None
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;		None
  7050 ;; Return value:  Size  Location     Type
  7051 ;;		None               void
  7052 ;; Registers used:
  7053 ;;		wreg, status,2
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7059 ;;      Params:         0       0       0       0       0       0       0
  7060 ;;      Locals:         0       0       0       0       0       0       0
  7061 ;;      Temps:          0       0       0       0       0       0       0
  7062 ;;      Totals:         0       0       0       0       0       0       0
  7063 ;;Total ram usage:        0 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; Hardware stack levels required when called:    4
  7066 ;; This function calls:
  7067 ;;		Nothing
  7068 ;; This function is called by:
  7069 ;;		_SYSTEM_Initialize
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text34
  7074  0025BE                     __ptext34:
  7075                           	opt stack 0
  7076  0025BE                     _PIN_MANAGER_Initialize:
  7077                           	opt stack 25
  7078                           
  7079                           ;pin_manager.c: 8: LATA = 0x00;
  7080                           
  7081                           ;incstack = 0
  7082  0025BE  0E00               	movlw	0
  7083  0025C0  6E89               	movwf	3977,c	;volatile
  7084                           
  7085                           ;pin_manager.c: 9: TRISA = 0xAE;
  7086  0025C2  0EAE               	movlw	174
  7087  0025C4  6E92               	movwf	3986,c	;volatile
  7088                           
  7089                           ;pin_manager.c: 10: ANSELA = 0x2E;
  7090  0025C6  0E2E               	movlw	46
  7091  0025C8  010F               	movlb	15	; () banked
  7092  0025CA  6F38               	movwf	56,b	;volatile
  7093                           
  7094                           ;pin_manager.c: 12: LATB = 0x00;
  7095  0025CC  0E00               	movlw	0
  7096  0025CE  6E8A               	movwf	3978,c	;volatile
  7097                           
  7098                           ;pin_manager.c: 13: TRISB = 0xF4;
  7099  0025D0  0EF4               	movlw	244
  7100  0025D2  6E93               	movwf	3987,c	;volatile
  7101                           
  7102                           ;pin_manager.c: 14: ANSELB = 0x34;
  7103  0025D4  0E34               	movlw	52
  7104  0025D6  010F               	movlb	15	; () banked
  7105  0025D8  6F39               	movwf	57,b	;volatile
  7106                           
  7107                           ;pin_manager.c: 15: WPUB = 0x00;
  7108  0025DA  0E00               	movlw	0
  7109  0025DC  6E61               	movwf	3937,c	;volatile
  7110                           
  7111                           ;pin_manager.c: 17: LATC = 0x48;
  7112  0025DE  0E48               	movlw	72
  7113  0025E0  6E8B               	movwf	3979,c	;volatile
  7114                           
  7115                           ;pin_manager.c: 18: TRISC = 0xC4;
  7116  0025E2  0EC4               	movlw	196
  7117  0025E4  6E94               	movwf	3988,c	;volatile
  7118                           
  7119                           ;pin_manager.c: 19: ANSELC = 0x04;
  7120  0025E6  0E04               	movlw	4
  7121  0025E8  010F               	movlb	15	; () banked
  7122  0025EA  6F3A               	movwf	58,b	;volatile
  7123                           
  7124                           ;pin_manager.c: 21: LATD = 0x00;
  7125  0025EC  0E00               	movlw	0
  7126  0025EE  6E8C               	movwf	3980,c	;volatile
  7127                           
  7128                           ;pin_manager.c: 22: TRISD = 0xD1;
  7129  0025F0  0ED1               	movlw	209
  7130  0025F2  6E95               	movwf	3989,c	;volatile
  7131                           
  7132                           ;pin_manager.c: 23: ANSELD = 0xD1;
  7133  0025F4  0ED1               	movlw	209
  7134  0025F6  010F               	movlb	15	; () banked
  7135  0025F8  6F3B               	movwf	59,b	;volatile
  7136                           
  7137                           ;pin_manager.c: 25: LATE = 0x00;
  7138  0025FA  0E00               	movlw	0
  7139  0025FC  6E8D               	movwf	3981,c	;volatile
  7140                           
  7141                           ;pin_manager.c: 26: TRISE = 0x04;
  7142  0025FE  0E04               	movlw	4
  7143  002600  6E96               	movwf	3990,c	;volatile
  7144                           
  7145                           ;pin_manager.c: 27: ANSELE = 0x04;
  7146  002602  0E04               	movlw	4
  7147  002604  010F               	movlb	15	; () banked
  7148  002606  6F3C               	movwf	60,b	;volatile
  7149                           
  7150                           ; BSR set to: 15
  7151                           ;pin_manager.c: 29: TRISCbits.TRISC6 = 1;
  7152  002608  8C94               	bsf	3988,6,c	;volatile
  7153                           
  7154                           ; BSR set to: 15
  7155                           ;pin_manager.c: 30: TRISCbits.TRISC7 = 1;
  7156  00260A  8E94               	bsf	3988,7,c	;volatile
  7157                           
  7158                           ; BSR set to: 15
  7159                           ;pin_manager.c: 34: INTCON2bits.nRBPU = 0x01;
  7160  00260C  8EF1               	bsf	intcon2,7,c	;volatile
  7161                           
  7162                           ; BSR set to: 15
  7163  00260E  0012               	return		;funcret
  7164  002610                     __end_of_PIN_MANAGER_Initialize:
  7165                           	opt stack 0
  7166                           tosu	equ	0xFFF
  7167                           tosh	equ	0xFFE
  7168                           tosl	equ	0xFFD
  7169                           pclath	equ	0xFFA
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           intcon	equ	0xFF2
  7177                           intcon2	equ	0xFF1
  7178                           postinc0	equ	0xFEE
  7179                           wreg	equ	0xFE8
  7180                           postdec1	equ	0xFE5
  7181                           fsr1l	equ	0xFE1
  7182                           indf2	equ	0xFDF
  7183                           postinc2	equ	0xFDE
  7184                           postdec2	equ	0xFDD
  7185                           plusw2	equ	0xFDB
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _OSCILLATOR_Initialize *****************
  7191 ;; Defined at:
  7192 ;;		line 125 in file "mcc_generated_files/mcc.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;		None
  7197 ;; Return value:  Size  Location     Type
  7198 ;;		None               void
  7199 ;; Registers used:
  7200 ;;		wreg, status,2
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7206 ;;      Params:         0       0       0       0       0       0       0
  7207 ;;      Locals:         0       0       0       0       0       0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0
  7209 ;;      Totals:         0       0       0       0       0       0       0
  7210 ;;Total ram usage:        0 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    4
  7213 ;; This function calls:
  7214 ;;		Nothing
  7215 ;; This function is called by:
  7216 ;;		_SYSTEM_Initialize
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           	psect	text35
  7221  002A5A                     __ptext35:
  7222                           	opt stack 0
  7223  002A5A                     _OSCILLATOR_Initialize:
  7224                           	opt stack 25
  7225                           
  7226                           ;mcc.c: 127: OSCCON = 0x62;
  7227                           
  7228                           ; BSR set to: 15
  7229                           ;incstack = 0
  7230  002A5A  0E62               	movlw	98
  7231  002A5C  6ED3               	movwf	4051,c	;volatile
  7232                           
  7233                           ;mcc.c: 129: OSCCON2 = 0x04;
  7234  002A5E  0E04               	movlw	4
  7235  002A60  6ED2               	movwf	4050,c	;volatile
  7236                           
  7237                           ;mcc.c: 131: OSCTUNE = 0x00;
  7238  002A62  0E00               	movlw	0
  7239  002A64  6E9B               	movwf	3995,c	;volatile
  7240  002A66  0012               	return		;funcret
  7241  002A68                     __end_of_OSCILLATOR_Initialize:
  7242                           	opt stack 0
  7243                           tosu	equ	0xFFF
  7244                           tosh	equ	0xFFE
  7245                           tosl	equ	0xFFD
  7246                           pclath	equ	0xFFA
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           intcon2	equ	0xFF1
  7255                           postinc0	equ	0xFEE
  7256                           wreg	equ	0xFE8
  7257                           postdec1	equ	0xFE5
  7258                           fsr1l	equ	0xFE1
  7259                           indf2	equ	0xFDF
  7260                           postinc2	equ	0xFDE
  7261                           postdec2	equ	0xFDD
  7262                           plusw2	equ	0xFDB
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267 ;; *************** function _INTERRUPT_Initialize *****************
  7268 ;; Defined at:
  7269 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;		None
  7274 ;; Return value:  Size  Location     Type
  7275 ;;		None               void
  7276 ;; Registers used:
  7277 ;;		None
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7283 ;;      Params:         0       0       0       0       0       0       0
  7284 ;;      Locals:         0       0       0       0       0       0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0
  7286 ;;      Totals:         0       0       0       0       0       0       0
  7287 ;;Total ram usage:        0 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    4
  7290 ;; This function calls:
  7291 ;;		Nothing
  7292 ;; This function is called by:
  7293 ;;		_SYSTEM_Initialize
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           	psect	text36
  7298  002A68                     __ptext36:
  7299                           	opt stack 0
  7300  002A68                     _INTERRUPT_Initialize:
  7301                           	opt stack 25
  7302                           
  7303                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  7304                           
  7305                           ;incstack = 0
  7306  002A68  9ED0               	bcf	4048,7,c	;volatile
  7307                           
  7308                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  7309  002A6A  9A9F               	bcf	3999,5,c	;volatile
  7310                           
  7311                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  7312  002A6C  9C9F               	bcf	3999,6,c	;volatile
  7313                           
  7314                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  7315  002A6E  909F               	bcf	3999,0,c	;volatile
  7316                           
  7317                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  7318  002A70  989F               	bcf	3999,4,c	;volatile
  7319  002A72  0012               	return		;funcret
  7320  002A74                     __end_of_INTERRUPT_Initialize:
  7321                           	opt stack 0
  7322                           tosu	equ	0xFFF
  7323                           tosh	equ	0xFFE
  7324                           tosl	equ	0xFFD
  7325                           pclath	equ	0xFFA
  7326                           tblptru	equ	0xFF8
  7327                           tblptrh	equ	0xFF7
  7328                           tblptrl	equ	0xFF6
  7329                           tablat	equ	0xFF5
  7330                           prodh	equ	0xFF4
  7331                           prodl	equ	0xFF3
  7332                           intcon	equ	0xFF2
  7333                           intcon2	equ	0xFF1
  7334                           postinc0	equ	0xFEE
  7335                           wreg	equ	0xFE8
  7336                           postdec1	equ	0xFE5
  7337                           fsr1l	equ	0xFE1
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           postdec2	equ	0xFDD
  7341                           plusw2	equ	0xFDB
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           
  7346 ;; *************** function _EUSART1_Initialize *****************
  7347 ;; Defined at:
  7348 ;;		line 21 in file "UART.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;		None
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;		None
  7353 ;; Return value:  Size  Location     Type
  7354 ;;		None               void
  7355 ;; Registers used:
  7356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7362 ;;      Params:         0       0       0       0       0       0       0
  7363 ;;      Locals:         0       0       0       0       0       0       0
  7364 ;;      Temps:          0       0       0       0       0       0       0
  7365 ;;      Totals:         0       0       0       0       0       0       0
  7366 ;;Total ram usage:        0 bytes
  7367 ;; Hardware stack levels used:    1
  7368 ;; Hardware stack levels required when called:    6
  7369 ;; This function calls:
  7370 ;;		_UART_buff_init
  7371 ;; This function is called by:
  7372 ;;		_SYSTEM_Initialize
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           	psect	text37
  7377  0026A8                     __ptext37:
  7378                           	opt stack 0
  7379  0026A8                     _EUSART1_Initialize:
  7380                           	opt stack 23
  7381                           
  7382                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  7383                           
  7384                           ;incstack = 0
  7385  0026A8  9A9D               	bcf	3997,5,c	;volatile
  7386                           
  7387                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  7388  0026AA  989D               	bcf	3997,4,c	;volatile
  7389                           
  7390                           ;UART.c: 29: BAUD1CON = 0x48;
  7391  0026AC  0E48               	movlw	72
  7392  0026AE  6EB8               	movwf	4024,c	;volatile
  7393                           
  7394                           ;UART.c: 32: RC1STA = 0x98;
  7395  0026B0  0E98               	movlw	152
  7396  0026B2  6EAB               	movwf	4011,c	;volatile
  7397                           
  7398                           ;UART.c: 35: TX1STA = 0x26;
  7399  0026B4  0E26               	movlw	38
  7400  0026B6  6EAC               	movwf	4012,c	;volatile
  7401                           
  7402                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  7403  0026B8  0E33               	movlw	51
  7404  0026BA  6EAF               	movwf	4015,c	;volatile
  7405                           
  7406                           ;UART.c: 41: SPBRGH1 = 0x00;
  7407  0026BC  0E00               	movlw	0
  7408  0026BE  6EB0               	movwf	4016,c	;volatile
  7409                           
  7410                           ;UART.c: 44: TXREG1 = 0x00;
  7411  0026C0  0E00               	movlw	0
  7412  0026C2  6EAD               	movwf	4013,c	;volatile
  7413                           
  7414                           ;UART.c: 47: RCREG1 = 0x00;
  7415  0026C4  0E00               	movlw	0
  7416  0026C6  6EAE               	movwf	4014,c	;volatile
  7417                           
  7418                           ;UART.c: 49: UART_buff_init(&input_buffer);
  7419  0026C8  0E00               	movlw	low _input_buffer
  7420  0026CA  6E23               	movwf	UART_buff_init@_this,c
  7421  0026CC  0E04               	movlw	high _input_buffer
  7422  0026CE  6E24               	movwf	UART_buff_init@_this+1,c
  7423  0026D0  EC9F  F014         	call	_UART_buff_init	;wreg free
  7424                           
  7425                           ;UART.c: 50: UART_buff_init(&output_buffer);
  7426  0026D4  0E00               	movlw	low _output_buffer
  7427  0026D6  6E23               	movwf	UART_buff_init@_this,c
  7428  0026D8  0E05               	movlw	high _output_buffer
  7429  0026DA  6E24               	movwf	UART_buff_init@_this+1,c
  7430  0026DC  EC9F  F014         	call	_UART_buff_init	;wreg free
  7431                           
  7432                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  7433  0026E0  8A9D               	bsf	3997,5,c	;volatile
  7434  0026E2  0012               	return		;funcret
  7435  0026E4                     __end_of_EUSART1_Initialize:
  7436                           	opt stack 0
  7437                           tosu	equ	0xFFF
  7438                           tosh	equ	0xFFE
  7439                           tosl	equ	0xFFD
  7440                           pclath	equ	0xFFA
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           prodh	equ	0xFF4
  7446                           prodl	equ	0xFF3
  7447                           intcon	equ	0xFF2
  7448                           intcon2	equ	0xFF1
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1l	equ	0xFE1
  7453                           indf2	equ	0xFDF
  7454                           postinc2	equ	0xFDE
  7455                           postdec2	equ	0xFDD
  7456                           plusw2	equ	0xFDB
  7457                           fsr2h	equ	0xFDA
  7458                           fsr2l	equ	0xFD9
  7459                           status	equ	0xFD8
  7460                           
  7461 ;; *************** function _UART_buff_init *****************
  7462 ;; Defined at:
  7463 ;;		line 56 in file "UART.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  7466 ;;		 -> output_buffer(206), input_buffer(206), 
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;		None
  7469 ;; Return value:  Size  Location     Type
  7470 ;;		None               void
  7471 ;; Registers used:
  7472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7478 ;;      Params:         2       0       0       0       0       0       0
  7479 ;;      Locals:         0       0       0       0       0       0       0
  7480 ;;      Temps:          0       0       0       0       0       0       0
  7481 ;;      Totals:         2       0       0       0       0       0       0
  7482 ;;Total ram usage:        2 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:    5
  7485 ;; This function calls:
  7486 ;;		_memset
  7487 ;; This function is called by:
  7488 ;;		_EUSART1_Initialize
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           	psect	text38
  7493  00293E                     __ptext38:
  7494                           	opt stack 0
  7495  00293E                     _UART_buff_init:
  7496                           	opt stack 23
  7497                           
  7498                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  7499                           
  7500                           ;incstack = 0
  7501  00293E  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  7502  002942  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  7503  002946  0E00               	movlw	0
  7504  002948  6E1E               	movwf	memset@c+1,c
  7505  00294A  0E00               	movlw	0
  7506  00294C  6E1D               	movwf	memset@c,c
  7507  00294E  0E00               	movlw	0
  7508  002950  6E20               	movwf	memset@n+1,c
  7509  002952  0ECE               	movlw	206
  7510  002954  6E1F               	movwf	memset@n,c
  7511  002956  EC06  F014         	call	_memset	;wreg free
  7512  00295A  0012               	return		;funcret
  7513  00295C                     __end_of_UART_buff_init:
  7514                           	opt stack 0
  7515                           tosu	equ	0xFFF
  7516                           tosh	equ	0xFFE
  7517                           tosl	equ	0xFFD
  7518                           pclath	equ	0xFFA
  7519                           tblptru	equ	0xFF8
  7520                           tblptrh	equ	0xFF7
  7521                           tblptrl	equ	0xFF6
  7522                           tablat	equ	0xFF5
  7523                           prodh	equ	0xFF4
  7524                           prodl	equ	0xFF3
  7525                           intcon	equ	0xFF2
  7526                           intcon2	equ	0xFF1
  7527                           postinc0	equ	0xFEE
  7528                           wreg	equ	0xFE8
  7529                           postdec1	equ	0xFE5
  7530                           fsr1l	equ	0xFE1
  7531                           indf2	equ	0xFDF
  7532                           postinc2	equ	0xFDE
  7533                           postdec2	equ	0xFDD
  7534                           plusw2	equ	0xFDB
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _memset *****************
  7540 ;; Defined at:
  7541 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\memset.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  p1              2   26[COMRAM] PTR void 
  7544 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7545 ;;  c               2   28[COMRAM] int 
  7546 ;;  n               2   30[COMRAM] unsigned int 
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;  p               2   32[COMRAM] PTR unsigned char 
  7549 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  2   26[COMRAM] PTR void 
  7552 ;; Registers used:
  7553 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7559 ;;      Params:         6       0       0       0       0       0       0
  7560 ;;      Locals:         2       0       0       0       0       0       0
  7561 ;;      Temps:          0       0       0       0       0       0       0
  7562 ;;      Totals:         8       0       0       0       0       0       0
  7563 ;;Total ram usage:        8 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    4
  7566 ;; This function calls:
  7567 ;;		Nothing
  7568 ;; This function is called by:
  7569 ;;		_FastTransfer_buffer_flush
  7570 ;;		_UART_buff_init
  7571 ;;		_UART_buff_flush
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	text39
  7576  00280C                     __ptext39:
  7577                           	opt stack 0
  7578  00280C                     _memset:
  7579                           	opt stack 23
  7580                           
  7581                           ;incstack = 0
  7582  00280C  C01B  F021         	movff	memset@p1,memset@p
  7583  002810  C01C  F022         	movff	memset@p1+1,memset@p+1
  7584  002814  D009               	goto	l2778
  7585  002816                     l2774:
  7586  002816  C021  FFD9         	movff	memset@p,fsr2l
  7587  00281A  C022  FFDA         	movff	memset@p+1,fsr2h
  7588  00281E  C01D  FFDF         	movff	memset@c,indf2
  7589  002822  4A21               	infsnz	memset@p,f,c
  7590  002824  2A22               	incf	memset@p+1,f,c
  7591  002826  D000               	goto	l2778
  7592  002828                     l2778:
  7593  002828  061F               	decf	memset@n,f,c
  7594  00282A  A0D8               	btfss	status,0,c
  7595  00282C  0620               	decf	memset@n+1,f,c
  7596  00282E  281F               	incf	memset@n,w,c
  7597  002830  E1F2               	bnz	l2774
  7598  002832  2820               	incf	memset@n+1,w,c
  7599  002834  A4D8               	btfss	status,2,c
  7600  002836  D7EF               	goto	l2774
  7601                           
  7602                           ;	Return value of _memset is never used
  7603  002838  0012               	return		;funcret
  7604  00283A                     __end_of_memset:
  7605                           	opt stack 0
  7606                           tosu	equ	0xFFF
  7607                           tosh	equ	0xFFE
  7608                           tosl	equ	0xFFD
  7609                           pclath	equ	0xFFA
  7610                           tblptru	equ	0xFF8
  7611                           tblptrh	equ	0xFF7
  7612                           tblptrl	equ	0xFF6
  7613                           tablat	equ	0xFF5
  7614                           prodh	equ	0xFF4
  7615                           prodl	equ	0xFF3
  7616                           intcon	equ	0xFF2
  7617                           intcon2	equ	0xFF1
  7618                           postinc0	equ	0xFEE
  7619                           wreg	equ	0xFE8
  7620                           postdec1	equ	0xFE5
  7621                           fsr1l	equ	0xFE1
  7622                           indf2	equ	0xFDF
  7623                           postinc2	equ	0xFDE
  7624                           postdec2	equ	0xFDD
  7625                           plusw2	equ	0xFDB
  7626                           fsr2h	equ	0xFDA
  7627                           fsr2l	equ	0xFD9
  7628                           status	equ	0xFD8
  7629                           
  7630 ;; *************** function _ADC_Initialize *****************
  7631 ;; Defined at:
  7632 ;;		line 13 in file "mcc_generated_files/adc.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;		None
  7635 ;; Auto vars:     Size  Location     Type
  7636 ;;		None
  7637 ;; Return value:  Size  Location     Type
  7638 ;;		None               void
  7639 ;; Registers used:
  7640 ;;		wreg, status,2
  7641 ;; Tracked objects:
  7642 ;;		On entry : 0/0
  7643 ;;		On exit  : 0/0
  7644 ;;		Unchanged: 0/0
  7645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7646 ;;      Params:         0       0       0       0       0       0       0
  7647 ;;      Locals:         0       0       0       0       0       0       0
  7648 ;;      Temps:          0       0       0       0       0       0       0
  7649 ;;      Totals:         0       0       0       0       0       0       0
  7650 ;;Total ram usage:        0 bytes
  7651 ;; Hardware stack levels used:    1
  7652 ;; Hardware stack levels required when called:    4
  7653 ;; This function calls:
  7654 ;;		Nothing
  7655 ;; This function is called by:
  7656 ;;		_SYSTEM_Initialize
  7657 ;; This function uses a non-reentrant model
  7658 ;;
  7659                           
  7660                           	psect	text40
  7661  0029E0                     __ptext40:
  7662                           	opt stack 0
  7663  0029E0                     _ADC_Initialize:
  7664                           	opt stack 25
  7665                           
  7666                           ;adc.c: 18: ADCON0 = 0x01;
  7667                           
  7668                           ;incstack = 0
  7669  0029E0  0E01               	movlw	1
  7670  0029E2  6EC2               	movwf	4034,c	;volatile
  7671                           
  7672                           ;adc.c: 21: ADCON1 = 0x80;
  7673  0029E4  0E80               	movlw	128
  7674  0029E6  6EC1               	movwf	4033,c	;volatile
  7675                           
  7676                           ;adc.c: 24: ADCON2 = 0xA9;
  7677  0029E8  0EA9               	movlw	169
  7678  0029EA  6EC0               	movwf	4032,c	;volatile
  7679                           
  7680                           ;adc.c: 27: ADRESL = 0x00;
  7681  0029EC  0E00               	movlw	0
  7682  0029EE  6EC3               	movwf	4035,c	;volatile
  7683                           
  7684                           ;adc.c: 30: ADRESH = 0x00;
  7685  0029F0  0E00               	movlw	0
  7686  0029F2  6EC4               	movwf	4036,c	;volatile
  7687                           
  7688                           ;adc.c: 33: PIE1bits.ADIE = 1;
  7689  0029F4  8C9D               	bsf	3997,6,c	;volatile
  7690  0029F6  0012               	return		;funcret
  7691  0029F8                     __end_of_ADC_Initialize:
  7692                           	opt stack 0
  7693                           tosu	equ	0xFFF
  7694                           tosh	equ	0xFFE
  7695                           tosl	equ	0xFFD
  7696                           pclath	equ	0xFFA
  7697                           tblptru	equ	0xFF8
  7698                           tblptrh	equ	0xFF7
  7699                           tblptrl	equ	0xFF6
  7700                           tablat	equ	0xFF5
  7701                           prodh	equ	0xFF4
  7702                           prodl	equ	0xFF3
  7703                           intcon	equ	0xFF2
  7704                           intcon2	equ	0xFF1
  7705                           postinc0	equ	0xFEE
  7706                           wreg	equ	0xFE8
  7707                           postdec1	equ	0xFE5
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           postinc2	equ	0xFDE
  7711                           postdec2	equ	0xFDD
  7712                           plusw2	equ	0xFDB
  7713                           fsr2h	equ	0xFDA
  7714                           fsr2l	equ	0xFD9
  7715                           status	equ	0xFD8
  7716                           
  7717 ;; *************** function _INTERRUPT_InterruptManager *****************
  7718 ;; Defined at:
  7719 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;		None
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;		None
  7724 ;; Return value:  Size  Location     Type
  7725 ;;		None               void
  7726 ;; Registers used:
  7727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7733 ;;      Params:         0       0       0       0       0       0       0
  7734 ;;      Locals:         0       0       0       0       0       0       0
  7735 ;;      Temps:         14       0       0       0       0       0       0
  7736 ;;      Totals:        14       0       0       0       0       0       0
  7737 ;;Total ram usage:       14 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; Hardware stack levels required when called:    3
  7740 ;; This function calls:
  7741 ;;		_ADC_ISR
  7742 ;;		_EUSART1_Receive_ISR
  7743 ;;		_EUSART1_Transmit_ISR
  7744 ;;		_TMR1_ISR
  7745 ;; This function is called by:
  7746 ;;		Interrupt level 2
  7747 ;; This function uses a non-reentrant model
  7748 ;;
  7749                           
  7750                           	psect	intcode
  7751  000008                     __pintcode:
  7752                           	opt stack 0
  7753  000008                     _INTERRUPT_InterruptManager:
  7754                           	opt stack 21
  7755                           
  7756                           ;incstack = 0
  7757  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  7758  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7759  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7760  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7761  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7762  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7763  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7764  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7765  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7766  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7767  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7768  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7769  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7770  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7771                           
  7772                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7773  000040  BA9D               	btfsc	3997,5,c	;volatile
  7774  000042  AA9E               	btfss	3998,5,c	;volatile
  7775  000044  D003               	goto	i2l204
  7776                           
  7777                           ;interrupt_manager.c: 73: {
  7778                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  7779  000046  ECAE  F014         	call	_EUSART1_Receive_ISR	;wreg free
  7780                           
  7781                           ;interrupt_manager.c: 75: }
  7782  00004A  D012               	goto	i2l212
  7783  00004C                     i2l204:
  7784                           
  7785                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7786  00004C  BC9D               	btfsc	3997,6,c	;volatile
  7787  00004E  AC9E               	btfss	3998,6,c	;volatile
  7788  000050  D003               	goto	i2l206
  7789                           
  7790                           ;interrupt_manager.c: 77: {
  7791                           ;interrupt_manager.c: 78: ADC_ISR();
  7792  000052  EC2B  F006         	call	_ADC_ISR	;wreg free
  7793                           
  7794                           ;interrupt_manager.c: 79: }
  7795  000056  D00C               	goto	i2l212
  7796  000058                     i2l206:
  7797                           
  7798                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  7799  000058  B09D               	btfsc	3997,0,c	;volatile
  7800  00005A  A09E               	btfss	3998,0,c	;volatile
  7801  00005C  D003               	goto	i2l208
  7802                           
  7803                           ;interrupt_manager.c: 81: {
  7804                           ;interrupt_manager.c: 82: TMR1_ISR();
  7805  00005E  EC34  F014         	call	_TMR1_ISR	;wreg free
  7806                           
  7807                           ;interrupt_manager.c: 83: }
  7808  000062  D006               	goto	i2l212
  7809  000064                     i2l208:
  7810                           
  7811                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7812  000064  B89D               	btfsc	3997,4,c	;volatile
  7813  000066  A89E               	btfss	3998,4,c	;volatile
  7814  000068  D003               	goto	i2l212
  7815                           
  7816                           ;interrupt_manager.c: 85: {
  7817                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  7818  00006A  EC8E  F013         	call	_EUSART1_Transmit_ISR	;wreg free
  7819                           
  7820                           ;interrupt_manager.c: 88: else
  7821                           ;interrupt_manager.c: 89: {
  7822                           
  7823                           ;interrupt_manager.c: 87: }
  7824  00006E  D000               	goto	i2l212
  7825  000070                     i2l212:
  7826  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7827  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7828  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7829  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7830  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7831  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7832  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7833  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7834  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7835  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7836  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7837  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7838  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7839  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7840  0000A8  0011               	retfie		f
  7841  0000AA                     __end_of_INTERRUPT_InterruptManager:
  7842                           	opt stack 0
  7843                           tosu	equ	0xFFF
  7844                           tosh	equ	0xFFE
  7845                           tosl	equ	0xFFD
  7846                           pclatu	equ	0xFFB
  7847                           pclath	equ	0xFFA
  7848                           tblptru	equ	0xFF8
  7849                           tblptrh	equ	0xFF7
  7850                           tblptrl	equ	0xFF6
  7851                           tablat	equ	0xFF5
  7852                           prodh	equ	0xFF4
  7853                           prodl	equ	0xFF3
  7854                           intcon	equ	0xFF2
  7855                           intcon2	equ	0xFF1
  7856                           postinc0	equ	0xFEE
  7857                           fsr0h	equ	0xFEA
  7858                           fsr0l	equ	0xFE9
  7859                           wreg	equ	0xFE8
  7860                           postdec1	equ	0xFE5
  7861                           fsr1h	equ	0xFE2
  7862                           fsr1l	equ	0xFE1
  7863                           indf2	equ	0xFDF
  7864                           postinc2	equ	0xFDE
  7865                           postdec2	equ	0xFDD
  7866                           plusw2	equ	0xFDB
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function _TMR1_ISR *****************
  7872 ;; Defined at:
  7873 ;;		line 112 in file "mcc_generated_files/tmr1.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;		None
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;		None
  7878 ;; Return value:  Size  Location     Type
  7879 ;;		None               void
  7880 ;; Registers used:
  7881 ;;		wreg, status,2, status,0
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7887 ;;      Params:         0       0       0       0       0       0       0
  7888 ;;      Locals:         0       0       0       0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0
  7890 ;;      Totals:         0       0       0       0       0       0       0
  7891 ;;Total ram usage:        0 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; This function calls:
  7894 ;;		Nothing
  7895 ;; This function is called by:
  7896 ;;		_INTERRUPT_InterruptManager
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text42
  7901  002868                     __ptext42:
  7902                           	opt stack 0
  7903  002868                     _TMR1_ISR:
  7904                           	opt stack 23
  7905                           
  7906                           ;tmr1.c: 116: PIR1bits.TMR1IF = 0;
  7907                           
  7908                           ;incstack = 0
  7909  002868  909E               	bcf	3998,0,c	;volatile
  7910                           
  7911                           ;tmr1.c: 119: TMR1H = (timer1ReloadVal >> 8);
  7912  00286A  5038               	movf	_timer1ReloadVal+1,w,c	;volatile
  7913  00286C  6ECF               	movwf	4047,c	;volatile
  7914                           
  7915                           ;tmr1.c: 120: TMR1L = (uint8_t) timer1ReloadVal;
  7916  00286E  C037  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  7917                           
  7918                           ;tmr1.c: 123: if (++CountCallBack >= 4)
  7919  002872  4A2F               	infsnz	_CountCallBack,f,c
  7920  002874  2A30               	incf	_CountCallBack+1,f,c
  7921  002876  BE30               	btfsc	_CountCallBack+1,7,c
  7922  002878  0012               	return	
  7923  00287A  5030               	movf	_CountCallBack+1,w,c
  7924  00287C  E104               	bnz	i2u123_40
  7925  00287E  0E04               	movlw	4
  7926  002880  5C2F               	subwf	_CountCallBack,w,c
  7927  002882  A0D8               	btfss	status,0,c
  7928  002884  0012               	return	
  7929  002886                     i2u123_40:
  7930                           
  7931                           ;tmr1.c: 124: {
  7932                           ;tmr1.c: 129: CountCallBack = 0;
  7933  002886  0E00               	movlw	0
  7934  002888  6E30               	movwf	_CountCallBack+1,c
  7935  00288A  0E00               	movlw	0
  7936  00288C  6E2F               	movwf	_CountCallBack,c
  7937  00288E  0012               	return	
  7938                           
  7939                           ;tmr1.c: 132: {
  7940  002890  0012               	return		;funcret
  7941  002892                     __end_of_TMR1_ISR:
  7942                           	opt stack 0
  7943                           tosu	equ	0xFFF
  7944                           tosh	equ	0xFFE
  7945                           tosl	equ	0xFFD
  7946                           pclatu	equ	0xFFB
  7947                           pclath	equ	0xFFA
  7948                           tblptru	equ	0xFF8
  7949                           tblptrh	equ	0xFF7
  7950                           tblptrl	equ	0xFF6
  7951                           tablat	equ	0xFF5
  7952                           prodh	equ	0xFF4
  7953                           prodl	equ	0xFF3
  7954                           intcon	equ	0xFF2
  7955                           intcon2	equ	0xFF1
  7956                           postinc0	equ	0xFEE
  7957                           fsr0h	equ	0xFEA
  7958                           fsr0l	equ	0xFE9
  7959                           wreg	equ	0xFE8
  7960                           postdec1	equ	0xFE5
  7961                           fsr1h	equ	0xFE2
  7962                           fsr1l	equ	0xFE1
  7963                           indf2	equ	0xFDF
  7964                           postinc2	equ	0xFDE
  7965                           postdec2	equ	0xFDD
  7966                           plusw2	equ	0xFDB
  7967                           fsr2h	equ	0xFDA
  7968                           fsr2l	equ	0xFD9
  7969                           status	equ	0xFD8
  7970                           
  7971 ;; *************** function _EUSART1_Transmit_ISR *****************
  7972 ;; Defined at:
  7973 ;;		line 157 in file "UART.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;		None
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;		None
  7978 ;; Return value:  Size  Location     Type
  7979 ;;		None               void
  7980 ;; Registers used:
  7981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7987 ;;      Params:         0       0       0       0       0       0       0
  7988 ;;      Locals:         0       0       0       0       0       0       0
  7989 ;;      Temps:          0       0       0       0       0       0       0
  7990 ;;      Totals:         0       0       0       0       0       0       0
  7991 ;;Total ram usage:        0 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    2
  7994 ;; This function calls:
  7995 ;;		i2_UART_buff_get
  7996 ;;		i2_UART_buff_size
  7997 ;; This function is called by:
  7998 ;;		_INTERRUPT_InterruptManager
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           	psect	text43
  8003  00271C                     __ptext43:
  8004                           	opt stack 0
  8005  00271C                     _EUSART1_Transmit_ISR:
  8006                           	opt stack 21
  8007                           
  8008                           ;UART.c: 159: if (UART_buff_size(&output_buffer) > 0) {
  8009                           
  8010                           ;incstack = 0
  8011  00271C  0E00               	movlw	low _output_buffer
  8012  00271E  6E01               	movwf	i2UART_buff_size@_this,c
  8013  002720  0E05               	movlw	high _output_buffer
  8014  002722  6E02               	movwf	i2UART_buff_size@_this+1,c
  8015  002724  ECFC  F014         	call	i2_UART_buff_size	;wreg free
  8016  002728  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  8017  00272A  D00D               	goto	i2l3572
  8018  00272C  5002               	movf	?i2_UART_buff_size+1,w,c
  8019  00272E  E103               	bnz	i2u303_40
  8020  002730  0401               	decf	?i2_UART_buff_size,w,c
  8021  002732  A0D8               	btfss	status,0,c
  8022  002734  D008               	goto	i2l3572
  8023  002736                     i2u303_40:
  8024                           
  8025                           ;UART.c: 160: TXREG1 = UART_buff_get(&output_buffer);
  8026  002736  0E00               	movlw	low _output_buffer
  8027  002738  6E07               	movwf	i2UART_buff_get@_this,c
  8028  00273A  0E05               	movlw	high _output_buffer
  8029  00273C  6E08               	movwf	i2UART_buff_get@_this+1,c
  8030  00273E  ECD5  F011         	call	i2_UART_buff_get	;wreg free
  8031  002742  6EAD               	movwf	4013,c	;volatile
  8032                           
  8033                           ;UART.c: 161: } else {
  8034  002744  0012               	return	
  8035  002746                     i2l3572:
  8036                           
  8037                           ;UART.c: 162: Transmit_stall = 1;
  8038  002746  0E01               	movlw	1
  8039  002748  6E45               	movwf	_Transmit_stall,c
  8040                           
  8041                           ;UART.c: 163: PIE1bits.TX1IE = 0;
  8042  00274A  989D               	bcf	3997,4,c	;volatile
  8043  00274C  0012               	return	
  8044  00274E  0012               	return		;funcret
  8045  002750                     __end_of_EUSART1_Transmit_ISR:
  8046                           	opt stack 0
  8047                           tosu	equ	0xFFF
  8048                           tosh	equ	0xFFE
  8049                           tosl	equ	0xFFD
  8050                           pclatu	equ	0xFFB
  8051                           pclath	equ	0xFFA
  8052                           tblptru	equ	0xFF8
  8053                           tblptrh	equ	0xFF7
  8054                           tblptrl	equ	0xFF6
  8055                           tablat	equ	0xFF5
  8056                           prodh	equ	0xFF4
  8057                           prodl	equ	0xFF3
  8058                           intcon	equ	0xFF2
  8059                           intcon2	equ	0xFF1
  8060                           postinc0	equ	0xFEE
  8061                           fsr0h	equ	0xFEA
  8062                           fsr0l	equ	0xFE9
  8063                           wreg	equ	0xFE8
  8064                           postdec1	equ	0xFE5
  8065                           fsr1h	equ	0xFE2
  8066                           fsr1l	equ	0xFE1
  8067                           indf2	equ	0xFDF
  8068                           postinc2	equ	0xFDE
  8069                           postdec2	equ	0xFDD
  8070                           plusw2	equ	0xFDB
  8071                           fsr2h	equ	0xFDA
  8072                           fsr2l	equ	0xFD9
  8073                           status	equ	0xFD8
  8074                           
  8075 ;; *************** function i2_UART_buff_size *****************
  8076 ;; Defined at:
  8077 ;;		line 102 in file "UART.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  8080 ;;		 -> output_buffer(206), input_buffer(206), 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;		None
  8083 ;; Return value:  Size  Location     Type
  8084 ;;                  2    0[COMRAM] int 
  8085 ;; Registers used:
  8086 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8092 ;;      Params:         2       0       0       0       0       0       0
  8093 ;;      Locals:         0       0       0       0       0       0       0
  8094 ;;      Temps:          0       0       0       0       0       0       0
  8095 ;;      Totals:         2       0       0       0       0       0       0
  8096 ;;Total ram usage:        2 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; This function calls:
  8099 ;;		Nothing
  8100 ;; This function is called by:
  8101 ;;		_EUSART1_Transmit_ISR
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           	psect	text44
  8106  0029F8                     __ptext44:
  8107                           	opt stack 0
  8108  0029F8                     i2_UART_buff_size:
  8109                           	opt stack 22
  8110                           
  8111                           ;UART.c: 103: return (_this->count);
  8112                           
  8113                           ;incstack = 0
  8114  0029F8  EE20 F0CC          	lfsr	2,204
  8115  0029FC  5001               	movf	i2UART_buff_size@_this,w,c
  8116  0029FE  26D9               	addwf	fsr2l,f,c
  8117  002A00  5002               	movf	i2UART_buff_size@_this+1,w,c
  8118  002A02  22DA               	addwfc	fsr2h,f,c
  8119  002A04  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  8120  002A08  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  8121  002A0C  0012               	return	
  8122  002A0E  0012               	return		;funcret
  8123  002A10                     __end_ofi2_UART_buff_size:
  8124                           	opt stack 0
  8125                           tosu	equ	0xFFF
  8126                           tosh	equ	0xFFE
  8127                           tosl	equ	0xFFD
  8128                           pclatu	equ	0xFFB
  8129                           pclath	equ	0xFFA
  8130                           tblptru	equ	0xFF8
  8131                           tblptrh	equ	0xFF7
  8132                           tblptrl	equ	0xFF6
  8133                           tablat	equ	0xFF5
  8134                           prodh	equ	0xFF4
  8135                           prodl	equ	0xFF3
  8136                           intcon	equ	0xFF2
  8137                           intcon2	equ	0xFF1
  8138                           postinc0	equ	0xFEE
  8139                           fsr0h	equ	0xFEA
  8140                           fsr0l	equ	0xFE9
  8141                           wreg	equ	0xFE8
  8142                           postdec1	equ	0xFE5
  8143                           fsr1h	equ	0xFE2
  8144                           fsr1l	equ	0xFE1
  8145                           indf2	equ	0xFDF
  8146                           postinc2	equ	0xFDE
  8147                           postdec2	equ	0xFDD
  8148                           plusw2	equ	0xFDB
  8149                           fsr2h	equ	0xFDA
  8150                           fsr2l	equ	0xFD9
  8151                           status	equ	0xFD8
  8152                           
  8153 ;; *************** function i2_UART_buff_get *****************
  8154 ;; Defined at:
  8155 ;;		line 81 in file "UART.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8158 ;;		 -> output_buffer(206), input_buffer(206), 
  8159 ;; Auto vars:     Size  Location     Type
  8160 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  1    wreg      unsigned char 
  8163 ;; Registers used:
  8164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8165 ;; Tracked objects:
  8166 ;;		On entry : 0/0
  8167 ;;		On exit  : 0/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8170 ;;      Params:         2       0       0       0       0       0       0
  8171 ;;      Locals:         1       0       0       0       0       0       0
  8172 ;;      Temps:          2       0       0       0       0       0       0
  8173 ;;      Totals:         5       0       0       0       0       0       0
  8174 ;;Total ram usage:        5 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:    1
  8177 ;; This function calls:
  8178 ;;		i2_UART_buff_modulo_inc
  8179 ;; This function is called by:
  8180 ;;		_EUSART1_Transmit_ISR
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text45
  8185  0023AA                     __ptext45:
  8186                           	opt stack 0
  8187  0023AA                     i2_UART_buff_get:
  8188                           	opt stack 21
  8189                           
  8190                           ;UART.c: 82: unsigned char c;
  8191                           ;UART.c: 83: if (_this->count > 0) {
  8192                           
  8193                           ;incstack = 0
  8194  0023AA  EE20 F0CC          	lfsr	2,204
  8195  0023AE  5007               	movf	i2UART_buff_get@_this,w,c
  8196  0023B0  26D9               	addwf	fsr2l,f,c
  8197  0023B2  5008               	movf	i2UART_buff_get@_this+1,w,c
  8198  0023B4  22DA               	addwfc	fsr2h,f,c
  8199  0023B6  0E01               	movlw	1
  8200  0023B8  BEDB               	btfsc	plusw2,7,c
  8201  0023BA  D03C               	goto	i2l3422
  8202  0023BC  0E01               	movlw	1
  8203  0023BE  50DB               	movf	plusw2,w,c
  8204  0023C0  E103               	bnz	i2u299_40
  8205  0023C2  04DE               	decf	postinc2,w,c
  8206  0023C4  A0D8               	btfss	status,0,c
  8207  0023C6  D036               	goto	i2l3422
  8208  0023C8                     i2u299_40:
  8209                           
  8210                           ;UART.c: 84: c = _this->buf[_this->tail];
  8211  0023C8  EE20 F0CA          	lfsr	2,202
  8212  0023CC  5007               	movf	i2UART_buff_get@_this,w,c
  8213  0023CE  26D9               	addwf	fsr2l,f,c
  8214  0023D0  5008               	movf	i2UART_buff_get@_this+1,w,c
  8215  0023D2  22DA               	addwfc	fsr2h,f,c
  8216  0023D4  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  8217  0023D8  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  8218  0023DC  5009               	movf	??i2_UART_buff_get,w,c
  8219  0023DE  2407               	addwf	i2UART_buff_get@_this,w,c
  8220  0023E0  6ED9               	movwf	fsr2l,c
  8221  0023E2  500A               	movf	??i2_UART_buff_get+1,w,c
  8222  0023E4  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  8223  0023E6  6EDA               	movwf	fsr2h,c
  8224  0023E8  50DF               	movf	indf2,w,c
  8225  0023EA  6E0B               	movwf	i2UART_buff_get@c,c
  8226                           
  8227                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8228  0023EC  EE20 F0CA          	lfsr	2,202
  8229  0023F0  5007               	movf	i2UART_buff_get@_this,w,c
  8230  0023F2  26D9               	addwf	fsr2l,f,c
  8231  0023F4  5008               	movf	i2UART_buff_get@_this+1,w,c
  8232  0023F6  22DA               	addwfc	fsr2h,f,c
  8233  0023F8  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8234  0023FC  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8235  002400  0E00               	movlw	0
  8236  002402  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8237  002404  0EC8               	movlw	200
  8238  002406  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8239  002408  EC1D  F014         	call	i2_UART_buff_modulo_inc	;wreg free
  8240  00240C  EE20 F0CA          	lfsr	2,202
  8241  002410  5007               	movf	i2UART_buff_get@_this,w,c
  8242  002412  26D9               	addwf	fsr2l,f,c
  8243  002414  5008               	movf	i2UART_buff_get@_this+1,w,c
  8244  002416  22DA               	addwfc	fsr2h,f,c
  8245  002418  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8246  00241C  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8247                           
  8248                           ;UART.c: 86: --_this->count;
  8249  002420  EE20 F0CC          	lfsr	2,204
  8250  002424  5007               	movf	i2UART_buff_get@_this,w,c
  8251  002426  26D9               	addwf	fsr2l,f,c
  8252  002428  5008               	movf	i2UART_buff_get@_this+1,w,c
  8253  00242A  22DA               	addwfc	fsr2h,f,c
  8254  00242C  06DE               	decf	postinc2,f,c
  8255  00242E  0E00               	movlw	0
  8256  002430  5ADD               	subwfb	postdec2,f,c
  8257                           
  8258                           ;UART.c: 87: } else {
  8259  002432  D002               	goto	i2l757
  8260  002434                     i2l3422:
  8261                           
  8262                           ;UART.c: 88: c = 0;
  8263  002434  0E00               	movlw	0
  8264  002436  6E0B               	movwf	i2UART_buff_get@c,c
  8265  002438                     i2l757:
  8266                           
  8267                           ;UART.c: 89: }
  8268                           ;UART.c: 90: return (c);
  8269  002438  500B               	movf	i2UART_buff_get@c,w,c
  8270  00243A  0012               	return	
  8271  00243C  0012               	return		;funcret
  8272  00243E                     __end_ofi2_UART_buff_get:
  8273                           	opt stack 0
  8274                           tosu	equ	0xFFF
  8275                           tosh	equ	0xFFE
  8276                           tosl	equ	0xFFD
  8277                           pclatu	equ	0xFFB
  8278                           pclath	equ	0xFFA
  8279                           tblptru	equ	0xFF8
  8280                           tblptrh	equ	0xFF7
  8281                           tblptrl	equ	0xFF6
  8282                           tablat	equ	0xFF5
  8283                           prodh	equ	0xFF4
  8284                           prodl	equ	0xFF3
  8285                           intcon	equ	0xFF2
  8286                           intcon2	equ	0xFF1
  8287                           postinc0	equ	0xFEE
  8288                           fsr0h	equ	0xFEA
  8289                           fsr0l	equ	0xFE9
  8290                           wreg	equ	0xFE8
  8291                           postdec1	equ	0xFE5
  8292                           fsr1h	equ	0xFE2
  8293                           fsr1l	equ	0xFE1
  8294                           indf2	equ	0xFDF
  8295                           postinc2	equ	0xFDE
  8296                           postdec2	equ	0xFDD
  8297                           plusw2	equ	0xFDB
  8298                           fsr2h	equ	0xFDA
  8299                           fsr2l	equ	0xFD9
  8300                           status	equ	0xFD8
  8301                           
  8302 ;; *************** function _EUSART1_Receive_ISR *****************
  8303 ;; Defined at:
  8304 ;;		line 139 in file "UART.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;		None
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  data            1   11[COMRAM] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;		None               void
  8311 ;; Registers used:
  8312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8318 ;;      Params:         0       0       0       0       0       0       0
  8319 ;;      Locals:         1       0       0       0       0       0       0
  8320 ;;      Temps:          0       0       0       0       0       0       0
  8321 ;;      Totals:         1       0       0       0       0       0       0
  8322 ;;Total ram usage:        1 bytes
  8323 ;; Hardware stack levels used:    1
  8324 ;; Hardware stack levels required when called:    2
  8325 ;; This function calls:
  8326 ;;		i2_UART_buff_put
  8327 ;; This function is called by:
  8328 ;;		_INTERRUPT_InterruptManager
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           	psect	text46
  8333  00295C                     __ptext46:
  8334                           	opt stack 0
  8335  00295C                     _EUSART1_Receive_ISR:
  8336                           	opt stack 21
  8337                           
  8338                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  8339                           
  8340                           ;incstack = 0
  8341  00295C  A2AB               	btfss	4011,1,c	;volatile
  8342  00295E  D002               	goto	i2l788
  8343                           
  8344                           ;UART.c: 143: RC1STAbits.CREN = 0;
  8345  002960  98AB               	bcf	4011,4,c	;volatile
  8346                           
  8347                           ;UART.c: 144: RC1STAbits.CREN = 1;
  8348  002962  88AB               	bsf	4011,4,c	;volatile
  8349  002964                     i2l788:
  8350                           
  8351                           ;UART.c: 145: }
  8352                           ;UART.c: 153: unsigned char data = RCREG1;
  8353  002964  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  8354                           
  8355                           ;UART.c: 154: UART_buff_put(&input_buffer, data);
  8356  002968  0E00               	movlw	low _input_buffer
  8357  00296A  6E07               	movwf	i2UART_buff_put@_this,c
  8358  00296C  0E04               	movlw	high _input_buffer
  8359  00296E  6E08               	movwf	i2UART_buff_put@_this+1,c
  8360  002970  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  8361  002974  ECA9  F00E         	call	i2_UART_buff_put	;wreg free
  8362  002978  0012               	return		;funcret
  8363  00297A                     __end_of_EUSART1_Receive_ISR:
  8364                           	opt stack 0
  8365                           tosu	equ	0xFFF
  8366                           tosh	equ	0xFFE
  8367                           tosl	equ	0xFFD
  8368                           pclatu	equ	0xFFB
  8369                           pclath	equ	0xFFA
  8370                           tblptru	equ	0xFF8
  8371                           tblptrh	equ	0xFF7
  8372                           tblptrl	equ	0xFF6
  8373                           tablat	equ	0xFF5
  8374                           prodh	equ	0xFF4
  8375                           prodl	equ	0xFF3
  8376                           intcon	equ	0xFF2
  8377                           intcon2	equ	0xFF1
  8378                           postinc0	equ	0xFEE
  8379                           fsr0h	equ	0xFEA
  8380                           fsr0l	equ	0xFE9
  8381                           wreg	equ	0xFE8
  8382                           postdec1	equ	0xFE5
  8383                           fsr1h	equ	0xFE2
  8384                           fsr1l	equ	0xFE1
  8385                           indf2	equ	0xFDF
  8386                           postinc2	equ	0xFDE
  8387                           postdec2	equ	0xFDD
  8388                           plusw2	equ	0xFDB
  8389                           fsr2h	equ	0xFDA
  8390                           fsr2l	equ	0xFD9
  8391                           status	equ	0xFD8
  8392                           
  8393 ;; *************** function i2_UART_buff_put *****************
  8394 ;; Defined at:
  8395 ;;		line 68 in file "UART.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8398 ;;		 -> output_buffer(206), input_buffer(206), 
  8399 ;;  c               1    8[COMRAM] const unsigned char 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;		None
  8402 ;; Return value:  Size  Location     Type
  8403 ;;		None               void
  8404 ;; Registers used:
  8405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8411 ;;      Params:         3       0       0       0       0       0       0
  8412 ;;      Locals:         0       0       0       0       0       0       0
  8413 ;;      Temps:          2       0       0       0       0       0       0
  8414 ;;      Totals:         5       0       0       0       0       0       0
  8415 ;;Total ram usage:        5 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    1
  8418 ;; This function calls:
  8419 ;;		i2_UART_buff_modulo_inc
  8420 ;; This function is called by:
  8421 ;;		_EUSART1_Receive_ISR
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           	psect	text47
  8426  001D52                     __ptext47:
  8427                           	opt stack 0
  8428  001D52                     i2_UART_buff_put:
  8429                           	opt stack 21
  8430                           
  8431                           ;UART.c: 69: if (_this->count < 200) {
  8432                           
  8433                           ;incstack = 0
  8434  001D52  EE20 F0CC          	lfsr	2,204
  8435  001D56  5007               	movf	i2UART_buff_put@_this,w,c
  8436  001D58  26D9               	addwf	fsr2l,f,c
  8437  001D5A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8438  001D5C  22DA               	addwfc	fsr2h,f,c
  8439  001D5E  0E01               	movlw	1
  8440  001D60  BEDB               	btfsc	plusw2,7,c
  8441  001D62  D007               	goto	i2l3402
  8442  001D64  0E01               	movlw	1
  8443  001D66  50DB               	movf	plusw2,w,c
  8444  001D68  E13A               	bnz	i2l3408
  8445  001D6A  0EC8               	movlw	200
  8446  001D6C  5CDE               	subwf	postinc2,w,c
  8447  001D6E  B0D8               	btfsc	status,0,c
  8448  001D70  D036               	goto	i2l3408
  8449  001D72                     i2l3402:
  8450                           
  8451                           ;UART.c: 70: _this->buf[_this->head] = c;
  8452  001D72  EE20 F0C8          	lfsr	2,200
  8453  001D76  5007               	movf	i2UART_buff_put@_this,w,c
  8454  001D78  26D9               	addwf	fsr2l,f,c
  8455  001D7A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8456  001D7C  22DA               	addwfc	fsr2h,f,c
  8457  001D7E  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8458  001D82  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8459  001D86  500A               	movf	??i2_UART_buff_put,w,c
  8460  001D88  2407               	addwf	i2UART_buff_put@_this,w,c
  8461  001D8A  6ED9               	movwf	fsr2l,c
  8462  001D8C  500B               	movf	??i2_UART_buff_put+1,w,c
  8463  001D8E  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8464  001D90  6EDA               	movwf	fsr2h,c
  8465  001D92  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8466                           
  8467                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8468  001D96  EE20 F0C8          	lfsr	2,200
  8469  001D9A  5007               	movf	i2UART_buff_put@_this,w,c
  8470  001D9C  26D9               	addwf	fsr2l,f,c
  8471  001D9E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8472  001DA0  22DA               	addwfc	fsr2h,f,c
  8473  001DA2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8474  001DA6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8475  001DAA  0E00               	movlw	0
  8476  001DAC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8477  001DAE  0EC8               	movlw	200
  8478  001DB0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8479  001DB2  EC1D  F014         	call	i2_UART_buff_modulo_inc	;wreg free
  8480  001DB6  EE20 F0C8          	lfsr	2,200
  8481  001DBA  5007               	movf	i2UART_buff_put@_this,w,c
  8482  001DBC  26D9               	addwf	fsr2l,f,c
  8483  001DBE  5008               	movf	i2UART_buff_put@_this+1,w,c
  8484  001DC0  22DA               	addwfc	fsr2h,f,c
  8485  001DC2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8486  001DC6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8487                           
  8488                           ;UART.c: 72: ++_this->count;
  8489  001DCA  EE20 F0CC          	lfsr	2,204
  8490  001DCE  5007               	movf	i2UART_buff_put@_this,w,c
  8491  001DD0  26D9               	addwf	fsr2l,f,c
  8492  001DD2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8493  001DD4  22DA               	addwfc	fsr2h,f,c
  8494  001DD6  2ADE               	incf	postinc2,f,c
  8495  001DD8  0E00               	movlw	0
  8496  001DDA  22DD               	addwfc	postdec2,f,c
  8497                           
  8498                           ;UART.c: 73: } else {
  8499  001DDC  0012               	return	
  8500  001DDE                     i2l3408:
  8501                           
  8502                           ;UART.c: 74: _this->buf[_this->head] = c;
  8503  001DDE  EE20 F0C8          	lfsr	2,200
  8504  001DE2  5007               	movf	i2UART_buff_put@_this,w,c
  8505  001DE4  26D9               	addwf	fsr2l,f,c
  8506  001DE6  5008               	movf	i2UART_buff_put@_this+1,w,c
  8507  001DE8  22DA               	addwfc	fsr2h,f,c
  8508  001DEA  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8509  001DEE  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8510  001DF2  500A               	movf	??i2_UART_buff_put,w,c
  8511  001DF4  2407               	addwf	i2UART_buff_put@_this,w,c
  8512  001DF6  6ED9               	movwf	fsr2l,c
  8513  001DF8  500B               	movf	??i2_UART_buff_put+1,w,c
  8514  001DFA  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8515  001DFC  6EDA               	movwf	fsr2h,c
  8516  001DFE  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8517                           
  8518                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8519  001E02  EE20 F0C8          	lfsr	2,200
  8520  001E06  5007               	movf	i2UART_buff_put@_this,w,c
  8521  001E08  26D9               	addwf	fsr2l,f,c
  8522  001E0A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8523  001E0C  22DA               	addwfc	fsr2h,f,c
  8524  001E0E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8525  001E12  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8526  001E16  0E00               	movlw	0
  8527  001E18  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8528  001E1A  0EC8               	movlw	200
  8529  001E1C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8530  001E1E  EC1D  F014         	call	i2_UART_buff_modulo_inc	;wreg free
  8531  001E22  EE20 F0C8          	lfsr	2,200
  8532  001E26  5007               	movf	i2UART_buff_put@_this,w,c
  8533  001E28  26D9               	addwf	fsr2l,f,c
  8534  001E2A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8535  001E2C  22DA               	addwfc	fsr2h,f,c
  8536  001E2E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8537  001E32  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8538                           
  8539                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8540  001E36  EE20 F0CA          	lfsr	2,202
  8541  001E3A  5007               	movf	i2UART_buff_put@_this,w,c
  8542  001E3C  26D9               	addwf	fsr2l,f,c
  8543  001E3E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8544  001E40  22DA               	addwfc	fsr2h,f,c
  8545  001E42  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8546  001E46  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8547  001E4A  0E00               	movlw	0
  8548  001E4C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8549  001E4E  0EC8               	movlw	200
  8550  001E50  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8551  001E52  EC1D  F014         	call	i2_UART_buff_modulo_inc	;wreg free
  8552  001E56  EE20 F0CA          	lfsr	2,202
  8553  001E5A  5007               	movf	i2UART_buff_put@_this,w,c
  8554  001E5C  26D9               	addwf	fsr2l,f,c
  8555  001E5E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8556  001E60  22DA               	addwfc	fsr2h,f,c
  8557  001E62  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8558  001E66  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8559  001E6A  0012               	return	
  8560  001E6C  0012               	return		;funcret
  8561  001E6E                     __end_ofi2_UART_buff_put:
  8562                           	opt stack 0
  8563                           tosu	equ	0xFFF
  8564                           tosh	equ	0xFFE
  8565                           tosl	equ	0xFFD
  8566                           pclatu	equ	0xFFB
  8567                           pclath	equ	0xFFA
  8568                           tblptru	equ	0xFF8
  8569                           tblptrh	equ	0xFF7
  8570                           tblptrl	equ	0xFF6
  8571                           tablat	equ	0xFF5
  8572                           prodh	equ	0xFF4
  8573                           prodl	equ	0xFF3
  8574                           intcon	equ	0xFF2
  8575                           intcon2	equ	0xFF1
  8576                           postinc0	equ	0xFEE
  8577                           fsr0h	equ	0xFEA
  8578                           fsr0l	equ	0xFE9
  8579                           wreg	equ	0xFE8
  8580                           postdec1	equ	0xFE5
  8581                           fsr1h	equ	0xFE2
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           postdec2	equ	0xFDD
  8586                           plusw2	equ	0xFDB
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function i2_UART_buff_modulo_inc *****************
  8592 ;; Defined at:
  8593 ;;		line 106 in file "UART.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  value           2    0[COMRAM] const unsigned int 
  8596 ;;  modulus         2    2[COMRAM] const unsigned int 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  2    0[COMRAM] unsigned int 
  8601 ;; Registers used:
  8602 ;;		wreg, status,2, status,0
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8608 ;;      Params:         4       0       0       0       0       0       0
  8609 ;;      Locals:         2       0       0       0       0       0       0
  8610 ;;      Temps:          0       0       0       0       0       0       0
  8611 ;;      Totals:         6       0       0       0       0       0       0
  8612 ;;Total ram usage:        6 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; This function calls:
  8615 ;;		Nothing
  8616 ;; This function is called by:
  8617 ;;		i2_UART_buff_put
  8618 ;;		i2_UART_buff_get
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           	psect	text48
  8623  00283A                     __ptext48:
  8624                           	opt stack 0
  8625  00283A                     i2_UART_buff_modulo_inc:
  8626                           	opt stack 21
  8627                           
  8628                           ;UART.c: 107: unsigned int my_value = value + 1;
  8629                           
  8630                           ;incstack = 0
  8631  00283A  0E01               	movlw	1
  8632  00283C  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  8633  00283E  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8634  002840  0E00               	movlw	0
  8635  002842  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  8636  002844  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8637                           
  8638                           ;UART.c: 108: if (my_value >= modulus) {
  8639  002846  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  8640  002848  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  8641  00284A  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  8642  00284C  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  8643  00284E  A0D8               	btfss	status,0,c
  8644  002850  D005               	goto	i2l3064
  8645                           
  8646                           ;UART.c: 109: my_value = 0;
  8647  002852  0E00               	movlw	0
  8648  002854  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8649  002856  0E00               	movlw	0
  8650  002858  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8651  00285A  D000               	goto	i2l3064
  8652  00285C                     i2l3064:
  8653                           
  8654                           ;UART.c: 110: }
  8655                           ;UART.c: 111: return (my_value);
  8656  00285C  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  8657  002860  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  8658  002864  0012               	return	
  8659  002866  0012               	return		;funcret
  8660  002868                     __end_ofi2_UART_buff_modulo_inc:
  8661                           	opt stack 0
  8662                           tosu	equ	0xFFF
  8663                           tosh	equ	0xFFE
  8664                           tosl	equ	0xFFD
  8665                           pclatu	equ	0xFFB
  8666                           pclath	equ	0xFFA
  8667                           tblptru	equ	0xFF8
  8668                           tblptrh	equ	0xFF7
  8669                           tblptrl	equ	0xFF6
  8670                           tablat	equ	0xFF5
  8671                           prodh	equ	0xFF4
  8672                           prodl	equ	0xFF3
  8673                           intcon	equ	0xFF2
  8674                           intcon2	equ	0xFF1
  8675                           postinc0	equ	0xFEE
  8676                           fsr0h	equ	0xFEA
  8677                           fsr0l	equ	0xFE9
  8678                           wreg	equ	0xFE8
  8679                           postdec1	equ	0xFE5
  8680                           fsr1h	equ	0xFE2
  8681                           fsr1l	equ	0xFE1
  8682                           indf2	equ	0xFDF
  8683                           postinc2	equ	0xFDE
  8684                           postdec2	equ	0xFDD
  8685                           plusw2	equ	0xFDB
  8686                           fsr2h	equ	0xFDA
  8687                           fsr2l	equ	0xFD9
  8688                           status	equ	0xFD8
  8689                           
  8690 ;; *************** function _ADC_ISR *****************
  8691 ;; Defined at:
  8692 ;;		line 82 in file "mcc_generated_files/adc.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;		None
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;  ADC_Result      2   10[COMRAM] int 
  8697 ;; Return value:  Size  Location     Type
  8698 ;;		None               void
  8699 ;; Registers used:
  8700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8706 ;;      Params:         0       0       0       0       0       0       0
  8707 ;;      Locals:         2       0       0       0       0       0       0
  8708 ;;      Temps:          6       0       0       0       0       0       0
  8709 ;;      Totals:         8       0       0       0       0       0       0
  8710 ;;Total ram usage:        8 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    1
  8713 ;; This function calls:
  8714 ;;		_ADC_GetConversionResult
  8715 ;;		_ADC_StartConversion
  8716 ;;		_Set_4051
  8717 ;; This function is called by:
  8718 ;;		_INTERRUPT_InterruptManager
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text49
  8723  000C56                     __ptext49:
  8724                           	opt stack 0
  8725  000C56                     _ADC_ISR:
  8726                           	opt stack 22
  8727                           
  8728                           ;adc.c: 85: PIR1bits.ADIF = 0;
  8729                           
  8730                           ;incstack = 0
  8731  000C56  9C9E               	bcf	3998,6,c	;volatile
  8732                           
  8733                           ;adc.c: 86: int ADC_Result = 0;
  8734  000C58  0E00               	movlw	0
  8735  000C5A  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
  8736  000C5C  0E00               	movlw	0
  8737  000C5E  6E0B               	movwf	ADC_ISR@ADC_Result,c
  8738                           
  8739                           ;adc.c: 87: if (Temp_Aquire){
  8740  000C60  503A               	movf	_Temp_Aquire,w,c
  8741  000C62  B4D8               	btfsc	status,2,c
  8742  000C64  D116               	goto	i2l3502
  8743                           
  8744                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  8745  000C66  EC08  F015         	call	_ADC_GetConversionResult	;wreg free
  8746  000C6A  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  8747  000C6E  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  8748                           
  8749                           ;adc.c: 90: switch ( ADC_Buffer_Point )
  8750  000C72  D0E4               	goto	i2l3498
  8751  000C74                     i2l3436:
  8752                           
  8753                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8754  000C74  90D8               	bcf	status,0,c
  8755  000C76  342D               	rlcf	_ADC_Buffer_Point,w,c
  8756  000C78  6ED9               	movwf	fsr2l,c
  8757  000C7A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8758  000C7C  6EDA               	movwf	fsr2h,c
  8759  000C7E  0E9C               	movlw	low _Temp_Adc
  8760  000C80  26D9               	addwf	fsr2l,f,c
  8761  000C82  0E00               	movlw	high _Temp_Adc
  8762  000C84  22DA               	addwfc	fsr2h,f,c
  8763  000C86  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8764  000C8A  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8765                           
  8766                           ;adc.c: 94: Set_4051(1);
  8767  000C8E  0E00               	movlw	0
  8768  000C90  6E02               	movwf	Set_4051@Channel+1,c
  8769  000C92  0E01               	movlw	1
  8770  000C94  6E01               	movwf	Set_4051@Channel,c
  8771  000C96  EC72  F013         	call	_Set_4051	;wreg free
  8772                           
  8773                           ;adc.c: 95: ADC_StartConversion(Temp1);
  8774  000C9A  0E0E               	movlw	14
  8775  000C9C  ECCB  F014         	call	_ADC_StartConversion
  8776                           
  8777                           ;adc.c: 96: break;
  8778  000CA0  D0F5               	goto	i2l3500
  8779  000CA2                     i2l3442:
  8780                           
  8781                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8782  000CA2  90D8               	bcf	status,0,c
  8783  000CA4  342D               	rlcf	_ADC_Buffer_Point,w,c
  8784  000CA6  6ED9               	movwf	fsr2l,c
  8785  000CA8  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8786  000CAA  6EDA               	movwf	fsr2h,c
  8787  000CAC  0E9C               	movlw	low _Temp_Adc
  8788  000CAE  26D9               	addwf	fsr2l,f,c
  8789  000CB0  0E00               	movlw	high _Temp_Adc
  8790  000CB2  22DA               	addwfc	fsr2h,f,c
  8791  000CB4  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8792  000CB8  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8793                           
  8794                           ;adc.c: 99: Set_4051(2);
  8795  000CBC  0E00               	movlw	0
  8796  000CBE  6E02               	movwf	Set_4051@Channel+1,c
  8797  000CC0  0E02               	movlw	2
  8798  000CC2  6E01               	movwf	Set_4051@Channel,c
  8799  000CC4  EC72  F013         	call	_Set_4051	;wreg free
  8800                           
  8801                           ;adc.c: 100: ADC_StartConversion(Temp1);
  8802  000CC8  0E0E               	movlw	14
  8803  000CCA  ECCB  F014         	call	_ADC_StartConversion
  8804                           
  8805                           ;adc.c: 101: break;
  8806  000CCE  D0DE               	goto	i2l3500
  8807  000CD0                     i2l3448:
  8808                           
  8809                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8810  000CD0  90D8               	bcf	status,0,c
  8811  000CD2  342D               	rlcf	_ADC_Buffer_Point,w,c
  8812  000CD4  6ED9               	movwf	fsr2l,c
  8813  000CD6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8814  000CD8  6EDA               	movwf	fsr2h,c
  8815  000CDA  0E9C               	movlw	low _Temp_Adc
  8816  000CDC  26D9               	addwf	fsr2l,f,c
  8817  000CDE  0E00               	movlw	high _Temp_Adc
  8818  000CE0  22DA               	addwfc	fsr2h,f,c
  8819  000CE2  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8820  000CE6  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8821                           
  8822                           ;adc.c: 104: Set_4051(3);
  8823  000CEA  0E00               	movlw	0
  8824  000CEC  6E02               	movwf	Set_4051@Channel+1,c
  8825  000CEE  0E03               	movlw	3
  8826  000CF0  6E01               	movwf	Set_4051@Channel,c
  8827  000CF2  EC72  F013         	call	_Set_4051	;wreg free
  8828                           
  8829                           ;adc.c: 105: ADC_StartConversion(Temp1);
  8830  000CF6  0E0E               	movlw	14
  8831  000CF8  ECCB  F014         	call	_ADC_StartConversion
  8832                           
  8833                           ;adc.c: 106: break;
  8834  000CFC  D0C7               	goto	i2l3500
  8835  000CFE                     i2l3454:
  8836                           
  8837                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8838  000CFE  90D8               	bcf	status,0,c
  8839  000D00  342D               	rlcf	_ADC_Buffer_Point,w,c
  8840  000D02  6ED9               	movwf	fsr2l,c
  8841  000D04  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8842  000D06  6EDA               	movwf	fsr2h,c
  8843  000D08  0E9C               	movlw	low _Temp_Adc
  8844  000D0A  26D9               	addwf	fsr2l,f,c
  8845  000D0C  0E00               	movlw	high _Temp_Adc
  8846  000D0E  22DA               	addwfc	fsr2h,f,c
  8847  000D10  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8848  000D14  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8849                           
  8850                           ;adc.c: 109: Set_4051(4);
  8851  000D18  0E00               	movlw	0
  8852  000D1A  6E02               	movwf	Set_4051@Channel+1,c
  8853  000D1C  0E04               	movlw	4
  8854  000D1E  6E01               	movwf	Set_4051@Channel,c
  8855  000D20  EC72  F013         	call	_Set_4051	;wreg free
  8856                           
  8857                           ;adc.c: 110: ADC_StartConversion(Temp1);
  8858  000D24  0E0E               	movlw	14
  8859  000D26  ECCB  F014         	call	_ADC_StartConversion
  8860                           
  8861                           ;adc.c: 111: break;
  8862  000D2A  D0B0               	goto	i2l3500
  8863  000D2C                     i2l3460:
  8864                           
  8865                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8866  000D2C  90D8               	bcf	status,0,c
  8867  000D2E  342D               	rlcf	_ADC_Buffer_Point,w,c
  8868  000D30  6ED9               	movwf	fsr2l,c
  8869  000D32  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8870  000D34  6EDA               	movwf	fsr2h,c
  8871  000D36  0E9C               	movlw	low _Temp_Adc
  8872  000D38  26D9               	addwf	fsr2l,f,c
  8873  000D3A  0E00               	movlw	high _Temp_Adc
  8874  000D3C  22DA               	addwfc	fsr2h,f,c
  8875  000D3E  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8876  000D42  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8877                           
  8878                           ;adc.c: 114: Set_4051(5);
  8879  000D46  0E00               	movlw	0
  8880  000D48  6E02               	movwf	Set_4051@Channel+1,c
  8881  000D4A  0E05               	movlw	5
  8882  000D4C  6E01               	movwf	Set_4051@Channel,c
  8883  000D4E  EC72  F013         	call	_Set_4051	;wreg free
  8884                           
  8885                           ;adc.c: 115: ADC_StartConversion(Temp1);
  8886  000D52  0E0E               	movlw	14
  8887  000D54  ECCB  F014         	call	_ADC_StartConversion
  8888                           
  8889                           ;adc.c: 116: break;
  8890  000D58  D099               	goto	i2l3500
  8891  000D5A                     i2l3466:
  8892                           
  8893                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8894  000D5A  90D8               	bcf	status,0,c
  8895  000D5C  342D               	rlcf	_ADC_Buffer_Point,w,c
  8896  000D5E  6ED9               	movwf	fsr2l,c
  8897  000D60  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8898  000D62  6EDA               	movwf	fsr2h,c
  8899  000D64  0E9C               	movlw	low _Temp_Adc
  8900  000D66  26D9               	addwf	fsr2l,f,c
  8901  000D68  0E00               	movlw	high _Temp_Adc
  8902  000D6A  22DA               	addwfc	fsr2h,f,c
  8903  000D6C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8904  000D70  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8905                           
  8906                           ;adc.c: 119: Set_4051(6);
  8907  000D74  0E00               	movlw	0
  8908  000D76  6E02               	movwf	Set_4051@Channel+1,c
  8909  000D78  0E06               	movlw	6
  8910  000D7A  6E01               	movwf	Set_4051@Channel,c
  8911  000D7C  EC72  F013         	call	_Set_4051	;wreg free
  8912                           
  8913                           ;adc.c: 120: ADC_StartConversion(Temp1);
  8914  000D80  0E0E               	movlw	14
  8915  000D82  ECCB  F014         	call	_ADC_StartConversion
  8916                           
  8917                           ;adc.c: 121: break;
  8918  000D86  D082               	goto	i2l3500
  8919  000D88                     i2l3472:
  8920                           
  8921                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8922  000D88  90D8               	bcf	status,0,c
  8923  000D8A  342D               	rlcf	_ADC_Buffer_Point,w,c
  8924  000D8C  6ED9               	movwf	fsr2l,c
  8925  000D8E  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8926  000D90  6EDA               	movwf	fsr2h,c
  8927  000D92  0E9C               	movlw	low _Temp_Adc
  8928  000D94  26D9               	addwf	fsr2l,f,c
  8929  000D96  0E00               	movlw	high _Temp_Adc
  8930  000D98  22DA               	addwfc	fsr2h,f,c
  8931  000D9A  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8932  000D9E  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8933                           
  8934                           ;adc.c: 124: Set_4051(7);
  8935  000DA2  0E00               	movlw	0
  8936  000DA4  6E02               	movwf	Set_4051@Channel+1,c
  8937  000DA6  0E07               	movlw	7
  8938  000DA8  6E01               	movwf	Set_4051@Channel,c
  8939  000DAA  EC72  F013         	call	_Set_4051	;wreg free
  8940                           
  8941                           ;adc.c: 125: ADC_StartConversion(Temp1);
  8942  000DAE  0E0E               	movlw	14
  8943  000DB0  ECCB  F014         	call	_ADC_StartConversion
  8944                           
  8945                           ;adc.c: 126: break;
  8946  000DB4  D06B               	goto	i2l3500
  8947  000DB6                     i2l3478:
  8948                           
  8949                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8950  000DB6  90D8               	bcf	status,0,c
  8951  000DB8  342D               	rlcf	_ADC_Buffer_Point,w,c
  8952  000DBA  6ED9               	movwf	fsr2l,c
  8953  000DBC  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8954  000DBE  6EDA               	movwf	fsr2h,c
  8955  000DC0  0E9C               	movlw	low _Temp_Adc
  8956  000DC2  26D9               	addwf	fsr2l,f,c
  8957  000DC4  0E00               	movlw	high _Temp_Adc
  8958  000DC6  22DA               	addwfc	fsr2h,f,c
  8959  000DC8  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8960  000DCC  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8961                           
  8962                           ;adc.c: 129: Set_4051(0);
  8963  000DD0  0E00               	movlw	0
  8964  000DD2  6E02               	movwf	Set_4051@Channel+1,c
  8965  000DD4  0E00               	movlw	0
  8966  000DD6  6E01               	movwf	Set_4051@Channel,c
  8967  000DD8  EC72  F013         	call	_Set_4051	;wreg free
  8968                           
  8969                           ;adc.c: 130: ADC_StartConversion(Temp1);
  8970  000DDC  0E0E               	movlw	14
  8971  000DDE  ECCB  F014         	call	_ADC_StartConversion
  8972                           
  8973                           ;adc.c: 131: break;
  8974  000DE2  D054               	goto	i2l3500
  8975  000DE4                     i2l3484:
  8976                           
  8977                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8978  000DE4  90D8               	bcf	status,0,c
  8979  000DE6  342D               	rlcf	_ADC_Buffer_Point,w,c
  8980  000DE8  6ED9               	movwf	fsr2l,c
  8981  000DEA  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8982  000DEC  6EDA               	movwf	fsr2h,c
  8983  000DEE  0E9C               	movlw	low _Temp_Adc
  8984  000DF0  26D9               	addwf	fsr2l,f,c
  8985  000DF2  0E00               	movlw	high _Temp_Adc
  8986  000DF4  22DA               	addwfc	fsr2h,f,c
  8987  000DF6  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8988  000DFA  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8989                           
  8990                           ;adc.c: 134: Set_4051(1);
  8991  000DFE  0E00               	movlw	0
  8992  000E00  6E02               	movwf	Set_4051@Channel+1,c
  8993  000E02  0E01               	movlw	1
  8994  000E04  6E01               	movwf	Set_4051@Channel,c
  8995  000E06  EC72  F013         	call	_Set_4051	;wreg free
  8996                           
  8997                           ;adc.c: 135: ADC_StartConversion(Temp2);
  8998  000E0A  0E14               	movlw	20
  8999  000E0C  ECCB  F014         	call	_ADC_StartConversion
  9000                           
  9001                           ;adc.c: 136: break;
  9002  000E10  D03D               	goto	i2l3500
  9003  000E12                     i2l3490:
  9004                           
  9005                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  9006  000E12  90D8               	bcf	status,0,c
  9007  000E14  342D               	rlcf	_ADC_Buffer_Point,w,c
  9008  000E16  6ED9               	movwf	fsr2l,c
  9009  000E18  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9010  000E1A  6EDA               	movwf	fsr2h,c
  9011  000E1C  0E9C               	movlw	low _Temp_Adc
  9012  000E1E  26D9               	addwf	fsr2l,f,c
  9013  000E20  0E00               	movlw	high _Temp_Adc
  9014  000E22  22DA               	addwfc	fsr2h,f,c
  9015  000E24  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  9016  000E28  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  9017                           
  9018                           ;adc.c: 139: Temp_Aquire = 0;
  9019  000E2C  0E00               	movlw	0
  9020  000E2E  6E3A               	movwf	_Temp_Aquire,c
  9021                           
  9022                           ;adc.c: 140: Temp_Done = 1;
  9023  000E30  0E00               	movlw	0
  9024  000E32  0100               	movlb	0	; () banked
  9025  000E34  6F89               	movwf	(_Temp_Done+1)& (0+255),b
  9026  000E36  0E01               	movlw	1
  9027  000E38  6F88               	movwf	_Temp_Done& (0+255),b
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;adc.c: 142: }
  9031                           
  9032                           ;adc.c: 141: break;
  9033  000E3A  D028               	goto	i2l3500
  9034  000E3C                     i2l3498:
  9035  000E3C  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  9036  000E40  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  9037                           
  9038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9039                           ; Switch size 1, requested type "space"
  9040                           ; Number of cases is 1, Range of values is 0 to 0
  9041                           ; switch strategies available:
  9042                           ; Name         Instructions Cycles
  9043                           ; simple_byte            4     3 (average)
  9044                           ;	Chosen strategy is simple_byte
  9045  000E44  5006               	movf	??_ADC_ISR+1,w,c
  9046  000E46  0A00               	xorlw	0	; case 0
  9047  000E48  A4D8               	btfss	status,2,c
  9048  000E4A  D020               	goto	i2l3500
  9049                           
  9050                           ; Switch size 1, requested type "space"
  9051                           ; Number of cases is 10, Range of values is 0 to 9
  9052                           ; switch strategies available:
  9053                           ; Name         Instructions Cycles
  9054                           ; simple_byte           31    16 (average)
  9055                           ;	Chosen strategy is simple_byte
  9056  000E4C  5005               	movf	??_ADC_ISR,w,c
  9057  000E4E  0A00               	xorlw	0	; case 0
  9058  000E50  B4D8               	btfsc	status,2,c
  9059  000E52  D710               	goto	i2l3436
  9060  000E54  0A01               	xorlw	1	; case 1
  9061  000E56  B4D8               	btfsc	status,2,c
  9062  000E58  D724               	goto	i2l3442
  9063  000E5A  0A03               	xorlw	3	; case 2
  9064  000E5C  B4D8               	btfsc	status,2,c
  9065  000E5E  D738               	goto	i2l3448
  9066  000E60  0A01               	xorlw	1	; case 3
  9067  000E62  B4D8               	btfsc	status,2,c
  9068  000E64  D74C               	goto	i2l3454
  9069  000E66  0A07               	xorlw	7	; case 4
  9070  000E68  B4D8               	btfsc	status,2,c
  9071  000E6A  D760               	goto	i2l3460
  9072  000E6C  0A01               	xorlw	1	; case 5
  9073  000E6E  B4D8               	btfsc	status,2,c
  9074  000E70  D774               	goto	i2l3466
  9075  000E72  0A03               	xorlw	3	; case 6
  9076  000E74  B4D8               	btfsc	status,2,c
  9077  000E76  D788               	goto	i2l3472
  9078  000E78  0A01               	xorlw	1	; case 7
  9079  000E7A  B4D8               	btfsc	status,2,c
  9080  000E7C  D79C               	goto	i2l3478
  9081  000E7E  0A0F               	xorlw	15	; case 8
  9082  000E80  B4D8               	btfsc	status,2,c
  9083  000E82  D7B0               	goto	i2l3484
  9084  000E84  0A01               	xorlw	1	; case 9
  9085  000E86  B4D8               	btfsc	status,2,c
  9086  000E88  D7C4               	goto	i2l3490
  9087  000E8A  D000               	goto	i2l3500
  9088  000E8C                     i2l3500:
  9089                           
  9090                           ;adc.c: 143: ADC_Buffer_Point++;
  9091  000E8C  4A2D               	infsnz	_ADC_Buffer_Point,f,c
  9092  000E8E  2A2E               	incf	_ADC_Buffer_Point+1,f,c
  9093  000E90  D000               	goto	i2l3502
  9094  000E92                     i2l3502:
  9095                           
  9096                           ;adc.c: 144: }
  9097                           ;adc.c: 145: if (Volt_Aquire){
  9098  000E92  503B               	movf	_Volt_Aquire,w,c
  9099  000E94  B4D8               	btfsc	status,2,c
  9100  000E96  0012               	return	
  9101                           
  9102                           ;adc.c: 147: ADC_Result = ADC_GetConversionResult();
  9103  000E98  EC08  F015         	call	_ADC_GetConversionResult	;wreg free
  9104  000E9C  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  9105  000EA0  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  9106                           
  9107                           ;adc.c: 148: switch ( ADC_Buffer_Point )
  9108  000EA4  D176               	goto	i2l3550
  9109  000EA6                     i2l3506:
  9110                           
  9111                           ;adc.c: 151: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9112  000EA6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9113  000EAA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9114  000EAE  0E00               	movlw	0
  9115  000EB0  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9116  000EB2  0EFF               	movlw	255
  9117  000EB4  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9118  000EB6  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9119  000EB8  0E60               	movlw	low _Battery_Adc
  9120  000EBA  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9121  000EBC  0E00               	movlw	high _Battery_Adc
  9122  000EBE  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9123  000EC0  90D8               	bcf	status,0,c
  9124  000EC2  342D               	rlcf	_ADC_Buffer_Point,w,c
  9125  000EC4  6ED9               	movwf	fsr2l,c
  9126  000EC6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9127  000EC8  6EDA               	movwf	fsr2h,c
  9128  000ECA  90D8               	bcf	status,0,c
  9129  000ECC  36D9               	rlcf	fsr2l,f,c
  9130  000ECE  36DA               	rlcf	fsr2h,f,c
  9131  000ED0  5009               	movf	??_ADC_ISR+4,w,c
  9132  000ED2  26D9               	addwf	fsr2l,f,c
  9133  000ED4  500A               	movf	??_ADC_ISR+5,w,c
  9134  000ED6  22DA               	addwfc	fsr2h,f,c
  9135  000ED8  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9136  000EDC  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9137  000EE0  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9138  000EE4  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9139                           
  9140                           ;adc.c: 152: ADC_StartConversion(Battery2);
  9141  000EE8  0E03               	movlw	3
  9142  000EEA  ECCB  F014         	call	_ADC_StartConversion
  9143                           
  9144                           ;adc.c: 153: break;
  9145  000EEE  D179               	goto	i2l3552
  9146  000EF0                     i2l3510:
  9147                           
  9148                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9149  000EF0  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9150  000EF4  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9151  000EF8  0E00               	movlw	0
  9152  000EFA  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9153  000EFC  0EFF               	movlw	255
  9154  000EFE  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9155  000F00  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9156  000F02  0E60               	movlw	low _Battery_Adc
  9157  000F04  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9158  000F06  0E00               	movlw	high _Battery_Adc
  9159  000F08  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9160  000F0A  90D8               	bcf	status,0,c
  9161  000F0C  342D               	rlcf	_ADC_Buffer_Point,w,c
  9162  000F0E  6ED9               	movwf	fsr2l,c
  9163  000F10  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9164  000F12  6EDA               	movwf	fsr2h,c
  9165  000F14  90D8               	bcf	status,0,c
  9166  000F16  36D9               	rlcf	fsr2l,f,c
  9167  000F18  36DA               	rlcf	fsr2h,f,c
  9168  000F1A  5009               	movf	??_ADC_ISR+4,w,c
  9169  000F1C  26D9               	addwf	fsr2l,f,c
  9170  000F1E  500A               	movf	??_ADC_ISR+5,w,c
  9171  000F20  22DA               	addwfc	fsr2h,f,c
  9172  000F22  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9173  000F26  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9174  000F2A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9175  000F2E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9176                           
  9177                           ;adc.c: 156: ADC_StartConversion(Battery3);
  9178  000F32  0E04               	movlw	4
  9179  000F34  ECCB  F014         	call	_ADC_StartConversion
  9180                           
  9181                           ;adc.c: 157: break;
  9182  000F38  D154               	goto	i2l3552
  9183  000F3A                     i2l3514:
  9184                           
  9185                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9186  000F3A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9187  000F3E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9188  000F42  0E00               	movlw	0
  9189  000F44  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9190  000F46  0EFF               	movlw	255
  9191  000F48  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9192  000F4A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9193  000F4C  0E60               	movlw	low _Battery_Adc
  9194  000F4E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9195  000F50  0E00               	movlw	high _Battery_Adc
  9196  000F52  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9197  000F54  90D8               	bcf	status,0,c
  9198  000F56  342D               	rlcf	_ADC_Buffer_Point,w,c
  9199  000F58  6ED9               	movwf	fsr2l,c
  9200  000F5A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9201  000F5C  6EDA               	movwf	fsr2h,c
  9202  000F5E  90D8               	bcf	status,0,c
  9203  000F60  36D9               	rlcf	fsr2l,f,c
  9204  000F62  36DA               	rlcf	fsr2h,f,c
  9205  000F64  5009               	movf	??_ADC_ISR+4,w,c
  9206  000F66  26D9               	addwf	fsr2l,f,c
  9207  000F68  500A               	movf	??_ADC_ISR+5,w,c
  9208  000F6A  22DA               	addwfc	fsr2h,f,c
  9209  000F6C  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9210  000F70  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9211  000F74  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9212  000F78  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9213                           
  9214                           ;adc.c: 160: ADC_StartConversion(Battery4);
  9215  000F7C  0E05               	movlw	5
  9216  000F7E  ECCB  F014         	call	_ADC_StartConversion
  9217                           
  9218                           ;adc.c: 161: break;
  9219  000F82  D12F               	goto	i2l3552
  9220  000F84                     i2l3518:
  9221                           
  9222                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9223  000F84  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9224  000F88  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9225  000F8C  0E00               	movlw	0
  9226  000F8E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9227  000F90  0EFF               	movlw	255
  9228  000F92  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9229  000F94  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9230  000F96  0E60               	movlw	low _Battery_Adc
  9231  000F98  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9232  000F9A  0E00               	movlw	high _Battery_Adc
  9233  000F9C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9234  000F9E  90D8               	bcf	status,0,c
  9235  000FA0  342D               	rlcf	_ADC_Buffer_Point,w,c
  9236  000FA2  6ED9               	movwf	fsr2l,c
  9237  000FA4  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9238  000FA6  6EDA               	movwf	fsr2h,c
  9239  000FA8  90D8               	bcf	status,0,c
  9240  000FAA  36D9               	rlcf	fsr2l,f,c
  9241  000FAC  36DA               	rlcf	fsr2h,f,c
  9242  000FAE  5009               	movf	??_ADC_ISR+4,w,c
  9243  000FB0  26D9               	addwf	fsr2l,f,c
  9244  000FB2  500A               	movf	??_ADC_ISR+5,w,c
  9245  000FB4  22DA               	addwfc	fsr2h,f,c
  9246  000FB6  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9247  000FBA  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9248  000FBE  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9249  000FC2  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9250                           
  9251                           ;adc.c: 164: ADC_StartConversion(Battery5);
  9252  000FC6  0E18               	movlw	24
  9253  000FC8  ECCB  F014         	call	_ADC_StartConversion
  9254                           
  9255                           ;adc.c: 165: break;
  9256  000FCC  D10A               	goto	i2l3552
  9257  000FCE                     i2l3522:
  9258                           
  9259                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9260  000FCE  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9261  000FD2  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9262  000FD6  0E00               	movlw	0
  9263  000FD8  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9264  000FDA  0EFF               	movlw	255
  9265  000FDC  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9266  000FDE  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9267  000FE0  0E60               	movlw	low _Battery_Adc
  9268  000FE2  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9269  000FE4  0E00               	movlw	high _Battery_Adc
  9270  000FE6  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9271  000FE8  90D8               	bcf	status,0,c
  9272  000FEA  342D               	rlcf	_ADC_Buffer_Point,w,c
  9273  000FEC  6ED9               	movwf	fsr2l,c
  9274  000FEE  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9275  000FF0  6EDA               	movwf	fsr2h,c
  9276  000FF2  90D8               	bcf	status,0,c
  9277  000FF4  36D9               	rlcf	fsr2l,f,c
  9278  000FF6  36DA               	rlcf	fsr2h,f,c
  9279  000FF8  5009               	movf	??_ADC_ISR+4,w,c
  9280  000FFA  26D9               	addwf	fsr2l,f,c
  9281  000FFC  500A               	movf	??_ADC_ISR+5,w,c
  9282  000FFE  22DA               	addwfc	fsr2h,f,c
  9283  001000  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9284  001004  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9285  001008  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9286  00100C  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9287                           
  9288                           ;adc.c: 168: ADC_StartConversion(Battery6);
  9289  001010  0E1A               	movlw	26
  9290  001012  ECCB  F014         	call	_ADC_StartConversion
  9291                           
  9292                           ;adc.c: 169: break;
  9293  001016  D0E5               	goto	i2l3552
  9294  001018                     i2l3526:
  9295                           
  9296                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9297  001018  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9298  00101C  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9299  001020  0E00               	movlw	0
  9300  001022  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9301  001024  0EFF               	movlw	255
  9302  001026  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9303  001028  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9304  00102A  0E60               	movlw	low _Battery_Adc
  9305  00102C  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9306  00102E  0E00               	movlw	high _Battery_Adc
  9307  001030  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9308  001032  90D8               	bcf	status,0,c
  9309  001034  342D               	rlcf	_ADC_Buffer_Point,w,c
  9310  001036  6ED9               	movwf	fsr2l,c
  9311  001038  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9312  00103A  6EDA               	movwf	fsr2h,c
  9313  00103C  90D8               	bcf	status,0,c
  9314  00103E  36D9               	rlcf	fsr2l,f,c
  9315  001040  36DA               	rlcf	fsr2h,f,c
  9316  001042  5009               	movf	??_ADC_ISR+4,w,c
  9317  001044  26D9               	addwf	fsr2l,f,c
  9318  001046  500A               	movf	??_ADC_ISR+5,w,c
  9319  001048  22DA               	addwfc	fsr2h,f,c
  9320  00104A  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9321  00104E  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9322  001052  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9323  001056  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9324                           
  9325                           ;adc.c: 172: ADC_StartConversion(Battery7);
  9326  00105A  0E1B               	movlw	27
  9327  00105C  ECCB  F014         	call	_ADC_StartConversion
  9328                           
  9329                           ;adc.c: 173: break;
  9330  001060  D0C0               	goto	i2l3552
  9331  001062                     i2l3530:
  9332                           
  9333                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9334  001062  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9335  001066  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9336  00106A  0E00               	movlw	0
  9337  00106C  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9338  00106E  0EFF               	movlw	255
  9339  001070  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9340  001072  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9341  001074  0E60               	movlw	low _Battery_Adc
  9342  001076  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9343  001078  0E00               	movlw	high _Battery_Adc
  9344  00107A  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9345  00107C  90D8               	bcf	status,0,c
  9346  00107E  342D               	rlcf	_ADC_Buffer_Point,w,c
  9347  001080  6ED9               	movwf	fsr2l,c
  9348  001082  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9349  001084  6EDA               	movwf	fsr2h,c
  9350  001086  90D8               	bcf	status,0,c
  9351  001088  36D9               	rlcf	fsr2l,f,c
  9352  00108A  36DA               	rlcf	fsr2h,f,c
  9353  00108C  5009               	movf	??_ADC_ISR+4,w,c
  9354  00108E  26D9               	addwf	fsr2l,f,c
  9355  001090  500A               	movf	??_ADC_ISR+5,w,c
  9356  001092  22DA               	addwfc	fsr2h,f,c
  9357  001094  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9358  001098  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9359  00109C  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9360  0010A0  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9361                           
  9362                           ;adc.c: 176: ADC_StartConversion(Battery8);
  9363  0010A4  0E08               	movlw	8
  9364  0010A6  ECCB  F014         	call	_ADC_StartConversion
  9365                           
  9366                           ;adc.c: 177: break;
  9367  0010AA  D09B               	goto	i2l3552
  9368  0010AC                     i2l3534:
  9369                           
  9370                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9371  0010AC  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9372  0010B0  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9373  0010B4  0E00               	movlw	0
  9374  0010B6  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9375  0010B8  0EFF               	movlw	255
  9376  0010BA  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9377  0010BC  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9378  0010BE  0E60               	movlw	low _Battery_Adc
  9379  0010C0  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9380  0010C2  0E00               	movlw	high _Battery_Adc
  9381  0010C4  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9382  0010C6  90D8               	bcf	status,0,c
  9383  0010C8  342D               	rlcf	_ADC_Buffer_Point,w,c
  9384  0010CA  6ED9               	movwf	fsr2l,c
  9385  0010CC  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9386  0010CE  6EDA               	movwf	fsr2h,c
  9387  0010D0  90D8               	bcf	status,0,c
  9388  0010D2  36D9               	rlcf	fsr2l,f,c
  9389  0010D4  36DA               	rlcf	fsr2h,f,c
  9390  0010D6  5009               	movf	??_ADC_ISR+4,w,c
  9391  0010D8  26D9               	addwf	fsr2l,f,c
  9392  0010DA  500A               	movf	??_ADC_ISR+5,w,c
  9393  0010DC  22DA               	addwfc	fsr2h,f,c
  9394  0010DE  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9395  0010E2  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9396  0010E6  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9397  0010EA  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9398                           
  9399                           ;adc.c: 180: ADC_StartConversion(Battery9);
  9400  0010EE  0E0B               	movlw	11
  9401  0010F0  ECCB  F014         	call	_ADC_StartConversion
  9402                           
  9403                           ;adc.c: 181: break;
  9404  0010F4  D076               	goto	i2l3552
  9405  0010F6                     i2l3538:
  9406                           
  9407                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9408  0010F6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9409  0010FA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9410  0010FE  0E00               	movlw	0
  9411  001100  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9412  001102  0EFF               	movlw	255
  9413  001104  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9414  001106  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9415  001108  0E60               	movlw	low _Battery_Adc
  9416  00110A  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9417  00110C  0E00               	movlw	high _Battery_Adc
  9418  00110E  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9419  001110  90D8               	bcf	status,0,c
  9420  001112  342D               	rlcf	_ADC_Buffer_Point,w,c
  9421  001114  6ED9               	movwf	fsr2l,c
  9422  001116  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9423  001118  6EDA               	movwf	fsr2h,c
  9424  00111A  90D8               	bcf	status,0,c
  9425  00111C  36D9               	rlcf	fsr2l,f,c
  9426  00111E  36DA               	rlcf	fsr2h,f,c
  9427  001120  5009               	movf	??_ADC_ISR+4,w,c
  9428  001122  26D9               	addwf	fsr2l,f,c
  9429  001124  500A               	movf	??_ADC_ISR+5,w,c
  9430  001126  22DA               	addwfc	fsr2h,f,c
  9431  001128  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9432  00112C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9433  001130  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9434  001134  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9435                           
  9436                           ;adc.c: 184: ADC_StartConversion(Battery10);
  9437  001138  0E0D               	movlw	13
  9438  00113A  ECCB  F014         	call	_ADC_StartConversion
  9439                           
  9440                           ;adc.c: 185: break;
  9441  00113E  D051               	goto	i2l3552
  9442  001140                     i2l3542:
  9443                           
  9444                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9445  001140  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9446  001144  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9447  001148  0E00               	movlw	0
  9448  00114A  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9449  00114C  0EFF               	movlw	255
  9450  00114E  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9451  001150  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9452  001152  0E60               	movlw	low _Battery_Adc
  9453  001154  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9454  001156  0E00               	movlw	high _Battery_Adc
  9455  001158  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9456  00115A  90D8               	bcf	status,0,c
  9457  00115C  342D               	rlcf	_ADC_Buffer_Point,w,c
  9458  00115E  6ED9               	movwf	fsr2l,c
  9459  001160  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9460  001162  6EDA               	movwf	fsr2h,c
  9461  001164  90D8               	bcf	status,0,c
  9462  001166  36D9               	rlcf	fsr2l,f,c
  9463  001168  36DA               	rlcf	fsr2h,f,c
  9464  00116A  5009               	movf	??_ADC_ISR+4,w,c
  9465  00116C  26D9               	addwf	fsr2l,f,c
  9466  00116E  500A               	movf	??_ADC_ISR+5,w,c
  9467  001170  22DA               	addwfc	fsr2h,f,c
  9468  001172  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9469  001176  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9470  00117A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9471  00117E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9472                           
  9473                           ;adc.c: 188: Volt_Aquire = 0;
  9474  001182  0E00               	movlw	0
  9475  001184  6E3B               	movwf	_Volt_Aquire,c
  9476                           
  9477                           ;adc.c: 189: Volt_Done = 1;
  9478  001186  0E00               	movlw	0
  9479  001188  0100               	movlb	0	; () banked
  9480  00118A  6F8B               	movwf	(_Volt_Done+1)& (0+255),b
  9481  00118C  0E01               	movlw	1
  9482  00118E  6F8A               	movwf	_Volt_Done& (0+255),b
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;adc.c: 191: }
  9486                           
  9487                           ;adc.c: 190: break;
  9488  001190  D028               	goto	i2l3552
  9489  001192                     i2l3550:
  9490  001192  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  9491  001196  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  9492                           
  9493                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9494                           ; Switch size 1, requested type "space"
  9495                           ; Number of cases is 1, Range of values is 0 to 0
  9496                           ; switch strategies available:
  9497                           ; Name         Instructions Cycles
  9498                           ; simple_byte            4     3 (average)
  9499                           ;	Chosen strategy is simple_byte
  9500  00119A  5006               	movf	??_ADC_ISR+1,w,c
  9501  00119C  0A00               	xorlw	0	; case 0
  9502  00119E  A4D8               	btfss	status,2,c
  9503  0011A0  D020               	goto	i2l3552
  9504                           
  9505                           ; Switch size 1, requested type "space"
  9506                           ; Number of cases is 10, Range of values is 0 to 9
  9507                           ; switch strategies available:
  9508                           ; Name         Instructions Cycles
  9509                           ; simple_byte           31    16 (average)
  9510                           ;	Chosen strategy is simple_byte
  9511  0011A2  5005               	movf	??_ADC_ISR,w,c
  9512  0011A4  0A00               	xorlw	0	; case 0
  9513  0011A6  B4D8               	btfsc	status,2,c
  9514  0011A8  D67E               	goto	i2l3506
  9515  0011AA  0A01               	xorlw	1	; case 1
  9516  0011AC  B4D8               	btfsc	status,2,c
  9517  0011AE  D6A0               	goto	i2l3510
  9518  0011B0  0A03               	xorlw	3	; case 2
  9519  0011B2  B4D8               	btfsc	status,2,c
  9520  0011B4  D6C2               	goto	i2l3514
  9521  0011B6  0A01               	xorlw	1	; case 3
  9522  0011B8  B4D8               	btfsc	status,2,c
  9523  0011BA  D6E4               	goto	i2l3518
  9524  0011BC  0A07               	xorlw	7	; case 4
  9525  0011BE  B4D8               	btfsc	status,2,c
  9526  0011C0  D706               	goto	i2l3522
  9527  0011C2  0A01               	xorlw	1	; case 5
  9528  0011C4  B4D8               	btfsc	status,2,c
  9529  0011C6  D728               	goto	i2l3526
  9530  0011C8  0A03               	xorlw	3	; case 6
  9531  0011CA  B4D8               	btfsc	status,2,c
  9532  0011CC  D74A               	goto	i2l3530
  9533  0011CE  0A01               	xorlw	1	; case 7
  9534  0011D0  B4D8               	btfsc	status,2,c
  9535  0011D2  D76C               	goto	i2l3534
  9536  0011D4  0A0F               	xorlw	15	; case 8
  9537  0011D6  B4D8               	btfsc	status,2,c
  9538  0011D8  D78E               	goto	i2l3538
  9539  0011DA  0A01               	xorlw	1	; case 9
  9540  0011DC  B4D8               	btfsc	status,2,c
  9541  0011DE  D7B0               	goto	i2l3542
  9542  0011E0  D000               	goto	i2l3552
  9543  0011E2                     i2l3552:
  9544                           
  9545                           ;adc.c: 192: ADC_Buffer_Point++;
  9546  0011E2  4A2D               	infsnz	_ADC_Buffer_Point,f,c
  9547  0011E4  2A2E               	incf	_ADC_Buffer_Point+1,f,c
  9548  0011E6  0012               	return	
  9549  0011E8  0012               	return		;funcret
  9550  0011EA                     __end_of_ADC_ISR:
  9551                           	opt stack 0
  9552                           tosu	equ	0xFFF
  9553                           tosh	equ	0xFFE
  9554                           tosl	equ	0xFFD
  9555                           pclatu	equ	0xFFB
  9556                           pclath	equ	0xFFA
  9557                           tblptru	equ	0xFF8
  9558                           tblptrh	equ	0xFF7
  9559                           tblptrl	equ	0xFF6
  9560                           tablat	equ	0xFF5
  9561                           prodh	equ	0xFF4
  9562                           prodl	equ	0xFF3
  9563                           intcon	equ	0xFF2
  9564                           intcon2	equ	0xFF1
  9565                           postinc0	equ	0xFEE
  9566                           fsr0h	equ	0xFEA
  9567                           fsr0l	equ	0xFE9
  9568                           wreg	equ	0xFE8
  9569                           postdec1	equ	0xFE5
  9570                           fsr1h	equ	0xFE2
  9571                           fsr1l	equ	0xFE1
  9572                           indf2	equ	0xFDF
  9573                           postinc2	equ	0xFDE
  9574                           postdec2	equ	0xFDD
  9575                           plusw2	equ	0xFDB
  9576                           fsr2h	equ	0xFDA
  9577                           fsr2l	equ	0xFD9
  9578                           status	equ	0xFD8
  9579                           
  9580 ;; *************** function _Set_4051 *****************
  9581 ;; Defined at:
  9582 ;;		line 15 in file "Functions.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;  Channel         2    0[COMRAM] int 
  9585 ;; Auto vars:     Size  Location     Type
  9586 ;;		None
  9587 ;; Return value:  Size  Location     Type
  9588 ;;		None               void
  9589 ;; Registers used:
  9590 ;;		wreg, status,2, status,0
  9591 ;; Tracked objects:
  9592 ;;		On entry : 0/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9596 ;;      Params:         2       0       0       0       0       0       0
  9597 ;;      Locals:         0       0       0       0       0       0       0
  9598 ;;      Temps:          2       0       0       0       0       0       0
  9599 ;;      Totals:         4       0       0       0       0       0       0
  9600 ;;Total ram usage:        4 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; This function calls:
  9603 ;;		Nothing
  9604 ;; This function is called by:
  9605 ;;		_ADC_ISR
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           	psect	text50
  9610  0026E4                     __ptext50:
  9611                           	opt stack 0
  9612  0026E4                     _Set_4051:
  9613                           	opt stack 22
  9614                           
  9615                           ;Functions.c: 17: if (Channel & 0x01)
  9616                           
  9617                           ;incstack = 0
  9618  0026E4  A001               	btfss	Set_4051@Channel,0,c
  9619  0026E6  D002               	goto	i2l3094
  9620                           
  9621                           ;Functions.c: 18: {
  9622                           ;Functions.c: 19: do { LATA6 = ~LATA6; } while(0);
  9623  0026E8  7C89               	btg	3977,6,c	;volatile
  9624  0026EA  D000               	goto	i2l3094
  9625  0026EC                     i2l3094:
  9626                           
  9627                           ;Functions.c: 20: }
  9628                           ;Functions.c: 21: if ((Channel>>1) & 0x01)
  9629  0026EC  3402               	rlcf	Set_4051@Channel+1,w,c
  9630  0026EE  3002               	rrcf	Set_4051@Channel+1,w,c
  9631  0026F0  6E04               	movwf	(??_Set_4051+1)& (0+255),c
  9632  0026F2  3001               	rrcf	Set_4051@Channel,w,c
  9633  0026F4  6E03               	movwf	??_Set_4051& (0+255),c
  9634  0026F6  A003               	btfss	??_Set_4051,0,c
  9635  0026F8  D002               	goto	i2l3096
  9636                           
  9637                           ;Functions.c: 22: {
  9638                           ;Functions.c: 23: do { LATC0 = ~LATC0; } while(0);
  9639  0026FA  708B               	btg	3979,0,c	;volatile
  9640  0026FC  D000               	goto	i2l3096
  9641  0026FE                     i2l3096:
  9642                           
  9643                           ;Functions.c: 24: }
  9644                           ;Functions.c: 25: if ((Channel>>2) & 0x01)
  9645  0026FE  C001  F003         	movff	Set_4051@Channel,??_Set_4051
  9646  002702  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
  9647  002706  3404               	rlcf	??_Set_4051+1,w,c
  9648  002708  3204               	rrcf	??_Set_4051+1,f,c
  9649  00270A  3203               	rrcf	??_Set_4051,f,c
  9650  00270C  3404               	rlcf	??_Set_4051+1,w,c
  9651  00270E  3204               	rrcf	??_Set_4051+1,f,c
  9652  002710  3203               	rrcf	??_Set_4051,f,c
  9653  002712  A003               	btfss	??_Set_4051,0,c
  9654  002714  0012               	return	
  9655                           
  9656                           ;Functions.c: 26: {
  9657                           ;Functions.c: 27: do { LATC1 = ~LATC1; } while(0);
  9658  002716  728B               	btg	3979,1,c	;volatile
  9659  002718  0012               	return	
  9660  00271A  0012               	return		;funcret
  9661  00271C                     __end_of_Set_4051:
  9662                           	opt stack 0
  9663                           tosu	equ	0xFFF
  9664                           tosh	equ	0xFFE
  9665                           tosl	equ	0xFFD
  9666                           pclatu	equ	0xFFB
  9667                           pclath	equ	0xFFA
  9668                           tblptru	equ	0xFF8
  9669                           tblptrh	equ	0xFF7
  9670                           tblptrl	equ	0xFF6
  9671                           tablat	equ	0xFF5
  9672                           prodh	equ	0xFF4
  9673                           prodl	equ	0xFF3
  9674                           intcon	equ	0xFF2
  9675                           intcon2	equ	0xFF1
  9676                           postinc0	equ	0xFEE
  9677                           fsr0h	equ	0xFEA
  9678                           fsr0l	equ	0xFE9
  9679                           wreg	equ	0xFE8
  9680                           postdec1	equ	0xFE5
  9681                           fsr1h	equ	0xFE2
  9682                           fsr1l	equ	0xFE1
  9683                           indf2	equ	0xFDF
  9684                           postinc2	equ	0xFDE
  9685                           postdec2	equ	0xFDD
  9686                           plusw2	equ	0xFDB
  9687                           fsr2h	equ	0xFDA
  9688                           fsr2l	equ	0xFD9
  9689                           status	equ	0xFD8
  9690                           
  9691 ;; *************** function _ADC_StartConversion *****************
  9692 ;; Defined at:
  9693 ;;		line 36 in file "mcc_generated_files/adc.c"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;  channel         1    wreg     enum E8837
  9696 ;; Auto vars:     Size  Location     Type
  9697 ;;  channel         1    1[COMRAM] enum E8837
  9698 ;; Return value:  Size  Location     Type
  9699 ;;		None               void
  9700 ;; Registers used:
  9701 ;;		wreg, status,2, status,0
  9702 ;; Tracked objects:
  9703 ;;		On entry : 0/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9707 ;;      Params:         0       0       0       0       0       0       0
  9708 ;;      Locals:         1       0       0       0       0       0       0
  9709 ;;      Temps:          1       0       0       0       0       0       0
  9710 ;;      Totals:         2       0       0       0       0       0       0
  9711 ;;Total ram usage:        2 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; This function calls:
  9714 ;;		Nothing
  9715 ;; This function is called by:
  9716 ;;		_ADC_ISR
  9717 ;;		_Battery_Read
  9718 ;;		_Temp_Read
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text51
  9723  002996                     __ptext51:
  9724                           	opt stack 0
  9725  002996                     _ADC_StartConversion:
  9726                           	opt stack 22
  9727                           
  9728                           ;incstack = 0
  9729                           ;ADC_StartConversion@channel stored from wreg
  9730  002996  6E02               	movwf	ADC_StartConversion@channel,c
  9731                           
  9732                           ;adc.c: 39: ADCON0bits.CHS = channel;
  9733  002998  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  9734  00299C  4601               	rlncf	??_ADC_StartConversion,f,c
  9735  00299E  4601               	rlncf	??_ADC_StartConversion,f,c
  9736  0029A0  50C2               	movf	4034,w,c	;volatile
  9737  0029A2  1801               	xorwf	??_ADC_StartConversion,w,c
  9738  0029A4  0B83               	andlw	-125
  9739  0029A6  1801               	xorwf	??_ADC_StartConversion,w,c
  9740  0029A8  6EC2               	movwf	4034,c	;volatile
  9741                           
  9742                           ;adc.c: 42: ADCON0bits.ADON = 1;
  9743  0029AA  80C2               	bsf	4034,0,c	;volatile
  9744                           
  9745                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
  9746  0029AC  82C2               	bsf	4034,1,c	;volatile
  9747  0029AE  0012               	return		;funcret
  9748  0029B0                     __end_of_ADC_StartConversion:
  9749                           	opt stack 0
  9750                           tosu	equ	0xFFF
  9751                           tosh	equ	0xFFE
  9752                           tosl	equ	0xFFD
  9753                           pclatu	equ	0xFFB
  9754                           pclath	equ	0xFFA
  9755                           tblptru	equ	0xFF8
  9756                           tblptrh	equ	0xFF7
  9757                           tblptrl	equ	0xFF6
  9758                           tablat	equ	0xFF5
  9759                           prodh	equ	0xFF4
  9760                           prodl	equ	0xFF3
  9761                           intcon	equ	0xFF2
  9762                           intcon2	equ	0xFF1
  9763                           postinc0	equ	0xFEE
  9764                           fsr0h	equ	0xFEA
  9765                           fsr0l	equ	0xFE9
  9766                           wreg	equ	0xFE8
  9767                           postdec1	equ	0xFE5
  9768                           fsr1h	equ	0xFE2
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           postdec2	equ	0xFDD
  9773                           plusw2	equ	0xFDB
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778 ;; *************** function _ADC_GetConversionResult *****************
  9779 ;; Defined at:
  9780 ;;		line 55 in file "mcc_generated_files/adc.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;		None
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;		None
  9785 ;; Return value:  Size  Location     Type
  9786 ;;                  2    0[COMRAM] unsigned int 
  9787 ;; Registers used:
  9788 ;;		wreg, status,2, status,0
  9789 ;; Tracked objects:
  9790 ;;		On entry : 0/0
  9791 ;;		On exit  : 0/0
  9792 ;;		Unchanged: 0/0
  9793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9794 ;;      Params:         2       0       0       0       0       0       0
  9795 ;;      Locals:         0       0       0       0       0       0       0
  9796 ;;      Temps:          2       0       0       0       0       0       0
  9797 ;;      Totals:         4       0       0       0       0       0       0
  9798 ;;Total ram usage:        4 bytes
  9799 ;; Hardware stack levels used:    1
  9800 ;; This function calls:
  9801 ;;		Nothing
  9802 ;; This function is called by:
  9803 ;;		_ADC_ISR
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           	psect	text52
  9808  002A10                     __ptext52:
  9809                           	opt stack 0
  9810  002A10                     _ADC_GetConversionResult:
  9811                           	opt stack 22
  9812                           
  9813                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
  9814                           
  9815                           ;incstack = 0
  9816  002A10  50C4               	movf	4036,w,c	;volatile
  9817  002A12  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  9818  002A14  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  9819  002A16  50C3               	movf	4035,w,c	;volatile
  9820  002A18  2403               	addwf	??_ADC_GetConversionResult,w,c
  9821  002A1A  6E01               	movwf	?_ADC_GetConversionResult,c
  9822  002A1C  0E00               	movlw	0
  9823  002A1E  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  9824  002A20  6E02               	movwf	?_ADC_GetConversionResult+1,c
  9825  002A22  0012               	return	
  9826  002A24  0012               	return		;funcret
  9827  002A26                     __end_of_ADC_GetConversionResult:
  9828                           	opt stack 0
  9829                           tosu	equ	0xFFF
  9830                           tosh	equ	0xFFE
  9831                           tosl	equ	0xFFD
  9832                           pclatu	equ	0xFFB
  9833                           pclath	equ	0xFFA
  9834                           tblptru	equ	0xFF8
  9835                           tblptrh	equ	0xFF7
  9836                           tblptrl	equ	0xFF6
  9837                           tablat	equ	0xFF5
  9838                           prodh	equ	0xFF4
  9839                           prodl	equ	0xFF3
  9840                           intcon	equ	0xFF2
  9841                           intcon2	equ	0xFF1
  9842                           postinc0	equ	0xFEE
  9843                           fsr0h	equ	0xFEA
  9844                           fsr0l	equ	0xFE9
  9845                           wreg	equ	0xFE8
  9846                           postdec1	equ	0xFE5
  9847                           fsr1h	equ	0xFE2
  9848                           fsr1l	equ	0xFE1
  9849                           indf2	equ	0xFDF
  9850                           postinc2	equ	0xFDE
  9851                           postdec2	equ	0xFDD
  9852                           plusw2	equ	0xFDB
  9853                           fsr2h	equ	0xFDA
  9854                           fsr2l	equ	0xFD9
  9855                           status	equ	0xFD8
  9856                           tosu	equ	0xFFF
  9857                           tosh	equ	0xFFE
  9858                           tosl	equ	0xFFD
  9859                           pclatu	equ	0xFFB
  9860                           pclath	equ	0xFFA
  9861                           tblptru	equ	0xFF8
  9862                           tblptrh	equ	0xFF7
  9863                           tblptrl	equ	0xFF6
  9864                           tablat	equ	0xFF5
  9865                           prodh	equ	0xFF4
  9866                           prodl	equ	0xFF3
  9867                           intcon	equ	0xFF2
  9868                           intcon2	equ	0xFF1
  9869                           postinc0	equ	0xFEE
  9870                           fsr0h	equ	0xFEA
  9871                           fsr0l	equ	0xFE9
  9872                           wreg	equ	0xFE8
  9873                           postdec1	equ	0xFE5
  9874                           fsr1h	equ	0xFE2
  9875                           fsr1l	equ	0xFE1
  9876                           indf2	equ	0xFDF
  9877                           postinc2	equ	0xFDE
  9878                           postdec2	equ	0xFDD
  9879                           plusw2	equ	0xFDB
  9880                           fsr2h	equ	0xFDA
  9881                           fsr2l	equ	0xFD9
  9882                           status	equ	0xFD8
  9883                           
  9884                           	psect	text53
  9885  000000                     __ptext53:
  9886                           	opt stack 0
  9887                           tosu	equ	0xFFF
  9888                           tosh	equ	0xFFE
  9889                           tosl	equ	0xFFD
  9890                           pclatu	equ	0xFFB
  9891                           pclath	equ	0xFFA
  9892                           tblptru	equ	0xFF8
  9893                           tblptrh	equ	0xFF7
  9894                           tblptrl	equ	0xFF6
  9895                           tablat	equ	0xFF5
  9896                           prodh	equ	0xFF4
  9897                           prodl	equ	0xFF3
  9898                           intcon	equ	0xFF2
  9899                           intcon2	equ	0xFF1
  9900                           postinc0	equ	0xFEE
  9901                           fsr0h	equ	0xFEA
  9902                           fsr0l	equ	0xFE9
  9903                           wreg	equ	0xFE8
  9904                           postdec1	equ	0xFE5
  9905                           fsr1h	equ	0xFE2
  9906                           fsr1l	equ	0xFE1
  9907                           indf2	equ	0xFDF
  9908                           postinc2	equ	0xFDE
  9909                           postdec2	equ	0xFDD
  9910                           plusw2	equ	0xFDB
  9911                           fsr2h	equ	0xFDA
  9912                           fsr2l	equ	0xFD9
  9913                           status	equ	0xFD8
  9914                           
  9915                           	psect	rparam
  9916  0000                     tosu	equ	0xFFF
  9917                           tosh	equ	0xFFE
  9918                           tosl	equ	0xFFD
  9919                           pclatu	equ	0xFFB
  9920                           pclath	equ	0xFFA
  9921                           tblptru	equ	0xFF8
  9922                           tblptrh	equ	0xFF7
  9923                           tblptrl	equ	0xFF6
  9924                           tablat	equ	0xFF5
  9925                           prodh	equ	0xFF4
  9926                           prodl	equ	0xFF3
  9927                           intcon	equ	0xFF2
  9928                           intcon2	equ	0xFF1
  9929                           postinc0	equ	0xFEE
  9930                           fsr0h	equ	0xFEA
  9931                           fsr0l	equ	0xFE9
  9932                           wreg	equ	0xFE8
  9933                           postdec1	equ	0xFE5
  9934                           fsr1h	equ	0xFE2
  9935                           fsr1l	equ	0xFE1
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           plusw2	equ	0xFDB
  9940                           fsr2h	equ	0xFDA
  9941                           fsr2l	equ	0xFD9
  9942                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        61
    BSS         1099
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      69
    BANK0           160     31     158
    BANK1           256      0     190
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256      0     206

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK4[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1107(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK3[200]), ring_buffer(BANK2[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK2[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK1[40]), 


Critical Paths under _main in COMRAM

    _updateComms->_ToSend
    _updateComms->_receiveData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Tempeture_Get->___wmul
    _Battery_Get->___ftmul
    ___ftmul->___ftpack
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _updateComms->_ToSend
    _receiveData->_CRCcheck
    ___fttol->_Battery_Get
    _ToSend->___fttol
    _Battery_Get->___ftmul
    _SYSTEM_Initialize->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   34991
                                             26 BANK0      5     0      5
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   32493
                        _Battery_Get
                              _Delay
                      _Tempeture_Get
                             _ToSend
                            ___fttol
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (2) _sendData                                             5     5      0    5297
                                             38 COMRAM     5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (3) _crcBufS_put                                          7     2      5     564
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_flush                            4     0      4     910
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                             38 COMRAM     6     6      0
                                              7 BANK0     12    12      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (3) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (4) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1911
                                              9 BANK0     15    11      4
                        _Battery_Get (ARG)
                      _Tempeture_Get (ARG)
 ---------------------------------------------------------------------------------
 (2) _ToSend                                               3     1      2    3214
                                             43 COMRAM     1     1      0
                                             24 BANK0      2     0      2
                        _Battery_Get (ARG)
            _FastTransfer_buffer_put
                      _Tempeture_Get (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Tempeture_Get                                        3     0      3    3205
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Delay                                                9     5      4     238
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    7913
                                              6 BANK0      3     0      3
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2543
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4492
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2332
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2498
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1676
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     812
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    2316
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              8     8      0    1107
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (9) _Set_4051                                             4     2      2     642
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _begin
       ___awdiv
   _updateComms
     _Battery_Get
       ___ftmul
         ___ftpack
         ___wmul (ARG)
       ___wmul
     _Delay
     _Tempeture_Get
       ___wmul
     _ToSend
       _Battery_Get (ARG)
         ___ftmul
           ___ftpack
           ___wmul (ARG)
         ___wmul
       _FastTransfer_buffer_put (ARG)
         _FastTransfer_buffer_modulo_inc
       _Tempeture_Get (ARG)
         ___wmul
       ___fttol (ARG)
         _Battery_Get (ARG)
           ___ftmul
             ___ftpack
             ___wmul (ARG)
           ___wmul
         _Tempeture_Get (ARG)
           ___wmul
     ___fttol
       _Battery_Get (ARG)
         ___ftmul
           ___ftpack
           ___wmul (ARG)
         ___wmul
       _Tempeture_Get (ARG)
         ___wmul
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      CE      15       80.5%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      BE       6       74.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1F      9E       4       98.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4D3       9        0.0%
DATA                 0      0     4D3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Jun 11 23:18:46 2015

      __end_of_FastTransfer_buffer_flush 250E                   i2_UART_buff_modulo_inc 283A  
                           _rx_array_inx 0041                             ___awdiv@sign 0020  
                    ___wmul@multiplicand 001D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l578 259E  
                                    l692 1718                                      l757 23A4  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0037                          __end_of_ADC_ISR 11EA  
   FastTransfer_buffer_flush@clearBuffer 0025                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l1122 21A6                                     l3030 22A8  
                                   l3040 22D0                                     l3024 2296  
                                   l3036 22BE                                     l3052 22FA  
                                   l3038 22C8                                     l3142 2622  
                                   l4110 27D2                                     l3056 230A  
                                   l3048 22EE                                     l3146 263E  
                                   l4122 23A0                                     l4202 1C56  
                                   l4132 2572                                     l4230 211A  
                                   l4302 1742                                     l4208 1CC2  
                                   l4400 1A1E                                     l4242 216E  
                                   l4234 212A                                     l4138 2588  
                                   l4146 25A6                                     l4170 1E86  
                                   l4410 1AA2                                     l4402 1A38  
                                   l4252 21AE                                     l4244 218E  
                                   l4236 2136                                     l4148 25B0  
                                   l4500 093E                                     l4412 1AA8  
                                   l4404 1A52                                     l4246 219A  
                                   l4238 2156                                     l4342 1B60  
                                   l4158 2800                                     l4182 1F0A  
                                   l4166 1E7A                                     l4190 203C  
                                   l4502 0946                                     l4430 067E  
                                   l4406 1A6E                                     l4360 1BBC  
                                   l4336 1B34                                     l4264 15AE  
                                   l4520 09FA                                     l4504 095C  
                                   l4416 1ADA                                     l4408 1A78  
                                   l4258 21C0                                     l4370 1BF4  
                                   l4274 1674                                     l4266 15DA  
                                   l4530 0A7C                                     l4522 0A14  
                                   l4450 0748                                     l4426 0650  
                                   l4434 0684                                     l4364 1BD4  
                                   l4356 1BA4                                     l4292 1706  
                                   l4532 0AB8                                     l4524 0A2E  
                                   l2774 2816                                     l4374 1C0E  
                                   l4366 1BDC                                     l4606 18BE  
                                   l4198 20C2                                     l4278 168E  
                                   l4526 0A48                                     l4518 09E0  
                                   l4534 0AD4                                     l4446 0728  
                                   l4624 1952                                     l4288 16E4  
                                   l4296 1710                                     l4560 0B68  
                                   l4528 0A62                                     l4544 0AE2  
                                   l4464 0788                                     l4448 0740  
                                   l2778 2828                                     l4642 19C2  
                                   l4634 1984                                     l4570 0BEA  
                                   l4562 0B82                                     l4466 07B2  
                                   l4482 0816                                     l4458 0778  
                                   l4636 1996                                     l4628 1966  
                                   l4572 0C26                                     l4564 0B9C  
                                   l4638 19A4                                     l4566 0BB6  
                                   l4558 0B4E                                     l4574 0C42  
                                   l4494 08B4                                     l4486 0842  
                                   l4478 07E4                                     l4582 0C50  
                                   l4398 1A04                                     l4568 0BD0  
                   receiveData@crcHolder 00CE                                     l4906 2A30  
                                   _CRC8 256C                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u4111 1740                                     u4008 15DE  
                                   u4009 15F2                                     u4018 15FA  
                                   u4131 1B18                                     u4019 160E  
                                   u4028 1616                                     u4029 162A  
                                   u4038 1632                                     u4151 1B44  
                                   u4039 1646                                     u4208 1A08  
                                   u4218 1A22                                     u4308 065A  
                                   u4228 1A3C                                     u4309 066E  
                                   u4238 1A56                                     u4408 072C  
                                   u4328 0688                                     u4248 1A7C  
                                   u4521 086A                                     u4329 069C  
                                   u4348 06A6                                     u1980 2018  
                                   u4268 1AC4                                     u4349 06BA  
                                   u4198 19EE                                     u4608 0A18  
                                   u4448 078C                                     u4368 06C4  
                                   u4288 0628                                     u4449 07A0  
                                   u4369 06D8                                     u4289 063C  
                                   u4618 0A32                                     u4378 06DE  
                                   u4379 06F2                                     u4708 0B86  
                                   u4628 0A4C                                     u4468 07B6  
                                   u4388 06F8                                     u4469 07CC  
                                   u4389 070C                                     u3790 2334  
                                   u4718 0BA0                                     u4638 0A66  
                                   u4728 0BBA                                     u4648 0A80  
                                   u4488 07E8                                     u4489 07FC  
                                   u4738 0BD4                                     u4658 0ABC  
                                   u4578 09CA                                     u4498 081A  
                                   u5387 2628                                     u4771 189A  
                                   u4499 082E                                     u4748 0BEE  
                                   u4588 09E4                                     u4790 18E4  
                                   u4758 0C2A                                     u4678 0B38  
                                   u4598 09FE                                     u4688 0B52  
                                   u4698 0B6C                                     u4795 18DA  
                                   u3988 15B2                                     u3989 15C6  
                                   _TMR1 000FCE                                     _WPUB 000F61  
                Tempeture_Get@channelnum 0021                                     _main 2A26  
                           ___ftpack@arg 001B                             ___ftpack@exp 001E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 1884  
                                   start 00AA                            __CFG_IESO$OFF 000000  
                           ___ftmul@cntr 00C5                             ___param_bank 000010  
                           ___ftmul@sign 00C6           i2UART_buff_modulo_inc@my_value 0005  
                      ADC_ISR@ADC_Result 000B                             ___fttol@exp1 00D8  
                           ___fttol@lval 00D4                                    ?_CRC8 001B  
                       __end_of_CRCcheck 171A           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 2A68                       crcBufS_put@address 001D  
                                  ?_main 00DB                          __end_of___awdiv 2316  
                        _TMR1_StartTimer 2A74                          __end_of___ftmul 1C36  
                        ___awdiv@divisor 001D                                    _T1CON 000FCD  
                        __end_of___fttol 19D6                                    _LATA0 007C48  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATC0 007C58                                    _LATC1 007C59  
                                  _LATB3 007C53                                    _LATA6 007C4E  
                                  _LATD1 007C61                                    _LATD2 007C62  
                                  _LATC4 007C5C                                    _LATD3 007C63  
                                  _LATC5 007C5D                                    _LATD5 007C65  
                         __CFG_DEBUG$OFF 000000                                    i2l212 0070  
                                  i2l204 004C                                    i2l206 0058  
                                  i2l208 0064                                    i2l757 2438  
                                  i2l788 2964                          ___awdiv@counter 001F  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96         __size_of_ADC_GetConversionResult 0016  
                                  _Delay 2610                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 271C  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                         __end_of_TMR1_ISR 2892  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 250E  
                         __CFG_EBTRB$OFF 000000                                    _errno 0094  
                                  _group 0043                       __CFG_MCLRE$EXTMCLR 000000  
                          ___ftpack@sign 001F                  __end_of_TMR1_Initialize 2902  
                                  pclath 000FFA                              _Battery_Adc 0060  
                                  tablat 000FF5                              _Battery_Get 265C  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00E8  
                                  plusw2 000FDB                           begin@stuffpeek 00CC  
                   __size_of_crcBufS_put 00DA                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 25BE  
                        CRCcheck@SentCRC 00C1                          __initialization 21D0  
             __end_of_EUSART1_Initialize 26E4                             __end_of_main 2A3A  
                             ToSend@what 00D9                                   ??_CRC8 001E  
                       __end_of_Set_4051 271C                                ??_ADC_ISR 0005  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 002D  
                          ___fttol@sign1 00D3                            __activetblptr 000002  
                       __end_of_Send_put 2780               ADC_StartConversion@channel 0002  
              __size_ofi2_UART_buff_size 0018                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                          ?_Receive_peek 0001                                   ?_begin 00C1  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                         __end_of___ftpack 21D0  
                                 _T1GCON 000FCC                          i2_UART_buff_get 23AA  
                                 _RC1STA 000FAB                          i2_UART_buff_put 1D52  
                                 i2l3064 285C                                   i2l3402 1D72  
                                 i2l3500 0E8C                                   i2l3094 26EC  
                                 i2l3510 0EF0                                   i2l3502 0E92  
                                 i2l3422 2434                           __CFG_WDTEN$OFF 000000  
                                 i2l3096 26FE                                   i2l3408 1DDE  
                                 i2l3530 1062                                   i2l3522 0FCE  
                                 i2l3514 0F3A                                   i2l3506 0EA6  
                                 i2l3442 0CA2                                   i2l3460 0D2C  
                                 i2l3436 0C74                                   i2l3542 1140  
                                 i2l3534 10AC                                   i2l3526 1018  
                                 i2l3518 0F84                                   i2l3550 1192  
                                 i2l3454 0CFE                                   i2l3552 11E2  
                                 i2l3472 0D88                                   i2l3448 0CD0  
            UART_buff_modulo_inc@modulus 001D                                   i2l3538 10F6  
                                 i2l3490 0E12                                   i2l3466 0D5A  
                                 i2l3484 0DE4                                   i2l3572 2746  
                                 i2l3478 0DB6                                   i2l3498 0E3C  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                           __CFG_XINST$OFF 000000  
                                 _ToSend 297A                      __end_of_Receive_get 2A5A  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0027  
                  __end_of_Tempeture_Get 27B0                            _output_buffer 0500  
                       crcBufS_get@space 001E                  __end_of_TMR1_StartTimer 2A78  
                                 ___wmul 2892                                ??___awdiv 001F  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                              ??___ftmul 0029                                ??___fttol 00CE  
                                 _memset 280C                                   clear_0 21D6  
                                 clear_1 21E2                                   clear_2 21EE  
                                 clear_3 21FA                                   clear_4 2206  
                                 clear_5 2212                                   clear_6 221E  
                       ___awdiv@quotient 0021                                   _rx_len 0042  
                       __end_of_sendData 1B08                    ___ftmul@f3_as_product 00C2  
                           __pdataCOMRAM 0045                            Send_put@_data 0026  
                           _Battery_Volt 00E0                             __mediumconst 0000  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 016A             __end_of_UART_buff_modulo_inc 27DE  
          __size_of_INTERRUPT_Initialize 000C                         ?_TMR1_Initialize 0001  
                      _SYSTEM_Initialize 243E                         __end_oflog@coeff 061C  
                             __accesstop 0060                  __end_of__initialization 2276  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                            __end_of_Delay 265C  
                             ___ftmul@f1 0023                               ___ftmul@f2 0026  
                             ___fttol@f1 00CA             __size_of_ADC_StartConversion 001A  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 2030  
                           __pidataBANK0 2902                             __pidataBANK1 2920  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 256C                                ?_TMR1_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 280C  __size_of_FastTransfer_buffer_modulo_inc 002E  
         _FastTransfer_buffer_modulo_inc 27DE             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 002C                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                    Battery_Get@channelnum 00C7  
                  __end_of_UART_buff_get 23AA                   ??_EUSART1_Transmit_ISR 000C  
                _ADC_GetConversionResult 2A10                    __end_of_UART_buff_put 1D52  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 243E  
                __end_ofi2_UART_buff_put 1E6E              __end_of_EUSART1_Receive_ISR 297A  
              _FastTransfer_buffer_flush 24AA                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                __end_of_SYSTEM_Initialize 24AA  
                 receiveData@holder_1107 00CB                      _addressErrorCounter 008C  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                               __pbssBANK5 0500  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 2A4A  
                              ?_Set_4051 0001                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 2868  
                      begin@givenAddress 00C4                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0026                  __size_of_UART_buff_size 0018  
                              ?_Send_put 0001                     __size_of_receiveData 0638  
                                ?_ToSend 00D9                       __CFG_CCP2MX$PORTC1 000000  
                                ?___wmul 001B                         ?_TMR1_StartTimer 0001  
                             ??_TMR1_ISR 0001                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  _ADC_ISR 0C56  
                                ?_memset 001B                               _crc_buffer 00B0  
                              ?___ftpack 001B                  __size_of_ADC_Initialize 0018  
                     UART_buff_put@_this 0021                         i2_UART_buff_size 29F8  
            i2UART_buff_modulo_inc@value 0001                                  _OSCCON2 000FD2  
                      _Receive_available 29B0             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                      sendData@whereToSend 0028  
                    _receiveArrayAddress 0096                       ?_Receive_available 001D  
                             begin@error 00C5                             ?_Battery_Get 00C7  
                             ??_Set_4051 0003                              _Temp_Aquire 003A  
                    ??_Receive_available 001F                                ?_sendData 0001  
                      _alignErrorCounter 008E                          __CFG_PWRTEN$OFF 000000  
                             ??_Send_put 0026                                  __Hparam 0000  
                                __Lparam 0000                          __size_of_ToSend 001C  
                   __end_of_Receive_peek 2A4A                                _AKNAKsend 0039  
                                ___awdiv 2280                     _UART_buff_modulo_inc 27B0  
                        __size_of___wmul 0028                                  ___ftmul 1B08  
                                ___fttol 1884                                  _calc_CS 003C  
                           __psmallconst 0600                ??_ADC_GetConversionResult 0003  
                                __pcinit 21D0                               ??___ftpack 0020  
                        __size_of_memset 002E                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 2A26  
                                __ptext1 11EA                                  __ptext2 19D6  
                                __ptext3 1F56                                  __ptext4 24AA  
                                __ptext5 061E                                  __ptext6 2750  
                                __ptext7 1C36                                  __ptext8 2A3A  
                                __ptext9 28BA                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 2A5A  
              __end_of_Receive_available 29C8                  _FastTransfer_buffer_put 171A  
                  CRCcheck@calculatedCRC 00C2                       _EUSART1_Initialize 26A8  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 001B  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 006C                     end_of_initialization 2276  
                              Delay@wait 0020                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                             ??_sendData 0027                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 03C2                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                         begin@stufftosend 00C6  
                    CRCcheck@arrayHolder 00C3                     ??_EUSART1_Initialize 0025  
                 _dataAdressErrorCounter 0092                               _rx_address 0040  
                              _TRISCbits 000F94                      _ADC_StartConversion 2996  
                            _Volt_Aquire 003B                             begin@maxSize 00C3  
     __size_of_FastTransfer_buffer_flush 0064                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 293E                           _UART_buff_peek 28BA  
                         _UART_buff_size 29C8                      __end_of_crcBufS_get 1F56  
                    __end_of_crcBufS_put 2030                        __size_of_CRCcheck 016E  
                           Delay@d_lenth 001B                              ___ftmul@exp 00C1  
                   ?_ADC_StartConversion 0001                            _moduleAddress 003E  
                             CRCcheck@rt 00C6                           __end_of_ToSend 2996  
           __end_of_INTERRUPT_Initialize 2A74                          _crcErrorCounter 0090  
                         __end_of___wmul 28BA                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 2A78                        __size_of_TMR1_ISR 002A  
                         _ADC_Initialize 29E0                ??_FastTransfer_buffer_put 0026  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_memset 283A  
                      crcBufS_put@status 001F                             receiveData@r 00D2  
             __size_of_Receive_available 0018                             receiveData@u 00D0  
                    start_initialization 21D0          __size_of_PIN_MANAGER_Initialize 0052  
                  crcBufS_get@wantedTime 0025                   __size_of_Tempeture_Get 0030  
                 __end_of_UART_buff_init 295C                   __end_of_UART_buff_peek 28E0  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 29E0  
                           ?_Receive_get 0001                           UART_buff_put@c 0023  
                  __size_of_Receive_peek 0010                     __size_of_Battery_Get 004C  
               __end_ofi2_UART_buff_size 2A10                        __size_of_Set_4051 0038  
                              _Temp_DegF 01A0                         _PrevBattery_Volt 0100  
                              _Temp_Done 0088                    ??_ADC_StartConversion 0001  
                               ??_ToSend 002C                   ??_UART_buff_modulo_inc 001F  
               __size_of_TMR1_Initialize 0022                                 CRC8@data 001B  
                        crcBufS_get@time 001D                        __size_of_Send_put 0030  
                               ??___wmul 001F                   __end_of_ADC_Initialize 29F8  
                            __pdataBANK0 00E0                              __pdataBANK1 01A0  
                               ?_ADC_ISR 0001                                 ??_memset 0021  
                      __size_of___ftpack 00C6                                _Volt_Done 008A  
                            __pbssCOMRAM 002D            __size_of_EUSART1_Transmit_ISR 0034  
                          __pcstackBANK0 00C1                             _Receive_peek 2A3A  
                    UART_buff_init@_this 0023                            _PrevTemp_DegF 011E  
                            _crcBufS_get 1E6E                      UART_buff_peek@_this 001B  
                            _crcBufS_put 1F56                          ?_UART_buff_init 0023  
                        ?_UART_buff_peek 001B                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 001E                            ??_receiveData 0027  
            __size_of_crcBufS_status_put 00DA                               sendData@CS 0029  
                 __size_of_UART_buff_get 0094                   __size_of_UART_buff_put 011C  
                 _PIN_MANAGER_Initialize 25BE                        __size_of_sendData 0132  
                              __pintcode 0008                            _Tempeture_Get 2780  
                               ?___awdiv 001B                                 ?___ftmul 0023  
                               ?___fttol 00CA                          ?_ADC_Initialize 0001  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                              __smallconst 0600  
               __size_of_TMR1_StartTimer 0004                           __size_of_Delay 004C  
                         __size_of_begin 005E                     _INTERRUPT_Initialize 2A68  
                           _receiveArray 013C                                 _CRCcheck 15AC  
                         ___wmul@product 001F                                 _LATAbits 000F89  
                               _LATEbits 000F8D                      UART_buff_size@_this 001B  
                               _IPR1bits 000F9F                                 _PIE1bits 000F9D  
                               i2u123_40 2886                                 i2u303_40 2736  
    __size_of_INTERRUPT_InterruptManager 00A2                                 _PIR1bits 000F9E  
                               i2u299_40 23C8                      begin@stuffavailable 00CA  
                         ?_Tempeture_Get 0021                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0C56  
                               _TMR1_ISR 2868           FastTransfer_buffer_flush@_this 0023  
                           _input_buffer 0400                                _rx_buffer 0300  
                      ??_TMR1_Initialize 001B                         __size_of_ADC_ISR 0594  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 001B  
                   i2UART_buff_put@_this 0007                            _UART_buff_get 2316  
                          _UART_buff_put 1C36                 ??i2_UART_buff_modulo_inc 0005  
                            _INTCON2bits 000FF1                                copy_data0 2238  
                              copy_data1 2258                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 0098                 __size_ofi2_UART_buff_get 0094  
                               _Set_4051 26E4                 __size_ofi2_UART_buff_put 011C  
                          ??_updateComms 002D                     __size_of_Receive_get 0010  
                               __Hrparam 0000                                 _Send_put 2750  
                               _Temp_Adc 009C                                 __Lrparam 0000  
               ?_ADC_GetConversionResult 0001                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                       __size_of___awdiv 0096                         __size_of___ftmul 012E  
                       __size_of___fttol 0152              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 00C8                                 ___ftpack 210A  
                         ?_UART_buff_get 0021                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 002A  
               crcBufS_status_put@status 001E                                 __ptext10 15AC  
                               __ptext11 2030                                 __ptext20 297A  
                               __ptext12 1E6E                                 __ptext21 171A  
                               __ptext13 2A4A                               _T1GCONbits 000FCC  
                               __ptext30 250E                                 __ptext22 27DE  
                               __ptext14 2316                                 __ptext31 2280  
                               __ptext23 2780                                 __ptext15 27B0  
                               __ptext40 29E0                                 __ptext32 28E0  
                               __ptext24 2610                                 __ptext16 29B0  
                               __ptext33 2A74                                 __ptext25 265C  
                               __ptext17 29C8                                 __ptext50 26E4  
                               __ptext42 2868                                 __ptext34 25BE  
                               __ptext26 2892                                 __ptext18 256C  
                               __ptext51 2996                                 __ptext43 271C  
                               __ptext35 2A5A                                 __ptext27 1B08  
                               __ptext19 1884                                 __ptext52 2A10  
                               __ptext44 29F8                                 __ptext36 2A68  
                               __ptext28 210A                                 __ptext53 0000  
                               __ptext45 23AA                                 __ptext37 26A8  
                               __ptext29 243E                                 __ptext46 295C  
                               __ptext38 293E                                 __ptext47 1D52  
                               __ptext39 280C                                 __ptext48 283A  
                               __ptext49 0C56                        ??_TMR1_StartTimer 001B  
                          __size_of_CRC8 0052                                 begin@ptr 00C1  
                EUSART1_Receive_ISR@data 000C                            _returnAddress 003F  
                          __size_of_main 0014                              _receiveData 061E  
                         _Transmit_stall 0045                                 _sendData 19D6  
                           _TmpTemp_DegF 0182                          ??_Tempeture_Get 0024  
                      ?i2_UART_buff_size 0001                               _RC1STAbits 000FAB  
                     ??i2_UART_buff_size 0003                             _serial_write 0035  
                    __end_of_updateComms 15AC       __end_of_INTERRUPT_InterruptManager 00AA  
             _INTERRUPT_InterruptManager 0008                                 main@argc 00DB  
                               main@argv 00DD                      _EUSART1_Receive_ISR 295C  
                      receiveData@holder 00C8                                 log@coeff 0601  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0031  
        __size_ofi2_UART_buff_modulo_inc 002E                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                            ??_Battery_Get 002C  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                          _CountCallBack 002F                     ?_EUSART1_Receive_ISR 0001  
            __end_of_ADC_StartConversion 29B0   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                         _TempBattery_Volt 0164  
                ?_PIN_MANAGER_Initialize 0001          __end_of_ADC_GetConversionResult 2A26  
           __end_of_EUSART1_Transmit_ISR 2750                              _ring_buffer 0200  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 0023  
                      ??i2_UART_buff_get 0009                              _serial_peek 009A  
                            _serial_read 0033                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002E  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
              receiveData@crcHolder_1108 00CF                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003D               __end_of_crcBufS_status_put 210A  
                  ??_EUSART1_Receive_ISR 000C           __end_of_PIN_MANAGER_Initialize 2610  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                      __CFG_FOSC$INTIO67 000000                          _TMR1_Initialize 28E0  
                            _updateComms 11EA                         _ADC_Buffer_Point 002D  
                    __end_of_Battery_Get 26A8                          Set_4051@Channel 0001  
