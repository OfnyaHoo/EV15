

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Jun 10 20:14:45 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74  0000                     
    75                           	psect	idataCOMRAM
    76  0029E8                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _Transmit_stall
    80  0029E8  01                 	db	1
    81                           
    82                           	psect	smallconst
    83  000600                     __psmallconst:
    84                           	opt stack 0
    85  000600  00                 	db	0
    86  000601                     log@coeff:
    87                           	opt stack 0
    88  000601  00                 	db	0
    89  000602  00                 	db	0
    90  000603  00                 	db	0
    91  000604  00                 	db	0
    92  000605  80                 	db	128
    93  000606  3F                 	db	63
    94  000607  F0                 	db	240
    95  000608  FF                 	db	255
    96  000609  BE                 	db	190
    97  00060A  E2                 	db	226
    98  00060B  A9                 	db	169
    99  00060C  3E                 	db	62
   100  00060D  83                 	db	131
   101  00060E  76                 	db	118
   102  00060F  BE                 	db	190
   103  000610  AE                 	db	174
   104  000611  2B                 	db	43
   105  000612  3E                 	db	62
   106  000613  3C                 	db	60
   107  000614  C3                 	db	195
   108  000615  BD                 	db	189
   109  000616  D2                 	db	210
   110  000617  13                 	db	19
   111  000618  3D                 	db	61
   112  000619  78                 	db	120
   113  00061A  D3                 	db	211
   114  00061B  BB                 	db	187
   115  00061C                     __end_oflog@coeff:
   116                           	opt stack 0
   117  0000                     _ANSELA	set	3896
   118  0000                     _ANSELB	set	3897
   119  0000                     _ANSELC	set	3898
   120  0000                     _ANSELD	set	3899
   121  0000                     _ANSELE	set	3900
   122  0000                     _TMR1	set	4046
   123  0000                     _ADCON0	set	4034
   124  0000                     _ADCON0bits	set	4034
   125  0000                     _ADCON1	set	4033
   126  0000                     _ADCON2	set	4032
   127  0000                     _ADRESH	set	4036
   128  0000                     _ADRESL	set	4035
   129  0000                     _BAUD1CON	set	4024
   130  0000                     _INTCON2bits	set	4081
   131  0000                     _INTCONbits	set	4082
   132  0000                     _IPR1bits	set	3999
   133  0000                     _LATA	set	3977
   134  0000                     _LATAbits	set	3977
   135  0000                     _LATB	set	3978
   136  0000                     _LATC	set	3979
   137  0000                     _LATD	set	3980
   138  0000                     _LATE	set	3981
   139  0000                     _LATEbits	set	3981
   140  0000                     _OSCCON	set	4051
   141  0000                     _OSCCON2	set	4050
   142  0000                     _OSCTUNE	set	3995
   143  0000                     _PIE1bits	set	3997
   144  0000                     _PIR1bits	set	3998
   145  0000                     _RC1STA	set	4011
   146  0000                     _RC1STAbits	set	4011
   147  0000                     _RCONbits	set	4048
   148  0000                     _RCREG1	set	4014
   149  0000                     _SPBRG1	set	4015
   150  0000                     _SPBRGH1	set	4016
   151  0000                     _T1CON	set	4045
   152  0000                     _T1CONbits	set	4045
   153  0000                     _T1GCON	set	4044
   154  0000                     _T1GCONbits	set	4044
   155  0000                     _TMR1H	set	4047
   156  0000                     _TMR1L	set	4046
   157  0000                     _TRISA	set	3986
   158  0000                     _TRISB	set	3987
   159  0000                     _TRISC	set	3988
   160  0000                     _TRISCbits	set	3988
   161  0000                     _TRISD	set	3989
   162  0000                     _TRISE	set	3990
   163  0000                     _TX1STA	set	4012
   164  0000                     _TXREG1	set	4013
   165  0000                     _WPUB	set	3937
   166  0000                     _LATA0	set	31816
   167  0000                     _LATA6	set	31822
   168  0000                     _LATB0	set	31824
   169  0000                     _LATB1	set	31825
   170  0000                     _LATB3	set	31827
   171  0000                     _LATC0	set	31832
   172  0000                     _LATC1	set	31833
   173  0000                     _LATC4	set	31836
   174  0000                     _LATC5	set	31837
   175  0000                     _LATD1	set	31841
   176  0000                     _LATD2	set	31842
   177  0000                     _LATD3	set	31843
   178  0000                     _LATD5	set	31845
   179                           
   180                           ; #config settings
   181  00061C  00                 	db	0	; dummy byte at the end
   182  0000                     
   183                           	psect	cinit
   184  00237A                     __pcinit:
   185                           	opt stack 0
   186  00237A                     start_initialization:
   187                           	opt stack 0
   188  00237A                     __initialization:
   189                           	opt stack 0
   190                           
   191                           ; Clear objects allocated to BANK5 (206 bytes)
   192  00237A  EE05  F000         	lfsr	0,__pbssBANK5
   193  00237E  0ECE               	movlw	206
   194  002380                     clear_0:
   195  002380  6AEE               	clrf	postinc0,c
   196  002382  06E8               	decf	wreg,f,c
   197  002384  E1FD               	bnz	clear_0
   198                           
   199                           ; Clear objects allocated to BANK4 (206 bytes)
   200  002386  EE04  F000         	lfsr	0,__pbssBANK4
   201  00238A  0ECE               	movlw	206
   202  00238C                     clear_1:
   203  00238C  6AEE               	clrf	postinc0,c
   204  00238E  06E8               	decf	wreg,f,c
   205  002390  E1FD               	bnz	clear_1
   206                           
   207                           ; Clear objects allocated to BANK3 (200 bytes)
   208  002392  EE03  F000         	lfsr	0,__pbssBANK3
   209  002396  0EC8               	movlw	200
   210  002398                     clear_2:
   211  002398  6AEE               	clrf	postinc0,c
   212  00239A  06E8               	decf	wreg,f,c
   213  00239C  E1FD               	bnz	clear_2
   214                           
   215                           ; Clear objects allocated to BANK2 (206 bytes)
   216  00239E  EE02  F000         	lfsr	0,__pbssBANK2
   217  0023A2  0ECE               	movlw	206
   218  0023A4                     clear_3:
   219  0023A4  6AEE               	clrf	postinc0,c
   220  0023A6  06E8               	decf	wreg,f,c
   221  0023A8  E1FD               	bnz	clear_3
   222                           
   223                           ; Clear objects allocated to BANK1 (190 bytes)
   224  0023AA  EE01  F000         	lfsr	0,__pbssBANK1
   225  0023AE  0EBE               	movlw	190
   226  0023B0                     clear_4:
   227  0023B0  6AEE               	clrf	postinc0,c
   228  0023B2  06E8               	decf	wreg,f,c
   229  0023B4  E1FD               	bnz	clear_4
   230                           
   231                           ; Clear objects allocated to BANK0 (127 bytes)
   232  0023B6  EE00  F060         	lfsr	0,__pbssBANK0
   233  0023BA  0E7F               	movlw	127
   234  0023BC                     clear_5:
   235  0023BC  6AEE               	clrf	postinc0,c
   236  0023BE  06E8               	decf	wreg,f,c
   237  0023C0  E1FD               	bnz	clear_5
   238                           
   239                           ; Clear objects allocated to COMRAM (24 bytes)
   240  0023C2  EE00  F02D         	lfsr	0,__pbssCOMRAM
   241  0023C6  0E18               	movlw	24
   242  0023C8                     clear_6:
   243  0023C8  6AEE               	clrf	postinc0,c
   244  0023CA  06E8               	decf	wreg,f,c
   245  0023CC  E1FD               	bnz	clear_6
   246                           
   247                           ; Initialize objects allocated to COMRAM (1 bytes)
   248                           ; load TBLPTR registers with __pidataCOMRAM
   249  0023CE  0EE8               	movlw	low __pidataCOMRAM
   250  0023D0  6EF6               	movwf	tblptrl,c
   251  0023D2  0E29               	movlw	high __pidataCOMRAM
   252  0023D4  6EF7               	movwf	tblptrh,c
   253  0023D6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   254  0023D8  6EF8               	movwf	tblptru,c
   255  0023DA  0009               	tblrd		*+	;fetch initializer
   256  0023DC  CFF5 F045          	movff	tablat,__pdataCOMRAM
   257  0023E0                     end_of_initialization:
   258                           	opt stack 0
   259  0023E0                     __end_of__initialization:
   260                           	opt stack 0
   261  0023E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   262  0023E2  6EF8               	movwf	tblptru,c
   263  0023E4  0100               	movlb	0
   264  0023E6  EFCB  F014         	goto	_main	;jump to C main() function
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	bssCOMRAM
   273  00002D                     __pbssCOMRAM:
   274                           	opt stack 0
   275  00002D                     _ADC_Buffer_Point:
   276                           	opt stack 0
   277  00002D                     	ds	2
   278  00002F                     _CountCallBack:
   279                           	opt stack 0
   280  00002F                     	ds	2
   281  000031                     _serial_available:
   282                           	opt stack 0
   283  000031                     	ds	2
   284  000033                     _serial_read:
   285                           	opt stack 0
   286  000033                     	ds	2
   287  000035                     _serial_write:
   288                           	opt stack 0
   289  000035                     	ds	2
   290  000037                     _timer1ReloadVal:
   291                           	opt stack 0
   292  000037                     	ds	2
   293  000039                     _AKNAKsend:
   294                           	opt stack 0
   295  000039                     	ds	1
   296  00003A                     _Temp_Aquire:
   297                           	opt stack 0
   298  00003A                     	ds	1
   299  00003B                     _Volt_Aquire:
   300                           	opt stack 0
   301  00003B                     	ds	1
   302  00003C                     _calc_CS:
   303                           	opt stack 0
   304  00003C                     	ds	1
   305  00003D                     _maxDataAddress:
   306                           	opt stack 0
   307  00003D                     	ds	1
   308  00003E                     _moduleAddress:
   309                           	opt stack 0
   310  00003E                     	ds	1
   311  00003F                     _returnAddress:
   312                           	opt stack 0
   313  00003F                     	ds	1
   314  000040                     _rx_address:
   315                           	opt stack 0
   316  000040                     	ds	1
   317  000041                     _rx_array_inx:
   318                           	opt stack 0
   319  000041                     	ds	1
   320  000042                     _rx_len:
   321                           	opt stack 0
   322  000042                     	ds	1
   323  000043                     _group:
   324                           	opt stack 0
   325  000043                     	ds	2
   326                           tblptru	equ	0xFF8
   327                           tblptrh	equ	0xFF7
   328                           tblptrl	equ	0xFF6
   329                           tablat	equ	0xFF5
   330                           postinc0	equ	0xFEE
   331                           wreg	equ	0xFE8
   332                           
   333                           	psect	dataCOMRAM
   334  000045                     __pdataCOMRAM:
   335                           	opt stack 0
   336  000045                     _Transmit_stall:
   337                           	opt stack 0
   338  000045                     	ds	1
   339                           tblptru	equ	0xFF8
   340                           tblptrh	equ	0xFF7
   341                           tblptrl	equ	0xFF6
   342                           tablat	equ	0xFF5
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           
   346                           	psect	bssBANK0
   347  000060                     __pbssBANK0:
   348                           	opt stack 0
   349  000060                     _Battery_Adc:
   350                           	opt stack 0
   351  000060                     	ds	40
   352  000088                     _Battery_Volt:
   353                           	opt stack 0
   354  000088                     	ds	30
   355  0000A6                     _Temp_Done:
   356                           	opt stack 0
   357  0000A6                     	ds	2
   358  0000A8                     _Volt_Done:
   359                           	opt stack 0
   360  0000A8                     	ds	2
   361  0000AA                     _addressErrorCounter:
   362                           	opt stack 0
   363  0000AA                     	ds	2
   364  0000AC                     _alignErrorCounter:
   365                           	opt stack 0
   366  0000AC                     	ds	2
   367  0000AE                     _crcErrorCounter:
   368                           	opt stack 0
   369  0000AE                     	ds	2
   370  0000B0                     _dataAdressErrorCounter:
   371                           	opt stack 0
   372  0000B0                     	ds	2
   373  0000B2                     _errno:
   374                           	opt stack 0
   375  0000B2                     	ds	2
   376  0000B4                     _receiveArrayAddress:
   377                           	opt stack 0
   378  0000B4                     	ds	2
   379  0000B6                     _sendStructAddress:
   380                           	opt stack 0
   381  0000B6                     	ds	2
   382  0000B8                     _serial_peek:
   383                           	opt stack 0
   384  0000B8                     	ds	2
   385  0000BA                     _Temp_Adc:
   386                           	opt stack 0
   387  0000BA                     	ds	20
   388  0000CE                     _crc_buffer:
   389                           	opt stack 0
   390  0000CE                     	ds	17
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           
   398                           	psect	bssBANK1
   399  000100                     __pbssBANK1:
   400                           	opt stack 0
   401  000100                     _PrevBattery_Volt:
   402                           	opt stack 0
   403  000100                     	ds	30
   404  00011E                     _PrevTemp_DegF:
   405                           	opt stack 0
   406  00011E                     	ds	30
   407  00013C                     _Temp_DegF:
   408                           	opt stack 0
   409  00013C                     	ds	30
   410  00015A                     _receiveArray:
   411                           	opt stack 0
   412  00015A                     	ds	40
   413  000182                     _TempBattery_Volt:
   414                           	opt stack 0
   415  000182                     	ds	30
   416  0001A0                     _TmpTemp_DegF:
   417                           	opt stack 0
   418  0001A0                     	ds	30
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           
   426                           	psect	bssBANK2
   427  000200                     __pbssBANK2:
   428                           	opt stack 0
   429  000200                     _ring_buffer:
   430                           	opt stack 0
   431  000200                     	ds	206
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           
   439                           	psect	bssBANK3
   440  000300                     __pbssBANK3:
   441                           	opt stack 0
   442  000300                     _rx_buffer:
   443                           	opt stack 0
   444  000300                     	ds	200
   445                           tblptru	equ	0xFF8
   446                           tblptrh	equ	0xFF7
   447                           tblptrl	equ	0xFF6
   448                           tablat	equ	0xFF5
   449                           postinc0	equ	0xFEE
   450                           wreg	equ	0xFE8
   451                           
   452                           	psect	bssBANK4
   453  000400                     __pbssBANK4:
   454                           	opt stack 0
   455  000400                     _input_buffer:
   456                           	opt stack 0
   457  000400                     	ds	206
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           wreg	equ	0xFE8
   464                           
   465                           	psect	bssBANK5
   466  000500                     __pbssBANK5:
   467                           	opt stack 0
   468  000500                     _output_buffer:
   469                           	opt stack 0
   470  000500                     	ds	206
   471                           tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           
   478                           	psect	cstackBANK0
   479  0000DF                     __pcstackBANK0:
   480                           	opt stack 0
   481  0000DF                     CRCcheck@SentCRC:
   482                           	opt stack 0
   483  0000DF                     ___ftmul@exp:
   484                           	opt stack 0
   485  0000DF                     begin@ptr:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x0
   489  0000DF                     	ds	1
   490  0000E0                     CRCcheck@calculatedCRC:
   491                           	opt stack 0
   492  0000E0                     ___ftmul@f3_as_product:
   493                           	opt stack 0
   494                           
   495                           ; 3 bytes @ 0x1
   496  0000E0                     	ds	1
   497  0000E1                     begin@maxSize:
   498                           	opt stack 0
   499  0000E1                     CRCcheck@arrayHolder:
   500                           	opt stack 0
   501                           
   502                           ; 3 bytes @ 0x2
   503  0000E1                     	ds	1
   504  0000E2                     begin@givenAddress:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x3
   508  0000E2                     	ds	1
   509  0000E3                     begin@error:
   510                           	opt stack 0
   511  0000E3                     ___ftmul@cntr:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x4
   515  0000E3                     	ds	1
   516  0000E4                     ___ftmul@sign:
   517                           	opt stack 0
   518  0000E4                     begin@stufftosend:
   519                           	opt stack 0
   520  0000E4                     CRCcheck@rt:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x5
   524  0000E4                     	ds	1
   525  0000E5                     ?_Battery_Get:
   526                           	opt stack 0
   527  0000E5                     Battery_Get@channelnum:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x6
   531  0000E5                     	ds	1
   532  0000E6                     begin@stufftoreceive:
   533                           	opt stack 0
   534  0000E6                     receiveData@holder:
   535                           	opt stack 0
   536                           
   537                           ; 3 bytes @ 0x7
   538  0000E6                     	ds	2
   539  0000E8                     ?___fttol:
   540                           	opt stack 0
   541  0000E8                     begin@stuffavailable:
   542                           	opt stack 0
   543  0000E8                     ___fttol@f1:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0x9
   547  0000E8                     	ds	1
   548  0000E9                     receiveData@holder_1107:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0xA
   552  0000E9                     	ds	1
   553  0000EA                     begin@stuffpeek:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0xB
   557  0000EA                     	ds	2
   558  0000EC                     ??___fttol:
   559  0000EC                     receiveData@crcHolder:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0xD
   563  0000EC                     	ds	1
   564  0000ED                     receiveData@crcHolder_1108:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0xE
   568  0000ED                     	ds	1
   569  0000EE                     receiveData@u:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0xF
   573  0000EE                     	ds	2
   574  0000F0                     receiveData@r:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x11
   578  0000F0                     	ds	1
   579  0000F1                     ___fttol@sign1:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x12
   583  0000F1                     	ds	1
   584  0000F2                     ___fttol@lval:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0x13
   588  0000F2                     	ds	4
   589  0000F6                     ___fttol@exp1:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x17
   593  0000F6                     	ds	1
   594  0000F7                     ToSend@what:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x18
   598  0000F7                     	ds	2
   599  0000F9                     
   600                           ; 2 bytes @ 0x1A
   601  0000F9                     	ds	2
   602  0000FB                     
   603                           ; 3 bytes @ 0x1C
   604  0000FB                     	ds	3
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           
   612                           	psect	cstackCOMRAM
   613  000001                     __pcstackCOMRAM:
   614                           	opt stack 0
   615  000001                     ??_ADC_StartConversion:
   616  000001                     ?_ADC_GetConversionResult:
   617                           	opt stack 0
   618  000001                     ?i2_UART_buff_size:
   619                           	opt stack 0
   620  000001                     ?i2_UART_buff_modulo_inc:
   621                           	opt stack 0
   622  000001                     Set_4051@Channel:
   623                           	opt stack 0
   624  000001                     i2UART_buff_size@_this:
   625                           	opt stack 0
   626  000001                     i2UART_buff_modulo_inc@value:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x0
   630  000001                     	ds	1
   631  000002                     ADC_StartConversion@channel:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x1
   635  000002                     	ds	1
   636  000003                     ??_Set_4051:
   637  000003                     ??_ADC_GetConversionResult:
   638  000003                     i2UART_buff_modulo_inc@modulus:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x2
   642  000003                     	ds	2
   643  000005                     ??_ADC_ISR:
   644  000005                     i2UART_buff_modulo_inc@my_value:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x4
   648  000005                     	ds	2
   649  000007                     i2UART_buff_put@_this:
   650                           	opt stack 0
   651  000007                     i2UART_buff_get@_this:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x6
   655  000007                     	ds	2
   656  000009                     ??i2_UART_buff_get:
   657  000009                     i2UART_buff_put@c:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x8
   661  000009                     	ds	1
   662  00000A                     ??i2_UART_buff_put:
   663                           
   664                           ; 0 bytes @ 0x9
   665  00000A                     	ds	1
   666  00000B                     i2UART_buff_get@c:
   667                           	opt stack 0
   668  00000B                     ADC_ISR@ADC_Result:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0xA
   672  00000B                     	ds	1
   673  00000C                     EUSART1_Receive_ISR@data:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0xB
   677  00000C                     	ds	1
   678  00000D                     ??_INTERRUPT_InterruptManager:
   679                           
   680                           ; 0 bytes @ 0xC
   681  00000D                     	ds	14
   682  00001B                     ?_FastTransfer_buffer_modulo_inc:
   683                           	opt stack 0
   684  00001B                     ?_UART_buff_modulo_inc:
   685                           	opt stack 0
   686  00001B                     ?_UART_buff_size:
   687                           	opt stack 0
   688  00001B                     ?___wmul:
   689                           	opt stack 0
   690  00001B                     ?___awdiv:
   691                           	opt stack 0
   692  00001B                     ?___ftpack:
   693                           	opt stack 0
   694  00001B                     CRC8@data:
   695                           	opt stack 0
   696  00001B                     FastTransfer_buffer_modulo_inc@value:
   697                           	opt stack 0
   698  00001B                     crcBufS_put@_this:
   699                           	opt stack 0
   700  00001B                     crcBufS_status_put@_this:
   701                           	opt stack 0
   702  00001B                     crcBufS_get@_this:
   703                           	opt stack 0
   704  00001B                     UART_buff_size@_this:
   705                           	opt stack 0
   706  00001B                     UART_buff_modulo_inc@value:
   707                           	opt stack 0
   708  00001B                     UART_buff_peek@_this:
   709                           	opt stack 0
   710  00001B                     ___wmul@multiplier:
   711                           	opt stack 0
   712  00001B                     ___awdiv@dividend:
   713                           	opt stack 0
   714  00001B                     memset@p1:
   715                           	opt stack 0
   716  00001B                     ___ftpack@arg:
   717                           	opt stack 0
   718  00001B                     Delay@d_lenth:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x1A
   722  00001B                     	ds	2
   723  00001D                     ??_UART_buff_peek:
   724  00001D                     ?_Receive_available:
   725                           	opt stack 0
   726  00001D                     CRC8@len:
   727                           	opt stack 0
   728  00001D                     crcBufS_put@address:
   729                           	opt stack 0
   730  00001D                     crcBufS_status_put@time:
   731                           	opt stack 0
   732  00001D                     crcBufS_get@time:
   733                           	opt stack 0
   734  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   735                           	opt stack 0
   736  00001D                     UART_buff_modulo_inc@modulus:
   737                           	opt stack 0
   738  00001D                     ___wmul@multiplicand:
   739                           	opt stack 0
   740  00001D                     ___awdiv@divisor:
   741                           	opt stack 0
   742  00001D                     memset@c:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x1C
   746  00001D                     	ds	1
   747  00001E                     CRC8@sum:
   748                           	opt stack 0
   749  00001E                     crcBufS_put@oldCRC:
   750                           	opt stack 0
   751  00001E                     crcBufS_status_put@status:
   752                           	opt stack 0
   753  00001E                     crcBufS_get@space:
   754                           	opt stack 0
   755  00001E                     ___ftpack@exp:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x1D
   759  00001E                     	ds	1
   760  00001F                     ??_crcBufS_get:
   761  00001F                     ??_Delay:
   762  00001F                     ??_crcBufS_status_put:
   763  00001F                     CRC8@extract:
   764                           	opt stack 0
   765  00001F                     crcBufS_put@status:
   766                           	opt stack 0
   767  00001F                     ___awdiv@counter:
   768                           	opt stack 0
   769  00001F                     ___ftpack@sign:
   770                           	opt stack 0
   771  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   772                           	opt stack 0
   773  00001F                     UART_buff_modulo_inc@my_value:
   774                           	opt stack 0
   775  00001F                     ___wmul@product:
   776                           	opt stack 0
   777  00001F                     memset@n:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x1E
   781  00001F                     	ds	1
   782  000020                     ??_crcBufS_put:
   783  000020                     ??___ftpack:
   784  000020                     CRC8@tempI:
   785                           	opt stack 0
   786  000020                     ___awdiv@sign:
   787                           	opt stack 0
   788  000020                     Delay@wait:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x1F
   792  000020                     	ds	1
   793  000021                     ?_Tempeture_Get:
   794                           	opt stack 0
   795  000021                     CRC8@crc:
   796                           	opt stack 0
   797  000021                     Tempeture_Get@channelnum:
   798                           	opt stack 0
   799  000021                     FastTransfer_buffer_put@_this:
   800                           	opt stack 0
   801  000021                     UART_buff_put@_this:
   802                           	opt stack 0
   803  000021                     UART_buff_get@_this:
   804                           	opt stack 0
   805  000021                     ___awdiv@quotient:
   806                           	opt stack 0
   807  000021                     memset@p:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x20
   811  000021                     	ds	2
   812  000023                     ??_UART_buff_get:
   813  000023                     ?___ftmul:
   814                           	opt stack 0
   815  000023                     FastTransfer_buffer_put@towhere:
   816                           	opt stack 0
   817  000023                     UART_buff_put@c:
   818                           	opt stack 0
   819  000023                     FastTransfer_buffer_flush@_this:
   820                           	opt stack 0
   821  000023                     crcBufS_status_put@wantedTime:
   822                           	opt stack 0
   823  000023                     UART_buff_init@_this:
   824                           	opt stack 0
   825  000023                     ___ftmul@f1:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x22
   829  000023                     	ds	1
   830  000024                     ??_UART_buff_put:
   831  000024                     FastTransfer_buffer_put@towhat:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x23
   835  000024                     	ds	1
   836  000025                     UART_buff_get@c:
   837                           	opt stack 0
   838  000025                     FastTransfer_buffer_flush@clearBuffer:
   839                           	opt stack 0
   840  000025                     crcBufS_get@wantedTime:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x24
   844  000025                     	ds	1
   845  000026                     ??_FastTransfer_buffer_put:
   846  000026                     Send_put@_data:
   847                           	opt stack 0
   848  000026                     ___ftmul@f2:
   849                           	opt stack 0
   850                           
   851                           ; 3 bytes @ 0x25
   852  000026                     	ds	1
   853  000027                     ??_sendData:
   854  000027                     ??_receiveData:
   855                           
   856                           ; 0 bytes @ 0x26
   857  000027                     	ds	1
   858  000028                     sendData@whereToSend:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x27
   862  000028                     	ds	1
   863  000029                     ??___ftmul:
   864  000029                     sendData@CS:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x28
   868  000029                     	ds	1
   869  00002A                     sendData@i:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x29
   873  00002A                     	ds	2
   874  00002C                     ToSend@where:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x2B
   878  00002C                     	ds	1
   879  00002D                     tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           postinc0	equ	0xFEE
   884                           wreg	equ	0xFE8
   885                           
   886                           ; 0 bytes @ 0x2C
   887 ;;
   888 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   889 ;;
   890 ;; *************** function _main *****************
   891 ;; Defined at:
   892 ;;		line 30 in file "Main.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;  argc            2   26[BANK0 ] int 
   895 ;;  argv            3   28[BANK0 ] PTR PTR unsigned char 
   896 ;; Auto vars:     Size  Location     Type
   897 ;;		None
   898 ;; Return value:  Size  Location     Type
   899 ;;                  2   26[BANK0 ] int 
   900 ;; Registers used:
   901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   907 ;;      Params:         0       5       0       0       0       0       0
   908 ;;      Locals:         0       0       0       0       0       0       0
   909 ;;      Temps:          0       0       0       0       0       0       0
   910 ;;      Totals:         0       5       0       0       0       0       0
   911 ;;Total ram usage:        5 bytes
   912 ;; Hardware stack levels required when called:   10
   913 ;; This function calls:
   914 ;;		_SYSTEM_Initialize
   915 ;;		_updateComms
   916 ;; This function is called by:
   917 ;;		Startup code after reset
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text0
   922  002996                     __ptext0:
   923                           	opt stack 0
   924  002996                     _main:
   925                           	opt stack 21
   926                           
   927                           ;Main.c: 32: SYSTEM_Initialize();
   928                           
   929                           ;incstack = 0
   930  002996  ECF5  F011         	call	_SYSTEM_Initialize	;wreg free
   931                           
   932                           ;Main.c: 51: (INTCONbits.GIE = 1);
   933  00299A  8EF2               	bsf	intcon,7,c	;volatile
   934                           
   935                           ;Main.c: 54: (INTCONbits.PEIE = 1);
   936  00299C  8CF2               	bsf	intcon,6,c	;volatile
   937  00299E  D000               	goto	l4906
   938  0029A0                     l4906:
   939                           
   940                           ;Main.c: 65: {
   941                           ;Main.c: 85: updateComms();
   942  0029A0  ECF5  F008         	call	_updateComms	;wreg free
   943  0029A4  D7FD               	goto	l4906
   944                           
   945                           ;Main.c: 102: }
   946                           ;Main.c: 103: return (0);
   947                           ;	Return value of _main is never used
   948  0029A6  EF55  F000         	goto	start
   949  0029AA                     __end_of_main:
   950                           	opt stack 0
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           intcon	equ	0xFF2
   956                           postinc0	equ	0xFEE
   957                           wreg	equ	0xFE8
   958                           
   959 ;; *************** function _updateComms *****************
   960 ;; Defined at:
   961 ;;		line 12 in file "Communications.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;		None
   964 ;; Auto vars:     Size  Location     Type
   965 ;;		None
   966 ;; Return value:  Size  Location     Type
   967 ;;		None               void
   968 ;; Registers used:
   969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   975 ;;      Params:         0       0       0       0       0       0       0
   976 ;;      Locals:         0       0       0       0       0       0       0
   977 ;;      Temps:          0       0       0       0       0       0       0
   978 ;;      Totals:         0       0       0       0       0       0       0
   979 ;;Total ram usage:        0 bytes
   980 ;; Hardware stack levels used:    1
   981 ;; Hardware stack levels required when called:    9
   982 ;; This function calls:
   983 ;;		_Battery_Get
   984 ;;		_Delay
   985 ;;		_Tempeture_Get
   986 ;;		_ToSend
   987 ;;		___fttol
   988 ;;		_receiveData
   989 ;;		_sendData
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text1
   996  0011EA                     __ptext1:
   997                           	opt stack 0
   998  0011EA                     _updateComms:
   999                           	opt stack 21
  1000                           
  1001                           ;Communications.c: 15: if (receiveData()) {
  1002                           
  1003                           ;incstack = 0
  1004  0011EA  EC0F  F003         	call	_receiveData	;wreg free
  1005  0011EE  0900               	iorlw	0
  1006  0011F0  B4D8               	btfsc	status,2,c
  1007  0011F2  0012               	return	
  1008                           
  1009                           ;Communications.c: 16: LATEbits.LATE1 = 1;
  1010  0011F4  828D               	bsf	3981,1,c	;volatile
  1011                           
  1012                           ;Communications.c: 17: Delay(2);
  1013  0011F6  0E02               	movlw	2
  1014  0011F8  6E1B               	movwf	Delay@d_lenth,c
  1015  0011FA  0E00               	movlw	0
  1016  0011FC  6E1C               	movwf	Delay@d_lenth+1,c
  1017  0011FE  0E00               	movlw	0
  1018  001200  6E1D               	movwf	Delay@d_lenth+2,c
  1019  001202  0E00               	movlw	0
  1020  001204  6E1E               	movwf	Delay@d_lenth+3,c
  1021  001206  ECDE  F012         	call	_Delay	;wreg free
  1022                           
  1023                           ;Communications.c: 18: ToSend(0, 1);
  1024  00120A  0E00               	movlw	0
  1025  00120C  0100               	movlb	0	; () banked
  1026  00120E  6FF8               	movwf	(ToSend@what+1)& (0+255),b
  1027  001210  0E01               	movlw	1
  1028  001212  6FF7               	movwf	ToSend@what& (0+255),b
  1029  001214  0E00               	movlw	0
  1030  001216  EC75  F014         	call	_ToSend
  1031                           
  1032                           ;Communications.c: 19: ToSend(1, Battery_Get(0));
  1033  00121A  0E00               	movlw	0
  1034  00121C  0100               	movlb	0	; () banked
  1035  00121E  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1036  001220  0E00               	movlw	0
  1037  001222  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1038  001224  EC04  F013         	call	_Battery_Get	;wreg free
  1039  001228  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1040  00122C  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1041  001230  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1042  001234  EC38  F00C         	call	___fttol	;wreg free
  1043  001238  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1044  00123C  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1045  001240  0E01               	movlw	1
  1046  001242  EC75  F014         	call	_ToSend
  1047                           
  1048                           ;Communications.c: 20: ToSend(2, Battery_Get(1));
  1049  001246  0E00               	movlw	0
  1050  001248  0100               	movlb	0	; () banked
  1051  00124A  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1052  00124C  0E01               	movlw	1
  1053  00124E  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1054  001250  EC04  F013         	call	_Battery_Get	;wreg free
  1055  001254  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1056  001258  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1057  00125C  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1058  001260  EC38  F00C         	call	___fttol	;wreg free
  1059  001264  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1060  001268  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1061  00126C  0E02               	movlw	2
  1062  00126E  EC75  F014         	call	_ToSend
  1063                           
  1064                           ;Communications.c: 21: ToSend(3, Battery_Get(2));
  1065  001272  0E00               	movlw	0
  1066  001274  0100               	movlb	0	; () banked
  1067  001276  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1068  001278  0E02               	movlw	2
  1069  00127A  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1070  00127C  EC04  F013         	call	_Battery_Get	;wreg free
  1071  001280  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1072  001284  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1073  001288  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1074  00128C  EC38  F00C         	call	___fttol	;wreg free
  1075  001290  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1076  001294  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1077  001298  0E03               	movlw	3
  1078  00129A  EC75  F014         	call	_ToSend
  1079                           
  1080                           ;Communications.c: 22: ToSend(4, Battery_Get(3));
  1081  00129E  0E00               	movlw	0
  1082  0012A0  0100               	movlb	0	; () banked
  1083  0012A2  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1084  0012A4  0E03               	movlw	3
  1085  0012A6  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1086  0012A8  EC04  F013         	call	_Battery_Get	;wreg free
  1087  0012AC  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1088  0012B0  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1089  0012B4  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1090  0012B8  EC38  F00C         	call	___fttol	;wreg free
  1091  0012BC  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1092  0012C0  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1093  0012C4  0E04               	movlw	4
  1094  0012C6  EC75  F014         	call	_ToSend
  1095                           
  1096                           ;Communications.c: 23: ToSend(5, Battery_Get(4));
  1097  0012CA  0E00               	movlw	0
  1098  0012CC  0100               	movlb	0	; () banked
  1099  0012CE  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1100  0012D0  0E04               	movlw	4
  1101  0012D2  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1102  0012D4  EC04  F013         	call	_Battery_Get	;wreg free
  1103  0012D8  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1104  0012DC  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1105  0012E0  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1106  0012E4  EC38  F00C         	call	___fttol	;wreg free
  1107  0012E8  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1108  0012EC  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1109  0012F0  0E05               	movlw	5
  1110  0012F2  EC75  F014         	call	_ToSend
  1111                           
  1112                           ;Communications.c: 24: ToSend(6, Battery_Get(5));
  1113  0012F6  0E00               	movlw	0
  1114  0012F8  0100               	movlb	0	; () banked
  1115  0012FA  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1116  0012FC  0E05               	movlw	5
  1117  0012FE  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1118  001300  EC04  F013         	call	_Battery_Get	;wreg free
  1119  001304  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1120  001308  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1121  00130C  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1122  001310  EC38  F00C         	call	___fttol	;wreg free
  1123  001314  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1124  001318  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1125  00131C  0E06               	movlw	6
  1126  00131E  EC75  F014         	call	_ToSend
  1127                           
  1128                           ;Communications.c: 25: ToSend(7, Battery_Get(6));
  1129  001322  0E00               	movlw	0
  1130  001324  0100               	movlb	0	; () banked
  1131  001326  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1132  001328  0E06               	movlw	6
  1133  00132A  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1134  00132C  EC04  F013         	call	_Battery_Get	;wreg free
  1135  001330  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1136  001334  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1137  001338  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1138  00133C  EC38  F00C         	call	___fttol	;wreg free
  1139  001340  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1140  001344  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1141  001348  0E07               	movlw	7
  1142  00134A  EC75  F014         	call	_ToSend
  1143                           
  1144                           ;Communications.c: 26: ToSend(8, Battery_Get(7));
  1145  00134E  0E00               	movlw	0
  1146  001350  0100               	movlb	0	; () banked
  1147  001352  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1148  001354  0E07               	movlw	7
  1149  001356  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1150  001358  EC04  F013         	call	_Battery_Get	;wreg free
  1151  00135C  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1152  001360  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1153  001364  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1154  001368  EC38  F00C         	call	___fttol	;wreg free
  1155  00136C  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1156  001370  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1157  001374  0E08               	movlw	8
  1158  001376  EC75  F014         	call	_ToSend
  1159                           
  1160                           ;Communications.c: 27: ToSend(9, Battery_Get(8));
  1161  00137A  0E00               	movlw	0
  1162  00137C  0100               	movlb	0	; () banked
  1163  00137E  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1164  001380  0E08               	movlw	8
  1165  001382  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1166  001384  EC04  F013         	call	_Battery_Get	;wreg free
  1167  001388  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1168  00138C  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1169  001390  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1170  001394  EC38  F00C         	call	___fttol	;wreg free
  1171  001398  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1172  00139C  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1173  0013A0  0E09               	movlw	9
  1174  0013A2  EC75  F014         	call	_ToSend
  1175                           
  1176                           ;Communications.c: 28: ToSend(10, Battery_Get(9));
  1177  0013A6  0E00               	movlw	0
  1178  0013A8  0100               	movlb	0	; () banked
  1179  0013AA  6FE6               	movwf	(Battery_Get@channelnum+1)& (0+255),b
  1180  0013AC  0E09               	movlw	9
  1181  0013AE  6FE5               	movwf	Battery_Get@channelnum& (0+255),b
  1182  0013B0  EC04  F013         	call	_Battery_Get	;wreg free
  1183  0013B4  C0E5  F0E8         	movff	?_Battery_Get,___fttol@f1
  1184  0013B8  C0E6  F0E9         	movff	?_Battery_Get+1,___fttol@f1+1
  1185  0013BC  C0E7  F0EA         	movff	?_Battery_Get+2,___fttol@f1+2
  1186  0013C0  EC38  F00C         	call	___fttol	;wreg free
  1187  0013C4  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1188  0013C8  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1189  0013CC  0E0A               	movlw	10
  1190  0013CE  EC75  F014         	call	_ToSend
  1191                           
  1192                           ;Communications.c: 29: ToSend(11, Tempeture_Get(0));
  1193  0013D2  0E00               	movlw	0
  1194  0013D4  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1195  0013D6  0E00               	movlw	0
  1196  0013D8  6E21               	movwf	Tempeture_Get@channelnum,c
  1197  0013DA  EC96  F013         	call	_Tempeture_Get	;wreg free
  1198  0013DE  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1199  0013E2  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1200  0013E6  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1201  0013EA  EC38  F00C         	call	___fttol	;wreg free
  1202  0013EE  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1203  0013F2  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1204  0013F6  0E0B               	movlw	11
  1205  0013F8  EC75  F014         	call	_ToSend
  1206                           
  1207                           ;Communications.c: 30: ToSend(12, Tempeture_Get(1));
  1208  0013FC  0E00               	movlw	0
  1209  0013FE  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1210  001400  0E01               	movlw	1
  1211  001402  6E21               	movwf	Tempeture_Get@channelnum,c
  1212  001404  EC96  F013         	call	_Tempeture_Get	;wreg free
  1213  001408  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1214  00140C  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1215  001410  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1216  001414  EC38  F00C         	call	___fttol	;wreg free
  1217  001418  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1218  00141C  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1219  001420  0E0C               	movlw	12
  1220  001422  EC75  F014         	call	_ToSend
  1221                           
  1222                           ;Communications.c: 31: ToSend(13, Tempeture_Get(2));
  1223  001426  0E00               	movlw	0
  1224  001428  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1225  00142A  0E02               	movlw	2
  1226  00142C  6E21               	movwf	Tempeture_Get@channelnum,c
  1227  00142E  EC96  F013         	call	_Tempeture_Get	;wreg free
  1228  001432  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1229  001436  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1230  00143A  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1231  00143E  EC38  F00C         	call	___fttol	;wreg free
  1232  001442  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1233  001446  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1234  00144A  0E0D               	movlw	13
  1235  00144C  EC75  F014         	call	_ToSend
  1236                           
  1237                           ;Communications.c: 32: ToSend(14, Tempeture_Get(3));
  1238  001450  0E00               	movlw	0
  1239  001452  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1240  001454  0E03               	movlw	3
  1241  001456  6E21               	movwf	Tempeture_Get@channelnum,c
  1242  001458  EC96  F013         	call	_Tempeture_Get	;wreg free
  1243  00145C  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1244  001460  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1245  001464  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1246  001468  EC38  F00C         	call	___fttol	;wreg free
  1247  00146C  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1248  001470  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1249  001474  0E0E               	movlw	14
  1250  001476  EC75  F014         	call	_ToSend
  1251                           
  1252                           ;Communications.c: 33: ToSend(15, Tempeture_Get(4));
  1253  00147A  0E00               	movlw	0
  1254  00147C  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1255  00147E  0E04               	movlw	4
  1256  001480  6E21               	movwf	Tempeture_Get@channelnum,c
  1257  001482  EC96  F013         	call	_Tempeture_Get	;wreg free
  1258  001486  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1259  00148A  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1260  00148E  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1261  001492  EC38  F00C         	call	___fttol	;wreg free
  1262  001496  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1263  00149A  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1264  00149E  0E0F               	movlw	15
  1265  0014A0  EC75  F014         	call	_ToSend
  1266                           
  1267                           ;Communications.c: 34: ToSend(16, Tempeture_Get(5));
  1268  0014A4  0E00               	movlw	0
  1269  0014A6  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1270  0014A8  0E05               	movlw	5
  1271  0014AA  6E21               	movwf	Tempeture_Get@channelnum,c
  1272  0014AC  EC96  F013         	call	_Tempeture_Get	;wreg free
  1273  0014B0  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1274  0014B4  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1275  0014B8  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1276  0014BC  EC38  F00C         	call	___fttol	;wreg free
  1277  0014C0  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1278  0014C4  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1279  0014C8  0E10               	movlw	16
  1280  0014CA  EC75  F014         	call	_ToSend
  1281                           
  1282                           ;Communications.c: 35: ToSend(17, Tempeture_Get(6));
  1283  0014CE  0E00               	movlw	0
  1284  0014D0  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1285  0014D2  0E06               	movlw	6
  1286  0014D4  6E21               	movwf	Tempeture_Get@channelnum,c
  1287  0014D6  EC96  F013         	call	_Tempeture_Get	;wreg free
  1288  0014DA  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1289  0014DE  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1290  0014E2  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1291  0014E6  EC38  F00C         	call	___fttol	;wreg free
  1292  0014EA  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1293  0014EE  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1294  0014F2  0E11               	movlw	17
  1295  0014F4  EC75  F014         	call	_ToSend
  1296                           
  1297                           ;Communications.c: 36: ToSend(18, Tempeture_Get(7));
  1298  0014F8  0E00               	movlw	0
  1299  0014FA  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1300  0014FC  0E07               	movlw	7
  1301  0014FE  6E21               	movwf	Tempeture_Get@channelnum,c
  1302  001500  EC96  F013         	call	_Tempeture_Get	;wreg free
  1303  001504  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1304  001508  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1305  00150C  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1306  001510  EC38  F00C         	call	___fttol	;wreg free
  1307  001514  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1308  001518  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1309  00151C  0E12               	movlw	18
  1310  00151E  EC75  F014         	call	_ToSend
  1311                           
  1312                           ;Communications.c: 37: ToSend(19, Tempeture_Get(8));
  1313  001522  0E00               	movlw	0
  1314  001524  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1315  001526  0E08               	movlw	8
  1316  001528  6E21               	movwf	Tempeture_Get@channelnum,c
  1317  00152A  EC96  F013         	call	_Tempeture_Get	;wreg free
  1318  00152E  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1319  001532  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1320  001536  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1321  00153A  EC38  F00C         	call	___fttol	;wreg free
  1322  00153E  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1323  001542  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1324  001546  0E13               	movlw	19
  1325  001548  EC75  F014         	call	_ToSend
  1326                           
  1327                           ;Communications.c: 38: ToSend(20, Tempeture_Get(9));
  1328  00154C  0E00               	movlw	0
  1329  00154E  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1330  001550  0E09               	movlw	9
  1331  001552  6E21               	movwf	Tempeture_Get@channelnum,c
  1332  001554  EC96  F013         	call	_Tempeture_Get	;wreg free
  1333  001558  C021  F0E8         	movff	?_Tempeture_Get,___fttol@f1
  1334  00155C  C022  F0E9         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1335  001560  C023  F0EA         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1336  001564  EC38  F00C         	call	___fttol	;wreg free
  1337  001568  C0E8  F0F7         	movff	?___fttol,ToSend@what
  1338  00156C  C0E9  F0F8         	movff	?___fttol+1,ToSend@what+1
  1339  001570  0E14               	movlw	20
  1340  001572  EC75  F014         	call	_ToSend
  1341                           
  1342                           ;Communications.c: 39: sendData(6);
  1343  001576  0E06               	movlw	6
  1344  001578  ECE1  F00C         	call	_sendData
  1345                           
  1346                           ;Communications.c: 40: Delay(2);
  1347  00157C  0E02               	movlw	2
  1348  00157E  6E1B               	movwf	Delay@d_lenth,c
  1349  001580  0E00               	movlw	0
  1350  001582  6E1C               	movwf	Delay@d_lenth+1,c
  1351  001584  0E00               	movlw	0
  1352  001586  6E1D               	movwf	Delay@d_lenth+2,c
  1353  001588  0E00               	movlw	0
  1354  00158A  6E1E               	movwf	Delay@d_lenth+3,c
  1355  00158C  ECDE  F012         	call	_Delay	;wreg free
  1356                           
  1357                           ;Communications.c: 41: LATEbits.LATE1 = 0;
  1358  001590  928D               	bcf	3981,1,c	;volatile
  1359                           
  1360                           ;Communications.c: 42: LATAbits.LATA4 ^= 1;
  1361  001592  7889               	btg	3977,4,c	;volatile
  1362  001594  0012               	return	
  1363  001596  0012               	return		;funcret
  1364  001598                     __end_of_updateComms:
  1365                           	opt stack 0
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           intcon	equ	0xFF2
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           status	equ	0xFD8
  1374                           
  1375 ;; *************** function _sendData *****************
  1376 ;; Defined at:
  1377 ;;		line 53 in file "FastTransfer.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  whereToSend     1    wreg     unsigned char 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  whereToSend     1   39[COMRAM] unsigned char 
  1382 ;;  i               2   41[COMRAM] int 
  1383 ;;  CS              1   40[COMRAM] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;		None               void
  1386 ;; Registers used:
  1387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1393 ;;      Params:         0       0       0       0       0       0       0
  1394 ;;      Locals:         4       0       0       0       0       0       0
  1395 ;;      Temps:          1       0       0       0       0       0       0
  1396 ;;      Totals:         5       0       0       0       0       0       0
  1397 ;;Total ram usage:        5 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    7
  1400 ;; This function calls:
  1401 ;;		Absolute function
  1402 ;;		_CRC8
  1403 ;;		_FastTransfer_buffer_flush
  1404 ;;		_Send_put
  1405 ;;		_crcBufS_put
  1406 ;; This function is called by:
  1407 ;;		_updateComms
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text2
  1412  0019C2                     __ptext2:
  1413                           	opt stack 0
  1414  0019C2                     _sendData:
  1415                           	opt stack 22
  1416                           
  1417                           ;incstack = 0
  1418                           ;sendData@whereToSend stored from wreg
  1419  0019C2  6E28               	movwf	sendData@whereToSend,c
  1420                           
  1421                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1422  0019C4  C0B6  F01B         	movff	_sendStructAddress,CRC8@data
  1423  0019C8  C0B7  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1424  0019CC  C2CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1425  0019D0  EC8C  F012         	call	_CRC8	;wreg free
  1426  0019D4  6E29               	movwf	sendData@CS,c
  1427                           
  1428                           ;FastTransfer.c: 58: serial_write(0x06);
  1429  0019D6  D801               	call	u4198
  1430  0019D8  D00B               	goto	l4398
  1431  0019DA                     u4198:
  1432  0019DA  0005               	push	
  1433  0019DC  6EFA               	movwf	pclath,c
  1434  0019DE  5035               	movf	_serial_write,w,c
  1435  0019E0  6EFD               	movwf	tosl,c
  1436  0019E2  5036               	movf	_serial_write+1,w,c
  1437  0019E4  6EFE               	movwf	tosh,c
  1438  0019E6  50F8               	movf	tblptru,w,c
  1439  0019E8  6EFF               	movwf	tosu,c
  1440  0019EA  50FA               	movf	pclath,w,c
  1441  0019EC  0E06               	movlw	6
  1442  0019EE  0012               	return		;indir
  1443  0019F0                     l4398:
  1444                           
  1445                           ;FastTransfer.c: 59: serial_write(0x85);
  1446  0019F0  D801               	call	u4208
  1447  0019F2  D00B               	goto	l4400
  1448  0019F4                     u4208:
  1449  0019F4  0005               	push	
  1450  0019F6  6EFA               	movwf	pclath,c
  1451  0019F8  5035               	movf	_serial_write,w,c
  1452  0019FA  6EFD               	movwf	tosl,c
  1453  0019FC  5036               	movf	_serial_write+1,w,c
  1454  0019FE  6EFE               	movwf	tosh,c
  1455  001A00  50F8               	movf	tblptru,w,c
  1456  001A02  6EFF               	movwf	tosu,c
  1457  001A04  50FA               	movf	pclath,w,c
  1458  001A06  0E85               	movlw	133
  1459  001A08  0012               	return		;indir
  1460  001A0A                     l4400:
  1461                           
  1462                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1463  001A0A  D801               	call	u4218
  1464  001A0C  D00B               	goto	l4402
  1465  001A0E                     u4218:
  1466  001A0E  0005               	push	
  1467  001A10  6EFA               	movwf	pclath,c
  1468  001A12  5035               	movf	_serial_write,w,c
  1469  001A14  6EFD               	movwf	tosl,c
  1470  001A16  5036               	movf	_serial_write+1,w,c
  1471  001A18  6EFE               	movwf	tosh,c
  1472  001A1A  50F8               	movf	tblptru,w,c
  1473  001A1C  6EFF               	movwf	tosu,c
  1474  001A1E  50FA               	movf	pclath,w,c
  1475  001A20  5028               	movf	sendData@whereToSend,w,c
  1476  001A22  0012               	return		;indir
  1477  001A24                     l4402:
  1478                           
  1479                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1480  001A24  D801               	call	u4228
  1481  001A26  D00B               	goto	l4404
  1482  001A28                     u4228:
  1483  001A28  0005               	push	
  1484  001A2A  6EFA               	movwf	pclath,c
  1485  001A2C  5035               	movf	_serial_write,w,c
  1486  001A2E  6EFD               	movwf	tosl,c
  1487  001A30  5036               	movf	_serial_write+1,w,c
  1488  001A32  6EFE               	movwf	tosh,c
  1489  001A34  50F8               	movf	tblptru,w,c
  1490  001A36  6EFF               	movwf	tosu,c
  1491  001A38  50FA               	movf	pclath,w,c
  1492  001A3A  503E               	movf	_moduleAddress,w,c
  1493  001A3C  0012               	return		;indir
  1494  001A3E                     l4404:
  1495                           
  1496                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1497  001A3E  D801               	call	u4238
  1498  001A40  D00C               	goto	l4406
  1499  001A42                     u4238:
  1500  001A42  0005               	push	
  1501  001A44  6EFA               	movwf	pclath,c
  1502  001A46  5035               	movf	_serial_write,w,c
  1503  001A48  6EFD               	movwf	tosl,c
  1504  001A4A  5036               	movf	_serial_write+1,w,c
  1505  001A4C  6EFE               	movwf	tosh,c
  1506  001A4E  50F8               	movf	tblptru,w,c
  1507  001A50  6EFF               	movwf	tosu,c
  1508  001A52  50FA               	movf	pclath,w,c
  1509  001A54  0102               	movlb	2	; () banked
  1510  001A56  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1511  001A58  0012               	return		;indir
  1512  001A5A                     l4406:
  1513                           
  1514                           ;FastTransfer.c: 66: int i;
  1515                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1516  001A5A  0E00               	movlw	0
  1517  001A5C  6E2B               	movwf	sendData@i+1,c
  1518  001A5E  0E00               	movlw	0
  1519  001A60  6E2A               	movwf	sendData@i,c
  1520  001A62  D018               	goto	l4412
  1521  001A64                     l4408:
  1522                           
  1523                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1524  001A64  D801               	call	u4248
  1525  001A66  D013               	goto	l4410
  1526  001A68                     u4248:
  1527  001A68  0005               	push	
  1528  001A6A  6EFA               	movwf	pclath,c
  1529  001A6C  5035               	movf	_serial_write,w,c
  1530  001A6E  6EFD               	movwf	tosl,c
  1531  001A70  5036               	movf	_serial_write+1,w,c
  1532  001A72  6EFE               	movwf	tosh,c
  1533  001A74  50F8               	movf	tblptru,w,c
  1534  001A76  6EFF               	movwf	tosu,c
  1535  001A78  50FA               	movf	pclath,w,c
  1536  001A7A  502A               	movf	sendData@i,w,c
  1537  001A7C  0100               	movlb	0	; () banked
  1538  001A7E  25B6               	addwf	_sendStructAddress& (0+255),w,b
  1539  001A80  6ED9               	movwf	fsr2l,c
  1540  001A82  502B               	movf	sendData@i+1,w,c
  1541  001A84  0100               	movlb	0	; () banked
  1542  001A86  21B7               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  1543  001A88  6EDA               	movwf	fsr2h,c
  1544  001A8A  50DF               	movf	indf2,w,c
  1545  001A8C  0012               	return		;indir
  1546  001A8E                     l4410:
  1547  001A8E  4A2A               	infsnz	sendData@i,f,c
  1548  001A90  2A2B               	incf	sendData@i+1,f,c
  1549  001A92  D000               	goto	l4412
  1550  001A94                     l4412:
  1551  001A94  0102               	movlb	2	; () banked
  1552  001A96  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1553  001A98  5C2A               	subwf	sendData@i,w,c
  1554  001A9A  502B               	movf	sendData@i+1,w,c
  1555  001A9C  0A80               	xorlw	128
  1556  001A9E  6E27               	movwf	??_sendData& (0+255),c
  1557  001AA0  0102               	movlb	2	; () banked
  1558  001AA2  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1559  001AA4  0A80               	xorlw	128
  1560  001AA6  5827               	subwfb	??_sendData& (0+255),w,c
  1561  001AA8  A0D8               	btfss	status,0,c
  1562  001AAA  D7DC               	goto	l4408
  1563                           
  1564                           ; BSR set to: 2
  1565                           ;FastTransfer.c: 69: }
  1566                           ;FastTransfer.c: 72: serial_write(CS);
  1567                           
  1568                           ; BSR set to: 2
  1569  001AAC  D801               	call	u4268
  1570  001AAE  D00B               	goto	l4416
  1571  001AB0                     u4268:
  1572  001AB0  0005               	push	
  1573  001AB2  6EFA               	movwf	pclath,c
  1574  001AB4  5035               	movf	_serial_write,w,c
  1575  001AB6  6EFD               	movwf	tosl,c
  1576  001AB8  5036               	movf	_serial_write+1,w,c
  1577  001ABA  6EFE               	movwf	tosh,c
  1578  001ABC  50F8               	movf	tblptru,w,c
  1579  001ABE  6EFF               	movwf	tosu,c
  1580  001AC0  50FA               	movf	pclath,w,c
  1581  001AC2  5029               	movf	sendData@CS,w,c
  1582  001AC4  0012               	return		;indir
  1583  001AC6                     l4416:
  1584                           
  1585                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1586  001AC6  0ECE               	movlw	low _crc_buffer
  1587  001AC8  6E1B               	movwf	crcBufS_put@_this,c
  1588  001ACA  0E00               	movlw	high _crc_buffer
  1589  001ACC  6E1C               	movwf	crcBufS_put@_this+1,c
  1590  001ACE  C028  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1591  001AD2  C029  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1592  001AD6  0E00               	movlw	0
  1593  001AD8  6E1F               	movwf	crcBufS_put@status,c
  1594  001ADA  ECA1  F00F         	call	_crcBufS_put
  1595                           
  1596                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1597  001ADE  0E00               	movlw	low _ring_buffer
  1598  001AE0  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1599  001AE2  0E02               	movlw	high _ring_buffer
  1600  001AE4  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1601  001AE6  0E00               	movlw	0
  1602  001AE8  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1603  001AEA  0E01               	movlw	1
  1604  001AEC  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1605  001AEE  EC2B  F012         	call	_FastTransfer_buffer_flush	;wreg free
  1606  001AF2  0012               	return		;funcret
  1607  001AF4                     __end_of_sendData:
  1608                           	opt stack 0
  1609                           tosu	equ	0xFFF
  1610                           tosh	equ	0xFFE
  1611                           tosl	equ	0xFFD
  1612                           pclath	equ	0xFFA
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           intcon	equ	0xFF2
  1618                           postinc0	equ	0xFEE
  1619                           wreg	equ	0xFE8
  1620                           indf2	equ	0xFDF
  1621                           fsr2h	equ	0xFDA
  1622                           fsr2l	equ	0xFD9
  1623                           status	equ	0xFD8
  1624                           
  1625 ;; *************** function _crcBufS_put *****************
  1626 ;; Defined at:
  1627 ;;		line 321 in file "FastTransfer.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1630 ;;		 -> crc_buffer(17), 
  1631 ;;  address         1   28[COMRAM] unsigned char 
  1632 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1633 ;;  status          1   30[COMRAM] unsigned char 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;		None
  1636 ;; Return value:  Size  Location     Type
  1637 ;;		None               void
  1638 ;; Registers used:
  1639 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1645 ;;      Params:         5       0       0       0       0       0       0
  1646 ;;      Locals:         0       0       0       0       0       0       0
  1647 ;;      Temps:          2       0       0       0       0       0       0
  1648 ;;      Totals:         7       0       0       0       0       0       0
  1649 ;;Total ram usage:        7 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    4
  1652 ;; This function calls:
  1653 ;;		Nothing
  1654 ;; This function is called by:
  1655 ;;		_sendData
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text3
  1660  001F42                     __ptext3:
  1661                           	opt stack 0
  1662  001F42                     _crcBufS_put:
  1663                           	opt stack 24
  1664                           
  1665                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1666                           
  1667                           ;incstack = 0
  1668  001F42  EE20 F00F          	lfsr	2,15
  1669  001F46  501B               	movf	crcBufS_put@_this,w,c
  1670  001F48  26D9               	addwf	fsr2l,f,c
  1671  001F4A  501C               	movf	crcBufS_put@_this+1,w,c
  1672  001F4C  22DA               	addwfc	fsr2h,f,c
  1673  001F4E  CFDE F020          	movff	postinc2,??_crcBufS_put
  1674  001F52  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1675  001F56  5020               	movf	??_crcBufS_put,w,c
  1676  001F58  241B               	addwf	crcBufS_put@_this,w,c
  1677  001F5A  6ED9               	movwf	fsr2l,c
  1678  001F5C  5021               	movf	??_crcBufS_put+1,w,c
  1679  001F5E  201C               	addwfc	crcBufS_put@_this+1,w,c
  1680  001F60  6EDA               	movwf	fsr2h,c
  1681  001F62  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1682                           
  1683                           ;FastTransfer.c: 323: _this->head++;
  1684  001F66  EE20 F00F          	lfsr	2,15
  1685  001F6A  501B               	movf	crcBufS_put@_this,w,c
  1686  001F6C  26D9               	addwf	fsr2l,f,c
  1687  001F6E  501C               	movf	crcBufS_put@_this+1,w,c
  1688  001F70  22DA               	addwfc	fsr2h,f,c
  1689  001F72  2ADE               	incf	postinc2,f,c
  1690  001F74  0E00               	movlw	0
  1691  001F76  22DD               	addwfc	postdec2,f,c
  1692                           
  1693                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1694  001F78  EE20 F00F          	lfsr	2,15
  1695  001F7C  501B               	movf	crcBufS_put@_this,w,c
  1696  001F7E  26D9               	addwf	fsr2l,f,c
  1697  001F80  501C               	movf	crcBufS_put@_this+1,w,c
  1698  001F82  22DA               	addwfc	fsr2h,f,c
  1699  001F84  CFDE F020          	movff	postinc2,??_crcBufS_put
  1700  001F88  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1701  001F8C  5020               	movf	??_crcBufS_put,w,c
  1702  001F8E  241B               	addwf	crcBufS_put@_this,w,c
  1703  001F90  6ED9               	movwf	fsr2l,c
  1704  001F92  5021               	movf	??_crcBufS_put+1,w,c
  1705  001F94  201C               	addwfc	crcBufS_put@_this+1,w,c
  1706  001F96  6EDA               	movwf	fsr2h,c
  1707  001F98  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1708                           
  1709                           ;FastTransfer.c: 325: _this->head++;
  1710  001F9C  EE20 F00F          	lfsr	2,15
  1711  001FA0  501B               	movf	crcBufS_put@_this,w,c
  1712  001FA2  26D9               	addwf	fsr2l,f,c
  1713  001FA4  501C               	movf	crcBufS_put@_this+1,w,c
  1714  001FA6  22DA               	addwfc	fsr2h,f,c
  1715  001FA8  2ADE               	incf	postinc2,f,c
  1716  001FAA  0E00               	movlw	0
  1717  001FAC  22DD               	addwfc	postdec2,f,c
  1718                           
  1719                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1720  001FAE  EE20 F00F          	lfsr	2,15
  1721  001FB2  501B               	movf	crcBufS_put@_this,w,c
  1722  001FB4  26D9               	addwf	fsr2l,f,c
  1723  001FB6  501C               	movf	crcBufS_put@_this+1,w,c
  1724  001FB8  22DA               	addwfc	fsr2h,f,c
  1725  001FBA  CFDE F020          	movff	postinc2,??_crcBufS_put
  1726  001FBE  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1727  001FC2  5020               	movf	??_crcBufS_put,w,c
  1728  001FC4  241B               	addwf	crcBufS_put@_this,w,c
  1729  001FC6  6ED9               	movwf	fsr2l,c
  1730  001FC8  5021               	movf	??_crcBufS_put+1,w,c
  1731  001FCA  201C               	addwfc	crcBufS_put@_this+1,w,c
  1732  001FCC  6EDA               	movwf	fsr2h,c
  1733  001FCE  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1734                           
  1735                           ;FastTransfer.c: 327: _this->head++;
  1736  001FD2  EE20 F00F          	lfsr	2,15
  1737  001FD6  501B               	movf	crcBufS_put@_this,w,c
  1738  001FD8  26D9               	addwf	fsr2l,f,c
  1739  001FDA  501C               	movf	crcBufS_put@_this+1,w,c
  1740  001FDC  22DA               	addwfc	fsr2h,f,c
  1741  001FDE  2ADE               	incf	postinc2,f,c
  1742  001FE0  0E00               	movlw	0
  1743  001FE2  22DD               	addwfc	postdec2,f,c
  1744                           
  1745                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1746  001FE4  EE20 F00F          	lfsr	2,15
  1747  001FE8  501B               	movf	crcBufS_put@_this,w,c
  1748  001FEA  26D9               	addwf	fsr2l,f,c
  1749  001FEC  501C               	movf	crcBufS_put@_this+1,w,c
  1750  001FEE  22DA               	addwfc	fsr2h,f,c
  1751  001FF0  0E01               	movlw	1
  1752  001FF2  BEDB               	btfsc	plusw2,7,c
  1753  001FF4  0012               	return	
  1754  001FF6  0E01               	movlw	1
  1755  001FF8  50DB               	movf	plusw2,w,c
  1756  001FFA  E104               	bnz	u1980
  1757  001FFC  0E0F               	movlw	15
  1758  001FFE  5CDE               	subwf	postinc2,w,c
  1759  002000  A0D8               	btfss	status,0,c
  1760  002002  0012               	return	
  1761  002004                     u1980:
  1762                           
  1763                           ;FastTransfer.c: 329: _this->head = 0;
  1764  002004  EE20 F00F          	lfsr	2,15
  1765  002008  501B               	movf	crcBufS_put@_this,w,c
  1766  00200A  26D9               	addwf	fsr2l,f,c
  1767  00200C  501C               	movf	crcBufS_put@_this+1,w,c
  1768  00200E  22DA               	addwfc	fsr2h,f,c
  1769  002010  0E00               	movlw	0
  1770  002012  6EDE               	movwf	postinc2,c
  1771  002014  0E00               	movlw	0
  1772  002016  6EDD               	movwf	postdec2,c
  1773  002018  0012               	return	
  1774  00201A  0012               	return		;funcret
  1775  00201C                     __end_of_crcBufS_put:
  1776                           	opt stack 0
  1777                           tosu	equ	0xFFF
  1778                           tosh	equ	0xFFE
  1779                           tosl	equ	0xFFD
  1780                           pclath	equ	0xFFA
  1781                           tblptru	equ	0xFF8
  1782                           tblptrh	equ	0xFF7
  1783                           tblptrl	equ	0xFF6
  1784                           tablat	equ	0xFF5
  1785                           intcon	equ	0xFF2
  1786                           postinc0	equ	0xFEE
  1787                           wreg	equ	0xFE8
  1788                           indf2	equ	0xFDF
  1789                           postinc2	equ	0xFDE
  1790                           postdec2	equ	0xFDD
  1791                           plusw2	equ	0xFDB
  1792                           fsr2h	equ	0xFDA
  1793                           fsr2l	equ	0xFD9
  1794                           status	equ	0xFD8
  1795                           
  1796 ;; *************** function _FastTransfer_buffer_flush *****************
  1797 ;; Defined at:
  1798 ;;		line 261 in file "FastTransfer.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1801 ;;		 -> ring_buffer(206), 
  1802 ;;  clearBuffer     2   36[COMRAM] const int 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;		None               void
  1807 ;; Registers used:
  1808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1814 ;;      Params:         4       0       0       0       0       0       0
  1815 ;;      Locals:         0       0       0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0
  1817 ;;      Totals:         4       0       0       0       0       0       0
  1818 ;;Total ram usage:        4 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    5
  1821 ;; This function calls:
  1822 ;;		_memset
  1823 ;; This function is called by:
  1824 ;;		_sendData
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text4
  1829  002456                     __ptext4:
  1830                           	opt stack 0
  1831  002456                     _FastTransfer_buffer_flush:
  1832                           	opt stack 23
  1833                           
  1834                           ;FastTransfer.c: 262: _this->count = 0;
  1835                           
  1836                           ;incstack = 0
  1837  002456  EE20 F0CC          	lfsr	2,204
  1838  00245A  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1839  00245C  26D9               	addwf	fsr2l,f,c
  1840  00245E  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1841  002460  22DA               	addwfc	fsr2h,f,c
  1842  002462  0E00               	movlw	0
  1843  002464  6EDE               	movwf	postinc2,c
  1844  002466  0E00               	movlw	0
  1845  002468  6EDD               	movwf	postdec2,c
  1846                           
  1847                           ;FastTransfer.c: 263: _this->head = 0;
  1848  00246A  EE20 F0C8          	lfsr	2,200
  1849  00246E  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1850  002470  26D9               	addwf	fsr2l,f,c
  1851  002472  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1852  002474  22DA               	addwfc	fsr2h,f,c
  1853  002476  0E00               	movlw	0
  1854  002478  6EDE               	movwf	postinc2,c
  1855  00247A  0E00               	movlw	0
  1856  00247C  6EDD               	movwf	postdec2,c
  1857                           
  1858                           ;FastTransfer.c: 264: _this->tail = 0;
  1859  00247E  EE20 F0CA          	lfsr	2,202
  1860  002482  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1861  002484  26D9               	addwf	fsr2l,f,c
  1862  002486  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1863  002488  22DA               	addwfc	fsr2h,f,c
  1864  00248A  0E00               	movlw	0
  1865  00248C  6EDE               	movwf	postinc2,c
  1866  00248E  0E00               	movlw	0
  1867  002490  6EDD               	movwf	postdec2,c
  1868                           
  1869                           ;FastTransfer.c: 265: if (clearBuffer) {
  1870  002492  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  1871  002494  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  1872  002496  B4D8               	btfsc	status,2,c
  1873  002498  0012               	return	
  1874                           
  1875                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1876  00249A  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1877  00249E  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1878  0024A2  0E00               	movlw	0
  1879  0024A4  6E1E               	movwf	memset@c+1,c
  1880  0024A6  0E00               	movlw	0
  1881  0024A8  6E1D               	movwf	memset@c,c
  1882  0024AA  0E00               	movlw	0
  1883  0024AC  6E20               	movwf	memset@n+1,c
  1884  0024AE  0EC8               	movlw	200
  1885  0024B0  6E1F               	movwf	memset@n,c
  1886  0024B2  ECDC  F013         	call	_memset	;wreg free
  1887  0024B6  0012               	return	
  1888  0024B8  0012               	return		;funcret
  1889  0024BA                     __end_of_FastTransfer_buffer_flush:
  1890                           	opt stack 0
  1891                           tosu	equ	0xFFF
  1892                           tosh	equ	0xFFE
  1893                           tosl	equ	0xFFD
  1894                           pclath	equ	0xFFA
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           intcon	equ	0xFF2
  1900                           postinc0	equ	0xFEE
  1901                           wreg	equ	0xFE8
  1902                           indf2	equ	0xFDF
  1903                           postinc2	equ	0xFDE
  1904                           postdec2	equ	0xFDD
  1905                           plusw2	equ	0xFDB
  1906                           fsr2h	equ	0xFDA
  1907                           fsr2l	equ	0xFD9
  1908                           status	equ	0xFD8
  1909                           
  1910 ;; *************** function _receiveData *****************
  1911 ;; Defined at:
  1912 ;;		line 82 in file "FastTransfer.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;		None
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  holder          3   10[BANK0 ] unsigned char [3]
  1917 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  1918 ;;  holder          3    7[BANK0 ] unsigned char [3]
  1919 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  1920 ;;  u               2   15[BANK0 ] int 
  1921 ;;  r               2   17[BANK0 ] int 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      unsigned char 
  1924 ;; Registers used:
  1925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1931 ;;      Params:         0       0       0       0       0       0       0
  1932 ;;      Locals:         0      12       0       0       0       0       0
  1933 ;;      Temps:          6       0       0       0       0       0       0
  1934 ;;      Totals:         6      12       0       0       0       0       0
  1935 ;;Total ram usage:       18 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    8
  1938 ;; This function calls:
  1939 ;;		Absolute function
  1940 ;;		_CRC8
  1941 ;;		_CRCcheck
  1942 ;;		_Receive_available
  1943 ;;		_Receive_get
  1944 ;;		_Receive_peek
  1945 ;;		_Send_put
  1946 ;; This function is called by:
  1947 ;;		_updateComms
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text5
  1952  00061E                     __ptext5:
  1953                           	opt stack 0
  1954  00061E                     _receiveData:
  1955                           	opt stack 21
  1956                           
  1957                           ;FastTransfer.c: 85: if (rx_len == 0) {
  1958                           
  1959                           ;incstack = 0
  1960  00061E  5042               	movf	_rx_len,w,c
  1961  000620  A4D8               	btfss	status,2,c
  1962  000622  D0AA               	goto	l4458
  1963                           
  1964                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  1965  000624  D801               	call	u4288
  1966  000626  D00A               	goto	u4289
  1967  000628                     u4288:
  1968  000628  0005               	push	
  1969  00062A  6EFA               	movwf	pclath,c
  1970  00062C  5031               	movf	_serial_available,w,c
  1971  00062E  6EFD               	movwf	tosl,c
  1972  000630  5032               	movf	_serial_available+1,w,c
  1973  000632  6EFE               	movwf	tosh,c
  1974  000634  50F8               	movf	tblptru,w,c
  1975  000636  6EFF               	movwf	tosu,c
  1976  000638  50FA               	movf	pclath,w,c
  1977  00063A  0012               	return		;indir
  1978  00063C                     u4289:
  1979  00063C  BE1E               	btfsc	?_Receive_available+1,7,c
  1980  00063E  D09C               	goto	l4458
  1981  000640  501E               	movf	?_Receive_available+1,w,c
  1982  000642  E120               	bnz	l4434
  1983  000644  0E05               	movlw	5
  1984  000646  5C1D               	subwf	?_Receive_available,w,c
  1985  000648  B0D8               	btfsc	status,0,c
  1986  00064A  D01C               	goto	l4434
  1987  00064C  D095               	goto	l4458
  1988                           
  1989                           ;FastTransfer.c: 89: while (serial_read() != 0x06) {
  1990  00064E  D01A               	goto	l4434
  1991  000650                     l4426:
  1992                           
  1993                           ;FastTransfer.c: 93: alignErrorCounter++;
  1994  000650  0100               	movlb	0	; () banked
  1995  000652  4BAC               	infsnz	_alignErrorCounter& (0+255),f,b
  1996  000654  2BAD               	incf	(_alignErrorCounter+1)& (0+255),f,b
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2000  000656  D801               	call	u4308
  2001  000658  D00A               	goto	u4309
  2002  00065A                     u4308:
  2003  00065A  0005               	push	
  2004  00065C  6EFA               	movwf	pclath,c
  2005  00065E  5031               	movf	_serial_available,w,c
  2006  000660  6EFD               	movwf	tosl,c
  2007  000662  5032               	movf	_serial_available+1,w,c
  2008  000664  6EFE               	movwf	tosh,c
  2009  000666  50F8               	movf	tblptru,w,c
  2010  000668  6EFF               	movwf	tosu,c
  2011  00066A  50FA               	movf	pclath,w,c
  2012  00066C  0012               	return		;indir
  2013  00066E                     u4309:
  2014  00066E  BE1E               	btfsc	?_Receive_available+1,7,c
  2015  000670  D006               	goto	l4430
  2016  000672  501E               	movf	?_Receive_available+1,w,c
  2017  000674  E107               	bnz	l4434
  2018  000676  0E05               	movlw	5
  2019  000678  5C1D               	subwf	?_Receive_available,w,c
  2020  00067A  B0D8               	btfsc	status,0,c
  2021  00067C  D003               	goto	l4434
  2022  00067E                     l4430:
  2023                           
  2024                           ;FastTransfer.c: 95: return 0;
  2025  00067E  0E00               	movlw	0
  2026  000680  0012               	return	
  2027  000682  D000               	goto	l4434
  2028  000684                     l4434:
  2029  000684  D801               	call	u4328
  2030  000686  D00A               	goto	u4329
  2031  000688                     u4328:
  2032  000688  0005               	push	
  2033  00068A  6EFA               	movwf	pclath,c
  2034  00068C  5033               	movf	_serial_read,w,c
  2035  00068E  6EFD               	movwf	tosl,c
  2036  000690  5034               	movf	_serial_read+1,w,c
  2037  000692  6EFE               	movwf	tosh,c
  2038  000694  50F8               	movf	tblptru,w,c
  2039  000696  6EFF               	movwf	tosu,c
  2040  000698  50FA               	movf	pclath,w,c
  2041  00069A  0012               	return		;indir
  2042  00069C                     u4329:
  2043  00069C  0A06               	xorlw	6
  2044  00069E  A4D8               	btfss	status,2,c
  2045  0006A0  D7D7               	goto	l4426
  2046                           
  2047                           ;FastTransfer.c: 96: }
  2048                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2049  0006A2  D801               	call	u4348
  2050  0006A4  D00A               	goto	u4349
  2051  0006A6                     u4348:
  2052  0006A6  0005               	push	
  2053  0006A8  6EFA               	movwf	pclath,c
  2054  0006AA  5033               	movf	_serial_read,w,c
  2055  0006AC  6EFD               	movwf	tosl,c
  2056  0006AE  5034               	movf	_serial_read+1,w,c
  2057  0006B0  6EFE               	movwf	tosh,c
  2058  0006B2  50F8               	movf	tblptru,w,c
  2059  0006B4  6EFF               	movwf	tosu,c
  2060  0006B6  50FA               	movf	pclath,w,c
  2061  0006B8  0012               	return		;indir
  2062  0006BA                     u4349:
  2063  0006BA  0A85               	xorlw	133
  2064  0006BC  A4D8               	btfss	status,2,c
  2065  0006BE  D05C               	goto	l4458
  2066                           
  2067                           ;FastTransfer.c: 98: rx_address = serial_read();
  2068  0006C0  D801               	call	u4368
  2069  0006C2  D00A               	goto	u4369
  2070  0006C4                     u4368:
  2071  0006C4  0005               	push	
  2072  0006C6  6EFA               	movwf	pclath,c
  2073  0006C8  5033               	movf	_serial_read,w,c
  2074  0006CA  6EFD               	movwf	tosl,c
  2075  0006CC  5034               	movf	_serial_read+1,w,c
  2076  0006CE  6EFE               	movwf	tosh,c
  2077  0006D0  50F8               	movf	tblptru,w,c
  2078  0006D2  6EFF               	movwf	tosu,c
  2079  0006D4  50FA               	movf	pclath,w,c
  2080  0006D6  0012               	return		;indir
  2081  0006D8                     u4369:
  2082  0006D8  6E40               	movwf	_rx_address,c
  2083                           
  2084                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2085  0006DA  D801               	call	u4378
  2086  0006DC  D00A               	goto	u4379
  2087  0006DE                     u4378:
  2088  0006DE  0005               	push	
  2089  0006E0  6EFA               	movwf	pclath,c
  2090  0006E2  5033               	movf	_serial_read,w,c
  2091  0006E4  6EFD               	movwf	tosl,c
  2092  0006E6  5034               	movf	_serial_read+1,w,c
  2093  0006E8  6EFE               	movwf	tosh,c
  2094  0006EA  50F8               	movf	tblptru,w,c
  2095  0006EC  6EFF               	movwf	tosu,c
  2096  0006EE  50FA               	movf	pclath,w,c
  2097  0006F0  0012               	return		;indir
  2098  0006F2                     u4379:
  2099  0006F2  6E3F               	movwf	_returnAddress,c
  2100                           
  2101                           ;FastTransfer.c: 100: rx_len = serial_read();
  2102  0006F4  D801               	call	u4388
  2103  0006F6  D00A               	goto	u4389
  2104  0006F8                     u4388:
  2105  0006F8  0005               	push	
  2106  0006FA  6EFA               	movwf	pclath,c
  2107  0006FC  5033               	movf	_serial_read,w,c
  2108  0006FE  6EFD               	movwf	tosl,c
  2109  000700  5034               	movf	_serial_read+1,w,c
  2110  000702  6EFE               	movwf	tosh,c
  2111  000704  50F8               	movf	tblptru,w,c
  2112  000706  6EFF               	movwf	tosu,c
  2113  000708  50FA               	movf	pclath,w,c
  2114  00070A  0012               	return		;indir
  2115  00070C                     u4389:
  2116  00070C  6E42               	movwf	_rx_len,c
  2117                           
  2118                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2119  00070E  503E               	movf	_moduleAddress,w,c
  2120  000710  1840               	xorwf	_rx_address,w,c
  2121  000712  B4D8               	btfsc	status,2,c
  2122  000714  D031               	goto	l4458
  2123                           
  2124                           ;FastTransfer.c: 103: addressErrorCounter++;
  2125  000716  0100               	movlb	0	; () banked
  2126  000718  4BAA               	infsnz	_addressErrorCounter& (0+255),f,b
  2127  00071A  2BAB               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;FastTransfer.c: 106: int u;
  2131                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2132  00071C  0E00               	movlw	0
  2133  00071E  0100               	movlb	0	; () banked
  2134  000720  6FEF               	movwf	(receiveData@u+1)& (0+255),b
  2135  000722  0E00               	movlw	0
  2136  000724  6FEE               	movwf	receiveData@u& (0+255),b
  2137  000726  D010               	goto	l4450
  2138  000728                     l4446:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;FastTransfer.c: 108: serial_read();
  2142  000728  D801               	call	u4408
  2143  00072A  D00A               	goto	l4448
  2144  00072C                     u4408:
  2145  00072C  0005               	push	
  2146  00072E  6EFA               	movwf	pclath,c
  2147  000730  5033               	movf	_serial_read,w,c
  2148  000732  6EFD               	movwf	tosl,c
  2149  000734  5034               	movf	_serial_read+1,w,c
  2150  000736  6EFE               	movwf	tosh,c
  2151  000738  50F8               	movf	tblptru,w,c
  2152  00073A  6EFF               	movwf	tosu,c
  2153  00073C  50FA               	movf	pclath,w,c
  2154  00073E  0012               	return		;indir
  2155  000740                     l4448:
  2156  000740  0100               	movlb	0	; () banked
  2157  000742  4BEE               	infsnz	receiveData@u& (0+255),f,b
  2158  000744  2BEF               	incf	(receiveData@u+1)& (0+255),f,b
  2159  000746  D000               	goto	l4450
  2160  000748                     l4450:
  2161                           
  2162                           ; BSR set to: 0
  2163  000748  5042               	movf	_rx_len,w,c
  2164  00074A  6E27               	movwf	??_receiveData& (0+255),c
  2165  00074C  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2166  00074E  0E01               	movlw	1
  2167  000750  2627               	addwf	??_receiveData,f,c
  2168  000752  0E00               	movlw	0
  2169  000754  2228               	addwfc	??_receiveData+1,f,c
  2170  000756  0100               	movlb	0	; () banked
  2171  000758  51EE               	movf	receiveData@u& (0+255),w,b
  2172  00075A  5C27               	subwf	??_receiveData,w,c
  2173  00075C  5028               	movf	??_receiveData+1,w,c
  2174  00075E  0A80               	xorlw	128
  2175  000760  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2176  000762  0100               	movlb	0	; () banked
  2177  000764  51EF               	movf	(receiveData@u+1)& (0+255),w,b
  2178  000766  0A80               	xorlw	128
  2179  000768  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2180  00076A  B0D8               	btfsc	status,0,c
  2181  00076C  D7DD               	goto	l4446
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;FastTransfer.c: 109: }
  2185                           ;FastTransfer.c: 110: rx_len = 0;
  2186                           
  2187                           ; BSR set to: 0
  2188  00076E  0E00               	movlw	0
  2189  000770  6E42               	movwf	_rx_len,c
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;FastTransfer.c: 111: return 0;
  2193  000772  0E00               	movlw	0
  2194                           
  2195                           ; BSR set to: 0
  2196  000774  0012               	return	
  2197                           
  2198                           ; BSR set to: 0
  2199                           
  2200                           ; BSR set to: 0
  2201                           
  2202                           ; BSR set to: 0
  2203  000776  D000               	goto	l4458
  2204  000778                     l4458:
  2205                           
  2206                           ;FastTransfer.c: 112: }
  2207                           ;FastTransfer.c: 114: }
  2208                           ;FastTransfer.c: 115: }
  2209                           ;FastTransfer.c: 116: }
  2210                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2211  000778  5042               	movf	_rx_len,w,c
  2212  00077A  B4D8               	btfsc	status,2,c
  2213  00077C  D269               	goto	l4582
  2214                           
  2215                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2216  00077E  5041               	movf	_rx_array_inx,w,c
  2217  000780  B4D8               	btfsc	status,2,c
  2218  000782  D002               	goto	l4464
  2219  000784  D048               	goto	l4482
  2220                           
  2221                           ;FastTransfer.c: 123: while (!(serial_available() >= 1));
  2222  000786  D000               	goto	l4464
  2223  000788                     l4464:
  2224  000788  D801               	call	u4448
  2225  00078A  D00A               	goto	u4449
  2226  00078C                     u4448:
  2227  00078C  0005               	push	
  2228  00078E  6EFA               	movwf	pclath,c
  2229  000790  5031               	movf	_serial_available,w,c
  2230  000792  6EFD               	movwf	tosl,c
  2231  000794  5032               	movf	_serial_available+1,w,c
  2232  000796  6EFE               	movwf	tosh,c
  2233  000798  50F8               	movf	tblptru,w,c
  2234  00079A  6EFF               	movwf	tosu,c
  2235  00079C  50FA               	movf	pclath,w,c
  2236  00079E  0012               	return		;indir
  2237  0007A0                     u4449:
  2238  0007A0  BE1E               	btfsc	?_Receive_available+1,7,c
  2239  0007A2  D7F2               	goto	l4464
  2240  0007A4  501E               	movf	?_Receive_available+1,w,c
  2241  0007A6  E105               	bnz	l4466
  2242  0007A8  041D               	decf	?_Receive_available,w,c
  2243  0007AA  B0D8               	btfsc	status,0,c
  2244  0007AC  D002               	goto	l4466
  2245  0007AE  D7EC               	goto	l4464
  2246  0007B0  D000               	goto	l4466
  2247  0007B2                     l4466:
  2248                           
  2249                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2250  0007B2  D801               	call	u4468
  2251  0007B4  D00B               	goto	u4469
  2252  0007B6                     u4468:
  2253  0007B6  0005               	push	
  2254  0007B8  0100               	movlb	0	; () banked
  2255  0007BA  6EFA               	movwf	pclath,c
  2256  0007BC  51B8               	movf	_serial_peek& (0+255),w,b
  2257  0007BE  6EFD               	movwf	tosl,c
  2258  0007C0  51B9               	movf	(_serial_peek+1)& (0+255),w,b
  2259  0007C2  6EFE               	movwf	tosh,c
  2260  0007C4  50F8               	movf	tblptru,w,c
  2261  0007C6  6EFF               	movwf	tosu,c
  2262  0007C8  50FA               	movf	pclath,w,c
  2263  0007CA  0012               	return		;indir
  2264  0007CC                     u4469:
  2265  0007CC  0AFF               	xorlw	255
  2266  0007CE  A4D8               	btfss	status,2,c
  2267  0007D0  D022               	goto	l4482
  2268                           
  2269                           ;FastTransfer.c: 125: CRCcheck();
  2270  0007D2  ECCC  F00A         	call	_CRCcheck	;wreg free
  2271                           
  2272                           ;FastTransfer.c: 126: rx_len = 0;
  2273  0007D6  0E00               	movlw	0
  2274  0007D8  6E42               	movwf	_rx_len,c
  2275                           
  2276                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2277  0007DA  0E00               	movlw	0
  2278  0007DC  6E41               	movwf	_rx_array_inx,c
  2279                           
  2280                           ;FastTransfer.c: 128: return 0;
  2281  0007DE  0E00               	movlw	0
  2282  0007E0  0012               	return	
  2283                           
  2284                           ;FastTransfer.c: 129: }
  2285                           ;FastTransfer.c: 130: }
  2286                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2287  0007E2  D019               	goto	l4482
  2288  0007E4                     l4478:
  2289                           
  2290                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2291  0007E4  D801               	call	u4488
  2292  0007E6  D00A               	goto	u4489
  2293  0007E8                     u4488:
  2294  0007E8  0005               	push	
  2295  0007EA  6EFA               	movwf	pclath,c
  2296  0007EC  5033               	movf	_serial_read,w,c
  2297  0007EE  6EFD               	movwf	tosl,c
  2298  0007F0  5034               	movf	_serial_read+1,w,c
  2299  0007F2  6EFE               	movwf	tosh,c
  2300  0007F4  50F8               	movf	tblptru,w,c
  2301  0007F6  6EFF               	movwf	tosu,c
  2302  0007F8  50FA               	movf	pclath,w,c
  2303  0007FA  0012               	return		;indir
  2304  0007FC                     u4489:
  2305  0007FC  6E27               	movwf	??_receiveData& (0+255),c
  2306  0007FE  5041               	movf	_rx_array_inx,w,c
  2307  000800  0D01               	mullw	1
  2308  000802  0E00               	movlw	low _rx_buffer
  2309  000804  24F3               	addwf	prodl,w,c
  2310  000806  6ED9               	movwf	fsr2l,c
  2311  000808  0E03               	movlw	high _rx_buffer
  2312  00080A  20F4               	addwfc	prodh,w,c
  2313  00080C  6EDA               	movwf	fsr2h,c
  2314  00080E  C027  FFDF         	movff	??_receiveData,indf2
  2315  000812  2A41               	incf	_rx_array_inx,f,c
  2316  000814  D000               	goto	l4482
  2317  000816                     l4482:
  2318  000816  D801               	call	u4498
  2319  000818  D00A               	goto	u4499
  2320  00081A                     u4498:
  2321  00081A  0005               	push	
  2322  00081C  6EFA               	movwf	pclath,c
  2323  00081E  5031               	movf	_serial_available,w,c
  2324  000820  6EFD               	movwf	tosl,c
  2325  000822  5032               	movf	_serial_available+1,w,c
  2326  000824  6EFE               	movwf	tosh,c
  2327  000826  50F8               	movf	tblptru,w,c
  2328  000828  6EFF               	movwf	tosu,c
  2329  00082A  50FA               	movf	pclath,w,c
  2330  00082C  0012               	return		;indir
  2331  00082E                     u4499:
  2332  00082E  501D               	movf	?_Receive_available,w,c
  2333  000830  101E               	iorwf	?_Receive_available+1,w,c
  2334  000832  B4D8               	btfsc	status,2,c
  2335  000834  D006               	goto	l4486
  2336  000836  5041               	movf	_rx_array_inx,w,c
  2337  000838  5C42               	subwf	_rx_len,w,c
  2338  00083A  A0D8               	btfss	status,0,c
  2339  00083C  D002               	goto	l4486
  2340  00083E  D7D2               	goto	l4478
  2341  000840  D000               	goto	l4486
  2342  000842                     l4486:
  2343                           
  2344                           ;FastTransfer.c: 135: }
  2345                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2346  000842  5042               	movf	_rx_len,w,c
  2347  000844  6E27               	movwf	??_receiveData& (0+255),c
  2348  000846  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2349  000848  0EFF               	movlw	255
  2350  00084A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2351  00084C  0EFF               	movlw	255
  2352  00084E  6E2A               	movwf	(??_receiveData+3)& (0+255),c
  2353  000850  5041               	movf	_rx_array_inx,w,c
  2354  000852  6E2B               	movwf	(??_receiveData+4)& (0+255),c
  2355  000854  6A2C               	clrf	(??_receiveData+5)& (0+255),c
  2356  000856  5029               	movf	??_receiveData+2,w,c
  2357  000858  262B               	addwf	??_receiveData+4,f,c
  2358  00085A  502A               	movf	??_receiveData+3,w,c
  2359  00085C  222C               	addwfc	??_receiveData+5,f,c
  2360  00085E  5027               	movf	??_receiveData,w,c
  2361  000860  182B               	xorwf	??_receiveData+4,w,c
  2362  000862  E103               	bnz	u4521
  2363  000864  5028               	movf	??_receiveData+1,w,c
  2364  000866  182C               	xorwf	??_receiveData+5,w,c
  2365  000868  A4D8               	btfss	status,2,c
  2366  00086A                     u4521:
  2367  00086A  D1F2               	goto	l4582
  2368                           
  2369                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2370  00086C  0E00               	movlw	low _rx_buffer
  2371  00086E  6E1B               	movwf	CRC8@data,c
  2372  000870  0E03               	movlw	high _rx_buffer
  2373  000872  6E1C               	movwf	CRC8@data+1,c
  2374  000874  C042  F01D         	movff	_rx_len,CRC8@len
  2375  000878  EC8C  F012         	call	_CRC8	;wreg free
  2376  00087C  6E3C               	movwf	_calc_CS,c
  2377                           
  2378                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2379  00087E  0EFF               	movlw	255
  2380  000880  6E27               	movwf	??_receiveData& (0+255),c
  2381  000882  0EFF               	movlw	255
  2382  000884  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2383  000886  5041               	movf	_rx_array_inx,w,c
  2384  000888  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2385  00088A  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2386  00088C  5027               	movf	??_receiveData,w,c
  2387  00088E  2629               	addwf	??_receiveData+2,f,c
  2388  000890  5028               	movf	??_receiveData+1,w,c
  2389  000892  222A               	addwfc	??_receiveData+3,f,c
  2390  000894  0E00               	movlw	low _rx_buffer
  2391  000896  2429               	addwf	??_receiveData+2,w,c
  2392  000898  6ED9               	movwf	fsr2l,c
  2393  00089A  0E03               	movlw	high _rx_buffer
  2394  00089C  202A               	addwfc	??_receiveData+3,w,c
  2395  00089E  6EDA               	movwf	fsr2h,c
  2396  0008A0  503C               	movf	_calc_CS,w,c
  2397  0008A2  18DE               	xorwf	postinc2,w,c
  2398  0008A4  A4D8               	btfss	status,2,c
  2399  0008A6  D11D               	goto	l4544
  2400                           
  2401                           ;FastTransfer.c: 147: int r;
  2402                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2403  0008A8  0E00               	movlw	0
  2404  0008AA  0100               	movlb	0	; () banked
  2405  0008AC  6FF1               	movwf	(receiveData@r+1)& (0+255),b
  2406  0008AE  0E00               	movlw	0
  2407  0008B0  6FF0               	movwf	receiveData@r& (0+255),b
  2408  0008B2  D054               	goto	l4504
  2409  0008B4                     l4494:
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2413  0008B4  0E00               	movlw	low _rx_buffer
  2414  0008B6  0100               	movlb	0	; () banked
  2415  0008B8  25F0               	addwf	receiveData@r& (0+255),w,b
  2416  0008BA  6ED9               	movwf	fsr2l,c
  2417  0008BC  0E03               	movlw	high _rx_buffer
  2418  0008BE  0100               	movlb	0	; () banked
  2419  0008C0  21F1               	addwfc	(receiveData@r+1)& (0+255),w,b
  2420  0008C2  6EDA               	movwf	fsr2h,c
  2421  0008C4  503D               	movf	_maxDataAddress,w,c
  2422  0008C6  5CDE               	subwf	postinc2,w,c
  2423  0008C8  B0D8               	btfsc	status,0,c
  2424  0008CA  D039               	goto	l4500
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2428  0008CC  0E01               	movlw	1
  2429  0008CE  0100               	movlb	0	; () banked
  2430  0008D0  25F0               	addwf	receiveData@r& (0+255),w,b
  2431  0008D2  6E27               	movwf	??_receiveData& (0+255),c
  2432  0008D4  0E00               	movlw	0
  2433  0008D6  0100               	movlb	0	; () banked
  2434  0008D8  21F1               	addwfc	(receiveData@r+1)& (0+255),w,b
  2435  0008DA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2436  0008DC  0E00               	movlw	low _rx_buffer
  2437  0008DE  2427               	addwf	??_receiveData,w,c
  2438  0008E0  6ED9               	movwf	fsr2l,c
  2439  0008E2  0E03               	movlw	high _rx_buffer
  2440  0008E4  2028               	addwfc	??_receiveData+1,w,c
  2441  0008E6  6EDA               	movwf	fsr2h,c
  2442  0008E8  50DF               	movf	indf2,w,c
  2443  0008EA  6E43               	movwf	_group,c
  2444                           
  2445                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2446  0008EC  0E02               	movlw	2
  2447  0008EE  0100               	movlb	0	; () banked
  2448  0008F0  25F0               	addwf	receiveData@r& (0+255),w,b
  2449  0008F2  6E27               	movwf	??_receiveData& (0+255),c
  2450  0008F4  0E00               	movlw	0
  2451  0008F6  0100               	movlb	0	; () banked
  2452  0008F8  21F1               	addwfc	(receiveData@r+1)& (0+255),w,b
  2453  0008FA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2454  0008FC  0E00               	movlw	low _rx_buffer
  2455  0008FE  2427               	addwf	??_receiveData,w,c
  2456  000900  6ED9               	movwf	fsr2l,c
  2457  000902  0E03               	movlw	high _rx_buffer
  2458  000904  2028               	addwfc	??_receiveData+1,w,c
  2459  000906  6EDA               	movwf	fsr2h,c
  2460  000908  50DF               	movf	indf2,w,c
  2461  00090A  6E44               	movwf	_group+1,c
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2465  00090C  0E00               	movlw	low _rx_buffer
  2466  00090E  0100               	movlb	0	; () banked
  2467  000910  25F0               	addwf	receiveData@r& (0+255),w,b
  2468  000912  6ED9               	movwf	fsr2l,c
  2469  000914  0E03               	movlw	high _rx_buffer
  2470  000916  0100               	movlb	0	; () banked
  2471  000918  21F1               	addwfc	(receiveData@r+1)& (0+255),w,b
  2472  00091A  6EDA               	movwf	fsr2h,c
  2473  00091C  50DF               	movf	indf2,w,c
  2474  00091E  6E27               	movwf	??_receiveData& (0+255),c
  2475  000920  5027               	movf	??_receiveData,w,c
  2476  000922  0D02               	mullw	2
  2477  000924  50F3               	movf	prodl,w,c
  2478  000926  0100               	movlb	0	; () banked
  2479  000928  25B4               	addwf	_receiveArrayAddress& (0+255),w,b
  2480  00092A  6ED9               	movwf	fsr2l,c
  2481  00092C  50F4               	movf	prodh,w,c
  2482  00092E  0100               	movlb	0	; () banked
  2483  000930  21B5               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2484  000932  6EDA               	movwf	fsr2h,c
  2485  000934  C043  FFDE         	movff	_group,postinc2
  2486  000938  C044  FFDD         	movff	_group+1,postdec2
  2487                           
  2488                           ;FastTransfer.c: 153: } else {
  2489  00093C  D004               	goto	l4502
  2490  00093E                     l4500:
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2494  00093E  0100               	movlb	0	; () banked
  2495  000940  4BB0               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2496  000942  2BB1               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2497  000944  D000               	goto	l4502
  2498  000946                     l4502:
  2499                           
  2500                           ; BSR set to: 0
  2501  000946  0E03               	movlw	3
  2502  000948  0100               	movlb	0	; () banked
  2503  00094A  25F0               	addwf	receiveData@r& (0+255),w,b
  2504  00094C  0100               	movlb	0	; () banked
  2505  00094E  6FF0               	movwf	receiveData@r& (0+255),b
  2506  000950  0E00               	movlw	0
  2507  000952  0100               	movlb	0	; () banked
  2508  000954  21F1               	addwfc	(receiveData@r+1)& (0+255),w,b
  2509  000956  0100               	movlb	0	; () banked
  2510  000958  6FF1               	movwf	(receiveData@r+1)& (0+255),b
  2511  00095A  D000               	goto	l4504
  2512  00095C                     l4504:
  2513                           
  2514                           ; BSR set to: 0
  2515  00095C  5042               	movf	_rx_len,w,c
  2516  00095E  6E27               	movwf	??_receiveData& (0+255),c
  2517  000960  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2518  000962  5027               	movf	??_receiveData,w,c
  2519  000964  0100               	movlb	0	; () banked
  2520  000966  5DF0               	subwf	receiveData@r& (0+255),w,b
  2521  000968  0100               	movlb	0	; () banked
  2522  00096A  51F1               	movf	(receiveData@r+1)& (0+255),w,b
  2523  00096C  0A80               	xorlw	128
  2524  00096E  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2525  000970  5028               	movf	??_receiveData+1,w,c
  2526  000972  0A80               	xorlw	128
  2527  000974  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2528  000976  A0D8               	btfss	status,0,c
  2529  000978  D79D               	goto	l4494
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;FastTransfer.c: 155: }
  2533                           ;FastTransfer.c: 156: }
  2534                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2535                           
  2536                           ; BSR set to: 0
  2537  00097A  5039               	movf	_AKNAKsend,w,c
  2538  00097C  B4D8               	btfsc	status,2,c
  2539  00097E  D0AA               	goto	l4534
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;FastTransfer.c: 160: unsigned char holder[3];
  2543                           ;FastTransfer.c: 161: holder[0] = 255;
  2544  000980  0100               	movlb	0	; () banked
  2545  000982  69E6               	setf	receiveData@holder& (0+255),b
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;FastTransfer.c: 162: holder[1] = 1;
  2549  000984  0E01               	movlw	1
  2550  000986  0100               	movlb	0	; () banked
  2551  000988  6FE7               	movwf	(receiveData@holder+1)& (0+255),b
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2555  00098A  0EFF               	movlw	255
  2556  00098C  6E27               	movwf	??_receiveData& (0+255),c
  2557  00098E  0EFF               	movlw	255
  2558  000990  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2559  000992  5041               	movf	_rx_array_inx,w,c
  2560  000994  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2561  000996  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2562  000998  5027               	movf	??_receiveData,w,c
  2563  00099A  2629               	addwf	??_receiveData+2,f,c
  2564  00099C  5028               	movf	??_receiveData+1,w,c
  2565  00099E  222A               	addwfc	??_receiveData+3,f,c
  2566  0009A0  0E00               	movlw	low _rx_buffer
  2567  0009A2  2429               	addwf	??_receiveData+2,w,c
  2568  0009A4  6ED9               	movwf	fsr2l,c
  2569  0009A6  0E03               	movlw	high _rx_buffer
  2570  0009A8  202A               	addwfc	??_receiveData+3,w,c
  2571  0009AA  6EDA               	movwf	fsr2h,c
  2572  0009AC  50DF               	movf	indf2,w,c
  2573  0009AE  0100               	movlb	0	; () banked
  2574  0009B0  6FE8               	movwf	(receiveData@holder+2)& (0+255),b
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2578  0009B2  0EE6               	movlw	low receiveData@holder
  2579  0009B4  6E1B               	movwf	CRC8@data,c
  2580  0009B6  0E00               	movlw	high receiveData@holder
  2581  0009B8  6E1C               	movwf	CRC8@data+1,c
  2582  0009BA  0E03               	movlw	3
  2583  0009BC  6E1D               	movwf	CRC8@len,c
  2584  0009BE  EC8C  F012         	call	_CRC8	;wreg free
  2585  0009C2  0100               	movlb	0	; () banked
  2586  0009C4  6FEC               	movwf	receiveData@crcHolder& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;FastTransfer.c: 165: serial_write(0x06);
  2590  0009C6  D801               	call	u4578
  2591  0009C8  D00B               	goto	l4518
  2592  0009CA                     u4578:
  2593  0009CA  0005               	push	
  2594  0009CC  6EFA               	movwf	pclath,c
  2595  0009CE  5035               	movf	_serial_write,w,c
  2596  0009D0  6EFD               	movwf	tosl,c
  2597  0009D2  5036               	movf	_serial_write+1,w,c
  2598  0009D4  6EFE               	movwf	tosh,c
  2599  0009D6  50F8               	movf	tblptru,w,c
  2600  0009D8  6EFF               	movwf	tosu,c
  2601  0009DA  50FA               	movf	pclath,w,c
  2602  0009DC  0E06               	movlw	6
  2603  0009DE  0012               	return		;indir
  2604  0009E0                     l4518:
  2605                           
  2606                           ;FastTransfer.c: 166: serial_write(0x85);
  2607  0009E0  D801               	call	u4588
  2608  0009E2  D00B               	goto	l4520
  2609  0009E4                     u4588:
  2610  0009E4  0005               	push	
  2611  0009E6  6EFA               	movwf	pclath,c
  2612  0009E8  5035               	movf	_serial_write,w,c
  2613  0009EA  6EFD               	movwf	tosl,c
  2614  0009EC  5036               	movf	_serial_write+1,w,c
  2615  0009EE  6EFE               	movwf	tosh,c
  2616  0009F0  50F8               	movf	tblptru,w,c
  2617  0009F2  6EFF               	movwf	tosu,c
  2618  0009F4  50FA               	movf	pclath,w,c
  2619  0009F6  0E85               	movlw	133
  2620  0009F8  0012               	return		;indir
  2621  0009FA                     l4520:
  2622                           
  2623                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2624  0009FA  D801               	call	u4598
  2625  0009FC  D00B               	goto	l4522
  2626  0009FE                     u4598:
  2627  0009FE  0005               	push	
  2628  000A00  6EFA               	movwf	pclath,c
  2629  000A02  5035               	movf	_serial_write,w,c
  2630  000A04  6EFD               	movwf	tosl,c
  2631  000A06  5036               	movf	_serial_write+1,w,c
  2632  000A08  6EFE               	movwf	tosh,c
  2633  000A0A  50F8               	movf	tblptru,w,c
  2634  000A0C  6EFF               	movwf	tosu,c
  2635  000A0E  50FA               	movf	pclath,w,c
  2636  000A10  503F               	movf	_returnAddress,w,c
  2637  000A12  0012               	return		;indir
  2638  000A14                     l4522:
  2639                           
  2640                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2641  000A14  D801               	call	u4608
  2642  000A16  D00B               	goto	l4524
  2643  000A18                     u4608:
  2644  000A18  0005               	push	
  2645  000A1A  6EFA               	movwf	pclath,c
  2646  000A1C  5035               	movf	_serial_write,w,c
  2647  000A1E  6EFD               	movwf	tosl,c
  2648  000A20  5036               	movf	_serial_write+1,w,c
  2649  000A22  6EFE               	movwf	tosh,c
  2650  000A24  50F8               	movf	tblptru,w,c
  2651  000A26  6EFF               	movwf	tosu,c
  2652  000A28  50FA               	movf	pclath,w,c
  2653  000A2A  503E               	movf	_moduleAddress,w,c
  2654  000A2C  0012               	return		;indir
  2655  000A2E                     l4524:
  2656                           
  2657                           ;FastTransfer.c: 169: serial_write(3);
  2658  000A2E  D801               	call	u4618
  2659  000A30  D00B               	goto	l4526
  2660  000A32                     u4618:
  2661  000A32  0005               	push	
  2662  000A34  6EFA               	movwf	pclath,c
  2663  000A36  5035               	movf	_serial_write,w,c
  2664  000A38  6EFD               	movwf	tosl,c
  2665  000A3A  5036               	movf	_serial_write+1,w,c
  2666  000A3C  6EFE               	movwf	tosh,c
  2667  000A3E  50F8               	movf	tblptru,w,c
  2668  000A40  6EFF               	movwf	tosu,c
  2669  000A42  50FA               	movf	pclath,w,c
  2670  000A44  0E03               	movlw	3
  2671  000A46  0012               	return		;indir
  2672  000A48                     l4526:
  2673                           
  2674                           ;FastTransfer.c: 170: serial_write(255);
  2675  000A48  D801               	call	u4628
  2676  000A4A  D00B               	goto	l4528
  2677  000A4C                     u4628:
  2678  000A4C  0005               	push	
  2679  000A4E  6EFA               	movwf	pclath,c
  2680  000A50  5035               	movf	_serial_write,w,c
  2681  000A52  6EFD               	movwf	tosl,c
  2682  000A54  5036               	movf	_serial_write+1,w,c
  2683  000A56  6EFE               	movwf	tosh,c
  2684  000A58  50F8               	movf	tblptru,w,c
  2685  000A5A  6EFF               	movwf	tosu,c
  2686  000A5C  50FA               	movf	pclath,w,c
  2687  000A5E  0EFF               	movlw	255
  2688  000A60  0012               	return		;indir
  2689  000A62                     l4528:
  2690                           
  2691                           ;FastTransfer.c: 171: serial_write(1);
  2692  000A62  D801               	call	u4638
  2693  000A64  D00B               	goto	l4530
  2694  000A66                     u4638:
  2695  000A66  0005               	push	
  2696  000A68  6EFA               	movwf	pclath,c
  2697  000A6A  5035               	movf	_serial_write,w,c
  2698  000A6C  6EFD               	movwf	tosl,c
  2699  000A6E  5036               	movf	_serial_write+1,w,c
  2700  000A70  6EFE               	movwf	tosh,c
  2701  000A72  50F8               	movf	tblptru,w,c
  2702  000A74  6EFF               	movwf	tosu,c
  2703  000A76  50FA               	movf	pclath,w,c
  2704  000A78  0E01               	movlw	1
  2705  000A7A  0012               	return		;indir
  2706  000A7C                     l4530:
  2707                           
  2708                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2709  000A7C  D801               	call	u4648
  2710  000A7E  D01C               	goto	l4532
  2711  000A80                     u4648:
  2712  000A80  0005               	push	
  2713  000A82  6EFA               	movwf	pclath,c
  2714  000A84  5035               	movf	_serial_write,w,c
  2715  000A86  6EFD               	movwf	tosl,c
  2716  000A88  5036               	movf	_serial_write+1,w,c
  2717  000A8A  6EFE               	movwf	tosh,c
  2718  000A8C  50F8               	movf	tblptru,w,c
  2719  000A8E  6EFF               	movwf	tosu,c
  2720  000A90  50FA               	movf	pclath,w,c
  2721  000A92  0EFF               	movlw	255
  2722  000A94  6E27               	movwf	??_receiveData& (0+255),c
  2723  000A96  0EFF               	movlw	255
  2724  000A98  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2725  000A9A  5041               	movf	_rx_array_inx,w,c
  2726  000A9C  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2727  000A9E  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2728  000AA0  5027               	movf	??_receiveData,w,c
  2729  000AA2  2629               	addwf	??_receiveData+2,f,c
  2730  000AA4  5028               	movf	??_receiveData+1,w,c
  2731  000AA6  222A               	addwfc	??_receiveData+3,f,c
  2732  000AA8  0E00               	movlw	low _rx_buffer
  2733  000AAA  2429               	addwf	??_receiveData+2,w,c
  2734  000AAC  6ED9               	movwf	fsr2l,c
  2735  000AAE  0E03               	movlw	high _rx_buffer
  2736  000AB0  202A               	addwfc	??_receiveData+3,w,c
  2737  000AB2  6EDA               	movwf	fsr2h,c
  2738  000AB4  50DF               	movf	indf2,w,c
  2739  000AB6  0012               	return		;indir
  2740  000AB8                     l4532:
  2741                           
  2742                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2743  000AB8  D801               	call	u4658
  2744  000ABA  D00C               	goto	l4534
  2745  000ABC                     u4658:
  2746  000ABC  0005               	push	
  2747  000ABE  6EFA               	movwf	pclath,c
  2748  000AC0  5035               	movf	_serial_write,w,c
  2749  000AC2  6EFD               	movwf	tosl,c
  2750  000AC4  5036               	movf	_serial_write+1,w,c
  2751  000AC6  6EFE               	movwf	tosh,c
  2752  000AC8  50F8               	movf	tblptru,w,c
  2753  000ACA  6EFF               	movwf	tosu,c
  2754  000ACC  50FA               	movf	pclath,w,c
  2755  000ACE  0100               	movlb	0	; () banked
  2756  000AD0  51EC               	movf	receiveData@crcHolder& (0+255),w,b
  2757  000AD2  0012               	return		;indir
  2758  000AD4                     l4534:
  2759                           
  2760                           ;FastTransfer.c: 174: }
  2761                           ;FastTransfer.c: 178: rx_len = 0;
  2762  000AD4  0E00               	movlw	0
  2763  000AD6  6E42               	movwf	_rx_len,c
  2764                           
  2765                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2766  000AD8  0E00               	movlw	0
  2767  000ADA  6E41               	movwf	_rx_array_inx,c
  2768                           
  2769                           ;FastTransfer.c: 180: return 1;
  2770  000ADC  0E01               	movlw	1
  2771  000ADE  0012               	return	
  2772                           
  2773                           ;FastTransfer.c: 181: } else {
  2774  000AE0  D0B7               	goto	l4582
  2775  000AE2                     l4544:
  2776                           
  2777                           ;FastTransfer.c: 182: crcErrorCounter++;
  2778  000AE2  0100               	movlb	0	; () banked
  2779  000AE4  4BAE               	infsnz	_crcErrorCounter& (0+255),f,b
  2780  000AE6  2BAF               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2784  000AE8  5039               	movf	_AKNAKsend,w,c
  2785  000AEA  B4D8               	btfsc	status,2,c
  2786  000AEC  D0AA               	goto	l4574
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;FastTransfer.c: 185: unsigned char holder[3];
  2790                           ;FastTransfer.c: 186: holder[0] = 255;
  2791  000AEE  0100               	movlb	0	; () banked
  2792  000AF0  69E9               	setf	receiveData@holder_1107& (0+255),b
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;FastTransfer.c: 187: holder[1] = 2;
  2796  000AF2  0E02               	movlw	2
  2797  000AF4  0100               	movlb	0	; () banked
  2798  000AF6  6FEA               	movwf	(receiveData@holder_1107+1)& (0+255),b
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2802  000AF8  0EFF               	movlw	255
  2803  000AFA  6E27               	movwf	??_receiveData& (0+255),c
  2804  000AFC  0EFF               	movlw	255
  2805  000AFE  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2806  000B00  5041               	movf	_rx_array_inx,w,c
  2807  000B02  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2808  000B04  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2809  000B06  5027               	movf	??_receiveData,w,c
  2810  000B08  2629               	addwf	??_receiveData+2,f,c
  2811  000B0A  5028               	movf	??_receiveData+1,w,c
  2812  000B0C  222A               	addwfc	??_receiveData+3,f,c
  2813  000B0E  0E00               	movlw	low _rx_buffer
  2814  000B10  2429               	addwf	??_receiveData+2,w,c
  2815  000B12  6ED9               	movwf	fsr2l,c
  2816  000B14  0E03               	movlw	high _rx_buffer
  2817  000B16  202A               	addwfc	??_receiveData+3,w,c
  2818  000B18  6EDA               	movwf	fsr2h,c
  2819  000B1A  50DF               	movf	indf2,w,c
  2820  000B1C  0100               	movlb	0	; () banked
  2821  000B1E  6FEB               	movwf	(receiveData@holder_1107+2)& (0+255),b
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  2825  000B20  0EE9               	movlw	low receiveData@holder_1107
  2826  000B22  6E1B               	movwf	CRC8@data,c
  2827  000B24  0E00               	movlw	high receiveData@holder_1107
  2828  000B26  6E1C               	movwf	CRC8@data+1,c
  2829  000B28  0E03               	movlw	3
  2830  000B2A  6E1D               	movwf	CRC8@len,c
  2831  000B2C  EC8C  F012         	call	_CRC8
  2832  000B30  0100               	movlb	0	; () banked
  2833  000B32  6FED               	movwf	receiveData@crcHolder_1108& (0+255),b
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;FastTransfer.c: 190: serial_write(0x06);
  2837  000B34  D801               	call	u4678
  2838  000B36  D00B               	goto	l4558
  2839  000B38                     u4678:
  2840  000B38  0005               	push	
  2841  000B3A  6EFA               	movwf	pclath,c
  2842  000B3C  5035               	movf	_serial_write,w,c
  2843  000B3E  6EFD               	movwf	tosl,c
  2844  000B40  5036               	movf	_serial_write+1,w,c
  2845  000B42  6EFE               	movwf	tosh,c
  2846  000B44  50F8               	movf	tblptru,w,c
  2847  000B46  6EFF               	movwf	tosu,c
  2848  000B48  50FA               	movf	pclath,w,c
  2849  000B4A  0E06               	movlw	6
  2850  000B4C  0012               	return		;indir
  2851  000B4E                     l4558:
  2852                           
  2853                           ;FastTransfer.c: 191: serial_write(0x85);
  2854  000B4E  D801               	call	u4688
  2855  000B50  D00B               	goto	l4560
  2856  000B52                     u4688:
  2857  000B52  0005               	push	
  2858  000B54  6EFA               	movwf	pclath,c
  2859  000B56  5035               	movf	_serial_write,w,c
  2860  000B58  6EFD               	movwf	tosl,c
  2861  000B5A  5036               	movf	_serial_write+1,w,c
  2862  000B5C  6EFE               	movwf	tosh,c
  2863  000B5E  50F8               	movf	tblptru,w,c
  2864  000B60  6EFF               	movwf	tosu,c
  2865  000B62  50FA               	movf	pclath,w,c
  2866  000B64  0E85               	movlw	133
  2867  000B66  0012               	return		;indir
  2868  000B68                     l4560:
  2869                           
  2870                           ;FastTransfer.c: 192: serial_write(returnAddress);
  2871  000B68  D801               	call	u4698
  2872  000B6A  D00B               	goto	l4562
  2873  000B6C                     u4698:
  2874  000B6C  0005               	push	
  2875  000B6E  6EFA               	movwf	pclath,c
  2876  000B70  5035               	movf	_serial_write,w,c
  2877  000B72  6EFD               	movwf	tosl,c
  2878  000B74  5036               	movf	_serial_write+1,w,c
  2879  000B76  6EFE               	movwf	tosh,c
  2880  000B78  50F8               	movf	tblptru,w,c
  2881  000B7A  6EFF               	movwf	tosu,c
  2882  000B7C  50FA               	movf	pclath,w,c
  2883  000B7E  503F               	movf	_returnAddress,w,c
  2884  000B80  0012               	return		;indir
  2885  000B82                     l4562:
  2886                           
  2887                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  2888  000B82  D801               	call	u4708
  2889  000B84  D00B               	goto	l4564
  2890  000B86                     u4708:
  2891  000B86  0005               	push	
  2892  000B88  6EFA               	movwf	pclath,c
  2893  000B8A  5035               	movf	_serial_write,w,c
  2894  000B8C  6EFD               	movwf	tosl,c
  2895  000B8E  5036               	movf	_serial_write+1,w,c
  2896  000B90  6EFE               	movwf	tosh,c
  2897  000B92  50F8               	movf	tblptru,w,c
  2898  000B94  6EFF               	movwf	tosu,c
  2899  000B96  50FA               	movf	pclath,w,c
  2900  000B98  503E               	movf	_moduleAddress,w,c
  2901  000B9A  0012               	return		;indir
  2902  000B9C                     l4564:
  2903                           
  2904                           ;FastTransfer.c: 194: serial_write(3);
  2905  000B9C  D801               	call	u4718
  2906  000B9E  D00B               	goto	l4566
  2907  000BA0                     u4718:
  2908  000BA0  0005               	push	
  2909  000BA2  6EFA               	movwf	pclath,c
  2910  000BA4  5035               	movf	_serial_write,w,c
  2911  000BA6  6EFD               	movwf	tosl,c
  2912  000BA8  5036               	movf	_serial_write+1,w,c
  2913  000BAA  6EFE               	movwf	tosh,c
  2914  000BAC  50F8               	movf	tblptru,w,c
  2915  000BAE  6EFF               	movwf	tosu,c
  2916  000BB0  50FA               	movf	pclath,w,c
  2917  000BB2  0E03               	movlw	3
  2918  000BB4  0012               	return		;indir
  2919  000BB6                     l4566:
  2920                           
  2921                           ;FastTransfer.c: 195: serial_write(255);
  2922  000BB6  D801               	call	u4728
  2923  000BB8  D00B               	goto	l4568
  2924  000BBA                     u4728:
  2925  000BBA  0005               	push	
  2926  000BBC  6EFA               	movwf	pclath,c
  2927  000BBE  5035               	movf	_serial_write,w,c
  2928  000BC0  6EFD               	movwf	tosl,c
  2929  000BC2  5036               	movf	_serial_write+1,w,c
  2930  000BC4  6EFE               	movwf	tosh,c
  2931  000BC6  50F8               	movf	tblptru,w,c
  2932  000BC8  6EFF               	movwf	tosu,c
  2933  000BCA  50FA               	movf	pclath,w,c
  2934  000BCC  0EFF               	movlw	255
  2935  000BCE  0012               	return		;indir
  2936  000BD0                     l4568:
  2937                           
  2938                           ;FastTransfer.c: 196: serial_write(2);
  2939  000BD0  D801               	call	u4738
  2940  000BD2  D00B               	goto	l4570
  2941  000BD4                     u4738:
  2942  000BD4  0005               	push	
  2943  000BD6  6EFA               	movwf	pclath,c
  2944  000BD8  5035               	movf	_serial_write,w,c
  2945  000BDA  6EFD               	movwf	tosl,c
  2946  000BDC  5036               	movf	_serial_write+1,w,c
  2947  000BDE  6EFE               	movwf	tosh,c
  2948  000BE0  50F8               	movf	tblptru,w,c
  2949  000BE2  6EFF               	movwf	tosu,c
  2950  000BE4  50FA               	movf	pclath,w,c
  2951  000BE6  0E02               	movlw	2
  2952  000BE8  0012               	return		;indir
  2953  000BEA                     l4570:
  2954                           
  2955                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  2956  000BEA  D801               	call	u4748
  2957  000BEC  D01C               	goto	l4572
  2958  000BEE                     u4748:
  2959  000BEE  0005               	push	
  2960  000BF0  6EFA               	movwf	pclath,c
  2961  000BF2  5035               	movf	_serial_write,w,c
  2962  000BF4  6EFD               	movwf	tosl,c
  2963  000BF6  5036               	movf	_serial_write+1,w,c
  2964  000BF8  6EFE               	movwf	tosh,c
  2965  000BFA  50F8               	movf	tblptru,w,c
  2966  000BFC  6EFF               	movwf	tosu,c
  2967  000BFE  50FA               	movf	pclath,w,c
  2968  000C00  0EFF               	movlw	255
  2969  000C02  6E27               	movwf	??_receiveData& (0+255),c
  2970  000C04  0EFF               	movlw	255
  2971  000C06  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2972  000C08  5041               	movf	_rx_array_inx,w,c
  2973  000C0A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2974  000C0C  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2975  000C0E  5027               	movf	??_receiveData,w,c
  2976  000C10  2629               	addwf	??_receiveData+2,f,c
  2977  000C12  5028               	movf	??_receiveData+1,w,c
  2978  000C14  222A               	addwfc	??_receiveData+3,f,c
  2979  000C16  0E00               	movlw	low _rx_buffer
  2980  000C18  2429               	addwf	??_receiveData+2,w,c
  2981  000C1A  6ED9               	movwf	fsr2l,c
  2982  000C1C  0E03               	movlw	high _rx_buffer
  2983  000C1E  202A               	addwfc	??_receiveData+3,w,c
  2984  000C20  6EDA               	movwf	fsr2h,c
  2985  000C22  50DF               	movf	indf2,w,c
  2986  000C24  0012               	return		;indir
  2987  000C26                     l4572:
  2988                           
  2989                           ;FastTransfer.c: 198: serial_write(crcHolder);
  2990  000C26  D801               	call	u4758
  2991  000C28  D00C               	goto	l4574
  2992  000C2A                     u4758:
  2993  000C2A  0005               	push	
  2994  000C2C  6EFA               	movwf	pclath,c
  2995  000C2E  5035               	movf	_serial_write,w,c
  2996  000C30  6EFD               	movwf	tosl,c
  2997  000C32  5036               	movf	_serial_write+1,w,c
  2998  000C34  6EFE               	movwf	tosh,c
  2999  000C36  50F8               	movf	tblptru,w,c
  3000  000C38  6EFF               	movwf	tosu,c
  3001  000C3A  50FA               	movf	pclath,w,c
  3002  000C3C  0100               	movlb	0	; () banked
  3003  000C3E  51ED               	movf	receiveData@crcHolder_1108& (0+255),w,b
  3004  000C40  0012               	return		;indir
  3005  000C42                     l4574:
  3006                           
  3007                           ;FastTransfer.c: 199: }
  3008                           ;FastTransfer.c: 202: rx_len = 0;
  3009  000C42  0E00               	movlw	0
  3010  000C44  6E42               	movwf	_rx_len,c
  3011                           
  3012                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3013  000C46  0E00               	movlw	0
  3014  000C48  6E41               	movwf	_rx_array_inx,c
  3015                           
  3016                           ;FastTransfer.c: 204: return 0;
  3017  000C4A  0E00               	movlw	0
  3018  000C4C  0012               	return	
  3019  000C4E  D000               	goto	l4582
  3020  000C50                     l4582:
  3021                           
  3022                           ;FastTransfer.c: 205: }
  3023                           ;FastTransfer.c: 206: }
  3024                           ;FastTransfer.c: 207: }
  3025                           ;FastTransfer.c: 210: return 0;
  3026  000C50  0E00               	movlw	0
  3027  000C52  0012               	return	
  3028  000C54  0012               	return		;funcret
  3029  000C56                     __end_of_receiveData:
  3030                           	opt stack 0
  3031                           tosu	equ	0xFFF
  3032                           tosh	equ	0xFFE
  3033                           tosl	equ	0xFFD
  3034                           pclath	equ	0xFFA
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           intcon	equ	0xFF2
  3042                           postinc0	equ	0xFEE
  3043                           wreg	equ	0xFE8
  3044                           indf2	equ	0xFDF
  3045                           postinc2	equ	0xFDE
  3046                           postdec2	equ	0xFDD
  3047                           plusw2	equ	0xFDB
  3048                           fsr2h	equ	0xFDA
  3049                           fsr2l	equ	0xFD9
  3050                           status	equ	0xFD8
  3051                           
  3052 ;; *************** function _Send_put *****************
  3053 ;; Defined at:
  3054 ;;		line 130 in file "UART.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  _data           1    wreg     unsigned char 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  _data           1   37[COMRAM] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;		None               void
  3061 ;; Registers used:
  3062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3068 ;;      Params:         0       0       0       0       0       0       0
  3069 ;;      Locals:         1       0       0       0       0       0       0
  3070 ;;      Temps:          0       0       0       0       0       0       0
  3071 ;;      Totals:         1       0       0       0       0       0       0
  3072 ;;Total ram usage:        1 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    6
  3075 ;; This function calls:
  3076 ;;		_UART_buff_get
  3077 ;;		_UART_buff_put
  3078 ;; This function is called by:
  3079 ;;		_SYSTEM_Initialize
  3080 ;;		_putch
  3081 ;;		_sendData
  3082 ;;		_receiveData
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text6
  3087  0026FC                     __ptext6:
  3088                           	opt stack 0
  3089  0026FC                     _Send_put:
  3090                           	opt stack 22
  3091                           
  3092                           ;incstack = 0
  3093                           ;Send_put@_data stored from wreg
  3094  0026FC  6E26               	movwf	Send_put@_data,c
  3095                           
  3096                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3097  0026FE  0E00               	movlw	low _output_buffer
  3098  002700  6E21               	movwf	UART_buff_put@_this,c
  3099  002702  0E05               	movlw	high _output_buffer
  3100  002704  6E22               	movwf	UART_buff_put@_this+1,c
  3101  002706  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3102  00270A  EC11  F00E         	call	_UART_buff_put
  3103                           
  3104                           ;UART.c: 132: if (Transmit_stall == 1) {
  3105  00270E  0445               	decf	_Transmit_stall,w,c
  3106  002710  A4D8               	btfss	status,2,c
  3107  002712  0012               	return	
  3108                           
  3109                           ;UART.c: 133: Transmit_stall = 0;
  3110  002714  0E00               	movlw	0
  3111  002716  6E45               	movwf	_Transmit_stall,c
  3112                           
  3113                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3114  002718  0E00               	movlw	low _output_buffer
  3115  00271A  6E21               	movwf	UART_buff_get@_this,c
  3116  00271C  0E05               	movlw	high _output_buffer
  3117  00271E  6E22               	movwf	UART_buff_get@_this+1,c
  3118  002720  EC29  F011         	call	_UART_buff_get	;wreg free
  3119  002724  6EAD               	movwf	4013,c	;volatile
  3120                           
  3121                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3122  002726  889D               	bsf	3997,4,c	;volatile
  3123  002728  0012               	return	
  3124  00272A  0012               	return		;funcret
  3125  00272C                     __end_of_Send_put:
  3126                           	opt stack 0
  3127                           tosu	equ	0xFFF
  3128                           tosh	equ	0xFFE
  3129                           tosl	equ	0xFFD
  3130                           pclath	equ	0xFFA
  3131                           tblptru	equ	0xFF8
  3132                           tblptrh	equ	0xFF7
  3133                           tblptrl	equ	0xFF6
  3134                           tablat	equ	0xFF5
  3135                           prodh	equ	0xFF4
  3136                           prodl	equ	0xFF3
  3137                           intcon	equ	0xFF2
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           indf2	equ	0xFDF
  3141                           postinc2	equ	0xFDE
  3142                           postdec2	equ	0xFDD
  3143                           plusw2	equ	0xFDB
  3144                           fsr2h	equ	0xFDA
  3145                           fsr2l	equ	0xFD9
  3146                           status	equ	0xFD8
  3147                           
  3148 ;; *************** function _UART_buff_put *****************
  3149 ;; Defined at:
  3150 ;;		line 68 in file "UART.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3153 ;;		 -> output_buffer(206), input_buffer(206), 
  3154 ;;  c               1   34[COMRAM] const unsigned char 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;		None
  3157 ;; Return value:  Size  Location     Type
  3158 ;;		None               void
  3159 ;; Registers used:
  3160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3166 ;;      Params:         3       0       0       0       0       0       0
  3167 ;;      Locals:         0       0       0       0       0       0       0
  3168 ;;      Temps:          2       0       0       0       0       0       0
  3169 ;;      Totals:         5       0       0       0       0       0       0
  3170 ;;Total ram usage:        5 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    5
  3173 ;; This function calls:
  3174 ;;		_UART_buff_modulo_inc
  3175 ;; This function is called by:
  3176 ;;		_Send_put
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text7
  3181  001C22                     __ptext7:
  3182                           	opt stack 0
  3183  001C22                     _UART_buff_put:
  3184                           	opt stack 22
  3185                           
  3186                           ;UART.c: 69: if (_this->count < 200) {
  3187                           
  3188                           ;incstack = 0
  3189  001C22  EE20 F0CC          	lfsr	2,204
  3190  001C26  5021               	movf	UART_buff_put@_this,w,c
  3191  001C28  26D9               	addwf	fsr2l,f,c
  3192  001C2A  5022               	movf	UART_buff_put@_this+1,w,c
  3193  001C2C  22DA               	addwfc	fsr2h,f,c
  3194  001C2E  0E01               	movlw	1
  3195  001C30  BEDB               	btfsc	plusw2,7,c
  3196  001C32  D007               	goto	l4202
  3197  001C34  0E01               	movlw	1
  3198  001C36  50DB               	movf	plusw2,w,c
  3199  001C38  E13A               	bnz	l4208
  3200  001C3A  0EC8               	movlw	200
  3201  001C3C  5CDE               	subwf	postinc2,w,c
  3202  001C3E  B0D8               	btfsc	status,0,c
  3203  001C40  D036               	goto	l4208
  3204  001C42                     l4202:
  3205                           
  3206                           ;UART.c: 70: _this->buf[_this->head] = c;
  3207  001C42  EE20 F0C8          	lfsr	2,200
  3208  001C46  5021               	movf	UART_buff_put@_this,w,c
  3209  001C48  26D9               	addwf	fsr2l,f,c
  3210  001C4A  5022               	movf	UART_buff_put@_this+1,w,c
  3211  001C4C  22DA               	addwfc	fsr2h,f,c
  3212  001C4E  CFDE F024          	movff	postinc2,??_UART_buff_put
  3213  001C52  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3214  001C56  5024               	movf	??_UART_buff_put,w,c
  3215  001C58  2421               	addwf	UART_buff_put@_this,w,c
  3216  001C5A  6ED9               	movwf	fsr2l,c
  3217  001C5C  5025               	movf	??_UART_buff_put+1,w,c
  3218  001C5E  2022               	addwfc	UART_buff_put@_this+1,w,c
  3219  001C60  6EDA               	movwf	fsr2h,c
  3220  001C62  C023  FFDF         	movff	UART_buff_put@c,indf2
  3221                           
  3222                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3223  001C66  EE20 F0C8          	lfsr	2,200
  3224  001C6A  5021               	movf	UART_buff_put@_this,w,c
  3225  001C6C  26D9               	addwf	fsr2l,f,c
  3226  001C6E  5022               	movf	UART_buff_put@_this+1,w,c
  3227  001C70  22DA               	addwfc	fsr2h,f,c
  3228  001C72  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3229  001C76  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3230  001C7A  0E00               	movlw	0
  3231  001C7C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3232  001C7E  0EC8               	movlw	200
  3233  001C80  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3234  001C82  ECAE  F013         	call	_UART_buff_modulo_inc	;wreg free
  3235  001C86  EE20 F0C8          	lfsr	2,200
  3236  001C8A  5021               	movf	UART_buff_put@_this,w,c
  3237  001C8C  26D9               	addwf	fsr2l,f,c
  3238  001C8E  5022               	movf	UART_buff_put@_this+1,w,c
  3239  001C90  22DA               	addwfc	fsr2h,f,c
  3240  001C92  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3241  001C96  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3242                           
  3243                           ;UART.c: 72: ++_this->count;
  3244  001C9A  EE20 F0CC          	lfsr	2,204
  3245  001C9E  5021               	movf	UART_buff_put@_this,w,c
  3246  001CA0  26D9               	addwf	fsr2l,f,c
  3247  001CA2  5022               	movf	UART_buff_put@_this+1,w,c
  3248  001CA4  22DA               	addwfc	fsr2h,f,c
  3249  001CA6  2ADE               	incf	postinc2,f,c
  3250  001CA8  0E00               	movlw	0
  3251  001CAA  22DD               	addwfc	postdec2,f,c
  3252                           
  3253                           ;UART.c: 73: } else {
  3254  001CAC  0012               	return	
  3255  001CAE                     l4208:
  3256                           
  3257                           ;UART.c: 74: _this->buf[_this->head] = c;
  3258  001CAE  EE20 F0C8          	lfsr	2,200
  3259  001CB2  5021               	movf	UART_buff_put@_this,w,c
  3260  001CB4  26D9               	addwf	fsr2l,f,c
  3261  001CB6  5022               	movf	UART_buff_put@_this+1,w,c
  3262  001CB8  22DA               	addwfc	fsr2h,f,c
  3263  001CBA  CFDE F024          	movff	postinc2,??_UART_buff_put
  3264  001CBE  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3265  001CC2  5024               	movf	??_UART_buff_put,w,c
  3266  001CC4  2421               	addwf	UART_buff_put@_this,w,c
  3267  001CC6  6ED9               	movwf	fsr2l,c
  3268  001CC8  5025               	movf	??_UART_buff_put+1,w,c
  3269  001CCA  2022               	addwfc	UART_buff_put@_this+1,w,c
  3270  001CCC  6EDA               	movwf	fsr2h,c
  3271  001CCE  C023  FFDF         	movff	UART_buff_put@c,indf2
  3272                           
  3273                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3274  001CD2  EE20 F0C8          	lfsr	2,200
  3275  001CD6  5021               	movf	UART_buff_put@_this,w,c
  3276  001CD8  26D9               	addwf	fsr2l,f,c
  3277  001CDA  5022               	movf	UART_buff_put@_this+1,w,c
  3278  001CDC  22DA               	addwfc	fsr2h,f,c
  3279  001CDE  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3280  001CE2  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3281  001CE6  0E00               	movlw	0
  3282  001CE8  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3283  001CEA  0EC8               	movlw	200
  3284  001CEC  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3285  001CEE  ECAE  F013         	call	_UART_buff_modulo_inc	;wreg free
  3286  001CF2  EE20 F0C8          	lfsr	2,200
  3287  001CF6  5021               	movf	UART_buff_put@_this,w,c
  3288  001CF8  26D9               	addwf	fsr2l,f,c
  3289  001CFA  5022               	movf	UART_buff_put@_this+1,w,c
  3290  001CFC  22DA               	addwfc	fsr2h,f,c
  3291  001CFE  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3292  001D02  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3293                           
  3294                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3295  001D06  EE20 F0CA          	lfsr	2,202
  3296  001D0A  5021               	movf	UART_buff_put@_this,w,c
  3297  001D0C  26D9               	addwf	fsr2l,f,c
  3298  001D0E  5022               	movf	UART_buff_put@_this+1,w,c
  3299  001D10  22DA               	addwfc	fsr2h,f,c
  3300  001D12  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3301  001D16  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3302  001D1A  0E00               	movlw	0
  3303  001D1C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3304  001D1E  0EC8               	movlw	200
  3305  001D20  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3306  001D22  ECAE  F013         	call	_UART_buff_modulo_inc	;wreg free
  3307  001D26  EE20 F0CA          	lfsr	2,202
  3308  001D2A  5021               	movf	UART_buff_put@_this,w,c
  3309  001D2C  26D9               	addwf	fsr2l,f,c
  3310  001D2E  5022               	movf	UART_buff_put@_this+1,w,c
  3311  001D30  22DA               	addwfc	fsr2h,f,c
  3312  001D32  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3313  001D36  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3314  001D3A  0012               	return	
  3315  001D3C  0012               	return		;funcret
  3316  001D3E                     __end_of_UART_buff_put:
  3317                           	opt stack 0
  3318                           tosu	equ	0xFFF
  3319                           tosh	equ	0xFFE
  3320                           tosl	equ	0xFFD
  3321                           pclath	equ	0xFFA
  3322                           tblptru	equ	0xFF8
  3323                           tblptrh	equ	0xFF7
  3324                           tblptrl	equ	0xFF6
  3325                           tablat	equ	0xFF5
  3326                           prodh	equ	0xFF4
  3327                           prodl	equ	0xFF3
  3328                           intcon	equ	0xFF2
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           indf2	equ	0xFDF
  3332                           postinc2	equ	0xFDE
  3333                           postdec2	equ	0xFDD
  3334                           plusw2	equ	0xFDB
  3335                           fsr2h	equ	0xFDA
  3336                           fsr2l	equ	0xFD9
  3337                           status	equ	0xFD8
  3338                           
  3339 ;; *************** function _Receive_peek *****************
  3340 ;; Defined at:
  3341 ;;		line 118 in file "UART.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;		None
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;                  1    wreg      unsigned char 
  3348 ;; Registers used:
  3349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3355 ;;      Params:         0       0       0       0       0       0       0
  3356 ;;      Locals:         0       0       0       0       0       0       0
  3357 ;;      Temps:          0       0       0       0       0       0       0
  3358 ;;      Totals:         0       0       0       0       0       0       0
  3359 ;;Total ram usage:        0 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    5
  3362 ;; This function calls:
  3363 ;;		_UART_buff_peek
  3364 ;; This function is called by:
  3365 ;;		_SYSTEM_Initialize
  3366 ;;		_receiveData
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text8
  3371  0029AA                     __ptext8:
  3372                           	opt stack 0
  3373  0029AA                     _Receive_peek:
  3374                           	opt stack 23
  3375                           
  3376                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3377                           
  3378                           ;incstack = 0
  3379  0029AA  0E00               	movlw	low _input_buffer
  3380  0029AC  6E1B               	movwf	UART_buff_peek@_this,c
  3381  0029AE  0E04               	movlw	high _input_buffer
  3382  0029B0  6E1C               	movwf	UART_buff_peek@_this+1,c
  3383  0029B2  EC33  F014         	call	_UART_buff_peek	;wreg free
  3384  0029B6  0012               	return	
  3385  0029B8  0012               	return		;funcret
  3386  0029BA                     __end_of_Receive_peek:
  3387                           	opt stack 0
  3388                           tosu	equ	0xFFF
  3389                           tosh	equ	0xFFE
  3390                           tosl	equ	0xFFD
  3391                           pclath	equ	0xFFA
  3392                           tblptru	equ	0xFF8
  3393                           tblptrh	equ	0xFF7
  3394                           tblptrl	equ	0xFF6
  3395                           tablat	equ	0xFF5
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           intcon	equ	0xFF2
  3399                           postinc0	equ	0xFEE
  3400                           wreg	equ	0xFE8
  3401                           indf2	equ	0xFDF
  3402                           postinc2	equ	0xFDE
  3403                           postdec2	equ	0xFDD
  3404                           plusw2	equ	0xFDB
  3405                           fsr2h	equ	0xFDA
  3406                           fsr2l	equ	0xFD9
  3407                           status	equ	0xFD8
  3408                           
  3409 ;; *************** function _UART_buff_peek *****************
  3410 ;; Defined at:
  3411 ;;		line 114 in file "UART.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3414 ;;		 -> input_buffer(206), 
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;		None
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  1    wreg      unsigned char 
  3419 ;; Registers used:
  3420 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3426 ;;      Params:         2       0       0       0       0       0       0
  3427 ;;      Locals:         0       0       0       0       0       0       0
  3428 ;;      Temps:          2       0       0       0       0       0       0
  3429 ;;      Totals:         4       0       0       0       0       0       0
  3430 ;;Total ram usage:        4 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    4
  3433 ;; This function calls:
  3434 ;;		Nothing
  3435 ;; This function is called by:
  3436 ;;		_Receive_peek
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text9
  3441  002866                     __ptext9:
  3442                           	opt stack 0
  3443  002866                     _UART_buff_peek:
  3444                           	opt stack 23
  3445                           
  3446                           ;UART.c: 115: return _this->buf[_this->tail];
  3447                           
  3448                           ;incstack = 0
  3449  002866  EE20 F0CA          	lfsr	2,202
  3450  00286A  501B               	movf	UART_buff_peek@_this,w,c
  3451  00286C  26D9               	addwf	fsr2l,f,c
  3452  00286E  501C               	movf	UART_buff_peek@_this+1,w,c
  3453  002870  22DA               	addwfc	fsr2h,f,c
  3454  002872  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3455  002876  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3456  00287A  501D               	movf	??_UART_buff_peek,w,c
  3457  00287C  241B               	addwf	UART_buff_peek@_this,w,c
  3458  00287E  6ED9               	movwf	fsr2l,c
  3459  002880  501E               	movf	??_UART_buff_peek+1,w,c
  3460  002882  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3461  002884  6EDA               	movwf	fsr2h,c
  3462  002886  50DF               	movf	indf2,w,c
  3463  002888  0012               	return	
  3464  00288A  0012               	return		;funcret
  3465  00288C                     __end_of_UART_buff_peek:
  3466                           	opt stack 0
  3467                           tosu	equ	0xFFF
  3468                           tosh	equ	0xFFE
  3469                           tosl	equ	0xFFD
  3470                           pclath	equ	0xFFA
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           intcon	equ	0xFF2
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           indf2	equ	0xFDF
  3481                           postinc2	equ	0xFDE
  3482                           postdec2	equ	0xFDD
  3483                           plusw2	equ	0xFDB
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function _CRCcheck *****************
  3489 ;; Defined at:
  3490 ;;		line 373 in file "FastTransfer.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;  rt              2    5[BANK0 ] int 
  3495 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3496 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3497 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;		None               void
  3500 ;; Registers used:
  3501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3507 ;;      Params:         0       0       0       0       0       0       0
  3508 ;;      Locals:         0       7       0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0
  3510 ;;      Totals:         0       7       0       0       0       0       0
  3511 ;;Total ram usage:        7 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    7
  3514 ;; This function calls:
  3515 ;;		Absolute function
  3516 ;;		_CRC8
  3517 ;;		_Receive_available
  3518 ;;		_Receive_get
  3519 ;;		_crcBufS_get
  3520 ;;		_crcBufS_status_put
  3521 ;; This function is called by:
  3522 ;;		_receiveData
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text10
  3527  001598                     __ptext10:
  3528                           	opt stack 0
  3529  001598                     _CRCcheck:
  3530                           	opt stack 21
  3531                           
  3532                           ;FastTransfer.c: 375: while (!(serial_available() > 3));
  3533                           
  3534                           ;incstack = 0
  3535  001598  D000               	goto	l4264
  3536  00159A                     l4264:
  3537  00159A  D801               	call	u3988
  3538  00159C  D00A               	goto	u3989
  3539  00159E                     u3988:
  3540  00159E  0005               	push	
  3541  0015A0  6EFA               	movwf	pclath,c
  3542  0015A2  5031               	movf	_serial_available,w,c
  3543  0015A4  6EFD               	movwf	tosl,c
  3544  0015A6  5032               	movf	_serial_available+1,w,c
  3545  0015A8  6EFE               	movwf	tosh,c
  3546  0015AA  50F8               	movf	tblptru,w,c
  3547  0015AC  6EFF               	movwf	tosu,c
  3548  0015AE  50FA               	movf	pclath,w,c
  3549  0015B0  0012               	return		;indir
  3550  0015B2                     u3989:
  3551  0015B2  BE1E               	btfsc	?_Receive_available+1,7,c
  3552  0015B4  D7F2               	goto	l4264
  3553  0015B6  501E               	movf	?_Receive_available+1,w,c
  3554  0015B8  E106               	bnz	l4266
  3555  0015BA  0E04               	movlw	4
  3556  0015BC  5C1D               	subwf	?_Receive_available,w,c
  3557  0015BE  B0D8               	btfsc	status,0,c
  3558  0015C0  D002               	goto	l4266
  3559  0015C2  D7EB               	goto	l4264
  3560  0015C4  D000               	goto	l4266
  3561  0015C6                     l4266:
  3562                           
  3563                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3564                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3565  0015C6  D801               	call	u4008
  3566  0015C8  D00A               	goto	u4009
  3567  0015CA                     u4008:
  3568  0015CA  0005               	push	
  3569  0015CC  6EFA               	movwf	pclath,c
  3570  0015CE  5033               	movf	_serial_read,w,c
  3571  0015D0  6EFD               	movwf	tosl,c
  3572  0015D2  5034               	movf	_serial_read+1,w,c
  3573  0015D4  6EFE               	movwf	tosh,c
  3574  0015D6  50F8               	movf	tblptru,w,c
  3575  0015D8  6EFF               	movwf	tosu,c
  3576  0015DA  50FA               	movf	pclath,w,c
  3577  0015DC  0012               	return		;indir
  3578  0015DE                     u4009:
  3579  0015DE  0100               	movlb	0	; () banked
  3580  0015E0  6FE1               	movwf	CRCcheck@arrayHolder& (0+255),b
  3581                           
  3582                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3583  0015E2  D801               	call	u4018
  3584  0015E4  D00A               	goto	u4019
  3585  0015E6                     u4018:
  3586  0015E6  0005               	push	
  3587  0015E8  6EFA               	movwf	pclath,c
  3588  0015EA  5033               	movf	_serial_read,w,c
  3589  0015EC  6EFD               	movwf	tosl,c
  3590  0015EE  5034               	movf	_serial_read+1,w,c
  3591  0015F0  6EFE               	movwf	tosh,c
  3592  0015F2  50F8               	movf	tblptru,w,c
  3593  0015F4  6EFF               	movwf	tosu,c
  3594  0015F6  50FA               	movf	pclath,w,c
  3595  0015F8  0012               	return		;indir
  3596  0015FA                     u4019:
  3597  0015FA  0100               	movlb	0	; () banked
  3598  0015FC  6FE2               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3599                           
  3600                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3601  0015FE  D801               	call	u4028
  3602  001600  D00A               	goto	u4029
  3603  001602                     u4028:
  3604  001602  0005               	push	
  3605  001604  6EFA               	movwf	pclath,c
  3606  001606  5033               	movf	_serial_read,w,c
  3607  001608  6EFD               	movwf	tosl,c
  3608  00160A  5034               	movf	_serial_read+1,w,c
  3609  00160C  6EFE               	movwf	tosh,c
  3610  00160E  50F8               	movf	tblptru,w,c
  3611  001610  6EFF               	movwf	tosu,c
  3612  001612  50FA               	movf	pclath,w,c
  3613  001614  0012               	return		;indir
  3614  001616                     u4029:
  3615  001616  0100               	movlb	0	; () banked
  3616  001618  6FE3               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3617                           
  3618                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3619  00161A  D801               	call	u4038
  3620  00161C  D00A               	goto	u4039
  3621  00161E                     u4038:
  3622  00161E  0005               	push	
  3623  001620  6EFA               	movwf	pclath,c
  3624  001622  5033               	movf	_serial_read,w,c
  3625  001624  6EFD               	movwf	tosl,c
  3626  001626  5034               	movf	_serial_read+1,w,c
  3627  001628  6EFE               	movwf	tosh,c
  3628  00162A  50F8               	movf	tblptru,w,c
  3629  00162C  6EFF               	movwf	tosu,c
  3630  00162E  50FA               	movf	pclath,w,c
  3631  001630  0012               	return		;indir
  3632  001632                     u4039:
  3633  001632  0100               	movlb	0	; () banked
  3634  001634  6FDF               	movwf	CRCcheck@SentCRC& (0+255),b
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3638  001636  0EE1               	movlw	low CRCcheck@arrayHolder
  3639  001638  6E1B               	movwf	CRC8@data,c
  3640  00163A  0E00               	movlw	high CRCcheck@arrayHolder
  3641  00163C  6E1C               	movwf	CRC8@data+1,c
  3642  00163E  0E03               	movlw	3
  3643  001640  6E1D               	movwf	CRC8@len,c
  3644  001642  EC8C  F012         	call	_CRC8	;wreg free
  3645  001646  0100               	movlb	0	; () banked
  3646  001648  6FE0               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3650  00164A  0100               	movlb	0	; () banked
  3651  00164C  51E0               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3652  00164E  0100               	movlb	0	; () banked
  3653  001650  19DF               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3654  001652  A4D8               	btfss	status,2,c
  3655  001654  D053               	goto	l4296
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;FastTransfer.c: 387: int rt;
  3659                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3660  001656  0E00               	movlw	0
  3661  001658  0100               	movlb	0	; () banked
  3662  00165A  6FE5               	movwf	(CRCcheck@rt+1)& (0+255),b
  3663  00165C  0E00               	movlw	0
  3664  00165E  6FE4               	movwf	CRCcheck@rt& (0+255),b
  3665  001660                     l4274:
  3666                           
  3667                           ; BSR set to: 0
  3668  001660  0100               	movlb	0	; () banked
  3669  001662  BFE5               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3670  001664  D00A               	goto	l4278
  3671  001666  0100               	movlb	0	; () banked
  3672  001668  51E5               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3673  00166A  E14C               	bnz	l692
  3674  00166C  0E05               	movlw	5
  3675  00166E  0100               	movlb	0	; () banked
  3676  001670  5DE4               	subwf	CRCcheck@rt& (0+255),w,b
  3677  001672  B0D8               	btfsc	status,0,c
  3678  001674  0012               	return	
  3679  001676  D001               	goto	l4278
  3680                           
  3681                           ; BSR set to: 0
  3682  001678  0012               	return	
  3683  00167A                     l4278:
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3687  00167A  0ECE               	movlw	low _crc_buffer
  3688  00167C  6E1B               	movwf	crcBufS_get@_this,c
  3689  00167E  0E00               	movlw	high _crc_buffer
  3690  001680  6E1C               	movwf	crcBufS_get@_this+1,c
  3691  001682  C0E4  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3692  001686  0E00               	movlw	0
  3693  001688  6E1E               	movwf	crcBufS_get@space,c
  3694  00168A  EC2D  F00F         	call	_crcBufS_get	;wreg free
  3695  00168E  183F               	xorwf	_returnAddress,w,c
  3696  001690  A4D8               	btfss	status,2,c
  3697  001692  D02F               	goto	l4292
  3698                           
  3699                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3700  001694  0ECE               	movlw	low _crc_buffer
  3701  001696  6E1B               	movwf	crcBufS_get@_this,c
  3702  001698  0E00               	movlw	high _crc_buffer
  3703  00169A  6E1C               	movwf	crcBufS_get@_this+1,c
  3704  00169C  C0E4  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3705  0016A0  0E01               	movlw	1
  3706  0016A2  6E1E               	movwf	crcBufS_get@space,c
  3707  0016A4  EC2D  F00F         	call	_crcBufS_get	;wreg free
  3708  0016A8  0100               	movlb	0	; () banked
  3709  0016AA  19E3               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3710  0016AC  A4D8               	btfss	status,2,c
  3711  0016AE  D021               	goto	l4292
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3715  0016B0  0100               	movlb	0	; () banked
  3716  0016B2  05E2               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3717  0016B4  A4D8               	btfss	status,2,c
  3718  0016B6  D00C               	goto	l4288
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3722  0016B8  0ECE               	movlw	low _crc_buffer
  3723  0016BA  6E1B               	movwf	crcBufS_status_put@_this,c
  3724  0016BC  0E00               	movlw	high _crc_buffer
  3725  0016BE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3726  0016C0  C0E4  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3727  0016C4  0E01               	movlw	1
  3728  0016C6  6E1E               	movwf	crcBufS_status_put@status,c
  3729  0016C8  EC0E  F010         	call	_crcBufS_status_put	;wreg free
  3730                           
  3731                           ;FastTransfer.c: 393: break;
  3732  0016CC  0012               	return	
  3733                           
  3734                           ;FastTransfer.c: 394: } else if (arrayHolder[1] == 2) {
  3735  0016CE  D011               	goto	l4292
  3736  0016D0                     l4288:
  3737  0016D0  0E02               	movlw	2
  3738  0016D2  0100               	movlb	0	; () banked
  3739  0016D4  19E2               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3740  0016D6  A4D8               	btfss	status,2,c
  3741  0016D8  D00C               	goto	l4292
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3745  0016DA  0ECE               	movlw	low _crc_buffer
  3746  0016DC  6E1B               	movwf	crcBufS_status_put@_this,c
  3747  0016DE  0E00               	movlw	high _crc_buffer
  3748  0016E0  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3749  0016E2  C0E4  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3750  0016E6  0E02               	movlw	2
  3751  0016E8  6E1E               	movwf	crcBufS_status_put@status,c
  3752  0016EA  EC0E  F010         	call	_crcBufS_status_put	;wreg free
  3753                           
  3754                           ;FastTransfer.c: 396: break;
  3755  0016EE  0012               	return	
  3756  0016F0  D000               	goto	l4292
  3757  0016F2                     l4292:
  3758  0016F2  0100               	movlb	0	; () banked
  3759  0016F4  4BE4               	infsnz	CRCcheck@rt& (0+255),f,b
  3760  0016F6  2BE5               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3761  0016F8  D7B3               	goto	l4274
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;FastTransfer.c: 397: }
  3765                           ;FastTransfer.c: 398: }
  3766                           ;FastTransfer.c: 399: }
  3767                           ;FastTransfer.c: 400: }
  3768                           ;FastTransfer.c: 401: } else {
  3769                           
  3770                           ; BSR set to: 0
  3771  0016FA  0012               	return	
  3772  0016FC                     l4296:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;FastTransfer.c: 402: crcErrorCounter++;
  3776  0016FC  0100               	movlb	0	; () banked
  3777  0016FE  4BAE               	infsnz	_crcErrorCounter& (0+255),f,b
  3778  001700  2BAF               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3779  001702  0012               	return	
  3780  001704                     l692:
  3781  001704  0012               	return		;funcret
  3782  001706                     __end_of_CRCcheck:
  3783                           	opt stack 0
  3784                           tosu	equ	0xFFF
  3785                           tosh	equ	0xFFE
  3786                           tosl	equ	0xFFD
  3787                           pclath	equ	0xFFA
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           prodh	equ	0xFF4
  3793                           prodl	equ	0xFF3
  3794                           intcon	equ	0xFF2
  3795                           postinc0	equ	0xFEE
  3796                           wreg	equ	0xFE8
  3797                           indf2	equ	0xFDF
  3798                           postinc2	equ	0xFDE
  3799                           postdec2	equ	0xFDD
  3800                           plusw2	equ	0xFDB
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function _crcBufS_status_put *****************
  3806 ;; Defined at:
  3807 ;;		line 336 in file "FastTransfer.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3810 ;;		 -> crc_buffer(17), 
  3811 ;;  time            1   28[COMRAM] unsigned char 
  3812 ;;  status          1   29[COMRAM] unsigned char 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  wantedTime      2   34[COMRAM] int 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;		None               void
  3817 ;; Registers used:
  3818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3824 ;;      Params:         4       0       0       0       0       0       0
  3825 ;;      Locals:         2       0       0       0       0       0       0
  3826 ;;      Temps:          4       0       0       0       0       0       0
  3827 ;;      Totals:        10       0       0       0       0       0       0
  3828 ;;Total ram usage:       10 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    4
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_CRCcheck
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text11
  3839  00201C                     __ptext11:
  3840                           	opt stack 0
  3841  00201C                     _crcBufS_status_put:
  3842                           	opt stack 23
  3843                           
  3844                           ;FastTransfer.c: 337: if (time >= 5) {
  3845                           
  3846                           ;incstack = 0
  3847  00201C  0E04               	movlw	4
  3848  00201E  641D               	cpfsgt	crcBufS_status_put@time,c
  3849  002020  D003               	goto	l4190
  3850                           
  3851                           ;FastTransfer.c: 338: time = 5 - 1;
  3852  002022  0E04               	movlw	4
  3853  002024  6E1D               	movwf	crcBufS_status_put@time,c
  3854  002026  D000               	goto	l4190
  3855  002028                     l4190:
  3856                           
  3857                           ;FastTransfer.c: 339: }
  3858                           ;FastTransfer.c: 340: time = time + 1;
  3859  002028  281D               	incf	crcBufS_status_put@time,w,c
  3860  00202A  6E1D               	movwf	crcBufS_status_put@time,c
  3861                           
  3862                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3863  00202C  501D               	movf	crcBufS_status_put@time,w,c
  3864  00202E  0D03               	mullw	3
  3865  002030  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3866  002034  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3867                           
  3868                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3869  002038  EE20 F00F          	lfsr	2,15
  3870  00203C  501B               	movf	crcBufS_status_put@_this,w,c
  3871  00203E  26D9               	addwf	fsr2l,f,c
  3872  002040  501C               	movf	crcBufS_status_put@_this+1,w,c
  3873  002042  22DA               	addwfc	fsr2h,f,c
  3874  002044  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3875  002046  5CDE               	subwf	postinc2,w,c
  3876  002048  50DE               	movf	postinc2,w,c
  3877  00204A  0A80               	xorlw	128
  3878  00204C  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3879  00204E  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3880  002050  0A80               	xorlw	128
  3881  002052  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3882  002054  B0D8               	btfsc	status,0,c
  3883  002056  D02B               	goto	l4198
  3884                           
  3885                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3886  002058  EE20 F00F          	lfsr	2,15
  3887  00205C  501B               	movf	crcBufS_status_put@_this,w,c
  3888  00205E  26D9               	addwf	fsr2l,f,c
  3889  002060  501C               	movf	crcBufS_status_put@_this+1,w,c
  3890  002062  22DA               	addwfc	fsr2h,f,c
  3891  002064  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3892  002068  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3893  00206C  1E1F               	comf	??_crcBufS_status_put,f,c
  3894  00206E  1E20               	comf	??_crcBufS_status_put+1,f,c
  3895  002070  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3896  002072  2A20               	incf	??_crcBufS_status_put+1,f,c
  3897  002074  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3898  002076  261F               	addwf	??_crcBufS_status_put,f,c
  3899  002078  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3900  00207A  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3901  00207C  1E1F               	comf	??_crcBufS_status_put,f,c
  3902  00207E  1E20               	comf	??_crcBufS_status_put+1,f,c
  3903  002080  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3904  002082  2A20               	incf	??_crcBufS_status_put+1,f,c
  3905  002084  0E0F               	movlw	15
  3906  002086  241F               	addwf	??_crcBufS_status_put,w,c
  3907  002088  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3908  00208A  0E00               	movlw	0
  3909  00208C  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3910  00208E  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3911                           
  3912                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3913  002090  0E02               	movlw	2
  3914  002092  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3915  002094  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3916  002096  0E00               	movlw	0
  3917  002098  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3918  00209A  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3919  00209C  501F               	movf	??_crcBufS_status_put,w,c
  3920  00209E  241B               	addwf	crcBufS_status_put@_this,w,c
  3921  0020A0  6ED9               	movwf	fsr2l,c
  3922  0020A2  5020               	movf	??_crcBufS_status_put+1,w,c
  3923  0020A4  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3924  0020A6  6EDA               	movwf	fsr2h,c
  3925  0020A8  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3926                           
  3927                           ;FastTransfer.c: 345: } else {
  3928  0020AC  0012               	return	
  3929  0020AE                     l4198:
  3930                           
  3931                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3932  0020AE  EE20 F00F          	lfsr	2,15
  3933  0020B2  501B               	movf	crcBufS_status_put@_this,w,c
  3934  0020B4  26D9               	addwf	fsr2l,f,c
  3935  0020B6  501C               	movf	crcBufS_status_put@_this+1,w,c
  3936  0020B8  22DA               	addwfc	fsr2h,f,c
  3937  0020BA  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3938  0020BE  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3939  0020C2  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3940  0020C6  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3941  0020CA  1E21               	comf	??_crcBufS_status_put+2,f,c
  3942  0020CC  1E22               	comf	??_crcBufS_status_put+3,f,c
  3943  0020CE  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3944  0020D0  2A22               	incf	??_crcBufS_status_put+3,f,c
  3945  0020D2  501F               	movf	??_crcBufS_status_put,w,c
  3946  0020D4  2621               	addwf	??_crcBufS_status_put+2,f,c
  3947  0020D6  5020               	movf	??_crcBufS_status_put+1,w,c
  3948  0020D8  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3949  0020DA  0E02               	movlw	2
  3950  0020DC  2621               	addwf	??_crcBufS_status_put+2,f,c
  3951  0020DE  0E00               	movlw	0
  3952  0020E0  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3953  0020E2  5021               	movf	??_crcBufS_status_put+2,w,c
  3954  0020E4  241B               	addwf	crcBufS_status_put@_this,w,c
  3955  0020E6  6ED9               	movwf	fsr2l,c
  3956  0020E8  5022               	movf	??_crcBufS_status_put+3,w,c
  3957  0020EA  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3958  0020EC  6EDA               	movwf	fsr2h,c
  3959  0020EE  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3960  0020F2  0012               	return	
  3961  0020F4  0012               	return		;funcret
  3962  0020F6                     __end_of_crcBufS_status_put:
  3963                           	opt stack 0
  3964                           tosu	equ	0xFFF
  3965                           tosh	equ	0xFFE
  3966                           tosl	equ	0xFFD
  3967                           pclath	equ	0xFFA
  3968                           tblptru	equ	0xFF8
  3969                           tblptrh	equ	0xFF7
  3970                           tblptrl	equ	0xFF6
  3971                           tablat	equ	0xFF5
  3972                           prodh	equ	0xFF4
  3973                           prodl	equ	0xFF3
  3974                           intcon	equ	0xFF2
  3975                           postinc0	equ	0xFEE
  3976                           wreg	equ	0xFE8
  3977                           indf2	equ	0xFDF
  3978                           postinc2	equ	0xFDE
  3979                           postdec2	equ	0xFDD
  3980                           plusw2	equ	0xFDB
  3981                           fsr2h	equ	0xFDA
  3982                           fsr2l	equ	0xFD9
  3983                           status	equ	0xFD8
  3984                           
  3985 ;; *************** function _crcBufS_get *****************
  3986 ;; Defined at:
  3987 ;;		line 353 in file "FastTransfer.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3990 ;;		 -> crc_buffer(17), 
  3991 ;;  time            1   28[COMRAM] unsigned char 
  3992 ;;  space           1   29[COMRAM] unsigned char 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  wantedTime      2   36[COMRAM] int 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      unsigned char 
  3997 ;; Registers used:
  3998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4004 ;;      Params:         4       0       0       0       0       0       0
  4005 ;;      Locals:         2       0       0       0       0       0       0
  4006 ;;      Temps:          6       0       0       0       0       0       0
  4007 ;;      Totals:        12       0       0       0       0       0       0
  4008 ;;Total ram usage:       12 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    4
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_CRCcheck
  4015 ;;		_AKNAK
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text12
  4020  001E5A                     __ptext12:
  4021                           	opt stack 0
  4022  001E5A                     _crcBufS_get:
  4023                           	opt stack 23
  4024                           
  4025                           ;FastTransfer.c: 354: if (time >= 5) {
  4026                           
  4027                           ;incstack = 0
  4028  001E5A  0E04               	movlw	4
  4029  001E5C  641D               	cpfsgt	crcBufS_get@time,c
  4030  001E5E  D003               	goto	l4166
  4031                           
  4032                           ;FastTransfer.c: 355: time = 5 - 1;
  4033  001E60  0E04               	movlw	4
  4034  001E62  6E1D               	movwf	crcBufS_get@time,c
  4035  001E64  D000               	goto	l4166
  4036  001E66                     l4166:
  4037                           
  4038                           ;FastTransfer.c: 356: }
  4039                           ;FastTransfer.c: 357: if (space >= 3) {
  4040  001E66  0E02               	movlw	2
  4041  001E68  641E               	cpfsgt	crcBufS_get@space,c
  4042  001E6A  D003               	goto	l4170
  4043                           
  4044                           ;FastTransfer.c: 358: space = 3 - 1;
  4045  001E6C  0E02               	movlw	2
  4046  001E6E  6E1E               	movwf	crcBufS_get@space,c
  4047  001E70  D000               	goto	l4170
  4048  001E72                     l4170:
  4049                           
  4050                           ;FastTransfer.c: 359: }
  4051                           ;FastTransfer.c: 360: time = time + 1;
  4052  001E72  281D               	incf	crcBufS_get@time,w,c
  4053  001E74  6E1D               	movwf	crcBufS_get@time,c
  4054                           
  4055                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4056  001E76  501D               	movf	crcBufS_get@time,w,c
  4057  001E78  0D03               	mullw	3
  4058  001E7A  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4059  001E7E  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4060                           
  4061                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4062  001E82  EE20 F00F          	lfsr	2,15
  4063  001E86  501B               	movf	crcBufS_get@_this,w,c
  4064  001E88  26D9               	addwf	fsr2l,f,c
  4065  001E8A  501C               	movf	crcBufS_get@_this+1,w,c
  4066  001E8C  22DA               	addwfc	fsr2h,f,c
  4067  001E8E  5025               	movf	crcBufS_get@wantedTime,w,c
  4068  001E90  5CDE               	subwf	postinc2,w,c
  4069  001E92  50DE               	movf	postinc2,w,c
  4070  001E94  0A80               	xorlw	128
  4071  001E96  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4072  001E98  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4073  001E9A  0A80               	xorlw	128
  4074  001E9C  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4075  001E9E  B0D8               	btfsc	status,0,c
  4076  001EA0  D02A               	goto	l4182
  4077                           
  4078                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4079  001EA2  EE20 F00F          	lfsr	2,15
  4080  001EA6  501B               	movf	crcBufS_get@_this,w,c
  4081  001EA8  26D9               	addwf	fsr2l,f,c
  4082  001EAA  501C               	movf	crcBufS_get@_this+1,w,c
  4083  001EAC  22DA               	addwfc	fsr2h,f,c
  4084  001EAE  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4085  001EB2  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4086  001EB6  1E1F               	comf	??_crcBufS_get,f,c
  4087  001EB8  1E20               	comf	??_crcBufS_get+1,f,c
  4088  001EBA  4A1F               	infsnz	??_crcBufS_get,f,c
  4089  001EBC  2A20               	incf	??_crcBufS_get+1,f,c
  4090  001EBE  5025               	movf	crcBufS_get@wantedTime,w,c
  4091  001EC0  261F               	addwf	??_crcBufS_get,f,c
  4092  001EC2  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4093  001EC4  2220               	addwfc	??_crcBufS_get+1,f,c
  4094  001EC6  1E1F               	comf	??_crcBufS_get,f,c
  4095  001EC8  1E20               	comf	??_crcBufS_get+1,f,c
  4096  001ECA  4A1F               	infsnz	??_crcBufS_get,f,c
  4097  001ECC  2A20               	incf	??_crcBufS_get+1,f,c
  4098  001ECE  0E0F               	movlw	15
  4099  001ED0  241F               	addwf	??_crcBufS_get,w,c
  4100  001ED2  6E25               	movwf	crcBufS_get@wantedTime,c
  4101  001ED4  0E00               	movlw	0
  4102  001ED6  2020               	addwfc	??_crcBufS_get+1,w,c
  4103  001ED8  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4104                           
  4105                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4106  001EDA  501E               	movf	crcBufS_get@space,w,c
  4107  001EDC  2425               	addwf	crcBufS_get@wantedTime,w,c
  4108  001EDE  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4109  001EE0  0E00               	movlw	0
  4110  001EE2  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4111  001EE4  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4112  001EE6  501F               	movf	??_crcBufS_get,w,c
  4113  001EE8  241B               	addwf	crcBufS_get@_this,w,c
  4114  001EEA  6ED9               	movwf	fsr2l,c
  4115  001EEC  5020               	movf	??_crcBufS_get+1,w,c
  4116  001EEE  201C               	addwfc	crcBufS_get@_this+1,w,c
  4117  001EF0  6EDA               	movwf	fsr2h,c
  4118  001EF2  50DF               	movf	indf2,w,c
  4119                           
  4120                           ;FastTransfer.c: 365: } else {
  4121  001EF4  0012               	return	
  4122  001EF6                     l4182:
  4123                           
  4124                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4125  001EF6  EE20 F00F          	lfsr	2,15
  4126  001EFA  501B               	movf	crcBufS_get@_this,w,c
  4127  001EFC  26D9               	addwf	fsr2l,f,c
  4128  001EFE  501C               	movf	crcBufS_get@_this+1,w,c
  4129  001F00  22DA               	addwfc	fsr2h,f,c
  4130  001F02  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4131  001F06  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4132  001F0A  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4133  001F0E  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4134  001F12  1E21               	comf	??_crcBufS_get+2,f,c
  4135  001F14  1E22               	comf	??_crcBufS_get+3,f,c
  4136  001F16  4A21               	infsnz	??_crcBufS_get+2,f,c
  4137  001F18  2A22               	incf	??_crcBufS_get+3,f,c
  4138  001F1A  501E               	movf	crcBufS_get@space,w,c
  4139  001F1C  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4140  001F1E  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4141  001F20  5021               	movf	??_crcBufS_get+2,w,c
  4142  001F22  2623               	addwf	??_crcBufS_get+4,f,c
  4143  001F24  5022               	movf	??_crcBufS_get+3,w,c
  4144  001F26  2224               	addwfc	??_crcBufS_get+5,f,c
  4145  001F28  501F               	movf	??_crcBufS_get,w,c
  4146  001F2A  2623               	addwf	??_crcBufS_get+4,f,c
  4147  001F2C  5020               	movf	??_crcBufS_get+1,w,c
  4148  001F2E  2224               	addwfc	??_crcBufS_get+5,f,c
  4149  001F30  5023               	movf	??_crcBufS_get+4,w,c
  4150  001F32  241B               	addwf	crcBufS_get@_this,w,c
  4151  001F34  6ED9               	movwf	fsr2l,c
  4152  001F36  5024               	movf	??_crcBufS_get+5,w,c
  4153  001F38  201C               	addwfc	crcBufS_get@_this+1,w,c
  4154  001F3A  6EDA               	movwf	fsr2h,c
  4155  001F3C  50DF               	movf	indf2,w,c
  4156  001F3E  0012               	return	
  4157  001F40  0012               	return		;funcret
  4158  001F42                     __end_of_crcBufS_get:
  4159                           	opt stack 0
  4160                           tosu	equ	0xFFF
  4161                           tosh	equ	0xFFE
  4162                           tosl	equ	0xFFD
  4163                           pclath	equ	0xFFA
  4164                           tblptru	equ	0xFF8
  4165                           tblptrh	equ	0xFF7
  4166                           tblptrl	equ	0xFF6
  4167                           tablat	equ	0xFF5
  4168                           prodh	equ	0xFF4
  4169                           prodl	equ	0xFF3
  4170                           intcon	equ	0xFF2
  4171                           postinc0	equ	0xFEE
  4172                           wreg	equ	0xFE8
  4173                           indf2	equ	0xFDF
  4174                           postinc2	equ	0xFDE
  4175                           postdec2	equ	0xFDD
  4176                           plusw2	equ	0xFDB
  4177                           fsr2h	equ	0xFDA
  4178                           fsr2l	equ	0xFD9
  4179                           status	equ	0xFD8
  4180                           
  4181 ;; *************** function _Receive_get *****************
  4182 ;; Defined at:
  4183 ;;		line 126 in file "UART.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;		None
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      unsigned char 
  4190 ;; Registers used:
  4191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4197 ;;      Params:         0       0       0       0       0       0       0
  4198 ;;      Locals:         0       0       0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0
  4200 ;;      Totals:         0       0       0       0       0       0       0
  4201 ;;Total ram usage:        0 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    6
  4204 ;; This function calls:
  4205 ;;		_UART_buff_get
  4206 ;; This function is called by:
  4207 ;;		_SYSTEM_Initialize
  4208 ;;		_getch
  4209 ;;		_CRCcheck
  4210 ;;		_receiveData
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text13
  4215  0029BA                     __ptext13:
  4216                           	opt stack 0
  4217  0029BA                     _Receive_get:
  4218                           	opt stack 22
  4219                           
  4220                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4221                           
  4222                           ;incstack = 0
  4223  0029BA  0E00               	movlw	low _input_buffer
  4224  0029BC  6E21               	movwf	UART_buff_get@_this,c
  4225  0029BE  0E04               	movlw	high _input_buffer
  4226  0029C0  6E22               	movwf	UART_buff_get@_this+1,c
  4227  0029C2  EC29  F011         	call	_UART_buff_get	;wreg free
  4228  0029C6  0012               	return	
  4229  0029C8  0012               	return		;funcret
  4230  0029CA                     __end_of_Receive_get:
  4231                           	opt stack 0
  4232                           tosu	equ	0xFFF
  4233                           tosh	equ	0xFFE
  4234                           tosl	equ	0xFFD
  4235                           pclath	equ	0xFFA
  4236                           tblptru	equ	0xFF8
  4237                           tblptrh	equ	0xFF7
  4238                           tblptrl	equ	0xFF6
  4239                           tablat	equ	0xFF5
  4240                           prodh	equ	0xFF4
  4241                           prodl	equ	0xFF3
  4242                           intcon	equ	0xFF2
  4243                           postinc0	equ	0xFEE
  4244                           wreg	equ	0xFE8
  4245                           indf2	equ	0xFDF
  4246                           postinc2	equ	0xFDE
  4247                           postdec2	equ	0xFDD
  4248                           plusw2	equ	0xFDB
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           
  4253 ;; *************** function _UART_buff_get *****************
  4254 ;; Defined at:
  4255 ;;		line 81 in file "UART.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4258 ;;		 -> output_buffer(206), input_buffer(206), 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  c               1   36[COMRAM] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      unsigned char 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4270 ;;      Params:         2       0       0       0       0       0       0
  4271 ;;      Locals:         1       0       0       0       0       0       0
  4272 ;;      Temps:          2       0       0       0       0       0       0
  4273 ;;      Totals:         5       0       0       0       0       0       0
  4274 ;;Total ram usage:        5 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    5
  4277 ;; This function calls:
  4278 ;;		_UART_buff_modulo_inc
  4279 ;; This function is called by:
  4280 ;;		_Receive_get
  4281 ;;		_Send_put
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text14
  4286  002252                     __ptext14:
  4287                           	opt stack 0
  4288  002252                     _UART_buff_get:
  4289                           	opt stack 22
  4290                           
  4291                           ;UART.c: 82: unsigned char c;
  4292                           ;UART.c: 83: if (_this->count > 0) {
  4293                           
  4294                           ;incstack = 0
  4295  002252  EE20 F0CC          	lfsr	2,204
  4296  002256  5021               	movf	UART_buff_get@_this,w,c
  4297  002258  26D9               	addwf	fsr2l,f,c
  4298  00225A  5022               	movf	UART_buff_get@_this+1,w,c
  4299  00225C  22DA               	addwfc	fsr2h,f,c
  4300  00225E  0E01               	movlw	1
  4301  002260  BEDB               	btfsc	plusw2,7,c
  4302  002262  D03C               	goto	l4122
  4303  002264  0E01               	movlw	1
  4304  002266  50DB               	movf	plusw2,w,c
  4305  002268  E103               	bnz	u3790
  4306  00226A  04DE               	decf	postinc2,w,c
  4307  00226C  A0D8               	btfss	status,0,c
  4308  00226E  D036               	goto	l4122
  4309  002270                     u3790:
  4310                           
  4311                           ;UART.c: 84: c = _this->buf[_this->tail];
  4312  002270  EE20 F0CA          	lfsr	2,202
  4313  002274  5021               	movf	UART_buff_get@_this,w,c
  4314  002276  26D9               	addwf	fsr2l,f,c
  4315  002278  5022               	movf	UART_buff_get@_this+1,w,c
  4316  00227A  22DA               	addwfc	fsr2h,f,c
  4317  00227C  CFDE F023          	movff	postinc2,??_UART_buff_get
  4318  002280  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4319  002284  5023               	movf	??_UART_buff_get,w,c
  4320  002286  2421               	addwf	UART_buff_get@_this,w,c
  4321  002288  6ED9               	movwf	fsr2l,c
  4322  00228A  5024               	movf	??_UART_buff_get+1,w,c
  4323  00228C  2022               	addwfc	UART_buff_get@_this+1,w,c
  4324  00228E  6EDA               	movwf	fsr2h,c
  4325  002290  50DF               	movf	indf2,w,c
  4326  002292  6E25               	movwf	UART_buff_get@c,c
  4327                           
  4328                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4329  002294  EE20 F0CA          	lfsr	2,202
  4330  002298  5021               	movf	UART_buff_get@_this,w,c
  4331  00229A  26D9               	addwf	fsr2l,f,c
  4332  00229C  5022               	movf	UART_buff_get@_this+1,w,c
  4333  00229E  22DA               	addwfc	fsr2h,f,c
  4334  0022A0  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4335  0022A4  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4336  0022A8  0E00               	movlw	0
  4337  0022AA  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4338  0022AC  0EC8               	movlw	200
  4339  0022AE  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4340  0022B0  ECAE  F013         	call	_UART_buff_modulo_inc	;wreg free
  4341  0022B4  EE20 F0CA          	lfsr	2,202
  4342  0022B8  5021               	movf	UART_buff_get@_this,w,c
  4343  0022BA  26D9               	addwf	fsr2l,f,c
  4344  0022BC  5022               	movf	UART_buff_get@_this+1,w,c
  4345  0022BE  22DA               	addwfc	fsr2h,f,c
  4346  0022C0  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4347  0022C4  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4348                           
  4349                           ;UART.c: 86: --_this->count;
  4350  0022C8  EE20 F0CC          	lfsr	2,204
  4351  0022CC  5021               	movf	UART_buff_get@_this,w,c
  4352  0022CE  26D9               	addwf	fsr2l,f,c
  4353  0022D0  5022               	movf	UART_buff_get@_this+1,w,c
  4354  0022D2  22DA               	addwfc	fsr2h,f,c
  4355  0022D4  06DE               	decf	postinc2,f,c
  4356  0022D6  0E00               	movlw	0
  4357  0022D8  5ADD               	subwfb	postdec2,f,c
  4358                           
  4359                           ;UART.c: 87: } else {
  4360  0022DA  D002               	goto	l757
  4361  0022DC                     l4122:
  4362                           
  4363                           ;UART.c: 88: c = 0;
  4364  0022DC  0E00               	movlw	0
  4365  0022DE  6E25               	movwf	UART_buff_get@c,c
  4366  0022E0                     l757:
  4367                           
  4368                           ;UART.c: 89: }
  4369                           ;UART.c: 90: return (c);
  4370  0022E0  5025               	movf	UART_buff_get@c,w,c
  4371  0022E2  0012               	return	
  4372  0022E4  0012               	return		;funcret
  4373  0022E6                     __end_of_UART_buff_get:
  4374                           	opt stack 0
  4375                           tosu	equ	0xFFF
  4376                           tosh	equ	0xFFE
  4377                           tosl	equ	0xFFD
  4378                           pclath	equ	0xFFA
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           intcon	equ	0xFF2
  4386                           postinc0	equ	0xFEE
  4387                           wreg	equ	0xFE8
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           plusw2	equ	0xFDB
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _UART_buff_modulo_inc *****************
  4397 ;; Defined at:
  4398 ;;		line 106 in file "UART.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;  value           2   26[COMRAM] const unsigned int 
  4401 ;;  modulus         2   28[COMRAM] const unsigned int 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  my_value        2   30[COMRAM] unsigned int 
  4404 ;; Return value:  Size  Location     Type
  4405 ;;                  2   26[COMRAM] unsigned int 
  4406 ;; Registers used:
  4407 ;;		wreg, status,2, status,0
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4413 ;;      Params:         4       0       0       0       0       0       0
  4414 ;;      Locals:         2       0       0       0       0       0       0
  4415 ;;      Temps:          0       0       0       0       0       0       0
  4416 ;;      Totals:         6       0       0       0       0       0       0
  4417 ;;Total ram usage:        6 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:    4
  4420 ;; This function calls:
  4421 ;;		Nothing
  4422 ;; This function is called by:
  4423 ;;		_UART_buff_put
  4424 ;;		_UART_buff_get
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text15
  4429  00275C                     __ptext15:
  4430                           	opt stack 0
  4431  00275C                     _UART_buff_modulo_inc:
  4432                           	opt stack 22
  4433                           
  4434                           ;UART.c: 107: unsigned int my_value = value + 1;
  4435                           
  4436                           ;incstack = 0
  4437  00275C  0E01               	movlw	1
  4438  00275E  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4439  002760  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4440  002762  0E00               	movlw	0
  4441  002764  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4442  002766  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4443                           
  4444                           ;UART.c: 108: if (my_value >= modulus) {
  4445  002768  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4446  00276A  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4447  00276C  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4448  00276E  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4449  002770  A0D8               	btfss	status,0,c
  4450  002772  D005               	goto	l4110
  4451                           
  4452                           ;UART.c: 109: my_value = 0;
  4453  002774  0E00               	movlw	0
  4454  002776  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4455  002778  0E00               	movlw	0
  4456  00277A  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4457  00277C  D000               	goto	l4110
  4458  00277E                     l4110:
  4459                           
  4460                           ;UART.c: 110: }
  4461                           ;UART.c: 111: return (my_value);
  4462  00277E  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4463  002782  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4464  002786  0012               	return	
  4465  002788  0012               	return		;funcret
  4466  00278A                     __end_of_UART_buff_modulo_inc:
  4467                           	opt stack 0
  4468                           tosu	equ	0xFFF
  4469                           tosh	equ	0xFFE
  4470                           tosl	equ	0xFFD
  4471                           pclath	equ	0xFFA
  4472                           tblptru	equ	0xFF8
  4473                           tblptrh	equ	0xFF7
  4474                           tblptrl	equ	0xFF6
  4475                           tablat	equ	0xFF5
  4476                           prodh	equ	0xFF4
  4477                           prodl	equ	0xFF3
  4478                           intcon	equ	0xFF2
  4479                           postinc0	equ	0xFEE
  4480                           wreg	equ	0xFE8
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           plusw2	equ	0xFDB
  4485                           fsr2h	equ	0xFDA
  4486                           fsr2l	equ	0xFD9
  4487                           status	equ	0xFD8
  4488                           
  4489 ;; *************** function _Receive_available *****************
  4490 ;; Defined at:
  4491 ;;		line 122 in file "UART.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  2   28[COMRAM] int 
  4498 ;; Registers used:
  4499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4505 ;;      Params:         2       0       0       0       0       0       0
  4506 ;;      Locals:         0       0       0       0       0       0       0
  4507 ;;      Temps:          0       0       0       0       0       0       0
  4508 ;;      Totals:         2       0       0       0       0       0       0
  4509 ;;Total ram usage:        2 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    5
  4512 ;; This function calls:
  4513 ;;		_UART_buff_size
  4514 ;; This function is called by:
  4515 ;;		_SYSTEM_Initialize
  4516 ;;		_CRCcheck
  4517 ;;		_receiveData
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text16
  4522  002920                     __ptext16:
  4523                           	opt stack 0
  4524  002920                     _Receive_available:
  4525                           	opt stack 23
  4526                           
  4527                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4528                           
  4529                           ;incstack = 0
  4530  002920  0E00               	movlw	low _input_buffer
  4531  002922  6E1B               	movwf	UART_buff_size@_this,c
  4532  002924  0E04               	movlw	high _input_buffer
  4533  002926  6E1C               	movwf	UART_buff_size@_this+1,c
  4534  002928  EC9C  F014         	call	_UART_buff_size	;wreg free
  4535  00292C  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4536  002930  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4537  002934  0012               	return	
  4538  002936  0012               	return		;funcret
  4539  002938                     __end_of_Receive_available:
  4540                           	opt stack 0
  4541                           tosu	equ	0xFFF
  4542                           tosh	equ	0xFFE
  4543                           tosl	equ	0xFFD
  4544                           pclath	equ	0xFFA
  4545                           tblptru	equ	0xFF8
  4546                           tblptrh	equ	0xFF7
  4547                           tblptrl	equ	0xFF6
  4548                           tablat	equ	0xFF5
  4549                           prodh	equ	0xFF4
  4550                           prodl	equ	0xFF3
  4551                           intcon	equ	0xFF2
  4552                           postinc0	equ	0xFEE
  4553                           wreg	equ	0xFE8
  4554                           indf2	equ	0xFDF
  4555                           postinc2	equ	0xFDE
  4556                           postdec2	equ	0xFDD
  4557                           plusw2	equ	0xFDB
  4558                           fsr2h	equ	0xFDA
  4559                           fsr2l	equ	0xFD9
  4560                           status	equ	0xFD8
  4561                           
  4562 ;; *************** function _UART_buff_size *****************
  4563 ;; Defined at:
  4564 ;;		line 102 in file "UART.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4567 ;;		 -> output_buffer(206), input_buffer(206), 
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;		None
  4570 ;; Return value:  Size  Location     Type
  4571 ;;                  2   26[COMRAM] int 
  4572 ;; Registers used:
  4573 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4579 ;;      Params:         2       0       0       0       0       0       0
  4580 ;;      Locals:         0       0       0       0       0       0       0
  4581 ;;      Temps:          0       0       0       0       0       0       0
  4582 ;;      Totals:         2       0       0       0       0       0       0
  4583 ;;Total ram usage:        2 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:    4
  4586 ;; This function calls:
  4587 ;;		Nothing
  4588 ;; This function is called by:
  4589 ;;		_Receive_available
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           	psect	text17
  4594  002938                     __ptext17:
  4595                           	opt stack 0
  4596  002938                     _UART_buff_size:
  4597                           	opt stack 23
  4598                           
  4599                           ;UART.c: 103: return (_this->count);
  4600                           
  4601                           ;incstack = 0
  4602  002938  EE20 F0CC          	lfsr	2,204
  4603  00293C  501B               	movf	UART_buff_size@_this,w,c
  4604  00293E  26D9               	addwf	fsr2l,f,c
  4605  002940  501C               	movf	UART_buff_size@_this+1,w,c
  4606  002942  22DA               	addwfc	fsr2h,f,c
  4607  002944  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4608  002948  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4609  00294C  0012               	return	
  4610  00294E  0012               	return		;funcret
  4611  002950                     __end_of_UART_buff_size:
  4612                           	opt stack 0
  4613                           tosu	equ	0xFFF
  4614                           tosh	equ	0xFFE
  4615                           tosl	equ	0xFFD
  4616                           pclath	equ	0xFFA
  4617                           tblptru	equ	0xFF8
  4618                           tblptrh	equ	0xFF7
  4619                           tblptrl	equ	0xFF6
  4620                           tablat	equ	0xFF5
  4621                           prodh	equ	0xFF4
  4622                           prodl	equ	0xFF3
  4623                           intcon	equ	0xFF2
  4624                           postinc0	equ	0xFEE
  4625                           wreg	equ	0xFE8
  4626                           indf2	equ	0xFDF
  4627                           postinc2	equ	0xFDE
  4628                           postdec2	equ	0xFDD
  4629                           plusw2	equ	0xFDB
  4630                           fsr2h	equ	0xFDA
  4631                           fsr2l	equ	0xFD9
  4632                           status	equ	0xFD8
  4633                           
  4634 ;; *************** function _CRC8 *****************
  4635 ;; Defined at:
  4636 ;;		line 34 in file "FastTransfer.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4639 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1107(3), receiveData@holder(3), 
  4640 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4641 ;;  len             1   28[COMRAM] unsigned char 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  sum             1   29[COMRAM] unsigned char 
  4644 ;;  tempI           1   31[COMRAM] unsigned char 
  4645 ;;  extract         1   30[COMRAM] unsigned char 
  4646 ;;  crc             1   32[COMRAM] unsigned char 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      unsigned char 
  4649 ;; Registers used:
  4650 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4656 ;;      Params:         3       0       0       0       0       0       0
  4657 ;;      Locals:         4       0       0       0       0       0       0
  4658 ;;      Temps:          0       0       0       0       0       0       0
  4659 ;;      Totals:         7       0       0       0       0       0       0
  4660 ;;Total ram usage:        7 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    4
  4663 ;; This function calls:
  4664 ;;		Nothing
  4665 ;; This function is called by:
  4666 ;;		_sendData
  4667 ;;		_receiveData
  4668 ;;		_CRCcheck
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           	psect	text18
  4673  002518                     __ptext18:
  4674                           	opt stack 0
  4675  002518                     _CRC8:
  4676                           	opt stack 24
  4677                           
  4678                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4679                           
  4680                           ;incstack = 0
  4681  002518  0E00               	movlw	0
  4682  00251A  6E21               	movwf	CRC8@crc,c
  4683                           
  4684                           ;FastTransfer.c: 36: while (len--) {
  4685  00251C  D01F               	goto	l4148
  4686  00251E                     l4132:
  4687                           
  4688                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4689  00251E  C01B  FFD9         	movff	CRC8@data,fsr2l
  4690  002522  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4691  002526  50DF               	movf	indf2,w,c
  4692  002528  6E1F               	movwf	CRC8@extract,c
  4693  00252A  4A1B               	infsnz	CRC8@data,f,c
  4694  00252C  2A1C               	incf	CRC8@data+1,f,c
  4695                           
  4696                           ;FastTransfer.c: 38: unsigned char tempI;
  4697                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4698  00252E  0E08               	movlw	8
  4699  002530  6E20               	movwf	CRC8@tempI,c
  4700  002532  D00F               	goto	l4146
  4701  002534                     l4138:
  4702                           
  4703                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4704  002534  5021               	movf	CRC8@crc,w,c
  4705  002536  181F               	xorwf	CRC8@extract,w,c
  4706  002538  0B01               	andlw	1
  4707  00253A  6E1E               	movwf	CRC8@sum,c
  4708                           
  4709                           ;FastTransfer.c: 41: crc >>= 1;
  4710  00253C  90D8               	bcf	status,0,c
  4711  00253E  3221               	rrcf	CRC8@crc,f,c
  4712                           
  4713                           ;FastTransfer.c: 42: if (sum) {
  4714  002540  501E               	movf	CRC8@sum,w,c
  4715  002542  B4D8               	btfsc	status,2,c
  4716  002544  D002               	goto	l578
  4717                           
  4718                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4719  002546  0E8C               	movlw	140
  4720  002548  1A21               	xorwf	CRC8@crc,f,c
  4721  00254A                     l578:
  4722                           
  4723                           ;FastTransfer.c: 44: }
  4724                           ;FastTransfer.c: 45: extract >>= 1;
  4725  00254A  90D8               	bcf	status,0,c
  4726  00254C  321F               	rrcf	CRC8@extract,f,c
  4727  00254E  0620               	decf	CRC8@tempI,f,c
  4728  002550  D000               	goto	l4146
  4729  002552                     l4146:
  4730  002552  5020               	movf	CRC8@tempI,w,c
  4731  002554  B4D8               	btfsc	status,2,c
  4732  002556  D002               	goto	l4148
  4733  002558  D7ED               	goto	l4138
  4734  00255A  D000               	goto	l4148
  4735  00255C                     l4148:
  4736  00255C  061D               	decf	CRC8@len,f,c
  4737  00255E  281D               	incf	CRC8@len,w,c
  4738  002560  A4D8               	btfss	status,2,c
  4739  002562  D7DD               	goto	l4132
  4740                           
  4741                           ;FastTransfer.c: 46: }
  4742                           ;FastTransfer.c: 47: }
  4743                           ;FastTransfer.c: 48: return crc;
  4744  002564  5021               	movf	CRC8@crc,w,c
  4745  002566  0012               	return	
  4746  002568  0012               	return		;funcret
  4747  00256A                     __end_of_CRC8:
  4748                           	opt stack 0
  4749                           tosu	equ	0xFFF
  4750                           tosh	equ	0xFFE
  4751                           tosl	equ	0xFFD
  4752                           pclath	equ	0xFFA
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           prodh	equ	0xFF4
  4758                           prodl	equ	0xFF3
  4759                           intcon	equ	0xFF2
  4760                           postinc0	equ	0xFEE
  4761                           wreg	equ	0xFE8
  4762                           indf2	equ	0xFDF
  4763                           postinc2	equ	0xFDE
  4764                           postdec2	equ	0xFDD
  4765                           plusw2	equ	0xFDB
  4766                           fsr2h	equ	0xFDA
  4767                           fsr2l	equ	0xFD9
  4768                           status	equ	0xFD8
  4769                           
  4770 ;; *************** function ___fttol *****************
  4771 ;; Defined at:
  4772 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;  f1              3    9[BANK0 ] float 
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;  lval            4   19[BANK0 ] unsigned long 
  4777 ;;  exp1            1   23[BANK0 ] unsigned char 
  4778 ;;  sign1           1   18[BANK0 ] unsigned char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  4    9[BANK0 ] long 
  4781 ;; Registers used:
  4782 ;;		wreg, status,2, status,0
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4788 ;;      Params:         0       4       0       0       0       0       0
  4789 ;;      Locals:         0       6       0       0       0       0       0
  4790 ;;      Temps:          0       5       0       0       0       0       0
  4791 ;;      Totals:         0      15       0       0       0       0       0
  4792 ;;Total ram usage:       15 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    4
  4795 ;; This function calls:
  4796 ;;		Nothing
  4797 ;; This function is called by:
  4798 ;;		_updateComms
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           	psect	text19
  4803  001870                     __ptext19:
  4804                           	opt stack 0
  4805  001870                     ___fttol:
  4806                           	opt stack 25
  4807                           
  4808                           ;incstack = 0
  4809  001870  C0EA  F0EC         	movff	___fttol@f1+2,??___fttol
  4810  001874  0100               	movlb	0	; () banked
  4811  001876  6BED               	clrf	(??___fttol+1)& (0+255),b
  4812  001878  6BEE               	clrf	(??___fttol+2)& (0+255),b
  4813  00187A  0100               	movlb	0	; () banked
  4814  00187C  35E9               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4815  00187E  0100               	movlb	0	; () banked
  4816  001880  37EC               	rlcf	??___fttol& (0+255),f,b
  4817  001882  E301               	bnc	u4771
  4818  001884  81ED               	bsf	(??___fttol+1)& (0+255),0,b
  4819  001886                     u4771:
  4820  001886  0100               	movlb	0	; () banked
  4821  001888  51EC               	movf	??___fttol& (0+255),w,b
  4822  00188A  0100               	movlb	0	; () banked
  4823  00188C  6FF6               	movwf	___fttol@exp1& (0+255),b
  4824  00188E  0100               	movlb	0	; () banked
  4825  001890  51F6               	movf	___fttol@exp1& (0+255),w,b
  4826  001892  A4D8               	btfss	status,2,c
  4827  001894  D00A               	goto	l4606
  4828                           
  4829                           ; BSR set to: 0
  4830  001896  0E00               	movlw	0
  4831  001898  0100               	movlb	0	; () banked
  4832  00189A  6FE8               	movwf	?___fttol& (0+255),b
  4833  00189C  0E00               	movlw	0
  4834  00189E  6FE9               	movwf	(?___fttol+1)& (0+255),b
  4835  0018A0  0E00               	movlw	0
  4836  0018A2  6FEA               	movwf	(?___fttol+2)& (0+255),b
  4837  0018A4  0E00               	movlw	0
  4838  0018A6  6FEB               	movwf	(?___fttol+3)& (0+255),b
  4839                           
  4840                           ; BSR set to: 0
  4841  0018A8  0012               	return	
  4842  0018AA                     l4606:
  4843                           
  4844                           ; BSR set to: 0
  4845  0018AA  0E17               	movlw	23
  4846  0018AC  0100               	movlb	0	; () banked
  4847  0018AE  6FEC               	movwf	??___fttol& (0+255),b
  4848  0018B0  C0E8  F0ED         	movff	___fttol@f1,??___fttol+1
  4849  0018B4  C0E9  F0EE         	movff	___fttol@f1+1,??___fttol+2
  4850  0018B8  C0EA  F0EF         	movff	___fttol@f1+2,??___fttol+3
  4851  0018BC  0100               	movlb	0	; () banked
  4852  0018BE  29EC               	incf	??___fttol& (0+255),w,b
  4853  0018C0  0100               	movlb	0	; () banked
  4854  0018C2  6FF0               	movwf	(??___fttol+4)& (0+255),b
  4855  0018C4  D005               	goto	u4790
  4856  0018C6                     u4795:
  4857  0018C6  0100               	movlb	0	; () banked
  4858  0018C8  90D8               	bcf	status,0,c
  4859  0018CA  33EF               	rrcf	(??___fttol+3)& (0+255),f,b
  4860  0018CC  33EE               	rrcf	(??___fttol+2)& (0+255),f,b
  4861  0018CE  33ED               	rrcf	(??___fttol+1)& (0+255),f,b
  4862  0018D0                     u4790:
  4863  0018D0  0100               	movlb	0	; () banked
  4864  0018D2  2FF0               	decfsz	(??___fttol+4)& (0+255),f,b
  4865  0018D4  D7F8               	goto	u4795
  4866  0018D6  0100               	movlb	0	; () banked
  4867  0018D8  51ED               	movf	(??___fttol+1)& (0+255),w,b
  4868  0018DA  0100               	movlb	0	; () banked
  4869  0018DC  6FF1               	movwf	___fttol@sign1& (0+255),b
  4870                           
  4871                           ; BSR set to: 0
  4872  0018DE  0100               	movlb	0	; () banked
  4873  0018E0  8FE9               	bsf	(___fttol@f1+1)& (0+255),7,b
  4874                           
  4875                           ; BSR set to: 0
  4876  0018E2  0EFF               	movlw	255
  4877  0018E4  0100               	movlb	0	; () banked
  4878  0018E6  17E8               	andwf	___fttol@f1& (0+255),f,b
  4879  0018E8  0EFF               	movlw	255
  4880  0018EA  0100               	movlb	0	; () banked
  4881  0018EC  17E9               	andwf	(___fttol@f1+1)& (0+255),f,b
  4882  0018EE  0E00               	movlw	0
  4883  0018F0  0100               	movlb	0	; () banked
  4884  0018F2  17EA               	andwf	(___fttol@f1+2)& (0+255),f,b
  4885                           
  4886                           ; BSR set to: 0
  4887  0018F4  0100               	movlb	0	; () banked
  4888  0018F6  51E8               	movf	___fttol@f1& (0+255),w,b
  4889  0018F8  0100               	movlb	0	; () banked
  4890  0018FA  6FF2               	movwf	___fttol@lval& (0+255),b
  4891  0018FC  0100               	movlb	0	; () banked
  4892  0018FE  51E9               	movf	(___fttol@f1+1)& (0+255),w,b
  4893  001900  0100               	movlb	0	; () banked
  4894  001902  6FF3               	movwf	(___fttol@lval+1)& (0+255),b
  4895  001904  0100               	movlb	0	; () banked
  4896  001906  51EA               	movf	(___fttol@f1+2)& (0+255),w,b
  4897  001908  0100               	movlb	0	; () banked
  4898  00190A  6FF4               	movwf	(___fttol@lval+2)& (0+255),b
  4899  00190C  0100               	movlb	0	; () banked
  4900  00190E  6BF5               	clrf	(___fttol@lval+3)& (0+255),b
  4901                           
  4902                           ; BSR set to: 0
  4903  001910  0E8E               	movlw	142
  4904  001912  0100               	movlb	0	; () banked
  4905  001914  5FF6               	subwf	___fttol@exp1& (0+255),f,b
  4906                           
  4907                           ; BSR set to: 0
  4908  001916  0100               	movlb	0	; () banked
  4909  001918  AFF6               	btfss	___fttol@exp1& (0+255),7,b
  4910  00191A  D01B               	goto	l4628
  4911                           
  4912                           ; BSR set to: 0
  4913  00191C  0100               	movlb	0	; () banked
  4914  00191E  51F6               	movf	___fttol@exp1& (0+255),w,b
  4915  001920  0A80               	xorlw	128
  4916  001922  0F8F               	addlw	143
  4917  001924  B0D8               	btfsc	status,0,c
  4918  001926  D00B               	goto	l4624
  4919                           
  4920                           ; BSR set to: 0
  4921  001928  0E00               	movlw	0
  4922  00192A  0100               	movlb	0	; () banked
  4923  00192C  6FE8               	movwf	?___fttol& (0+255),b
  4924  00192E  0E00               	movlw	0
  4925  001930  6FE9               	movwf	(?___fttol+1)& (0+255),b
  4926  001932  0E00               	movlw	0
  4927  001934  6FEA               	movwf	(?___fttol+2)& (0+255),b
  4928  001936  0E00               	movlw	0
  4929  001938  6FEB               	movwf	(?___fttol+3)& (0+255),b
  4930                           
  4931                           ; BSR set to: 0
  4932  00193A  0012               	return	
  4933                           
  4934                           ; BSR set to: 0
  4935  00193C  D000               	goto	l4624
  4936  00193E                     l4624:
  4937                           
  4938                           ; BSR set to: 0
  4939  00193E  0100               	movlb	0	; () banked
  4940  001940  90D8               	bcf	status,0,c
  4941  001942  33F5               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4942  001944  33F4               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4943  001946  33F3               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4944  001948  33F2               	rrcf	___fttol@lval& (0+255),f,b
  4945                           
  4946                           ; BSR set to: 0
  4947  00194A  0100               	movlb	0	; () banked
  4948  00194C  3FF6               	incfsz	___fttol@exp1& (0+255),f,b
  4949  00194E  D7F7               	goto	l4624
  4950                           
  4951                           ; BSR set to: 0
  4952  001950  D01F               	goto	l4638
  4953  001952                     l4628:
  4954                           
  4955                           ; BSR set to: 0
  4956  001952  0E17               	movlw	23
  4957  001954  0100               	movlb	0	; () banked
  4958  001956  65F6               	cpfsgt	___fttol@exp1& (0+255),b
  4959  001958  D014               	goto	l4636
  4960                           
  4961                           ; BSR set to: 0
  4962  00195A  0E00               	movlw	0
  4963  00195C  0100               	movlb	0	; () banked
  4964  00195E  6FE8               	movwf	?___fttol& (0+255),b
  4965  001960  0E00               	movlw	0
  4966  001962  6FE9               	movwf	(?___fttol+1)& (0+255),b
  4967  001964  0E00               	movlw	0
  4968  001966  6FEA               	movwf	(?___fttol+2)& (0+255),b
  4969  001968  0E00               	movlw	0
  4970  00196A  6FEB               	movwf	(?___fttol+3)& (0+255),b
  4971                           
  4972                           ; BSR set to: 0
  4973  00196C  0012               	return	
  4974                           
  4975                           ; BSR set to: 0
  4976  00196E  D009               	goto	l4636
  4977  001970                     l4634:
  4978                           
  4979                           ; BSR set to: 0
  4980  001970  0100               	movlb	0	; () banked
  4981  001972  90D8               	bcf	status,0,c
  4982  001974  37F2               	rlcf	___fttol@lval& (0+255),f,b
  4983  001976  37F3               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4984  001978  37F4               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4985  00197A  37F5               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4986  00197C  0100               	movlb	0	; () banked
  4987  00197E  07F6               	decf	___fttol@exp1& (0+255),f,b
  4988  001980  D000               	goto	l4636
  4989  001982                     l4636:
  4990                           
  4991                           ; BSR set to: 0
  4992  001982  0100               	movlb	0	; () banked
  4993  001984  51F6               	movf	___fttol@exp1& (0+255),w,b
  4994  001986  0100               	movlb	0	; () banked
  4995  001988  B4D8               	btfsc	status,2,c
  4996  00198A  D002               	goto	l4638
  4997  00198C  D7F1               	goto	l4634
  4998                           
  4999                           ; BSR set to: 0
  5000  00198E  D000               	goto	l4638
  5001  001990                     l4638:
  5002                           
  5003                           ; BSR set to: 0
  5004  001990  0100               	movlb	0	; () banked
  5005  001992  51F1               	movf	___fttol@sign1& (0+255),w,b
  5006  001994  0100               	movlb	0	; () banked
  5007  001996  B4D8               	btfsc	status,2,c
  5008  001998  D00A               	goto	l4642
  5009                           
  5010                           ; BSR set to: 0
  5011  00199A  0100               	movlb	0	; () banked
  5012  00199C  1FF5               	comf	(___fttol@lval+3)& (0+255),f,b
  5013  00199E  1FF4               	comf	(___fttol@lval+2)& (0+255),f,b
  5014  0019A0  1FF3               	comf	(___fttol@lval+1)& (0+255),f,b
  5015  0019A2  6DF2               	negf	___fttol@lval& (0+255),b
  5016  0019A4  0E00               	movlw	0
  5017  0019A6  23F3               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5018  0019A8  23F4               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5019  0019AA  23F5               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5020  0019AC  D000               	goto	l4642
  5021  0019AE                     l4642:
  5022                           
  5023                           ; BSR set to: 0
  5024  0019AE  C0F2  F0E8         	movff	___fttol@lval,?___fttol
  5025  0019B2  C0F3  F0E9         	movff	___fttol@lval+1,?___fttol+1
  5026  0019B6  C0F4  F0EA         	movff	___fttol@lval+2,?___fttol+2
  5027  0019BA  C0F5  F0EB         	movff	___fttol@lval+3,?___fttol+3
  5028  0019BE  0012               	return	
  5029                           
  5030                           ; BSR set to: 0
  5031                           
  5032                           ; BSR set to: 0
  5033  0019C0  0012               	return		;funcret
  5034  0019C2                     __end_of___fttol:
  5035                           	opt stack 0
  5036                           tosu	equ	0xFFF
  5037                           tosh	equ	0xFFE
  5038                           tosl	equ	0xFFD
  5039                           pclath	equ	0xFFA
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           prodh	equ	0xFF4
  5045                           prodl	equ	0xFF3
  5046                           intcon	equ	0xFF2
  5047                           postinc0	equ	0xFEE
  5048                           wreg	equ	0xFE8
  5049                           indf2	equ	0xFDF
  5050                           postinc2	equ	0xFDE
  5051                           postdec2	equ	0xFDD
  5052                           plusw2	equ	0xFDB
  5053                           fsr2h	equ	0xFDA
  5054                           fsr2l	equ	0xFD9
  5055                           status	equ	0xFD8
  5056                           
  5057 ;; *************** function _ToSend *****************
  5058 ;; Defined at:
  5059 ;;		line 216 in file "FastTransfer.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;  where           1    wreg     unsigned char 
  5062 ;;  what            2   24[BANK0 ] unsigned int 
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;  where           1   43[COMRAM] unsigned char 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;		None               void
  5067 ;; Registers used:
  5068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5074 ;;      Params:         0       2       0       0       0       0       0
  5075 ;;      Locals:         1       0       0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0
  5077 ;;      Totals:         1       2       0       0       0       0       0
  5078 ;;Total ram usage:        3 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    6
  5081 ;; This function calls:
  5082 ;;		_FastTransfer_buffer_put
  5083 ;; This function is called by:
  5084 ;;		_updateComms
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           	psect	text20
  5089  0028EA                     __ptext20:
  5090                           	opt stack 0
  5091  0028EA                     _ToSend:
  5092                           	opt stack 23
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;incstack = 0
  5096                           ;ToSend@where stored from wreg
  5097  0028EA  6E2C               	movwf	ToSend@where,c
  5098                           
  5099                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  5100  0028EC  0E00               	movlw	low _ring_buffer
  5101  0028EE  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5102  0028F0  0E02               	movlw	high _ring_buffer
  5103  0028F2  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5104  0028F4  C02C  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5105  0028F8  C0F7  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5106  0028FC  C0F8  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5107  002900  EC83  F00B         	call	_FastTransfer_buffer_put	;wreg free
  5108  002904  0012               	return		;funcret
  5109  002906                     __end_of_ToSend:
  5110                           	opt stack 0
  5111                           tosu	equ	0xFFF
  5112                           tosh	equ	0xFFE
  5113                           tosl	equ	0xFFD
  5114                           pclath	equ	0xFFA
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           prodh	equ	0xFF4
  5120                           prodl	equ	0xFF3
  5121                           intcon	equ	0xFF2
  5122                           postinc0	equ	0xFEE
  5123                           wreg	equ	0xFE8
  5124                           indf2	equ	0xFDF
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           plusw2	equ	0xFDB
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _FastTransfer_buffer_put *****************
  5133 ;; Defined at:
  5134 ;;		line 223 in file "FastTransfer.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5137 ;;		 -> ring_buffer(206), 
  5138 ;;  towhere         1   34[COMRAM] unsigned char 
  5139 ;;  towhat          2   35[COMRAM] unsigned int 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;		None               void
  5144 ;; Registers used:
  5145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5151 ;;      Params:         5       0       0       0       0       0       0
  5152 ;;      Locals:         0       0       0       0       0       0       0
  5153 ;;      Temps:          2       0       0       0       0       0       0
  5154 ;;      Totals:         7       0       0       0       0       0       0
  5155 ;;Total ram usage:        7 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    5
  5158 ;; This function calls:
  5159 ;;		_FastTransfer_buffer_modulo_inc
  5160 ;; This function is called by:
  5161 ;;		_ToSend
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text21
  5166  001706                     __ptext21:
  5167                           	opt stack 0
  5168  001706                     _FastTransfer_buffer_put:
  5169                           	opt stack 23
  5170                           
  5171                           ;FastTransfer.c: 225: group.integer = towhat;
  5172                           
  5173                           ;incstack = 0
  5174  001706  C024  F043         	movff	FastTransfer_buffer_put@towhat,_group
  5175  00170A  C025  F044         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5176                           
  5177                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  5178  00170E  EE20 F0CC          	lfsr	2,204
  5179  001712  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5180  001714  26D9               	addwf	fsr2l,f,c
  5181  001716  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5182  001718  22DA               	addwfc	fsr2h,f,c
  5183  00171A  0E01               	movlw	1
  5184  00171C  BEDB               	btfsc	plusw2,7,c
  5185  00171E  D007               	goto	l4302
  5186  001720  0E01               	movlw	1
  5187  001722  50DB               	movf	plusw2,w,c
  5188  001724  E103               	bnz	u4111
  5189  001726  0EC5               	movlw	197
  5190  001728  5CDE               	subwf	postinc2,w,c
  5191  00172A  B0D8               	btfsc	status,0,c
  5192  00172C                     u4111:
  5193  00172C  0012               	return	
  5194  00172E                     l4302:
  5195                           
  5196                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  5197  00172E  EE20 F0C8          	lfsr	2,200
  5198  001732  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5199  001734  26D9               	addwf	fsr2l,f,c
  5200  001736  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5201  001738  22DA               	addwfc	fsr2h,f,c
  5202  00173A  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5203  00173E  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5204  001742  5026               	movf	??_FastTransfer_buffer_put,w,c
  5205  001744  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5206  001746  6ED9               	movwf	fsr2l,c
  5207  001748  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5208  00174A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5209  00174C  6EDA               	movwf	fsr2h,c
  5210  00174E  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5211                           
  5212                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5213  001752  EE20 F0C8          	lfsr	2,200
  5214  001756  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5215  001758  26D9               	addwf	fsr2l,f,c
  5216  00175A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5217  00175C  22DA               	addwfc	fsr2h,f,c
  5218  00175E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5219  001762  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5220  001766  0E00               	movlw	0
  5221  001768  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5222  00176A  0EC8               	movlw	200
  5223  00176C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5224  00176E  ECC5  F013         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5225  001772  EE20 F0C8          	lfsr	2,200
  5226  001776  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5227  001778  26D9               	addwf	fsr2l,f,c
  5228  00177A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5229  00177C  22DA               	addwfc	fsr2h,f,c
  5230  00177E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5231  001782  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5232                           
  5233                           ;FastTransfer.c: 230: ++_this->count;
  5234  001786  EE20 F0CC          	lfsr	2,204
  5235  00178A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5236  00178C  26D9               	addwf	fsr2l,f,c
  5237  00178E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5238  001790  22DA               	addwfc	fsr2h,f,c
  5239  001792  2ADE               	incf	postinc2,f,c
  5240  001794  0E00               	movlw	0
  5241  001796  22DD               	addwfc	postdec2,f,c
  5242                           
  5243                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  5244  001798  EE20 F0C8          	lfsr	2,200
  5245  00179C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5246  00179E  26D9               	addwf	fsr2l,f,c
  5247  0017A0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5248  0017A2  22DA               	addwfc	fsr2h,f,c
  5249  0017A4  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5250  0017A8  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5251  0017AC  5026               	movf	??_FastTransfer_buffer_put,w,c
  5252  0017AE  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5253  0017B0  6ED9               	movwf	fsr2l,c
  5254  0017B2  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5255  0017B4  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5256  0017B6  6EDA               	movwf	fsr2h,c
  5257  0017B8  C043  FFDF         	movff	_group,indf2
  5258                           
  5259                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5260  0017BC  EE20 F0C8          	lfsr	2,200
  5261  0017C0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5262  0017C2  26D9               	addwf	fsr2l,f,c
  5263  0017C4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5264  0017C6  22DA               	addwfc	fsr2h,f,c
  5265  0017C8  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5266  0017CC  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5267  0017D0  0E00               	movlw	0
  5268  0017D2  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5269  0017D4  0EC8               	movlw	200
  5270  0017D6  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5271  0017D8  ECC5  F013         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5272  0017DC  EE20 F0C8          	lfsr	2,200
  5273  0017E0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5274  0017E2  26D9               	addwf	fsr2l,f,c
  5275  0017E4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5276  0017E6  22DA               	addwfc	fsr2h,f,c
  5277  0017E8  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5278  0017EC  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5279                           
  5280                           ;FastTransfer.c: 233: ++_this->count;
  5281  0017F0  EE20 F0CC          	lfsr	2,204
  5282  0017F4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5283  0017F6  26D9               	addwf	fsr2l,f,c
  5284  0017F8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5285  0017FA  22DA               	addwfc	fsr2h,f,c
  5286  0017FC  2ADE               	incf	postinc2,f,c
  5287  0017FE  0E00               	movlw	0
  5288  001800  22DD               	addwfc	postdec2,f,c
  5289                           
  5290                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  5291  001802  EE20 F0C8          	lfsr	2,200
  5292  001806  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5293  001808  26D9               	addwf	fsr2l,f,c
  5294  00180A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5295  00180C  22DA               	addwfc	fsr2h,f,c
  5296  00180E  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5297  001812  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5298  001816  5026               	movf	??_FastTransfer_buffer_put,w,c
  5299  001818  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5300  00181A  6ED9               	movwf	fsr2l,c
  5301  00181C  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5302  00181E  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5303  001820  6EDA               	movwf	fsr2h,c
  5304  001822  C044  FFDF         	movff	_group+1,indf2
  5305                           
  5306                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5307  001826  EE20 F0C8          	lfsr	2,200
  5308  00182A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5309  00182C  26D9               	addwf	fsr2l,f,c
  5310  00182E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5311  001830  22DA               	addwfc	fsr2h,f,c
  5312  001832  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5313  001836  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5314  00183A  0E00               	movlw	0
  5315  00183C  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5316  00183E  0EC8               	movlw	200
  5317  001840  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5318  001842  ECC5  F013         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5319  001846  EE20 F0C8          	lfsr	2,200
  5320  00184A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5321  00184C  26D9               	addwf	fsr2l,f,c
  5322  00184E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5323  001850  22DA               	addwfc	fsr2h,f,c
  5324  001852  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5325  001856  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5326                           
  5327                           ;FastTransfer.c: 236: ++_this->count;
  5328  00185A  EE20 F0CC          	lfsr	2,204
  5329  00185E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5330  001860  26D9               	addwf	fsr2l,f,c
  5331  001862  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5332  001864  22DA               	addwfc	fsr2h,f,c
  5333  001866  2ADE               	incf	postinc2,f,c
  5334  001868  0E00               	movlw	0
  5335  00186A  22DD               	addwfc	postdec2,f,c
  5336  00186C  0012               	return	
  5337  00186E  0012               	return		;funcret
  5338  001870                     __end_of_FastTransfer_buffer_put:
  5339                           	opt stack 0
  5340                           tosu	equ	0xFFF
  5341                           tosh	equ	0xFFE
  5342                           tosl	equ	0xFFD
  5343                           pclath	equ	0xFFA
  5344                           tblptru	equ	0xFF8
  5345                           tblptrh	equ	0xFF7
  5346                           tblptrl	equ	0xFF6
  5347                           tablat	equ	0xFF5
  5348                           prodh	equ	0xFF4
  5349                           prodl	equ	0xFF3
  5350                           intcon	equ	0xFF2
  5351                           postinc0	equ	0xFEE
  5352                           wreg	equ	0xFE8
  5353                           indf2	equ	0xFDF
  5354                           postinc2	equ	0xFDE
  5355                           postdec2	equ	0xFDD
  5356                           plusw2	equ	0xFDB
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5362 ;; Defined at:
  5363 ;;		line 273 in file "FastTransfer.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  value           2   26[COMRAM] const unsigned int 
  5366 ;;  modulus         2   28[COMRAM] const unsigned int 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  my_value        2   30[COMRAM] unsigned int 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  2   26[COMRAM] unsigned int 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5378 ;;      Params:         4       0       0       0       0       0       0
  5379 ;;      Locals:         2       0       0       0       0       0       0
  5380 ;;      Temps:          0       0       0       0       0       0       0
  5381 ;;      Totals:         6       0       0       0       0       0       0
  5382 ;;Total ram usage:        6 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    4
  5385 ;; This function calls:
  5386 ;;		Nothing
  5387 ;; This function is called by:
  5388 ;;		_FastTransfer_buffer_put
  5389 ;;		_FastTransfer_buffer_get
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text22
  5394  00278A                     __ptext22:
  5395                           	opt stack 0
  5396  00278A                     _FastTransfer_buffer_modulo_inc:
  5397                           	opt stack 23
  5398                           
  5399                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  5400                           
  5401                           ;incstack = 0
  5402  00278A  0E01               	movlw	1
  5403  00278C  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5404  00278E  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5405  002790  0E00               	movlw	0
  5406  002792  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5407  002794  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5408                           
  5409                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  5410  002796  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5411  002798  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5412  00279A  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5413  00279C  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5414  00279E  A0D8               	btfss	status,0,c
  5415  0027A0  D005               	goto	l4158
  5416                           
  5417                           ;FastTransfer.c: 276: my_value = 0;
  5418  0027A2  0E00               	movlw	0
  5419  0027A4  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5420  0027A6  0E00               	movlw	0
  5421  0027A8  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5422  0027AA  D000               	goto	l4158
  5423  0027AC                     l4158:
  5424                           
  5425                           ;FastTransfer.c: 277: }
  5426                           ;FastTransfer.c: 278: return (my_value);
  5427  0027AC  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5428  0027B0  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5429  0027B4  0012               	return	
  5430  0027B6  0012               	return		;funcret
  5431  0027B8                     __end_of_FastTransfer_buffer_modulo_inc:
  5432                           	opt stack 0
  5433                           tosu	equ	0xFFF
  5434                           tosh	equ	0xFFE
  5435                           tosl	equ	0xFFD
  5436                           pclath	equ	0xFFA
  5437                           tblptru	equ	0xFF8
  5438                           tblptrh	equ	0xFF7
  5439                           tblptrl	equ	0xFF6
  5440                           tablat	equ	0xFF5
  5441                           prodh	equ	0xFF4
  5442                           prodl	equ	0xFF3
  5443                           intcon	equ	0xFF2
  5444                           postinc0	equ	0xFEE
  5445                           wreg	equ	0xFE8
  5446                           indf2	equ	0xFDF
  5447                           postinc2	equ	0xFDE
  5448                           postdec2	equ	0xFDD
  5449                           plusw2	equ	0xFDB
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function _Tempeture_Get *****************
  5455 ;; Defined at:
  5456 ;;		line 91 in file "Tempeture.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  channelnum      2   32[COMRAM] int 
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  3   32[COMRAM] float 
  5463 ;; Registers used:
  5464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5470 ;;      Params:         3       0       0       0       0       0       0
  5471 ;;      Locals:         0       0       0       0       0       0       0
  5472 ;;      Temps:          0       0       0       0       0       0       0
  5473 ;;      Totals:         3       0       0       0       0       0       0
  5474 ;;Total ram usage:        3 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    5
  5477 ;; This function calls:
  5478 ;;		___wmul
  5479 ;; This function is called by:
  5480 ;;		_updateComms
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           	psect	text23
  5485  00272C                     __ptext23:
  5486                           	opt stack 0
  5487  00272C                     _Tempeture_Get:
  5488                           	opt stack 24
  5489                           
  5490                           ;Tempeture.c: 93: return Temp_DegF[channelnum];
  5491                           
  5492                           ;incstack = 0
  5493  00272C  C021  F01B         	movff	Tempeture_Get@channelnum,___wmul@multiplier
  5494  002730  C022  F01C         	movff	Tempeture_Get@channelnum+1,___wmul@multiplier+1
  5495  002734  0E00               	movlw	0
  5496  002736  6E1E               	movwf	___wmul@multiplicand+1,c
  5497  002738  0E03               	movlw	3
  5498  00273A  6E1D               	movwf	___wmul@multiplicand,c
  5499  00273C  EC1F  F014         	call	___wmul	;wreg free
  5500  002740  0E3C               	movlw	low _Temp_DegF
  5501  002742  241B               	addwf	?___wmul,w,c
  5502  002744  6ED9               	movwf	fsr2l,c
  5503  002746  0E01               	movlw	high _Temp_DegF
  5504  002748  201C               	addwfc	?___wmul+1,w,c
  5505  00274A  6EDA               	movwf	fsr2h,c
  5506  00274C  CFDE F021          	movff	postinc2,?_Tempeture_Get
  5507  002750  CFDE F022          	movff	postinc2,?_Tempeture_Get+1
  5508  002754  CFDD F023          	movff	postdec2,?_Tempeture_Get+2
  5509  002758  0012               	return	
  5510  00275A  0012               	return		;funcret
  5511  00275C                     __end_of_Tempeture_Get:
  5512                           	opt stack 0
  5513                           tosu	equ	0xFFF
  5514                           tosh	equ	0xFFE
  5515                           tosl	equ	0xFFD
  5516                           pclath	equ	0xFFA
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           postinc0	equ	0xFEE
  5525                           wreg	equ	0xFE8
  5526                           indf2	equ	0xFDF
  5527                           postinc2	equ	0xFDE
  5528                           postdec2	equ	0xFDD
  5529                           plusw2	equ	0xFDB
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function _Delay *****************
  5535 ;; Defined at:
  5536 ;;		line 37 in file "Functions.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  d_lenth         4   26[COMRAM] long 
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  wait            4   31[COMRAM] long 
  5541 ;; Return value:  Size  Location     Type
  5542 ;;		None               void
  5543 ;; Registers used:
  5544 ;;		wreg, status,2, status,0
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5550 ;;      Params:         4       0       0       0       0       0       0
  5551 ;;      Locals:         4       0       0       0       0       0       0
  5552 ;;      Temps:          1       0       0       0       0       0       0
  5553 ;;      Totals:         9       0       0       0       0       0       0
  5554 ;;Total ram usage:        9 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    4
  5557 ;; This function calls:
  5558 ;;		Nothing
  5559 ;; This function is called by:
  5560 ;;		_updateComms
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           	psect	text24
  5565  0025BC                     __ptext24:
  5566                           	opt stack 0
  5567  0025BC                     _Delay:
  5568                           	opt stack 25
  5569                           
  5570                           ;Functions.c: 39: long int wait = 0;
  5571                           
  5572                           ;incstack = 0
  5573  0025BC  0E00               	movlw	0
  5574  0025BE  6E20               	movwf	Delay@wait,c
  5575  0025C0  0E00               	movlw	0
  5576  0025C2  6E21               	movwf	Delay@wait+1,c
  5577  0025C4  0E00               	movlw	0
  5578  0025C6  6E22               	movwf	Delay@wait+2,c
  5579  0025C8  0E00               	movlw	0
  5580  0025CA  6E23               	movwf	Delay@wait+3,c
  5581  0025CC  D00E               	goto	l3146
  5582  0025CE                     l3142:
  5583                           
  5584                           ;Functions.c: 41: {
  5585                           ;Functions.c: 42: _delay((unsigned long)((1)*(8000000/4000.0)));
  5586  0025CE  0E03               	movlw	3
  5587  0025D0  6E1F               	movwf	??_Delay& (0+255),c
  5588  0025D2  0E98               	movlw	152
  5589  0025D4                     u5387:
  5590  0025D4  2EE8               	decfsz	wreg,f,c
  5591  0025D6  D7FE               	goto	u5387
  5592  0025D8  2E1F               	decfsz	??_Delay& (0+255),f,c
  5593  0025DA  D7FC               	goto	u5387
  5594  0025DC  0E01               	movlw	1
  5595  0025DE  2620               	addwf	Delay@wait,f,c
  5596  0025E0  0E00               	movlw	0
  5597  0025E2  2221               	addwfc	Delay@wait+1,f,c
  5598  0025E4  2222               	addwfc	Delay@wait+2,f,c
  5599  0025E6  2223               	addwfc	Delay@wait+3,f,c
  5600  0025E8  D000               	goto	l3146
  5601  0025EA                     l3146:
  5602  0025EA  501B               	movf	Delay@d_lenth,w,c
  5603  0025EC  5C20               	subwf	Delay@wait,w,c
  5604  0025EE  501C               	movf	Delay@d_lenth+1,w,c
  5605  0025F0  5821               	subwfb	Delay@wait+1,w,c
  5606  0025F2  501D               	movf	Delay@d_lenth+2,w,c
  5607  0025F4  5822               	subwfb	Delay@wait+2,w,c
  5608  0025F6  5023               	movf	Delay@wait+3,w,c
  5609  0025F8  0A80               	xorlw	128
  5610  0025FA  6E1F               	movwf	??_Delay& (0+255),c
  5611  0025FC  501E               	movf	Delay@d_lenth+3,w,c
  5612  0025FE  0A80               	xorlw	128
  5613  002600  581F               	subwfb	??_Delay& (0+255),w,c
  5614  002602  A0D8               	btfss	status,0,c
  5615  002604  D7E4               	goto	l3142
  5616  002606  0012               	return		;funcret
  5617  002608                     __end_of_Delay:
  5618                           	opt stack 0
  5619                           tosu	equ	0xFFF
  5620                           tosh	equ	0xFFE
  5621                           tosl	equ	0xFFD
  5622                           pclath	equ	0xFFA
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           intcon	equ	0xFF2
  5630                           postinc0	equ	0xFEE
  5631                           wreg	equ	0xFE8
  5632                           indf2	equ	0xFDF
  5633                           postinc2	equ	0xFDE
  5634                           postdec2	equ	0xFDD
  5635                           plusw2	equ	0xFDB
  5636                           fsr2h	equ	0xFDA
  5637                           fsr2l	equ	0xFD9
  5638                           status	equ	0xFD8
  5639                           
  5640 ;; *************** function _Battery_Get *****************
  5641 ;; Defined at:
  5642 ;;		line 93 in file "Battery.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;  channelnum      2    6[BANK0 ] int 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  3    6[BANK0 ] float 
  5649 ;; Registers used:
  5650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5656 ;;      Params:         0       3       0       0       0       0       0
  5657 ;;      Locals:         0       0       0       0       0       0       0
  5658 ;;      Temps:          0       0       0       0       0       0       0
  5659 ;;      Totals:         0       3       0       0       0       0       0
  5660 ;;Total ram usage:        3 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; Hardware stack levels required when called:    6
  5663 ;; This function calls:
  5664 ;;		___ftmul
  5665 ;;		___wmul
  5666 ;; This function is called by:
  5667 ;;		_updateComms
  5668 ;;		_RunBypas
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           	psect	text25
  5673  002608                     __ptext25:
  5674                           	opt stack 0
  5675  002608                     _Battery_Get:
  5676                           	opt stack 23
  5677                           
  5678                           ;Battery.c: 96: return Battery_Volt[channelnum]*1000.0;
  5679                           
  5680                           ;incstack = 0
  5681  002608  C0E5  F01B         	movff	Battery_Get@channelnum,___wmul@multiplier
  5682  00260C  C0E6  F01C         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  5683  002610  0E00               	movlw	0
  5684  002612  6E1E               	movwf	___wmul@multiplicand+1,c
  5685  002614  0E03               	movlw	3
  5686  002616  6E1D               	movwf	___wmul@multiplicand,c
  5687  002618  EC1F  F014         	call	___wmul	;wreg free
  5688  00261C  0E88               	movlw	low _Battery_Volt
  5689  00261E  241B               	addwf	?___wmul,w,c
  5690  002620  6ED9               	movwf	fsr2l,c
  5691  002622  0E00               	movlw	high _Battery_Volt
  5692  002624  201C               	addwfc	?___wmul+1,w,c
  5693  002626  6EDA               	movwf	fsr2h,c
  5694  002628  CFDE F023          	movff	postinc2,___ftmul@f1
  5695  00262C  CFDE F024          	movff	postinc2,___ftmul@f1+1
  5696  002630  CFDD F025          	movff	postdec2,___ftmul@f1+2
  5697  002634  0E00               	movlw	0
  5698  002636  6E26               	movwf	___ftmul@f2,c
  5699  002638  0E7A               	movlw	122
  5700  00263A  6E27               	movwf	___ftmul@f2+1,c
  5701  00263C  0E44               	movlw	68
  5702  00263E  6E28               	movwf	___ftmul@f2+2,c
  5703  002640  EC7A  F00D         	call	___ftmul	;wreg free
  5704  002644  C023  F0E5         	movff	?___ftmul,?_Battery_Get
  5705  002648  C024  F0E6         	movff	?___ftmul+1,?_Battery_Get+1
  5706  00264C  C025  F0E7         	movff	?___ftmul+2,?_Battery_Get+2
  5707  002650  0012               	return	
  5708  002652  0012               	return		;funcret
  5709  002654                     __end_of_Battery_Get:
  5710                           	opt stack 0
  5711                           tosu	equ	0xFFF
  5712                           tosh	equ	0xFFE
  5713                           tosl	equ	0xFFD
  5714                           pclath	equ	0xFFA
  5715                           tblptru	equ	0xFF8
  5716                           tblptrh	equ	0xFF7
  5717                           tblptrl	equ	0xFF6
  5718                           tablat	equ	0xFF5
  5719                           prodh	equ	0xFF4
  5720                           prodl	equ	0xFF3
  5721                           intcon	equ	0xFF2
  5722                           postinc0	equ	0xFEE
  5723                           wreg	equ	0xFE8
  5724                           indf2	equ	0xFDF
  5725                           postinc2	equ	0xFDE
  5726                           postdec2	equ	0xFDD
  5727                           plusw2	equ	0xFDB
  5728                           fsr2h	equ	0xFDA
  5729                           fsr2l	equ	0xFD9
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function ___wmul *****************
  5733 ;; Defined at:
  5734 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;  multiplier      2   26[COMRAM] unsigned int 
  5737 ;;  multiplicand    2   28[COMRAM] unsigned int 
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;  product         2   30[COMRAM] unsigned int 
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  2   26[COMRAM] unsigned int 
  5742 ;; Registers used:
  5743 ;;		wreg, status,2, status,0, prodl, prodh
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5749 ;;      Params:         4       0       0       0       0       0       0
  5750 ;;      Locals:         2       0       0       0       0       0       0
  5751 ;;      Temps:          0       0       0       0       0       0       0
  5752 ;;      Totals:         6       0       0       0       0       0       0
  5753 ;;Total ram usage:        6 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; Hardware stack levels required when called:    4
  5756 ;; This function calls:
  5757 ;;		Nothing
  5758 ;; This function is called by:
  5759 ;;		_Battery_Get
  5760 ;;		_Tempeture_Get
  5761 ;;		_Battery_Convert
  5762 ;;		_Battery_Filter
  5763 ;;		_Battery_Fault
  5764 ;;		_Temp_Fault
  5765 ;;		_Temp_Filter
  5766 ;;		_Temp_Convert
  5767 ;;		_eval_poly
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           	psect	text26
  5772  00283E                     __ptext26:
  5773                           	opt stack 0
  5774  00283E                     ___wmul:
  5775                           	opt stack 24
  5776                           
  5777                           ;incstack = 0
  5778  00283E  501B               	movf	___wmul@multiplier,w,c
  5779  002840  021D               	mulwf	___wmul@multiplicand,c
  5780  002842  CFF3 F01F          	movff	prodl,___wmul@product
  5781  002846  CFF4 F020          	movff	prodh,___wmul@product+1
  5782  00284A  501B               	movf	___wmul@multiplier,w,c
  5783  00284C  021E               	mulwf	___wmul@multiplicand+1,c
  5784  00284E  50F3               	movf	prodl,w,c
  5785  002850  2620               	addwf	___wmul@product+1,f,c
  5786  002852  501C               	movf	___wmul@multiplier+1,w,c
  5787  002854  021D               	mulwf	___wmul@multiplicand,c
  5788  002856  50F3               	movf	prodl,w,c
  5789  002858  2620               	addwf	___wmul@product+1,f,c
  5790  00285A  C01F  F01B         	movff	___wmul@product,?___wmul
  5791  00285E  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  5792  002862  0012               	return	
  5793  002864  0012               	return		;funcret
  5794  002866                     __end_of___wmul:
  5795                           	opt stack 0
  5796                           tosu	equ	0xFFF
  5797                           tosh	equ	0xFFE
  5798                           tosl	equ	0xFFD
  5799                           pclath	equ	0xFFA
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodh	equ	0xFF4
  5805                           prodl	equ	0xFF3
  5806                           intcon	equ	0xFF2
  5807                           postinc0	equ	0xFEE
  5808                           wreg	equ	0xFE8
  5809                           indf2	equ	0xFDF
  5810                           postinc2	equ	0xFDE
  5811                           postdec2	equ	0xFDD
  5812                           plusw2	equ	0xFDB
  5813                           fsr2h	equ	0xFDA
  5814                           fsr2l	equ	0xFD9
  5815                           status	equ	0xFD8
  5816                           
  5817 ;; *************** function ___ftmul *****************
  5818 ;; Defined at:
  5819 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  f1              3   34[COMRAM] float 
  5822 ;;  f2              3   37[COMRAM] float 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  5825 ;;  sign            1    5[BANK0 ] unsigned char 
  5826 ;;  cntr            1    4[BANK0 ] unsigned char 
  5827 ;;  exp             1    0[BANK0 ] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  3   34[COMRAM] float 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5837 ;;      Params:         6       0       0       0       0       0       0
  5838 ;;      Locals:         0       6       0       0       0       0       0
  5839 ;;      Temps:          3       0       0       0       0       0       0
  5840 ;;      Totals:         9       6       0       0       0       0       0
  5841 ;;Total ram usage:       15 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    5
  5844 ;; This function calls:
  5845 ;;		___ftpack
  5846 ;; This function is called by:
  5847 ;;		_Battery_Get
  5848 ;;		_Battery_Convert
  5849 ;;		_Battery_Filter
  5850 ;;		_Temp_Filter
  5851 ;;		_Temp_Convert
  5852 ;;		_log
  5853 ;;		_eval_poly
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           	psect	text27
  5858  001AF4                     __ptext27:
  5859                           	opt stack 0
  5860  001AF4                     ___ftmul:
  5861                           	opt stack 23
  5862                           
  5863                           ;incstack = 0
  5864  001AF4  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  5865  001AF8  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  5866  001AFA  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  5867  001AFC  3424               	rlcf	___ftmul@f1+1,w,c
  5868  001AFE  3629               	rlcf	??___ftmul& (0+255),f,c
  5869  001B00  E301               	bnc	u4131
  5870  001B02  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  5871  001B04                     u4131:
  5872  001B04  5029               	movf	??___ftmul,w,c
  5873  001B06  0100               	movlb	0	; () banked
  5874  001B08  6FDF               	movwf	___ftmul@exp& (0+255),b
  5875  001B0A  0100               	movlb	0	; () banked
  5876  001B0C  51DF               	movf	___ftmul@exp& (0+255),w,b
  5877  001B0E  A4D8               	btfss	status,2,c
  5878  001B10  D007               	goto	l4336
  5879                           
  5880                           ; BSR set to: 0
  5881  001B12  0E00               	movlw	0
  5882  001B14  6E23               	movwf	?___ftmul,c
  5883  001B16  0E00               	movlw	0
  5884  001B18  6E24               	movwf	?___ftmul+1,c
  5885  001B1A  0E00               	movlw	0
  5886  001B1C  6E25               	movwf	?___ftmul+2,c
  5887                           
  5888                           ; BSR set to: 0
  5889  001B1E  0012               	return	
  5890  001B20                     l4336:
  5891                           
  5892                           ; BSR set to: 0
  5893  001B20  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  5894  001B24  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  5895  001B26  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  5896  001B28  3427               	rlcf	___ftmul@f2+1,w,c
  5897  001B2A  3629               	rlcf	??___ftmul& (0+255),f,c
  5898  001B2C  E301               	bnc	u4151
  5899  001B2E  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  5900  001B30                     u4151:
  5901  001B30  5029               	movf	??___ftmul,w,c
  5902  001B32  0100               	movlb	0	; () banked
  5903  001B34  6FE4               	movwf	___ftmul@sign& (0+255),b
  5904  001B36  0100               	movlb	0	; () banked
  5905  001B38  51E4               	movf	___ftmul@sign& (0+255),w,b
  5906  001B3A  A4D8               	btfss	status,2,c
  5907  001B3C  D007               	goto	l4342
  5908                           
  5909                           ; BSR set to: 0
  5910  001B3E  0E00               	movlw	0
  5911  001B40  6E23               	movwf	?___ftmul,c
  5912  001B42  0E00               	movlw	0
  5913  001B44  6E24               	movwf	?___ftmul+1,c
  5914  001B46  0E00               	movlw	0
  5915  001B48  6E25               	movwf	?___ftmul+2,c
  5916                           
  5917                           ; BSR set to: 0
  5918  001B4A  0012               	return	
  5919  001B4C                     l4342:
  5920                           
  5921                           ; BSR set to: 0
  5922  001B4C  0100               	movlb	0	; () banked
  5923  001B4E  51E4               	movf	___ftmul@sign& (0+255),w,b
  5924  001B50  0F7B               	addlw	123
  5925  001B52  0100               	movlb	0	; () banked
  5926  001B54  27DF               	addwf	___ftmul@exp& (0+255),f,b
  5927                           
  5928                           ; BSR set to: 0
  5929  001B56  C025  F0E4         	movff	___ftmul@f1+2,___ftmul@sign
  5930  001B5A  5028               	movf	___ftmul@f2+2,w,c
  5931  001B5C  0100               	movlb	0	; () banked
  5932  001B5E  1BE4               	xorwf	___ftmul@sign& (0+255),f,b
  5933  001B60  0E80               	movlw	128
  5934  001B62  0100               	movlb	0	; () banked
  5935  001B64  17E4               	andwf	___ftmul@sign& (0+255),f,b
  5936                           
  5937                           ; BSR set to: 0
  5938  001B66  8E24               	bsf	___ftmul@f1+1,7,c
  5939                           
  5940                           ; BSR set to: 0
  5941  001B68  8E27               	bsf	___ftmul@f2+1,7,c
  5942                           
  5943                           ; BSR set to: 0
  5944  001B6A  0EFF               	movlw	255
  5945  001B6C  1626               	andwf	___ftmul@f2,f,c
  5946  001B6E  0EFF               	movlw	255
  5947  001B70  1627               	andwf	___ftmul@f2+1,f,c
  5948  001B72  0E00               	movlw	0
  5949  001B74  1628               	andwf	___ftmul@f2+2,f,c
  5950                           
  5951                           ; BSR set to: 0
  5952  001B76  0E00               	movlw	0
  5953  001B78  0100               	movlb	0	; () banked
  5954  001B7A  6FE0               	movwf	___ftmul@f3_as_product& (0+255),b
  5955  001B7C  0E00               	movlw	0
  5956  001B7E  0100               	movlb	0	; () banked
  5957  001B80  6FE1               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5958  001B82  0E00               	movlw	0
  5959  001B84  0100               	movlb	0	; () banked
  5960  001B86  6FE2               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5961                           
  5962                           ; BSR set to: 0
  5963  001B88  0E07               	movlw	7
  5964  001B8A  0100               	movlb	0	; () banked
  5965  001B8C  6FE3               	movwf	___ftmul@cntr& (0+255),b
  5966  001B8E  D000               	goto	l4356
  5967  001B90                     l4356:
  5968                           
  5969                           ; BSR set to: 0
  5970  001B90  A023               	btfss	___ftmul@f1,0,c
  5971  001B92  D00A               	goto	l4360
  5972                           
  5973                           ; BSR set to: 0
  5974  001B94  5026               	movf	___ftmul@f2,w,c
  5975  001B96  0100               	movlb	0	; () banked
  5976  001B98  27E0               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5977  001B9A  5027               	movf	___ftmul@f2+1,w,c
  5978  001B9C  0100               	movlb	0	; () banked
  5979  001B9E  23E1               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5980  001BA0  5028               	movf	___ftmul@f2+2,w,c
  5981  001BA2  0100               	movlb	0	; () banked
  5982  001BA4  23E2               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5983  001BA6  D000               	goto	l4360
  5984  001BA8                     l4360:
  5985                           
  5986                           ; BSR set to: 0
  5987  001BA8  90D8               	bcf	status,0,c
  5988  001BAA  3225               	rrcf	___ftmul@f1+2,f,c
  5989  001BAC  3224               	rrcf	___ftmul@f1+1,f,c
  5990  001BAE  3223               	rrcf	___ftmul@f1,f,c
  5991  001BB0  90D8               	bcf	status,0,c
  5992  001BB2  3626               	rlcf	___ftmul@f2,f,c
  5993  001BB4  3627               	rlcf	___ftmul@f2+1,f,c
  5994  001BB6  3628               	rlcf	___ftmul@f2+2,f,c
  5995                           
  5996                           ; BSR set to: 0
  5997  001BB8  0100               	movlb	0	; () banked
  5998  001BBA  2FE3               	decfsz	___ftmul@cntr& (0+255),f,b
  5999  001BBC  D7E9               	goto	l4356
  6000  001BBE  D000               	goto	l4364
  6001  001BC0                     l4364:
  6002                           
  6003                           ; BSR set to: 0
  6004  001BC0  0E09               	movlw	9
  6005  001BC2  0100               	movlb	0	; () banked
  6006  001BC4  6FE3               	movwf	___ftmul@cntr& (0+255),b
  6007  001BC6  D000               	goto	l4366
  6008  001BC8                     l4366:
  6009                           
  6010                           ; BSR set to: 0
  6011  001BC8  A023               	btfss	___ftmul@f1,0,c
  6012  001BCA  D00A               	goto	l4370
  6013                           
  6014                           ; BSR set to: 0
  6015  001BCC  5026               	movf	___ftmul@f2,w,c
  6016  001BCE  0100               	movlb	0	; () banked
  6017  001BD0  27E0               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6018  001BD2  5027               	movf	___ftmul@f2+1,w,c
  6019  001BD4  0100               	movlb	0	; () banked
  6020  001BD6  23E1               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6021  001BD8  5028               	movf	___ftmul@f2+2,w,c
  6022  001BDA  0100               	movlb	0	; () banked
  6023  001BDC  23E2               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6024  001BDE  D000               	goto	l4370
  6025  001BE0                     l4370:
  6026                           
  6027                           ; BSR set to: 0
  6028  001BE0  90D8               	bcf	status,0,c
  6029  001BE2  3225               	rrcf	___ftmul@f1+2,f,c
  6030  001BE4  3224               	rrcf	___ftmul@f1+1,f,c
  6031  001BE6  3223               	rrcf	___ftmul@f1,f,c
  6032  001BE8  0100               	movlb	0	; () banked
  6033  001BEA  90D8               	bcf	status,0,c
  6034  001BEC  33E2               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6035  001BEE  33E1               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6036  001BF0  33E0               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6037                           
  6038                           ; BSR set to: 0
  6039  001BF2  0100               	movlb	0	; () banked
  6040  001BF4  2FE3               	decfsz	___ftmul@cntr& (0+255),f,b
  6041  001BF6  D7E8               	goto	l4366
  6042  001BF8  D000               	goto	l4374
  6043  001BFA                     l4374:
  6044                           
  6045                           ; BSR set to: 0
  6046  001BFA  C0E0  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
  6047  001BFE  C0E1  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6048  001C02  C0E2  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6049  001C06  C0DF  F01E         	movff	___ftmul@exp,___ftpack@exp
  6050  001C0A  C0E4  F01F         	movff	___ftmul@sign,___ftpack@sign
  6051  001C0E  EC7B  F010         	call	___ftpack	;wreg free
  6052  001C12  C01B  F023         	movff	?___ftpack,?___ftmul
  6053  001C16  C01C  F024         	movff	?___ftpack+1,?___ftmul+1
  6054  001C1A  C01D  F025         	movff	?___ftpack+2,?___ftmul+2
  6055  001C1E  0012               	return	
  6056  001C20  0012               	return		;funcret
  6057  001C22                     __end_of___ftmul:
  6058                           	opt stack 0
  6059                           tosu	equ	0xFFF
  6060                           tosh	equ	0xFFE
  6061                           tosl	equ	0xFFD
  6062                           pclath	equ	0xFFA
  6063                           tblptru	equ	0xFF8
  6064                           tblptrh	equ	0xFF7
  6065                           tblptrl	equ	0xFF6
  6066                           tablat	equ	0xFF5
  6067                           prodh	equ	0xFF4
  6068                           prodl	equ	0xFF3
  6069                           intcon	equ	0xFF2
  6070                           postinc0	equ	0xFEE
  6071                           wreg	equ	0xFE8
  6072                           indf2	equ	0xFDF
  6073                           postinc2	equ	0xFDE
  6074                           postdec2	equ	0xFDD
  6075                           plusw2	equ	0xFDB
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function ___ftpack *****************
  6081 ;; Defined at:
  6082 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  arg             3   26[COMRAM] unsigned um
  6085 ;;  exp             1   29[COMRAM] unsigned char 
  6086 ;;  sign            1   30[COMRAM] unsigned char 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;		None
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  3   26[COMRAM] float 
  6091 ;; Registers used:
  6092 ;;		wreg, status,2, status,0
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6098 ;;      Params:         5       0       0       0       0       0       0
  6099 ;;      Locals:         0       0       0       0       0       0       0
  6100 ;;      Temps:          3       0       0       0       0       0       0
  6101 ;;      Totals:         8       0       0       0       0       0       0
  6102 ;;Total ram usage:        8 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    4
  6105 ;; This function calls:
  6106 ;;		Nothing
  6107 ;; This function is called by:
  6108 ;;		___ftmul
  6109 ;;		___awtoft
  6110 ;;		___ftdiv
  6111 ;;		___ftadd
  6112 ;;		___altoft
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text28
  6117  0020F6                     __ptext28:
  6118                           	opt stack 0
  6119  0020F6                     ___ftpack:
  6120                           	opt stack 23
  6121                           
  6122                           ;incstack = 0
  6123  0020F6  501E               	movf	___ftpack@exp,w,c
  6124  0020F8  B4D8               	btfsc	status,2,c
  6125  0020FA  D005               	goto	l4230
  6126  0020FC  501B               	movf	___ftpack@arg,w,c
  6127  0020FE  101C               	iorwf	___ftpack@arg+1,w,c
  6128  002100  101D               	iorwf	___ftpack@arg+2,w,c
  6129  002102  A4D8               	btfss	status,2,c
  6130  002104  D00E               	goto	l4236
  6131  002106                     l4230:
  6132  002106  0E00               	movlw	0
  6133  002108  6E1B               	movwf	?___ftpack,c
  6134  00210A  0E00               	movlw	0
  6135  00210C  6E1C               	movwf	?___ftpack+1,c
  6136  00210E  0E00               	movlw	0
  6137  002110  6E1D               	movwf	?___ftpack+2,c
  6138  002112  0012               	return	
  6139  002114  D006               	goto	l4236
  6140  002116                     l4234:
  6141  002116  2A1E               	incf	___ftpack@exp,f,c
  6142  002118  90D8               	bcf	status,0,c
  6143  00211A  321D               	rrcf	___ftpack@arg+2,f,c
  6144  00211C  321C               	rrcf	___ftpack@arg+1,f,c
  6145  00211E  321B               	rrcf	___ftpack@arg,f,c
  6146  002120  D000               	goto	l4236
  6147  002122                     l4236:
  6148  002122  0E00               	movlw	0
  6149  002124  141B               	andwf	___ftpack@arg,w,c
  6150  002126  6E20               	movwf	??___ftpack& (0+255),c
  6151  002128  0E00               	movlw	0
  6152  00212A  141C               	andwf	___ftpack@arg+1,w,c
  6153  00212C  6E21               	movwf	(??___ftpack+1)& (0+255),c
  6154  00212E  0EFE               	movlw	254
  6155  002130  141D               	andwf	___ftpack@arg+2,w,c
  6156  002132  6E22               	movwf	(??___ftpack+2)& (0+255),c
  6157  002134  5020               	movf	??___ftpack,w,c
  6158  002136  1021               	iorwf	??___ftpack+1,w,c
  6159  002138  1022               	iorwf	??___ftpack+2,w,c
  6160  00213A  B4D8               	btfsc	status,2,c
  6161  00213C  D00E               	goto	l4242
  6162  00213E  D7EB               	goto	l4234
  6163  002140  D00C               	goto	l4242
  6164  002142                     l4238:
  6165  002142  2A1E               	incf	___ftpack@exp,f,c
  6166  002144  0E01               	movlw	1
  6167  002146  261B               	addwf	___ftpack@arg,f,c
  6168  002148  0E00               	movlw	0
  6169  00214A  221C               	addwfc	___ftpack@arg+1,f,c
  6170  00214C  0E00               	movlw	0
  6171  00214E  221D               	addwfc	___ftpack@arg+2,f,c
  6172  002150  90D8               	bcf	status,0,c
  6173  002152  321D               	rrcf	___ftpack@arg+2,f,c
  6174  002154  321C               	rrcf	___ftpack@arg+1,f,c
  6175  002156  321B               	rrcf	___ftpack@arg,f,c
  6176  002158  D000               	goto	l4242
  6177  00215A                     l4242:
  6178  00215A  0E00               	movlw	0
  6179  00215C  141B               	andwf	___ftpack@arg,w,c
  6180  00215E  6E20               	movwf	??___ftpack& (0+255),c
  6181  002160  0E00               	movlw	0
  6182  002162  141C               	andwf	___ftpack@arg+1,w,c
  6183  002164  6E21               	movwf	(??___ftpack+1)& (0+255),c
  6184  002166  0EFF               	movlw	255
  6185  002168  141D               	andwf	___ftpack@arg+2,w,c
  6186  00216A  6E22               	movwf	(??___ftpack+2)& (0+255),c
  6187  00216C  5020               	movf	??___ftpack,w,c
  6188  00216E  1021               	iorwf	??___ftpack+1,w,c
  6189  002170  1022               	iorwf	??___ftpack+2,w,c
  6190  002172  B4D8               	btfsc	status,2,c
  6191  002174  D008               	goto	l4246
  6192  002176  D7E5               	goto	l4238
  6193  002178  D006               	goto	l4246
  6194  00217A                     l4244:
  6195  00217A  061E               	decf	___ftpack@exp,f,c
  6196  00217C  90D8               	bcf	status,0,c
  6197  00217E  361B               	rlcf	___ftpack@arg,f,c
  6198  002180  361C               	rlcf	___ftpack@arg+1,f,c
  6199  002182  361D               	rlcf	___ftpack@arg+2,f,c
  6200  002184  D000               	goto	l4246
  6201  002186                     l4246:
  6202  002186  BE1C               	btfsc	___ftpack@arg+1,7,c
  6203  002188  D004               	goto	l1122
  6204  00218A  0E02               	movlw	2
  6205  00218C  601E               	cpfslt	___ftpack@exp,c
  6206  00218E  D7F5               	goto	l4244
  6207  002190  D000               	goto	l1122
  6208  002192                     l1122:
  6209  002192  B01E               	btfsc	___ftpack@exp,0,c
  6210  002194  D002               	goto	l4252
  6211  002196  9E1C               	bcf	___ftpack@arg+1,7,c
  6212  002198  D000               	goto	l4252
  6213  00219A                     l4252:
  6214  00219A  90D8               	bcf	status,0,c
  6215  00219C  321E               	rrcf	___ftpack@exp,f,c
  6216  00219E  501E               	movf	___ftpack@exp,w,c
  6217  0021A0  121D               	iorwf	___ftpack@arg+2,f,c
  6218  0021A2  501F               	movf	___ftpack@sign,w,c
  6219  0021A4  B4D8               	btfsc	status,2,c
  6220  0021A6  D002               	goto	l4258
  6221  0021A8  8E1D               	bsf	___ftpack@arg+2,7,c
  6222  0021AA  D000               	goto	l4258
  6223  0021AC                     l4258:
  6224  0021AC  C01B  F01B         	movff	___ftpack@arg,?___ftpack
  6225  0021B0  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
  6226  0021B4  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
  6227  0021B8  0012               	return	
  6228  0021BA  0012               	return		;funcret
  6229  0021BC                     __end_of___ftpack:
  6230                           	opt stack 0
  6231                           tosu	equ	0xFFF
  6232                           tosh	equ	0xFFE
  6233                           tosl	equ	0xFFD
  6234                           pclath	equ	0xFFA
  6235                           tblptru	equ	0xFF8
  6236                           tblptrh	equ	0xFF7
  6237                           tblptrl	equ	0xFF6
  6238                           tablat	equ	0xFF5
  6239                           prodh	equ	0xFF4
  6240                           prodl	equ	0xFF3
  6241                           intcon	equ	0xFF2
  6242                           postinc0	equ	0xFEE
  6243                           wreg	equ	0xFE8
  6244                           indf2	equ	0xFDF
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           plusw2	equ	0xFDB
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function _SYSTEM_Initialize *****************
  6253 ;; Defined at:
  6254 ;;		line 113 in file "mcc_generated_files/mcc.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;		None
  6259 ;; Return value:  Size  Location     Type
  6260 ;;		None               void
  6261 ;; Registers used:
  6262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6268 ;;      Params:         0       0       0       0       0       0       0
  6269 ;;      Locals:         0       0       0       0       0       0       0
  6270 ;;      Temps:          0       0       0       0       0       0       0
  6271 ;;      Totals:         0       0       0       0       0       0       0
  6272 ;;Total ram usage:        0 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    7
  6275 ;; This function calls:
  6276 ;;		_ADC_Initialize
  6277 ;;		_EUSART1_Initialize
  6278 ;;		_INTERRUPT_Initialize
  6279 ;;		_OSCILLATOR_Initialize
  6280 ;;		_PIN_MANAGER_Initialize
  6281 ;;		_TMR1_Initialize
  6282 ;;		_begin
  6283 ;; This function is called by:
  6284 ;;		_main
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text29
  6289  0023EA                     __ptext29:
  6290                           	opt stack 0
  6291  0023EA                     _SYSTEM_Initialize:
  6292                           	opt stack 23
  6293                           
  6294                           ;mcc.c: 114: OSCILLATOR_Initialize();
  6295                           
  6296                           ;incstack = 0
  6297  0023EA  ECE5  F014         	call	_OSCILLATOR_Initialize	;wreg free
  6298                           
  6299                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  6300  0023EE  ECB5  F012         	call	_PIN_MANAGER_Initialize	;wreg free
  6301                           
  6302                           ;mcc.c: 116: INTERRUPT_Initialize();
  6303  0023F2  ECEC  F014         	call	_INTERRUPT_Initialize	;wreg free
  6304                           
  6305                           ;mcc.c: 117: ADC_Initialize();
  6306  0023F6  ECA8  F014         	call	_ADC_Initialize	;wreg free
  6307                           
  6308                           ;mcc.c: 118: EUSART1_Initialize();
  6309  0023FA  EC2A  F013         	call	_EUSART1_Initialize	;wreg free
  6310                           
  6311                           ;mcc.c: 119: TMR1_Initialize();
  6312  0023FE  EC46  F014         	call	_TMR1_Initialize	;wreg free
  6313                           
  6314                           ;mcc.c: 120: begin(receiveArray, sizeof (receiveArray), 1, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  6315  002402  0E5A               	movlw	low _receiveArray
  6316  002404  0100               	movlb	0	; () banked
  6317  002406  6FDF               	movwf	begin@ptr& (0+255),b
  6318  002408  0E01               	movlw	high _receiveArray
  6319  00240A  0100               	movlb	0	; () banked
  6320  00240C  6FE0               	movwf	(begin@ptr+1)& (0+255),b
  6321  00240E  0E28               	movlw	40
  6322  002410  0100               	movlb	0	; () banked
  6323  002412  6FE1               	movwf	begin@maxSize& (0+255),b
  6324  002414  0E01               	movlw	1
  6325  002416  0100               	movlb	0	; () banked
  6326  002418  6FE2               	movwf	begin@givenAddress& (0+255),b
  6327  00241A  0E00               	movlw	0
  6328  00241C  0100               	movlb	0	; () banked
  6329  00241E  6FE3               	movwf	begin@error& (0+255),b
  6330  002420  0EFC               	movlw	low _Send_put
  6331  002422  0100               	movlb	0	; () banked
  6332  002424  6FE4               	movwf	begin@stufftosend& (0+255),b
  6333  002426  0E26               	movlw	high _Send_put
  6334  002428  0100               	movlb	0	; () banked
  6335  00242A  6FE5               	movwf	(begin@stufftosend+1)& (0+255),b
  6336  00242C  0EBA               	movlw	low _Receive_get
  6337  00242E  0100               	movlb	0	; () banked
  6338  002430  6FE6               	movwf	begin@stufftoreceive& (0+255),b
  6339  002432  0E29               	movlw	high _Receive_get
  6340  002434  0100               	movlb	0	; () banked
  6341  002436  6FE7               	movwf	(begin@stufftoreceive+1)& (0+255),b
  6342  002438  0E20               	movlw	low _Receive_available
  6343  00243A  0100               	movlb	0	; () banked
  6344  00243C  6FE8               	movwf	begin@stuffavailable& (0+255),b
  6345  00243E  0E29               	movlw	high _Receive_available
  6346  002440  0100               	movlb	0	; () banked
  6347  002442  6FE9               	movwf	(begin@stuffavailable+1)& (0+255),b
  6348  002444  0EAA               	movlw	low _Receive_peek
  6349  002446  0100               	movlb	0	; () banked
  6350  002448  6FEA               	movwf	begin@stuffpeek& (0+255),b
  6351  00244A  0E29               	movlw	high _Receive_peek
  6352  00244C  0100               	movlb	0	; () banked
  6353  00244E  6FEB               	movwf	(begin@stuffpeek+1)& (0+255),b
  6354  002450  EC5D  F012         	call	_begin	;wreg free
  6355  002454  0012               	return		;funcret
  6356  002456                     __end_of_SYSTEM_Initialize:
  6357                           	opt stack 0
  6358                           tosu	equ	0xFFF
  6359                           tosh	equ	0xFFE
  6360                           tosl	equ	0xFFD
  6361                           pclath	equ	0xFFA
  6362                           tblptru	equ	0xFF8
  6363                           tblptrh	equ	0xFF7
  6364                           tblptrl	equ	0xFF6
  6365                           tablat	equ	0xFF5
  6366                           prodh	equ	0xFF4
  6367                           prodl	equ	0xFF3
  6368                           intcon	equ	0xFF2
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           indf2	equ	0xFDF
  6372                           postinc2	equ	0xFDE
  6373                           postdec2	equ	0xFDD
  6374                           plusw2	equ	0xFDB
  6375                           fsr2h	equ	0xFDA
  6376                           fsr2l	equ	0xFD9
  6377                           status	equ	0xFD8
  6378                           
  6379 ;; *************** function _begin *****************
  6380 ;; Defined at:
  6381 ;;		line 18 in file "FastTransfer.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  6384 ;;		 -> receiveArray(40), 
  6385 ;;  maxSize         1    2[BANK0 ] unsigned char 
  6386 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  6387 ;;  error           1    4[BANK0 ] unsigned char 
  6388 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  6389 ;;		 -> Send_put(0), 
  6390 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  6391 ;;		 -> Receive_get(1), 
  6392 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  6393 ;;		 -> Receive_available(2), 
  6394 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  6395 ;;		 -> Receive_peek(1), 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;		None
  6398 ;; Return value:  Size  Location     Type
  6399 ;;		None               void
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6407 ;;      Params:         0      13       0       0       0       0       0
  6408 ;;      Locals:         0       0       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0
  6410 ;;      Totals:         0      13       0       0       0       0       0
  6411 ;;Total ram usage:       13 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    5
  6414 ;; This function calls:
  6415 ;;		___awdiv
  6416 ;; This function is called by:
  6417 ;;		_SYSTEM_Initialize
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text30
  6422  0024BA                     __ptext30:
  6423                           	opt stack 0
  6424  0024BA                     _begin:
  6425                           	opt stack 24
  6426                           
  6427                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  6428                           
  6429                           ;incstack = 0
  6430  0024BA  C0DF  F0B4         	movff	begin@ptr,_receiveArrayAddress
  6431  0024BE  C0E0  F0B5         	movff	begin@ptr+1,_receiveArrayAddress+1
  6432                           
  6433                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  6434  0024C2  C0E2  F03E         	movff	begin@givenAddress,_moduleAddress
  6435                           
  6436                           ;FastTransfer.c: 21: serial_write = stufftosend;
  6437  0024C6  C0E4  F035         	movff	begin@stufftosend,_serial_write
  6438  0024CA  C0E5  F036         	movff	begin@stufftosend+1,_serial_write+1
  6439                           
  6440                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  6441  0024CE  C0E8  F031         	movff	begin@stuffavailable,_serial_available
  6442  0024D2  C0E9  F032         	movff	begin@stuffavailable+1,_serial_available+1
  6443                           
  6444                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  6445  0024D6  C0EA  F0B8         	movff	begin@stuffpeek,_serial_peek
  6446  0024DA  C0EB  F0B9         	movff	begin@stuffpeek+1,_serial_peek+1
  6447                           
  6448                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  6449  0024DE  C0E6  F033         	movff	begin@stufftoreceive,_serial_read
  6450  0024E2  C0E7  F034         	movff	begin@stufftoreceive+1,_serial_read+1
  6451                           
  6452                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  6453  0024E6  C0E1  F01B         	movff	begin@maxSize,___awdiv@dividend
  6454  0024EA  6A1C               	clrf	___awdiv@dividend+1,c
  6455  0024EC  0E00               	movlw	0
  6456  0024EE  6E1E               	movwf	___awdiv@divisor+1,c
  6457  0024F0  0E02               	movlw	2
  6458  0024F2  6E1D               	movwf	___awdiv@divisor,c
  6459  0024F4  ECDE  F010         	call	___awdiv	;wreg free
  6460  0024F8  501B               	movf	?___awdiv,w,c
  6461  0024FA  6E3D               	movwf	_maxDataAddress,c
  6462                           
  6463                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  6464  0024FC  0E00               	movlw	low _ring_buffer
  6465  0024FE  0100               	movlb	0	; () banked
  6466  002500  6FB6               	movwf	_sendStructAddress& (0+255),b
  6467  002502  0E02               	movlw	high _ring_buffer
  6468  002504  0100               	movlb	0	; () banked
  6469  002506  6FB7               	movwf	(_sendStructAddress+1)& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;FastTransfer.c: 27: AKNAKsend = error;
  6473  002508  C0E3  F039         	movff	begin@error,_AKNAKsend
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  6477  00250C  0E00               	movlw	0
  6478  00250E  0100               	movlb	0	; () banked
  6479  002510  6FAD               	movwf	(_alignErrorCounter+1)& (0+255),b
  6480  002512  0E00               	movlw	0
  6481  002514  6FAC               	movwf	_alignErrorCounter& (0+255),b
  6482                           
  6483                           ; BSR set to: 0
  6484  002516  0012               	return		;funcret
  6485  002518                     __end_of_begin:
  6486                           	opt stack 0
  6487                           tosu	equ	0xFFF
  6488                           tosh	equ	0xFFE
  6489                           tosl	equ	0xFFD
  6490                           pclath	equ	0xFFA
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           intcon	equ	0xFF2
  6498                           postinc0	equ	0xFEE
  6499                           wreg	equ	0xFE8
  6500                           indf2	equ	0xFDF
  6501                           postinc2	equ	0xFDE
  6502                           postdec2	equ	0xFDD
  6503                           plusw2	equ	0xFDB
  6504                           fsr2h	equ	0xFDA
  6505                           fsr2l	equ	0xFD9
  6506                           status	equ	0xFD8
  6507                           
  6508 ;; *************** function ___awdiv *****************
  6509 ;; Defined at:
  6510 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;  dividend        2   26[COMRAM] int 
  6513 ;;  divisor         2   28[COMRAM] int 
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;  quotient        2   32[COMRAM] int 
  6516 ;;  sign            1   31[COMRAM] unsigned char 
  6517 ;;  counter         1   30[COMRAM] unsigned char 
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  2   26[COMRAM] int 
  6520 ;; Registers used:
  6521 ;;		wreg, status,2, status,0
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6527 ;;      Params:         4       0       0       0       0       0       0
  6528 ;;      Locals:         4       0       0       0       0       0       0
  6529 ;;      Temps:          0       0       0       0       0       0       0
  6530 ;;      Totals:         8       0       0       0       0       0       0
  6531 ;;Total ram usage:        8 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    4
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_begin
  6538 ;;		_Temp_Convert
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           	psect	text31
  6543  0021BC                     __ptext31:
  6544                           	opt stack 0
  6545  0021BC                     ___awdiv:
  6546                           	opt stack 24
  6547                           
  6548                           ; BSR set to: 0
  6549                           ;incstack = 0
  6550  0021BC  0E00               	movlw	0
  6551  0021BE  6E20               	movwf	___awdiv@sign,c
  6552  0021C0  AE1E               	btfss	___awdiv@divisor+1,7,c
  6553  0021C2  D007               	goto	l3024
  6554  0021C4  6C1D               	negf	___awdiv@divisor,c
  6555  0021C6  1E1E               	comf	___awdiv@divisor+1,f,c
  6556  0021C8  B0D8               	btfsc	status,0,c
  6557  0021CA  2A1E               	incf	___awdiv@divisor+1,f,c
  6558  0021CC  0E01               	movlw	1
  6559  0021CE  6E20               	movwf	___awdiv@sign,c
  6560  0021D0  D000               	goto	l3024
  6561  0021D2                     l3024:
  6562  0021D2  AE1C               	btfss	___awdiv@dividend+1,7,c
  6563  0021D4  D007               	goto	l3030
  6564  0021D6  6C1B               	negf	___awdiv@dividend,c
  6565  0021D8  1E1C               	comf	___awdiv@dividend+1,f,c
  6566  0021DA  B0D8               	btfsc	status,0,c
  6567  0021DC  2A1C               	incf	___awdiv@dividend+1,f,c
  6568  0021DE  0E01               	movlw	1
  6569  0021E0  1A20               	xorwf	___awdiv@sign,f,c
  6570  0021E2  D000               	goto	l3030
  6571  0021E4                     l3030:
  6572  0021E4  0E00               	movlw	0
  6573  0021E6  6E22               	movwf	___awdiv@quotient+1,c
  6574  0021E8  0E00               	movlw	0
  6575  0021EA  6E21               	movwf	___awdiv@quotient,c
  6576  0021EC  501D               	movf	___awdiv@divisor,w,c
  6577  0021EE  101E               	iorwf	___awdiv@divisor+1,w,c
  6578  0021F0  B4D8               	btfsc	status,2,c
  6579  0021F2  D021               	goto	l3052
  6580  0021F4  0E01               	movlw	1
  6581  0021F6  6E1F               	movwf	___awdiv@counter,c
  6582  0021F8  D005               	goto	l3038
  6583  0021FA                     l3036:
  6584  0021FA  90D8               	bcf	status,0,c
  6585  0021FC  361D               	rlcf	___awdiv@divisor,f,c
  6586  0021FE  361E               	rlcf	___awdiv@divisor+1,f,c
  6587  002200  2A1F               	incf	___awdiv@counter,f,c
  6588  002202  D000               	goto	l3038
  6589  002204                     l3038:
  6590  002204  BE1E               	btfsc	___awdiv@divisor+1,7,c
  6591  002206  D002               	goto	l3040
  6592  002208  D7F8               	goto	l3036
  6593  00220A  D000               	goto	l3040
  6594  00220C                     l3040:
  6595  00220C  90D8               	bcf	status,0,c
  6596  00220E  3621               	rlcf	___awdiv@quotient,f,c
  6597  002210  3622               	rlcf	___awdiv@quotient+1,f,c
  6598  002212  501D               	movf	___awdiv@divisor,w,c
  6599  002214  5C1B               	subwf	___awdiv@dividend,w,c
  6600  002216  501E               	movf	___awdiv@divisor+1,w,c
  6601  002218  581C               	subwfb	___awdiv@dividend+1,w,c
  6602  00221A  A0D8               	btfss	status,0,c
  6603  00221C  D006               	goto	l3048
  6604  00221E  501D               	movf	___awdiv@divisor,w,c
  6605  002220  5E1B               	subwf	___awdiv@dividend,f,c
  6606  002222  501E               	movf	___awdiv@divisor+1,w,c
  6607  002224  5A1C               	subwfb	___awdiv@dividend+1,f,c
  6608  002226  8021               	bsf	___awdiv@quotient,0,c
  6609  002228  D000               	goto	l3048
  6610  00222A                     l3048:
  6611  00222A  90D8               	bcf	status,0,c
  6612  00222C  321E               	rrcf	___awdiv@divisor+1,f,c
  6613  00222E  321D               	rrcf	___awdiv@divisor,f,c
  6614  002230  2E1F               	decfsz	___awdiv@counter,f,c
  6615  002232  D7EC               	goto	l3040
  6616  002234  D000               	goto	l3052
  6617  002236                     l3052:
  6618  002236  5020               	movf	___awdiv@sign,w,c
  6619  002238  B4D8               	btfsc	status,2,c
  6620  00223A  D005               	goto	l3056
  6621  00223C  6C21               	negf	___awdiv@quotient,c
  6622  00223E  1E22               	comf	___awdiv@quotient+1,f,c
  6623  002240  B0D8               	btfsc	status,0,c
  6624  002242  2A22               	incf	___awdiv@quotient+1,f,c
  6625  002244  D000               	goto	l3056
  6626  002246                     l3056:
  6627  002246  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  6628  00224A  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  6629  00224E  0012               	return	
  6630  002250  0012               	return		;funcret
  6631  002252                     __end_of___awdiv:
  6632                           	opt stack 0
  6633                           tosu	equ	0xFFF
  6634                           tosh	equ	0xFFE
  6635                           tosl	equ	0xFFD
  6636                           pclath	equ	0xFFA
  6637                           tblptru	equ	0xFF8
  6638                           tblptrh	equ	0xFF7
  6639                           tblptrl	equ	0xFF6
  6640                           tablat	equ	0xFF5
  6641                           prodh	equ	0xFF4
  6642                           prodl	equ	0xFF3
  6643                           intcon	equ	0xFF2
  6644                           postinc0	equ	0xFEE
  6645                           wreg	equ	0xFE8
  6646                           indf2	equ	0xFDF
  6647                           postinc2	equ	0xFDE
  6648                           postdec2	equ	0xFDD
  6649                           plusw2	equ	0xFDB
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function _TMR1_Initialize *****************
  6655 ;; Defined at:
  6656 ;;		line 18 in file "mcc_generated_files/tmr1.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;		None               void
  6663 ;; Registers used:
  6664 ;;		wreg, status,2, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         0       0       0       0       0       0       0
  6671 ;;      Locals:         0       0       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0
  6673 ;;      Totals:         0       0       0       0       0       0       0
  6674 ;;Total ram usage:        0 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    5
  6677 ;; This function calls:
  6678 ;;		_TMR1_StartTimer
  6679 ;; This function is called by:
  6680 ;;		_SYSTEM_Initialize
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text32
  6685  00288C                     __ptext32:
  6686                           	opt stack 0
  6687  00288C                     _TMR1_Initialize:
  6688                           	opt stack 24
  6689                           
  6690                           ;tmr1.c: 23: T1CON = 0x30;
  6691                           
  6692                           ;incstack = 0
  6693  00288C  0E30               	movlw	48
  6694  00288E  6ECD               	movwf	4045,c	;volatile
  6695                           
  6696                           ;tmr1.c: 26: T1GCON = 0x00;
  6697  002890  0E00               	movlw	0
  6698  002892  6ECC               	movwf	4044,c	;volatile
  6699                           
  6700                           ;tmr1.c: 29: TMR1H = 0x0B;
  6701  002894  0E0B               	movlw	11
  6702  002896  6ECF               	movwf	4047,c	;volatile
  6703                           
  6704                           ;tmr1.c: 32: TMR1L = 0xDC;
  6705  002898  0EDC               	movlw	220
  6706  00289A  6ECE               	movwf	4046,c	;volatile
  6707                           
  6708                           ;tmr1.c: 35: timer1ReloadVal=TMR1;
  6709  00289C  CFCE F037          	movff	4046,_timer1ReloadVal	;volatile
  6710  0028A0  CFCF F038          	movff	4047,_timer1ReloadVal+1	;volatile
  6711                           
  6712                           ;tmr1.c: 38: PIR1bits.TMR1IF = 0;
  6713  0028A4  909E               	bcf	3998,0,c	;volatile
  6714                           
  6715                           ;tmr1.c: 41: PIE1bits.TMR1IE = 1;
  6716  0028A6  809D               	bsf	3997,0,c	;volatile
  6717                           
  6718                           ;tmr1.c: 44: TMR1_StartTimer();
  6719  0028A8  ECF2  F014         	call	_TMR1_StartTimer	;wreg free
  6720  0028AC  0012               	return		;funcret
  6721  0028AE                     __end_of_TMR1_Initialize:
  6722                           	opt stack 0
  6723                           tosu	equ	0xFFF
  6724                           tosh	equ	0xFFE
  6725                           tosl	equ	0xFFD
  6726                           pclath	equ	0xFFA
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           intcon	equ	0xFF2
  6734                           postinc0	equ	0xFEE
  6735                           wreg	equ	0xFE8
  6736                           indf2	equ	0xFDF
  6737                           postinc2	equ	0xFDE
  6738                           postdec2	equ	0xFDD
  6739                           plusw2	equ	0xFDB
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function _TMR1_StartTimer *****************
  6745 ;; Defined at:
  6746 ;;		line 47 in file "mcc_generated_files/tmr1.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;		None
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;		None
  6751 ;; Return value:  Size  Location     Type
  6752 ;;		None               void
  6753 ;; Registers used:
  6754 ;;		None
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6760 ;;      Params:         0       0       0       0       0       0       0
  6761 ;;      Locals:         0       0       0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0
  6763 ;;      Totals:         0       0       0       0       0       0       0
  6764 ;;Total ram usage:        0 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    4
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		_TMR1_Initialize
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text33
  6775  0029E4                     __ptext33:
  6776                           	opt stack 0
  6777  0029E4                     _TMR1_StartTimer:
  6778                           	opt stack 24
  6779                           
  6780                           ;tmr1.c: 50: T1CONbits.TMR1ON = 1;
  6781                           
  6782                           ;incstack = 0
  6783  0029E4  80CD               	bsf	4045,0,c	;volatile
  6784  0029E6  0012               	return		;funcret
  6785  0029E8                     __end_of_TMR1_StartTimer:
  6786                           	opt stack 0
  6787                           tosu	equ	0xFFF
  6788                           tosh	equ	0xFFE
  6789                           tosl	equ	0xFFD
  6790                           pclath	equ	0xFFA
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           intcon	equ	0xFF2
  6798                           postinc0	equ	0xFEE
  6799                           wreg	equ	0xFE8
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           postdec2	equ	0xFDD
  6803                           plusw2	equ	0xFDB
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _PIN_MANAGER_Initialize *****************
  6809 ;; Defined at:
  6810 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;		None
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;		None
  6815 ;; Return value:  Size  Location     Type
  6816 ;;		None               void
  6817 ;; Registers used:
  6818 ;;		wreg, status,2
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6824 ;;      Params:         0       0       0       0       0       0       0
  6825 ;;      Locals:         0       0       0       0       0       0       0
  6826 ;;      Temps:          0       0       0       0       0       0       0
  6827 ;;      Totals:         0       0       0       0       0       0       0
  6828 ;;Total ram usage:        0 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    4
  6831 ;; This function calls:
  6832 ;;		Nothing
  6833 ;; This function is called by:
  6834 ;;		_SYSTEM_Initialize
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           	psect	text34
  6839  00256A                     __ptext34:
  6840                           	opt stack 0
  6841  00256A                     _PIN_MANAGER_Initialize:
  6842                           	opt stack 25
  6843                           
  6844                           ;pin_manager.c: 8: LATA = 0x00;
  6845                           
  6846                           ;incstack = 0
  6847  00256A  0E00               	movlw	0
  6848  00256C  6E89               	movwf	3977,c	;volatile
  6849                           
  6850                           ;pin_manager.c: 9: TRISA = 0xAE;
  6851  00256E  0EAE               	movlw	174
  6852  002570  6E92               	movwf	3986,c	;volatile
  6853                           
  6854                           ;pin_manager.c: 10: ANSELA = 0x2E;
  6855  002572  0E2E               	movlw	46
  6856  002574  010F               	movlb	15	; () banked
  6857  002576  6F38               	movwf	56,b	;volatile
  6858                           
  6859                           ;pin_manager.c: 12: LATB = 0x00;
  6860  002578  0E00               	movlw	0
  6861  00257A  6E8A               	movwf	3978,c	;volatile
  6862                           
  6863                           ;pin_manager.c: 13: TRISB = 0xF4;
  6864  00257C  0EF4               	movlw	244
  6865  00257E  6E93               	movwf	3987,c	;volatile
  6866                           
  6867                           ;pin_manager.c: 14: ANSELB = 0x34;
  6868  002580  0E34               	movlw	52
  6869  002582  010F               	movlb	15	; () banked
  6870  002584  6F39               	movwf	57,b	;volatile
  6871                           
  6872                           ;pin_manager.c: 15: WPUB = 0x00;
  6873  002586  0E00               	movlw	0
  6874  002588  6E61               	movwf	3937,c	;volatile
  6875                           
  6876                           ;pin_manager.c: 17: LATC = 0x48;
  6877  00258A  0E48               	movlw	72
  6878  00258C  6E8B               	movwf	3979,c	;volatile
  6879                           
  6880                           ;pin_manager.c: 18: TRISC = 0xC4;
  6881  00258E  0EC4               	movlw	196
  6882  002590  6E94               	movwf	3988,c	;volatile
  6883                           
  6884                           ;pin_manager.c: 19: ANSELC = 0x04;
  6885  002592  0E04               	movlw	4
  6886  002594  010F               	movlb	15	; () banked
  6887  002596  6F3A               	movwf	58,b	;volatile
  6888                           
  6889                           ;pin_manager.c: 21: LATD = 0x00;
  6890  002598  0E00               	movlw	0
  6891  00259A  6E8C               	movwf	3980,c	;volatile
  6892                           
  6893                           ;pin_manager.c: 22: TRISD = 0xD1;
  6894  00259C  0ED1               	movlw	209
  6895  00259E  6E95               	movwf	3989,c	;volatile
  6896                           
  6897                           ;pin_manager.c: 23: ANSELD = 0xD1;
  6898  0025A0  0ED1               	movlw	209
  6899  0025A2  010F               	movlb	15	; () banked
  6900  0025A4  6F3B               	movwf	59,b	;volatile
  6901                           
  6902                           ;pin_manager.c: 25: LATE = 0x00;
  6903  0025A6  0E00               	movlw	0
  6904  0025A8  6E8D               	movwf	3981,c	;volatile
  6905                           
  6906                           ;pin_manager.c: 26: TRISE = 0x04;
  6907  0025AA  0E04               	movlw	4
  6908  0025AC  6E96               	movwf	3990,c	;volatile
  6909                           
  6910                           ;pin_manager.c: 27: ANSELE = 0x04;
  6911  0025AE  0E04               	movlw	4
  6912  0025B0  010F               	movlb	15	; () banked
  6913  0025B2  6F3C               	movwf	60,b	;volatile
  6914                           
  6915                           ; BSR set to: 15
  6916                           ;pin_manager.c: 29: TRISCbits.TRISC6 = 1;
  6917  0025B4  8C94               	bsf	3988,6,c	;volatile
  6918                           
  6919                           ; BSR set to: 15
  6920                           ;pin_manager.c: 30: TRISCbits.TRISC7 = 1;
  6921  0025B6  8E94               	bsf	3988,7,c	;volatile
  6922                           
  6923                           ; BSR set to: 15
  6924                           ;pin_manager.c: 34: INTCON2bits.nRBPU = 0x01;
  6925  0025B8  8EF1               	bsf	intcon2,7,c	;volatile
  6926                           
  6927                           ; BSR set to: 15
  6928  0025BA  0012               	return		;funcret
  6929  0025BC                     __end_of_PIN_MANAGER_Initialize:
  6930                           	opt stack 0
  6931                           tosu	equ	0xFFF
  6932                           tosh	equ	0xFFE
  6933                           tosl	equ	0xFFD
  6934                           pclath	equ	0xFFA
  6935                           tblptru	equ	0xFF8
  6936                           tblptrh	equ	0xFF7
  6937                           tblptrl	equ	0xFF6
  6938                           tablat	equ	0xFF5
  6939                           prodh	equ	0xFF4
  6940                           prodl	equ	0xFF3
  6941                           intcon	equ	0xFF2
  6942                           intcon2	equ	0xFF1
  6943                           postinc0	equ	0xFEE
  6944                           wreg	equ	0xFE8
  6945                           indf2	equ	0xFDF
  6946                           postinc2	equ	0xFDE
  6947                           postdec2	equ	0xFDD
  6948                           plusw2	equ	0xFDB
  6949                           fsr2h	equ	0xFDA
  6950                           fsr2l	equ	0xFD9
  6951                           status	equ	0xFD8
  6952                           
  6953 ;; *************** function _OSCILLATOR_Initialize *****************
  6954 ;; Defined at:
  6955 ;;		line 125 in file "mcc_generated_files/mcc.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;		None
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;		None
  6960 ;; Return value:  Size  Location     Type
  6961 ;;		None               void
  6962 ;; Registers used:
  6963 ;;		wreg, status,2
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6969 ;;      Params:         0       0       0       0       0       0       0
  6970 ;;      Locals:         0       0       0       0       0       0       0
  6971 ;;      Temps:          0       0       0       0       0       0       0
  6972 ;;      Totals:         0       0       0       0       0       0       0
  6973 ;;Total ram usage:        0 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; Hardware stack levels required when called:    4
  6976 ;; This function calls:
  6977 ;;		Nothing
  6978 ;; This function is called by:
  6979 ;;		_SYSTEM_Initialize
  6980 ;; This function uses a non-reentrant model
  6981 ;;
  6982                           
  6983                           	psect	text35
  6984  0029CA                     __ptext35:
  6985                           	opt stack 0
  6986  0029CA                     _OSCILLATOR_Initialize:
  6987                           	opt stack 25
  6988                           
  6989                           ;mcc.c: 127: OSCCON = 0x62;
  6990                           
  6991                           ; BSR set to: 15
  6992                           ;incstack = 0
  6993  0029CA  0E62               	movlw	98
  6994  0029CC  6ED3               	movwf	4051,c	;volatile
  6995                           
  6996                           ;mcc.c: 129: OSCCON2 = 0x04;
  6997  0029CE  0E04               	movlw	4
  6998  0029D0  6ED2               	movwf	4050,c	;volatile
  6999                           
  7000                           ;mcc.c: 131: OSCTUNE = 0x00;
  7001  0029D2  0E00               	movlw	0
  7002  0029D4  6E9B               	movwf	3995,c	;volatile
  7003  0029D6  0012               	return		;funcret
  7004  0029D8                     __end_of_OSCILLATOR_Initialize:
  7005                           	opt stack 0
  7006                           tosu	equ	0xFFF
  7007                           tosh	equ	0xFFE
  7008                           tosl	equ	0xFFD
  7009                           pclath	equ	0xFFA
  7010                           tblptru	equ	0xFF8
  7011                           tblptrh	equ	0xFF7
  7012                           tblptrl	equ	0xFF6
  7013                           tablat	equ	0xFF5
  7014                           prodh	equ	0xFF4
  7015                           prodl	equ	0xFF3
  7016                           intcon	equ	0xFF2
  7017                           intcon2	equ	0xFF1
  7018                           postinc0	equ	0xFEE
  7019                           wreg	equ	0xFE8
  7020                           indf2	equ	0xFDF
  7021                           postinc2	equ	0xFDE
  7022                           postdec2	equ	0xFDD
  7023                           plusw2	equ	0xFDB
  7024                           fsr2h	equ	0xFDA
  7025                           fsr2l	equ	0xFD9
  7026                           status	equ	0xFD8
  7027                           
  7028 ;; *************** function _INTERRUPT_Initialize *****************
  7029 ;; Defined at:
  7030 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;		None
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;		None
  7035 ;; Return value:  Size  Location     Type
  7036 ;;		None               void
  7037 ;; Registers used:
  7038 ;;		None
  7039 ;; Tracked objects:
  7040 ;;		On entry : 0/0
  7041 ;;		On exit  : 0/0
  7042 ;;		Unchanged: 0/0
  7043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7044 ;;      Params:         0       0       0       0       0       0       0
  7045 ;;      Locals:         0       0       0       0       0       0       0
  7046 ;;      Temps:          0       0       0       0       0       0       0
  7047 ;;      Totals:         0       0       0       0       0       0       0
  7048 ;;Total ram usage:        0 bytes
  7049 ;; Hardware stack levels used:    1
  7050 ;; Hardware stack levels required when called:    4
  7051 ;; This function calls:
  7052 ;;		Nothing
  7053 ;; This function is called by:
  7054 ;;		_SYSTEM_Initialize
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           	psect	text36
  7059  0029D8                     __ptext36:
  7060                           	opt stack 0
  7061  0029D8                     _INTERRUPT_Initialize:
  7062                           	opt stack 25
  7063                           
  7064                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  7065                           
  7066                           ;incstack = 0
  7067  0029D8  9ED0               	bcf	4048,7,c	;volatile
  7068                           
  7069                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  7070  0029DA  9A9F               	bcf	3999,5,c	;volatile
  7071                           
  7072                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  7073  0029DC  9C9F               	bcf	3999,6,c	;volatile
  7074                           
  7075                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  7076  0029DE  909F               	bcf	3999,0,c	;volatile
  7077                           
  7078                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  7079  0029E0  989F               	bcf	3999,4,c	;volatile
  7080  0029E2  0012               	return		;funcret
  7081  0029E4                     __end_of_INTERRUPT_Initialize:
  7082                           	opt stack 0
  7083                           tosu	equ	0xFFF
  7084                           tosh	equ	0xFFE
  7085                           tosl	equ	0xFFD
  7086                           pclath	equ	0xFFA
  7087                           tblptru	equ	0xFF8
  7088                           tblptrh	equ	0xFF7
  7089                           tblptrl	equ	0xFF6
  7090                           tablat	equ	0xFF5
  7091                           prodh	equ	0xFF4
  7092                           prodl	equ	0xFF3
  7093                           intcon	equ	0xFF2
  7094                           intcon2	equ	0xFF1
  7095                           postinc0	equ	0xFEE
  7096                           wreg	equ	0xFE8
  7097                           indf2	equ	0xFDF
  7098                           postinc2	equ	0xFDE
  7099                           postdec2	equ	0xFDD
  7100                           plusw2	equ	0xFDB
  7101                           fsr2h	equ	0xFDA
  7102                           fsr2l	equ	0xFD9
  7103                           status	equ	0xFD8
  7104                           
  7105 ;; *************** function _EUSART1_Initialize *****************
  7106 ;; Defined at:
  7107 ;;		line 21 in file "UART.c"
  7108 ;; Parameters:    Size  Location     Type
  7109 ;;		None
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;		None
  7112 ;; Return value:  Size  Location     Type
  7113 ;;		None               void
  7114 ;; Registers used:
  7115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7116 ;; Tracked objects:
  7117 ;;		On entry : 0/0
  7118 ;;		On exit  : 0/0
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7121 ;;      Params:         0       0       0       0       0       0       0
  7122 ;;      Locals:         0       0       0       0       0       0       0
  7123 ;;      Temps:          0       0       0       0       0       0       0
  7124 ;;      Totals:         0       0       0       0       0       0       0
  7125 ;;Total ram usage:        0 bytes
  7126 ;; Hardware stack levels used:    1
  7127 ;; Hardware stack levels required when called:    6
  7128 ;; This function calls:
  7129 ;;		_UART_buff_init
  7130 ;; This function is called by:
  7131 ;;		_SYSTEM_Initialize
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           	psect	text37
  7136  002654                     __ptext37:
  7137                           	opt stack 0
  7138  002654                     _EUSART1_Initialize:
  7139                           	opt stack 23
  7140                           
  7141                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  7142                           
  7143                           ;incstack = 0
  7144  002654  9A9D               	bcf	3997,5,c	;volatile
  7145                           
  7146                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  7147  002656  989D               	bcf	3997,4,c	;volatile
  7148                           
  7149                           ;UART.c: 29: BAUD1CON = 0x48;
  7150  002658  0E48               	movlw	72
  7151  00265A  6EB8               	movwf	4024,c	;volatile
  7152                           
  7153                           ;UART.c: 32: RC1STA = 0x98;
  7154  00265C  0E98               	movlw	152
  7155  00265E  6EAB               	movwf	4011,c	;volatile
  7156                           
  7157                           ;UART.c: 35: TX1STA = 0x26;
  7158  002660  0E26               	movlw	38
  7159  002662  6EAC               	movwf	4012,c	;volatile
  7160                           
  7161                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  7162  002664  0E33               	movlw	51
  7163  002666  6EAF               	movwf	4015,c	;volatile
  7164                           
  7165                           ;UART.c: 41: SPBRGH1 = 0x00;
  7166  002668  0E00               	movlw	0
  7167  00266A  6EB0               	movwf	4016,c	;volatile
  7168                           
  7169                           ;UART.c: 44: TXREG1 = 0x00;
  7170  00266C  0E00               	movlw	0
  7171  00266E  6EAD               	movwf	4013,c	;volatile
  7172                           
  7173                           ;UART.c: 47: RCREG1 = 0x00;
  7174  002670  0E00               	movlw	0
  7175  002672  6EAE               	movwf	4014,c	;volatile
  7176                           
  7177                           ;UART.c: 49: UART_buff_init(&input_buffer);
  7178  002674  0E00               	movlw	low _input_buffer
  7179  002676  6E23               	movwf	UART_buff_init@_this,c
  7180  002678  0E04               	movlw	high _input_buffer
  7181  00267A  6E24               	movwf	UART_buff_init@_this+1,c
  7182  00267C  EC57  F014         	call	_UART_buff_init	;wreg free
  7183                           
  7184                           ;UART.c: 50: UART_buff_init(&output_buffer);
  7185  002680  0E00               	movlw	low _output_buffer
  7186  002682  6E23               	movwf	UART_buff_init@_this,c
  7187  002684  0E05               	movlw	high _output_buffer
  7188  002686  6E24               	movwf	UART_buff_init@_this+1,c
  7189  002688  EC57  F014         	call	_UART_buff_init	;wreg free
  7190                           
  7191                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  7192  00268C  8A9D               	bsf	3997,5,c	;volatile
  7193  00268E  0012               	return		;funcret
  7194  002690                     __end_of_EUSART1_Initialize:
  7195                           	opt stack 0
  7196                           tosu	equ	0xFFF
  7197                           tosh	equ	0xFFE
  7198                           tosl	equ	0xFFD
  7199                           pclath	equ	0xFFA
  7200                           tblptru	equ	0xFF8
  7201                           tblptrh	equ	0xFF7
  7202                           tblptrl	equ	0xFF6
  7203                           tablat	equ	0xFF5
  7204                           prodh	equ	0xFF4
  7205                           prodl	equ	0xFF3
  7206                           intcon	equ	0xFF2
  7207                           intcon2	equ	0xFF1
  7208                           postinc0	equ	0xFEE
  7209                           wreg	equ	0xFE8
  7210                           indf2	equ	0xFDF
  7211                           postinc2	equ	0xFDE
  7212                           postdec2	equ	0xFDD
  7213                           plusw2	equ	0xFDB
  7214                           fsr2h	equ	0xFDA
  7215                           fsr2l	equ	0xFD9
  7216                           status	equ	0xFD8
  7217                           
  7218 ;; *************** function _UART_buff_init *****************
  7219 ;; Defined at:
  7220 ;;		line 56 in file "UART.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  7223 ;;		 -> output_buffer(206), input_buffer(206), 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;		None
  7226 ;; Return value:  Size  Location     Type
  7227 ;;		None               void
  7228 ;; Registers used:
  7229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7235 ;;      Params:         2       0       0       0       0       0       0
  7236 ;;      Locals:         0       0       0       0       0       0       0
  7237 ;;      Temps:          0       0       0       0       0       0       0
  7238 ;;      Totals:         2       0       0       0       0       0       0
  7239 ;;Total ram usage:        2 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:    5
  7242 ;; This function calls:
  7243 ;;		_memset
  7244 ;; This function is called by:
  7245 ;;		_EUSART1_Initialize
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           	psect	text38
  7250  0028AE                     __ptext38:
  7251                           	opt stack 0
  7252  0028AE                     _UART_buff_init:
  7253                           	opt stack 23
  7254                           
  7255                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  7256                           
  7257                           ;incstack = 0
  7258  0028AE  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  7259  0028B2  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  7260  0028B6  0E00               	movlw	0
  7261  0028B8  6E1E               	movwf	memset@c+1,c
  7262  0028BA  0E00               	movlw	0
  7263  0028BC  6E1D               	movwf	memset@c,c
  7264  0028BE  0E00               	movlw	0
  7265  0028C0  6E20               	movwf	memset@n+1,c
  7266  0028C2  0ECE               	movlw	206
  7267  0028C4  6E1F               	movwf	memset@n,c
  7268  0028C6  ECDC  F013         	call	_memset	;wreg free
  7269  0028CA  0012               	return		;funcret
  7270  0028CC                     __end_of_UART_buff_init:
  7271                           	opt stack 0
  7272                           tosu	equ	0xFFF
  7273                           tosh	equ	0xFFE
  7274                           tosl	equ	0xFFD
  7275                           pclath	equ	0xFFA
  7276                           tblptru	equ	0xFF8
  7277                           tblptrh	equ	0xFF7
  7278                           tblptrl	equ	0xFF6
  7279                           tablat	equ	0xFF5
  7280                           prodh	equ	0xFF4
  7281                           prodl	equ	0xFF3
  7282                           intcon	equ	0xFF2
  7283                           intcon2	equ	0xFF1
  7284                           postinc0	equ	0xFEE
  7285                           wreg	equ	0xFE8
  7286                           indf2	equ	0xFDF
  7287                           postinc2	equ	0xFDE
  7288                           postdec2	equ	0xFDD
  7289                           plusw2	equ	0xFDB
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function _memset *****************
  7295 ;; Defined at:
  7296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\memset.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  p1              2   26[COMRAM] PTR void 
  7299 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7300 ;;  c               2   28[COMRAM] int 
  7301 ;;  n               2   30[COMRAM] unsigned int 
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;  p               2   32[COMRAM] PTR unsigned char 
  7304 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7305 ;; Return value:  Size  Location     Type
  7306 ;;                  2   26[COMRAM] PTR void 
  7307 ;; Registers used:
  7308 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7314 ;;      Params:         6       0       0       0       0       0       0
  7315 ;;      Locals:         2       0       0       0       0       0       0
  7316 ;;      Temps:          0       0       0       0       0       0       0
  7317 ;;      Totals:         8       0       0       0       0       0       0
  7318 ;;Total ram usage:        8 bytes
  7319 ;; Hardware stack levels used:    1
  7320 ;; Hardware stack levels required when called:    4
  7321 ;; This function calls:
  7322 ;;		Nothing
  7323 ;; This function is called by:
  7324 ;;		_FastTransfer_buffer_flush
  7325 ;;		_UART_buff_init
  7326 ;;		_UART_buff_flush
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           	psect	text39
  7331  0027B8                     __ptext39:
  7332                           	opt stack 0
  7333  0027B8                     _memset:
  7334                           	opt stack 23
  7335                           
  7336                           ;incstack = 0
  7337  0027B8  C01B  F021         	movff	memset@p1,memset@p
  7338  0027BC  C01C  F022         	movff	memset@p1+1,memset@p+1
  7339  0027C0  D009               	goto	l2778
  7340  0027C2                     l2774:
  7341  0027C2  C021  FFD9         	movff	memset@p,fsr2l
  7342  0027C6  C022  FFDA         	movff	memset@p+1,fsr2h
  7343  0027CA  C01D  FFDF         	movff	memset@c,indf2
  7344  0027CE  4A21               	infsnz	memset@p,f,c
  7345  0027D0  2A22               	incf	memset@p+1,f,c
  7346  0027D2  D000               	goto	l2778
  7347  0027D4                     l2778:
  7348  0027D4  061F               	decf	memset@n,f,c
  7349  0027D6  A0D8               	btfss	status,0,c
  7350  0027D8  0620               	decf	memset@n+1,f,c
  7351  0027DA  281F               	incf	memset@n,w,c
  7352  0027DC  E1F2               	bnz	l2774
  7353  0027DE  2820               	incf	memset@n+1,w,c
  7354  0027E0  A4D8               	btfss	status,2,c
  7355  0027E2  D7EF               	goto	l2774
  7356                           
  7357                           ;	Return value of _memset is never used
  7358  0027E4  0012               	return		;funcret
  7359  0027E6                     __end_of_memset:
  7360                           	opt stack 0
  7361                           tosu	equ	0xFFF
  7362                           tosh	equ	0xFFE
  7363                           tosl	equ	0xFFD
  7364                           pclath	equ	0xFFA
  7365                           tblptru	equ	0xFF8
  7366                           tblptrh	equ	0xFF7
  7367                           tblptrl	equ	0xFF6
  7368                           tablat	equ	0xFF5
  7369                           prodh	equ	0xFF4
  7370                           prodl	equ	0xFF3
  7371                           intcon	equ	0xFF2
  7372                           intcon2	equ	0xFF1
  7373                           postinc0	equ	0xFEE
  7374                           wreg	equ	0xFE8
  7375                           indf2	equ	0xFDF
  7376                           postinc2	equ	0xFDE
  7377                           postdec2	equ	0xFDD
  7378                           plusw2	equ	0xFDB
  7379                           fsr2h	equ	0xFDA
  7380                           fsr2l	equ	0xFD9
  7381                           status	equ	0xFD8
  7382                           
  7383 ;; *************** function _ADC_Initialize *****************
  7384 ;; Defined at:
  7385 ;;		line 13 in file "mcc_generated_files/adc.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;		None
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;		None               void
  7392 ;; Registers used:
  7393 ;;		wreg, status,2
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7399 ;;      Params:         0       0       0       0       0       0       0
  7400 ;;      Locals:         0       0       0       0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0       0       0
  7402 ;;      Totals:         0       0       0       0       0       0       0
  7403 ;;Total ram usage:        0 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    4
  7406 ;; This function calls:
  7407 ;;		Nothing
  7408 ;; This function is called by:
  7409 ;;		_SYSTEM_Initialize
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           	psect	text40
  7414  002950                     __ptext40:
  7415                           	opt stack 0
  7416  002950                     _ADC_Initialize:
  7417                           	opt stack 25
  7418                           
  7419                           ;adc.c: 18: ADCON0 = 0x01;
  7420                           
  7421                           ;incstack = 0
  7422  002950  0E01               	movlw	1
  7423  002952  6EC2               	movwf	4034,c	;volatile
  7424                           
  7425                           ;adc.c: 21: ADCON1 = 0x80;
  7426  002954  0E80               	movlw	128
  7427  002956  6EC1               	movwf	4033,c	;volatile
  7428                           
  7429                           ;adc.c: 24: ADCON2 = 0xA9;
  7430  002958  0EA9               	movlw	169
  7431  00295A  6EC0               	movwf	4032,c	;volatile
  7432                           
  7433                           ;adc.c: 27: ADRESL = 0x00;
  7434  00295C  0E00               	movlw	0
  7435  00295E  6EC3               	movwf	4035,c	;volatile
  7436                           
  7437                           ;adc.c: 30: ADRESH = 0x00;
  7438  002960  0E00               	movlw	0
  7439  002962  6EC4               	movwf	4036,c	;volatile
  7440                           
  7441                           ;adc.c: 33: PIE1bits.ADIE = 1;
  7442  002964  8C9D               	bsf	3997,6,c	;volatile
  7443  002966  0012               	return		;funcret
  7444  002968                     __end_of_ADC_Initialize:
  7445                           	opt stack 0
  7446                           tosu	equ	0xFFF
  7447                           tosh	equ	0xFFE
  7448                           tosl	equ	0xFFD
  7449                           pclath	equ	0xFFA
  7450                           tblptru	equ	0xFF8
  7451                           tblptrh	equ	0xFF7
  7452                           tblptrl	equ	0xFF6
  7453                           tablat	equ	0xFF5
  7454                           prodh	equ	0xFF4
  7455                           prodl	equ	0xFF3
  7456                           intcon	equ	0xFF2
  7457                           intcon2	equ	0xFF1
  7458                           postinc0	equ	0xFEE
  7459                           wreg	equ	0xFE8
  7460                           indf2	equ	0xFDF
  7461                           postinc2	equ	0xFDE
  7462                           postdec2	equ	0xFDD
  7463                           plusw2	equ	0xFDB
  7464                           fsr2h	equ	0xFDA
  7465                           fsr2l	equ	0xFD9
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _INTERRUPT_InterruptManager *****************
  7469 ;; Defined at:
  7470 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;		None
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;		None
  7475 ;; Return value:  Size  Location     Type
  7476 ;;		None               void
  7477 ;; Registers used:
  7478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7484 ;;      Params:         0       0       0       0       0       0       0
  7485 ;;      Locals:         0       0       0       0       0       0       0
  7486 ;;      Temps:         14       0       0       0       0       0       0
  7487 ;;      Totals:        14       0       0       0       0       0       0
  7488 ;;Total ram usage:       14 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    3
  7491 ;; This function calls:
  7492 ;;		_ADC_ISR
  7493 ;;		_EUSART1_Receive_ISR
  7494 ;;		_EUSART1_Transmit_ISR
  7495 ;;		_TMR1_ISR
  7496 ;; This function is called by:
  7497 ;;		Interrupt level 2
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           	psect	intcode
  7502  000008                     __pintcode:
  7503                           	opt stack 0
  7504  000008                     _INTERRUPT_InterruptManager:
  7505                           	opt stack 21
  7506                           
  7507                           ;incstack = 0
  7508  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  7509  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7510  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7511  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7512  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7513  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7514  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7515  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7516  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7517  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7518  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7519  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7520  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7521  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7522                           
  7523                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7524  000040  BA9D               	btfsc	3997,5,c	;volatile
  7525  000042  AA9E               	btfss	3998,5,c	;volatile
  7526  000044  D003               	goto	i2l204
  7527                           
  7528                           ;interrupt_manager.c: 73: {
  7529                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  7530  000046  EC66  F014         	call	_EUSART1_Receive_ISR	;wreg free
  7531                           
  7532                           ;interrupt_manager.c: 75: }
  7533  00004A  D012               	goto	i2l212
  7534  00004C                     i2l204:
  7535                           
  7536                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7537  00004C  BC9D               	btfsc	3997,6,c	;volatile
  7538  00004E  AC9E               	btfss	3998,6,c	;volatile
  7539  000050  D003               	goto	i2l206
  7540                           
  7541                           ;interrupt_manager.c: 77: {
  7542                           ;interrupt_manager.c: 78: ADC_ISR();
  7543  000052  EC2B  F006         	call	_ADC_ISR	;wreg free
  7544                           
  7545                           ;interrupt_manager.c: 79: }
  7546  000056  D00C               	goto	i2l212
  7547  000058                     i2l206:
  7548                           
  7549                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  7550  000058  B09D               	btfsc	3997,0,c	;volatile
  7551  00005A  A09E               	btfss	3998,0,c	;volatile
  7552  00005C  D003               	goto	i2l208
  7553                           
  7554                           ;interrupt_manager.c: 81: {
  7555                           ;interrupt_manager.c: 82: TMR1_ISR();
  7556  00005E  EC0A  F014         	call	_TMR1_ISR	;wreg free
  7557                           
  7558                           ;interrupt_manager.c: 83: }
  7559  000062  D006               	goto	i2l212
  7560  000064                     i2l208:
  7561                           
  7562                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7563  000064  B89D               	btfsc	3997,4,c	;volatile
  7564  000066  A89E               	btfss	3998,4,c	;volatile
  7565  000068  D003               	goto	i2l212
  7566                           
  7567                           ;interrupt_manager.c: 85: {
  7568                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  7569  00006A  EC64  F013         	call	_EUSART1_Transmit_ISR	;wreg free
  7570                           
  7571                           ;interrupt_manager.c: 88: else
  7572                           ;interrupt_manager.c: 89: {
  7573                           
  7574                           ;interrupt_manager.c: 87: }
  7575  00006E  D000               	goto	i2l212
  7576  000070                     i2l212:
  7577  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7578  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7579  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7580  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7581  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7582  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7583  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7584  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7585  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7586  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7587  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7588  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7589  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7590  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7591  0000A8  0011               	retfie		f
  7592  0000AA                     __end_of_INTERRUPT_InterruptManager:
  7593                           	opt stack 0
  7594                           tosu	equ	0xFFF
  7595                           tosh	equ	0xFFE
  7596                           tosl	equ	0xFFD
  7597                           pclatu	equ	0xFFB
  7598                           pclath	equ	0xFFA
  7599                           tblptru	equ	0xFF8
  7600                           tblptrh	equ	0xFF7
  7601                           tblptrl	equ	0xFF6
  7602                           tablat	equ	0xFF5
  7603                           prodh	equ	0xFF4
  7604                           prodl	equ	0xFF3
  7605                           intcon	equ	0xFF2
  7606                           intcon2	equ	0xFF1
  7607                           postinc0	equ	0xFEE
  7608                           fsr0h	equ	0xFEA
  7609                           fsr0l	equ	0xFE9
  7610                           wreg	equ	0xFE8
  7611                           fsr1h	equ	0xFE2
  7612                           fsr1l	equ	0xFE1
  7613                           indf2	equ	0xFDF
  7614                           postinc2	equ	0xFDE
  7615                           postdec2	equ	0xFDD
  7616                           plusw2	equ	0xFDB
  7617                           fsr2h	equ	0xFDA
  7618                           fsr2l	equ	0xFD9
  7619                           status	equ	0xFD8
  7620                           
  7621 ;; *************** function _TMR1_ISR *****************
  7622 ;; Defined at:
  7623 ;;		line 112 in file "mcc_generated_files/tmr1.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;		None
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;		None
  7628 ;; Return value:  Size  Location     Type
  7629 ;;		None               void
  7630 ;; Registers used:
  7631 ;;		wreg, status,2, status,0
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7637 ;;      Params:         0       0       0       0       0       0       0
  7638 ;;      Locals:         0       0       0       0       0       0       0
  7639 ;;      Temps:          0       0       0       0       0       0       0
  7640 ;;      Totals:         0       0       0       0       0       0       0
  7641 ;;Total ram usage:        0 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; This function calls:
  7644 ;;		Nothing
  7645 ;; This function is called by:
  7646 ;;		_INTERRUPT_InterruptManager
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           	psect	text42
  7651  002814                     __ptext42:
  7652                           	opt stack 0
  7653  002814                     _TMR1_ISR:
  7654                           	opt stack 23
  7655                           
  7656                           ;tmr1.c: 116: PIR1bits.TMR1IF = 0;
  7657                           
  7658                           ;incstack = 0
  7659  002814  909E               	bcf	3998,0,c	;volatile
  7660                           
  7661                           ;tmr1.c: 119: TMR1H = (timer1ReloadVal >> 8);
  7662  002816  5038               	movf	_timer1ReloadVal+1,w,c	;volatile
  7663  002818  6ECF               	movwf	4047,c	;volatile
  7664                           
  7665                           ;tmr1.c: 120: TMR1L = (uint8_t) timer1ReloadVal;
  7666  00281A  C037  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  7667                           
  7668                           ;tmr1.c: 123: if (++CountCallBack >= 4)
  7669  00281E  4A2F               	infsnz	_CountCallBack,f,c
  7670  002820  2A30               	incf	_CountCallBack+1,f,c
  7671  002822  BE30               	btfsc	_CountCallBack+1,7,c
  7672  002824  0012               	return	
  7673  002826  5030               	movf	_CountCallBack+1,w,c
  7674  002828  E104               	bnz	i2u123_40
  7675  00282A  0E04               	movlw	4
  7676  00282C  5C2F               	subwf	_CountCallBack,w,c
  7677  00282E  A0D8               	btfss	status,0,c
  7678  002830  0012               	return	
  7679  002832                     i2u123_40:
  7680                           
  7681                           ;tmr1.c: 124: {
  7682                           ;tmr1.c: 129: CountCallBack = 0;
  7683  002832  0E00               	movlw	0
  7684  002834  6E30               	movwf	_CountCallBack+1,c
  7685  002836  0E00               	movlw	0
  7686  002838  6E2F               	movwf	_CountCallBack,c
  7687  00283A  0012               	return	
  7688                           
  7689                           ;tmr1.c: 132: {
  7690  00283C  0012               	return		;funcret
  7691  00283E                     __end_of_TMR1_ISR:
  7692                           	opt stack 0
  7693                           tosu	equ	0xFFF
  7694                           tosh	equ	0xFFE
  7695                           tosl	equ	0xFFD
  7696                           pclatu	equ	0xFFB
  7697                           pclath	equ	0xFFA
  7698                           tblptru	equ	0xFF8
  7699                           tblptrh	equ	0xFF7
  7700                           tblptrl	equ	0xFF6
  7701                           tablat	equ	0xFF5
  7702                           prodh	equ	0xFF4
  7703                           prodl	equ	0xFF3
  7704                           intcon	equ	0xFF2
  7705                           intcon2	equ	0xFF1
  7706                           postinc0	equ	0xFEE
  7707                           fsr0h	equ	0xFEA
  7708                           fsr0l	equ	0xFE9
  7709                           wreg	equ	0xFE8
  7710                           fsr1h	equ	0xFE2
  7711                           fsr1l	equ	0xFE1
  7712                           indf2	equ	0xFDF
  7713                           postinc2	equ	0xFDE
  7714                           postdec2	equ	0xFDD
  7715                           plusw2	equ	0xFDB
  7716                           fsr2h	equ	0xFDA
  7717                           fsr2l	equ	0xFD9
  7718                           status	equ	0xFD8
  7719                           
  7720 ;; *************** function _EUSART1_Transmit_ISR *****************
  7721 ;; Defined at:
  7722 ;;		line 150 in file "UART.c"
  7723 ;; Parameters:    Size  Location     Type
  7724 ;;		None
  7725 ;; Auto vars:     Size  Location     Type
  7726 ;;		None
  7727 ;; Return value:  Size  Location     Type
  7728 ;;		None               void
  7729 ;; Registers used:
  7730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7731 ;; Tracked objects:
  7732 ;;		On entry : 0/0
  7733 ;;		On exit  : 0/0
  7734 ;;		Unchanged: 0/0
  7735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7736 ;;      Params:         0       0       0       0       0       0       0
  7737 ;;      Locals:         0       0       0       0       0       0       0
  7738 ;;      Temps:          0       0       0       0       0       0       0
  7739 ;;      Totals:         0       0       0       0       0       0       0
  7740 ;;Total ram usage:        0 bytes
  7741 ;; Hardware stack levels used:    1
  7742 ;; Hardware stack levels required when called:    2
  7743 ;; This function calls:
  7744 ;;		i2_UART_buff_get
  7745 ;;		i2_UART_buff_size
  7746 ;; This function is called by:
  7747 ;;		_INTERRUPT_InterruptManager
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           	psect	text43
  7752  0026C8                     __ptext43:
  7753                           	opt stack 0
  7754  0026C8                     _EUSART1_Transmit_ISR:
  7755                           	opt stack 21
  7756                           
  7757                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  7758                           
  7759                           ;incstack = 0
  7760  0026C8  0E00               	movlw	low _output_buffer
  7761  0026CA  6E01               	movwf	i2UART_buff_size@_this,c
  7762  0026CC  0E05               	movlw	high _output_buffer
  7763  0026CE  6E02               	movwf	i2UART_buff_size@_this+1,c
  7764  0026D0  ECB4  F014         	call	i2_UART_buff_size	;wreg free
  7765  0026D4  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  7766  0026D6  D00D               	goto	i2l3572
  7767  0026D8  5002               	movf	?i2_UART_buff_size+1,w,c
  7768  0026DA  E103               	bnz	i2u303_40
  7769  0026DC  0401               	decf	?i2_UART_buff_size,w,c
  7770  0026DE  A0D8               	btfss	status,0,c
  7771  0026E0  D008               	goto	i2l3572
  7772  0026E2                     i2u303_40:
  7773                           
  7774                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  7775  0026E2  0E00               	movlw	low _output_buffer
  7776  0026E4  6E07               	movwf	i2UART_buff_get@_this,c
  7777  0026E6  0E05               	movlw	high _output_buffer
  7778  0026E8  6E08               	movwf	i2UART_buff_get@_this+1,c
  7779  0026EA  EC73  F011         	call	i2_UART_buff_get	;wreg free
  7780  0026EE  6EAD               	movwf	4013,c	;volatile
  7781                           
  7782                           ;UART.c: 154: } else {
  7783  0026F0  0012               	return	
  7784  0026F2                     i2l3572:
  7785                           
  7786                           ;UART.c: 155: Transmit_stall = 1;
  7787  0026F2  0E01               	movlw	1
  7788  0026F4  6E45               	movwf	_Transmit_stall,c
  7789                           
  7790                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  7791  0026F6  989D               	bcf	3997,4,c	;volatile
  7792  0026F8  0012               	return	
  7793  0026FA  0012               	return		;funcret
  7794  0026FC                     __end_of_EUSART1_Transmit_ISR:
  7795                           	opt stack 0
  7796                           tosu	equ	0xFFF
  7797                           tosh	equ	0xFFE
  7798                           tosl	equ	0xFFD
  7799                           pclatu	equ	0xFFB
  7800                           pclath	equ	0xFFA
  7801                           tblptru	equ	0xFF8
  7802                           tblptrh	equ	0xFF7
  7803                           tblptrl	equ	0xFF6
  7804                           tablat	equ	0xFF5
  7805                           prodh	equ	0xFF4
  7806                           prodl	equ	0xFF3
  7807                           intcon	equ	0xFF2
  7808                           intcon2	equ	0xFF1
  7809                           postinc0	equ	0xFEE
  7810                           fsr0h	equ	0xFEA
  7811                           fsr0l	equ	0xFE9
  7812                           wreg	equ	0xFE8
  7813                           fsr1h	equ	0xFE2
  7814                           fsr1l	equ	0xFE1
  7815                           indf2	equ	0xFDF
  7816                           postinc2	equ	0xFDE
  7817                           postdec2	equ	0xFDD
  7818                           plusw2	equ	0xFDB
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function i2_UART_buff_size *****************
  7824 ;; Defined at:
  7825 ;;		line 102 in file "UART.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7828 ;;		 -> output_buffer(206), input_buffer(206), 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;		None
  7831 ;; Return value:  Size  Location     Type
  7832 ;;                  2    0[COMRAM] int 
  7833 ;; Registers used:
  7834 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7840 ;;      Params:         2       0       0       0       0       0       0
  7841 ;;      Locals:         0       0       0       0       0       0       0
  7842 ;;      Temps:          0       0       0       0       0       0       0
  7843 ;;      Totals:         2       0       0       0       0       0       0
  7844 ;;Total ram usage:        2 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_EUSART1_Transmit_ISR
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	text44
  7854  002968                     __ptext44:
  7855                           	opt stack 0
  7856  002968                     i2_UART_buff_size:
  7857                           	opt stack 22
  7858                           
  7859                           ;UART.c: 103: return (_this->count);
  7860                           
  7861                           ;incstack = 0
  7862  002968  EE20 F0CC          	lfsr	2,204
  7863  00296C  5001               	movf	i2UART_buff_size@_this,w,c
  7864  00296E  26D9               	addwf	fsr2l,f,c
  7865  002970  5002               	movf	i2UART_buff_size@_this+1,w,c
  7866  002972  22DA               	addwfc	fsr2h,f,c
  7867  002974  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  7868  002978  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  7869  00297C  0012               	return	
  7870  00297E  0012               	return		;funcret
  7871  002980                     __end_ofi2_UART_buff_size:
  7872                           	opt stack 0
  7873                           tosu	equ	0xFFF
  7874                           tosh	equ	0xFFE
  7875                           tosl	equ	0xFFD
  7876                           pclatu	equ	0xFFB
  7877                           pclath	equ	0xFFA
  7878                           tblptru	equ	0xFF8
  7879                           tblptrh	equ	0xFF7
  7880                           tblptrl	equ	0xFF6
  7881                           tablat	equ	0xFF5
  7882                           prodh	equ	0xFF4
  7883                           prodl	equ	0xFF3
  7884                           intcon	equ	0xFF2
  7885                           intcon2	equ	0xFF1
  7886                           postinc0	equ	0xFEE
  7887                           fsr0h	equ	0xFEA
  7888                           fsr0l	equ	0xFE9
  7889                           wreg	equ	0xFE8
  7890                           fsr1h	equ	0xFE2
  7891                           fsr1l	equ	0xFE1
  7892                           indf2	equ	0xFDF
  7893                           postinc2	equ	0xFDE
  7894                           postdec2	equ	0xFDD
  7895                           plusw2	equ	0xFDB
  7896                           fsr2h	equ	0xFDA
  7897                           fsr2l	equ	0xFD9
  7898                           status	equ	0xFD8
  7899                           
  7900 ;; *************** function i2_UART_buff_get *****************
  7901 ;; Defined at:
  7902 ;;		line 81 in file "UART.c"
  7903 ;; Parameters:    Size  Location     Type
  7904 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7905 ;;		 -> output_buffer(206), input_buffer(206), 
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  1    wreg      unsigned char 
  7910 ;; Registers used:
  7911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7917 ;;      Params:         2       0       0       0       0       0       0
  7918 ;;      Locals:         1       0       0       0       0       0       0
  7919 ;;      Temps:          2       0       0       0       0       0       0
  7920 ;;      Totals:         5       0       0       0       0       0       0
  7921 ;;Total ram usage:        5 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    1
  7924 ;; This function calls:
  7925 ;;		i2_UART_buff_modulo_inc
  7926 ;; This function is called by:
  7927 ;;		_EUSART1_Transmit_ISR
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text45
  7932  0022E6                     __ptext45:
  7933                           	opt stack 0
  7934  0022E6                     i2_UART_buff_get:
  7935                           	opt stack 21
  7936                           
  7937                           ;UART.c: 82: unsigned char c;
  7938                           ;UART.c: 83: if (_this->count > 0) {
  7939                           
  7940                           ;incstack = 0
  7941  0022E6  EE20 F0CC          	lfsr	2,204
  7942  0022EA  5007               	movf	i2UART_buff_get@_this,w,c
  7943  0022EC  26D9               	addwf	fsr2l,f,c
  7944  0022EE  5008               	movf	i2UART_buff_get@_this+1,w,c
  7945  0022F0  22DA               	addwfc	fsr2h,f,c
  7946  0022F2  0E01               	movlw	1
  7947  0022F4  BEDB               	btfsc	plusw2,7,c
  7948  0022F6  D03C               	goto	i2l3422
  7949  0022F8  0E01               	movlw	1
  7950  0022FA  50DB               	movf	plusw2,w,c
  7951  0022FC  E103               	bnz	i2u299_40
  7952  0022FE  04DE               	decf	postinc2,w,c
  7953  002300  A0D8               	btfss	status,0,c
  7954  002302  D036               	goto	i2l3422
  7955  002304                     i2u299_40:
  7956                           
  7957                           ;UART.c: 84: c = _this->buf[_this->tail];
  7958  002304  EE20 F0CA          	lfsr	2,202
  7959  002308  5007               	movf	i2UART_buff_get@_this,w,c
  7960  00230A  26D9               	addwf	fsr2l,f,c
  7961  00230C  5008               	movf	i2UART_buff_get@_this+1,w,c
  7962  00230E  22DA               	addwfc	fsr2h,f,c
  7963  002310  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  7964  002314  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  7965  002318  5009               	movf	??i2_UART_buff_get,w,c
  7966  00231A  2407               	addwf	i2UART_buff_get@_this,w,c
  7967  00231C  6ED9               	movwf	fsr2l,c
  7968  00231E  500A               	movf	??i2_UART_buff_get+1,w,c
  7969  002320  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  7970  002322  6EDA               	movwf	fsr2h,c
  7971  002324  50DF               	movf	indf2,w,c
  7972  002326  6E0B               	movwf	i2UART_buff_get@c,c
  7973                           
  7974                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7975  002328  EE20 F0CA          	lfsr	2,202
  7976  00232C  5007               	movf	i2UART_buff_get@_this,w,c
  7977  00232E  26D9               	addwf	fsr2l,f,c
  7978  002330  5008               	movf	i2UART_buff_get@_this+1,w,c
  7979  002332  22DA               	addwfc	fsr2h,f,c
  7980  002334  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7981  002338  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7982  00233C  0E00               	movlw	0
  7983  00233E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7984  002340  0EC8               	movlw	200
  7985  002342  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7986  002344  ECF3  F013         	call	i2_UART_buff_modulo_inc	;wreg free
  7987  002348  EE20 F0CA          	lfsr	2,202
  7988  00234C  5007               	movf	i2UART_buff_get@_this,w,c
  7989  00234E  26D9               	addwf	fsr2l,f,c
  7990  002350  5008               	movf	i2UART_buff_get@_this+1,w,c
  7991  002352  22DA               	addwfc	fsr2h,f,c
  7992  002354  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7993  002358  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7994                           
  7995                           ;UART.c: 86: --_this->count;
  7996  00235C  EE20 F0CC          	lfsr	2,204
  7997  002360  5007               	movf	i2UART_buff_get@_this,w,c
  7998  002362  26D9               	addwf	fsr2l,f,c
  7999  002364  5008               	movf	i2UART_buff_get@_this+1,w,c
  8000  002366  22DA               	addwfc	fsr2h,f,c
  8001  002368  06DE               	decf	postinc2,f,c
  8002  00236A  0E00               	movlw	0
  8003  00236C  5ADD               	subwfb	postdec2,f,c
  8004                           
  8005                           ;UART.c: 87: } else {
  8006  00236E  D002               	goto	i2l757
  8007  002370                     i2l3422:
  8008                           
  8009                           ;UART.c: 88: c = 0;
  8010  002370  0E00               	movlw	0
  8011  002372  6E0B               	movwf	i2UART_buff_get@c,c
  8012  002374                     i2l757:
  8013                           
  8014                           ;UART.c: 89: }
  8015                           ;UART.c: 90: return (c);
  8016  002374  500B               	movf	i2UART_buff_get@c,w,c
  8017  002376  0012               	return	
  8018  002378  0012               	return		;funcret
  8019  00237A                     __end_ofi2_UART_buff_get:
  8020                           	opt stack 0
  8021                           tosu	equ	0xFFF
  8022                           tosh	equ	0xFFE
  8023                           tosl	equ	0xFFD
  8024                           pclatu	equ	0xFFB
  8025                           pclath	equ	0xFFA
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           intcon	equ	0xFF2
  8033                           intcon2	equ	0xFF1
  8034                           postinc0	equ	0xFEE
  8035                           fsr0h	equ	0xFEA
  8036                           fsr0l	equ	0xFE9
  8037                           wreg	equ	0xFE8
  8038                           fsr1h	equ	0xFE2
  8039                           fsr1l	equ	0xFE1
  8040                           indf2	equ	0xFDF
  8041                           postinc2	equ	0xFDE
  8042                           postdec2	equ	0xFDD
  8043                           plusw2	equ	0xFDB
  8044                           fsr2h	equ	0xFDA
  8045                           fsr2l	equ	0xFD9
  8046                           status	equ	0xFD8
  8047                           
  8048 ;; *************** function _EUSART1_Receive_ISR *****************
  8049 ;; Defined at:
  8050 ;;		line 139 in file "UART.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;		None
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;  data            1   11[COMRAM] unsigned char 
  8055 ;; Return value:  Size  Location     Type
  8056 ;;		None               void
  8057 ;; Registers used:
  8058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8064 ;;      Params:         0       0       0       0       0       0       0
  8065 ;;      Locals:         1       0       0       0       0       0       0
  8066 ;;      Temps:          0       0       0       0       0       0       0
  8067 ;;      Totals:         1       0       0       0       0       0       0
  8068 ;;Total ram usage:        1 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    2
  8071 ;; This function calls:
  8072 ;;		i2_UART_buff_put
  8073 ;; This function is called by:
  8074 ;;		_INTERRUPT_InterruptManager
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           	psect	text46
  8079  0028CC                     __ptext46:
  8080                           	opt stack 0
  8081  0028CC                     _EUSART1_Receive_ISR:
  8082                           	opt stack 21
  8083                           
  8084                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  8085                           
  8086                           ;incstack = 0
  8087  0028CC  A2AB               	btfss	4011,1,c	;volatile
  8088  0028CE  D002               	goto	i2l788
  8089                           
  8090                           ;UART.c: 143: RC1STAbits.CREN = 0;
  8091  0028D0  98AB               	bcf	4011,4,c	;volatile
  8092                           
  8093                           ;UART.c: 144: RC1STAbits.CREN = 1;
  8094  0028D2  88AB               	bsf	4011,4,c	;volatile
  8095  0028D4                     i2l788:
  8096                           
  8097                           ;UART.c: 145: }
  8098                           ;UART.c: 146: unsigned char data = RCREG1;
  8099  0028D4  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  8100                           
  8101                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  8102  0028D8  0E00               	movlw	low _input_buffer
  8103  0028DA  6E07               	movwf	i2UART_buff_put@_this,c
  8104  0028DC  0E04               	movlw	high _input_buffer
  8105  0028DE  6E08               	movwf	i2UART_buff_put@_this+1,c
  8106  0028E0  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  8107  0028E4  EC9F  F00E         	call	i2_UART_buff_put	;wreg free
  8108  0028E8  0012               	return		;funcret
  8109  0028EA                     __end_of_EUSART1_Receive_ISR:
  8110                           	opt stack 0
  8111                           tosu	equ	0xFFF
  8112                           tosh	equ	0xFFE
  8113                           tosl	equ	0xFFD
  8114                           pclatu	equ	0xFFB
  8115                           pclath	equ	0xFFA
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           intcon	equ	0xFF2
  8123                           intcon2	equ	0xFF1
  8124                           postinc0	equ	0xFEE
  8125                           fsr0h	equ	0xFEA
  8126                           fsr0l	equ	0xFE9
  8127                           wreg	equ	0xFE8
  8128                           fsr1h	equ	0xFE2
  8129                           fsr1l	equ	0xFE1
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           postdec2	equ	0xFDD
  8133                           plusw2	equ	0xFDB
  8134                           fsr2h	equ	0xFDA
  8135                           fsr2l	equ	0xFD9
  8136                           status	equ	0xFD8
  8137                           
  8138 ;; *************** function i2_UART_buff_put *****************
  8139 ;; Defined at:
  8140 ;;		line 68 in file "UART.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8143 ;;		 -> output_buffer(206), input_buffer(206), 
  8144 ;;  c               1    8[COMRAM] const unsigned char 
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;		None
  8147 ;; Return value:  Size  Location     Type
  8148 ;;		None               void
  8149 ;; Registers used:
  8150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8156 ;;      Params:         3       0       0       0       0       0       0
  8157 ;;      Locals:         0       0       0       0       0       0       0
  8158 ;;      Temps:          2       0       0       0       0       0       0
  8159 ;;      Totals:         5       0       0       0       0       0       0
  8160 ;;Total ram usage:        5 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    1
  8163 ;; This function calls:
  8164 ;;		i2_UART_buff_modulo_inc
  8165 ;; This function is called by:
  8166 ;;		_EUSART1_Receive_ISR
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           	psect	text47
  8171  001D3E                     __ptext47:
  8172                           	opt stack 0
  8173  001D3E                     i2_UART_buff_put:
  8174                           	opt stack 21
  8175                           
  8176                           ;UART.c: 69: if (_this->count < 200) {
  8177                           
  8178                           ;incstack = 0
  8179  001D3E  EE20 F0CC          	lfsr	2,204
  8180  001D42  5007               	movf	i2UART_buff_put@_this,w,c
  8181  001D44  26D9               	addwf	fsr2l,f,c
  8182  001D46  5008               	movf	i2UART_buff_put@_this+1,w,c
  8183  001D48  22DA               	addwfc	fsr2h,f,c
  8184  001D4A  0E01               	movlw	1
  8185  001D4C  BEDB               	btfsc	plusw2,7,c
  8186  001D4E  D007               	goto	i2l3402
  8187  001D50  0E01               	movlw	1
  8188  001D52  50DB               	movf	plusw2,w,c
  8189  001D54  E13A               	bnz	i2l3408
  8190  001D56  0EC8               	movlw	200
  8191  001D58  5CDE               	subwf	postinc2,w,c
  8192  001D5A  B0D8               	btfsc	status,0,c
  8193  001D5C  D036               	goto	i2l3408
  8194  001D5E                     i2l3402:
  8195                           
  8196                           ;UART.c: 70: _this->buf[_this->head] = c;
  8197  001D5E  EE20 F0C8          	lfsr	2,200
  8198  001D62  5007               	movf	i2UART_buff_put@_this,w,c
  8199  001D64  26D9               	addwf	fsr2l,f,c
  8200  001D66  5008               	movf	i2UART_buff_put@_this+1,w,c
  8201  001D68  22DA               	addwfc	fsr2h,f,c
  8202  001D6A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8203  001D6E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8204  001D72  500A               	movf	??i2_UART_buff_put,w,c
  8205  001D74  2407               	addwf	i2UART_buff_put@_this,w,c
  8206  001D76  6ED9               	movwf	fsr2l,c
  8207  001D78  500B               	movf	??i2_UART_buff_put+1,w,c
  8208  001D7A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8209  001D7C  6EDA               	movwf	fsr2h,c
  8210  001D7E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8211                           
  8212                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8213  001D82  EE20 F0C8          	lfsr	2,200
  8214  001D86  5007               	movf	i2UART_buff_put@_this,w,c
  8215  001D88  26D9               	addwf	fsr2l,f,c
  8216  001D8A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8217  001D8C  22DA               	addwfc	fsr2h,f,c
  8218  001D8E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8219  001D92  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8220  001D96  0E00               	movlw	0
  8221  001D98  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8222  001D9A  0EC8               	movlw	200
  8223  001D9C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8224  001D9E  ECF3  F013         	call	i2_UART_buff_modulo_inc	;wreg free
  8225  001DA2  EE20 F0C8          	lfsr	2,200
  8226  001DA6  5007               	movf	i2UART_buff_put@_this,w,c
  8227  001DA8  26D9               	addwf	fsr2l,f,c
  8228  001DAA  5008               	movf	i2UART_buff_put@_this+1,w,c
  8229  001DAC  22DA               	addwfc	fsr2h,f,c
  8230  001DAE  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8231  001DB2  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8232                           
  8233                           ;UART.c: 72: ++_this->count;
  8234  001DB6  EE20 F0CC          	lfsr	2,204
  8235  001DBA  5007               	movf	i2UART_buff_put@_this,w,c
  8236  001DBC  26D9               	addwf	fsr2l,f,c
  8237  001DBE  5008               	movf	i2UART_buff_put@_this+1,w,c
  8238  001DC0  22DA               	addwfc	fsr2h,f,c
  8239  001DC2  2ADE               	incf	postinc2,f,c
  8240  001DC4  0E00               	movlw	0
  8241  001DC6  22DD               	addwfc	postdec2,f,c
  8242                           
  8243                           ;UART.c: 73: } else {
  8244  001DC8  0012               	return	
  8245  001DCA                     i2l3408:
  8246                           
  8247                           ;UART.c: 74: _this->buf[_this->head] = c;
  8248  001DCA  EE20 F0C8          	lfsr	2,200
  8249  001DCE  5007               	movf	i2UART_buff_put@_this,w,c
  8250  001DD0  26D9               	addwf	fsr2l,f,c
  8251  001DD2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8252  001DD4  22DA               	addwfc	fsr2h,f,c
  8253  001DD6  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8254  001DDA  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8255  001DDE  500A               	movf	??i2_UART_buff_put,w,c
  8256  001DE0  2407               	addwf	i2UART_buff_put@_this,w,c
  8257  001DE2  6ED9               	movwf	fsr2l,c
  8258  001DE4  500B               	movf	??i2_UART_buff_put+1,w,c
  8259  001DE6  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8260  001DE8  6EDA               	movwf	fsr2h,c
  8261  001DEA  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8262                           
  8263                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8264  001DEE  EE20 F0C8          	lfsr	2,200
  8265  001DF2  5007               	movf	i2UART_buff_put@_this,w,c
  8266  001DF4  26D9               	addwf	fsr2l,f,c
  8267  001DF6  5008               	movf	i2UART_buff_put@_this+1,w,c
  8268  001DF8  22DA               	addwfc	fsr2h,f,c
  8269  001DFA  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8270  001DFE  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8271  001E02  0E00               	movlw	0
  8272  001E04  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8273  001E06  0EC8               	movlw	200
  8274  001E08  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8275  001E0A  ECF3  F013         	call	i2_UART_buff_modulo_inc	;wreg free
  8276  001E0E  EE20 F0C8          	lfsr	2,200
  8277  001E12  5007               	movf	i2UART_buff_put@_this,w,c
  8278  001E14  26D9               	addwf	fsr2l,f,c
  8279  001E16  5008               	movf	i2UART_buff_put@_this+1,w,c
  8280  001E18  22DA               	addwfc	fsr2h,f,c
  8281  001E1A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8282  001E1E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8283                           
  8284                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8285  001E22  EE20 F0CA          	lfsr	2,202
  8286  001E26  5007               	movf	i2UART_buff_put@_this,w,c
  8287  001E28  26D9               	addwf	fsr2l,f,c
  8288  001E2A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8289  001E2C  22DA               	addwfc	fsr2h,f,c
  8290  001E2E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8291  001E32  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8292  001E36  0E00               	movlw	0
  8293  001E38  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8294  001E3A  0EC8               	movlw	200
  8295  001E3C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8296  001E3E  ECF3  F013         	call	i2_UART_buff_modulo_inc	;wreg free
  8297  001E42  EE20 F0CA          	lfsr	2,202
  8298  001E46  5007               	movf	i2UART_buff_put@_this,w,c
  8299  001E48  26D9               	addwf	fsr2l,f,c
  8300  001E4A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8301  001E4C  22DA               	addwfc	fsr2h,f,c
  8302  001E4E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8303  001E52  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8304  001E56  0012               	return	
  8305  001E58  0012               	return		;funcret
  8306  001E5A                     __end_ofi2_UART_buff_put:
  8307                           	opt stack 0
  8308                           tosu	equ	0xFFF
  8309                           tosh	equ	0xFFE
  8310                           tosl	equ	0xFFD
  8311                           pclatu	equ	0xFFB
  8312                           pclath	equ	0xFFA
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           intcon	equ	0xFF2
  8320                           intcon2	equ	0xFF1
  8321                           postinc0	equ	0xFEE
  8322                           fsr0h	equ	0xFEA
  8323                           fsr0l	equ	0xFE9
  8324                           wreg	equ	0xFE8
  8325                           fsr1h	equ	0xFE2
  8326                           fsr1l	equ	0xFE1
  8327                           indf2	equ	0xFDF
  8328                           postinc2	equ	0xFDE
  8329                           postdec2	equ	0xFDD
  8330                           plusw2	equ	0xFDB
  8331                           fsr2h	equ	0xFDA
  8332                           fsr2l	equ	0xFD9
  8333                           status	equ	0xFD8
  8334                           
  8335 ;; *************** function i2_UART_buff_modulo_inc *****************
  8336 ;; Defined at:
  8337 ;;		line 106 in file "UART.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;  value           2    0[COMRAM] const unsigned int 
  8340 ;;  modulus         2    2[COMRAM] const unsigned int 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  2    0[COMRAM] unsigned int 
  8345 ;; Registers used:
  8346 ;;		wreg, status,2, status,0
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8352 ;;      Params:         4       0       0       0       0       0       0
  8353 ;;      Locals:         2       0       0       0       0       0       0
  8354 ;;      Temps:          0       0       0       0       0       0       0
  8355 ;;      Totals:         6       0       0       0       0       0       0
  8356 ;;Total ram usage:        6 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		i2_UART_buff_put
  8362 ;;		i2_UART_buff_get
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text48
  8367  0027E6                     __ptext48:
  8368                           	opt stack 0
  8369  0027E6                     i2_UART_buff_modulo_inc:
  8370                           	opt stack 21
  8371                           
  8372                           ;UART.c: 107: unsigned int my_value = value + 1;
  8373                           
  8374                           ;incstack = 0
  8375  0027E6  0E01               	movlw	1
  8376  0027E8  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  8377  0027EA  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8378  0027EC  0E00               	movlw	0
  8379  0027EE  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  8380  0027F0  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8381                           
  8382                           ;UART.c: 108: if (my_value >= modulus) {
  8383  0027F2  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  8384  0027F4  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  8385  0027F6  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  8386  0027F8  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  8387  0027FA  A0D8               	btfss	status,0,c
  8388  0027FC  D005               	goto	i2l3064
  8389                           
  8390                           ;UART.c: 109: my_value = 0;
  8391  0027FE  0E00               	movlw	0
  8392  002800  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8393  002802  0E00               	movlw	0
  8394  002804  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8395  002806  D000               	goto	i2l3064
  8396  002808                     i2l3064:
  8397                           
  8398                           ;UART.c: 110: }
  8399                           ;UART.c: 111: return (my_value);
  8400  002808  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  8401  00280C  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  8402  002810  0012               	return	
  8403  002812  0012               	return		;funcret
  8404  002814                     __end_ofi2_UART_buff_modulo_inc:
  8405                           	opt stack 0
  8406                           tosu	equ	0xFFF
  8407                           tosh	equ	0xFFE
  8408                           tosl	equ	0xFFD
  8409                           pclatu	equ	0xFFB
  8410                           pclath	equ	0xFFA
  8411                           tblptru	equ	0xFF8
  8412                           tblptrh	equ	0xFF7
  8413                           tblptrl	equ	0xFF6
  8414                           tablat	equ	0xFF5
  8415                           prodh	equ	0xFF4
  8416                           prodl	equ	0xFF3
  8417                           intcon	equ	0xFF2
  8418                           intcon2	equ	0xFF1
  8419                           postinc0	equ	0xFEE
  8420                           fsr0h	equ	0xFEA
  8421                           fsr0l	equ	0xFE9
  8422                           wreg	equ	0xFE8
  8423                           fsr1h	equ	0xFE2
  8424                           fsr1l	equ	0xFE1
  8425                           indf2	equ	0xFDF
  8426                           postinc2	equ	0xFDE
  8427                           postdec2	equ	0xFDD
  8428                           plusw2	equ	0xFDB
  8429                           fsr2h	equ	0xFDA
  8430                           fsr2l	equ	0xFD9
  8431                           status	equ	0xFD8
  8432                           
  8433 ;; *************** function _ADC_ISR *****************
  8434 ;; Defined at:
  8435 ;;		line 82 in file "mcc_generated_files/adc.c"
  8436 ;; Parameters:    Size  Location     Type
  8437 ;;		None
  8438 ;; Auto vars:     Size  Location     Type
  8439 ;;  ADC_Result      2   10[COMRAM] int 
  8440 ;; Return value:  Size  Location     Type
  8441 ;;		None               void
  8442 ;; Registers used:
  8443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8444 ;; Tracked objects:
  8445 ;;		On entry : 0/0
  8446 ;;		On exit  : 0/0
  8447 ;;		Unchanged: 0/0
  8448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8449 ;;      Params:         0       0       0       0       0       0       0
  8450 ;;      Locals:         2       0       0       0       0       0       0
  8451 ;;      Temps:          6       0       0       0       0       0       0
  8452 ;;      Totals:         8       0       0       0       0       0       0
  8453 ;;Total ram usage:        8 bytes
  8454 ;; Hardware stack levels used:    1
  8455 ;; Hardware stack levels required when called:    1
  8456 ;; This function calls:
  8457 ;;		_ADC_GetConversionResult
  8458 ;;		_ADC_StartConversion
  8459 ;;		_Set_4051
  8460 ;; This function is called by:
  8461 ;;		_INTERRUPT_InterruptManager
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           	psect	text49
  8466  000C56                     __ptext49:
  8467                           	opt stack 0
  8468  000C56                     _ADC_ISR:
  8469                           	opt stack 22
  8470                           
  8471                           ;adc.c: 85: PIR1bits.ADIF = 0;
  8472                           
  8473                           ;incstack = 0
  8474  000C56  9C9E               	bcf	3998,6,c	;volatile
  8475                           
  8476                           ;adc.c: 86: int ADC_Result = 0;
  8477  000C58  0E00               	movlw	0
  8478  000C5A  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
  8479  000C5C  0E00               	movlw	0
  8480  000C5E  6E0B               	movwf	ADC_ISR@ADC_Result,c
  8481                           
  8482                           ;adc.c: 87: if (Temp_Aquire){
  8483  000C60  503A               	movf	_Temp_Aquire,w,c
  8484  000C62  B4D8               	btfsc	status,2,c
  8485  000C64  D116               	goto	i2l3502
  8486                           
  8487                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  8488  000C66  ECC0  F014         	call	_ADC_GetConversionResult	;wreg free
  8489  000C6A  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  8490  000C6E  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  8491                           
  8492                           ;adc.c: 90: switch ( ADC_Buffer_Point )
  8493  000C72  D0E4               	goto	i2l3498
  8494  000C74                     i2l3436:
  8495                           
  8496                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8497  000C74  90D8               	bcf	status,0,c
  8498  000C76  342D               	rlcf	_ADC_Buffer_Point,w,c
  8499  000C78  6ED9               	movwf	fsr2l,c
  8500  000C7A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8501  000C7C  6EDA               	movwf	fsr2h,c
  8502  000C7E  0EBA               	movlw	low _Temp_Adc
  8503  000C80  26D9               	addwf	fsr2l,f,c
  8504  000C82  0E00               	movlw	high _Temp_Adc
  8505  000C84  22DA               	addwfc	fsr2h,f,c
  8506  000C86  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8507  000C8A  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8508                           
  8509                           ;adc.c: 94: Set_4051(1);
  8510  000C8E  0E00               	movlw	0
  8511  000C90  6E02               	movwf	Set_4051@Channel+1,c
  8512  000C92  0E01               	movlw	1
  8513  000C94  6E01               	movwf	Set_4051@Channel,c
  8514  000C96  EC48  F013         	call	_Set_4051	;wreg free
  8515                           
  8516                           ;adc.c: 95: ADC_StartConversion(Temp1);
  8517  000C9A  0E0E               	movlw	14
  8518  000C9C  EC83  F014         	call	_ADC_StartConversion
  8519                           
  8520                           ;adc.c: 96: break;
  8521  000CA0  D0F5               	goto	i2l3500
  8522  000CA2                     i2l3442:
  8523                           
  8524                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8525  000CA2  90D8               	bcf	status,0,c
  8526  000CA4  342D               	rlcf	_ADC_Buffer_Point,w,c
  8527  000CA6  6ED9               	movwf	fsr2l,c
  8528  000CA8  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8529  000CAA  6EDA               	movwf	fsr2h,c
  8530  000CAC  0EBA               	movlw	low _Temp_Adc
  8531  000CAE  26D9               	addwf	fsr2l,f,c
  8532  000CB0  0E00               	movlw	high _Temp_Adc
  8533  000CB2  22DA               	addwfc	fsr2h,f,c
  8534  000CB4  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8535  000CB8  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8536                           
  8537                           ;adc.c: 99: Set_4051(2);
  8538  000CBC  0E00               	movlw	0
  8539  000CBE  6E02               	movwf	Set_4051@Channel+1,c
  8540  000CC0  0E02               	movlw	2
  8541  000CC2  6E01               	movwf	Set_4051@Channel,c
  8542  000CC4  EC48  F013         	call	_Set_4051	;wreg free
  8543                           
  8544                           ;adc.c: 100: ADC_StartConversion(Temp1);
  8545  000CC8  0E0E               	movlw	14
  8546  000CCA  EC83  F014         	call	_ADC_StartConversion
  8547                           
  8548                           ;adc.c: 101: break;
  8549  000CCE  D0DE               	goto	i2l3500
  8550  000CD0                     i2l3448:
  8551                           
  8552                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8553  000CD0  90D8               	bcf	status,0,c
  8554  000CD2  342D               	rlcf	_ADC_Buffer_Point,w,c
  8555  000CD4  6ED9               	movwf	fsr2l,c
  8556  000CD6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8557  000CD8  6EDA               	movwf	fsr2h,c
  8558  000CDA  0EBA               	movlw	low _Temp_Adc
  8559  000CDC  26D9               	addwf	fsr2l,f,c
  8560  000CDE  0E00               	movlw	high _Temp_Adc
  8561  000CE0  22DA               	addwfc	fsr2h,f,c
  8562  000CE2  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8563  000CE6  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8564                           
  8565                           ;adc.c: 104: Set_4051(3);
  8566  000CEA  0E00               	movlw	0
  8567  000CEC  6E02               	movwf	Set_4051@Channel+1,c
  8568  000CEE  0E03               	movlw	3
  8569  000CF0  6E01               	movwf	Set_4051@Channel,c
  8570  000CF2  EC48  F013         	call	_Set_4051	;wreg free
  8571                           
  8572                           ;adc.c: 105: ADC_StartConversion(Temp1);
  8573  000CF6  0E0E               	movlw	14
  8574  000CF8  EC83  F014         	call	_ADC_StartConversion
  8575                           
  8576                           ;adc.c: 106: break;
  8577  000CFC  D0C7               	goto	i2l3500
  8578  000CFE                     i2l3454:
  8579                           
  8580                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8581  000CFE  90D8               	bcf	status,0,c
  8582  000D00  342D               	rlcf	_ADC_Buffer_Point,w,c
  8583  000D02  6ED9               	movwf	fsr2l,c
  8584  000D04  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8585  000D06  6EDA               	movwf	fsr2h,c
  8586  000D08  0EBA               	movlw	low _Temp_Adc
  8587  000D0A  26D9               	addwf	fsr2l,f,c
  8588  000D0C  0E00               	movlw	high _Temp_Adc
  8589  000D0E  22DA               	addwfc	fsr2h,f,c
  8590  000D10  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8591  000D14  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8592                           
  8593                           ;adc.c: 109: Set_4051(4);
  8594  000D18  0E00               	movlw	0
  8595  000D1A  6E02               	movwf	Set_4051@Channel+1,c
  8596  000D1C  0E04               	movlw	4
  8597  000D1E  6E01               	movwf	Set_4051@Channel,c
  8598  000D20  EC48  F013         	call	_Set_4051	;wreg free
  8599                           
  8600                           ;adc.c: 110: ADC_StartConversion(Temp1);
  8601  000D24  0E0E               	movlw	14
  8602  000D26  EC83  F014         	call	_ADC_StartConversion
  8603                           
  8604                           ;adc.c: 111: break;
  8605  000D2A  D0B0               	goto	i2l3500
  8606  000D2C                     i2l3460:
  8607                           
  8608                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8609  000D2C  90D8               	bcf	status,0,c
  8610  000D2E  342D               	rlcf	_ADC_Buffer_Point,w,c
  8611  000D30  6ED9               	movwf	fsr2l,c
  8612  000D32  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8613  000D34  6EDA               	movwf	fsr2h,c
  8614  000D36  0EBA               	movlw	low _Temp_Adc
  8615  000D38  26D9               	addwf	fsr2l,f,c
  8616  000D3A  0E00               	movlw	high _Temp_Adc
  8617  000D3C  22DA               	addwfc	fsr2h,f,c
  8618  000D3E  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8619  000D42  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8620                           
  8621                           ;adc.c: 114: Set_4051(5);
  8622  000D46  0E00               	movlw	0
  8623  000D48  6E02               	movwf	Set_4051@Channel+1,c
  8624  000D4A  0E05               	movlw	5
  8625  000D4C  6E01               	movwf	Set_4051@Channel,c
  8626  000D4E  EC48  F013         	call	_Set_4051	;wreg free
  8627                           
  8628                           ;adc.c: 115: ADC_StartConversion(Temp1);
  8629  000D52  0E0E               	movlw	14
  8630  000D54  EC83  F014         	call	_ADC_StartConversion
  8631                           
  8632                           ;adc.c: 116: break;
  8633  000D58  D099               	goto	i2l3500
  8634  000D5A                     i2l3466:
  8635                           
  8636                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8637  000D5A  90D8               	bcf	status,0,c
  8638  000D5C  342D               	rlcf	_ADC_Buffer_Point,w,c
  8639  000D5E  6ED9               	movwf	fsr2l,c
  8640  000D60  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8641  000D62  6EDA               	movwf	fsr2h,c
  8642  000D64  0EBA               	movlw	low _Temp_Adc
  8643  000D66  26D9               	addwf	fsr2l,f,c
  8644  000D68  0E00               	movlw	high _Temp_Adc
  8645  000D6A  22DA               	addwfc	fsr2h,f,c
  8646  000D6C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8647  000D70  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8648                           
  8649                           ;adc.c: 119: Set_4051(6);
  8650  000D74  0E00               	movlw	0
  8651  000D76  6E02               	movwf	Set_4051@Channel+1,c
  8652  000D78  0E06               	movlw	6
  8653  000D7A  6E01               	movwf	Set_4051@Channel,c
  8654  000D7C  EC48  F013         	call	_Set_4051	;wreg free
  8655                           
  8656                           ;adc.c: 120: ADC_StartConversion(Temp1);
  8657  000D80  0E0E               	movlw	14
  8658  000D82  EC83  F014         	call	_ADC_StartConversion
  8659                           
  8660                           ;adc.c: 121: break;
  8661  000D86  D082               	goto	i2l3500
  8662  000D88                     i2l3472:
  8663                           
  8664                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8665  000D88  90D8               	bcf	status,0,c
  8666  000D8A  342D               	rlcf	_ADC_Buffer_Point,w,c
  8667  000D8C  6ED9               	movwf	fsr2l,c
  8668  000D8E  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8669  000D90  6EDA               	movwf	fsr2h,c
  8670  000D92  0EBA               	movlw	low _Temp_Adc
  8671  000D94  26D9               	addwf	fsr2l,f,c
  8672  000D96  0E00               	movlw	high _Temp_Adc
  8673  000D98  22DA               	addwfc	fsr2h,f,c
  8674  000D9A  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8675  000D9E  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8676                           
  8677                           ;adc.c: 124: Set_4051(7);
  8678  000DA2  0E00               	movlw	0
  8679  000DA4  6E02               	movwf	Set_4051@Channel+1,c
  8680  000DA6  0E07               	movlw	7
  8681  000DA8  6E01               	movwf	Set_4051@Channel,c
  8682  000DAA  EC48  F013         	call	_Set_4051	;wreg free
  8683                           
  8684                           ;adc.c: 125: ADC_StartConversion(Temp1);
  8685  000DAE  0E0E               	movlw	14
  8686  000DB0  EC83  F014         	call	_ADC_StartConversion
  8687                           
  8688                           ;adc.c: 126: break;
  8689  000DB4  D06B               	goto	i2l3500
  8690  000DB6                     i2l3478:
  8691                           
  8692                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8693  000DB6  90D8               	bcf	status,0,c
  8694  000DB8  342D               	rlcf	_ADC_Buffer_Point,w,c
  8695  000DBA  6ED9               	movwf	fsr2l,c
  8696  000DBC  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8697  000DBE  6EDA               	movwf	fsr2h,c
  8698  000DC0  0EBA               	movlw	low _Temp_Adc
  8699  000DC2  26D9               	addwf	fsr2l,f,c
  8700  000DC4  0E00               	movlw	high _Temp_Adc
  8701  000DC6  22DA               	addwfc	fsr2h,f,c
  8702  000DC8  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8703  000DCC  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8704                           
  8705                           ;adc.c: 129: Set_4051(0);
  8706  000DD0  0E00               	movlw	0
  8707  000DD2  6E02               	movwf	Set_4051@Channel+1,c
  8708  000DD4  0E00               	movlw	0
  8709  000DD6  6E01               	movwf	Set_4051@Channel,c
  8710  000DD8  EC48  F013         	call	_Set_4051	;wreg free
  8711                           
  8712                           ;adc.c: 130: ADC_StartConversion(Temp1);
  8713  000DDC  0E0E               	movlw	14
  8714  000DDE  EC83  F014         	call	_ADC_StartConversion
  8715                           
  8716                           ;adc.c: 131: break;
  8717  000DE2  D054               	goto	i2l3500
  8718  000DE4                     i2l3484:
  8719                           
  8720                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8721  000DE4  90D8               	bcf	status,0,c
  8722  000DE6  342D               	rlcf	_ADC_Buffer_Point,w,c
  8723  000DE8  6ED9               	movwf	fsr2l,c
  8724  000DEA  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8725  000DEC  6EDA               	movwf	fsr2h,c
  8726  000DEE  0EBA               	movlw	low _Temp_Adc
  8727  000DF0  26D9               	addwf	fsr2l,f,c
  8728  000DF2  0E00               	movlw	high _Temp_Adc
  8729  000DF4  22DA               	addwfc	fsr2h,f,c
  8730  000DF6  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8731  000DFA  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8732                           
  8733                           ;adc.c: 134: Set_4051(1);
  8734  000DFE  0E00               	movlw	0
  8735  000E00  6E02               	movwf	Set_4051@Channel+1,c
  8736  000E02  0E01               	movlw	1
  8737  000E04  6E01               	movwf	Set_4051@Channel,c
  8738  000E06  EC48  F013         	call	_Set_4051	;wreg free
  8739                           
  8740                           ;adc.c: 135: ADC_StartConversion(Temp2);
  8741  000E0A  0E14               	movlw	20
  8742  000E0C  EC83  F014         	call	_ADC_StartConversion
  8743                           
  8744                           ;adc.c: 136: break;
  8745  000E10  D03D               	goto	i2l3500
  8746  000E12                     i2l3490:
  8747                           
  8748                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8749  000E12  90D8               	bcf	status,0,c
  8750  000E14  342D               	rlcf	_ADC_Buffer_Point,w,c
  8751  000E16  6ED9               	movwf	fsr2l,c
  8752  000E18  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8753  000E1A  6EDA               	movwf	fsr2h,c
  8754  000E1C  0EBA               	movlw	low _Temp_Adc
  8755  000E1E  26D9               	addwf	fsr2l,f,c
  8756  000E20  0E00               	movlw	high _Temp_Adc
  8757  000E22  22DA               	addwfc	fsr2h,f,c
  8758  000E24  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8759  000E28  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8760                           
  8761                           ;adc.c: 139: Temp_Aquire = 0;
  8762  000E2C  0E00               	movlw	0
  8763  000E2E  6E3A               	movwf	_Temp_Aquire,c
  8764                           
  8765                           ;adc.c: 140: Temp_Done = 1;
  8766  000E30  0E00               	movlw	0
  8767  000E32  0100               	movlb	0	; () banked
  8768  000E34  6FA7               	movwf	(_Temp_Done+1)& (0+255),b
  8769  000E36  0E01               	movlw	1
  8770  000E38  6FA6               	movwf	_Temp_Done& (0+255),b
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;adc.c: 142: }
  8774                           
  8775                           ;adc.c: 141: break;
  8776  000E3A  D028               	goto	i2l3500
  8777  000E3C                     i2l3498:
  8778  000E3C  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  8779  000E40  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  8780                           
  8781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8782                           ; Switch size 1, requested type "space"
  8783                           ; Number of cases is 1, Range of values is 0 to 0
  8784                           ; switch strategies available:
  8785                           ; Name         Instructions Cycles
  8786                           ; simple_byte            4     3 (average)
  8787                           ;	Chosen strategy is simple_byte
  8788  000E44  5006               	movf	??_ADC_ISR+1,w,c
  8789  000E46  0A00               	xorlw	0	; case 0
  8790  000E48  A4D8               	btfss	status,2,c
  8791  000E4A  D020               	goto	i2l3500
  8792                           
  8793                           ; Switch size 1, requested type "space"
  8794                           ; Number of cases is 10, Range of values is 0 to 9
  8795                           ; switch strategies available:
  8796                           ; Name         Instructions Cycles
  8797                           ; simple_byte           31    16 (average)
  8798                           ;	Chosen strategy is simple_byte
  8799  000E4C  5005               	movf	??_ADC_ISR,w,c
  8800  000E4E  0A00               	xorlw	0	; case 0
  8801  000E50  B4D8               	btfsc	status,2,c
  8802  000E52  D710               	goto	i2l3436
  8803  000E54  0A01               	xorlw	1	; case 1
  8804  000E56  B4D8               	btfsc	status,2,c
  8805  000E58  D724               	goto	i2l3442
  8806  000E5A  0A03               	xorlw	3	; case 2
  8807  000E5C  B4D8               	btfsc	status,2,c
  8808  000E5E  D738               	goto	i2l3448
  8809  000E60  0A01               	xorlw	1	; case 3
  8810  000E62  B4D8               	btfsc	status,2,c
  8811  000E64  D74C               	goto	i2l3454
  8812  000E66  0A07               	xorlw	7	; case 4
  8813  000E68  B4D8               	btfsc	status,2,c
  8814  000E6A  D760               	goto	i2l3460
  8815  000E6C  0A01               	xorlw	1	; case 5
  8816  000E6E  B4D8               	btfsc	status,2,c
  8817  000E70  D774               	goto	i2l3466
  8818  000E72  0A03               	xorlw	3	; case 6
  8819  000E74  B4D8               	btfsc	status,2,c
  8820  000E76  D788               	goto	i2l3472
  8821  000E78  0A01               	xorlw	1	; case 7
  8822  000E7A  B4D8               	btfsc	status,2,c
  8823  000E7C  D79C               	goto	i2l3478
  8824  000E7E  0A0F               	xorlw	15	; case 8
  8825  000E80  B4D8               	btfsc	status,2,c
  8826  000E82  D7B0               	goto	i2l3484
  8827  000E84  0A01               	xorlw	1	; case 9
  8828  000E86  B4D8               	btfsc	status,2,c
  8829  000E88  D7C4               	goto	i2l3490
  8830  000E8A  D000               	goto	i2l3500
  8831  000E8C                     i2l3500:
  8832                           
  8833                           ;adc.c: 143: ADC_Buffer_Point++;
  8834  000E8C  4A2D               	infsnz	_ADC_Buffer_Point,f,c
  8835  000E8E  2A2E               	incf	_ADC_Buffer_Point+1,f,c
  8836  000E90  D000               	goto	i2l3502
  8837  000E92                     i2l3502:
  8838                           
  8839                           ;adc.c: 144: }
  8840                           ;adc.c: 145: if (Volt_Aquire){
  8841  000E92  503B               	movf	_Volt_Aquire,w,c
  8842  000E94  B4D8               	btfsc	status,2,c
  8843  000E96  0012               	return	
  8844                           
  8845                           ;adc.c: 147: ADC_Result = ADC_GetConversionResult();
  8846  000E98  ECC0  F014         	call	_ADC_GetConversionResult	;wreg free
  8847  000E9C  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  8848  000EA0  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  8849                           
  8850                           ;adc.c: 148: switch ( ADC_Buffer_Point )
  8851  000EA4  D176               	goto	i2l3550
  8852  000EA6                     i2l3506:
  8853                           
  8854                           ;adc.c: 151: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8855  000EA6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  8856  000EAA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  8857  000EAE  0E00               	movlw	0
  8858  000EB0  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  8859  000EB2  0EFF               	movlw	255
  8860  000EB4  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  8861  000EB6  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  8862  000EB8  0E60               	movlw	low _Battery_Adc
  8863  000EBA  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  8864  000EBC  0E00               	movlw	high _Battery_Adc
  8865  000EBE  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  8866  000EC0  90D8               	bcf	status,0,c
  8867  000EC2  342D               	rlcf	_ADC_Buffer_Point,w,c
  8868  000EC4  6ED9               	movwf	fsr2l,c
  8869  000EC6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8870  000EC8  6EDA               	movwf	fsr2h,c
  8871  000ECA  90D8               	bcf	status,0,c
  8872  000ECC  36D9               	rlcf	fsr2l,f,c
  8873  000ECE  36DA               	rlcf	fsr2h,f,c
  8874  000ED0  5009               	movf	??_ADC_ISR+4,w,c
  8875  000ED2  26D9               	addwf	fsr2l,f,c
  8876  000ED4  500A               	movf	??_ADC_ISR+5,w,c
  8877  000ED6  22DA               	addwfc	fsr2h,f,c
  8878  000ED8  C005  FFDE         	movff	??_ADC_ISR,postinc2
  8879  000EDC  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  8880  000EE0  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  8881  000EE4  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  8882                           
  8883                           ;adc.c: 152: ADC_StartConversion(Battery2);
  8884  000EE8  0E03               	movlw	3
  8885  000EEA  EC83  F014         	call	_ADC_StartConversion
  8886                           
  8887                           ;adc.c: 153: break;
  8888  000EEE  D179               	goto	i2l3552
  8889  000EF0                     i2l3510:
  8890                           
  8891                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8892  000EF0  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  8893  000EF4  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  8894  000EF8  0E00               	movlw	0
  8895  000EFA  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  8896  000EFC  0EFF               	movlw	255
  8897  000EFE  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  8898  000F00  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  8899  000F02  0E60               	movlw	low _Battery_Adc
  8900  000F04  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  8901  000F06  0E00               	movlw	high _Battery_Adc
  8902  000F08  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  8903  000F0A  90D8               	bcf	status,0,c
  8904  000F0C  342D               	rlcf	_ADC_Buffer_Point,w,c
  8905  000F0E  6ED9               	movwf	fsr2l,c
  8906  000F10  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8907  000F12  6EDA               	movwf	fsr2h,c
  8908  000F14  90D8               	bcf	status,0,c
  8909  000F16  36D9               	rlcf	fsr2l,f,c
  8910  000F18  36DA               	rlcf	fsr2h,f,c
  8911  000F1A  5009               	movf	??_ADC_ISR+4,w,c
  8912  000F1C  26D9               	addwf	fsr2l,f,c
  8913  000F1E  500A               	movf	??_ADC_ISR+5,w,c
  8914  000F20  22DA               	addwfc	fsr2h,f,c
  8915  000F22  C005  FFDE         	movff	??_ADC_ISR,postinc2
  8916  000F26  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  8917  000F2A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  8918  000F2E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  8919                           
  8920                           ;adc.c: 156: ADC_StartConversion(Battery3);
  8921  000F32  0E04               	movlw	4
  8922  000F34  EC83  F014         	call	_ADC_StartConversion
  8923                           
  8924                           ;adc.c: 157: break;
  8925  000F38  D154               	goto	i2l3552
  8926  000F3A                     i2l3514:
  8927                           
  8928                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8929  000F3A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  8930  000F3E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  8931  000F42  0E00               	movlw	0
  8932  000F44  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  8933  000F46  0EFF               	movlw	255
  8934  000F48  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  8935  000F4A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  8936  000F4C  0E60               	movlw	low _Battery_Adc
  8937  000F4E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  8938  000F50  0E00               	movlw	high _Battery_Adc
  8939  000F52  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  8940  000F54  90D8               	bcf	status,0,c
  8941  000F56  342D               	rlcf	_ADC_Buffer_Point,w,c
  8942  000F58  6ED9               	movwf	fsr2l,c
  8943  000F5A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8944  000F5C  6EDA               	movwf	fsr2h,c
  8945  000F5E  90D8               	bcf	status,0,c
  8946  000F60  36D9               	rlcf	fsr2l,f,c
  8947  000F62  36DA               	rlcf	fsr2h,f,c
  8948  000F64  5009               	movf	??_ADC_ISR+4,w,c
  8949  000F66  26D9               	addwf	fsr2l,f,c
  8950  000F68  500A               	movf	??_ADC_ISR+5,w,c
  8951  000F6A  22DA               	addwfc	fsr2h,f,c
  8952  000F6C  C005  FFDE         	movff	??_ADC_ISR,postinc2
  8953  000F70  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  8954  000F74  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  8955  000F78  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  8956                           
  8957                           ;adc.c: 160: ADC_StartConversion(Battery4);
  8958  000F7C  0E05               	movlw	5
  8959  000F7E  EC83  F014         	call	_ADC_StartConversion
  8960                           
  8961                           ;adc.c: 161: break;
  8962  000F82  D12F               	goto	i2l3552
  8963  000F84                     i2l3518:
  8964                           
  8965                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8966  000F84  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  8967  000F88  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  8968  000F8C  0E00               	movlw	0
  8969  000F8E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  8970  000F90  0EFF               	movlw	255
  8971  000F92  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  8972  000F94  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  8973  000F96  0E60               	movlw	low _Battery_Adc
  8974  000F98  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  8975  000F9A  0E00               	movlw	high _Battery_Adc
  8976  000F9C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  8977  000F9E  90D8               	bcf	status,0,c
  8978  000FA0  342D               	rlcf	_ADC_Buffer_Point,w,c
  8979  000FA2  6ED9               	movwf	fsr2l,c
  8980  000FA4  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  8981  000FA6  6EDA               	movwf	fsr2h,c
  8982  000FA8  90D8               	bcf	status,0,c
  8983  000FAA  36D9               	rlcf	fsr2l,f,c
  8984  000FAC  36DA               	rlcf	fsr2h,f,c
  8985  000FAE  5009               	movf	??_ADC_ISR+4,w,c
  8986  000FB0  26D9               	addwf	fsr2l,f,c
  8987  000FB2  500A               	movf	??_ADC_ISR+5,w,c
  8988  000FB4  22DA               	addwfc	fsr2h,f,c
  8989  000FB6  C005  FFDE         	movff	??_ADC_ISR,postinc2
  8990  000FBA  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  8991  000FBE  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  8992  000FC2  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  8993                           
  8994                           ;adc.c: 164: ADC_StartConversion(Battery5);
  8995  000FC6  0E18               	movlw	24
  8996  000FC8  EC83  F014         	call	_ADC_StartConversion
  8997                           
  8998                           ;adc.c: 165: break;
  8999  000FCC  D10A               	goto	i2l3552
  9000  000FCE                     i2l3522:
  9001                           
  9002                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9003  000FCE  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9004  000FD2  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9005  000FD6  0E00               	movlw	0
  9006  000FD8  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9007  000FDA  0EFF               	movlw	255
  9008  000FDC  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9009  000FDE  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9010  000FE0  0E60               	movlw	low _Battery_Adc
  9011  000FE2  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9012  000FE4  0E00               	movlw	high _Battery_Adc
  9013  000FE6  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9014  000FE8  90D8               	bcf	status,0,c
  9015  000FEA  342D               	rlcf	_ADC_Buffer_Point,w,c
  9016  000FEC  6ED9               	movwf	fsr2l,c
  9017  000FEE  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9018  000FF0  6EDA               	movwf	fsr2h,c
  9019  000FF2  90D8               	bcf	status,0,c
  9020  000FF4  36D9               	rlcf	fsr2l,f,c
  9021  000FF6  36DA               	rlcf	fsr2h,f,c
  9022  000FF8  5009               	movf	??_ADC_ISR+4,w,c
  9023  000FFA  26D9               	addwf	fsr2l,f,c
  9024  000FFC  500A               	movf	??_ADC_ISR+5,w,c
  9025  000FFE  22DA               	addwfc	fsr2h,f,c
  9026  001000  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9027  001004  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9028  001008  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9029  00100C  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9030                           
  9031                           ;adc.c: 168: ADC_StartConversion(Battery6);
  9032  001010  0E1A               	movlw	26
  9033  001012  EC83  F014         	call	_ADC_StartConversion
  9034                           
  9035                           ;adc.c: 169: break;
  9036  001016  D0E5               	goto	i2l3552
  9037  001018                     i2l3526:
  9038                           
  9039                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9040  001018  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9041  00101C  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9042  001020  0E00               	movlw	0
  9043  001022  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9044  001024  0EFF               	movlw	255
  9045  001026  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9046  001028  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9047  00102A  0E60               	movlw	low _Battery_Adc
  9048  00102C  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9049  00102E  0E00               	movlw	high _Battery_Adc
  9050  001030  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9051  001032  90D8               	bcf	status,0,c
  9052  001034  342D               	rlcf	_ADC_Buffer_Point,w,c
  9053  001036  6ED9               	movwf	fsr2l,c
  9054  001038  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9055  00103A  6EDA               	movwf	fsr2h,c
  9056  00103C  90D8               	bcf	status,0,c
  9057  00103E  36D9               	rlcf	fsr2l,f,c
  9058  001040  36DA               	rlcf	fsr2h,f,c
  9059  001042  5009               	movf	??_ADC_ISR+4,w,c
  9060  001044  26D9               	addwf	fsr2l,f,c
  9061  001046  500A               	movf	??_ADC_ISR+5,w,c
  9062  001048  22DA               	addwfc	fsr2h,f,c
  9063  00104A  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9064  00104E  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9065  001052  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9066  001056  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9067                           
  9068                           ;adc.c: 172: ADC_StartConversion(Battery7);
  9069  00105A  0E1B               	movlw	27
  9070  00105C  EC83  F014         	call	_ADC_StartConversion
  9071                           
  9072                           ;adc.c: 173: break;
  9073  001060  D0C0               	goto	i2l3552
  9074  001062                     i2l3530:
  9075                           
  9076                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9077  001062  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9078  001066  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9079  00106A  0E00               	movlw	0
  9080  00106C  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9081  00106E  0EFF               	movlw	255
  9082  001070  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9083  001072  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9084  001074  0E60               	movlw	low _Battery_Adc
  9085  001076  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9086  001078  0E00               	movlw	high _Battery_Adc
  9087  00107A  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9088  00107C  90D8               	bcf	status,0,c
  9089  00107E  342D               	rlcf	_ADC_Buffer_Point,w,c
  9090  001080  6ED9               	movwf	fsr2l,c
  9091  001082  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9092  001084  6EDA               	movwf	fsr2h,c
  9093  001086  90D8               	bcf	status,0,c
  9094  001088  36D9               	rlcf	fsr2l,f,c
  9095  00108A  36DA               	rlcf	fsr2h,f,c
  9096  00108C  5009               	movf	??_ADC_ISR+4,w,c
  9097  00108E  26D9               	addwf	fsr2l,f,c
  9098  001090  500A               	movf	??_ADC_ISR+5,w,c
  9099  001092  22DA               	addwfc	fsr2h,f,c
  9100  001094  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9101  001098  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9102  00109C  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9103  0010A0  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9104                           
  9105                           ;adc.c: 176: ADC_StartConversion(Battery8);
  9106  0010A4  0E08               	movlw	8
  9107  0010A6  EC83  F014         	call	_ADC_StartConversion
  9108                           
  9109                           ;adc.c: 177: break;
  9110  0010AA  D09B               	goto	i2l3552
  9111  0010AC                     i2l3534:
  9112                           
  9113                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9114  0010AC  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9115  0010B0  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9116  0010B4  0E00               	movlw	0
  9117  0010B6  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9118  0010B8  0EFF               	movlw	255
  9119  0010BA  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9120  0010BC  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9121  0010BE  0E60               	movlw	low _Battery_Adc
  9122  0010C0  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9123  0010C2  0E00               	movlw	high _Battery_Adc
  9124  0010C4  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9125  0010C6  90D8               	bcf	status,0,c
  9126  0010C8  342D               	rlcf	_ADC_Buffer_Point,w,c
  9127  0010CA  6ED9               	movwf	fsr2l,c
  9128  0010CC  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9129  0010CE  6EDA               	movwf	fsr2h,c
  9130  0010D0  90D8               	bcf	status,0,c
  9131  0010D2  36D9               	rlcf	fsr2l,f,c
  9132  0010D4  36DA               	rlcf	fsr2h,f,c
  9133  0010D6  5009               	movf	??_ADC_ISR+4,w,c
  9134  0010D8  26D9               	addwf	fsr2l,f,c
  9135  0010DA  500A               	movf	??_ADC_ISR+5,w,c
  9136  0010DC  22DA               	addwfc	fsr2h,f,c
  9137  0010DE  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9138  0010E2  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9139  0010E6  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9140  0010EA  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9141                           
  9142                           ;adc.c: 180: ADC_StartConversion(Battery9);
  9143  0010EE  0E0B               	movlw	11
  9144  0010F0  EC83  F014         	call	_ADC_StartConversion
  9145                           
  9146                           ;adc.c: 181: break;
  9147  0010F4  D076               	goto	i2l3552
  9148  0010F6                     i2l3538:
  9149                           
  9150                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9151  0010F6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9152  0010FA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9153  0010FE  0E00               	movlw	0
  9154  001100  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9155  001102  0EFF               	movlw	255
  9156  001104  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9157  001106  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9158  001108  0E60               	movlw	low _Battery_Adc
  9159  00110A  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9160  00110C  0E00               	movlw	high _Battery_Adc
  9161  00110E  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9162  001110  90D8               	bcf	status,0,c
  9163  001112  342D               	rlcf	_ADC_Buffer_Point,w,c
  9164  001114  6ED9               	movwf	fsr2l,c
  9165  001116  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9166  001118  6EDA               	movwf	fsr2h,c
  9167  00111A  90D8               	bcf	status,0,c
  9168  00111C  36D9               	rlcf	fsr2l,f,c
  9169  00111E  36DA               	rlcf	fsr2h,f,c
  9170  001120  5009               	movf	??_ADC_ISR+4,w,c
  9171  001122  26D9               	addwf	fsr2l,f,c
  9172  001124  500A               	movf	??_ADC_ISR+5,w,c
  9173  001126  22DA               	addwfc	fsr2h,f,c
  9174  001128  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9175  00112C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9176  001130  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9177  001134  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9178                           
  9179                           ;adc.c: 184: ADC_StartConversion(Battery10);
  9180  001138  0E0D               	movlw	13
  9181  00113A  EC83  F014         	call	_ADC_StartConversion
  9182                           
  9183                           ;adc.c: 185: break;
  9184  00113E  D051               	goto	i2l3552
  9185  001140                     i2l3542:
  9186                           
  9187                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  9188  001140  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
  9189  001144  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
  9190  001148  0E00               	movlw	0
  9191  00114A  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
  9192  00114C  0EFF               	movlw	255
  9193  00114E  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
  9194  001150  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
  9195  001152  0E60               	movlw	low _Battery_Adc
  9196  001154  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
  9197  001156  0E00               	movlw	high _Battery_Adc
  9198  001158  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
  9199  00115A  90D8               	bcf	status,0,c
  9200  00115C  342D               	rlcf	_ADC_Buffer_Point,w,c
  9201  00115E  6ED9               	movwf	fsr2l,c
  9202  001160  342E               	rlcf	_ADC_Buffer_Point+1,w,c
  9203  001162  6EDA               	movwf	fsr2h,c
  9204  001164  90D8               	bcf	status,0,c
  9205  001166  36D9               	rlcf	fsr2l,f,c
  9206  001168  36DA               	rlcf	fsr2h,f,c
  9207  00116A  5009               	movf	??_ADC_ISR+4,w,c
  9208  00116C  26D9               	addwf	fsr2l,f,c
  9209  00116E  500A               	movf	??_ADC_ISR+5,w,c
  9210  001170  22DA               	addwfc	fsr2h,f,c
  9211  001172  C005  FFDE         	movff	??_ADC_ISR,postinc2
  9212  001176  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
  9213  00117A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
  9214  00117E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
  9215                           
  9216                           ;adc.c: 188: Volt_Aquire = 0;
  9217  001182  0E00               	movlw	0
  9218  001184  6E3B               	movwf	_Volt_Aquire,c
  9219                           
  9220                           ;adc.c: 189: Volt_Done = 1;
  9221  001186  0E00               	movlw	0
  9222  001188  0100               	movlb	0	; () banked
  9223  00118A  6FA9               	movwf	(_Volt_Done+1)& (0+255),b
  9224  00118C  0E01               	movlw	1
  9225  00118E  6FA8               	movwf	_Volt_Done& (0+255),b
  9226                           
  9227                           ; BSR set to: 0
  9228                           ;adc.c: 191: }
  9229                           
  9230                           ;adc.c: 190: break;
  9231  001190  D028               	goto	i2l3552
  9232  001192                     i2l3550:
  9233  001192  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  9234  001196  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  9235                           
  9236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9237                           ; Switch size 1, requested type "space"
  9238                           ; Number of cases is 1, Range of values is 0 to 0
  9239                           ; switch strategies available:
  9240                           ; Name         Instructions Cycles
  9241                           ; simple_byte            4     3 (average)
  9242                           ;	Chosen strategy is simple_byte
  9243  00119A  5006               	movf	??_ADC_ISR+1,w,c
  9244  00119C  0A00               	xorlw	0	; case 0
  9245  00119E  A4D8               	btfss	status,2,c
  9246  0011A0  D020               	goto	i2l3552
  9247                           
  9248                           ; Switch size 1, requested type "space"
  9249                           ; Number of cases is 10, Range of values is 0 to 9
  9250                           ; switch strategies available:
  9251                           ; Name         Instructions Cycles
  9252                           ; simple_byte           31    16 (average)
  9253                           ;	Chosen strategy is simple_byte
  9254  0011A2  5005               	movf	??_ADC_ISR,w,c
  9255  0011A4  0A00               	xorlw	0	; case 0
  9256  0011A6  B4D8               	btfsc	status,2,c
  9257  0011A8  D67E               	goto	i2l3506
  9258  0011AA  0A01               	xorlw	1	; case 1
  9259  0011AC  B4D8               	btfsc	status,2,c
  9260  0011AE  D6A0               	goto	i2l3510
  9261  0011B0  0A03               	xorlw	3	; case 2
  9262  0011B2  B4D8               	btfsc	status,2,c
  9263  0011B4  D6C2               	goto	i2l3514
  9264  0011B6  0A01               	xorlw	1	; case 3
  9265  0011B8  B4D8               	btfsc	status,2,c
  9266  0011BA  D6E4               	goto	i2l3518
  9267  0011BC  0A07               	xorlw	7	; case 4
  9268  0011BE  B4D8               	btfsc	status,2,c
  9269  0011C0  D706               	goto	i2l3522
  9270  0011C2  0A01               	xorlw	1	; case 5
  9271  0011C4  B4D8               	btfsc	status,2,c
  9272  0011C6  D728               	goto	i2l3526
  9273  0011C8  0A03               	xorlw	3	; case 6
  9274  0011CA  B4D8               	btfsc	status,2,c
  9275  0011CC  D74A               	goto	i2l3530
  9276  0011CE  0A01               	xorlw	1	; case 7
  9277  0011D0  B4D8               	btfsc	status,2,c
  9278  0011D2  D76C               	goto	i2l3534
  9279  0011D4  0A0F               	xorlw	15	; case 8
  9280  0011D6  B4D8               	btfsc	status,2,c
  9281  0011D8  D78E               	goto	i2l3538
  9282  0011DA  0A01               	xorlw	1	; case 9
  9283  0011DC  B4D8               	btfsc	status,2,c
  9284  0011DE  D7B0               	goto	i2l3542
  9285  0011E0  D000               	goto	i2l3552
  9286  0011E2                     i2l3552:
  9287                           
  9288                           ;adc.c: 192: ADC_Buffer_Point++;
  9289  0011E2  4A2D               	infsnz	_ADC_Buffer_Point,f,c
  9290  0011E4  2A2E               	incf	_ADC_Buffer_Point+1,f,c
  9291  0011E6  0012               	return	
  9292  0011E8  0012               	return		;funcret
  9293  0011EA                     __end_of_ADC_ISR:
  9294                           	opt stack 0
  9295                           tosu	equ	0xFFF
  9296                           tosh	equ	0xFFE
  9297                           tosl	equ	0xFFD
  9298                           pclatu	equ	0xFFB
  9299                           pclath	equ	0xFFA
  9300                           tblptru	equ	0xFF8
  9301                           tblptrh	equ	0xFF7
  9302                           tblptrl	equ	0xFF6
  9303                           tablat	equ	0xFF5
  9304                           prodh	equ	0xFF4
  9305                           prodl	equ	0xFF3
  9306                           intcon	equ	0xFF2
  9307                           intcon2	equ	0xFF1
  9308                           postinc0	equ	0xFEE
  9309                           fsr0h	equ	0xFEA
  9310                           fsr0l	equ	0xFE9
  9311                           wreg	equ	0xFE8
  9312                           fsr1h	equ	0xFE2
  9313                           fsr1l	equ	0xFE1
  9314                           indf2	equ	0xFDF
  9315                           postinc2	equ	0xFDE
  9316                           postdec2	equ	0xFDD
  9317                           plusw2	equ	0xFDB
  9318                           fsr2h	equ	0xFDA
  9319                           fsr2l	equ	0xFD9
  9320                           status	equ	0xFD8
  9321                           
  9322 ;; *************** function _Set_4051 *****************
  9323 ;; Defined at:
  9324 ;;		line 15 in file "Functions.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;  Channel         2    0[COMRAM] int 
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;		None
  9329 ;; Return value:  Size  Location     Type
  9330 ;;		None               void
  9331 ;; Registers used:
  9332 ;;		wreg, status,2, status,0
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9338 ;;      Params:         2       0       0       0       0       0       0
  9339 ;;      Locals:         0       0       0       0       0       0       0
  9340 ;;      Temps:          2       0       0       0       0       0       0
  9341 ;;      Totals:         4       0       0       0       0       0       0
  9342 ;;Total ram usage:        4 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; This function calls:
  9345 ;;		Nothing
  9346 ;; This function is called by:
  9347 ;;		_ADC_ISR
  9348 ;; This function uses a non-reentrant model
  9349 ;;
  9350                           
  9351                           	psect	text50
  9352  002690                     __ptext50:
  9353                           	opt stack 0
  9354  002690                     _Set_4051:
  9355                           	opt stack 22
  9356                           
  9357                           ;Functions.c: 17: if (Channel & 0x01)
  9358                           
  9359                           ;incstack = 0
  9360  002690  A001               	btfss	Set_4051@Channel,0,c
  9361  002692  D002               	goto	i2l3094
  9362                           
  9363                           ;Functions.c: 18: {
  9364                           ;Functions.c: 19: do { LATA6 = ~LATA6; } while(0);
  9365  002694  7C89               	btg	3977,6,c	;volatile
  9366  002696  D000               	goto	i2l3094
  9367  002698                     i2l3094:
  9368                           
  9369                           ;Functions.c: 20: }
  9370                           ;Functions.c: 21: if ((Channel>>1) & 0x01)
  9371  002698  3402               	rlcf	Set_4051@Channel+1,w,c
  9372  00269A  3002               	rrcf	Set_4051@Channel+1,w,c
  9373  00269C  6E04               	movwf	(??_Set_4051+1)& (0+255),c
  9374  00269E  3001               	rrcf	Set_4051@Channel,w,c
  9375  0026A0  6E03               	movwf	??_Set_4051& (0+255),c
  9376  0026A2  A003               	btfss	??_Set_4051,0,c
  9377  0026A4  D002               	goto	i2l3096
  9378                           
  9379                           ;Functions.c: 22: {
  9380                           ;Functions.c: 23: do { LATC0 = ~LATC0; } while(0);
  9381  0026A6  708B               	btg	3979,0,c	;volatile
  9382  0026A8  D000               	goto	i2l3096
  9383  0026AA                     i2l3096:
  9384                           
  9385                           ;Functions.c: 24: }
  9386                           ;Functions.c: 25: if ((Channel>>2) & 0x01)
  9387  0026AA  C001  F003         	movff	Set_4051@Channel,??_Set_4051
  9388  0026AE  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
  9389  0026B2  3404               	rlcf	??_Set_4051+1,w,c
  9390  0026B4  3204               	rrcf	??_Set_4051+1,f,c
  9391  0026B6  3203               	rrcf	??_Set_4051,f,c
  9392  0026B8  3404               	rlcf	??_Set_4051+1,w,c
  9393  0026BA  3204               	rrcf	??_Set_4051+1,f,c
  9394  0026BC  3203               	rrcf	??_Set_4051,f,c
  9395  0026BE  A003               	btfss	??_Set_4051,0,c
  9396  0026C0  0012               	return	
  9397                           
  9398                           ;Functions.c: 26: {
  9399                           ;Functions.c: 27: do { LATC1 = ~LATC1; } while(0);
  9400  0026C2  728B               	btg	3979,1,c	;volatile
  9401  0026C4  0012               	return	
  9402  0026C6  0012               	return		;funcret
  9403  0026C8                     __end_of_Set_4051:
  9404                           	opt stack 0
  9405                           tosu	equ	0xFFF
  9406                           tosh	equ	0xFFE
  9407                           tosl	equ	0xFFD
  9408                           pclatu	equ	0xFFB
  9409                           pclath	equ	0xFFA
  9410                           tblptru	equ	0xFF8
  9411                           tblptrh	equ	0xFF7
  9412                           tblptrl	equ	0xFF6
  9413                           tablat	equ	0xFF5
  9414                           prodh	equ	0xFF4
  9415                           prodl	equ	0xFF3
  9416                           intcon	equ	0xFF2
  9417                           intcon2	equ	0xFF1
  9418                           postinc0	equ	0xFEE
  9419                           fsr0h	equ	0xFEA
  9420                           fsr0l	equ	0xFE9
  9421                           wreg	equ	0xFE8
  9422                           fsr1h	equ	0xFE2
  9423                           fsr1l	equ	0xFE1
  9424                           indf2	equ	0xFDF
  9425                           postinc2	equ	0xFDE
  9426                           postdec2	equ	0xFDD
  9427                           plusw2	equ	0xFDB
  9428                           fsr2h	equ	0xFDA
  9429                           fsr2l	equ	0xFD9
  9430                           status	equ	0xFD8
  9431                           
  9432 ;; *************** function _ADC_StartConversion *****************
  9433 ;; Defined at:
  9434 ;;		line 36 in file "mcc_generated_files/adc.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;  channel         1    wreg     enum E8837
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  channel         1    1[COMRAM] enum E8837
  9439 ;; Return value:  Size  Location     Type
  9440 ;;		None               void
  9441 ;; Registers used:
  9442 ;;		wreg, status,2, status,0
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9448 ;;      Params:         0       0       0       0       0       0       0
  9449 ;;      Locals:         1       0       0       0       0       0       0
  9450 ;;      Temps:          1       0       0       0       0       0       0
  9451 ;;      Totals:         2       0       0       0       0       0       0
  9452 ;;Total ram usage:        2 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; This function calls:
  9455 ;;		Nothing
  9456 ;; This function is called by:
  9457 ;;		_ADC_ISR
  9458 ;;		_Battery_Read
  9459 ;;		_Temp_Read
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           	psect	text51
  9464  002906                     __ptext51:
  9465                           	opt stack 0
  9466  002906                     _ADC_StartConversion:
  9467                           	opt stack 22
  9468                           
  9469                           ;incstack = 0
  9470                           ;ADC_StartConversion@channel stored from wreg
  9471  002906  6E02               	movwf	ADC_StartConversion@channel,c
  9472                           
  9473                           ;adc.c: 39: ADCON0bits.CHS = channel;
  9474  002908  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  9475  00290C  4601               	rlncf	??_ADC_StartConversion,f,c
  9476  00290E  4601               	rlncf	??_ADC_StartConversion,f,c
  9477  002910  50C2               	movf	4034,w,c	;volatile
  9478  002912  1801               	xorwf	??_ADC_StartConversion,w,c
  9479  002914  0B83               	andlw	-125
  9480  002916  1801               	xorwf	??_ADC_StartConversion,w,c
  9481  002918  6EC2               	movwf	4034,c	;volatile
  9482                           
  9483                           ;adc.c: 42: ADCON0bits.ADON = 1;
  9484  00291A  80C2               	bsf	4034,0,c	;volatile
  9485                           
  9486                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
  9487  00291C  82C2               	bsf	4034,1,c	;volatile
  9488  00291E  0012               	return		;funcret
  9489  002920                     __end_of_ADC_StartConversion:
  9490                           	opt stack 0
  9491                           tosu	equ	0xFFF
  9492                           tosh	equ	0xFFE
  9493                           tosl	equ	0xFFD
  9494                           pclatu	equ	0xFFB
  9495                           pclath	equ	0xFFA
  9496                           tblptru	equ	0xFF8
  9497                           tblptrh	equ	0xFF7
  9498                           tblptrl	equ	0xFF6
  9499                           tablat	equ	0xFF5
  9500                           prodh	equ	0xFF4
  9501                           prodl	equ	0xFF3
  9502                           intcon	equ	0xFF2
  9503                           intcon2	equ	0xFF1
  9504                           postinc0	equ	0xFEE
  9505                           fsr0h	equ	0xFEA
  9506                           fsr0l	equ	0xFE9
  9507                           wreg	equ	0xFE8
  9508                           fsr1h	equ	0xFE2
  9509                           fsr1l	equ	0xFE1
  9510                           indf2	equ	0xFDF
  9511                           postinc2	equ	0xFDE
  9512                           postdec2	equ	0xFDD
  9513                           plusw2	equ	0xFDB
  9514                           fsr2h	equ	0xFDA
  9515                           fsr2l	equ	0xFD9
  9516                           status	equ	0xFD8
  9517                           
  9518 ;; *************** function _ADC_GetConversionResult *****************
  9519 ;; Defined at:
  9520 ;;		line 55 in file "mcc_generated_files/adc.c"
  9521 ;; Parameters:    Size  Location     Type
  9522 ;;		None
  9523 ;; Auto vars:     Size  Location     Type
  9524 ;;		None
  9525 ;; Return value:  Size  Location     Type
  9526 ;;                  2    0[COMRAM] unsigned int 
  9527 ;; Registers used:
  9528 ;;		wreg, status,2, status,0
  9529 ;; Tracked objects:
  9530 ;;		On entry : 0/0
  9531 ;;		On exit  : 0/0
  9532 ;;		Unchanged: 0/0
  9533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9534 ;;      Params:         2       0       0       0       0       0       0
  9535 ;;      Locals:         0       0       0       0       0       0       0
  9536 ;;      Temps:          2       0       0       0       0       0       0
  9537 ;;      Totals:         4       0       0       0       0       0       0
  9538 ;;Total ram usage:        4 bytes
  9539 ;; Hardware stack levels used:    1
  9540 ;; This function calls:
  9541 ;;		Nothing
  9542 ;; This function is called by:
  9543 ;;		_ADC_ISR
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           	psect	text52
  9548  002980                     __ptext52:
  9549                           	opt stack 0
  9550  002980                     _ADC_GetConversionResult:
  9551                           	opt stack 22
  9552                           
  9553                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
  9554                           
  9555                           ;incstack = 0
  9556  002980  50C4               	movf	4036,w,c	;volatile
  9557  002982  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  9558  002984  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  9559  002986  50C3               	movf	4035,w,c	;volatile
  9560  002988  2403               	addwf	??_ADC_GetConversionResult,w,c
  9561  00298A  6E01               	movwf	?_ADC_GetConversionResult,c
  9562  00298C  0E00               	movlw	0
  9563  00298E  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  9564  002990  6E02               	movwf	?_ADC_GetConversionResult+1,c
  9565  002992  0012               	return	
  9566  002994  0012               	return		;funcret
  9567  002996                     __end_of_ADC_GetConversionResult:
  9568                           	opt stack 0
  9569                           tosu	equ	0xFFF
  9570                           tosh	equ	0xFFE
  9571                           tosl	equ	0xFFD
  9572                           pclatu	equ	0xFFB
  9573                           pclath	equ	0xFFA
  9574                           tblptru	equ	0xFF8
  9575                           tblptrh	equ	0xFF7
  9576                           tblptrl	equ	0xFF6
  9577                           tablat	equ	0xFF5
  9578                           prodh	equ	0xFF4
  9579                           prodl	equ	0xFF3
  9580                           intcon	equ	0xFF2
  9581                           intcon2	equ	0xFF1
  9582                           postinc0	equ	0xFEE
  9583                           fsr0h	equ	0xFEA
  9584                           fsr0l	equ	0xFE9
  9585                           wreg	equ	0xFE8
  9586                           fsr1h	equ	0xFE2
  9587                           fsr1l	equ	0xFE1
  9588                           indf2	equ	0xFDF
  9589                           postinc2	equ	0xFDE
  9590                           postdec2	equ	0xFDD
  9591                           plusw2	equ	0xFDB
  9592                           fsr2h	equ	0xFDA
  9593                           fsr2l	equ	0xFD9
  9594                           status	equ	0xFD8
  9595                           tosu	equ	0xFFF
  9596                           tosh	equ	0xFFE
  9597                           tosl	equ	0xFFD
  9598                           pclatu	equ	0xFFB
  9599                           pclath	equ	0xFFA
  9600                           tblptru	equ	0xFF8
  9601                           tblptrh	equ	0xFF7
  9602                           tblptrl	equ	0xFF6
  9603                           tablat	equ	0xFF5
  9604                           prodh	equ	0xFF4
  9605                           prodl	equ	0xFF3
  9606                           intcon	equ	0xFF2
  9607                           intcon2	equ	0xFF1
  9608                           postinc0	equ	0xFEE
  9609                           fsr0h	equ	0xFEA
  9610                           fsr0l	equ	0xFE9
  9611                           wreg	equ	0xFE8
  9612                           fsr1h	equ	0xFE2
  9613                           fsr1l	equ	0xFE1
  9614                           indf2	equ	0xFDF
  9615                           postinc2	equ	0xFDE
  9616                           postdec2	equ	0xFDD
  9617                           plusw2	equ	0xFDB
  9618                           fsr2h	equ	0xFDA
  9619                           fsr2l	equ	0xFD9
  9620                           status	equ	0xFD8
  9621                           
  9622                           	psect	text53
  9623  000000                     __ptext53:
  9624                           	opt stack 0
  9625                           tosu	equ	0xFFF
  9626                           tosh	equ	0xFFE
  9627                           tosl	equ	0xFFD
  9628                           pclatu	equ	0xFFB
  9629                           pclath	equ	0xFFA
  9630                           tblptru	equ	0xFF8
  9631                           tblptrh	equ	0xFF7
  9632                           tblptrl	equ	0xFF6
  9633                           tablat	equ	0xFF5
  9634                           prodh	equ	0xFF4
  9635                           prodl	equ	0xFF3
  9636                           intcon	equ	0xFF2
  9637                           intcon2	equ	0xFF1
  9638                           postinc0	equ	0xFEE
  9639                           fsr0h	equ	0xFEA
  9640                           fsr0l	equ	0xFE9
  9641                           wreg	equ	0xFE8
  9642                           fsr1h	equ	0xFE2
  9643                           fsr1l	equ	0xFE1
  9644                           indf2	equ	0xFDF
  9645                           postinc2	equ	0xFDE
  9646                           postdec2	equ	0xFDD
  9647                           plusw2	equ	0xFDB
  9648                           fsr2h	equ	0xFDA
  9649                           fsr2l	equ	0xFD9
  9650                           status	equ	0xFD8
  9651                           
  9652                           	psect	rparam
  9653  0000                     tosu	equ	0xFFF
  9654                           tosh	equ	0xFFE
  9655                           tosl	equ	0xFFD
  9656                           pclatu	equ	0xFFB
  9657                           pclath	equ	0xFFA
  9658                           tblptru	equ	0xFF8
  9659                           tblptrh	equ	0xFF7
  9660                           tblptrl	equ	0xFF6
  9661                           tablat	equ	0xFF5
  9662                           prodh	equ	0xFF4
  9663                           prodl	equ	0xFF3
  9664                           intcon	equ	0xFF2
  9665                           intcon2	equ	0xFF1
  9666                           postinc0	equ	0xFEE
  9667                           fsr0h	equ	0xFEA
  9668                           fsr0l	equ	0xFE9
  9669                           wreg	equ	0xFE8
  9670                           fsr1h	equ	0xFE2
  9671                           fsr1l	equ	0xFE1
  9672                           indf2	equ	0xFDF
  9673                           postinc2	equ	0xFDE
  9674                           postdec2	equ	0xFDD
  9675                           plusw2	equ	0xFDB
  9676                           fsr2h	equ	0xFDA
  9677                           fsr2l	equ	0xFD9
  9678                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        1
    BSS         1159
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      69
    BANK0           160     31     158
    BANK1           256      0     190
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256      0     206

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK4[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1107(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK3[200]), ring_buffer(BANK2[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK2[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK1[40]), 


Critical Paths under _main in COMRAM

    _updateComms->_ToSend
    _updateComms->_receiveData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Tempeture_Get->___wmul
    _Battery_Get->___ftmul
    ___ftmul->___ftpack
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _updateComms->_ToSend
    _receiveData->_CRCcheck
    ___fttol->_Battery_Get
    _ToSend->___fttol
    _Battery_Get->___ftmul
    _SYSTEM_Initialize->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   34927
                                             26 BANK0      5     0      5
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   32429
                        _Battery_Get
                              _Delay
                      _Tempeture_Get
                             _ToSend
                            ___fttol
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (2) _sendData                                             5     5      0    5297
                                             38 COMRAM     5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (3) _crcBufS_put                                          7     2      5     564
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_flush                            4     0      4     910
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                             38 COMRAM     6     6      0
                                              7 BANK0     12    12      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (3) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (4) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1911
                                              9 BANK0     15    11      4
                        _Battery_Get (ARG)
                      _Tempeture_Get (ARG)
 ---------------------------------------------------------------------------------
 (2) _ToSend                                               3     1      2    3214
                                             43 COMRAM     1     1      0
                                             24 BANK0      2     0      2
                        _Battery_Get (ARG)
            _FastTransfer_buffer_put
                      _Tempeture_Get (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Tempeture_Get                                        3     0      3    3205
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Delay                                                9     5      4     174
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    7913
                                              6 BANK0      3     0      3
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2543
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4492
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2332
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2498
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1676
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     812
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    2316
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              8     8      0    1107
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (9) _Set_4051                                             4     2      2     642
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _begin
       ___awdiv
   _updateComms
     _Battery_Get
       ___ftmul
         ___ftpack
         ___wmul (ARG)
       ___wmul
     _Delay
     _Tempeture_Get
       ___wmul
     _ToSend
       _Battery_Get (ARG)
         ___ftmul
           ___ftpack
           ___wmul (ARG)
         ___wmul
       _FastTransfer_buffer_put (ARG)
         _FastTransfer_buffer_modulo_inc
       _Tempeture_Get (ARG)
         ___wmul
       ___fttol (ARG)
         _Battery_Get (ARG)
           ___ftmul
             ___ftpack
             ___wmul (ARG)
           ___wmul
         _Tempeture_Get (ARG)
           ___wmul
     ___fttol
       _Battery_Get (ARG)
         ___ftmul
           ___ftpack
           ___wmul (ARG)
         ___wmul
       _Tempeture_Get (ARG)
         ___wmul
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      CE      15       80.5%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      BE       6       74.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1F      9E       4       98.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4D3       9        0.0%
DATA                 0      0     4D3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Jun 10 20:14:45 2015

      __end_of_FastTransfer_buffer_flush 24BA                   i2_UART_buff_modulo_inc 27E6  
                           _rx_array_inx 0041                             ___awdiv@sign 0020  
                    ___wmul@multiplicand 001D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l578 254A  
                                    l692 1704                                      l757 22E0  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0037                          __end_of_ADC_ISR 11EA  
   FastTransfer_buffer_flush@clearBuffer 0025                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l1122 2192                                     l3030 21E4  
                                   l3040 220C                                     l3024 21D2  
                                   l3036 21FA                                     l3052 2236  
                                   l3038 2204                                     l3142 25CE  
                                   l4110 277E                                     l3056 2246  
                                   l3048 222A                                     l3146 25EA  
                                   l4122 22DC                                     l4202 1C42  
                                   l4132 251E                                     l4230 2106  
                                   l4302 172E                                     l4208 1CAE  
                                   l4400 1A0A                                     l4242 215A  
                                   l4234 2116                                     l4138 2534  
                                   l4146 2552                                     l4170 1E72  
                                   l4410 1A8E                                     l4402 1A24  
                                   l4252 219A                                     l4244 217A  
                                   l4236 2122                                     l4148 255C  
                                   l4500 093E                                     l4412 1A94  
                                   l4404 1A3E                                     l4246 2186  
                                   l4238 2142                                     l4342 1B4C  
                                   l4158 27AC                                     l4182 1EF6  
                                   l4166 1E66                                     l4190 2028  
                                   l4502 0946                                     l4430 067E  
                                   l4406 1A5A                                     l4360 1BA8  
                                   l4336 1B20                                     l4264 159A  
                                   l4520 09FA                                     l4504 095C  
                                   l4416 1AC6                                     l4408 1A64  
                                   l4258 21AC                                     l4370 1BE0  
                                   l4274 1660                                     l4266 15C6  
                                   l4530 0A7C                                     l4522 0A14  
                                   l4450 0748                                     l4426 0650  
                                   l4434 0684                                     l4364 1BC0  
                                   l4356 1B90                                     l4292 16F2  
                                   l4532 0AB8                                     l4524 0A2E  
                                   l2774 27C2                                     l4374 1BFA  
                                   l4366 1BC8                                     l4606 18AA  
                                   l4198 20AE                                     l4278 167A  
                                   l4526 0A48                                     l4518 09E0  
                                   l4534 0AD4                                     l4446 0728  
                                   l4624 193E                                     l4288 16D0  
                                   l4296 16FC                                     l4560 0B68  
                                   l4528 0A62                                     l4544 0AE2  
                                   l4464 0788                                     l4448 0740  
                                   l2778 27D4                                     l4642 19AE  
                                   l4634 1970                                     l4570 0BEA  
                                   l4562 0B82                                     l4466 07B2  
                                   l4482 0816                                     l4458 0778  
                                   l4636 1982                                     l4628 1952  
                                   l4572 0C26                                     l4564 0B9C  
                                   l4638 1990                                     l4566 0BB6  
                                   l4558 0B4E                                     l4574 0C42  
                                   l4494 08B4                                     l4486 0842  
                                   l4478 07E4                                     l4582 0C50  
                                   l4398 19F0                                     l4568 0BD0  
                   receiveData@crcHolder 00EC                                     l4906 29A0  
                                   _CRC8 2518                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u4111 172C                                     u4008 15CA  
                                   u4009 15DE                                     u4018 15E6  
                                   u4131 1B04                                     u4019 15FA  
                                   u4028 1602                                     u4029 1616  
                                   u4038 161E                                     u4151 1B30  
                                   u4039 1632                                     u4208 19F4  
                                   u4218 1A0E                                     u4308 065A  
                                   u4228 1A28                                     u4309 066E  
                                   u4238 1A42                                     u4408 072C  
                                   u4328 0688                                     u4248 1A68  
                                   u4521 086A                                     u4329 069C  
                                   u4348 06A6                                     u1980 2004  
                                   u4268 1AB0                                     u4349 06BA  
                                   u4198 19DA                                     u4608 0A18  
                                   u4448 078C                                     u4368 06C4  
                                   u4288 0628                                     u4449 07A0  
                                   u4369 06D8                                     u4289 063C  
                                   u4618 0A32                                     u4378 06DE  
                                   u4379 06F2                                     u4708 0B86  
                                   u4628 0A4C                                     u4468 07B6  
                                   u4388 06F8                                     u4469 07CC  
                                   u4389 070C                                     u3790 2270  
                                   u4718 0BA0                                     u4638 0A66  
                                   u4728 0BBA                                     u4648 0A80  
                                   u4488 07E8                                     u4489 07FC  
                                   u4738 0BD4                                     u4658 0ABC  
                                   u4578 09CA                                     u4498 081A  
                                   u5387 25D4                                     u4771 1886  
                                   u4499 082E                                     u4748 0BEE  
                                   u4588 09E4                                     u4790 18D0  
                                   u4758 0C2A                                     u4678 0B38  
                                   u4598 09FE                                     u4688 0B52  
                                   u4698 0B6C                                     u4795 18C6  
                                   u3988 159E                                     u3989 15B2  
                                   _TMR1 000FCE                                     _WPUB 000F61  
                Tempeture_Get@channelnum 0021                                     _main 2996  
                           ___ftpack@arg 001B                             ___ftpack@exp 001E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 1870  
                                   start 00AA                            __CFG_IESO$OFF 000000  
                           ___ftmul@cntr 00E3                             ___param_bank 000010  
                           ___ftmul@sign 00E4           i2UART_buff_modulo_inc@my_value 0005  
                      ADC_ISR@ADC_Result 000B                             ___fttol@exp1 00F6  
                           ___fttol@lval 00F2                                    ?_CRC8 001B  
                       __end_of_CRCcheck 1706           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 29D8                       crcBufS_put@address 001D  
                                  ?_main 00F9                          __end_of___awdiv 2252  
                        _TMR1_StartTimer 29E4                          __end_of___ftmul 1C22  
                        ___awdiv@divisor 001D                                    _T1CON 000FCD  
                        __end_of___fttol 19C2                                    _LATA0 007C48  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATC0 007C58                                    _LATC1 007C59  
                                  _LATB3 007C53                                    _LATA6 007C4E  
                                  _LATD1 007C61                                    _LATD2 007C62  
                                  _LATC4 007C5C                                    _LATD3 007C63  
                                  _LATC5 007C5D                                    _LATD5 007C65  
                         __CFG_DEBUG$OFF 000000                                    i2l212 0070  
                                  i2l204 004C                                    i2l206 0058  
                                  i2l208 0064                                    i2l757 2374  
                                  i2l788 28D4                          ___awdiv@counter 001F  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96         __size_of_ADC_GetConversionResult 0016  
                                  _Delay 25BC                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 26C8  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                         __end_of_TMR1_ISR 283E  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 24BA  
                         __CFG_EBTRB$OFF 000000                                    _errno 00B2  
                                  _group 0043                       __CFG_MCLRE$EXTMCLR 000000  
                          ___ftpack@sign 001F                  __end_of_TMR1_Initialize 28AE  
                                  pclath 000FFA                              _Battery_Adc 0060  
                                  tablat 000FF5                              _Battery_Get 2608  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00E8  
                                  plusw2 000FDB                           begin@stuffpeek 00EA  
                   __size_of_crcBufS_put 00DA                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 256A  
                        CRCcheck@SentCRC 00DF                          __initialization 237A  
             __end_of_EUSART1_Initialize 2690                             __end_of_main 29AA  
                             ToSend@what 00F7                                   ??_CRC8 001E  
                       __end_of_Set_4051 26C8                                ??_ADC_ISR 0005  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 002D  
                          ___fttol@sign1 00F1                            __activetblptr 000002  
                       __end_of_Send_put 272C               ADC_StartConversion@channel 0002  
              __size_ofi2_UART_buff_size 0018                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                          ?_Receive_peek 0001                                   ?_begin 00DF  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                         __end_of___ftpack 21BC  
                                 _T1GCON 000FCC                          i2_UART_buff_get 22E6  
                                 _RC1STA 000FAB                          i2_UART_buff_put 1D3E  
                                 i2l3064 2808                                   i2l3402 1D5E  
                                 i2l3500 0E8C                                   i2l3094 2698  
                                 i2l3510 0EF0                                   i2l3502 0E92  
                                 i2l3422 2370                           __CFG_WDTEN$OFF 000000  
                                 i2l3096 26AA                                   i2l3408 1DCA  
                                 i2l3530 1062                                   i2l3522 0FCE  
                                 i2l3514 0F3A                                   i2l3506 0EA6  
                                 i2l3442 0CA2                                   i2l3460 0D2C  
                                 i2l3436 0C74                                   i2l3542 1140  
                                 i2l3534 10AC                                   i2l3526 1018  
                                 i2l3518 0F84                                   i2l3550 1192  
                                 i2l3454 0CFE                                   i2l3552 11E2  
                                 i2l3472 0D88                                   i2l3448 0CD0  
            UART_buff_modulo_inc@modulus 001D                                   i2l3538 10F6  
                                 i2l3490 0E12                                   i2l3466 0D5A  
                                 i2l3484 0DE4                                   i2l3572 26F2  
                                 i2l3478 0DB6                                   i2l3498 0E3C  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                           __CFG_XINST$OFF 000000  
                                 _ToSend 28EA                      __end_of_Receive_get 29CA  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0027  
                  __end_of_Tempeture_Get 275C                            _output_buffer 0500  
                       crcBufS_get@space 001E                  __end_of_TMR1_StartTimer 29E8  
                                 ___wmul 283E                                ??___awdiv 001F  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                              ??___ftmul 0029                                ??___fttol 00EC  
                                 _memset 27B8                                   clear_0 2380  
                                 clear_1 238C                                   clear_2 2398  
                                 clear_3 23A4                                   clear_4 23B0  
                                 clear_5 23BC                                   clear_6 23C8  
                       ___awdiv@quotient 0021                                   _rx_len 0042  
                       __end_of_sendData 1AF4                    ___ftmul@f3_as_product 00E0  
                           __pdataCOMRAM 0045                            Send_put@_data 0026  
                           _Battery_Volt 0088                             __mediumconst 0000  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 016A             __end_of_UART_buff_modulo_inc 278A  
          __size_of_INTERRUPT_Initialize 000C                         ?_TMR1_Initialize 0001  
                      _SYSTEM_Initialize 23EA                         __end_oflog@coeff 061C  
                             __accesstop 0060                  __end_of__initialization 23E0  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                            __end_of_Delay 2608  
                             ___ftmul@f1 0023                               ___ftmul@f2 0026  
                             ___fttol@f1 00E8             __size_of_ADC_StartConversion 001A  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 201C  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 2518                                ?_TMR1_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 27B8  __size_of_FastTransfer_buffer_modulo_inc 002E  
         _FastTransfer_buffer_modulo_inc 278A             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 002C                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                    Battery_Get@channelnum 00E5  
                  __end_of_UART_buff_get 22E6                   ??_EUSART1_Transmit_ISR 000C  
                _ADC_GetConversionResult 2980                    __end_of_UART_buff_put 1D3E  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 237A  
                __end_ofi2_UART_buff_put 1E5A              __end_of_EUSART1_Receive_ISR 28EA  
              _FastTransfer_buffer_flush 2456                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                __end_of_SYSTEM_Initialize 2456  
                 receiveData@holder_1107 00E9                      _addressErrorCounter 00AA  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                               __pbssBANK5 0500  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 29BA  
                              ?_Set_4051 0001                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 2814  
                      begin@givenAddress 00E2                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0026                  __size_of_UART_buff_size 0018  
                              ?_Send_put 0001                     __size_of_receiveData 0638  
                                ?_ToSend 00F7                       __CFG_CCP2MX$PORTC1 000000  
                                ?___wmul 001B                         ?_TMR1_StartTimer 0001  
                             ??_TMR1_ISR 0001                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  _ADC_ISR 0C56  
                                ?_memset 001B                               _crc_buffer 00CE  
                              ?___ftpack 001B                  __size_of_ADC_Initialize 0018  
                     UART_buff_put@_this 0021                         i2_UART_buff_size 2968  
            i2UART_buff_modulo_inc@value 0001                                  _OSCCON2 000FD2  
                      _Receive_available 2920             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                      sendData@whereToSend 0028  
                    _receiveArrayAddress 00B4                       ?_Receive_available 001D  
                             begin@error 00E3                             ?_Battery_Get 00E5  
                             ??_Set_4051 0003                              _Temp_Aquire 003A  
                    ??_Receive_available 001F                                ?_sendData 0001  
                      _alignErrorCounter 00AC                          __CFG_PWRTEN$OFF 000000  
                             ??_Send_put 0026                                  __Hparam 0000  
                                __Lparam 0000                          __size_of_ToSend 001C  
                   __end_of_Receive_peek 29BA                                _AKNAKsend 0039  
                                ___awdiv 21BC                     _UART_buff_modulo_inc 275C  
                        __size_of___wmul 0028                                  ___ftmul 1AF4  
                                ___fttol 1870                                  _calc_CS 003C  
                           __psmallconst 0600                ??_ADC_GetConversionResult 0003  
                                __pcinit 237A                               ??___ftpack 0020  
                        __size_of_memset 002E                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 2996  
                                __ptext1 11EA                                  __ptext2 19C2  
                                __ptext3 1F42                                  __ptext4 2456  
                                __ptext5 061E                                  __ptext6 26FC  
                                __ptext7 1C22                                  __ptext8 29AA  
                                __ptext9 2866                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 29CA  
              __end_of_Receive_available 2938                  _FastTransfer_buffer_put 1706  
                  CRCcheck@calculatedCRC 00E0                       _EUSART1_Initialize 2654  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 001B  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 006C                     end_of_initialization 23E0  
                              Delay@wait 0020                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                             ??_sendData 0027                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 03AE                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                       begin@stufftosend 00E4                      CRCcheck@arrayHolder 00E1  
                   ??_EUSART1_Initialize 0025                   _dataAdressErrorCounter 00B0  
                             _rx_address 0040                                _TRISCbits 000F94  
                    _ADC_StartConversion 2906                              _Volt_Aquire 003B  
                           begin@maxSize 00E1       __size_of_FastTransfer_buffer_flush 0064  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 28AE  
                         _UART_buff_peek 2866                           _UART_buff_size 2938  
                    __end_of_crcBufS_get 1F42                      __end_of_crcBufS_put 201C  
                      __size_of_CRCcheck 016E                             Delay@d_lenth 001B  
                            ___ftmul@exp 00DF                     ?_ADC_StartConversion 0001  
                          _moduleAddress 003E                               CRCcheck@rt 00E4  
                         __end_of_ToSend 2906             __end_of_INTERRUPT_Initialize 29E4  
                        _crcErrorCounter 00AE                           __end_of___wmul 2866  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 29E8  
                      __size_of_TMR1_ISR 002A                           _ADC_Initialize 2950  
              ??_FastTransfer_buffer_put 0026                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 27E6                        crcBufS_put@status 001F  
                           receiveData@r 00F0               __size_of_Receive_available 0018  
                           receiveData@u 00EE                      start_initialization 237A  
        __size_of_PIN_MANAGER_Initialize 0052                    crcBufS_get@wantedTime 0025  
                 __size_of_Tempeture_Get 0030                   __end_of_UART_buff_init 28CC  
                 __end_of_UART_buff_peek 288C                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 2950                             ?_Receive_get 0001  
                         UART_buff_put@c 0023                    __size_of_Receive_peek 0010  
                   __size_of_Battery_Get 004C                 __end_ofi2_UART_buff_size 2980  
                      __size_of_Set_4051 0038                                _Temp_DegF 013C  
                       _PrevBattery_Volt 0100                                _Temp_Done 00A6  
                  ??_ADC_StartConversion 0001                                 ??_ToSend 002C  
                 ??_UART_buff_modulo_inc 001F                 __size_of_TMR1_Initialize 0022  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                      __size_of_Send_put 0030                                 ??___wmul 001F  
                 __end_of_ADC_Initialize 2968                                 ?_ADC_ISR 0001  
                               ??_memset 0021                        __size_of___ftpack 00C6  
                              _Volt_Done 00A8                              __pbssCOMRAM 002D  
          __size_of_EUSART1_Transmit_ISR 0034                            __pcstackBANK0 00DF  
                           _Receive_peek 29AA                      UART_buff_init@_this 0023  
                          _PrevTemp_DegF 011E                              _crcBufS_get 1E5A  
                    UART_buff_peek@_this 001B                              _crcBufS_put 1F42  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                          ??_receiveData 0027              __size_of_crcBufS_status_put 00DA  
                             sendData@CS 0029                   __size_of_UART_buff_get 0094  
                 __size_of_UART_buff_put 011C                   _PIN_MANAGER_Initialize 256A  
                      __size_of_sendData 0132                                __pintcode 0008  
                          _Tempeture_Get 272C                                 ?___awdiv 001B  
                               ?___ftmul 0023                                 ?___fttol 00E8  
                        ?_ADC_Initialize 0001             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                                 _BAUD1CON 000FB8  
                            __smallconst 0600                 __size_of_TMR1_StartTimer 0004  
                         __size_of_Delay 004C                           __size_of_begin 005E  
                   _INTERRUPT_Initialize 29D8                             _receiveArray 015A  
                               _CRCcheck 1598                           ___wmul@product 001F  
                               _LATAbits 000F89                                 _LATEbits 000F8D  
                    UART_buff_size@_this 001B                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 i2u123_40 2832  
                               i2u303_40 26E2      __size_of_INTERRUPT_InterruptManager 00A2  
                               _PIR1bits 000F9E                                 i2u299_40 2304  
                    begin@stuffavailable 00E8                           ?_Tempeture_Get 0021  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0C56                                 _TMR1_ISR 2814  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0400  
                              _rx_buffer 0300                        ??_TMR1_Initialize 001B  
                       __size_of_ADC_ISR 0594                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 001B                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 2252                            _UART_buff_put 1C22  
               ??i2_UART_buff_modulo_inc 0005                              _INTCON2bits 000FF1  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 00B6  
               __size_ofi2_UART_buff_get 0094                                 _Set_4051 2690  
               __size_ofi2_UART_buff_put 011C                            ??_updateComms 002D  
                   __size_of_Receive_get 0010                                 __Hrparam 0000  
                               _Send_put 26FC                                 _Temp_Adc 00BA  
                               __Lrparam 0000                 ?_ADC_GetConversionResult 0001  
                     __CFG_BOREN$SBORDIS 000000                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                         __size_of___awdiv 0096  
                       __size_of___ftmul 012E                         __size_of___fttol 0152  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 00E6  
                               ___ftpack 20F6                           ?_UART_buff_get 0021  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 002A                 crcBufS_status_put@status 001E  
                               __ptext10 1598                                 __ptext11 201C  
                               __ptext20 28EA                                 __ptext12 1E5A  
                               __ptext21 1706                                 __ptext13 29BA  
                             _T1GCONbits 000FCC                                 __ptext30 24BA  
                               __ptext22 278A                                 __ptext14 2252  
                               __ptext31 21BC                                 __ptext23 272C  
                               __ptext15 275C                                 __ptext40 2950  
                               __ptext32 288C                                 __ptext24 25BC  
                               __ptext16 2920                                 __ptext33 29E4  
                               __ptext25 2608                                 __ptext17 2938  
                               __ptext50 2690                                 __ptext42 2814  
                               __ptext34 256A                                 __ptext26 283E  
                               __ptext18 2518                                 __ptext51 2906  
                               __ptext43 26C8                                 __ptext35 29CA  
                               __ptext27 1AF4                                 __ptext19 1870  
                               __ptext52 2980                                 __ptext44 2968  
                               __ptext36 29D8                                 __ptext28 20F6  
                               __ptext53 0000                                 __ptext45 22E6  
                               __ptext37 2654                                 __ptext29 23EA  
                               __ptext46 28CC                                 __ptext38 28AE  
                               __ptext47 1D3E                                 __ptext39 27B8  
                               __ptext48 27E6                                 __ptext49 0C56  
                      ??_TMR1_StartTimer 001B                            __size_of_CRC8 0052  
                               begin@ptr 00DF                  EUSART1_Receive_ISR@data 000C  
                          _returnAddress 003F                            __size_of_main 0014  
                            _receiveData 061E                           _Transmit_stall 0045  
                               _sendData 19C2                             _TmpTemp_DegF 01A0  
                        ??_Tempeture_Get 0024                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                       ??i2_UART_buff_size 0003  
                           _serial_write 0035                      __end_of_updateComms 1598  
     __end_of_INTERRUPT_InterruptManager 00AA               _INTERRUPT_InterruptManager 0008  
                               main@argc 00F9                                 main@argv 00FB  
                    _EUSART1_Receive_ISR 28CC                        receiveData@holder 00E6  
                               log@coeff 0601                               _INTCONbits 000FF2  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                 ??_INTERRUPT_Initialize 001B                                 memset@p1 001B  
                       _serial_available 0031          __size_ofi2_UART_buff_modulo_inc 002E  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                          ??_Battery_Get 002C                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                            _CountCallBack 002F  
                   ?_EUSART1_Receive_ISR 0001              __end_of_ADC_StartConversion 2920  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                       _TempBattery_Volt 0182                  ?_PIN_MANAGER_Initialize 0001  
        __end_of_ADC_GetConversionResult 2996             __end_of_EUSART1_Transmit_ISR 26FC  
                            _ring_buffer 0200                         ??_ADC_Initialize 001B  
             ?_FastTransfer_buffer_flush 0023                        ??i2_UART_buff_get 0009  
                            _serial_peek 00B8                              _serial_read 0033  
                      ??i2_UART_buff_put 000A                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002E                          ??_UART_buff_get 0023  
                        ??_UART_buff_put 0024    FastTransfer_buffer_modulo_inc@modulus 001D  
                 crcBufS_status_put@time 001D                receiveData@crcHolder_1108 00ED  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003D  
             __end_of_crcBufS_status_put 20F6                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 25BC         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                        __CFG_FOSC$INTIO67 000000  
                        _TMR1_Initialize 288C                              _updateComms 11EA  
                       _ADC_Buffer_Point 002D                      __end_of_Battery_Get 2654  
                        Set_4051@Channel 0001  
