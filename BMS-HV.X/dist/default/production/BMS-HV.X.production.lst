

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Mar 25 19:49:10 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    29  0000                     _TMR1	set	4046
    30  0000                     _ADCON0	set	4034
    31  0000                     _ADCON0bits	set	4034
    32  0000                     _ADCON1	set	4033
    33  0000                     _ADCON2	set	4032
    34  0000                     _ADRESH	set	4036
    35  0000                     _ADRESL	set	4035
    36  0000                     _ANSELA	set	3896
    37  0000                     _ANSELB	set	3897
    38  0000                     _ANSELC	set	3898
    39  0000                     _ANSELD	set	3899
    40  0000                     _ANSELE	set	3900
    41  0000                     _BAUD1CON	set	4024
    42  0000                     _INTCON2bits	set	4081
    43  0000                     _INTCONbits	set	4082
    44  0000                     _IPR1bits	set	3999
    45  0000                     _LATA	set	3977
    46  0000                     _LATB	set	3978
    47  0000                     _LATC	set	3979
    48  0000                     _LATD	set	3980
    49  0000                     _LATE	set	3981
    50  0000                     _OSCCON	set	4051
    51  0000                     _OSCCON2	set	4050
    52  0000                     _OSCTUNE	set	3995
    53  0000                     _PIE1bits	set	3997
    54  0000                     _PIR1bits	set	3998
    55  0000                     _RC1REG	set	4014
    56  0000                     _RC1STA	set	4011
    57  0000                     _RC1STAbits	set	4011
    58  0000                     _RCONbits	set	4048
    59  0000                     _RCREG1	set	4014
    60  0000                     _SPBRG1	set	4015
    61  0000                     _SPBRGH1	set	4016
    62  0000                     _T1CON	set	4045
    63  0000                     _T1CONbits	set	4045
    64  0000                     _T1GCON	set	4044
    65  0000                     _T1GCONbits	set	4044
    66  0000                     _TMR1H	set	4047
    67  0000                     _TMR1L	set	4046
    68  0000                     _TRISA	set	3986
    69  0000                     _TRISB	set	3987
    70  0000                     _TRISC	set	3988
    71  0000                     _TRISD	set	3989
    72  0000                     _TRISE	set	3990
    73  0000                     _TX1REG	set	4013
    74  0000                     _TX1STA	set	4012
    75  0000                     _TXREG1	set	4013
    76  0000                     _WPUB	set	3937
    77                           
    78                           	psect	nvCOMRAM
    79  00005D                     __pnvCOMRAM:
    80                           	opt stack 0
    81  00005D                     _timer1ReloadVal:
    82                           	opt stack 0
    83  00005D                     	ds	2
    84  00005F                     _eusart1TxBufferRemaining:
    85                           	opt stack 0
    86  00005F                     	ds	1
    87                           
    88                           ; #config settings
    89  0000                     
    90                           	psect	cinit
    91  00033A                     __pcinit:
    92                           	opt stack 0
    93  00033A                     start_initialization:
    94                           	opt stack 0
    95  00033A                     __initialization:
    96                           	opt stack 0
    97                           
    98                           ; Clear objects allocated to BANK0 (20 bytes)
    99  00033A  EE00  F060         	lfsr	0,__pbssBANK0
   100  00033E  0E14               	movlw	20
   101  000340                     clear_0:
   102  000340  6AEE               	clrf	postinc0,c
   103  000342  06E8               	decf	wreg,f,c
   104  000344  E1FD               	bnz	clear_0
   105                           
   106                           ; Clear objects allocated to COMRAM (65 bytes)
   107  000346  EE00  F001         	lfsr	0,__pbssCOMRAM
   108  00034A  0E41               	movlw	65
   109  00034C                     clear_1:
   110  00034C  6AEE               	clrf	postinc0,c
   111  00034E  06E8               	decf	wreg,f,c
   112  000350  E1FD               	bnz	clear_1
   113  000352                     end_of_initialization:
   114                           	opt stack 0
   115  000352                     __end_of__initialization:
   116                           	opt stack 0
   117  000352  0E00               	movlw	low (__Lmediumconst shr (0+16))
   118  000354  6EF8               	movwf	tblptru,c
   119  000356  0100               	movlb	0
   120  000358  EF09  F002         	goto	_main	;jump to C main() function
   121                           tblptru	equ	0xFF8
   122                           postinc0	equ	0xFEE
   123                           wreg	equ	0xFE8
   124                           
   125                           	psect	bssCOMRAM
   126  000001                     __pbssCOMRAM:
   127                           	opt stack 0
   128  000001                     _Battery_Adc:
   129                           	opt stack 0
   130  000001                     	ds	20
   131  000015                     _Battery_Volt:
   132                           	opt stack 0
   133  000015                     	ds	20
   134  000029                     _eusart1RxBuffer:
   135                           	opt stack 0
   136  000029                     	ds	8
   137  000031                     _eusart1TxBuffer:
   138                           	opt stack 0
   139  000031                     	ds	8
   140  000039                     _ADC_Buffer_Point:
   141                           	opt stack 0
   142  000039                     	ds	2
   143  00003B                     _Temp_Aquire:
   144                           	opt stack 0
   145  00003B                     	ds	1
   146  00003C                     _Volt_Aquire:
   147                           	opt stack 0
   148  00003C                     	ds	1
   149  00003D                     _eusart1RxCount:
   150                           	opt stack 0
   151  00003D                     	ds	1
   152  00003E                     _eusart1RxHead:
   153                           	opt stack 0
   154  00003E                     	ds	1
   155  00003F                     _eusart1RxTail:
   156                           	opt stack 0
   157  00003F                     	ds	1
   158  000040                     _eusart1TxHead:
   159                           	opt stack 0
   160  000040                     	ds	1
   161  000041                     _eusart1TxTail:
   162                           	opt stack 0
   163  000041                     	ds	1
   164                           tblptru	equ	0xFF8
   165                           postinc0	equ	0xFEE
   166                           wreg	equ	0xFE8
   167                           
   168                           	psect	bssBANK0
   169  000060                     __pbssBANK0:
   170                           	opt stack 0
   171  000060                     _Temp_Adc:
   172                           	opt stack 0
   173  000060                     	ds	20
   174                           tblptru	equ	0xFF8
   175                           postinc0	equ	0xFEE
   176                           wreg	equ	0xFE8
   177                           
   178                           	psect	cstackCOMRAM
   179  000042                     __pcstackCOMRAM:
   180                           	opt stack 0
   181  000042                     ??_TMR1_ISR:
   182  000042                     ??_ADC_StartConversion:
   183  000042                     ?_ADC_GetConversionResult:
   184                           	opt stack 0
   185                           
   186                           ; 2 bytes @ 0x0
   187  000042                     	ds	1
   188  000043                     ADC_StartConversion@channel:
   189                           	opt stack 0
   190                           
   191                           ; 1 bytes @ 0x1
   192  000043                     	ds	1
   193  000044                     ??_ADC_GetConversionResult:
   194                           
   195                           ; 0 bytes @ 0x2
   196  000044                     	ds	2
   197  000046                     ??_ADC_ISR:
   198                           
   199                           ; 0 bytes @ 0x4
   200  000046                     	ds	2
   201  000048                     ADC_ISR@ADC_Result:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x6
   205  000048                     	ds	2
   206  00004A                     ??_INTERRUPT_InterruptManager:
   207                           
   208                           ; 0 bytes @ 0x8
   209  00004A                     	ds	14
   210  000058                     
   211                           ; 2 bytes @ 0x16
   212  000058                     	ds	2
   213  00005A                     
   214                           ; 3 bytes @ 0x18
   215  00005A                     	ds	3
   216  00005D                     tblptru	equ	0xFF8
   217                           postinc0	equ	0xFEE
   218                           wreg	equ	0xFE8
   219                           
   220                           ; 0 bytes @ 0x1B
   221 ;;
   222 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   223 ;;
   224 ;; *************** function _main *****************
   225 ;; Defined at:
   226 ;;		line 26 in file "bms.c"
   227 ;; Parameters:    Size  Location     Type
   228 ;;  argc            2   22[COMRAM] int 
   229 ;;  argv            3   24[COMRAM] PTR PTR unsigned char 
   230 ;; Auto vars:     Size  Location     Type
   231 ;;		None
   232 ;; Return value:  Size  Location     Type
   233 ;;                  2   22[COMRAM] int 
   234 ;; Registers used:
   235 ;;		wreg, status,2, cstack
   236 ;; Tracked objects:
   237 ;;		On entry : 0/0
   238 ;;		On exit  : 0/0
   239 ;;		Unchanged: 0/0
   240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   241 ;;      Params:         5       0       0       0       0       0       0
   242 ;;      Locals:         0       0       0       0       0       0       0
   243 ;;      Temps:          0       0       0       0       0       0       0
   244 ;;      Totals:         5       0       0       0       0       0       0
   245 ;;Total ram usage:        5 bytes
   246 ;; Hardware stack levels required when called:    6
   247 ;; This function calls:
   248 ;;		_SYSTEM_Initialize
   249 ;; This function is called by:
   250 ;;		Startup code after reset
   251 ;; This function uses a non-reentrant model
   252 ;;
   253                           
   254                           	psect	text0
   255  000412                     __ptext0:
   256                           	opt stack 0
   257  000412                     _main:
   258                           	opt stack 25
   259                           
   260                           ;bms.c: 28: SYSTEM_Initialize();
   261                           
   262                           ;incstack = 0
   263  000412  ECBF  F001         	call	_SYSTEM_Initialize	;wreg free
   264                           
   265                           ;bms.c: 47: (INTCONbits.GIE = 1);
   266  000416  8EF2               	bsf	intcon,7,c	;volatile
   267                           
   268                           ;bms.c: 50: (INTCONbits.PEIE = 1);
   269  000418  8CF2               	bsf	intcon,6,c	;volatile
   270  00041A                     l297:
   271                           
   272                           ;bms.c: 60: {
   273  00041A  D7FF               	goto	l297
   274  00041C                     __end_of_main:
   275                           	opt stack 0
   276                           tblptru	equ	0xFF8
   277                           intcon	equ	0xFF2
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281 ;; *************** function _SYSTEM_Initialize *****************
   282 ;; Defined at:
   283 ;;		line 112 in file "mcc_generated_files/mcc.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;		None
   286 ;; Auto vars:     Size  Location     Type
   287 ;;		None
   288 ;; Return value:  Size  Location     Type
   289 ;;		None               void
   290 ;; Registers used:
   291 ;;		wreg, status,2, cstack
   292 ;; Tracked objects:
   293 ;;		On entry : 0/0
   294 ;;		On exit  : 0/0
   295 ;;		Unchanged: 0/0
   296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   297 ;;      Params:         0       0       0       0       0       0       0
   298 ;;      Locals:         0       0       0       0       0       0       0
   299 ;;      Temps:          0       0       0       0       0       0       0
   300 ;;      Totals:         0       0       0       0       0       0       0
   301 ;;Total ram usage:        0 bytes
   302 ;; Hardware stack levels used:    1
   303 ;; Hardware stack levels required when called:    5
   304 ;; This function calls:
   305 ;;		_ADC_Initialize
   306 ;;		_EUSART1_Initialize
   307 ;;		_INTERRUPT_Initialize
   308 ;;		_OSCILLATOR_Initialize
   309 ;;		_PIN_MANAGER_Initialize
   310 ;;		_TMR1_Initialize
   311 ;; This function is called by:
   312 ;;		_main
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text1
   317  00037E                     __ptext1:
   318                           	opt stack 0
   319  00037E                     _SYSTEM_Initialize:
   320                           	opt stack 25
   321                           
   322                           ;mcc.c: 114: OSCILLATOR_Initialize();
   323                           
   324                           ;incstack = 0
   325  00037E  ECFC  F001         	call	_OSCILLATOR_Initialize	;wreg free
   326                           
   327                           ;mcc.c: 115: PIN_MANAGER_Initialize();
   328  000382  EC2A  F001         	call	_PIN_MANAGER_Initialize	;wreg free
   329                           
   330                           ;mcc.c: 116: INTERRUPT_Initialize();
   331  000386  EC03  F002         	call	_INTERRUPT_Initialize	;wreg free
   332                           
   333                           ;mcc.c: 117: ADC_Initialize();
   334  00038A  ECE6  F001         	call	_ADC_Initialize	;wreg free
   335                           
   336                           ;mcc.c: 118: EUSART1_Initialize();
   337  00038E  EC51  F001         	call	_EUSART1_Initialize	;wreg free
   338                           
   339                           ;mcc.c: 119: TMR1_Initialize();
   340  000392  ECAE  F001         	call	_TMR1_Initialize	;wreg free
   341  000396  0012               	return	
   342  000398                     __end_of_SYSTEM_Initialize:
   343                           	opt stack 0
   344                           tblptru	equ	0xFF8
   345                           intcon	equ	0xFF2
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           
   349 ;; *************** function _TMR1_Initialize *****************
   350 ;; Defined at:
   351 ;;		line 63 in file "mcc_generated_files/tmr1.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;		None
   354 ;; Auto vars:     Size  Location     Type
   355 ;;		None
   356 ;; Return value:  Size  Location     Type
   357 ;;		None               void
   358 ;; Registers used:
   359 ;;		wreg, status,2, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   365 ;;      Params:         0       0       0       0       0       0       0
   366 ;;      Locals:         0       0       0       0       0       0       0
   367 ;;      Temps:          0       0       0       0       0       0       0
   368 ;;      Totals:         0       0       0       0       0       0       0
   369 ;;Total ram usage:        0 bytes
   370 ;; Hardware stack levels used:    1
   371 ;; Hardware stack levels required when called:    4
   372 ;; This function calls:
   373 ;;		_TMR1_StartTimer
   374 ;; This function is called by:
   375 ;;		_SYSTEM_Initialize
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379                           	psect	text2
   380  00035C                     __ptext2:
   381                           	opt stack 0
   382  00035C                     _TMR1_Initialize:
   383                           	opt stack 25
   384                           
   385                           ;tmr1.c: 68: T1CON = 0x00;
   386                           
   387                           ;incstack = 0
   388  00035C  0E00               	movlw	0
   389  00035E  6ECD               	movwf	4045,c	;volatile
   390                           
   391                           ;tmr1.c: 71: T1GCON = 0x00;
   392  000360  0E00               	movlw	0
   393  000362  6ECC               	movwf	4044,c	;volatile
   394                           
   395                           ;tmr1.c: 74: TMR1H = 0xB1;
   396  000364  0EB1               	movlw	177
   397  000366  6ECF               	movwf	4047,c	;volatile
   398                           
   399                           ;tmr1.c: 77: TMR1L = 0xE0;
   400  000368  0EE0               	movlw	224
   401  00036A  6ECE               	movwf	4046,c	;volatile
   402                           
   403                           ;tmr1.c: 80: timer1ReloadVal=TMR1;
   404  00036C  CFCE F05D          	movff	4046,_timer1ReloadVal	;volatile
   405  000370  CFCF F05E          	movff	4047,_timer1ReloadVal+1	;volatile
   406                           
   407                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
   408  000374  909E               	bcf	3998,0,c	;volatile
   409                           
   410                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
   411  000376  809D               	bsf	3997,0,c	;volatile
   412                           
   413                           ;tmr1.c: 89: TMR1_StartTimer();
   414  000378  EC0E  F002         	call	_TMR1_StartTimer	;wreg free
   415  00037C  0012               	return	
   416  00037E                     __end_of_TMR1_Initialize:
   417                           	opt stack 0
   418                           tblptru	equ	0xFF8
   419                           intcon	equ	0xFF2
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           
   423 ;; *************** function _TMR1_StartTimer *****************
   424 ;; Defined at:
   425 ;;		line 92 in file "mcc_generated_files/tmr1.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;		None
   428 ;; Auto vars:     Size  Location     Type
   429 ;;		None
   430 ;; Return value:  Size  Location     Type
   431 ;;		None               void
   432 ;; Registers used:
   433 ;;		None
   434 ;; Tracked objects:
   435 ;;		On entry : 0/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   439 ;;      Params:         0       0       0       0       0       0       0
   440 ;;      Locals:         0       0       0       0       0       0       0
   441 ;;      Temps:          0       0       0       0       0       0       0
   442 ;;      Totals:         0       0       0       0       0       0       0
   443 ;;Total ram usage:        0 bytes
   444 ;; Hardware stack levels used:    1
   445 ;; Hardware stack levels required when called:    3
   446 ;; This function calls:
   447 ;;		Nothing
   448 ;; This function is called by:
   449 ;;		_TMR1_Initialize
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           	psect	text3
   454  00041C                     __ptext3:
   455                           	opt stack 0
   456  00041C                     _TMR1_StartTimer:
   457                           	opt stack 25
   458                           
   459                           ;tmr1.c: 95: T1CONbits.TMR1ON = 1;
   460                           
   461                           ;incstack = 0
   462  00041C  80CD               	bsf	4045,0,c	;volatile
   463  00041E  0012               	return	
   464  000420                     __end_of_TMR1_StartTimer:
   465                           	opt stack 0
   466                           tblptru	equ	0xFF8
   467                           intcon	equ	0xFF2
   468                           postinc0	equ	0xFEE
   469                           wreg	equ	0xFE8
   470                           
   471 ;; *************** function _PIN_MANAGER_Initialize *****************
   472 ;; Defined at:
   473 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;		None
   478 ;; Return value:  Size  Location     Type
   479 ;;		None               void
   480 ;; Registers used:
   481 ;;		wreg, status,2
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   487 ;;      Params:         0       0       0       0       0       0       0
   488 ;;      Locals:         0       0       0       0       0       0       0
   489 ;;      Temps:          0       0       0       0       0       0       0
   490 ;;      Totals:         0       0       0       0       0       0       0
   491 ;;Total ram usage:        0 bytes
   492 ;; Hardware stack levels used:    1
   493 ;; Hardware stack levels required when called:    3
   494 ;; This function calls:
   495 ;;		Nothing
   496 ;; This function is called by:
   497 ;;		_SYSTEM_Initialize
   498 ;; This function uses a non-reentrant model
   499 ;;
   500                           
   501                           	psect	text4
   502  000254                     __ptext4:
   503                           	opt stack 0
   504  000254                     _PIN_MANAGER_Initialize:
   505                           	opt stack 26
   506                           
   507                           ;pin_manager.c: 52: LATA = 0x00;
   508                           
   509                           ;incstack = 0
   510  000254  0E00               	movlw	0
   511  000256  6E89               	movwf	3977,c	;volatile
   512                           
   513                           ;pin_manager.c: 53: TRISA = 0xBE;
   514  000258  0EBE               	movlw	190
   515  00025A  6E92               	movwf	3986,c	;volatile
   516                           
   517                           ;pin_manager.c: 54: ANSELA = 0x2E;
   518  00025C  0E2E               	movlw	46
   519  00025E  010F               	movlb	15	; () banked
   520  000260  6F38               	movwf	56,b	;volatile
   521                           
   522                           ;pin_manager.c: 56: LATB = 0x00;
   523  000262  0E00               	movlw	0
   524  000264  6E8A               	movwf	3978,c	;volatile
   525                           
   526                           ;pin_manager.c: 57: TRISB = 0xF4;
   527  000266  0EF4               	movlw	244
   528  000268  6E93               	movwf	3987,c	;volatile
   529                           
   530                           ;pin_manager.c: 58: ANSELB = 0x34;
   531  00026A  0E34               	movlw	52
   532  00026C  010F               	movlb	15	; () banked
   533  00026E  6F39               	movwf	57,b	;volatile
   534                           
   535                           ;pin_manager.c: 59: WPUB = 0x00;
   536  000270  0E00               	movlw	0
   537  000272  6E61               	movwf	3937,c	;volatile
   538                           
   539                           ;pin_manager.c: 61: LATC = 0x08;
   540  000274  0E08               	movlw	8
   541  000276  6E8B               	movwf	3979,c	;volatile
   542                           
   543                           ;pin_manager.c: 62: TRISC = 0xC4;
   544  000278  0EC4               	movlw	196
   545  00027A  6E94               	movwf	3988,c	;volatile
   546                           
   547                           ;pin_manager.c: 63: ANSELC = 0x04;
   548  00027C  0E04               	movlw	4
   549  00027E  010F               	movlb	15	; () banked
   550  000280  6F3A               	movwf	58,b	;volatile
   551                           
   552                           ;pin_manager.c: 65: LATD = 0x00;
   553  000282  0E00               	movlw	0
   554  000284  6E8C               	movwf	3980,c	;volatile
   555                           
   556                           ;pin_manager.c: 66: TRISD = 0xD1;
   557  000286  0ED1               	movlw	209
   558  000288  6E95               	movwf	3989,c	;volatile
   559                           
   560                           ;pin_manager.c: 67: ANSELD = 0xD1;
   561  00028A  0ED1               	movlw	209
   562  00028C  010F               	movlb	15	; () banked
   563  00028E  6F3B               	movwf	59,b	;volatile
   564                           
   565                           ;pin_manager.c: 69: LATE = 0x00;
   566  000290  0E00               	movlw	0
   567  000292  6E8D               	movwf	3981,c	;volatile
   568                           
   569                           ;pin_manager.c: 70: TRISE = 0x05;
   570  000294  0E05               	movlw	5
   571  000296  6E96               	movwf	3990,c	;volatile
   572                           
   573                           ;pin_manager.c: 71: ANSELE = 0x05;
   574  000298  0E05               	movlw	5
   575  00029A  010F               	movlb	15	; () banked
   576  00029C  6F3C               	movwf	60,b	;volatile
   577                           
   578                           ; BSR set to: 15
   579                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
   580  00029E  8EF1               	bsf	intcon2,7,c	;volatile
   581                           
   582                           ; BSR set to: 15
   583  0002A0  0012               	return	
   584  0002A2                     __end_of_PIN_MANAGER_Initialize:
   585                           	opt stack 0
   586                           tblptru	equ	0xFF8
   587                           intcon	equ	0xFF2
   588                           intcon2	equ	0xFF1
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           
   592 ;; *************** function _OSCILLATOR_Initialize *****************
   593 ;; Defined at:
   594 ;;		line 122 in file "mcc_generated_files/mcc.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;		None
   597 ;; Auto vars:     Size  Location     Type
   598 ;;		None
   599 ;; Return value:  Size  Location     Type
   600 ;;		None               void
   601 ;; Registers used:
   602 ;;		wreg, status,2
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   608 ;;      Params:         0       0       0       0       0       0       0
   609 ;;      Locals:         0       0       0       0       0       0       0
   610 ;;      Temps:          0       0       0       0       0       0       0
   611 ;;      Totals:         0       0       0       0       0       0       0
   612 ;;Total ram usage:        0 bytes
   613 ;; Hardware stack levels used:    1
   614 ;; Hardware stack levels required when called:    3
   615 ;; This function calls:
   616 ;;		Nothing
   617 ;; This function is called by:
   618 ;;		_SYSTEM_Initialize
   619 ;; This function uses a non-reentrant model
   620 ;;
   621                           
   622                           	psect	text5
   623  0003F8                     __ptext5:
   624                           	opt stack 0
   625  0003F8                     _OSCILLATOR_Initialize:
   626                           	opt stack 26
   627                           
   628                           ;mcc.c: 125: OSCCON = 0x62;
   629                           
   630                           ; BSR set to: 15
   631                           ;incstack = 0
   632  0003F8  0E62               	movlw	98
   633  0003FA  6ED3               	movwf	4051,c	;volatile
   634                           
   635                           ;mcc.c: 127: OSCCON2 = 0x04;
   636  0003FC  0E04               	movlw	4
   637  0003FE  6ED2               	movwf	4050,c	;volatile
   638                           
   639                           ;mcc.c: 129: OSCTUNE = 0x00;
   640  000400  0E00               	movlw	0
   641  000402  6E9B               	movwf	3995,c	;volatile
   642  000404  0012               	return	
   643  000406                     __end_of_OSCILLATOR_Initialize:
   644                           	opt stack 0
   645                           tblptru	equ	0xFF8
   646                           intcon	equ	0xFF2
   647                           intcon2	equ	0xFF1
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           
   651 ;; *************** function _INTERRUPT_Initialize *****************
   652 ;; Defined at:
   653 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;		None
   656 ;; Auto vars:     Size  Location     Type
   657 ;;		None
   658 ;; Return value:  Size  Location     Type
   659 ;;		None               void
   660 ;; Registers used:
   661 ;;		None
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   667 ;;      Params:         0       0       0       0       0       0       0
   668 ;;      Locals:         0       0       0       0       0       0       0
   669 ;;      Temps:          0       0       0       0       0       0       0
   670 ;;      Totals:         0       0       0       0       0       0       0
   671 ;;Total ram usage:        0 bytes
   672 ;; Hardware stack levels used:    1
   673 ;; Hardware stack levels required when called:    3
   674 ;; This function calls:
   675 ;;		Nothing
   676 ;; This function is called by:
   677 ;;		_SYSTEM_Initialize
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text6
   682  000406                     __ptext6:
   683                           	opt stack 0
   684  000406                     _INTERRUPT_Initialize:
   685                           	opt stack 26
   686                           
   687                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
   688                           
   689                           ;incstack = 0
   690  000406  9ED0               	bcf	4048,7,c	;volatile
   691                           
   692                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
   693  000408  9A9F               	bcf	3999,5,c	;volatile
   694                           
   695                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
   696  00040A  9C9F               	bcf	3999,6,c	;volatile
   697                           
   698                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
   699  00040C  909F               	bcf	3999,0,c	;volatile
   700                           
   701                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
   702  00040E  989F               	bcf	3999,4,c	;volatile
   703  000410  0012               	return	
   704  000412                     __end_of_INTERRUPT_Initialize:
   705                           	opt stack 0
   706                           tblptru	equ	0xFF8
   707                           intcon	equ	0xFF2
   708                           intcon2	equ	0xFF1
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           
   712 ;; *************** function _EUSART1_Initialize *****************
   713 ;; Defined at:
   714 ;;		line 76 in file "mcc_generated_files/eusart1.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;		None
   717 ;; Auto vars:     Size  Location     Type
   718 ;;		None
   719 ;; Return value:  Size  Location     Type
   720 ;;		None               void
   721 ;; Registers used:
   722 ;;		wreg, status,2
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   728 ;;      Params:         0       0       0       0       0       0       0
   729 ;;      Locals:         0       0       0       0       0       0       0
   730 ;;      Temps:          0       0       0       0       0       0       0
   731 ;;      Totals:         0       0       0       0       0       0       0
   732 ;;Total ram usage:        0 bytes
   733 ;; Hardware stack levels used:    1
   734 ;; Hardware stack levels required when called:    3
   735 ;; This function calls:
   736 ;;		Nothing
   737 ;; This function is called by:
   738 ;;		_SYSTEM_Initialize
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           	psect	text7
   743  0002A2                     __ptext7:
   744                           	opt stack 0
   745  0002A2                     _EUSART1_Initialize:
   746                           	opt stack 26
   747                           
   748                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
   749                           
   750                           ;incstack = 0
   751  0002A2  9A9D               	bcf	3997,5,c	;volatile
   752                           
   753                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
   754  0002A4  989D               	bcf	3997,4,c	;volatile
   755                           
   756                           ;eusart1.c: 85: BAUD1CON = 0x48;
   757  0002A6  0E48               	movlw	72
   758  0002A8  6EB8               	movwf	4024,c	;volatile
   759                           
   760                           ;eusart1.c: 88: RC1STA = 0x98;
   761  0002AA  0E98               	movlw	152
   762  0002AC  6EAB               	movwf	4011,c	;volatile
   763                           
   764                           ;eusart1.c: 91: TX1STA = 0x26;
   765  0002AE  0E26               	movlw	38
   766  0002B0  6EAC               	movwf	4012,c	;volatile
   767                           
   768                           ;eusart1.c: 94: SPBRG1 = 0x22;
   769  0002B2  0E22               	movlw	34
   770  0002B4  6EAF               	movwf	4015,c	;volatile
   771                           
   772                           ;eusart1.c: 97: SPBRGH1 = 0x00;
   773  0002B6  0E00               	movlw	0
   774  0002B8  6EB0               	movwf	4016,c	;volatile
   775                           
   776                           ;eusart1.c: 100: TXREG1 = 0x00;
   777  0002BA  0E00               	movlw	0
   778  0002BC  6EAD               	movwf	4013,c	;volatile
   779                           
   780                           ;eusart1.c: 103: RCREG1 = 0x00;
   781  0002BE  0E00               	movlw	0
   782  0002C0  6EAE               	movwf	4014,c	;volatile
   783                           
   784                           ;eusart1.c: 107: eusart1TxHead = 0;
   785  0002C2  0E00               	movlw	0
   786  0002C4  6E40               	movwf	_eusart1TxHead,c
   787                           
   788                           ;eusart1.c: 108: eusart1TxTail = 0;
   789  0002C6  0E00               	movlw	0
   790  0002C8  6E41               	movwf	_eusart1TxTail,c
   791                           
   792                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
   793  0002CA  0E08               	movlw	8
   794  0002CC  6E5F               	movwf	_eusart1TxBufferRemaining,c	;volatile
   795                           
   796                           ;eusart1.c: 111: eusart1RxHead = 0;
   797  0002CE  0E00               	movlw	0
   798  0002D0  6E3E               	movwf	_eusart1RxHead,c
   799                           
   800                           ;eusart1.c: 112: eusart1RxTail = 0;
   801  0002D2  0E00               	movlw	0
   802  0002D4  6E3F               	movwf	_eusart1RxTail,c
   803                           
   804                           ;eusart1.c: 113: eusart1RxCount = 0;
   805  0002D6  0E00               	movlw	0
   806  0002D8  6E3D               	movwf	_eusart1RxCount,c	;volatile
   807                           
   808                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
   809  0002DA  8A9D               	bsf	3997,5,c	;volatile
   810  0002DC  0012               	return	
   811  0002DE                     __end_of_EUSART1_Initialize:
   812                           	opt stack 0
   813                           tblptru	equ	0xFF8
   814                           intcon	equ	0xFF2
   815                           intcon2	equ	0xFF1
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           
   819 ;; *************** function _ADC_Initialize *****************
   820 ;; Defined at:
   821 ;;		line 12 in file "mcc_generated_files/adc.c"
   822 ;; Parameters:    Size  Location     Type
   823 ;;		None
   824 ;; Auto vars:     Size  Location     Type
   825 ;;		None
   826 ;; Return value:  Size  Location     Type
   827 ;;		None               void
   828 ;; Registers used:
   829 ;;		wreg, status,2
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   835 ;;      Params:         0       0       0       0       0       0       0
   836 ;;      Locals:         0       0       0       0       0       0       0
   837 ;;      Temps:          0       0       0       0       0       0       0
   838 ;;      Totals:         0       0       0       0       0       0       0
   839 ;;Total ram usage:        0 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; Hardware stack levels required when called:    3
   842 ;; This function calls:
   843 ;;		Nothing
   844 ;; This function is called by:
   845 ;;		_SYSTEM_Initialize
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text8
   850  0003CC                     __ptext8:
   851                           	opt stack 0
   852  0003CC                     _ADC_Initialize:
   853                           	opt stack 26
   854                           
   855                           ;adc.c: 17: ADCON0 = 0x01;
   856                           
   857                           ;incstack = 0
   858  0003CC  0E01               	movlw	1
   859  0003CE  6EC2               	movwf	4034,c	;volatile
   860                           
   861                           ;adc.c: 20: ADCON1 = 0x81;
   862  0003D0  0E81               	movlw	129
   863  0003D2  6EC1               	movwf	4033,c	;volatile
   864                           
   865                           ;adc.c: 23: ADCON2 = 0x0A;
   866  0003D4  0E0A               	movlw	10
   867  0003D6  6EC0               	movwf	4032,c	;volatile
   868                           
   869                           ;adc.c: 26: ADRESL = 0x00;
   870  0003D8  0E00               	movlw	0
   871  0003DA  6EC3               	movwf	4035,c	;volatile
   872                           
   873                           ;adc.c: 29: ADRESH = 0x00;
   874  0003DC  0E00               	movlw	0
   875  0003DE  6EC4               	movwf	4036,c	;volatile
   876                           
   877                           ;adc.c: 32: PIE1bits.ADIE = 1;
   878  0003E0  8C9D               	bsf	3997,6,c	;volatile
   879  0003E2  0012               	return	
   880  0003E4                     __end_of_ADC_Initialize:
   881                           	opt stack 0
   882                           tblptru	equ	0xFF8
   883                           intcon	equ	0xFF2
   884                           intcon2	equ	0xFF1
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           
   888 ;; *************** function _INTERRUPT_InterruptManager *****************
   889 ;; Defined at:
   890 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;		None               void
   897 ;; Registers used:
   898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   904 ;;      Params:         0       0       0       0       0       0       0
   905 ;;      Locals:         0       0       0       0       0       0       0
   906 ;;      Temps:         14       0       0       0       0       0       0
   907 ;;      Totals:        14       0       0       0       0       0       0
   908 ;;Total ram usage:       14 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    2
   911 ;; This function calls:
   912 ;;		_ADC_ISR
   913 ;;		_EUSART1_Receive_ISR
   914 ;;		_EUSART1_Transmit_ISR
   915 ;;		_TMR1_ISR
   916 ;; This function is called by:
   917 ;;		Interrupt level 2
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	intcode
   922  000008                     __pintcode:
   923                           	opt stack 0
   924  000008                     _INTERRUPT_InterruptManager:
   925                           	opt stack 25
   926                           
   927                           ;incstack = 0
   928  000008  CFFA F04A          	movff	pclath,??_INTERRUPT_InterruptManager
   929  00000C  CFFB F04B          	movff	pclatu,??_INTERRUPT_InterruptManager+1
   930  000010  CFE9 F04C          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
   931  000014  CFEA F04D          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
   932  000018  CFE1 F04E          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
   933  00001C  CFE2 F04F          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
   934  000020  CFD9 F050          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
   935  000024  CFDA F051          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
   936  000028  CFF3 F052          	movff	prodl,??_INTERRUPT_InterruptManager+8
   937  00002C  CFF4 F053          	movff	prodh,??_INTERRUPT_InterruptManager+9
   938  000030  CFF6 F054          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
   939  000034  CFF7 F055          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
   940  000038  CFF8 F056          	movff	tblptru,??_INTERRUPT_InterruptManager+12
   941  00003C  CFF5 F057          	movff	tablat,??_INTERRUPT_InterruptManager+13
   942                           
   943                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
   944  000040  BA9D               	btfsc	3997,5,c	;volatile
   945  000042  AA9E               	btfss	3998,5,c	;volatile
   946  000044  D003               	goto	i2l258
   947                           
   948                           ;interrupt_manager.c: 73: {
   949                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
   950  000046  EC87  F001         	call	_EUSART1_Receive_ISR	;wreg free
   951                           
   952                           ;interrupt_manager.c: 75: }
   953  00004A  D011               	goto	i2l266
   954  00004C                     i2l258:
   955                           
   956                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
   957  00004C  BC9D               	btfsc	3997,6,c	;volatile
   958  00004E  AC9E               	btfss	3998,6,c	;volatile
   959  000050  D003               	goto	i2l260
   960                           
   961                           ;interrupt_manager.c: 77: {
   962                           ;interrupt_manager.c: 78: ADC_ISR();
   963  000052  EC56  F000         	call	_ADC_ISR	;wreg free
   964                           
   965                           ;interrupt_manager.c: 79: }
   966  000056  D00B               	goto	i2l266
   967  000058                     i2l260:
   968                           
   969                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
   970  000058  B09D               	btfsc	3997,0,c	;volatile
   971  00005A  A09E               	btfss	3998,0,c	;volatile
   972  00005C  D003               	goto	i2l262
   973                           
   974                           ;interrupt_manager.c: 81: {
   975                           ;interrupt_manager.c: 82: TMR1_ISR();
   976  00005E  ECCC  F001         	call	_TMR1_ISR	;wreg free
   977                           
   978                           ;interrupt_manager.c: 83: }
   979  000062  D005               	goto	i2l266
   980  000064                     i2l262:
   981                           
   982                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
   983  000064  B89D               	btfsc	3997,4,c	;volatile
   984  000066  A89E               	btfss	3998,4,c	;volatile
   985  000068  D002               	goto	i2l266
   986                           
   987                           ;interrupt_manager.c: 85: {
   988                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
   989  00006A  EC6F  F001         	call	_EUSART1_Transmit_ISR	;wreg free
   990  00006E                     i2l266:
   991  00006E  C057  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
   992  000072  C056  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
   993  000076  C055  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
   994  00007A  C054  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
   995  00007E  C053  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
   996  000082  C052  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
   997  000086  C051  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
   998  00008A  C050  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
   999  00008E  C04F  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  1000  000092  C04E  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  1001  000096  C04D  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  1002  00009A  C04C  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  1003  00009E  C04B  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  1004  0000A2  C04A  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  1005  0000A6  0011               	retfie		f
  1006  0000A8                     __end_of_INTERRUPT_InterruptManager:
  1007                           	opt stack 0
  1008                           pclatu	equ	0xFFB
  1009                           pclath	equ	0xFFA
  1010                           tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           prodh	equ	0xFF4
  1015                           prodl	equ	0xFF3
  1016                           intcon	equ	0xFF2
  1017                           intcon2	equ	0xFF1
  1018                           postinc0	equ	0xFEE
  1019                           fsr0h	equ	0xFEA
  1020                           fsr0l	equ	0xFE9
  1021                           wreg	equ	0xFE8
  1022                           fsr1h	equ	0xFE2
  1023                           fsr1l	equ	0xFE1
  1024                           fsr2h	equ	0xFDA
  1025                           fsr2l	equ	0xFD9
  1026                           
  1027 ;; *************** function _TMR1_ISR *****************
  1028 ;; Defined at:
  1029 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;		None
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;		None
  1034 ;; Return value:  Size  Location     Type
  1035 ;;		None               void
  1036 ;; Registers used:
  1037 ;;		wreg, status,2, cstack
  1038 ;; Tracked objects:
  1039 ;;		On entry : 0/0
  1040 ;;		On exit  : 0/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1043 ;;      Params:         0       0       0       0       0       0       0
  1044 ;;      Locals:         0       0       0       0       0       0       0
  1045 ;;      Temps:          3       0       0       0       0       0       0
  1046 ;;      Totals:         3       0       0       0       0       0       0
  1047 ;;Total ram usage:        3 bytes
  1048 ;; Hardware stack levels used:    1
  1049 ;; Hardware stack levels required when called:    1
  1050 ;; This function calls:
  1051 ;;		_TMR1_CallBack
  1052 ;; This function is called by:
  1053 ;;		_INTERRUPT_InterruptManager
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text10
  1058  000398                     __ptext10:
  1059                           	opt stack 0
  1060  000398                     _TMR1_ISR:
  1061                           	opt stack 25
  1062                           
  1063                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
  1064                           
  1065                           ;incstack = 0
  1066  000398  909E               	bcf	3998,0,c	;volatile
  1067                           
  1068                           ;tmr1.c: 164: TMR1H = (timer1ReloadVal >> 8);
  1069  00039A  C05E  F042         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  1070  00039E  C042  F043         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  1071  0003A2  6A44               	clrf	(??_TMR1_ISR+2)& (0+255),c
  1072  0003A4  5043               	movf	??_TMR1_ISR+1,w,c
  1073  0003A6  6ECF               	movwf	4047,c	;volatile
  1074                           
  1075                           ;tmr1.c: 165: TMR1L = (uint8_t) timer1ReloadVal;
  1076  0003A8  C05D  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  1077                           
  1078                           ;tmr1.c: 169: TMR1_CallBack();
  1079  0003AC  EC10  F002         	call	_TMR1_CallBack	;wreg free
  1080  0003B0  0012               	return	
  1081  0003B2                     __end_of_TMR1_ISR:
  1082                           	opt stack 0
  1083                           pclatu	equ	0xFFB
  1084                           pclath	equ	0xFFA
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           prodh	equ	0xFF4
  1090                           prodl	equ	0xFF3
  1091                           intcon	equ	0xFF2
  1092                           intcon2	equ	0xFF1
  1093                           postinc0	equ	0xFEE
  1094                           fsr0h	equ	0xFEA
  1095                           fsr0l	equ	0xFE9
  1096                           wreg	equ	0xFE8
  1097                           fsr1h	equ	0xFE2
  1098                           fsr1l	equ	0xFE1
  1099                           fsr2h	equ	0xFDA
  1100                           fsr2l	equ	0xFD9
  1101                           
  1102 ;; *************** function _TMR1_CallBack *****************
  1103 ;; Defined at:
  1104 ;;		line 173 in file "mcc_generated_files/tmr1.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;		None
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;		None
  1109 ;; Return value:  Size  Location     Type
  1110 ;;		None               void
  1111 ;; Registers used:
  1112 ;;		None
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1118 ;;      Params:         0       0       0       0       0       0       0
  1119 ;;      Locals:         0       0       0       0       0       0       0
  1120 ;;      Temps:          0       0       0       0       0       0       0
  1121 ;;      Totals:         0       0       0       0       0       0       0
  1122 ;;Total ram usage:        0 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_TMR1_ISR
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text11
  1132  000420                     __ptext11:
  1133                           	opt stack 0
  1134  000420                     _TMR1_CallBack:
  1135                           	opt stack 25
  1136                           
  1137                           ;incstack = 0
  1138  000420  0012               	return	
  1139  000422                     __end_of_TMR1_CallBack:
  1140                           	opt stack 0
  1141                           pclatu	equ	0xFFB
  1142                           pclath	equ	0xFFA
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           prodh	equ	0xFF4
  1148                           prodl	equ	0xFF3
  1149                           intcon	equ	0xFF2
  1150                           intcon2	equ	0xFF1
  1151                           postinc0	equ	0xFEE
  1152                           fsr0h	equ	0xFEA
  1153                           fsr0l	equ	0xFE9
  1154                           wreg	equ	0xFE8
  1155                           fsr1h	equ	0xFE2
  1156                           fsr1l	equ	0xFE1
  1157                           fsr2h	equ	0xFDA
  1158                           fsr2l	equ	0xFD9
  1159                           
  1160 ;; *************** function _EUSART1_Transmit_ISR *****************
  1161 ;; Defined at:
  1162 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;		None
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;		None
  1167 ;; Return value:  Size  Location     Type
  1168 ;;		None               void
  1169 ;; Registers used:
  1170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1176 ;;      Params:         0       0       0       0       0       0       0
  1177 ;;      Locals:         0       0       0       0       0       0       0
  1178 ;;      Temps:          0       0       0       0       0       0       0
  1179 ;;      Totals:         0       0       0       0       0       0       0
  1180 ;;Total ram usage:        0 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_INTERRUPT_InterruptManager
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           	psect	text12
  1190  0002DE                     __ptext12:
  1191                           	opt stack 0
  1192  0002DE                     _EUSART1_Transmit_ISR:
  1193                           	opt stack 26
  1194                           
  1195                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  1196                           
  1197                           ;incstack = 0
  1198  0002DE  0E08               	movlw	8
  1199  0002E0  5C5F               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  1200  0002E2  B0D8               	btfsc	status,0,c
  1201  0002E4  D012               	goto	i2l122
  1202                           
  1203                           ;eusart1.c: 178: {
  1204                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  1205  0002E6  5041               	movf	_eusart1TxTail,w,c
  1206  0002E8  0D01               	mullw	1
  1207  0002EA  0E31               	movlw	low _eusart1TxBuffer
  1208  0002EC  24F3               	addwf	prodl,w,c
  1209  0002EE  6ED9               	movwf	fsr2l,c
  1210  0002F0  0E00               	movlw	high _eusart1TxBuffer
  1211  0002F2  20F4               	addwfc	prodh,w,c
  1212  0002F4  6EDA               	movwf	fsr2h,c
  1213  0002F6  50DF               	movf	indf2,w,c
  1214  0002F8  6EAD               	movwf	4013,c	;volatile
  1215  0002FA  2A41               	incf	_eusart1TxTail,f,c
  1216                           
  1217                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  1218  0002FC  0E07               	movlw	7
  1219  0002FE  6441               	cpfsgt	_eusart1TxTail,c
  1220  000300  D002               	goto	i2l1010
  1221                           
  1222                           ;eusart1.c: 181: {
  1223                           ;eusart1.c: 182: eusart1TxTail = 0;
  1224  000302  0E00               	movlw	0
  1225  000304  6E41               	movwf	_eusart1TxTail,c
  1226  000306                     i2l1010:
  1227                           
  1228                           ;eusart1.c: 183: }
  1229                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  1230  000306  2A5F               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  1231                           
  1232                           ;eusart1.c: 185: }
  1233  000308  0012               	return	
  1234  00030A                     i2l122:
  1235                           
  1236                           ;eusart1.c: 186: else
  1237                           ;eusart1.c: 187: {
  1238                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  1239  00030A  989D               	bcf	3997,4,c	;volatile
  1240  00030C  0012               	return	
  1241  00030E                     __end_of_EUSART1_Transmit_ISR:
  1242                           	opt stack 0
  1243                           pclatu	equ	0xFFB
  1244                           pclath	equ	0xFFA
  1245                           tblptru	equ	0xFF8
  1246                           tblptrh	equ	0xFF7
  1247                           tblptrl	equ	0xFF6
  1248                           tablat	equ	0xFF5
  1249                           prodh	equ	0xFF4
  1250                           prodl	equ	0xFF3
  1251                           intcon	equ	0xFF2
  1252                           intcon2	equ	0xFF1
  1253                           postinc0	equ	0xFEE
  1254                           fsr0h	equ	0xFEA
  1255                           fsr0l	equ	0xFE9
  1256                           wreg	equ	0xFE8
  1257                           fsr1h	equ	0xFE2
  1258                           fsr1l	equ	0xFE1
  1259                           indf2	equ	0xFDF
  1260                           fsr2h	equ	0xFDA
  1261                           fsr2l	equ	0xFD9
  1262                           status	equ	0xFD8
  1263                           
  1264 ;; *************** function _EUSART1_Receive_ISR *****************
  1265 ;; Defined at:
  1266 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;		None
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;		None
  1271 ;; Return value:  Size  Location     Type
  1272 ;;		None               void
  1273 ;; Registers used:
  1274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1280 ;;      Params:         0       0       0       0       0       0       0
  1281 ;;      Locals:         0       0       0       0       0       0       0
  1282 ;;      Temps:          0       0       0       0       0       0       0
  1283 ;;      Totals:         0       0       0       0       0       0       0
  1284 ;;Total ram usage:        0 bytes
  1285 ;; Hardware stack levels used:    1
  1286 ;; This function calls:
  1287 ;;		Nothing
  1288 ;; This function is called by:
  1289 ;;		_INTERRUPT_InterruptManager
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           	psect	text13
  1294  00030E                     __ptext13:
  1295                           	opt stack 0
  1296  00030E                     _EUSART1_Receive_ISR:
  1297                           	opt stack 26
  1298                           
  1299                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  1300                           
  1301                           ;incstack = 0
  1302  00030E  A2AB               	btfss	4011,1,c	;volatile
  1303  000310  D002               	goto	i2l1016
  1304                           
  1305                           ;eusart1.c: 195: {
  1306                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  1307  000312  98AB               	bcf	4011,4,c	;volatile
  1308                           
  1309                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  1310  000314  88AB               	bsf	4011,4,c	;volatile
  1311  000316                     i2l1016:
  1312                           
  1313                           ;eusart1.c: 200: }
  1314                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  1315  000316  503E               	movf	_eusart1RxHead,w,c
  1316  000318  0D01               	mullw	1
  1317  00031A  0E29               	movlw	low _eusart1RxBuffer
  1318  00031C  24F3               	addwf	prodl,w,c
  1319  00031E  6ED9               	movwf	fsr2l,c
  1320  000320  0E00               	movlw	high _eusart1RxBuffer
  1321  000322  20F4               	addwfc	prodh,w,c
  1322  000324  6EDA               	movwf	fsr2h,c
  1323  000326  CFAE FFDF          	movff	4014,indf2	;volatile
  1324  00032A  2A3E               	incf	_eusart1RxHead,f,c
  1325                           
  1326                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  1327  00032C  0E07               	movlw	7
  1328  00032E  643E               	cpfsgt	_eusart1RxHead,c
  1329  000330  D002               	goto	i2l1024
  1330                           
  1331                           ;eusart1.c: 205: {
  1332                           ;eusart1.c: 206: eusart1RxHead = 0;
  1333  000332  0E00               	movlw	0
  1334  000334  6E3E               	movwf	_eusart1RxHead,c
  1335  000336                     i2l1024:
  1336                           
  1337                           ;eusart1.c: 207: }
  1338                           ;eusart1.c: 208: eusart1RxCount++;
  1339  000336  2A3D               	incf	_eusart1RxCount,f,c	;volatile
  1340  000338  0012               	return	
  1341  00033A                     __end_of_EUSART1_Receive_ISR:
  1342                           	opt stack 0
  1343                           pclatu	equ	0xFFB
  1344                           pclath	equ	0xFFA
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           prodh	equ	0xFF4
  1350                           prodl	equ	0xFF3
  1351                           intcon	equ	0xFF2
  1352                           intcon2	equ	0xFF1
  1353                           postinc0	equ	0xFEE
  1354                           fsr0h	equ	0xFEA
  1355                           fsr0l	equ	0xFE9
  1356                           wreg	equ	0xFE8
  1357                           fsr1h	equ	0xFE2
  1358                           fsr1l	equ	0xFE1
  1359                           indf2	equ	0xFDF
  1360                           fsr2h	equ	0xFDA
  1361                           fsr2l	equ	0xFD9
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function _ADC_ISR *****************
  1365 ;; Defined at:
  1366 ;;		line 81 in file "mcc_generated_files/adc.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;		None
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  ADC_Result      2    6[COMRAM] int 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;		None               void
  1373 ;; Registers used:
  1374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1380 ;;      Params:         0       0       0       0       0       0       0
  1381 ;;      Locals:         2       0       0       0       0       0       0
  1382 ;;      Temps:          2       0       0       0       0       0       0
  1383 ;;      Totals:         4       0       0       0       0       0       0
  1384 ;;Total ram usage:        4 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    1
  1387 ;; This function calls:
  1388 ;;		_ADC_GetConversionResult
  1389 ;;		_ADC_StartConversion
  1390 ;; This function is called by:
  1391 ;;		_INTERRUPT_InterruptManager
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text14
  1396  0000AC                     __ptext14:
  1397                           	opt stack 0
  1398  0000AC                     _ADC_ISR:
  1399                           	opt stack 25
  1400                           
  1401                           ;adc.c: 85: PIR1bits.ADIF = 0;
  1402                           
  1403                           ;incstack = 0
  1404  0000AC  9C9E               	bcf	3998,6,c	;volatile
  1405                           
  1406                           ;adc.c: 86: int ADC_Result = 0;
  1407  0000AE  0E00               	movlw	0
  1408  0000B0  6E49               	movwf	ADC_ISR@ADC_Result+1,c
  1409  0000B2  0E00               	movlw	0
  1410  0000B4  6E48               	movwf	ADC_ISR@ADC_Result,c
  1411                           
  1412                           ;adc.c: 87: if (Temp_Aquire){
  1413  0000B6  503B               	movf	_Temp_Aquire,w,c
  1414  0000B8  B4D8               	btfsc	status,2,c
  1415  0000BA  D064               	goto	i2l1060
  1416                           
  1417                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  1418  0000BC  ECF2  F001         	call	_ADC_GetConversionResult	;wreg free
  1419  0000C0  C042  F048         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  1420  0000C4  C043  F049         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  1421                           
  1422                           ;adc.c: 90: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  1423  0000C8  0E01               	movlw	low _Battery_Adc
  1424  0000CA  6E46               	movwf	??_ADC_ISR& (0+255),c
  1425  0000CC  0E00               	movlw	high _Battery_Adc
  1426  0000CE  6E47               	movwf	(??_ADC_ISR+1)& (0+255),c
  1427  0000D0  90D8               	bcf	status,0,c
  1428  0000D2  3439               	rlcf	_ADC_Buffer_Point,w,c
  1429  0000D4  6ED9               	movwf	fsr2l,c
  1430  0000D6  343A               	rlcf	_ADC_Buffer_Point+1,w,c
  1431  0000D8  6EDA               	movwf	fsr2h,c
  1432  0000DA  5046               	movf	??_ADC_ISR,w,c
  1433  0000DC  26D9               	addwf	fsr2l,f,c
  1434  0000DE  5047               	movf	??_ADC_ISR+1,w,c
  1435  0000E0  22DA               	addwfc	fsr2h,f,c
  1436  0000E2  C048  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  1437  0000E6  C049  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  1438                           
  1439                           ;adc.c: 91: ADC_Buffer_Point++;
  1440  0000EA  4A39               	infsnz	_ADC_Buffer_Point,f,c
  1441  0000EC  2A3A               	incf	_ADC_Buffer_Point+1,f,c
  1442                           
  1443                           ;adc.c: 92: switch ( ADC_Buffer_Point )
  1444  0000EE  D026               	goto	i2l1058
  1445  0000F0                     i2l1036:
  1446                           
  1447                           ;adc.c: 95: ADC_StartConversion(Battery2);
  1448  0000F0  0E03               	movlw	3
  1449  0000F2  ECD9  F001         	call	_ADC_StartConversion
  1450                           
  1451                           ;adc.c: 96: break;
  1452  0000F6  D046               	goto	i2l1060
  1453  0000F8                     i2l1038:
  1454                           
  1455                           ;adc.c: 98: ADC_StartConversion(Battery3);
  1456  0000F8  0E04               	movlw	4
  1457  0000FA  ECD9  F001         	call	_ADC_StartConversion
  1458                           
  1459                           ;adc.c: 99: break;
  1460  0000FE  D042               	goto	i2l1060
  1461  000100                     i2l1040:
  1462                           
  1463                           ;adc.c: 101: ADC_StartConversion(Battery4);
  1464  000100  0E05               	movlw	5
  1465  000102  ECD9  F001         	call	_ADC_StartConversion
  1466                           
  1467                           ;adc.c: 102: break;
  1468  000106  D03E               	goto	i2l1060
  1469  000108                     i2l1042:
  1470                           
  1471                           ;adc.c: 104: ADC_StartConversion(Battery5);
  1472  000108  0E18               	movlw	24
  1473  00010A  ECD9  F001         	call	_ADC_StartConversion
  1474                           
  1475                           ;adc.c: 105: break;
  1476  00010E  D03A               	goto	i2l1060
  1477  000110                     i2l1044:
  1478                           
  1479                           ;adc.c: 107: ADC_StartConversion(Battery6);
  1480  000110  0E1A               	movlw	26
  1481  000112  ECD9  F001         	call	_ADC_StartConversion
  1482                           
  1483                           ;adc.c: 108: break;
  1484  000116  D036               	goto	i2l1060
  1485  000118                     i2l1046:
  1486                           
  1487                           ;adc.c: 110: ADC_StartConversion(Battery7);
  1488  000118  0E1B               	movlw	27
  1489  00011A  ECD9  F001         	call	_ADC_StartConversion
  1490                           
  1491                           ;adc.c: 111: break;
  1492  00011E  D032               	goto	i2l1060
  1493  000120                     i2l1048:
  1494                           
  1495                           ;adc.c: 113: ADC_StartConversion(Battery8);
  1496  000120  0E08               	movlw	8
  1497  000122  ECD9  F001         	call	_ADC_StartConversion
  1498                           
  1499                           ;adc.c: 114: break;
  1500  000126  D02E               	goto	i2l1060
  1501  000128                     i2l1050:
  1502                           
  1503                           ;adc.c: 116: ADC_StartConversion(Battery9);
  1504  000128  0E0B               	movlw	11
  1505  00012A  ECD9  F001         	call	_ADC_StartConversion
  1506                           
  1507                           ;adc.c: 117: break;
  1508  00012E  D02A               	goto	i2l1060
  1509  000130                     i2l1052:
  1510                           
  1511                           ;adc.c: 119: Temp_Aquire = 0;
  1512  000130  0E00               	movlw	0
  1513  000132  6E3B               	movwf	_Temp_Aquire,c
  1514                           
  1515                           ;adc.c: 120: ADC_StartConversion(Battery10);
  1516  000134  0E0D               	movlw	13
  1517  000136  ECD9  F001         	call	_ADC_StartConversion
  1518                           
  1519                           ;adc.c: 121: break;
  1520  00013A  D024               	goto	i2l1060
  1521  00013C                     i2l1058:
  1522  00013C  C039  F046         	movff	_ADC_Buffer_Point,??_ADC_ISR
  1523  000140  C03A  F047         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  1524                           
  1525                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1526                           ; Switch size 1, requested type "space"
  1527                           ; Number of cases is 1, Range of values is 0 to 0
  1528                           ; switch strategies available:
  1529                           ; Name         Instructions Cycles
  1530                           ; simple_byte            4     3 (average)
  1531                           ;	Chosen strategy is simple_byte
  1532  000144  5047               	movf	??_ADC_ISR+1,w,c
  1533  000146  0A00               	xorlw	0	; case 0
  1534  000148  A4D8               	btfss	status,2,c
  1535  00014A  D01C               	goto	i2l1060
  1536                           
  1537                           ; Switch size 1, requested type "space"
  1538                           ; Number of cases is 9, Range of values is 1 to 9
  1539                           ; switch strategies available:
  1540                           ; Name         Instructions Cycles
  1541                           ; simple_byte           28    15 (average)
  1542                           ;	Chosen strategy is simple_byte
  1543  00014C  5046               	movf	??_ADC_ISR,w,c
  1544  00014E  0A01               	xorlw	1	; case 1
  1545  000150  B4D8               	btfsc	status,2,c
  1546  000152  D7CE               	goto	i2l1036
  1547  000154  0A03               	xorlw	3	; case 2
  1548  000156  B4D8               	btfsc	status,2,c
  1549  000158  D7CF               	goto	i2l1038
  1550  00015A  0A01               	xorlw	1	; case 3
  1551  00015C  B4D8               	btfsc	status,2,c
  1552  00015E  D7D0               	goto	i2l1040
  1553  000160  0A07               	xorlw	7	; case 4
  1554  000162  B4D8               	btfsc	status,2,c
  1555  000164  D7D1               	goto	i2l1042
  1556  000166  0A01               	xorlw	1	; case 5
  1557  000168  B4D8               	btfsc	status,2,c
  1558  00016A  D7D2               	goto	i2l1044
  1559  00016C  0A03               	xorlw	3	; case 6
  1560  00016E  B4D8               	btfsc	status,2,c
  1561  000170  D7D3               	goto	i2l1046
  1562  000172  0A01               	xorlw	1	; case 7
  1563  000174  B4D8               	btfsc	status,2,c
  1564  000176  D7D4               	goto	i2l1048
  1565  000178  0A0F               	xorlw	15	; case 8
  1566  00017A  B4D8               	btfsc	status,2,c
  1567  00017C  D7D5               	goto	i2l1050
  1568  00017E  0A01               	xorlw	1	; case 9
  1569  000180  B4D8               	btfsc	status,2,c
  1570  000182  D7D6               	goto	i2l1052
  1571  000184                     i2l1060:
  1572                           
  1573                           ;adc.c: 123: }
  1574                           ;adc.c: 124: if (Volt_Aquire){
  1575  000184  503C               	movf	_Volt_Aquire,w,c
  1576  000186  B4D8               	btfsc	status,2,c
  1577  000188  0012               	return	
  1578                           
  1579                           ;adc.c: 127: ADC_Result = ADC_GetConversionResult();
  1580  00018A  ECF2  F001         	call	_ADC_GetConversionResult	;wreg free
  1581  00018E  C042  F048         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  1582  000192  C043  F049         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  1583                           
  1584                           ;adc.c: 128: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  1585  000196  0E01               	movlw	low _Battery_Adc
  1586  000198  6E46               	movwf	??_ADC_ISR& (0+255),c
  1587  00019A  0E00               	movlw	high _Battery_Adc
  1588  00019C  6E47               	movwf	(??_ADC_ISR+1)& (0+255),c
  1589  00019E  90D8               	bcf	status,0,c
  1590  0001A0  3439               	rlcf	_ADC_Buffer_Point,w,c
  1591  0001A2  6ED9               	movwf	fsr2l,c
  1592  0001A4  343A               	rlcf	_ADC_Buffer_Point+1,w,c
  1593  0001A6  6EDA               	movwf	fsr2h,c
  1594  0001A8  5046               	movf	??_ADC_ISR,w,c
  1595  0001AA  26D9               	addwf	fsr2l,f,c
  1596  0001AC  5047               	movf	??_ADC_ISR+1,w,c
  1597  0001AE  22DA               	addwfc	fsr2h,f,c
  1598  0001B0  C048  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  1599  0001B4  C049  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  1600                           
  1601                           ;adc.c: 129: ADC_Buffer_Point++;
  1602  0001B8  4A39               	infsnz	_ADC_Buffer_Point,f,c
  1603  0001BA  2A3A               	incf	_ADC_Buffer_Point+1,f,c
  1604                           
  1605                           ;adc.c: 130: switch ( ADC_Buffer_Point )
  1606  0001BC  D026               	goto	i2l1090
  1607  0001BE                     i2l1068:
  1608                           
  1609                           ;adc.c: 133: ADC_StartConversion(Battery2);
  1610  0001BE  0E03               	movlw	3
  1611  0001C0  ECD9  F001         	call	_ADC_StartConversion
  1612                           
  1613                           ;adc.c: 134: break;
  1614  0001C4  0012               	return	
  1615  0001C6                     i2l1070:
  1616                           
  1617                           ;adc.c: 136: ADC_StartConversion(Battery3);
  1618  0001C6  0E04               	movlw	4
  1619  0001C8  ECD9  F001         	call	_ADC_StartConversion
  1620                           
  1621                           ;adc.c: 137: break;
  1622  0001CC  0012               	return	
  1623  0001CE                     i2l1072:
  1624                           
  1625                           ;adc.c: 139: ADC_StartConversion(Battery4);
  1626  0001CE  0E05               	movlw	5
  1627  0001D0  ECD9  F001         	call	_ADC_StartConversion
  1628                           
  1629                           ;adc.c: 140: break;
  1630  0001D4  0012               	return	
  1631  0001D6                     i2l1074:
  1632                           
  1633                           ;adc.c: 142: ADC_StartConversion(Battery5);
  1634  0001D6  0E18               	movlw	24
  1635  0001D8  ECD9  F001         	call	_ADC_StartConversion
  1636                           
  1637                           ;adc.c: 143: break;
  1638  0001DC  0012               	return	
  1639  0001DE                     i2l1076:
  1640                           
  1641                           ;adc.c: 145: ADC_StartConversion(Battery6);
  1642  0001DE  0E1A               	movlw	26
  1643  0001E0  ECD9  F001         	call	_ADC_StartConversion
  1644                           
  1645                           ;adc.c: 146: break;
  1646  0001E4  0012               	return	
  1647  0001E6                     i2l1078:
  1648                           
  1649                           ;adc.c: 148: ADC_StartConversion(Battery7);
  1650  0001E6  0E1B               	movlw	27
  1651  0001E8  ECD9  F001         	call	_ADC_StartConversion
  1652                           
  1653                           ;adc.c: 149: break;
  1654  0001EC  0012               	return	
  1655  0001EE                     i2l1080:
  1656                           
  1657                           ;adc.c: 151: ADC_StartConversion(Battery8);
  1658  0001EE  0E08               	movlw	8
  1659  0001F0  ECD9  F001         	call	_ADC_StartConversion
  1660                           
  1661                           ;adc.c: 152: break;
  1662  0001F4  0012               	return	
  1663  0001F6                     i2l1082:
  1664                           
  1665                           ;adc.c: 154: ADC_StartConversion(Battery9);
  1666  0001F6  0E0B               	movlw	11
  1667  0001F8  ECD9  F001         	call	_ADC_StartConversion
  1668                           
  1669                           ;adc.c: 155: break;
  1670  0001FC  0012               	return	
  1671  0001FE                     i2l1084:
  1672                           
  1673                           ;adc.c: 157: Volt_Aquire = 0;
  1674  0001FE  0E00               	movlw	0
  1675  000200  6E3C               	movwf	_Volt_Aquire,c
  1676                           
  1677                           ;adc.c: 158: ADC_StartConversion(Battery10);
  1678  000202  0E0D               	movlw	13
  1679  000204  ECD9  F001         	call	_ADC_StartConversion
  1680                           
  1681                           ;adc.c: 159: break;
  1682  000208  0012               	return	
  1683  00020A                     i2l1090:
  1684  00020A  C039  F046         	movff	_ADC_Buffer_Point,??_ADC_ISR
  1685  00020E  C03A  F047         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  1686                           
  1687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1688                           ; Switch size 1, requested type "space"
  1689                           ; Number of cases is 1, Range of values is 0 to 0
  1690                           ; switch strategies available:
  1691                           ; Name         Instructions Cycles
  1692                           ; simple_byte            4     3 (average)
  1693                           ;	Chosen strategy is simple_byte
  1694  000212  5047               	movf	??_ADC_ISR+1,w,c
  1695  000214  0A00               	xorlw	0	; case 0
  1696  000216  A4D8               	btfss	status,2,c
  1697  000218  0012               	return	
  1698                           
  1699                           ; Switch size 1, requested type "space"
  1700                           ; Number of cases is 9, Range of values is 1 to 9
  1701                           ; switch strategies available:
  1702                           ; Name         Instructions Cycles
  1703                           ; simple_byte           28    15 (average)
  1704                           ;	Chosen strategy is simple_byte
  1705  00021A  5046               	movf	??_ADC_ISR,w,c
  1706  00021C  0A01               	xorlw	1	; case 1
  1707  00021E  B4D8               	btfsc	status,2,c
  1708  000220  D7CE               	goto	i2l1068
  1709  000222  0A03               	xorlw	3	; case 2
  1710  000224  B4D8               	btfsc	status,2,c
  1711  000226  D7CF               	goto	i2l1070
  1712  000228  0A01               	xorlw	1	; case 3
  1713  00022A  B4D8               	btfsc	status,2,c
  1714  00022C  D7D0               	goto	i2l1072
  1715  00022E  0A07               	xorlw	7	; case 4
  1716  000230  B4D8               	btfsc	status,2,c
  1717  000232  D7D1               	goto	i2l1074
  1718  000234  0A01               	xorlw	1	; case 5
  1719  000236  B4D8               	btfsc	status,2,c
  1720  000238  D7D2               	goto	i2l1076
  1721  00023A  0A03               	xorlw	3	; case 6
  1722  00023C  B4D8               	btfsc	status,2,c
  1723  00023E  D7D3               	goto	i2l1078
  1724  000240  0A01               	xorlw	1	; case 7
  1725  000242  B4D8               	btfsc	status,2,c
  1726  000244  D7D4               	goto	i2l1080
  1727  000246  0A0F               	xorlw	15	; case 8
  1728  000248  B4D8               	btfsc	status,2,c
  1729  00024A  D7D5               	goto	i2l1082
  1730  00024C  0A01               	xorlw	1	; case 9
  1731  00024E  A4D8               	btfss	status,2,c
  1732  000250  0012               	return	
  1733  000252  D7D5               	goto	i2l1084
  1734  000254                     __end_of_ADC_ISR:
  1735                           	opt stack 0
  1736                           pclatu	equ	0xFFB
  1737                           pclath	equ	0xFFA
  1738                           tblptru	equ	0xFF8
  1739                           tblptrh	equ	0xFF7
  1740                           tblptrl	equ	0xFF6
  1741                           tablat	equ	0xFF5
  1742                           prodh	equ	0xFF4
  1743                           prodl	equ	0xFF3
  1744                           intcon	equ	0xFF2
  1745                           intcon2	equ	0xFF1
  1746                           postinc0	equ	0xFEE
  1747                           fsr0h	equ	0xFEA
  1748                           fsr0l	equ	0xFE9
  1749                           wreg	equ	0xFE8
  1750                           fsr1h	equ	0xFE2
  1751                           fsr1l	equ	0xFE1
  1752                           indf2	equ	0xFDF
  1753                           postinc2	equ	0xFDE
  1754                           postdec2	equ	0xFDD
  1755                           fsr2h	equ	0xFDA
  1756                           fsr2l	equ	0xFD9
  1757                           status	equ	0xFD8
  1758                           
  1759 ;; *************** function _ADC_StartConversion *****************
  1760 ;; Defined at:
  1761 ;;		line 35 in file "mcc_generated_files/adc.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;  channel         1    wreg     enum E8837
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  channel         1    1[COMRAM] enum E8837
  1766 ;; Return value:  Size  Location     Type
  1767 ;;		None               void
  1768 ;; Registers used:
  1769 ;;		wreg, status,2, status,0
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1775 ;;      Params:         0       0       0       0       0       0       0
  1776 ;;      Locals:         1       0       0       0       0       0       0
  1777 ;;      Temps:          1       0       0       0       0       0       0
  1778 ;;      Totals:         2       0       0       0       0       0       0
  1779 ;;Total ram usage:        2 bytes
  1780 ;; Hardware stack levels used:    1
  1781 ;; This function calls:
  1782 ;;		Nothing
  1783 ;; This function is called by:
  1784 ;;		_ADC_ISR
  1785 ;;		_Battery_Read
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text15
  1790  0003B2                     __ptext15:
  1791                           	opt stack 0
  1792  0003B2                     _ADC_StartConversion:
  1793                           	opt stack 25
  1794                           
  1795                           ;incstack = 0
  1796                           ;ADC_StartConversion@channel stored from wreg
  1797  0003B2  6E43               	movwf	ADC_StartConversion@channel,c
  1798                           
  1799                           ;adc.c: 38: ADCON0bits.CHS = channel;
  1800  0003B4  C043  F042         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  1801  0003B8  4642               	rlncf	??_ADC_StartConversion,f,c
  1802  0003BA  4642               	rlncf	??_ADC_StartConversion,f,c
  1803  0003BC  50C2               	movf	4034,w,c	;volatile
  1804  0003BE  1842               	xorwf	??_ADC_StartConversion,w,c
  1805  0003C0  0B83               	andlw	-125
  1806  0003C2  1842               	xorwf	??_ADC_StartConversion,w,c
  1807  0003C4  6EC2               	movwf	4034,c	;volatile
  1808                           
  1809                           ;adc.c: 41: ADCON0bits.ADON = 1;
  1810  0003C6  80C2               	bsf	4034,0,c	;volatile
  1811                           
  1812                           ;adc.c: 45: ADCON0bits.GO_nDONE = 1;
  1813  0003C8  82C2               	bsf	4034,1,c	;volatile
  1814  0003CA  0012               	return	
  1815  0003CC                     __end_of_ADC_StartConversion:
  1816                           	opt stack 0
  1817                           pclatu	equ	0xFFB
  1818                           pclath	equ	0xFFA
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           prodh	equ	0xFF4
  1824                           prodl	equ	0xFF3
  1825                           intcon	equ	0xFF2
  1826                           intcon2	equ	0xFF1
  1827                           postinc0	equ	0xFEE
  1828                           fsr0h	equ	0xFEA
  1829                           fsr0l	equ	0xFE9
  1830                           wreg	equ	0xFE8
  1831                           fsr1h	equ	0xFE2
  1832                           fsr1l	equ	0xFE1
  1833                           indf2	equ	0xFDF
  1834                           postinc2	equ	0xFDE
  1835                           postdec2	equ	0xFDD
  1836                           fsr2h	equ	0xFDA
  1837                           fsr2l	equ	0xFD9
  1838                           status	equ	0xFD8
  1839                           
  1840 ;; *************** function _ADC_GetConversionResult *****************
  1841 ;; Defined at:
  1842 ;;		line 54 in file "mcc_generated_files/adc.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;		None
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  2    0[COMRAM] unsigned int 
  1849 ;; Registers used:
  1850 ;;		wreg, status,2, status,0
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1856 ;;      Params:         2       0       0       0       0       0       0
  1857 ;;      Locals:         0       0       0       0       0       0       0
  1858 ;;      Temps:          2       0       0       0       0       0       0
  1859 ;;      Totals:         4       0       0       0       0       0       0
  1860 ;;Total ram usage:        4 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; This function calls:
  1863 ;;		Nothing
  1864 ;; This function is called by:
  1865 ;;		_ADC_ISR
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text16
  1870  0003E4                     __ptext16:
  1871                           	opt stack 0
  1872  0003E4                     _ADC_GetConversionResult:
  1873                           	opt stack 25
  1874                           
  1875                           ;adc.c: 57: return ((ADRESH << 8) + ADRESL);
  1876                           
  1877                           ;incstack = 0
  1878  0003E4  50C4               	movf	4036,w,c	;volatile
  1879  0003E6  6E45               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  1880  0003E8  6A44               	clrf	??_ADC_GetConversionResult& (0+255),c
  1881  0003EA  50C3               	movf	4035,w,c	;volatile
  1882  0003EC  2444               	addwf	??_ADC_GetConversionResult,w,c
  1883  0003EE  6E42               	movwf	?_ADC_GetConversionResult,c
  1884  0003F0  0E00               	movlw	0
  1885  0003F2  2045               	addwfc	??_ADC_GetConversionResult+1,w,c
  1886  0003F4  6E43               	movwf	?_ADC_GetConversionResult+1,c
  1887  0003F6  0012               	return	
  1888  0003F8                     __end_of_ADC_GetConversionResult:
  1889                           	opt stack 0
  1890  0000                     pclatu	equ	0xFFB
  1891                           pclath	equ	0xFFA
  1892                           tblptru	equ	0xFF8
  1893                           tblptrh	equ	0xFF7
  1894                           tblptrl	equ	0xFF6
  1895                           tablat	equ	0xFF5
  1896                           prodh	equ	0xFF4
  1897                           prodl	equ	0xFF3
  1898                           intcon	equ	0xFF2
  1899                           intcon2	equ	0xFF1
  1900                           postinc0	equ	0xFEE
  1901                           fsr0h	equ	0xFEA
  1902                           fsr0l	equ	0xFE9
  1903                           wreg	equ	0xFE8
  1904                           fsr1h	equ	0xFE2
  1905                           fsr1l	equ	0xFE1
  1906                           indf2	equ	0xFDF
  1907                           postinc2	equ	0xFDE
  1908                           postdec2	equ	0xFDD
  1909                           fsr2h	equ	0xFDA
  1910                           fsr2l	equ	0xFD9
  1911                           status	equ	0xFD8
  1912                           pclatu	equ	0xFFB
  1913                           pclath	equ	0xFFA
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           prodh	equ	0xFF4
  1919                           prodl	equ	0xFF3
  1920                           intcon	equ	0xFF2
  1921                           intcon2	equ	0xFF1
  1922                           postinc0	equ	0xFEE
  1923                           fsr0h	equ	0xFEA
  1924                           fsr0l	equ	0xFE9
  1925                           wreg	equ	0xFE8
  1926                           fsr1h	equ	0xFE2
  1927                           fsr1l	equ	0xFE1
  1928                           indf2	equ	0xFDF
  1929                           postinc2	equ	0xFDE
  1930                           postdec2	equ	0xFDD
  1931                           fsr2h	equ	0xFDA
  1932                           fsr2l	equ	0xFD9
  1933                           status	equ	0xFD8
  1934                           
  1935                           	psect	rparam
  1936  0000                     pclatu	equ	0xFFB
  1937                           pclath	equ	0xFFA
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           prodh	equ	0xFF4
  1943                           prodl	equ	0xFF3
  1944                           intcon	equ	0xFF2
  1945                           intcon2	equ	0xFF1
  1946                           postinc0	equ	0xFEE
  1947                           fsr0h	equ	0xFEA
  1948                           fsr0l	equ	0xFE9
  1949                           wreg	equ	0xFE8
  1950                           fsr1h	equ	0xFE2
  1951                           fsr1l	equ	0xFE1
  1952                           indf2	equ	0xFDF
  1953                           postinc2	equ	0xFDE
  1954                           postdec2	equ	0xFDD
  1955                           fsr2h	equ	0xFDA
  1956                           fsr2l	equ	0xFD9
  1957                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         85
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     27      95
    BANK0           160      0      20
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _ADC_ISR->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5       0
                                             22 COMRAM     5     0      5
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0      45
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             3     3      0       0
                                              0 COMRAM     3     3      0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              4     4      0      45
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (6) _ADC_StartConversion                                  2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      14       4       12.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1B      5F       1      100.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      73       9        0.0%
DATA                 0      0      73      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Mar 25 19:49:10 2015

           _eusart1TxBufferRemaining 005F                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l297 041A  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 005D                      __end_of_ADC_ISR 0254  
                                prod 000FF3                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               _TMR1 000FCE                                 _WPUB 000F61  
                               _main 0412                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                  ADC_ISR@ADC_Result 0048       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 0406                                ?_main 0058  
                    _TMR1_StartTimer 041C                                _T1CON 000FCD  
                     __CFG_DEBUG$OFF 000000                                i2l122 030A  
                              i2l260 0058                                i2l262 0064  
                              i2l266 006E                                i2l258 004C  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0014  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 02DE                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR1_ISR 03B2                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                   __CFG_MCLRE$EXTMCLR 000000  
            __end_of_TMR1_Initialize 037E                          _Battery_Adc 0001  
                              tablat 000FF5                                status 000FD8  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                    __initialization 033A           __end_of_EUSART1_Initialize 02DE  
                       __end_of_main 041C                            ??_ADC_ISR 0046  
        ?_INTERRUPT_InterruptManager 0042                               ??_main 005D  
                      __activetblptr 000002           ADC_StartConversion@channel 0043  
              ?_EUSART1_Transmit_ISR 0042                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                               _T1GCON 000FCC  
                             _RC1REG 000FAE                               _RC1STA 000FAB  
                             i2l1010 0306                               i2l1040 0100  
                             i2l1024 0336                               i2l1016 0316  
                             i2l1050 0128                               i2l1042 0108  
                             i2l1052 0130                               i2l1044 0110  
                             i2l1036 00F0                               i2l1060 0184  
                             i2l1070 01C6                               i2l1046 0118  
                             i2l1038 00F8                               i2l1080 01EE  
                             i2l1072 01CE                               i2l1048 0120  
                             i2l1082 01F6                               i2l1074 01D6  
                             i2l1090 020A                               i2l1058 013C  
                             i2l1084 01FE                               i2l1076 01DE  
                             i2l1068 01BE                               i2l1078 01E6  
                     __CFG_WDTEN$OFF 000000                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1REG 000FAD                               _TX1STA 000FAC  
                             _TXREG1 000FAD                       __CFG_XINST$OFF 000000  
            __end_of_TMR1_StartTimer 0420                       __CFG_STVREN$ON 000000  
                             clear_0 0340                               clear_1 034C  
                       _Battery_Volt 0015                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    _eusart1RxBuffer 0029        __size_of_INTERRUPT_Initialize 000C  
              __end_of_TMR1_CallBack 0422                      _eusart1TxBuffer 0031  
                   ?_TMR1_Initialize 0042                    _SYSTEM_Initialize 037E  
                         __accesstop 0060              __end_of__initialization 0352  
                 ?_SYSTEM_Initialize 0042         __size_of_ADC_StartConversion 001A  
                     __pcstackCOMRAM 0042                  ??_SYSTEM_Initialize 0058  
                          ?_TMR1_ISR 0042               ??_EUSART1_Transmit_ISR 0042  
            _ADC_GetConversionResult 03E4          __end_of_EUSART1_Receive_ISR 033A  
          __end_of_SYSTEM_Initialize 0398                        _eusart1RxHead 003E  
                      _eusart1TxHead 0040                        _eusart1RxTail 003F  
                         __pbssBANK0 0060                        _eusart1TxTail 0041  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 005D  
                 __CFG_CCP2MX$PORTC1 000000                     ?_TMR1_StartTimer 0042  
                         ??_TMR1_ISR 0042                   __CFG_CCP3MX$PORTB5 000000  
                            _ADC_ISR 00AC              __size_of_ADC_Initialize 0018  
                            _OSCCON2 000FD2                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                        _Temp_Aquire 003B                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                              __Lparam 0000  
          ??_ADC_GetConversionResult 0044                              __pcinit 033A  
                            __ramtop 0600                              __ptext0 0412  
                            __ptext1 037E                              __ptext2 035C  
                            __ptext3 041C                              __ptext4 0254  
                            __ptext5 03F8                              __ptext6 0406  
                            __ptext7 02A2                              __ptext8 03CC  
                          _T1CONbits 000FCD                _OSCILLATOR_Initialize 03F8  
                 _EUSART1_Initialize 02A2             ??_PIN_MANAGER_Initialize 0058  
         __size_of_SYSTEM_Initialize 001A                 end_of_initialization 0352  
                ?_EUSART1_Initialize 0042                        __Lmediumconst 0000  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                 ??_EUSART1_Initialize 0058  
                _ADC_StartConversion 03B2                          _Volt_Aquire 003C  
               ?_ADC_StartConversion 0042         __end_of_INTERRUPT_Initialize 0412  
                  __size_of_TMR1_ISR 001A                       _ADC_Initialize 03CC  
             ?_OSCILLATOR_Initialize 0042                  start_initialization 033A  
    __size_of_PIN_MANAGER_Initialize 004E                ??_ADC_StartConversion 0042  
           __size_of_TMR1_Initialize 0022               __end_of_ADC_Initialize 03E4  
                           ?_ADC_ISR 0042               __size_of_TMR1_CallBack 0002  
                     _eusart1RxCount 003D                          __pbssCOMRAM 0001  
      __size_of_EUSART1_Transmit_ISR 0030         __size_of_EUSART1_Receive_ISR 002C  
             _PIN_MANAGER_Initialize 0254                            __pintcode 0008  
                    ?_ADC_Initialize 0042         ??_INTERRUPT_InterruptManager 004A  
                           _BAUD1CON 000FB8             __size_of_TMR1_StartTimer 0004  
               _INTERRUPT_Initialize 0406                        _TMR1_CallBack 0420  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 00A0                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                           _TMR1_ISR 0398                    ??_TMR1_Initialize 0058  
                   __size_of_ADC_ISR 01A8                           _ADCON0bits 000FC2  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0042  
                     ?_TMR1_CallBack 0042                             __Hrparam 0000  
                           _Temp_Adc 0060                             __Lrparam 0000  
           ?_ADC_GetConversionResult 0042                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0058  
        __size_of_EUSART1_Initialize 003C                             __ptext10 0398  
                           __ptext11 0420                             __ptext12 02DE  
                           __ptext13 030E                           _T1GCONbits 000FCC  
                           __ptext14 00AC                             __ptext15 03B2  
                           __ptext16 03E4                    ??_TMR1_StartTimer 0058  
                      __size_of_main 000A                           _RC1STAbits 000FAB  
 __end_of_INTERRUPT_InterruptManager 00A8           _INTERRUPT_InterruptManager 0008  
                           main@argc 0058                             main@argv 005A  
                _EUSART1_Receive_ISR 030E                           _INTCONbits 000FF2  
             ??_INTERRUPT_Initialize 0058                      ??_TMR1_CallBack 0042  
                           intlevel2 0000                 ?_EUSART1_Receive_ISR 0042  
        __end_of_ADC_StartConversion 03CC              ?_PIN_MANAGER_Initialize 0042  
    __end_of_ADC_GetConversionResult 03F8         __end_of_EUSART1_Transmit_ISR 030E  
                   ??_ADC_Initialize 0058                    __CFG_T3CMX$PORTC0 000000  
              ??_EUSART1_Receive_ISR 0042       __end_of_PIN_MANAGER_Initialize 02A2  
                  __CFG_FOSC$INTIO67 000000                      _TMR1_Initialize 035C  
                   _ADC_Buffer_Point 0039  
