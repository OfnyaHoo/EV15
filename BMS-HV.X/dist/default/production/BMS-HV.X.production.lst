

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jun 14 19:51:45 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  003CD4                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _Transmit_stall
   102  003CD4  01                 	db	1
   103                           
   104                           	psect	idataBANK1
   105  0038A4                     __pidataBANK1:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _Battery_Volt
   109  0038A4  00                 	db	0
   110  0038A5  40                 	db	64
   111  0038A6  40                 	db	64
   112  0038A7  00                 	db	0
   113  0038A8  40                 	db	64
   114  0038A9  40                 	db	64
   115  0038AA  00                 	db	0
   116  0038AB  40                 	db	64
   117  0038AC  40                 	db	64
   118  0038AD  00                 	db	0
   119  0038AE  40                 	db	64
   120  0038AF  40                 	db	64
   121  0038B0  00                 	db	0
   122  0038B1  40                 	db	64
   123  0038B2  40                 	db	64
   124  0038B3  00                 	db	0
   125  0038B4  40                 	db	64
   126  0038B5  40                 	db	64
   127  0038B6  00                 	db	0
   128  0038B7  40                 	db	64
   129  0038B8  40                 	db	64
   130  0038B9  00                 	db	0
   131  0038BA  40                 	db	64
   132  0038BB  40                 	db	64
   133  0038BC  00                 	db	0
   134  0038BD  40                 	db	64
   135  0038BE  40                 	db	64
   136  0038BF  00                 	db	0
   137  0038C0  40                 	db	64
   138  0038C1  40                 	db	64
   139                           
   140                           ;initializer for _Temp_DegF
   141  0038C2  00                 	db	0
   142  0038C3  8C                 	db	140
   143  0038C4  42                 	db	66
   144  0038C5  00                 	db	0
   145  0038C6  8C                 	db	140
   146  0038C7  42                 	db	66
   147  0038C8  00                 	db	0
   148  0038C9  8C                 	db	140
   149  0038CA  42                 	db	66
   150  0038CB  00                 	db	0
   151  0038CC  8C                 	db	140
   152  0038CD  42                 	db	66
   153  0038CE  00                 	db	0
   154  0038CF  8C                 	db	140
   155  0038D0  42                 	db	66
   156  0038D1  00                 	db	0
   157  0038D2  8C                 	db	140
   158  0038D3  42                 	db	66
   159  0038D4  00                 	db	0
   160  0038D5  8C                 	db	140
   161  0038D6  42                 	db	66
   162  0038D7  00                 	db	0
   163  0038D8  8C                 	db	140
   164  0038D9  42                 	db	66
   165  0038DA  00                 	db	0
   166  0038DB  8C                 	db	140
   167  0038DC  42                 	db	66
   168  0038DD  00                 	db	0
   169  0038DE  8C                 	db	140
   170  0038DF  42                 	db	66
   171                           
   172                           	psect	smallconst
   173  000600                     __psmallconst:
   174                           	opt stack 0
   175  000600  00                 	db	0
   176  000601                     log@coeff:
   177                           	opt stack 0
   178  000601  00                 	db	0
   179  000602  00                 	db	0
   180  000603  00                 	db	0
   181  000604  00                 	db	0
   182  000605  80                 	db	128
   183  000606  3F                 	db	63
   184  000607  F0                 	db	240
   185  000608  FF                 	db	255
   186  000609  BE                 	db	190
   187  00060A  E2                 	db	226
   188  00060B  A9                 	db	169
   189  00060C  3E                 	db	62
   190  00060D  83                 	db	131
   191  00060E  76                 	db	118
   192  00060F  BE                 	db	190
   193  000610  AE                 	db	174
   194  000611  2B                 	db	43
   195  000612  3E                 	db	62
   196  000613  3C                 	db	60
   197  000614  C3                 	db	195
   198  000615  BD                 	db	189
   199  000616  D2                 	db	210
   200  000617  13                 	db	19
   201  000618  3D                 	db	61
   202  000619  78                 	db	120
   203  00061A  D3                 	db	211
   204  00061B  BB                 	db	187
   205  00061C                     __end_oflog@coeff:
   206                           	opt stack 0
   207  0000                     _ANSELA	set	3896
   208  0000                     _ANSELB	set	3897
   209  0000                     _ANSELC	set	3898
   210  0000                     _ANSELD	set	3899
   211  0000                     _ANSELE	set	3900
   212  0000                     _TMR1	set	4046
   213  0000                     _ADCON0	set	4034
   214  0000                     _ADCON0bits	set	4034
   215  0000                     _ADCON1	set	4033
   216  0000                     _ADCON2	set	4032
   217  0000                     _ADRESH	set	4036
   218  0000                     _ADRESL	set	4035
   219  0000                     _BAUD1CON	set	4024
   220  0000                     _INTCON2bits	set	4081
   221  0000                     _INTCONbits	set	4082
   222  0000                     _IPR1bits	set	3999
   223  0000                     _LATA	set	3977
   224  0000                     _LATAbits	set	3977
   225  0000                     _LATB	set	3978
   226  0000                     _LATC	set	3979
   227  0000                     _LATD	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _LATEbits	set	3981
   230  0000                     _OSCCON	set	4051
   231  0000                     _OSCCON2	set	4050
   232  0000                     _OSCTUNE	set	3995
   233  0000                     _PIE1bits	set	3997
   234  0000                     _PIR1bits	set	3998
   235  0000                     _RC1STA	set	4011
   236  0000                     _RC1STAbits	set	4011
   237  0000                     _RCONbits	set	4048
   238  0000                     _RCREG1	set	4014
   239  0000                     _SPBRG1	set	4015
   240  0000                     _SPBRGH1	set	4016
   241  0000                     _T1CON	set	4045
   242  0000                     _T1CONbits	set	4045
   243  0000                     _T1GCON	set	4044
   244  0000                     _T1GCONbits	set	4044
   245  0000                     _TMR1H	set	4047
   246  0000                     _TMR1L	set	4046
   247  0000                     _TRISA	set	3986
   248  0000                     _TRISB	set	3987
   249  0000                     _TRISC	set	3988
   250  0000                     _TRISCbits	set	3988
   251  0000                     _TRISD	set	3989
   252  0000                     _TRISE	set	3990
   253  0000                     _TX1STA	set	4012
   254  0000                     _TXREG1	set	4013
   255  0000                     _WPUB	set	3937
   256  0000                     _LATA0	set	31816
   257  0000                     _LATA4	set	31820
   258  0000                     _LATA6	set	31822
   259  0000                     _LATB0	set	31824
   260  0000                     _LATB1	set	31825
   261  0000                     _LATB3	set	31827
   262  0000                     _LATC0	set	31832
   263  0000                     _LATC1	set	31833
   264  0000                     _LATC4	set	31836
   265  0000                     _LATC5	set	31837
   266  0000                     _LATD1	set	31841
   267  0000                     _LATD2	set	31842
   268  0000                     _LATD3	set	31843
   269  0000                     _LATD5	set	31845
   270                           
   271                           ; #config settings
   272  00061C  00                 	db	0	; dummy byte at the end
   273  0000                     
   274                           	psect	cinit
   275  00342A                     __pcinit:
   276                           	opt stack 0
   277  00342A                     start_initialization:
   278                           	opt stack 0
   279  00342A                     __initialization:
   280                           	opt stack 0
   281                           
   282                           ; Clear objects allocated to BANK5 (206 bytes)
   283  00342A  EE05  F000         	lfsr	0,__pbssBANK5
   284  00342E  0ECE               	movlw	206
   285  003430                     clear_0:
   286  003430  6AEE               	clrf	postinc0,c
   287  003432  06E8               	decf	wreg,f,c
   288  003434  E1FD               	bnz	clear_0
   289                           
   290                           ; Clear objects allocated to BANK4 (206 bytes)
   291  003436  EE04  F000         	lfsr	0,__pbssBANK4
   292  00343A  0ECE               	movlw	206
   293  00343C                     clear_1:
   294  00343C  6AEE               	clrf	postinc0,c
   295  00343E  06E8               	decf	wreg,f,c
   296  003440  E1FD               	bnz	clear_1
   297                           
   298                           ; Clear objects allocated to BANK3 (200 bytes)
   299  003442  EE03  F000         	lfsr	0,__pbssBANK3
   300  003446  0EC8               	movlw	200
   301  003448                     clear_2:
   302  003448  6AEE               	clrf	postinc0,c
   303  00344A  06E8               	decf	wreg,f,c
   304  00344C  E1FD               	bnz	clear_2
   305                           
   306                           ; Clear objects allocated to BANK2 (206 bytes)
   307  00344E  EE02  F000         	lfsr	0,__pbssBANK2
   308  003452  0ECE               	movlw	206
   309  003454                     clear_3:
   310  003454  6AEE               	clrf	postinc0,c
   311  003456  06E8               	decf	wreg,f,c
   312  003458  E1FD               	bnz	clear_3
   313                           
   314                           ; Clear objects allocated to BANK1 (160 bytes)
   315  00345A  EE01  F000         	lfsr	0,__pbssBANK1
   316  00345E  0EA0               	movlw	160
   317  003460                     clear_4:
   318  003460  6AEE               	clrf	postinc0,c
   319  003462  06E8               	decf	wreg,f,c
   320  003464  E1FD               	bnz	clear_4
   321                           
   322                           ; Clear objects allocated to BANK0 (97 bytes)
   323  003466  EE00  F060         	lfsr	0,__pbssBANK0
   324  00346A  0E61               	movlw	97
   325  00346C                     clear_5:
   326  00346C  6AEE               	clrf	postinc0,c
   327  00346E  06E8               	decf	wreg,f,c
   328  003470  E1FD               	bnz	clear_5
   329                           
   330                           ; Clear objects allocated to COMRAM (24 bytes)
   331  003472  EE00  F02D         	lfsr	0,__pbssCOMRAM
   332  003476  0E18               	movlw	24
   333  003478                     clear_6:
   334  003478  6AEE               	clrf	postinc0,c
   335  00347A  06E8               	decf	wreg,f,c
   336  00347C  E1FD               	bnz	clear_6
   337                           
   338                           ; Initialize objects allocated to BANK1 (60 bytes)
   339                           ; load TBLPTR registers with __pidataBANK1
   340  00347E  0EA4               	movlw	low __pidataBANK1
   341  003480  6EF6               	movwf	tblptrl,c
   342  003482  0E38               	movlw	high __pidataBANK1
   343  003484  6EF7               	movwf	tblptrh,c
   344  003486  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   345  003488  6EF8               	movwf	tblptru,c
   346  00348A  EE01  F0A0         	lfsr	0,__pdataBANK1
   347  00348E  EE10 F03C          	lfsr	1,60
   348  003492                     copy_data0:
   349  003492  0009               	tblrd		*+
   350  003494  CFF5 FFEE          	movff	tablat,postinc0
   351  003498  50E5               	movf	postdec1,w,c
   352  00349A  50E1               	movf	fsr1l,w,c
   353  00349C  E1FA               	bnz	copy_data0
   354                           
   355                           ; Initialize objects allocated to COMRAM (1 bytes)
   356                           ; load TBLPTR registers with __pidataCOMRAM
   357  00349E  0ED4               	movlw	low __pidataCOMRAM
   358  0034A0  6EF6               	movwf	tblptrl,c
   359  0034A2  0E3C               	movlw	high __pidataCOMRAM
   360  0034A4  6EF7               	movwf	tblptrh,c
   361  0034A6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   362  0034A8  6EF8               	movwf	tblptru,c
   363  0034AA  0009               	tblrd		*+	;fetch initializer
   364  0034AC  CFF5 F045          	movff	tablat,__pdataCOMRAM
   365  0034B0                     end_of_initialization:
   366                           	opt stack 0
   367  0034B0                     __end_of__initialization:
   368                           	opt stack 0
   369  0034B0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   370  0034B2  6EF8               	movwf	tblptru,c
   371  0034B4  0100               	movlb	0
   372  0034B6  EF30  F01C         	goto	_main	;jump to C main() function
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1l	equ	0xFE1
   381                           
   382                           	psect	bssCOMRAM
   383  00002D                     __pbssCOMRAM:
   384                           	opt stack 0
   385  00002D                     _ADC_Buffer_Point:
   386                           	opt stack 0
   387  00002D                     	ds	2
   388  00002F                     _CountCallBack:
   389                           	opt stack 0
   390  00002F                     	ds	2
   391  000031                     _serial_available:
   392                           	opt stack 0
   393  000031                     	ds	2
   394  000033                     _serial_read:
   395                           	opt stack 0
   396  000033                     	ds	2
   397  000035                     _serial_write:
   398                           	opt stack 0
   399  000035                     	ds	2
   400  000037                     _timer1ReloadVal:
   401                           	opt stack 0
   402  000037                     	ds	2
   403  000039                     _AKNAKsend:
   404                           	opt stack 0
   405  000039                     	ds	1
   406  00003A                     _Temp_Aquire:
   407                           	opt stack 0
   408  00003A                     	ds	1
   409  00003B                     _Volt_Aquire:
   410                           	opt stack 0
   411  00003B                     	ds	1
   412  00003C                     _calc_CS:
   413                           	opt stack 0
   414  00003C                     	ds	1
   415  00003D                     _maxDataAddress:
   416                           	opt stack 0
   417  00003D                     	ds	1
   418  00003E                     _moduleAddress:
   419                           	opt stack 0
   420  00003E                     	ds	1
   421  00003F                     _returnAddress:
   422                           	opt stack 0
   423  00003F                     	ds	1
   424  000040                     _rx_address:
   425                           	opt stack 0
   426  000040                     	ds	1
   427  000041                     _rx_array_inx:
   428                           	opt stack 0
   429  000041                     	ds	1
   430  000042                     _rx_len:
   431                           	opt stack 0
   432  000042                     	ds	1
   433  000043                     _group:
   434                           	opt stack 0
   435  000043                     	ds	2
   436                           tblptru	equ	0xFF8
   437                           tblptrh	equ	0xFF7
   438                           tblptrl	equ	0xFF6
   439                           tablat	equ	0xFF5
   440                           postinc0	equ	0xFEE
   441                           wreg	equ	0xFE8
   442                           postdec1	equ	0xFE5
   443                           fsr1l	equ	0xFE1
   444                           
   445                           	psect	dataCOMRAM
   446  000045                     __pdataCOMRAM:
   447                           	opt stack 0
   448  000045                     _Transmit_stall:
   449                           	opt stack 0
   450  000045                     	ds	1
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           	psect	bssBANK0
   461  000060                     __pbssBANK0:
   462                           	opt stack 0
   463  000060                     _Battery_Adc:
   464                           	opt stack 0
   465  000060                     	ds	40
   466  000088                     _Temp_Done:
   467                           	opt stack 0
   468  000088                     	ds	2
   469  00008A                     _Volt_Done:
   470                           	opt stack 0
   471  00008A                     	ds	2
   472  00008C                     _addressErrorCounter:
   473                           	opt stack 0
   474  00008C                     	ds	2
   475  00008E                     _alignErrorCounter:
   476                           	opt stack 0
   477  00008E                     	ds	2
   478  000090                     _crcErrorCounter:
   479                           	opt stack 0
   480  000090                     	ds	2
   481  000092                     _dataAdressErrorCounter:
   482                           	opt stack 0
   483  000092                     	ds	2
   484  000094                     _errno:
   485                           	opt stack 0
   486  000094                     	ds	2
   487  000096                     _receiveArrayAddress:
   488                           	opt stack 0
   489  000096                     	ds	2
   490  000098                     _sendStructAddress:
   491                           	opt stack 0
   492  000098                     	ds	2
   493  00009A                     _serial_peek:
   494                           	opt stack 0
   495  00009A                     	ds	2
   496  00009C                     _Temp_Adc:
   497                           	opt stack 0
   498  00009C                     	ds	20
   499  0000B0                     _crc_buffer:
   500                           	opt stack 0
   501  0000B0                     	ds	17
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           postdec1	equ	0xFE5
   509                           fsr1l	equ	0xFE1
   510                           
   511                           	psect	bssBANK1
   512  000100                     __pbssBANK1:
   513                           	opt stack 0
   514  000100                     _PrevBattery_Volt:
   515                           	opt stack 0
   516  000100                     	ds	30
   517  00011E                     _PrevTemp_DegF:
   518                           	opt stack 0
   519  00011E                     	ds	30
   520  00013C                     _TempBattery_Volt:
   521                           	opt stack 0
   522  00013C                     	ds	30
   523  00015A                     _receiveArray:
   524                           	opt stack 0
   525  00015A                     	ds	40
   526  000182                     _TmpTemp_DegF:
   527                           	opt stack 0
   528  000182                     	ds	30
   529                           tblptru	equ	0xFF8
   530                           tblptrh	equ	0xFF7
   531                           tblptrl	equ	0xFF6
   532                           tablat	equ	0xFF5
   533                           postinc0	equ	0xFEE
   534                           wreg	equ	0xFE8
   535                           postdec1	equ	0xFE5
   536                           fsr1l	equ	0xFE1
   537                           
   538                           	psect	dataBANK1
   539  0001A0                     __pdataBANK1:
   540                           	opt stack 0
   541  0001A0                     _Battery_Volt:
   542                           	opt stack 0
   543  0001A0                     	ds	30
   544  0001BE                     _Temp_DegF:
   545                           	opt stack 0
   546  0001BE                     	ds	30
   547                           tblptru	equ	0xFF8
   548                           tblptrh	equ	0xFF7
   549                           tblptrl	equ	0xFF6
   550                           tablat	equ	0xFF5
   551                           postinc0	equ	0xFEE
   552                           wreg	equ	0xFE8
   553                           postdec1	equ	0xFE5
   554                           fsr1l	equ	0xFE1
   555                           
   556                           	psect	bssBANK2
   557  000200                     __pbssBANK2:
   558                           	opt stack 0
   559  000200                     _ring_buffer:
   560                           	opt stack 0
   561  000200                     	ds	206
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           postdec1	equ	0xFE5
   569                           fsr1l	equ	0xFE1
   570                           
   571                           	psect	bssBANK3
   572  000300                     __pbssBANK3:
   573                           	opt stack 0
   574  000300                     _rx_buffer:
   575                           	opt stack 0
   576  000300                     	ds	200
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           postdec1	equ	0xFE5
   584                           fsr1l	equ	0xFE1
   585                           
   586                           	psect	bssBANK4
   587  000400                     __pbssBANK4:
   588                           	opt stack 0
   589  000400                     _input_buffer:
   590                           	opt stack 0
   591  000400                     	ds	206
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           postdec1	equ	0xFE5
   599                           fsr1l	equ	0xFE1
   600                           
   601                           	psect	bssBANK5
   602  000500                     __pbssBANK5:
   603                           	opt stack 0
   604  000500                     _output_buffer:
   605                           	opt stack 0
   606  000500                     	ds	206
   607                           tblptru	equ	0xFF8
   608                           tblptrh	equ	0xFF7
   609                           tblptrl	equ	0xFF6
   610                           tablat	equ	0xFF5
   611                           postinc0	equ	0xFEE
   612                           wreg	equ	0xFE8
   613                           postdec1	equ	0xFE5
   614                           fsr1l	equ	0xFE1
   615                           
   616                           	psect	cstackBANK1
   617  0001DC                     __pcstackBANK1:
   618                           	opt stack 0
   619  0001DC                     _Temp_Convert$2201:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x0
   623  0001DC                     	ds	2
   624  0001DE                     _Temp_Convert$2202:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x2
   628  0001DE                     	ds	2
   629  0001E0                     Temp_Convert@x:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x4
   633  0001E0                     	ds	2
   634  0001E2                     Temp_Convert@steinhart:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x6
   638  0001E2                     	ds	3
   639  0001E5                     
   640                           ; 2 bytes @ 0x9
   641  0001E5                     	ds	2
   642  0001E7                     
   643                           ; 3 bytes @ 0xB
   644  0001E7                     	ds	3
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           postinc0	equ	0xFEE
   650                           wreg	equ	0xFE8
   651                           postdec1	equ	0xFE5
   652                           fsr1l	equ	0xFE1
   653                           
   654                           	psect	cstackBANK0
   655  0000C1                     __pcstackBANK0:
   656                           	opt stack 0
   657  0000C1                     ?___ftdiv:
   658                           	opt stack 0
   659  0000C1                     CRCcheck@SentCRC:
   660                           	opt stack 0
   661  0000C1                     RunBypas@cellbyp:
   662                           	opt stack 0
   663  0000C1                     begin@ptr:
   664                           	opt stack 0
   665  0000C1                     ___ftdiv@f1:
   666                           	opt stack 0
   667                           
   668                           ; 3 bytes @ 0x0
   669  0000C1                     	ds	1
   670  0000C2                     CRCcheck@calculatedCRC:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x1
   674  0000C2                     	ds	1
   675  0000C3                     begin@maxSize:
   676                           	opt stack 0
   677  0000C3                     RunBypas@batvolt:
   678                           	opt stack 0
   679  0000C3                     CRCcheck@arrayHolder:
   680                           	opt stack 0
   681                           
   682                           ; 3 bytes @ 0x2
   683  0000C3                     	ds	1
   684  0000C4                     begin@givenAddress:
   685                           	opt stack 0
   686  0000C4                     ___ftdiv@f2:
   687                           	opt stack 0
   688                           
   689                           ; 3 bytes @ 0x3
   690  0000C4                     	ds	1
   691  0000C5                     begin@error:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x4
   695  0000C5                     	ds	1
   696  0000C6                     RunBypas@i:
   697                           	opt stack 0
   698  0000C6                     begin@stufftosend:
   699                           	opt stack 0
   700  0000C6                     CRCcheck@rt:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x5
   704  0000C6                     	ds	1
   705  0000C7                     ??___ftdiv:
   706                           
   707                           ; 0 bytes @ 0x6
   708  0000C7                     	ds	1
   709  0000C8                     begin@stufftoreceive:
   710                           	opt stack 0
   711  0000C8                     receiveData@holder:
   712                           	opt stack 0
   713                           
   714                           ; 3 bytes @ 0x7
   715  0000C8                     	ds	2
   716  0000CA                     ___ftdiv@cntr:
   717                           	opt stack 0
   718  0000CA                     begin@stuffavailable:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x9
   722  0000CA                     	ds	1
   723  0000CB                     receiveData@holder_1130:
   724                           	opt stack 0
   725  0000CB                     ___ftdiv@f3:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0xA
   729  0000CB                     	ds	1
   730  0000CC                     begin@stuffpeek:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0xB
   734  0000CC                     	ds	2
   735  0000CE                     receiveData@crcHolder:
   736                           	opt stack 0
   737  0000CE                     ___ftdiv@exp:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xD
   741  0000CE                     	ds	1
   742  0000CF                     receiveData@crcHolder_1131:
   743                           	opt stack 0
   744  0000CF                     ___ftdiv@sign:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0xE
   748  0000CF                     	ds	1
   749  0000D0                     ?___ftmul:
   750                           	opt stack 0
   751  0000D0                     receiveData@u:
   752                           	opt stack 0
   753  0000D0                     ___ftmul@f1:
   754                           	opt stack 0
   755                           
   756                           ; 3 bytes @ 0xF
   757  0000D0                     	ds	2
   758  0000D2                     receiveData@r:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x11
   762  0000D2                     	ds	1
   763  0000D3                     ___ftmul@f2:
   764                           	opt stack 0
   765                           
   766                           ; 3 bytes @ 0x12
   767  0000D3                     	ds	3
   768  0000D6                     ??___ftmul:
   769                           
   770                           ; 0 bytes @ 0x15
   771  0000D6                     	ds	3
   772  0000D9                     ___ftmul@exp:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x18
   776  0000D9                     	ds	1
   777  0000DA                     ___ftmul@f3_as_product:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x19
   781  0000DA                     	ds	3
   782  0000DD                     ___ftmul@cntr:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x1C
   786  0000DD                     	ds	1
   787  0000DE                     ___ftmul@sign:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x1D
   791  0000DE                     	ds	1
   792  0000DF                     ?___ftadd:
   793                           	opt stack 0
   794  0000DF                     ?___fttol:
   795                           	opt stack 0
   796  0000DF                     ___ftadd@f1:
   797                           	opt stack 0
   798  0000DF                     ___fttol@f1:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x1E
   802  0000DF                     	ds	3
   803  0000E2                     ___ftadd@f2:
   804                           	opt stack 0
   805                           
   806                           ; 3 bytes @ 0x21
   807  0000E2                     	ds	1
   808  0000E3                     ??___fttol:
   809                           
   810                           ; 0 bytes @ 0x22
   811  0000E3                     	ds	2
   812  0000E5                     ??___ftadd:
   813                           
   814                           ; 0 bytes @ 0x24
   815  0000E5                     	ds	3
   816  0000E8                     ___ftadd@sign:
   817                           	opt stack 0
   818  0000E8                     ___fttol@sign1:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x27
   822  0000E8                     	ds	1
   823  0000E9                     ___ftadd@exp2:
   824                           	opt stack 0
   825  0000E9                     ___fttol@lval:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x28
   829  0000E9                     	ds	1
   830  0000EA                     ___ftadd@exp1:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x29
   834  0000EA                     	ds	1
   835  0000EB                     ??_Battery_Convert:
   836  0000EB                     ?___ftsub:
   837                           	opt stack 0
   838  0000EB                     ?_eval_poly:
   839                           	opt stack 0
   840  0000EB                     Temp_Filter@x:
   841                           	opt stack 0
   842  0000EB                     ___ftsub@f1:
   843                           	opt stack 0
   844  0000EB                     eval_poly@x:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x2A
   848  0000EB                     	ds	2
   849  0000ED                     ___fttol@exp1:
   850                           	opt stack 0
   851  0000ED                     Battery_Convert@x:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x2C
   855  0000ED                     	ds	1
   856  0000EE                     ToSend@what:
   857                           	opt stack 0
   858  0000EE                     eval_poly@d:
   859                           	opt stack 0
   860  0000EE                     ___ftsub@f2:
   861                           	opt stack 0
   862                           
   863                           ; 3 bytes @ 0x2D
   864  0000EE                     	ds	2
   865  0000F0                     ToSend@where:
   866                           	opt stack 0
   867  0000F0                     eval_poly@n:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x2F
   871  0000F0                     	ds	2
   872  0000F2                     ??_eval_poly:
   873                           
   874                           ; 0 bytes @ 0x31
   875  0000F2                     	ds	2
   876  0000F4                     eval_poly@res:
   877                           	opt stack 0
   878                           
   879                           ; 3 bytes @ 0x33
   880  0000F4                     	ds	3
   881  0000F7                     ?_log:
   882                           	opt stack 0
   883  0000F7                     log@x:
   884                           	opt stack 0
   885                           
   886                           ; 3 bytes @ 0x36
   887  0000F7                     	ds	3
   888  0000FA                     log@exponent:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x39
   892  0000FA                     	ds	2
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           postdec1	equ	0xFE5
   900                           fsr1l	equ	0xFE1
   901                           
   902                           	psect	cstackCOMRAM
   903  000001                     __pcstackCOMRAM:
   904                           	opt stack 0
   905  000001                     ??_ADC_StartConversion:
   906  000001                     ?_ADC_GetConversionResult:
   907                           	opt stack 0
   908  000001                     ?i2_UART_buff_size:
   909                           	opt stack 0
   910  000001                     ?i2_UART_buff_modulo_inc:
   911                           	opt stack 0
   912  000001                     Set_4051@Channel:
   913                           	opt stack 0
   914  000001                     i2UART_buff_size@_this:
   915                           	opt stack 0
   916  000001                     i2UART_buff_modulo_inc@value:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x0
   920  000001                     	ds	1
   921  000002                     ADC_StartConversion@channel:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x1
   925  000002                     	ds	1
   926  000003                     ??_Set_4051:
   927  000003                     ??_ADC_GetConversionResult:
   928  000003                     i2UART_buff_modulo_inc@modulus:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x2
   932  000003                     	ds	2
   933  000005                     ??_ADC_ISR:
   934  000005                     i2UART_buff_modulo_inc@my_value:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x4
   938  000005                     	ds	2
   939  000007                     i2UART_buff_put@_this:
   940                           	opt stack 0
   941  000007                     i2UART_buff_get@_this:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x6
   945  000007                     	ds	2
   946  000009                     ??i2_UART_buff_get:
   947  000009                     i2UART_buff_put@c:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x8
   951  000009                     	ds	1
   952  00000A                     ??i2_UART_buff_put:
   953                           
   954                           ; 0 bytes @ 0x9
   955  00000A                     	ds	1
   956  00000B                     i2UART_buff_get@c:
   957                           	opt stack 0
   958  00000B                     ADC_ISR@ADC_Result:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0xA
   962  00000B                     	ds	1
   963  00000C                     EUSART1_Receive_ISR@data:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0xB
   967  00000C                     	ds	1
   968  00000D                     ??_INTERRUPT_InterruptManager:
   969                           
   970                           ; 0 bytes @ 0xC
   971  00000D                     	ds	14
   972  00001B                     ?_FastTransfer_buffer_modulo_inc:
   973                           	opt stack 0
   974  00001B                     ?_UART_buff_modulo_inc:
   975                           	opt stack 0
   976  00001B                     ?_UART_buff_size:
   977                           	opt stack 0
   978  00001B                     ?___wmul:
   979                           	opt stack 0
   980  00001B                     ?___awdiv:
   981                           	opt stack 0
   982  00001B                     ?___ftpack:
   983                           	opt stack 0
   984  00001B                     ?_frexp:
   985                           	opt stack 0
   986  00001B                     SetBypass@pin:
   987                           	opt stack 0
   988  00001B                     CRC8@data:
   989                           	opt stack 0
   990  00001B                     FastTransfer_buffer_modulo_inc@value:
   991                           	opt stack 0
   992  00001B                     crcBufS_put@_this:
   993                           	opt stack 0
   994  00001B                     crcBufS_status_put@_this:
   995                           	opt stack 0
   996  00001B                     crcBufS_get@_this:
   997                           	opt stack 0
   998  00001B                     UART_buff_size@_this:
   999                           	opt stack 0
  1000  00001B                     UART_buff_modulo_inc@value:
  1001                           	opt stack 0
  1002  00001B                     UART_buff_peek@_this:
  1003                           	opt stack 0
  1004  00001B                     ___wmul@multiplier:
  1005                           	opt stack 0
  1006  00001B                     ___awdiv@dividend:
  1007                           	opt stack 0
  1008  00001B                     memset@p1:
  1009                           	opt stack 0
  1010  00001B                     ___ftpack@arg:
  1011                           	opt stack 0
  1012  00001B                     frexp@value:
  1013                           	opt stack 0
  1014  00001B                     Delay@d_lenth:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x1A
  1018  00001B                     	ds	2
  1019  00001D                     ??_UART_buff_peek:
  1020  00001D                     ?_Receive_available:
  1021                           	opt stack 0
  1022  00001D                     CRC8@len:
  1023                           	opt stack 0
  1024  00001D                     crcBufS_put@address:
  1025                           	opt stack 0
  1026  00001D                     crcBufS_status_put@time:
  1027                           	opt stack 0
  1028  00001D                     crcBufS_get@time:
  1029                           	opt stack 0
  1030  00001D                     SetBypass@state:
  1031                           	opt stack 0
  1032  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1033                           	opt stack 0
  1034  00001D                     UART_buff_modulo_inc@modulus:
  1035                           	opt stack 0
  1036  00001D                     ___wmul@multiplicand:
  1037                           	opt stack 0
  1038  00001D                     ___awdiv@divisor:
  1039                           	opt stack 0
  1040  00001D                     memset@c:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x1C
  1044  00001D                     	ds	1
  1045  00001E                     CRC8@sum:
  1046                           	opt stack 0
  1047  00001E                     crcBufS_put@oldCRC:
  1048                           	opt stack 0
  1049  00001E                     crcBufS_status_put@status:
  1050                           	opt stack 0
  1051  00001E                     crcBufS_get@space:
  1052                           	opt stack 0
  1053  00001E                     ___ftpack@exp:
  1054                           	opt stack 0
  1055  00001E                     frexp@eptr:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x1D
  1059  00001E                     	ds	1
  1060  00001F                     ??_crcBufS_get:
  1061  00001F                     ??_Delay:
  1062  00001F                     ??_SetBypass:
  1063  00001F                     ??_crcBufS_status_put:
  1064  00001F                     CRC8@extract:
  1065                           	opt stack 0
  1066  00001F                     crcBufS_put@status:
  1067                           	opt stack 0
  1068  00001F                     ___awdiv@counter:
  1069                           	opt stack 0
  1070  00001F                     ___ftpack@sign:
  1071                           	opt stack 0
  1072  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1073                           	opt stack 0
  1074  00001F                     UART_buff_modulo_inc@my_value:
  1075                           	opt stack 0
  1076  00001F                     ___wmul@product:
  1077                           	opt stack 0
  1078  00001F                     memset@n:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x1E
  1082  00001F                     	ds	1
  1083  000020                     ??_crcBufS_put:
  1084  000020                     ??___ftpack:
  1085  000020                     ??_frexp:
  1086  000020                     CRC8@tempI:
  1087                           	opt stack 0
  1088  000020                     ___awdiv@sign:
  1089                           	opt stack 0
  1090  000020                     Delay@wait:
  1091                           	opt stack 0
  1092                           
  1093                           ; 4 bytes @ 0x1F
  1094  000020                     	ds	1
  1095  000021                     ?_Battery_Get:
  1096                           	opt stack 0
  1097  000021                     ?_Tempeture_Get:
  1098                           	opt stack 0
  1099  000021                     CRC8@crc:
  1100                           	opt stack 0
  1101  000021                     Battery_Filter@x:
  1102                           	opt stack 0
  1103  000021                     Battery_Get@channelnum:
  1104                           	opt stack 0
  1105  000021                     Tempeture_Get@channelnum:
  1106                           	opt stack 0
  1107  000021                     FastTransfer_buffer_put@_this:
  1108                           	opt stack 0
  1109  000021                     UART_buff_put@_this:
  1110                           	opt stack 0
  1111  000021                     UART_buff_get@_this:
  1112                           	opt stack 0
  1113  000021                     ___awdiv@quotient:
  1114                           	opt stack 0
  1115  000021                     memset@p:
  1116                           	opt stack 0
  1117  000021                     ___ftge@ff1:
  1118                           	opt stack 0
  1119                           
  1120                           ; 3 bytes @ 0x20
  1121  000021                     	ds	2
  1122  000023                     ??_UART_buff_get:
  1123  000023                     ?___altoft:
  1124                           	opt stack 0
  1125  000023                     ?___awtoft:
  1126                           	opt stack 0
  1127  000023                     FastTransfer_buffer_put@towhere:
  1128                           	opt stack 0
  1129  000023                     UART_buff_put@c:
  1130                           	opt stack 0
  1131  000023                     FastTransfer_buffer_flush@_this:
  1132                           	opt stack 0
  1133  000023                     crcBufS_status_put@wantedTime:
  1134                           	opt stack 0
  1135  000023                     UART_buff_init@_this:
  1136                           	opt stack 0
  1137  000023                     ___awtoft@c:
  1138                           	opt stack 0
  1139  000023                     ___altoft@c:
  1140                           	opt stack 0
  1141                           
  1142                           ; 4 bytes @ 0x22
  1143  000023                     	ds	1
  1144  000024                     ??_UART_buff_put:
  1145  000024                     FastTransfer_buffer_put@towhat:
  1146                           	opt stack 0
  1147  000024                     ___ftge@ff2:
  1148                           	opt stack 0
  1149                           
  1150                           ; 3 bytes @ 0x23
  1151  000024                     	ds	1
  1152  000025                     UART_buff_get@c:
  1153                           	opt stack 0
  1154  000025                     FastTransfer_buffer_flush@clearBuffer:
  1155                           	opt stack 0
  1156  000025                     crcBufS_get@wantedTime:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x24
  1160  000025                     	ds	1
  1161  000026                     ??_FastTransfer_buffer_put:
  1162  000026                     Send_put@_data:
  1163                           	opt stack 0
  1164  000026                     ___awtoft@sign:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x25
  1168  000026                     	ds	1
  1169  000027                     ??_sendData:
  1170  000027                     ??_receiveData:
  1171  000027                     ??___altoft:
  1172  000027                     ??___ftge:
  1173                           
  1174                           ; 0 bytes @ 0x26
  1175  000027                     	ds	1
  1176  000028                     sendData@whereToSend:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0x27
  1180  000028                     	ds	1
  1181  000029                     sendData@CS:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x28
  1185  000029                     	ds	1
  1186  00002A                     Battery_Fault@fault:
  1187                           	opt stack 0
  1188  00002A                     Temp_Fault@fault:
  1189                           	opt stack 0
  1190  00002A                     sendData@i:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x29
  1194  00002A                     	ds	1
  1195  00002B                     ___altoft@exp:
  1196                           	opt stack 0
  1197  00002B                     Battery_Fault@i:
  1198                           	opt stack 0
  1199  00002B                     Temp_Fault@i:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x2A
  1203  00002B                     	ds	1
  1204  00002C                     ___altoft@sign:
  1205                           	opt stack 0
  1206                           
  1207                           ; 1 bytes @ 0x2B
  1208  00002C                     	ds	1
  1209  00002D                     tblptru	equ	0xFF8
  1210                           tblptrh	equ	0xFF7
  1211                           tblptrl	equ	0xFF6
  1212                           tablat	equ	0xFF5
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           postdec1	equ	0xFE5
  1216                           fsr1l	equ	0xFE1
  1217                           
  1218                           ; 0 bytes @ 0x2C
  1219 ;;
  1220 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1221 ;;
  1222 ;; *************** function _main *****************
  1223 ;; Defined at:
  1224 ;;		line 30 in file "Main.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  argc            2    9[BANK1 ] int 
  1227 ;;  argv            3   11[BANK1 ] PTR PTR unsigned char 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;		None
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  2    9[BANK1 ] int 
  1232 ;; Registers used:
  1233 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1239 ;;      Params:         0       0       5       0       0       0       0
  1240 ;;      Locals:         0       0       0       0       0       0       0
  1241 ;;      Temps:          0       0       0       0       0       0       0
  1242 ;;      Totals:         0       0       5       0       0       0       0
  1243 ;;Total ram usage:        5 bytes
  1244 ;; Hardware stack levels required when called:   10
  1245 ;; This function calls:
  1246 ;;		_Battery_Convert
  1247 ;;		_Battery_Fault
  1248 ;;		_RunBypas
  1249 ;;		_SYSTEM_Initialize
  1250 ;;		_Temp_Convert
  1251 ;;		_Temp_Fault
  1252 ;;		_updateComms
  1253 ;; This function is called by:
  1254 ;;		Startup code after reset
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text0
  1259  003860                     __ptext0:
  1260                           	opt stack 0
  1261  003860                     _main:
  1262                           	opt stack 21
  1263                           
  1264                           ;Main.c: 32: SYSTEM_Initialize();
  1265                           
  1266                           ;incstack = 0
  1267  003860  ECD3  F01A         	call	_SYSTEM_Initialize	;wreg free
  1268                           
  1269                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1270  003864  8EF2               	bsf	intcon,7,c	;volatile
  1271                           
  1272                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1273  003866  8CF2               	bsf	intcon,6,c	;volatile
  1274  003868  D000               	goto	l5491
  1275  00386A                     l5491:
  1276                           
  1277                           ;Main.c: 65: {
  1278                           ;Main.c: 66: if (Temp_Done)
  1279  00386A  0100               	movlb	0	; () banked
  1280  00386C  5188               	movf	_Temp_Done& (0+255),w,b
  1281  00386E  0100               	movlb	0	; () banked
  1282  003870  1189               	iorwf	(_Temp_Done+1)& (0+255),w,b
  1283  003872  B4D8               	btfsc	status,2,c
  1284  003874  D005               	goto	l5497
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;Main.c: 67: {
  1288                           ;Main.c: 68: Temp_Convert();
  1289  003876  ECB5  F00C         	call	_Temp_Convert	;wreg free
  1290                           
  1291                           ;Main.c: 69: Temp_Fault();
  1292  00387A  EC9B  F01A         	call	_Temp_Fault	;wreg free
  1293  00387E  D000               	goto	l5497
  1294  003880                     l5497:
  1295                           
  1296                           ;Main.c: 74: }
  1297                           ;Main.c: 75: if (Volt_Done)
  1298  003880  0100               	movlb	0	; () banked
  1299  003882  518A               	movf	_Volt_Done& (0+255),w,b
  1300  003884  0100               	movlb	0	; () banked
  1301  003886  118B               	iorwf	(_Volt_Done+1)& (0+255),w,b
  1302  003888  B4D8               	btfsc	status,2,c
  1303  00388A  D007               	goto	l5505
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;Main.c: 76: {
  1307                           ;Main.c: 77: Battery_Convert();
  1308  00388C  EC48  F014         	call	_Battery_Convert	;wreg free
  1309                           
  1310                           ;Main.c: 78: Battery_Fault();
  1311  003890  EC4A  F018         	call	_Battery_Fault	;wreg free
  1312                           
  1313                           ;Main.c: 79: RunBypas();
  1314  003894  ECB9  F015         	call	_RunBypas	;wreg free
  1315  003898  D000               	goto	l5505
  1316  00389A                     l5505:
  1317                           
  1318                           ;Main.c: 84: }
  1319                           ;Main.c: 85: updateComms();
  1320  00389A  ECF5  F008         	call	_updateComms	;wreg free
  1321  00389E  D7E5               	goto	l5491
  1322                           
  1323                           ;Main.c: 103: }
  1324                           ;Main.c: 104: return (0);
  1325                           ;	Return value of _main is never used
  1326  0038A0  EF55  F000         	goto	start
  1327  0038A4                     __end_of_main:
  1328                           	opt stack 0
  1329                           tblptru	equ	0xFF8
  1330                           tblptrh	equ	0xFF7
  1331                           tblptrl	equ	0xFF6
  1332                           tablat	equ	0xFF5
  1333                           intcon	equ	0xFF2
  1334                           postinc0	equ	0xFEE
  1335                           wreg	equ	0xFE8
  1336                           postdec1	equ	0xFE5
  1337                           fsr1l	equ	0xFE1
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function _updateComms *****************
  1341 ;; Defined at:
  1342 ;;		line 12 in file "Communications.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;		None               void
  1349 ;; Registers used:
  1350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1356 ;;      Params:         0       0       0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0
  1359 ;;      Totals:         0       0       0       0       0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    9
  1363 ;; This function calls:
  1364 ;;		_Battery_Get
  1365 ;;		_Delay
  1366 ;;		_Tempeture_Get
  1367 ;;		_ToSend
  1368 ;;		___ftmul
  1369 ;;		___fttol
  1370 ;;		_receiveData
  1371 ;;		_sendData
  1372 ;; This function is called by:
  1373 ;;		_main
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text1
  1378  0011EA                     __ptext1:
  1379                           	opt stack 0
  1380  0011EA                     _updateComms:
  1381                           	opt stack 21
  1382                           
  1383                           ;Communications.c: 15: if (receiveData()) {
  1384                           
  1385                           ;incstack = 0
  1386  0011EA  EC0F  F003         	call	_receiveData	;wreg free
  1387  0011EE  0900               	iorlw	0
  1388  0011F0  B4D8               	btfsc	status,2,c
  1389  0011F2  0012               	return	
  1390                           
  1391                           ;Communications.c: 16: Delay(5);
  1392  0011F4  0E05               	movlw	5
  1393  0011F6  6E1B               	movwf	Delay@d_lenth,c
  1394  0011F8  0E00               	movlw	0
  1395  0011FA  6E1C               	movwf	Delay@d_lenth+1,c
  1396  0011FC  0E00               	movlw	0
  1397  0011FE  6E1D               	movwf	Delay@d_lenth+2,c
  1398  001200  0E00               	movlw	0
  1399  001202  6E1E               	movwf	Delay@d_lenth+3,c
  1400  001204  ECE4  F01B         	call	_Delay	;wreg free
  1401                           
  1402                           ;Communications.c: 17: LATEbits.LATE1 = 1;
  1403  001208  828D               	bsf	3981,1,c	;volatile
  1404                           
  1405                           ;Communications.c: 18: Delay(5);
  1406  00120A  0E05               	movlw	5
  1407  00120C  6E1B               	movwf	Delay@d_lenth,c
  1408  00120E  0E00               	movlw	0
  1409  001210  6E1C               	movwf	Delay@d_lenth+1,c
  1410  001212  0E00               	movlw	0
  1411  001214  6E1D               	movwf	Delay@d_lenth+2,c
  1412  001216  0E00               	movlw	0
  1413  001218  6E1E               	movwf	Delay@d_lenth+3,c
  1414  00121A  ECE4  F01B         	call	_Delay	;wreg free
  1415                           
  1416                           ;Communications.c: 19: ToSend(0, 1);
  1417  00121E  0E00               	movlw	0
  1418  001220  0100               	movlb	0	; () banked
  1419  001222  6FEF               	movwf	(ToSend@what+1)& (0+255),b
  1420  001224  0E01               	movlw	1
  1421  001226  6FEE               	movwf	ToSend@what& (0+255),b
  1422  001228  0E00               	movlw	0
  1423  00122A  ECBE  F01D         	call	_ToSend
  1424                           
  1425                           ;Communications.c: 20: ToSend(1, Battery_Get(0)*1000);
  1426  00122E  0E00               	movlw	0
  1427  001230  0100               	movlb	0	; () banked
  1428  001232  6FD3               	movwf	___ftmul@f2& (0+255),b
  1429  001234  0E7A               	movlw	122
  1430  001236  0100               	movlb	0	; () banked
  1431  001238  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1432  00123A  0E44               	movlw	68
  1433  00123C  0100               	movlb	0	; () banked
  1434  00123E  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1435  001240  0E00               	movlw	0
  1436  001242  6E22               	movwf	Battery_Get@channelnum+1,c
  1437  001244  0E00               	movlw	0
  1438  001246  6E21               	movwf	Battery_Get@channelnum,c
  1439  001248  EC12  F01D         	call	_Battery_Get	;wreg free
  1440  00124C  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1441  001250  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1442  001254  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1443  001258  EC2F  F00F         	call	___ftmul	;wreg free
  1444  00125C  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1445  001260  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1446  001264  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1447  001268  EC9A  F010         	call	___fttol	;wreg free
  1448  00126C  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1449  001270  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1450  001274  0E01               	movlw	1
  1451  001276  ECBE  F01D         	call	_ToSend
  1452                           
  1453                           ;Communications.c: 21: ToSend(2, Battery_Get(1)*1000);
  1454  00127A  0E00               	movlw	0
  1455  00127C  0100               	movlb	0	; () banked
  1456  00127E  6FD3               	movwf	___ftmul@f2& (0+255),b
  1457  001280  0E7A               	movlw	122
  1458  001282  0100               	movlb	0	; () banked
  1459  001284  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1460  001286  0E44               	movlw	68
  1461  001288  0100               	movlb	0	; () banked
  1462  00128A  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1463  00128C  0E00               	movlw	0
  1464  00128E  6E22               	movwf	Battery_Get@channelnum+1,c
  1465  001290  0E01               	movlw	1
  1466  001292  6E21               	movwf	Battery_Get@channelnum,c
  1467  001294  EC12  F01D         	call	_Battery_Get	;wreg free
  1468  001298  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1469  00129C  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1470  0012A0  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1471  0012A4  EC2F  F00F         	call	___ftmul	;wreg free
  1472  0012A8  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1473  0012AC  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1474  0012B0  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1475  0012B4  EC9A  F010         	call	___fttol	;wreg free
  1476  0012B8  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1477  0012BC  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1478  0012C0  0E02               	movlw	2
  1479  0012C2  ECBE  F01D         	call	_ToSend
  1480                           
  1481                           ;Communications.c: 22: ToSend(3, Battery_Get(2)*1000);
  1482  0012C6  0E00               	movlw	0
  1483  0012C8  0100               	movlb	0	; () banked
  1484  0012CA  6FD3               	movwf	___ftmul@f2& (0+255),b
  1485  0012CC  0E7A               	movlw	122
  1486  0012CE  0100               	movlb	0	; () banked
  1487  0012D0  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1488  0012D2  0E44               	movlw	68
  1489  0012D4  0100               	movlb	0	; () banked
  1490  0012D6  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1491  0012D8  0E00               	movlw	0
  1492  0012DA  6E22               	movwf	Battery_Get@channelnum+1,c
  1493  0012DC  0E02               	movlw	2
  1494  0012DE  6E21               	movwf	Battery_Get@channelnum,c
  1495  0012E0  EC12  F01D         	call	_Battery_Get	;wreg free
  1496  0012E4  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1497  0012E8  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1498  0012EC  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1499  0012F0  EC2F  F00F         	call	___ftmul	;wreg free
  1500  0012F4  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1501  0012F8  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1502  0012FC  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1503  001300  EC9A  F010         	call	___fttol	;wreg free
  1504  001304  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1505  001308  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1506  00130C  0E03               	movlw	3
  1507  00130E  ECBE  F01D         	call	_ToSend
  1508                           
  1509                           ;Communications.c: 23: ToSend(4, Battery_Get(3)*1000);
  1510  001312  0E00               	movlw	0
  1511  001314  0100               	movlb	0	; () banked
  1512  001316  6FD3               	movwf	___ftmul@f2& (0+255),b
  1513  001318  0E7A               	movlw	122
  1514  00131A  0100               	movlb	0	; () banked
  1515  00131C  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1516  00131E  0E44               	movlw	68
  1517  001320  0100               	movlb	0	; () banked
  1518  001322  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1519  001324  0E00               	movlw	0
  1520  001326  6E22               	movwf	Battery_Get@channelnum+1,c
  1521  001328  0E03               	movlw	3
  1522  00132A  6E21               	movwf	Battery_Get@channelnum,c
  1523  00132C  EC12  F01D         	call	_Battery_Get	;wreg free
  1524  001330  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1525  001334  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1526  001338  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1527  00133C  EC2F  F00F         	call	___ftmul	;wreg free
  1528  001340  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1529  001344  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1530  001348  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1531  00134C  EC9A  F010         	call	___fttol	;wreg free
  1532  001350  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1533  001354  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1534  001358  0E04               	movlw	4
  1535  00135A  ECBE  F01D         	call	_ToSend
  1536                           
  1537                           ;Communications.c: 24: ToSend(5, Battery_Get(4)*1000);
  1538  00135E  0E00               	movlw	0
  1539  001360  0100               	movlb	0	; () banked
  1540  001362  6FD3               	movwf	___ftmul@f2& (0+255),b
  1541  001364  0E7A               	movlw	122
  1542  001366  0100               	movlb	0	; () banked
  1543  001368  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1544  00136A  0E44               	movlw	68
  1545  00136C  0100               	movlb	0	; () banked
  1546  00136E  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1547  001370  0E00               	movlw	0
  1548  001372  6E22               	movwf	Battery_Get@channelnum+1,c
  1549  001374  0E04               	movlw	4
  1550  001376  6E21               	movwf	Battery_Get@channelnum,c
  1551  001378  EC12  F01D         	call	_Battery_Get	;wreg free
  1552  00137C  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1553  001380  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1554  001384  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1555  001388  EC2F  F00F         	call	___ftmul	;wreg free
  1556  00138C  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1557  001390  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1558  001394  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1559  001398  EC9A  F010         	call	___fttol	;wreg free
  1560  00139C  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1561  0013A0  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1562  0013A4  0E05               	movlw	5
  1563  0013A6  ECBE  F01D         	call	_ToSend
  1564                           
  1565                           ;Communications.c: 25: ToSend(6, Battery_Get(5)*1000);
  1566  0013AA  0E00               	movlw	0
  1567  0013AC  0100               	movlb	0	; () banked
  1568  0013AE  6FD3               	movwf	___ftmul@f2& (0+255),b
  1569  0013B0  0E7A               	movlw	122
  1570  0013B2  0100               	movlb	0	; () banked
  1571  0013B4  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1572  0013B6  0E44               	movlw	68
  1573  0013B8  0100               	movlb	0	; () banked
  1574  0013BA  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1575  0013BC  0E00               	movlw	0
  1576  0013BE  6E22               	movwf	Battery_Get@channelnum+1,c
  1577  0013C0  0E05               	movlw	5
  1578  0013C2  6E21               	movwf	Battery_Get@channelnum,c
  1579  0013C4  EC12  F01D         	call	_Battery_Get	;wreg free
  1580  0013C8  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1581  0013CC  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1582  0013D0  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1583  0013D4  EC2F  F00F         	call	___ftmul	;wreg free
  1584  0013D8  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1585  0013DC  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1586  0013E0  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1587  0013E4  EC9A  F010         	call	___fttol	;wreg free
  1588  0013E8  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1589  0013EC  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1590  0013F0  0E06               	movlw	6
  1591  0013F2  ECBE  F01D         	call	_ToSend
  1592                           
  1593                           ;Communications.c: 26: ToSend(7, Battery_Get(6)*1000);
  1594  0013F6  0E00               	movlw	0
  1595  0013F8  0100               	movlb	0	; () banked
  1596  0013FA  6FD3               	movwf	___ftmul@f2& (0+255),b
  1597  0013FC  0E7A               	movlw	122
  1598  0013FE  0100               	movlb	0	; () banked
  1599  001400  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1600  001402  0E44               	movlw	68
  1601  001404  0100               	movlb	0	; () banked
  1602  001406  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1603  001408  0E00               	movlw	0
  1604  00140A  6E22               	movwf	Battery_Get@channelnum+1,c
  1605  00140C  0E06               	movlw	6
  1606  00140E  6E21               	movwf	Battery_Get@channelnum,c
  1607  001410  EC12  F01D         	call	_Battery_Get	;wreg free
  1608  001414  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1609  001418  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1610  00141C  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1611  001420  EC2F  F00F         	call	___ftmul	;wreg free
  1612  001424  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1613  001428  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1614  00142C  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1615  001430  EC9A  F010         	call	___fttol	;wreg free
  1616  001434  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1617  001438  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1618  00143C  0E07               	movlw	7
  1619  00143E  ECBE  F01D         	call	_ToSend
  1620                           
  1621                           ;Communications.c: 27: ToSend(8, Battery_Get(7)*1000);
  1622  001442  0E00               	movlw	0
  1623  001444  0100               	movlb	0	; () banked
  1624  001446  6FD3               	movwf	___ftmul@f2& (0+255),b
  1625  001448  0E7A               	movlw	122
  1626  00144A  0100               	movlb	0	; () banked
  1627  00144C  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1628  00144E  0E44               	movlw	68
  1629  001450  0100               	movlb	0	; () banked
  1630  001452  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1631  001454  0E00               	movlw	0
  1632  001456  6E22               	movwf	Battery_Get@channelnum+1,c
  1633  001458  0E07               	movlw	7
  1634  00145A  6E21               	movwf	Battery_Get@channelnum,c
  1635  00145C  EC12  F01D         	call	_Battery_Get	;wreg free
  1636  001460  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1637  001464  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1638  001468  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1639  00146C  EC2F  F00F         	call	___ftmul	;wreg free
  1640  001470  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1641  001474  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1642  001478  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1643  00147C  EC9A  F010         	call	___fttol	;wreg free
  1644  001480  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1645  001484  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1646  001488  0E08               	movlw	8
  1647  00148A  ECBE  F01D         	call	_ToSend
  1648                           
  1649                           ;Communications.c: 28: ToSend(9, Battery_Get(8)*1000);
  1650  00148E  0E00               	movlw	0
  1651  001490  0100               	movlb	0	; () banked
  1652  001492  6FD3               	movwf	___ftmul@f2& (0+255),b
  1653  001494  0E7A               	movlw	122
  1654  001496  0100               	movlb	0	; () banked
  1655  001498  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1656  00149A  0E44               	movlw	68
  1657  00149C  0100               	movlb	0	; () banked
  1658  00149E  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1659  0014A0  0E00               	movlw	0
  1660  0014A2  6E22               	movwf	Battery_Get@channelnum+1,c
  1661  0014A4  0E08               	movlw	8
  1662  0014A6  6E21               	movwf	Battery_Get@channelnum,c
  1663  0014A8  EC12  F01D         	call	_Battery_Get	;wreg free
  1664  0014AC  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1665  0014B0  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1666  0014B4  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1667  0014B8  EC2F  F00F         	call	___ftmul	;wreg free
  1668  0014BC  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1669  0014C0  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1670  0014C4  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1671  0014C8  EC9A  F010         	call	___fttol	;wreg free
  1672  0014CC  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1673  0014D0  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1674  0014D4  0E09               	movlw	9
  1675  0014D6  ECBE  F01D         	call	_ToSend
  1676                           
  1677                           ;Communications.c: 29: ToSend(10, Battery_Get(9)*1000);
  1678  0014DA  0E00               	movlw	0
  1679  0014DC  0100               	movlb	0	; () banked
  1680  0014DE  6FD3               	movwf	___ftmul@f2& (0+255),b
  1681  0014E0  0E7A               	movlw	122
  1682  0014E2  0100               	movlb	0	; () banked
  1683  0014E4  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1684  0014E6  0E44               	movlw	68
  1685  0014E8  0100               	movlb	0	; () banked
  1686  0014EA  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1687  0014EC  0E00               	movlw	0
  1688  0014EE  6E22               	movwf	Battery_Get@channelnum+1,c
  1689  0014F0  0E09               	movlw	9
  1690  0014F2  6E21               	movwf	Battery_Get@channelnum,c
  1691  0014F4  EC12  F01D         	call	_Battery_Get	;wreg free
  1692  0014F8  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1693  0014FC  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1694  001500  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1695  001504  EC2F  F00F         	call	___ftmul	;wreg free
  1696  001508  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1697  00150C  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1698  001510  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1699  001514  EC9A  F010         	call	___fttol	;wreg free
  1700  001518  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1701  00151C  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1702  001520  0E0A               	movlw	10
  1703  001522  ECBE  F01D         	call	_ToSend
  1704                           
  1705                           ;Communications.c: 30: ToSend(11, Tempeture_Get(0));
  1706  001526  0E00               	movlw	0
  1707  001528  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1708  00152A  0E00               	movlw	0
  1709  00152C  6E21               	movwf	Tempeture_Get@channelnum,c
  1710  00152E  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1711  001532  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1712  001536  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1713  00153A  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1714  00153E  EC9A  F010         	call	___fttol	;wreg free
  1715  001542  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1716  001546  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1717  00154A  0E0B               	movlw	11
  1718  00154C  ECBE  F01D         	call	_ToSend
  1719                           
  1720                           ;Communications.c: 31: ToSend(12, Tempeture_Get(1));
  1721  001550  0E00               	movlw	0
  1722  001552  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1723  001554  0E01               	movlw	1
  1724  001556  6E21               	movwf	Tempeture_Get@channelnum,c
  1725  001558  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1726  00155C  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1727  001560  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1728  001564  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1729  001568  EC9A  F010         	call	___fttol	;wreg free
  1730  00156C  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1731  001570  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1732  001574  0E0C               	movlw	12
  1733  001576  ECBE  F01D         	call	_ToSend
  1734                           
  1735                           ;Communications.c: 32: ToSend(13, Tempeture_Get(2));
  1736  00157A  0E00               	movlw	0
  1737  00157C  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1738  00157E  0E02               	movlw	2
  1739  001580  6E21               	movwf	Tempeture_Get@channelnum,c
  1740  001582  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1741  001586  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1742  00158A  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1743  00158E  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1744  001592  EC9A  F010         	call	___fttol	;wreg free
  1745  001596  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1746  00159A  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1747  00159E  0E0D               	movlw	13
  1748  0015A0  ECBE  F01D         	call	_ToSend
  1749                           
  1750                           ;Communications.c: 33: ToSend(14, Tempeture_Get(3));
  1751  0015A4  0E00               	movlw	0
  1752  0015A6  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1753  0015A8  0E03               	movlw	3
  1754  0015AA  6E21               	movwf	Tempeture_Get@channelnum,c
  1755  0015AC  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1756  0015B0  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1757  0015B4  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1758  0015B8  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1759  0015BC  EC9A  F010         	call	___fttol	;wreg free
  1760  0015C0  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1761  0015C4  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1762  0015C8  0E0E               	movlw	14
  1763  0015CA  ECBE  F01D         	call	_ToSend
  1764                           
  1765                           ;Communications.c: 34: ToSend(15, Tempeture_Get(4));
  1766  0015CE  0E00               	movlw	0
  1767  0015D0  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1768  0015D2  0E04               	movlw	4
  1769  0015D4  6E21               	movwf	Tempeture_Get@channelnum,c
  1770  0015D6  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1771  0015DA  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1772  0015DE  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1773  0015E2  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1774  0015E6  EC9A  F010         	call	___fttol	;wreg free
  1775  0015EA  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1776  0015EE  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1777  0015F2  0E0F               	movlw	15
  1778  0015F4  ECBE  F01D         	call	_ToSend
  1779                           
  1780                           ;Communications.c: 35: ToSend(16, Tempeture_Get(5));
  1781  0015F8  0E00               	movlw	0
  1782  0015FA  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1783  0015FC  0E05               	movlw	5
  1784  0015FE  6E21               	movwf	Tempeture_Get@channelnum,c
  1785  001600  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1786  001604  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1787  001608  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1788  00160C  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1789  001610  EC9A  F010         	call	___fttol	;wreg free
  1790  001614  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1791  001618  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1792  00161C  0E10               	movlw	16
  1793  00161E  ECBE  F01D         	call	_ToSend
  1794                           
  1795                           ;Communications.c: 36: ToSend(17, Tempeture_Get(6));
  1796  001622  0E00               	movlw	0
  1797  001624  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1798  001626  0E06               	movlw	6
  1799  001628  6E21               	movwf	Tempeture_Get@channelnum,c
  1800  00162A  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1801  00162E  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1802  001632  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1803  001636  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1804  00163A  EC9A  F010         	call	___fttol	;wreg free
  1805  00163E  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1806  001642  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1807  001646  0E11               	movlw	17
  1808  001648  ECBE  F01D         	call	_ToSend
  1809                           
  1810                           ;Communications.c: 37: ToSend(18, Tempeture_Get(7));
  1811  00164C  0E00               	movlw	0
  1812  00164E  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1813  001650  0E07               	movlw	7
  1814  001652  6E21               	movwf	Tempeture_Get@channelnum,c
  1815  001654  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1816  001658  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1817  00165C  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1818  001660  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1819  001664  EC9A  F010         	call	___fttol	;wreg free
  1820  001668  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1821  00166C  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1822  001670  0E12               	movlw	18
  1823  001672  ECBE  F01D         	call	_ToSend
  1824                           
  1825                           ;Communications.c: 38: ToSend(19, Tempeture_Get(8));
  1826  001676  0E00               	movlw	0
  1827  001678  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1828  00167A  0E08               	movlw	8
  1829  00167C  6E21               	movwf	Tempeture_Get@channelnum,c
  1830  00167E  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1831  001682  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1832  001686  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1833  00168A  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1834  00168E  EC9A  F010         	call	___fttol	;wreg free
  1835  001692  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1836  001696  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1837  00169A  0E13               	movlw	19
  1838  00169C  ECBE  F01D         	call	_ToSend
  1839                           
  1840                           ;Communications.c: 39: ToSend(20, Tempeture_Get(9));
  1841  0016A0  0E00               	movlw	0
  1842  0016A2  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1843  0016A4  0E09               	movlw	9
  1844  0016A6  6E21               	movwf	Tempeture_Get@channelnum,c
  1845  0016A8  ECFA  F01C         	call	_Tempeture_Get	;wreg free
  1846  0016AC  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1847  0016B0  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1848  0016B4  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1849  0016B8  EC9A  F010         	call	___fttol	;wreg free
  1850  0016BC  C0DF  F0EE         	movff	?___fttol,ToSend@what
  1851  0016C0  C0E0  F0EF         	movff	?___fttol+1,ToSend@what+1
  1852  0016C4  0E14               	movlw	20
  1853  0016C6  ECBE  F01D         	call	_ToSend
  1854                           
  1855                           ;Communications.c: 40: sendData(16);
  1856  0016CA  0E10               	movlw	16
  1857  0016CC  EC93  F012         	call	_sendData
  1858                           
  1859                           ;Communications.c: 41: Delay(10);
  1860  0016D0  0E0A               	movlw	10
  1861  0016D2  6E1B               	movwf	Delay@d_lenth,c
  1862  0016D4  0E00               	movlw	0
  1863  0016D6  6E1C               	movwf	Delay@d_lenth+1,c
  1864  0016D8  0E00               	movlw	0
  1865  0016DA  6E1D               	movwf	Delay@d_lenth+2,c
  1866  0016DC  0E00               	movlw	0
  1867  0016DE  6E1E               	movwf	Delay@d_lenth+3,c
  1868  0016E0  ECE4  F01B         	call	_Delay	;wreg free
  1869                           
  1870                           ;Communications.c: 42: LATEbits.LATE1 = 0;
  1871  0016E4  928D               	bcf	3981,1,c	;volatile
  1872                           
  1873                           ;Communications.c: 43: LATAbits.LATA4 ^= 1;
  1874  0016E6  7889               	btg	3977,4,c	;volatile
  1875  0016E8  0012               	return	
  1876  0016EA  0012               	return		;funcret
  1877  0016EC                     __end_of_updateComms:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           intcon	equ	0xFF2
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           postdec1	equ	0xFE5
  1887                           fsr1l	equ	0xFE1
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _sendData *****************
  1891 ;; Defined at:
  1892 ;;		line 53 in file "FastTransfer.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  whereToSend     1    wreg     unsigned char 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  whereToSend     1   39[COMRAM] unsigned char 
  1897 ;;  i               2   41[COMRAM] int 
  1898 ;;  CS              1   40[COMRAM] unsigned char 
  1899 ;; Return value:  Size  Location     Type
  1900 ;;		None               void
  1901 ;; Registers used:
  1902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1908 ;;      Params:         0       0       0       0       0       0       0
  1909 ;;      Locals:         4       0       0       0       0       0       0
  1910 ;;      Temps:          1       0       0       0       0       0       0
  1911 ;;      Totals:         5       0       0       0       0       0       0
  1912 ;;Total ram usage:        5 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    7
  1915 ;; This function calls:
  1916 ;;		Absolute function
  1917 ;;		_CRC8
  1918 ;;		_FastTransfer_buffer_flush
  1919 ;;		_Send_put
  1920 ;;		_crcBufS_put
  1921 ;; This function is called by:
  1922 ;;		_updateComms
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text2
  1927  002526                     __ptext2:
  1928                           	opt stack 0
  1929  002526                     _sendData:
  1930                           	opt stack 22
  1931                           
  1932                           ;incstack = 0
  1933                           ;sendData@whereToSend stored from wreg
  1934  002526  6E28               	movwf	sendData@whereToSend,c
  1935                           
  1936                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1937  002528  C098  F01B         	movff	_sendStructAddress,CRC8@data
  1938  00252C  C099  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1939  002530  C2CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1940  002534  EC6A  F01B         	call	_CRC8	;wreg free
  1941  002538  6E29               	movwf	sendData@CS,c
  1942                           
  1943                           ;FastTransfer.c: 58: serial_write(0x06);
  1944  00253A  D801               	call	u5278
  1945  00253C  D00B               	goto	l5041
  1946  00253E                     u5278:
  1947  00253E  0005               	push	
  1948  002540  6EFA               	movwf	pclath,c
  1949  002542  5035               	movf	_serial_write,w,c
  1950  002544  6EFD               	movwf	tosl,c
  1951  002546  5036               	movf	_serial_write+1,w,c
  1952  002548  6EFE               	movwf	tosh,c
  1953  00254A  50F8               	movf	tblptru,w,c
  1954  00254C  6EFF               	movwf	tosu,c
  1955  00254E  50FA               	movf	pclath,w,c
  1956  002550  0E06               	movlw	6
  1957  002552  0012               	return		;indir
  1958  002554                     l5041:
  1959                           
  1960                           ;FastTransfer.c: 59: serial_write(0x85);
  1961  002554  D801               	call	u5288
  1962  002556  D00B               	goto	l5043
  1963  002558                     u5288:
  1964  002558  0005               	push	
  1965  00255A  6EFA               	movwf	pclath,c
  1966  00255C  5035               	movf	_serial_write,w,c
  1967  00255E  6EFD               	movwf	tosl,c
  1968  002560  5036               	movf	_serial_write+1,w,c
  1969  002562  6EFE               	movwf	tosh,c
  1970  002564  50F8               	movf	tblptru,w,c
  1971  002566  6EFF               	movwf	tosu,c
  1972  002568  50FA               	movf	pclath,w,c
  1973  00256A  0E85               	movlw	133
  1974  00256C  0012               	return		;indir
  1975  00256E                     l5043:
  1976                           
  1977                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1978  00256E  D801               	call	u5298
  1979  002570  D00B               	goto	l5045
  1980  002572                     u5298:
  1981  002572  0005               	push	
  1982  002574  6EFA               	movwf	pclath,c
  1983  002576  5035               	movf	_serial_write,w,c
  1984  002578  6EFD               	movwf	tosl,c
  1985  00257A  5036               	movf	_serial_write+1,w,c
  1986  00257C  6EFE               	movwf	tosh,c
  1987  00257E  50F8               	movf	tblptru,w,c
  1988  002580  6EFF               	movwf	tosu,c
  1989  002582  50FA               	movf	pclath,w,c
  1990  002584  5028               	movf	sendData@whereToSend,w,c
  1991  002586  0012               	return		;indir
  1992  002588                     l5045:
  1993                           
  1994                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1995  002588  D801               	call	u5308
  1996  00258A  D00B               	goto	l5047
  1997  00258C                     u5308:
  1998  00258C  0005               	push	
  1999  00258E  6EFA               	movwf	pclath,c
  2000  002590  5035               	movf	_serial_write,w,c
  2001  002592  6EFD               	movwf	tosl,c
  2002  002594  5036               	movf	_serial_write+1,w,c
  2003  002596  6EFE               	movwf	tosh,c
  2004  002598  50F8               	movf	tblptru,w,c
  2005  00259A  6EFF               	movwf	tosu,c
  2006  00259C  50FA               	movf	pclath,w,c
  2007  00259E  503E               	movf	_moduleAddress,w,c
  2008  0025A0  0012               	return		;indir
  2009  0025A2                     l5047:
  2010                           
  2011                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  2012  0025A2  D801               	call	u5318
  2013  0025A4  D00C               	goto	l5049
  2014  0025A6                     u5318:
  2015  0025A6  0005               	push	
  2016  0025A8  6EFA               	movwf	pclath,c
  2017  0025AA  5035               	movf	_serial_write,w,c
  2018  0025AC  6EFD               	movwf	tosl,c
  2019  0025AE  5036               	movf	_serial_write+1,w,c
  2020  0025B0  6EFE               	movwf	tosh,c
  2021  0025B2  50F8               	movf	tblptru,w,c
  2022  0025B4  6EFF               	movwf	tosu,c
  2023  0025B6  50FA               	movf	pclath,w,c
  2024  0025B8  0102               	movlb	2	; () banked
  2025  0025BA  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2026  0025BC  0012               	return		;indir
  2027  0025BE                     l5049:
  2028                           
  2029                           ;FastTransfer.c: 66: int i;
  2030                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  2031  0025BE  0E00               	movlw	0
  2032  0025C0  6E2B               	movwf	sendData@i+1,c
  2033  0025C2  0E00               	movlw	0
  2034  0025C4  6E2A               	movwf	sendData@i,c
  2035  0025C6  D018               	goto	l5055
  2036  0025C8                     l5051:
  2037                           
  2038                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  2039  0025C8  D801               	call	u5328
  2040  0025CA  D013               	goto	l5053
  2041  0025CC                     u5328:
  2042  0025CC  0005               	push	
  2043  0025CE  6EFA               	movwf	pclath,c
  2044  0025D0  5035               	movf	_serial_write,w,c
  2045  0025D2  6EFD               	movwf	tosl,c
  2046  0025D4  5036               	movf	_serial_write+1,w,c
  2047  0025D6  6EFE               	movwf	tosh,c
  2048  0025D8  50F8               	movf	tblptru,w,c
  2049  0025DA  6EFF               	movwf	tosu,c
  2050  0025DC  50FA               	movf	pclath,w,c
  2051  0025DE  502A               	movf	sendData@i,w,c
  2052  0025E0  0100               	movlb	0	; () banked
  2053  0025E2  2598               	addwf	_sendStructAddress& (0+255),w,b
  2054  0025E4  6ED9               	movwf	fsr2l,c
  2055  0025E6  502B               	movf	sendData@i+1,w,c
  2056  0025E8  0100               	movlb	0	; () banked
  2057  0025EA  2199               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  2058  0025EC  6EDA               	movwf	fsr2h,c
  2059  0025EE  50DF               	movf	indf2,w,c
  2060  0025F0  0012               	return		;indir
  2061  0025F2                     l5053:
  2062  0025F2  4A2A               	infsnz	sendData@i,f,c
  2063  0025F4  2A2B               	incf	sendData@i+1,f,c
  2064  0025F6  D000               	goto	l5055
  2065  0025F8                     l5055:
  2066  0025F8  0102               	movlb	2	; () banked
  2067  0025FA  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2068  0025FC  5C2A               	subwf	sendData@i,w,c
  2069  0025FE  502B               	movf	sendData@i+1,w,c
  2070  002600  0A80               	xorlw	128
  2071  002602  6E27               	movwf	??_sendData& (0+255),c
  2072  002604  0102               	movlb	2	; () banked
  2073  002606  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  2074  002608  0A80               	xorlw	128
  2075  00260A  5827               	subwfb	??_sendData& (0+255),w,c
  2076  00260C  A0D8               	btfss	status,0,c
  2077  00260E  D7DC               	goto	l5051
  2078                           
  2079                           ; BSR set to: 2
  2080                           ;FastTransfer.c: 69: }
  2081                           ;FastTransfer.c: 72: serial_write(CS);
  2082                           
  2083                           ; BSR set to: 2
  2084  002610  D801               	call	u5348
  2085  002612  D00B               	goto	l5059
  2086  002614                     u5348:
  2087  002614  0005               	push	
  2088  002616  6EFA               	movwf	pclath,c
  2089  002618  5035               	movf	_serial_write,w,c
  2090  00261A  6EFD               	movwf	tosl,c
  2091  00261C  5036               	movf	_serial_write+1,w,c
  2092  00261E  6EFE               	movwf	tosh,c
  2093  002620  50F8               	movf	tblptru,w,c
  2094  002622  6EFF               	movwf	tosu,c
  2095  002624  50FA               	movf	pclath,w,c
  2096  002626  5029               	movf	sendData@CS,w,c
  2097  002628  0012               	return		;indir
  2098  00262A                     l5059:
  2099                           
  2100                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  2101  00262A  0EB0               	movlw	low _crc_buffer
  2102  00262C  6E1B               	movwf	crcBufS_put@_this,c
  2103  00262E  0E00               	movlw	high _crc_buffer
  2104  002630  6E1C               	movwf	crcBufS_put@_this+1,c
  2105  002632  C028  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  2106  002636  C029  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  2107  00263A  0E00               	movlw	0
  2108  00263C  6E1F               	movwf	crcBufS_put@status,c
  2109  00263E  EC0D  F017         	call	_crcBufS_put
  2110                           
  2111                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  2112  002642  0E00               	movlw	low _ring_buffer
  2113  002644  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  2114  002646  0E02               	movlw	high _ring_buffer
  2115  002648  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  2116  00264A  0E00               	movlw	0
  2117  00264C  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  2118  00264E  0E01               	movlw	1
  2119  002650  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  2120  002652  EC09  F01B         	call	_FastTransfer_buffer_flush	;wreg free
  2121  002656  0012               	return		;funcret
  2122  002658                     __end_of_sendData:
  2123                           	opt stack 0
  2124                           tosu	equ	0xFFF
  2125                           tosh	equ	0xFFE
  2126                           tosl	equ	0xFFD
  2127                           pclath	equ	0xFFA
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           intcon	equ	0xFF2
  2133                           postinc0	equ	0xFEE
  2134                           wreg	equ	0xFE8
  2135                           postdec1	equ	0xFE5
  2136                           fsr1l	equ	0xFE1
  2137                           indf2	equ	0xFDF
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function _crcBufS_put *****************
  2143 ;; Defined at:
  2144 ;;		line 321 in file "FastTransfer.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2147 ;;		 -> crc_buffer(17), 
  2148 ;;  address         1   28[COMRAM] unsigned char 
  2149 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2150 ;;  status          1   30[COMRAM] unsigned char 
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;		None               void
  2155 ;; Registers used:
  2156 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2162 ;;      Params:         5       0       0       0       0       0       0
  2163 ;;      Locals:         0       0       0       0       0       0       0
  2164 ;;      Temps:          2       0       0       0       0       0       0
  2165 ;;      Totals:         7       0       0       0       0       0       0
  2166 ;;Total ram usage:        7 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    4
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_sendData
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text3
  2177  002E1A                     __ptext3:
  2178                           	opt stack 0
  2179  002E1A                     _crcBufS_put:
  2180                           	opt stack 24
  2181                           
  2182                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  2183                           
  2184                           ;incstack = 0
  2185  002E1A  EE20 F00F          	lfsr	2,15
  2186  002E1E  501B               	movf	crcBufS_put@_this,w,c
  2187  002E20  26D9               	addwf	fsr2l,f,c
  2188  002E22  501C               	movf	crcBufS_put@_this+1,w,c
  2189  002E24  22DA               	addwfc	fsr2h,f,c
  2190  002E26  CFDE F020          	movff	postinc2,??_crcBufS_put
  2191  002E2A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2192  002E2E  5020               	movf	??_crcBufS_put,w,c
  2193  002E30  241B               	addwf	crcBufS_put@_this,w,c
  2194  002E32  6ED9               	movwf	fsr2l,c
  2195  002E34  5021               	movf	??_crcBufS_put+1,w,c
  2196  002E36  201C               	addwfc	crcBufS_put@_this+1,w,c
  2197  002E38  6EDA               	movwf	fsr2h,c
  2198  002E3A  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2199                           
  2200                           ;FastTransfer.c: 323: _this->head++;
  2201  002E3E  EE20 F00F          	lfsr	2,15
  2202  002E42  501B               	movf	crcBufS_put@_this,w,c
  2203  002E44  26D9               	addwf	fsr2l,f,c
  2204  002E46  501C               	movf	crcBufS_put@_this+1,w,c
  2205  002E48  22DA               	addwfc	fsr2h,f,c
  2206  002E4A  2ADE               	incf	postinc2,f,c
  2207  002E4C  0E00               	movlw	0
  2208  002E4E  22DD               	addwfc	postdec2,f,c
  2209                           
  2210                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  2211  002E50  EE20 F00F          	lfsr	2,15
  2212  002E54  501B               	movf	crcBufS_put@_this,w,c
  2213  002E56  26D9               	addwf	fsr2l,f,c
  2214  002E58  501C               	movf	crcBufS_put@_this+1,w,c
  2215  002E5A  22DA               	addwfc	fsr2h,f,c
  2216  002E5C  CFDE F020          	movff	postinc2,??_crcBufS_put
  2217  002E60  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2218  002E64  5020               	movf	??_crcBufS_put,w,c
  2219  002E66  241B               	addwf	crcBufS_put@_this,w,c
  2220  002E68  6ED9               	movwf	fsr2l,c
  2221  002E6A  5021               	movf	??_crcBufS_put+1,w,c
  2222  002E6C  201C               	addwfc	crcBufS_put@_this+1,w,c
  2223  002E6E  6EDA               	movwf	fsr2h,c
  2224  002E70  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2225                           
  2226                           ;FastTransfer.c: 325: _this->head++;
  2227  002E74  EE20 F00F          	lfsr	2,15
  2228  002E78  501B               	movf	crcBufS_put@_this,w,c
  2229  002E7A  26D9               	addwf	fsr2l,f,c
  2230  002E7C  501C               	movf	crcBufS_put@_this+1,w,c
  2231  002E7E  22DA               	addwfc	fsr2h,f,c
  2232  002E80  2ADE               	incf	postinc2,f,c
  2233  002E82  0E00               	movlw	0
  2234  002E84  22DD               	addwfc	postdec2,f,c
  2235                           
  2236                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  2237  002E86  EE20 F00F          	lfsr	2,15
  2238  002E8A  501B               	movf	crcBufS_put@_this,w,c
  2239  002E8C  26D9               	addwf	fsr2l,f,c
  2240  002E8E  501C               	movf	crcBufS_put@_this+1,w,c
  2241  002E90  22DA               	addwfc	fsr2h,f,c
  2242  002E92  CFDE F020          	movff	postinc2,??_crcBufS_put
  2243  002E96  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2244  002E9A  5020               	movf	??_crcBufS_put,w,c
  2245  002E9C  241B               	addwf	crcBufS_put@_this,w,c
  2246  002E9E  6ED9               	movwf	fsr2l,c
  2247  002EA0  5021               	movf	??_crcBufS_put+1,w,c
  2248  002EA2  201C               	addwfc	crcBufS_put@_this+1,w,c
  2249  002EA4  6EDA               	movwf	fsr2h,c
  2250  002EA6  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2251                           
  2252                           ;FastTransfer.c: 327: _this->head++;
  2253  002EAA  EE20 F00F          	lfsr	2,15
  2254  002EAE  501B               	movf	crcBufS_put@_this,w,c
  2255  002EB0  26D9               	addwf	fsr2l,f,c
  2256  002EB2  501C               	movf	crcBufS_put@_this+1,w,c
  2257  002EB4  22DA               	addwfc	fsr2h,f,c
  2258  002EB6  2ADE               	incf	postinc2,f,c
  2259  002EB8  0E00               	movlw	0
  2260  002EBA  22DD               	addwfc	postdec2,f,c
  2261                           
  2262                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  2263  002EBC  EE20 F00F          	lfsr	2,15
  2264  002EC0  501B               	movf	crcBufS_put@_this,w,c
  2265  002EC2  26D9               	addwf	fsr2l,f,c
  2266  002EC4  501C               	movf	crcBufS_put@_this+1,w,c
  2267  002EC6  22DA               	addwfc	fsr2h,f,c
  2268  002EC8  0E01               	movlw	1
  2269  002ECA  BEDB               	btfsc	plusw2,7,c
  2270  002ECC  0012               	return	
  2271  002ECE  0E01               	movlw	1
  2272  002ED0  50DB               	movf	plusw2,w,c
  2273  002ED2  E104               	bnz	u2670
  2274  002ED4  0E0F               	movlw	15
  2275  002ED6  5CDE               	subwf	postinc2,w,c
  2276  002ED8  A0D8               	btfss	status,0,c
  2277  002EDA  0012               	return	
  2278  002EDC                     u2670:
  2279                           
  2280                           ;FastTransfer.c: 329: _this->head = 0;
  2281  002EDC  EE20 F00F          	lfsr	2,15
  2282  002EE0  501B               	movf	crcBufS_put@_this,w,c
  2283  002EE2  26D9               	addwf	fsr2l,f,c
  2284  002EE4  501C               	movf	crcBufS_put@_this+1,w,c
  2285  002EE6  22DA               	addwfc	fsr2h,f,c
  2286  002EE8  0E00               	movlw	0
  2287  002EEA  6EDE               	movwf	postinc2,c
  2288  002EEC  0E00               	movlw	0
  2289  002EEE  6EDD               	movwf	postdec2,c
  2290  002EF0  0012               	return	
  2291  002EF2  0012               	return		;funcret
  2292  002EF4                     __end_of_crcBufS_put:
  2293                           	opt stack 0
  2294                           tosu	equ	0xFFF
  2295                           tosh	equ	0xFFE
  2296                           tosl	equ	0xFFD
  2297                           pclath	equ	0xFFA
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           intcon	equ	0xFF2
  2303                           postinc0	equ	0xFEE
  2304                           wreg	equ	0xFE8
  2305                           postdec1	equ	0xFE5
  2306                           fsr1l	equ	0xFE1
  2307                           indf2	equ	0xFDF
  2308                           postinc2	equ	0xFDE
  2309                           postdec2	equ	0xFDD
  2310                           plusw2	equ	0xFDB
  2311                           fsr2h	equ	0xFDA
  2312                           fsr2l	equ	0xFD9
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _FastTransfer_buffer_flush *****************
  2316 ;; Defined at:
  2317 ;;		line 261 in file "FastTransfer.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  2320 ;;		 -> ring_buffer(206), 
  2321 ;;  clearBuffer     2   36[COMRAM] const int 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;		None
  2324 ;; Return value:  Size  Location     Type
  2325 ;;		None               void
  2326 ;; Registers used:
  2327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2333 ;;      Params:         4       0       0       0       0       0       0
  2334 ;;      Locals:         0       0       0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0
  2336 ;;      Totals:         4       0       0       0       0       0       0
  2337 ;;Total ram usage:        4 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    5
  2340 ;; This function calls:
  2341 ;;		_memset
  2342 ;; This function is called by:
  2343 ;;		_sendData
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text4
  2348  003612                     __ptext4:
  2349                           	opt stack 0
  2350  003612                     _FastTransfer_buffer_flush:
  2351                           	opt stack 23
  2352                           
  2353                           ;FastTransfer.c: 262: _this->count = 0;
  2354                           
  2355                           ;incstack = 0
  2356  003612  EE20 F0CC          	lfsr	2,204
  2357  003616  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2358  003618  26D9               	addwf	fsr2l,f,c
  2359  00361A  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2360  00361C  22DA               	addwfc	fsr2h,f,c
  2361  00361E  0E00               	movlw	0
  2362  003620  6EDE               	movwf	postinc2,c
  2363  003622  0E00               	movlw	0
  2364  003624  6EDD               	movwf	postdec2,c
  2365                           
  2366                           ;FastTransfer.c: 263: _this->head = 0;
  2367  003626  EE20 F0C8          	lfsr	2,200
  2368  00362A  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2369  00362C  26D9               	addwf	fsr2l,f,c
  2370  00362E  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2371  003630  22DA               	addwfc	fsr2h,f,c
  2372  003632  0E00               	movlw	0
  2373  003634  6EDE               	movwf	postinc2,c
  2374  003636  0E00               	movlw	0
  2375  003638  6EDD               	movwf	postdec2,c
  2376                           
  2377                           ;FastTransfer.c: 264: _this->tail = 0;
  2378  00363A  EE20 F0CA          	lfsr	2,202
  2379  00363E  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2380  003640  26D9               	addwf	fsr2l,f,c
  2381  003642  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2382  003644  22DA               	addwfc	fsr2h,f,c
  2383  003646  0E00               	movlw	0
  2384  003648  6EDE               	movwf	postinc2,c
  2385  00364A  0E00               	movlw	0
  2386  00364C  6EDD               	movwf	postdec2,c
  2387                           
  2388                           ;FastTransfer.c: 265: if (clearBuffer) {
  2389  00364E  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  2390  003650  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  2391  003652  B4D8               	btfsc	status,2,c
  2392  003654  0012               	return	
  2393                           
  2394                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2395  003656  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2396  00365A  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2397  00365E  0E00               	movlw	0
  2398  003660  6E1E               	movwf	memset@c+1,c
  2399  003662  0E00               	movlw	0
  2400  003664  6E1D               	movwf	memset@c,c
  2401  003666  0E00               	movlw	0
  2402  003668  6E20               	movwf	memset@n+1,c
  2403  00366A  0EC8               	movlw	200
  2404  00366C  6E1F               	movwf	memset@n,c
  2405  00366E  EC58  F01D         	call	_memset	;wreg free
  2406  003672  0012               	return	
  2407  003674  0012               	return		;funcret
  2408  003676                     __end_of_FastTransfer_buffer_flush:
  2409                           	opt stack 0
  2410                           tosu	equ	0xFFF
  2411                           tosh	equ	0xFFE
  2412                           tosl	equ	0xFFD
  2413                           pclath	equ	0xFFA
  2414                           tblptru	equ	0xFF8
  2415                           tblptrh	equ	0xFF7
  2416                           tblptrl	equ	0xFF6
  2417                           tablat	equ	0xFF5
  2418                           intcon	equ	0xFF2
  2419                           postinc0	equ	0xFEE
  2420                           wreg	equ	0xFE8
  2421                           postdec1	equ	0xFE5
  2422                           fsr1l	equ	0xFE1
  2423                           indf2	equ	0xFDF
  2424                           postinc2	equ	0xFDE
  2425                           postdec2	equ	0xFDD
  2426                           plusw2	equ	0xFDB
  2427                           fsr2h	equ	0xFDA
  2428                           fsr2l	equ	0xFD9
  2429                           status	equ	0xFD8
  2430                           
  2431 ;; *************** function _receiveData *****************
  2432 ;; Defined at:
  2433 ;;		line 82 in file "FastTransfer.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;		None
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  holder          3   10[BANK0 ] unsigned char [3]
  2438 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2439 ;;  holder          3    7[BANK0 ] unsigned char [3]
  2440 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2441 ;;  u               2   15[BANK0 ] int 
  2442 ;;  r               2   17[BANK0 ] int 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      unsigned char 
  2445 ;; Registers used:
  2446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2452 ;;      Params:         0       0       0       0       0       0       0
  2453 ;;      Locals:         0      12       0       0       0       0       0
  2454 ;;      Temps:          6       0       0       0       0       0       0
  2455 ;;      Totals:         6      12       0       0       0       0       0
  2456 ;;Total ram usage:       18 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    8
  2459 ;; This function calls:
  2460 ;;		Absolute function
  2461 ;;		_CRC8
  2462 ;;		_CRCcheck
  2463 ;;		_Receive_available
  2464 ;;		_Receive_get
  2465 ;;		_Receive_peek
  2466 ;;		_Send_put
  2467 ;; This function is called by:
  2468 ;;		_updateComms
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text5
  2473  00061E                     __ptext5:
  2474                           	opt stack 0
  2475  00061E                     _receiveData:
  2476                           	opt stack 21
  2477                           
  2478                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2479                           
  2480                           ;incstack = 0
  2481  00061E  5042               	movf	_rx_len,w,c
  2482  000620  A4D8               	btfss	status,2,c
  2483  000622  D0AA               	goto	l5101
  2484                           
  2485                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2486  000624  D801               	call	u5368
  2487  000626  D00A               	goto	u5369
  2488  000628                     u5368:
  2489  000628  0005               	push	
  2490  00062A  6EFA               	movwf	pclath,c
  2491  00062C  5031               	movf	_serial_available,w,c
  2492  00062E  6EFD               	movwf	tosl,c
  2493  000630  5032               	movf	_serial_available+1,w,c
  2494  000632  6EFE               	movwf	tosh,c
  2495  000634  50F8               	movf	tblptru,w,c
  2496  000636  6EFF               	movwf	tosu,c
  2497  000638  50FA               	movf	pclath,w,c
  2498  00063A  0012               	return		;indir
  2499  00063C                     u5369:
  2500  00063C  BE1E               	btfsc	?_Receive_available+1,7,c
  2501  00063E  D09C               	goto	l5101
  2502  000640  501E               	movf	?_Receive_available+1,w,c
  2503  000642  E120               	bnz	l5077
  2504  000644  0E05               	movlw	5
  2505  000646  5C1D               	subwf	?_Receive_available,w,c
  2506  000648  B0D8               	btfsc	status,0,c
  2507  00064A  D01C               	goto	l5077
  2508  00064C  D095               	goto	l5101
  2509                           
  2510                           ;FastTransfer.c: 89: while (serial_read() != 0x06) {
  2511  00064E  D01A               	goto	l5077
  2512  000650                     l5069:
  2513                           
  2514                           ;FastTransfer.c: 93: alignErrorCounter++;
  2515  000650  0100               	movlb	0	; () banked
  2516  000652  4B8E               	infsnz	_alignErrorCounter& (0+255),f,b
  2517  000654  2B8F               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2521  000656  D801               	call	u5388
  2522  000658  D00A               	goto	u5389
  2523  00065A                     u5388:
  2524  00065A  0005               	push	
  2525  00065C  6EFA               	movwf	pclath,c
  2526  00065E  5031               	movf	_serial_available,w,c
  2527  000660  6EFD               	movwf	tosl,c
  2528  000662  5032               	movf	_serial_available+1,w,c
  2529  000664  6EFE               	movwf	tosh,c
  2530  000666  50F8               	movf	tblptru,w,c
  2531  000668  6EFF               	movwf	tosu,c
  2532  00066A  50FA               	movf	pclath,w,c
  2533  00066C  0012               	return		;indir
  2534  00066E                     u5389:
  2535  00066E  BE1E               	btfsc	?_Receive_available+1,7,c
  2536  000670  D006               	goto	l5073
  2537  000672  501E               	movf	?_Receive_available+1,w,c
  2538  000674  E107               	bnz	l5077
  2539  000676  0E05               	movlw	5
  2540  000678  5C1D               	subwf	?_Receive_available,w,c
  2541  00067A  B0D8               	btfsc	status,0,c
  2542  00067C  D003               	goto	l5077
  2543  00067E                     l5073:
  2544                           
  2545                           ;FastTransfer.c: 95: return 0;
  2546  00067E  0E00               	movlw	0
  2547  000680  0012               	return	
  2548  000682  D000               	goto	l5077
  2549  000684                     l5077:
  2550  000684  D801               	call	u5408
  2551  000686  D00A               	goto	u5409
  2552  000688                     u5408:
  2553  000688  0005               	push	
  2554  00068A  6EFA               	movwf	pclath,c
  2555  00068C  5033               	movf	_serial_read,w,c
  2556  00068E  6EFD               	movwf	tosl,c
  2557  000690  5034               	movf	_serial_read+1,w,c
  2558  000692  6EFE               	movwf	tosh,c
  2559  000694  50F8               	movf	tblptru,w,c
  2560  000696  6EFF               	movwf	tosu,c
  2561  000698  50FA               	movf	pclath,w,c
  2562  00069A  0012               	return		;indir
  2563  00069C                     u5409:
  2564  00069C  0A06               	xorlw	6
  2565  00069E  A4D8               	btfss	status,2,c
  2566  0006A0  D7D7               	goto	l5069
  2567                           
  2568                           ;FastTransfer.c: 96: }
  2569                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2570  0006A2  D801               	call	u5428
  2571  0006A4  D00A               	goto	u5429
  2572  0006A6                     u5428:
  2573  0006A6  0005               	push	
  2574  0006A8  6EFA               	movwf	pclath,c
  2575  0006AA  5033               	movf	_serial_read,w,c
  2576  0006AC  6EFD               	movwf	tosl,c
  2577  0006AE  5034               	movf	_serial_read+1,w,c
  2578  0006B0  6EFE               	movwf	tosh,c
  2579  0006B2  50F8               	movf	tblptru,w,c
  2580  0006B4  6EFF               	movwf	tosu,c
  2581  0006B6  50FA               	movf	pclath,w,c
  2582  0006B8  0012               	return		;indir
  2583  0006BA                     u5429:
  2584  0006BA  0A85               	xorlw	133
  2585  0006BC  A4D8               	btfss	status,2,c
  2586  0006BE  D05C               	goto	l5101
  2587                           
  2588                           ;FastTransfer.c: 98: rx_address = serial_read();
  2589  0006C0  D801               	call	u5448
  2590  0006C2  D00A               	goto	u5449
  2591  0006C4                     u5448:
  2592  0006C4  0005               	push	
  2593  0006C6  6EFA               	movwf	pclath,c
  2594  0006C8  5033               	movf	_serial_read,w,c
  2595  0006CA  6EFD               	movwf	tosl,c
  2596  0006CC  5034               	movf	_serial_read+1,w,c
  2597  0006CE  6EFE               	movwf	tosh,c
  2598  0006D0  50F8               	movf	tblptru,w,c
  2599  0006D2  6EFF               	movwf	tosu,c
  2600  0006D4  50FA               	movf	pclath,w,c
  2601  0006D6  0012               	return		;indir
  2602  0006D8                     u5449:
  2603  0006D8  6E40               	movwf	_rx_address,c
  2604                           
  2605                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2606  0006DA  D801               	call	u5458
  2607  0006DC  D00A               	goto	u5459
  2608  0006DE                     u5458:
  2609  0006DE  0005               	push	
  2610  0006E0  6EFA               	movwf	pclath,c
  2611  0006E2  5033               	movf	_serial_read,w,c
  2612  0006E4  6EFD               	movwf	tosl,c
  2613  0006E6  5034               	movf	_serial_read+1,w,c
  2614  0006E8  6EFE               	movwf	tosh,c
  2615  0006EA  50F8               	movf	tblptru,w,c
  2616  0006EC  6EFF               	movwf	tosu,c
  2617  0006EE  50FA               	movf	pclath,w,c
  2618  0006F0  0012               	return		;indir
  2619  0006F2                     u5459:
  2620  0006F2  6E3F               	movwf	_returnAddress,c
  2621                           
  2622                           ;FastTransfer.c: 100: rx_len = serial_read();
  2623  0006F4  D801               	call	u5468
  2624  0006F6  D00A               	goto	u5469
  2625  0006F8                     u5468:
  2626  0006F8  0005               	push	
  2627  0006FA  6EFA               	movwf	pclath,c
  2628  0006FC  5033               	movf	_serial_read,w,c
  2629  0006FE  6EFD               	movwf	tosl,c
  2630  000700  5034               	movf	_serial_read+1,w,c
  2631  000702  6EFE               	movwf	tosh,c
  2632  000704  50F8               	movf	tblptru,w,c
  2633  000706  6EFF               	movwf	tosu,c
  2634  000708  50FA               	movf	pclath,w,c
  2635  00070A  0012               	return		;indir
  2636  00070C                     u5469:
  2637  00070C  6E42               	movwf	_rx_len,c
  2638                           
  2639                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2640  00070E  503E               	movf	_moduleAddress,w,c
  2641  000710  1840               	xorwf	_rx_address,w,c
  2642  000712  B4D8               	btfsc	status,2,c
  2643  000714  D031               	goto	l5101
  2644                           
  2645                           ;FastTransfer.c: 103: addressErrorCounter++;
  2646  000716  0100               	movlb	0	; () banked
  2647  000718  4B8C               	infsnz	_addressErrorCounter& (0+255),f,b
  2648  00071A  2B8D               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;FastTransfer.c: 106: int u;
  2652                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2653  00071C  0E00               	movlw	0
  2654  00071E  0100               	movlb	0	; () banked
  2655  000720  6FD1               	movwf	(receiveData@u+1)& (0+255),b
  2656  000722  0E00               	movlw	0
  2657  000724  6FD0               	movwf	receiveData@u& (0+255),b
  2658  000726  D010               	goto	l5093
  2659  000728                     l5089:
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;FastTransfer.c: 108: serial_read();
  2663  000728  D801               	call	u5488
  2664  00072A  D00A               	goto	l5091
  2665  00072C                     u5488:
  2666  00072C  0005               	push	
  2667  00072E  6EFA               	movwf	pclath,c
  2668  000730  5033               	movf	_serial_read,w,c
  2669  000732  6EFD               	movwf	tosl,c
  2670  000734  5034               	movf	_serial_read+1,w,c
  2671  000736  6EFE               	movwf	tosh,c
  2672  000738  50F8               	movf	tblptru,w,c
  2673  00073A  6EFF               	movwf	tosu,c
  2674  00073C  50FA               	movf	pclath,w,c
  2675  00073E  0012               	return		;indir
  2676  000740                     l5091:
  2677  000740  0100               	movlb	0	; () banked
  2678  000742  4BD0               	infsnz	receiveData@u& (0+255),f,b
  2679  000744  2BD1               	incf	(receiveData@u+1)& (0+255),f,b
  2680  000746  D000               	goto	l5093
  2681  000748                     l5093:
  2682                           
  2683                           ; BSR set to: 0
  2684  000748  5042               	movf	_rx_len,w,c
  2685  00074A  6E27               	movwf	??_receiveData& (0+255),c
  2686  00074C  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2687  00074E  0E01               	movlw	1
  2688  000750  2627               	addwf	??_receiveData,f,c
  2689  000752  0E00               	movlw	0
  2690  000754  2228               	addwfc	??_receiveData+1,f,c
  2691  000756  0100               	movlb	0	; () banked
  2692  000758  51D0               	movf	receiveData@u& (0+255),w,b
  2693  00075A  5C27               	subwf	??_receiveData,w,c
  2694  00075C  5028               	movf	??_receiveData+1,w,c
  2695  00075E  0A80               	xorlw	128
  2696  000760  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2697  000762  0100               	movlb	0	; () banked
  2698  000764  51D1               	movf	(receiveData@u+1)& (0+255),w,b
  2699  000766  0A80               	xorlw	128
  2700  000768  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2701  00076A  B0D8               	btfsc	status,0,c
  2702  00076C  D7DD               	goto	l5089
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;FastTransfer.c: 109: }
  2706                           ;FastTransfer.c: 110: rx_len = 0;
  2707                           
  2708                           ; BSR set to: 0
  2709  00076E  0E00               	movlw	0
  2710  000770  6E42               	movwf	_rx_len,c
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;FastTransfer.c: 111: return 0;
  2714  000772  0E00               	movlw	0
  2715                           
  2716                           ; BSR set to: 0
  2717  000774  0012               	return	
  2718                           
  2719                           ; BSR set to: 0
  2720                           
  2721                           ; BSR set to: 0
  2722                           
  2723                           ; BSR set to: 0
  2724  000776  D000               	goto	l5101
  2725  000778                     l5101:
  2726                           
  2727                           ;FastTransfer.c: 112: }
  2728                           ;FastTransfer.c: 114: }
  2729                           ;FastTransfer.c: 115: }
  2730                           ;FastTransfer.c: 116: }
  2731                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2732  000778  5042               	movf	_rx_len,w,c
  2733  00077A  B4D8               	btfsc	status,2,c
  2734  00077C  D269               	goto	l5225
  2735                           
  2736                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2737  00077E  5041               	movf	_rx_array_inx,w,c
  2738  000780  B4D8               	btfsc	status,2,c
  2739  000782  D002               	goto	l5107
  2740  000784  D048               	goto	l5125
  2741                           
  2742                           ;FastTransfer.c: 123: while (!(serial_available() >= 1));
  2743  000786  D000               	goto	l5107
  2744  000788                     l5107:
  2745  000788  D801               	call	u5528
  2746  00078A  D00A               	goto	u5529
  2747  00078C                     u5528:
  2748  00078C  0005               	push	
  2749  00078E  6EFA               	movwf	pclath,c
  2750  000790  5031               	movf	_serial_available,w,c
  2751  000792  6EFD               	movwf	tosl,c
  2752  000794  5032               	movf	_serial_available+1,w,c
  2753  000796  6EFE               	movwf	tosh,c
  2754  000798  50F8               	movf	tblptru,w,c
  2755  00079A  6EFF               	movwf	tosu,c
  2756  00079C  50FA               	movf	pclath,w,c
  2757  00079E  0012               	return		;indir
  2758  0007A0                     u5529:
  2759  0007A0  BE1E               	btfsc	?_Receive_available+1,7,c
  2760  0007A2  D7F2               	goto	l5107
  2761  0007A4  501E               	movf	?_Receive_available+1,w,c
  2762  0007A6  E105               	bnz	l5109
  2763  0007A8  041D               	decf	?_Receive_available,w,c
  2764  0007AA  B0D8               	btfsc	status,0,c
  2765  0007AC  D002               	goto	l5109
  2766  0007AE  D7EC               	goto	l5107
  2767  0007B0  D000               	goto	l5109
  2768  0007B2                     l5109:
  2769                           
  2770                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2771  0007B2  D801               	call	u5548
  2772  0007B4  D00B               	goto	u5549
  2773  0007B6                     u5548:
  2774  0007B6  0005               	push	
  2775  0007B8  0100               	movlb	0	; () banked
  2776  0007BA  6EFA               	movwf	pclath,c
  2777  0007BC  519A               	movf	_serial_peek& (0+255),w,b
  2778  0007BE  6EFD               	movwf	tosl,c
  2779  0007C0  519B               	movf	(_serial_peek+1)& (0+255),w,b
  2780  0007C2  6EFE               	movwf	tosh,c
  2781  0007C4  50F8               	movf	tblptru,w,c
  2782  0007C6  6EFF               	movwf	tosu,c
  2783  0007C8  50FA               	movf	pclath,w,c
  2784  0007CA  0012               	return		;indir
  2785  0007CC                     u5549:
  2786  0007CC  0AFF               	xorlw	255
  2787  0007CE  A4D8               	btfss	status,2,c
  2788  0007D0  D022               	goto	l5125
  2789                           
  2790                           ;FastTransfer.c: 125: CRCcheck();
  2791  0007D2  EC78  F00E         	call	_CRCcheck	;wreg free
  2792                           
  2793                           ;FastTransfer.c: 126: rx_len = 0;
  2794  0007D6  0E00               	movlw	0
  2795  0007D8  6E42               	movwf	_rx_len,c
  2796                           
  2797                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2798  0007DA  0E00               	movlw	0
  2799  0007DC  6E41               	movwf	_rx_array_inx,c
  2800                           
  2801                           ;FastTransfer.c: 128: return 0;
  2802  0007DE  0E00               	movlw	0
  2803  0007E0  0012               	return	
  2804                           
  2805                           ;FastTransfer.c: 129: }
  2806                           ;FastTransfer.c: 130: }
  2807                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2808  0007E2  D019               	goto	l5125
  2809  0007E4                     l5121:
  2810                           
  2811                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2812  0007E4  D801               	call	u5568
  2813  0007E6  D00A               	goto	u5569
  2814  0007E8                     u5568:
  2815  0007E8  0005               	push	
  2816  0007EA  6EFA               	movwf	pclath,c
  2817  0007EC  5033               	movf	_serial_read,w,c
  2818  0007EE  6EFD               	movwf	tosl,c
  2819  0007F0  5034               	movf	_serial_read+1,w,c
  2820  0007F2  6EFE               	movwf	tosh,c
  2821  0007F4  50F8               	movf	tblptru,w,c
  2822  0007F6  6EFF               	movwf	tosu,c
  2823  0007F8  50FA               	movf	pclath,w,c
  2824  0007FA  0012               	return		;indir
  2825  0007FC                     u5569:
  2826  0007FC  6E27               	movwf	??_receiveData& (0+255),c
  2827  0007FE  5041               	movf	_rx_array_inx,w,c
  2828  000800  0D01               	mullw	1
  2829  000802  0E00               	movlw	low _rx_buffer
  2830  000804  24F3               	addwf	prodl,w,c
  2831  000806  6ED9               	movwf	fsr2l,c
  2832  000808  0E03               	movlw	high _rx_buffer
  2833  00080A  20F4               	addwfc	prodh,w,c
  2834  00080C  6EDA               	movwf	fsr2h,c
  2835  00080E  C027  FFDF         	movff	??_receiveData,indf2
  2836  000812  2A41               	incf	_rx_array_inx,f,c
  2837  000814  D000               	goto	l5125
  2838  000816                     l5125:
  2839  000816  D801               	call	u5578
  2840  000818  D00A               	goto	u5579
  2841  00081A                     u5578:
  2842  00081A  0005               	push	
  2843  00081C  6EFA               	movwf	pclath,c
  2844  00081E  5031               	movf	_serial_available,w,c
  2845  000820  6EFD               	movwf	tosl,c
  2846  000822  5032               	movf	_serial_available+1,w,c
  2847  000824  6EFE               	movwf	tosh,c
  2848  000826  50F8               	movf	tblptru,w,c
  2849  000828  6EFF               	movwf	tosu,c
  2850  00082A  50FA               	movf	pclath,w,c
  2851  00082C  0012               	return		;indir
  2852  00082E                     u5579:
  2853  00082E  501D               	movf	?_Receive_available,w,c
  2854  000830  101E               	iorwf	?_Receive_available+1,w,c
  2855  000832  B4D8               	btfsc	status,2,c
  2856  000834  D006               	goto	l5129
  2857  000836  5041               	movf	_rx_array_inx,w,c
  2858  000838  5C42               	subwf	_rx_len,w,c
  2859  00083A  A0D8               	btfss	status,0,c
  2860  00083C  D002               	goto	l5129
  2861  00083E  D7D2               	goto	l5121
  2862  000840  D000               	goto	l5129
  2863  000842                     l5129:
  2864                           
  2865                           ;FastTransfer.c: 135: }
  2866                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2867  000842  5042               	movf	_rx_len,w,c
  2868  000844  6E27               	movwf	??_receiveData& (0+255),c
  2869  000846  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2870  000848  0EFF               	movlw	255
  2871  00084A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2872  00084C  0EFF               	movlw	255
  2873  00084E  6E2A               	movwf	(??_receiveData+3)& (0+255),c
  2874  000850  5041               	movf	_rx_array_inx,w,c
  2875  000852  6E2B               	movwf	(??_receiveData+4)& (0+255),c
  2876  000854  6A2C               	clrf	(??_receiveData+5)& (0+255),c
  2877  000856  5029               	movf	??_receiveData+2,w,c
  2878  000858  262B               	addwf	??_receiveData+4,f,c
  2879  00085A  502A               	movf	??_receiveData+3,w,c
  2880  00085C  222C               	addwfc	??_receiveData+5,f,c
  2881  00085E  5027               	movf	??_receiveData,w,c
  2882  000860  182B               	xorwf	??_receiveData+4,w,c
  2883  000862  E103               	bnz	u5601
  2884  000864  5028               	movf	??_receiveData+1,w,c
  2885  000866  182C               	xorwf	??_receiveData+5,w,c
  2886  000868  A4D8               	btfss	status,2,c
  2887  00086A                     u5601:
  2888  00086A  D1F2               	goto	l5225
  2889                           
  2890                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2891  00086C  0E00               	movlw	low _rx_buffer
  2892  00086E  6E1B               	movwf	CRC8@data,c
  2893  000870  0E03               	movlw	high _rx_buffer
  2894  000872  6E1C               	movwf	CRC8@data+1,c
  2895  000874  C042  F01D         	movff	_rx_len,CRC8@len
  2896  000878  EC6A  F01B         	call	_CRC8	;wreg free
  2897  00087C  6E3C               	movwf	_calc_CS,c
  2898                           
  2899                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2900  00087E  0EFF               	movlw	255
  2901  000880  6E27               	movwf	??_receiveData& (0+255),c
  2902  000882  0EFF               	movlw	255
  2903  000884  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2904  000886  5041               	movf	_rx_array_inx,w,c
  2905  000888  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2906  00088A  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2907  00088C  5027               	movf	??_receiveData,w,c
  2908  00088E  2629               	addwf	??_receiveData+2,f,c
  2909  000890  5028               	movf	??_receiveData+1,w,c
  2910  000892  222A               	addwfc	??_receiveData+3,f,c
  2911  000894  0E00               	movlw	low _rx_buffer
  2912  000896  2429               	addwf	??_receiveData+2,w,c
  2913  000898  6ED9               	movwf	fsr2l,c
  2914  00089A  0E03               	movlw	high _rx_buffer
  2915  00089C  202A               	addwfc	??_receiveData+3,w,c
  2916  00089E  6EDA               	movwf	fsr2h,c
  2917  0008A0  503C               	movf	_calc_CS,w,c
  2918  0008A2  18DE               	xorwf	postinc2,w,c
  2919  0008A4  A4D8               	btfss	status,2,c
  2920  0008A6  D11D               	goto	l5187
  2921                           
  2922                           ;FastTransfer.c: 147: int r;
  2923                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2924  0008A8  0E00               	movlw	0
  2925  0008AA  0100               	movlb	0	; () banked
  2926  0008AC  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  2927  0008AE  0E00               	movlw	0
  2928  0008B0  6FD2               	movwf	receiveData@r& (0+255),b
  2929  0008B2  D054               	goto	l5147
  2930  0008B4                     l5137:
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2934  0008B4  0E00               	movlw	low _rx_buffer
  2935  0008B6  0100               	movlb	0	; () banked
  2936  0008B8  25D2               	addwf	receiveData@r& (0+255),w,b
  2937  0008BA  6ED9               	movwf	fsr2l,c
  2938  0008BC  0E03               	movlw	high _rx_buffer
  2939  0008BE  0100               	movlb	0	; () banked
  2940  0008C0  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2941  0008C2  6EDA               	movwf	fsr2h,c
  2942  0008C4  503D               	movf	_maxDataAddress,w,c
  2943  0008C6  5CDE               	subwf	postinc2,w,c
  2944  0008C8  B0D8               	btfsc	status,0,c
  2945  0008CA  D039               	goto	l5143
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2949  0008CC  0E01               	movlw	1
  2950  0008CE  0100               	movlb	0	; () banked
  2951  0008D0  25D2               	addwf	receiveData@r& (0+255),w,b
  2952  0008D2  6E27               	movwf	??_receiveData& (0+255),c
  2953  0008D4  0E00               	movlw	0
  2954  0008D6  0100               	movlb	0	; () banked
  2955  0008D8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2956  0008DA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2957  0008DC  0E00               	movlw	low _rx_buffer
  2958  0008DE  2427               	addwf	??_receiveData,w,c
  2959  0008E0  6ED9               	movwf	fsr2l,c
  2960  0008E2  0E03               	movlw	high _rx_buffer
  2961  0008E4  2028               	addwfc	??_receiveData+1,w,c
  2962  0008E6  6EDA               	movwf	fsr2h,c
  2963  0008E8  50DF               	movf	indf2,w,c
  2964  0008EA  6E43               	movwf	_group,c
  2965                           
  2966                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2967  0008EC  0E02               	movlw	2
  2968  0008EE  0100               	movlb	0	; () banked
  2969  0008F0  25D2               	addwf	receiveData@r& (0+255),w,b
  2970  0008F2  6E27               	movwf	??_receiveData& (0+255),c
  2971  0008F4  0E00               	movlw	0
  2972  0008F6  0100               	movlb	0	; () banked
  2973  0008F8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2974  0008FA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2975  0008FC  0E00               	movlw	low _rx_buffer
  2976  0008FE  2427               	addwf	??_receiveData,w,c
  2977  000900  6ED9               	movwf	fsr2l,c
  2978  000902  0E03               	movlw	high _rx_buffer
  2979  000904  2028               	addwfc	??_receiveData+1,w,c
  2980  000906  6EDA               	movwf	fsr2h,c
  2981  000908  50DF               	movf	indf2,w,c
  2982  00090A  6E44               	movwf	_group+1,c
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2986  00090C  0E00               	movlw	low _rx_buffer
  2987  00090E  0100               	movlb	0	; () banked
  2988  000910  25D2               	addwf	receiveData@r& (0+255),w,b
  2989  000912  6ED9               	movwf	fsr2l,c
  2990  000914  0E03               	movlw	high _rx_buffer
  2991  000916  0100               	movlb	0	; () banked
  2992  000918  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2993  00091A  6EDA               	movwf	fsr2h,c
  2994  00091C  50DF               	movf	indf2,w,c
  2995  00091E  6E27               	movwf	??_receiveData& (0+255),c
  2996  000920  5027               	movf	??_receiveData,w,c
  2997  000922  0D02               	mullw	2
  2998  000924  50F3               	movf	prodl,w,c
  2999  000926  0100               	movlb	0	; () banked
  3000  000928  2596               	addwf	_receiveArrayAddress& (0+255),w,b
  3001  00092A  6ED9               	movwf	fsr2l,c
  3002  00092C  50F4               	movf	prodh,w,c
  3003  00092E  0100               	movlb	0	; () banked
  3004  000930  2197               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  3005  000932  6EDA               	movwf	fsr2h,c
  3006  000934  C043  FFDE         	movff	_group,postinc2
  3007  000938  C044  FFDD         	movff	_group+1,postdec2
  3008                           
  3009                           ;FastTransfer.c: 153: } else {
  3010  00093C  D004               	goto	l5145
  3011  00093E                     l5143:
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  3015  00093E  0100               	movlb	0	; () banked
  3016  000940  4B92               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  3017  000942  2B93               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  3018  000944  D000               	goto	l5145
  3019  000946                     l5145:
  3020                           
  3021                           ; BSR set to: 0
  3022  000946  0E03               	movlw	3
  3023  000948  0100               	movlb	0	; () banked
  3024  00094A  25D2               	addwf	receiveData@r& (0+255),w,b
  3025  00094C  0100               	movlb	0	; () banked
  3026  00094E  6FD2               	movwf	receiveData@r& (0+255),b
  3027  000950  0E00               	movlw	0
  3028  000952  0100               	movlb	0	; () banked
  3029  000954  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  3030  000956  0100               	movlb	0	; () banked
  3031  000958  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  3032  00095A  D000               	goto	l5147
  3033  00095C                     l5147:
  3034                           
  3035                           ; BSR set to: 0
  3036  00095C  5042               	movf	_rx_len,w,c
  3037  00095E  6E27               	movwf	??_receiveData& (0+255),c
  3038  000960  6A28               	clrf	(??_receiveData+1)& (0+255),c
  3039  000962  5027               	movf	??_receiveData,w,c
  3040  000964  0100               	movlb	0	; () banked
  3041  000966  5DD2               	subwf	receiveData@r& (0+255),w,b
  3042  000968  0100               	movlb	0	; () banked
  3043  00096A  51D3               	movf	(receiveData@r+1)& (0+255),w,b
  3044  00096C  0A80               	xorlw	128
  3045  00096E  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3046  000970  5028               	movf	??_receiveData+1,w,c
  3047  000972  0A80               	xorlw	128
  3048  000974  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  3049  000976  A0D8               	btfss	status,0,c
  3050  000978  D79D               	goto	l5137
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;FastTransfer.c: 155: }
  3054                           ;FastTransfer.c: 156: }
  3055                           ;FastTransfer.c: 159: if (AKNAKsend) {
  3056                           
  3057                           ; BSR set to: 0
  3058  00097A  5039               	movf	_AKNAKsend,w,c
  3059  00097C  B4D8               	btfsc	status,2,c
  3060  00097E  D0AA               	goto	l5177
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;FastTransfer.c: 160: unsigned char holder[3];
  3064                           ;FastTransfer.c: 161: holder[0] = 255;
  3065  000980  0100               	movlb	0	; () banked
  3066  000982  69C8               	setf	receiveData@holder& (0+255),b
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;FastTransfer.c: 162: holder[1] = 1;
  3070  000984  0E01               	movlw	1
  3071  000986  0100               	movlb	0	; () banked
  3072  000988  6FC9               	movwf	(receiveData@holder+1)& (0+255),b
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  3076  00098A  0EFF               	movlw	255
  3077  00098C  6E27               	movwf	??_receiveData& (0+255),c
  3078  00098E  0EFF               	movlw	255
  3079  000990  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3080  000992  5041               	movf	_rx_array_inx,w,c
  3081  000994  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3082  000996  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3083  000998  5027               	movf	??_receiveData,w,c
  3084  00099A  2629               	addwf	??_receiveData+2,f,c
  3085  00099C  5028               	movf	??_receiveData+1,w,c
  3086  00099E  222A               	addwfc	??_receiveData+3,f,c
  3087  0009A0  0E00               	movlw	low _rx_buffer
  3088  0009A2  2429               	addwf	??_receiveData+2,w,c
  3089  0009A4  6ED9               	movwf	fsr2l,c
  3090  0009A6  0E03               	movlw	high _rx_buffer
  3091  0009A8  202A               	addwfc	??_receiveData+3,w,c
  3092  0009AA  6EDA               	movwf	fsr2h,c
  3093  0009AC  50DF               	movf	indf2,w,c
  3094  0009AE  0100               	movlb	0	; () banked
  3095  0009B0  6FCA               	movwf	(receiveData@holder+2)& (0+255),b
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  3099  0009B2  0EC8               	movlw	low receiveData@holder
  3100  0009B4  6E1B               	movwf	CRC8@data,c
  3101  0009B6  0E00               	movlw	high receiveData@holder
  3102  0009B8  6E1C               	movwf	CRC8@data+1,c
  3103  0009BA  0E03               	movlw	3
  3104  0009BC  6E1D               	movwf	CRC8@len,c
  3105  0009BE  EC6A  F01B         	call	_CRC8	;wreg free
  3106  0009C2  0100               	movlb	0	; () banked
  3107  0009C4  6FCE               	movwf	receiveData@crcHolder& (0+255),b
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;FastTransfer.c: 165: serial_write(0x06);
  3111  0009C6  D801               	call	u5658
  3112  0009C8  D00B               	goto	l5161
  3113  0009CA                     u5658:
  3114  0009CA  0005               	push	
  3115  0009CC  6EFA               	movwf	pclath,c
  3116  0009CE  5035               	movf	_serial_write,w,c
  3117  0009D0  6EFD               	movwf	tosl,c
  3118  0009D2  5036               	movf	_serial_write+1,w,c
  3119  0009D4  6EFE               	movwf	tosh,c
  3120  0009D6  50F8               	movf	tblptru,w,c
  3121  0009D8  6EFF               	movwf	tosu,c
  3122  0009DA  50FA               	movf	pclath,w,c
  3123  0009DC  0E06               	movlw	6
  3124  0009DE  0012               	return		;indir
  3125  0009E0                     l5161:
  3126                           
  3127                           ;FastTransfer.c: 166: serial_write(0x85);
  3128  0009E0  D801               	call	u5668
  3129  0009E2  D00B               	goto	l5163
  3130  0009E4                     u5668:
  3131  0009E4  0005               	push	
  3132  0009E6  6EFA               	movwf	pclath,c
  3133  0009E8  5035               	movf	_serial_write,w,c
  3134  0009EA  6EFD               	movwf	tosl,c
  3135  0009EC  5036               	movf	_serial_write+1,w,c
  3136  0009EE  6EFE               	movwf	tosh,c
  3137  0009F0  50F8               	movf	tblptru,w,c
  3138  0009F2  6EFF               	movwf	tosu,c
  3139  0009F4  50FA               	movf	pclath,w,c
  3140  0009F6  0E85               	movlw	133
  3141  0009F8  0012               	return		;indir
  3142  0009FA                     l5163:
  3143                           
  3144                           ;FastTransfer.c: 167: serial_write(returnAddress);
  3145  0009FA  D801               	call	u5678
  3146  0009FC  D00B               	goto	l5165
  3147  0009FE                     u5678:
  3148  0009FE  0005               	push	
  3149  000A00  6EFA               	movwf	pclath,c
  3150  000A02  5035               	movf	_serial_write,w,c
  3151  000A04  6EFD               	movwf	tosl,c
  3152  000A06  5036               	movf	_serial_write+1,w,c
  3153  000A08  6EFE               	movwf	tosh,c
  3154  000A0A  50F8               	movf	tblptru,w,c
  3155  000A0C  6EFF               	movwf	tosu,c
  3156  000A0E  50FA               	movf	pclath,w,c
  3157  000A10  503F               	movf	_returnAddress,w,c
  3158  000A12  0012               	return		;indir
  3159  000A14                     l5165:
  3160                           
  3161                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  3162  000A14  D801               	call	u5688
  3163  000A16  D00B               	goto	l5167
  3164  000A18                     u5688:
  3165  000A18  0005               	push	
  3166  000A1A  6EFA               	movwf	pclath,c
  3167  000A1C  5035               	movf	_serial_write,w,c
  3168  000A1E  6EFD               	movwf	tosl,c
  3169  000A20  5036               	movf	_serial_write+1,w,c
  3170  000A22  6EFE               	movwf	tosh,c
  3171  000A24  50F8               	movf	tblptru,w,c
  3172  000A26  6EFF               	movwf	tosu,c
  3173  000A28  50FA               	movf	pclath,w,c
  3174  000A2A  503E               	movf	_moduleAddress,w,c
  3175  000A2C  0012               	return		;indir
  3176  000A2E                     l5167:
  3177                           
  3178                           ;FastTransfer.c: 169: serial_write(3);
  3179  000A2E  D801               	call	u5698
  3180  000A30  D00B               	goto	l5169
  3181  000A32                     u5698:
  3182  000A32  0005               	push	
  3183  000A34  6EFA               	movwf	pclath,c
  3184  000A36  5035               	movf	_serial_write,w,c
  3185  000A38  6EFD               	movwf	tosl,c
  3186  000A3A  5036               	movf	_serial_write+1,w,c
  3187  000A3C  6EFE               	movwf	tosh,c
  3188  000A3E  50F8               	movf	tblptru,w,c
  3189  000A40  6EFF               	movwf	tosu,c
  3190  000A42  50FA               	movf	pclath,w,c
  3191  000A44  0E03               	movlw	3
  3192  000A46  0012               	return		;indir
  3193  000A48                     l5169:
  3194                           
  3195                           ;FastTransfer.c: 170: serial_write(255);
  3196  000A48  D801               	call	u5708
  3197  000A4A  D00B               	goto	l5171
  3198  000A4C                     u5708:
  3199  000A4C  0005               	push	
  3200  000A4E  6EFA               	movwf	pclath,c
  3201  000A50  5035               	movf	_serial_write,w,c
  3202  000A52  6EFD               	movwf	tosl,c
  3203  000A54  5036               	movf	_serial_write+1,w,c
  3204  000A56  6EFE               	movwf	tosh,c
  3205  000A58  50F8               	movf	tblptru,w,c
  3206  000A5A  6EFF               	movwf	tosu,c
  3207  000A5C  50FA               	movf	pclath,w,c
  3208  000A5E  0EFF               	movlw	255
  3209  000A60  0012               	return		;indir
  3210  000A62                     l5171:
  3211                           
  3212                           ;FastTransfer.c: 171: serial_write(1);
  3213  000A62  D801               	call	u5718
  3214  000A64  D00B               	goto	l5173
  3215  000A66                     u5718:
  3216  000A66  0005               	push	
  3217  000A68  6EFA               	movwf	pclath,c
  3218  000A6A  5035               	movf	_serial_write,w,c
  3219  000A6C  6EFD               	movwf	tosl,c
  3220  000A6E  5036               	movf	_serial_write+1,w,c
  3221  000A70  6EFE               	movwf	tosh,c
  3222  000A72  50F8               	movf	tblptru,w,c
  3223  000A74  6EFF               	movwf	tosu,c
  3224  000A76  50FA               	movf	pclath,w,c
  3225  000A78  0E01               	movlw	1
  3226  000A7A  0012               	return		;indir
  3227  000A7C                     l5173:
  3228                           
  3229                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  3230  000A7C  D801               	call	u5728
  3231  000A7E  D01C               	goto	l5175
  3232  000A80                     u5728:
  3233  000A80  0005               	push	
  3234  000A82  6EFA               	movwf	pclath,c
  3235  000A84  5035               	movf	_serial_write,w,c
  3236  000A86  6EFD               	movwf	tosl,c
  3237  000A88  5036               	movf	_serial_write+1,w,c
  3238  000A8A  6EFE               	movwf	tosh,c
  3239  000A8C  50F8               	movf	tblptru,w,c
  3240  000A8E  6EFF               	movwf	tosu,c
  3241  000A90  50FA               	movf	pclath,w,c
  3242  000A92  0EFF               	movlw	255
  3243  000A94  6E27               	movwf	??_receiveData& (0+255),c
  3244  000A96  0EFF               	movlw	255
  3245  000A98  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3246  000A9A  5041               	movf	_rx_array_inx,w,c
  3247  000A9C  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3248  000A9E  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3249  000AA0  5027               	movf	??_receiveData,w,c
  3250  000AA2  2629               	addwf	??_receiveData+2,f,c
  3251  000AA4  5028               	movf	??_receiveData+1,w,c
  3252  000AA6  222A               	addwfc	??_receiveData+3,f,c
  3253  000AA8  0E00               	movlw	low _rx_buffer
  3254  000AAA  2429               	addwf	??_receiveData+2,w,c
  3255  000AAC  6ED9               	movwf	fsr2l,c
  3256  000AAE  0E03               	movlw	high _rx_buffer
  3257  000AB0  202A               	addwfc	??_receiveData+3,w,c
  3258  000AB2  6EDA               	movwf	fsr2h,c
  3259  000AB4  50DF               	movf	indf2,w,c
  3260  000AB6  0012               	return		;indir
  3261  000AB8                     l5175:
  3262                           
  3263                           ;FastTransfer.c: 173: serial_write(crcHolder);
  3264  000AB8  D801               	call	u5738
  3265  000ABA  D00C               	goto	l5177
  3266  000ABC                     u5738:
  3267  000ABC  0005               	push	
  3268  000ABE  6EFA               	movwf	pclath,c
  3269  000AC0  5035               	movf	_serial_write,w,c
  3270  000AC2  6EFD               	movwf	tosl,c
  3271  000AC4  5036               	movf	_serial_write+1,w,c
  3272  000AC6  6EFE               	movwf	tosh,c
  3273  000AC8  50F8               	movf	tblptru,w,c
  3274  000ACA  6EFF               	movwf	tosu,c
  3275  000ACC  50FA               	movf	pclath,w,c
  3276  000ACE  0100               	movlb	0	; () banked
  3277  000AD0  51CE               	movf	receiveData@crcHolder& (0+255),w,b
  3278  000AD2  0012               	return		;indir
  3279  000AD4                     l5177:
  3280                           
  3281                           ;FastTransfer.c: 174: }
  3282                           ;FastTransfer.c: 178: rx_len = 0;
  3283  000AD4  0E00               	movlw	0
  3284  000AD6  6E42               	movwf	_rx_len,c
  3285                           
  3286                           ;FastTransfer.c: 179: rx_array_inx = 0;
  3287  000AD8  0E00               	movlw	0
  3288  000ADA  6E41               	movwf	_rx_array_inx,c
  3289                           
  3290                           ;FastTransfer.c: 180: return 1;
  3291  000ADC  0E01               	movlw	1
  3292  000ADE  0012               	return	
  3293                           
  3294                           ;FastTransfer.c: 181: } else {
  3295  000AE0  D0B7               	goto	l5225
  3296  000AE2                     l5187:
  3297                           
  3298                           ;FastTransfer.c: 182: crcErrorCounter++;
  3299  000AE2  0100               	movlb	0	; () banked
  3300  000AE4  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  3301  000AE6  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;FastTransfer.c: 184: if (AKNAKsend) {
  3305  000AE8  5039               	movf	_AKNAKsend,w,c
  3306  000AEA  B4D8               	btfsc	status,2,c
  3307  000AEC  D0AA               	goto	l5217
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;FastTransfer.c: 185: unsigned char holder[3];
  3311                           ;FastTransfer.c: 186: holder[0] = 255;
  3312  000AEE  0100               	movlb	0	; () banked
  3313  000AF0  69CB               	setf	receiveData@holder_1130& (0+255),b
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;FastTransfer.c: 187: holder[1] = 2;
  3317  000AF2  0E02               	movlw	2
  3318  000AF4  0100               	movlb	0	; () banked
  3319  000AF6  6FCC               	movwf	(receiveData@holder_1130+1)& (0+255),b
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  3323  000AF8  0EFF               	movlw	255
  3324  000AFA  6E27               	movwf	??_receiveData& (0+255),c
  3325  000AFC  0EFF               	movlw	255
  3326  000AFE  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3327  000B00  5041               	movf	_rx_array_inx,w,c
  3328  000B02  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3329  000B04  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3330  000B06  5027               	movf	??_receiveData,w,c
  3331  000B08  2629               	addwf	??_receiveData+2,f,c
  3332  000B0A  5028               	movf	??_receiveData+1,w,c
  3333  000B0C  222A               	addwfc	??_receiveData+3,f,c
  3334  000B0E  0E00               	movlw	low _rx_buffer
  3335  000B10  2429               	addwf	??_receiveData+2,w,c
  3336  000B12  6ED9               	movwf	fsr2l,c
  3337  000B14  0E03               	movlw	high _rx_buffer
  3338  000B16  202A               	addwfc	??_receiveData+3,w,c
  3339  000B18  6EDA               	movwf	fsr2h,c
  3340  000B1A  50DF               	movf	indf2,w,c
  3341  000B1C  0100               	movlb	0	; () banked
  3342  000B1E  6FCD               	movwf	(receiveData@holder_1130+2)& (0+255),b
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  3346  000B20  0ECB               	movlw	low receiveData@holder_1130
  3347  000B22  6E1B               	movwf	CRC8@data,c
  3348  000B24  0E00               	movlw	high receiveData@holder_1130
  3349  000B26  6E1C               	movwf	CRC8@data+1,c
  3350  000B28  0E03               	movlw	3
  3351  000B2A  6E1D               	movwf	CRC8@len,c
  3352  000B2C  EC6A  F01B         	call	_CRC8
  3353  000B30  0100               	movlb	0	; () banked
  3354  000B32  6FCF               	movwf	receiveData@crcHolder_1131& (0+255),b
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;FastTransfer.c: 190: serial_write(0x06);
  3358  000B34  D801               	call	u5758
  3359  000B36  D00B               	goto	l5201
  3360  000B38                     u5758:
  3361  000B38  0005               	push	
  3362  000B3A  6EFA               	movwf	pclath,c
  3363  000B3C  5035               	movf	_serial_write,w,c
  3364  000B3E  6EFD               	movwf	tosl,c
  3365  000B40  5036               	movf	_serial_write+1,w,c
  3366  000B42  6EFE               	movwf	tosh,c
  3367  000B44  50F8               	movf	tblptru,w,c
  3368  000B46  6EFF               	movwf	tosu,c
  3369  000B48  50FA               	movf	pclath,w,c
  3370  000B4A  0E06               	movlw	6
  3371  000B4C  0012               	return		;indir
  3372  000B4E                     l5201:
  3373                           
  3374                           ;FastTransfer.c: 191: serial_write(0x85);
  3375  000B4E  D801               	call	u5768
  3376  000B50  D00B               	goto	l5203
  3377  000B52                     u5768:
  3378  000B52  0005               	push	
  3379  000B54  6EFA               	movwf	pclath,c
  3380  000B56  5035               	movf	_serial_write,w,c
  3381  000B58  6EFD               	movwf	tosl,c
  3382  000B5A  5036               	movf	_serial_write+1,w,c
  3383  000B5C  6EFE               	movwf	tosh,c
  3384  000B5E  50F8               	movf	tblptru,w,c
  3385  000B60  6EFF               	movwf	tosu,c
  3386  000B62  50FA               	movf	pclath,w,c
  3387  000B64  0E85               	movlw	133
  3388  000B66  0012               	return		;indir
  3389  000B68                     l5203:
  3390                           
  3391                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3392  000B68  D801               	call	u5778
  3393  000B6A  D00B               	goto	l5205
  3394  000B6C                     u5778:
  3395  000B6C  0005               	push	
  3396  000B6E  6EFA               	movwf	pclath,c
  3397  000B70  5035               	movf	_serial_write,w,c
  3398  000B72  6EFD               	movwf	tosl,c
  3399  000B74  5036               	movf	_serial_write+1,w,c
  3400  000B76  6EFE               	movwf	tosh,c
  3401  000B78  50F8               	movf	tblptru,w,c
  3402  000B7A  6EFF               	movwf	tosu,c
  3403  000B7C  50FA               	movf	pclath,w,c
  3404  000B7E  503F               	movf	_returnAddress,w,c
  3405  000B80  0012               	return		;indir
  3406  000B82                     l5205:
  3407                           
  3408                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3409  000B82  D801               	call	u5788
  3410  000B84  D00B               	goto	l5207
  3411  000B86                     u5788:
  3412  000B86  0005               	push	
  3413  000B88  6EFA               	movwf	pclath,c
  3414  000B8A  5035               	movf	_serial_write,w,c
  3415  000B8C  6EFD               	movwf	tosl,c
  3416  000B8E  5036               	movf	_serial_write+1,w,c
  3417  000B90  6EFE               	movwf	tosh,c
  3418  000B92  50F8               	movf	tblptru,w,c
  3419  000B94  6EFF               	movwf	tosu,c
  3420  000B96  50FA               	movf	pclath,w,c
  3421  000B98  503E               	movf	_moduleAddress,w,c
  3422  000B9A  0012               	return		;indir
  3423  000B9C                     l5207:
  3424                           
  3425                           ;FastTransfer.c: 194: serial_write(3);
  3426  000B9C  D801               	call	u5798
  3427  000B9E  D00B               	goto	l5209
  3428  000BA0                     u5798:
  3429  000BA0  0005               	push	
  3430  000BA2  6EFA               	movwf	pclath,c
  3431  000BA4  5035               	movf	_serial_write,w,c
  3432  000BA6  6EFD               	movwf	tosl,c
  3433  000BA8  5036               	movf	_serial_write+1,w,c
  3434  000BAA  6EFE               	movwf	tosh,c
  3435  000BAC  50F8               	movf	tblptru,w,c
  3436  000BAE  6EFF               	movwf	tosu,c
  3437  000BB0  50FA               	movf	pclath,w,c
  3438  000BB2  0E03               	movlw	3
  3439  000BB4  0012               	return		;indir
  3440  000BB6                     l5209:
  3441                           
  3442                           ;FastTransfer.c: 195: serial_write(255);
  3443  000BB6  D801               	call	u5808
  3444  000BB8  D00B               	goto	l5211
  3445  000BBA                     u5808:
  3446  000BBA  0005               	push	
  3447  000BBC  6EFA               	movwf	pclath,c
  3448  000BBE  5035               	movf	_serial_write,w,c
  3449  000BC0  6EFD               	movwf	tosl,c
  3450  000BC2  5036               	movf	_serial_write+1,w,c
  3451  000BC4  6EFE               	movwf	tosh,c
  3452  000BC6  50F8               	movf	tblptru,w,c
  3453  000BC8  6EFF               	movwf	tosu,c
  3454  000BCA  50FA               	movf	pclath,w,c
  3455  000BCC  0EFF               	movlw	255
  3456  000BCE  0012               	return		;indir
  3457  000BD0                     l5211:
  3458                           
  3459                           ;FastTransfer.c: 196: serial_write(2);
  3460  000BD0  D801               	call	u5818
  3461  000BD2  D00B               	goto	l5213
  3462  000BD4                     u5818:
  3463  000BD4  0005               	push	
  3464  000BD6  6EFA               	movwf	pclath,c
  3465  000BD8  5035               	movf	_serial_write,w,c
  3466  000BDA  6EFD               	movwf	tosl,c
  3467  000BDC  5036               	movf	_serial_write+1,w,c
  3468  000BDE  6EFE               	movwf	tosh,c
  3469  000BE0  50F8               	movf	tblptru,w,c
  3470  000BE2  6EFF               	movwf	tosu,c
  3471  000BE4  50FA               	movf	pclath,w,c
  3472  000BE6  0E02               	movlw	2
  3473  000BE8  0012               	return		;indir
  3474  000BEA                     l5213:
  3475                           
  3476                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3477  000BEA  D801               	call	u5828
  3478  000BEC  D01C               	goto	l5215
  3479  000BEE                     u5828:
  3480  000BEE  0005               	push	
  3481  000BF0  6EFA               	movwf	pclath,c
  3482  000BF2  5035               	movf	_serial_write,w,c
  3483  000BF4  6EFD               	movwf	tosl,c
  3484  000BF6  5036               	movf	_serial_write+1,w,c
  3485  000BF8  6EFE               	movwf	tosh,c
  3486  000BFA  50F8               	movf	tblptru,w,c
  3487  000BFC  6EFF               	movwf	tosu,c
  3488  000BFE  50FA               	movf	pclath,w,c
  3489  000C00  0EFF               	movlw	255
  3490  000C02  6E27               	movwf	??_receiveData& (0+255),c
  3491  000C04  0EFF               	movlw	255
  3492  000C06  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3493  000C08  5041               	movf	_rx_array_inx,w,c
  3494  000C0A  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3495  000C0C  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3496  000C0E  5027               	movf	??_receiveData,w,c
  3497  000C10  2629               	addwf	??_receiveData+2,f,c
  3498  000C12  5028               	movf	??_receiveData+1,w,c
  3499  000C14  222A               	addwfc	??_receiveData+3,f,c
  3500  000C16  0E00               	movlw	low _rx_buffer
  3501  000C18  2429               	addwf	??_receiveData+2,w,c
  3502  000C1A  6ED9               	movwf	fsr2l,c
  3503  000C1C  0E03               	movlw	high _rx_buffer
  3504  000C1E  202A               	addwfc	??_receiveData+3,w,c
  3505  000C20  6EDA               	movwf	fsr2h,c
  3506  000C22  50DF               	movf	indf2,w,c
  3507  000C24  0012               	return		;indir
  3508  000C26                     l5215:
  3509                           
  3510                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3511  000C26  D801               	call	u5838
  3512  000C28  D00C               	goto	l5217
  3513  000C2A                     u5838:
  3514  000C2A  0005               	push	
  3515  000C2C  6EFA               	movwf	pclath,c
  3516  000C2E  5035               	movf	_serial_write,w,c
  3517  000C30  6EFD               	movwf	tosl,c
  3518  000C32  5036               	movf	_serial_write+1,w,c
  3519  000C34  6EFE               	movwf	tosh,c
  3520  000C36  50F8               	movf	tblptru,w,c
  3521  000C38  6EFF               	movwf	tosu,c
  3522  000C3A  50FA               	movf	pclath,w,c
  3523  000C3C  0100               	movlb	0	; () banked
  3524  000C3E  51CF               	movf	receiveData@crcHolder_1131& (0+255),w,b
  3525  000C40  0012               	return		;indir
  3526  000C42                     l5217:
  3527                           
  3528                           ;FastTransfer.c: 199: }
  3529                           ;FastTransfer.c: 202: rx_len = 0;
  3530  000C42  0E00               	movlw	0
  3531  000C44  6E42               	movwf	_rx_len,c
  3532                           
  3533                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3534  000C46  0E00               	movlw	0
  3535  000C48  6E41               	movwf	_rx_array_inx,c
  3536                           
  3537                           ;FastTransfer.c: 204: return 0;
  3538  000C4A  0E00               	movlw	0
  3539  000C4C  0012               	return	
  3540  000C4E  D000               	goto	l5225
  3541  000C50                     l5225:
  3542                           
  3543                           ;FastTransfer.c: 205: }
  3544                           ;FastTransfer.c: 206: }
  3545                           ;FastTransfer.c: 207: }
  3546                           ;FastTransfer.c: 210: return 0;
  3547  000C50  0E00               	movlw	0
  3548  000C52  0012               	return	
  3549  000C54  0012               	return		;funcret
  3550  000C56                     __end_of_receiveData:
  3551                           	opt stack 0
  3552                           tosu	equ	0xFFF
  3553                           tosh	equ	0xFFE
  3554                           tosl	equ	0xFFD
  3555                           pclath	equ	0xFFA
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           intcon	equ	0xFF2
  3563                           postinc0	equ	0xFEE
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           plusw2	equ	0xFDB
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _Send_put *****************
  3576 ;; Defined at:
  3577 ;;		line 130 in file "UART.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  _data           1    wreg     unsigned char 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  _data           1   37[COMRAM] unsigned char 
  3582 ;; Return value:  Size  Location     Type
  3583 ;;		None               void
  3584 ;; Registers used:
  3585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3591 ;;      Params:         0       0       0       0       0       0       0
  3592 ;;      Locals:         1       0       0       0       0       0       0
  3593 ;;      Temps:          0       0       0       0       0       0       0
  3594 ;;      Totals:         1       0       0       0       0       0       0
  3595 ;;Total ram usage:        1 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    6
  3598 ;; This function calls:
  3599 ;;		_UART_buff_get
  3600 ;;		_UART_buff_put
  3601 ;; This function is called by:
  3602 ;;		_SYSTEM_Initialize
  3603 ;;		_putch
  3604 ;;		_sendData
  3605 ;;		_receiveData
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text6
  3610  0039C4                     __ptext6:
  3611                           	opt stack 0
  3612  0039C4                     _Send_put:
  3613                           	opt stack 22
  3614                           
  3615                           ;incstack = 0
  3616                           ;Send_put@_data stored from wreg
  3617  0039C4  6E26               	movwf	Send_put@_data,c
  3618                           
  3619                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3620  0039C6  0E00               	movlw	low _output_buffer
  3621  0039C8  6E21               	movwf	UART_buff_put@_this,c
  3622  0039CA  0E05               	movlw	high _output_buffer
  3623  0039CC  6E22               	movwf	UART_buff_put@_this+1,c
  3624  0039CE  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3625  0039D2  EC2C  F013         	call	_UART_buff_put
  3626                           
  3627                           ;UART.c: 132: if (Transmit_stall == 1) {
  3628  0039D6  0445               	decf	_Transmit_stall,w,c
  3629  0039D8  A4D8               	btfss	status,2,c
  3630  0039DA  0012               	return	
  3631                           
  3632                           ;UART.c: 133: Transmit_stall = 0;
  3633  0039DC  0E00               	movlw	0
  3634  0039DE  6E45               	movwf	_Transmit_stall,c
  3635                           
  3636                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3637  0039E0  0E00               	movlw	low _output_buffer
  3638  0039E2  6E21               	movwf	UART_buff_get@_this,c
  3639  0039E4  0E05               	movlw	high _output_buffer
  3640  0039E6  6E22               	movwf	UART_buff_get@_this+1,c
  3641  0039E8  EC38  F019         	call	_UART_buff_get	;wreg free
  3642  0039EC  6EAD               	movwf	4013,c	;volatile
  3643                           
  3644                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3645  0039EE  889D               	bsf	3997,4,c	;volatile
  3646  0039F0  0012               	return	
  3647  0039F2  0012               	return		;funcret
  3648  0039F4                     __end_of_Send_put:
  3649                           	opt stack 0
  3650                           tosu	equ	0xFFF
  3651                           tosh	equ	0xFFE
  3652                           tosl	equ	0xFFD
  3653                           pclath	equ	0xFFA
  3654                           tblptru	equ	0xFF8
  3655                           tblptrh	equ	0xFF7
  3656                           tblptrl	equ	0xFF6
  3657                           tablat	equ	0xFF5
  3658                           prodh	equ	0xFF4
  3659                           prodl	equ	0xFF3
  3660                           intcon	equ	0xFF2
  3661                           postinc0	equ	0xFEE
  3662                           wreg	equ	0xFE8
  3663                           postdec1	equ	0xFE5
  3664                           fsr1l	equ	0xFE1
  3665                           indf2	equ	0xFDF
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           plusw2	equ	0xFDB
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _UART_buff_put *****************
  3674 ;; Defined at:
  3675 ;;		line 68 in file "UART.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3678 ;;		 -> output_buffer(206), input_buffer(206), 
  3679 ;;  c               1   34[COMRAM] const unsigned char 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;		None               void
  3684 ;; Registers used:
  3685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3691 ;;      Params:         3       0       0       0       0       0       0
  3692 ;;      Locals:         0       0       0       0       0       0       0
  3693 ;;      Temps:          2       0       0       0       0       0       0
  3694 ;;      Totals:         5       0       0       0       0       0       0
  3695 ;;Total ram usage:        5 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    5
  3698 ;; This function calls:
  3699 ;;		_UART_buff_modulo_inc
  3700 ;; This function is called by:
  3701 ;;		_Send_put
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text7
  3706  002658                     __ptext7:
  3707                           	opt stack 0
  3708  002658                     _UART_buff_put:
  3709                           	opt stack 22
  3710                           
  3711                           ;UART.c: 69: if (_this->count < 200) {
  3712                           
  3713                           ;incstack = 0
  3714  002658  EE20 F0CC          	lfsr	2,204
  3715  00265C  5021               	movf	UART_buff_put@_this,w,c
  3716  00265E  26D9               	addwf	fsr2l,f,c
  3717  002660  5022               	movf	UART_buff_put@_this+1,w,c
  3718  002662  22DA               	addwfc	fsr2h,f,c
  3719  002664  0E01               	movlw	1
  3720  002666  BEDB               	btfsc	plusw2,7,c
  3721  002668  D007               	goto	l4619
  3722  00266A  0E01               	movlw	1
  3723  00266C  50DB               	movf	plusw2,w,c
  3724  00266E  E13A               	bnz	l4625
  3725  002670  0EC8               	movlw	200
  3726  002672  5CDE               	subwf	postinc2,w,c
  3727  002674  B0D8               	btfsc	status,0,c
  3728  002676  D036               	goto	l4625
  3729  002678                     l4619:
  3730                           
  3731                           ;UART.c: 70: _this->buf[_this->head] = c;
  3732  002678  EE20 F0C8          	lfsr	2,200
  3733  00267C  5021               	movf	UART_buff_put@_this,w,c
  3734  00267E  26D9               	addwf	fsr2l,f,c
  3735  002680  5022               	movf	UART_buff_put@_this+1,w,c
  3736  002682  22DA               	addwfc	fsr2h,f,c
  3737  002684  CFDE F024          	movff	postinc2,??_UART_buff_put
  3738  002688  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3739  00268C  5024               	movf	??_UART_buff_put,w,c
  3740  00268E  2421               	addwf	UART_buff_put@_this,w,c
  3741  002690  6ED9               	movwf	fsr2l,c
  3742  002692  5025               	movf	??_UART_buff_put+1,w,c
  3743  002694  2022               	addwfc	UART_buff_put@_this+1,w,c
  3744  002696  6EDA               	movwf	fsr2h,c
  3745  002698  C023  FFDF         	movff	UART_buff_put@c,indf2
  3746                           
  3747                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3748  00269C  EE20 F0C8          	lfsr	2,200
  3749  0026A0  5021               	movf	UART_buff_put@_this,w,c
  3750  0026A2  26D9               	addwf	fsr2l,f,c
  3751  0026A4  5022               	movf	UART_buff_put@_this+1,w,c
  3752  0026A6  22DA               	addwfc	fsr2h,f,c
  3753  0026A8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3754  0026AC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3755  0026B0  0E00               	movlw	0
  3756  0026B2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3757  0026B4  0EC8               	movlw	200
  3758  0026B6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3759  0026B8  EC2A  F01D         	call	_UART_buff_modulo_inc	;wreg free
  3760  0026BC  EE20 F0C8          	lfsr	2,200
  3761  0026C0  5021               	movf	UART_buff_put@_this,w,c
  3762  0026C2  26D9               	addwf	fsr2l,f,c
  3763  0026C4  5022               	movf	UART_buff_put@_this+1,w,c
  3764  0026C6  22DA               	addwfc	fsr2h,f,c
  3765  0026C8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3766  0026CC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3767                           
  3768                           ;UART.c: 72: ++_this->count;
  3769  0026D0  EE20 F0CC          	lfsr	2,204
  3770  0026D4  5021               	movf	UART_buff_put@_this,w,c
  3771  0026D6  26D9               	addwf	fsr2l,f,c
  3772  0026D8  5022               	movf	UART_buff_put@_this+1,w,c
  3773  0026DA  22DA               	addwfc	fsr2h,f,c
  3774  0026DC  2ADE               	incf	postinc2,f,c
  3775  0026DE  0E00               	movlw	0
  3776  0026E0  22DD               	addwfc	postdec2,f,c
  3777                           
  3778                           ;UART.c: 73: } else {
  3779  0026E2  0012               	return	
  3780  0026E4                     l4625:
  3781                           
  3782                           ;UART.c: 74: _this->buf[_this->head] = c;
  3783  0026E4  EE20 F0C8          	lfsr	2,200
  3784  0026E8  5021               	movf	UART_buff_put@_this,w,c
  3785  0026EA  26D9               	addwf	fsr2l,f,c
  3786  0026EC  5022               	movf	UART_buff_put@_this+1,w,c
  3787  0026EE  22DA               	addwfc	fsr2h,f,c
  3788  0026F0  CFDE F024          	movff	postinc2,??_UART_buff_put
  3789  0026F4  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3790  0026F8  5024               	movf	??_UART_buff_put,w,c
  3791  0026FA  2421               	addwf	UART_buff_put@_this,w,c
  3792  0026FC  6ED9               	movwf	fsr2l,c
  3793  0026FE  5025               	movf	??_UART_buff_put+1,w,c
  3794  002700  2022               	addwfc	UART_buff_put@_this+1,w,c
  3795  002702  6EDA               	movwf	fsr2h,c
  3796  002704  C023  FFDF         	movff	UART_buff_put@c,indf2
  3797                           
  3798                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3799  002708  EE20 F0C8          	lfsr	2,200
  3800  00270C  5021               	movf	UART_buff_put@_this,w,c
  3801  00270E  26D9               	addwf	fsr2l,f,c
  3802  002710  5022               	movf	UART_buff_put@_this+1,w,c
  3803  002712  22DA               	addwfc	fsr2h,f,c
  3804  002714  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3805  002718  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3806  00271C  0E00               	movlw	0
  3807  00271E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3808  002720  0EC8               	movlw	200
  3809  002722  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3810  002724  EC2A  F01D         	call	_UART_buff_modulo_inc	;wreg free
  3811  002728  EE20 F0C8          	lfsr	2,200
  3812  00272C  5021               	movf	UART_buff_put@_this,w,c
  3813  00272E  26D9               	addwf	fsr2l,f,c
  3814  002730  5022               	movf	UART_buff_put@_this+1,w,c
  3815  002732  22DA               	addwfc	fsr2h,f,c
  3816  002734  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3817  002738  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3818                           
  3819                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3820  00273C  EE20 F0CA          	lfsr	2,202
  3821  002740  5021               	movf	UART_buff_put@_this,w,c
  3822  002742  26D9               	addwf	fsr2l,f,c
  3823  002744  5022               	movf	UART_buff_put@_this+1,w,c
  3824  002746  22DA               	addwfc	fsr2h,f,c
  3825  002748  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3826  00274C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3827  002750  0E00               	movlw	0
  3828  002752  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3829  002754  0EC8               	movlw	200
  3830  002756  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3831  002758  EC2A  F01D         	call	_UART_buff_modulo_inc	;wreg free
  3832  00275C  EE20 F0CA          	lfsr	2,202
  3833  002760  5021               	movf	UART_buff_put@_this,w,c
  3834  002762  26D9               	addwf	fsr2l,f,c
  3835  002764  5022               	movf	UART_buff_put@_this+1,w,c
  3836  002766  22DA               	addwfc	fsr2h,f,c
  3837  002768  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3838  00276C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3839  002770  0012               	return	
  3840  002772  0012               	return		;funcret
  3841  002774                     __end_of_UART_buff_put:
  3842                           	opt stack 0
  3843                           tosu	equ	0xFFF
  3844                           tosh	equ	0xFFE
  3845                           tosl	equ	0xFFD
  3846                           pclath	equ	0xFFA
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           intcon	equ	0xFF2
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           postdec1	equ	0xFE5
  3857                           fsr1l	equ	0xFE1
  3858                           indf2	equ	0xFDF
  3859                           postinc2	equ	0xFDE
  3860                           postdec2	equ	0xFDD
  3861                           plusw2	equ	0xFDB
  3862                           fsr2h	equ	0xFDA
  3863                           fsr2l	equ	0xFD9
  3864                           status	equ	0xFD8
  3865                           
  3866 ;; *************** function _Receive_peek *****************
  3867 ;; Defined at:
  3868 ;;		line 118 in file "UART.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      unsigned char 
  3875 ;; Registers used:
  3876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3882 ;;      Params:         0       0       0       0       0       0       0
  3883 ;;      Locals:         0       0       0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0       0       0
  3885 ;;      Totals:         0       0       0       0       0       0       0
  3886 ;;Total ram usage:        0 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    5
  3889 ;; This function calls:
  3890 ;;		_UART_buff_peek
  3891 ;; This function is called by:
  3892 ;;		_SYSTEM_Initialize
  3893 ;;		_receiveData
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text8
  3898  003C96                     __ptext8:
  3899                           	opt stack 0
  3900  003C96                     _Receive_peek:
  3901                           	opt stack 23
  3902                           
  3903                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3904                           
  3905                           ;incstack = 0
  3906  003C96  0E00               	movlw	low _input_buffer
  3907  003C98  6E1B               	movwf	UART_buff_peek@_this,c
  3908  003C9A  0E04               	movlw	high _input_buffer
  3909  003C9C  6E1C               	movwf	UART_buff_peek@_this+1,c
  3910  003C9E  EC9A  F01D         	call	_UART_buff_peek	;wreg free
  3911  003CA2  0012               	return	
  3912  003CA4  0012               	return		;funcret
  3913  003CA6                     __end_of_Receive_peek:
  3914                           	opt stack 0
  3915                           tosu	equ	0xFFF
  3916                           tosh	equ	0xFFE
  3917                           tosl	equ	0xFFD
  3918                           pclath	equ	0xFFA
  3919                           tblptru	equ	0xFF8
  3920                           tblptrh	equ	0xFF7
  3921                           tblptrl	equ	0xFF6
  3922                           tablat	equ	0xFF5
  3923                           prodh	equ	0xFF4
  3924                           prodl	equ	0xFF3
  3925                           intcon	equ	0xFF2
  3926                           postinc0	equ	0xFEE
  3927                           wreg	equ	0xFE8
  3928                           postdec1	equ	0xFE5
  3929                           fsr1l	equ	0xFE1
  3930                           indf2	equ	0xFDF
  3931                           postinc2	equ	0xFDE
  3932                           postdec2	equ	0xFDD
  3933                           plusw2	equ	0xFDB
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function _UART_buff_peek *****************
  3939 ;; Defined at:
  3940 ;;		line 114 in file "UART.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3943 ;;		 -> input_buffer(206), 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;		None
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      unsigned char 
  3948 ;; Registers used:
  3949 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3955 ;;      Params:         2       0       0       0       0       0       0
  3956 ;;      Locals:         0       0       0       0       0       0       0
  3957 ;;      Temps:          2       0       0       0       0       0       0
  3958 ;;      Totals:         4       0       0       0       0       0       0
  3959 ;;Total ram usage:        4 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    4
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_Receive_peek
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text9
  3970  003B34                     __ptext9:
  3971                           	opt stack 0
  3972  003B34                     _UART_buff_peek:
  3973                           	opt stack 23
  3974                           
  3975                           ;UART.c: 115: return _this->buf[_this->tail];
  3976                           
  3977                           ;incstack = 0
  3978  003B34  EE20 F0CA          	lfsr	2,202
  3979  003B38  501B               	movf	UART_buff_peek@_this,w,c
  3980  003B3A  26D9               	addwf	fsr2l,f,c
  3981  003B3C  501C               	movf	UART_buff_peek@_this+1,w,c
  3982  003B3E  22DA               	addwfc	fsr2h,f,c
  3983  003B40  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3984  003B44  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3985  003B48  501D               	movf	??_UART_buff_peek,w,c
  3986  003B4A  241B               	addwf	UART_buff_peek@_this,w,c
  3987  003B4C  6ED9               	movwf	fsr2l,c
  3988  003B4E  501E               	movf	??_UART_buff_peek+1,w,c
  3989  003B50  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3990  003B52  6EDA               	movwf	fsr2h,c
  3991  003B54  50DF               	movf	indf2,w,c
  3992  003B56  0012               	return	
  3993  003B58  0012               	return		;funcret
  3994  003B5A                     __end_of_UART_buff_peek:
  3995                           	opt stack 0
  3996                           tosu	equ	0xFFF
  3997                           tosh	equ	0xFFE
  3998                           tosl	equ	0xFFD
  3999                           pclath	equ	0xFFA
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           postinc0	equ	0xFEE
  4008                           wreg	equ	0xFE8
  4009                           postdec1	equ	0xFE5
  4010                           fsr1l	equ	0xFE1
  4011                           indf2	equ	0xFDF
  4012                           postinc2	equ	0xFDE
  4013                           postdec2	equ	0xFDD
  4014                           plusw2	equ	0xFDB
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function _CRCcheck *****************
  4020 ;; Defined at:
  4021 ;;		line 373 in file "FastTransfer.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  rt              2    5[BANK0 ] int 
  4026 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  4027 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  4028 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  4029 ;; Return value:  Size  Location     Type
  4030 ;;		None               void
  4031 ;; Registers used:
  4032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4038 ;;      Params:         0       0       0       0       0       0       0
  4039 ;;      Locals:         0       7       0       0       0       0       0
  4040 ;;      Temps:          0       0       0       0       0       0       0
  4041 ;;      Totals:         0       7       0       0       0       0       0
  4042 ;;Total ram usage:        7 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:    7
  4045 ;; This function calls:
  4046 ;;		Absolute function
  4047 ;;		_CRC8
  4048 ;;		_Receive_available
  4049 ;;		_Receive_get
  4050 ;;		_crcBufS_get
  4051 ;;		_crcBufS_status_put
  4052 ;; This function is called by:
  4053 ;;		_receiveData
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text10
  4058  001CF0                     __ptext10:
  4059                           	opt stack 0
  4060  001CF0                     _CRCcheck:
  4061                           	opt stack 21
  4062                           
  4063                           ;FastTransfer.c: 375: while (!(serial_available() > 3));
  4064                           
  4065                           ;incstack = 0
  4066  001CF0  D000               	goto	l4769
  4067  001CF2                     l4769:
  4068  001CF2  D801               	call	u4828
  4069  001CF4  D00A               	goto	u4829
  4070  001CF6                     u4828:
  4071  001CF6  0005               	push	
  4072  001CF8  6EFA               	movwf	pclath,c
  4073  001CFA  5031               	movf	_serial_available,w,c
  4074  001CFC  6EFD               	movwf	tosl,c
  4075  001CFE  5032               	movf	_serial_available+1,w,c
  4076  001D00  6EFE               	movwf	tosh,c
  4077  001D02  50F8               	movf	tblptru,w,c
  4078  001D04  6EFF               	movwf	tosu,c
  4079  001D06  50FA               	movf	pclath,w,c
  4080  001D08  0012               	return		;indir
  4081  001D0A                     u4829:
  4082  001D0A  BE1E               	btfsc	?_Receive_available+1,7,c
  4083  001D0C  D7F2               	goto	l4769
  4084  001D0E  501E               	movf	?_Receive_available+1,w,c
  4085  001D10  E106               	bnz	l4771
  4086  001D12  0E04               	movlw	4
  4087  001D14  5C1D               	subwf	?_Receive_available,w,c
  4088  001D16  B0D8               	btfsc	status,0,c
  4089  001D18  D002               	goto	l4771
  4090  001D1A  D7EB               	goto	l4769
  4091  001D1C  D000               	goto	l4771
  4092  001D1E                     l4771:
  4093                           
  4094                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  4095                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  4096  001D1E  D801               	call	u4848
  4097  001D20  D00A               	goto	u4849
  4098  001D22                     u4848:
  4099  001D22  0005               	push	
  4100  001D24  6EFA               	movwf	pclath,c
  4101  001D26  5033               	movf	_serial_read,w,c
  4102  001D28  6EFD               	movwf	tosl,c
  4103  001D2A  5034               	movf	_serial_read+1,w,c
  4104  001D2C  6EFE               	movwf	tosh,c
  4105  001D2E  50F8               	movf	tblptru,w,c
  4106  001D30  6EFF               	movwf	tosu,c
  4107  001D32  50FA               	movf	pclath,w,c
  4108  001D34  0012               	return		;indir
  4109  001D36                     u4849:
  4110  001D36  0100               	movlb	0	; () banked
  4111  001D38  6FC3               	movwf	CRCcheck@arrayHolder& (0+255),b
  4112                           
  4113                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  4114  001D3A  D801               	call	u4858
  4115  001D3C  D00A               	goto	u4859
  4116  001D3E                     u4858:
  4117  001D3E  0005               	push	
  4118  001D40  6EFA               	movwf	pclath,c
  4119  001D42  5033               	movf	_serial_read,w,c
  4120  001D44  6EFD               	movwf	tosl,c
  4121  001D46  5034               	movf	_serial_read+1,w,c
  4122  001D48  6EFE               	movwf	tosh,c
  4123  001D4A  50F8               	movf	tblptru,w,c
  4124  001D4C  6EFF               	movwf	tosu,c
  4125  001D4E  50FA               	movf	pclath,w,c
  4126  001D50  0012               	return		;indir
  4127  001D52                     u4859:
  4128  001D52  0100               	movlb	0	; () banked
  4129  001D54  6FC4               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  4130                           
  4131                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  4132  001D56  D801               	call	u4868
  4133  001D58  D00A               	goto	u4869
  4134  001D5A                     u4868:
  4135  001D5A  0005               	push	
  4136  001D5C  6EFA               	movwf	pclath,c
  4137  001D5E  5033               	movf	_serial_read,w,c
  4138  001D60  6EFD               	movwf	tosl,c
  4139  001D62  5034               	movf	_serial_read+1,w,c
  4140  001D64  6EFE               	movwf	tosh,c
  4141  001D66  50F8               	movf	tblptru,w,c
  4142  001D68  6EFF               	movwf	tosu,c
  4143  001D6A  50FA               	movf	pclath,w,c
  4144  001D6C  0012               	return		;indir
  4145  001D6E                     u4869:
  4146  001D6E  0100               	movlb	0	; () banked
  4147  001D70  6FC5               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  4148                           
  4149                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  4150  001D72  D801               	call	u4878
  4151  001D74  D00A               	goto	u4879
  4152  001D76                     u4878:
  4153  001D76  0005               	push	
  4154  001D78  6EFA               	movwf	pclath,c
  4155  001D7A  5033               	movf	_serial_read,w,c
  4156  001D7C  6EFD               	movwf	tosl,c
  4157  001D7E  5034               	movf	_serial_read+1,w,c
  4158  001D80  6EFE               	movwf	tosh,c
  4159  001D82  50F8               	movf	tblptru,w,c
  4160  001D84  6EFF               	movwf	tosu,c
  4161  001D86  50FA               	movf	pclath,w,c
  4162  001D88  0012               	return		;indir
  4163  001D8A                     u4879:
  4164  001D8A  0100               	movlb	0	; () banked
  4165  001D8C  6FC1               	movwf	CRCcheck@SentCRC& (0+255),b
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  4169  001D8E  0EC3               	movlw	low CRCcheck@arrayHolder
  4170  001D90  6E1B               	movwf	CRC8@data,c
  4171  001D92  0E00               	movlw	high CRCcheck@arrayHolder
  4172  001D94  6E1C               	movwf	CRC8@data+1,c
  4173  001D96  0E03               	movlw	3
  4174  001D98  6E1D               	movwf	CRC8@len,c
  4175  001D9A  EC6A  F01B         	call	_CRC8	;wreg free
  4176  001D9E  0100               	movlb	0	; () banked
  4177  001DA0  6FC2               	movwf	CRCcheck@calculatedCRC& (0+255),b
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  4181  001DA2  0100               	movlb	0	; () banked
  4182  001DA4  51C2               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  4183  001DA6  0100               	movlb	0	; () banked
  4184  001DA8  19C1               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  4185  001DAA  A4D8               	btfss	status,2,c
  4186  001DAC  D053               	goto	l4801
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;FastTransfer.c: 387: int rt;
  4190                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  4191  001DAE  0E00               	movlw	0
  4192  001DB0  0100               	movlb	0	; () banked
  4193  001DB2  6FC7               	movwf	(CRCcheck@rt+1)& (0+255),b
  4194  001DB4  0E00               	movlw	0
  4195  001DB6  6FC6               	movwf	CRCcheck@rt& (0+255),b
  4196  001DB8                     l4779:
  4197                           
  4198                           ; BSR set to: 0
  4199  001DB8  0100               	movlb	0	; () banked
  4200  001DBA  BFC7               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4201  001DBC  D00A               	goto	l4783
  4202  001DBE  0100               	movlb	0	; () banked
  4203  001DC0  51C7               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4204  001DC2  E14C               	bnz	l717
  4205  001DC4  0E05               	movlw	5
  4206  001DC6  0100               	movlb	0	; () banked
  4207  001DC8  5DC6               	subwf	CRCcheck@rt& (0+255),w,b
  4208  001DCA  B0D8               	btfsc	status,0,c
  4209  001DCC  0012               	return	
  4210  001DCE  D001               	goto	l4783
  4211                           
  4212                           ; BSR set to: 0
  4213  001DD0  0012               	return	
  4214  001DD2                     l4783:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4218  001DD2  0EB0               	movlw	low _crc_buffer
  4219  001DD4  6E1B               	movwf	crcBufS_get@_this,c
  4220  001DD6  0E00               	movlw	high _crc_buffer
  4221  001DD8  6E1C               	movwf	crcBufS_get@_this+1,c
  4222  001DDA  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4223  001DDE  0E00               	movlw	0
  4224  001DE0  6E1E               	movwf	crcBufS_get@space,c
  4225  001DE2  EC45  F015         	call	_crcBufS_get	;wreg free
  4226  001DE6  183F               	xorwf	_returnAddress,w,c
  4227  001DE8  A4D8               	btfss	status,2,c
  4228  001DEA  D02F               	goto	l4797
  4229                           
  4230                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4231  001DEC  0EB0               	movlw	low _crc_buffer
  4232  001DEE  6E1B               	movwf	crcBufS_get@_this,c
  4233  001DF0  0E00               	movlw	high _crc_buffer
  4234  001DF2  6E1C               	movwf	crcBufS_get@_this+1,c
  4235  001DF4  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4236  001DF8  0E01               	movlw	1
  4237  001DFA  6E1E               	movwf	crcBufS_get@space,c
  4238  001DFC  EC45  F015         	call	_crcBufS_get	;wreg free
  4239  001E00  0100               	movlb	0	; () banked
  4240  001E02  19C5               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4241  001E04  A4D8               	btfss	status,2,c
  4242  001E06  D021               	goto	l4797
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  4246  001E08  0100               	movlb	0	; () banked
  4247  001E0A  05C4               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4248  001E0C  A4D8               	btfss	status,2,c
  4249  001E0E  D00C               	goto	l4793
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  4253  001E10  0EB0               	movlw	low _crc_buffer
  4254  001E12  6E1B               	movwf	crcBufS_status_put@_this,c
  4255  001E14  0E00               	movlw	high _crc_buffer
  4256  001E16  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4257  001E18  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4258  001E1C  0E01               	movlw	1
  4259  001E1E  6E1E               	movwf	crcBufS_status_put@status,c
  4260  001E20  EC7A  F017         	call	_crcBufS_status_put	;wreg free
  4261                           
  4262                           ;FastTransfer.c: 393: break;
  4263  001E24  0012               	return	
  4264                           
  4265                           ;FastTransfer.c: 394: } else if (arrayHolder[1] == 2) {
  4266  001E26  D011               	goto	l4797
  4267  001E28                     l4793:
  4268  001E28  0E02               	movlw	2
  4269  001E2A  0100               	movlb	0	; () banked
  4270  001E2C  19C4               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4271  001E2E  A4D8               	btfss	status,2,c
  4272  001E30  D00C               	goto	l4797
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  4276  001E32  0EB0               	movlw	low _crc_buffer
  4277  001E34  6E1B               	movwf	crcBufS_status_put@_this,c
  4278  001E36  0E00               	movlw	high _crc_buffer
  4279  001E38  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4280  001E3A  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4281  001E3E  0E02               	movlw	2
  4282  001E40  6E1E               	movwf	crcBufS_status_put@status,c
  4283  001E42  EC7A  F017         	call	_crcBufS_status_put	;wreg free
  4284                           
  4285                           ;FastTransfer.c: 396: break;
  4286  001E46  0012               	return	
  4287  001E48  D000               	goto	l4797
  4288  001E4A                     l4797:
  4289  001E4A  0100               	movlb	0	; () banked
  4290  001E4C  4BC6               	infsnz	CRCcheck@rt& (0+255),f,b
  4291  001E4E  2BC7               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4292  001E50  D7B3               	goto	l4779
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;FastTransfer.c: 397: }
  4296                           ;FastTransfer.c: 398: }
  4297                           ;FastTransfer.c: 399: }
  4298                           ;FastTransfer.c: 400: }
  4299                           ;FastTransfer.c: 401: } else {
  4300                           
  4301                           ; BSR set to: 0
  4302  001E52  0012               	return	
  4303  001E54                     l4801:
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;FastTransfer.c: 402: crcErrorCounter++;
  4307  001E54  0100               	movlb	0	; () banked
  4308  001E56  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  4309  001E58  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4310  001E5A  0012               	return	
  4311  001E5C                     l717:
  4312  001E5C  0012               	return		;funcret
  4313  001E5E                     __end_of_CRCcheck:
  4314                           	opt stack 0
  4315                           tosu	equ	0xFFF
  4316                           tosh	equ	0xFFE
  4317                           tosl	equ	0xFFD
  4318                           pclath	equ	0xFFA
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           postinc0	equ	0xFEE
  4327                           wreg	equ	0xFE8
  4328                           postdec1	equ	0xFE5
  4329                           fsr1l	equ	0xFE1
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           plusw2	equ	0xFDB
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function _crcBufS_status_put *****************
  4339 ;; Defined at:
  4340 ;;		line 336 in file "FastTransfer.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4343 ;;		 -> crc_buffer(17), 
  4344 ;;  time            1   28[COMRAM] unsigned char 
  4345 ;;  status          1   29[COMRAM] unsigned char 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  wantedTime      2   34[COMRAM] int 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;		None               void
  4350 ;; Registers used:
  4351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4357 ;;      Params:         4       0       0       0       0       0       0
  4358 ;;      Locals:         2       0       0       0       0       0       0
  4359 ;;      Temps:          4       0       0       0       0       0       0
  4360 ;;      Totals:        10       0       0       0       0       0       0
  4361 ;;Total ram usage:       10 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    4
  4364 ;; This function calls:
  4365 ;;		Nothing
  4366 ;; This function is called by:
  4367 ;;		_CRCcheck
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text11
  4372  002EF4                     __ptext11:
  4373                           	opt stack 0
  4374  002EF4                     _crcBufS_status_put:
  4375                           	opt stack 23
  4376                           
  4377                           ;FastTransfer.c: 337: if (time >= 5) {
  4378                           
  4379                           ;incstack = 0
  4380  002EF4  0E04               	movlw	4
  4381  002EF6  641D               	cpfsgt	crcBufS_status_put@time,c
  4382  002EF8  D003               	goto	l4607
  4383                           
  4384                           ;FastTransfer.c: 338: time = 5 - 1;
  4385  002EFA  0E04               	movlw	4
  4386  002EFC  6E1D               	movwf	crcBufS_status_put@time,c
  4387  002EFE  D000               	goto	l4607
  4388  002F00                     l4607:
  4389                           
  4390                           ;FastTransfer.c: 339: }
  4391                           ;FastTransfer.c: 340: time = time + 1;
  4392  002F00  281D               	incf	crcBufS_status_put@time,w,c
  4393  002F02  6E1D               	movwf	crcBufS_status_put@time,c
  4394                           
  4395                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4396  002F04  501D               	movf	crcBufS_status_put@time,w,c
  4397  002F06  0D03               	mullw	3
  4398  002F08  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4399  002F0C  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4400                           
  4401                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4402  002F10  EE20 F00F          	lfsr	2,15
  4403  002F14  501B               	movf	crcBufS_status_put@_this,w,c
  4404  002F16  26D9               	addwf	fsr2l,f,c
  4405  002F18  501C               	movf	crcBufS_status_put@_this+1,w,c
  4406  002F1A  22DA               	addwfc	fsr2h,f,c
  4407  002F1C  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4408  002F1E  5CDE               	subwf	postinc2,w,c
  4409  002F20  50DE               	movf	postinc2,w,c
  4410  002F22  0A80               	xorlw	128
  4411  002F24  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4412  002F26  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4413  002F28  0A80               	xorlw	128
  4414  002F2A  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4415  002F2C  B0D8               	btfsc	status,0,c
  4416  002F2E  D02B               	goto	l4615
  4417                           
  4418                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4419  002F30  EE20 F00F          	lfsr	2,15
  4420  002F34  501B               	movf	crcBufS_status_put@_this,w,c
  4421  002F36  26D9               	addwf	fsr2l,f,c
  4422  002F38  501C               	movf	crcBufS_status_put@_this+1,w,c
  4423  002F3A  22DA               	addwfc	fsr2h,f,c
  4424  002F3C  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4425  002F40  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4426  002F44  1E1F               	comf	??_crcBufS_status_put,f,c
  4427  002F46  1E20               	comf	??_crcBufS_status_put+1,f,c
  4428  002F48  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4429  002F4A  2A20               	incf	??_crcBufS_status_put+1,f,c
  4430  002F4C  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4431  002F4E  261F               	addwf	??_crcBufS_status_put,f,c
  4432  002F50  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4433  002F52  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4434  002F54  1E1F               	comf	??_crcBufS_status_put,f,c
  4435  002F56  1E20               	comf	??_crcBufS_status_put+1,f,c
  4436  002F58  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4437  002F5A  2A20               	incf	??_crcBufS_status_put+1,f,c
  4438  002F5C  0E0F               	movlw	15
  4439  002F5E  241F               	addwf	??_crcBufS_status_put,w,c
  4440  002F60  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4441  002F62  0E00               	movlw	0
  4442  002F64  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4443  002F66  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4444                           
  4445                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4446  002F68  0E02               	movlw	2
  4447  002F6A  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4448  002F6C  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4449  002F6E  0E00               	movlw	0
  4450  002F70  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4451  002F72  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4452  002F74  501F               	movf	??_crcBufS_status_put,w,c
  4453  002F76  241B               	addwf	crcBufS_status_put@_this,w,c
  4454  002F78  6ED9               	movwf	fsr2l,c
  4455  002F7A  5020               	movf	??_crcBufS_status_put+1,w,c
  4456  002F7C  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4457  002F7E  6EDA               	movwf	fsr2h,c
  4458  002F80  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4459                           
  4460                           ;FastTransfer.c: 345: } else {
  4461  002F84  0012               	return	
  4462  002F86                     l4615:
  4463                           
  4464                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4465  002F86  EE20 F00F          	lfsr	2,15
  4466  002F8A  501B               	movf	crcBufS_status_put@_this,w,c
  4467  002F8C  26D9               	addwf	fsr2l,f,c
  4468  002F8E  501C               	movf	crcBufS_status_put@_this+1,w,c
  4469  002F90  22DA               	addwfc	fsr2h,f,c
  4470  002F92  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4471  002F96  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4472  002F9A  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4473  002F9E  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4474  002FA2  1E21               	comf	??_crcBufS_status_put+2,f,c
  4475  002FA4  1E22               	comf	??_crcBufS_status_put+3,f,c
  4476  002FA6  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4477  002FA8  2A22               	incf	??_crcBufS_status_put+3,f,c
  4478  002FAA  501F               	movf	??_crcBufS_status_put,w,c
  4479  002FAC  2621               	addwf	??_crcBufS_status_put+2,f,c
  4480  002FAE  5020               	movf	??_crcBufS_status_put+1,w,c
  4481  002FB0  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4482  002FB2  0E02               	movlw	2
  4483  002FB4  2621               	addwf	??_crcBufS_status_put+2,f,c
  4484  002FB6  0E00               	movlw	0
  4485  002FB8  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4486  002FBA  5021               	movf	??_crcBufS_status_put+2,w,c
  4487  002FBC  241B               	addwf	crcBufS_status_put@_this,w,c
  4488  002FBE  6ED9               	movwf	fsr2l,c
  4489  002FC0  5022               	movf	??_crcBufS_status_put+3,w,c
  4490  002FC2  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4491  002FC4  6EDA               	movwf	fsr2h,c
  4492  002FC6  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4493  002FCA  0012               	return	
  4494  002FCC  0012               	return		;funcret
  4495  002FCE                     __end_of_crcBufS_status_put:
  4496                           	opt stack 0
  4497                           tosu	equ	0xFFF
  4498                           tosh	equ	0xFFE
  4499                           tosl	equ	0xFFD
  4500                           pclath	equ	0xFFA
  4501                           tblptru	equ	0xFF8
  4502                           tblptrh	equ	0xFF7
  4503                           tblptrl	equ	0xFF6
  4504                           tablat	equ	0xFF5
  4505                           prodh	equ	0xFF4
  4506                           prodl	equ	0xFF3
  4507                           intcon	equ	0xFF2
  4508                           postinc0	equ	0xFEE
  4509                           wreg	equ	0xFE8
  4510                           postdec1	equ	0xFE5
  4511                           fsr1l	equ	0xFE1
  4512                           indf2	equ	0xFDF
  4513                           postinc2	equ	0xFDE
  4514                           postdec2	equ	0xFDD
  4515                           plusw2	equ	0xFDB
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _crcBufS_get *****************
  4521 ;; Defined at:
  4522 ;;		line 353 in file "FastTransfer.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4525 ;;		 -> crc_buffer(17), 
  4526 ;;  time            1   28[COMRAM] unsigned char 
  4527 ;;  space           1   29[COMRAM] unsigned char 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  wantedTime      2   36[COMRAM] int 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      unsigned char 
  4532 ;; Registers used:
  4533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         4       0       0       0       0       0       0
  4540 ;;      Locals:         2       0       0       0       0       0       0
  4541 ;;      Temps:          6       0       0       0       0       0       0
  4542 ;;      Totals:        12       0       0       0       0       0       0
  4543 ;;Total ram usage:       12 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    4
  4546 ;; This function calls:
  4547 ;;		Nothing
  4548 ;; This function is called by:
  4549 ;;		_CRCcheck
  4550 ;;		_AKNAK
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           	psect	text12
  4555  002A8A                     __ptext12:
  4556                           	opt stack 0
  4557  002A8A                     _crcBufS_get:
  4558                           	opt stack 23
  4559                           
  4560                           ;FastTransfer.c: 354: if (time >= 5) {
  4561                           
  4562                           ;incstack = 0
  4563  002A8A  0E04               	movlw	4
  4564  002A8C  641D               	cpfsgt	crcBufS_get@time,c
  4565  002A8E  D003               	goto	l4583
  4566                           
  4567                           ;FastTransfer.c: 355: time = 5 - 1;
  4568  002A90  0E04               	movlw	4
  4569  002A92  6E1D               	movwf	crcBufS_get@time,c
  4570  002A94  D000               	goto	l4583
  4571  002A96                     l4583:
  4572                           
  4573                           ;FastTransfer.c: 356: }
  4574                           ;FastTransfer.c: 357: if (space >= 3) {
  4575  002A96  0E02               	movlw	2
  4576  002A98  641E               	cpfsgt	crcBufS_get@space,c
  4577  002A9A  D003               	goto	l4587
  4578                           
  4579                           ;FastTransfer.c: 358: space = 3 - 1;
  4580  002A9C  0E02               	movlw	2
  4581  002A9E  6E1E               	movwf	crcBufS_get@space,c
  4582  002AA0  D000               	goto	l4587
  4583  002AA2                     l4587:
  4584                           
  4585                           ;FastTransfer.c: 359: }
  4586                           ;FastTransfer.c: 360: time = time + 1;
  4587  002AA2  281D               	incf	crcBufS_get@time,w,c
  4588  002AA4  6E1D               	movwf	crcBufS_get@time,c
  4589                           
  4590                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4591  002AA6  501D               	movf	crcBufS_get@time,w,c
  4592  002AA8  0D03               	mullw	3
  4593  002AAA  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4594  002AAE  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4595                           
  4596                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4597  002AB2  EE20 F00F          	lfsr	2,15
  4598  002AB6  501B               	movf	crcBufS_get@_this,w,c
  4599  002AB8  26D9               	addwf	fsr2l,f,c
  4600  002ABA  501C               	movf	crcBufS_get@_this+1,w,c
  4601  002ABC  22DA               	addwfc	fsr2h,f,c
  4602  002ABE  5025               	movf	crcBufS_get@wantedTime,w,c
  4603  002AC0  5CDE               	subwf	postinc2,w,c
  4604  002AC2  50DE               	movf	postinc2,w,c
  4605  002AC4  0A80               	xorlw	128
  4606  002AC6  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4607  002AC8  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4608  002ACA  0A80               	xorlw	128
  4609  002ACC  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4610  002ACE  B0D8               	btfsc	status,0,c
  4611  002AD0  D02A               	goto	l4599
  4612                           
  4613                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4614  002AD2  EE20 F00F          	lfsr	2,15
  4615  002AD6  501B               	movf	crcBufS_get@_this,w,c
  4616  002AD8  26D9               	addwf	fsr2l,f,c
  4617  002ADA  501C               	movf	crcBufS_get@_this+1,w,c
  4618  002ADC  22DA               	addwfc	fsr2h,f,c
  4619  002ADE  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4620  002AE2  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4621  002AE6  1E1F               	comf	??_crcBufS_get,f,c
  4622  002AE8  1E20               	comf	??_crcBufS_get+1,f,c
  4623  002AEA  4A1F               	infsnz	??_crcBufS_get,f,c
  4624  002AEC  2A20               	incf	??_crcBufS_get+1,f,c
  4625  002AEE  5025               	movf	crcBufS_get@wantedTime,w,c
  4626  002AF0  261F               	addwf	??_crcBufS_get,f,c
  4627  002AF2  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4628  002AF4  2220               	addwfc	??_crcBufS_get+1,f,c
  4629  002AF6  1E1F               	comf	??_crcBufS_get,f,c
  4630  002AF8  1E20               	comf	??_crcBufS_get+1,f,c
  4631  002AFA  4A1F               	infsnz	??_crcBufS_get,f,c
  4632  002AFC  2A20               	incf	??_crcBufS_get+1,f,c
  4633  002AFE  0E0F               	movlw	15
  4634  002B00  241F               	addwf	??_crcBufS_get,w,c
  4635  002B02  6E25               	movwf	crcBufS_get@wantedTime,c
  4636  002B04  0E00               	movlw	0
  4637  002B06  2020               	addwfc	??_crcBufS_get+1,w,c
  4638  002B08  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4639                           
  4640                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4641  002B0A  501E               	movf	crcBufS_get@space,w,c
  4642  002B0C  2425               	addwf	crcBufS_get@wantedTime,w,c
  4643  002B0E  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4644  002B10  0E00               	movlw	0
  4645  002B12  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4646  002B14  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4647  002B16  501F               	movf	??_crcBufS_get,w,c
  4648  002B18  241B               	addwf	crcBufS_get@_this,w,c
  4649  002B1A  6ED9               	movwf	fsr2l,c
  4650  002B1C  5020               	movf	??_crcBufS_get+1,w,c
  4651  002B1E  201C               	addwfc	crcBufS_get@_this+1,w,c
  4652  002B20  6EDA               	movwf	fsr2h,c
  4653  002B22  50DF               	movf	indf2,w,c
  4654                           
  4655                           ;FastTransfer.c: 365: } else {
  4656  002B24  0012               	return	
  4657  002B26                     l4599:
  4658                           
  4659                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4660  002B26  EE20 F00F          	lfsr	2,15
  4661  002B2A  501B               	movf	crcBufS_get@_this,w,c
  4662  002B2C  26D9               	addwf	fsr2l,f,c
  4663  002B2E  501C               	movf	crcBufS_get@_this+1,w,c
  4664  002B30  22DA               	addwfc	fsr2h,f,c
  4665  002B32  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4666  002B36  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4667  002B3A  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4668  002B3E  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4669  002B42  1E21               	comf	??_crcBufS_get+2,f,c
  4670  002B44  1E22               	comf	??_crcBufS_get+3,f,c
  4671  002B46  4A21               	infsnz	??_crcBufS_get+2,f,c
  4672  002B48  2A22               	incf	??_crcBufS_get+3,f,c
  4673  002B4A  501E               	movf	crcBufS_get@space,w,c
  4674  002B4C  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4675  002B4E  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4676  002B50  5021               	movf	??_crcBufS_get+2,w,c
  4677  002B52  2623               	addwf	??_crcBufS_get+4,f,c
  4678  002B54  5022               	movf	??_crcBufS_get+3,w,c
  4679  002B56  2224               	addwfc	??_crcBufS_get+5,f,c
  4680  002B58  501F               	movf	??_crcBufS_get,w,c
  4681  002B5A  2623               	addwf	??_crcBufS_get+4,f,c
  4682  002B5C  5020               	movf	??_crcBufS_get+1,w,c
  4683  002B5E  2224               	addwfc	??_crcBufS_get+5,f,c
  4684  002B60  5023               	movf	??_crcBufS_get+4,w,c
  4685  002B62  241B               	addwf	crcBufS_get@_this,w,c
  4686  002B64  6ED9               	movwf	fsr2l,c
  4687  002B66  5024               	movf	??_crcBufS_get+5,w,c
  4688  002B68  201C               	addwfc	crcBufS_get@_this+1,w,c
  4689  002B6A  6EDA               	movwf	fsr2h,c
  4690  002B6C  50DF               	movf	indf2,w,c
  4691  002B6E  0012               	return	
  4692  002B70  0012               	return		;funcret
  4693  002B72                     __end_of_crcBufS_get:
  4694                           	opt stack 0
  4695                           tosu	equ	0xFFF
  4696                           tosh	equ	0xFFE
  4697                           tosl	equ	0xFFD
  4698                           pclath	equ	0xFFA
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           prodh	equ	0xFF4
  4704                           prodl	equ	0xFF3
  4705                           intcon	equ	0xFF2
  4706                           postinc0	equ	0xFEE
  4707                           wreg	equ	0xFE8
  4708                           postdec1	equ	0xFE5
  4709                           fsr1l	equ	0xFE1
  4710                           indf2	equ	0xFDF
  4711                           postinc2	equ	0xFDE
  4712                           postdec2	equ	0xFDD
  4713                           plusw2	equ	0xFDB
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _Receive_get *****************
  4719 ;; Defined at:
  4720 ;;		line 126 in file "UART.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      unsigned char 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4734 ;;      Params:         0       0       0       0       0       0       0
  4735 ;;      Locals:         0       0       0       0       0       0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0
  4737 ;;      Totals:         0       0       0       0       0       0       0
  4738 ;;Total ram usage:        0 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    6
  4741 ;; This function calls:
  4742 ;;		_UART_buff_get
  4743 ;; This function is called by:
  4744 ;;		_SYSTEM_Initialize
  4745 ;;		_getch
  4746 ;;		_CRCcheck
  4747 ;;		_receiveData
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text13
  4752  003CA6                     __ptext13:
  4753                           	opt stack 0
  4754  003CA6                     _Receive_get:
  4755                           	opt stack 22
  4756                           
  4757                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4758                           
  4759                           ;incstack = 0
  4760  003CA6  0E00               	movlw	low _input_buffer
  4761  003CA8  6E21               	movwf	UART_buff_get@_this,c
  4762  003CAA  0E04               	movlw	high _input_buffer
  4763  003CAC  6E22               	movwf	UART_buff_get@_this+1,c
  4764  003CAE  EC38  F019         	call	_UART_buff_get	;wreg free
  4765  003CB2  0012               	return	
  4766  003CB4  0012               	return		;funcret
  4767  003CB6                     __end_of_Receive_get:
  4768                           	opt stack 0
  4769                           tosu	equ	0xFFF
  4770                           tosh	equ	0xFFE
  4771                           tosl	equ	0xFFD
  4772                           pclath	equ	0xFFA
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           postinc0	equ	0xFEE
  4781                           wreg	equ	0xFE8
  4782                           postdec1	equ	0xFE5
  4783                           fsr1l	equ	0xFE1
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           postdec2	equ	0xFDD
  4787                           plusw2	equ	0xFDB
  4788                           fsr2h	equ	0xFDA
  4789                           fsr2l	equ	0xFD9
  4790                           status	equ	0xFD8
  4791                           
  4792 ;; *************** function _UART_buff_get *****************
  4793 ;; Defined at:
  4794 ;;		line 81 in file "UART.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4797 ;;		 -> output_buffer(206), input_buffer(206), 
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;  c               1   36[COMRAM] unsigned char 
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      unsigned char 
  4802 ;; Registers used:
  4803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4809 ;;      Params:         2       0       0       0       0       0       0
  4810 ;;      Locals:         1       0       0       0       0       0       0
  4811 ;;      Temps:          2       0       0       0       0       0       0
  4812 ;;      Totals:         5       0       0       0       0       0       0
  4813 ;;Total ram usage:        5 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    5
  4816 ;; This function calls:
  4817 ;;		_UART_buff_modulo_inc
  4818 ;; This function is called by:
  4819 ;;		_Receive_get
  4820 ;;		_Send_put
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           	psect	text14
  4825  003270                     __ptext14:
  4826                           	opt stack 0
  4827  003270                     _UART_buff_get:
  4828                           	opt stack 22
  4829                           
  4830                           ;UART.c: 82: unsigned char c;
  4831                           ;UART.c: 83: if (_this->count > 0) {
  4832                           
  4833                           ;incstack = 0
  4834  003270  EE20 F0CC          	lfsr	2,204
  4835  003274  5021               	movf	UART_buff_get@_this,w,c
  4836  003276  26D9               	addwf	fsr2l,f,c
  4837  003278  5022               	movf	UART_buff_get@_this+1,w,c
  4838  00327A  22DA               	addwfc	fsr2h,f,c
  4839  00327C  0E01               	movlw	1
  4840  00327E  BEDB               	btfsc	plusw2,7,c
  4841  003280  D03C               	goto	l4503
  4842  003282  0E01               	movlw	1
  4843  003284  50DB               	movf	plusw2,w,c
  4844  003286  E103               	bnz	u4360
  4845  003288  04DE               	decf	postinc2,w,c
  4846  00328A  A0D8               	btfss	status,0,c
  4847  00328C  D036               	goto	l4503
  4848  00328E                     u4360:
  4849                           
  4850                           ;UART.c: 84: c = _this->buf[_this->tail];
  4851  00328E  EE20 F0CA          	lfsr	2,202
  4852  003292  5021               	movf	UART_buff_get@_this,w,c
  4853  003294  26D9               	addwf	fsr2l,f,c
  4854  003296  5022               	movf	UART_buff_get@_this+1,w,c
  4855  003298  22DA               	addwfc	fsr2h,f,c
  4856  00329A  CFDE F023          	movff	postinc2,??_UART_buff_get
  4857  00329E  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4858  0032A2  5023               	movf	??_UART_buff_get,w,c
  4859  0032A4  2421               	addwf	UART_buff_get@_this,w,c
  4860  0032A6  6ED9               	movwf	fsr2l,c
  4861  0032A8  5024               	movf	??_UART_buff_get+1,w,c
  4862  0032AA  2022               	addwfc	UART_buff_get@_this+1,w,c
  4863  0032AC  6EDA               	movwf	fsr2h,c
  4864  0032AE  50DF               	movf	indf2,w,c
  4865  0032B0  6E25               	movwf	UART_buff_get@c,c
  4866                           
  4867                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4868  0032B2  EE20 F0CA          	lfsr	2,202
  4869  0032B6  5021               	movf	UART_buff_get@_this,w,c
  4870  0032B8  26D9               	addwf	fsr2l,f,c
  4871  0032BA  5022               	movf	UART_buff_get@_this+1,w,c
  4872  0032BC  22DA               	addwfc	fsr2h,f,c
  4873  0032BE  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4874  0032C2  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4875  0032C6  0E00               	movlw	0
  4876  0032C8  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4877  0032CA  0EC8               	movlw	200
  4878  0032CC  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4879  0032CE  EC2A  F01D         	call	_UART_buff_modulo_inc	;wreg free
  4880  0032D2  EE20 F0CA          	lfsr	2,202
  4881  0032D6  5021               	movf	UART_buff_get@_this,w,c
  4882  0032D8  26D9               	addwf	fsr2l,f,c
  4883  0032DA  5022               	movf	UART_buff_get@_this+1,w,c
  4884  0032DC  22DA               	addwfc	fsr2h,f,c
  4885  0032DE  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4886  0032E2  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4887                           
  4888                           ;UART.c: 86: --_this->count;
  4889  0032E6  EE20 F0CC          	lfsr	2,204
  4890  0032EA  5021               	movf	UART_buff_get@_this,w,c
  4891  0032EC  26D9               	addwf	fsr2l,f,c
  4892  0032EE  5022               	movf	UART_buff_get@_this+1,w,c
  4893  0032F0  22DA               	addwfc	fsr2h,f,c
  4894  0032F2  06DE               	decf	postinc2,f,c
  4895  0032F4  0E00               	movlw	0
  4896  0032F6  5ADD               	subwfb	postdec2,f,c
  4897                           
  4898                           ;UART.c: 87: } else {
  4899  0032F8  D002               	goto	l782
  4900  0032FA                     l4503:
  4901                           
  4902                           ;UART.c: 88: c = 0;
  4903  0032FA  0E00               	movlw	0
  4904  0032FC  6E25               	movwf	UART_buff_get@c,c
  4905  0032FE                     l782:
  4906                           
  4907                           ;UART.c: 89: }
  4908                           ;UART.c: 90: return (c);
  4909  0032FE  5025               	movf	UART_buff_get@c,w,c
  4910  003300  0012               	return	
  4911  003302  0012               	return		;funcret
  4912  003304                     __end_of_UART_buff_get:
  4913                           	opt stack 0
  4914                           tosu	equ	0xFFF
  4915                           tosh	equ	0xFFE
  4916                           tosl	equ	0xFFD
  4917                           pclath	equ	0xFFA
  4918                           tblptru	equ	0xFF8
  4919                           tblptrh	equ	0xFF7
  4920                           tblptrl	equ	0xFF6
  4921                           tablat	equ	0xFF5
  4922                           prodh	equ	0xFF4
  4923                           prodl	equ	0xFF3
  4924                           intcon	equ	0xFF2
  4925                           postinc0	equ	0xFEE
  4926                           wreg	equ	0xFE8
  4927                           postdec1	equ	0xFE5
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           plusw2	equ	0xFDB
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _UART_buff_modulo_inc *****************
  4938 ;; Defined at:
  4939 ;;		line 106 in file "UART.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  value           2   26[COMRAM] const unsigned int 
  4942 ;;  modulus         2   28[COMRAM] const unsigned int 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  my_value        2   30[COMRAM] unsigned int 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  2   26[COMRAM] unsigned int 
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4954 ;;      Params:         4       0       0       0       0       0       0
  4955 ;;      Locals:         2       0       0       0       0       0       0
  4956 ;;      Temps:          0       0       0       0       0       0       0
  4957 ;;      Totals:         6       0       0       0       0       0       0
  4958 ;;Total ram usage:        6 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    4
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_UART_buff_put
  4965 ;;		_UART_buff_get
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text15
  4970  003A54                     __ptext15:
  4971                           	opt stack 0
  4972  003A54                     _UART_buff_modulo_inc:
  4973                           	opt stack 22
  4974                           
  4975                           ;UART.c: 107: unsigned int my_value = value + 1;
  4976                           
  4977                           ;incstack = 0
  4978  003A54  0E01               	movlw	1
  4979  003A56  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4980  003A58  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4981  003A5A  0E00               	movlw	0
  4982  003A5C  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4983  003A5E  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4984                           
  4985                           ;UART.c: 108: if (my_value >= modulus) {
  4986  003A60  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4987  003A62  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4988  003A64  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4989  003A66  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4990  003A68  A0D8               	btfss	status,0,c
  4991  003A6A  D005               	goto	l4491
  4992                           
  4993                           ;UART.c: 109: my_value = 0;
  4994  003A6C  0E00               	movlw	0
  4995  003A6E  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4996  003A70  0E00               	movlw	0
  4997  003A72  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4998  003A74  D000               	goto	l4491
  4999  003A76                     l4491:
  5000                           
  5001                           ;UART.c: 110: }
  5002                           ;UART.c: 111: return (my_value);
  5003  003A76  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  5004  003A7A  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  5005  003A7E  0012               	return	
  5006  003A80  0012               	return		;funcret
  5007  003A82                     __end_of_UART_buff_modulo_inc:
  5008                           	opt stack 0
  5009                           tosu	equ	0xFFF
  5010                           tosh	equ	0xFFE
  5011                           tosl	equ	0xFFD
  5012                           pclath	equ	0xFFA
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           prodh	equ	0xFF4
  5018                           prodl	equ	0xFF3
  5019                           intcon	equ	0xFF2
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           postdec1	equ	0xFE5
  5023                           fsr1l	equ	0xFE1
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           plusw2	equ	0xFDB
  5028                           fsr2h	equ	0xFDA
  5029                           fsr2l	equ	0xFD9
  5030                           status	equ	0xFD8
  5031                           
  5032 ;; *************** function _Receive_available *****************
  5033 ;; Defined at:
  5034 ;;		line 122 in file "UART.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  2   28[COMRAM] int 
  5041 ;; Registers used:
  5042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5048 ;;      Params:         2       0       0       0       0       0       0
  5049 ;;      Locals:         0       0       0       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0
  5051 ;;      Totals:         2       0       0       0       0       0       0
  5052 ;;Total ram usage:        2 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    5
  5055 ;; This function calls:
  5056 ;;		_UART_buff_size
  5057 ;; This function is called by:
  5058 ;;		_SYSTEM_Initialize
  5059 ;;		_CRCcheck
  5060 ;;		_receiveData
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           	psect	text16
  5065  003BF0                     __ptext16:
  5066                           	opt stack 0
  5067  003BF0                     _Receive_available:
  5068                           	opt stack 23
  5069                           
  5070                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  5071                           
  5072                           ;incstack = 0
  5073  003BF0  0E00               	movlw	low _input_buffer
  5074  003BF2  6E1B               	movwf	UART_buff_size@_this,c
  5075  003BF4  0E04               	movlw	high _input_buffer
  5076  003BF6  6E1C               	movwf	UART_buff_size@_this+1,c
  5077  003BF8  EC04  F01E         	call	_UART_buff_size	;wreg free
  5078  003BFC  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  5079  003C00  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  5080  003C04  0012               	return	
  5081  003C06  0012               	return		;funcret
  5082  003C08                     __end_of_Receive_available:
  5083                           	opt stack 0
  5084                           tosu	equ	0xFFF
  5085                           tosh	equ	0xFFE
  5086                           tosl	equ	0xFFD
  5087                           pclath	equ	0xFFA
  5088                           tblptru	equ	0xFF8
  5089                           tblptrh	equ	0xFF7
  5090                           tblptrl	equ	0xFF6
  5091                           tablat	equ	0xFF5
  5092                           prodh	equ	0xFF4
  5093                           prodl	equ	0xFF3
  5094                           intcon	equ	0xFF2
  5095                           postinc0	equ	0xFEE
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1l	equ	0xFE1
  5099                           indf2	equ	0xFDF
  5100                           postinc2	equ	0xFDE
  5101                           postdec2	equ	0xFDD
  5102                           plusw2	equ	0xFDB
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _UART_buff_size *****************
  5108 ;; Defined at:
  5109 ;;		line 102 in file "UART.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  5112 ;;		 -> output_buffer(206), input_buffer(206), 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;		None
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  2   26[COMRAM] int 
  5117 ;; Registers used:
  5118 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5124 ;;      Params:         2       0       0       0       0       0       0
  5125 ;;      Locals:         0       0       0       0       0       0       0
  5126 ;;      Temps:          0       0       0       0       0       0       0
  5127 ;;      Totals:         2       0       0       0       0       0       0
  5128 ;;Total ram usage:        2 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    4
  5131 ;; This function calls:
  5132 ;;		Nothing
  5133 ;; This function is called by:
  5134 ;;		_Receive_available
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           	psect	text17
  5139  003C08                     __ptext17:
  5140                           	opt stack 0
  5141  003C08                     _UART_buff_size:
  5142                           	opt stack 23
  5143                           
  5144                           ;UART.c: 103: return (_this->count);
  5145                           
  5146                           ;incstack = 0
  5147  003C08  EE20 F0CC          	lfsr	2,204
  5148  003C0C  501B               	movf	UART_buff_size@_this,w,c
  5149  003C0E  26D9               	addwf	fsr2l,f,c
  5150  003C10  501C               	movf	UART_buff_size@_this+1,w,c
  5151  003C12  22DA               	addwfc	fsr2h,f,c
  5152  003C14  CFDE F01B          	movff	postinc2,?_UART_buff_size
  5153  003C18  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  5154  003C1C  0012               	return	
  5155  003C1E  0012               	return		;funcret
  5156  003C20                     __end_of_UART_buff_size:
  5157                           	opt stack 0
  5158                           tosu	equ	0xFFF
  5159                           tosh	equ	0xFFE
  5160                           tosl	equ	0xFFD
  5161                           pclath	equ	0xFFA
  5162                           tblptru	equ	0xFF8
  5163                           tblptrh	equ	0xFF7
  5164                           tblptrl	equ	0xFF6
  5165                           tablat	equ	0xFF5
  5166                           prodh	equ	0xFF4
  5167                           prodl	equ	0xFF3
  5168                           intcon	equ	0xFF2
  5169                           postinc0	equ	0xFEE
  5170                           wreg	equ	0xFE8
  5171                           postdec1	equ	0xFE5
  5172                           fsr1l	equ	0xFE1
  5173                           indf2	equ	0xFDF
  5174                           postinc2	equ	0xFDE
  5175                           postdec2	equ	0xFDD
  5176                           plusw2	equ	0xFDB
  5177                           fsr2h	equ	0xFDA
  5178                           fsr2l	equ	0xFD9
  5179                           status	equ	0xFD8
  5180                           
  5181 ;; *************** function _CRC8 *****************
  5182 ;; Defined at:
  5183 ;;		line 34 in file "FastTransfer.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;  data            2   26[COMRAM] PTR const unsigned char 
  5186 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1130(3), receiveData@holder(3), 
  5187 ;;		 -> rx_buffer(200), ring_buffer(206), 
  5188 ;;  len             1   28[COMRAM] unsigned char 
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;  sum             1   29[COMRAM] unsigned char 
  5191 ;;  tempI           1   31[COMRAM] unsigned char 
  5192 ;;  extract         1   30[COMRAM] unsigned char 
  5193 ;;  crc             1   32[COMRAM] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  1    wreg      unsigned char 
  5196 ;; Registers used:
  5197 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5203 ;;      Params:         3       0       0       0       0       0       0
  5204 ;;      Locals:         4       0       0       0       0       0       0
  5205 ;;      Temps:          0       0       0       0       0       0       0
  5206 ;;      Totals:         7       0       0       0       0       0       0
  5207 ;;Total ram usage:        7 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:    4
  5210 ;; This function calls:
  5211 ;;		Nothing
  5212 ;; This function is called by:
  5213 ;;		_sendData
  5214 ;;		_receiveData
  5215 ;;		_CRCcheck
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text18
  5220  0036D4                     __ptext18:
  5221                           	opt stack 0
  5222  0036D4                     _CRC8:
  5223                           	opt stack 24
  5224                           
  5225                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  5226                           
  5227                           ;incstack = 0
  5228  0036D4  0E00               	movlw	0
  5229  0036D6  6E21               	movwf	CRC8@crc,c
  5230                           
  5231                           ;FastTransfer.c: 36: while (len--) {
  5232  0036D8  D01F               	goto	l4565
  5233  0036DA                     l4549:
  5234                           
  5235                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  5236  0036DA  C01B  FFD9         	movff	CRC8@data,fsr2l
  5237  0036DE  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5238  0036E2  50DF               	movf	indf2,w,c
  5239  0036E4  6E1F               	movwf	CRC8@extract,c
  5240  0036E6  4A1B               	infsnz	CRC8@data,f,c
  5241  0036E8  2A1C               	incf	CRC8@data+1,f,c
  5242                           
  5243                           ;FastTransfer.c: 38: unsigned char tempI;
  5244                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  5245  0036EA  0E08               	movlw	8
  5246  0036EC  6E20               	movwf	CRC8@tempI,c
  5247  0036EE  D00F               	goto	l4563
  5248  0036F0                     l4555:
  5249                           
  5250                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  5251  0036F0  5021               	movf	CRC8@crc,w,c
  5252  0036F2  181F               	xorwf	CRC8@extract,w,c
  5253  0036F4  0B01               	andlw	1
  5254  0036F6  6E1E               	movwf	CRC8@sum,c
  5255                           
  5256                           ;FastTransfer.c: 41: crc >>= 1;
  5257  0036F8  90D8               	bcf	status,0,c
  5258  0036FA  3221               	rrcf	CRC8@crc,f,c
  5259                           
  5260                           ;FastTransfer.c: 42: if (sum) {
  5261  0036FC  501E               	movf	CRC8@sum,w,c
  5262  0036FE  B4D8               	btfsc	status,2,c
  5263  003700  D002               	goto	l603
  5264                           
  5265                           ;FastTransfer.c: 43: crc ^= 0x8C;
  5266  003702  0E8C               	movlw	140
  5267  003704  1A21               	xorwf	CRC8@crc,f,c
  5268  003706                     l603:
  5269                           
  5270                           ;FastTransfer.c: 44: }
  5271                           ;FastTransfer.c: 45: extract >>= 1;
  5272  003706  90D8               	bcf	status,0,c
  5273  003708  321F               	rrcf	CRC8@extract,f,c
  5274  00370A  0620               	decf	CRC8@tempI,f,c
  5275  00370C  D000               	goto	l4563
  5276  00370E                     l4563:
  5277  00370E  5020               	movf	CRC8@tempI,w,c
  5278  003710  B4D8               	btfsc	status,2,c
  5279  003712  D002               	goto	l4565
  5280  003714  D7ED               	goto	l4555
  5281  003716  D000               	goto	l4565
  5282  003718                     l4565:
  5283  003718  061D               	decf	CRC8@len,f,c
  5284  00371A  281D               	incf	CRC8@len,w,c
  5285  00371C  A4D8               	btfss	status,2,c
  5286  00371E  D7DD               	goto	l4549
  5287                           
  5288                           ;FastTransfer.c: 46: }
  5289                           ;FastTransfer.c: 47: }
  5290                           ;FastTransfer.c: 48: return crc;
  5291  003720  5021               	movf	CRC8@crc,w,c
  5292  003722  0012               	return	
  5293  003724  0012               	return		;funcret
  5294  003726                     __end_of_CRC8:
  5295                           	opt stack 0
  5296                           tosu	equ	0xFFF
  5297                           tosh	equ	0xFFE
  5298                           tosl	equ	0xFFD
  5299                           pclath	equ	0xFFA
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           postinc0	equ	0xFEE
  5308                           wreg	equ	0xFE8
  5309                           postdec1	equ	0xFE5
  5310                           fsr1l	equ	0xFE1
  5311                           indf2	equ	0xFDF
  5312                           postinc2	equ	0xFDE
  5313                           postdec2	equ	0xFDD
  5314                           plusw2	equ	0xFDB
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           
  5319 ;; *************** function ___fttol *****************
  5320 ;; Defined at:
  5321 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  f1              3   30[BANK0 ] float 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  lval            4   40[BANK0 ] unsigned long 
  5326 ;;  exp1            1   44[BANK0 ] unsigned char 
  5327 ;;  sign1           1   39[BANK0 ] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  4   30[BANK0 ] long 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5337 ;;      Params:         0       4       0       0       0       0       0
  5338 ;;      Locals:         0       6       0       0       0       0       0
  5339 ;;      Temps:          0       5       0       0       0       0       0
  5340 ;;      Totals:         0      15       0       0       0       0       0
  5341 ;;Total ram usage:       15 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    4
  5344 ;; This function calls:
  5345 ;;		Nothing
  5346 ;; This function is called by:
  5347 ;;		_updateComms
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text19
  5352  002134                     __ptext19:
  5353                           	opt stack 0
  5354  002134                     ___fttol:
  5355                           	opt stack 25
  5356                           
  5357                           ;incstack = 0
  5358  002134  C0E1  F0E3         	movff	___fttol@f1+2,??___fttol
  5359  002138  0100               	movlb	0	; () banked
  5360  00213A  6BE4               	clrf	(??___fttol+1)& (0+255),b
  5361  00213C  6BE5               	clrf	(??___fttol+2)& (0+255),b
  5362  00213E  0100               	movlb	0	; () banked
  5363  002140  35E0               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5364  002142  0100               	movlb	0	; () banked
  5365  002144  37E3               	rlcf	??___fttol& (0+255),f,b
  5366  002146  E301               	bnc	u3871
  5367  002148  81E4               	bsf	(??___fttol+1)& (0+255),0,b
  5368  00214A                     u3871:
  5369  00214A  0100               	movlb	0	; () banked
  5370  00214C  51E3               	movf	??___fttol& (0+255),w,b
  5371  00214E  0100               	movlb	0	; () banked
  5372  002150  6FED               	movwf	___fttol@exp1& (0+255),b
  5373  002152  0100               	movlb	0	; () banked
  5374  002154  51ED               	movf	___fttol@exp1& (0+255),w,b
  5375  002156  A4D8               	btfss	status,2,c
  5376  002158  D00A               	goto	l3947
  5377                           
  5378                           ; BSR set to: 0
  5379  00215A  0E00               	movlw	0
  5380  00215C  0100               	movlb	0	; () banked
  5381  00215E  6FDF               	movwf	?___fttol& (0+255),b
  5382  002160  0E00               	movlw	0
  5383  002162  6FE0               	movwf	(?___fttol+1)& (0+255),b
  5384  002164  0E00               	movlw	0
  5385  002166  6FE1               	movwf	(?___fttol+2)& (0+255),b
  5386  002168  0E00               	movlw	0
  5387  00216A  6FE2               	movwf	(?___fttol+3)& (0+255),b
  5388                           
  5389                           ; BSR set to: 0
  5390  00216C  0012               	return	
  5391  00216E                     l3947:
  5392                           
  5393                           ; BSR set to: 0
  5394  00216E  0E17               	movlw	23
  5395  002170  0100               	movlb	0	; () banked
  5396  002172  6FE3               	movwf	??___fttol& (0+255),b
  5397  002174  C0DF  F0E4         	movff	___fttol@f1,??___fttol+1
  5398  002178  C0E0  F0E5         	movff	___fttol@f1+1,??___fttol+2
  5399  00217C  C0E1  F0E6         	movff	___fttol@f1+2,??___fttol+3
  5400  002180  0100               	movlb	0	; () banked
  5401  002182  29E3               	incf	??___fttol& (0+255),w,b
  5402  002184  0100               	movlb	0	; () banked
  5403  002186  6FE7               	movwf	(??___fttol+4)& (0+255),b
  5404  002188  D005               	goto	u3890
  5405  00218A                     u3895:
  5406  00218A  0100               	movlb	0	; () banked
  5407  00218C  90D8               	bcf	status,0,c
  5408  00218E  33E6               	rrcf	(??___fttol+3)& (0+255),f,b
  5409  002190  33E5               	rrcf	(??___fttol+2)& (0+255),f,b
  5410  002192  33E4               	rrcf	(??___fttol+1)& (0+255),f,b
  5411  002194                     u3890:
  5412  002194  0100               	movlb	0	; () banked
  5413  002196  2FE7               	decfsz	(??___fttol+4)& (0+255),f,b
  5414  002198  D7F8               	goto	u3895
  5415  00219A  0100               	movlb	0	; () banked
  5416  00219C  51E4               	movf	(??___fttol+1)& (0+255),w,b
  5417  00219E  0100               	movlb	0	; () banked
  5418  0021A0  6FE8               	movwf	___fttol@sign1& (0+255),b
  5419                           
  5420                           ; BSR set to: 0
  5421  0021A2  0100               	movlb	0	; () banked
  5422  0021A4  8FE0               	bsf	(___fttol@f1+1)& (0+255),7,b
  5423                           
  5424                           ; BSR set to: 0
  5425  0021A6  0EFF               	movlw	255
  5426  0021A8  0100               	movlb	0	; () banked
  5427  0021AA  17DF               	andwf	___fttol@f1& (0+255),f,b
  5428  0021AC  0EFF               	movlw	255
  5429  0021AE  0100               	movlb	0	; () banked
  5430  0021B0  17E0               	andwf	(___fttol@f1+1)& (0+255),f,b
  5431  0021B2  0E00               	movlw	0
  5432  0021B4  0100               	movlb	0	; () banked
  5433  0021B6  17E1               	andwf	(___fttol@f1+2)& (0+255),f,b
  5434                           
  5435                           ; BSR set to: 0
  5436  0021B8  0100               	movlb	0	; () banked
  5437  0021BA  51DF               	movf	___fttol@f1& (0+255),w,b
  5438  0021BC  0100               	movlb	0	; () banked
  5439  0021BE  6FE9               	movwf	___fttol@lval& (0+255),b
  5440  0021C0  0100               	movlb	0	; () banked
  5441  0021C2  51E0               	movf	(___fttol@f1+1)& (0+255),w,b
  5442  0021C4  0100               	movlb	0	; () banked
  5443  0021C6  6FEA               	movwf	(___fttol@lval+1)& (0+255),b
  5444  0021C8  0100               	movlb	0	; () banked
  5445  0021CA  51E1               	movf	(___fttol@f1+2)& (0+255),w,b
  5446  0021CC  0100               	movlb	0	; () banked
  5447  0021CE  6FEB               	movwf	(___fttol@lval+2)& (0+255),b
  5448  0021D0  0100               	movlb	0	; () banked
  5449  0021D2  6BEC               	clrf	(___fttol@lval+3)& (0+255),b
  5450                           
  5451                           ; BSR set to: 0
  5452  0021D4  0E8E               	movlw	142
  5453  0021D6  0100               	movlb	0	; () banked
  5454  0021D8  5FED               	subwf	___fttol@exp1& (0+255),f,b
  5455                           
  5456                           ; BSR set to: 0
  5457  0021DA  0100               	movlb	0	; () banked
  5458  0021DC  AFED               	btfss	___fttol@exp1& (0+255),7,b
  5459  0021DE  D01B               	goto	l3969
  5460                           
  5461                           ; BSR set to: 0
  5462  0021E0  0100               	movlb	0	; () banked
  5463  0021E2  51ED               	movf	___fttol@exp1& (0+255),w,b
  5464  0021E4  0A80               	xorlw	128
  5465  0021E6  0F8F               	addlw	143
  5466  0021E8  B0D8               	btfsc	status,0,c
  5467  0021EA  D00B               	goto	l3965
  5468                           
  5469                           ; BSR set to: 0
  5470  0021EC  0E00               	movlw	0
  5471  0021EE  0100               	movlb	0	; () banked
  5472  0021F0  6FDF               	movwf	?___fttol& (0+255),b
  5473  0021F2  0E00               	movlw	0
  5474  0021F4  6FE0               	movwf	(?___fttol+1)& (0+255),b
  5475  0021F6  0E00               	movlw	0
  5476  0021F8  6FE1               	movwf	(?___fttol+2)& (0+255),b
  5477  0021FA  0E00               	movlw	0
  5478  0021FC  6FE2               	movwf	(?___fttol+3)& (0+255),b
  5479                           
  5480                           ; BSR set to: 0
  5481  0021FE  0012               	return	
  5482                           
  5483                           ; BSR set to: 0
  5484  002200  D000               	goto	l3965
  5485  002202                     l3965:
  5486                           
  5487                           ; BSR set to: 0
  5488  002202  0100               	movlb	0	; () banked
  5489  002204  90D8               	bcf	status,0,c
  5490  002206  33EC               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5491  002208  33EB               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5492  00220A  33EA               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5493  00220C  33E9               	rrcf	___fttol@lval& (0+255),f,b
  5494                           
  5495                           ; BSR set to: 0
  5496  00220E  0100               	movlb	0	; () banked
  5497  002210  3FED               	incfsz	___fttol@exp1& (0+255),f,b
  5498  002212  D7F7               	goto	l3965
  5499                           
  5500                           ; BSR set to: 0
  5501  002214  D01F               	goto	l3979
  5502  002216                     l3969:
  5503                           
  5504                           ; BSR set to: 0
  5505  002216  0E17               	movlw	23
  5506  002218  0100               	movlb	0	; () banked
  5507  00221A  65ED               	cpfsgt	___fttol@exp1& (0+255),b
  5508  00221C  D014               	goto	l3977
  5509                           
  5510                           ; BSR set to: 0
  5511  00221E  0E00               	movlw	0
  5512  002220  0100               	movlb	0	; () banked
  5513  002222  6FDF               	movwf	?___fttol& (0+255),b
  5514  002224  0E00               	movlw	0
  5515  002226  6FE0               	movwf	(?___fttol+1)& (0+255),b
  5516  002228  0E00               	movlw	0
  5517  00222A  6FE1               	movwf	(?___fttol+2)& (0+255),b
  5518  00222C  0E00               	movlw	0
  5519  00222E  6FE2               	movwf	(?___fttol+3)& (0+255),b
  5520                           
  5521                           ; BSR set to: 0
  5522  002230  0012               	return	
  5523                           
  5524                           ; BSR set to: 0
  5525  002232  D009               	goto	l3977
  5526  002234                     l3975:
  5527                           
  5528                           ; BSR set to: 0
  5529  002234  0100               	movlb	0	; () banked
  5530  002236  90D8               	bcf	status,0,c
  5531  002238  37E9               	rlcf	___fttol@lval& (0+255),f,b
  5532  00223A  37EA               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5533  00223C  37EB               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5534  00223E  37EC               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5535  002240  0100               	movlb	0	; () banked
  5536  002242  07ED               	decf	___fttol@exp1& (0+255),f,b
  5537  002244  D000               	goto	l3977
  5538  002246                     l3977:
  5539                           
  5540                           ; BSR set to: 0
  5541  002246  0100               	movlb	0	; () banked
  5542  002248  51ED               	movf	___fttol@exp1& (0+255),w,b
  5543  00224A  0100               	movlb	0	; () banked
  5544  00224C  B4D8               	btfsc	status,2,c
  5545  00224E  D002               	goto	l3979
  5546  002250  D7F1               	goto	l3975
  5547                           
  5548                           ; BSR set to: 0
  5549  002252  D000               	goto	l3979
  5550  002254                     l3979:
  5551                           
  5552                           ; BSR set to: 0
  5553  002254  0100               	movlb	0	; () banked
  5554  002256  51E8               	movf	___fttol@sign1& (0+255),w,b
  5555  002258  0100               	movlb	0	; () banked
  5556  00225A  B4D8               	btfsc	status,2,c
  5557  00225C  D00A               	goto	l3983
  5558                           
  5559                           ; BSR set to: 0
  5560  00225E  0100               	movlb	0	; () banked
  5561  002260  1FEC               	comf	(___fttol@lval+3)& (0+255),f,b
  5562  002262  1FEB               	comf	(___fttol@lval+2)& (0+255),f,b
  5563  002264  1FEA               	comf	(___fttol@lval+1)& (0+255),f,b
  5564  002266  6DE9               	negf	___fttol@lval& (0+255),b
  5565  002268  0E00               	movlw	0
  5566  00226A  23EA               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5567  00226C  23EB               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5568  00226E  23EC               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5569  002270  D000               	goto	l3983
  5570  002272                     l3983:
  5571                           
  5572                           ; BSR set to: 0
  5573  002272  C0E9  F0DF         	movff	___fttol@lval,?___fttol
  5574  002276  C0EA  F0E0         	movff	___fttol@lval+1,?___fttol+1
  5575  00227A  C0EB  F0E1         	movff	___fttol@lval+2,?___fttol+2
  5576  00227E  C0EC  F0E2         	movff	___fttol@lval+3,?___fttol+3
  5577  002282  0012               	return	
  5578                           
  5579                           ; BSR set to: 0
  5580                           
  5581                           ; BSR set to: 0
  5582  002284  0012               	return		;funcret
  5583  002286                     __end_of___fttol:
  5584                           	opt stack 0
  5585                           tosu	equ	0xFFF
  5586                           tosh	equ	0xFFE
  5587                           tosl	equ	0xFFD
  5588                           pclath	equ	0xFFA
  5589                           tblptru	equ	0xFF8
  5590                           tblptrh	equ	0xFF7
  5591                           tblptrl	equ	0xFF6
  5592                           tablat	equ	0xFF5
  5593                           prodh	equ	0xFF4
  5594                           prodl	equ	0xFF3
  5595                           intcon	equ	0xFF2
  5596                           postinc0	equ	0xFEE
  5597                           wreg	equ	0xFE8
  5598                           postdec1	equ	0xFE5
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           postdec2	equ	0xFDD
  5603                           plusw2	equ	0xFDB
  5604                           fsr2h	equ	0xFDA
  5605                           fsr2l	equ	0xFD9
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function _ToSend *****************
  5609 ;; Defined at:
  5610 ;;		line 216 in file "FastTransfer.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  where           1    wreg     unsigned char 
  5613 ;;  what            2   45[BANK0 ] unsigned int 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  where           1   47[BANK0 ] unsigned char 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;		None               void
  5618 ;; Registers used:
  5619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5625 ;;      Params:         0       2       0       0       0       0       0
  5626 ;;      Locals:         0       1       0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0
  5628 ;;      Totals:         0       3       0       0       0       0       0
  5629 ;;Total ram usage:        3 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    6
  5632 ;; This function calls:
  5633 ;;		_FastTransfer_buffer_put
  5634 ;; This function is called by:
  5635 ;;		_updateComms
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           	psect	text20
  5640  003B7C                     __ptext20:
  5641                           	opt stack 0
  5642  003B7C                     _ToSend:
  5643                           	opt stack 23
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;incstack = 0
  5647                           ;ToSend@where stored from wreg
  5648  003B7C  0100               	movlb	0	; () banked
  5649  003B7E  6FF0               	movwf	ToSend@where& (0+255),b
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  5653  003B80  0E00               	movlw	low _ring_buffer
  5654  003B82  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5655  003B84  0E02               	movlw	high _ring_buffer
  5656  003B86  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5657  003B88  C0F0  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5658  003B8C  C0EE  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5659  003B90  C0EF  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5660  003B94  ECE5  F00F         	call	_FastTransfer_buffer_put	;wreg free
  5661  003B98  0012               	return		;funcret
  5662  003B9A                     __end_of_ToSend:
  5663                           	opt stack 0
  5664                           tosu	equ	0xFFF
  5665                           tosh	equ	0xFFE
  5666                           tosl	equ	0xFFD
  5667                           pclath	equ	0xFFA
  5668                           tblptru	equ	0xFF8
  5669                           tblptrh	equ	0xFF7
  5670                           tblptrl	equ	0xFF6
  5671                           tablat	equ	0xFF5
  5672                           prodh	equ	0xFF4
  5673                           prodl	equ	0xFF3
  5674                           intcon	equ	0xFF2
  5675                           postinc0	equ	0xFEE
  5676                           wreg	equ	0xFE8
  5677                           postdec1	equ	0xFE5
  5678                           fsr1l	equ	0xFE1
  5679                           indf2	equ	0xFDF
  5680                           postinc2	equ	0xFDE
  5681                           postdec2	equ	0xFDD
  5682                           plusw2	equ	0xFDB
  5683                           fsr2h	equ	0xFDA
  5684                           fsr2l	equ	0xFD9
  5685                           status	equ	0xFD8
  5686                           
  5687 ;; *************** function _FastTransfer_buffer_put *****************
  5688 ;; Defined at:
  5689 ;;		line 223 in file "FastTransfer.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5692 ;;		 -> ring_buffer(206), 
  5693 ;;  towhere         1   34[COMRAM] unsigned char 
  5694 ;;  towhat          2   35[COMRAM] unsigned int 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;		None
  5697 ;; Return value:  Size  Location     Type
  5698 ;;		None               void
  5699 ;; Registers used:
  5700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5706 ;;      Params:         5       0       0       0       0       0       0
  5707 ;;      Locals:         0       0       0       0       0       0       0
  5708 ;;      Temps:          2       0       0       0       0       0       0
  5709 ;;      Totals:         7       0       0       0       0       0       0
  5710 ;;Total ram usage:        7 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    5
  5713 ;; This function calls:
  5714 ;;		_FastTransfer_buffer_modulo_inc
  5715 ;; This function is called by:
  5716 ;;		_ToSend
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text21
  5721  001FCA                     __ptext21:
  5722                           	opt stack 0
  5723  001FCA                     _FastTransfer_buffer_put:
  5724                           	opt stack 23
  5725                           
  5726                           ;FastTransfer.c: 225: group.integer = towhat;
  5727                           
  5728                           ;incstack = 0
  5729  001FCA  C024  F043         	movff	FastTransfer_buffer_put@towhat,_group
  5730  001FCE  C025  F044         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5731                           
  5732                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  5733  001FD2  EE20 F0CC          	lfsr	2,204
  5734  001FD6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5735  001FD8  26D9               	addwf	fsr2l,f,c
  5736  001FDA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5737  001FDC  22DA               	addwfc	fsr2h,f,c
  5738  001FDE  0E01               	movlw	1
  5739  001FE0  BEDB               	btfsc	plusw2,7,c
  5740  001FE2  D007               	goto	l4807
  5741  001FE4  0E01               	movlw	1
  5742  001FE6  50DB               	movf	plusw2,w,c
  5743  001FE8  E103               	bnz	u4951
  5744  001FEA  0EC5               	movlw	197
  5745  001FEC  5CDE               	subwf	postinc2,w,c
  5746  001FEE  B0D8               	btfsc	status,0,c
  5747  001FF0                     u4951:
  5748  001FF0  0012               	return	
  5749  001FF2                     l4807:
  5750                           
  5751                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  5752  001FF2  EE20 F0C8          	lfsr	2,200
  5753  001FF6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5754  001FF8  26D9               	addwf	fsr2l,f,c
  5755  001FFA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5756  001FFC  22DA               	addwfc	fsr2h,f,c
  5757  001FFE  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5758  002002  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5759  002006  5026               	movf	??_FastTransfer_buffer_put,w,c
  5760  002008  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5761  00200A  6ED9               	movwf	fsr2l,c
  5762  00200C  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5763  00200E  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5764  002010  6EDA               	movwf	fsr2h,c
  5765  002012  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5766                           
  5767                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5768  002016  EE20 F0C8          	lfsr	2,200
  5769  00201A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5770  00201C  26D9               	addwf	fsr2l,f,c
  5771  00201E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5772  002020  22DA               	addwfc	fsr2h,f,c
  5773  002022  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5774  002026  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5775  00202A  0E00               	movlw	0
  5776  00202C  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5777  00202E  0EC8               	movlw	200
  5778  002030  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5779  002032  EC41  F01D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5780  002036  EE20 F0C8          	lfsr	2,200
  5781  00203A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5782  00203C  26D9               	addwf	fsr2l,f,c
  5783  00203E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5784  002040  22DA               	addwfc	fsr2h,f,c
  5785  002042  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5786  002046  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5787                           
  5788                           ;FastTransfer.c: 230: ++_this->count;
  5789  00204A  EE20 F0CC          	lfsr	2,204
  5790  00204E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5791  002050  26D9               	addwf	fsr2l,f,c
  5792  002052  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5793  002054  22DA               	addwfc	fsr2h,f,c
  5794  002056  2ADE               	incf	postinc2,f,c
  5795  002058  0E00               	movlw	0
  5796  00205A  22DD               	addwfc	postdec2,f,c
  5797                           
  5798                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  5799  00205C  EE20 F0C8          	lfsr	2,200
  5800  002060  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5801  002062  26D9               	addwf	fsr2l,f,c
  5802  002064  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5803  002066  22DA               	addwfc	fsr2h,f,c
  5804  002068  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5805  00206C  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5806  002070  5026               	movf	??_FastTransfer_buffer_put,w,c
  5807  002072  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5808  002074  6ED9               	movwf	fsr2l,c
  5809  002076  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5810  002078  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5811  00207A  6EDA               	movwf	fsr2h,c
  5812  00207C  C043  FFDF         	movff	_group,indf2
  5813                           
  5814                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5815  002080  EE20 F0C8          	lfsr	2,200
  5816  002084  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5817  002086  26D9               	addwf	fsr2l,f,c
  5818  002088  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5819  00208A  22DA               	addwfc	fsr2h,f,c
  5820  00208C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5821  002090  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5822  002094  0E00               	movlw	0
  5823  002096  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5824  002098  0EC8               	movlw	200
  5825  00209A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5826  00209C  EC41  F01D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5827  0020A0  EE20 F0C8          	lfsr	2,200
  5828  0020A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5829  0020A6  26D9               	addwf	fsr2l,f,c
  5830  0020A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5831  0020AA  22DA               	addwfc	fsr2h,f,c
  5832  0020AC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5833  0020B0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5834                           
  5835                           ;FastTransfer.c: 233: ++_this->count;
  5836  0020B4  EE20 F0CC          	lfsr	2,204
  5837  0020B8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5838  0020BA  26D9               	addwf	fsr2l,f,c
  5839  0020BC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5840  0020BE  22DA               	addwfc	fsr2h,f,c
  5841  0020C0  2ADE               	incf	postinc2,f,c
  5842  0020C2  0E00               	movlw	0
  5843  0020C4  22DD               	addwfc	postdec2,f,c
  5844                           
  5845                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  5846  0020C6  EE20 F0C8          	lfsr	2,200
  5847  0020CA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5848  0020CC  26D9               	addwf	fsr2l,f,c
  5849  0020CE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5850  0020D0  22DA               	addwfc	fsr2h,f,c
  5851  0020D2  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5852  0020D6  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5853  0020DA  5026               	movf	??_FastTransfer_buffer_put,w,c
  5854  0020DC  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5855  0020DE  6ED9               	movwf	fsr2l,c
  5856  0020E0  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5857  0020E2  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5858  0020E4  6EDA               	movwf	fsr2h,c
  5859  0020E6  C044  FFDF         	movff	_group+1,indf2
  5860                           
  5861                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5862  0020EA  EE20 F0C8          	lfsr	2,200
  5863  0020EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5864  0020F0  26D9               	addwf	fsr2l,f,c
  5865  0020F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5866  0020F4  22DA               	addwfc	fsr2h,f,c
  5867  0020F6  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5868  0020FA  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5869  0020FE  0E00               	movlw	0
  5870  002100  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5871  002102  0EC8               	movlw	200
  5872  002104  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5873  002106  EC41  F01D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5874  00210A  EE20 F0C8          	lfsr	2,200
  5875  00210E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5876  002110  26D9               	addwf	fsr2l,f,c
  5877  002112  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5878  002114  22DA               	addwfc	fsr2h,f,c
  5879  002116  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5880  00211A  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5881                           
  5882                           ;FastTransfer.c: 236: ++_this->count;
  5883  00211E  EE20 F0CC          	lfsr	2,204
  5884  002122  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5885  002124  26D9               	addwf	fsr2l,f,c
  5886  002126  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5887  002128  22DA               	addwfc	fsr2h,f,c
  5888  00212A  2ADE               	incf	postinc2,f,c
  5889  00212C  0E00               	movlw	0
  5890  00212E  22DD               	addwfc	postdec2,f,c
  5891  002130  0012               	return	
  5892  002132  0012               	return		;funcret
  5893  002134                     __end_of_FastTransfer_buffer_put:
  5894                           	opt stack 0
  5895                           tosu	equ	0xFFF
  5896                           tosh	equ	0xFFE
  5897                           tosl	equ	0xFFD
  5898                           pclath	equ	0xFFA
  5899                           tblptru	equ	0xFF8
  5900                           tblptrh	equ	0xFF7
  5901                           tblptrl	equ	0xFF6
  5902                           tablat	equ	0xFF5
  5903                           prodh	equ	0xFF4
  5904                           prodl	equ	0xFF3
  5905                           intcon	equ	0xFF2
  5906                           postinc0	equ	0xFEE
  5907                           wreg	equ	0xFE8
  5908                           postdec1	equ	0xFE5
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           postdec2	equ	0xFDD
  5913                           plusw2	equ	0xFDB
  5914                           fsr2h	equ	0xFDA
  5915                           fsr2l	equ	0xFD9
  5916                           status	equ	0xFD8
  5917                           
  5918 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5919 ;; Defined at:
  5920 ;;		line 273 in file "FastTransfer.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;  value           2   26[COMRAM] const unsigned int 
  5923 ;;  modulus         2   28[COMRAM] const unsigned int 
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;  my_value        2   30[COMRAM] unsigned int 
  5926 ;; Return value:  Size  Location     Type
  5927 ;;                  2   26[COMRAM] unsigned int 
  5928 ;; Registers used:
  5929 ;;		wreg, status,2, status,0
  5930 ;; Tracked objects:
  5931 ;;		On entry : 0/0
  5932 ;;		On exit  : 0/0
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5935 ;;      Params:         4       0       0       0       0       0       0
  5936 ;;      Locals:         2       0       0       0       0       0       0
  5937 ;;      Temps:          0       0       0       0       0       0       0
  5938 ;;      Totals:         6       0       0       0       0       0       0
  5939 ;;Total ram usage:        6 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; Hardware stack levels required when called:    4
  5942 ;; This function calls:
  5943 ;;		Nothing
  5944 ;; This function is called by:
  5945 ;;		_FastTransfer_buffer_put
  5946 ;;		_FastTransfer_buffer_get
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text22
  5951  003A82                     __ptext22:
  5952                           	opt stack 0
  5953  003A82                     _FastTransfer_buffer_modulo_inc:
  5954                           	opt stack 23
  5955                           
  5956                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  5957                           
  5958                           ;incstack = 0
  5959  003A82  0E01               	movlw	1
  5960  003A84  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5961  003A86  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5962  003A88  0E00               	movlw	0
  5963  003A8A  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5964  003A8C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5965                           
  5966                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  5967  003A8E  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5968  003A90  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5969  003A92  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5970  003A94  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5971  003A96  A0D8               	btfss	status,0,c
  5972  003A98  D005               	goto	l4575
  5973                           
  5974                           ;FastTransfer.c: 276: my_value = 0;
  5975  003A9A  0E00               	movlw	0
  5976  003A9C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5977  003A9E  0E00               	movlw	0
  5978  003AA0  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5979  003AA2  D000               	goto	l4575
  5980  003AA4                     l4575:
  5981                           
  5982                           ;FastTransfer.c: 277: }
  5983                           ;FastTransfer.c: 278: return (my_value);
  5984  003AA4  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5985  003AA8  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5986  003AAC  0012               	return	
  5987  003AAE  0012               	return		;funcret
  5988  003AB0                     __end_of_FastTransfer_buffer_modulo_inc:
  5989                           	opt stack 0
  5990                           tosu	equ	0xFFF
  5991                           tosh	equ	0xFFE
  5992                           tosl	equ	0xFFD
  5993                           pclath	equ	0xFFA
  5994                           tblptru	equ	0xFF8
  5995                           tblptrh	equ	0xFF7
  5996                           tblptrl	equ	0xFF6
  5997                           tablat	equ	0xFF5
  5998                           prodh	equ	0xFF4
  5999                           prodl	equ	0xFF3
  6000                           intcon	equ	0xFF2
  6001                           postinc0	equ	0xFEE
  6002                           wreg	equ	0xFE8
  6003                           postdec1	equ	0xFE5
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           plusw2	equ	0xFDB
  6009                           fsr2h	equ	0xFDA
  6010                           fsr2l	equ	0xFD9
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function _Tempeture_Get *****************
  6014 ;; Defined at:
  6015 ;;		line 91 in file "Tempeture.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  channelnum      2   32[COMRAM] int 
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;		None
  6020 ;; Return value:  Size  Location     Type
  6021 ;;                  3   32[COMRAM] float 
  6022 ;; Registers used:
  6023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6024 ;; Tracked objects:
  6025 ;;		On entry : 0/0
  6026 ;;		On exit  : 0/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6029 ;;      Params:         3       0       0       0       0       0       0
  6030 ;;      Locals:         0       0       0       0       0       0       0
  6031 ;;      Temps:          0       0       0       0       0       0       0
  6032 ;;      Totals:         3       0       0       0       0       0       0
  6033 ;;Total ram usage:        3 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:    5
  6036 ;; This function calls:
  6037 ;;		___wmul
  6038 ;; This function is called by:
  6039 ;;		_updateComms
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text23
  6044  0039F4                     __ptext23:
  6045                           	opt stack 0
  6046  0039F4                     _Tempeture_Get:
  6047                           	opt stack 24
  6048                           
  6049                           ;Tempeture.c: 93: return Temp_DegF[channelnum];
  6050                           
  6051                           ;incstack = 0
  6052  0039F4  C021  F01B         	movff	Tempeture_Get@channelnum,___wmul@multiplier
  6053  0039F8  C022  F01C         	movff	Tempeture_Get@channelnum+1,___wmul@multiplier+1
  6054  0039FC  0E00               	movlw	0
  6055  0039FE  6E1E               	movwf	___wmul@multiplicand+1,c
  6056  003A00  0E03               	movlw	3
  6057  003A02  6E1D               	movwf	___wmul@multiplicand,c
  6058  003A04  EC86  F01D         	call	___wmul	;wreg free
  6059  003A08  0EBE               	movlw	low _Temp_DegF
  6060  003A0A  241B               	addwf	?___wmul,w,c
  6061  003A0C  6ED9               	movwf	fsr2l,c
  6062  003A0E  0E01               	movlw	high _Temp_DegF
  6063  003A10  201C               	addwfc	?___wmul+1,w,c
  6064  003A12  6EDA               	movwf	fsr2h,c
  6065  003A14  CFDE F021          	movff	postinc2,?_Tempeture_Get
  6066  003A18  CFDE F022          	movff	postinc2,?_Tempeture_Get+1
  6067  003A1C  CFDD F023          	movff	postdec2,?_Tempeture_Get+2
  6068  003A20  0012               	return	
  6069  003A22  0012               	return		;funcret
  6070  003A24                     __end_of_Tempeture_Get:
  6071                           	opt stack 0
  6072                           tosu	equ	0xFFF
  6073                           tosh	equ	0xFFE
  6074                           tosl	equ	0xFFD
  6075                           pclath	equ	0xFFA
  6076                           tblptru	equ	0xFF8
  6077                           tblptrh	equ	0xFF7
  6078                           tblptrl	equ	0xFF6
  6079                           tablat	equ	0xFF5
  6080                           prodh	equ	0xFF4
  6081                           prodl	equ	0xFF3
  6082                           intcon	equ	0xFF2
  6083                           postinc0	equ	0xFEE
  6084                           wreg	equ	0xFE8
  6085                           postdec1	equ	0xFE5
  6086                           fsr1l	equ	0xFE1
  6087                           indf2	equ	0xFDF
  6088                           postinc2	equ	0xFDE
  6089                           postdec2	equ	0xFDD
  6090                           plusw2	equ	0xFDB
  6091                           fsr2h	equ	0xFDA
  6092                           fsr2l	equ	0xFD9
  6093                           status	equ	0xFD8
  6094                           
  6095 ;; *************** function _Delay *****************
  6096 ;; Defined at:
  6097 ;;		line 37 in file "Functions.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;  d_lenth         4   26[COMRAM] long 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  wait            4   31[COMRAM] long 
  6102 ;; Return value:  Size  Location     Type
  6103 ;;		None               void
  6104 ;; Registers used:
  6105 ;;		wreg, status,2, status,0
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6111 ;;      Params:         4       0       0       0       0       0       0
  6112 ;;      Locals:         4       0       0       0       0       0       0
  6113 ;;      Temps:          1       0       0       0       0       0       0
  6114 ;;      Totals:         9       0       0       0       0       0       0
  6115 ;;Total ram usage:        9 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    4
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		_updateComms
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text24
  6126  0037C8                     __ptext24:
  6127                           	opt stack 0
  6128  0037C8                     _Delay:
  6129                           	opt stack 25
  6130                           
  6131                           ;Functions.c: 39: long int wait = 0;
  6132                           
  6133                           ;incstack = 0
  6134  0037C8  0E00               	movlw	0
  6135  0037CA  6E20               	movwf	Delay@wait,c
  6136  0037CC  0E00               	movlw	0
  6137  0037CE  6E21               	movwf	Delay@wait+1,c
  6138  0037D0  0E00               	movlw	0
  6139  0037D2  6E22               	movwf	Delay@wait+2,c
  6140  0037D4  0E00               	movlw	0
  6141  0037D6  6E23               	movwf	Delay@wait+3,c
  6142  0037D8  D00E               	goto	l3627
  6143  0037DA                     l3623:
  6144                           
  6145                           ;Functions.c: 41: {
  6146                           ;Functions.c: 42: _delay((unsigned long)((1)*(8000000/4000.0)));
  6147  0037DA  0E03               	movlw	3
  6148  0037DC  6E1F               	movwf	??_Delay& (0+255),c
  6149  0037DE  0E98               	movlw	152
  6150  0037E0                     u6177:
  6151  0037E0  2EE8               	decfsz	wreg,f,c
  6152  0037E2  D7FE               	goto	u6177
  6153  0037E4  2E1F               	decfsz	??_Delay& (0+255),f,c
  6154  0037E6  D7FC               	goto	u6177
  6155  0037E8  0E01               	movlw	1
  6156  0037EA  2620               	addwf	Delay@wait,f,c
  6157  0037EC  0E00               	movlw	0
  6158  0037EE  2221               	addwfc	Delay@wait+1,f,c
  6159  0037F0  2222               	addwfc	Delay@wait+2,f,c
  6160  0037F2  2223               	addwfc	Delay@wait+3,f,c
  6161  0037F4  D000               	goto	l3627
  6162  0037F6                     l3627:
  6163  0037F6  501B               	movf	Delay@d_lenth,w,c
  6164  0037F8  5C20               	subwf	Delay@wait,w,c
  6165  0037FA  501C               	movf	Delay@d_lenth+1,w,c
  6166  0037FC  5821               	subwfb	Delay@wait+1,w,c
  6167  0037FE  501D               	movf	Delay@d_lenth+2,w,c
  6168  003800  5822               	subwfb	Delay@wait+2,w,c
  6169  003802  5023               	movf	Delay@wait+3,w,c
  6170  003804  0A80               	xorlw	128
  6171  003806  6E1F               	movwf	??_Delay& (0+255),c
  6172  003808  501E               	movf	Delay@d_lenth+3,w,c
  6173  00380A  0A80               	xorlw	128
  6174  00380C  581F               	subwfb	??_Delay& (0+255),w,c
  6175  00380E  A0D8               	btfss	status,0,c
  6176  003810  D7E4               	goto	l3623
  6177  003812  0012               	return		;funcret
  6178  003814                     __end_of_Delay:
  6179                           	opt stack 0
  6180                           tosu	equ	0xFFF
  6181                           tosh	equ	0xFFE
  6182                           tosl	equ	0xFFD
  6183                           pclath	equ	0xFFA
  6184                           tblptru	equ	0xFF8
  6185                           tblptrh	equ	0xFF7
  6186                           tblptrl	equ	0xFF6
  6187                           tablat	equ	0xFF5
  6188                           prodh	equ	0xFF4
  6189                           prodl	equ	0xFF3
  6190                           intcon	equ	0xFF2
  6191                           postinc0	equ	0xFEE
  6192                           wreg	equ	0xFE8
  6193                           postdec1	equ	0xFE5
  6194                           fsr1l	equ	0xFE1
  6195                           indf2	equ	0xFDF
  6196                           postinc2	equ	0xFDE
  6197                           postdec2	equ	0xFDD
  6198                           plusw2	equ	0xFDB
  6199                           fsr2h	equ	0xFDA
  6200                           fsr2l	equ	0xFD9
  6201                           status	equ	0xFD8
  6202                           
  6203 ;; *************** function _Temp_Fault *****************
  6204 ;; Defined at:
  6205 ;;		line 16 in file "Tempeture.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;		None
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  i               2   42[COMRAM] int 
  6210 ;;  fault           1   41[COMRAM] unsigned char 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  1    wreg      unsigned char 
  6213 ;; Registers used:
  6214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6220 ;;      Params:         0       0       0       0       0       0       0
  6221 ;;      Locals:         3       0       0       0       0       0       0
  6222 ;;      Temps:          0       0       0       0       0       0       0
  6223 ;;      Totals:         3       0       0       0       0       0       0
  6224 ;;Total ram usage:        3 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    5
  6227 ;; This function calls:
  6228 ;;		___ftge
  6229 ;;		___wmul
  6230 ;; This function is called by:
  6231 ;;		_main
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           	psect	text25
  6236  003536                     __ptext25:
  6237                           	opt stack 0
  6238  003536                     _Temp_Fault:
  6239                           	opt stack 25
  6240                           
  6241                           ;Tempeture.c: 19: char fault = 0;
  6242                           
  6243                           ;incstack = 0
  6244  003536  0E00               	movlw	0
  6245  003538  6E2A               	movwf	Temp_Fault@fault,c
  6246                           
  6247                           ;Tempeture.c: 20: for(int i = 0;i<9;i++)
  6248  00353A  0E00               	movlw	0
  6249  00353C  6E2C               	movwf	Temp_Fault@i+1,c
  6250  00353E  0E00               	movlw	0
  6251  003540  6E2B               	movwf	Temp_Fault@i,c
  6252  003542                     l5363:
  6253  003542  BE2C               	btfsc	Temp_Fault@i+1,7,c
  6254  003544  D008               	goto	l5367
  6255  003546  502C               	movf	Temp_Fault@i+1,w,c
  6256  003548  E12D               	bnz	l345
  6257  00354A  0E09               	movlw	9
  6258  00354C  5C2B               	subwf	Temp_Fault@i,w,c
  6259  00354E  B0D8               	btfsc	status,0,c
  6260  003550  0012               	return	
  6261  003552  D001               	goto	l5367
  6262  003554  0012               	return	
  6263  003556                     l5367:
  6264                           
  6265                           ;Tempeture.c: 21: {
  6266                           ;Tempeture.c: 22: if (60.5 > Temp_DegF[i])
  6267  003556  C02B  F01B         	movff	Temp_Fault@i,___wmul@multiplier
  6268  00355A  C02C  F01C         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  6269  00355E  0E00               	movlw	0
  6270  003560  6E1E               	movwf	___wmul@multiplicand+1,c
  6271  003562  0E03               	movlw	3
  6272  003564  6E1D               	movwf	___wmul@multiplicand,c
  6273  003566  EC86  F01D         	call	___wmul	;wreg free
  6274  00356A  0EBE               	movlw	low _Temp_DegF
  6275  00356C  241B               	addwf	?___wmul,w,c
  6276  00356E  6ED9               	movwf	fsr2l,c
  6277  003570  0E01               	movlw	high _Temp_DegF
  6278  003572  201C               	addwfc	?___wmul+1,w,c
  6279  003574  6EDA               	movwf	fsr2h,c
  6280  003576  CFDE F021          	movff	postinc2,___ftge@ff1
  6281  00357A  CFDE F022          	movff	postinc2,___ftge@ff1+1
  6282  00357E  CFDD F023          	movff	postdec2,___ftge@ff1+2
  6283  003582  0E00               	movlw	0
  6284  003584  6E24               	movwf	___ftge@ff2,c
  6285  003586  0E72               	movlw	114
  6286  003588  6E25               	movwf	___ftge@ff2+1,c
  6287  00358A  0E42               	movlw	66
  6288  00358C  6E26               	movwf	___ftge@ff2+2,c
  6289  00358E  ECED  F018         	call	___ftge	;wreg free
  6290  003592  B0D8               	btfsc	status,0,c
  6291  003594  D003               	goto	l5371
  6292                           
  6293                           ;Tempeture.c: 23: {
  6294                           ;Tempeture.c: 24: fault = 1;
  6295  003596  0E01               	movlw	1
  6296  003598  6E2A               	movwf	Temp_Fault@fault,c
  6297  00359A  D000               	goto	l5371
  6298  00359C                     l5371:
  6299  00359C  4A2B               	infsnz	Temp_Fault@i,f,c
  6300  00359E  2A2C               	incf	Temp_Fault@i+1,f,c
  6301  0035A0  D7D0               	goto	l5363
  6302  0035A2  0012               	return	
  6303  0035A4                     l345:
  6304  0035A4  0012               	return		;funcret
  6305  0035A6                     __end_of_Temp_Fault:
  6306                           	opt stack 0
  6307                           tosu	equ	0xFFF
  6308                           tosh	equ	0xFFE
  6309                           tosl	equ	0xFFD
  6310                           pclath	equ	0xFFA
  6311                           tblptru	equ	0xFF8
  6312                           tblptrh	equ	0xFF7
  6313                           tblptrl	equ	0xFF6
  6314                           tablat	equ	0xFF5
  6315                           prodh	equ	0xFF4
  6316                           prodl	equ	0xFF3
  6317                           intcon	equ	0xFF2
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           postdec1	equ	0xFE5
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           plusw2	equ	0xFDB
  6326                           fsr2h	equ	0xFDA
  6327                           fsr2l	equ	0xFD9
  6328                           status	equ	0xFD8
  6329                           
  6330 ;; *************** function _Temp_Convert *****************
  6331 ;; Defined at:
  6332 ;;		line 68 in file "Tempeture.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;		None
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  steinhart       3    6[BANK1 ] float 
  6337 ;;  x               2    4[BANK1 ] int 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;		None               void
  6340 ;; Registers used:
  6341 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6347 ;;      Params:         0       0       0       0       0       0       0
  6348 ;;      Locals:         0       0       9       0       0       0       0
  6349 ;;      Temps:          0       0       0       0       0       0       0
  6350 ;;      Totals:         0       0       9       0       0       0       0
  6351 ;;Total ram usage:        9 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    8
  6354 ;; This function calls:
  6355 ;;		_Temp_Filter
  6356 ;;		___awdiv
  6357 ;;		___awtoft
  6358 ;;		___ftadd
  6359 ;;		___ftdiv
  6360 ;;		___ftmul
  6361 ;;		___ftsub
  6362 ;;		___wmul
  6363 ;;		_log
  6364 ;; This function is called by:
  6365 ;;		_main
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           	psect	text26
  6370  00196A                     __ptext26:
  6371                           	opt stack 0
  6372  00196A                     _Temp_Convert:
  6373                           	opt stack 22
  6374                           
  6375                           ;Tempeture.c: 70: int x;
  6376                           ;Tempeture.c: 71: float steinhart;
  6377                           ;Tempeture.c: 72: for(x = 0; x < 10; x++)
  6378                           
  6379                           ;incstack = 0
  6380  00196A  0E00               	movlw	0
  6381  00196C  0101               	movlb	1	; () banked
  6382  00196E  6FE1               	movwf	(Temp_Convert@x+1)& (0+255),b
  6383  001970  0E00               	movlw	0
  6384  001972  6FE0               	movwf	Temp_Convert@x& (0+255),b
  6385                           
  6386                           ; BSR set to: 1
  6387  001974  0101               	movlb	1	; () banked
  6388  001976  BFE1               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6389  001978  D00A               	goto	l5381
  6390  00197A  0101               	movlb	1	; () banked
  6391  00197C  51E1               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6392  00197E  E106               	bnz	u6040
  6393  001980  0E0A               	movlw	10
  6394  001982  0101               	movlb	1	; () banked
  6395  001984  5DE0               	subwf	Temp_Convert@x& (0+255),w,b
  6396  001986  B0D8               	btfsc	status,0,c
  6397  001988  D0F5               	goto	l5405
  6398  00198A  D001               	goto	l5381
  6399  00198C                     u6040:
  6400                           
  6401                           ; BSR set to: 1
  6402  00198C  D0F3               	goto	l5405
  6403  00198E                     l5381:
  6404                           
  6405                           ; BSR set to: 1
  6406                           ;Tempeture.c: 73: {
  6407                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6408  00198E  90D8               	bcf	status,0,c
  6409  001990  0101               	movlb	1	; () banked
  6410  001992  35E0               	rlcf	Temp_Convert@x& (0+255),w,b
  6411  001994  6ED9               	movwf	fsr2l,c
  6412  001996  0101               	movlb	1	; () banked
  6413  001998  35E1               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  6414  00199A  6EDA               	movwf	fsr2h,c
  6415  00199C  0E9C               	movlw	low _Temp_Adc
  6416  00199E  26D9               	addwf	fsr2l,f,c
  6417  0019A0  0E00               	movlw	high _Temp_Adc
  6418  0019A2  22DA               	addwfc	fsr2h,f,c
  6419  0019A4  CFDE F01D          	movff	postinc2,___awdiv@divisor
  6420  0019A8  CFDD F01E          	movff	postdec2,___awdiv@divisor+1
  6421  0019AC  0E03               	movlw	3
  6422  0019AE  6E1C               	movwf	___awdiv@dividend+1,c
  6423  0019B0  681B               	setf	___awdiv@dividend,c
  6424  0019B2  ECA2  F018         	call	___awdiv	;wreg free
  6425  0019B6  0EFF               	movlw	255
  6426  0019B8  241B               	addwf	?___awdiv,w,c
  6427  0019BA  0101               	movlb	1	; () banked
  6428  0019BC  6FDC               	movwf	_Temp_Convert$2201& (0+255),b
  6429  0019BE  0EFF               	movlw	255
  6430  0019C0  201C               	addwfc	?___awdiv+1,w,c
  6431  0019C2  0101               	movlb	1	; () banked
  6432  0019C4  6FDD               	movwf	(_Temp_Convert$2201+1)& (0+255),b
  6433                           
  6434                           ; BSR set to: 1
  6435                           ;Tempeture.c: 73: {
  6436                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6437  0019C6  C1DC  F01D         	movff	_Temp_Convert$2201,___awdiv@divisor
  6438  0019CA  C1DD  F01E         	movff	_Temp_Convert$2201+1,___awdiv@divisor+1
  6439  0019CE  0E27               	movlw	39
  6440  0019D0  6E1C               	movwf	___awdiv@dividend+1,c
  6441  0019D2  0E10               	movlw	16
  6442  0019D4  6E1B               	movwf	___awdiv@dividend,c
  6443  0019D6  ECA2  F018         	call	___awdiv	;wreg free
  6444  0019DA  C01B  F1DE         	movff	?___awdiv,_Temp_Convert$2202
  6445  0019DE  C01C  F1DF         	movff	?___awdiv+1,_Temp_Convert$2202+1
  6446                           
  6447                           ;Tempeture.c: 73: {
  6448                           ;Tempeture.c: 74: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6449  0019E2  0E27               	movlw	39
  6450  0019E4  6E1E               	movwf	___awdiv@divisor+1,c
  6451  0019E6  0E10               	movlw	16
  6452  0019E8  6E1D               	movwf	___awdiv@divisor,c
  6453  0019EA  C1DE  F01B         	movff	_Temp_Convert$2202,___awdiv@dividend
  6454  0019EE  C1DF  F01C         	movff	_Temp_Convert$2202+1,___awdiv@dividend+1
  6455  0019F2  ECA2  F018         	call	___awdiv	;wreg free
  6456  0019F6  C01B  F023         	movff	?___awdiv,___awtoft@c
  6457  0019FA  C01C  F024         	movff	?___awdiv+1,___awtoft@c+1
  6458  0019FE  EC70  F01C         	call	___awtoft	;wreg free
  6459  001A02  C023  F1E2         	movff	?___awtoft,Temp_Convert@steinhart
  6460  001A06  C024  F1E3         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  6461  001A0A  C025  F1E4         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  6462                           
  6463                           ;Tempeture.c: 75: steinhart = log(steinhart);
  6464  001A0E  C1E2  F0F7         	movff	Temp_Convert@steinhart,log@x
  6465  001A12  C1E3  F0F8         	movff	Temp_Convert@steinhart+1,log@x+1
  6466  001A16  C1E4  F0F9         	movff	Temp_Convert@steinhart+2,log@x+2
  6467  001A1A  ECEC  F011         	call	_log	;wreg free
  6468  001A1E  C0F7  F1E2         	movff	?_log,Temp_Convert@steinhart
  6469  001A22  C0F8  F1E3         	movff	?_log+1,Temp_Convert@steinhart+1
  6470  001A26  C0F9  F1E4         	movff	?_log+2,Temp_Convert@steinhart+2
  6471                           
  6472                           ;Tempeture.c: 76: steinhart /= 3950;
  6473  001A2A  C1E2  F0C1         	movff	Temp_Convert@steinhart,___ftdiv@f1
  6474  001A2E  C1E3  F0C2         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  6475  001A32  C1E4  F0C3         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  6476  001A36  0EE0               	movlw	224
  6477  001A38  0100               	movlb	0	; () banked
  6478  001A3A  6FC4               	movwf	___ftdiv@f2& (0+255),b
  6479  001A3C  0E76               	movlw	118
  6480  001A3E  0100               	movlb	0	; () banked
  6481  001A40  6FC5               	movwf	(___ftdiv@f2+1)& (0+255),b
  6482  001A42  0E45               	movlw	69
  6483  001A44  0100               	movlb	0	; () banked
  6484  001A46  6FC6               	movwf	(___ftdiv@f2+2)& (0+255),b
  6485  001A48  EC43  F011         	call	___ftdiv	;wreg free
  6486  001A4C  C0C1  F1E2         	movff	?___ftdiv,Temp_Convert@steinhart
  6487  001A50  C0C2  F1E3         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6488  001A54  C0C3  F1E4         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6489                           
  6490                           ;Tempeture.c: 77: steinhart += 1.0 / (25 + 273.15);
  6491  001A58  C1E2  F0DF         	movff	Temp_Convert@steinhart,___ftadd@f1
  6492  001A5C  C1E3  F0E0         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  6493  001A60  C1E4  F0E1         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  6494  001A64  0ECF               	movlw	207
  6495  001A66  0100               	movlb	0	; () banked
  6496  001A68  6FE2               	movwf	___ftadd@f2& (0+255),b
  6497  001A6A  0E5B               	movlw	91
  6498  001A6C  0100               	movlb	0	; () banked
  6499  001A6E  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6500  001A70  0E3B               	movlw	59
  6501  001A72  0100               	movlb	0	; () banked
  6502  001A74  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6503  001A76  EC76  F00B         	call	___ftadd	;wreg free
  6504  001A7A  C0DF  F1E2         	movff	?___ftadd,Temp_Convert@steinhart
  6505  001A7E  C0E0  F1E3         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6506  001A82  C0E1  F1E4         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6507                           
  6508                           ;Tempeture.c: 78: steinhart = 1.0 / steinhart;
  6509  001A86  0E00               	movlw	0
  6510  001A88  0100               	movlb	0	; () banked
  6511  001A8A  6FC1               	movwf	___ftdiv@f1& (0+255),b
  6512  001A8C  0E80               	movlw	128
  6513  001A8E  0100               	movlb	0	; () banked
  6514  001A90  6FC2               	movwf	(___ftdiv@f1+1)& (0+255),b
  6515  001A92  0E3F               	movlw	63
  6516  001A94  0100               	movlb	0	; () banked
  6517  001A96  6FC3               	movwf	(___ftdiv@f1+2)& (0+255),b
  6518  001A98  C1E2  F0C4         	movff	Temp_Convert@steinhart,___ftdiv@f2
  6519  001A9C  C1E3  F0C5         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  6520  001AA0  C1E4  F0C6         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  6521  001AA4  EC43  F011         	call	___ftdiv	;wreg free
  6522  001AA8  C0C1  F1E2         	movff	?___ftdiv,Temp_Convert@steinhart
  6523  001AAC  C0C2  F1E3         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6524  001AB0  C0C3  F1E4         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6525                           
  6526                           ;Tempeture.c: 79: steinhart -= 273.15;
  6527  001AB4  C1E2  F0EB         	movff	Temp_Convert@steinhart,___ftsub@f1
  6528  001AB8  C1E3  F0EC         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  6529  001ABC  C1E4  F0ED         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  6530  001AC0  0E93               	movlw	147
  6531  001AC2  0100               	movlb	0	; () banked
  6532  001AC4  6FEE               	movwf	___ftsub@f2& (0+255),b
  6533  001AC6  0E88               	movlw	136
  6534  001AC8  0100               	movlb	0	; () banked
  6535  001ACA  6FEF               	movwf	(___ftsub@f2+1)& (0+255),b
  6536  001ACC  0E43               	movlw	67
  6537  001ACE  0100               	movlb	0	; () banked
  6538  001AD0  6FF0               	movwf	(___ftsub@f2+2)& (0+255),b
  6539  001AD2  ECBC  F01B         	call	___ftsub	;wreg free
  6540  001AD6  C0EB  F1E2         	movff	?___ftsub,Temp_Convert@steinhart
  6541  001ADA  C0EC  F1E3         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  6542  001ADE  C0ED  F1E4         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  6543                           
  6544                           ;Tempeture.c: 80: steinhart = (steinhart*1.800) + 32.00;
  6545  001AE2  0E66               	movlw	102
  6546  001AE4  0100               	movlb	0	; () banked
  6547  001AE6  6FD3               	movwf	___ftmul@f2& (0+255),b
  6548  001AE8  0EE6               	movlw	230
  6549  001AEA  0100               	movlb	0	; () banked
  6550  001AEC  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6551  001AEE  0E3F               	movlw	63
  6552  001AF0  0100               	movlb	0	; () banked
  6553  001AF2  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6554  001AF4  C1E2  F0D0         	movff	Temp_Convert@steinhart,___ftmul@f1
  6555  001AF8  C1E3  F0D1         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  6556  001AFC  C1E4  F0D2         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  6557  001B00  EC2F  F00F         	call	___ftmul	;wreg free
  6558  001B04  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6559  001B08  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6560  001B0C  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6561  001B10  0E00               	movlw	0
  6562  001B12  0100               	movlb	0	; () banked
  6563  001B14  6FE2               	movwf	___ftadd@f2& (0+255),b
  6564  001B16  0E00               	movlw	0
  6565  001B18  0100               	movlb	0	; () banked
  6566  001B1A  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6567  001B1C  0E42               	movlw	66
  6568  001B1E  0100               	movlb	0	; () banked
  6569  001B20  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6570  001B22  EC76  F00B         	call	___ftadd	;wreg free
  6571  001B26  C0DF  F1E2         	movff	?___ftadd,Temp_Convert@steinhart
  6572  001B2A  C0E0  F1E3         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6573  001B2E  C0E1  F1E4         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6574                           
  6575                           ;Tempeture.c: 81: TmpTemp_DegF[x] = steinhart;
  6576  001B32  C1E0  F01B         	movff	Temp_Convert@x,___wmul@multiplier
  6577  001B36  C1E1  F01C         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6578  001B3A  0E00               	movlw	0
  6579  001B3C  6E1E               	movwf	___wmul@multiplicand+1,c
  6580  001B3E  0E03               	movlw	3
  6581  001B40  6E1D               	movwf	___wmul@multiplicand,c
  6582  001B42  EC86  F01D         	call	___wmul	;wreg free
  6583  001B46  0E82               	movlw	low _TmpTemp_DegF
  6584  001B48  241B               	addwf	?___wmul,w,c
  6585  001B4A  6ED9               	movwf	fsr2l,c
  6586  001B4C  0E01               	movlw	high _TmpTemp_DegF
  6587  001B4E  201C               	addwfc	?___wmul+1,w,c
  6588  001B50  6EDA               	movwf	fsr2h,c
  6589  001B52  C1E2  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6590  001B56  C1E3  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6591  001B5A  C1E4  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  6592  001B5E  0101               	movlb	1	; () banked
  6593  001B60  4BE0               	infsnz	Temp_Convert@x& (0+255),f,b
  6594  001B62  2BE1               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6595                           
  6596                           ; BSR set to: 1
  6597  001B64  0101               	movlb	1	; () banked
  6598  001B66  BFE1               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  6599  001B68  D712               	goto	l5381
  6600  001B6A  0101               	movlb	1	; () banked
  6601  001B6C  51E1               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6602  001B6E  E102               	bnz	l5405
  6603  001B70  D707               	goto	L1
  6604  001B72  D000               	goto	l5405
  6605  001B74                     l5405:
  6606                           
  6607                           ; BSR set to: 1
  6608                           ;Tempeture.c: 82: }
  6609                           ;Tempeture.c: 83: Temp_Filter();
  6610  001B74  ECBD  F00D         	call	_Temp_Filter	;wreg free
  6611  001B78  0012               	return		;funcret
  6612  001B7A                     __end_of_Temp_Convert:
  6613                           	opt stack 0
  6614                           tosu	equ	0xFFF
  6615                           tosh	equ	0xFFE
  6616                           tosl	equ	0xFFD
  6617                           pclath	equ	0xFFA
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           postdec1	equ	0xFE5
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           plusw2	equ	0xFDB
  6633                           fsr2h	equ	0xFDA
  6634                           fsr2l	equ	0xFD9
  6635                           status	equ	0xFD8
  6636                           
  6637 ;; *************** function _log *****************
  6638 ;; Defined at:
  6639 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  x               3   54[BANK0 ] int 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;  exponent        2   57[BANK0 ] int 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  3   54[BANK0 ] int 
  6646 ;; Registers used:
  6647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6653 ;;      Params:         0       3       0       0       0       0       0
  6654 ;;      Locals:         0       2       0       0       0       0       0
  6655 ;;      Temps:          0       0       0       0       0       0       0
  6656 ;;      Totals:         0       5       0       0       0       0       0
  6657 ;;Total ram usage:        5 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    7
  6660 ;; This function calls:
  6661 ;;		___awtoft
  6662 ;;		___ftadd
  6663 ;;		___ftmul
  6664 ;;		_eval_poly
  6665 ;;		_frexp
  6666 ;; This function is called by:
  6667 ;;		_Temp_Convert
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text27
  6672  0023D8                     __ptext27:
  6673                           	opt stack 0
  6674  0023D8                     _log:
  6675                           	opt stack 22
  6676                           
  6677                           ;incstack = 0
  6678  0023D8  0100               	movlb	0	; () banked
  6679  0023DA  AFF9               	btfss	(log@x+2)& (0+255),7,b
  6680  0023DC  D00F               	goto	l4987
  6681                           
  6682                           ; BSR set to: 0
  6683  0023DE  0E00               	movlw	0
  6684  0023E0  0100               	movlb	0	; () banked
  6685  0023E2  6F95               	movwf	(_errno+1)& (0+255),b
  6686  0023E4  0E21               	movlw	33
  6687  0023E6  6F94               	movwf	_errno& (0+255),b
  6688  0023E8  0E00               	movlw	0
  6689  0023EA  0100               	movlb	0	; () banked
  6690  0023EC  6FF7               	movwf	?_log& (0+255),b
  6691  0023EE  0E00               	movlw	0
  6692  0023F0  0100               	movlb	0	; () banked
  6693  0023F2  6FF8               	movwf	(?_log+1)& (0+255),b
  6694  0023F4  0E00               	movlw	0
  6695  0023F6  0100               	movlb	0	; () banked
  6696  0023F8  6FF9               	movwf	(?_log+2)& (0+255),b
  6697                           
  6698                           ; BSR set to: 0
  6699  0023FA  0012               	return	
  6700  0023FC                     l4987:
  6701                           
  6702                           ; BSR set to: 0
  6703  0023FC  0100               	movlb	0	; () banked
  6704  0023FE  51F7               	movf	log@x& (0+255),w,b
  6705  002400  0100               	movlb	0	; () banked
  6706  002402  11F8               	iorwf	(log@x+1)& (0+255),w,b
  6707  002404  0100               	movlb	0	; () banked
  6708  002406  11F9               	iorwf	(log@x+2)& (0+255),w,b
  6709  002408  A4D8               	btfss	status,2,c
  6710  00240A  D00F               	goto	l4993
  6711                           
  6712                           ; BSR set to: 0
  6713  00240C  0E00               	movlw	0
  6714  00240E  0100               	movlb	0	; () banked
  6715  002410  6F95               	movwf	(_errno+1)& (0+255),b
  6716  002412  0E22               	movlw	34
  6717  002414  6F94               	movwf	_errno& (0+255),b
  6718  002416  0E00               	movlw	0
  6719  002418  0100               	movlb	0	; () banked
  6720  00241A  6FF7               	movwf	?_log& (0+255),b
  6721  00241C  0E00               	movlw	0
  6722  00241E  0100               	movlb	0	; () banked
  6723  002420  6FF8               	movwf	(?_log+1)& (0+255),b
  6724  002422  0E00               	movlw	0
  6725  002424  0100               	movlb	0	; () banked
  6726  002426  6FF9               	movwf	(?_log+2)& (0+255),b
  6727                           
  6728                           ; BSR set to: 0
  6729  002428  0012               	return	
  6730  00242A                     l4993:
  6731                           
  6732                           ; BSR set to: 0
  6733  00242A  0E00               	movlw	0
  6734  00242C  0100               	movlb	0	; () banked
  6735  00242E  6FD3               	movwf	___ftmul@f2& (0+255),b
  6736  002430  0E00               	movlw	0
  6737  002432  0100               	movlb	0	; () banked
  6738  002434  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6739  002436  0E40               	movlw	64
  6740  002438  0100               	movlb	0	; () banked
  6741  00243A  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6742  00243C  0EFA               	movlw	low log@exponent
  6743  00243E  6E1E               	movwf	frexp@eptr,c
  6744  002440  0E00               	movlw	high log@exponent
  6745  002442  6E1F               	movwf	frexp@eptr+1,c
  6746  002444  C0F7  F01B         	movff	log@x,frexp@value
  6747  002448  C0F8  F01C         	movff	log@x+1,frexp@value+1
  6748  00244C  C0F9  F01D         	movff	log@x+2,frexp@value+2
  6749  002450  ECCC  F019         	call	_frexp	;wreg free
  6750  002454  C01B  F0D0         	movff	?_frexp,___ftmul@f1
  6751  002458  C01C  F0D1         	movff	?_frexp+1,___ftmul@f1+1
  6752  00245C  C01D  F0D2         	movff	?_frexp+2,___ftmul@f1+2
  6753  002460  EC2F  F00F         	call	___ftmul	;wreg free
  6754  002464  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6755  002468  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6756  00246C  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6757  002470  0E00               	movlw	0
  6758  002472  0100               	movlb	0	; () banked
  6759  002474  6FE2               	movwf	___ftadd@f2& (0+255),b
  6760  002476  0E80               	movlw	128
  6761  002478  0100               	movlb	0	; () banked
  6762  00247A  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6763  00247C  0EBF               	movlw	191
  6764  00247E  0100               	movlb	0	; () banked
  6765  002480  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6766  002482  EC76  F00B         	call	___ftadd	;wreg free
  6767  002486  C0DF  F0F7         	movff	?___ftadd,log@x
  6768  00248A  C0E0  F0F8         	movff	?___ftadd+1,log@x+1
  6769  00248E  C0E1  F0F9         	movff	?___ftadd+2,log@x+2
  6770  002492  0100               	movlb	0	; () banked
  6771  002494  07FA               	decf	log@exponent& (0+255),f,b
  6772  002496  A0D8               	btfss	status,0,c
  6773  002498  07FB               	decf	(log@exponent+1)& (0+255),f,b
  6774                           
  6775                           ; BSR set to: 0
  6776  00249A  C0F7  F0EB         	movff	log@x,eval_poly@x
  6777  00249E  C0F8  F0EC         	movff	log@x+1,eval_poly@x+1
  6778  0024A2  C0F9  F0ED         	movff	log@x+2,eval_poly@x+2
  6779  0024A6  0E01               	movlw	low log@coeff
  6780  0024A8  0100               	movlb	0	; () banked
  6781  0024AA  6FEE               	movwf	eval_poly@d& (0+255),b
  6782  0024AC  0E06               	movlw	high log@coeff
  6783  0024AE  0100               	movlb	0	; () banked
  6784  0024B0  6FEF               	movwf	(eval_poly@d+1)& (0+255),b
  6785  0024B2  0E00               	movlw	0
  6786  0024B4  0100               	movlb	0	; () banked
  6787  0024B6  6FF1               	movwf	(eval_poly@n+1)& (0+255),b
  6788  0024B8  0E08               	movlw	8
  6789  0024BA  6FF0               	movwf	eval_poly@n& (0+255),b
  6790  0024BC  EC2B  F016         	call	_eval_poly	;wreg free
  6791  0024C0  C0EB  F0F7         	movff	?_eval_poly,log@x
  6792  0024C4  C0EC  F0F8         	movff	?_eval_poly+1,log@x+1
  6793  0024C8  C0ED  F0F9         	movff	?_eval_poly+2,log@x+2
  6794  0024CC  0E72               	movlw	114
  6795  0024CE  0100               	movlb	0	; () banked
  6796  0024D0  6FD3               	movwf	___ftmul@f2& (0+255),b
  6797  0024D2  0E31               	movlw	49
  6798  0024D4  0100               	movlb	0	; () banked
  6799  0024D6  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6800  0024D8  0E3F               	movlw	63
  6801  0024DA  0100               	movlb	0	; () banked
  6802  0024DC  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6803  0024DE  C0FA  F023         	movff	log@exponent,___awtoft@c
  6804  0024E2  C0FB  F024         	movff	log@exponent+1,___awtoft@c+1
  6805  0024E6  EC70  F01C         	call	___awtoft	;wreg free
  6806  0024EA  C023  F0D0         	movff	?___awtoft,___ftmul@f1
  6807  0024EE  C024  F0D1         	movff	?___awtoft+1,___ftmul@f1+1
  6808  0024F2  C025  F0D2         	movff	?___awtoft+2,___ftmul@f1+2
  6809  0024F6  EC2F  F00F         	call	___ftmul	;wreg free
  6810  0024FA  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6811  0024FE  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6812  002502  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6813  002506  C0F7  F0E2         	movff	log@x,___ftadd@f2
  6814  00250A  C0F8  F0E3         	movff	log@x+1,___ftadd@f2+1
  6815  00250E  C0F9  F0E4         	movff	log@x+2,___ftadd@f2+2
  6816  002512  EC76  F00B         	call	___ftadd	;wreg free
  6817  002516  C0DF  F0F7         	movff	?___ftadd,?_log
  6818  00251A  C0E0  F0F8         	movff	?___ftadd+1,?_log+1
  6819  00251E  C0E1  F0F9         	movff	?___ftadd+2,?_log+2
  6820  002522  0012               	return	
  6821  002524  0012               	return		;funcret
  6822  002526                     __end_of_log:
  6823                           	opt stack 0
  6824                           tosu	equ	0xFFF
  6825                           tosh	equ	0xFFE
  6826                           tosl	equ	0xFFD
  6827                           pclath	equ	0xFFA
  6828                           tblptru	equ	0xFF8
  6829                           tblptrh	equ	0xFF7
  6830                           tblptrl	equ	0xFF6
  6831                           tablat	equ	0xFF5
  6832                           prodh	equ	0xFF4
  6833                           prodl	equ	0xFF3
  6834                           intcon	equ	0xFF2
  6835                           postinc0	equ	0xFEE
  6836                           wreg	equ	0xFE8
  6837                           postdec1	equ	0xFE5
  6838                           fsr1l	equ	0xFE1
  6839                           indf2	equ	0xFDF
  6840                           postinc2	equ	0xFDE
  6841                           postdec2	equ	0xFDD
  6842                           plusw2	equ	0xFDB
  6843                           fsr2h	equ	0xFDA
  6844                           fsr2l	equ	0xFD9
  6845                           status	equ	0xFD8
  6846                           
  6847 ;; *************** function _frexp *****************
  6848 ;; Defined at:
  6849 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;  value           3   26[COMRAM] int 
  6852 ;;  eptr            2   29[COMRAM] PTR int 
  6853 ;;		 -> log@exponent(2), 
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  3   26[COMRAM] PTR int 
  6858 ;; Registers used:
  6859 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6865 ;;      Params:         5       0       0       0       0       0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0
  6867 ;;      Temps:          2       0       0       0       0       0       0
  6868 ;;      Totals:         7       0       0       0       0       0       0
  6869 ;;Total ram usage:        7 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    4
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_log
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	text28
  6880  003398                     __ptext28:
  6881                           	opt stack 0
  6882  003398                     _frexp:
  6883                           	opt stack 24
  6884                           
  6885                           ;incstack = 0
  6886  003398  501B               	movf	frexp@value,w,c
  6887  00339A  101C               	iorwf	frexp@value+1,w,c
  6888  00339C  101D               	iorwf	frexp@value+2,w,c
  6889  00339E  A4D8               	btfss	status,2,c
  6890  0033A0  D00F               	goto	l4899
  6891  0033A2  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6892  0033A6  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6893  0033AA  0E00               	movlw	0
  6894  0033AC  6EDE               	movwf	postinc2,c
  6895  0033AE  0E00               	movlw	0
  6896  0033B0  6EDD               	movwf	postdec2,c
  6897  0033B2  0E00               	movlw	0
  6898  0033B4  6E1B               	movwf	?_frexp,c
  6899  0033B6  0E00               	movlw	0
  6900  0033B8  6E1C               	movwf	?_frexp+1,c
  6901  0033BA  0E00               	movlw	0
  6902  0033BC  6E1D               	movwf	?_frexp+2,c
  6903  0033BE  0012               	return	
  6904  0033C0                     l4899:
  6905  0033C0  501D               	movf	frexp@value+2,w,c
  6906  0033C2  0B7F               	andlw	127
  6907  0033C4  6E20               	movwf	??_frexp& (0+255),c
  6908  0033C6  6A21               	clrf	(??_frexp+1)& (0+255),c
  6909  0033C8  90D8               	bcf	status,0,c
  6910  0033CA  3620               	rlcf	??_frexp,f,c
  6911  0033CC  3621               	rlcf	??_frexp+1,f,c
  6912  0033CE  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6913  0033D2  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6914  0033D6  C020  FFDE         	movff	??_frexp,postinc2
  6915  0033DA  C021  FFDD         	movff	??_frexp+1,postdec2
  6916  0033DE  AE1C               	btfss	frexp@value+1,7,c
  6917  0033E0  D003               	goto	u5050
  6918  0033E2  6A20               	clrf	??_frexp& (0+255),c
  6919  0033E4  2A20               	incf	??_frexp& (0+255),f,c
  6920  0033E6  D001               	goto	u5058
  6921  0033E8                     u5050:
  6922  0033E8  6A20               	clrf	??_frexp& (0+255),c
  6923  0033EA                     u5058:
  6924  0033EA  5020               	movf	??_frexp,w,c
  6925  0033EC  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6926  0033F0  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6927  0033F4  12DE               	iorwf	postinc2,f,c
  6928  0033F6  0E00               	movlw	0
  6929  0033F8  12DD               	iorwf	postdec2,f,c
  6930  0033FA  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6931  0033FE  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6932  003402  0E82               	movlw	130
  6933  003404  26DE               	addwf	postinc2,f,c
  6934  003406  0EFF               	movlw	255
  6935  003408  22DD               	addwfc	postdec2,f,c
  6936  00340A  801D               	bsf	frexp@value+2,0,c
  6937  00340C  821D               	bsf	frexp@value+2,1,c
  6938  00340E  841D               	bsf	frexp@value+2,2,c
  6939  003410  861D               	bsf	frexp@value+2,3,c
  6940  003412  881D               	bsf	frexp@value+2,4,c
  6941  003414  8A1D               	bsf	frexp@value+2,5,c
  6942  003416  9C1D               	bcf	frexp@value+2,6,c
  6943  003418  9E1C               	bcf	frexp@value+1,7,c
  6944  00341A  C01B  F01B         	movff	frexp@value,?_frexp
  6945  00341E  C01C  F01C         	movff	frexp@value+1,?_frexp+1
  6946  003422  C01D  F01D         	movff	frexp@value+2,?_frexp+2
  6947  003426  0012               	return	
  6948  003428  0012               	return		;funcret
  6949  00342A                     __end_of_frexp:
  6950                           	opt stack 0
  6951                           tosu	equ	0xFFF
  6952                           tosh	equ	0xFFE
  6953                           tosl	equ	0xFFD
  6954                           pclath	equ	0xFFA
  6955                           tblptru	equ	0xFF8
  6956                           tblptrh	equ	0xFF7
  6957                           tblptrl	equ	0xFF6
  6958                           tablat	equ	0xFF5
  6959                           prodh	equ	0xFF4
  6960                           prodl	equ	0xFF3
  6961                           intcon	equ	0xFF2
  6962                           postinc0	equ	0xFEE
  6963                           wreg	equ	0xFE8
  6964                           postdec1	equ	0xFE5
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           plusw2	equ	0xFDB
  6970                           fsr2h	equ	0xFDA
  6971                           fsr2l	equ	0xFD9
  6972                           status	equ	0xFD8
  6973                           
  6974 ;; *************** function _eval_poly *****************
  6975 ;; Defined at:
  6976 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  x               3   42[BANK0 ] PTR int 
  6979 ;;  d               2   45[BANK0 ] PTR const 
  6980 ;;		 -> log@coeff(27), 
  6981 ;;  n               2   47[BANK0 ] int 
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;  res             3   51[BANK0 ] int 
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  3   42[BANK0 ] int 
  6986 ;; Registers used:
  6987 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6993 ;;      Params:         0       7       0       0       0       0       0
  6994 ;;      Locals:         0       3       0       0       0       0       0
  6995 ;;      Temps:          0       2       0       0       0       0       0
  6996 ;;      Totals:         0      12       0       0       0       0       0
  6997 ;;Total ram usage:       12 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    6
  7000 ;; This function calls:
  7001 ;;		___ftadd
  7002 ;;		___ftmul
  7003 ;;		___wmul
  7004 ;; This function is called by:
  7005 ;;		_log
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text29
  7010  002C56                     __ptext29:
  7011                           	opt stack 0
  7012  002C56                     _eval_poly:
  7013                           	opt stack 22
  7014                           
  7015                           ;incstack = 0
  7016  002C56  C0F0  F01B         	movff	eval_poly@n,___wmul@multiplier
  7017  002C5A  C0F1  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  7018  002C5E  0E00               	movlw	0
  7019  002C60  6E1E               	movwf	___wmul@multiplicand+1,c
  7020  002C62  0E03               	movlw	3
  7021  002C64  6E1D               	movwf	___wmul@multiplicand,c
  7022  002C66  EC86  F01D         	call	___wmul	;wreg free
  7023  002C6A  C0EE  F0F2         	movff	eval_poly@d,??_eval_poly
  7024  002C6E  C0EF  F0F3         	movff	eval_poly@d+1,??_eval_poly+1
  7025  002C72  501B               	movf	?___wmul,w,c
  7026  002C74  0100               	movlb	0	; () banked
  7027  002C76  27F2               	addwf	??_eval_poly& (0+255),f,b
  7028  002C78  501C               	movf	?___wmul+1,w,c
  7029  002C7A  0100               	movlb	0	; () banked
  7030  002C7C  23F3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7031  002C7E  C0F2  FFF6         	movff	??_eval_poly,tblptrl
  7032  002C82  C0F3  FFF7         	movff	??_eval_poly+1,tblptrh
  7033  002C86                     	if	0	;tblptru may be non-zero
  7034  002C86                     	endif
  7035  002C86                     	if	0	;tblptru may be non-zero
  7036  002C86                     	endif
  7037  002C86  0009               	tblrd		*+
  7038  002C88  CFF5 F0F4          	movff	tablat,eval_poly@res
  7039  002C8C  0009               	tblrd		*+
  7040  002C8E  CFF5 F0F5          	movff	tablat,eval_poly@res+1
  7041  002C92  000A               	tblrd		*-
  7042  002C94  CFF5 F0F6          	movff	tablat,eval_poly@res+2
  7043  002C98  D042               	goto	l4915
  7044  002C9A                     l4913:
  7045                           
  7046                           ; BSR set to: 0
  7047  002C9A  C0F4  F0D3         	movff	eval_poly@res,___ftmul@f2
  7048  002C9E  C0F5  F0D4         	movff	eval_poly@res+1,___ftmul@f2+1
  7049  002CA2  C0F6  F0D5         	movff	eval_poly@res+2,___ftmul@f2+2
  7050  002CA6  C0EB  F0D0         	movff	eval_poly@x,___ftmul@f1
  7051  002CAA  C0EC  F0D1         	movff	eval_poly@x+1,___ftmul@f1+1
  7052  002CAE  C0ED  F0D2         	movff	eval_poly@x+2,___ftmul@f1+2
  7053  002CB2  EC2F  F00F         	call	___ftmul	;wreg free
  7054  002CB6  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  7055  002CBA  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  7056  002CBE  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  7057  002CC2  0E00               	movlw	0
  7058  002CC4  6E1E               	movwf	___wmul@multiplicand+1,c
  7059  002CC6  0E03               	movlw	3
  7060  002CC8  6E1D               	movwf	___wmul@multiplicand,c
  7061  002CCA  0100               	movlb	0	; () banked
  7062  002CCC  07F0               	decf	eval_poly@n& (0+255),f,b
  7063  002CCE  A0D8               	btfss	status,0,c
  7064  002CD0  07F1               	decf	(eval_poly@n+1)& (0+255),f,b
  7065  002CD2  C0F0  F01B         	movff	eval_poly@n,___wmul@multiplier
  7066  002CD6  C0F1  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  7067  002CDA  EC86  F01D         	call	___wmul	;wreg free
  7068  002CDE  C0EE  F0F2         	movff	eval_poly@d,??_eval_poly
  7069  002CE2  C0EF  F0F3         	movff	eval_poly@d+1,??_eval_poly+1
  7070  002CE6  501B               	movf	?___wmul,w,c
  7071  002CE8  0100               	movlb	0	; () banked
  7072  002CEA  27F2               	addwf	??_eval_poly& (0+255),f,b
  7073  002CEC  501C               	movf	?___wmul+1,w,c
  7074  002CEE  0100               	movlb	0	; () banked
  7075  002CF0  23F3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7076  002CF2  C0F2  FFF6         	movff	??_eval_poly,tblptrl
  7077  002CF6  C0F3  FFF7         	movff	??_eval_poly+1,tblptrh
  7078  002CFA                     	if	0	;tblptru may be non-zero
  7079  002CFA                     	endif
  7080  002CFA                     	if	0	;tblptru may be non-zero
  7081  002CFA                     	endif
  7082  002CFA  0009               	tblrd		*+
  7083  002CFC  CFF5 F0E2          	movff	tablat,___ftadd@f2
  7084  002D00  0009               	tblrd		*+
  7085  002D02  CFF5 F0E3          	movff	tablat,___ftadd@f2+1
  7086  002D06  000A               	tblrd		*-
  7087  002D08  CFF5 F0E4          	movff	tablat,___ftadd@f2+2
  7088  002D0C  EC76  F00B         	call	___ftadd	;wreg free
  7089  002D10  C0DF  F0F4         	movff	?___ftadd,eval_poly@res
  7090  002D14  C0E0  F0F5         	movff	?___ftadd+1,eval_poly@res+1
  7091  002D18  C0E1  F0F6         	movff	?___ftadd+2,eval_poly@res+2
  7092  002D1C  D000               	goto	l4915
  7093  002D1E                     l4915:
  7094  002D1E  0100               	movlb	0	; () banked
  7095  002D20  51F0               	movf	eval_poly@n& (0+255),w,b
  7096  002D22  0100               	movlb	0	; () banked
  7097  002D24  11F1               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7098  002D26  A4D8               	btfss	status,2,c
  7099  002D28  D7B8               	goto	l4913
  7100                           
  7101                           ; BSR set to: 0
  7102  002D2A  C0F4  F0EB         	movff	eval_poly@res,?_eval_poly
  7103  002D2E  C0F5  F0EC         	movff	eval_poly@res+1,?_eval_poly+1
  7104  002D32  C0F6  F0ED         	movff	eval_poly@res+2,?_eval_poly+2
  7105                           
  7106                           ; BSR set to: 0
  7107  002D36  0012               	return		;funcret
  7108  002D38                     __end_of_eval_poly:
  7109                           	opt stack 0
  7110                           tosu	equ	0xFFF
  7111                           tosh	equ	0xFFE
  7112                           tosl	equ	0xFFD
  7113                           pclath	equ	0xFFA
  7114                           tblptru	equ	0xFF8
  7115                           tblptrh	equ	0xFF7
  7116                           tblptrl	equ	0xFF6
  7117                           tablat	equ	0xFF5
  7118                           prodh	equ	0xFF4
  7119                           prodl	equ	0xFF3
  7120                           intcon	equ	0xFF2
  7121                           postinc0	equ	0xFEE
  7122                           wreg	equ	0xFE8
  7123                           postdec1	equ	0xFE5
  7124                           fsr1l	equ	0xFE1
  7125                           indf2	equ	0xFDF
  7126                           postinc2	equ	0xFDE
  7127                           postdec2	equ	0xFDD
  7128                           plusw2	equ	0xFDB
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function ___awtoft *****************
  7134 ;; Defined at:
  7135 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  c               2   34[COMRAM] int 
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;  sign            1   37[COMRAM] unsigned char 
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  3   34[COMRAM] float 
  7142 ;; Registers used:
  7143 ;;		wreg, status,2, status,0, cstack
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7149 ;;      Params:         3       0       0       0       0       0       0
  7150 ;;      Locals:         1       0       0       0       0       0       0
  7151 ;;      Temps:          0       0       0       0       0       0       0
  7152 ;;      Totals:         4       0       0       0       0       0       0
  7153 ;;Total ram usage:        4 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; Hardware stack levels required when called:    5
  7156 ;; This function calls:
  7157 ;;		___ftpack
  7158 ;; This function is called by:
  7159 ;;		_Temp_Convert
  7160 ;;		_log
  7161 ;; This function uses a non-reentrant model
  7162 ;;
  7163                           
  7164                           	psect	text30
  7165  0038E0                     __ptext30:
  7166                           	opt stack 0
  7167  0038E0                     ___awtoft:
  7168                           	opt stack 23
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;incstack = 0
  7172  0038E0  0E00               	movlw	0
  7173  0038E2  6E26               	movwf	___awtoft@sign,c
  7174  0038E4  AE24               	btfss	___awtoft@c+1,7,c
  7175  0038E6  D007               	goto	l4887
  7176  0038E8  6C23               	negf	___awtoft@c,c
  7177  0038EA  1E24               	comf	___awtoft@c+1,f,c
  7178  0038EC  B0D8               	btfsc	status,0,c
  7179  0038EE  2A24               	incf	___awtoft@c+1,f,c
  7180  0038F0  0E01               	movlw	1
  7181  0038F2  6E26               	movwf	___awtoft@sign,c
  7182  0038F4  D000               	goto	l4887
  7183  0038F6                     l4887:
  7184  0038F6  C023  F01B         	movff	___awtoft@c,___ftpack@arg
  7185  0038FA  C024  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
  7186  0038FE  6A1D               	clrf	___ftpack@arg+2,c
  7187  003900  0E8E               	movlw	142
  7188  003902  6E1E               	movwf	___ftpack@exp,c
  7189  003904  C026  F01F         	movff	___awtoft@sign,___ftpack@sign
  7190  003908  ECE7  F017         	call	___ftpack	;wreg free
  7191  00390C  C01B  F023         	movff	?___ftpack,?___awtoft
  7192  003910  C01C  F024         	movff	?___ftpack+1,?___awtoft+1
  7193  003914  C01D  F025         	movff	?___ftpack+2,?___awtoft+2
  7194  003918  0012               	return	
  7195  00391A  0012               	return		;funcret
  7196  00391C                     __end_of___awtoft:
  7197                           	opt stack 0
  7198                           tosu	equ	0xFFF
  7199                           tosh	equ	0xFFE
  7200                           tosl	equ	0xFFD
  7201                           pclath	equ	0xFFA
  7202                           tblptru	equ	0xFF8
  7203                           tblptrh	equ	0xFF7
  7204                           tblptrl	equ	0xFF6
  7205                           tablat	equ	0xFF5
  7206                           prodh	equ	0xFF4
  7207                           prodl	equ	0xFF3
  7208                           intcon	equ	0xFF2
  7209                           postinc0	equ	0xFEE
  7210                           wreg	equ	0xFE8
  7211                           postdec1	equ	0xFE5
  7212                           fsr1l	equ	0xFE1
  7213                           indf2	equ	0xFDF
  7214                           postinc2	equ	0xFDE
  7215                           postdec2	equ	0xFDD
  7216                           plusw2	equ	0xFDB
  7217                           fsr2h	equ	0xFDA
  7218                           fsr2l	equ	0xFD9
  7219                           status	equ	0xFD8
  7220                           
  7221 ;; *************** function ___ftsub *****************
  7222 ;; Defined at:
  7223 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  f1              3   42[BANK0 ] float 
  7226 ;;  f2              3   45[BANK0 ] float 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;		None
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  3   42[BANK0 ] float 
  7231 ;; Registers used:
  7232 ;;		wreg, status,2, status,0, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7238 ;;      Params:         0       6       0       0       0       0       0
  7239 ;;      Locals:         0       0       0       0       0       0       0
  7240 ;;      Temps:          0       0       0       0       0       0       0
  7241 ;;      Totals:         0       6       0       0       0       0       0
  7242 ;;Total ram usage:        6 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    6
  7245 ;; This function calls:
  7246 ;;		___ftadd
  7247 ;; This function is called by:
  7248 ;;		_Temp_Convert
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           	psect	text31
  7253  003778                     __ptext31:
  7254                           	opt stack 0
  7255  003778                     ___ftsub:
  7256                           	opt stack 23
  7257                           
  7258                           ;incstack = 0
  7259  003778  0100               	movlb	0	; () banked
  7260  00377A  51EE               	movf	___ftsub@f2& (0+255),w,b
  7261  00377C  0100               	movlb	0	; () banked
  7262  00377E  11EF               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7263  003780  0100               	movlb	0	; () banked
  7264  003782  11F0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7265  003784  B4D8               	btfsc	status,2,c
  7266  003786  D00A               	goto	l5297
  7267                           
  7268                           ; BSR set to: 0
  7269  003788  0E00               	movlw	0
  7270  00378A  0100               	movlb	0	; () banked
  7271  00378C  1BEE               	xorwf	___ftsub@f2& (0+255),f,b
  7272  00378E  0E00               	movlw	0
  7273  003790  0100               	movlb	0	; () banked
  7274  003792  1BEF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7275  003794  0E80               	movlw	128
  7276  003796  0100               	movlb	0	; () banked
  7277  003798  1BF0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7278  00379A  D000               	goto	l5297
  7279  00379C                     l5297:
  7280                           
  7281                           ; BSR set to: 0
  7282  00379C  C0EB  F0DF         	movff	___ftsub@f1,___ftadd@f1
  7283  0037A0  C0EC  F0E0         	movff	___ftsub@f1+1,___ftadd@f1+1
  7284  0037A4  C0ED  F0E1         	movff	___ftsub@f1+2,___ftadd@f1+2
  7285  0037A8  C0EE  F0E2         	movff	___ftsub@f2,___ftadd@f2
  7286  0037AC  C0EF  F0E3         	movff	___ftsub@f2+1,___ftadd@f2+1
  7287  0037B0  C0F0  F0E4         	movff	___ftsub@f2+2,___ftadd@f2+2
  7288  0037B4  EC76  F00B         	call	___ftadd	;wreg free
  7289  0037B8  C0DF  F0EB         	movff	?___ftadd,?___ftsub
  7290  0037BC  C0E0  F0EC         	movff	?___ftadd+1,?___ftsub+1
  7291  0037C0  C0E1  F0ED         	movff	?___ftadd+2,?___ftsub+2
  7292  0037C4  0012               	return	
  7293  0037C6  0012               	return		;funcret
  7294  0037C8                     __end_of___ftsub:
  7295                           	opt stack 0
  7296                           tosu	equ	0xFFF
  7297                           tosh	equ	0xFFE
  7298                           tosl	equ	0xFFD
  7299                           pclath	equ	0xFFA
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           prodh	equ	0xFF4
  7305                           prodl	equ	0xFF3
  7306                           intcon	equ	0xFF2
  7307                           postinc0	equ	0xFEE
  7308                           wreg	equ	0xFE8
  7309                           postdec1	equ	0xFE5
  7310                           fsr1l	equ	0xFE1
  7311                           indf2	equ	0xFDF
  7312                           postinc2	equ	0xFDE
  7313                           postdec2	equ	0xFDD
  7314                           plusw2	equ	0xFDB
  7315                           fsr2h	equ	0xFDA
  7316                           fsr2l	equ	0xFD9
  7317                           status	equ	0xFD8
  7318                           
  7319 ;; *************** function _Temp_Filter *****************
  7320 ;; Defined at:
  7321 ;;		line 49 in file "Tempeture.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;		None
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;  x               2   42[BANK0 ] int 
  7326 ;; Return value:  Size  Location     Type
  7327 ;;		None               void
  7328 ;; Registers used:
  7329 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7330 ;; Tracked objects:
  7331 ;;		On entry : 0/0
  7332 ;;		On exit  : 0/0
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7335 ;;      Params:         0       0       0       0       0       0       0
  7336 ;;      Locals:         0       2       0       0       0       0       0
  7337 ;;      Temps:          0       0       0       0       0       0       0
  7338 ;;      Totals:         0       2       0       0       0       0       0
  7339 ;;Total ram usage:        2 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; Hardware stack levels required when called:    6
  7342 ;; This function calls:
  7343 ;;		___ftadd
  7344 ;;		___ftmul
  7345 ;;		___wmul
  7346 ;; This function is called by:
  7347 ;;		_Temp_Convert
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           	psect	text32
  7352  001B7A                     __ptext32:
  7353                           	opt stack 0
  7354  001B7A                     _Temp_Filter:
  7355                           	opt stack 23
  7356                           
  7357                           ;Tempeture.c: 52: int x;
  7358                           ;Tempeture.c: 53: for(x = 0; x < 10; x++)
  7359                           
  7360                           ;incstack = 0
  7361  001B7A  0E00               	movlw	0
  7362  001B7C  0100               	movlb	0	; () banked
  7363  001B7E  6FEC               	movwf	(Temp_Filter@x+1)& (0+255),b
  7364  001B80  0E00               	movlw	0
  7365  001B82  6FEB               	movwf	Temp_Filter@x& (0+255),b
  7366  001B84                     l4959:
  7367                           
  7368                           ; BSR set to: 0
  7369  001B84  0100               	movlb	0	; () banked
  7370  001B86  BFEC               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  7371  001B88  D00A               	goto	l4963
  7372  001B8A  0100               	movlb	0	; () banked
  7373  001B8C  51EC               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7374  001B8E  E172               	bnz	l4969
  7375  001B90  0E0A               	movlw	10
  7376  001B92  0100               	movlb	0	; () banked
  7377  001B94  5DEB               	subwf	Temp_Filter@x& (0+255),w,b
  7378  001B96  B0D8               	btfsc	status,0,c
  7379  001B98  D06D               	goto	l4969
  7380  001B9A  D001               	goto	l4963
  7381                           
  7382                           ; BSR set to: 0
  7383  001B9C  D06B               	goto	l4969
  7384  001B9E                     l4963:
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;Tempeture.c: 54: {
  7388                           ;Tempeture.c: 55: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  7389  001B9E  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7390  001BA2  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7391  001BA6  0E00               	movlw	0
  7392  001BA8  6E1E               	movwf	___wmul@multiplicand+1,c
  7393  001BAA  0E03               	movlw	3
  7394  001BAC  6E1D               	movwf	___wmul@multiplicand,c
  7395  001BAE  EC86  F01D         	call	___wmul	;wreg free
  7396  001BB2  0EBE               	movlw	low _Temp_DegF
  7397  001BB4  241B               	addwf	?___wmul,w,c
  7398  001BB6  6ED9               	movwf	fsr2l,c
  7399  001BB8  0E01               	movlw	high _Temp_DegF
  7400  001BBA  201C               	addwfc	?___wmul+1,w,c
  7401  001BBC  6EDA               	movwf	fsr2h,c
  7402  001BBE  0E48               	movlw	72
  7403  001BC0  0100               	movlb	0	; () banked
  7404  001BC2  6FD3               	movwf	___ftmul@f2& (0+255),b
  7405  001BC4  0E61               	movlw	97
  7406  001BC6  0100               	movlb	0	; () banked
  7407  001BC8  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  7408  001BCA  0E3F               	movlw	63
  7409  001BCC  0100               	movlb	0	; () banked
  7410  001BCE  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  7411  001BD0  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7412  001BD4  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7413  001BD8  0E00               	movlw	0
  7414  001BDA  6E1E               	movwf	___wmul@multiplicand+1,c
  7415  001BDC  0E03               	movlw	3
  7416  001BDE  6E1D               	movwf	___wmul@multiplicand,c
  7417  001BE0  EC86  F01D         	call	___wmul	;wreg free
  7418  001BE4  0E82               	movlw	low _TmpTemp_DegF
  7419  001BE6  241B               	addwf	?___wmul,w,c
  7420  001BE8  6EE1               	movwf	fsr1l,c
  7421  001BEA  0E01               	movlw	high _TmpTemp_DegF
  7422  001BEC  201C               	addwfc	?___wmul+1,w,c
  7423  001BEE  6EE2               	movwf	fsr1h,c
  7424  001BF0  CFE6 F0D0          	movff	postinc1,___ftmul@f1
  7425  001BF4  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
  7426  001BF8  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
  7427  001BFC  EC2F  F00F         	call	___ftmul	;wreg free
  7428  001C00  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  7429  001C04  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  7430  001C08  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  7431  001C0C  0EC3               	movlw	195
  7432  001C0E  0100               	movlb	0	; () banked
  7433  001C10  6FD3               	movwf	___ftmul@f2& (0+255),b
  7434  001C12  0EF5               	movlw	245
  7435  001C14  0100               	movlb	0	; () banked
  7436  001C16  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  7437  001C18  0E3D               	movlw	61
  7438  001C1A  0100               	movlb	0	; () banked
  7439  001C1C  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  7440  001C1E  0E00               	movlw	0
  7441  001C20  6E1E               	movwf	___wmul@multiplicand+1,c
  7442  001C22  0E03               	movlw	3
  7443  001C24  6E1D               	movwf	___wmul@multiplicand,c
  7444  001C26  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7445  001C2A  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7446  001C2E  EC86  F01D         	call	___wmul	;wreg free
  7447  001C32  0E1E               	movlw	low _PrevTemp_DegF
  7448  001C34  241B               	addwf	?___wmul,w,c
  7449  001C36  6EE1               	movwf	fsr1l,c
  7450  001C38  0E01               	movlw	high _PrevTemp_DegF
  7451  001C3A  201C               	addwfc	?___wmul+1,w,c
  7452  001C3C  6EE2               	movwf	fsr1h,c
  7453  001C3E  CFE6 F0D0          	movff	postinc1,___ftmul@f1
  7454  001C42  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
  7455  001C46  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
  7456  001C4A  EC2F  F00F         	call	___ftmul	;wreg free
  7457  001C4E  C0D0  F0E2         	movff	?___ftmul,___ftadd@f2
  7458  001C52  C0D1  F0E3         	movff	?___ftmul+1,___ftadd@f2+1
  7459  001C56  C0D2  F0E4         	movff	?___ftmul+2,___ftadd@f2+2
  7460  001C5A  EC76  F00B         	call	___ftadd	;wreg free
  7461  001C5E  C0DF  FFDE         	movff	?___ftadd,postinc2
  7462  001C62  C0E0  FFDE         	movff	?___ftadd+1,postinc2
  7463  001C66  C0E1  FFDE         	movff	?___ftadd+2,postinc2
  7464  001C6A  0100               	movlb	0	; () banked
  7465  001C6C  4BEB               	infsnz	Temp_Filter@x& (0+255),f,b
  7466  001C6E  2BEC               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7467  001C70  D789               	goto	l4959
  7468                           
  7469                           ; BSR set to: 0
  7470  001C72  D000               	goto	l4969
  7471  001C74                     l4969:
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;Tempeture.c: 56: }
  7475                           ;Tempeture.c: 57: for(x = 0; x < 10; x++)
  7476  001C74  0E00               	movlw	0
  7477  001C76  0100               	movlb	0	; () banked
  7478  001C78  6FEC               	movwf	(Temp_Filter@x+1)& (0+255),b
  7479  001C7A  0E00               	movlw	0
  7480  001C7C  6FEB               	movwf	Temp_Filter@x& (0+255),b
  7481  001C7E                     l4971:
  7482                           
  7483                           ; BSR set to: 0
  7484  001C7E  0100               	movlb	0	; () banked
  7485  001C80  BFEC               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  7486  001C82  D00A               	goto	l4975
  7487  001C84  0100               	movlb	0	; () banked
  7488  001C86  51EC               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7489  001C88  E132               	bnz	l355
  7490  001C8A  0E0A               	movlw	10
  7491  001C8C  0100               	movlb	0	; () banked
  7492  001C8E  5DEB               	subwf	Temp_Filter@x& (0+255),w,b
  7493  001C90  B0D8               	btfsc	status,0,c
  7494  001C92  0012               	return	
  7495  001C94  D001               	goto	l4975
  7496                           
  7497                           ; BSR set to: 0
  7498  001C96  0012               	return	
  7499  001C98                     l4975:
  7500                           
  7501                           ; BSR set to: 0
  7502                           ;Tempeture.c: 58: {
  7503                           ;Tempeture.c: 59: PrevTemp_DegF[x] = Temp_DegF[x];
  7504  001C98  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7505  001C9C  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7506  001CA0  0E00               	movlw	0
  7507  001CA2  6E1E               	movwf	___wmul@multiplicand+1,c
  7508  001CA4  0E03               	movlw	3
  7509  001CA6  6E1D               	movwf	___wmul@multiplicand,c
  7510  001CA8  EC86  F01D         	call	___wmul	;wreg free
  7511  001CAC  0EBE               	movlw	low _Temp_DegF
  7512  001CAE  241B               	addwf	?___wmul,w,c
  7513  001CB0  6ED9               	movwf	fsr2l,c
  7514  001CB2  0E01               	movlw	high _Temp_DegF
  7515  001CB4  201C               	addwfc	?___wmul+1,w,c
  7516  001CB6  6EDA               	movwf	fsr2h,c
  7517  001CB8  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7518  001CBC  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7519  001CC0  0E00               	movlw	0
  7520  001CC2  6E1E               	movwf	___wmul@multiplicand+1,c
  7521  001CC4  0E03               	movlw	3
  7522  001CC6  6E1D               	movwf	___wmul@multiplicand,c
  7523  001CC8  EC86  F01D         	call	___wmul	;wreg free
  7524  001CCC  0E1E               	movlw	low _PrevTemp_DegF
  7525  001CCE  241B               	addwf	?___wmul,w,c
  7526  001CD0  6EE1               	movwf	fsr1l,c
  7527  001CD2  0E01               	movlw	high _PrevTemp_DegF
  7528  001CD4  201C               	addwfc	?___wmul+1,w,c
  7529  001CD6  6EE2               	movwf	fsr1h,c
  7530  001CD8  CFDE FFE6          	movff	postinc2,postinc1
  7531  001CDC  CFDE FFE6          	movff	postinc2,postinc1
  7532  001CE0  CFDE FFE6          	movff	postinc2,postinc1
  7533  001CE4  0100               	movlb	0	; () banked
  7534  001CE6  4BEB               	infsnz	Temp_Filter@x& (0+255),f,b
  7535  001CE8  2BEC               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7536  001CEA  D7C9               	goto	l4971
  7537                           
  7538                           ; BSR set to: 0
  7539  001CEC  0012               	return	
  7540  001CEE                     l355:
  7541                           
  7542                           ; BSR set to: 0
  7543  001CEE  0012               	return		;funcret
  7544  001CF0                     __end_of_Temp_Filter:
  7545                           	opt stack 0
  7546                           tosu	equ	0xFFF
  7547                           tosh	equ	0xFFE
  7548                           tosl	equ	0xFFD
  7549                           pclath	equ	0xFFA
  7550                           tblptru	equ	0xFF8
  7551                           tblptrh	equ	0xFF7
  7552                           tblptrl	equ	0xFF6
  7553                           tablat	equ	0xFF5
  7554                           prodh	equ	0xFF4
  7555                           prodl	equ	0xFF3
  7556                           intcon	equ	0xFF2
  7557                           postinc0	equ	0xFEE
  7558                           wreg	equ	0xFE8
  7559                           postinc1	equ	0xFE6
  7560                           postdec1	equ	0xFE5
  7561                           fsr1h	equ	0xFE2
  7562                           fsr1l	equ	0xFE1
  7563                           indf2	equ	0xFDF
  7564                           postinc2	equ	0xFDE
  7565                           postdec2	equ	0xFDD
  7566                           plusw2	equ	0xFDB
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _SYSTEM_Initialize *****************
  7572 ;; Defined at:
  7573 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;		None
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;		None               void
  7580 ;; Registers used:
  7581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7587 ;;      Params:         0       0       0       0       0       0       0
  7588 ;;      Locals:         0       0       0       0       0       0       0
  7589 ;;      Temps:          0       0       0       0       0       0       0
  7590 ;;      Totals:         0       0       0       0       0       0       0
  7591 ;;Total ram usage:        0 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    7
  7594 ;; This function calls:
  7595 ;;		_ADC_Initialize
  7596 ;;		_EUSART1_Initialize
  7597 ;;		_INTERRUPT_Initialize
  7598 ;;		_OSCILLATOR_Initialize
  7599 ;;		_PIN_MANAGER_Initialize
  7600 ;;		_TMR1_Initialize
  7601 ;;		_begin
  7602 ;; This function is called by:
  7603 ;;		_main
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text33
  7608  0035A6                     __ptext33:
  7609                           	opt stack 0
  7610  0035A6                     _SYSTEM_Initialize:
  7611                           	opt stack 23
  7612                           
  7613                           ;mcc.c: 113: OSCILLATOR_Initialize();
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;incstack = 0
  7617  0035A6  EC5B  F01E         	call	_OSCILLATOR_Initialize	;wreg free
  7618                           
  7619                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  7620  0035AA  EC93  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  7621                           
  7622                           ;mcc.c: 115: INTERRUPT_Initialize();
  7623  0035AE  EC62  F01E         	call	_INTERRUPT_Initialize	;wreg free
  7624                           
  7625                           ;mcc.c: 116: ADC_Initialize();
  7626  0035B2  EC10  F01E         	call	_ADC_Initialize	;wreg free
  7627                           
  7628                           ;mcc.c: 117: EUSART1_Initialize();
  7629  0035B6  EC8E  F01C         	call	_EUSART1_Initialize	;wreg free
  7630                           
  7631                           ;mcc.c: 118: TMR1_Initialize();
  7632  0035BA  ECAD  F01D         	call	_TMR1_Initialize	;wreg free
  7633                           
  7634                           ;mcc.c: 119: begin(receiveArray, sizeof (receiveArray), 1, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  7635  0035BE  0E5A               	movlw	low _receiveArray
  7636  0035C0  0100               	movlb	0	; () banked
  7637  0035C2  6FC1               	movwf	begin@ptr& (0+255),b
  7638  0035C4  0E01               	movlw	high _receiveArray
  7639  0035C6  0100               	movlb	0	; () banked
  7640  0035C8  6FC2               	movwf	(begin@ptr+1)& (0+255),b
  7641  0035CA  0E28               	movlw	40
  7642  0035CC  0100               	movlb	0	; () banked
  7643  0035CE  6FC3               	movwf	begin@maxSize& (0+255),b
  7644  0035D0  0E01               	movlw	1
  7645  0035D2  0100               	movlb	0	; () banked
  7646  0035D4  6FC4               	movwf	begin@givenAddress& (0+255),b
  7647  0035D6  0E00               	movlw	0
  7648  0035D8  0100               	movlb	0	; () banked
  7649  0035DA  6FC5               	movwf	begin@error& (0+255),b
  7650  0035DC  0EC4               	movlw	low _Send_put
  7651  0035DE  0100               	movlb	0	; () banked
  7652  0035E0  6FC6               	movwf	begin@stufftosend& (0+255),b
  7653  0035E2  0E39               	movlw	high _Send_put
  7654  0035E4  0100               	movlb	0	; () banked
  7655  0035E6  6FC7               	movwf	(begin@stufftosend+1)& (0+255),b
  7656  0035E8  0EA6               	movlw	low _Receive_get
  7657  0035EA  0100               	movlb	0	; () banked
  7658  0035EC  6FC8               	movwf	begin@stufftoreceive& (0+255),b
  7659  0035EE  0E3C               	movlw	high _Receive_get
  7660  0035F0  0100               	movlb	0	; () banked
  7661  0035F2  6FC9               	movwf	(begin@stufftoreceive+1)& (0+255),b
  7662  0035F4  0EF0               	movlw	low _Receive_available
  7663  0035F6  0100               	movlb	0	; () banked
  7664  0035F8  6FCA               	movwf	begin@stuffavailable& (0+255),b
  7665  0035FA  0E3B               	movlw	high _Receive_available
  7666  0035FC  0100               	movlb	0	; () banked
  7667  0035FE  6FCB               	movwf	(begin@stuffavailable+1)& (0+255),b
  7668  003600  0E96               	movlw	low _Receive_peek
  7669  003602  0100               	movlb	0	; () banked
  7670  003604  6FCC               	movwf	begin@stuffpeek& (0+255),b
  7671  003606  0E3C               	movlw	high _Receive_peek
  7672  003608  0100               	movlb	0	; () banked
  7673  00360A  6FCD               	movwf	(begin@stuffpeek+1)& (0+255),b
  7674  00360C  EC3B  F01B         	call	_begin	;wreg free
  7675  003610  0012               	return		;funcret
  7676  003612                     __end_of_SYSTEM_Initialize:
  7677                           	opt stack 0
  7678                           tosu	equ	0xFFF
  7679                           tosh	equ	0xFFE
  7680                           tosl	equ	0xFFD
  7681                           pclath	equ	0xFFA
  7682                           tblptru	equ	0xFF8
  7683                           tblptrh	equ	0xFF7
  7684                           tblptrl	equ	0xFF6
  7685                           tablat	equ	0xFF5
  7686                           prodh	equ	0xFF4
  7687                           prodl	equ	0xFF3
  7688                           intcon	equ	0xFF2
  7689                           postinc0	equ	0xFEE
  7690                           wreg	equ	0xFE8
  7691                           postinc1	equ	0xFE6
  7692                           postdec1	equ	0xFE5
  7693                           fsr1h	equ	0xFE2
  7694                           fsr1l	equ	0xFE1
  7695                           indf2	equ	0xFDF
  7696                           postinc2	equ	0xFDE
  7697                           postdec2	equ	0xFDD
  7698                           plusw2	equ	0xFDB
  7699                           fsr2h	equ	0xFDA
  7700                           fsr2l	equ	0xFD9
  7701                           status	equ	0xFD8
  7702                           
  7703 ;; *************** function _begin *****************
  7704 ;; Defined at:
  7705 ;;		line 18 in file "FastTransfer.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  7708 ;;		 -> receiveArray(40), 
  7709 ;;  maxSize         1    2[BANK0 ] unsigned char 
  7710 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  7711 ;;  error           1    4[BANK0 ] unsigned char 
  7712 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  7713 ;;		 -> Send_put(0), 
  7714 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  7715 ;;		 -> Receive_get(1), 
  7716 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  7717 ;;		 -> Receive_available(2), 
  7718 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  7719 ;;		 -> Receive_peek(1), 
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;		None
  7722 ;; Return value:  Size  Location     Type
  7723 ;;		None               void
  7724 ;; Registers used:
  7725 ;;		wreg, status,2, status,0, cstack
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7731 ;;      Params:         0      13       0       0       0       0       0
  7732 ;;      Locals:         0       0       0       0       0       0       0
  7733 ;;      Temps:          0       0       0       0       0       0       0
  7734 ;;      Totals:         0      13       0       0       0       0       0
  7735 ;;Total ram usage:       13 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; Hardware stack levels required when called:    5
  7738 ;; This function calls:
  7739 ;;		___awdiv
  7740 ;; This function is called by:
  7741 ;;		_SYSTEM_Initialize
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text34
  7746  003676                     __ptext34:
  7747                           	opt stack 0
  7748  003676                     _begin:
  7749                           	opt stack 24
  7750                           
  7751                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  7752                           
  7753                           ;incstack = 0
  7754  003676  C0C1  F096         	movff	begin@ptr,_receiveArrayAddress
  7755  00367A  C0C2  F097         	movff	begin@ptr+1,_receiveArrayAddress+1
  7756                           
  7757                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  7758  00367E  C0C4  F03E         	movff	begin@givenAddress,_moduleAddress
  7759                           
  7760                           ;FastTransfer.c: 21: serial_write = stufftosend;
  7761  003682  C0C6  F035         	movff	begin@stufftosend,_serial_write
  7762  003686  C0C7  F036         	movff	begin@stufftosend+1,_serial_write+1
  7763                           
  7764                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  7765  00368A  C0CA  F031         	movff	begin@stuffavailable,_serial_available
  7766  00368E  C0CB  F032         	movff	begin@stuffavailable+1,_serial_available+1
  7767                           
  7768                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  7769  003692  C0CC  F09A         	movff	begin@stuffpeek,_serial_peek
  7770  003696  C0CD  F09B         	movff	begin@stuffpeek+1,_serial_peek+1
  7771                           
  7772                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  7773  00369A  C0C8  F033         	movff	begin@stufftoreceive,_serial_read
  7774  00369E  C0C9  F034         	movff	begin@stufftoreceive+1,_serial_read+1
  7775                           
  7776                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  7777  0036A2  C0C3  F01B         	movff	begin@maxSize,___awdiv@dividend
  7778  0036A6  6A1C               	clrf	___awdiv@dividend+1,c
  7779  0036A8  0E00               	movlw	0
  7780  0036AA  6E1E               	movwf	___awdiv@divisor+1,c
  7781  0036AC  0E02               	movlw	2
  7782  0036AE  6E1D               	movwf	___awdiv@divisor,c
  7783  0036B0  ECA2  F018         	call	___awdiv	;wreg free
  7784  0036B4  501B               	movf	?___awdiv,w,c
  7785  0036B6  6E3D               	movwf	_maxDataAddress,c
  7786                           
  7787                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  7788  0036B8  0E00               	movlw	low _ring_buffer
  7789  0036BA  0100               	movlb	0	; () banked
  7790  0036BC  6F98               	movwf	_sendStructAddress& (0+255),b
  7791  0036BE  0E02               	movlw	high _ring_buffer
  7792  0036C0  0100               	movlb	0	; () banked
  7793  0036C2  6F99               	movwf	(_sendStructAddress+1)& (0+255),b
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;FastTransfer.c: 27: AKNAKsend = error;
  7797  0036C4  C0C5  F039         	movff	begin@error,_AKNAKsend
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  7801  0036C8  0E00               	movlw	0
  7802  0036CA  0100               	movlb	0	; () banked
  7803  0036CC  6F8F               	movwf	(_alignErrorCounter+1)& (0+255),b
  7804  0036CE  0E00               	movlw	0
  7805  0036D0  6F8E               	movwf	_alignErrorCounter& (0+255),b
  7806                           
  7807                           ; BSR set to: 0
  7808  0036D2  0012               	return		;funcret
  7809  0036D4                     __end_of_begin:
  7810                           	opt stack 0
  7811                           tosu	equ	0xFFF
  7812                           tosh	equ	0xFFE
  7813                           tosl	equ	0xFFD
  7814                           pclath	equ	0xFFA
  7815                           tblptru	equ	0xFF8
  7816                           tblptrh	equ	0xFF7
  7817                           tblptrl	equ	0xFF6
  7818                           tablat	equ	0xFF5
  7819                           prodh	equ	0xFF4
  7820                           prodl	equ	0xFF3
  7821                           intcon	equ	0xFF2
  7822                           postinc0	equ	0xFEE
  7823                           wreg	equ	0xFE8
  7824                           postinc1	equ	0xFE6
  7825                           postdec1	equ	0xFE5
  7826                           fsr1h	equ	0xFE2
  7827                           fsr1l	equ	0xFE1
  7828                           indf2	equ	0xFDF
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           plusw2	equ	0xFDB
  7832                           fsr2h	equ	0xFDA
  7833                           fsr2l	equ	0xFD9
  7834                           status	equ	0xFD8
  7835                           
  7836 ;; *************** function ___awdiv *****************
  7837 ;; Defined at:
  7838 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  dividend        2   26[COMRAM] int 
  7841 ;;  divisor         2   28[COMRAM] int 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  quotient        2   32[COMRAM] int 
  7844 ;;  sign            1   31[COMRAM] unsigned char 
  7845 ;;  counter         1   30[COMRAM] unsigned char 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  2   26[COMRAM] int 
  7848 ;; Registers used:
  7849 ;;		wreg, status,2, status,0
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7855 ;;      Params:         4       0       0       0       0       0       0
  7856 ;;      Locals:         4       0       0       0       0       0       0
  7857 ;;      Temps:          0       0       0       0       0       0       0
  7858 ;;      Totals:         8       0       0       0       0       0       0
  7859 ;;Total ram usage:        8 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    4
  7862 ;; This function calls:
  7863 ;;		Nothing
  7864 ;; This function is called by:
  7865 ;;		_Temp_Convert
  7866 ;;		_begin
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           	psect	text35
  7871  003144                     __ptext35:
  7872                           	opt stack 0
  7873  003144                     ___awdiv:
  7874                           	opt stack 25
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;incstack = 0
  7878  003144  0E00               	movlw	0
  7879  003146  6E20               	movwf	___awdiv@sign,c
  7880  003148  AE1E               	btfss	___awdiv@divisor+1,7,c
  7881  00314A  D007               	goto	l4843
  7882  00314C  6C1D               	negf	___awdiv@divisor,c
  7883  00314E  1E1E               	comf	___awdiv@divisor+1,f,c
  7884  003150  B0D8               	btfsc	status,0,c
  7885  003152  2A1E               	incf	___awdiv@divisor+1,f,c
  7886  003154  0E01               	movlw	1
  7887  003156  6E20               	movwf	___awdiv@sign,c
  7888  003158  D000               	goto	l4843
  7889  00315A                     l4843:
  7890  00315A  AE1C               	btfss	___awdiv@dividend+1,7,c
  7891  00315C  D007               	goto	l4849
  7892  00315E  6C1B               	negf	___awdiv@dividend,c
  7893  003160  1E1C               	comf	___awdiv@dividend+1,f,c
  7894  003162  B0D8               	btfsc	status,0,c
  7895  003164  2A1C               	incf	___awdiv@dividend+1,f,c
  7896  003166  0E01               	movlw	1
  7897  003168  1A20               	xorwf	___awdiv@sign,f,c
  7898  00316A  D000               	goto	l4849
  7899  00316C                     l4849:
  7900  00316C  0E00               	movlw	0
  7901  00316E  6E22               	movwf	___awdiv@quotient+1,c
  7902  003170  0E00               	movlw	0
  7903  003172  6E21               	movwf	___awdiv@quotient,c
  7904  003174  501D               	movf	___awdiv@divisor,w,c
  7905  003176  101E               	iorwf	___awdiv@divisor+1,w,c
  7906  003178  B4D8               	btfsc	status,2,c
  7907  00317A  D021               	goto	l4871
  7908  00317C  0E01               	movlw	1
  7909  00317E  6E1F               	movwf	___awdiv@counter,c
  7910  003180  D005               	goto	l4857
  7911  003182                     l4855:
  7912  003182  90D8               	bcf	status,0,c
  7913  003184  361D               	rlcf	___awdiv@divisor,f,c
  7914  003186  361E               	rlcf	___awdiv@divisor+1,f,c
  7915  003188  2A1F               	incf	___awdiv@counter,f,c
  7916  00318A  D000               	goto	l4857
  7917  00318C                     l4857:
  7918  00318C  BE1E               	btfsc	___awdiv@divisor+1,7,c
  7919  00318E  D002               	goto	l4859
  7920  003190  D7F8               	goto	l4855
  7921  003192  D000               	goto	l4859
  7922  003194                     l4859:
  7923  003194  90D8               	bcf	status,0,c
  7924  003196  3621               	rlcf	___awdiv@quotient,f,c
  7925  003198  3622               	rlcf	___awdiv@quotient+1,f,c
  7926  00319A  501D               	movf	___awdiv@divisor,w,c
  7927  00319C  5C1B               	subwf	___awdiv@dividend,w,c
  7928  00319E  501E               	movf	___awdiv@divisor+1,w,c
  7929  0031A0  581C               	subwfb	___awdiv@dividend+1,w,c
  7930  0031A2  A0D8               	btfss	status,0,c
  7931  0031A4  D006               	goto	l4867
  7932  0031A6  501D               	movf	___awdiv@divisor,w,c
  7933  0031A8  5E1B               	subwf	___awdiv@dividend,f,c
  7934  0031AA  501E               	movf	___awdiv@divisor+1,w,c
  7935  0031AC  5A1C               	subwfb	___awdiv@dividend+1,f,c
  7936  0031AE  8021               	bsf	___awdiv@quotient,0,c
  7937  0031B0  D000               	goto	l4867
  7938  0031B2                     l4867:
  7939  0031B2  90D8               	bcf	status,0,c
  7940  0031B4  321E               	rrcf	___awdiv@divisor+1,f,c
  7941  0031B6  321D               	rrcf	___awdiv@divisor,f,c
  7942  0031B8  2E1F               	decfsz	___awdiv@counter,f,c
  7943  0031BA  D7EC               	goto	l4859
  7944  0031BC  D000               	goto	l4871
  7945  0031BE                     l4871:
  7946  0031BE  5020               	movf	___awdiv@sign,w,c
  7947  0031C0  B4D8               	btfsc	status,2,c
  7948  0031C2  D005               	goto	l4875
  7949  0031C4  6C21               	negf	___awdiv@quotient,c
  7950  0031C6  1E22               	comf	___awdiv@quotient+1,f,c
  7951  0031C8  B0D8               	btfsc	status,0,c
  7952  0031CA  2A22               	incf	___awdiv@quotient+1,f,c
  7953  0031CC  D000               	goto	l4875
  7954  0031CE                     l4875:
  7955  0031CE  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  7956  0031D2  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  7957  0031D6  0012               	return	
  7958  0031D8  0012               	return		;funcret
  7959  0031DA                     __end_of___awdiv:
  7960                           	opt stack 0
  7961                           tosu	equ	0xFFF
  7962                           tosh	equ	0xFFE
  7963                           tosl	equ	0xFFD
  7964                           pclath	equ	0xFFA
  7965                           tblptru	equ	0xFF8
  7966                           tblptrh	equ	0xFF7
  7967                           tblptrl	equ	0xFF6
  7968                           tablat	equ	0xFF5
  7969                           prodh	equ	0xFF4
  7970                           prodl	equ	0xFF3
  7971                           intcon	equ	0xFF2
  7972                           postinc0	equ	0xFEE
  7973                           wreg	equ	0xFE8
  7974                           postinc1	equ	0xFE6
  7975                           postdec1	equ	0xFE5
  7976                           fsr1h	equ	0xFE2
  7977                           fsr1l	equ	0xFE1
  7978                           indf2	equ	0xFDF
  7979                           postinc2	equ	0xFDE
  7980                           postdec2	equ	0xFDD
  7981                           plusw2	equ	0xFDB
  7982                           fsr2h	equ	0xFDA
  7983                           fsr2l	equ	0xFD9
  7984                           status	equ	0xFD8
  7985                           
  7986 ;; *************** function _TMR1_Initialize *****************
  7987 ;; Defined at:
  7988 ;;		line 18 in file "mcc_generated_files/tmr1.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;		None
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;		None
  7993 ;; Return value:  Size  Location     Type
  7994 ;;		None               void
  7995 ;; Registers used:
  7996 ;;		wreg, status,2, cstack
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8002 ;;      Params:         0       0       0       0       0       0       0
  8003 ;;      Locals:         0       0       0       0       0       0       0
  8004 ;;      Temps:          0       0       0       0       0       0       0
  8005 ;;      Totals:         0       0       0       0       0       0       0
  8006 ;;Total ram usage:        0 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    5
  8009 ;; This function calls:
  8010 ;;		_TMR1_StartTimer
  8011 ;; This function is called by:
  8012 ;;		_SYSTEM_Initialize
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           	psect	text36
  8017  003B5A                     __ptext36:
  8018                           	opt stack 0
  8019  003B5A                     _TMR1_Initialize:
  8020                           	opt stack 24
  8021                           
  8022                           ;tmr1.c: 23: T1CON = 0x30;
  8023                           
  8024                           ;incstack = 0
  8025  003B5A  0E30               	movlw	48
  8026  003B5C  6ECD               	movwf	4045,c	;volatile
  8027                           
  8028                           ;tmr1.c: 26: T1GCON = 0x00;
  8029  003B5E  0E00               	movlw	0
  8030  003B60  6ECC               	movwf	4044,c	;volatile
  8031                           
  8032                           ;tmr1.c: 29: TMR1H = 0x0B;
  8033  003B62  0E0B               	movlw	11
  8034  003B64  6ECF               	movwf	4047,c	;volatile
  8035                           
  8036                           ;tmr1.c: 32: TMR1L = 0xDC;
  8037  003B66  0EDC               	movlw	220
  8038  003B68  6ECE               	movwf	4046,c	;volatile
  8039                           
  8040                           ;tmr1.c: 35: timer1ReloadVal=TMR1;
  8041  003B6A  CFCE F037          	movff	4046,_timer1ReloadVal	;volatile
  8042  003B6E  CFCF F038          	movff	4047,_timer1ReloadVal+1	;volatile
  8043                           
  8044                           ;tmr1.c: 38: PIR1bits.TMR1IF = 0;
  8045  003B72  909E               	bcf	3998,0,c	;volatile
  8046                           
  8047                           ;tmr1.c: 41: PIE1bits.TMR1IE = 1;
  8048  003B74  809D               	bsf	3997,0,c	;volatile
  8049                           
  8050                           ;tmr1.c: 44: TMR1_StartTimer();
  8051  003B76  EC68  F01E         	call	_TMR1_StartTimer	;wreg free
  8052  003B7A  0012               	return		;funcret
  8053  003B7C                     __end_of_TMR1_Initialize:
  8054                           	opt stack 0
  8055                           tosu	equ	0xFFF
  8056                           tosh	equ	0xFFE
  8057                           tosl	equ	0xFFD
  8058                           pclath	equ	0xFFA
  8059                           tblptru	equ	0xFF8
  8060                           tblptrh	equ	0xFF7
  8061                           tblptrl	equ	0xFF6
  8062                           tablat	equ	0xFF5
  8063                           prodh	equ	0xFF4
  8064                           prodl	equ	0xFF3
  8065                           intcon	equ	0xFF2
  8066                           postinc0	equ	0xFEE
  8067                           wreg	equ	0xFE8
  8068                           postinc1	equ	0xFE6
  8069                           postdec1	equ	0xFE5
  8070                           fsr1h	equ	0xFE2
  8071                           fsr1l	equ	0xFE1
  8072                           indf2	equ	0xFDF
  8073                           postinc2	equ	0xFDE
  8074                           postdec2	equ	0xFDD
  8075                           plusw2	equ	0xFDB
  8076                           fsr2h	equ	0xFDA
  8077                           fsr2l	equ	0xFD9
  8078                           status	equ	0xFD8
  8079                           
  8080 ;; *************** function _TMR1_StartTimer *****************
  8081 ;; Defined at:
  8082 ;;		line 47 in file "mcc_generated_files/tmr1.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;		None               void
  8089 ;; Registers used:
  8090 ;;		None
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8096 ;;      Params:         0       0       0       0       0       0       0
  8097 ;;      Locals:         0       0       0       0       0       0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0
  8099 ;;      Totals:         0       0       0       0       0       0       0
  8100 ;;Total ram usage:        0 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    4
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_TMR1_Initialize
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           	psect	text37
  8111  003CD0                     __ptext37:
  8112                           	opt stack 0
  8113  003CD0                     _TMR1_StartTimer:
  8114                           	opt stack 24
  8115                           
  8116                           ;tmr1.c: 50: T1CONbits.TMR1ON = 1;
  8117                           
  8118                           ;incstack = 0
  8119  003CD0  80CD               	bsf	4045,0,c	;volatile
  8120  003CD2  0012               	return		;funcret
  8121  003CD4                     __end_of_TMR1_StartTimer:
  8122                           	opt stack 0
  8123                           tosu	equ	0xFFF
  8124                           tosh	equ	0xFFE
  8125                           tosl	equ	0xFFD
  8126                           pclath	equ	0xFFA
  8127                           tblptru	equ	0xFF8
  8128                           tblptrh	equ	0xFF7
  8129                           tblptrl	equ	0xFF6
  8130                           tablat	equ	0xFF5
  8131                           prodh	equ	0xFF4
  8132                           prodl	equ	0xFF3
  8133                           intcon	equ	0xFF2
  8134                           postinc0	equ	0xFEE
  8135                           wreg	equ	0xFE8
  8136                           postinc1	equ	0xFE6
  8137                           postdec1	equ	0xFE5
  8138                           fsr1h	equ	0xFE2
  8139                           fsr1l	equ	0xFE1
  8140                           indf2	equ	0xFDF
  8141                           postinc2	equ	0xFDE
  8142                           postdec2	equ	0xFDD
  8143                           plusw2	equ	0xFDB
  8144                           fsr2h	equ	0xFDA
  8145                           fsr2l	equ	0xFD9
  8146                           status	equ	0xFD8
  8147                           
  8148 ;; *************** function _PIN_MANAGER_Initialize *****************
  8149 ;; Defined at:
  8150 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  8151 ;; Parameters:    Size  Location     Type
  8152 ;;		None
  8153 ;; Auto vars:     Size  Location     Type
  8154 ;;		None
  8155 ;; Return value:  Size  Location     Type
  8156 ;;		None               void
  8157 ;; Registers used:
  8158 ;;		wreg, status,2
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8164 ;;      Params:         0       0       0       0       0       0       0
  8165 ;;      Locals:         0       0       0       0       0       0       0
  8166 ;;      Temps:          0       0       0       0       0       0       0
  8167 ;;      Totals:         0       0       0       0       0       0       0
  8168 ;;Total ram usage:        0 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    4
  8171 ;; This function calls:
  8172 ;;		Nothing
  8173 ;; This function is called by:
  8174 ;;		_SYSTEM_Initialize
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           	psect	text38
  8179  003726                     __ptext38:
  8180                           	opt stack 0
  8181  003726                     _PIN_MANAGER_Initialize:
  8182                           	opt stack 25
  8183                           
  8184                           ;pin_manager.c: 8: LATA = 0x00;
  8185                           
  8186                           ;incstack = 0
  8187  003726  0E00               	movlw	0
  8188  003728  6E89               	movwf	3977,c	;volatile
  8189                           
  8190                           ;pin_manager.c: 9: TRISA = 0xAE;
  8191  00372A  0EAE               	movlw	174
  8192  00372C  6E92               	movwf	3986,c	;volatile
  8193                           
  8194                           ;pin_manager.c: 10: ANSELA = 0x2E;
  8195  00372E  0E2E               	movlw	46
  8196  003730  010F               	movlb	15	; () banked
  8197  003732  6F38               	movwf	56,b	;volatile
  8198                           
  8199                           ;pin_manager.c: 12: LATB = 0x00;
  8200  003734  0E00               	movlw	0
  8201  003736  6E8A               	movwf	3978,c	;volatile
  8202                           
  8203                           ;pin_manager.c: 13: TRISB = 0xF4;
  8204  003738  0EF4               	movlw	244
  8205  00373A  6E93               	movwf	3987,c	;volatile
  8206                           
  8207                           ;pin_manager.c: 14: ANSELB = 0x34;
  8208  00373C  0E34               	movlw	52
  8209  00373E  010F               	movlb	15	; () banked
  8210  003740  6F39               	movwf	57,b	;volatile
  8211                           
  8212                           ;pin_manager.c: 15: WPUB = 0x00;
  8213  003742  0E00               	movlw	0
  8214  003744  6E61               	movwf	3937,c	;volatile
  8215                           
  8216                           ;pin_manager.c: 17: LATC = 0x48;
  8217  003746  0E48               	movlw	72
  8218  003748  6E8B               	movwf	3979,c	;volatile
  8219                           
  8220                           ;pin_manager.c: 18: TRISC = 0xC4;
  8221  00374A  0EC4               	movlw	196
  8222  00374C  6E94               	movwf	3988,c	;volatile
  8223                           
  8224                           ;pin_manager.c: 19: ANSELC = 0x04;
  8225  00374E  0E04               	movlw	4
  8226  003750  010F               	movlb	15	; () banked
  8227  003752  6F3A               	movwf	58,b	;volatile
  8228                           
  8229                           ;pin_manager.c: 21: LATD = 0x00;
  8230  003754  0E00               	movlw	0
  8231  003756  6E8C               	movwf	3980,c	;volatile
  8232                           
  8233                           ;pin_manager.c: 22: TRISD = 0xD1;
  8234  003758  0ED1               	movlw	209
  8235  00375A  6E95               	movwf	3989,c	;volatile
  8236                           
  8237                           ;pin_manager.c: 23: ANSELD = 0xD1;
  8238  00375C  0ED1               	movlw	209
  8239  00375E  010F               	movlb	15	; () banked
  8240  003760  6F3B               	movwf	59,b	;volatile
  8241                           
  8242                           ;pin_manager.c: 25: LATE = 0x00;
  8243  003762  0E00               	movlw	0
  8244  003764  6E8D               	movwf	3981,c	;volatile
  8245                           
  8246                           ;pin_manager.c: 26: TRISE = 0x04;
  8247  003766  0E04               	movlw	4
  8248  003768  6E96               	movwf	3990,c	;volatile
  8249                           
  8250                           ;pin_manager.c: 27: ANSELE = 0x04;
  8251  00376A  0E04               	movlw	4
  8252  00376C  010F               	movlb	15	; () banked
  8253  00376E  6F3C               	movwf	60,b	;volatile
  8254                           
  8255                           ; BSR set to: 15
  8256                           ;pin_manager.c: 29: TRISCbits.TRISC6 = 1;
  8257  003770  8C94               	bsf	3988,6,c	;volatile
  8258                           
  8259                           ; BSR set to: 15
  8260                           ;pin_manager.c: 30: TRISCbits.TRISC7 = 1;
  8261  003772  8E94               	bsf	3988,7,c	;volatile
  8262                           
  8263                           ; BSR set to: 15
  8264                           ;pin_manager.c: 34: INTCON2bits.nRBPU = 0x01;
  8265  003774  8EF1               	bsf	intcon2,7,c	;volatile
  8266                           
  8267                           ; BSR set to: 15
  8268  003776  0012               	return		;funcret
  8269  003778                     __end_of_PIN_MANAGER_Initialize:
  8270                           	opt stack 0
  8271                           tosu	equ	0xFFF
  8272                           tosh	equ	0xFFE
  8273                           tosl	equ	0xFFD
  8274                           pclath	equ	0xFFA
  8275                           tblptru	equ	0xFF8
  8276                           tblptrh	equ	0xFF7
  8277                           tblptrl	equ	0xFF6
  8278                           tablat	equ	0xFF5
  8279                           prodh	equ	0xFF4
  8280                           prodl	equ	0xFF3
  8281                           intcon	equ	0xFF2
  8282                           intcon2	equ	0xFF1
  8283                           postinc0	equ	0xFEE
  8284                           wreg	equ	0xFE8
  8285                           postinc1	equ	0xFE6
  8286                           postdec1	equ	0xFE5
  8287                           fsr1h	equ	0xFE2
  8288                           fsr1l	equ	0xFE1
  8289                           indf2	equ	0xFDF
  8290                           postinc2	equ	0xFDE
  8291                           postdec2	equ	0xFDD
  8292                           plusw2	equ	0xFDB
  8293                           fsr2h	equ	0xFDA
  8294                           fsr2l	equ	0xFD9
  8295                           status	equ	0xFD8
  8296                           
  8297 ;; *************** function _OSCILLATOR_Initialize *****************
  8298 ;; Defined at:
  8299 ;;		line 124 in file "mcc_generated_files/mcc.c"
  8300 ;; Parameters:    Size  Location     Type
  8301 ;;		None
  8302 ;; Auto vars:     Size  Location     Type
  8303 ;;		None
  8304 ;; Return value:  Size  Location     Type
  8305 ;;		None               void
  8306 ;; Registers used:
  8307 ;;		wreg, status,2
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8313 ;;      Params:         0       0       0       0       0       0       0
  8314 ;;      Locals:         0       0       0       0       0       0       0
  8315 ;;      Temps:          0       0       0       0       0       0       0
  8316 ;;      Totals:         0       0       0       0       0       0       0
  8317 ;;Total ram usage:        0 bytes
  8318 ;; Hardware stack levels used:    1
  8319 ;; Hardware stack levels required when called:    4
  8320 ;; This function calls:
  8321 ;;		Nothing
  8322 ;; This function is called by:
  8323 ;;		_SYSTEM_Initialize
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           	psect	text39
  8328  003CB6                     __ptext39:
  8329                           	opt stack 0
  8330  003CB6                     _OSCILLATOR_Initialize:
  8331                           	opt stack 25
  8332                           
  8333                           ;mcc.c: 126: OSCCON = 0x62;
  8334                           
  8335                           ; BSR set to: 15
  8336                           ;incstack = 0
  8337  003CB6  0E62               	movlw	98
  8338  003CB8  6ED3               	movwf	4051,c	;volatile
  8339                           
  8340                           ;mcc.c: 128: OSCCON2 = 0x04;
  8341  003CBA  0E04               	movlw	4
  8342  003CBC  6ED2               	movwf	4050,c	;volatile
  8343                           
  8344                           ;mcc.c: 130: OSCTUNE = 0x00;
  8345  003CBE  0E00               	movlw	0
  8346  003CC0  6E9B               	movwf	3995,c	;volatile
  8347  003CC2  0012               	return		;funcret
  8348  003CC4                     __end_of_OSCILLATOR_Initialize:
  8349                           	opt stack 0
  8350                           tosu	equ	0xFFF
  8351                           tosh	equ	0xFFE
  8352                           tosl	equ	0xFFD
  8353                           pclath	equ	0xFFA
  8354                           tblptru	equ	0xFF8
  8355                           tblptrh	equ	0xFF7
  8356                           tblptrl	equ	0xFF6
  8357                           tablat	equ	0xFF5
  8358                           prodh	equ	0xFF4
  8359                           prodl	equ	0xFF3
  8360                           intcon	equ	0xFF2
  8361                           intcon2	equ	0xFF1
  8362                           postinc0	equ	0xFEE
  8363                           wreg	equ	0xFE8
  8364                           postinc1	equ	0xFE6
  8365                           postdec1	equ	0xFE5
  8366                           fsr1h	equ	0xFE2
  8367                           fsr1l	equ	0xFE1
  8368                           indf2	equ	0xFDF
  8369                           postinc2	equ	0xFDE
  8370                           postdec2	equ	0xFDD
  8371                           plusw2	equ	0xFDB
  8372                           fsr2h	equ	0xFDA
  8373                           fsr2l	equ	0xFD9
  8374                           status	equ	0xFD8
  8375                           
  8376 ;; *************** function _INTERRUPT_Initialize *****************
  8377 ;; Defined at:
  8378 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;		None
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;		None
  8383 ;; Return value:  Size  Location     Type
  8384 ;;		None               void
  8385 ;; Registers used:
  8386 ;;		None
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8392 ;;      Params:         0       0       0       0       0       0       0
  8393 ;;      Locals:         0       0       0       0       0       0       0
  8394 ;;      Temps:          0       0       0       0       0       0       0
  8395 ;;      Totals:         0       0       0       0       0       0       0
  8396 ;;Total ram usage:        0 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:    4
  8399 ;; This function calls:
  8400 ;;		Nothing
  8401 ;; This function is called by:
  8402 ;;		_SYSTEM_Initialize
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           	psect	text40
  8407  003CC4                     __ptext40:
  8408                           	opt stack 0
  8409  003CC4                     _INTERRUPT_Initialize:
  8410                           	opt stack 25
  8411                           
  8412                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  8413                           
  8414                           ;incstack = 0
  8415  003CC4  9ED0               	bcf	4048,7,c	;volatile
  8416                           
  8417                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  8418  003CC6  9A9F               	bcf	3999,5,c	;volatile
  8419                           
  8420                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  8421  003CC8  9C9F               	bcf	3999,6,c	;volatile
  8422                           
  8423                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  8424  003CCA  909F               	bcf	3999,0,c	;volatile
  8425                           
  8426                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  8427  003CCC  989F               	bcf	3999,4,c	;volatile
  8428  003CCE  0012               	return		;funcret
  8429  003CD0                     __end_of_INTERRUPT_Initialize:
  8430                           	opt stack 0
  8431                           tosu	equ	0xFFF
  8432                           tosh	equ	0xFFE
  8433                           tosl	equ	0xFFD
  8434                           pclath	equ	0xFFA
  8435                           tblptru	equ	0xFF8
  8436                           tblptrh	equ	0xFF7
  8437                           tblptrl	equ	0xFF6
  8438                           tablat	equ	0xFF5
  8439                           prodh	equ	0xFF4
  8440                           prodl	equ	0xFF3
  8441                           intcon	equ	0xFF2
  8442                           intcon2	equ	0xFF1
  8443                           postinc0	equ	0xFEE
  8444                           wreg	equ	0xFE8
  8445                           postinc1	equ	0xFE6
  8446                           postdec1	equ	0xFE5
  8447                           fsr1h	equ	0xFE2
  8448                           fsr1l	equ	0xFE1
  8449                           indf2	equ	0xFDF
  8450                           postinc2	equ	0xFDE
  8451                           postdec2	equ	0xFDD
  8452                           plusw2	equ	0xFDB
  8453                           fsr2h	equ	0xFDA
  8454                           fsr2l	equ	0xFD9
  8455                           status	equ	0xFD8
  8456                           
  8457 ;; *************** function _EUSART1_Initialize *****************
  8458 ;; Defined at:
  8459 ;;		line 21 in file "UART.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;		None
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;		None
  8464 ;; Return value:  Size  Location     Type
  8465 ;;		None               void
  8466 ;; Registers used:
  8467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8468 ;; Tracked objects:
  8469 ;;		On entry : 0/0
  8470 ;;		On exit  : 0/0
  8471 ;;		Unchanged: 0/0
  8472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8473 ;;      Params:         0       0       0       0       0       0       0
  8474 ;;      Locals:         0       0       0       0       0       0       0
  8475 ;;      Temps:          0       0       0       0       0       0       0
  8476 ;;      Totals:         0       0       0       0       0       0       0
  8477 ;;Total ram usage:        0 bytes
  8478 ;; Hardware stack levels used:    1
  8479 ;; Hardware stack levels required when called:    6
  8480 ;; This function calls:
  8481 ;;		_UART_buff_init
  8482 ;; This function is called by:
  8483 ;;		_SYSTEM_Initialize
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           	psect	text41
  8488  00391C                     __ptext41:
  8489                           	opt stack 0
  8490  00391C                     _EUSART1_Initialize:
  8491                           	opt stack 23
  8492                           
  8493                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  8494                           
  8495                           ;incstack = 0
  8496  00391C  9A9D               	bcf	3997,5,c	;volatile
  8497                           
  8498                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  8499  00391E  989D               	bcf	3997,4,c	;volatile
  8500                           
  8501                           ;UART.c: 29: BAUD1CON = 0x48;
  8502  003920  0E48               	movlw	72
  8503  003922  6EB8               	movwf	4024,c	;volatile
  8504                           
  8505                           ;UART.c: 32: RC1STA = 0x98;
  8506  003924  0E98               	movlw	152
  8507  003926  6EAB               	movwf	4011,c	;volatile
  8508                           
  8509                           ;UART.c: 35: TX1STA = 0x26;
  8510  003928  0E26               	movlw	38
  8511  00392A  6EAC               	movwf	4012,c	;volatile
  8512                           
  8513                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  8514  00392C  0E33               	movlw	51
  8515  00392E  6EAF               	movwf	4015,c	;volatile
  8516                           
  8517                           ;UART.c: 41: SPBRGH1 = 0x00;
  8518  003930  0E00               	movlw	0
  8519  003932  6EB0               	movwf	4016,c	;volatile
  8520                           
  8521                           ;UART.c: 44: TXREG1 = 0x00;
  8522  003934  0E00               	movlw	0
  8523  003936  6EAD               	movwf	4013,c	;volatile
  8524                           
  8525                           ;UART.c: 47: RCREG1 = 0x00;
  8526  003938  0E00               	movlw	0
  8527  00393A  6EAE               	movwf	4014,c	;volatile
  8528                           
  8529                           ;UART.c: 49: UART_buff_init(&input_buffer);
  8530  00393C  0E00               	movlw	low _input_buffer
  8531  00393E  6E23               	movwf	UART_buff_init@_this,c
  8532  003940  0E04               	movlw	high _input_buffer
  8533  003942  6E24               	movwf	UART_buff_init@_this+1,c
  8534  003944  ECCD  F01D         	call	_UART_buff_init	;wreg free
  8535                           
  8536                           ;UART.c: 50: UART_buff_init(&output_buffer);
  8537  003948  0E00               	movlw	low _output_buffer
  8538  00394A  6E23               	movwf	UART_buff_init@_this,c
  8539  00394C  0E05               	movlw	high _output_buffer
  8540  00394E  6E24               	movwf	UART_buff_init@_this+1,c
  8541  003950  ECCD  F01D         	call	_UART_buff_init	;wreg free
  8542                           
  8543                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  8544  003954  8A9D               	bsf	3997,5,c	;volatile
  8545  003956  0012               	return		;funcret
  8546  003958                     __end_of_EUSART1_Initialize:
  8547                           	opt stack 0
  8548                           tosu	equ	0xFFF
  8549                           tosh	equ	0xFFE
  8550                           tosl	equ	0xFFD
  8551                           pclath	equ	0xFFA
  8552                           tblptru	equ	0xFF8
  8553                           tblptrh	equ	0xFF7
  8554                           tblptrl	equ	0xFF6
  8555                           tablat	equ	0xFF5
  8556                           prodh	equ	0xFF4
  8557                           prodl	equ	0xFF3
  8558                           intcon	equ	0xFF2
  8559                           intcon2	equ	0xFF1
  8560                           postinc0	equ	0xFEE
  8561                           wreg	equ	0xFE8
  8562                           postinc1	equ	0xFE6
  8563                           postdec1	equ	0xFE5
  8564                           fsr1h	equ	0xFE2
  8565                           fsr1l	equ	0xFE1
  8566                           indf2	equ	0xFDF
  8567                           postinc2	equ	0xFDE
  8568                           postdec2	equ	0xFDD
  8569                           plusw2	equ	0xFDB
  8570                           fsr2h	equ	0xFDA
  8571                           fsr2l	equ	0xFD9
  8572                           status	equ	0xFD8
  8573                           
  8574 ;; *************** function _UART_buff_init *****************
  8575 ;; Defined at:
  8576 ;;		line 56 in file "UART.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  8579 ;;		 -> output_buffer(206), input_buffer(206), 
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;		None
  8582 ;; Return value:  Size  Location     Type
  8583 ;;		None               void
  8584 ;; Registers used:
  8585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8586 ;; Tracked objects:
  8587 ;;		On entry : 0/0
  8588 ;;		On exit  : 0/0
  8589 ;;		Unchanged: 0/0
  8590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8591 ;;      Params:         2       0       0       0       0       0       0
  8592 ;;      Locals:         0       0       0       0       0       0       0
  8593 ;;      Temps:          0       0       0       0       0       0       0
  8594 ;;      Totals:         2       0       0       0       0       0       0
  8595 ;;Total ram usage:        2 bytes
  8596 ;; Hardware stack levels used:    1
  8597 ;; Hardware stack levels required when called:    5
  8598 ;; This function calls:
  8599 ;;		_memset
  8600 ;; This function is called by:
  8601 ;;		_EUSART1_Initialize
  8602 ;; This function uses a non-reentrant model
  8603 ;;
  8604                           
  8605                           	psect	text42
  8606  003B9A                     __ptext42:
  8607                           	opt stack 0
  8608  003B9A                     _UART_buff_init:
  8609                           	opt stack 23
  8610                           
  8611                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  8612                           
  8613                           ;incstack = 0
  8614  003B9A  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  8615  003B9E  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  8616  003BA2  0E00               	movlw	0
  8617  003BA4  6E1E               	movwf	memset@c+1,c
  8618  003BA6  0E00               	movlw	0
  8619  003BA8  6E1D               	movwf	memset@c,c
  8620  003BAA  0E00               	movlw	0
  8621  003BAC  6E20               	movwf	memset@n+1,c
  8622  003BAE  0ECE               	movlw	206
  8623  003BB0  6E1F               	movwf	memset@n,c
  8624  003BB2  EC58  F01D         	call	_memset	;wreg free
  8625  003BB6  0012               	return		;funcret
  8626  003BB8                     __end_of_UART_buff_init:
  8627                           	opt stack 0
  8628                           tosu	equ	0xFFF
  8629                           tosh	equ	0xFFE
  8630                           tosl	equ	0xFFD
  8631                           pclath	equ	0xFFA
  8632                           tblptru	equ	0xFF8
  8633                           tblptrh	equ	0xFF7
  8634                           tblptrl	equ	0xFF6
  8635                           tablat	equ	0xFF5
  8636                           prodh	equ	0xFF4
  8637                           prodl	equ	0xFF3
  8638                           intcon	equ	0xFF2
  8639                           intcon2	equ	0xFF1
  8640                           postinc0	equ	0xFEE
  8641                           wreg	equ	0xFE8
  8642                           postinc1	equ	0xFE6
  8643                           postdec1	equ	0xFE5
  8644                           fsr1h	equ	0xFE2
  8645                           fsr1l	equ	0xFE1
  8646                           indf2	equ	0xFDF
  8647                           postinc2	equ	0xFDE
  8648                           postdec2	equ	0xFDD
  8649                           plusw2	equ	0xFDB
  8650                           fsr2h	equ	0xFDA
  8651                           fsr2l	equ	0xFD9
  8652                           status	equ	0xFD8
  8653                           
  8654 ;; *************** function _memset *****************
  8655 ;; Defined at:
  8656 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\memset.c"
  8657 ;; Parameters:    Size  Location     Type
  8658 ;;  p1              2   26[COMRAM] PTR void 
  8659 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8660 ;;  c               2   28[COMRAM] int 
  8661 ;;  n               2   30[COMRAM] unsigned int 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  p               2   32[COMRAM] PTR unsigned char 
  8664 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  2   26[COMRAM] PTR void 
  8667 ;; Registers used:
  8668 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8674 ;;      Params:         6       0       0       0       0       0       0
  8675 ;;      Locals:         2       0       0       0       0       0       0
  8676 ;;      Temps:          0       0       0       0       0       0       0
  8677 ;;      Totals:         8       0       0       0       0       0       0
  8678 ;;Total ram usage:        8 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:    4
  8681 ;; This function calls:
  8682 ;;		Nothing
  8683 ;; This function is called by:
  8684 ;;		_FastTransfer_buffer_flush
  8685 ;;		_UART_buff_init
  8686 ;;		_UART_buff_flush
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           	psect	text43
  8691  003AB0                     __ptext43:
  8692                           	opt stack 0
  8693  003AB0                     _memset:
  8694                           	opt stack 23
  8695                           
  8696                           ;incstack = 0
  8697  003AB0  C01B  F021         	movff	memset@p1,memset@p
  8698  003AB4  C01C  F022         	movff	memset@p1+1,memset@p+1
  8699  003AB8  D009               	goto	l3109
  8700  003ABA                     l3105:
  8701  003ABA  C021  FFD9         	movff	memset@p,fsr2l
  8702  003ABE  C022  FFDA         	movff	memset@p+1,fsr2h
  8703  003AC2  C01D  FFDF         	movff	memset@c,indf2
  8704  003AC6  4A21               	infsnz	memset@p,f,c
  8705  003AC8  2A22               	incf	memset@p+1,f,c
  8706  003ACA  D000               	goto	l3109
  8707  003ACC                     l3109:
  8708  003ACC  061F               	decf	memset@n,f,c
  8709  003ACE  A0D8               	btfss	status,0,c
  8710  003AD0  0620               	decf	memset@n+1,f,c
  8711  003AD2  281F               	incf	memset@n,w,c
  8712  003AD4  E1F2               	bnz	l3105
  8713  003AD6  2820               	incf	memset@n+1,w,c
  8714  003AD8  A4D8               	btfss	status,2,c
  8715  003ADA  D7EF               	goto	l3105
  8716                           
  8717                           ;	Return value of _memset is never used
  8718  003ADC  0012               	return		;funcret
  8719  003ADE                     __end_of_memset:
  8720                           	opt stack 0
  8721                           tosu	equ	0xFFF
  8722                           tosh	equ	0xFFE
  8723                           tosl	equ	0xFFD
  8724                           pclath	equ	0xFFA
  8725                           tblptru	equ	0xFF8
  8726                           tblptrh	equ	0xFF7
  8727                           tblptrl	equ	0xFF6
  8728                           tablat	equ	0xFF5
  8729                           prodh	equ	0xFF4
  8730                           prodl	equ	0xFF3
  8731                           intcon	equ	0xFF2
  8732                           intcon2	equ	0xFF1
  8733                           postinc0	equ	0xFEE
  8734                           wreg	equ	0xFE8
  8735                           postinc1	equ	0xFE6
  8736                           postdec1	equ	0xFE5
  8737                           fsr1h	equ	0xFE2
  8738                           fsr1l	equ	0xFE1
  8739                           indf2	equ	0xFDF
  8740                           postinc2	equ	0xFDE
  8741                           postdec2	equ	0xFDD
  8742                           plusw2	equ	0xFDB
  8743                           fsr2h	equ	0xFDA
  8744                           fsr2l	equ	0xFD9
  8745                           status	equ	0xFD8
  8746                           
  8747 ;; *************** function _ADC_Initialize *****************
  8748 ;; Defined at:
  8749 ;;		line 13 in file "mcc_generated_files/adc.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;		None
  8752 ;; Auto vars:     Size  Location     Type
  8753 ;;		None
  8754 ;; Return value:  Size  Location     Type
  8755 ;;		None               void
  8756 ;; Registers used:
  8757 ;;		wreg, status,2
  8758 ;; Tracked objects:
  8759 ;;		On entry : 0/0
  8760 ;;		On exit  : 0/0
  8761 ;;		Unchanged: 0/0
  8762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8763 ;;      Params:         0       0       0       0       0       0       0
  8764 ;;      Locals:         0       0       0       0       0       0       0
  8765 ;;      Temps:          0       0       0       0       0       0       0
  8766 ;;      Totals:         0       0       0       0       0       0       0
  8767 ;;Total ram usage:        0 bytes
  8768 ;; Hardware stack levels used:    1
  8769 ;; Hardware stack levels required when called:    4
  8770 ;; This function calls:
  8771 ;;		Nothing
  8772 ;; This function is called by:
  8773 ;;		_SYSTEM_Initialize
  8774 ;; This function uses a non-reentrant model
  8775 ;;
  8776                           
  8777                           	psect	text44
  8778  003C20                     __ptext44:
  8779                           	opt stack 0
  8780  003C20                     _ADC_Initialize:
  8781                           	opt stack 25
  8782                           
  8783                           ;adc.c: 18: ADCON0 = 0x01;
  8784                           
  8785                           ;incstack = 0
  8786  003C20  0E01               	movlw	1
  8787  003C22  6EC2               	movwf	4034,c	;volatile
  8788                           
  8789                           ;adc.c: 21: ADCON1 = 0x80;
  8790  003C24  0E80               	movlw	128
  8791  003C26  6EC1               	movwf	4033,c	;volatile
  8792                           
  8793                           ;adc.c: 24: ADCON2 = 0xA9;
  8794  003C28  0EA9               	movlw	169
  8795  003C2A  6EC0               	movwf	4032,c	;volatile
  8796                           
  8797                           ;adc.c: 27: ADRESL = 0x00;
  8798  003C2C  0E00               	movlw	0
  8799  003C2E  6EC3               	movwf	4035,c	;volatile
  8800                           
  8801                           ;adc.c: 30: ADRESH = 0x00;
  8802  003C30  0E00               	movlw	0
  8803  003C32  6EC4               	movwf	4036,c	;volatile
  8804                           
  8805                           ;adc.c: 33: PIE1bits.ADIE = 1;
  8806  003C34  8C9D               	bsf	3997,6,c	;volatile
  8807  003C36  0012               	return		;funcret
  8808  003C38                     __end_of_ADC_Initialize:
  8809                           	opt stack 0
  8810                           tosu	equ	0xFFF
  8811                           tosh	equ	0xFFE
  8812                           tosl	equ	0xFFD
  8813                           pclath	equ	0xFFA
  8814                           tblptru	equ	0xFF8
  8815                           tblptrh	equ	0xFF7
  8816                           tblptrl	equ	0xFF6
  8817                           tablat	equ	0xFF5
  8818                           prodh	equ	0xFF4
  8819                           prodl	equ	0xFF3
  8820                           intcon	equ	0xFF2
  8821                           intcon2	equ	0xFF1
  8822                           postinc0	equ	0xFEE
  8823                           wreg	equ	0xFE8
  8824                           postinc1	equ	0xFE6
  8825                           postdec1	equ	0xFE5
  8826                           fsr1h	equ	0xFE2
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           postinc2	equ	0xFDE
  8830                           postdec2	equ	0xFDD
  8831                           plusw2	equ	0xFDB
  8832                           fsr2h	equ	0xFDA
  8833                           fsr2l	equ	0xFD9
  8834                           status	equ	0xFD8
  8835                           
  8836 ;; *************** function _RunBypas *****************
  8837 ;; Defined at:
  8838 ;;		line 129 in file "Bypass.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;		None
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;  batvolt         3    2[BANK0 ] float 
  8843 ;;  i               2    5[BANK0 ] int 
  8844 ;;  cellbyp         2    0[BANK0 ] int 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  2  413[None  ] int 
  8847 ;; Registers used:
  8848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8854 ;;      Params:         0       0       0       0       0       0       0
  8855 ;;      Locals:         0       7       0       0       0       0       0
  8856 ;;      Temps:          0       0       0       0       0       0       0
  8857 ;;      Totals:         0       7       0       0       0       0       0
  8858 ;;Total ram usage:        7 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    6
  8861 ;; This function calls:
  8862 ;;		_Battery_Get
  8863 ;;		_SetBypass
  8864 ;;		___ftge
  8865 ;; This function is called by:
  8866 ;;		_main
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           	psect	text45
  8871  002B72                     __ptext45:
  8872                           	opt stack 0
  8873  002B72                     _RunBypas:
  8874                           	opt stack 24
  8875                           
  8876                           ;Bypass.c: 131: int cellbyp = 0;
  8877                           
  8878                           ;incstack = 0
  8879  002B72  0E00               	movlw	0
  8880  002B74  0100               	movlb	0	; () banked
  8881  002B76  6FC2               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8882  002B78  0E00               	movlw	0
  8883  002B7A  6FC1               	movwf	RunBypas@cellbyp& (0+255),b
  8884                           
  8885                           ;Bypass.c: 132: int i = 0;
  8886  002B7C  0E00               	movlw	0
  8887  002B7E  0100               	movlb	0	; () banked
  8888  002B80  6FC7               	movwf	(RunBypas@i+1)& (0+255),b
  8889  002B82  0E00               	movlw	0
  8890  002B84  6FC6               	movwf	RunBypas@i& (0+255),b
  8891                           
  8892                           ;Bypass.c: 133: float batvolt = 0;
  8893  002B86  0E00               	movlw	0
  8894  002B88  0100               	movlb	0	; () banked
  8895  002B8A  6FC3               	movwf	RunBypas@batvolt& (0+255),b
  8896  002B8C  0E00               	movlw	0
  8897  002B8E  0100               	movlb	0	; () banked
  8898  002B90  6FC4               	movwf	(RunBypas@batvolt+1)& (0+255),b
  8899  002B92  0E00               	movlw	0
  8900  002B94  0100               	movlb	0	; () banked
  8901  002B96  6FC5               	movwf	(RunBypas@batvolt+2)& (0+255),b
  8902                           
  8903                           ;Bypass.c: 135: for(i = 0; i<=9;i++)
  8904  002B98  0E00               	movlw	0
  8905  002B9A  0100               	movlb	0	; () banked
  8906  002B9C  6FC7               	movwf	(RunBypas@i+1)& (0+255),b
  8907  002B9E  0E00               	movlw	0
  8908  002BA0  6FC6               	movwf	RunBypas@i& (0+255),b
  8909  002BA2                     l5409:
  8910                           
  8911                           ; BSR set to: 0
  8912  002BA2  0100               	movlb	0	; () banked
  8913  002BA4  BFC7               	btfsc	(RunBypas@i+1)& (0+255),7,b
  8914  002BA6  D00A               	goto	l5413
  8915  002BA8  0100               	movlb	0	; () banked
  8916  002BAA  51C7               	movf	(RunBypas@i+1)& (0+255),w,b
  8917  002BAC  E153               	bnz	l533
  8918  002BAE  0E0A               	movlw	10
  8919  002BB0  0100               	movlb	0	; () banked
  8920  002BB2  5DC6               	subwf	RunBypas@i& (0+255),w,b
  8921  002BB4  B0D8               	btfsc	status,0,c
  8922  002BB6  0012               	return	
  8923  002BB8  D001               	goto	l5413
  8924                           
  8925                           ; BSR set to: 0
  8926  002BBA  0012               	return	
  8927  002BBC                     l5413:
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;Bypass.c: 136: {
  8931                           ;Bypass.c: 137: batvolt = Battery_Get(i);
  8932  002BBC  C0C6  F021         	movff	RunBypas@i,Battery_Get@channelnum
  8933  002BC0  C0C7  F022         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  8934  002BC4  EC12  F01D         	call	_Battery_Get	;wreg free
  8935  002BC8  C021  F0C3         	movff	?_Battery_Get,RunBypas@batvolt
  8936  002BCC  C022  F0C4         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  8937  002BD0  C023  F0C5         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  8938                           
  8939                           ;Bypass.c: 139: if(batvolt >= 4.18)
  8940  002BD4  C0C3  F021         	movff	RunBypas@batvolt,___ftge@ff1
  8941  002BD8  C0C4  F022         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  8942  002BDC  C0C5  F023         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  8943  002BE0  0EC3               	movlw	195
  8944  002BE2  6E24               	movwf	___ftge@ff2,c
  8945  002BE4  0E85               	movlw	133
  8946  002BE6  6E25               	movwf	___ftge@ff2+1,c
  8947  002BE8  0E40               	movlw	64
  8948  002BEA  6E26               	movwf	___ftge@ff2+2,c
  8949  002BEC  ECED  F018         	call	___ftge	;wreg free
  8950  002BF0  A0D8               	btfss	status,0,c
  8951  002BF2  D010               	goto	l5421
  8952                           
  8953                           ;Bypass.c: 140: {
  8954                           ;Bypass.c: 141: SetBypass(i,1);
  8955  002BF4  C0C6  F01B         	movff	RunBypas@i,SetBypass@pin
  8956  002BF8  C0C7  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8957  002BFC  0E00               	movlw	0
  8958  002BFE  6E1E               	movwf	SetBypass@state+1,c
  8959  002C00  0E01               	movlw	1
  8960  002C02  6E1D               	movwf	SetBypass@state,c
  8961  002C04  ECCB  F014         	call	_SetBypass	;wreg free
  8962                           
  8963                           ;Bypass.c: 142: cellbyp = 1;
  8964  002C08  0E00               	movlw	0
  8965  002C0A  0100               	movlb	0	; () banked
  8966  002C0C  6FC2               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8967  002C0E  0E01               	movlw	1
  8968  002C10  6FC1               	movwf	RunBypas@cellbyp& (0+255),b
  8969  002C12  D000               	goto	l5421
  8970  002C14                     l5421:
  8971                           
  8972                           ;Bypass.c: 143: }
  8973                           ;Bypass.c: 144: if(batvolt <= 4.15)
  8974  002C14  0ECD               	movlw	205
  8975  002C16  6E21               	movwf	___ftge@ff1,c
  8976  002C18  0E84               	movlw	132
  8977  002C1A  6E22               	movwf	___ftge@ff1+1,c
  8978  002C1C  0E40               	movlw	64
  8979  002C1E  6E23               	movwf	___ftge@ff1+2,c
  8980  002C20  C0C3  F024         	movff	RunBypas@batvolt,___ftge@ff2
  8981  002C24  C0C4  F025         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  8982  002C28  C0C5  F026         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  8983  002C2C  ECED  F018         	call	___ftge	;wreg free
  8984  002C30  A0D8               	btfss	status,0,c
  8985  002C32  D00B               	goto	l5425
  8986                           
  8987                           ;Bypass.c: 145: {
  8988                           ;Bypass.c: 146: SetBypass(i,0);
  8989  002C34  C0C6  F01B         	movff	RunBypas@i,SetBypass@pin
  8990  002C38  C0C7  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8991  002C3C  0E00               	movlw	0
  8992  002C3E  6E1E               	movwf	SetBypass@state+1,c
  8993  002C40  0E00               	movlw	0
  8994  002C42  6E1D               	movwf	SetBypass@state,c
  8995  002C44  ECCB  F014         	call	_SetBypass	;wreg free
  8996  002C48  D000               	goto	l5425
  8997  002C4A                     l5425:
  8998  002C4A  0100               	movlb	0	; () banked
  8999  002C4C  4BC6               	infsnz	RunBypas@i& (0+255),f,b
  9000  002C4E  2BC7               	incf	(RunBypas@i+1)& (0+255),f,b
  9001  002C50  D7A8               	goto	l5409
  9002                           
  9003                           ; BSR set to: 0
  9004  002C52  0012               	return	
  9005  002C54                     l533:
  9006                           
  9007                           ; BSR set to: 0
  9008  002C54  0012               	return		;funcret
  9009  002C56                     __end_of_RunBypas:
  9010                           	opt stack 0
  9011                           tosu	equ	0xFFF
  9012                           tosh	equ	0xFFE
  9013                           tosl	equ	0xFFD
  9014                           pclath	equ	0xFFA
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           intcon	equ	0xFF2
  9022                           intcon2	equ	0xFF1
  9023                           postinc0	equ	0xFEE
  9024                           wreg	equ	0xFE8
  9025                           postinc1	equ	0xFE6
  9026                           postdec1	equ	0xFE5
  9027                           fsr1h	equ	0xFE2
  9028                           fsr1l	equ	0xFE1
  9029                           indf2	equ	0xFDF
  9030                           postinc2	equ	0xFDE
  9031                           postdec2	equ	0xFDD
  9032                           plusw2	equ	0xFDB
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function _SetBypass *****************
  9038 ;; Defined at:
  9039 ;;		line 18 in file "Bypass.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  pin             2   26[COMRAM] int 
  9042 ;;  state           2   28[COMRAM] int 
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;		None
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  2   26[COMRAM] int 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9054 ;;      Params:         4       0       0       0       0       0       0
  9055 ;;      Locals:         0       0       0       0       0       0       0
  9056 ;;      Temps:          2       0       0       0       0       0       0
  9057 ;;      Totals:         6       0       0       0       0       0       0
  9058 ;;Total ram usage:        6 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    4
  9061 ;; This function calls:
  9062 ;;		Nothing
  9063 ;; This function is called by:
  9064 ;;		_RunBypas
  9065 ;; This function uses a non-reentrant model
  9066 ;;
  9067                           
  9068                           	psect	text46
  9069  002996                     __ptext46:
  9070                           	opt stack 0
  9071  002996                     _SetBypass:
  9072                           	opt stack 25
  9073                           
  9074                           ;Bypass.c: 20: switch (pin) {
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;incstack = 0
  9078  002996  D050               	goto	l5031
  9079  002998                     l5009:
  9080                           
  9081                           ;Bypass.c: 22: if (state)
  9082  002998  501D               	movf	SetBypass@state,w,c
  9083  00299A  101E               	iorwf	SetBypass@state+1,w,c
  9084  00299C  B4D8               	btfsc	status,2,c
  9085  00299E  D002               	goto	l460
  9086                           
  9087                           ;Bypass.c: 23: {
  9088                           ;Bypass.c: 24: do { LATC5 = 1; } while(0);
  9089  0029A0  8A8B               	bsf	3979,5,c	;volatile
  9090                           
  9091                           ;Bypass.c: 25: }
  9092  0029A2  0012               	return	
  9093  0029A4                     l460:
  9094  0029A4  9A8B               	bcf	3979,5,c	;volatile
  9095                           
  9096                           ;Bypass.c: 29: }
  9097                           ;Bypass.c: 30: break;
  9098  0029A6  0012               	return	
  9099  0029A8                     l5011:
  9100                           
  9101                           ;Bypass.c: 32: if (state)
  9102  0029A8  501D               	movf	SetBypass@state,w,c
  9103  0029AA  101E               	iorwf	SetBypass@state+1,w,c
  9104  0029AC  B4D8               	btfsc	status,2,c
  9105  0029AE  D002               	goto	l468
  9106                           
  9107                           ;Bypass.c: 33: {
  9108                           ;Bypass.c: 34: do { LATC4 = 1; } while(0);
  9109  0029B0  888B               	bsf	3979,4,c	;volatile
  9110                           
  9111                           ;Bypass.c: 35: }
  9112  0029B2  0012               	return	
  9113  0029B4                     l468:
  9114  0029B4  988B               	bcf	3979,4,c	;volatile
  9115                           
  9116                           ;Bypass.c: 39: }
  9117                           ;Bypass.c: 40: break;
  9118  0029B6  0012               	return	
  9119  0029B8                     l5013:
  9120                           
  9121                           ;Bypass.c: 42: if (state)
  9122  0029B8  501D               	movf	SetBypass@state,w,c
  9123  0029BA  101E               	iorwf	SetBypass@state+1,w,c
  9124  0029BC  B4D8               	btfsc	status,2,c
  9125  0029BE  D002               	goto	l475
  9126                           
  9127                           ;Bypass.c: 43: {
  9128                           ;Bypass.c: 44: do { LATD3 = 1; } while(0);
  9129  0029C0  868C               	bsf	3980,3,c	;volatile
  9130                           
  9131                           ;Bypass.c: 45: }
  9132  0029C2  0012               	return	
  9133  0029C4                     l475:
  9134  0029C4  968C               	bcf	3980,3,c	;volatile
  9135                           
  9136                           ;Bypass.c: 49: }
  9137                           ;Bypass.c: 50: break;
  9138  0029C6  0012               	return	
  9139  0029C8                     l5015:
  9140                           
  9141                           ;Bypass.c: 52: if (state)
  9142  0029C8  501D               	movf	SetBypass@state,w,c
  9143  0029CA  101E               	iorwf	SetBypass@state+1,w,c
  9144  0029CC  B4D8               	btfsc	status,2,c
  9145  0029CE  D002               	goto	l482
  9146                           
  9147                           ;Bypass.c: 53: {
  9148                           ;Bypass.c: 54: do { LATD2 = 1; } while(0);
  9149  0029D0  848C               	bsf	3980,2,c	;volatile
  9150                           
  9151                           ;Bypass.c: 55: }
  9152  0029D2  0012               	return	
  9153  0029D4                     l482:
  9154  0029D4  948C               	bcf	3980,2,c	;volatile
  9155                           
  9156                           ;Bypass.c: 59: }
  9157                           ;Bypass.c: 60: break;
  9158  0029D6  0012               	return	
  9159  0029D8                     l5017:
  9160                           
  9161                           ;Bypass.c: 62: if (state)
  9162  0029D8  501D               	movf	SetBypass@state,w,c
  9163  0029DA  101E               	iorwf	SetBypass@state+1,w,c
  9164  0029DC  B4D8               	btfsc	status,2,c
  9165  0029DE  D002               	goto	l489
  9166                           
  9167                           ;Bypass.c: 63: {
  9168                           ;Bypass.c: 64: do { LATD1 = 1; } while(0);
  9169  0029E0  828C               	bsf	3980,1,c	;volatile
  9170                           
  9171                           ;Bypass.c: 65: }
  9172  0029E2  0012               	return	
  9173  0029E4                     l489:
  9174  0029E4  928C               	bcf	3980,1,c	;volatile
  9175                           
  9176                           ;Bypass.c: 69: }
  9177                           ;Bypass.c: 70: break;
  9178  0029E6  0012               	return	
  9179  0029E8                     l5019:
  9180                           
  9181                           ;Bypass.c: 72: if (state)
  9182  0029E8  501D               	movf	SetBypass@state,w,c
  9183  0029EA  101E               	iorwf	SetBypass@state+1,w,c
  9184  0029EC  B4D8               	btfsc	status,2,c
  9185  0029EE  D002               	goto	l496
  9186                           
  9187                           ;Bypass.c: 73: {
  9188                           ;Bypass.c: 74: do { LATD5 = 1; } while(0);
  9189  0029F0  8A8C               	bsf	3980,5,c	;volatile
  9190                           
  9191                           ;Bypass.c: 75: }
  9192  0029F2  0012               	return	
  9193  0029F4                     l496:
  9194  0029F4  9A8C               	bcf	3980,5,c	;volatile
  9195                           
  9196                           ;Bypass.c: 79: }
  9197                           ;Bypass.c: 80: break;
  9198  0029F6  0012               	return	
  9199  0029F8                     l5021:
  9200                           
  9201                           ;Bypass.c: 82: if (state)
  9202  0029F8  501D               	movf	SetBypass@state,w,c
  9203  0029FA  101E               	iorwf	SetBypass@state+1,w,c
  9204  0029FC  B4D8               	btfsc	status,2,c
  9205  0029FE  D002               	goto	l503
  9206                           
  9207                           ;Bypass.c: 83: {
  9208                           ;Bypass.c: 84: do { LATB0 = 1; } while(0);
  9209  002A00  808A               	bsf	3978,0,c	;volatile
  9210                           
  9211                           ;Bypass.c: 85: }
  9212  002A02  0012               	return	
  9213  002A04                     l503:
  9214  002A04  908A               	bcf	3978,0,c	;volatile
  9215                           
  9216                           ;Bypass.c: 89: }
  9217                           ;Bypass.c: 90: break;
  9218  002A06  0012               	return	
  9219  002A08                     l5023:
  9220                           
  9221                           ;Bypass.c: 92: if (state)
  9222  002A08  501D               	movf	SetBypass@state,w,c
  9223  002A0A  101E               	iorwf	SetBypass@state+1,w,c
  9224  002A0C  B4D8               	btfsc	status,2,c
  9225  002A0E  D002               	goto	l510
  9226                           
  9227                           ;Bypass.c: 93: {
  9228                           ;Bypass.c: 94: do { LATB1 = 1; } while(0);
  9229  002A10  828A               	bsf	3978,1,c	;volatile
  9230                           
  9231                           ;Bypass.c: 95: }
  9232  002A12  0012               	return	
  9233  002A14                     l510:
  9234  002A14  928A               	bcf	3978,1,c	;volatile
  9235                           
  9236                           ;Bypass.c: 99: }
  9237                           ;Bypass.c: 100: break;
  9238  002A16  0012               	return	
  9239  002A18                     l5025:
  9240                           
  9241                           ;Bypass.c: 102: if (state)
  9242  002A18  501D               	movf	SetBypass@state,w,c
  9243  002A1A  101E               	iorwf	SetBypass@state+1,w,c
  9244  002A1C  B4D8               	btfsc	status,2,c
  9245  002A1E  D002               	goto	l517
  9246                           
  9247                           ;Bypass.c: 103: {
  9248                           ;Bypass.c: 104: do { LATB3 = 1; } while(0);
  9249  002A20  868A               	bsf	3978,3,c	;volatile
  9250                           
  9251                           ;Bypass.c: 105: }
  9252  002A22  0012               	return	
  9253  002A24                     l517:
  9254  002A24  968A               	bcf	3978,3,c	;volatile
  9255                           
  9256                           ;Bypass.c: 109: }
  9257                           ;Bypass.c: 110: break;
  9258  002A26  0012               	return	
  9259  002A28                     l5027:
  9260                           
  9261                           ;Bypass.c: 112: if (state)
  9262  002A28  501D               	movf	SetBypass@state,w,c
  9263  002A2A  101E               	iorwf	SetBypass@state+1,w,c
  9264  002A2C  B4D8               	btfsc	status,2,c
  9265  002A2E  D002               	goto	l524
  9266                           
  9267                           ;Bypass.c: 113: {
  9268                           ;Bypass.c: 114: do { LATA0 = 1; } while(0);
  9269  002A30  8089               	bsf	3977,0,c	;volatile
  9270                           
  9271                           ;Bypass.c: 115: }
  9272  002A32  0012               	return	
  9273  002A34                     l524:
  9274  002A34  9089               	bcf	3977,0,c	;volatile
  9275                           
  9276                           ;Bypass.c: 121: }
  9277                           
  9278                           ;Bypass.c: 119: }
  9279                           ;Bypass.c: 120: break;
  9280  002A36  0012               	return	
  9281  002A38                     l5031:
  9282  002A38  C01B  F01F         	movff	SetBypass@pin,??_SetBypass
  9283  002A3C  C01C  F020         	movff	SetBypass@pin+1,??_SetBypass+1
  9284                           
  9285                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9286                           ; Switch size 1, requested type "space"
  9287                           ; Number of cases is 1, Range of values is 0 to 0
  9288                           ; switch strategies available:
  9289                           ; Name         Instructions Cycles
  9290                           ; simple_byte            4     3 (average)
  9291                           ;	Chosen strategy is simple_byte
  9292  002A40  5020               	movf	??_SetBypass+1,w,c
  9293  002A42  0A00               	xorlw	0	; case 0
  9294  002A44  A4D8               	btfss	status,2,c
  9295  002A46  0012               	return	
  9296                           
  9297                           ; Switch size 1, requested type "space"
  9298                           ; Number of cases is 10, Range of values is 0 to 9
  9299                           ; switch strategies available:
  9300                           ; Name         Instructions Cycles
  9301                           ; simple_byte           31    16 (average)
  9302                           ;	Chosen strategy is simple_byte
  9303  002A48  501F               	movf	??_SetBypass,w,c
  9304  002A4A  0A00               	xorlw	0	; case 0
  9305  002A4C  B4D8               	btfsc	status,2,c
  9306  002A4E  D7A4               	goto	l5009
  9307  002A50  0A01               	xorlw	1	; case 1
  9308  002A52  B4D8               	btfsc	status,2,c
  9309  002A54  D7A9               	goto	l5011
  9310  002A56  0A03               	xorlw	3	; case 2
  9311  002A58  B4D8               	btfsc	status,2,c
  9312  002A5A  D7AE               	goto	l5013
  9313  002A5C  0A01               	xorlw	1	; case 3
  9314  002A5E  B4D8               	btfsc	status,2,c
  9315  002A60  D7B3               	goto	l5015
  9316  002A62  0A07               	xorlw	7	; case 4
  9317  002A64  B4D8               	btfsc	status,2,c
  9318  002A66  D7B8               	goto	l5017
  9319  002A68  0A01               	xorlw	1	; case 5
  9320  002A6A  B4D8               	btfsc	status,2,c
  9321  002A6C  D7BD               	goto	l5019
  9322  002A6E  0A03               	xorlw	3	; case 6
  9323  002A70  B4D8               	btfsc	status,2,c
  9324  002A72  D7C2               	goto	l5021
  9325  002A74  0A01               	xorlw	1	; case 7
  9326  002A76  B4D8               	btfsc	status,2,c
  9327  002A78  D7C7               	goto	l5023
  9328  002A7A  0A0F               	xorlw	15	; case 8
  9329  002A7C  B4D8               	btfsc	status,2,c
  9330  002A7E  D7CC               	goto	l5025
  9331  002A80  0A01               	xorlw	1	; case 9
  9332  002A82  A4D8               	btfss	status,2,c
  9333  002A84  0012               	return	
  9334  002A86  D7D0               	goto	l5027
  9335  002A88  0012               	return		;funcret
  9336  002A8A                     __end_of_SetBypass:
  9337                           	opt stack 0
  9338                           tosu	equ	0xFFF
  9339                           tosh	equ	0xFFE
  9340                           tosl	equ	0xFFD
  9341                           pclath	equ	0xFFA
  9342                           tblptru	equ	0xFF8
  9343                           tblptrh	equ	0xFF7
  9344                           tblptrl	equ	0xFF6
  9345                           tablat	equ	0xFF5
  9346                           prodh	equ	0xFF4
  9347                           prodl	equ	0xFF3
  9348                           intcon	equ	0xFF2
  9349                           intcon2	equ	0xFF1
  9350                           postinc0	equ	0xFEE
  9351                           wreg	equ	0xFE8
  9352                           postinc1	equ	0xFE6
  9353                           postdec1	equ	0xFE5
  9354                           fsr1h	equ	0xFE2
  9355                           fsr1l	equ	0xFE1
  9356                           indf2	equ	0xFDF
  9357                           postinc2	equ	0xFDE
  9358                           postdec2	equ	0xFDD
  9359                           plusw2	equ	0xFDB
  9360                           fsr2h	equ	0xFDA
  9361                           fsr2l	equ	0xFD9
  9362                           status	equ	0xFD8
  9363                           
  9364 ;; *************** function _Battery_Get *****************
  9365 ;; Defined at:
  9366 ;;		line 84 in file "Battery.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;  channelnum      2   32[COMRAM] int 
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;		None
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  3   32[COMRAM] float 
  9373 ;; Registers used:
  9374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9380 ;;      Params:         3       0       0       0       0       0       0
  9381 ;;      Locals:         0       0       0       0       0       0       0
  9382 ;;      Temps:          0       0       0       0       0       0       0
  9383 ;;      Totals:         3       0       0       0       0       0       0
  9384 ;;Total ram usage:        3 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    5
  9387 ;; This function calls:
  9388 ;;		___wmul
  9389 ;; This function is called by:
  9390 ;;		_RunBypas
  9391 ;;		_updateComms
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           	psect	text47
  9396  003A24                     __ptext47:
  9397                           	opt stack 0
  9398  003A24                     _Battery_Get:
  9399                           	opt stack 24
  9400                           
  9401                           ;Battery.c: 86: return Battery_Volt[channelnum];
  9402                           
  9403                           ;incstack = 0
  9404  003A24  C021  F01B         	movff	Battery_Get@channelnum,___wmul@multiplier
  9405  003A28  C022  F01C         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  9406  003A2C  0E00               	movlw	0
  9407  003A2E  6E1E               	movwf	___wmul@multiplicand+1,c
  9408  003A30  0E03               	movlw	3
  9409  003A32  6E1D               	movwf	___wmul@multiplicand,c
  9410  003A34  EC86  F01D         	call	___wmul	;wreg free
  9411  003A38  0EA0               	movlw	low _Battery_Volt
  9412  003A3A  241B               	addwf	?___wmul,w,c
  9413  003A3C  6ED9               	movwf	fsr2l,c
  9414  003A3E  0E01               	movlw	high _Battery_Volt
  9415  003A40  201C               	addwfc	?___wmul+1,w,c
  9416  003A42  6EDA               	movwf	fsr2h,c
  9417  003A44  CFDE F021          	movff	postinc2,?_Battery_Get
  9418  003A48  CFDE F022          	movff	postinc2,?_Battery_Get+1
  9419  003A4C  CFDD F023          	movff	postdec2,?_Battery_Get+2
  9420  003A50  0012               	return	
  9421  003A52  0012               	return		;funcret
  9422  003A54                     __end_of_Battery_Get:
  9423                           	opt stack 0
  9424                           tosu	equ	0xFFF
  9425                           tosh	equ	0xFFE
  9426                           tosl	equ	0xFFD
  9427                           pclath	equ	0xFFA
  9428                           tblptru	equ	0xFF8
  9429                           tblptrh	equ	0xFF7
  9430                           tblptrl	equ	0xFF6
  9431                           tablat	equ	0xFF5
  9432                           prodh	equ	0xFF4
  9433                           prodl	equ	0xFF3
  9434                           intcon	equ	0xFF2
  9435                           intcon2	equ	0xFF1
  9436                           postinc0	equ	0xFEE
  9437                           wreg	equ	0xFE8
  9438                           postinc1	equ	0xFE6
  9439                           postdec1	equ	0xFE5
  9440                           fsr1h	equ	0xFE2
  9441                           fsr1l	equ	0xFE1
  9442                           indf2	equ	0xFDF
  9443                           postinc2	equ	0xFDE
  9444                           postdec2	equ	0xFDD
  9445                           plusw2	equ	0xFDB
  9446                           fsr2h	equ	0xFDA
  9447                           fsr2l	equ	0xFD9
  9448                           status	equ	0xFD8
  9449                           
  9450 ;; *************** function _Battery_Fault *****************
  9451 ;; Defined at:
  9452 ;;		line 66 in file "Battery.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;		None
  9455 ;; Auto vars:     Size  Location     Type
  9456 ;;  i               2   42[COMRAM] int 
  9457 ;;  fault           1   41[COMRAM] unsigned char 
  9458 ;; Return value:  Size  Location     Type
  9459 ;;                  1    wreg      unsigned char 
  9460 ;; Registers used:
  9461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9462 ;; Tracked objects:
  9463 ;;		On entry : 0/0
  9464 ;;		On exit  : 0/0
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9467 ;;      Params:         0       0       0       0       0       0       0
  9468 ;;      Locals:         3       0       0       0       0       0       0
  9469 ;;      Temps:          0       0       0       0       0       0       0
  9470 ;;      Totals:         3       0       0       0       0       0       0
  9471 ;;Total ram usage:        3 bytes
  9472 ;; Hardware stack levels used:    1
  9473 ;; Hardware stack levels required when called:    5
  9474 ;; This function calls:
  9475 ;;		___ftge
  9476 ;;		___wmul
  9477 ;; This function is called by:
  9478 ;;		_main
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text48
  9483  003094                     __ptext48:
  9484                           	opt stack 0
  9485  003094                     _Battery_Fault:
  9486                           	opt stack 25
  9487                           
  9488                           ;Battery.c: 67: char fault = 0;
  9489                           
  9490                           ;incstack = 0
  9491  003094  0E00               	movlw	0
  9492  003096  6E2A               	movwf	Battery_Fault@fault,c
  9493                           
  9494                           ;Battery.c: 68: for (int i = 0; i <= 9; i++) {
  9495  003098  0E00               	movlw	0
  9496  00309A  6E2C               	movwf	Battery_Fault@i+1,c
  9497  00309C  0E00               	movlw	0
  9498  00309E  6E2B               	movwf	Battery_Fault@i,c
  9499  0030A0                     l5347:
  9500  0030A0  BE2C               	btfsc	Battery_Fault@i+1,7,c
  9501  0030A2  D008               	goto	l5351
  9502  0030A4  502C               	movf	Battery_Fault@i+1,w,c
  9503  0030A6  E14D               	bnz	l302
  9504  0030A8  0E0A               	movlw	10
  9505  0030AA  5C2B               	subwf	Battery_Fault@i,w,c
  9506  0030AC  B0D8               	btfsc	status,0,c
  9507  0030AE  0012               	return	
  9508  0030B0  D001               	goto	l5351
  9509  0030B2  0012               	return	
  9510  0030B4                     l5351:
  9511                           
  9512                           ;Battery.c: 69: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i])) {
  9513  0030B4  0E00               	movlw	0
  9514  0030B6  6E21               	movwf	___ftge@ff1,c
  9515  0030B8  0E40               	movlw	64
  9516  0030BA  6E22               	movwf	___ftge@ff1+1,c
  9517  0030BC  0E40               	movlw	64
  9518  0030BE  6E23               	movwf	___ftge@ff1+2,c
  9519  0030C0  C02B  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9520  0030C4  C02C  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9521  0030C8  0E00               	movlw	0
  9522  0030CA  6E1E               	movwf	___wmul@multiplicand+1,c
  9523  0030CC  0E03               	movlw	3
  9524  0030CE  6E1D               	movwf	___wmul@multiplicand,c
  9525  0030D0  EC86  F01D         	call	___wmul	;wreg free
  9526  0030D4  0EA0               	movlw	low _Battery_Volt
  9527  0030D6  241B               	addwf	?___wmul,w,c
  9528  0030D8  6ED9               	movwf	fsr2l,c
  9529  0030DA  0E01               	movlw	high _Battery_Volt
  9530  0030DC  201C               	addwfc	?___wmul+1,w,c
  9531  0030DE  6EDA               	movwf	fsr2h,c
  9532  0030E0  CFDE F024          	movff	postinc2,___ftge@ff2
  9533  0030E4  CFDE F025          	movff	postinc2,___ftge@ff2+1
  9534  0030E8  CFDD F026          	movff	postdec2,___ftge@ff2+2
  9535  0030EC  ECED  F018         	call	___ftge	;wreg free
  9536  0030F0  B0D8               	btfsc	status,0,c
  9537  0030F2  D023               	goto	l5357
  9538  0030F4  C02B  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9539  0030F8  C02C  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9540  0030FC  0E00               	movlw	0
  9541  0030FE  6E1E               	movwf	___wmul@multiplicand+1,c
  9542  003100  0E03               	movlw	3
  9543  003102  6E1D               	movwf	___wmul@multiplicand,c
  9544  003104  EC86  F01D         	call	___wmul	;wreg free
  9545  003108  0EA0               	movlw	low _Battery_Volt
  9546  00310A  241B               	addwf	?___wmul,w,c
  9547  00310C  6ED9               	movwf	fsr2l,c
  9548  00310E  0E01               	movlw	high _Battery_Volt
  9549  003110  201C               	addwfc	?___wmul+1,w,c
  9550  003112  6EDA               	movwf	fsr2h,c
  9551  003114  CFDE F021          	movff	postinc2,___ftge@ff1
  9552  003118  CFDE F022          	movff	postinc2,___ftge@ff1+1
  9553  00311C  CFDD F023          	movff	postdec2,___ftge@ff1+2
  9554  003120  0EB8               	movlw	184
  9555  003122  6E24               	movwf	___ftge@ff2,c
  9556  003124  0E86               	movlw	134
  9557  003126  6E25               	movwf	___ftge@ff2+1,c
  9558  003128  0E40               	movlw	64
  9559  00312A  6E26               	movwf	___ftge@ff2+2,c
  9560  00312C  ECED  F018         	call	___ftge	;wreg free
  9561  003130  B0D8               	btfsc	status,0,c
  9562  003132  D003               	goto	l5357
  9563                           
  9564                           ;Battery.c: 70: fault = 1;
  9565  003134  0E01               	movlw	1
  9566  003136  6E2A               	movwf	Battery_Fault@fault,c
  9567  003138  D000               	goto	l5357
  9568  00313A                     l5357:
  9569  00313A  4A2B               	infsnz	Battery_Fault@i,f,c
  9570  00313C  2A2C               	incf	Battery_Fault@i+1,f,c
  9571  00313E  D7B0               	goto	l5347
  9572  003140  0012               	return	
  9573  003142                     l302:
  9574  003142  0012               	return		;funcret
  9575  003144                     __end_of_Battery_Fault:
  9576                           	opt stack 0
  9577                           tosu	equ	0xFFF
  9578                           tosh	equ	0xFFE
  9579                           tosl	equ	0xFFD
  9580                           pclath	equ	0xFFA
  9581                           tblptru	equ	0xFF8
  9582                           tblptrh	equ	0xFF7
  9583                           tblptrl	equ	0xFF6
  9584                           tablat	equ	0xFF5
  9585                           prodh	equ	0xFF4
  9586                           prodl	equ	0xFF3
  9587                           intcon	equ	0xFF2
  9588                           intcon2	equ	0xFF1
  9589                           postinc0	equ	0xFEE
  9590                           wreg	equ	0xFE8
  9591                           postinc1	equ	0xFE6
  9592                           postdec1	equ	0xFE5
  9593                           fsr1h	equ	0xFE2
  9594                           fsr1l	equ	0xFE1
  9595                           indf2	equ	0xFDF
  9596                           postinc2	equ	0xFDE
  9597                           postdec2	equ	0xFDD
  9598                           plusw2	equ	0xFDB
  9599                           fsr2h	equ	0xFDA
  9600                           fsr2l	equ	0xFD9
  9601                           status	equ	0xFD8
  9602                           
  9603 ;; *************** function ___ftge *****************
  9604 ;; Defined at:
  9605 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;  ff1             3   32[COMRAM] float 
  9608 ;;  ff2             3   35[COMRAM] float 
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;		None
  9611 ;; Return value:  Size  Location     Type
  9612 ;;		None               void
  9613 ;; Registers used:
  9614 ;;		wreg, status,2, status,0
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9620 ;;      Params:         6       0       0       0       0       0       0
  9621 ;;      Locals:         0       0       0       0       0       0       0
  9622 ;;      Temps:          3       0       0       0       0       0       0
  9623 ;;      Totals:         9       0       0       0       0       0       0
  9624 ;;Total ram usage:        9 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    4
  9627 ;; This function calls:
  9628 ;;		Nothing
  9629 ;; This function is called by:
  9630 ;;		_Battery_Fault
  9631 ;;		_Temp_Fault
  9632 ;;		_RunBypas
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           	psect	text49
  9637  0031DA                     __ptext49:
  9638                           	opt stack 0
  9639  0031DA                     ___ftge:
  9640                           	opt stack 25
  9641                           
  9642                           ;incstack = 0
  9643  0031DA  AE23               	btfss	___ftge@ff1+2,7,c
  9644  0031DC  D017               	goto	l5305
  9645  0031DE  C021  F027         	movff	___ftge@ff1,??___ftge
  9646  0031E2  C022  F028         	movff	___ftge@ff1+1,??___ftge+1
  9647  0031E6  C023  F029         	movff	___ftge@ff1+2,??___ftge+2
  9648  0031EA  1E27               	comf	??___ftge,f,c
  9649  0031EC  1E28               	comf	??___ftge+1,f,c
  9650  0031EE  1E29               	comf	??___ftge+2,f,c
  9651  0031F0  2A27               	incf	??___ftge,f,c
  9652  0031F2  0E00               	movlw	0
  9653  0031F4  2228               	addwfc	??___ftge+1,f,c
  9654  0031F6  2229               	addwfc	??___ftge+2,f,c
  9655  0031F8  0E00               	movlw	0
  9656  0031FA  2427               	addwf	??___ftge,w,c
  9657  0031FC  6E21               	movwf	___ftge@ff1,c
  9658  0031FE  0E00               	movlw	0
  9659  003200  2028               	addwfc	??___ftge+1,w,c
  9660  003202  6E22               	movwf	___ftge@ff1+1,c
  9661  003204  0E80               	movlw	128
  9662  003206  2029               	addwfc	??___ftge+2,w,c
  9663  003208  6E23               	movwf	___ftge@ff1+2,c
  9664  00320A  D000               	goto	l5305
  9665  00320C                     l5305:
  9666  00320C  AE26               	btfss	___ftge@ff2+2,7,c
  9667  00320E  D017               	goto	l5309
  9668  003210  C024  F027         	movff	___ftge@ff2,??___ftge
  9669  003214  C025  F028         	movff	___ftge@ff2+1,??___ftge+1
  9670  003218  C026  F029         	movff	___ftge@ff2+2,??___ftge+2
  9671  00321C  1E27               	comf	??___ftge,f,c
  9672  00321E  1E28               	comf	??___ftge+1,f,c
  9673  003220  1E29               	comf	??___ftge+2,f,c
  9674  003222  2A27               	incf	??___ftge,f,c
  9675  003224  0E00               	movlw	0
  9676  003226  2228               	addwfc	??___ftge+1,f,c
  9677  003228  2229               	addwfc	??___ftge+2,f,c
  9678  00322A  0E00               	movlw	0
  9679  00322C  2427               	addwf	??___ftge,w,c
  9680  00322E  6E24               	movwf	___ftge@ff2,c
  9681  003230  0E00               	movlw	0
  9682  003232  2028               	addwfc	??___ftge+1,w,c
  9683  003234  6E25               	movwf	___ftge@ff2+1,c
  9684  003236  0E80               	movlw	128
  9685  003238  2029               	addwfc	??___ftge+2,w,c
  9686  00323A  6E26               	movwf	___ftge@ff2+2,c
  9687  00323C  D000               	goto	l5309
  9688  00323E                     l5309:
  9689  00323E  0E00               	movlw	0
  9690  003240  1A21               	xorwf	___ftge@ff1,f,c
  9691  003242  0E00               	movlw	0
  9692  003244  1A22               	xorwf	___ftge@ff1+1,f,c
  9693  003246  0E80               	movlw	128
  9694  003248  1A23               	xorwf	___ftge@ff1+2,f,c
  9695  00324A  0E00               	movlw	0
  9696  00324C  1A24               	xorwf	___ftge@ff2,f,c
  9697  00324E  0E00               	movlw	0
  9698  003250  1A25               	xorwf	___ftge@ff2+1,f,c
  9699  003252  0E80               	movlw	128
  9700  003254  1A26               	xorwf	___ftge@ff2+2,f,c
  9701  003256  5024               	movf	___ftge@ff2,w,c
  9702  003258  5C21               	subwf	___ftge@ff1,w,c
  9703  00325A  5025               	movf	___ftge@ff2+1,w,c
  9704  00325C  5822               	subwfb	___ftge@ff1+1,w,c
  9705  00325E  5026               	movf	___ftge@ff2+2,w,c
  9706  003260  5823               	subwfb	___ftge@ff1+2,w,c
  9707  003262  B0D8               	btfsc	status,0,c
  9708  003264  D002               	goto	l5315
  9709  003266  90D8               	bcf	status,0,c
  9710  003268  0012               	return	
  9711  00326A                     l5315:
  9712  00326A  80D8               	bsf	status,0,c
  9713  00326C  0012               	return	
  9714  00326E  0012               	return		;funcret
  9715  003270                     __end_of___ftge:
  9716                           	opt stack 0
  9717                           tosu	equ	0xFFF
  9718                           tosh	equ	0xFFE
  9719                           tosl	equ	0xFFD
  9720                           pclath	equ	0xFFA
  9721                           tblptru	equ	0xFF8
  9722                           tblptrh	equ	0xFF7
  9723                           tblptrl	equ	0xFF6
  9724                           tablat	equ	0xFF5
  9725                           prodh	equ	0xFF4
  9726                           prodl	equ	0xFF3
  9727                           intcon	equ	0xFF2
  9728                           intcon2	equ	0xFF1
  9729                           postinc0	equ	0xFEE
  9730                           wreg	equ	0xFE8
  9731                           postinc1	equ	0xFE6
  9732                           postdec1	equ	0xFE5
  9733                           fsr1h	equ	0xFE2
  9734                           fsr1l	equ	0xFE1
  9735                           indf2	equ	0xFDF
  9736                           postinc2	equ	0xFDE
  9737                           postdec2	equ	0xFDD
  9738                           plusw2	equ	0xFDB
  9739                           fsr2h	equ	0xFDA
  9740                           fsr2l	equ	0xFD9
  9741                           status	equ	0xFD8
  9742                           
  9743 ;; *************** function _Battery_Convert *****************
  9744 ;; Defined at:
  9745 ;;		line 33 in file "Battery.c"
  9746 ;; Parameters:    Size  Location     Type
  9747 ;;		None
  9748 ;; Auto vars:     Size  Location     Type
  9749 ;;  x               2   44[BANK0 ] int 
  9750 ;; Return value:  Size  Location     Type
  9751 ;;		None               void
  9752 ;; Registers used:
  9753 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9759 ;;      Params:         0       0       0       0       0       0       0
  9760 ;;      Locals:         0       2       0       0       0       0       0
  9761 ;;      Temps:          0       2       0       0       0       0       0
  9762 ;;      Totals:         0       4       0       0       0       0       0
  9763 ;;Total ram usage:        4 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    6
  9766 ;; This function calls:
  9767 ;;		_Battery_Filter
  9768 ;;		___altoft
  9769 ;;		___ftadd
  9770 ;;		___ftdiv
  9771 ;;		___ftmul
  9772 ;;		___wmul
  9773 ;; This function is called by:
  9774 ;;		_main
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           	psect	text50
  9779  002890                     __ptext50:
  9780                           	opt stack 0
  9781  002890                     _Battery_Convert:
  9782                           	opt stack 24
  9783                           
  9784                           ;Battery.c: 34: int x;
  9785                           ;Battery.c: 35: for (x = 0; x <= 9; x++) {
  9786                           
  9787                           ;incstack = 0
  9788  002890  0E00               	movlw	0
  9789  002892  0100               	movlb	0	; () banked
  9790  002894  6FEE               	movwf	(Battery_Convert@x+1)& (0+255),b
  9791  002896  0E00               	movlw	0
  9792  002898  6FED               	movwf	Battery_Convert@x& (0+255),b
  9793  00289A                     l5333:
  9794                           
  9795                           ; BSR set to: 0
  9796  00289A  0100               	movlb	0	; () banked
  9797  00289C  BFEE               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
  9798  00289E  D00A               	goto	l5337
  9799  0028A0  0100               	movlb	0	; () banked
  9800  0028A2  51EE               	movf	(Battery_Convert@x+1)& (0+255),w,b
  9801  0028A4  E175               	bnz	l5343
  9802  0028A6  0E0A               	movlw	10
  9803  0028A8  0100               	movlb	0	; () banked
  9804  0028AA  5DED               	subwf	Battery_Convert@x& (0+255),w,b
  9805  0028AC  B0D8               	btfsc	status,0,c
  9806  0028AE  D070               	goto	l5343
  9807  0028B0  D001               	goto	l5337
  9808                           
  9809                           ; BSR set to: 0
  9810  0028B2  D06E               	goto	l5343
  9811  0028B4                     l5337:
  9812                           
  9813                           ; BSR set to: 0
  9814                           ;Battery.c: 36: TempBattery_Volt[x] = ((Battery_Adc[x] / 1024.0)*5.0) + 0.05;
  9815  0028B4  C0ED  F01B         	movff	Battery_Convert@x,___wmul@multiplier
  9816  0028B8  C0EE  F01C         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  9817  0028BC  0E00               	movlw	0
  9818  0028BE  6E1E               	movwf	___wmul@multiplicand+1,c
  9819  0028C0  0E03               	movlw	3
  9820  0028C2  6E1D               	movwf	___wmul@multiplicand,c
  9821  0028C4  EC86  F01D         	call	___wmul	;wreg free
  9822  0028C8  0E3C               	movlw	low _TempBattery_Volt
  9823  0028CA  241B               	addwf	?___wmul,w,c
  9824  0028CC  6ED9               	movwf	fsr2l,c
  9825  0028CE  0E01               	movlw	high _TempBattery_Volt
  9826  0028D0  201C               	addwfc	?___wmul+1,w,c
  9827  0028D2  6EDA               	movwf	fsr2h,c
  9828  0028D4  0E00               	movlw	0
  9829  0028D6  0100               	movlb	0	; () banked
  9830  0028D8  6FD3               	movwf	___ftmul@f2& (0+255),b
  9831  0028DA  0EA0               	movlw	160
  9832  0028DC  0100               	movlb	0	; () banked
  9833  0028DE  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  9834  0028E0  0E40               	movlw	64
  9835  0028E2  0100               	movlb	0	; () banked
  9836  0028E4  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  9837  0028E6  0E00               	movlw	0
  9838  0028E8  0100               	movlb	0	; () banked
  9839  0028EA  6FC4               	movwf	___ftdiv@f2& (0+255),b
  9840  0028EC  0E80               	movlw	128
  9841  0028EE  0100               	movlb	0	; () banked
  9842  0028F0  6FC5               	movwf	(___ftdiv@f2+1)& (0+255),b
  9843  0028F2  0E44               	movlw	68
  9844  0028F4  0100               	movlb	0	; () banked
  9845  0028F6  6FC6               	movwf	(___ftdiv@f2+2)& (0+255),b
  9846  0028F8  0E60               	movlw	low _Battery_Adc
  9847  0028FA  0100               	movlb	0	; () banked
  9848  0028FC  6FEB               	movwf	??_Battery_Convert& (0+255),b
  9849  0028FE  0E00               	movlw	high _Battery_Adc
  9850  002900  0100               	movlb	0	; () banked
  9851  002902  6FEC               	movwf	(??_Battery_Convert+1)& (0+255),b
  9852  002904  90D8               	bcf	status,0,c
  9853  002906  0100               	movlb	0	; () banked
  9854  002908  35ED               	rlcf	Battery_Convert@x& (0+255),w,b
  9855  00290A  6EE1               	movwf	fsr1l,c
  9856  00290C  0100               	movlb	0	; () banked
  9857  00290E  35EE               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  9858  002910  6EE2               	movwf	fsr1h,c
  9859  002912  90D8               	bcf	status,0,c
  9860  002914  36E1               	rlcf	fsr1l,f,c
  9861  002916  36E2               	rlcf	fsr1h,f,c
  9862  002918  0100               	movlb	0	; () banked
  9863  00291A  51EB               	movf	??_Battery_Convert& (0+255),w,b
  9864  00291C  26E1               	addwf	fsr1l,f,c
  9865  00291E  0100               	movlb	0	; () banked
  9866  002920  51EC               	movf	(??_Battery_Convert+1)& (0+255),w,b
  9867  002922  22E2               	addwfc	fsr1h,f,c
  9868  002924  CFE6 F023          	movff	postinc1,___altoft@c
  9869  002928  CFE6 F024          	movff	postinc1,___altoft@c+1
  9870  00292C  CFE6 F025          	movff	postinc1,___altoft@c+2
  9871  002930  CFE6 F026          	movff	postinc1,___altoft@c+3
  9872  002934  EC5D  F01A         	call	___altoft	;wreg free
  9873  002938  C023  F0C1         	movff	?___altoft,___ftdiv@f1
  9874  00293C  C024  F0C2         	movff	?___altoft+1,___ftdiv@f1+1
  9875  002940  C025  F0C3         	movff	?___altoft+2,___ftdiv@f1+2
  9876  002944  EC43  F011         	call	___ftdiv	;wreg free
  9877  002948  C0C1  F0D0         	movff	?___ftdiv,___ftmul@f1
  9878  00294C  C0C2  F0D1         	movff	?___ftdiv+1,___ftmul@f1+1
  9879  002950  C0C3  F0D2         	movff	?___ftdiv+2,___ftmul@f1+2
  9880  002954  EC2F  F00F         	call	___ftmul	;wreg free
  9881  002958  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  9882  00295C  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  9883  002960  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  9884  002964  0ECD               	movlw	205
  9885  002966  0100               	movlb	0	; () banked
  9886  002968  6FE2               	movwf	___ftadd@f2& (0+255),b
  9887  00296A  0E4C               	movlw	76
  9888  00296C  0100               	movlb	0	; () banked
  9889  00296E  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  9890  002970  0E3D               	movlw	61
  9891  002972  0100               	movlb	0	; () banked
  9892  002974  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  9893  002976  EC76  F00B         	call	___ftadd	;wreg free
  9894  00297A  C0DF  FFDE         	movff	?___ftadd,postinc2
  9895  00297E  C0E0  FFDE         	movff	?___ftadd+1,postinc2
  9896  002982  C0E1  FFDE         	movff	?___ftadd+2,postinc2
  9897  002986  0100               	movlb	0	; () banked
  9898  002988  4BED               	infsnz	Battery_Convert@x& (0+255),f,b
  9899  00298A  2BEE               	incf	(Battery_Convert@x+1)& (0+255),f,b
  9900  00298C  D786               	goto	l5333
  9901                           
  9902                           ; BSR set to: 0
  9903  00298E  D000               	goto	l5343
  9904  002990                     l5343:
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;Battery.c: 37: }
  9908                           ;Battery.c: 38: Battery_Filter();
  9909  002990  EC9C  F016         	call	_Battery_Filter	;wreg free
  9910  002994  0012               	return		;funcret
  9911  002996                     __end_of_Battery_Convert:
  9912                           	opt stack 0
  9913                           tosu	equ	0xFFF
  9914                           tosh	equ	0xFFE
  9915                           tosl	equ	0xFFD
  9916                           pclath	equ	0xFFA
  9917                           tblptru	equ	0xFF8
  9918                           tblptrh	equ	0xFF7
  9919                           tblptrl	equ	0xFF6
  9920                           tablat	equ	0xFF5
  9921                           prodh	equ	0xFF4
  9922                           prodl	equ	0xFF3
  9923                           intcon	equ	0xFF2
  9924                           intcon2	equ	0xFF1
  9925                           postinc0	equ	0xFEE
  9926                           wreg	equ	0xFE8
  9927                           postinc1	equ	0xFE6
  9928                           postdec1	equ	0xFE5
  9929                           fsr1h	equ	0xFE2
  9930                           fsr1l	equ	0xFE1
  9931                           indf2	equ	0xFDF
  9932                           postinc2	equ	0xFDE
  9933                           postdec2	equ	0xFDD
  9934                           plusw2	equ	0xFDB
  9935                           fsr2h	equ	0xFDA
  9936                           fsr2l	equ	0xFD9
  9937                           status	equ	0xFD8
  9938                           
  9939 ;; *************** function ___ftmul *****************
  9940 ;; Defined at:
  9941 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;  f1              3   15[BANK0 ] float 
  9944 ;;  f2              3   18[BANK0 ] float 
  9945 ;; Auto vars:     Size  Location     Type
  9946 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  9947 ;;  sign            1   29[BANK0 ] unsigned char 
  9948 ;;  cntr            1   28[BANK0 ] unsigned char 
  9949 ;;  exp             1   24[BANK0 ] unsigned char 
  9950 ;; Return value:  Size  Location     Type
  9951 ;;                  3   15[BANK0 ] float 
  9952 ;; Registers used:
  9953 ;;		wreg, status,2, status,0, cstack
  9954 ;; Tracked objects:
  9955 ;;		On entry : 0/0
  9956 ;;		On exit  : 0/0
  9957 ;;		Unchanged: 0/0
  9958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9959 ;;      Params:         0       6       0       0       0       0       0
  9960 ;;      Locals:         0       6       0       0       0       0       0
  9961 ;;      Temps:          0       3       0       0       0       0       0
  9962 ;;      Totals:         0      15       0       0       0       0       0
  9963 ;;Total ram usage:       15 bytes
  9964 ;; Hardware stack levels used:    1
  9965 ;; Hardware stack levels required when called:    5
  9966 ;; This function calls:
  9967 ;;		___ftpack
  9968 ;; This function is called by:
  9969 ;;		_Battery_Convert
  9970 ;;		_Temp_Filter
  9971 ;;		_Temp_Convert
  9972 ;;		_updateComms
  9973 ;;		_log
  9974 ;;		_eval_poly
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           	psect	text51
  9979  001E5E                     __ptext51:
  9980                           	opt stack 0
  9981  001E5E                     ___ftmul:
  9982                           	opt stack 24
  9983                           
  9984                           ;incstack = 0
  9985  001E5E  C0D2  F0D6         	movff	___ftmul@f1+2,??___ftmul
  9986  001E62  0100               	movlb	0	; () banked
  9987  001E64  6BD7               	clrf	(??___ftmul+1)& (0+255),b
  9988  001E66  6BD8               	clrf	(??___ftmul+2)& (0+255),b
  9989  001E68  0100               	movlb	0	; () banked
  9990  001E6A  35D1               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9991  001E6C  0100               	movlb	0	; () banked
  9992  001E6E  37D6               	rlcf	??___ftmul& (0+255),f,b
  9993  001E70  E301               	bnc	u4761
  9994  001E72  81D7               	bsf	(??___ftmul+1)& (0+255),0,b
  9995  001E74                     u4761:
  9996  001E74  0100               	movlb	0	; () banked
  9997  001E76  51D6               	movf	??___ftmul& (0+255),w,b
  9998  001E78  0100               	movlb	0	; () banked
  9999  001E7A  6FD9               	movwf	___ftmul@exp& (0+255),b
 10000  001E7C  0100               	movlb	0	; () banked
 10001  001E7E  51D9               	movf	___ftmul@exp& (0+255),w,b
 10002  001E80  A4D8               	btfss	status,2,c
 10003  001E82  D00A               	goto	l4725
 10004                           
 10005                           ; BSR set to: 0
 10006  001E84  0E00               	movlw	0
 10007  001E86  0100               	movlb	0	; () banked
 10008  001E88  6FD0               	movwf	?___ftmul& (0+255),b
 10009  001E8A  0E00               	movlw	0
 10010  001E8C  0100               	movlb	0	; () banked
 10011  001E8E  6FD1               	movwf	(?___ftmul+1)& (0+255),b
 10012  001E90  0E00               	movlw	0
 10013  001E92  0100               	movlb	0	; () banked
 10014  001E94  6FD2               	movwf	(?___ftmul+2)& (0+255),b
 10015                           
 10016                           ; BSR set to: 0
 10017  001E96  0012               	return	
 10018  001E98                     l4725:
 10019                           
 10020                           ; BSR set to: 0
 10021  001E98  C0D5  F0D6         	movff	___ftmul@f2+2,??___ftmul
 10022  001E9C  0100               	movlb	0	; () banked
 10023  001E9E  6BD7               	clrf	(??___ftmul+1)& (0+255),b
 10024  001EA0  6BD8               	clrf	(??___ftmul+2)& (0+255),b
 10025  001EA2  0100               	movlb	0	; () banked
 10026  001EA4  35D4               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10027  001EA6  0100               	movlb	0	; () banked
 10028  001EA8  37D6               	rlcf	??___ftmul& (0+255),f,b
 10029  001EAA  E301               	bnc	u4781
 10030  001EAC  81D7               	bsf	(??___ftmul+1)& (0+255),0,b
 10031  001EAE                     u4781:
 10032  001EAE  0100               	movlb	0	; () banked
 10033  001EB0  51D6               	movf	??___ftmul& (0+255),w,b
 10034  001EB2  0100               	movlb	0	; () banked
 10035  001EB4  6FDE               	movwf	___ftmul@sign& (0+255),b
 10036  001EB6  0100               	movlb	0	; () banked
 10037  001EB8  51DE               	movf	___ftmul@sign& (0+255),w,b
 10038  001EBA  A4D8               	btfss	status,2,c
 10039  001EBC  D00A               	goto	l4731
 10040                           
 10041                           ; BSR set to: 0
 10042  001EBE  0E00               	movlw	0
 10043  001EC0  0100               	movlb	0	; () banked
 10044  001EC2  6FD0               	movwf	?___ftmul& (0+255),b
 10045  001EC4  0E00               	movlw	0
 10046  001EC6  0100               	movlb	0	; () banked
 10047  001EC8  6FD1               	movwf	(?___ftmul+1)& (0+255),b
 10048  001ECA  0E00               	movlw	0
 10049  001ECC  0100               	movlb	0	; () banked
 10050  001ECE  6FD2               	movwf	(?___ftmul+2)& (0+255),b
 10051                           
 10052                           ; BSR set to: 0
 10053  001ED0  0012               	return	
 10054  001ED2                     l4731:
 10055                           
 10056                           ; BSR set to: 0
 10057  001ED2  0100               	movlb	0	; () banked
 10058  001ED4  51DE               	movf	___ftmul@sign& (0+255),w,b
 10059  001ED6  0F7B               	addlw	123
 10060  001ED8  0100               	movlb	0	; () banked
 10061  001EDA  27D9               	addwf	___ftmul@exp& (0+255),f,b
 10062                           
 10063                           ; BSR set to: 0
 10064  001EDC  C0D2  F0DE         	movff	___ftmul@f1+2,___ftmul@sign
 10065  001EE0  0100               	movlb	0	; () banked
 10066  001EE2  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10067  001EE4  0100               	movlb	0	; () banked
 10068  001EE6  1BDE               	xorwf	___ftmul@sign& (0+255),f,b
 10069  001EE8  0E80               	movlw	128
 10070  001EEA  0100               	movlb	0	; () banked
 10071  001EEC  17DE               	andwf	___ftmul@sign& (0+255),f,b
 10072                           
 10073                           ; BSR set to: 0
 10074  001EEE  0100               	movlb	0	; () banked
 10075  001EF0  8FD1               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10076                           
 10077                           ; BSR set to: 0
 10078  001EF2  0100               	movlb	0	; () banked
 10079  001EF4  8FD4               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10080                           
 10081                           ; BSR set to: 0
 10082  001EF6  0EFF               	movlw	255
 10083  001EF8  0100               	movlb	0	; () banked
 10084  001EFA  17D3               	andwf	___ftmul@f2& (0+255),f,b
 10085  001EFC  0EFF               	movlw	255
 10086  001EFE  0100               	movlb	0	; () banked
 10087  001F00  17D4               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10088  001F02  0E00               	movlw	0
 10089  001F04  0100               	movlb	0	; () banked
 10090  001F06  17D5               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10091                           
 10092                           ; BSR set to: 0
 10093  001F08  0E00               	movlw	0
 10094  001F0A  0100               	movlb	0	; () banked
 10095  001F0C  6FDA               	movwf	___ftmul@f3_as_product& (0+255),b
 10096  001F0E  0E00               	movlw	0
 10097  001F10  0100               	movlb	0	; () banked
 10098  001F12  6FDB               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10099  001F14  0E00               	movlw	0
 10100  001F16  0100               	movlb	0	; () banked
 10101  001F18  6FDC               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10102                           
 10103                           ; BSR set to: 0
 10104  001F1A  0E07               	movlw	7
 10105  001F1C  0100               	movlb	0	; () banked
 10106  001F1E  6FDD               	movwf	___ftmul@cntr& (0+255),b
 10107  001F20  D000               	goto	l4745
 10108  001F22                     l4745:
 10109                           
 10110                           ; BSR set to: 0
 10111  001F22  0100               	movlb	0	; () banked
 10112  001F24  A1D0               	btfss	___ftmul@f1& (0+255),0,b
 10113  001F26  D00D               	goto	l4749
 10114                           
 10115                           ; BSR set to: 0
 10116  001F28  0100               	movlb	0	; () banked
 10117  001F2A  51D3               	movf	___ftmul@f2& (0+255),w,b
 10118  001F2C  0100               	movlb	0	; () banked
 10119  001F2E  27DA               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10120  001F30  0100               	movlb	0	; () banked
 10121  001F32  51D4               	movf	(___ftmul@f2+1)& (0+255),w,b
 10122  001F34  0100               	movlb	0	; () banked
 10123  001F36  23DB               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10124  001F38  0100               	movlb	0	; () banked
 10125  001F3A  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10126  001F3C  0100               	movlb	0	; () banked
 10127  001F3E  23DC               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10128  001F40  D000               	goto	l4749
 10129  001F42                     l4749:
 10130                           
 10131                           ; BSR set to: 0
 10132  001F42  0100               	movlb	0	; () banked
 10133  001F44  90D8               	bcf	status,0,c
 10134  001F46  33D2               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10135  001F48  33D1               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10136  001F4A  33D0               	rrcf	___ftmul@f1& (0+255),f,b
 10137  001F4C  0100               	movlb	0	; () banked
 10138  001F4E  90D8               	bcf	status,0,c
 10139  001F50  37D3               	rlcf	___ftmul@f2& (0+255),f,b
 10140  001F52  37D4               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10141  001F54  37D5               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10142                           
 10143                           ; BSR set to: 0
 10144  001F56  0100               	movlb	0	; () banked
 10145  001F58  2FDD               	decfsz	___ftmul@cntr& (0+255),f,b
 10146  001F5A  D7E3               	goto	l4745
 10147  001F5C  D000               	goto	l4753
 10148  001F5E                     l4753:
 10149                           
 10150                           ; BSR set to: 0
 10151  001F5E  0E09               	movlw	9
 10152  001F60  0100               	movlb	0	; () banked
 10153  001F62  6FDD               	movwf	___ftmul@cntr& (0+255),b
 10154  001F64  D000               	goto	l4755
 10155  001F66                     l4755:
 10156                           
 10157                           ; BSR set to: 0
 10158  001F66  0100               	movlb	0	; () banked
 10159  001F68  A1D0               	btfss	___ftmul@f1& (0+255),0,b
 10160  001F6A  D00D               	goto	l4759
 10161                           
 10162                           ; BSR set to: 0
 10163  001F6C  0100               	movlb	0	; () banked
 10164  001F6E  51D3               	movf	___ftmul@f2& (0+255),w,b
 10165  001F70  0100               	movlb	0	; () banked
 10166  001F72  27DA               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10167  001F74  0100               	movlb	0	; () banked
 10168  001F76  51D4               	movf	(___ftmul@f2+1)& (0+255),w,b
 10169  001F78  0100               	movlb	0	; () banked
 10170  001F7A  23DB               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10171  001F7C  0100               	movlb	0	; () banked
 10172  001F7E  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10173  001F80  0100               	movlb	0	; () banked
 10174  001F82  23DC               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10175  001F84  D000               	goto	l4759
 10176  001F86                     l4759:
 10177                           
 10178                           ; BSR set to: 0
 10179  001F86  0100               	movlb	0	; () banked
 10180  001F88  90D8               	bcf	status,0,c
 10181  001F8A  33D2               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10182  001F8C  33D1               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10183  001F8E  33D0               	rrcf	___ftmul@f1& (0+255),f,b
 10184  001F90  0100               	movlb	0	; () banked
 10185  001F92  90D8               	bcf	status,0,c
 10186  001F94  33DC               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10187  001F96  33DB               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10188  001F98  33DA               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10189                           
 10190                           ; BSR set to: 0
 10191  001F9A  0100               	movlb	0	; () banked
 10192  001F9C  2FDD               	decfsz	___ftmul@cntr& (0+255),f,b
 10193  001F9E  D7E3               	goto	l4755
 10194  001FA0  D000               	goto	l4763
 10195  001FA2                     l4763:
 10196                           
 10197                           ; BSR set to: 0
 10198  001FA2  C0DA  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
 10199  001FA6  C0DB  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10200  001FAA  C0DC  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10201  001FAE  C0D9  F01E         	movff	___ftmul@exp,___ftpack@exp
 10202  001FB2  C0DE  F01F         	movff	___ftmul@sign,___ftpack@sign
 10203  001FB6  ECE7  F017         	call	___ftpack	;wreg free
 10204  001FBA  C01B  F0D0         	movff	?___ftpack,?___ftmul
 10205  001FBE  C01C  F0D1         	movff	?___ftpack+1,?___ftmul+1
 10206  001FC2  C01D  F0D2         	movff	?___ftpack+2,?___ftmul+2
 10207  001FC6  0012               	return	
 10208  001FC8  0012               	return		;funcret
 10209  001FCA                     __end_of___ftmul:
 10210                           	opt stack 0
 10211                           tosu	equ	0xFFF
 10212                           tosh	equ	0xFFE
 10213                           tosl	equ	0xFFD
 10214                           pclath	equ	0xFFA
 10215                           tblptru	equ	0xFF8
 10216                           tblptrh	equ	0xFF7
 10217                           tblptrl	equ	0xFF6
 10218                           tablat	equ	0xFF5
 10219                           prodh	equ	0xFF4
 10220                           prodl	equ	0xFF3
 10221                           intcon	equ	0xFF2
 10222                           intcon2	equ	0xFF1
 10223                           postinc0	equ	0xFEE
 10224                           wreg	equ	0xFE8
 10225                           postinc1	equ	0xFE6
 10226                           postdec1	equ	0xFE5
 10227                           fsr1h	equ	0xFE2
 10228                           fsr1l	equ	0xFE1
 10229                           indf2	equ	0xFDF
 10230                           postinc2	equ	0xFDE
 10231                           postdec2	equ	0xFDD
 10232                           plusw2	equ	0xFDB
 10233                           fsr2h	equ	0xFDA
 10234                           fsr2l	equ	0xFD9
 10235                           status	equ	0xFD8
 10236                           
 10237 ;; *************** function ___ftdiv *****************
 10238 ;; Defined at:
 10239 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10240 ;; Parameters:    Size  Location     Type
 10241 ;;  f1              3    0[BANK0 ] float 
 10242 ;;  f2              3    3[BANK0 ] float 
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;  f3              3   10[BANK0 ] float 
 10245 ;;  sign            1   14[BANK0 ] unsigned char 
 10246 ;;  exp             1   13[BANK0 ] unsigned char 
 10247 ;;  cntr            1    9[BANK0 ] unsigned char 
 10248 ;; Return value:  Size  Location     Type
 10249 ;;                  3    0[BANK0 ] float 
 10250 ;; Registers used:
 10251 ;;		wreg, status,2, status,0, cstack
 10252 ;; Tracked objects:
 10253 ;;		On entry : 0/0
 10254 ;;		On exit  : 0/0
 10255 ;;		Unchanged: 0/0
 10256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10257 ;;      Params:         0       6       0       0       0       0       0
 10258 ;;      Locals:         0       6       0       0       0       0       0
 10259 ;;      Temps:          0       3       0       0       0       0       0
 10260 ;;      Totals:         0      15       0       0       0       0       0
 10261 ;;Total ram usage:       15 bytes
 10262 ;; Hardware stack levels used:    1
 10263 ;; Hardware stack levels required when called:    5
 10264 ;; This function calls:
 10265 ;;		___ftpack
 10266 ;; This function is called by:
 10267 ;;		_Battery_Convert
 10268 ;;		_Temp_Convert
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           	psect	text52
 10273  002286                     __ptext52:
 10274                           	opt stack 0
 10275  002286                     ___ftdiv:
 10276                           	opt stack 24
 10277                           
 10278                           ;incstack = 0
 10279  002286  C0C3  F0C7         	movff	___ftdiv@f1+2,??___ftdiv
 10280  00228A  0100               	movlb	0	; () banked
 10281  00228C  6BC8               	clrf	(??___ftdiv+1)& (0+255),b
 10282  00228E  6BC9               	clrf	(??___ftdiv+2)& (0+255),b
 10283  002290  0100               	movlb	0	; () banked
 10284  002292  35C2               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10285  002294  0100               	movlb	0	; () banked
 10286  002296  37C7               	rlcf	??___ftdiv& (0+255),f,b
 10287  002298  E301               	bnc	u5861
 10288  00229A  81C8               	bsf	(??___ftdiv+1)& (0+255),0,b
 10289  00229C                     u5861:
 10290  00229C  0100               	movlb	0	; () banked
 10291  00229E  51C7               	movf	??___ftdiv& (0+255),w,b
 10292  0022A0  0100               	movlb	0	; () banked
 10293  0022A2  6FCE               	movwf	___ftdiv@exp& (0+255),b
 10294  0022A4  0100               	movlb	0	; () banked
 10295  0022A6  51CE               	movf	___ftdiv@exp& (0+255),w,b
 10296  0022A8  A4D8               	btfss	status,2,c
 10297  0022AA  D00A               	goto	l5253
 10298                           
 10299                           ; BSR set to: 0
 10300  0022AC  0E00               	movlw	0
 10301  0022AE  0100               	movlb	0	; () banked
 10302  0022B0  6FC1               	movwf	?___ftdiv& (0+255),b
 10303  0022B2  0E00               	movlw	0
 10304  0022B4  0100               	movlb	0	; () banked
 10305  0022B6  6FC2               	movwf	(?___ftdiv+1)& (0+255),b
 10306  0022B8  0E00               	movlw	0
 10307  0022BA  0100               	movlb	0	; () banked
 10308  0022BC  6FC3               	movwf	(?___ftdiv+2)& (0+255),b
 10309                           
 10310                           ; BSR set to: 0
 10311  0022BE  0012               	return	
 10312  0022C0                     l5253:
 10313                           
 10314                           ; BSR set to: 0
 10315  0022C0  C0C6  F0C7         	movff	___ftdiv@f2+2,??___ftdiv
 10316  0022C4  0100               	movlb	0	; () banked
 10317  0022C6  6BC8               	clrf	(??___ftdiv+1)& (0+255),b
 10318  0022C8  6BC9               	clrf	(??___ftdiv+2)& (0+255),b
 10319  0022CA  0100               	movlb	0	; () banked
 10320  0022CC  35C5               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10321  0022CE  0100               	movlb	0	; () banked
 10322  0022D0  37C7               	rlcf	??___ftdiv& (0+255),f,b
 10323  0022D2  E301               	bnc	u5881
 10324  0022D4  81C8               	bsf	(??___ftdiv+1)& (0+255),0,b
 10325  0022D6                     u5881:
 10326  0022D6  0100               	movlb	0	; () banked
 10327  0022D8  51C7               	movf	??___ftdiv& (0+255),w,b
 10328  0022DA  0100               	movlb	0	; () banked
 10329  0022DC  6FCF               	movwf	___ftdiv@sign& (0+255),b
 10330  0022DE  0100               	movlb	0	; () banked
 10331  0022E0  51CF               	movf	___ftdiv@sign& (0+255),w,b
 10332  0022E2  A4D8               	btfss	status,2,c
 10333  0022E4  D00A               	goto	l5259
 10334                           
 10335                           ; BSR set to: 0
 10336  0022E6  0E00               	movlw	0
 10337  0022E8  0100               	movlb	0	; () banked
 10338  0022EA  6FC1               	movwf	?___ftdiv& (0+255),b
 10339  0022EC  0E00               	movlw	0
 10340  0022EE  0100               	movlb	0	; () banked
 10341  0022F0  6FC2               	movwf	(?___ftdiv+1)& (0+255),b
 10342  0022F2  0E00               	movlw	0
 10343  0022F4  0100               	movlb	0	; () banked
 10344  0022F6  6FC3               	movwf	(?___ftdiv+2)& (0+255),b
 10345                           
 10346                           ; BSR set to: 0
 10347  0022F8  0012               	return	
 10348  0022FA                     l5259:
 10349                           
 10350                           ; BSR set to: 0
 10351  0022FA  0E00               	movlw	0
 10352  0022FC  0100               	movlb	0	; () banked
 10353  0022FE  6FCB               	movwf	___ftdiv@f3& (0+255),b
 10354  002300  0E00               	movlw	0
 10355  002302  0100               	movlb	0	; () banked
 10356  002304  6FCC               	movwf	(___ftdiv@f3+1)& (0+255),b
 10357  002306  0E00               	movlw	0
 10358  002308  0100               	movlb	0	; () banked
 10359  00230A  6FCD               	movwf	(___ftdiv@f3+2)& (0+255),b
 10360                           
 10361                           ; BSR set to: 0
 10362  00230C  0100               	movlb	0	; () banked
 10363  00230E  51CF               	movf	___ftdiv@sign& (0+255),w,b
 10364  002310  0F89               	addlw	137
 10365  002312  0100               	movlb	0	; () banked
 10366  002314  5FCE               	subwf	___ftdiv@exp& (0+255),f,b
 10367                           
 10368                           ; BSR set to: 0
 10369  002316  C0C3  F0CF         	movff	___ftdiv@f1+2,___ftdiv@sign
 10370                           
 10371                           ; BSR set to: 0
 10372  00231A  0100               	movlb	0	; () banked
 10373  00231C  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10374  00231E  0100               	movlb	0	; () banked
 10375  002320  1BCF               	xorwf	___ftdiv@sign& (0+255),f,b
 10376                           
 10377                           ; BSR set to: 0
 10378  002322  0E80               	movlw	128
 10379  002324  0100               	movlb	0	; () banked
 10380  002326  17CF               	andwf	___ftdiv@sign& (0+255),f,b
 10381                           
 10382                           ; BSR set to: 0
 10383  002328  0100               	movlb	0	; () banked
 10384  00232A  8FC2               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10385                           
 10386                           ; BSR set to: 0
 10387  00232C  0EFF               	movlw	255
 10388  00232E  0100               	movlb	0	; () banked
 10389  002330  17C1               	andwf	___ftdiv@f1& (0+255),f,b
 10390  002332  0EFF               	movlw	255
 10391  002334  0100               	movlb	0	; () banked
 10392  002336  17C2               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10393  002338  0E00               	movlw	0
 10394  00233A  0100               	movlb	0	; () banked
 10395  00233C  17C3               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10396                           
 10397                           ; BSR set to: 0
 10398  00233E  0100               	movlb	0	; () banked
 10399  002340  8FC5               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10400                           
 10401                           ; BSR set to: 0
 10402  002342  0EFF               	movlw	255
 10403  002344  0100               	movlb	0	; () banked
 10404  002346  17C4               	andwf	___ftdiv@f2& (0+255),f,b
 10405  002348  0EFF               	movlw	255
 10406  00234A  0100               	movlb	0	; () banked
 10407  00234C  17C5               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10408  00234E  0E00               	movlw	0
 10409  002350  0100               	movlb	0	; () banked
 10410  002352  17C6               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10411                           
 10412                           ; BSR set to: 0
 10413  002354  0E18               	movlw	24
 10414  002356  0100               	movlb	0	; () banked
 10415  002358  6FCA               	movwf	___ftdiv@cntr& (0+255),b
 10416  00235A  D000               	goto	l5279
 10417  00235C                     l5279:
 10418                           
 10419                           ; BSR set to: 0
 10420  00235C  0100               	movlb	0	; () banked
 10421  00235E  90D8               	bcf	status,0,c
 10422  002360  37CB               	rlcf	___ftdiv@f3& (0+255),f,b
 10423  002362  37CC               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10424  002364  37CD               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10425                           
 10426                           ; BSR set to: 0
 10427  002366  0100               	movlb	0	; () banked
 10428  002368  51C4               	movf	___ftdiv@f2& (0+255),w,b
 10429  00236A  0100               	movlb	0	; () banked
 10430  00236C  5DC1               	subwf	___ftdiv@f1& (0+255),w,b
 10431  00236E  0100               	movlb	0	; () banked
 10432  002370  51C5               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10433  002372  0100               	movlb	0	; () banked
 10434  002374  59C2               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10435  002376  0100               	movlb	0	; () banked
 10436  002378  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10437  00237A  0100               	movlb	0	; () banked
 10438  00237C  59C3               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10439  00237E  A0D8               	btfss	status,0,c
 10440  002380  D00E               	goto	l1211
 10441                           
 10442                           ; BSR set to: 0
 10443  002382  0100               	movlb	0	; () banked
 10444  002384  51C4               	movf	___ftdiv@f2& (0+255),w,b
 10445  002386  0100               	movlb	0	; () banked
 10446  002388  5FC1               	subwf	___ftdiv@f1& (0+255),f,b
 10447  00238A  0100               	movlb	0	; () banked
 10448  00238C  51C5               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10449  00238E  0100               	movlb	0	; () banked
 10450  002390  5BC2               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10451  002392  0100               	movlb	0	; () banked
 10452  002394  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10453  002396  0100               	movlb	0	; () banked
 10454  002398  5BC3               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10455                           
 10456                           ; BSR set to: 0
 10457  00239A  0100               	movlb	0	; () banked
 10458  00239C  81CB               	bsf	___ftdiv@f3& (0+255),0,b
 10459  00239E                     l1211:
 10460                           
 10461                           ; BSR set to: 0
 10462  00239E  0100               	movlb	0	; () banked
 10463  0023A0  90D8               	bcf	status,0,c
 10464  0023A2  37C1               	rlcf	___ftdiv@f1& (0+255),f,b
 10465  0023A4  37C2               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10466  0023A6  37C3               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10467                           
 10468                           ; BSR set to: 0
 10469  0023A8  0100               	movlb	0	; () banked
 10470  0023AA  2FCA               	decfsz	___ftdiv@cntr& (0+255),f,b
 10471  0023AC  D7D7               	goto	l5279
 10472  0023AE  D000               	goto	l5289
 10473  0023B0                     l5289:
 10474                           
 10475                           ; BSR set to: 0
 10476  0023B0  C0CB  F01B         	movff	___ftdiv@f3,___ftpack@arg
 10477  0023B4  C0CC  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10478  0023B8  C0CD  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10479  0023BC  C0CE  F01E         	movff	___ftdiv@exp,___ftpack@exp
 10480  0023C0  C0CF  F01F         	movff	___ftdiv@sign,___ftpack@sign
 10481  0023C4  ECE7  F017         	call	___ftpack	;wreg free
 10482  0023C8  C01B  F0C1         	movff	?___ftpack,?___ftdiv
 10483  0023CC  C01C  F0C2         	movff	?___ftpack+1,?___ftdiv+1
 10484  0023D0  C01D  F0C3         	movff	?___ftpack+2,?___ftdiv+2
 10485  0023D4  0012               	return	
 10486  0023D6  0012               	return		;funcret
 10487  0023D8                     __end_of___ftdiv:
 10488                           	opt stack 0
 10489                           tosu	equ	0xFFF
 10490                           tosh	equ	0xFFE
 10491                           tosl	equ	0xFFD
 10492                           pclath	equ	0xFFA
 10493                           tblptru	equ	0xFF8
 10494                           tblptrh	equ	0xFF7
 10495                           tblptrl	equ	0xFF6
 10496                           tablat	equ	0xFF5
 10497                           prodh	equ	0xFF4
 10498                           prodl	equ	0xFF3
 10499                           intcon	equ	0xFF2
 10500                           intcon2	equ	0xFF1
 10501                           postinc0	equ	0xFEE
 10502                           wreg	equ	0xFE8
 10503                           postinc1	equ	0xFE6
 10504                           postdec1	equ	0xFE5
 10505                           fsr1h	equ	0xFE2
 10506                           fsr1l	equ	0xFE1
 10507                           indf2	equ	0xFDF
 10508                           postinc2	equ	0xFDE
 10509                           postdec2	equ	0xFDD
 10510                           plusw2	equ	0xFDB
 10511                           fsr2h	equ	0xFDA
 10512                           fsr2l	equ	0xFD9
 10513                           status	equ	0xFD8
 10514                           
 10515 ;; *************** function ___ftadd *****************
 10516 ;; Defined at:
 10517 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;  f1              3   30[BANK0 ] float 
 10520 ;;  f2              3   33[BANK0 ] float 
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;  exp1            1   41[BANK0 ] unsigned char 
 10523 ;;  exp2            1   40[BANK0 ] unsigned char 
 10524 ;;  sign            1   39[BANK0 ] unsigned char 
 10525 ;; Return value:  Size  Location     Type
 10526 ;;                  3   30[BANK0 ] float 
 10527 ;; Registers used:
 10528 ;;		wreg, status,2, status,0, cstack
 10529 ;; Tracked objects:
 10530 ;;		On entry : 0/0
 10531 ;;		On exit  : 0/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10534 ;;      Params:         0       6       0       0       0       0       0
 10535 ;;      Locals:         0       3       0       0       0       0       0
 10536 ;;      Temps:          0       3       0       0       0       0       0
 10537 ;;      Totals:         0      12       0       0       0       0       0
 10538 ;;Total ram usage:       12 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:    5
 10541 ;; This function calls:
 10542 ;;		___ftpack
 10543 ;; This function is called by:
 10544 ;;		_Battery_Convert
 10545 ;;		_Temp_Filter
 10546 ;;		_Temp_Convert
 10547 ;;		___ftsub
 10548 ;;		_log
 10549 ;;		_eval_poly
 10550 ;; This function uses a non-reentrant model
 10551 ;;
 10552                           
 10553                           	psect	text53
 10554  0016EC                     __ptext53:
 10555                           	opt stack 0
 10556  0016EC                     ___ftadd:
 10557                           	opt stack 22
 10558                           
 10559                           ;incstack = 0
 10560  0016EC  C0E1  F0E5         	movff	___ftadd@f1+2,??___ftadd
 10561  0016F0  0100               	movlb	0	; () banked
 10562  0016F2  6BE6               	clrf	(??___ftadd+1)& (0+255),b
 10563  0016F4  6BE7               	clrf	(??___ftadd+2)& (0+255),b
 10564  0016F6  0100               	movlb	0	; () banked
 10565  0016F8  35E0               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10566  0016FA  0100               	movlb	0	; () banked
 10567  0016FC  37E5               	rlcf	??___ftadd& (0+255),f,b
 10568  0016FE  E301               	bnc	u4551
 10569  001700  81E6               	bsf	(??___ftadd+1)& (0+255),0,b
 10570  001702                     u4551:
 10571  001702  0100               	movlb	0	; () banked
 10572  001704  51E5               	movf	??___ftadd& (0+255),w,b
 10573  001706  0100               	movlb	0	; () banked
 10574  001708  6FEA               	movwf	___ftadd@exp1& (0+255),b
 10575  00170A  C0E4  F0E5         	movff	___ftadd@f2+2,??___ftadd
 10576  00170E  0100               	movlb	0	; () banked
 10577  001710  6BE6               	clrf	(??___ftadd+1)& (0+255),b
 10578  001712  6BE7               	clrf	(??___ftadd+2)& (0+255),b
 10579  001714  0100               	movlb	0	; () banked
 10580  001716  35E3               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10581  001718  0100               	movlb	0	; () banked
 10582  00171A  37E5               	rlcf	??___ftadd& (0+255),f,b
 10583  00171C  E301               	bnc	u4561
 10584  00171E  81E6               	bsf	(??___ftadd+1)& (0+255),0,b
 10585  001720                     u4561:
 10586  001720  0100               	movlb	0	; () banked
 10587  001722  51E5               	movf	??___ftadd& (0+255),w,b
 10588  001724  0100               	movlb	0	; () banked
 10589  001726  6FE9               	movwf	___ftadd@exp2& (0+255),b
 10590                           
 10591                           ; BSR set to: 0
 10592  001728  0100               	movlb	0	; () banked
 10593  00172A  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10594  00172C  0100               	movlb	0	; () banked
 10595  00172E  B4D8               	btfsc	status,2,c
 10596  001730  D011               	goto	l1176
 10597                           
 10598                           ; BSR set to: 0
 10599  001732  0100               	movlb	0	; () banked
 10600  001734  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10601  001736  0100               	movlb	0	; () banked
 10602  001738  5DEA               	subwf	___ftadd@exp1& (0+255),w,b
 10603  00173A  B0D8               	btfsc	status,0,c
 10604  00173C  D012               	goto	l4657
 10605                           
 10606                           ; BSR set to: 0
 10607  00173E  0100               	movlb	0	; () banked
 10608  001740  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10609  001742  0800               	sublw	0
 10610  001744  0100               	movlb	0	; () banked
 10611  001746  25E9               	addwf	___ftadd@exp2& (0+255),w,b
 10612  001748  0100               	movlb	0	; () banked
 10613  00174A  6FE5               	movwf	??___ftadd& (0+255),b
 10614  00174C  0E18               	movlw	24
 10615  00174E  0100               	movlb	0	; () banked
 10616  001750  65E5               	cpfsgt	??___ftadd& (0+255),b
 10617  001752  D007               	goto	l4657
 10618  001754                     l1176:
 10619                           
 10620                           ; BSR set to: 0
 10621  001754  C0E2  F0DF         	movff	___ftadd@f2,?___ftadd
 10622  001758  C0E3  F0E0         	movff	___ftadd@f2+1,?___ftadd+1
 10623  00175C  C0E4  F0E1         	movff	___ftadd@f2+2,?___ftadd+2
 10624  001760  0012               	return	
 10625  001762                     l4657:
 10626                           
 10627                           ; BSR set to: 0
 10628  001762  0100               	movlb	0	; () banked
 10629  001764  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10630  001766  0100               	movlb	0	; () banked
 10631  001768  B4D8               	btfsc	status,2,c
 10632  00176A  D011               	goto	l1180
 10633                           
 10634                           ; BSR set to: 0
 10635  00176C  0100               	movlb	0	; () banked
 10636  00176E  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10637  001770  0100               	movlb	0	; () banked
 10638  001772  5DE9               	subwf	___ftadd@exp2& (0+255),w,b
 10639  001774  B0D8               	btfsc	status,0,c
 10640  001776  D012               	goto	l4663
 10641                           
 10642                           ; BSR set to: 0
 10643  001778  0100               	movlb	0	; () banked
 10644  00177A  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10645  00177C  0800               	sublw	0
 10646  00177E  0100               	movlb	0	; () banked
 10647  001780  25EA               	addwf	___ftadd@exp1& (0+255),w,b
 10648  001782  0100               	movlb	0	; () banked
 10649  001784  6FE5               	movwf	??___ftadd& (0+255),b
 10650  001786  0E18               	movlw	24
 10651  001788  0100               	movlb	0	; () banked
 10652  00178A  65E5               	cpfsgt	??___ftadd& (0+255),b
 10653  00178C  D007               	goto	l4663
 10654  00178E                     l1180:
 10655                           
 10656                           ; BSR set to: 0
 10657  00178E  C0DF  F0DF         	movff	___ftadd@f1,?___ftadd
 10658  001792  C0E0  F0E0         	movff	___ftadd@f1+1,?___ftadd+1
 10659  001796  C0E1  F0E1         	movff	___ftadd@f1+2,?___ftadd+2
 10660  00179A  0012               	return	
 10661  00179C                     l4663:
 10662                           
 10663                           ; BSR set to: 0
 10664  00179C  0E06               	movlw	6
 10665  00179E  0100               	movlb	0	; () banked
 10666  0017A0  6FE8               	movwf	___ftadd@sign& (0+255),b
 10667                           
 10668                           ; BSR set to: 0
 10669  0017A2  0100               	movlb	0	; () banked
 10670  0017A4  AFE1               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10671  0017A6  D003               	goto	l4669
 10672                           
 10673                           ; BSR set to: 0
 10674  0017A8  0100               	movlb	0	; () banked
 10675  0017AA  8FE8               	bsf	___ftadd@sign& (0+255),7,b
 10676  0017AC  D000               	goto	l4669
 10677  0017AE                     l4669:
 10678                           
 10679                           ; BSR set to: 0
 10680  0017AE  0100               	movlb	0	; () banked
 10681  0017B0  AFE4               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10682  0017B2  D002               	goto	l1182
 10683                           
 10684                           ; BSR set to: 0
 10685  0017B4  0100               	movlb	0	; () banked
 10686  0017B6  8DE8               	bsf	___ftadd@sign& (0+255),6,b
 10687  0017B8                     l1182:
 10688                           
 10689                           ; BSR set to: 0
 10690  0017B8  0100               	movlb	0	; () banked
 10691  0017BA  8FE0               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10692                           
 10693                           ; BSR set to: 0
 10694  0017BC  0EFF               	movlw	255
 10695  0017BE  0100               	movlb	0	; () banked
 10696  0017C0  17DF               	andwf	___ftadd@f1& (0+255),f,b
 10697  0017C2  0EFF               	movlw	255
 10698  0017C4  0100               	movlb	0	; () banked
 10699  0017C6  17E0               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10700  0017C8  0E00               	movlw	0
 10701  0017CA  0100               	movlb	0	; () banked
 10702  0017CC  17E1               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10703  0017CE  0100               	movlb	0	; () banked
 10704  0017D0  8FE3               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10705                           
 10706                           ; BSR set to: 0
 10707  0017D2  0EFF               	movlw	255
 10708  0017D4  0100               	movlb	0	; () banked
 10709  0017D6  17E2               	andwf	___ftadd@f2& (0+255),f,b
 10710  0017D8  0EFF               	movlw	255
 10711  0017DA  0100               	movlb	0	; () banked
 10712  0017DC  17E3               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10713  0017DE  0E00               	movlw	0
 10714  0017E0  0100               	movlb	0	; () banked
 10715  0017E2  17E4               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10716                           
 10717                           ; BSR set to: 0
 10718  0017E4  0100               	movlb	0	; () banked
 10719  0017E6  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10720  0017E8  0100               	movlb	0	; () banked
 10721  0017EA  5DEA               	subwf	___ftadd@exp1& (0+255),w,b
 10722  0017EC  B0D8               	btfsc	status,0,c
 10723  0017EE  D028               	goto	l4689
 10724  0017F0                     l4679:
 10725                           
 10726                           ; BSR set to: 0
 10727  0017F0  0100               	movlb	0	; () banked
 10728  0017F2  90D8               	bcf	status,0,c
 10729  0017F4  37E2               	rlcf	___ftadd@f2& (0+255),f,b
 10730  0017F6  37E3               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10731  0017F8  37E4               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10732  0017FA  0100               	movlb	0	; () banked
 10733  0017FC  07E9               	decf	___ftadd@exp2& (0+255),f,b
 10734                           
 10735                           ; BSR set to: 0
 10736  0017FE  0100               	movlb	0	; () banked
 10737  001800  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10738  001802  0100               	movlb	0	; () banked
 10739  001804  19E9               	xorwf	___ftadd@exp2& (0+255),w,b
 10740  001806  B4D8               	btfsc	status,2,c
 10741  001808  D013               	goto	l4687
 10742                           
 10743                           ; BSR set to: 0
 10744  00180A  0100               	movlb	0	; () banked
 10745  00180C  07E8               	decf	___ftadd@sign& (0+255),f,b
 10746  00180E  C0E8  F0E5         	movff	___ftadd@sign,??___ftadd
 10747  001812  0E07               	movlw	7
 10748  001814  0100               	movlb	0	; () banked
 10749  001816  17E5               	andwf	??___ftadd& (0+255),f,b
 10750  001818  B4D8               	btfsc	status,2,c
 10751  00181A  D00A               	goto	l4687
 10752  00181C  D7E9               	goto	l4679
 10753                           
 10754                           ; BSR set to: 0
 10755                           
 10756                           ; BSR set to: 0
 10757  00181E  D008               	goto	l4687
 10758  001820                     l4685:
 10759                           
 10760                           ; BSR set to: 0
 10761  001820  0100               	movlb	0	; () banked
 10762  001822  90D8               	bcf	status,0,c
 10763  001824  33E1               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10764  001826  33E0               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10765  001828  33DF               	rrcf	___ftadd@f1& (0+255),f,b
 10766  00182A  0100               	movlb	0	; () banked
 10767  00182C  2BEA               	incf	___ftadd@exp1& (0+255),f,b
 10768  00182E  D000               	goto	l4687
 10769  001830                     l4687:
 10770                           
 10771                           ; BSR set to: 0
 10772  001830  0100               	movlb	0	; () banked
 10773  001832  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10774  001834  0100               	movlb	0	; () banked
 10775  001836  19EA               	xorwf	___ftadd@exp1& (0+255),w,b
 10776  001838  B4D8               	btfsc	status,2,c
 10777  00183A  D030               	goto	l1191
 10778  00183C  D7F1               	goto	l4685
 10779                           
 10780                           ; BSR set to: 0
 10781  00183E  D02E               	goto	l1191
 10782  001840                     l4689:
 10783                           
 10784                           ; BSR set to: 0
 10785  001840  0100               	movlb	0	; () banked
 10786  001842  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10787  001844  0100               	movlb	0	; () banked
 10788  001846  5DE9               	subwf	___ftadd@exp2& (0+255),w,b
 10789  001848  B0D8               	btfsc	status,0,c
 10790  00184A  D028               	goto	l1191
 10791  00184C                     l4691:
 10792                           
 10793                           ; BSR set to: 0
 10794  00184C  0100               	movlb	0	; () banked
 10795  00184E  90D8               	bcf	status,0,c
 10796  001850  37DF               	rlcf	___ftadd@f1& (0+255),f,b
 10797  001852  37E0               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10798  001854  37E1               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10799  001856  0100               	movlb	0	; () banked
 10800  001858  07EA               	decf	___ftadd@exp1& (0+255),f,b
 10801                           
 10802                           ; BSR set to: 0
 10803  00185A  0100               	movlb	0	; () banked
 10804  00185C  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10805  00185E  0100               	movlb	0	; () banked
 10806  001860  19E9               	xorwf	___ftadd@exp2& (0+255),w,b
 10807  001862  B4D8               	btfsc	status,2,c
 10808  001864  D013               	goto	l4699
 10809                           
 10810                           ; BSR set to: 0
 10811  001866  0100               	movlb	0	; () banked
 10812  001868  07E8               	decf	___ftadd@sign& (0+255),f,b
 10813  00186A  C0E8  F0E5         	movff	___ftadd@sign,??___ftadd
 10814  00186E  0E07               	movlw	7
 10815  001870  0100               	movlb	0	; () banked
 10816  001872  17E5               	andwf	??___ftadd& (0+255),f,b
 10817  001874  B4D8               	btfsc	status,2,c
 10818  001876  D00A               	goto	l4699
 10819  001878  D7E9               	goto	l4691
 10820                           
 10821                           ; BSR set to: 0
 10822                           
 10823                           ; BSR set to: 0
 10824  00187A  D008               	goto	l4699
 10825  00187C                     l4697:
 10826                           
 10827                           ; BSR set to: 0
 10828  00187C  0100               	movlb	0	; () banked
 10829  00187E  90D8               	bcf	status,0,c
 10830  001880  33E4               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10831  001882  33E3               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10832  001884  33E2               	rrcf	___ftadd@f2& (0+255),f,b
 10833  001886  0100               	movlb	0	; () banked
 10834  001888  2BE9               	incf	___ftadd@exp2& (0+255),f,b
 10835  00188A  D000               	goto	l4699
 10836  00188C                     l4699:
 10837                           
 10838                           ; BSR set to: 0
 10839  00188C  0100               	movlb	0	; () banked
 10840  00188E  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10841  001890  0100               	movlb	0	; () banked
 10842  001892  19EA               	xorwf	___ftadd@exp1& (0+255),w,b
 10843  001894  B4D8               	btfsc	status,2,c
 10844  001896  D002               	goto	l1191
 10845  001898  D7F1               	goto	l4697
 10846                           
 10847                           ; BSR set to: 0
 10848  00189A  D000               	goto	l1191
 10849  00189C                     l1191:
 10850                           
 10851                           ; BSR set to: 0
 10852  00189C  0100               	movlb	0	; () banked
 10853  00189E  AFE8               	btfss	___ftadd@sign& (0+255),7,b
 10854  0018A0  D012               	goto	l1200
 10855                           
 10856                           ; BSR set to: 0
 10857  0018A2  0EFF               	movlw	255
 10858  0018A4  0100               	movlb	0	; () banked
 10859  0018A6  1BDF               	xorwf	___ftadd@f1& (0+255),f,b
 10860  0018A8  0EFF               	movlw	255
 10861  0018AA  0100               	movlb	0	; () banked
 10862  0018AC  1BE0               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10863  0018AE  0EFF               	movlw	255
 10864  0018B0  0100               	movlb	0	; () banked
 10865  0018B2  1BE1               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10866  0018B4  0E01               	movlw	1
 10867  0018B6  0100               	movlb	0	; () banked
 10868  0018B8  27DF               	addwf	___ftadd@f1& (0+255),f,b
 10869  0018BA  0E00               	movlw	0
 10870  0018BC  0100               	movlb	0	; () banked
 10871  0018BE  23E0               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10872  0018C0  0E00               	movlw	0
 10873  0018C2  0100               	movlb	0	; () banked
 10874  0018C4  23E1               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10875  0018C6                     l1200:
 10876                           
 10877                           ; BSR set to: 0
 10878  0018C6  0100               	movlb	0	; () banked
 10879  0018C8  ADE8               	btfss	___ftadd@sign& (0+255),6,b
 10880  0018CA  D013               	goto	l4705
 10881                           
 10882                           ; BSR set to: 0
 10883  0018CC  0EFF               	movlw	255
 10884  0018CE  0100               	movlb	0	; () banked
 10885  0018D0  1BE2               	xorwf	___ftadd@f2& (0+255),f,b
 10886  0018D2  0EFF               	movlw	255
 10887  0018D4  0100               	movlb	0	; () banked
 10888  0018D6  1BE3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10889  0018D8  0EFF               	movlw	255
 10890  0018DA  0100               	movlb	0	; () banked
 10891  0018DC  1BE4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10892  0018DE  0E01               	movlw	1
 10893  0018E0  0100               	movlb	0	; () banked
 10894  0018E2  27E2               	addwf	___ftadd@f2& (0+255),f,b
 10895  0018E4  0E00               	movlw	0
 10896  0018E6  0100               	movlb	0	; () banked
 10897  0018E8  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10898  0018EA  0E00               	movlw	0
 10899  0018EC  0100               	movlb	0	; () banked
 10900  0018EE  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10901  0018F0  D000               	goto	l4705
 10902  0018F2                     l4705:
 10903                           
 10904                           ; BSR set to: 0
 10905  0018F2  0E00               	movlw	0
 10906  0018F4  0100               	movlb	0	; () banked
 10907  0018F6  6FE8               	movwf	___ftadd@sign& (0+255),b
 10908                           
 10909                           ; BSR set to: 0
 10910  0018F8  0100               	movlb	0	; () banked
 10911  0018FA  51DF               	movf	___ftadd@f1& (0+255),w,b
 10912  0018FC  0100               	movlb	0	; () banked
 10913  0018FE  27E2               	addwf	___ftadd@f2& (0+255),f,b
 10914  001900  0100               	movlb	0	; () banked
 10915  001902  51E0               	movf	(___ftadd@f1+1)& (0+255),w,b
 10916  001904  0100               	movlb	0	; () banked
 10917  001906  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10918  001908  0100               	movlb	0	; () banked
 10919  00190A  51E1               	movf	(___ftadd@f1+2)& (0+255),w,b
 10920  00190C  0100               	movlb	0	; () banked
 10921  00190E  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10922                           
 10923                           ; BSR set to: 0
 10924  001910  0100               	movlb	0	; () banked
 10925  001912  AFE4               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10926  001914  D016               	goto	l4715
 10927                           
 10928                           ; BSR set to: 0
 10929  001916  0EFF               	movlw	255
 10930  001918  0100               	movlb	0	; () banked
 10931  00191A  1BE2               	xorwf	___ftadd@f2& (0+255),f,b
 10932  00191C  0EFF               	movlw	255
 10933  00191E  0100               	movlb	0	; () banked
 10934  001920  1BE3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10935  001922  0EFF               	movlw	255
 10936  001924  0100               	movlb	0	; () banked
 10937  001926  1BE4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10938  001928  0E01               	movlw	1
 10939  00192A  0100               	movlb	0	; () banked
 10940  00192C  27E2               	addwf	___ftadd@f2& (0+255),f,b
 10941  00192E  0E00               	movlw	0
 10942  001930  0100               	movlb	0	; () banked
 10943  001932  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10944  001934  0E00               	movlw	0
 10945  001936  0100               	movlb	0	; () banked
 10946  001938  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10947                           
 10948                           ; BSR set to: 0
 10949  00193A  0E01               	movlw	1
 10950  00193C  0100               	movlb	0	; () banked
 10951  00193E  6FE8               	movwf	___ftadd@sign& (0+255),b
 10952  001940  D000               	goto	l4715
 10953  001942                     l4715:
 10954                           
 10955                           ; BSR set to: 0
 10956  001942  C0E2  F01B         	movff	___ftadd@f2,___ftpack@arg
 10957  001946  C0E3  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
 10958  00194A  C0E4  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
 10959  00194E  C0EA  F01E         	movff	___ftadd@exp1,___ftpack@exp
 10960  001952  C0E8  F01F         	movff	___ftadd@sign,___ftpack@sign
 10961  001956  ECE7  F017         	call	___ftpack	;wreg free
 10962  00195A  C01B  F0DF         	movff	?___ftpack,?___ftadd
 10963  00195E  C01C  F0E0         	movff	?___ftpack+1,?___ftadd+1
 10964  001962  C01D  F0E1         	movff	?___ftpack+2,?___ftadd+2
 10965  001966  0012               	return	
 10966  001968  0012               	return		;funcret
 10967  00196A                     __end_of___ftadd:
 10968                           	opt stack 0
 10969                           tosu	equ	0xFFF
 10970                           tosh	equ	0xFFE
 10971                           tosl	equ	0xFFD
 10972                           pclath	equ	0xFFA
 10973                           tblptru	equ	0xFF8
 10974                           tblptrh	equ	0xFF7
 10975                           tblptrl	equ	0xFF6
 10976                           tablat	equ	0xFF5
 10977                           prodh	equ	0xFF4
 10978                           prodl	equ	0xFF3
 10979                           intcon	equ	0xFF2
 10980                           intcon2	equ	0xFF1
 10981                           postinc0	equ	0xFEE
 10982                           wreg	equ	0xFE8
 10983                           postinc1	equ	0xFE6
 10984                           postdec1	equ	0xFE5
 10985                           fsr1h	equ	0xFE2
 10986                           fsr1l	equ	0xFE1
 10987                           indf2	equ	0xFDF
 10988                           postinc2	equ	0xFDE
 10989                           postdec2	equ	0xFDD
 10990                           plusw2	equ	0xFDB
 10991                           fsr2h	equ	0xFDA
 10992                           fsr2l	equ	0xFD9
 10993                           status	equ	0xFD8
 10994                           
 10995 ;; *************** function ___altoft *****************
 10996 ;; Defined at:
 10997 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altoft.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;  c               4   34[COMRAM] long 
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;  sign            1   43[COMRAM] unsigned char 
 11002 ;;  exp             1   42[COMRAM] unsigned char 
 11003 ;; Return value:  Size  Location     Type
 11004 ;;                  3   34[COMRAM] float 
 11005 ;; Registers used:
 11006 ;;		wreg, status,2, status,0, cstack
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11012 ;;      Params:         4       0       0       0       0       0       0
 11013 ;;      Locals:         2       0       0       0       0       0       0
 11014 ;;      Temps:          4       0       0       0       0       0       0
 11015 ;;      Totals:        10       0       0       0       0       0       0
 11016 ;;Total ram usage:       10 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    5
 11019 ;; This function calls:
 11020 ;;		___ftpack
 11021 ;; This function is called by:
 11022 ;;		_Battery_Convert
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           	psect	text54
 11027  0034BA                     __ptext54:
 11028                           	opt stack 0
 11029  0034BA                     ___altoft:
 11030                           	opt stack 24
 11031                           
 11032                           ;incstack = 0
 11033  0034BA  0E00               	movlw	0
 11034  0034BC  6E2C               	movwf	___altoft@sign,c
 11035  0034BE  0E8E               	movlw	142
 11036  0034C0  6E2B               	movwf	___altoft@exp,c
 11037  0034C2  AE26               	btfss	___altoft@c+3,7,c
 11038  0034C4  D012               	goto	l5241
 11039  0034C6  1E26               	comf	___altoft@c+3,f,c
 11040  0034C8  1E25               	comf	___altoft@c+2,f,c
 11041  0034CA  1E24               	comf	___altoft@c+1,f,c
 11042  0034CC  6C23               	negf	___altoft@c,c
 11043  0034CE  0E00               	movlw	0
 11044  0034D0  2224               	addwfc	___altoft@c+1,f,c
 11045  0034D2  2225               	addwfc	___altoft@c+2,f,c
 11046  0034D4  2226               	addwfc	___altoft@c+3,f,c
 11047  0034D6  0E01               	movlw	1
 11048  0034D8  6E2C               	movwf	___altoft@sign,c
 11049  0034DA  D007               	goto	l5241
 11050  0034DC                     l5239:
 11051  0034DC  90D8               	bcf	status,0,c
 11052  0034DE  3226               	rrcf	___altoft@c+3,f,c
 11053  0034E0  3225               	rrcf	___altoft@c+2,f,c
 11054  0034E2  3224               	rrcf	___altoft@c+1,f,c
 11055  0034E4  3223               	rrcf	___altoft@c,f,c
 11056  0034E6  2A2B               	incf	___altoft@exp,f,c
 11057  0034E8  D000               	goto	l5241
 11058  0034EA                     l5241:
 11059  0034EA  0E00               	movlw	0
 11060  0034EC  1423               	andwf	___altoft@c,w,c
 11061  0034EE  6E27               	movwf	??___altoft& (0+255),c
 11062  0034F0  0E00               	movlw	0
 11063  0034F2  1424               	andwf	___altoft@c+1,w,c
 11064  0034F4  6E28               	movwf	(??___altoft+1)& (0+255),c
 11065  0034F6  0E00               	movlw	0
 11066  0034F8  1425               	andwf	___altoft@c+2,w,c
 11067  0034FA  6E29               	movwf	(??___altoft+2)& (0+255),c
 11068  0034FC  0EFF               	movlw	255
 11069  0034FE  1426               	andwf	___altoft@c+3,w,c
 11070  003500  6E2A               	movwf	(??___altoft+3)& (0+255),c
 11071  003502  5027               	movf	??___altoft,w,c
 11072  003504  1028               	iorwf	??___altoft+1,w,c
 11073  003506  1029               	iorwf	??___altoft+2,w,c
 11074  003508  102A               	iorwf	??___altoft+3,w,c
 11075  00350A  A4D8               	btfss	status,2,c
 11076  00350C  D7E7               	goto	l5239
 11077  00350E  C023  F01B         	movff	___altoft@c,___ftpack@arg
 11078  003512  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
 11079  003516  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
 11080  00351A  C02B  F01E         	movff	___altoft@exp,___ftpack@exp
 11081  00351E  C02C  F01F         	movff	___altoft@sign,___ftpack@sign
 11082  003522  ECE7  F017         	call	___ftpack	;wreg free
 11083  003526  C01B  F023         	movff	?___ftpack,?___altoft
 11084  00352A  C01C  F024         	movff	?___ftpack+1,?___altoft+1
 11085  00352E  C01D  F025         	movff	?___ftpack+2,?___altoft+2
 11086  003532  0012               	return	
 11087  003534  0012               	return		;funcret
 11088  003536                     __end_of___altoft:
 11089                           	opt stack 0
 11090                           tosu	equ	0xFFF
 11091                           tosh	equ	0xFFE
 11092                           tosl	equ	0xFFD
 11093                           pclath	equ	0xFFA
 11094                           tblptru	equ	0xFF8
 11095                           tblptrh	equ	0xFF7
 11096                           tblptrl	equ	0xFF6
 11097                           tablat	equ	0xFF5
 11098                           prodh	equ	0xFF4
 11099                           prodl	equ	0xFF3
 11100                           intcon	equ	0xFF2
 11101                           intcon2	equ	0xFF1
 11102                           postinc0	equ	0xFEE
 11103                           wreg	equ	0xFE8
 11104                           postinc1	equ	0xFE6
 11105                           postdec1	equ	0xFE5
 11106                           fsr1h	equ	0xFE2
 11107                           fsr1l	equ	0xFE1
 11108                           indf2	equ	0xFDF
 11109                           postinc2	equ	0xFDE
 11110                           postdec2	equ	0xFDD
 11111                           plusw2	equ	0xFDB
 11112                           fsr2h	equ	0xFDA
 11113                           fsr2l	equ	0xFD9
 11114                           status	equ	0xFD8
 11115                           
 11116 ;; *************** function ___ftpack *****************
 11117 ;; Defined at:
 11118 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 11119 ;; Parameters:    Size  Location     Type
 11120 ;;  arg             3   26[COMRAM] unsigned um
 11121 ;;  exp             1   29[COMRAM] unsigned char 
 11122 ;;  sign            1   30[COMRAM] unsigned char 
 11123 ;; Auto vars:     Size  Location     Type
 11124 ;;		None
 11125 ;; Return value:  Size  Location     Type
 11126 ;;                  3   26[COMRAM] float 
 11127 ;; Registers used:
 11128 ;;		wreg, status,2, status,0
 11129 ;; Tracked objects:
 11130 ;;		On entry : 0/0
 11131 ;;		On exit  : 0/0
 11132 ;;		Unchanged: 0/0
 11133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11134 ;;      Params:         5       0       0       0       0       0       0
 11135 ;;      Locals:         0       0       0       0       0       0       0
 11136 ;;      Temps:          3       0       0       0       0       0       0
 11137 ;;      Totals:         8       0       0       0       0       0       0
 11138 ;;Total ram usage:        8 bytes
 11139 ;; Hardware stack levels used:    1
 11140 ;; Hardware stack levels required when called:    4
 11141 ;; This function calls:
 11142 ;;		Nothing
 11143 ;; This function is called by:
 11144 ;;		___altoft
 11145 ;;		___awtoft
 11146 ;;		___ftadd
 11147 ;;		___ftdiv
 11148 ;;		___ftmul
 11149 ;; This function uses a non-reentrant model
 11150 ;;
 11151                           
 11152                           	psect	text55
 11153  002FCE                     __ptext55:
 11154                           	opt stack 0
 11155  002FCE                     ___ftpack:
 11156                           	opt stack 24
 11157                           
 11158                           ;incstack = 0
 11159  002FCE  501E               	movf	___ftpack@exp,w,c
 11160  002FD0  B4D8               	btfsc	status,2,c
 11161  002FD2  D005               	goto	l4515
 11162  002FD4  501B               	movf	___ftpack@arg,w,c
 11163  002FD6  101C               	iorwf	___ftpack@arg+1,w,c
 11164  002FD8  101D               	iorwf	___ftpack@arg+2,w,c
 11165  002FDA  A4D8               	btfss	status,2,c
 11166  002FDC  D00E               	goto	l4521
 11167  002FDE                     l4515:
 11168  002FDE  0E00               	movlw	0
 11169  002FE0  6E1B               	movwf	?___ftpack,c
 11170  002FE2  0E00               	movlw	0
 11171  002FE4  6E1C               	movwf	?___ftpack+1,c
 11172  002FE6  0E00               	movlw	0
 11173  002FE8  6E1D               	movwf	?___ftpack+2,c
 11174  002FEA  0012               	return	
 11175  002FEC  D006               	goto	l4521
 11176  002FEE                     l4519:
 11177  002FEE  2A1E               	incf	___ftpack@exp,f,c
 11178  002FF0  90D8               	bcf	status,0,c
 11179  002FF2  321D               	rrcf	___ftpack@arg+2,f,c
 11180  002FF4  321C               	rrcf	___ftpack@arg+1,f,c
 11181  002FF6  321B               	rrcf	___ftpack@arg,f,c
 11182  002FF8  D000               	goto	l4521
 11183  002FFA                     l4521:
 11184  002FFA  0E00               	movlw	0
 11185  002FFC  141B               	andwf	___ftpack@arg,w,c
 11186  002FFE  6E20               	movwf	??___ftpack& (0+255),c
 11187  003000  0E00               	movlw	0
 11188  003002  141C               	andwf	___ftpack@arg+1,w,c
 11189  003004  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11190  003006  0EFE               	movlw	254
 11191  003008  141D               	andwf	___ftpack@arg+2,w,c
 11192  00300A  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11193  00300C  5020               	movf	??___ftpack,w,c
 11194  00300E  1021               	iorwf	??___ftpack+1,w,c
 11195  003010  1022               	iorwf	??___ftpack+2,w,c
 11196  003012  B4D8               	btfsc	status,2,c
 11197  003014  D00E               	goto	l4527
 11198  003016  D7EB               	goto	l4519
 11199  003018  D00C               	goto	l4527
 11200  00301A                     l4523:
 11201  00301A  2A1E               	incf	___ftpack@exp,f,c
 11202  00301C  0E01               	movlw	1
 11203  00301E  261B               	addwf	___ftpack@arg,f,c
 11204  003020  0E00               	movlw	0
 11205  003022  221C               	addwfc	___ftpack@arg+1,f,c
 11206  003024  0E00               	movlw	0
 11207  003026  221D               	addwfc	___ftpack@arg+2,f,c
 11208  003028  90D8               	bcf	status,0,c
 11209  00302A  321D               	rrcf	___ftpack@arg+2,f,c
 11210  00302C  321C               	rrcf	___ftpack@arg+1,f,c
 11211  00302E  321B               	rrcf	___ftpack@arg,f,c
 11212  003030  D000               	goto	l4527
 11213  003032                     l4527:
 11214  003032  0E00               	movlw	0
 11215  003034  141B               	andwf	___ftpack@arg,w,c
 11216  003036  6E20               	movwf	??___ftpack& (0+255),c
 11217  003038  0E00               	movlw	0
 11218  00303A  141C               	andwf	___ftpack@arg+1,w,c
 11219  00303C  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11220  00303E  0EFF               	movlw	255
 11221  003040  141D               	andwf	___ftpack@arg+2,w,c
 11222  003042  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11223  003044  5020               	movf	??___ftpack,w,c
 11224  003046  1021               	iorwf	??___ftpack+1,w,c
 11225  003048  1022               	iorwf	??___ftpack+2,w,c
 11226  00304A  B4D8               	btfsc	status,2,c
 11227  00304C  D008               	goto	l4531
 11228  00304E  D7E5               	goto	l4523
 11229  003050  D006               	goto	l4531
 11230  003052                     l4529:
 11231  003052  061E               	decf	___ftpack@exp,f,c
 11232  003054  90D8               	bcf	status,0,c
 11233  003056  361B               	rlcf	___ftpack@arg,f,c
 11234  003058  361C               	rlcf	___ftpack@arg+1,f,c
 11235  00305A  361D               	rlcf	___ftpack@arg+2,f,c
 11236  00305C  D000               	goto	l4531
 11237  00305E                     l4531:
 11238  00305E  BE1C               	btfsc	___ftpack@arg+1,7,c
 11239  003060  D004               	goto	l1147
 11240  003062  0E02               	movlw	2
 11241  003064  601E               	cpfslt	___ftpack@exp,c
 11242  003066  D7F5               	goto	l4529
 11243  003068  D000               	goto	l1147
 11244  00306A                     l1147:
 11245  00306A  B01E               	btfsc	___ftpack@exp,0,c
 11246  00306C  D002               	goto	l4537
 11247  00306E  9E1C               	bcf	___ftpack@arg+1,7,c
 11248  003070  D000               	goto	l4537
 11249  003072                     l4537:
 11250  003072  90D8               	bcf	status,0,c
 11251  003074  321E               	rrcf	___ftpack@exp,f,c
 11252  003076  501E               	movf	___ftpack@exp,w,c
 11253  003078  121D               	iorwf	___ftpack@arg+2,f,c
 11254  00307A  501F               	movf	___ftpack@sign,w,c
 11255  00307C  B4D8               	btfsc	status,2,c
 11256  00307E  D002               	goto	l4543
 11257  003080  8E1D               	bsf	___ftpack@arg+2,7,c
 11258  003082  D000               	goto	l4543
 11259  003084                     l4543:
 11260  003084  C01B  F01B         	movff	___ftpack@arg,?___ftpack
 11261  003088  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
 11262  00308C  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
 11263  003090  0012               	return	
 11264  003092  0012               	return		;funcret
 11265  003094                     __end_of___ftpack:
 11266                           	opt stack 0
 11267                           tosu	equ	0xFFF
 11268                           tosh	equ	0xFFE
 11269                           tosl	equ	0xFFD
 11270                           pclath	equ	0xFFA
 11271                           tblptru	equ	0xFF8
 11272                           tblptrh	equ	0xFF7
 11273                           tblptrl	equ	0xFF6
 11274                           tablat	equ	0xFF5
 11275                           prodh	equ	0xFF4
 11276                           prodl	equ	0xFF3
 11277                           intcon	equ	0xFF2
 11278                           intcon2	equ	0xFF1
 11279                           postinc0	equ	0xFEE
 11280                           wreg	equ	0xFE8
 11281                           postinc1	equ	0xFE6
 11282                           postdec1	equ	0xFE5
 11283                           fsr1h	equ	0xFE2
 11284                           fsr1l	equ	0xFE1
 11285                           indf2	equ	0xFDF
 11286                           postinc2	equ	0xFDE
 11287                           postdec2	equ	0xFDD
 11288                           plusw2	equ	0xFDB
 11289                           fsr2h	equ	0xFDA
 11290                           fsr2l	equ	0xFD9
 11291                           status	equ	0xFD8
 11292                           
 11293 ;; *************** function _Battery_Filter *****************
 11294 ;; Defined at:
 11295 ;;		line 48 in file "Battery.c"
 11296 ;; Parameters:    Size  Location     Type
 11297 ;;		None
 11298 ;; Auto vars:     Size  Location     Type
 11299 ;;  x               2   32[COMRAM] int 
 11300 ;; Return value:  Size  Location     Type
 11301 ;;		None               void
 11302 ;; Registers used:
 11303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11309 ;;      Params:         0       0       0       0       0       0       0
 11310 ;;      Locals:         2       0       0       0       0       0       0
 11311 ;;      Temps:          0       0       0       0       0       0       0
 11312 ;;      Totals:         2       0       0       0       0       0       0
 11313 ;;Total ram usage:        2 bytes
 11314 ;; Hardware stack levels used:    1
 11315 ;; Hardware stack levels required when called:    5
 11316 ;; This function calls:
 11317 ;;		___wmul
 11318 ;; This function is called by:
 11319 ;;		_Battery_Convert
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           	psect	text56
 11324  002D38                     __ptext56:
 11325                           	opt stack 0
 11326  002D38                     _Battery_Filter:
 11327                           	opt stack 24
 11328                           
 11329                           ;Battery.c: 50: int x;
 11330                           ;Battery.c: 51: for (x = 0; x <= 9; x++) {
 11331                           
 11332                           ;incstack = 0
 11333  002D38  0E00               	movlw	0
 11334  002D3A  6E22               	movwf	Battery_Filter@x+1,c
 11335  002D3C  0E00               	movlw	0
 11336  002D3E  6E21               	movwf	Battery_Filter@x,c
 11337  002D40                     l4931:
 11338  002D40  BE22               	btfsc	Battery_Filter@x+1,7,c
 11339  002D42  D008               	goto	l4935
 11340  002D44  5022               	movf	Battery_Filter@x+1,w,c
 11341  002D46  E130               	bnz	l4941
 11342  002D48  0E0A               	movlw	10
 11343  002D4A  5C21               	subwf	Battery_Filter@x,w,c
 11344  002D4C  B0D8               	btfsc	status,0,c
 11345  002D4E  D02C               	goto	l4941
 11346  002D50  D001               	goto	l4935
 11347  002D52  D02A               	goto	l4941
 11348  002D54                     l4935:
 11349                           
 11350                           ;Battery.c: 52: Battery_Volt[x] = TempBattery_Volt[x];
 11351  002D54  C021  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 11352  002D58  C022  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 11353  002D5C  0E00               	movlw	0
 11354  002D5E  6E1E               	movwf	___wmul@multiplicand+1,c
 11355  002D60  0E03               	movlw	3
 11356  002D62  6E1D               	movwf	___wmul@multiplicand,c
 11357  002D64  EC86  F01D         	call	___wmul	;wreg free
 11358  002D68  0E3C               	movlw	low _TempBattery_Volt
 11359  002D6A  241B               	addwf	?___wmul,w,c
 11360  002D6C  6ED9               	movwf	fsr2l,c
 11361  002D6E  0E01               	movlw	high _TempBattery_Volt
 11362  002D70  201C               	addwfc	?___wmul+1,w,c
 11363  002D72  6EDA               	movwf	fsr2h,c
 11364  002D74  C021  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 11365  002D78  C022  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 11366  002D7C  0E00               	movlw	0
 11367  002D7E  6E1E               	movwf	___wmul@multiplicand+1,c
 11368  002D80  0E03               	movlw	3
 11369  002D82  6E1D               	movwf	___wmul@multiplicand,c
 11370  002D84  EC86  F01D         	call	___wmul	;wreg free
 11371  002D88  0EA0               	movlw	low _Battery_Volt
 11372  002D8A  241B               	addwf	?___wmul,w,c
 11373  002D8C  6EE1               	movwf	fsr1l,c
 11374  002D8E  0E01               	movlw	high _Battery_Volt
 11375  002D90  201C               	addwfc	?___wmul+1,w,c
 11376  002D92  6EE2               	movwf	fsr1h,c
 11377  002D94  CFDE FFE6          	movff	postinc2,postinc1
 11378  002D98  CFDE FFE6          	movff	postinc2,postinc1
 11379  002D9C  CFDE FFE6          	movff	postinc2,postinc1
 11380  002DA0  4A21               	infsnz	Battery_Filter@x,f,c
 11381  002DA2  2A22               	incf	Battery_Filter@x+1,f,c
 11382  002DA4  D7CD               	goto	l4931
 11383  002DA6  D000               	goto	l4941
 11384  002DA8                     l4941:
 11385                           
 11386                           ;Battery.c: 53: }
 11387                           ;Battery.c: 54: for (x = 0; x <= 9; x++) {
 11388  002DA8  0E00               	movlw	0
 11389  002DAA  6E22               	movwf	Battery_Filter@x+1,c
 11390  002DAC  0E00               	movlw	0
 11391  002DAE  6E21               	movwf	Battery_Filter@x,c
 11392  002DB0                     l4943:
 11393  002DB0  BE22               	btfsc	Battery_Filter@x+1,7,c
 11394  002DB2  D008               	goto	l4947
 11395  002DB4  5022               	movf	Battery_Filter@x+1,w,c
 11396  002DB6  E130               	bnz	l296
 11397  002DB8  0E0A               	movlw	10
 11398  002DBA  5C21               	subwf	Battery_Filter@x,w,c
 11399  002DBC  B0D8               	btfsc	status,0,c
 11400  002DBE  0012               	return	
 11401  002DC0  D001               	goto	l4947
 11402  002DC2  0012               	return	
 11403  002DC4                     l4947:
 11404                           
 11405                           ;Battery.c: 55: PrevBattery_Volt[x] = Battery_Volt[x];
 11406  002DC4  C021  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 11407  002DC8  C022  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 11408  002DCC  0E00               	movlw	0
 11409  002DCE  6E1E               	movwf	___wmul@multiplicand+1,c
 11410  002DD0  0E03               	movlw	3
 11411  002DD2  6E1D               	movwf	___wmul@multiplicand,c
 11412  002DD4  EC86  F01D         	call	___wmul	;wreg free
 11413  002DD8  0EA0               	movlw	low _Battery_Volt
 11414  002DDA  241B               	addwf	?___wmul,w,c
 11415  002DDC  6ED9               	movwf	fsr2l,c
 11416  002DDE  0E01               	movlw	high _Battery_Volt
 11417  002DE0  201C               	addwfc	?___wmul+1,w,c
 11418  002DE2  6EDA               	movwf	fsr2h,c
 11419  002DE4  C021  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 11420  002DE8  C022  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 11421  002DEC  0E00               	movlw	0
 11422  002DEE  6E1E               	movwf	___wmul@multiplicand+1,c
 11423  002DF0  0E03               	movlw	3
 11424  002DF2  6E1D               	movwf	___wmul@multiplicand,c
 11425  002DF4  EC86  F01D         	call	___wmul	;wreg free
 11426  002DF8  0E00               	movlw	low _PrevBattery_Volt
 11427  002DFA  241B               	addwf	?___wmul,w,c
 11428  002DFC  6EE1               	movwf	fsr1l,c
 11429  002DFE  0E01               	movlw	high _PrevBattery_Volt
 11430  002E00  201C               	addwfc	?___wmul+1,w,c
 11431  002E02  6EE2               	movwf	fsr1h,c
 11432  002E04  CFDE FFE6          	movff	postinc2,postinc1
 11433  002E08  CFDE FFE6          	movff	postinc2,postinc1
 11434  002E0C  CFDE FFE6          	movff	postinc2,postinc1
 11435  002E10  4A21               	infsnz	Battery_Filter@x,f,c
 11436  002E12  2A22               	incf	Battery_Filter@x+1,f,c
 11437  002E14  D7CD               	goto	l4943
 11438  002E16  0012               	return	
 11439  002E18                     l296:
 11440  002E18  0012               	return		;funcret
 11441  002E1A                     __end_of_Battery_Filter:
 11442                           	opt stack 0
 11443                           tosu	equ	0xFFF
 11444                           tosh	equ	0xFFE
 11445                           tosl	equ	0xFFD
 11446                           pclath	equ	0xFFA
 11447                           tblptru	equ	0xFF8
 11448                           tblptrh	equ	0xFF7
 11449                           tblptrl	equ	0xFF6
 11450                           tablat	equ	0xFF5
 11451                           prodh	equ	0xFF4
 11452                           prodl	equ	0xFF3
 11453                           intcon	equ	0xFF2
 11454                           intcon2	equ	0xFF1
 11455                           postinc0	equ	0xFEE
 11456                           wreg	equ	0xFE8
 11457                           postinc1	equ	0xFE6
 11458                           postdec1	equ	0xFE5
 11459                           fsr1h	equ	0xFE2
 11460                           fsr1l	equ	0xFE1
 11461                           indf2	equ	0xFDF
 11462                           postinc2	equ	0xFDE
 11463                           postdec2	equ	0xFDD
 11464                           plusw2	equ	0xFDB
 11465                           fsr2h	equ	0xFDA
 11466                           fsr2l	equ	0xFD9
 11467                           status	equ	0xFD8
 11468                           
 11469 ;; *************** function ___wmul *****************
 11470 ;; Defined at:
 11471 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 11472 ;; Parameters:    Size  Location     Type
 11473 ;;  multiplier      2   26[COMRAM] unsigned int 
 11474 ;;  multiplicand    2   28[COMRAM] unsigned int 
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;  product         2   30[COMRAM] unsigned int 
 11477 ;; Return value:  Size  Location     Type
 11478 ;;                  2   26[COMRAM] unsigned int 
 11479 ;; Registers used:
 11480 ;;		wreg, status,2, status,0, prodl, prodh
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11486 ;;      Params:         4       0       0       0       0       0       0
 11487 ;;      Locals:         2       0       0       0       0       0       0
 11488 ;;      Temps:          0       0       0       0       0       0       0
 11489 ;;      Totals:         6       0       0       0       0       0       0
 11490 ;;Total ram usage:        6 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    4
 11493 ;; This function calls:
 11494 ;;		Nothing
 11495 ;; This function is called by:
 11496 ;;		_Battery_Convert
 11497 ;;		_Battery_Filter
 11498 ;;		_Battery_Fault
 11499 ;;		_Battery_Get
 11500 ;;		_Temp_Fault
 11501 ;;		_Temp_Filter
 11502 ;;		_Temp_Convert
 11503 ;;		_Tempeture_Get
 11504 ;;		_eval_poly
 11505 ;; This function uses a non-reentrant model
 11506 ;;
 11507                           
 11508                           	psect	text57
 11509  003B0C                     __ptext57:
 11510                           	opt stack 0
 11511  003B0C                     ___wmul:
 11512                           	opt stack 24
 11513                           
 11514                           ;incstack = 0
 11515  003B0C  501B               	movf	___wmul@multiplier,w,c
 11516  003B0E  021D               	mulwf	___wmul@multiplicand,c
 11517  003B10  CFF3 F01F          	movff	prodl,___wmul@product
 11518  003B14  CFF4 F020          	movff	prodh,___wmul@product+1
 11519  003B18  501B               	movf	___wmul@multiplier,w,c
 11520  003B1A  021E               	mulwf	___wmul@multiplicand+1,c
 11521  003B1C  50F3               	movf	prodl,w,c
 11522  003B1E  2620               	addwf	___wmul@product+1,f,c
 11523  003B20  501C               	movf	___wmul@multiplier+1,w,c
 11524  003B22  021D               	mulwf	___wmul@multiplicand,c
 11525  003B24  50F3               	movf	prodl,w,c
 11526  003B26  2620               	addwf	___wmul@product+1,f,c
 11527  003B28  C01F  F01B         	movff	___wmul@product,?___wmul
 11528  003B2C  C020  F01C         	movff	___wmul@product+1,?___wmul+1
 11529  003B30  0012               	return	
 11530  003B32  0012               	return		;funcret
 11531  003B34                     __end_of___wmul:
 11532                           	opt stack 0
 11533                           tosu	equ	0xFFF
 11534                           tosh	equ	0xFFE
 11535                           tosl	equ	0xFFD
 11536                           pclath	equ	0xFFA
 11537                           tblptru	equ	0xFF8
 11538                           tblptrh	equ	0xFF7
 11539                           tblptrl	equ	0xFF6
 11540                           tablat	equ	0xFF5
 11541                           prodh	equ	0xFF4
 11542                           prodl	equ	0xFF3
 11543                           intcon	equ	0xFF2
 11544                           intcon2	equ	0xFF1
 11545                           postinc0	equ	0xFEE
 11546                           wreg	equ	0xFE8
 11547                           postinc1	equ	0xFE6
 11548                           postdec1	equ	0xFE5
 11549                           fsr1h	equ	0xFE2
 11550                           fsr1l	equ	0xFE1
 11551                           indf2	equ	0xFDF
 11552                           postinc2	equ	0xFDE
 11553                           postdec2	equ	0xFDD
 11554                           plusw2	equ	0xFDB
 11555                           fsr2h	equ	0xFDA
 11556                           fsr2l	equ	0xFD9
 11557                           status	equ	0xFD8
 11558                           
 11559 ;; *************** function _INTERRUPT_InterruptManager *****************
 11560 ;; Defined at:
 11561 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 11562 ;; Parameters:    Size  Location     Type
 11563 ;;		None
 11564 ;; Auto vars:     Size  Location     Type
 11565 ;;		None
 11566 ;; Return value:  Size  Location     Type
 11567 ;;		None               void
 11568 ;; Registers used:
 11569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11570 ;; Tracked objects:
 11571 ;;		On entry : 0/0
 11572 ;;		On exit  : 0/0
 11573 ;;		Unchanged: 0/0
 11574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11575 ;;      Params:         0       0       0       0       0       0       0
 11576 ;;      Locals:         0       0       0       0       0       0       0
 11577 ;;      Temps:         14       0       0       0       0       0       0
 11578 ;;      Totals:        14       0       0       0       0       0       0
 11579 ;;Total ram usage:       14 bytes
 11580 ;; Hardware stack levels used:    1
 11581 ;; Hardware stack levels required when called:    3
 11582 ;; This function calls:
 11583 ;;		_ADC_ISR
 11584 ;;		_EUSART1_Receive_ISR
 11585 ;;		_EUSART1_Transmit_ISR
 11586 ;;		_TMR1_ISR
 11587 ;; This function is called by:
 11588 ;;		Interrupt level 2
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           	psect	intcode
 11593  000008                     __pintcode:
 11594                           	opt stack 0
 11595  000008                     _INTERRUPT_InterruptManager:
 11596                           	opt stack 21
 11597                           
 11598                           ;incstack = 0
 11599  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
 11600  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 11601  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 11602  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 11603  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 11604  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 11605  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 11606  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 11607  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
 11608  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
 11609  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 11610  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 11611  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 11612  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
 11613                           
 11614                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 11615  000040  BA9D               	btfsc	3997,5,c	;volatile
 11616  000042  AA9E               	btfss	3998,5,c	;volatile
 11617  000044  D003               	goto	i2l213
 11618                           
 11619                           ;interrupt_manager.c: 73: {
 11620                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
 11621  000046  ECDC  F01D         	call	_EUSART1_Receive_ISR	;wreg free
 11622                           
 11623                           ;interrupt_manager.c: 75: }
 11624  00004A  D012               	goto	i2l221
 11625  00004C                     i2l213:
 11626                           
 11627                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 11628  00004C  BC9D               	btfsc	3997,6,c	;volatile
 11629  00004E  AC9E               	btfss	3998,6,c	;volatile
 11630  000050  D003               	goto	i2l215
 11631                           
 11632                           ;interrupt_manager.c: 77: {
 11633                           ;interrupt_manager.c: 78: ADC_ISR();
 11634  000052  EC2B  F006         	call	_ADC_ISR	;wreg free
 11635                           
 11636                           ;interrupt_manager.c: 79: }
 11637  000056  D00C               	goto	i2l221
 11638  000058                     i2l215:
 11639                           
 11640                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 11641  000058  B09D               	btfsc	3997,0,c	;volatile
 11642  00005A  A09E               	btfss	3998,0,c	;volatile
 11643  00005C  D003               	goto	i2l217
 11644                           
 11645                           ;interrupt_manager.c: 81: {
 11646                           ;interrupt_manager.c: 82: TMR1_ISR();
 11647  00005E  EC0A  F01C         	call	_TMR1_ISR	;wreg free
 11648                           
 11649                           ;interrupt_manager.c: 83: }
 11650  000062  D006               	goto	i2l221
 11651  000064                     i2l217:
 11652                           
 11653                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 11654  000064  B89D               	btfsc	3997,4,c	;volatile
 11655  000066  A89E               	btfss	3998,4,c	;volatile
 11656  000068  D003               	goto	i2l221
 11657                           
 11658                           ;interrupt_manager.c: 85: {
 11659                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
 11660  00006A  ECC8  F01C         	call	_EUSART1_Transmit_ISR	;wreg free
 11661                           
 11662                           ;interrupt_manager.c: 88: else
 11663                           ;interrupt_manager.c: 89: {
 11664                           
 11665                           ;interrupt_manager.c: 87: }
 11666  00006E  D000               	goto	i2l221
 11667  000070                     i2l221:
 11668  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 11669  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 11670  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 11671  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 11672  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 11673  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 11674  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 11675  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 11676  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 11677  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 11678  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 11679  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 11680  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 11681  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 11682  0000A8  0011               	retfie		f
 11683  0000AA                     __end_of_INTERRUPT_InterruptManager:
 11684                           	opt stack 0
 11685                           tosu	equ	0xFFF
 11686                           tosh	equ	0xFFE
 11687                           tosl	equ	0xFFD
 11688                           pclatu	equ	0xFFB
 11689                           pclath	equ	0xFFA
 11690                           tblptru	equ	0xFF8
 11691                           tblptrh	equ	0xFF7
 11692                           tblptrl	equ	0xFF6
 11693                           tablat	equ	0xFF5
 11694                           prodh	equ	0xFF4
 11695                           prodl	equ	0xFF3
 11696                           intcon	equ	0xFF2
 11697                           intcon2	equ	0xFF1
 11698                           postinc0	equ	0xFEE
 11699                           fsr0h	equ	0xFEA
 11700                           fsr0l	equ	0xFE9
 11701                           wreg	equ	0xFE8
 11702                           postinc1	equ	0xFE6
 11703                           postdec1	equ	0xFE5
 11704                           fsr1h	equ	0xFE2
 11705                           fsr1l	equ	0xFE1
 11706                           indf2	equ	0xFDF
 11707                           postinc2	equ	0xFDE
 11708                           postdec2	equ	0xFDD
 11709                           plusw2	equ	0xFDB
 11710                           fsr2h	equ	0xFDA
 11711                           fsr2l	equ	0xFD9
 11712                           status	equ	0xFD8
 11713                           
 11714 ;; *************** function _TMR1_ISR *****************
 11715 ;; Defined at:
 11716 ;;		line 112 in file "mcc_generated_files/tmr1.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;		None
 11719 ;; Auto vars:     Size  Location     Type
 11720 ;;		None
 11721 ;; Return value:  Size  Location     Type
 11722 ;;		None               void
 11723 ;; Registers used:
 11724 ;;		wreg, status,2, status,0, cstack
 11725 ;; Tracked objects:
 11726 ;;		On entry : 0/0
 11727 ;;		On exit  : 0/0
 11728 ;;		Unchanged: 0/0
 11729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11730 ;;      Params:         0       0       0       0       0       0       0
 11731 ;;      Locals:         0       0       0       0       0       0       0
 11732 ;;      Temps:          0       0       0       0       0       0       0
 11733 ;;      Totals:         0       0       0       0       0       0       0
 11734 ;;Total ram usage:        0 bytes
 11735 ;; Hardware stack levels used:    1
 11736 ;; Hardware stack levels required when called:    2
 11737 ;; This function calls:
 11738 ;;		_Battery_Read
 11739 ;;		_Temp_Read
 11740 ;; This function is called by:
 11741 ;;		_INTERRUPT_InterruptManager
 11742 ;; This function uses a non-reentrant model
 11743 ;;
 11744                           
 11745                           	psect	text59
 11746  003814                     __ptext59:
 11747                           	opt stack 0
 11748  003814                     _TMR1_ISR:
 11749                           	opt stack 21
 11750                           
 11751                           ;tmr1.c: 116: PIR1bits.TMR1IF = 0;
 11752                           
 11753                           ;incstack = 0
 11754  003814  909E               	bcf	3998,0,c	;volatile
 11755                           
 11756                           ;tmr1.c: 119: TMR1H = (timer1ReloadVal >> 8);
 11757  003816  5038               	movf	_timer1ReloadVal+1,w,c	;volatile
 11758  003818  6ECF               	movwf	4047,c	;volatile
 11759                           
 11760                           ;tmr1.c: 120: TMR1L = (uint8_t) timer1ReloadVal;
 11761  00381A  C037  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 11762                           
 11763                           ;tmr1.c: 123: if (++CountCallBack >= 4)
 11764  00381E  4A2F               	infsnz	_CountCallBack,f,c
 11765  003820  2A30               	incf	_CountCallBack+1,f,c
 11766  003822  BE30               	btfsc	_CountCallBack+1,7,c
 11767  003824  D00D               	goto	i2l4027
 11768  003826  5030               	movf	_CountCallBack+1,w,c
 11769  003828  E104               	bnz	i2u397_40
 11770  00382A  0E04               	movlw	4
 11771  00382C  5C2F               	subwf	_CountCallBack,w,c
 11772  00382E  A0D8               	btfss	status,0,c
 11773  003830  D007               	goto	i2l4027
 11774  003832                     i2u397_40:
 11775                           
 11776                           ;tmr1.c: 124: {
 11777                           ;tmr1.c: 126: do { LATA4 = ~LATA4; } while(0);
 11778  003832  7889               	btg	3977,4,c	;volatile
 11779  003834  D000               	goto	i2l4025
 11780  003836                     i2l4025:
 11781                           
 11782                           ;tmr1.c: 129: CountCallBack = 0;
 11783  003836  0E00               	movlw	0
 11784  003838  6E30               	movwf	_CountCallBack+1,c
 11785  00383A  0E00               	movlw	0
 11786  00383C  6E2F               	movwf	_CountCallBack,c
 11787  00383E  D000               	goto	i2l4027
 11788  003840                     i2l4027:
 11789                           
 11790                           ;tmr1.c: 130: }
 11791                           ;tmr1.c: 135: if(CountCallBack == 1)
 11792  003840  042F               	decf	_CountCallBack,w,c
 11793  003842  1030               	iorwf	_CountCallBack+1,w,c
 11794  003844  A4D8               	btfss	status,2,c
 11795  003846  D003               	goto	i2l4031
 11796                           
 11797                           ;tmr1.c: 136: {
 11798                           ;tmr1.c: 137: Battery_Read();
 11799  003848  EC28  F01E         	call	_Battery_Read	;wreg free
 11800  00384C  D000               	goto	i2l4031
 11801  00384E                     i2l4031:
 11802                           
 11803                           ;tmr1.c: 138: }
 11804                           ;tmr1.c: 139: if(CountCallBack == 3)
 11805  00384E  0E03               	movlw	3
 11806  003850  182F               	xorwf	_CountCallBack,w,c
 11807  003852  1030               	iorwf	_CountCallBack+1,w,c
 11808  003854  A4D8               	btfss	status,2,c
 11809  003856  0012               	return	
 11810                           
 11811                           ;tmr1.c: 140: {
 11812                           ;tmr1.c: 141: Temp_Read();
 11813  003858  EC1C  F01E         	call	_Temp_Read	;wreg free
 11814  00385C  0012               	return	
 11815  00385E  0012               	return		;funcret
 11816  003860                     __end_of_TMR1_ISR:
 11817                           	opt stack 0
 11818                           tosu	equ	0xFFF
 11819                           tosh	equ	0xFFE
 11820                           tosl	equ	0xFFD
 11821                           pclatu	equ	0xFFB
 11822                           pclath	equ	0xFFA
 11823                           tblptru	equ	0xFF8
 11824                           tblptrh	equ	0xFF7
 11825                           tblptrl	equ	0xFF6
 11826                           tablat	equ	0xFF5
 11827                           prodh	equ	0xFF4
 11828                           prodl	equ	0xFF3
 11829                           intcon	equ	0xFF2
 11830                           intcon2	equ	0xFF1
 11831                           postinc0	equ	0xFEE
 11832                           fsr0h	equ	0xFEA
 11833                           fsr0l	equ	0xFE9
 11834                           wreg	equ	0xFE8
 11835                           postinc1	equ	0xFE6
 11836                           postdec1	equ	0xFE5
 11837                           fsr1h	equ	0xFE2
 11838                           fsr1l	equ	0xFE1
 11839                           indf2	equ	0xFDF
 11840                           postinc2	equ	0xFDE
 11841                           postdec2	equ	0xFDD
 11842                           plusw2	equ	0xFDB
 11843                           fsr2h	equ	0xFDA
 11844                           fsr2l	equ	0xFD9
 11845                           status	equ	0xFD8
 11846                           
 11847 ;; *************** function _Temp_Read *****************
 11848 ;; Defined at:
 11849 ;;		line 36 in file "Tempeture.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;		None
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;		None
 11854 ;; Return value:  Size  Location     Type
 11855 ;;		None               void
 11856 ;; Registers used:
 11857 ;;		wreg, status,2, status,0, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11863 ;;      Params:         0       0       0       0       0       0       0
 11864 ;;      Locals:         0       0       0       0       0       0       0
 11865 ;;      Temps:          0       0       0       0       0       0       0
 11866 ;;      Totals:         0       0       0       0       0       0       0
 11867 ;;Total ram usage:        0 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    1
 11870 ;; This function calls:
 11871 ;;		_ADC_StartConversion
 11872 ;; This function is called by:
 11873 ;;		_TMR1_ISR
 11874 ;; This function uses a non-reentrant model
 11875 ;;
 11876                           
 11877                           	psect	text60
 11878  003C38                     __ptext60:
 11879                           	opt stack 0
 11880  003C38                     _Temp_Read:
 11881                           	opt stack 21
 11882                           
 11883                           ;Tempeture.c: 39: ADC_Buffer_Point = 0;
 11884                           
 11885                           ;incstack = 0
 11886  003C38  0E00               	movlw	0
 11887  003C3A  6E2E               	movwf	_ADC_Buffer_Point+1,c
 11888  003C3C  0E00               	movlw	0
 11889  003C3E  6E2D               	movwf	_ADC_Buffer_Point,c
 11890                           
 11891                           ;Tempeture.c: 40: Temp_Aquire = 1;
 11892  003C40  0E01               	movlw	1
 11893  003C42  6E3A               	movwf	_Temp_Aquire,c
 11894                           
 11895                           ;Tempeture.c: 41: ADCON1 = 0x80;
 11896  003C44  0E80               	movlw	128
 11897  003C46  6EC1               	movwf	4033,c	;volatile
 11898                           
 11899                           ;Tempeture.c: 42: ADC_StartConversion(Temp1);
 11900  003C48  0E0E               	movlw	14
 11901  003C4A  ECEB  F01D         	call	_ADC_StartConversion
 11902  003C4E  0012               	return		;funcret
 11903  003C50                     __end_of_Temp_Read:
 11904                           	opt stack 0
 11905                           tosu	equ	0xFFF
 11906                           tosh	equ	0xFFE
 11907                           tosl	equ	0xFFD
 11908                           pclatu	equ	0xFFB
 11909                           pclath	equ	0xFFA
 11910                           tblptru	equ	0xFF8
 11911                           tblptrh	equ	0xFF7
 11912                           tblptrl	equ	0xFF6
 11913                           tablat	equ	0xFF5
 11914                           prodh	equ	0xFF4
 11915                           prodl	equ	0xFF3
 11916                           intcon	equ	0xFF2
 11917                           intcon2	equ	0xFF1
 11918                           postinc0	equ	0xFEE
 11919                           fsr0h	equ	0xFEA
 11920                           fsr0l	equ	0xFE9
 11921                           wreg	equ	0xFE8
 11922                           postinc1	equ	0xFE6
 11923                           postdec1	equ	0xFE5
 11924                           fsr1h	equ	0xFE2
 11925                           fsr1l	equ	0xFE1
 11926                           indf2	equ	0xFDF
 11927                           postinc2	equ	0xFDE
 11928                           postdec2	equ	0xFDD
 11929                           plusw2	equ	0xFDB
 11930                           fsr2h	equ	0xFDA
 11931                           fsr2l	equ	0xFD9
 11932                           status	equ	0xFD8
 11933                           
 11934 ;; *************** function _Battery_Read *****************
 11935 ;; Defined at:
 11936 ;;		line 18 in file "Battery.c"
 11937 ;; Parameters:    Size  Location     Type
 11938 ;;		None
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;		None
 11941 ;; Return value:  Size  Location     Type
 11942 ;;		None               void
 11943 ;; Registers used:
 11944 ;;		wreg, status,2, status,0, cstack
 11945 ;; Tracked objects:
 11946 ;;		On entry : 0/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11950 ;;      Params:         0       0       0       0       0       0       0
 11951 ;;      Locals:         0       0       0       0       0       0       0
 11952 ;;      Temps:          0       0       0       0       0       0       0
 11953 ;;      Totals:         0       0       0       0       0       0       0
 11954 ;;Total ram usage:        0 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; Hardware stack levels required when called:    1
 11957 ;; This function calls:
 11958 ;;		_ADC_StartConversion
 11959 ;; This function is called by:
 11960 ;;		_TMR1_ISR
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           	psect	text61
 11965  003C50                     __ptext61:
 11966                           	opt stack 0
 11967  003C50                     _Battery_Read:
 11968                           	opt stack 21
 11969                           
 11970                           ;Battery.c: 20: ADC_Buffer_Point = 0;
 11971                           
 11972                           ;incstack = 0
 11973  003C50  0E00               	movlw	0
 11974  003C52  6E2E               	movwf	_ADC_Buffer_Point+1,c
 11975  003C54  0E00               	movlw	0
 11976  003C56  6E2D               	movwf	_ADC_Buffer_Point,c
 11977                           
 11978                           ;Battery.c: 21: Volt_Aquire = 1;
 11979  003C58  0E01               	movlw	1
 11980  003C5A  6E3B               	movwf	_Volt_Aquire,c
 11981                           
 11982                           ;Battery.c: 22: ADCON1 = 0x80;
 11983  003C5C  0E80               	movlw	128
 11984  003C5E  6EC1               	movwf	4033,c	;volatile
 11985                           
 11986                           ;Battery.c: 23: ADC_StartConversion(Battery1);
 11987  003C60  0E01               	movlw	1
 11988  003C62  ECEB  F01D         	call	_ADC_StartConversion
 11989  003C66  0012               	return		;funcret
 11990  003C68                     __end_of_Battery_Read:
 11991                           	opt stack 0
 11992                           tosu	equ	0xFFF
 11993                           tosh	equ	0xFFE
 11994                           tosl	equ	0xFFD
 11995                           pclatu	equ	0xFFB
 11996                           pclath	equ	0xFFA
 11997                           tblptru	equ	0xFF8
 11998                           tblptrh	equ	0xFF7
 11999                           tblptrl	equ	0xFF6
 12000                           tablat	equ	0xFF5
 12001                           prodh	equ	0xFF4
 12002                           prodl	equ	0xFF3
 12003                           intcon	equ	0xFF2
 12004                           intcon2	equ	0xFF1
 12005                           postinc0	equ	0xFEE
 12006                           fsr0h	equ	0xFEA
 12007                           fsr0l	equ	0xFE9
 12008                           wreg	equ	0xFE8
 12009                           postinc1	equ	0xFE6
 12010                           postdec1	equ	0xFE5
 12011                           fsr1h	equ	0xFE2
 12012                           fsr1l	equ	0xFE1
 12013                           indf2	equ	0xFDF
 12014                           postinc2	equ	0xFDE
 12015                           postdec2	equ	0xFDD
 12016                           plusw2	equ	0xFDB
 12017                           fsr2h	equ	0xFDA
 12018                           fsr2l	equ	0xFD9
 12019                           status	equ	0xFD8
 12020                           
 12021 ;; *************** function _EUSART1_Transmit_ISR *****************
 12022 ;; Defined at:
 12023 ;;		line 157 in file "UART.c"
 12024 ;; Parameters:    Size  Location     Type
 12025 ;;		None
 12026 ;; Auto vars:     Size  Location     Type
 12027 ;;		None
 12028 ;; Return value:  Size  Location     Type
 12029 ;;		None               void
 12030 ;; Registers used:
 12031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12032 ;; Tracked objects:
 12033 ;;		On entry : 0/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12037 ;;      Params:         0       0       0       0       0       0       0
 12038 ;;      Locals:         0       0       0       0       0       0       0
 12039 ;;      Temps:          0       0       0       0       0       0       0
 12040 ;;      Totals:         0       0       0       0       0       0       0
 12041 ;;Total ram usage:        0 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    2
 12044 ;; This function calls:
 12045 ;;		i2_UART_buff_get
 12046 ;;		i2_UART_buff_size
 12047 ;; This function is called by:
 12048 ;;		_INTERRUPT_InterruptManager
 12049 ;; This function uses a non-reentrant model
 12050 ;;
 12051                           
 12052                           	psect	text62
 12053  003990                     __ptext62:
 12054                           	opt stack 0
 12055  003990                     _EUSART1_Transmit_ISR:
 12056                           	opt stack 21
 12057                           
 12058                           ;UART.c: 159: if (UART_buff_size(&output_buffer) > 0) {
 12059                           
 12060                           ;incstack = 0
 12061  003990  0E00               	movlw	low _output_buffer
 12062  003992  6E01               	movwf	i2UART_buff_size@_this,c
 12063  003994  0E05               	movlw	high _output_buffer
 12064  003996  6E02               	movwf	i2UART_buff_size@_this+1,c
 12065  003998  EC34  F01E         	call	i2_UART_buff_size	;wreg free
 12066  00399C  BE02               	btfsc	?i2_UART_buff_size+1,7,c
 12067  00399E  D00D               	goto	i2l4177
 12068  0039A0  5002               	movf	?i2_UART_buff_size+1,w,c
 12069  0039A2  E103               	bnz	i2u403_40
 12070  0039A4  0401               	decf	?i2_UART_buff_size,w,c
 12071  0039A6  A0D8               	btfss	status,0,c
 12072  0039A8  D008               	goto	i2l4177
 12073  0039AA                     i2u403_40:
 12074                           
 12075                           ;UART.c: 160: TXREG1 = UART_buff_get(&output_buffer);
 12076  0039AA  0E00               	movlw	low _output_buffer
 12077  0039AC  6E07               	movwf	i2UART_buff_get@_this,c
 12078  0039AE  0E05               	movlw	high _output_buffer
 12079  0039B0  6E08               	movwf	i2UART_buff_get@_this+1,c
 12080  0039B2  EC82  F019         	call	i2_UART_buff_get	;wreg free
 12081  0039B6  6EAD               	movwf	4013,c	;volatile
 12082                           
 12083                           ;UART.c: 161: } else {
 12084  0039B8  0012               	return	
 12085  0039BA                     i2l4177:
 12086                           
 12087                           ;UART.c: 162: Transmit_stall = 1;
 12088  0039BA  0E01               	movlw	1
 12089  0039BC  6E45               	movwf	_Transmit_stall,c
 12090                           
 12091                           ;UART.c: 163: PIE1bits.TX1IE = 0;
 12092  0039BE  989D               	bcf	3997,4,c	;volatile
 12093  0039C0  0012               	return	
 12094  0039C2  0012               	return		;funcret
 12095  0039C4                     __end_of_EUSART1_Transmit_ISR:
 12096                           	opt stack 0
 12097                           tosu	equ	0xFFF
 12098                           tosh	equ	0xFFE
 12099                           tosl	equ	0xFFD
 12100                           pclatu	equ	0xFFB
 12101                           pclath	equ	0xFFA
 12102                           tblptru	equ	0xFF8
 12103                           tblptrh	equ	0xFF7
 12104                           tblptrl	equ	0xFF6
 12105                           tablat	equ	0xFF5
 12106                           prodh	equ	0xFF4
 12107                           prodl	equ	0xFF3
 12108                           intcon	equ	0xFF2
 12109                           intcon2	equ	0xFF1
 12110                           postinc0	equ	0xFEE
 12111                           fsr0h	equ	0xFEA
 12112                           fsr0l	equ	0xFE9
 12113                           wreg	equ	0xFE8
 12114                           postinc1	equ	0xFE6
 12115                           postdec1	equ	0xFE5
 12116                           fsr1h	equ	0xFE2
 12117                           fsr1l	equ	0xFE1
 12118                           indf2	equ	0xFDF
 12119                           postinc2	equ	0xFDE
 12120                           postdec2	equ	0xFDD
 12121                           plusw2	equ	0xFDB
 12122                           fsr2h	equ	0xFDA
 12123                           fsr2l	equ	0xFD9
 12124                           status	equ	0xFD8
 12125                           
 12126 ;; *************** function i2_UART_buff_size *****************
 12127 ;; Defined at:
 12128 ;;		line 102 in file "UART.c"
 12129 ;; Parameters:    Size  Location     Type
 12130 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 12131 ;;		 -> output_buffer(206), input_buffer(206), 
 12132 ;; Auto vars:     Size  Location     Type
 12133 ;;		None
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  2    0[COMRAM] int 
 12136 ;; Registers used:
 12137 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12138 ;; Tracked objects:
 12139 ;;		On entry : 0/0
 12140 ;;		On exit  : 0/0
 12141 ;;		Unchanged: 0/0
 12142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12143 ;;      Params:         2       0       0       0       0       0       0
 12144 ;;      Locals:         0       0       0       0       0       0       0
 12145 ;;      Temps:          0       0       0       0       0       0       0
 12146 ;;      Totals:         2       0       0       0       0       0       0
 12147 ;;Total ram usage:        2 bytes
 12148 ;; Hardware stack levels used:    1
 12149 ;; This function calls:
 12150 ;;		Nothing
 12151 ;; This function is called by:
 12152 ;;		_EUSART1_Transmit_ISR
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           	psect	text63
 12157  003C68                     __ptext63:
 12158                           	opt stack 0
 12159  003C68                     i2_UART_buff_size:
 12160                           	opt stack 22
 12161                           
 12162                           ;UART.c: 103: return (_this->count);
 12163                           
 12164                           ;incstack = 0
 12165  003C68  EE20 F0CC          	lfsr	2,204
 12166  003C6C  5001               	movf	i2UART_buff_size@_this,w,c
 12167  003C6E  26D9               	addwf	fsr2l,f,c
 12168  003C70  5002               	movf	i2UART_buff_size@_this+1,w,c
 12169  003C72  22DA               	addwfc	fsr2h,f,c
 12170  003C74  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 12171  003C78  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 12172  003C7C  0012               	return	
 12173  003C7E  0012               	return		;funcret
 12174  003C80                     __end_ofi2_UART_buff_size:
 12175                           	opt stack 0
 12176                           tosu	equ	0xFFF
 12177                           tosh	equ	0xFFE
 12178                           tosl	equ	0xFFD
 12179                           pclatu	equ	0xFFB
 12180                           pclath	equ	0xFFA
 12181                           tblptru	equ	0xFF8
 12182                           tblptrh	equ	0xFF7
 12183                           tblptrl	equ	0xFF6
 12184                           tablat	equ	0xFF5
 12185                           prodh	equ	0xFF4
 12186                           prodl	equ	0xFF3
 12187                           intcon	equ	0xFF2
 12188                           intcon2	equ	0xFF1
 12189                           postinc0	equ	0xFEE
 12190                           fsr0h	equ	0xFEA
 12191                           fsr0l	equ	0xFE9
 12192                           wreg	equ	0xFE8
 12193                           postinc1	equ	0xFE6
 12194                           postdec1	equ	0xFE5
 12195                           fsr1h	equ	0xFE2
 12196                           fsr1l	equ	0xFE1
 12197                           indf2	equ	0xFDF
 12198                           postinc2	equ	0xFDE
 12199                           postdec2	equ	0xFDD
 12200                           plusw2	equ	0xFDB
 12201                           fsr2h	equ	0xFDA
 12202                           fsr2l	equ	0xFD9
 12203                           status	equ	0xFD8
 12204                           
 12205 ;; *************** function i2_UART_buff_get *****************
 12206 ;; Defined at:
 12207 ;;		line 81 in file "UART.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12210 ;;		 -> output_buffer(206), input_buffer(206), 
 12211 ;; Auto vars:     Size  Location     Type
 12212 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 12213 ;; Return value:  Size  Location     Type
 12214 ;;                  1    wreg      unsigned char 
 12215 ;; Registers used:
 12216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12217 ;; Tracked objects:
 12218 ;;		On entry : 0/0
 12219 ;;		On exit  : 0/0
 12220 ;;		Unchanged: 0/0
 12221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12222 ;;      Params:         2       0       0       0       0       0       0
 12223 ;;      Locals:         1       0       0       0       0       0       0
 12224 ;;      Temps:          2       0       0       0       0       0       0
 12225 ;;      Totals:         5       0       0       0       0       0       0
 12226 ;;Total ram usage:        5 bytes
 12227 ;; Hardware stack levels used:    1
 12228 ;; Hardware stack levels required when called:    1
 12229 ;; This function calls:
 12230 ;;		i2_UART_buff_modulo_inc
 12231 ;; This function is called by:
 12232 ;;		_EUSART1_Transmit_ISR
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           	psect	text64
 12237  003304                     __ptext64:
 12238                           	opt stack 0
 12239  003304                     i2_UART_buff_get:
 12240                           	opt stack 21
 12241                           
 12242                           ;UART.c: 82: unsigned char c;
 12243                           ;UART.c: 83: if (_this->count > 0) {
 12244                           
 12245                           ;incstack = 0
 12246  003304  EE20 F0CC          	lfsr	2,204
 12247  003308  5007               	movf	i2UART_buff_get@_this,w,c
 12248  00330A  26D9               	addwf	fsr2l,f,c
 12249  00330C  5008               	movf	i2UART_buff_get@_this+1,w,c
 12250  00330E  22DA               	addwfc	fsr2h,f,c
 12251  003310  0E01               	movlw	1
 12252  003312  BEDB               	btfsc	plusw2,7,c
 12253  003314  D03C               	goto	i2l4009
 12254  003316  0E01               	movlw	1
 12255  003318  50DB               	movf	plusw2,w,c
 12256  00331A  E103               	bnz	i2u396_40
 12257  00331C  04DE               	decf	postinc2,w,c
 12258  00331E  A0D8               	btfss	status,0,c
 12259  003320  D036               	goto	i2l4009
 12260  003322                     i2u396_40:
 12261                           
 12262                           ;UART.c: 84: c = _this->buf[_this->tail];
 12263  003322  EE20 F0CA          	lfsr	2,202
 12264  003326  5007               	movf	i2UART_buff_get@_this,w,c
 12265  003328  26D9               	addwf	fsr2l,f,c
 12266  00332A  5008               	movf	i2UART_buff_get@_this+1,w,c
 12267  00332C  22DA               	addwfc	fsr2h,f,c
 12268  00332E  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 12269  003332  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 12270  003336  5009               	movf	??i2_UART_buff_get,w,c
 12271  003338  2407               	addwf	i2UART_buff_get@_this,w,c
 12272  00333A  6ED9               	movwf	fsr2l,c
 12273  00333C  500A               	movf	??i2_UART_buff_get+1,w,c
 12274  00333E  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 12275  003340  6EDA               	movwf	fsr2h,c
 12276  003342  50DF               	movf	indf2,w,c
 12277  003344  6E0B               	movwf	i2UART_buff_get@c,c
 12278                           
 12279                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12280  003346  EE20 F0CA          	lfsr	2,202
 12281  00334A  5007               	movf	i2UART_buff_get@_this,w,c
 12282  00334C  26D9               	addwf	fsr2l,f,c
 12283  00334E  5008               	movf	i2UART_buff_get@_this+1,w,c
 12284  003350  22DA               	addwfc	fsr2h,f,c
 12285  003352  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12286  003356  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12287  00335A  0E00               	movlw	0
 12288  00335C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12289  00335E  0EC8               	movlw	200
 12290  003360  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12291  003362  EC6F  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12292  003366  EE20 F0CA          	lfsr	2,202
 12293  00336A  5007               	movf	i2UART_buff_get@_this,w,c
 12294  00336C  26D9               	addwf	fsr2l,f,c
 12295  00336E  5008               	movf	i2UART_buff_get@_this+1,w,c
 12296  003370  22DA               	addwfc	fsr2h,f,c
 12297  003372  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12298  003376  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12299                           
 12300                           ;UART.c: 86: --_this->count;
 12301  00337A  EE20 F0CC          	lfsr	2,204
 12302  00337E  5007               	movf	i2UART_buff_get@_this,w,c
 12303  003380  26D9               	addwf	fsr2l,f,c
 12304  003382  5008               	movf	i2UART_buff_get@_this+1,w,c
 12305  003384  22DA               	addwfc	fsr2h,f,c
 12306  003386  06DE               	decf	postinc2,f,c
 12307  003388  0E00               	movlw	0
 12308  00338A  5ADD               	subwfb	postdec2,f,c
 12309                           
 12310                           ;UART.c: 87: } else {
 12311  00338C  D002               	goto	i2l782
 12312  00338E                     i2l4009:
 12313                           
 12314                           ;UART.c: 88: c = 0;
 12315  00338E  0E00               	movlw	0
 12316  003390  6E0B               	movwf	i2UART_buff_get@c,c
 12317  003392                     i2l782:
 12318                           
 12319                           ;UART.c: 89: }
 12320                           ;UART.c: 90: return (c);
 12321  003392  500B               	movf	i2UART_buff_get@c,w,c
 12322  003394  0012               	return	
 12323  003396  0012               	return		;funcret
 12324  003398                     __end_ofi2_UART_buff_get:
 12325                           	opt stack 0
 12326                           tosu	equ	0xFFF
 12327                           tosh	equ	0xFFE
 12328                           tosl	equ	0xFFD
 12329                           pclatu	equ	0xFFB
 12330                           pclath	equ	0xFFA
 12331                           tblptru	equ	0xFF8
 12332                           tblptrh	equ	0xFF7
 12333                           tblptrl	equ	0xFF6
 12334                           tablat	equ	0xFF5
 12335                           prodh	equ	0xFF4
 12336                           prodl	equ	0xFF3
 12337                           intcon	equ	0xFF2
 12338                           intcon2	equ	0xFF1
 12339                           postinc0	equ	0xFEE
 12340                           fsr0h	equ	0xFEA
 12341                           fsr0l	equ	0xFE9
 12342                           wreg	equ	0xFE8
 12343                           postinc1	equ	0xFE6
 12344                           postdec1	equ	0xFE5
 12345                           fsr1h	equ	0xFE2
 12346                           fsr1l	equ	0xFE1
 12347                           indf2	equ	0xFDF
 12348                           postinc2	equ	0xFDE
 12349                           postdec2	equ	0xFDD
 12350                           plusw2	equ	0xFDB
 12351                           fsr2h	equ	0xFDA
 12352                           fsr2l	equ	0xFD9
 12353                           status	equ	0xFD8
 12354                           
 12355 ;; *************** function _EUSART1_Receive_ISR *****************
 12356 ;; Defined at:
 12357 ;;		line 139 in file "UART.c"
 12358 ;; Parameters:    Size  Location     Type
 12359 ;;		None
 12360 ;; Auto vars:     Size  Location     Type
 12361 ;;  data            1   11[COMRAM] unsigned char 
 12362 ;; Return value:  Size  Location     Type
 12363 ;;		None               void
 12364 ;; Registers used:
 12365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12366 ;; Tracked objects:
 12367 ;;		On entry : 0/0
 12368 ;;		On exit  : 0/0
 12369 ;;		Unchanged: 0/0
 12370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12371 ;;      Params:         0       0       0       0       0       0       0
 12372 ;;      Locals:         1       0       0       0       0       0       0
 12373 ;;      Temps:          0       0       0       0       0       0       0
 12374 ;;      Totals:         1       0       0       0       0       0       0
 12375 ;;Total ram usage:        1 bytes
 12376 ;; Hardware stack levels used:    1
 12377 ;; Hardware stack levels required when called:    2
 12378 ;; This function calls:
 12379 ;;		i2_UART_buff_put
 12380 ;; This function is called by:
 12381 ;;		_INTERRUPT_InterruptManager
 12382 ;; This function uses a non-reentrant model
 12383 ;;
 12384                           
 12385                           	psect	text65
 12386  003BB8                     __ptext65:
 12387                           	opt stack 0
 12388  003BB8                     _EUSART1_Receive_ISR:
 12389                           	opt stack 21
 12390                           
 12391                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
 12392                           
 12393                           ;incstack = 0
 12394  003BB8  A2AB               	btfss	4011,1,c	;volatile
 12395  003BBA  D002               	goto	i2l813
 12396                           
 12397                           ;UART.c: 143: RC1STAbits.CREN = 0;
 12398  003BBC  98AB               	bcf	4011,4,c	;volatile
 12399                           
 12400                           ;UART.c: 144: RC1STAbits.CREN = 1;
 12401  003BBE  88AB               	bsf	4011,4,c	;volatile
 12402  003BC0                     i2l813:
 12403                           
 12404                           ;UART.c: 145: }
 12405                           ;UART.c: 153: unsigned char data = RCREG1;
 12406  003BC0  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 12407                           
 12408                           ;UART.c: 154: UART_buff_put(&input_buffer, data);
 12409  003BC4  0E00               	movlw	low _input_buffer
 12410  003BC6  6E07               	movwf	i2UART_buff_put@_this,c
 12411  003BC8  0E04               	movlw	high _input_buffer
 12412  003BCA  6E08               	movwf	i2UART_buff_put@_this+1,c
 12413  003BCC  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 12414  003BD0  ECBA  F013         	call	i2_UART_buff_put	;wreg free
 12415  003BD4  0012               	return		;funcret
 12416  003BD6                     __end_of_EUSART1_Receive_ISR:
 12417                           	opt stack 0
 12418                           tosu	equ	0xFFF
 12419                           tosh	equ	0xFFE
 12420                           tosl	equ	0xFFD
 12421                           pclatu	equ	0xFFB
 12422                           pclath	equ	0xFFA
 12423                           tblptru	equ	0xFF8
 12424                           tblptrh	equ	0xFF7
 12425                           tblptrl	equ	0xFF6
 12426                           tablat	equ	0xFF5
 12427                           prodh	equ	0xFF4
 12428                           prodl	equ	0xFF3
 12429                           intcon	equ	0xFF2
 12430                           intcon2	equ	0xFF1
 12431                           postinc0	equ	0xFEE
 12432                           fsr0h	equ	0xFEA
 12433                           fsr0l	equ	0xFE9
 12434                           wreg	equ	0xFE8
 12435                           postinc1	equ	0xFE6
 12436                           postdec1	equ	0xFE5
 12437                           fsr1h	equ	0xFE2
 12438                           fsr1l	equ	0xFE1
 12439                           indf2	equ	0xFDF
 12440                           postinc2	equ	0xFDE
 12441                           postdec2	equ	0xFDD
 12442                           plusw2	equ	0xFDB
 12443                           fsr2h	equ	0xFDA
 12444                           fsr2l	equ	0xFD9
 12445                           status	equ	0xFD8
 12446                           
 12447 ;; *************** function i2_UART_buff_put *****************
 12448 ;; Defined at:
 12449 ;;		line 68 in file "UART.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12452 ;;		 -> output_buffer(206), input_buffer(206), 
 12453 ;;  c               1    8[COMRAM] const unsigned char 
 12454 ;; Auto vars:     Size  Location     Type
 12455 ;;		None
 12456 ;; Return value:  Size  Location     Type
 12457 ;;		None               void
 12458 ;; Registers used:
 12459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12460 ;; Tracked objects:
 12461 ;;		On entry : 0/0
 12462 ;;		On exit  : 0/0
 12463 ;;		Unchanged: 0/0
 12464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12465 ;;      Params:         3       0       0       0       0       0       0
 12466 ;;      Locals:         0       0       0       0       0       0       0
 12467 ;;      Temps:          2       0       0       0       0       0       0
 12468 ;;      Totals:         5       0       0       0       0       0       0
 12469 ;;Total ram usage:        5 bytes
 12470 ;; Hardware stack levels used:    1
 12471 ;; Hardware stack levels required when called:    1
 12472 ;; This function calls:
 12473 ;;		i2_UART_buff_modulo_inc
 12474 ;; This function is called by:
 12475 ;;		_EUSART1_Receive_ISR
 12476 ;; This function uses a non-reentrant model
 12477 ;;
 12478                           
 12479                           	psect	text66
 12480  002774                     __ptext66:
 12481                           	opt stack 0
 12482  002774                     i2_UART_buff_put:
 12483                           	opt stack 21
 12484                           
 12485                           ;UART.c: 69: if (_this->count < 200) {
 12486                           
 12487                           ;incstack = 0
 12488  002774  EE20 F0CC          	lfsr	2,204
 12489  002778  5007               	movf	i2UART_buff_put@_this,w,c
 12490  00277A  26D9               	addwf	fsr2l,f,c
 12491  00277C  5008               	movf	i2UART_buff_put@_this+1,w,c
 12492  00277E  22DA               	addwfc	fsr2h,f,c
 12493  002780  0E01               	movlw	1
 12494  002782  BEDB               	btfsc	plusw2,7,c
 12495  002784  D007               	goto	i2l3989
 12496  002786  0E01               	movlw	1
 12497  002788  50DB               	movf	plusw2,w,c
 12498  00278A  E13A               	bnz	i2l3995
 12499  00278C  0EC8               	movlw	200
 12500  00278E  5CDE               	subwf	postinc2,w,c
 12501  002790  B0D8               	btfsc	status,0,c
 12502  002792  D036               	goto	i2l3995
 12503  002794                     i2l3989:
 12504                           
 12505                           ;UART.c: 70: _this->buf[_this->head] = c;
 12506  002794  EE20 F0C8          	lfsr	2,200
 12507  002798  5007               	movf	i2UART_buff_put@_this,w,c
 12508  00279A  26D9               	addwf	fsr2l,f,c
 12509  00279C  5008               	movf	i2UART_buff_put@_this+1,w,c
 12510  00279E  22DA               	addwfc	fsr2h,f,c
 12511  0027A0  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12512  0027A4  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12513  0027A8  500A               	movf	??i2_UART_buff_put,w,c
 12514  0027AA  2407               	addwf	i2UART_buff_put@_this,w,c
 12515  0027AC  6ED9               	movwf	fsr2l,c
 12516  0027AE  500B               	movf	??i2_UART_buff_put+1,w,c
 12517  0027B0  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12518  0027B2  6EDA               	movwf	fsr2h,c
 12519  0027B4  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12520                           
 12521                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12522  0027B8  EE20 F0C8          	lfsr	2,200
 12523  0027BC  5007               	movf	i2UART_buff_put@_this,w,c
 12524  0027BE  26D9               	addwf	fsr2l,f,c
 12525  0027C0  5008               	movf	i2UART_buff_put@_this+1,w,c
 12526  0027C2  22DA               	addwfc	fsr2h,f,c
 12527  0027C4  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12528  0027C8  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12529  0027CC  0E00               	movlw	0
 12530  0027CE  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12531  0027D0  0EC8               	movlw	200
 12532  0027D2  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12533  0027D4  EC6F  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12534  0027D8  EE20 F0C8          	lfsr	2,200
 12535  0027DC  5007               	movf	i2UART_buff_put@_this,w,c
 12536  0027DE  26D9               	addwf	fsr2l,f,c
 12537  0027E0  5008               	movf	i2UART_buff_put@_this+1,w,c
 12538  0027E2  22DA               	addwfc	fsr2h,f,c
 12539  0027E4  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12540  0027E8  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12541                           
 12542                           ;UART.c: 72: ++_this->count;
 12543  0027EC  EE20 F0CC          	lfsr	2,204
 12544  0027F0  5007               	movf	i2UART_buff_put@_this,w,c
 12545  0027F2  26D9               	addwf	fsr2l,f,c
 12546  0027F4  5008               	movf	i2UART_buff_put@_this+1,w,c
 12547  0027F6  22DA               	addwfc	fsr2h,f,c
 12548  0027F8  2ADE               	incf	postinc2,f,c
 12549  0027FA  0E00               	movlw	0
 12550  0027FC  22DD               	addwfc	postdec2,f,c
 12551                           
 12552                           ;UART.c: 73: } else {
 12553  0027FE  0012               	return	
 12554  002800                     i2l3995:
 12555                           
 12556                           ;UART.c: 74: _this->buf[_this->head] = c;
 12557  002800  EE20 F0C8          	lfsr	2,200
 12558  002804  5007               	movf	i2UART_buff_put@_this,w,c
 12559  002806  26D9               	addwf	fsr2l,f,c
 12560  002808  5008               	movf	i2UART_buff_put@_this+1,w,c
 12561  00280A  22DA               	addwfc	fsr2h,f,c
 12562  00280C  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12563  002810  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12564  002814  500A               	movf	??i2_UART_buff_put,w,c
 12565  002816  2407               	addwf	i2UART_buff_put@_this,w,c
 12566  002818  6ED9               	movwf	fsr2l,c
 12567  00281A  500B               	movf	??i2_UART_buff_put+1,w,c
 12568  00281C  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12569  00281E  6EDA               	movwf	fsr2h,c
 12570  002820  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12571                           
 12572                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12573  002824  EE20 F0C8          	lfsr	2,200
 12574  002828  5007               	movf	i2UART_buff_put@_this,w,c
 12575  00282A  26D9               	addwf	fsr2l,f,c
 12576  00282C  5008               	movf	i2UART_buff_put@_this+1,w,c
 12577  00282E  22DA               	addwfc	fsr2h,f,c
 12578  002830  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12579  002834  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12580  002838  0E00               	movlw	0
 12581  00283A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12582  00283C  0EC8               	movlw	200
 12583  00283E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12584  002840  EC6F  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12585  002844  EE20 F0C8          	lfsr	2,200
 12586  002848  5007               	movf	i2UART_buff_put@_this,w,c
 12587  00284A  26D9               	addwf	fsr2l,f,c
 12588  00284C  5008               	movf	i2UART_buff_put@_this+1,w,c
 12589  00284E  22DA               	addwfc	fsr2h,f,c
 12590  002850  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12591  002854  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12592                           
 12593                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12594  002858  EE20 F0CA          	lfsr	2,202
 12595  00285C  5007               	movf	i2UART_buff_put@_this,w,c
 12596  00285E  26D9               	addwf	fsr2l,f,c
 12597  002860  5008               	movf	i2UART_buff_put@_this+1,w,c
 12598  002862  22DA               	addwfc	fsr2h,f,c
 12599  002864  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12600  002868  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12601  00286C  0E00               	movlw	0
 12602  00286E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12603  002870  0EC8               	movlw	200
 12604  002872  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12605  002874  EC6F  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12606  002878  EE20 F0CA          	lfsr	2,202
 12607  00287C  5007               	movf	i2UART_buff_put@_this,w,c
 12608  00287E  26D9               	addwf	fsr2l,f,c
 12609  002880  5008               	movf	i2UART_buff_put@_this+1,w,c
 12610  002882  22DA               	addwfc	fsr2h,f,c
 12611  002884  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12612  002888  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12613  00288C  0012               	return	
 12614  00288E  0012               	return		;funcret
 12615  002890                     __end_ofi2_UART_buff_put:
 12616                           	opt stack 0
 12617                           tosu	equ	0xFFF
 12618                           tosh	equ	0xFFE
 12619                           tosl	equ	0xFFD
 12620                           pclatu	equ	0xFFB
 12621                           pclath	equ	0xFFA
 12622                           tblptru	equ	0xFF8
 12623                           tblptrh	equ	0xFF7
 12624                           tblptrl	equ	0xFF6
 12625                           tablat	equ	0xFF5
 12626                           prodh	equ	0xFF4
 12627                           prodl	equ	0xFF3
 12628                           intcon	equ	0xFF2
 12629                           intcon2	equ	0xFF1
 12630                           postinc0	equ	0xFEE
 12631                           fsr0h	equ	0xFEA
 12632                           fsr0l	equ	0xFE9
 12633                           wreg	equ	0xFE8
 12634                           postinc1	equ	0xFE6
 12635                           postdec1	equ	0xFE5
 12636                           fsr1h	equ	0xFE2
 12637                           fsr1l	equ	0xFE1
 12638                           indf2	equ	0xFDF
 12639                           postinc2	equ	0xFDE
 12640                           postdec2	equ	0xFDD
 12641                           plusw2	equ	0xFDB
 12642                           fsr2h	equ	0xFDA
 12643                           fsr2l	equ	0xFD9
 12644                           status	equ	0xFD8
 12645                           
 12646 ;; *************** function i2_UART_buff_modulo_inc *****************
 12647 ;; Defined at:
 12648 ;;		line 106 in file "UART.c"
 12649 ;; Parameters:    Size  Location     Type
 12650 ;;  value           2    0[COMRAM] const unsigned int 
 12651 ;;  modulus         2    2[COMRAM] const unsigned int 
 12652 ;; Auto vars:     Size  Location     Type
 12653 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 12654 ;; Return value:  Size  Location     Type
 12655 ;;                  2    0[COMRAM] unsigned int 
 12656 ;; Registers used:
 12657 ;;		wreg, status,2, status,0
 12658 ;; Tracked objects:
 12659 ;;		On entry : 0/0
 12660 ;;		On exit  : 0/0
 12661 ;;		Unchanged: 0/0
 12662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12663 ;;      Params:         4       0       0       0       0       0       0
 12664 ;;      Locals:         2       0       0       0       0       0       0
 12665 ;;      Temps:          0       0       0       0       0       0       0
 12666 ;;      Totals:         6       0       0       0       0       0       0
 12667 ;;Total ram usage:        6 bytes
 12668 ;; Hardware stack levels used:    1
 12669 ;; This function calls:
 12670 ;;		Nothing
 12671 ;; This function is called by:
 12672 ;;		i2_UART_buff_put
 12673 ;;		i2_UART_buff_get
 12674 ;; This function uses a non-reentrant model
 12675 ;;
 12676                           
 12677                           	psect	text67
 12678  003ADE                     __ptext67:
 12679                           	opt stack 0
 12680  003ADE                     i2_UART_buff_modulo_inc:
 12681                           	opt stack 21
 12682                           
 12683                           ;UART.c: 107: unsigned int my_value = value + 1;
 12684                           
 12685                           ;incstack = 0
 12686  003ADE  0E01               	movlw	1
 12687  003AE0  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 12688  003AE2  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12689  003AE4  0E00               	movlw	0
 12690  003AE6  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 12691  003AE8  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12692                           
 12693                           ;UART.c: 108: if (my_value >= modulus) {
 12694  003AEA  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 12695  003AEC  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 12696  003AEE  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 12697  003AF0  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 12698  003AF2  A0D8               	btfss	status,0,c
 12699  003AF4  D005               	goto	i2l3473
 12700                           
 12701                           ;UART.c: 109: my_value = 0;
 12702  003AF6  0E00               	movlw	0
 12703  003AF8  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12704  003AFA  0E00               	movlw	0
 12705  003AFC  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12706  003AFE  D000               	goto	i2l3473
 12707  003B00                     i2l3473:
 12708                           
 12709                           ;UART.c: 110: }
 12710                           ;UART.c: 111: return (my_value);
 12711  003B00  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 12712  003B04  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 12713  003B08  0012               	return	
 12714  003B0A  0012               	return		;funcret
 12715  003B0C                     __end_ofi2_UART_buff_modulo_inc:
 12716                           	opt stack 0
 12717                           tosu	equ	0xFFF
 12718                           tosh	equ	0xFFE
 12719                           tosl	equ	0xFFD
 12720                           pclatu	equ	0xFFB
 12721                           pclath	equ	0xFFA
 12722                           tblptru	equ	0xFF8
 12723                           tblptrh	equ	0xFF7
 12724                           tblptrl	equ	0xFF6
 12725                           tablat	equ	0xFF5
 12726                           prodh	equ	0xFF4
 12727                           prodl	equ	0xFF3
 12728                           intcon	equ	0xFF2
 12729                           intcon2	equ	0xFF1
 12730                           postinc0	equ	0xFEE
 12731                           fsr0h	equ	0xFEA
 12732                           fsr0l	equ	0xFE9
 12733                           wreg	equ	0xFE8
 12734                           postinc1	equ	0xFE6
 12735                           postdec1	equ	0xFE5
 12736                           fsr1h	equ	0xFE2
 12737                           fsr1l	equ	0xFE1
 12738                           indf2	equ	0xFDF
 12739                           postinc2	equ	0xFDE
 12740                           postdec2	equ	0xFDD
 12741                           plusw2	equ	0xFDB
 12742                           fsr2h	equ	0xFDA
 12743                           fsr2l	equ	0xFD9
 12744                           status	equ	0xFD8
 12745                           
 12746 ;; *************** function _ADC_ISR *****************
 12747 ;; Defined at:
 12748 ;;		line 82 in file "mcc_generated_files/adc.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;		None
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;  ADC_Result      2   10[COMRAM] int 
 12753 ;; Return value:  Size  Location     Type
 12754 ;;		None               void
 12755 ;; Registers used:
 12756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12757 ;; Tracked objects:
 12758 ;;		On entry : 0/0
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12762 ;;      Params:         0       0       0       0       0       0       0
 12763 ;;      Locals:         2       0       0       0       0       0       0
 12764 ;;      Temps:          6       0       0       0       0       0       0
 12765 ;;      Totals:         8       0       0       0       0       0       0
 12766 ;;Total ram usage:        8 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    1
 12769 ;; This function calls:
 12770 ;;		_ADC_GetConversionResult
 12771 ;;		_ADC_StartConversion
 12772 ;;		_Set_4051
 12773 ;; This function is called by:
 12774 ;;		_INTERRUPT_InterruptManager
 12775 ;; This function uses a non-reentrant model
 12776 ;;
 12777                           
 12778                           	psect	text68
 12779  000C56                     __ptext68:
 12780                           	opt stack 0
 12781  000C56                     _ADC_ISR:
 12782                           	opt stack 22
 12783                           
 12784                           ;adc.c: 85: PIR1bits.ADIF = 0;
 12785                           
 12786                           ;incstack = 0
 12787  000C56  9C9E               	bcf	3998,6,c	;volatile
 12788                           
 12789                           ;adc.c: 86: int ADC_Result = 0;
 12790  000C58  0E00               	movlw	0
 12791  000C5A  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
 12792  000C5C  0E00               	movlw	0
 12793  000C5E  6E0B               	movwf	ADC_ISR@ADC_Result,c
 12794                           
 12795                           ;adc.c: 87: if (Temp_Aquire){
 12796  000C60  503A               	movf	_Temp_Aquire,w,c
 12797  000C62  B4D8               	btfsc	status,2,c
 12798  000C64  D116               	goto	i2l4107
 12799                           
 12800                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 12801  000C66  EC40  F01E         	call	_ADC_GetConversionResult	;wreg free
 12802  000C6A  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12803  000C6E  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12804                           
 12805                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 12806  000C72  D0E4               	goto	i2l4103
 12807  000C74                     i2l4041:
 12808                           
 12809                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12810  000C74  90D8               	bcf	status,0,c
 12811  000C76  342D               	rlcf	_ADC_Buffer_Point,w,c
 12812  000C78  6ED9               	movwf	fsr2l,c
 12813  000C7A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12814  000C7C  6EDA               	movwf	fsr2h,c
 12815  000C7E  0E9C               	movlw	low _Temp_Adc
 12816  000C80  26D9               	addwf	fsr2l,f,c
 12817  000C82  0E00               	movlw	high _Temp_Adc
 12818  000C84  22DA               	addwfc	fsr2h,f,c
 12819  000C86  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12820  000C8A  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12821                           
 12822                           ;adc.c: 94: Set_4051(1);
 12823  000C8E  0E00               	movlw	0
 12824  000C90  6E02               	movwf	Set_4051@Channel+1,c
 12825  000C92  0E01               	movlw	1
 12826  000C94  6E01               	movwf	Set_4051@Channel,c
 12827  000C96  ECAC  F01C         	call	_Set_4051	;wreg free
 12828                           
 12829                           ;adc.c: 95: ADC_StartConversion(Temp1);
 12830  000C9A  0E0E               	movlw	14
 12831  000C9C  ECEB  F01D         	call	_ADC_StartConversion
 12832                           
 12833                           ;adc.c: 96: break;
 12834  000CA0  D0F5               	goto	i2l4105
 12835  000CA2                     i2l4047:
 12836                           
 12837                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12838  000CA2  90D8               	bcf	status,0,c
 12839  000CA4  342D               	rlcf	_ADC_Buffer_Point,w,c
 12840  000CA6  6ED9               	movwf	fsr2l,c
 12841  000CA8  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12842  000CAA  6EDA               	movwf	fsr2h,c
 12843  000CAC  0E9C               	movlw	low _Temp_Adc
 12844  000CAE  26D9               	addwf	fsr2l,f,c
 12845  000CB0  0E00               	movlw	high _Temp_Adc
 12846  000CB2  22DA               	addwfc	fsr2h,f,c
 12847  000CB4  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12848  000CB8  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12849                           
 12850                           ;adc.c: 99: Set_4051(2);
 12851  000CBC  0E00               	movlw	0
 12852  000CBE  6E02               	movwf	Set_4051@Channel+1,c
 12853  000CC0  0E02               	movlw	2
 12854  000CC2  6E01               	movwf	Set_4051@Channel,c
 12855  000CC4  ECAC  F01C         	call	_Set_4051	;wreg free
 12856                           
 12857                           ;adc.c: 100: ADC_StartConversion(Temp1);
 12858  000CC8  0E0E               	movlw	14
 12859  000CCA  ECEB  F01D         	call	_ADC_StartConversion
 12860                           
 12861                           ;adc.c: 101: break;
 12862  000CCE  D0DE               	goto	i2l4105
 12863  000CD0                     i2l4053:
 12864                           
 12865                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12866  000CD0  90D8               	bcf	status,0,c
 12867  000CD2  342D               	rlcf	_ADC_Buffer_Point,w,c
 12868  000CD4  6ED9               	movwf	fsr2l,c
 12869  000CD6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12870  000CD8  6EDA               	movwf	fsr2h,c
 12871  000CDA  0E9C               	movlw	low _Temp_Adc
 12872  000CDC  26D9               	addwf	fsr2l,f,c
 12873  000CDE  0E00               	movlw	high _Temp_Adc
 12874  000CE0  22DA               	addwfc	fsr2h,f,c
 12875  000CE2  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12876  000CE6  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12877                           
 12878                           ;adc.c: 104: Set_4051(3);
 12879  000CEA  0E00               	movlw	0
 12880  000CEC  6E02               	movwf	Set_4051@Channel+1,c
 12881  000CEE  0E03               	movlw	3
 12882  000CF0  6E01               	movwf	Set_4051@Channel,c
 12883  000CF2  ECAC  F01C         	call	_Set_4051	;wreg free
 12884                           
 12885                           ;adc.c: 105: ADC_StartConversion(Temp1);
 12886  000CF6  0E0E               	movlw	14
 12887  000CF8  ECEB  F01D         	call	_ADC_StartConversion
 12888                           
 12889                           ;adc.c: 106: break;
 12890  000CFC  D0C7               	goto	i2l4105
 12891  000CFE                     i2l4059:
 12892                           
 12893                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12894  000CFE  90D8               	bcf	status,0,c
 12895  000D00  342D               	rlcf	_ADC_Buffer_Point,w,c
 12896  000D02  6ED9               	movwf	fsr2l,c
 12897  000D04  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12898  000D06  6EDA               	movwf	fsr2h,c
 12899  000D08  0E9C               	movlw	low _Temp_Adc
 12900  000D0A  26D9               	addwf	fsr2l,f,c
 12901  000D0C  0E00               	movlw	high _Temp_Adc
 12902  000D0E  22DA               	addwfc	fsr2h,f,c
 12903  000D10  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12904  000D14  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12905                           
 12906                           ;adc.c: 109: Set_4051(4);
 12907  000D18  0E00               	movlw	0
 12908  000D1A  6E02               	movwf	Set_4051@Channel+1,c
 12909  000D1C  0E04               	movlw	4
 12910  000D1E  6E01               	movwf	Set_4051@Channel,c
 12911  000D20  ECAC  F01C         	call	_Set_4051	;wreg free
 12912                           
 12913                           ;adc.c: 110: ADC_StartConversion(Temp1);
 12914  000D24  0E0E               	movlw	14
 12915  000D26  ECEB  F01D         	call	_ADC_StartConversion
 12916                           
 12917                           ;adc.c: 111: break;
 12918  000D2A  D0B0               	goto	i2l4105
 12919  000D2C                     i2l4065:
 12920                           
 12921                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12922  000D2C  90D8               	bcf	status,0,c
 12923  000D2E  342D               	rlcf	_ADC_Buffer_Point,w,c
 12924  000D30  6ED9               	movwf	fsr2l,c
 12925  000D32  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12926  000D34  6EDA               	movwf	fsr2h,c
 12927  000D36  0E9C               	movlw	low _Temp_Adc
 12928  000D38  26D9               	addwf	fsr2l,f,c
 12929  000D3A  0E00               	movlw	high _Temp_Adc
 12930  000D3C  22DA               	addwfc	fsr2h,f,c
 12931  000D3E  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12932  000D42  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12933                           
 12934                           ;adc.c: 114: Set_4051(5);
 12935  000D46  0E00               	movlw	0
 12936  000D48  6E02               	movwf	Set_4051@Channel+1,c
 12937  000D4A  0E05               	movlw	5
 12938  000D4C  6E01               	movwf	Set_4051@Channel,c
 12939  000D4E  ECAC  F01C         	call	_Set_4051	;wreg free
 12940                           
 12941                           ;adc.c: 115: ADC_StartConversion(Temp1);
 12942  000D52  0E0E               	movlw	14
 12943  000D54  ECEB  F01D         	call	_ADC_StartConversion
 12944                           
 12945                           ;adc.c: 116: break;
 12946  000D58  D099               	goto	i2l4105
 12947  000D5A                     i2l4071:
 12948                           
 12949                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12950  000D5A  90D8               	bcf	status,0,c
 12951  000D5C  342D               	rlcf	_ADC_Buffer_Point,w,c
 12952  000D5E  6ED9               	movwf	fsr2l,c
 12953  000D60  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12954  000D62  6EDA               	movwf	fsr2h,c
 12955  000D64  0E9C               	movlw	low _Temp_Adc
 12956  000D66  26D9               	addwf	fsr2l,f,c
 12957  000D68  0E00               	movlw	high _Temp_Adc
 12958  000D6A  22DA               	addwfc	fsr2h,f,c
 12959  000D6C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12960  000D70  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12961                           
 12962                           ;adc.c: 119: Set_4051(6);
 12963  000D74  0E00               	movlw	0
 12964  000D76  6E02               	movwf	Set_4051@Channel+1,c
 12965  000D78  0E06               	movlw	6
 12966  000D7A  6E01               	movwf	Set_4051@Channel,c
 12967  000D7C  ECAC  F01C         	call	_Set_4051	;wreg free
 12968                           
 12969                           ;adc.c: 120: ADC_StartConversion(Temp1);
 12970  000D80  0E0E               	movlw	14
 12971  000D82  ECEB  F01D         	call	_ADC_StartConversion
 12972                           
 12973                           ;adc.c: 121: break;
 12974  000D86  D082               	goto	i2l4105
 12975  000D88                     i2l4077:
 12976                           
 12977                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12978  000D88  90D8               	bcf	status,0,c
 12979  000D8A  342D               	rlcf	_ADC_Buffer_Point,w,c
 12980  000D8C  6ED9               	movwf	fsr2l,c
 12981  000D8E  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12982  000D90  6EDA               	movwf	fsr2h,c
 12983  000D92  0E9C               	movlw	low _Temp_Adc
 12984  000D94  26D9               	addwf	fsr2l,f,c
 12985  000D96  0E00               	movlw	high _Temp_Adc
 12986  000D98  22DA               	addwfc	fsr2h,f,c
 12987  000D9A  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12988  000D9E  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12989                           
 12990                           ;adc.c: 124: Set_4051(7);
 12991  000DA2  0E00               	movlw	0
 12992  000DA4  6E02               	movwf	Set_4051@Channel+1,c
 12993  000DA6  0E07               	movlw	7
 12994  000DA8  6E01               	movwf	Set_4051@Channel,c
 12995  000DAA  ECAC  F01C         	call	_Set_4051	;wreg free
 12996                           
 12997                           ;adc.c: 125: ADC_StartConversion(Temp1);
 12998  000DAE  0E0E               	movlw	14
 12999  000DB0  ECEB  F01D         	call	_ADC_StartConversion
 13000                           
 13001                           ;adc.c: 126: break;
 13002  000DB4  D06B               	goto	i2l4105
 13003  000DB6                     i2l4083:
 13004                           
 13005                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 13006  000DB6  90D8               	bcf	status,0,c
 13007  000DB8  342D               	rlcf	_ADC_Buffer_Point,w,c
 13008  000DBA  6ED9               	movwf	fsr2l,c
 13009  000DBC  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13010  000DBE  6EDA               	movwf	fsr2h,c
 13011  000DC0  0E9C               	movlw	low _Temp_Adc
 13012  000DC2  26D9               	addwf	fsr2l,f,c
 13013  000DC4  0E00               	movlw	high _Temp_Adc
 13014  000DC6  22DA               	addwfc	fsr2h,f,c
 13015  000DC8  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 13016  000DCC  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 13017                           
 13018                           ;adc.c: 129: Set_4051(0);
 13019  000DD0  0E00               	movlw	0
 13020  000DD2  6E02               	movwf	Set_4051@Channel+1,c
 13021  000DD4  0E00               	movlw	0
 13022  000DD6  6E01               	movwf	Set_4051@Channel,c
 13023  000DD8  ECAC  F01C         	call	_Set_4051	;wreg free
 13024                           
 13025                           ;adc.c: 130: ADC_StartConversion(Temp1);
 13026  000DDC  0E0E               	movlw	14
 13027  000DDE  ECEB  F01D         	call	_ADC_StartConversion
 13028                           
 13029                           ;adc.c: 131: break;
 13030  000DE2  D054               	goto	i2l4105
 13031  000DE4                     i2l4089:
 13032                           
 13033                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 13034  000DE4  90D8               	bcf	status,0,c
 13035  000DE6  342D               	rlcf	_ADC_Buffer_Point,w,c
 13036  000DE8  6ED9               	movwf	fsr2l,c
 13037  000DEA  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13038  000DEC  6EDA               	movwf	fsr2h,c
 13039  000DEE  0E9C               	movlw	low _Temp_Adc
 13040  000DF0  26D9               	addwf	fsr2l,f,c
 13041  000DF2  0E00               	movlw	high _Temp_Adc
 13042  000DF4  22DA               	addwfc	fsr2h,f,c
 13043  000DF6  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 13044  000DFA  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 13045                           
 13046                           ;adc.c: 134: Set_4051(1);
 13047  000DFE  0E00               	movlw	0
 13048  000E00  6E02               	movwf	Set_4051@Channel+1,c
 13049  000E02  0E01               	movlw	1
 13050  000E04  6E01               	movwf	Set_4051@Channel,c
 13051  000E06  ECAC  F01C         	call	_Set_4051	;wreg free
 13052                           
 13053                           ;adc.c: 135: ADC_StartConversion(Temp2);
 13054  000E0A  0E14               	movlw	20
 13055  000E0C  ECEB  F01D         	call	_ADC_StartConversion
 13056                           
 13057                           ;adc.c: 136: break;
 13058  000E10  D03D               	goto	i2l4105
 13059  000E12                     i2l4095:
 13060                           
 13061                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 13062  000E12  90D8               	bcf	status,0,c
 13063  000E14  342D               	rlcf	_ADC_Buffer_Point,w,c
 13064  000E16  6ED9               	movwf	fsr2l,c
 13065  000E18  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13066  000E1A  6EDA               	movwf	fsr2h,c
 13067  000E1C  0E9C               	movlw	low _Temp_Adc
 13068  000E1E  26D9               	addwf	fsr2l,f,c
 13069  000E20  0E00               	movlw	high _Temp_Adc
 13070  000E22  22DA               	addwfc	fsr2h,f,c
 13071  000E24  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 13072  000E28  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 13073                           
 13074                           ;adc.c: 139: Temp_Aquire = 0;
 13075  000E2C  0E00               	movlw	0
 13076  000E2E  6E3A               	movwf	_Temp_Aquire,c
 13077                           
 13078                           ;adc.c: 140: Temp_Done = 1;
 13079  000E30  0E00               	movlw	0
 13080  000E32  0100               	movlb	0	; () banked
 13081  000E34  6F89               	movwf	(_Temp_Done+1)& (0+255),b
 13082  000E36  0E01               	movlw	1
 13083  000E38  6F88               	movwf	_Temp_Done& (0+255),b
 13084                           
 13085                           ; BSR set to: 0
 13086                           ;adc.c: 142: }
 13087                           
 13088                           ;adc.c: 141: break;
 13089  000E3A  D028               	goto	i2l4105
 13090  000E3C                     i2l4103:
 13091  000E3C  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 13092  000E40  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 13093                           
 13094                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13095                           ; Switch size 1, requested type "space"
 13096                           ; Number of cases is 1, Range of values is 0 to 0
 13097                           ; switch strategies available:
 13098                           ; Name         Instructions Cycles
 13099                           ; simple_byte            4     3 (average)
 13100                           ;	Chosen strategy is simple_byte
 13101  000E44  5006               	movf	??_ADC_ISR+1,w,c
 13102  000E46  0A00               	xorlw	0	; case 0
 13103  000E48  A4D8               	btfss	status,2,c
 13104  000E4A  D020               	goto	i2l4105
 13105                           
 13106                           ; Switch size 1, requested type "space"
 13107                           ; Number of cases is 10, Range of values is 0 to 9
 13108                           ; switch strategies available:
 13109                           ; Name         Instructions Cycles
 13110                           ; simple_byte           31    16 (average)
 13111                           ;	Chosen strategy is simple_byte
 13112  000E4C  5005               	movf	??_ADC_ISR,w,c
 13113  000E4E  0A00               	xorlw	0	; case 0
 13114  000E50  B4D8               	btfsc	status,2,c
 13115  000E52  D710               	goto	i2l4041
 13116  000E54  0A01               	xorlw	1	; case 1
 13117  000E56  B4D8               	btfsc	status,2,c
 13118  000E58  D724               	goto	i2l4047
 13119  000E5A  0A03               	xorlw	3	; case 2
 13120  000E5C  B4D8               	btfsc	status,2,c
 13121  000E5E  D738               	goto	i2l4053
 13122  000E60  0A01               	xorlw	1	; case 3
 13123  000E62  B4D8               	btfsc	status,2,c
 13124  000E64  D74C               	goto	i2l4059
 13125  000E66  0A07               	xorlw	7	; case 4
 13126  000E68  B4D8               	btfsc	status,2,c
 13127  000E6A  D760               	goto	i2l4065
 13128  000E6C  0A01               	xorlw	1	; case 5
 13129  000E6E  B4D8               	btfsc	status,2,c
 13130  000E70  D774               	goto	i2l4071
 13131  000E72  0A03               	xorlw	3	; case 6
 13132  000E74  B4D8               	btfsc	status,2,c
 13133  000E76  D788               	goto	i2l4077
 13134  000E78  0A01               	xorlw	1	; case 7
 13135  000E7A  B4D8               	btfsc	status,2,c
 13136  000E7C  D79C               	goto	i2l4083
 13137  000E7E  0A0F               	xorlw	15	; case 8
 13138  000E80  B4D8               	btfsc	status,2,c
 13139  000E82  D7B0               	goto	i2l4089
 13140  000E84  0A01               	xorlw	1	; case 9
 13141  000E86  B4D8               	btfsc	status,2,c
 13142  000E88  D7C4               	goto	i2l4095
 13143  000E8A  D000               	goto	i2l4105
 13144  000E8C                     i2l4105:
 13145                           
 13146                           ;adc.c: 143: ADC_Buffer_Point++;
 13147  000E8C  4A2D               	infsnz	_ADC_Buffer_Point,f,c
 13148  000E8E  2A2E               	incf	_ADC_Buffer_Point+1,f,c
 13149  000E90  D000               	goto	i2l4107
 13150  000E92                     i2l4107:
 13151                           
 13152                           ;adc.c: 144: }
 13153                           ;adc.c: 145: if (Volt_Aquire){
 13154  000E92  503B               	movf	_Volt_Aquire,w,c
 13155  000E94  B4D8               	btfsc	status,2,c
 13156  000E96  0012               	return	
 13157                           
 13158                           ;adc.c: 147: ADC_Result = ADC_GetConversionResult();
 13159  000E98  EC40  F01E         	call	_ADC_GetConversionResult	;wreg free
 13160  000E9C  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 13161  000EA0  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 13162                           
 13163                           ;adc.c: 148: switch ( ADC_Buffer_Point )
 13164  000EA4  D176               	goto	i2l4155
 13165  000EA6                     i2l4111:
 13166                           
 13167                           ;adc.c: 151: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13168  000EA6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13169  000EAA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13170  000EAE  0E00               	movlw	0
 13171  000EB0  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13172  000EB2  0EFF               	movlw	255
 13173  000EB4  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13174  000EB6  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13175  000EB8  0E60               	movlw	low _Battery_Adc
 13176  000EBA  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13177  000EBC  0E00               	movlw	high _Battery_Adc
 13178  000EBE  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13179  000EC0  90D8               	bcf	status,0,c
 13180  000EC2  342D               	rlcf	_ADC_Buffer_Point,w,c
 13181  000EC4  6ED9               	movwf	fsr2l,c
 13182  000EC6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13183  000EC8  6EDA               	movwf	fsr2h,c
 13184  000ECA  90D8               	bcf	status,0,c
 13185  000ECC  36D9               	rlcf	fsr2l,f,c
 13186  000ECE  36DA               	rlcf	fsr2h,f,c
 13187  000ED0  5009               	movf	??_ADC_ISR+4,w,c
 13188  000ED2  26D9               	addwf	fsr2l,f,c
 13189  000ED4  500A               	movf	??_ADC_ISR+5,w,c
 13190  000ED6  22DA               	addwfc	fsr2h,f,c
 13191  000ED8  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13192  000EDC  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13193  000EE0  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13194  000EE4  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13195                           
 13196                           ;adc.c: 152: ADC_StartConversion(Battery2);
 13197  000EE8  0E03               	movlw	3
 13198  000EEA  ECEB  F01D         	call	_ADC_StartConversion
 13199                           
 13200                           ;adc.c: 153: break;
 13201  000EEE  D179               	goto	i2l4157
 13202  000EF0                     i2l4115:
 13203                           
 13204                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13205  000EF0  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13206  000EF4  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13207  000EF8  0E00               	movlw	0
 13208  000EFA  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13209  000EFC  0EFF               	movlw	255
 13210  000EFE  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13211  000F00  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13212  000F02  0E60               	movlw	low _Battery_Adc
 13213  000F04  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13214  000F06  0E00               	movlw	high _Battery_Adc
 13215  000F08  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13216  000F0A  90D8               	bcf	status,0,c
 13217  000F0C  342D               	rlcf	_ADC_Buffer_Point,w,c
 13218  000F0E  6ED9               	movwf	fsr2l,c
 13219  000F10  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13220  000F12  6EDA               	movwf	fsr2h,c
 13221  000F14  90D8               	bcf	status,0,c
 13222  000F16  36D9               	rlcf	fsr2l,f,c
 13223  000F18  36DA               	rlcf	fsr2h,f,c
 13224  000F1A  5009               	movf	??_ADC_ISR+4,w,c
 13225  000F1C  26D9               	addwf	fsr2l,f,c
 13226  000F1E  500A               	movf	??_ADC_ISR+5,w,c
 13227  000F20  22DA               	addwfc	fsr2h,f,c
 13228  000F22  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13229  000F26  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13230  000F2A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13231  000F2E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13232                           
 13233                           ;adc.c: 156: ADC_StartConversion(Battery3);
 13234  000F32  0E04               	movlw	4
 13235  000F34  ECEB  F01D         	call	_ADC_StartConversion
 13236                           
 13237                           ;adc.c: 157: break;
 13238  000F38  D154               	goto	i2l4157
 13239  000F3A                     i2l4119:
 13240                           
 13241                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13242  000F3A  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13243  000F3E  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13244  000F42  0E00               	movlw	0
 13245  000F44  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13246  000F46  0EFF               	movlw	255
 13247  000F48  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13248  000F4A  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13249  000F4C  0E60               	movlw	low _Battery_Adc
 13250  000F4E  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13251  000F50  0E00               	movlw	high _Battery_Adc
 13252  000F52  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13253  000F54  90D8               	bcf	status,0,c
 13254  000F56  342D               	rlcf	_ADC_Buffer_Point,w,c
 13255  000F58  6ED9               	movwf	fsr2l,c
 13256  000F5A  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13257  000F5C  6EDA               	movwf	fsr2h,c
 13258  000F5E  90D8               	bcf	status,0,c
 13259  000F60  36D9               	rlcf	fsr2l,f,c
 13260  000F62  36DA               	rlcf	fsr2h,f,c
 13261  000F64  5009               	movf	??_ADC_ISR+4,w,c
 13262  000F66  26D9               	addwf	fsr2l,f,c
 13263  000F68  500A               	movf	??_ADC_ISR+5,w,c
 13264  000F6A  22DA               	addwfc	fsr2h,f,c
 13265  000F6C  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13266  000F70  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13267  000F74  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13268  000F78  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13269                           
 13270                           ;adc.c: 160: ADC_StartConversion(Battery4);
 13271  000F7C  0E05               	movlw	5
 13272  000F7E  ECEB  F01D         	call	_ADC_StartConversion
 13273                           
 13274                           ;adc.c: 161: break;
 13275  000F82  D12F               	goto	i2l4157
 13276  000F84                     i2l4123:
 13277                           
 13278                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13279  000F84  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13280  000F88  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13281  000F8C  0E00               	movlw	0
 13282  000F8E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13283  000F90  0EFF               	movlw	255
 13284  000F92  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13285  000F94  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13286  000F96  0E60               	movlw	low _Battery_Adc
 13287  000F98  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13288  000F9A  0E00               	movlw	high _Battery_Adc
 13289  000F9C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13290  000F9E  90D8               	bcf	status,0,c
 13291  000FA0  342D               	rlcf	_ADC_Buffer_Point,w,c
 13292  000FA2  6ED9               	movwf	fsr2l,c
 13293  000FA4  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13294  000FA6  6EDA               	movwf	fsr2h,c
 13295  000FA8  90D8               	bcf	status,0,c
 13296  000FAA  36D9               	rlcf	fsr2l,f,c
 13297  000FAC  36DA               	rlcf	fsr2h,f,c
 13298  000FAE  5009               	movf	??_ADC_ISR+4,w,c
 13299  000FB0  26D9               	addwf	fsr2l,f,c
 13300  000FB2  500A               	movf	??_ADC_ISR+5,w,c
 13301  000FB4  22DA               	addwfc	fsr2h,f,c
 13302  000FB6  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13303  000FBA  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13304  000FBE  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13305  000FC2  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13306                           
 13307                           ;adc.c: 164: ADC_StartConversion(Battery5);
 13308  000FC6  0E18               	movlw	24
 13309  000FC8  ECEB  F01D         	call	_ADC_StartConversion
 13310                           
 13311                           ;adc.c: 165: break;
 13312  000FCC  D10A               	goto	i2l4157
 13313  000FCE                     i2l4127:
 13314                           
 13315                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13316  000FCE  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13317  000FD2  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13318  000FD6  0E00               	movlw	0
 13319  000FD8  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13320  000FDA  0EFF               	movlw	255
 13321  000FDC  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13322  000FDE  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13323  000FE0  0E60               	movlw	low _Battery_Adc
 13324  000FE2  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13325  000FE4  0E00               	movlw	high _Battery_Adc
 13326  000FE6  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13327  000FE8  90D8               	bcf	status,0,c
 13328  000FEA  342D               	rlcf	_ADC_Buffer_Point,w,c
 13329  000FEC  6ED9               	movwf	fsr2l,c
 13330  000FEE  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13331  000FF0  6EDA               	movwf	fsr2h,c
 13332  000FF2  90D8               	bcf	status,0,c
 13333  000FF4  36D9               	rlcf	fsr2l,f,c
 13334  000FF6  36DA               	rlcf	fsr2h,f,c
 13335  000FF8  5009               	movf	??_ADC_ISR+4,w,c
 13336  000FFA  26D9               	addwf	fsr2l,f,c
 13337  000FFC  500A               	movf	??_ADC_ISR+5,w,c
 13338  000FFE  22DA               	addwfc	fsr2h,f,c
 13339  001000  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13340  001004  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13341  001008  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13342  00100C  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13343                           
 13344                           ;adc.c: 168: ADC_StartConversion(Battery6);
 13345  001010  0E1A               	movlw	26
 13346  001012  ECEB  F01D         	call	_ADC_StartConversion
 13347                           
 13348                           ;adc.c: 169: break;
 13349  001016  D0E5               	goto	i2l4157
 13350  001018                     i2l4131:
 13351                           
 13352                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13353  001018  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13354  00101C  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13355  001020  0E00               	movlw	0
 13356  001022  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13357  001024  0EFF               	movlw	255
 13358  001026  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13359  001028  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13360  00102A  0E60               	movlw	low _Battery_Adc
 13361  00102C  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13362  00102E  0E00               	movlw	high _Battery_Adc
 13363  001030  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13364  001032  90D8               	bcf	status,0,c
 13365  001034  342D               	rlcf	_ADC_Buffer_Point,w,c
 13366  001036  6ED9               	movwf	fsr2l,c
 13367  001038  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13368  00103A  6EDA               	movwf	fsr2h,c
 13369  00103C  90D8               	bcf	status,0,c
 13370  00103E  36D9               	rlcf	fsr2l,f,c
 13371  001040  36DA               	rlcf	fsr2h,f,c
 13372  001042  5009               	movf	??_ADC_ISR+4,w,c
 13373  001044  26D9               	addwf	fsr2l,f,c
 13374  001046  500A               	movf	??_ADC_ISR+5,w,c
 13375  001048  22DA               	addwfc	fsr2h,f,c
 13376  00104A  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13377  00104E  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13378  001052  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13379  001056  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13380                           
 13381                           ;adc.c: 172: ADC_StartConversion(Battery7);
 13382  00105A  0E1B               	movlw	27
 13383  00105C  ECEB  F01D         	call	_ADC_StartConversion
 13384                           
 13385                           ;adc.c: 173: break;
 13386  001060  D0C0               	goto	i2l4157
 13387  001062                     i2l4135:
 13388                           
 13389                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13390  001062  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13391  001066  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13392  00106A  0E00               	movlw	0
 13393  00106C  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13394  00106E  0EFF               	movlw	255
 13395  001070  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13396  001072  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13397  001074  0E60               	movlw	low _Battery_Adc
 13398  001076  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13399  001078  0E00               	movlw	high _Battery_Adc
 13400  00107A  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13401  00107C  90D8               	bcf	status,0,c
 13402  00107E  342D               	rlcf	_ADC_Buffer_Point,w,c
 13403  001080  6ED9               	movwf	fsr2l,c
 13404  001082  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13405  001084  6EDA               	movwf	fsr2h,c
 13406  001086  90D8               	bcf	status,0,c
 13407  001088  36D9               	rlcf	fsr2l,f,c
 13408  00108A  36DA               	rlcf	fsr2h,f,c
 13409  00108C  5009               	movf	??_ADC_ISR+4,w,c
 13410  00108E  26D9               	addwf	fsr2l,f,c
 13411  001090  500A               	movf	??_ADC_ISR+5,w,c
 13412  001092  22DA               	addwfc	fsr2h,f,c
 13413  001094  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13414  001098  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13415  00109C  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13416  0010A0  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13417                           
 13418                           ;adc.c: 176: ADC_StartConversion(Battery8);
 13419  0010A4  0E08               	movlw	8
 13420  0010A6  ECEB  F01D         	call	_ADC_StartConversion
 13421                           
 13422                           ;adc.c: 177: break;
 13423  0010AA  D09B               	goto	i2l4157
 13424  0010AC                     i2l4139:
 13425                           
 13426                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13427  0010AC  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13428  0010B0  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13429  0010B4  0E00               	movlw	0
 13430  0010B6  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13431  0010B8  0EFF               	movlw	255
 13432  0010BA  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13433  0010BC  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13434  0010BE  0E60               	movlw	low _Battery_Adc
 13435  0010C0  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13436  0010C2  0E00               	movlw	high _Battery_Adc
 13437  0010C4  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13438  0010C6  90D8               	bcf	status,0,c
 13439  0010C8  342D               	rlcf	_ADC_Buffer_Point,w,c
 13440  0010CA  6ED9               	movwf	fsr2l,c
 13441  0010CC  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13442  0010CE  6EDA               	movwf	fsr2h,c
 13443  0010D0  90D8               	bcf	status,0,c
 13444  0010D2  36D9               	rlcf	fsr2l,f,c
 13445  0010D4  36DA               	rlcf	fsr2h,f,c
 13446  0010D6  5009               	movf	??_ADC_ISR+4,w,c
 13447  0010D8  26D9               	addwf	fsr2l,f,c
 13448  0010DA  500A               	movf	??_ADC_ISR+5,w,c
 13449  0010DC  22DA               	addwfc	fsr2h,f,c
 13450  0010DE  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13451  0010E2  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13452  0010E6  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13453  0010EA  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13454                           
 13455                           ;adc.c: 180: ADC_StartConversion(Battery9);
 13456  0010EE  0E0B               	movlw	11
 13457  0010F0  ECEB  F01D         	call	_ADC_StartConversion
 13458                           
 13459                           ;adc.c: 181: break;
 13460  0010F4  D076               	goto	i2l4157
 13461  0010F6                     i2l4143:
 13462                           
 13463                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13464  0010F6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13465  0010FA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13466  0010FE  0E00               	movlw	0
 13467  001100  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13468  001102  0EFF               	movlw	255
 13469  001104  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13470  001106  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13471  001108  0E60               	movlw	low _Battery_Adc
 13472  00110A  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13473  00110C  0E00               	movlw	high _Battery_Adc
 13474  00110E  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13475  001110  90D8               	bcf	status,0,c
 13476  001112  342D               	rlcf	_ADC_Buffer_Point,w,c
 13477  001114  6ED9               	movwf	fsr2l,c
 13478  001116  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13479  001118  6EDA               	movwf	fsr2h,c
 13480  00111A  90D8               	bcf	status,0,c
 13481  00111C  36D9               	rlcf	fsr2l,f,c
 13482  00111E  36DA               	rlcf	fsr2h,f,c
 13483  001120  5009               	movf	??_ADC_ISR+4,w,c
 13484  001122  26D9               	addwf	fsr2l,f,c
 13485  001124  500A               	movf	??_ADC_ISR+5,w,c
 13486  001126  22DA               	addwfc	fsr2h,f,c
 13487  001128  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13488  00112C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13489  001130  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13490  001134  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13491                           
 13492                           ;adc.c: 184: ADC_StartConversion(Battery10);
 13493  001138  0E0D               	movlw	13
 13494  00113A  ECEB  F01D         	call	_ADC_StartConversion
 13495                           
 13496                           ;adc.c: 185: break;
 13497  00113E  D051               	goto	i2l4157
 13498  001140                     i2l4147:
 13499                           
 13500                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13501  001140  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13502  001144  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13503  001148  0E00               	movlw	0
 13504  00114A  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13505  00114C  0EFF               	movlw	255
 13506  00114E  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13507  001150  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13508  001152  0E60               	movlw	low _Battery_Adc
 13509  001154  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13510  001156  0E00               	movlw	high _Battery_Adc
 13511  001158  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13512  00115A  90D8               	bcf	status,0,c
 13513  00115C  342D               	rlcf	_ADC_Buffer_Point,w,c
 13514  00115E  6ED9               	movwf	fsr2l,c
 13515  001160  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13516  001162  6EDA               	movwf	fsr2h,c
 13517  001164  90D8               	bcf	status,0,c
 13518  001166  36D9               	rlcf	fsr2l,f,c
 13519  001168  36DA               	rlcf	fsr2h,f,c
 13520  00116A  5009               	movf	??_ADC_ISR+4,w,c
 13521  00116C  26D9               	addwf	fsr2l,f,c
 13522  00116E  500A               	movf	??_ADC_ISR+5,w,c
 13523  001170  22DA               	addwfc	fsr2h,f,c
 13524  001172  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13525  001176  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13526  00117A  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13527  00117E  C008  FFDE         	movff	??_ADC_ISR+3,postinc2
 13528                           
 13529                           ;adc.c: 188: Volt_Aquire = 0;
 13530  001182  0E00               	movlw	0
 13531  001184  6E3B               	movwf	_Volt_Aquire,c
 13532                           
 13533                           ;adc.c: 189: Volt_Done = 1;
 13534  001186  0E00               	movlw	0
 13535  001188  0100               	movlb	0	; () banked
 13536  00118A  6F8B               	movwf	(_Volt_Done+1)& (0+255),b
 13537  00118C  0E01               	movlw	1
 13538  00118E  6F8A               	movwf	_Volt_Done& (0+255),b
 13539                           
 13540                           ; BSR set to: 0
 13541                           ;adc.c: 191: }
 13542                           
 13543                           ;adc.c: 190: break;
 13544  001190  D028               	goto	i2l4157
 13545  001192                     i2l4155:
 13546  001192  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 13547  001196  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 13548                           
 13549                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13550                           ; Switch size 1, requested type "space"
 13551                           ; Number of cases is 1, Range of values is 0 to 0
 13552                           ; switch strategies available:
 13553                           ; Name         Instructions Cycles
 13554                           ; simple_byte            4     3 (average)
 13555                           ;	Chosen strategy is simple_byte
 13556  00119A  5006               	movf	??_ADC_ISR+1,w,c
 13557  00119C  0A00               	xorlw	0	; case 0
 13558  00119E  A4D8               	btfss	status,2,c
 13559  0011A0  D020               	goto	i2l4157
 13560                           
 13561                           ; Switch size 1, requested type "space"
 13562                           ; Number of cases is 10, Range of values is 0 to 9
 13563                           ; switch strategies available:
 13564                           ; Name         Instructions Cycles
 13565                           ; simple_byte           31    16 (average)
 13566                           ;	Chosen strategy is simple_byte
 13567  0011A2  5005               	movf	??_ADC_ISR,w,c
 13568  0011A4  0A00               	xorlw	0	; case 0
 13569  0011A6  B4D8               	btfsc	status,2,c
 13570  0011A8  D67E               	goto	i2l4111
 13571  0011AA  0A01               	xorlw	1	; case 1
 13572  0011AC  B4D8               	btfsc	status,2,c
 13573  0011AE  D6A0               	goto	i2l4115
 13574  0011B0  0A03               	xorlw	3	; case 2
 13575  0011B2  B4D8               	btfsc	status,2,c
 13576  0011B4  D6C2               	goto	i2l4119
 13577  0011B6  0A01               	xorlw	1	; case 3
 13578  0011B8  B4D8               	btfsc	status,2,c
 13579  0011BA  D6E4               	goto	i2l4123
 13580  0011BC  0A07               	xorlw	7	; case 4
 13581  0011BE  B4D8               	btfsc	status,2,c
 13582  0011C0  D706               	goto	i2l4127
 13583  0011C2  0A01               	xorlw	1	; case 5
 13584  0011C4  B4D8               	btfsc	status,2,c
 13585  0011C6  D728               	goto	i2l4131
 13586  0011C8  0A03               	xorlw	3	; case 6
 13587  0011CA  B4D8               	btfsc	status,2,c
 13588  0011CC  D74A               	goto	i2l4135
 13589  0011CE  0A01               	xorlw	1	; case 7
 13590  0011D0  B4D8               	btfsc	status,2,c
 13591  0011D2  D76C               	goto	i2l4139
 13592  0011D4  0A0F               	xorlw	15	; case 8
 13593  0011D6  B4D8               	btfsc	status,2,c
 13594  0011D8  D78E               	goto	i2l4143
 13595  0011DA  0A01               	xorlw	1	; case 9
 13596  0011DC  B4D8               	btfsc	status,2,c
 13597  0011DE  D7B0               	goto	i2l4147
 13598  0011E0  D000               	goto	i2l4157
 13599  0011E2                     i2l4157:
 13600                           
 13601                           ;adc.c: 192: ADC_Buffer_Point++;
 13602  0011E2  4A2D               	infsnz	_ADC_Buffer_Point,f,c
 13603  0011E4  2A2E               	incf	_ADC_Buffer_Point+1,f,c
 13604  0011E6  0012               	return	
 13605  0011E8  0012               	return		;funcret
 13606  0011EA                     __end_of_ADC_ISR:
 13607                           	opt stack 0
 13608                           tosu	equ	0xFFF
 13609                           tosh	equ	0xFFE
 13610                           tosl	equ	0xFFD
 13611                           pclatu	equ	0xFFB
 13612                           pclath	equ	0xFFA
 13613                           tblptru	equ	0xFF8
 13614                           tblptrh	equ	0xFF7
 13615                           tblptrl	equ	0xFF6
 13616                           tablat	equ	0xFF5
 13617                           prodh	equ	0xFF4
 13618                           prodl	equ	0xFF3
 13619                           intcon	equ	0xFF2
 13620                           intcon2	equ	0xFF1
 13621                           postinc0	equ	0xFEE
 13622                           fsr0h	equ	0xFEA
 13623                           fsr0l	equ	0xFE9
 13624                           wreg	equ	0xFE8
 13625                           postinc1	equ	0xFE6
 13626                           postdec1	equ	0xFE5
 13627                           fsr1h	equ	0xFE2
 13628                           fsr1l	equ	0xFE1
 13629                           indf2	equ	0xFDF
 13630                           postinc2	equ	0xFDE
 13631                           postdec2	equ	0xFDD
 13632                           plusw2	equ	0xFDB
 13633                           fsr2h	equ	0xFDA
 13634                           fsr2l	equ	0xFD9
 13635                           status	equ	0xFD8
 13636                           
 13637 ;; *************** function _Set_4051 *****************
 13638 ;; Defined at:
 13639 ;;		line 15 in file "Functions.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;  Channel         2    0[COMRAM] int 
 13642 ;; Auto vars:     Size  Location     Type
 13643 ;;		None
 13644 ;; Return value:  Size  Location     Type
 13645 ;;		None               void
 13646 ;; Registers used:
 13647 ;;		wreg, status,2, status,0
 13648 ;; Tracked objects:
 13649 ;;		On entry : 0/0
 13650 ;;		On exit  : 0/0
 13651 ;;		Unchanged: 0/0
 13652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13653 ;;      Params:         2       0       0       0       0       0       0
 13654 ;;      Locals:         0       0       0       0       0       0       0
 13655 ;;      Temps:          2       0       0       0       0       0       0
 13656 ;;      Totals:         4       0       0       0       0       0       0
 13657 ;;Total ram usage:        4 bytes
 13658 ;; Hardware stack levels used:    1
 13659 ;; This function calls:
 13660 ;;		Nothing
 13661 ;; This function is called by:
 13662 ;;		_ADC_ISR
 13663 ;; This function uses a non-reentrant model
 13664 ;;
 13665                           
 13666                           	psect	text69
 13667  003958                     __ptext69:
 13668                           	opt stack 0
 13669  003958                     _Set_4051:
 13670                           	opt stack 22
 13671                           
 13672                           ;Functions.c: 17: if (Channel & 0x01)
 13673                           
 13674                           ;incstack = 0
 13675  003958  A001               	btfss	Set_4051@Channel,0,c
 13676  00395A  D002               	goto	i2l3505
 13677                           
 13678                           ;Functions.c: 18: {
 13679                           ;Functions.c: 19: do { LATA6 = ~LATA6; } while(0);
 13680  00395C  7C89               	btg	3977,6,c	;volatile
 13681  00395E  D000               	goto	i2l3505
 13682  003960                     i2l3505:
 13683                           
 13684                           ;Functions.c: 20: }
 13685                           ;Functions.c: 21: if ((Channel>>1) & 0x01)
 13686  003960  3402               	rlcf	Set_4051@Channel+1,w,c
 13687  003962  3002               	rrcf	Set_4051@Channel+1,w,c
 13688  003964  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 13689  003966  3001               	rrcf	Set_4051@Channel,w,c
 13690  003968  6E03               	movwf	??_Set_4051& (0+255),c
 13691  00396A  A003               	btfss	??_Set_4051,0,c
 13692  00396C  D002               	goto	i2l3507
 13693                           
 13694                           ;Functions.c: 22: {
 13695                           ;Functions.c: 23: do { LATC0 = ~LATC0; } while(0);
 13696  00396E  708B               	btg	3979,0,c	;volatile
 13697  003970  D000               	goto	i2l3507
 13698  003972                     i2l3507:
 13699                           
 13700                           ;Functions.c: 24: }
 13701                           ;Functions.c: 25: if ((Channel>>2) & 0x01)
 13702  003972  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 13703  003976  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 13704  00397A  3404               	rlcf	??_Set_4051+1,w,c
 13705  00397C  3204               	rrcf	??_Set_4051+1,f,c
 13706  00397E  3203               	rrcf	??_Set_4051,f,c
 13707  003980  3404               	rlcf	??_Set_4051+1,w,c
 13708  003982  3204               	rrcf	??_Set_4051+1,f,c
 13709  003984  3203               	rrcf	??_Set_4051,f,c
 13710  003986  A003               	btfss	??_Set_4051,0,c
 13711  003988  0012               	return	
 13712                           
 13713                           ;Functions.c: 26: {
 13714                           ;Functions.c: 27: do { LATC1 = ~LATC1; } while(0);
 13715  00398A  728B               	btg	3979,1,c	;volatile
 13716  00398C  0012               	return	
 13717  00398E  0012               	return		;funcret
 13718  003990                     __end_of_Set_4051:
 13719                           	opt stack 0
 13720                           tosu	equ	0xFFF
 13721                           tosh	equ	0xFFE
 13722                           tosl	equ	0xFFD
 13723                           pclatu	equ	0xFFB
 13724                           pclath	equ	0xFFA
 13725                           tblptru	equ	0xFF8
 13726                           tblptrh	equ	0xFF7
 13727                           tblptrl	equ	0xFF6
 13728                           tablat	equ	0xFF5
 13729                           prodh	equ	0xFF4
 13730                           prodl	equ	0xFF3
 13731                           intcon	equ	0xFF2
 13732                           intcon2	equ	0xFF1
 13733                           postinc0	equ	0xFEE
 13734                           fsr0h	equ	0xFEA
 13735                           fsr0l	equ	0xFE9
 13736                           wreg	equ	0xFE8
 13737                           postinc1	equ	0xFE6
 13738                           postdec1	equ	0xFE5
 13739                           fsr1h	equ	0xFE2
 13740                           fsr1l	equ	0xFE1
 13741                           indf2	equ	0xFDF
 13742                           postinc2	equ	0xFDE
 13743                           postdec2	equ	0xFDD
 13744                           plusw2	equ	0xFDB
 13745                           fsr2h	equ	0xFDA
 13746                           fsr2l	equ	0xFD9
 13747                           status	equ	0xFD8
 13748                           
 13749 ;; *************** function _ADC_StartConversion *****************
 13750 ;; Defined at:
 13751 ;;		line 36 in file "mcc_generated_files/adc.c"
 13752 ;; Parameters:    Size  Location     Type
 13753 ;;  channel         1    wreg     enum E8837
 13754 ;; Auto vars:     Size  Location     Type
 13755 ;;  channel         1    1[COMRAM] enum E8837
 13756 ;; Return value:  Size  Location     Type
 13757 ;;		None               void
 13758 ;; Registers used:
 13759 ;;		wreg, status,2, status,0
 13760 ;; Tracked objects:
 13761 ;;		On entry : 0/0
 13762 ;;		On exit  : 0/0
 13763 ;;		Unchanged: 0/0
 13764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13765 ;;      Params:         0       0       0       0       0       0       0
 13766 ;;      Locals:         1       0       0       0       0       0       0
 13767 ;;      Temps:          1       0       0       0       0       0       0
 13768 ;;      Totals:         2       0       0       0       0       0       0
 13769 ;;Total ram usage:        2 bytes
 13770 ;; Hardware stack levels used:    1
 13771 ;; This function calls:
 13772 ;;		Nothing
 13773 ;; This function is called by:
 13774 ;;		_ADC_ISR
 13775 ;;		_Battery_Read
 13776 ;;		_Temp_Read
 13777 ;; This function uses a non-reentrant model
 13778 ;;
 13779                           
 13780                           	psect	text70
 13781  003BD6                     __ptext70:
 13782                           	opt stack 0
 13783  003BD6                     _ADC_StartConversion:
 13784                           	opt stack 21
 13785                           
 13786                           ;incstack = 0
 13787                           ;ADC_StartConversion@channel stored from wreg
 13788  003BD6  6E02               	movwf	ADC_StartConversion@channel,c
 13789                           
 13790                           ;adc.c: 39: ADCON0bits.CHS = channel;
 13791  003BD8  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 13792  003BDC  4601               	rlncf	??_ADC_StartConversion,f,c
 13793  003BDE  4601               	rlncf	??_ADC_StartConversion,f,c
 13794  003BE0  50C2               	movf	4034,w,c	;volatile
 13795  003BE2  1801               	xorwf	??_ADC_StartConversion,w,c
 13796  003BE4  0B83               	andlw	-125
 13797  003BE6  1801               	xorwf	??_ADC_StartConversion,w,c
 13798  003BE8  6EC2               	movwf	4034,c	;volatile
 13799                           
 13800                           ;adc.c: 42: ADCON0bits.ADON = 1;
 13801  003BEA  80C2               	bsf	4034,0,c	;volatile
 13802                           
 13803                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 13804  003BEC  82C2               	bsf	4034,1,c	;volatile
 13805  003BEE  0012               	return		;funcret
 13806  003BF0                     __end_of_ADC_StartConversion:
 13807                           	opt stack 0
 13808                           tosu	equ	0xFFF
 13809                           tosh	equ	0xFFE
 13810                           tosl	equ	0xFFD
 13811                           pclatu	equ	0xFFB
 13812                           pclath	equ	0xFFA
 13813                           tblptru	equ	0xFF8
 13814                           tblptrh	equ	0xFF7
 13815                           tblptrl	equ	0xFF6
 13816                           tablat	equ	0xFF5
 13817                           prodh	equ	0xFF4
 13818                           prodl	equ	0xFF3
 13819                           intcon	equ	0xFF2
 13820                           intcon2	equ	0xFF1
 13821                           postinc0	equ	0xFEE
 13822                           fsr0h	equ	0xFEA
 13823                           fsr0l	equ	0xFE9
 13824                           wreg	equ	0xFE8
 13825                           postinc1	equ	0xFE6
 13826                           postdec1	equ	0xFE5
 13827                           fsr1h	equ	0xFE2
 13828                           fsr1l	equ	0xFE1
 13829                           indf2	equ	0xFDF
 13830                           postinc2	equ	0xFDE
 13831                           postdec2	equ	0xFDD
 13832                           plusw2	equ	0xFDB
 13833                           fsr2h	equ	0xFDA
 13834                           fsr2l	equ	0xFD9
 13835                           status	equ	0xFD8
 13836                           
 13837 ;; *************** function _ADC_GetConversionResult *****************
 13838 ;; Defined at:
 13839 ;;		line 55 in file "mcc_generated_files/adc.c"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;		None
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;		None
 13844 ;; Return value:  Size  Location     Type
 13845 ;;                  2    0[COMRAM] unsigned int 
 13846 ;; Registers used:
 13847 ;;		wreg, status,2, status,0
 13848 ;; Tracked objects:
 13849 ;;		On entry : 0/0
 13850 ;;		On exit  : 0/0
 13851 ;;		Unchanged: 0/0
 13852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13853 ;;      Params:         2       0       0       0       0       0       0
 13854 ;;      Locals:         0       0       0       0       0       0       0
 13855 ;;      Temps:          2       0       0       0       0       0       0
 13856 ;;      Totals:         4       0       0       0       0       0       0
 13857 ;;Total ram usage:        4 bytes
 13858 ;; Hardware stack levels used:    1
 13859 ;; This function calls:
 13860 ;;		Nothing
 13861 ;; This function is called by:
 13862 ;;		_ADC_ISR
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           	psect	text71
 13867  003C80                     __ptext71:
 13868                           	opt stack 0
 13869  003C80                     _ADC_GetConversionResult:
 13870                           	opt stack 22
 13871                           
 13872                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 13873                           
 13874                           ;incstack = 0
 13875  003C80  50C4               	movf	4036,w,c	;volatile
 13876  003C82  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 13877  003C84  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 13878  003C86  50C3               	movf	4035,w,c	;volatile
 13879  003C88  2403               	addwf	??_ADC_GetConversionResult,w,c
 13880  003C8A  6E01               	movwf	?_ADC_GetConversionResult,c
 13881  003C8C  0E00               	movlw	0
 13882  003C8E  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 13883  003C90  6E02               	movwf	?_ADC_GetConversionResult+1,c
 13884  003C92  0012               	return	
 13885  003C94  0012               	return		;funcret
 13886  003C96                     __end_of_ADC_GetConversionResult:
 13887                           	opt stack 0
 13888                           tosu	equ	0xFFF
 13889                           tosh	equ	0xFFE
 13890                           tosl	equ	0xFFD
 13891                           pclatu	equ	0xFFB
 13892                           pclath	equ	0xFFA
 13893                           tblptru	equ	0xFF8
 13894                           tblptrh	equ	0xFF7
 13895                           tblptrl	equ	0xFF6
 13896                           tablat	equ	0xFF5
 13897                           prodh	equ	0xFF4
 13898                           prodl	equ	0xFF3
 13899                           intcon	equ	0xFF2
 13900                           intcon2	equ	0xFF1
 13901                           postinc0	equ	0xFEE
 13902                           fsr0h	equ	0xFEA
 13903                           fsr0l	equ	0xFE9
 13904                           wreg	equ	0xFE8
 13905                           postinc1	equ	0xFE6
 13906                           postdec1	equ	0xFE5
 13907                           fsr1h	equ	0xFE2
 13908                           fsr1l	equ	0xFE1
 13909                           indf2	equ	0xFDF
 13910                           postinc2	equ	0xFDE
 13911                           postdec2	equ	0xFDD
 13912                           plusw2	equ	0xFDB
 13913                           fsr2h	equ	0xFDA
 13914                           fsr2l	equ	0xFD9
 13915                           status	equ	0xFD8
 13916                           tosu	equ	0xFFF
 13917                           tosh	equ	0xFFE
 13918                           tosl	equ	0xFFD
 13919                           pclatu	equ	0xFFB
 13920                           pclath	equ	0xFFA
 13921                           tblptru	equ	0xFF8
 13922                           tblptrh	equ	0xFF7
 13923                           tblptrl	equ	0xFF6
 13924                           tablat	equ	0xFF5
 13925                           prodh	equ	0xFF4
 13926                           prodl	equ	0xFF3
 13927                           intcon	equ	0xFF2
 13928                           intcon2	equ	0xFF1
 13929                           postinc0	equ	0xFEE
 13930                           fsr0h	equ	0xFEA
 13931                           fsr0l	equ	0xFE9
 13932                           wreg	equ	0xFE8
 13933                           postinc1	equ	0xFE6
 13934                           postdec1	equ	0xFE5
 13935                           fsr1h	equ	0xFE2
 13936                           fsr1l	equ	0xFE1
 13937                           indf2	equ	0xFDF
 13938                           postinc2	equ	0xFDE
 13939                           postdec2	equ	0xFDD
 13940                           plusw2	equ	0xFDB
 13941                           fsr2h	equ	0xFDA
 13942                           fsr2l	equ	0xFD9
 13943                           status	equ	0xFD8
 13944                           
 13945                           	psect	text72
 13946  000000                     __ptext72:
 13947                           	opt stack 0
 13948                           tosu	equ	0xFFF
 13949                           tosh	equ	0xFFE
 13950                           tosl	equ	0xFFD
 13951                           pclatu	equ	0xFFB
 13952                           pclath	equ	0xFFA
 13953                           tblptru	equ	0xFF8
 13954                           tblptrh	equ	0xFF7
 13955                           tblptrl	equ	0xFF6
 13956                           tablat	equ	0xFF5
 13957                           prodh	equ	0xFF4
 13958                           prodl	equ	0xFF3
 13959                           intcon	equ	0xFF2
 13960                           intcon2	equ	0xFF1
 13961                           postinc0	equ	0xFEE
 13962                           fsr0h	equ	0xFEA
 13963                           fsr0l	equ	0xFE9
 13964                           wreg	equ	0xFE8
 13965                           postinc1	equ	0xFE6
 13966                           postdec1	equ	0xFE5
 13967                           fsr1h	equ	0xFE2
 13968                           fsr1l	equ	0xFE1
 13969                           indf2	equ	0xFDF
 13970                           postinc2	equ	0xFDE
 13971                           postdec2	equ	0xFDD
 13972                           plusw2	equ	0xFDB
 13973                           fsr2h	equ	0xFDA
 13974                           fsr2l	equ	0xFD9
 13975                           status	equ	0xFD8
 13976                           
 13977                           	psect	rparam
 13978  0000                     tosu	equ	0xFFF
 13979                           tosh	equ	0xFFE
 13980                           tosl	equ	0xFFD
 13981                           pclatu	equ	0xFFB
 13982                           pclath	equ	0xFFA
 13983                           tblptru	equ	0xFF8
 13984                           tblptrh	equ	0xFF7
 13985                           tblptrl	equ	0xFF6
 13986                           tablat	equ	0xFF5
 13987                           prodh	equ	0xFF4
 13988                           prodl	equ	0xFF3
 13989                           intcon	equ	0xFF2
 13990                           intcon2	equ	0xFF1
 13991                           postinc0	equ	0xFEE
 13992                           fsr0h	equ	0xFEA
 13993                           fsr0l	equ	0xFE9
 13994                           wreg	equ	0xFE8
 13995                           postinc1	equ	0xFE6
 13996                           postdec1	equ	0xFE5
 13997                           fsr1h	equ	0xFE2
 13998                           fsr1l	equ	0xFE1
 13999                           indf2	equ	0xFDF
 14000                           postinc2	equ	0xFDE
 14001                           postdec2	equ	0xFDD
 14002                           plusw2	equ	0xFDB
 14003                           fsr2h	equ	0xFDA
 14004                           fsr2l	equ	0xFD9
 14005                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        61
    BSS         1099
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      69
    BANK0           160     59     156
    BANK1           256     14     234
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256      0     206

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK4[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1130(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK3[200]), ring_buffer(BANK2[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK2[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK1[40]), 


Critical Paths under _main in COMRAM

    _main->_Battery_Fault
    _main->_Temp_Fault
    _updateComms->_receiveData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Tempeture_Get->___wmul
    _Temp_Fault->___ftge
    ___awtoft->___awdiv
    ___awtoft->___ftpack
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___altoft
    ___ftmul->___altoft
    ___ftdiv->___altoft
    ___ftadd->___altoft
    ___altoft->___ftpack
    _Battery_Filter->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _Temp_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _updateComms->_ToSend
    _receiveData->_CRCcheck
    ___fttol->___ftmul
    _ToSend->___fttol
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _SYSTEM_Initialize->_begin
    _Battery_Convert->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Temp_Convert

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  145465
                                              9 BANK1      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   34541
                        _Battery_Get
                              _Delay
                      _Tempeture_Get
                             _ToSend
                            ___ftmul
                            ___fttol
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (2) _sendData                                             5     5      0    5297
                                             38 COMRAM     5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (3) _crcBufS_put                                          7     2      5     564
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_flush                            4     0      4     910
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                             38 COMRAM     6     6      0
                                              7 BANK0     12    12      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (3) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (4) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1532
                                             30 BANK0     15    11      4
                        _Battery_Get (ARG)
                      _Tempeture_Get (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ToSend                                               3     1      2    3214
                                             45 BANK0      3     1      2
                        _Battery_Get (ARG)
            _FastTransfer_buffer_put
                      _Tempeture_Get (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Tempeture_Get                                        3     0      3    3805
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Delay                                                9     5      4     238
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    4084
                                             41 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                         9     9      0   70558
                                              0 BANK1      9     9      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   29066
                                             54 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   14442
                                             42 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2811
                                             34 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5459
                                             42 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   14248
                                             42 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2747
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1925
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1061
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    5744
                                              0 BANK0      7     7      0
                        _Battery_Get
                          _SetBypass
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypass                                            6     2      4     649
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    3882
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    4115
                                             41 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     968
                                             32 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   23676
                                             42 BANK0      4     4      0
                     _Battery_Filter
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5858
                                             15 BANK0     15     9      6
                        _Battery_Get (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3520
                                              0 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5095
                                             30 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2805
                                             34 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0    3264
                                             32 COMRAM     2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3004
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    2360
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0      44
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (9) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (9) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              8     8      0    1107
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (9) _Set_4051                                             4     2      2     642
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _ADC_StartConversion                                 2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___wmul
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___wmul
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _RunBypas
     _Battery_Get
       ___wmul
     _SetBypass
     ___ftge
       ___wmul (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _begin
       ___awdiv
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___wmul
     _log
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Battery_Get (ARG)
               ___wmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _updateComms
     _Battery_Get
       ___wmul
     _Delay
     _Tempeture_Get
       ___wmul
     _ToSend
       _Battery_Get (ARG)
         ___wmul
       _FastTransfer_buffer_put (ARG)
         _FastTransfer_buffer_modulo_inc
       _Tempeture_Get (ARG)
         ___wmul
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         _Battery_Get (ARG)
           ___wmul
         _Tempeture_Get (ARG)
           ___wmul
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___fttol
       _Battery_Get (ARG)
         ___wmul
       _Tempeture_Get (ARG)
         ___wmul
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      CE      15       80.5%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      E      EA       6       91.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3B      9C       4       97.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4FD       9        0.0%
DATA                 0      0     4FD      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jun 14 19:51:45 2015

      __end_of_FastTransfer_buffer_flush 3676                   i2_UART_buff_modulo_inc 3ADE  
                           ___altoft@exp 002B                             _rx_array_inx 0041  
                          ___altoft@sign 002C                             ___awdiv@sign 0020  
                    ___wmul@multiplicand 001D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                             ___ftadd@exp1 00EA  
                           ___ftadd@exp2 00E9                             ___ftadd@sign 00E8  
                                    l302 3142                                      l510 2A14  
                                    l503 2A04                                      l345 35A4  
                                    l355 1CEE                                      l603 3706  
                                    l524 2A34                                      l460 29A4  
                                    l517 2A24                                      l533 2C54  
                                    l296 2E18                                      l482 29D4  
                                    l475 29C4                                      l468 29B4  
                                    l717 1E5C                                      l496 29F4  
                                    l489 29E4                                      l782 32FE  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0037                                      _log 23D8  
                        __end_of_ADC_ISR 11EA     FastTransfer_buffer_flush@clearBuffer 0025  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8            i2UART_buff_modulo_inc@modulus 0003  
                           __CFG_LVP$OFF 000000                          ?_Battery_Filter 0001  
                           ___ftdiv@cntr 00CA                             ___ftdiv@sign 00CF  
                                   l1200 18C6                                     l1211 239E  
                                   l1147 306A                                     l1180 178E  
                                   l1182 17B8                                     l1191 189C  
                                   l1176 1754                                     l3105 3ABA  
                                   l3109 3ACC                                     l5011 29A8  
                                   l5021 29F8                                     l5013 29B8  
                                   l5101 0778                                     l5023 2A08  
                                   l5015 29C8                                     l5031 2A38  
                                   l5025 2A18                                     l5017 29D8  
                                   l5009 2998                                     l5201 0B4E  
                                   l5121 07E4                                     l5041 2554  
                                   l5027 2A28                                     l5019 29E8  
                                   l5211 0BD0                                     l5203 0B68  
                                   l5107 0788                                     l5051 25C8  
                                   l5043 256E                                     l5213 0BEA  
                                   l5205 0B82                                     l5109 07B2  
                                   l5125 0816                                     l5053 25F2  
                                   l5045 2588                                     l3623 37DA  
                                   l4503 32FA                                     l5215 0C26  
                                   l5207 0B9C                                     l5143 093E  
                                   l5055 25F8                                     l5047 25A2  
                                   l4521 2FFA                                     l5241 34EA  
                                   l5305 320C                                     l5209 0BB6  
                                   l5217 0C42                                     l5161 09E0  
                                   l5145 0946                                     l5137 08B4  
                                   l5129 0842                                     l5225 0C50  
                                   l5073 067E                                     l5049 25BE  
                                   l4531 305E                                     l4523 301A  
                                   l4515 2FDE                                     l5315 326A  
                                   l3627 37F6                                     l5171 0A62  
                                   l5163 09FA                                     l5147 095C  
                                   l5091 0740                                     l5059 262A  
                                   l5253 22C0                                     l5333 289A  
                                   l5309 323E                                     l5421 2C14  
                                   l5413 2BBC                                     l5405 1B74  
                                   l5173 0A7C                                     l5165 0A14  
                                   l5093 0748                                     l5069 0650  
                                   l5077 0684                                     l4543 3084  
                                   l4527 3032                                     l4519 2FEE  
                                   l5239 34DC                                     l5343 2990  
                                   l5351 30B4                                     l4615 2F86  
                                   l4607 2F00                                     l5175 0AB8  
                                   l5167 0A2E                                     l4537 3072  
                                   l4529 3052                                     l4705 18F2  
                                   l5337 28B4                                     l5425 2C4A  
                                   l5409 2BA2                                     l4801 1E54  
                                   l4625 26E4                                     l5169 0A48  
                                   l5177 0AD4                                     l5089 0728  
                                   l5505 389A                                     l4715 1942  
                                   l5259 22FA                                     l4731 1ED2  
                                   l5347 30A0                                     l5371 359C  
                                   l5363 3542                                     l4555 36F0  
                                   l4563 370E                                     l4491 3A76  
                                   l4619 2678                                     l5187 0AE2  
                                   l4725 1E98                                     l5357 313A  
                                   l5381 198E                                     l4549 36DA  
                                   l4565 3718                                     l4663 179C  
                                   l5279 235C                                     l5367 3556  
                                   l4575 3AA4                                     l4807 1FF2  
                                   l4583 2A96                                     l4657 1762  
                                   l5289 23B0                                     l4753 1F5E  
                                   l4745 1F22                                     l5297 379C  
                                   l4913 2C9A                     receiveData@crcHolder 00CE  
                                   l4931 2D40                                     l4691 184C  
                                   l4763 1FA2                                     l4755 1F66  
                                   l4843 315A                                     l4915 2D1E  
                                   l3947 216E                                     l4587 2AA2  
                                   l4771 1D1E                                     l5491 386A  
                                   l4941 2DA8                                     l4685 1820  
                                   l4669 17AE                                     l4749 1F42  
                                   l3965 2202                                     ?_log 00F7  
                                   l4943 2DB0                                     l4935 2D54  
                                   l4687 1830                                     l4679 17F0  
                                   l4759 1F86                                     l4855 3182  
                                   l4871 31BE                                     l3983 2272  
                                   l3975 2234                                     l4599 2B26  
                                   l4783 1DD2                                     l4697 187C  
                                   l4689 1840                                     l4857 318C  
                                   l4849 316C                                     l3977 2246  
                                   l3969 2216                                     l4793 1E28  
                                   l4769 1CF2                                     l5497 3880  
                                   l4947 2DC4                                     l4699 188C  
                                   l4875 31CE                                     l4867 31B2  
                                   l4859 3194                                     l4971 1C7E  
                                   l4963 1B9E                                     l3979 2254  
                                   l4779 1DB8                                     l4797 1E4A  
                                   l4975 1C98                                     l4959 1B84  
                                   l4887 38F6                                     l4969 1C74  
                                   l4993 242A                                     l4899 33C0  
                                   l4987 23FC                                     _CRC8 36D4  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u5050 33E8  
                                   u2670 2EDC                                     u6040 198C  
                                   u4360 328E                                     u5058 33EA  
                                   u5308 258C                                     u5318 25A6  
                                   u4551 1702                                     u5408 0688  
                                   u5328 25CC                                     u4561 1720  
                                   u5601 086A                                     u5409 069C  
                                   u5428 06A6                                     u5348 2614  
                                   u5429 06BA                                     u5278 253E  
                                   u3871 214A                                     u5528 078C  
                                   u5448 06C4                                     u5368 0628  
                                   u5288 2558                                     u4761 1E74  
                                   u6177 37E0                                     u5529 07A0  
                                   u5449 06D8                                     u5369 063C  
                                   u3890 2194                                     u5458 06DE  
                                   u5298 2572                                     u5459 06F2  
                                   u4828 1CF6                                     u5708 0A4C  
                                   u5548 07B6                                     u5468 06F8  
                                   u5388 065A                                     u4781 1EAE  
                                   u4829 1D0A                                     u5549 07CC  
                                   u5469 070C                                     u5389 066E  
                                   u5718 0A66                                     u4951 1FF0  
                                   u3895 218A                                     u4848 1D22  
                                   u5808 0BBA                                     u5728 0A80  
                                   u5568 07E8                                     u5488 072C  
                                   u4849 1D36                                     u5569 07FC  
                                   u4858 1D3E                                     u5818 0BD4  
                                   u5738 0ABC                                     u5658 09CA  
                                   u5578 081A                                     u4859 1D52  
                                   u5579 082E                                     u4868 1D5A  
                                   u5828 0BEE                                     u5668 09E4  
                                   u5861 229C                                     u4869 1D6E  
                                   u4878 1D76                                     u5838 0C2A  
                                   u5758 0B38                                     u5678 09FE  
                                   u4879 1D8A                                     u5768 0B52  
                                   u5688 0A18                                     u5881 22D6  
                                   u5778 0B6C                                     u5698 0A32  
                                   u5788 0B86                                     u5798 0BA0  
                                   _TMR1 000FCE                                     _WPUB 000F61  
                Tempeture_Get@channelnum 0021                                     _main 3860  
                           ___ftpack@arg 001B                             ___ftpack@exp 001E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                            __CFG_BORV$190 000000  
                                   log@x 00F7                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 2134                                     start 00AA  
                          __CFG_IESO$OFF 000000                             ___ftmul@cntr 00DD  
                           ___param_bank 000010                             ___ftmul@sign 00DE  
         i2UART_buff_modulo_inc@my_value 0005                        ADC_ISR@ADC_Result 000B  
                           ___fttol@exp1 00ED                                    ??_log 002D  
                           ___fttol@lval 00E9                                    ?_CRC8 001B  
                       __end_of_CRCcheck 1E5E                         ?_Battery_Convert 0001  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 3CC4  
                     crcBufS_put@address 001D                                    ?_main 01E5  
                        __end_of___awdiv 31DA                          __end_of___ftadd 196A  
                        __end_of___ftdiv 23D8                          _TMR1_StartTimer 3CD0  
                        __end_of___ftmul 1FCA                          ___awdiv@divisor 001D  
                                  _T1CON 000FCD                          __end_of___ftsub 37C8  
                        __end_of___fttol 2286                                    _LATA0 007C48  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATC0 007C58                                    _LATA4 007C4C  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATA6 007C4E                                    _LATD1 007C61  
                                  _LATD2 007C62                                    _LATC4 007C5C  
                                  _LATD3 007C63                                    _LATC5 007C5D  
                                  _LATD5 007C65                           __CFG_DEBUG$OFF 000000  
                                  i2l221 0070                                    i2l213 004C  
                                  i2l215 0058                                    i2l217 0064  
                                  i2l813 3BC0                                    i2l782 3392  
                        ___awdiv@counter 001F                                    _TMR1H 000FCF  
                                  _TMR1L 000FCE                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
       __size_of_ADC_GetConversionResult 0016                                    _Delay 37C8  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 3990                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR1_ISR 3860                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _begin 3676                           __CFG_EBTRB$OFF 000000  
                          ___awtoft@sign 0026                                    _frexp 3398  
                                  _errno 0094                                    _group 0043  
                     __CFG_MCLRE$EXTMCLR 000000                            ___ftpack@sign 001F  
                         SetBypass@state 001D                  __end_of_TMR1_Initialize 3B7C  
                                  pclath 000FFA                              _Battery_Adc 0060  
                                  tablat 000FF5                              _Battery_Get 3A24  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00E8  
                                  plusw2 000FDB                           begin@stuffpeek 00CC  
                   __size_of_crcBufS_put 00DA                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                        RunBypas@cellbyp 00C1                          RunBypas@batvolt 00C3  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 3726  
                        CRCcheck@SentCRC 00C1                          __initialization 342A  
                            log@exponent 00FA               __end_of_EUSART1_Initialize 3958  
                           __end_of_main 38A4                               ToSend@what 00EE  
                                 ??_CRC8 001E                         __end_of_Set_4051 3990  
                              ??_ADC_ISR 0005              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 002D                            ___fttol@sign1 00E8  
                          __activetblptr 000002                         __end_of_Send_put 39F4  
             ADC_StartConversion@channel 0002                __size_ofi2_UART_buff_size 0018  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                         __end_of_RunBypas 2C56  
                          ?_Receive_peek 0001                                   ?_begin 00C1  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_frexp 001B  
                       __end_of___altoft 3536                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                         ___awdiv@dividend 001B  
                       __end_of___awtoft 391C                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                       __end_of___ftpack 3094                                   _T1GCON 000FCC  
                        i2_UART_buff_get 3304                                   _RC1STA 000FAB  
                  __size_of_Battery_Read 0018                          i2_UART_buff_put 2774  
                                 i2l4111 0EA6                                   i2l4103 0E3C  
                                 i2l4031 384E                                   i2l4105 0E8C  
                                 i2l4041 0C74                                   i2l4009 338E  
                                 i2l4025 3836                                   i2l4131 1018  
                                 i2l4123 0F84                                   i2l4115 0EF0  
                                 i2l4107 0E92                                   i2l4027 3840  
                                 i2l4053 0CD0                           __CFG_WDTEN$OFF 000000  
                                 i2l4143 10F6                                   i2l4135 1062  
                                 i2l4127 0FCE                                   i2l4119 0F3A  
                                 i2l4071 0D5A                                   i2l4047 0CA2  
                                 i2l3505 3960                                   i2l4065 0D2C  
                                 i2l3507 3972                                   i2l4147 1140  
                                 i2l4139 10AC                                   i2l4155 1192  
                                 i2l4083 0DB6                                   i2l4059 0CFE  
                                 i2l4157 11E2                                   i2l4077 0D88  
                                 i2l4095 0E12                                   i2l4089 0DE4  
                                 i2l3473 3B00                                   i2l4177 39BA  
            UART_buff_modulo_inc@modulus 001D                                   i2l3995 2800  
                                 i2l3989 2794                                   _RCREG1 000FAE  
                          ??_Temp_Filter 002D                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                               _Temp_Fault 3536  
                         __CFG_XINST$OFF 000000                                   _ToSend 3B7C  
                    __end_of_Receive_get 3CB6                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                    __end_of_Tempeture_Get 3A24  
                                 ___ftge 31DA                            _output_buffer 0500  
                       crcBufS_get@space 001E                  __end_of_TMR1_StartTimer 3CD4  
                     __size_of_SetBypass 00F4                                   ___wmul 3B0C  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                              ??___ftadd 00E5                           __CFG_STVREN$ON 000000  
                              ??___ftdiv 00C7                                ??___ftmul 00D6  
                              ??___ftsub 002D                                ??___fttol 00E3  
                                 _memset 3AB0                                   clear_0 3430  
                                 clear_1 343C                                   clear_2 3448  
                                 clear_3 3454                                   clear_4 3460  
                                 clear_5 346C                                   clear_6 3478  
                       ___awdiv@quotient 0021                       __size_of_Temp_Read 0018  
                                 _rx_len 0042                         __end_of_sendData 2658  
                  ___ftmul@f3_as_product 00DA                             __pdataCOMRAM 0045  
                           _Battery_Read 3C50                            Send_put@_data 0026  
                           _Battery_Volt 01A0                             __mediumconst 0000  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 016A             __end_of_UART_buff_modulo_inc 3A82  
          __size_of_INTERRUPT_Initialize 000C                         ?_TMR1_Initialize 0001  
                      _SYSTEM_Initialize 35A6                         __end_oflog@coeff 061C  
                             __accesstop 0060                  __end_of__initialization 34B0  
                             ___altoft@c 0023                                ?_CRCcheck 0001  
                             ___ftadd@f1 00DF                               ___ftadd@f2 00E2  
                             ___ftge@ff1 0021                               ___ftge@ff2 0024  
                     ?_SYSTEM_Initialize 0001                             eval_poly@res 00F4  
                          ___rparam_used 000001                               ___ftdiv@f1 00C1  
                             ___ftdiv@f2 00C4                               ___ftdiv@f3 00CB  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                             ___awtoft@c 0023                            __end_of_Delay 3814  
                             ___ftmul@f1 00D0                               ___ftmul@f2 00D3  
                             ___ftsub@f1 00EB                               ___ftsub@f2 00EE  
                    __end_of_Temp_Filter 1CF0                               ___fttol@f1 00DF  
           __size_of_ADC_StartConversion 001A                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 2EF4                             __pidataBANK1 38A4  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 36D4                                ?_TMR1_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 3AB0  __size_of_FastTransfer_buffer_modulo_inc 002E  
         _FastTransfer_buffer_modulo_inc 3A82                            __end_of_frexp 342A  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00F0  
                     UART_buff_get@_this 0021                      ?_crcBufS_status_put 001B  
                  Battery_Get@channelnum 0021                    __end_of_UART_buff_get 3304  
                 ??_EUSART1_Transmit_ISR 000C                  _ADC_GetConversionResult 3C80  
                  __end_of_UART_buff_put 2774                         ??_Battery_Filter 0021  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 3398  
                __end_ofi2_UART_buff_put 2890              __end_of_EUSART1_Receive_ISR 3BD6  
              _FastTransfer_buffer_flush 3612                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                            ?_Temp_Convert 0001  
                                ??_frexp 0020                __end_of_SYSTEM_Initialize 3612  
                 receiveData@holder_1130 00CB                        __end_of_SetBypass 2A8A  
                    _addressErrorCounter 008C                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                             __pbssBANK5 0500                       __size_of_eval_poly 00E2  
                        __CFG_PLLCFG$OFF 000000                        __end_of_Temp_Read 3C50  
                            _Receive_get 3CA6                                ?_Set_4051 0001  
                             ??_CRCcheck 0027                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 3B0C                        begin@givenAddress 00C4  
                  Temp_Convert@steinhart 01E2                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0026                              ?_Temp_Fault 0001  
                __size_of_UART_buff_size 0018                                ?_Send_put 0001  
                   __size_of_receiveData 0638                                  ?_ToSend 00EE  
                     __CFG_CCP2MX$PORTC1 000000                              Temp_Fault@i 002B  
                                ?___ftge 0021                                ?_RunBypas 0001  
                                ?___wmul 001B                         ?_TMR1_StartTimer 0001  
                             ??_TMR1_ISR 0003                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                ?___altoft 0023  
                                _ADC_ISR 0C56                                  ?_memset 001B  
                             _crc_buffer 00B0                                ?___awtoft 0023  
                              ?___ftpack 001B                  __size_of_ADC_Initialize 0018  
                          Temp_Convert@x 01E0                   __size_of_Battery_Fault 00B0  
                        Temp_Fault@fault 002A                       UART_buff_put@_this 0021  
                       i2_UART_buff_size 3C68              i2UART_buff_modulo_inc@value 0001  
                         Battery_Fault@i 002B                                  _OSCCON2 000FD2  
                         ??_Temp_Convert 002D                        _Receive_available 3BF0  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 0028                      _receiveArrayAddress 0096  
                     ?_Receive_available 001D                               begin@error 00C5  
                           ?_Battery_Get 0021                               ??_Set_4051 0003  
                            _Temp_Filter 1B7A                              _Temp_Aquire 003A  
                    ??_Receive_available 001F                                ?_sendData 0001  
                      _alignErrorCounter 008E                          __CFG_PWRTEN$OFF 000000  
                             ??_Send_put 0026                                  __Hparam 0000  
                                __Lparam 0000                          __size_of_ToSend 001E  
                   __end_of_Receive_peek 3CA6                                _AKNAKsend 0039  
                             ??_RunBypas 002A                          __size_of___ftge 0096  
                                ___awdiv 3144                                  ___ftadd 16EC  
                   _UART_buff_modulo_inc 3A54                                  ___ftdiv 2286  
                        __size_of___wmul 0028                                  ___ftmul 1E5E  
                                ___ftsub 3778                                  ___fttol 2134  
                                _calc_CS 003C                             __psmallconst 0600  
                             ??___altoft 0027                ??_ADC_GetConversionResult 0003  
                                __pcinit 342A                               ??___awtoft 0026  
                             ??___ftpack 0020                        __end_of_eval_poly 2D38  
                        __size_of_memset 002E                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 3860  
                                __ptext1 11EA                                  __ptext2 2526  
                                __ptext3 2E1A                                  __ptext4 3612  
                                __ptext5 061E                                  __ptext6 39C4  
                                __ptext7 2658                                  __ptext8 3C96  
                                __ptext9 3B34                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 3CB6  
              __end_of_Receive_available 3C08                             __size_of_log 014E  
                _FastTransfer_buffer_put 1FCA                      __size_of_Temp_Fault 0070  
                  CRCcheck@calculatedCRC 00C2                       _EUSART1_Initialize 391C  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 001B  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
               __size_of_Battery_Convert 0106                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 006C  
                   end_of_initialization 34B0                                Delay@wait 0020  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                            _Battery_Fault 3094  
                             ??_sendData 0027                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 0502                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc1 000FE6                                  postinc2 000FDE  
                       Battery_Convert@x 00ED                         begin@stufftosend 00C6  
                    CRCcheck@arrayHolder 00C3                     ??_EUSART1_Initialize 0025  
                 _dataAdressErrorCounter 0092                               _rx_address 0040  
                              _TRISCbits 000F94                      _ADC_StartConversion 3BD6  
                            _Volt_Aquire 003B                             begin@maxSize 00C3  
                         ?_Battery_Fault 0001       __size_of_FastTransfer_buffer_flush 0064  
                            ___ftdiv@exp 00CE                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 3B9A                           _UART_buff_peek 3B34  
                         _UART_buff_size 3C08                      __end_of_crcBufS_get 2B72  
                    __end_of_crcBufS_put 2EF4                             SetBypass@pin 001B  
                      __size_of_CRCcheck 016E                             Delay@d_lenth 001B  
                            ___ftmul@exp 00D9                     ?_ADC_StartConversion 0001  
                          _moduleAddress 003E                     __end_of_Temp_Convert 1B7A  
                             CRCcheck@rt 00C6                           __end_of_ToSend 3B9A  
           __end_of_INTERRUPT_Initialize 3CD0                           __end_of___ftge 3270  
                        _crcErrorCounter 0090                           __end_of___wmul 3B34  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 3CD4  
                      __size_of_TMR1_ISR 004C                           _ADC_Initialize 3C20  
              ??_FastTransfer_buffer_put 0026                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 3ADE                        crcBufS_put@status 001F  
                           receiveData@r 00D2               __size_of_Receive_available 0018  
                           receiveData@u 00D0                      start_initialization 342A  
                             eval_poly@d 00EE                               eval_poly@n 00F0  
                             eval_poly@x 00EB          __size_of_PIN_MANAGER_Initialize 0052  
                  crcBufS_get@wantedTime 0025                              __end_of_log 2526  
                 __size_of_Tempeture_Get 0030                   __end_of_UART_buff_init 3BB8  
                 __end_of_UART_buff_peek 3B5A                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 3C20                               frexp@value 001B  
                           ?_Receive_get 0001                        ??_Battery_Convert 00EB  
                         UART_buff_put@c 0023                                _SetBypass 2996  
                  __size_of_Receive_peek 0010                     __size_of_Battery_Get 0030  
                           ??_Temp_Fault 002A                 __end_ofi2_UART_buff_size 3C80  
                      __size_of_Set_4051 0038                                _Temp_DegF 01BE  
                       _PrevBattery_Volt 0100                                _Temp_Done 0088  
                              _Temp_Read 3C38                    ??_ADC_StartConversion 0001  
                               ??_ToSend 002D                   ??_UART_buff_modulo_inc 001F  
               __size_of_TMR1_Initialize 0022                                 CRC8@data 001B  
                        crcBufS_get@time 001D                                 ??___ftge 0027  
                      __size_of_Send_put 0030                                 ??___wmul 001F  
                 __end_of_ADC_Initialize 3C38                              __pdataBANK1 01A0  
                              RunBypas@i 00C6                                 ?_ADC_ISR 0001  
                               ??_memset 0021                        __size_of_RunBypas 00E4  
                      __size_of___altoft 007C                        __size_of___awtoft 003C  
                      __size_of___ftpack 00C6                                _Volt_Done 008A  
                            __pbssCOMRAM 002D            __size_of_EUSART1_Transmit_ISR 0034  
                          __pcstackBANK0 00C1                            __pcstackBANK1 01DC  
                     __end_of_Temp_Fault 35A6                             _Receive_peek 3C96  
                    UART_buff_init@_this 0023                            _PrevTemp_DegF 011E  
                            _crcBufS_get 2A8A                      UART_buff_peek@_this 001B  
                            _crcBufS_put 2E1A                          ??_Battery_Fault 002A  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                           ?_Temp_Filter 0001                            ??_receiveData 0027  
                             ?_SetBypass 001B              __size_of_crcBufS_status_put 00DA  
                             sendData@CS 0029                   __size_of_UART_buff_get 0094  
                 __size_of_UART_buff_put 011C                               ?_Temp_Read 0001  
                 _PIN_MANAGER_Initialize 3726                        __size_of_sendData 0132  
                      _Temp_Convert$2201 01DC                        _Temp_Convert$2202 01DE  
                              __pintcode 0008                            _Tempeture_Get 39F4  
                               ?___awdiv 001B                                 ?___ftadd 00DF  
                               ?___ftdiv 00C1                                 ?___ftmul 00D0  
                               ?___ftsub 00EB                                 ?___fttol 00DF  
                           Temp_Filter@x 00EB                          ?_ADC_Initialize 0001  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                              __smallconst 0600  
               __size_of_TMR1_StartTimer 0004                                _eval_poly 2C56  
                         __size_of_Delay 004C                           __size_of_begin 005E  
                         __size_of_frexp 0092                     _INTERRUPT_Initialize 3CC4  
                           _receiveArray 015A                  __size_of_Battery_Filter 00E2  
                               _CRCcheck 1CF0                           ___wmul@product 001F  
                               _LATAbits 000F89                                 _LATEbits 000F8D  
                  __size_of_Temp_Convert 0210                      UART_buff_size@_this 001B  
                               _IPR1bits 000F9F                                 _PIE1bits 000F9D  
    __size_of_INTERRUPT_InterruptManager 00A2                                 i2u403_40 39AA  
                               _PIR1bits 000F9E                                 i2u396_40 3322  
                               i2u397_40 3832                          Battery_Filter@x 0021  
                    begin@stuffavailable 00CA                           ?_Tempeture_Get 0021  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0C56                                 _TMR1_ISR 3814  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0400  
                              _rx_buffer 0300                        ??_TMR1_Initialize 001B  
                       __size_of_ADC_ISR 0594                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 001B                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 3270                            ?_Battery_Read 0001  
                          _UART_buff_put 2658                               ?_eval_poly 00EB  
               ??i2_UART_buff_modulo_inc 0005                             _Temp_Convert 196A  
                            _INTCON2bits 000FF1                                copy_data0 3492  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 0098  
               __size_ofi2_UART_buff_get 0094                                 _Set_4051 3958  
               __size_ofi2_UART_buff_put 011C                              ??_SetBypass 001F  
                              frexp@eptr 001E                            ??_updateComms 002D  
                   __size_of_Receive_get 0010                                 __Hrparam 0000  
                            ??_Temp_Read 0003                                 _Send_put 39C4  
                               _Temp_Adc 009C                                 __Lrparam 0000  
               ?_ADC_GetConversionResult 0001                       __CFG_BOREN$SBORDIS 000000  
                               _RunBypas 2B72                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                         __size_of___awdiv 0096  
                       __size_of___ftadd 027E                         __size_of___ftdiv 0152  
                               ___altoft 34BA                         __size_of___ftmul 016C  
                       __size_of___ftsub 0050                         __size_of___fttol 0152  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 00C8  
                               ___awtoft 38E0                                 ___ftpack 2FCE  
                         ?_UART_buff_get 0021                           ??_Battery_Read 0003  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 002A                          _Battery_Convert 2890  
                     Battery_Fault@fault 002A                 crcBufS_status_put@status 001E  
                               __ptext10 1CF0                                 __ptext11 2EF4  
                               __ptext20 3B7C                                 __ptext12 2A8A  
                               __ptext21 1FCA                                 __ptext13 3CA6  
                             _T1GCONbits 000FCC                                 __ptext30 38E0  
                               __ptext22 3A82                                 __ptext14 3270  
                               __ptext31 3778                                 __ptext23 39F4  
                               __ptext15 3A54                                 __ptext40 3CC4  
                               __ptext32 1B7A                                 __ptext24 37C8  
                               __ptext16 3BF0                                 __ptext41 391C  
                               __ptext33 35A6                                 __ptext25 3536  
                               __ptext17 3C08                                 __ptext50 2890  
                               __ptext42 3B9A                                 __ptext34 3676  
                               __ptext26 196A                                 __ptext18 36D4  
                               __ptext51 1E5E                                 __ptext43 3AB0  
                               __ptext35 3144                                 __ptext27 23D8  
                               __ptext19 2134                                 __ptext60 3C38  
                               __ptext52 2286                                 __ptext44 3C20  
                               __ptext36 3B5A                                 __ptext28 3398  
                               __ptext61 3C50                                 __ptext53 16EC  
                               __ptext45 2B72                                 __ptext37 3CD0  
                               __ptext29 2C56                                 __ptext70 3BD6  
                               __ptext62 3990                                 __ptext54 34BA  
                               __ptext46 2996                                 __ptext38 3726  
                               __ptext71 3C80                                 __ptext63 3C68  
                               __ptext55 2FCE                                 __ptext47 3A24  
                               __ptext39 3CB6                                 __ptext72 0000  
                               __ptext64 3304                                 __ptext56 2D38  
                               __ptext48 3094                                 __ptext65 3BB8  
                               __ptext57 3B0C                                 __ptext49 31DA  
                               __ptext66 2774                                 __ptext67 3ADE  
                               __ptext59 3814                                 __ptext68 0C56  
                               __ptext69 3958                        ??_TMR1_StartTimer 001B  
                          __size_of_CRC8 0052                                 begin@ptr 00C1  
                EUSART1_Receive_ISR@data 000C                            _returnAddress 003F  
                          __size_of_main 0044                              _receiveData 061E  
                         _Transmit_stall 0045                                 _sendData 2526  
                           _TmpTemp_DegF 0182                     __size_of_Temp_Filter 0176  
                        ??_Tempeture_Get 0024                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                       ??i2_UART_buff_size 0003  
                           _serial_write 0035                      __end_of_updateComms 16EC  
     __end_of_INTERRUPT_InterruptManager 00AA               _INTERRUPT_InterruptManager 0008  
                               main@argc 01E5                                 main@argv 01E7  
                    _EUSART1_Receive_ISR 3BB8                        receiveData@holder 00C8  
                               log@coeff 0601                               _INTCONbits 000FF2  
                            ??_eval_poly 00F2                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0031  
        __size_ofi2_UART_buff_modulo_inc 002E                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                            ??_Battery_Get 0024  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                         _Battery_Filter 2D38                            _CountCallBack 002F  
                   ?_EUSART1_Receive_ISR 0001              __end_of_ADC_StartConversion 3BF0  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                       _TempBattery_Volt 013C                  ?_PIN_MANAGER_Initialize 0001  
        __end_of_ADC_GetConversionResult 3C96             __end_of_EUSART1_Transmit_ISR 39C4  
                            _ring_buffer 0200                         ??_ADC_Initialize 001B  
             ?_FastTransfer_buffer_flush 0023                        ??i2_UART_buff_get 0009  
                            _serial_peek 009A                              _serial_read 0033  
                      ??i2_UART_buff_put 000A                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002E                  __end_of_Battery_Convert 2996  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
              receiveData@crcHolder_1131 00CF                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003D                   __end_of_Battery_Filter 2E1A  
             __end_of_crcBufS_status_put 2FCE                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 3778         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                    __end_of_Battery_Fault 3144  
                      __CFG_FOSC$INTIO67 000000                     __end_of_Battery_Read 3C68  
                        _TMR1_Initialize 3B5A                              _updateComms 11EA  
                       _ADC_Buffer_Point 002D                      __end_of_Battery_Get 3A54  
                        Set_4051@Channel 0001  
