

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 09 11:11:02 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000600                     __psmallconst:
    54                           	opt stack 0
    55  000600  00                 	db	0
    56  000601                     log@coeff:
    57                           	opt stack 0
    58  000601  00                 	db	0
    59  000602  00                 	db	0
    60  000603  00                 	db	0
    61  000604  00                 	db	0
    62  000605  80                 	db	128
    63  000606  3F                 	db	63
    64  000607  F0                 	db	240
    65  000608  FF                 	db	255
    66  000609  BE                 	db	190
    67  00060A  E2                 	db	226
    68  00060B  A9                 	db	169
    69  00060C  3E                 	db	62
    70  00060D  83                 	db	131
    71  00060E  76                 	db	118
    72  00060F  BE                 	db	190
    73  000610  AE                 	db	174
    74  000611  2B                 	db	43
    75  000612  3E                 	db	62
    76  000613  3C                 	db	60
    77  000614  C3                 	db	195
    78  000615  BD                 	db	189
    79  000616  D2                 	db	210
    80  000617  13                 	db	19
    81  000618  3D                 	db	61
    82  000619  78                 	db	120
    83  00061A  D3                 	db	211
    84  00061B  BB                 	db	187
    85  00061C                     __end_oflog@coeff:
    86                           	opt stack 0
    87  00061C  00                 	db	0	; dummy byte at the end
    88  0000                     
    89                           	psect	nvCOMRAM
    90  000046                     __pnvCOMRAM:
    91                           	opt stack 0
    92  000046                     _timer1ReloadVal:
    93                           	opt stack 0
    94  000046                     	ds	2
    95  000048                     _eusart1TxBufferRemaining:
    96                           	opt stack 0
    97  000048                     	ds	1
    98  0000                     _ANSELA	set	3896
    99  0000                     _ANSELB	set	3897
   100  0000                     _ANSELC	set	3898
   101  0000                     _ANSELD	set	3899
   102  0000                     _ANSELE	set	3900
   103  0000                     _TMR1	set	4046
   104  0000                     _ADCON0	set	4034
   105  0000                     _ADCON0bits	set	4034
   106  0000                     _ADCON1	set	4033
   107  0000                     _ADCON2	set	4032
   108  0000                     _ADRESH	set	4036
   109  0000                     _ADRESL	set	4035
   110  0000                     _BAUD1CON	set	4024
   111  0000                     _INTCON2bits	set	4081
   112  0000                     _INTCONbits	set	4082
   113  0000                     _IPR1bits	set	3999
   114  0000                     _LATA	set	3977
   115  0000                     _LATB	set	3978
   116  0000                     _LATC	set	3979
   117  0000                     _LATD	set	3980
   118  0000                     _LATE	set	3981
   119  0000                     _OSCCON	set	4051
   120  0000                     _OSCCON2	set	4050
   121  0000                     _OSCTUNE	set	3995
   122  0000                     _PIE1bits	set	3997
   123  0000                     _PIR1bits	set	3998
   124  0000                     _RC1REG	set	4014
   125  0000                     _RC1STA	set	4011
   126  0000                     _RC1STAbits	set	4011
   127  0000                     _RCONbits	set	4048
   128  0000                     _RCREG1	set	4014
   129  0000                     _SPBRG1	set	4015
   130  0000                     _SPBRGH1	set	4016
   131  0000                     _T1CON	set	4045
   132  0000                     _T1CONbits	set	4045
   133  0000                     _T1GCON	set	4044
   134  0000                     _T1GCONbits	set	4044
   135  0000                     _TMR1H	set	4047
   136  0000                     _TMR1L	set	4046
   137  0000                     _TRISA	set	3986
   138  0000                     _TRISB	set	3987
   139  0000                     _TRISC	set	3988
   140  0000                     _TRISD	set	3989
   141  0000                     _TRISE	set	3990
   142  0000                     _TX1REG	set	4013
   143  0000                     _TX1STA	set	4012
   144  0000                     _TXREG1	set	4013
   145  0000                     _WPUB	set	3937
   146  0000                     _LATA4	set	31820
   147  0000                     _LATA6	set	31822
   148  0000                     _LATC0	set	31832
   149  0000                     _LATC1	set	31833
   150                           
   151                           ; #config settings
   152  0000                     
   153                           	psect	cinit
   154  001C1A                     __pcinit:
   155                           	opt stack 0
   156  001C1A                     start_initialization:
   157                           	opt stack 0
   158  001C1A                     __initialization:
   159                           	opt stack 0
   160                           
   161                           ; Clear objects allocated to BANK1 (170 bytes)
   162  001C1A  EE01  F000         	lfsr	0,__pbssBANK1
   163  001C1E  0EAA               	movlw	170
   164  001C20                     clear_0:
   165  001C20  6AEE               	clrf	postinc0,c
   166  001C22  06E8               	decf	wreg,f,c
   167  001C24  E1FD               	bnz	clear_0
   168                           
   169                           ; Clear objects allocated to BANK0 (106 bytes)
   170  001C26  EE00  F060         	lfsr	0,__pbssBANK0
   171  001C2A  0E6A               	movlw	106
   172  001C2C                     clear_1:
   173  001C2C  6AEE               	clrf	postinc0,c
   174  001C2E  06E8               	decf	wreg,f,c
   175  001C30  E1FD               	bnz	clear_1
   176                           
   177                           ; Clear objects allocated to COMRAM (17 bytes)
   178  001C32  EE00  F035         	lfsr	0,__pbssCOMRAM
   179  001C36  0E11               	movlw	17
   180  001C38                     clear_2:
   181  001C38  6AEE               	clrf	postinc0,c
   182  001C3A  06E8               	decf	wreg,f,c
   183  001C3C  E1FD               	bnz	clear_2
   184  001C3E                     end_of_initialization:
   185                           	opt stack 0
   186  001C3E                     __end_of__initialization:
   187                           	opt stack 0
   188  001C3E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   189  001C40  6EF8               	movwf	tblptru,c
   190  001C42  0100               	movlb	0
   191  001C44  EFA3  F00D         	goto	_main	;jump to C main() function
   192                           tblptru	equ	0xFF8
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           
   196                           	psect	bssCOMRAM
   197  000035                     __pbssCOMRAM:
   198                           	opt stack 0
   199  000035                     _eusart1TxBuffer:
   200                           	opt stack 0
   201  000035                     	ds	8
   202  00003D                     _ADC_Buffer_Point:
   203                           	opt stack 0
   204  00003D                     	ds	2
   205  00003F                     _Temp_Aquire:
   206                           	opt stack 0
   207  00003F                     	ds	1
   208  000040                     _Volt_Aquire:
   209                           	opt stack 0
   210  000040                     	ds	1
   211  000041                     _eusart1RxCount:
   212                           	opt stack 0
   213  000041                     	ds	1
   214  000042                     _eusart1RxHead:
   215                           	opt stack 0
   216  000042                     	ds	1
   217  000043                     _eusart1RxTail:
   218                           	opt stack 0
   219  000043                     	ds	1
   220  000044                     _eusart1TxHead:
   221                           	opt stack 0
   222  000044                     	ds	1
   223  000045                     _eusart1TxTail:
   224                           	opt stack 0
   225  000045                     	ds	1
   226                           tblptru	equ	0xFF8
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	bssBANK0
   231  000060                     __pbssBANK0:
   232                           	opt stack 0
   233  000060                     _Battery_Volt:
   234                           	opt stack 0
   235  000060                     	ds	30
   236  00007E                     _Temp_DegF:
   237                           	opt stack 0
   238  00007E                     	ds	30
   239  00009C                     _Battery_Adc:
   240                           	opt stack 0
   241  00009C                     	ds	20
   242  0000B0                     _Temp_Done:
   243                           	opt stack 0
   244  0000B0                     	ds	2
   245  0000B2                     _Volt_Done:
   246                           	opt stack 0
   247  0000B2                     	ds	2
   248  0000B4                     _errno:
   249                           	opt stack 0
   250  0000B4                     	ds	2
   251  0000B6                     _Temp_Adc:
   252                           	opt stack 0
   253  0000B6                     	ds	20
   254                           tblptru	equ	0xFF8
   255                           postinc0	equ	0xFEE
   256                           wreg	equ	0xFE8
   257                           
   258                           	psect	bssBANK1
   259  000100                     __pbssBANK1:
   260                           	opt stack 0
   261  000100                     _eusart1RxBuffer:
   262                           	opt stack 0
   263  000100                     	ds	50
   264  000132                     _PrevBattery_Volt:
   265                           	opt stack 0
   266  000132                     	ds	30
   267  000150                     _PrevTemp_DegF:
   268                           	opt stack 0
   269  000150                     	ds	30
   270  00016E                     _TempBattery_Volt:
   271                           	opt stack 0
   272  00016E                     	ds	30
   273  00018C                     _TmpTemp_DegF:
   274                           	opt stack 0
   275  00018C                     	ds	30
   276                           tblptru	equ	0xFF8
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           
   280                           	psect	cstackBANK0
   281  0000CA                     __pcstackBANK0:
   282                           	opt stack 0
   283  0000CA                     ___ftmul@exp:
   284                           	opt stack 0
   285                           
   286                           ; 1 bytes @ 0x0
   287  0000CA                     	ds	1
   288  0000CB                     ___ftmul@f3_as_product:
   289                           	opt stack 0
   290                           
   291                           ; 3 bytes @ 0x1
   292  0000CB                     	ds	3
   293  0000CE                     ___ftmul@cntr:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x4
   297  0000CE                     	ds	1
   298  0000CF                     ___ftmul@sign:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x5
   302  0000CF                     	ds	1
   303  0000D0                     ?___ftadd:
   304                           	opt stack 0
   305  0000D0                     ___ftadd@f1:
   306                           	opt stack 0
   307                           
   308                           ; 3 bytes @ 0x6
   309  0000D0                     	ds	3
   310  0000D3                     ___ftadd@f2:
   311                           	opt stack 0
   312                           
   313                           ; 3 bytes @ 0x9
   314  0000D3                     	ds	3
   315  0000D6                     ___ftadd@sign:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0xC
   319  0000D6                     	ds	1
   320  0000D7                     ___ftadd@exp2:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0xD
   324  0000D7                     	ds	1
   325  0000D8                     ___ftadd@exp1:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0xE
   329  0000D8                     	ds	1
   330  0000D9                     ?___ftsub:
   331                           	opt stack 0
   332  0000D9                     ?_eval_poly:
   333                           	opt stack 0
   334  0000D9                     Battery_Filter@x:
   335                           	opt stack 0
   336  0000D9                     Temp_Filter@x:
   337                           	opt stack 0
   338  0000D9                     ___ftsub@f1:
   339                           	opt stack 0
   340  0000D9                     eval_poly@x:
   341                           	opt stack 0
   342                           
   343                           ; 3 bytes @ 0xF
   344  0000D9                     	ds	2
   345  0000DB                     Battery_Convert@x:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x11
   349  0000DB                     	ds	1
   350  0000DC                     eval_poly@d:
   351                           	opt stack 0
   352  0000DC                     ___ftsub@f2:
   353                           	opt stack 0
   354                           
   355                           ; 3 bytes @ 0x12
   356  0000DC                     	ds	2
   357  0000DE                     eval_poly@n:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x14
   361  0000DE                     	ds	2
   362  0000E0                     ??_eval_poly:
   363                           
   364                           ; 0 bytes @ 0x16
   365  0000E0                     	ds	2
   366  0000E2                     eval_poly@res:
   367                           	opt stack 0
   368                           
   369                           ; 3 bytes @ 0x18
   370  0000E2                     	ds	3
   371  0000E5                     ?_log:
   372                           	opt stack 0
   373  0000E5                     log@x:
   374                           	opt stack 0
   375                           
   376                           ; 3 bytes @ 0x1B
   377  0000E5                     	ds	3
   378  0000E8                     log@exponent:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x1E
   382  0000E8                     	ds	2
   383  0000EA                     _Temp_Convert$1582:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x20
   387  0000EA                     	ds	2
   388  0000EC                     _Temp_Convert$1583:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x22
   392  0000EC                     	ds	2
   393  0000EE                     Temp_Convert@x:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x24
   397  0000EE                     	ds	2
   398  0000F0                     Temp_Convert@steinhart:
   399                           	opt stack 0
   400                           
   401                           ; 3 bytes @ 0x26
   402  0000F0                     	ds	3
   403  0000F3                     
   404                           ; 2 bytes @ 0x29
   405  0000F3                     	ds	2
   406  0000F5                     
   407                           ; 3 bytes @ 0x2B
   408  0000F5                     	ds	3
   409                           tblptru	equ	0xFF8
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           
   413                           	psect	cstackCOMRAM
   414  000001                     __pcstackCOMRAM:
   415                           	opt stack 0
   416  000001                     ??_ADC_StartConversion:
   417  000001                     ?_ADC_GetConversionResult:
   418                           	opt stack 0
   419  000001                     Set_4051@Channel:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x0
   423  000001                     	ds	1
   424  000002                     ADC_StartConversion@channel:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x1
   428  000002                     	ds	1
   429  000003                     ??_Set_4051:
   430  000003                     ??_ADC_GetConversionResult:
   431                           
   432                           ; 0 bytes @ 0x2
   433  000003                     	ds	2
   434  000005                     ??_ADC_ISR:
   435                           
   436                           ; 0 bytes @ 0x4
   437  000005                     	ds	2
   438  000007                     ADC_ISR@ADC_Result:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x6
   442  000007                     	ds	2
   443  000009                     ??_INTERRUPT_InterruptManager:
   444                           
   445                           ; 0 bytes @ 0x8
   446  000009                     	ds	14
   447  000017                     ?___awdiv:
   448                           	opt stack 0
   449  000017                     ?___ftpack:
   450                           	opt stack 0
   451  000017                     ?_frexp:
   452                           	opt stack 0
   453  000017                     ___awdiv@dividend:
   454                           	opt stack 0
   455  000017                     ___ftpack@arg:
   456                           	opt stack 0
   457  000017                     frexp@value:
   458                           	opt stack 0
   459                           
   460                           ; 3 bytes @ 0x16
   461  000017                     	ds	2
   462  000019                     ___awdiv@divisor:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x18
   466  000019                     	ds	1
   467  00001A                     ___ftpack@exp:
   468                           	opt stack 0
   469  00001A                     frexp@eptr:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x19
   473  00001A                     	ds	1
   474  00001B                     ___awdiv@counter:
   475                           	opt stack 0
   476  00001B                     ___ftpack@sign:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x1A
   480  00001B                     	ds	1
   481  00001C                     ??___ftpack:
   482  00001C                     ??_frexp:
   483  00001C                     ___awdiv@sign:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x1B
   487  00001C                     	ds	1
   488  00001D                     ___awdiv@quotient:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x1C
   492  00001D                     	ds	2
   493  00001F                     ?___wmul:
   494                           	opt stack 0
   495  00001F                     ?___ftdiv:
   496                           	opt stack 0
   497  00001F                     ___wmul@multiplier:
   498                           	opt stack 0
   499  00001F                     ___ftdiv@f1:
   500                           	opt stack 0
   501                           
   502                           ; 3 bytes @ 0x1E
   503  00001F                     	ds	2
   504  000021                     ___wmul@multiplicand:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x20
   508  000021                     	ds	1
   509  000022                     ___ftdiv@f2:
   510                           	opt stack 0
   511                           
   512                           ; 3 bytes @ 0x21
   513  000022                     	ds	1
   514  000023                     ___wmul@product:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x22
   518  000023                     	ds	2
   519  000025                     ??___ftdiv:
   520  000025                     ?___awtoft:
   521                           	opt stack 0
   522  000025                     ___awtoft@c:
   523                           	opt stack 0
   524  000025                     ___ftge@ff1:
   525                           	opt stack 0
   526                           
   527                           ; 3 bytes @ 0x24
   528  000025                     	ds	3
   529  000028                     ___awtoft@sign:
   530                           	opt stack 0
   531  000028                     ___ftdiv@cntr:
   532                           	opt stack 0
   533  000028                     ___ftge@ff2:
   534                           	opt stack 0
   535                           
   536                           ; 3 bytes @ 0x27
   537  000028                     	ds	1
   538  000029                     ?___ftmul:
   539                           	opt stack 0
   540  000029                     ___ftdiv@f3:
   541                           	opt stack 0
   542  000029                     ___ftmul@f1:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x28
   546  000029                     	ds	2
   547  00002B                     ??___ftge:
   548                           
   549                           ; 0 bytes @ 0x2A
   550  00002B                     	ds	1
   551  00002C                     ___ftdiv@exp:
   552                           	opt stack 0
   553  00002C                     ___ftmul@f2:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x2B
   557  00002C                     	ds	1
   558  00002D                     ___ftdiv@sign:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x2C
   562  00002D                     	ds	1
   563  00002E                     Battery_Fault@fault:
   564                           	opt stack 0
   565  00002E                     Temp_Fault@fault:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x2D
   569  00002E                     	ds	1
   570  00002F                     ??___ftmul:
   571  00002F                     Battery_Fault@i:
   572                           	opt stack 0
   573  00002F                     Temp_Fault@i:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x2E
   577  00002F                     	ds	3
   578  000032                     ??___ftadd:
   579                           
   580                           ; 0 bytes @ 0x31
   581  000032                     	ds	3
   582  000035                     tblptru	equ	0xFF8
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           
   586                           ; 0 bytes @ 0x34
   587 ;;
   588 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   589 ;;
   590 ;; *************** function _main *****************
   591 ;; Defined at:
   592 ;;		line 31 in file "Main.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;  argc            2   41[BANK0 ] int 
   595 ;;  argv            3   43[BANK0 ] PTR PTR unsigned char 
   596 ;; Auto vars:     Size  Location     Type
   597 ;;		None
   598 ;; Return value:  Size  Location     Type
   599 ;;                  2   41[BANK0 ] int 
   600 ;; Registers used:
   601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : 0/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   607 ;;      Params:         0       5       0       0       0       0       0
   608 ;;      Locals:         0       0       0       0       0       0       0
   609 ;;      Temps:          0       0       0       0       0       0       0
   610 ;;      Totals:         0       5       0       0       0       0       0
   611 ;;Total ram usage:        5 bytes
   612 ;; Hardware stack levels required when called:    8
   613 ;; This function calls:
   614 ;;		_Battery_Convert
   615 ;;		_Battery_Fault
   616 ;;		_SYSTEM_Initialize
   617 ;;		_Temp_Convert
   618 ;;		_Temp_Fault
   619 ;; This function is called by:
   620 ;;		Startup code after reset
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           	psect	text0
   625  001B46                     __ptext0:
   626                           	opt stack 0
   627  001B46                     _main:
   628                           	opt stack 23
   629                           
   630                           ;Main.c: 33: SYSTEM_Initialize();
   631                           
   632                           ;incstack = 0
   633  001B46  EC49  F00E         	call	_SYSTEM_Initialize	;wreg free
   634                           
   635                           ;Main.c: 52: (INTCONbits.GIE = 1);
   636  001B4A  8EF2               	bsf	intcon,7,c	;volatile
   637                           
   638                           ;Main.c: 55: (INTCONbits.PEIE = 1);
   639  001B4C  8CF2               	bsf	intcon,6,c	;volatile
   640  001B4E  D000               	goto	l3308
   641  001B50                     l3308:
   642                           
   643                           ;Main.c: 65: {
   644                           ;Main.c: 66: if (Temp_Done)
   645  001B50  0100               	movlb	0	; () banked
   646  001B52  51B0               	movf	_Temp_Done& (0+255),w,b
   647  001B54  0100               	movlb	0	; () banked
   648  001B56  11B1               	iorwf	(_Temp_Done+1)& (0+255),w,b
   649  001B58  B4D8               	btfsc	status,2,c
   650  001B5A  D005               	goto	l3314
   651                           
   652                           ; BSR set to: 0
   653                           ;Main.c: 67: {
   654                           ;Main.c: 68: Temp_Convert();
   655  001B5C  EC58  F006         	call	_Temp_Convert	;wreg free
   656                           
   657                           ;Main.c: 69: Temp_Fault();
   658  001B60  ECE0  F00C         	call	_Temp_Fault	;wreg free
   659  001B64  D000               	goto	l3314
   660  001B66                     l3314:
   661                           
   662                           ;Main.c: 70: }
   663                           ;Main.c: 71: if (Volt_Done)
   664  001B66  0100               	movlb	0	; () banked
   665  001B68  51B2               	movf	_Volt_Done& (0+255),w,b
   666  001B6A  0100               	movlb	0	; () banked
   667  001B6C  11B3               	iorwf	(_Volt_Done+1)& (0+255),w,b
   668  001B6E  B4D8               	btfsc	status,2,c
   669  001B70  D7EF               	goto	l3308
   670                           
   671                           ; BSR set to: 0
   672                           ;Main.c: 72: {
   673                           ;Main.c: 73: Battery_Convert();
   674  001B72  ECE0  F00A         	call	_Battery_Convert	;wreg free
   675                           
   676                           ;Main.c: 74: Battery_Fault();
   677  001B76  ECA9  F00B         	call	_Battery_Fault	;wreg free
   678  001B7A  D7EA               	goto	l3308
   679                           
   680                           ;Main.c: 75: }
   681                           ;Main.c: 76: }
   682                           ;Main.c: 77: return (0);
   683                           ;	Return value of _main is never used
   684  001B7C  EF55  F000         	goto	start
   685  001B80                     __end_of_main:
   686                           	opt stack 0
   687                           tblptru	equ	0xFF8
   688                           intcon	equ	0xFF2
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           status	equ	0xFD8
   692                           
   693 ;; *************** function _Temp_Fault *****************
   694 ;; Defined at:
   695 ;;		line 12 in file "Tempeture.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;  i               2   46[COMRAM] int 
   700 ;;  fault           1   45[COMRAM] unsigned char 
   701 ;; Return value:  Size  Location     Type
   702 ;;                  1    wreg      unsigned char 
   703 ;; Registers used:
   704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   710 ;;      Params:         0       0       0       0       0       0       0
   711 ;;      Locals:         3       0       0       0       0       0       0
   712 ;;      Temps:          0       0       0       0       0       0       0
   713 ;;      Totals:         3       0       0       0       0       0       0
   714 ;;Total ram usage:        3 bytes
   715 ;; Hardware stack levels used:    1
   716 ;; Hardware stack levels required when called:    4
   717 ;; This function calls:
   718 ;;		___ftge
   719 ;;		___wmul
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text1
   726  0019C0                     __ptext1:
   727                           	opt stack 0
   728  0019C0                     _Temp_Fault:
   729                           	opt stack 26
   730                           
   731                           ;Tempeture.c: 15: char fault = 0;
   732                           
   733                           ;incstack = 0
   734  0019C0  0E00               	movlw	0
   735  0019C2  6E2E               	movwf	Temp_Fault@fault,c
   736                           
   737                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
   738  0019C4  0E00               	movlw	0
   739  0019C6  6E30               	movwf	Temp_Fault@i+1,c
   740  0019C8  0E00               	movlw	0
   741  0019CA  6E2F               	movwf	Temp_Fault@i,c
   742  0019CC                     l3250:
   743  0019CC  BE30               	btfsc	Temp_Fault@i+1,7,c
   744  0019CE  D008               	goto	l3254
   745  0019D0  5030               	movf	Temp_Fault@i+1,w,c
   746  0019D2  E12D               	bnz	l384
   747  0019D4  0E09               	movlw	9
   748  0019D6  5C2F               	subwf	Temp_Fault@i,w,c
   749  0019D8  B0D8               	btfsc	status,0,c
   750  0019DA  0012               	return	
   751  0019DC  D001               	goto	l3254
   752  0019DE  0012               	return	
   753  0019E0                     l3254:
   754                           
   755                           ;Tempeture.c: 17: {
   756                           ;Tempeture.c: 18: if (60.5 > Temp_DegF[i])
   757  0019E0  C02F  F01F         	movff	Temp_Fault@i,___wmul@multiplier
   758  0019E4  C030  F020         	movff	Temp_Fault@i+1,___wmul@multiplier+1
   759  0019E8  0E00               	movlw	0
   760  0019EA  6E22               	movwf	___wmul@multiplicand+1,c
   761  0019EC  0E03               	movlw	3
   762  0019EE  6E21               	movwf	___wmul@multiplicand,c
   763  0019F0  EC24  F00E         	call	___wmul	;wreg free
   764  0019F4  0E7E               	movlw	low _Temp_DegF
   765  0019F6  241F               	addwf	?___wmul,w,c
   766  0019F8  6ED9               	movwf	fsr2l,c
   767  0019FA  0E00               	movlw	high _Temp_DegF
   768  0019FC  2020               	addwfc	?___wmul+1,w,c
   769  0019FE  6EDA               	movwf	fsr2h,c
   770  001A00  CFDE F025          	movff	postinc2,___ftge@ff1
   771  001A04  CFDE F026          	movff	postinc2,___ftge@ff1+1
   772  001A08  CFDD F027          	movff	postdec2,___ftge@ff1+2
   773  001A0C  0E00               	movlw	0
   774  001A0E  6E28               	movwf	___ftge@ff2,c
   775  001A10  0E72               	movlw	114
   776  001A12  6E29               	movwf	___ftge@ff2+1,c
   777  001A14  0E42               	movlw	66
   778  001A16  6E2A               	movwf	___ftge@ff2+2,c
   779  001A18  EC01  F00C         	call	___ftge	;wreg free
   780  001A1C  B0D8               	btfsc	status,0,c
   781  001A1E  D003               	goto	l3258
   782                           
   783                           ;Tempeture.c: 19: {
   784                           ;Tempeture.c: 20: fault = 1;
   785  001A20  0E01               	movlw	1
   786  001A22  6E2E               	movwf	Temp_Fault@fault,c
   787  001A24  D000               	goto	l3258
   788  001A26                     l3258:
   789  001A26  4A2F               	infsnz	Temp_Fault@i,f,c
   790  001A28  2A30               	incf	Temp_Fault@i+1,f,c
   791  001A2A  D7D0               	goto	l3250
   792  001A2C  0012               	return	
   793  001A2E                     l384:
   794  001A2E  0012               	return		;funcret
   795  001A30                     __end_of_Temp_Fault:
   796                           	opt stack 0
   797                           tblptru	equ	0xFF8
   798                           intcon	equ	0xFF2
   799                           postinc0	equ	0xFEE
   800                           wreg	equ	0xFE8
   801                           postinc2	equ	0xFDE
   802                           postdec2	equ	0xFDD
   803                           fsr2h	equ	0xFDA
   804                           fsr2l	equ	0xFD9
   805                           status	equ	0xFD8
   806                           
   807 ;; *************** function _Temp_Convert *****************
   808 ;; Defined at:
   809 ;;		line 50 in file "Tempeture.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;		None
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  steinhart       3   38[BANK0 ] float 
   814 ;;  x               2   36[BANK0 ] int 
   815 ;; Return value:  Size  Location     Type
   816 ;;		None               void
   817 ;; Registers used:
   818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   824 ;;      Params:         0       0       0       0       0       0       0
   825 ;;      Locals:         0       9       0       0       0       0       0
   826 ;;      Temps:          0       0       0       0       0       0       0
   827 ;;      Totals:         0       9       0       0       0       0       0
   828 ;;Total ram usage:        9 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    7
   831 ;; This function calls:
   832 ;;		_Temp_Filter
   833 ;;		___awdiv
   834 ;;		___awtoft
   835 ;;		___ftadd
   836 ;;		___ftdiv
   837 ;;		___ftmul
   838 ;;		___ftsub
   839 ;;		___wmul
   840 ;;		_log
   841 ;; This function is called by:
   842 ;;		_main
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text2
   847  000CB0                     __ptext2:
   848                           	opt stack 0
   849  000CB0                     _Temp_Convert:
   850                           	opt stack 23
   851                           
   852                           ;Tempeture.c: 52: int x;
   853                           ;Tempeture.c: 53: float steinhart;
   854                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
   855                           
   856                           ;incstack = 0
   857  000CB0  0E00               	movlw	0
   858  000CB2  0100               	movlb	0	; () banked
   859  000CB4  6FEF               	movwf	(Temp_Convert@x+1)& (0+255),b
   860  000CB6  0E00               	movlw	0
   861  000CB8  6FEE               	movwf	Temp_Convert@x& (0+255),b
   862                           
   863                           ; BSR set to: 0
   864  000CBA  0100               	movlb	0	; () banked
   865  000CBC  BFEF               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
   866  000CBE  D00A               	goto	l3268
   867  000CC0  0100               	movlb	0	; () banked
   868  000CC2  51EF               	movf	(Temp_Convert@x+1)& (0+255),w,b
   869  000CC4  E106               	bnz	u2840
   870  000CC6  0E0A               	movlw	10
   871  000CC8  0100               	movlb	0	; () banked
   872  000CCA  5DEE               	subwf	Temp_Convert@x& (0+255),w,b
   873  000CCC  B0D8               	btfsc	status,0,c
   874  000CCE  D0EC               	goto	l3292
   875  000CD0  D001               	goto	l3268
   876  000CD2                     u2840:
   877                           
   878                           ; BSR set to: 0
   879  000CD2  D0EA               	goto	l3292
   880  000CD4                     l3268:
   881                           
   882                           ; BSR set to: 0
   883                           ;Tempeture.c: 55: {
   884                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
   885  000CD4  90D8               	bcf	status,0,c
   886  000CD6  0100               	movlb	0	; () banked
   887  000CD8  35EE               	rlcf	Temp_Convert@x& (0+255),w,b
   888  000CDA  6ED9               	movwf	fsr2l,c
   889  000CDC  0100               	movlb	0	; () banked
   890  000CDE  35EF               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
   891  000CE0  6EDA               	movwf	fsr2h,c
   892  000CE2  0EB6               	movlw	low _Temp_Adc
   893  000CE4  26D9               	addwf	fsr2l,f,c
   894  000CE6  0E00               	movlw	high _Temp_Adc
   895  000CE8  22DA               	addwfc	fsr2h,f,c
   896  000CEA  CFDE F019          	movff	postinc2,___awdiv@divisor
   897  000CEE  CFDD F01A          	movff	postdec2,___awdiv@divisor+1
   898  000CF2  0E03               	movlw	3
   899  000CF4  6E18               	movwf	___awdiv@dividend+1,c
   900  000CF6  6817               	setf	___awdiv@dividend,c
   901  000CF8  EC4C  F00C         	call	___awdiv	;wreg free
   902  000CFC  0EFF               	movlw	255
   903  000CFE  2417               	addwf	?___awdiv,w,c
   904  000D00  0100               	movlb	0	; () banked
   905  000D02  6FEA               	movwf	_Temp_Convert$1582& (0+255),b
   906  000D04  0EFF               	movlw	255
   907  000D06  2018               	addwfc	?___awdiv+1,w,c
   908  000D08  0100               	movlb	0	; () banked
   909  000D0A  6FEB               	movwf	(_Temp_Convert$1582+1)& (0+255),b
   910                           
   911                           ; BSR set to: 0
   912                           ;Tempeture.c: 55: {
   913                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
   914  000D0C  C0EA  F019         	movff	_Temp_Convert$1582,___awdiv@divisor
   915  000D10  C0EB  F01A         	movff	_Temp_Convert$1582+1,___awdiv@divisor+1
   916  000D14  0E27               	movlw	39
   917  000D16  6E18               	movwf	___awdiv@dividend+1,c
   918  000D18  0E10               	movlw	16
   919  000D1A  6E17               	movwf	___awdiv@dividend,c
   920  000D1C  EC4C  F00C         	call	___awdiv	;wreg free
   921  000D20  C017  F0EC         	movff	?___awdiv,_Temp_Convert$1583
   922  000D24  C018  F0ED         	movff	?___awdiv+1,_Temp_Convert$1583+1
   923                           
   924                           ;Tempeture.c: 55: {
   925                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
   926  000D28  0E27               	movlw	39
   927  000D2A  6E1A               	movwf	___awdiv@divisor+1,c
   928  000D2C  0E10               	movlw	16
   929  000D2E  6E19               	movwf	___awdiv@divisor,c
   930  000D30  C0EC  F017         	movff	_Temp_Convert$1583,___awdiv@dividend
   931  000D34  C0ED  F018         	movff	_Temp_Convert$1583+1,___awdiv@dividend+1
   932  000D38  EC4C  F00C         	call	___awdiv	;wreg free
   933  000D3C  C017  F025         	movff	?___awdiv,___awtoft@c
   934  000D40  C018  F026         	movff	?___awdiv+1,___awtoft@c+1
   935  000D44  EC85  F00D         	call	___awtoft	;wreg free
   936  000D48  C025  F0F0         	movff	?___awtoft,Temp_Convert@steinhart
   937  000D4C  C026  F0F1         	movff	?___awtoft+1,Temp_Convert@steinhart+1
   938  000D50  C027  F0F2         	movff	?___awtoft+2,Temp_Convert@steinhart+2
   939                           
   940                           ;Tempeture.c: 57: steinhart = log(steinhart);
   941  000D54  C0F0  F0E5         	movff	Temp_Convert@steinhart,log@x
   942  000D58  C0F1  F0E6         	movff	Temp_Convert@steinhart+1,log@x+1
   943  000D5C  C0F2  F0E7         	movff	Temp_Convert@steinhart+2,log@x+2
   944  000D60  ECC1  F008         	call	_log	;wreg free
   945  000D64  C0E5  F0F0         	movff	?_log,Temp_Convert@steinhart
   946  000D68  C0E6  F0F1         	movff	?_log+1,Temp_Convert@steinhart+1
   947  000D6C  C0E7  F0F2         	movff	?_log+2,Temp_Convert@steinhart+2
   948                           
   949                           ;Tempeture.c: 58: steinhart /= 3950;
   950  000D70  C0F0  F01F         	movff	Temp_Convert@steinhart,___ftdiv@f1
   951  000D74  C0F1  F020         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
   952  000D78  C0F2  F021         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
   953  000D7C  0EE0               	movlw	224
   954  000D7E  6E22               	movwf	___ftdiv@f2,c
   955  000D80  0E76               	movlw	118
   956  000D82  6E23               	movwf	___ftdiv@f2+1,c
   957  000D84  0E45               	movlw	69
   958  000D86  6E24               	movwf	___ftdiv@f2+2,c
   959  000D88  ECF9  F009         	call	___ftdiv	;wreg free
   960  000D8C  C01F  F0F0         	movff	?___ftdiv,Temp_Convert@steinhart
   961  000D90  C020  F0F1         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
   962  000D94  C021  F0F2         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
   963                           
   964                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
   965  000D98  C0F0  F0D0         	movff	Temp_Convert@steinhart,___ftadd@f1
   966  000D9C  C0F1  F0D1         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
   967  000DA0  C0F2  F0D2         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
   968  000DA4  0ECF               	movlw	207
   969  000DA6  0100               	movlb	0	; () banked
   970  000DA8  6FD3               	movwf	___ftadd@f2& (0+255),b
   971  000DAA  0E5B               	movlw	91
   972  000DAC  0100               	movlb	0	; () banked
   973  000DAE  6FD4               	movwf	(___ftadd@f2+1)& (0+255),b
   974  000DB0  0E3B               	movlw	59
   975  000DB2  0100               	movlb	0	; () banked
   976  000DB4  6FD5               	movwf	(___ftadd@f2+2)& (0+255),b
   977  000DB6  EC25  F005         	call	___ftadd	;wreg free
   978  000DBA  C0D0  F0F0         	movff	?___ftadd,Temp_Convert@steinhart
   979  000DBE  C0D1  F0F1         	movff	?___ftadd+1,Temp_Convert@steinhart+1
   980  000DC2  C0D2  F0F2         	movff	?___ftadd+2,Temp_Convert@steinhart+2
   981                           
   982                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
   983  000DC6  0E00               	movlw	0
   984  000DC8  6E1F               	movwf	___ftdiv@f1,c
   985  000DCA  0E80               	movlw	128
   986  000DCC  6E20               	movwf	___ftdiv@f1+1,c
   987  000DCE  0E3F               	movlw	63
   988  000DD0  6E21               	movwf	___ftdiv@f1+2,c
   989  000DD2  C0F0  F022         	movff	Temp_Convert@steinhart,___ftdiv@f2
   990  000DD6  C0F1  F023         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
   991  000DDA  C0F2  F024         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
   992  000DDE  ECF9  F009         	call	___ftdiv	;wreg free
   993  000DE2  C01F  F0F0         	movff	?___ftdiv,Temp_Convert@steinhart
   994  000DE6  C020  F0F1         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
   995  000DEA  C021  F0F2         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
   996                           
   997                           ;Tempeture.c: 61: steinhart -= 273.15;
   998  000DEE  C0F0  F0D9         	movff	Temp_Convert@steinhart,___ftsub@f1
   999  000DF2  C0F1  F0DA         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  1000  000DF6  C0F2  F0DB         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  1001  000DFA  0E93               	movlw	147
  1002  000DFC  0100               	movlb	0	; () banked
  1003  000DFE  6FDC               	movwf	___ftsub@f2& (0+255),b
  1004  000E00  0E88               	movlw	136
  1005  000E02  0100               	movlb	0	; () banked
  1006  000E04  6FDD               	movwf	(___ftsub@f2+1)& (0+255),b
  1007  000E06  0E43               	movlw	67
  1008  000E08  0100               	movlb	0	; () banked
  1009  000E0A  6FDE               	movwf	(___ftsub@f2+2)& (0+255),b
  1010  000E0C  EC18  F00D         	call	___ftsub	;wreg free
  1011  000E10  C0D9  F0F0         	movff	?___ftsub,Temp_Convert@steinhart
  1012  000E14  C0DA  F0F1         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  1013  000E18  C0DB  F0F2         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  1014                           
  1015                           ;Tempeture.c: 62: steinhart = (steinhart*1.800) + 32.00;
  1016  000E1C  0E66               	movlw	102
  1017  000E1E  6E2C               	movwf	___ftmul@f2,c
  1018  000E20  0EE6               	movlw	230
  1019  000E22  6E2D               	movwf	___ftmul@f2+1,c
  1020  000E24  0E3F               	movlw	63
  1021  000E26  6E2E               	movwf	___ftmul@f2+2,c
  1022  000E28  C0F0  F029         	movff	Temp_Convert@steinhart,___ftmul@f1
  1023  000E2C  C0F1  F02A         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  1024  000E30  C0F2  F02B         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  1025  000E34  EC62  F009         	call	___ftmul	;wreg free
  1026  000E38  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1027  000E3C  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1028  000E40  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1029  000E44  0E00               	movlw	0
  1030  000E46  0100               	movlb	0	; () banked
  1031  000E48  6FD3               	movwf	___ftadd@f2& (0+255),b
  1032  000E4A  0E00               	movlw	0
  1033  000E4C  0100               	movlb	0	; () banked
  1034  000E4E  6FD4               	movwf	(___ftadd@f2+1)& (0+255),b
  1035  000E50  0E42               	movlw	66
  1036  000E52  0100               	movlb	0	; () banked
  1037  000E54  6FD5               	movwf	(___ftadd@f2+2)& (0+255),b
  1038  000E56  EC25  F005         	call	___ftadd	;wreg free
  1039  000E5A  C0D0  F0F0         	movff	?___ftadd,Temp_Convert@steinhart
  1040  000E5E  C0D1  F0F1         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1041  000E62  C0D2  F0F2         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1042                           
  1043                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  1044  000E66  C0EE  F01F         	movff	Temp_Convert@x,___wmul@multiplier
  1045  000E6A  C0EF  F020         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  1046  000E6E  0E00               	movlw	0
  1047  000E70  6E22               	movwf	___wmul@multiplicand+1,c
  1048  000E72  0E03               	movlw	3
  1049  000E74  6E21               	movwf	___wmul@multiplicand,c
  1050  000E76  EC24  F00E         	call	___wmul	;wreg free
  1051  000E7A  0E8C               	movlw	low _TmpTemp_DegF
  1052  000E7C  241F               	addwf	?___wmul,w,c
  1053  000E7E  6ED9               	movwf	fsr2l,c
  1054  000E80  0E01               	movlw	high _TmpTemp_DegF
  1055  000E82  2020               	addwfc	?___wmul+1,w,c
  1056  000E84  6EDA               	movwf	fsr2h,c
  1057  000E86  C0F0  FFDE         	movff	Temp_Convert@steinhart,postinc2
  1058  000E8A  C0F1  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  1059  000E8E  C0F2  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  1060  000E92  0100               	movlb	0	; () banked
  1061  000E94  4BEE               	infsnz	Temp_Convert@x& (0+255),f,b
  1062  000E96  2BEF               	incf	(Temp_Convert@x+1)& (0+255),f,b
  1063                           
  1064                           ; BSR set to: 0
  1065  000E98  0100               	movlb	0	; () banked
  1066  000E9A  BFEF               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  1067  000E9C  D71B               	goto	l3268
  1068  000E9E  0100               	movlb	0	; () banked
  1069  000EA0  51EF               	movf	(Temp_Convert@x+1)& (0+255),w,b
  1070  000EA2  E102               	bnz	l3292
  1071  000EA4  D710               	goto	L1
  1072  000EA6  D000               	goto	l3292
  1073  000EA8                     l3292:
  1074                           
  1075                           ; BSR set to: 0
  1076                           ;Tempeture.c: 64: }
  1077                           ;Tempeture.c: 65: Temp_Filter();
  1078  000EA8  EC57  F007         	call	_Temp_Filter	;wreg free
  1079  000EAC  0012               	return		;funcret
  1080  000EAE                     __end_of_Temp_Convert:
  1081                           	opt stack 0
  1082                           tblptru	equ	0xFF8
  1083                           intcon	equ	0xFF2
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postinc2	equ	0xFDE
  1087                           postdec2	equ	0xFDD
  1088                           fsr2h	equ	0xFDA
  1089                           fsr2l	equ	0xFD9
  1090                           status	equ	0xFD8
  1091                           
  1092 ;; *************** function _log *****************
  1093 ;; Defined at:
  1094 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;  x               3   27[BANK0 ] int 
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;  exponent        2   30[BANK0 ] int 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  3   27[BANK0 ] int 
  1101 ;; Registers used:
  1102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1108 ;;      Params:         0       3       0       0       0       0       0
  1109 ;;      Locals:         0       2       0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0
  1111 ;;      Totals:         0       5       0       0       0       0       0
  1112 ;;Total ram usage:        5 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    6
  1115 ;; This function calls:
  1116 ;;		___awtoft
  1117 ;;		___ftadd
  1118 ;;		___ftmul
  1119 ;;		_eval_poly
  1120 ;;		_frexp
  1121 ;; This function is called by:
  1122 ;;		_Temp_Convert
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text3
  1127  001182                     __ptext3:
  1128                           	opt stack 0
  1129  001182                     _log:
  1130                           	opt stack 23
  1131                           
  1132                           ;incstack = 0
  1133  001182  0100               	movlb	0	; () banked
  1134  001184  AFE7               	btfss	(log@x+2)& (0+255),7,b
  1135  001186  D00F               	goto	l3104
  1136                           
  1137                           ; BSR set to: 0
  1138  001188  0E00               	movlw	0
  1139  00118A  0100               	movlb	0	; () banked
  1140  00118C  6FB5               	movwf	(_errno+1)& (0+255),b
  1141  00118E  0E21               	movlw	33
  1142  001190  6FB4               	movwf	_errno& (0+255),b
  1143  001192  0E00               	movlw	0
  1144  001194  0100               	movlb	0	; () banked
  1145  001196  6FE5               	movwf	?_log& (0+255),b
  1146  001198  0E00               	movlw	0
  1147  00119A  0100               	movlb	0	; () banked
  1148  00119C  6FE6               	movwf	(?_log+1)& (0+255),b
  1149  00119E  0E00               	movlw	0
  1150  0011A0  0100               	movlb	0	; () banked
  1151  0011A2  6FE7               	movwf	(?_log+2)& (0+255),b
  1152                           
  1153                           ; BSR set to: 0
  1154  0011A4  0012               	return	
  1155  0011A6                     l3104:
  1156                           
  1157                           ; BSR set to: 0
  1158  0011A6  0100               	movlb	0	; () banked
  1159  0011A8  51E5               	movf	log@x& (0+255),w,b
  1160  0011AA  0100               	movlb	0	; () banked
  1161  0011AC  11E6               	iorwf	(log@x+1)& (0+255),w,b
  1162  0011AE  0100               	movlb	0	; () banked
  1163  0011B0  11E7               	iorwf	(log@x+2)& (0+255),w,b
  1164  0011B2  A4D8               	btfss	status,2,c
  1165  0011B4  D00F               	goto	l3110
  1166                           
  1167                           ; BSR set to: 0
  1168  0011B6  0E00               	movlw	0
  1169  0011B8  0100               	movlb	0	; () banked
  1170  0011BA  6FB5               	movwf	(_errno+1)& (0+255),b
  1171  0011BC  0E22               	movlw	34
  1172  0011BE  6FB4               	movwf	_errno& (0+255),b
  1173  0011C0  0E00               	movlw	0
  1174  0011C2  0100               	movlb	0	; () banked
  1175  0011C4  6FE5               	movwf	?_log& (0+255),b
  1176  0011C6  0E00               	movlw	0
  1177  0011C8  0100               	movlb	0	; () banked
  1178  0011CA  6FE6               	movwf	(?_log+1)& (0+255),b
  1179  0011CC  0E00               	movlw	0
  1180  0011CE  0100               	movlb	0	; () banked
  1181  0011D0  6FE7               	movwf	(?_log+2)& (0+255),b
  1182                           
  1183                           ; BSR set to: 0
  1184  0011D2  0012               	return	
  1185  0011D4                     l3110:
  1186                           
  1187                           ; BSR set to: 0
  1188  0011D4  0E00               	movlw	0
  1189  0011D6  6E2C               	movwf	___ftmul@f2,c
  1190  0011D8  0E00               	movlw	0
  1191  0011DA  6E2D               	movwf	___ftmul@f2+1,c
  1192  0011DC  0E40               	movlw	64
  1193  0011DE  6E2E               	movwf	___ftmul@f2+2,c
  1194  0011E0  0EE8               	movlw	low log@exponent
  1195  0011E2  6E1A               	movwf	frexp@eptr,c
  1196  0011E4  0E00               	movlw	high log@exponent
  1197  0011E6  6E1B               	movwf	frexp@eptr+1,c
  1198  0011E8  C0E5  F017         	movff	log@x,frexp@value
  1199  0011EC  C0E6  F018         	movff	log@x+1,frexp@value+1
  1200  0011F0  C0E7  F019         	movff	log@x+2,frexp@value+2
  1201  0011F4  EC97  F00C         	call	_frexp	;wreg free
  1202  0011F8  C017  F029         	movff	?_frexp,___ftmul@f1
  1203  0011FC  C018  F02A         	movff	?_frexp+1,___ftmul@f1+1
  1204  001200  C019  F02B         	movff	?_frexp+2,___ftmul@f1+2
  1205  001204  EC62  F009         	call	___ftmul	;wreg free
  1206  001208  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1207  00120C  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1208  001210  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1209  001214  0E00               	movlw	0
  1210  001216  0100               	movlb	0	; () banked
  1211  001218  6FD3               	movwf	___ftadd@f2& (0+255),b
  1212  00121A  0E80               	movlw	128
  1213  00121C  0100               	movlb	0	; () banked
  1214  00121E  6FD4               	movwf	(___ftadd@f2+1)& (0+255),b
  1215  001220  0EBF               	movlw	191
  1216  001222  0100               	movlb	0	; () banked
  1217  001224  6FD5               	movwf	(___ftadd@f2+2)& (0+255),b
  1218  001226  EC25  F005         	call	___ftadd	;wreg free
  1219  00122A  C0D0  F0E5         	movff	?___ftadd,log@x
  1220  00122E  C0D1  F0E6         	movff	?___ftadd+1,log@x+1
  1221  001232  C0D2  F0E7         	movff	?___ftadd+2,log@x+2
  1222  001236  0100               	movlb	0	; () banked
  1223  001238  07E8               	decf	log@exponent& (0+255),f,b
  1224  00123A  A0D8               	btfss	status,0,c
  1225  00123C  07E9               	decf	(log@exponent+1)& (0+255),f,b
  1226                           
  1227                           ; BSR set to: 0
  1228  00123E  C0E5  F0D9         	movff	log@x,eval_poly@x
  1229  001242  C0E6  F0DA         	movff	log@x+1,eval_poly@x+1
  1230  001246  C0E7  F0DB         	movff	log@x+2,eval_poly@x+2
  1231  00124A  0E01               	movlw	low log@coeff
  1232  00124C  0100               	movlb	0	; () banked
  1233  00124E  6FDC               	movwf	eval_poly@d& (0+255),b
  1234  001250  0E06               	movlw	high log@coeff
  1235  001252  0100               	movlb	0	; () banked
  1236  001254  6FDD               	movwf	(eval_poly@d+1)& (0+255),b
  1237  001256  0E00               	movlw	0
  1238  001258  0100               	movlb	0	; () banked
  1239  00125A  6FDF               	movwf	(eval_poly@n+1)& (0+255),b
  1240  00125C  0E08               	movlw	8
  1241  00125E  6FDE               	movwf	eval_poly@n& (0+255),b
  1242  001260  EC6F  F00A         	call	_eval_poly	;wreg free
  1243  001264  C0D9  F0E5         	movff	?_eval_poly,log@x
  1244  001268  C0DA  F0E6         	movff	?_eval_poly+1,log@x+1
  1245  00126C  C0DB  F0E7         	movff	?_eval_poly+2,log@x+2
  1246  001270  0E72               	movlw	114
  1247  001272  6E2C               	movwf	___ftmul@f2,c
  1248  001274  0E31               	movlw	49
  1249  001276  6E2D               	movwf	___ftmul@f2+1,c
  1250  001278  0E3F               	movlw	63
  1251  00127A  6E2E               	movwf	___ftmul@f2+2,c
  1252  00127C  C0E8  F025         	movff	log@exponent,___awtoft@c
  1253  001280  C0E9  F026         	movff	log@exponent+1,___awtoft@c+1
  1254  001284  EC85  F00D         	call	___awtoft	;wreg free
  1255  001288  C025  F029         	movff	?___awtoft,___ftmul@f1
  1256  00128C  C026  F02A         	movff	?___awtoft+1,___ftmul@f1+1
  1257  001290  C027  F02B         	movff	?___awtoft+2,___ftmul@f1+2
  1258  001294  EC62  F009         	call	___ftmul	;wreg free
  1259  001298  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1260  00129C  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1261  0012A0  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1262  0012A4  C0E5  F0D3         	movff	log@x,___ftadd@f2
  1263  0012A8  C0E6  F0D4         	movff	log@x+1,___ftadd@f2+1
  1264  0012AC  C0E7  F0D5         	movff	log@x+2,___ftadd@f2+2
  1265  0012B0  EC25  F005         	call	___ftadd	;wreg free
  1266  0012B4  C0D0  F0E5         	movff	?___ftadd,?_log
  1267  0012B8  C0D1  F0E6         	movff	?___ftadd+1,?_log+1
  1268  0012BC  C0D2  F0E7         	movff	?___ftadd+2,?_log+2
  1269  0012C0  0012               	return	
  1270  0012C2  0012               	return		;funcret
  1271  0012C4                     __end_of_log:
  1272                           	opt stack 0
  1273                           tblptru	equ	0xFF8
  1274                           intcon	equ	0xFF2
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postinc2	equ	0xFDE
  1278                           postdec2	equ	0xFDD
  1279                           fsr2h	equ	0xFDA
  1280                           fsr2l	equ	0xFD9
  1281                           status	equ	0xFD8
  1282                           
  1283 ;; *************** function _frexp *****************
  1284 ;; Defined at:
  1285 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;  value           3   22[COMRAM] int 
  1288 ;;  eptr            2   25[COMRAM] PTR int 
  1289 ;;		 -> log@exponent(2), 
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;		None
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  3   22[COMRAM] PTR int 
  1294 ;; Registers used:
  1295 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1301 ;;      Params:         5       0       0       0       0       0       0
  1302 ;;      Locals:         0       0       0       0       0       0       0
  1303 ;;      Temps:          2       0       0       0       0       0       0
  1304 ;;      Totals:         7       0       0       0       0       0       0
  1305 ;;Total ram usage:        7 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; Hardware stack levels required when called:    3
  1308 ;; This function calls:
  1309 ;;		Nothing
  1310 ;; This function is called by:
  1311 ;;		_log
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text4
  1316  00192E                     __ptext4:
  1317                           	opt stack 0
  1318  00192E                     _frexp:
  1319                           	opt stack 25
  1320                           
  1321                           ;incstack = 0
  1322  00192E  5017               	movf	frexp@value,w,c
  1323  001930  1018               	iorwf	frexp@value+1,w,c
  1324  001932  1019               	iorwf	frexp@value+2,w,c
  1325  001934  A4D8               	btfss	status,2,c
  1326  001936  D00F               	goto	l2222
  1327  001938  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1328  00193C  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1329  001940  0E00               	movlw	0
  1330  001942  6EDE               	movwf	postinc2,c
  1331  001944  0E00               	movlw	0
  1332  001946  6EDD               	movwf	postdec2,c
  1333  001948  0E00               	movlw	0
  1334  00194A  6E17               	movwf	?_frexp,c
  1335  00194C  0E00               	movlw	0
  1336  00194E  6E18               	movwf	?_frexp+1,c
  1337  001950  0E00               	movlw	0
  1338  001952  6E19               	movwf	?_frexp+2,c
  1339  001954  0012               	return	
  1340  001956                     l2222:
  1341  001956  5019               	movf	frexp@value+2,w,c
  1342  001958  0B7F               	andlw	127
  1343  00195A  6E1C               	movwf	??_frexp& (0+255),c
  1344  00195C  6A1D               	clrf	(??_frexp+1)& (0+255),c
  1345  00195E  90D8               	bcf	status,0,c
  1346  001960  361C               	rlcf	??_frexp,f,c
  1347  001962  361D               	rlcf	??_frexp+1,f,c
  1348  001964  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1349  001968  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1350  00196C  C01C  FFDE         	movff	??_frexp,postinc2
  1351  001970  C01D  FFDD         	movff	??_frexp+1,postdec2
  1352  001974  AE18               	btfss	frexp@value+1,7,c
  1353  001976  D003               	goto	u1490
  1354  001978  6A1C               	clrf	??_frexp& (0+255),c
  1355  00197A  2A1C               	incf	??_frexp& (0+255),f,c
  1356  00197C  D001               	goto	u1498
  1357  00197E                     u1490:
  1358  00197E  6A1C               	clrf	??_frexp& (0+255),c
  1359  001980                     u1498:
  1360  001980  501C               	movf	??_frexp,w,c
  1361  001982  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1362  001986  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1363  00198A  12DE               	iorwf	postinc2,f,c
  1364  00198C  0E00               	movlw	0
  1365  00198E  12DD               	iorwf	postdec2,f,c
  1366  001990  C01A  FFD9         	movff	frexp@eptr,fsr2l
  1367  001994  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  1368  001998  0E82               	movlw	130
  1369  00199A  26DE               	addwf	postinc2,f,c
  1370  00199C  0EFF               	movlw	255
  1371  00199E  22DD               	addwfc	postdec2,f,c
  1372  0019A0  8019               	bsf	frexp@value+2,0,c
  1373  0019A2  8219               	bsf	frexp@value+2,1,c
  1374  0019A4  8419               	bsf	frexp@value+2,2,c
  1375  0019A6  8619               	bsf	frexp@value+2,3,c
  1376  0019A8  8819               	bsf	frexp@value+2,4,c
  1377  0019AA  8A19               	bsf	frexp@value+2,5,c
  1378  0019AC  9C19               	bcf	frexp@value+2,6,c
  1379  0019AE  9E18               	bcf	frexp@value+1,7,c
  1380  0019B0  C017  F017         	movff	frexp@value,?_frexp
  1381  0019B4  C018  F018         	movff	frexp@value+1,?_frexp+1
  1382  0019B8  C019  F019         	movff	frexp@value+2,?_frexp+2
  1383  0019BC  0012               	return	
  1384  0019BE  0012               	return		;funcret
  1385  0019C0                     __end_of_frexp:
  1386                           	opt stack 0
  1387                           tblptru	equ	0xFF8
  1388                           intcon	equ	0xFF2
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postinc2	equ	0xFDE
  1392                           postdec2	equ	0xFDD
  1393                           fsr2h	equ	0xFDA
  1394                           fsr2l	equ	0xFD9
  1395                           status	equ	0xFD8
  1396                           
  1397 ;; *************** function _eval_poly *****************
  1398 ;; Defined at:
  1399 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  x               3   15[BANK0 ] PTR int 
  1402 ;;  d               2   18[BANK0 ] PTR const 
  1403 ;;		 -> log@coeff(27), 
  1404 ;;  n               2   20[BANK0 ] int 
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  res             3   24[BANK0 ] int 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  3   15[BANK0 ] int 
  1409 ;; Registers used:
  1410 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1416 ;;      Params:         0       7       0       0       0       0       0
  1417 ;;      Locals:         0       3       0       0       0       0       0
  1418 ;;      Temps:          0       2       0       0       0       0       0
  1419 ;;      Totals:         0      12       0       0       0       0       0
  1420 ;;Total ram usage:       12 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    5
  1423 ;; This function calls:
  1424 ;;		___ftadd
  1425 ;;		___ftmul
  1426 ;;		___wmul
  1427 ;; This function is called by:
  1428 ;;		_log
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text5
  1433  0014DE                     __ptext5:
  1434                           	opt stack 0
  1435  0014DE                     _eval_poly:
  1436                           	opt stack 23
  1437                           
  1438                           ;incstack = 0
  1439  0014DE  C0DE  F01F         	movff	eval_poly@n,___wmul@multiplier
  1440  0014E2  C0DF  F020         	movff	eval_poly@n+1,___wmul@multiplier+1
  1441  0014E6  0E00               	movlw	0
  1442  0014E8  6E22               	movwf	___wmul@multiplicand+1,c
  1443  0014EA  0E03               	movlw	3
  1444  0014EC  6E21               	movwf	___wmul@multiplicand,c
  1445  0014EE  EC24  F00E         	call	___wmul	;wreg free
  1446  0014F2  C0DC  F0E0         	movff	eval_poly@d,??_eval_poly
  1447  0014F6  C0DD  F0E1         	movff	eval_poly@d+1,??_eval_poly+1
  1448  0014FA  501F               	movf	?___wmul,w,c
  1449  0014FC  0100               	movlb	0	; () banked
  1450  0014FE  27E0               	addwf	??_eval_poly& (0+255),f,b
  1451  001500  5020               	movf	?___wmul+1,w,c
  1452  001502  0100               	movlb	0	; () banked
  1453  001504  23E1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1454  001506  C0E0  FFF6         	movff	??_eval_poly,tblptrl
  1455  00150A  C0E1  FFF7         	movff	??_eval_poly+1,tblptrh
  1456  00150E                     	if	0	;tblptru may be non-zero
  1457  00150E                     	endif
  1458  00150E                     	if	0	;tblptru may be non-zero
  1459  00150E                     	endif
  1460  00150E  0009               	tblrd		*+
  1461  001510  CFF5 F0E2          	movff	tablat,eval_poly@res
  1462  001514  0009               	tblrd		*+
  1463  001516  CFF5 F0E3          	movff	tablat,eval_poly@res+1
  1464  00151A  000A               	tblrd		*-
  1465  00151C  CFF5 F0E4          	movff	tablat,eval_poly@res+2
  1466  001520  D042               	goto	l3048
  1467  001522                     l3046:
  1468                           
  1469                           ; BSR set to: 0
  1470  001522  C0E2  F02C         	movff	eval_poly@res,___ftmul@f2
  1471  001526  C0E3  F02D         	movff	eval_poly@res+1,___ftmul@f2+1
  1472  00152A  C0E4  F02E         	movff	eval_poly@res+2,___ftmul@f2+2
  1473  00152E  C0D9  F029         	movff	eval_poly@x,___ftmul@f1
  1474  001532  C0DA  F02A         	movff	eval_poly@x+1,___ftmul@f1+1
  1475  001536  C0DB  F02B         	movff	eval_poly@x+2,___ftmul@f1+2
  1476  00153A  EC62  F009         	call	___ftmul	;wreg free
  1477  00153E  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1478  001542  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1479  001546  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1480  00154A  0E00               	movlw	0
  1481  00154C  6E22               	movwf	___wmul@multiplicand+1,c
  1482  00154E  0E03               	movlw	3
  1483  001550  6E21               	movwf	___wmul@multiplicand,c
  1484  001552  0100               	movlb	0	; () banked
  1485  001554  07DE               	decf	eval_poly@n& (0+255),f,b
  1486  001556  A0D8               	btfss	status,0,c
  1487  001558  07DF               	decf	(eval_poly@n+1)& (0+255),f,b
  1488  00155A  C0DE  F01F         	movff	eval_poly@n,___wmul@multiplier
  1489  00155E  C0DF  F020         	movff	eval_poly@n+1,___wmul@multiplier+1
  1490  001562  EC24  F00E         	call	___wmul	;wreg free
  1491  001566  C0DC  F0E0         	movff	eval_poly@d,??_eval_poly
  1492  00156A  C0DD  F0E1         	movff	eval_poly@d+1,??_eval_poly+1
  1493  00156E  501F               	movf	?___wmul,w,c
  1494  001570  0100               	movlb	0	; () banked
  1495  001572  27E0               	addwf	??_eval_poly& (0+255),f,b
  1496  001574  5020               	movf	?___wmul+1,w,c
  1497  001576  0100               	movlb	0	; () banked
  1498  001578  23E1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1499  00157A  C0E0  FFF6         	movff	??_eval_poly,tblptrl
  1500  00157E  C0E1  FFF7         	movff	??_eval_poly+1,tblptrh
  1501  001582                     	if	0	;tblptru may be non-zero
  1502  001582                     	endif
  1503  001582                     	if	0	;tblptru may be non-zero
  1504  001582                     	endif
  1505  001582  0009               	tblrd		*+
  1506  001584  CFF5 F0D3          	movff	tablat,___ftadd@f2
  1507  001588  0009               	tblrd		*+
  1508  00158A  CFF5 F0D4          	movff	tablat,___ftadd@f2+1
  1509  00158E  000A               	tblrd		*-
  1510  001590  CFF5 F0D5          	movff	tablat,___ftadd@f2+2
  1511  001594  EC25  F005         	call	___ftadd	;wreg free
  1512  001598  C0D0  F0E2         	movff	?___ftadd,eval_poly@res
  1513  00159C  C0D1  F0E3         	movff	?___ftadd+1,eval_poly@res+1
  1514  0015A0  C0D2  F0E4         	movff	?___ftadd+2,eval_poly@res+2
  1515  0015A4  D000               	goto	l3048
  1516  0015A6                     l3048:
  1517  0015A6  0100               	movlb	0	; () banked
  1518  0015A8  51DE               	movf	eval_poly@n& (0+255),w,b
  1519  0015AA  0100               	movlb	0	; () banked
  1520  0015AC  11DF               	iorwf	(eval_poly@n+1)& (0+255),w,b
  1521  0015AE  A4D8               	btfss	status,2,c
  1522  0015B0  D7B8               	goto	l3046
  1523                           
  1524                           ; BSR set to: 0
  1525  0015B2  C0E2  F0D9         	movff	eval_poly@res,?_eval_poly
  1526  0015B6  C0E3  F0DA         	movff	eval_poly@res+1,?_eval_poly+1
  1527  0015BA  C0E4  F0DB         	movff	eval_poly@res+2,?_eval_poly+2
  1528                           
  1529                           ; BSR set to: 0
  1530  0015BE  0012               	return		;funcret
  1531  0015C0                     __end_of_eval_poly:
  1532                           	opt stack 0
  1533                           tblptru	equ	0xFF8
  1534                           tblptrh	equ	0xFF7
  1535                           tblptrl	equ	0xFF6
  1536                           tablat	equ	0xFF5
  1537                           intcon	equ	0xFF2
  1538                           postinc0	equ	0xFEE
  1539                           wreg	equ	0xFE8
  1540                           postinc2	equ	0xFDE
  1541                           postdec2	equ	0xFDD
  1542                           fsr2h	equ	0xFDA
  1543                           fsr2l	equ	0xFD9
  1544                           status	equ	0xFD8
  1545                           
  1546 ;; *************** function ___ftsub *****************
  1547 ;; Defined at:
  1548 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  f1              3   15[BANK0 ] float 
  1551 ;;  f2              3   18[BANK0 ] float 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;		None
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  3   15[BANK0 ] float 
  1556 ;; Registers used:
  1557 ;;		wreg, status,2, status,0, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1563 ;;      Params:         0       6       0       0       0       0       0
  1564 ;;      Locals:         0       0       0       0       0       0       0
  1565 ;;      Temps:          0       0       0       0       0       0       0
  1566 ;;      Totals:         0       6       0       0       0       0       0
  1567 ;;Total ram usage:        6 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    5
  1570 ;; This function calls:
  1571 ;;		___ftadd
  1572 ;; This function is called by:
  1573 ;;		_Temp_Convert
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           	psect	text6
  1578  001A30                     __ptext6:
  1579                           	opt stack 0
  1580  001A30                     ___ftsub:
  1581                           	opt stack 24
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;incstack = 0
  1585  001A30  0100               	movlb	0	; () banked
  1586  001A32  51DC               	movf	___ftsub@f2& (0+255),w,b
  1587  001A34  0100               	movlb	0	; () banked
  1588  001A36  11DD               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  1589  001A38  0100               	movlb	0	; () banked
  1590  001A3A  11DE               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  1591  001A3C  B4D8               	btfsc	status,2,c
  1592  001A3E  D00A               	goto	l3170
  1593                           
  1594                           ; BSR set to: 0
  1595  001A40  0E00               	movlw	0
  1596  001A42  0100               	movlb	0	; () banked
  1597  001A44  1BDC               	xorwf	___ftsub@f2& (0+255),f,b
  1598  001A46  0E00               	movlw	0
  1599  001A48  0100               	movlb	0	; () banked
  1600  001A4A  1BDD               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  1601  001A4C  0E80               	movlw	128
  1602  001A4E  0100               	movlb	0	; () banked
  1603  001A50  1BDE               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  1604  001A52  D000               	goto	l3170
  1605  001A54                     l3170:
  1606                           
  1607                           ; BSR set to: 0
  1608  001A54  C0D9  F0D0         	movff	___ftsub@f1,___ftadd@f1
  1609  001A58  C0DA  F0D1         	movff	___ftsub@f1+1,___ftadd@f1+1
  1610  001A5C  C0DB  F0D2         	movff	___ftsub@f1+2,___ftadd@f1+2
  1611  001A60  C0DC  F0D3         	movff	___ftsub@f2,___ftadd@f2
  1612  001A64  C0DD  F0D4         	movff	___ftsub@f2+1,___ftadd@f2+1
  1613  001A68  C0DE  F0D5         	movff	___ftsub@f2+2,___ftadd@f2+2
  1614  001A6C  EC25  F005         	call	___ftadd	;wreg free
  1615  001A70  C0D0  F0D9         	movff	?___ftadd,?___ftsub
  1616  001A74  C0D1  F0DA         	movff	?___ftadd+1,?___ftsub+1
  1617  001A78  C0D2  F0DB         	movff	?___ftadd+2,?___ftsub+2
  1618  001A7C  0012               	return	
  1619  001A7E  0012               	return		;funcret
  1620  001A80                     __end_of___ftsub:
  1621                           	opt stack 0
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           intcon	equ	0xFF2
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postinc2	equ	0xFDE
  1630                           postdec2	equ	0xFDD
  1631                           fsr2h	equ	0xFDA
  1632                           fsr2l	equ	0xFD9
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function ___ftdiv *****************
  1636 ;; Defined at:
  1637 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  f1              3   30[COMRAM] float 
  1640 ;;  f2              3   33[COMRAM] float 
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;  f3              3   40[COMRAM] float 
  1643 ;;  sign            1   44[COMRAM] unsigned char 
  1644 ;;  exp             1   43[COMRAM] unsigned char 
  1645 ;;  cntr            1   39[COMRAM] unsigned char 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  3   30[COMRAM] float 
  1648 ;; Registers used:
  1649 ;;		wreg, status,2, status,0, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1655 ;;      Params:         6       0       0       0       0       0       0
  1656 ;;      Locals:         6       0       0       0       0       0       0
  1657 ;;      Temps:          3       0       0       0       0       0       0
  1658 ;;      Totals:        15       0       0       0       0       0       0
  1659 ;;Total ram usage:       15 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    4
  1662 ;; This function calls:
  1663 ;;		___ftpack
  1664 ;; This function is called by:
  1665 ;;		_Temp_Convert
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text7
  1670  0013F2                     __ptext7:
  1671                           	opt stack 0
  1672  0013F2                     ___ftdiv:
  1673                           	opt stack 25
  1674                           
  1675                           ;incstack = 0
  1676  0013F2  C021  F025         	movff	___ftdiv@f1+2,??___ftdiv
  1677  0013F6  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  1678  0013F8  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  1679  0013FA  3420               	rlcf	___ftdiv@f1+1,w,c
  1680  0013FC  3625               	rlcf	??___ftdiv& (0+255),f,c
  1681  0013FE  E301               	bnc	u2631
  1682  001400  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  1683  001402                     u2631:
  1684  001402  5025               	movf	??___ftdiv,w,c
  1685  001404  6E2C               	movwf	___ftdiv@exp,c
  1686  001406  502C               	movf	___ftdiv@exp,w,c
  1687  001408  A4D8               	btfss	status,2,c
  1688  00140A  D007               	goto	l3126
  1689  00140C  0E00               	movlw	0
  1690  00140E  6E1F               	movwf	?___ftdiv,c
  1691  001410  0E00               	movlw	0
  1692  001412  6E20               	movwf	?___ftdiv+1,c
  1693  001414  0E00               	movlw	0
  1694  001416  6E21               	movwf	?___ftdiv+2,c
  1695  001418  0012               	return	
  1696  00141A                     l3126:
  1697  00141A  C024  F025         	movff	___ftdiv@f2+2,??___ftdiv
  1698  00141E  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  1699  001420  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  1700  001422  3423               	rlcf	___ftdiv@f2+1,w,c
  1701  001424  3625               	rlcf	??___ftdiv& (0+255),f,c
  1702  001426  E301               	bnc	u2651
  1703  001428  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  1704  00142A                     u2651:
  1705  00142A  5025               	movf	??___ftdiv,w,c
  1706  00142C  6E2D               	movwf	___ftdiv@sign,c
  1707  00142E  502D               	movf	___ftdiv@sign,w,c
  1708  001430  A4D8               	btfss	status,2,c
  1709  001432  D007               	goto	l3132
  1710  001434  0E00               	movlw	0
  1711  001436  6E1F               	movwf	?___ftdiv,c
  1712  001438  0E00               	movlw	0
  1713  00143A  6E20               	movwf	?___ftdiv+1,c
  1714  00143C  0E00               	movlw	0
  1715  00143E  6E21               	movwf	?___ftdiv+2,c
  1716  001440  0012               	return	
  1717  001442                     l3132:
  1718  001442  0E00               	movlw	0
  1719  001444  6E29               	movwf	___ftdiv@f3,c
  1720  001446  0E00               	movlw	0
  1721  001448  6E2A               	movwf	___ftdiv@f3+1,c
  1722  00144A  0E00               	movlw	0
  1723  00144C  6E2B               	movwf	___ftdiv@f3+2,c
  1724  00144E  502D               	movf	___ftdiv@sign,w,c
  1725  001450  0F89               	addlw	137
  1726  001452  5E2C               	subwf	___ftdiv@exp,f,c
  1727  001454  C021  F02D         	movff	___ftdiv@f1+2,___ftdiv@sign
  1728  001458  5024               	movf	___ftdiv@f2+2,w,c
  1729  00145A  1A2D               	xorwf	___ftdiv@sign,f,c
  1730  00145C  0E80               	movlw	128
  1731  00145E  162D               	andwf	___ftdiv@sign,f,c
  1732  001460  8E20               	bsf	___ftdiv@f1+1,7,c
  1733  001462  0EFF               	movlw	255
  1734  001464  161F               	andwf	___ftdiv@f1,f,c
  1735  001466  0EFF               	movlw	255
  1736  001468  1620               	andwf	___ftdiv@f1+1,f,c
  1737  00146A  0E00               	movlw	0
  1738  00146C  1621               	andwf	___ftdiv@f1+2,f,c
  1739  00146E  8E23               	bsf	___ftdiv@f2+1,7,c
  1740  001470  0EFF               	movlw	255
  1741  001472  1622               	andwf	___ftdiv@f2,f,c
  1742  001474  0EFF               	movlw	255
  1743  001476  1623               	andwf	___ftdiv@f2+1,f,c
  1744  001478  0E00               	movlw	0
  1745  00147A  1624               	andwf	___ftdiv@f2+2,f,c
  1746  00147C  0E18               	movlw	24
  1747  00147E  6E28               	movwf	___ftdiv@cntr,c
  1748  001480  D000               	goto	l3152
  1749  001482                     l3152:
  1750  001482  90D8               	bcf	status,0,c
  1751  001484  3629               	rlcf	___ftdiv@f3,f,c
  1752  001486  362A               	rlcf	___ftdiv@f3+1,f,c
  1753  001488  362B               	rlcf	___ftdiv@f3+2,f,c
  1754  00148A  5022               	movf	___ftdiv@f2,w,c
  1755  00148C  5C1F               	subwf	___ftdiv@f1,w,c
  1756  00148E  5023               	movf	___ftdiv@f2+1,w,c
  1757  001490  5820               	subwfb	___ftdiv@f1+1,w,c
  1758  001492  5024               	movf	___ftdiv@f2+2,w,c
  1759  001494  5821               	subwfb	___ftdiv@f1+2,w,c
  1760  001496  A0D8               	btfss	status,0,c
  1761  001498  D007               	goto	l852
  1762  00149A  5022               	movf	___ftdiv@f2,w,c
  1763  00149C  5E1F               	subwf	___ftdiv@f1,f,c
  1764  00149E  5023               	movf	___ftdiv@f2+1,w,c
  1765  0014A0  5A20               	subwfb	___ftdiv@f1+1,f,c
  1766  0014A2  5024               	movf	___ftdiv@f2+2,w,c
  1767  0014A4  5A21               	subwfb	___ftdiv@f1+2,f,c
  1768  0014A6  8029               	bsf	___ftdiv@f3,0,c
  1769  0014A8                     l852:
  1770  0014A8  90D8               	bcf	status,0,c
  1771  0014AA  361F               	rlcf	___ftdiv@f1,f,c
  1772  0014AC  3620               	rlcf	___ftdiv@f1+1,f,c
  1773  0014AE  3621               	rlcf	___ftdiv@f1+2,f,c
  1774  0014B0  2E28               	decfsz	___ftdiv@cntr,f,c
  1775  0014B2  D7E7               	goto	l3152
  1776  0014B4  D000               	goto	l3162
  1777  0014B6                     l3162:
  1778  0014B6  C029  F017         	movff	___ftdiv@f3,___ftpack@arg
  1779  0014BA  C02A  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
  1780  0014BE  C02B  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
  1781  0014C2  C02C  F01A         	movff	___ftdiv@exp,___ftpack@exp
  1782  0014C6  C02D  F01B         	movff	___ftdiv@sign,___ftpack@sign
  1783  0014CA  EC46  F00B         	call	___ftpack	;wreg free
  1784  0014CE  C017  F01F         	movff	?___ftpack,?___ftdiv
  1785  0014D2  C018  F020         	movff	?___ftpack+1,?___ftdiv+1
  1786  0014D6  C019  F021         	movff	?___ftpack+2,?___ftdiv+2
  1787  0014DA  0012               	return	
  1788  0014DC  0012               	return		;funcret
  1789  0014DE                     __end_of___ftdiv:
  1790                           	opt stack 0
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           intcon	equ	0xFF2
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           postinc2	equ	0xFDE
  1799                           postdec2	equ	0xFDD
  1800                           fsr2h	equ	0xFDA
  1801                           fsr2l	equ	0xFD9
  1802                           status	equ	0xFD8
  1803                           
  1804 ;; *************** function _Temp_Filter *****************
  1805 ;; Defined at:
  1806 ;;		line 36 in file "Tempeture.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  x               2   15[BANK0 ] int 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;		None               void
  1813 ;; Registers used:
  1814 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1820 ;;      Params:         0       0       0       0       0       0       0
  1821 ;;      Locals:         0       2       0       0       0       0       0
  1822 ;;      Temps:          0       0       0       0       0       0       0
  1823 ;;      Totals:         0       2       0       0       0       0       0
  1824 ;;Total ram usage:        2 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; Hardware stack levels required when called:    5
  1827 ;; This function calls:
  1828 ;;		___ftadd
  1829 ;;		___ftmul
  1830 ;;		___wmul
  1831 ;; This function is called by:
  1832 ;;		_Temp_Convert
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           	psect	text8
  1837  000EAE                     __ptext8:
  1838                           	opt stack 0
  1839  000EAE                     _Temp_Filter:
  1840                           	opt stack 24
  1841                           
  1842                           ;Tempeture.c: 39: int x;
  1843                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  1844                           
  1845                           ;incstack = 0
  1846  000EAE  0E00               	movlw	0
  1847  000EB0  0100               	movlb	0	; () banked
  1848  000EB2  6FDA               	movwf	(Temp_Filter@x+1)& (0+255),b
  1849  000EB4  0E00               	movlw	0
  1850  000EB6  6FD9               	movwf	Temp_Filter@x& (0+255),b
  1851  000EB8                     l3076:
  1852                           
  1853                           ; BSR set to: 0
  1854  000EB8  0100               	movlb	0	; () banked
  1855  000EBA  BFDA               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  1856  000EBC  D00A               	goto	l3080
  1857  000EBE  0100               	movlb	0	; () banked
  1858  000EC0  51DA               	movf	(Temp_Filter@x+1)& (0+255),w,b
  1859  000EC2  E16C               	bnz	l3086
  1860  000EC4  0E0A               	movlw	10
  1861  000EC6  0100               	movlb	0	; () banked
  1862  000EC8  5DD9               	subwf	Temp_Filter@x& (0+255),w,b
  1863  000ECA  B0D8               	btfsc	status,0,c
  1864  000ECC  D067               	goto	l3086
  1865  000ECE  D001               	goto	l3080
  1866                           
  1867                           ; BSR set to: 0
  1868  000ED0  D065               	goto	l3086
  1869  000ED2                     l3080:
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;Tempeture.c: 41: {
  1873                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  1874  000ED2  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1875  000ED6  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1876  000EDA  0E00               	movlw	0
  1877  000EDC  6E22               	movwf	___wmul@multiplicand+1,c
  1878  000EDE  0E03               	movlw	3
  1879  000EE0  6E21               	movwf	___wmul@multiplicand,c
  1880  000EE2  EC24  F00E         	call	___wmul	;wreg free
  1881  000EE6  0E7E               	movlw	low _Temp_DegF
  1882  000EE8  241F               	addwf	?___wmul,w,c
  1883  000EEA  6ED9               	movwf	fsr2l,c
  1884  000EEC  0E00               	movlw	high _Temp_DegF
  1885  000EEE  2020               	addwfc	?___wmul+1,w,c
  1886  000EF0  6EDA               	movwf	fsr2h,c
  1887  000EF2  0E48               	movlw	72
  1888  000EF4  6E2C               	movwf	___ftmul@f2,c
  1889  000EF6  0E61               	movlw	97
  1890  000EF8  6E2D               	movwf	___ftmul@f2+1,c
  1891  000EFA  0E3F               	movlw	63
  1892  000EFC  6E2E               	movwf	___ftmul@f2+2,c
  1893  000EFE  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1894  000F02  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1895  000F06  0E00               	movlw	0
  1896  000F08  6E22               	movwf	___wmul@multiplicand+1,c
  1897  000F0A  0E03               	movlw	3
  1898  000F0C  6E21               	movwf	___wmul@multiplicand,c
  1899  000F0E  EC24  F00E         	call	___wmul	;wreg free
  1900  000F12  0E8C               	movlw	low _TmpTemp_DegF
  1901  000F14  241F               	addwf	?___wmul,w,c
  1902  000F16  6EE1               	movwf	fsr1l,c
  1903  000F18  0E01               	movlw	high _TmpTemp_DegF
  1904  000F1A  2020               	addwfc	?___wmul+1,w,c
  1905  000F1C  6EE2               	movwf	fsr1h,c
  1906  000F1E  CFE6 F029          	movff	postinc1,___ftmul@f1
  1907  000F22  CFE6 F02A          	movff	postinc1,___ftmul@f1+1
  1908  000F26  CFE5 F02B          	movff	postdec1,___ftmul@f1+2
  1909  000F2A  EC62  F009         	call	___ftmul	;wreg free
  1910  000F2E  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  1911  000F32  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  1912  000F36  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  1913  000F3A  0EC3               	movlw	195
  1914  000F3C  6E2C               	movwf	___ftmul@f2,c
  1915  000F3E  0EF5               	movlw	245
  1916  000F40  6E2D               	movwf	___ftmul@f2+1,c
  1917  000F42  0E3D               	movlw	61
  1918  000F44  6E2E               	movwf	___ftmul@f2+2,c
  1919  000F46  0E00               	movlw	0
  1920  000F48  6E22               	movwf	___wmul@multiplicand+1,c
  1921  000F4A  0E03               	movlw	3
  1922  000F4C  6E21               	movwf	___wmul@multiplicand,c
  1923  000F4E  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1924  000F52  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1925  000F56  EC24  F00E         	call	___wmul	;wreg free
  1926  000F5A  0E50               	movlw	low _PrevTemp_DegF
  1927  000F5C  241F               	addwf	?___wmul,w,c
  1928  000F5E  6EE1               	movwf	fsr1l,c
  1929  000F60  0E01               	movlw	high _PrevTemp_DegF
  1930  000F62  2020               	addwfc	?___wmul+1,w,c
  1931  000F64  6EE2               	movwf	fsr1h,c
  1932  000F66  CFE6 F029          	movff	postinc1,___ftmul@f1
  1933  000F6A  CFE6 F02A          	movff	postinc1,___ftmul@f1+1
  1934  000F6E  CFE5 F02B          	movff	postdec1,___ftmul@f1+2
  1935  000F72  EC62  F009         	call	___ftmul	;wreg free
  1936  000F76  C029  F0D3         	movff	?___ftmul,___ftadd@f2
  1937  000F7A  C02A  F0D4         	movff	?___ftmul+1,___ftadd@f2+1
  1938  000F7E  C02B  F0D5         	movff	?___ftmul+2,___ftadd@f2+2
  1939  000F82  EC25  F005         	call	___ftadd	;wreg free
  1940  000F86  C0D0  FFDE         	movff	?___ftadd,postinc2
  1941  000F8A  C0D1  FFDE         	movff	?___ftadd+1,postinc2
  1942  000F8E  C0D2  FFDE         	movff	?___ftadd+2,postinc2
  1943  000F92  0100               	movlb	0	; () banked
  1944  000F94  4BD9               	infsnz	Temp_Filter@x& (0+255),f,b
  1945  000F96  2BDA               	incf	(Temp_Filter@x+1)& (0+255),f,b
  1946  000F98  D78F               	goto	l3076
  1947                           
  1948                           ; BSR set to: 0
  1949  000F9A  D000               	goto	l3086
  1950  000F9C                     l3086:
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;Tempeture.c: 43: }
  1954                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  1955  000F9C  0E00               	movlw	0
  1956  000F9E  0100               	movlb	0	; () banked
  1957  000FA0  6FDA               	movwf	(Temp_Filter@x+1)& (0+255),b
  1958  000FA2  0E00               	movlw	0
  1959  000FA4  6FD9               	movwf	Temp_Filter@x& (0+255),b
  1960  000FA6                     l3088:
  1961                           
  1962                           ; BSR set to: 0
  1963  000FA6  0100               	movlb	0	; () banked
  1964  000FA8  BFDA               	btfsc	(Temp_Filter@x+1)& (0+255),7,b
  1965  000FAA  D00A               	goto	l3092
  1966  000FAC  0100               	movlb	0	; () banked
  1967  000FAE  51DA               	movf	(Temp_Filter@x+1)& (0+255),w,b
  1968  000FB0  E132               	bnz	l394
  1969  000FB2  0E0A               	movlw	10
  1970  000FB4  0100               	movlb	0	; () banked
  1971  000FB6  5DD9               	subwf	Temp_Filter@x& (0+255),w,b
  1972  000FB8  B0D8               	btfsc	status,0,c
  1973  000FBA  0012               	return	
  1974  000FBC  D001               	goto	l3092
  1975                           
  1976                           ; BSR set to: 0
  1977  000FBE  0012               	return	
  1978  000FC0                     l3092:
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;Tempeture.c: 45: {
  1982                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  1983  000FC0  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1984  000FC4  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1985  000FC8  0E00               	movlw	0
  1986  000FCA  6E22               	movwf	___wmul@multiplicand+1,c
  1987  000FCC  0E03               	movlw	3
  1988  000FCE  6E21               	movwf	___wmul@multiplicand,c
  1989  000FD0  EC24  F00E         	call	___wmul	;wreg free
  1990  000FD4  0E7E               	movlw	low _Temp_DegF
  1991  000FD6  241F               	addwf	?___wmul,w,c
  1992  000FD8  6ED9               	movwf	fsr2l,c
  1993  000FDA  0E00               	movlw	high _Temp_DegF
  1994  000FDC  2020               	addwfc	?___wmul+1,w,c
  1995  000FDE  6EDA               	movwf	fsr2h,c
  1996  000FE0  C0D9  F01F         	movff	Temp_Filter@x,___wmul@multiplier
  1997  000FE4  C0DA  F020         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  1998  000FE8  0E00               	movlw	0
  1999  000FEA  6E22               	movwf	___wmul@multiplicand+1,c
  2000  000FEC  0E03               	movlw	3
  2001  000FEE  6E21               	movwf	___wmul@multiplicand,c
  2002  000FF0  EC24  F00E         	call	___wmul	;wreg free
  2003  000FF4  0E50               	movlw	low _PrevTemp_DegF
  2004  000FF6  241F               	addwf	?___wmul,w,c
  2005  000FF8  6EE1               	movwf	fsr1l,c
  2006  000FFA  0E01               	movlw	high _PrevTemp_DegF
  2007  000FFC  2020               	addwfc	?___wmul+1,w,c
  2008  000FFE  6EE2               	movwf	fsr1h,c
  2009  001000  CFDE FFE6          	movff	postinc2,postinc1
  2010  001004  CFDE FFE6          	movff	postinc2,postinc1
  2011  001008  CFDE FFE6          	movff	postinc2,postinc1
  2012  00100C  0100               	movlb	0	; () banked
  2013  00100E  4BD9               	infsnz	Temp_Filter@x& (0+255),f,b
  2014  001010  2BDA               	incf	(Temp_Filter@x+1)& (0+255),f,b
  2015  001012  D7C9               	goto	l3088
  2016                           
  2017                           ; BSR set to: 0
  2018  001014  0012               	return	
  2019  001016                     l394:
  2020                           
  2021                           ; BSR set to: 0
  2022  001016  0012               	return		;funcret
  2023  001018                     __end_of_Temp_Filter:
  2024                           	opt stack 0
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           intcon	equ	0xFF2
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postinc1	equ	0xFE6
  2033                           postdec1	equ	0xFE5
  2034                           fsr1h	equ	0xFE2
  2035                           fsr1l	equ	0xFE1
  2036                           postinc2	equ	0xFDE
  2037                           postdec2	equ	0xFDD
  2038                           fsr2h	equ	0xFDA
  2039                           fsr2l	equ	0xFD9
  2040                           status	equ	0xFD8
  2041                           
  2042 ;; *************** function _SYSTEM_Initialize *****************
  2043 ;; Defined at:
  2044 ;;		line 112 in file "mcc_generated_files/mcc.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;		None
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;		None
  2049 ;; Return value:  Size  Location     Type
  2050 ;;		None               void
  2051 ;; Registers used:
  2052 ;;		wreg, status,2, cstack
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2058 ;;      Params:         0       0       0       0       0       0       0
  2059 ;;      Locals:         0       0       0       0       0       0       0
  2060 ;;      Temps:          0       0       0       0       0       0       0
  2061 ;;      Totals:         0       0       0       0       0       0       0
  2062 ;;Total ram usage:        0 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:    5
  2065 ;; This function calls:
  2066 ;;		_ADC_Initialize
  2067 ;;		_EUSART1_Initialize
  2068 ;;		_INTERRUPT_Initialize
  2069 ;;		_OSCILLATOR_Initialize
  2070 ;;		_PIN_MANAGER_Initialize
  2071 ;;		_TMR1_Initialize
  2072 ;; This function is called by:
  2073 ;;		_main
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text9
  2078  001C92                     __ptext9:
  2079                           	opt stack 0
  2080  001C92                     _SYSTEM_Initialize:
  2081                           	opt stack 25
  2082                           
  2083                           ;mcc.c: 114: OSCILLATOR_Initialize();
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;incstack = 0
  2087  001C92  EC82  F00E         	call	_OSCILLATOR_Initialize	;wreg free
  2088                           
  2089                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  2090  001C96  EC40  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  2091                           
  2092                           ;mcc.c: 116: INTERRUPT_Initialize();
  2093  001C9A  EC89  F00E         	call	_INTERRUPT_Initialize	;wreg free
  2094                           
  2095                           ;mcc.c: 117: ADC_Initialize();
  2096  001C9E  EC63  F00E         	call	_ADC_Initialize	;wreg free
  2097                           
  2098                           ;mcc.c: 118: EUSART1_Initialize();
  2099  001CA2  EC67  F00D         	call	_EUSART1_Initialize	;wreg free
  2100                           
  2101                           ;mcc.c: 119: TMR1_Initialize();
  2102  001CA6  EC38  F00E         	call	_TMR1_Initialize	;wreg free
  2103  001CAA  0012               	return		;funcret
  2104  001CAC                     __end_of_SYSTEM_Initialize:
  2105                           	opt stack 0
  2106                           tblptru	equ	0xFF8
  2107                           tblptrh	equ	0xFF7
  2108                           tblptrl	equ	0xFF6
  2109                           tablat	equ	0xFF5
  2110                           intcon	equ	0xFF2
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           postinc1	equ	0xFE6
  2114                           postdec1	equ	0xFE5
  2115                           fsr1h	equ	0xFE2
  2116                           fsr1l	equ	0xFE1
  2117                           postinc2	equ	0xFDE
  2118                           postdec2	equ	0xFDD
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function _TMR1_Initialize *****************
  2124 ;; Defined at:
  2125 ;;		line 15 in file "mcc_generated_files/tmr1.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;		None
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;		None
  2130 ;; Return value:  Size  Location     Type
  2131 ;;		None               void
  2132 ;; Registers used:
  2133 ;;		wreg, status,2, cstack
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2139 ;;      Params:         0       0       0       0       0       0       0
  2140 ;;      Locals:         0       0       0       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0       0       0
  2142 ;;      Totals:         0       0       0       0       0       0       0
  2143 ;;Total ram usage:        0 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    4
  2146 ;; This function calls:
  2147 ;;		_TMR1_StartTimer
  2148 ;; This function is called by:
  2149 ;;		_SYSTEM_Initialize
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text10
  2154  001C70                     __ptext10:
  2155                           	opt stack 0
  2156  001C70                     _TMR1_Initialize:
  2157                           	opt stack 25
  2158                           
  2159                           ;tmr1.c: 20: T1CON = 0x00;
  2160                           
  2161                           ;incstack = 0
  2162  001C70  0E00               	movlw	0
  2163  001C72  6ECD               	movwf	4045,c	;volatile
  2164                           
  2165                           ;tmr1.c: 23: T1GCON = 0x00;
  2166  001C74  0E00               	movlw	0
  2167  001C76  6ECC               	movwf	4044,c	;volatile
  2168                           
  2169                           ;tmr1.c: 26: TMR1H = 0xB1;
  2170  001C78  0EB1               	movlw	177
  2171  001C7A  6ECF               	movwf	4047,c	;volatile
  2172                           
  2173                           ;tmr1.c: 29: TMR1L = 0xE0;
  2174  001C7C  0EE0               	movlw	224
  2175  001C7E  6ECE               	movwf	4046,c	;volatile
  2176                           
  2177                           ;tmr1.c: 32: timer1ReloadVal=TMR1;
  2178  001C80  CFCE F046          	movff	4046,_timer1ReloadVal	;volatile
  2179  001C84  CFCF F047          	movff	4047,_timer1ReloadVal+1	;volatile
  2180                           
  2181                           ;tmr1.c: 35: PIR1bits.TMR1IF = 0;
  2182  001C88  909E               	bcf	3998,0,c	;volatile
  2183                           
  2184                           ;tmr1.c: 38: PIE1bits.TMR1IE = 1;
  2185  001C8A  809D               	bsf	3997,0,c	;volatile
  2186                           
  2187                           ;tmr1.c: 41: TMR1_StartTimer();
  2188  001C8C  EC92  F00E         	call	_TMR1_StartTimer	;wreg free
  2189  001C90  0012               	return		;funcret
  2190  001C92                     __end_of_TMR1_Initialize:
  2191                           	opt stack 0
  2192                           tblptru	equ	0xFF8
  2193                           tblptrh	equ	0xFF7
  2194                           tblptrl	equ	0xFF6
  2195                           tablat	equ	0xFF5
  2196                           intcon	equ	0xFF2
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           postinc1	equ	0xFE6
  2200                           postdec1	equ	0xFE5
  2201                           fsr1h	equ	0xFE2
  2202                           fsr1l	equ	0xFE1
  2203                           postinc2	equ	0xFDE
  2204                           postdec2	equ	0xFDD
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _TMR1_StartTimer *****************
  2210 ;; Defined at:
  2211 ;;		line 44 in file "mcc_generated_files/tmr1.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;		None
  2216 ;; Return value:  Size  Location     Type
  2217 ;;		None               void
  2218 ;; Registers used:
  2219 ;;		None
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2225 ;;      Params:         0       0       0       0       0       0       0
  2226 ;;      Locals:         0       0       0       0       0       0       0
  2227 ;;      Temps:          0       0       0       0       0       0       0
  2228 ;;      Totals:         0       0       0       0       0       0       0
  2229 ;;Total ram usage:        0 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    3
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_TMR1_Initialize
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text11
  2240  001D24                     __ptext11:
  2241                           	opt stack 0
  2242  001D24                     _TMR1_StartTimer:
  2243                           	opt stack 25
  2244                           
  2245                           ;tmr1.c: 47: T1CONbits.TMR1ON = 1;
  2246                           
  2247                           ;incstack = 0
  2248  001D24  80CD               	bsf	4045,0,c	;volatile
  2249  001D26  0012               	return		;funcret
  2250  001D28                     __end_of_TMR1_StartTimer:
  2251                           	opt stack 0
  2252                           tblptru	equ	0xFF8
  2253                           tblptrh	equ	0xFF7
  2254                           tblptrl	equ	0xFF6
  2255                           tablat	equ	0xFF5
  2256                           intcon	equ	0xFF2
  2257                           postinc0	equ	0xFEE
  2258                           wreg	equ	0xFE8
  2259                           postinc1	equ	0xFE6
  2260                           postdec1	equ	0xFE5
  2261                           fsr1h	equ	0xFE2
  2262                           fsr1l	equ	0xFE1
  2263                           postinc2	equ	0xFDE
  2264                           postdec2	equ	0xFDD
  2265                           fsr2h	equ	0xFDA
  2266                           fsr2l	equ	0xFD9
  2267                           status	equ	0xFD8
  2268                           
  2269 ;; *************** function _PIN_MANAGER_Initialize *****************
  2270 ;; Defined at:
  2271 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;		None
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;		None
  2276 ;; Return value:  Size  Location     Type
  2277 ;;		None               void
  2278 ;; Registers used:
  2279 ;;		wreg, status,2
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2285 ;;      Params:         0       0       0       0       0       0       0
  2286 ;;      Locals:         0       0       0       0       0       0       0
  2287 ;;      Temps:          0       0       0       0       0       0       0
  2288 ;;      Totals:         0       0       0       0       0       0       0
  2289 ;;Total ram usage:        0 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    3
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_SYSTEM_Initialize
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text12
  2300  001A80                     __ptext12:
  2301                           	opt stack 0
  2302  001A80                     _PIN_MANAGER_Initialize:
  2303                           	opt stack 26
  2304                           
  2305                           ;pin_manager.c: 52: LATA = 0x00;
  2306                           
  2307                           ;incstack = 0
  2308  001A80  0E00               	movlw	0
  2309  001A82  6E89               	movwf	3977,c	;volatile
  2310                           
  2311                           ;pin_manager.c: 53: TRISA = 0xAE;
  2312  001A84  0EAE               	movlw	174
  2313  001A86  6E92               	movwf	3986,c	;volatile
  2314                           
  2315                           ;pin_manager.c: 54: ANSELA = 0x2E;
  2316  001A88  0E2E               	movlw	46
  2317  001A8A  010F               	movlb	15	; () banked
  2318  001A8C  6F38               	movwf	56,b	;volatile
  2319                           
  2320                           ;pin_manager.c: 56: LATB = 0x00;
  2321  001A8E  0E00               	movlw	0
  2322  001A90  6E8A               	movwf	3978,c	;volatile
  2323                           
  2324                           ;pin_manager.c: 57: TRISB = 0xF4;
  2325  001A92  0EF4               	movlw	244
  2326  001A94  6E93               	movwf	3987,c	;volatile
  2327                           
  2328                           ;pin_manager.c: 58: ANSELB = 0x34;
  2329  001A96  0E34               	movlw	52
  2330  001A98  010F               	movlb	15	; () banked
  2331  001A9A  6F39               	movwf	57,b	;volatile
  2332                           
  2333                           ;pin_manager.c: 59: WPUB = 0x00;
  2334  001A9C  0E00               	movlw	0
  2335  001A9E  6E61               	movwf	3937,c	;volatile
  2336                           
  2337                           ;pin_manager.c: 61: LATC = 0x08;
  2338  001AA0  0E08               	movlw	8
  2339  001AA2  6E8B               	movwf	3979,c	;volatile
  2340                           
  2341                           ;pin_manager.c: 62: TRISC = 0xC4;
  2342  001AA4  0EC4               	movlw	196
  2343  001AA6  6E94               	movwf	3988,c	;volatile
  2344                           
  2345                           ;pin_manager.c: 63: ANSELC = 0x04;
  2346  001AA8  0E04               	movlw	4
  2347  001AAA  010F               	movlb	15	; () banked
  2348  001AAC  6F3A               	movwf	58,b	;volatile
  2349                           
  2350                           ;pin_manager.c: 65: LATD = 0x00;
  2351  001AAE  0E00               	movlw	0
  2352  001AB0  6E8C               	movwf	3980,c	;volatile
  2353                           
  2354                           ;pin_manager.c: 66: TRISD = 0xD1;
  2355  001AB2  0ED1               	movlw	209
  2356  001AB4  6E95               	movwf	3989,c	;volatile
  2357                           
  2358                           ;pin_manager.c: 67: ANSELD = 0xD1;
  2359  001AB6  0ED1               	movlw	209
  2360  001AB8  010F               	movlb	15	; () banked
  2361  001ABA  6F3B               	movwf	59,b	;volatile
  2362                           
  2363                           ;pin_manager.c: 69: LATE = 0x00;
  2364  001ABC  0E00               	movlw	0
  2365  001ABE  6E8D               	movwf	3981,c	;volatile
  2366                           
  2367                           ;pin_manager.c: 70: TRISE = 0x05;
  2368  001AC0  0E05               	movlw	5
  2369  001AC2  6E96               	movwf	3990,c	;volatile
  2370                           
  2371                           ;pin_manager.c: 71: ANSELE = 0x05;
  2372  001AC4  0E05               	movlw	5
  2373  001AC6  010F               	movlb	15	; () banked
  2374  001AC8  6F3C               	movwf	60,b	;volatile
  2375                           
  2376                           ; BSR set to: 15
  2377                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  2378  001ACA  8EF1               	bsf	intcon2,7,c	;volatile
  2379                           
  2380                           ; BSR set to: 15
  2381  001ACC  0012               	return		;funcret
  2382  001ACE                     __end_of_PIN_MANAGER_Initialize:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           intcon	equ	0xFF2
  2389                           intcon2	equ	0xFF1
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           postinc1	equ	0xFE6
  2393                           postdec1	equ	0xFE5
  2394                           fsr1h	equ	0xFE2
  2395                           fsr1l	equ	0xFE1
  2396                           postinc2	equ	0xFDE
  2397                           postdec2	equ	0xFDD
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _OSCILLATOR_Initialize *****************
  2403 ;; Defined at:
  2404 ;;		line 122 in file "mcc_generated_files/mcc.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;		None               void
  2411 ;; Registers used:
  2412 ;;		wreg, status,2
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2418 ;;      Params:         0       0       0       0       0       0       0
  2419 ;;      Locals:         0       0       0       0       0       0       0
  2420 ;;      Temps:          0       0       0       0       0       0       0
  2421 ;;      Totals:         0       0       0       0       0       0       0
  2422 ;;Total ram usage:        0 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    3
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_SYSTEM_Initialize
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text13
  2433  001D04                     __ptext13:
  2434                           	opt stack 0
  2435  001D04                     _OSCILLATOR_Initialize:
  2436                           	opt stack 26
  2437                           
  2438                           ;mcc.c: 125: OSCCON = 0x62;
  2439                           
  2440                           ; BSR set to: 15
  2441                           ;incstack = 0
  2442  001D04  0E62               	movlw	98
  2443  001D06  6ED3               	movwf	4051,c	;volatile
  2444                           
  2445                           ;mcc.c: 127: OSCCON2 = 0x04;
  2446  001D08  0E04               	movlw	4
  2447  001D0A  6ED2               	movwf	4050,c	;volatile
  2448                           
  2449                           ;mcc.c: 129: OSCTUNE = 0x00;
  2450  001D0C  0E00               	movlw	0
  2451  001D0E  6E9B               	movwf	3995,c	;volatile
  2452  001D10  0012               	return		;funcret
  2453  001D12                     __end_of_OSCILLATOR_Initialize:
  2454                           	opt stack 0
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           intcon	equ	0xFF2
  2460                           intcon2	equ	0xFF1
  2461                           postinc0	equ	0xFEE
  2462                           wreg	equ	0xFE8
  2463                           postinc1	equ	0xFE6
  2464                           postdec1	equ	0xFE5
  2465                           fsr1h	equ	0xFE2
  2466                           fsr1l	equ	0xFE1
  2467                           postinc2	equ	0xFDE
  2468                           postdec2	equ	0xFDD
  2469                           fsr2h	equ	0xFDA
  2470                           fsr2l	equ	0xFD9
  2471                           status	equ	0xFD8
  2472                           
  2473 ;; *************** function _INTERRUPT_Initialize *****************
  2474 ;; Defined at:
  2475 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;		None
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;		None               void
  2482 ;; Registers used:
  2483 ;;		None
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2489 ;;      Params:         0       0       0       0       0       0       0
  2490 ;;      Locals:         0       0       0       0       0       0       0
  2491 ;;      Temps:          0       0       0       0       0       0       0
  2492 ;;      Totals:         0       0       0       0       0       0       0
  2493 ;;Total ram usage:        0 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    3
  2496 ;; This function calls:
  2497 ;;		Nothing
  2498 ;; This function is called by:
  2499 ;;		_SYSTEM_Initialize
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text14
  2504  001D12                     __ptext14:
  2505                           	opt stack 0
  2506  001D12                     _INTERRUPT_Initialize:
  2507                           	opt stack 26
  2508                           
  2509                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  2510                           
  2511                           ;incstack = 0
  2512  001D12  9ED0               	bcf	4048,7,c	;volatile
  2513                           
  2514                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  2515  001D14  9A9F               	bcf	3999,5,c	;volatile
  2516                           
  2517                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  2518  001D16  9C9F               	bcf	3999,6,c	;volatile
  2519                           
  2520                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  2521  001D18  909F               	bcf	3999,0,c	;volatile
  2522                           
  2523                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  2524  001D1A  989F               	bcf	3999,4,c	;volatile
  2525  001D1C  0012               	return		;funcret
  2526  001D1E                     __end_of_INTERRUPT_Initialize:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           intcon	equ	0xFF2
  2533                           intcon2	equ	0xFF1
  2534                           postinc0	equ	0xFEE
  2535                           wreg	equ	0xFE8
  2536                           postinc1	equ	0xFE6
  2537                           postdec1	equ	0xFE5
  2538                           fsr1h	equ	0xFE2
  2539                           fsr1l	equ	0xFE1
  2540                           postinc2	equ	0xFDE
  2541                           postdec2	equ	0xFDD
  2542                           fsr2h	equ	0xFDA
  2543                           fsr2l	equ	0xFD9
  2544                           status	equ	0xFD8
  2545                           
  2546 ;; *************** function _EUSART1_Initialize *****************
  2547 ;; Defined at:
  2548 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;		None
  2553 ;; Return value:  Size  Location     Type
  2554 ;;		None               void
  2555 ;; Registers used:
  2556 ;;		wreg, status,2
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2562 ;;      Params:         0       0       0       0       0       0       0
  2563 ;;      Locals:         0       0       0       0       0       0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0
  2565 ;;      Totals:         0       0       0       0       0       0       0
  2566 ;;Total ram usage:        0 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    3
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_SYSTEM_Initialize
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text15
  2577  001ACE                     __ptext15:
  2578                           	opt stack 0
  2579  001ACE                     _EUSART1_Initialize:
  2580                           	opt stack 26
  2581                           
  2582                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  2583                           
  2584                           ;incstack = 0
  2585  001ACE  9A9D               	bcf	3997,5,c	;volatile
  2586                           
  2587                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  2588  001AD0  989D               	bcf	3997,4,c	;volatile
  2589                           
  2590                           ;eusart1.c: 85: BAUD1CON = 0x48;
  2591  001AD2  0E48               	movlw	72
  2592  001AD4  6EB8               	movwf	4024,c	;volatile
  2593                           
  2594                           ;eusart1.c: 88: RC1STA = 0x98;
  2595  001AD6  0E98               	movlw	152
  2596  001AD8  6EAB               	movwf	4011,c	;volatile
  2597                           
  2598                           ;eusart1.c: 91: TX1STA = 0x26;
  2599  001ADA  0E26               	movlw	38
  2600  001ADC  6EAC               	movwf	4012,c	;volatile
  2601                           
  2602                           ;eusart1.c: 94: SPBRG1 = 0x22;
  2603  001ADE  0E22               	movlw	34
  2604  001AE0  6EAF               	movwf	4015,c	;volatile
  2605                           
  2606                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  2607  001AE2  0E00               	movlw	0
  2608  001AE4  6EB0               	movwf	4016,c	;volatile
  2609                           
  2610                           ;eusart1.c: 100: TXREG1 = 0x00;
  2611  001AE6  0E00               	movlw	0
  2612  001AE8  6EAD               	movwf	4013,c	;volatile
  2613                           
  2614                           ;eusart1.c: 103: RCREG1 = 0x00;
  2615  001AEA  0E00               	movlw	0
  2616  001AEC  6EAE               	movwf	4014,c	;volatile
  2617                           
  2618                           ;eusart1.c: 107: eusart1TxHead = 0;
  2619  001AEE  0E00               	movlw	0
  2620  001AF0  6E44               	movwf	_eusart1TxHead,c
  2621                           
  2622                           ;eusart1.c: 108: eusart1TxTail = 0;
  2623  001AF2  0E00               	movlw	0
  2624  001AF4  6E45               	movwf	_eusart1TxTail,c
  2625                           
  2626                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  2627  001AF6  0E08               	movlw	8
  2628  001AF8  6E48               	movwf	_eusart1TxBufferRemaining,c	;volatile
  2629                           
  2630                           ;eusart1.c: 111: eusart1RxHead = 0;
  2631  001AFA  0E00               	movlw	0
  2632  001AFC  6E42               	movwf	_eusart1RxHead,c
  2633                           
  2634                           ;eusart1.c: 112: eusart1RxTail = 0;
  2635  001AFE  0E00               	movlw	0
  2636  001B00  6E43               	movwf	_eusart1RxTail,c
  2637                           
  2638                           ;eusart1.c: 113: eusart1RxCount = 0;
  2639  001B02  0E00               	movlw	0
  2640  001B04  6E41               	movwf	_eusart1RxCount,c	;volatile
  2641                           
  2642                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  2643  001B06  8A9D               	bsf	3997,5,c	;volatile
  2644  001B08  0012               	return		;funcret
  2645  001B0A                     __end_of_EUSART1_Initialize:
  2646                           	opt stack 0
  2647                           tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           intcon	equ	0xFF2
  2652                           intcon2	equ	0xFF1
  2653                           postinc0	equ	0xFEE
  2654                           wreg	equ	0xFE8
  2655                           postinc1	equ	0xFE6
  2656                           postdec1	equ	0xFE5
  2657                           fsr1h	equ	0xFE2
  2658                           fsr1l	equ	0xFE1
  2659                           postinc2	equ	0xFDE
  2660                           postdec2	equ	0xFDD
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function _ADC_Initialize *****************
  2666 ;; Defined at:
  2667 ;;		line 13 in file "mcc_generated_files/adc.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;		None               void
  2674 ;; Registers used:
  2675 ;;		wreg, status,2
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2681 ;;      Params:         0       0       0       0       0       0       0
  2682 ;;      Locals:         0       0       0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0       0       0
  2684 ;;      Totals:         0       0       0       0       0       0       0
  2685 ;;Total ram usage:        0 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    3
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_SYSTEM_Initialize
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text16
  2696  001CC6                     __ptext16:
  2697                           	opt stack 0
  2698  001CC6                     _ADC_Initialize:
  2699                           	opt stack 26
  2700                           
  2701                           ;adc.c: 18: ADCON0 = 0x01;
  2702                           
  2703                           ;incstack = 0
  2704  001CC6  0E01               	movlw	1
  2705  001CC8  6EC2               	movwf	4034,c	;volatile
  2706                           
  2707                           ;adc.c: 21: ADCON1 = 0x80;
  2708  001CCA  0E80               	movlw	128
  2709  001CCC  6EC1               	movwf	4033,c	;volatile
  2710                           
  2711                           ;adc.c: 24: ADCON2 = 0x0A;
  2712  001CCE  0E0A               	movlw	10
  2713  001CD0  6EC0               	movwf	4032,c	;volatile
  2714                           
  2715                           ;adc.c: 27: ADRESL = 0x00;
  2716  001CD2  0E00               	movlw	0
  2717  001CD4  6EC3               	movwf	4035,c	;volatile
  2718                           
  2719                           ;adc.c: 30: ADRESH = 0x00;
  2720  001CD6  0E00               	movlw	0
  2721  001CD8  6EC4               	movwf	4036,c	;volatile
  2722                           
  2723                           ;adc.c: 33: PIE1bits.ADIE = 1;
  2724  001CDA  8C9D               	bsf	3997,6,c	;volatile
  2725  001CDC  0012               	return		;funcret
  2726  001CDE                     __end_of_ADC_Initialize:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           intcon	equ	0xFF2
  2733                           intcon2	equ	0xFF1
  2734                           postinc0	equ	0xFEE
  2735                           wreg	equ	0xFE8
  2736                           postinc1	equ	0xFE6
  2737                           postdec1	equ	0xFE5
  2738                           fsr1h	equ	0xFE2
  2739                           fsr1l	equ	0xFE1
  2740                           postinc2	equ	0xFDE
  2741                           postdec2	equ	0xFDD
  2742                           fsr2h	equ	0xFDA
  2743                           fsr2l	equ	0xFD9
  2744                           status	equ	0xFD8
  2745                           
  2746 ;; *************** function _Battery_Fault *****************
  2747 ;; Defined at:
  2748 ;;		line 11 in file "Battery.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;		None
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  i               2   46[COMRAM] int 
  2753 ;;  fault           1   45[COMRAM] unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      unsigned char 
  2756 ;; Registers used:
  2757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2763 ;;      Params:         0       0       0       0       0       0       0
  2764 ;;      Locals:         3       0       0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0       0       0
  2766 ;;      Totals:         3       0       0       0       0       0       0
  2767 ;;Total ram usage:        3 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    4
  2770 ;; This function calls:
  2771 ;;		___ftge
  2772 ;;		___wmul
  2773 ;; This function is called by:
  2774 ;;		_main
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text17
  2779  001752                     __ptext17:
  2780                           	opt stack 0
  2781  001752                     _Battery_Fault:
  2782                           	opt stack 26
  2783                           
  2784                           ;Battery.c: 13: char fault = 0;
  2785                           
  2786                           ;incstack = 0
  2787  001752  0E00               	movlw	0
  2788  001754  6E2E               	movwf	Battery_Fault@fault,c
  2789                           
  2790                           ;Battery.c: 14: for(int i = 0;i<10;i++)
  2791  001756  0E00               	movlw	0
  2792  001758  6E30               	movwf	Battery_Fault@i+1,c
  2793  00175A  0E00               	movlw	0
  2794  00175C  6E2F               	movwf	Battery_Fault@i,c
  2795  00175E                     l3220:
  2796  00175E  BE30               	btfsc	Battery_Fault@i+1,7,c
  2797  001760  D008               	goto	l3224
  2798  001762  5030               	movf	Battery_Fault@i+1,w,c
  2799  001764  E14D               	bnz	l328
  2800  001766  0E0A               	movlw	10
  2801  001768  5C2F               	subwf	Battery_Fault@i,w,c
  2802  00176A  B0D8               	btfsc	status,0,c
  2803  00176C  0012               	return	
  2804  00176E  D001               	goto	l3224
  2805  001770  0012               	return	
  2806  001772                     l3224:
  2807                           
  2808                           ;Battery.c: 15: {
  2809                           ;Battery.c: 16: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  2810  001772  0E00               	movlw	0
  2811  001774  6E25               	movwf	___ftge@ff1,c
  2812  001776  0E40               	movlw	64
  2813  001778  6E26               	movwf	___ftge@ff1+1,c
  2814  00177A  0E40               	movlw	64
  2815  00177C  6E27               	movwf	___ftge@ff1+2,c
  2816  00177E  C02F  F01F         	movff	Battery_Fault@i,___wmul@multiplier
  2817  001782  C030  F020         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  2818  001786  0E00               	movlw	0
  2819  001788  6E22               	movwf	___wmul@multiplicand+1,c
  2820  00178A  0E03               	movlw	3
  2821  00178C  6E21               	movwf	___wmul@multiplicand,c
  2822  00178E  EC24  F00E         	call	___wmul	;wreg free
  2823  001792  0E60               	movlw	low _Battery_Volt
  2824  001794  241F               	addwf	?___wmul,w,c
  2825  001796  6ED9               	movwf	fsr2l,c
  2826  001798  0E00               	movlw	high _Battery_Volt
  2827  00179A  2020               	addwfc	?___wmul+1,w,c
  2828  00179C  6EDA               	movwf	fsr2h,c
  2829  00179E  CFDE F028          	movff	postinc2,___ftge@ff2
  2830  0017A2  CFDE F029          	movff	postinc2,___ftge@ff2+1
  2831  0017A6  CFDD F02A          	movff	postdec2,___ftge@ff2+2
  2832  0017AA  EC01  F00C         	call	___ftge	;wreg free
  2833  0017AE  B0D8               	btfsc	status,0,c
  2834  0017B0  D023               	goto	l3230
  2835  0017B2  C02F  F01F         	movff	Battery_Fault@i,___wmul@multiplier
  2836  0017B6  C030  F020         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  2837  0017BA  0E00               	movlw	0
  2838  0017BC  6E22               	movwf	___wmul@multiplicand+1,c
  2839  0017BE  0E03               	movlw	3
  2840  0017C0  6E21               	movwf	___wmul@multiplicand,c
  2841  0017C2  EC24  F00E         	call	___wmul	;wreg free
  2842  0017C6  0E60               	movlw	low _Battery_Volt
  2843  0017C8  241F               	addwf	?___wmul,w,c
  2844  0017CA  6ED9               	movwf	fsr2l,c
  2845  0017CC  0E00               	movlw	high _Battery_Volt
  2846  0017CE  2020               	addwfc	?___wmul+1,w,c
  2847  0017D0  6EDA               	movwf	fsr2h,c
  2848  0017D2  CFDE F025          	movff	postinc2,___ftge@ff1
  2849  0017D6  CFDE F026          	movff	postinc2,___ftge@ff1+1
  2850  0017DA  CFDD F027          	movff	postdec2,___ftge@ff1+2
  2851  0017DE  0EB8               	movlw	184
  2852  0017E0  6E28               	movwf	___ftge@ff2,c
  2853  0017E2  0E86               	movlw	134
  2854  0017E4  6E29               	movwf	___ftge@ff2+1,c
  2855  0017E6  0E40               	movlw	64
  2856  0017E8  6E2A               	movwf	___ftge@ff2+2,c
  2857  0017EA  EC01  F00C         	call	___ftge	;wreg free
  2858  0017EE  B0D8               	btfsc	status,0,c
  2859  0017F0  D003               	goto	l3230
  2860                           
  2861                           ;Battery.c: 17: {
  2862                           ;Battery.c: 18: fault = 1;
  2863  0017F2  0E01               	movlw	1
  2864  0017F4  6E2E               	movwf	Battery_Fault@fault,c
  2865  0017F6  D000               	goto	l3230
  2866  0017F8                     l3230:
  2867  0017F8  4A2F               	infsnz	Battery_Fault@i,f,c
  2868  0017FA  2A30               	incf	Battery_Fault@i+1,f,c
  2869  0017FC  D7B0               	goto	l3220
  2870  0017FE  0012               	return	
  2871  001800                     l328:
  2872  001800  0012               	return		;funcret
  2873  001802                     __end_of_Battery_Fault:
  2874                           	opt stack 0
  2875                           tblptru	equ	0xFF8
  2876                           tblptrh	equ	0xFF7
  2877                           tblptrl	equ	0xFF6
  2878                           tablat	equ	0xFF5
  2879                           intcon	equ	0xFF2
  2880                           intcon2	equ	0xFF1
  2881                           postinc0	equ	0xFEE
  2882                           wreg	equ	0xFE8
  2883                           postinc1	equ	0xFE6
  2884                           postdec1	equ	0xFE5
  2885                           fsr1h	equ	0xFE2
  2886                           fsr1l	equ	0xFE1
  2887                           postinc2	equ	0xFDE
  2888                           postdec2	equ	0xFDD
  2889                           fsr2h	equ	0xFDA
  2890                           fsr2l	equ	0xFD9
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function ___ftge *****************
  2894 ;; Defined at:
  2895 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  ff1             3   36[COMRAM] float 
  2898 ;;  ff2             3   39[COMRAM] float 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;		None               void
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         6       0       0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0
  2912 ;;      Temps:          3       0       0       0       0       0       0
  2913 ;;      Totals:         9       0       0       0       0       0       0
  2914 ;;Total ram usage:        9 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    3
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_Battery_Fault
  2921 ;;		_Temp_Fault
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text18
  2926  001802                     __ptext18:
  2927                           	opt stack 0
  2928  001802                     ___ftge:
  2929                           	opt stack 26
  2930                           
  2931                           ;incstack = 0
  2932  001802  AE27               	btfss	___ftge@ff1+2,7,c
  2933  001804  D017               	goto	l2456
  2934  001806  C025  F02B         	movff	___ftge@ff1,??___ftge
  2935  00180A  C026  F02C         	movff	___ftge@ff1+1,??___ftge+1
  2936  00180E  C027  F02D         	movff	___ftge@ff1+2,??___ftge+2
  2937  001812  1E2B               	comf	??___ftge,f,c
  2938  001814  1E2C               	comf	??___ftge+1,f,c
  2939  001816  1E2D               	comf	??___ftge+2,f,c
  2940  001818  2A2B               	incf	??___ftge,f,c
  2941  00181A  0E00               	movlw	0
  2942  00181C  222C               	addwfc	??___ftge+1,f,c
  2943  00181E  222D               	addwfc	??___ftge+2,f,c
  2944  001820  0E00               	movlw	0
  2945  001822  242B               	addwf	??___ftge,w,c
  2946  001824  6E25               	movwf	___ftge@ff1,c
  2947  001826  0E00               	movlw	0
  2948  001828  202C               	addwfc	??___ftge+1,w,c
  2949  00182A  6E26               	movwf	___ftge@ff1+1,c
  2950  00182C  0E80               	movlw	128
  2951  00182E  202D               	addwfc	??___ftge+2,w,c
  2952  001830  6E27               	movwf	___ftge@ff1+2,c
  2953  001832  D000               	goto	l2456
  2954  001834                     l2456:
  2955  001834  AE2A               	btfss	___ftge@ff2+2,7,c
  2956  001836  D017               	goto	l2460
  2957  001838  C028  F02B         	movff	___ftge@ff2,??___ftge
  2958  00183C  C029  F02C         	movff	___ftge@ff2+1,??___ftge+1
  2959  001840  C02A  F02D         	movff	___ftge@ff2+2,??___ftge+2
  2960  001844  1E2B               	comf	??___ftge,f,c
  2961  001846  1E2C               	comf	??___ftge+1,f,c
  2962  001848  1E2D               	comf	??___ftge+2,f,c
  2963  00184A  2A2B               	incf	??___ftge,f,c
  2964  00184C  0E00               	movlw	0
  2965  00184E  222C               	addwfc	??___ftge+1,f,c
  2966  001850  222D               	addwfc	??___ftge+2,f,c
  2967  001852  0E00               	movlw	0
  2968  001854  242B               	addwf	??___ftge,w,c
  2969  001856  6E28               	movwf	___ftge@ff2,c
  2970  001858  0E00               	movlw	0
  2971  00185A  202C               	addwfc	??___ftge+1,w,c
  2972  00185C  6E29               	movwf	___ftge@ff2+1,c
  2973  00185E  0E80               	movlw	128
  2974  001860  202D               	addwfc	??___ftge+2,w,c
  2975  001862  6E2A               	movwf	___ftge@ff2+2,c
  2976  001864  D000               	goto	l2460
  2977  001866                     l2460:
  2978  001866  0E00               	movlw	0
  2979  001868  1A25               	xorwf	___ftge@ff1,f,c
  2980  00186A  0E00               	movlw	0
  2981  00186C  1A26               	xorwf	___ftge@ff1+1,f,c
  2982  00186E  0E80               	movlw	128
  2983  001870  1A27               	xorwf	___ftge@ff1+2,f,c
  2984  001872  0E00               	movlw	0
  2985  001874  1A28               	xorwf	___ftge@ff2,f,c
  2986  001876  0E00               	movlw	0
  2987  001878  1A29               	xorwf	___ftge@ff2+1,f,c
  2988  00187A  0E80               	movlw	128
  2989  00187C  1A2A               	xorwf	___ftge@ff2+2,f,c
  2990  00187E  5028               	movf	___ftge@ff2,w,c
  2991  001880  5C25               	subwf	___ftge@ff1,w,c
  2992  001882  5029               	movf	___ftge@ff2+1,w,c
  2993  001884  5826               	subwfb	___ftge@ff1+1,w,c
  2994  001886  502A               	movf	___ftge@ff2+2,w,c
  2995  001888  5827               	subwfb	___ftge@ff1+2,w,c
  2996  00188A  B0D8               	btfsc	status,0,c
  2997  00188C  D002               	goto	l2466
  2998  00188E  90D8               	bcf	status,0,c
  2999  001890  0012               	return	
  3000  001892                     l2466:
  3001  001892  80D8               	bsf	status,0,c
  3002  001894  0012               	return	
  3003  001896  0012               	return		;funcret
  3004  001898                     __end_of___ftge:
  3005                           	opt stack 0
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           intcon	equ	0xFF2
  3011                           intcon2	equ	0xFF1
  3012                           postinc0	equ	0xFEE
  3013                           wreg	equ	0xFE8
  3014                           postinc1	equ	0xFE6
  3015                           postdec1	equ	0xFE5
  3016                           fsr1h	equ	0xFE2
  3017                           fsr1l	equ	0xFE1
  3018                           postinc2	equ	0xFDE
  3019                           postdec2	equ	0xFDD
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _Battery_Convert *****************
  3025 ;; Defined at:
  3026 ;;		line 47 in file "Battery.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  x               2   17[BANK0 ] int 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;		None               void
  3033 ;; Registers used:
  3034 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3040 ;;      Params:         0       0       0       0       0       0       0
  3041 ;;      Locals:         0       2       0       0       0       0       0
  3042 ;;      Temps:          0       0       0       0       0       0       0
  3043 ;;      Totals:         0       2       0       0       0       0       0
  3044 ;;Total ram usage:        2 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    6
  3047 ;; This function calls:
  3048 ;;		_Battery_Filter
  3049 ;;		___awdiv
  3050 ;;		___awtoft
  3051 ;;		___ftadd
  3052 ;;		___wmul
  3053 ;; This function is called by:
  3054 ;;		_main
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text19
  3059  0015C0                     __ptext19:
  3060                           	opt stack 0
  3061  0015C0                     _Battery_Convert:
  3062                           	opt stack 24
  3063                           
  3064                           ;Battery.c: 49: int x;
  3065                           ;Battery.c: 50: for(x = 0; x < 10; x++)
  3066                           
  3067                           ;incstack = 0
  3068  0015C0  0E00               	movlw	0
  3069  0015C2  0100               	movlb	0	; () banked
  3070  0015C4  6FDC               	movwf	(Battery_Convert@x+1)& (0+255),b
  3071  0015C6  0E00               	movlw	0
  3072  0015C8  6FDB               	movwf	Battery_Convert@x& (0+255),b
  3073  0015CA                     l3236:
  3074                           
  3075                           ; BSR set to: 0
  3076  0015CA  0100               	movlb	0	; () banked
  3077  0015CC  BFDC               	btfsc	(Battery_Convert@x+1)& (0+255),7,b
  3078  0015CE  D00A               	goto	l3240
  3079  0015D0  0100               	movlb	0	; () banked
  3080  0015D2  51DC               	movf	(Battery_Convert@x+1)& (0+255),w,b
  3081  0015D4  E158               	bnz	l3246
  3082  0015D6  0E0A               	movlw	10
  3083  0015D8  0100               	movlb	0	; () banked
  3084  0015DA  5DDB               	subwf	Battery_Convert@x& (0+255),w,b
  3085  0015DC  B0D8               	btfsc	status,0,c
  3086  0015DE  D053               	goto	l3246
  3087  0015E0  D001               	goto	l3240
  3088                           
  3089                           ; BSR set to: 0
  3090  0015E2  D051               	goto	l3246
  3091  0015E4                     l3240:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;Battery.c: 51: {
  3095                           ;Battery.c: 52: TempBattery_Volt[x] = ((Battery_Adc[x]/1024)*5) + 2.5;
  3096  0015E4  C0DB  F01F         	movff	Battery_Convert@x,___wmul@multiplier
  3097  0015E8  C0DC  F020         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  3098  0015EC  0E00               	movlw	0
  3099  0015EE  6E22               	movwf	___wmul@multiplicand+1,c
  3100  0015F0  0E03               	movlw	3
  3101  0015F2  6E21               	movwf	___wmul@multiplicand,c
  3102  0015F4  EC24  F00E         	call	___wmul	;wreg free
  3103  0015F8  0E6E               	movlw	low _TempBattery_Volt
  3104  0015FA  241F               	addwf	?___wmul,w,c
  3105  0015FC  6ED9               	movwf	fsr2l,c
  3106  0015FE  0E01               	movlw	high _TempBattery_Volt
  3107  001600  2020               	addwfc	?___wmul+1,w,c
  3108  001602  6EDA               	movwf	fsr2h,c
  3109  001604  0E04               	movlw	4
  3110  001606  6E1A               	movwf	___awdiv@divisor+1,c
  3111  001608  0E00               	movlw	0
  3112  00160A  6E19               	movwf	___awdiv@divisor,c
  3113  00160C  90D8               	bcf	status,0,c
  3114  00160E  0100               	movlb	0	; () banked
  3115  001610  35DB               	rlcf	Battery_Convert@x& (0+255),w,b
  3116  001612  6EE1               	movwf	fsr1l,c
  3117  001614  0100               	movlb	0	; () banked
  3118  001616  35DC               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  3119  001618  6EE2               	movwf	fsr1h,c
  3120  00161A  0E9C               	movlw	low _Battery_Adc
  3121  00161C  26E1               	addwf	fsr1l,f,c
  3122  00161E  0E00               	movlw	high _Battery_Adc
  3123  001620  22E2               	addwfc	fsr1h,f,c
  3124  001622  CFE6 F017          	movff	postinc1,___awdiv@dividend
  3125  001626  CFE5 F018          	movff	postdec1,___awdiv@dividend+1
  3126  00162A  EC4C  F00C         	call	___awdiv	;wreg free
  3127  00162E  C017  F01F         	movff	?___awdiv,___wmul@multiplier
  3128  001632  C018  F020         	movff	?___awdiv+1,___wmul@multiplier+1
  3129  001636  0E00               	movlw	0
  3130  001638  6E22               	movwf	___wmul@multiplicand+1,c
  3131  00163A  0E05               	movlw	5
  3132  00163C  6E21               	movwf	___wmul@multiplicand,c
  3133  00163E  EC24  F00E         	call	___wmul	;wreg free
  3134  001642  C01F  F025         	movff	?___wmul,___awtoft@c
  3135  001646  C020  F026         	movff	?___wmul+1,___awtoft@c+1
  3136  00164A  EC85  F00D         	call	___awtoft	;wreg free
  3137  00164E  C025  F0D0         	movff	?___awtoft,___ftadd@f1
  3138  001652  C026  F0D1         	movff	?___awtoft+1,___ftadd@f1+1
  3139  001656  C027  F0D2         	movff	?___awtoft+2,___ftadd@f1+2
  3140  00165A  0E00               	movlw	0
  3141  00165C  0100               	movlb	0	; () banked
  3142  00165E  6FD3               	movwf	___ftadd@f2& (0+255),b
  3143  001660  0E20               	movlw	32
  3144  001662  0100               	movlb	0	; () banked
  3145  001664  6FD4               	movwf	(___ftadd@f2+1)& (0+255),b
  3146  001666  0E40               	movlw	64
  3147  001668  0100               	movlb	0	; () banked
  3148  00166A  6FD5               	movwf	(___ftadd@f2+2)& (0+255),b
  3149  00166C  EC25  F005         	call	___ftadd	;wreg free
  3150  001670  C0D0  FFDE         	movff	?___ftadd,postinc2
  3151  001674  C0D1  FFDE         	movff	?___ftadd+1,postinc2
  3152  001678  C0D2  FFDE         	movff	?___ftadd+2,postinc2
  3153  00167C  0100               	movlb	0	; () banked
  3154  00167E  4BDB               	infsnz	Battery_Convert@x& (0+255),f,b
  3155  001680  2BDC               	incf	(Battery_Convert@x+1)& (0+255),f,b
  3156  001682  D7A3               	goto	l3236
  3157                           
  3158                           ; BSR set to: 0
  3159  001684  D000               	goto	l3246
  3160  001686                     l3246:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;Battery.c: 53: }
  3164                           ;Battery.c: 54: Battery_Filter();
  3165  001686  EC0C  F008         	call	_Battery_Filter	;wreg free
  3166  00168A  0012               	return		;funcret
  3167  00168C                     __end_of_Battery_Convert:
  3168                           	opt stack 0
  3169                           tblptru	equ	0xFF8
  3170                           tblptrh	equ	0xFF7
  3171                           tblptrl	equ	0xFF6
  3172                           tablat	equ	0xFF5
  3173                           intcon	equ	0xFF2
  3174                           intcon2	equ	0xFF1
  3175                           postinc0	equ	0xFEE
  3176                           wreg	equ	0xFE8
  3177                           postinc1	equ	0xFE6
  3178                           postdec1	equ	0xFE5
  3179                           fsr1h	equ	0xFE2
  3180                           fsr1l	equ	0xFE1
  3181                           postinc2	equ	0xFDE
  3182                           postdec2	equ	0xFDD
  3183                           fsr2h	equ	0xFDA
  3184                           fsr2l	equ	0xFD9
  3185                           status	equ	0xFD8
  3186                           
  3187 ;; *************** function ___awtoft *****************
  3188 ;; Defined at:
  3189 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;  c               2   36[COMRAM] int 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  sign            1   39[COMRAM] unsigned char 
  3194 ;; Return value:  Size  Location     Type
  3195 ;;                  3   36[COMRAM] float 
  3196 ;; Registers used:
  3197 ;;		wreg, status,2, status,0, cstack
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3203 ;;      Params:         3       0       0       0       0       0       0
  3204 ;;      Locals:         1       0       0       0       0       0       0
  3205 ;;      Temps:          0       0       0       0       0       0       0
  3206 ;;      Totals:         4       0       0       0       0       0       0
  3207 ;;Total ram usage:        4 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; Hardware stack levels required when called:    4
  3210 ;; This function calls:
  3211 ;;		___ftpack
  3212 ;; This function is called by:
  3213 ;;		_Battery_Convert
  3214 ;;		_Temp_Convert
  3215 ;;		_log
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text20
  3220  001B0A                     __ptext20:
  3221                           	opt stack 0
  3222  001B0A                     ___awtoft:
  3223                           	opt stack 24
  3224                           
  3225                           ;incstack = 0
  3226  001B0A  0E00               	movlw	0
  3227  001B0C  6E28               	movwf	___awtoft@sign,c
  3228  001B0E  AE26               	btfss	___awtoft@c+1,7,c
  3229  001B10  D007               	goto	l3040
  3230  001B12  6C25               	negf	___awtoft@c,c
  3231  001B14  1E26               	comf	___awtoft@c+1,f,c
  3232  001B16  B0D8               	btfsc	status,0,c
  3233  001B18  2A26               	incf	___awtoft@c+1,f,c
  3234  001B1A  0E01               	movlw	1
  3235  001B1C  6E28               	movwf	___awtoft@sign,c
  3236  001B1E  D000               	goto	l3040
  3237  001B20                     l3040:
  3238  001B20  C025  F017         	movff	___awtoft@c,___ftpack@arg
  3239  001B24  C026  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  3240  001B28  6A19               	clrf	___ftpack@arg+2,c
  3241  001B2A  0E8E               	movlw	142
  3242  001B2C  6E1A               	movwf	___ftpack@exp,c
  3243  001B2E  C028  F01B         	movff	___awtoft@sign,___ftpack@sign
  3244  001B32  EC46  F00B         	call	___ftpack	;wreg free
  3245  001B36  C017  F025         	movff	?___ftpack,?___awtoft
  3246  001B3A  C018  F026         	movff	?___ftpack+1,?___awtoft+1
  3247  001B3E  C019  F027         	movff	?___ftpack+2,?___awtoft+2
  3248  001B42  0012               	return	
  3249  001B44  0012               	return		;funcret
  3250  001B46                     __end_of___awtoft:
  3251                           	opt stack 0
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           intcon	equ	0xFF2
  3257                           intcon2	equ	0xFF1
  3258                           postinc0	equ	0xFEE
  3259                           wreg	equ	0xFE8
  3260                           postinc1	equ	0xFE6
  3261                           postdec1	equ	0xFE5
  3262                           fsr1h	equ	0xFE2
  3263                           fsr1l	equ	0xFE1
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function ___awdiv *****************
  3271 ;; Defined at:
  3272 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  dividend        2   22[COMRAM] int 
  3275 ;;  divisor         2   24[COMRAM] int 
  3276 ;; Auto vars:     Size  Location     Type
  3277 ;;  quotient        2   28[COMRAM] int 
  3278 ;;  sign            1   27[COMRAM] unsigned char 
  3279 ;;  counter         1   26[COMRAM] unsigned char 
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  2   22[COMRAM] int 
  3282 ;; Registers used:
  3283 ;;		wreg, status,2, status,0
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3289 ;;      Params:         4       0       0       0       0       0       0
  3290 ;;      Locals:         4       0       0       0       0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0
  3292 ;;      Totals:         8       0       0       0       0       0       0
  3293 ;;Total ram usage:        8 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    3
  3296 ;; This function calls:
  3297 ;;		Nothing
  3298 ;; This function is called by:
  3299 ;;		_Battery_Convert
  3300 ;;		_Temp_Convert
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           	psect	text21
  3305  001898                     __ptext21:
  3306                           	opt stack 0
  3307  001898                     ___awdiv:
  3308                           	opt stack 26
  3309                           
  3310                           ;incstack = 0
  3311  001898  0E00               	movlw	0
  3312  00189A  6E1C               	movwf	___awdiv@sign,c
  3313  00189C  AE1A               	btfss	___awdiv@divisor+1,7,c
  3314  00189E  D007               	goto	l3182
  3315  0018A0  6C19               	negf	___awdiv@divisor,c
  3316  0018A2  1E1A               	comf	___awdiv@divisor+1,f,c
  3317  0018A4  B0D8               	btfsc	status,0,c
  3318  0018A6  2A1A               	incf	___awdiv@divisor+1,f,c
  3319  0018A8  0E01               	movlw	1
  3320  0018AA  6E1C               	movwf	___awdiv@sign,c
  3321  0018AC  D000               	goto	l3182
  3322  0018AE                     l3182:
  3323  0018AE  AE18               	btfss	___awdiv@dividend+1,7,c
  3324  0018B0  D007               	goto	l3188
  3325  0018B2  6C17               	negf	___awdiv@dividend,c
  3326  0018B4  1E18               	comf	___awdiv@dividend+1,f,c
  3327  0018B6  B0D8               	btfsc	status,0,c
  3328  0018B8  2A18               	incf	___awdiv@dividend+1,f,c
  3329  0018BA  0E01               	movlw	1
  3330  0018BC  1A1C               	xorwf	___awdiv@sign,f,c
  3331  0018BE  D000               	goto	l3188
  3332  0018C0                     l3188:
  3333  0018C0  0E00               	movlw	0
  3334  0018C2  6E1E               	movwf	___awdiv@quotient+1,c
  3335  0018C4  0E00               	movlw	0
  3336  0018C6  6E1D               	movwf	___awdiv@quotient,c
  3337  0018C8  5019               	movf	___awdiv@divisor,w,c
  3338  0018CA  101A               	iorwf	___awdiv@divisor+1,w,c
  3339  0018CC  B4D8               	btfsc	status,2,c
  3340  0018CE  D021               	goto	l3210
  3341  0018D0  0E01               	movlw	1
  3342  0018D2  6E1B               	movwf	___awdiv@counter,c
  3343  0018D4  D005               	goto	l3196
  3344  0018D6                     l3194:
  3345  0018D6  90D8               	bcf	status,0,c
  3346  0018D8  3619               	rlcf	___awdiv@divisor,f,c
  3347  0018DA  361A               	rlcf	___awdiv@divisor+1,f,c
  3348  0018DC  2A1B               	incf	___awdiv@counter,f,c
  3349  0018DE  D000               	goto	l3196
  3350  0018E0                     l3196:
  3351  0018E0  BE1A               	btfsc	___awdiv@divisor+1,7,c
  3352  0018E2  D002               	goto	l3198
  3353  0018E4  D7F8               	goto	l3194
  3354  0018E6  D000               	goto	l3198
  3355  0018E8                     l3198:
  3356  0018E8  90D8               	bcf	status,0,c
  3357  0018EA  361D               	rlcf	___awdiv@quotient,f,c
  3358  0018EC  361E               	rlcf	___awdiv@quotient+1,f,c
  3359  0018EE  5019               	movf	___awdiv@divisor,w,c
  3360  0018F0  5C17               	subwf	___awdiv@dividend,w,c
  3361  0018F2  501A               	movf	___awdiv@divisor+1,w,c
  3362  0018F4  5818               	subwfb	___awdiv@dividend+1,w,c
  3363  0018F6  A0D8               	btfss	status,0,c
  3364  0018F8  D006               	goto	l3206
  3365  0018FA  5019               	movf	___awdiv@divisor,w,c
  3366  0018FC  5E17               	subwf	___awdiv@dividend,f,c
  3367  0018FE  501A               	movf	___awdiv@divisor+1,w,c
  3368  001900  5A18               	subwfb	___awdiv@dividend+1,f,c
  3369  001902  801D               	bsf	___awdiv@quotient,0,c
  3370  001904  D000               	goto	l3206
  3371  001906                     l3206:
  3372  001906  90D8               	bcf	status,0,c
  3373  001908  321A               	rrcf	___awdiv@divisor+1,f,c
  3374  00190A  3219               	rrcf	___awdiv@divisor,f,c
  3375  00190C  2E1B               	decfsz	___awdiv@counter,f,c
  3376  00190E  D7EC               	goto	l3198
  3377  001910  D000               	goto	l3210
  3378  001912                     l3210:
  3379  001912  501C               	movf	___awdiv@sign,w,c
  3380  001914  B4D8               	btfsc	status,2,c
  3381  001916  D005               	goto	l3214
  3382  001918  6C1D               	negf	___awdiv@quotient,c
  3383  00191A  1E1E               	comf	___awdiv@quotient+1,f,c
  3384  00191C  B0D8               	btfsc	status,0,c
  3385  00191E  2A1E               	incf	___awdiv@quotient+1,f,c
  3386  001920  D000               	goto	l3214
  3387  001922                     l3214:
  3388  001922  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  3389  001926  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  3390  00192A  0012               	return	
  3391  00192C  0012               	return		;funcret
  3392  00192E                     __end_of___awdiv:
  3393                           	opt stack 0
  3394                           tblptru	equ	0xFF8
  3395                           tblptrh	equ	0xFF7
  3396                           tblptrl	equ	0xFF6
  3397                           tablat	equ	0xFF5
  3398                           intcon	equ	0xFF2
  3399                           intcon2	equ	0xFF1
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postinc1	equ	0xFE6
  3403                           postdec1	equ	0xFE5
  3404                           fsr1h	equ	0xFE2
  3405                           fsr1l	equ	0xFE1
  3406                           postinc2	equ	0xFDE
  3407                           postdec2	equ	0xFDD
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _Battery_Filter *****************
  3413 ;; Defined at:
  3414 ;;		line 33 in file "Battery.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;		None
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  x               2   15[BANK0 ] int 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;		None               void
  3421 ;; Registers used:
  3422 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3428 ;;      Params:         0       0       0       0       0       0       0
  3429 ;;      Locals:         0       2       0       0       0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0
  3431 ;;      Totals:         0       2       0       0       0       0       0
  3432 ;;Total ram usage:        2 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    5
  3435 ;; This function calls:
  3436 ;;		___ftadd
  3437 ;;		___ftmul
  3438 ;;		___wmul
  3439 ;; This function is called by:
  3440 ;;		_Battery_Convert
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text22
  3445  001018                     __ptext22:
  3446                           	opt stack 0
  3447  001018                     _Battery_Filter:
  3448                           	opt stack 24
  3449                           
  3450                           ;Battery.c: 36: int x;
  3451                           ;Battery.c: 37: for(x = 0; x < 10; x++)
  3452                           
  3453                           ;incstack = 0
  3454  001018  0E00               	movlw	0
  3455  00101A  0100               	movlb	0	; () banked
  3456  00101C  6FDA               	movwf	(Battery_Filter@x+1)& (0+255),b
  3457  00101E  0E00               	movlw	0
  3458  001020  6FD9               	movwf	Battery_Filter@x& (0+255),b
  3459  001022                     l3052:
  3460                           
  3461                           ; BSR set to: 0
  3462  001022  0100               	movlb	0	; () banked
  3463  001024  BFDA               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
  3464  001026  D00A               	goto	l3056
  3465  001028  0100               	movlb	0	; () banked
  3466  00102A  51DA               	movf	(Battery_Filter@x+1)& (0+255),w,b
  3467  00102C  E16C               	bnz	l3062
  3468  00102E  0E0A               	movlw	10
  3469  001030  0100               	movlb	0	; () banked
  3470  001032  5DD9               	subwf	Battery_Filter@x& (0+255),w,b
  3471  001034  B0D8               	btfsc	status,0,c
  3472  001036  D067               	goto	l3062
  3473  001038  D001               	goto	l3056
  3474                           
  3475                           ; BSR set to: 0
  3476  00103A  D065               	goto	l3062
  3477  00103C                     l3056:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;Battery.c: 38: {
  3481                           ;Battery.c: 39: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  3482  00103C  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  3483  001040  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3484  001044  0E00               	movlw	0
  3485  001046  6E22               	movwf	___wmul@multiplicand+1,c
  3486  001048  0E03               	movlw	3
  3487  00104A  6E21               	movwf	___wmul@multiplicand,c
  3488  00104C  EC24  F00E         	call	___wmul	;wreg free
  3489  001050  0E60               	movlw	low _Battery_Volt
  3490  001052  241F               	addwf	?___wmul,w,c
  3491  001054  6ED9               	movwf	fsr2l,c
  3492  001056  0E00               	movlw	high _Battery_Volt
  3493  001058  2020               	addwfc	?___wmul+1,w,c
  3494  00105A  6EDA               	movwf	fsr2h,c
  3495  00105C  0E48               	movlw	72
  3496  00105E  6E2C               	movwf	___ftmul@f2,c
  3497  001060  0E61               	movlw	97
  3498  001062  6E2D               	movwf	___ftmul@f2+1,c
  3499  001064  0E3F               	movlw	63
  3500  001066  6E2E               	movwf	___ftmul@f2+2,c
  3501  001068  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  3502  00106C  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3503  001070  0E00               	movlw	0
  3504  001072  6E22               	movwf	___wmul@multiplicand+1,c
  3505  001074  0E03               	movlw	3
  3506  001076  6E21               	movwf	___wmul@multiplicand,c
  3507  001078  EC24  F00E         	call	___wmul	;wreg free
  3508  00107C  0E6E               	movlw	low _TempBattery_Volt
  3509  00107E  241F               	addwf	?___wmul,w,c
  3510  001080  6EE1               	movwf	fsr1l,c
  3511  001082  0E01               	movlw	high _TempBattery_Volt
  3512  001084  2020               	addwfc	?___wmul+1,w,c
  3513  001086  6EE2               	movwf	fsr1h,c
  3514  001088  CFE6 F029          	movff	postinc1,___ftmul@f1
  3515  00108C  CFE6 F02A          	movff	postinc1,___ftmul@f1+1
  3516  001090  CFE5 F02B          	movff	postdec1,___ftmul@f1+2
  3517  001094  EC62  F009         	call	___ftmul	;wreg free
  3518  001098  C029  F0D0         	movff	?___ftmul,___ftadd@f1
  3519  00109C  C02A  F0D1         	movff	?___ftmul+1,___ftadd@f1+1
  3520  0010A0  C02B  F0D2         	movff	?___ftmul+2,___ftadd@f1+2
  3521  0010A4  0EC3               	movlw	195
  3522  0010A6  6E2C               	movwf	___ftmul@f2,c
  3523  0010A8  0EF5               	movlw	245
  3524  0010AA  6E2D               	movwf	___ftmul@f2+1,c
  3525  0010AC  0E3D               	movlw	61
  3526  0010AE  6E2E               	movwf	___ftmul@f2+2,c
  3527  0010B0  0E00               	movlw	0
  3528  0010B2  6E22               	movwf	___wmul@multiplicand+1,c
  3529  0010B4  0E03               	movlw	3
  3530  0010B6  6E21               	movwf	___wmul@multiplicand,c
  3531  0010B8  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  3532  0010BC  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3533  0010C0  EC24  F00E         	call	___wmul	;wreg free
  3534  0010C4  0E32               	movlw	low _PrevBattery_Volt
  3535  0010C6  241F               	addwf	?___wmul,w,c
  3536  0010C8  6EE1               	movwf	fsr1l,c
  3537  0010CA  0E01               	movlw	high _PrevBattery_Volt
  3538  0010CC  2020               	addwfc	?___wmul+1,w,c
  3539  0010CE  6EE2               	movwf	fsr1h,c
  3540  0010D0  CFE6 F029          	movff	postinc1,___ftmul@f1
  3541  0010D4  CFE6 F02A          	movff	postinc1,___ftmul@f1+1
  3542  0010D8  CFE5 F02B          	movff	postdec1,___ftmul@f1+2
  3543  0010DC  EC62  F009         	call	___ftmul	;wreg free
  3544  0010E0  C029  F0D3         	movff	?___ftmul,___ftadd@f2
  3545  0010E4  C02A  F0D4         	movff	?___ftmul+1,___ftadd@f2+1
  3546  0010E8  C02B  F0D5         	movff	?___ftmul+2,___ftadd@f2+2
  3547  0010EC  EC25  F005         	call	___ftadd	;wreg free
  3548  0010F0  C0D0  FFDE         	movff	?___ftadd,postinc2
  3549  0010F4  C0D1  FFDE         	movff	?___ftadd+1,postinc2
  3550  0010F8  C0D2  FFDE         	movff	?___ftadd+2,postinc2
  3551  0010FC  0100               	movlb	0	; () banked
  3552  0010FE  4BD9               	infsnz	Battery_Filter@x& (0+255),f,b
  3553  001100  2BDA               	incf	(Battery_Filter@x+1)& (0+255),f,b
  3554  001102  D78F               	goto	l3052
  3555                           
  3556                           ; BSR set to: 0
  3557  001104  D000               	goto	l3062
  3558  001106                     l3062:
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;Battery.c: 40: }
  3562                           ;Battery.c: 41: for(x = 0; x < 10; x++)
  3563  001106  0E00               	movlw	0
  3564  001108  0100               	movlb	0	; () banked
  3565  00110A  6FDA               	movwf	(Battery_Filter@x+1)& (0+255),b
  3566  00110C  0E00               	movlw	0
  3567  00110E  6FD9               	movwf	Battery_Filter@x& (0+255),b
  3568  001110                     l3064:
  3569                           
  3570                           ; BSR set to: 0
  3571  001110  0100               	movlb	0	; () banked
  3572  001112  BFDA               	btfsc	(Battery_Filter@x+1)& (0+255),7,b
  3573  001114  D00A               	goto	l3068
  3574  001116  0100               	movlb	0	; () banked
  3575  001118  51DA               	movf	(Battery_Filter@x+1)& (0+255),w,b
  3576  00111A  E132               	bnz	l338
  3577  00111C  0E0A               	movlw	10
  3578  00111E  0100               	movlb	0	; () banked
  3579  001120  5DD9               	subwf	Battery_Filter@x& (0+255),w,b
  3580  001122  B0D8               	btfsc	status,0,c
  3581  001124  0012               	return	
  3582  001126  D001               	goto	l3068
  3583                           
  3584                           ; BSR set to: 0
  3585  001128  0012               	return	
  3586  00112A                     l3068:
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;Battery.c: 42: {
  3590                           ;Battery.c: 43: PrevBattery_Volt[x] = Battery_Volt[x];
  3591  00112A  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  3592  00112E  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3593  001132  0E00               	movlw	0
  3594  001134  6E22               	movwf	___wmul@multiplicand+1,c
  3595  001136  0E03               	movlw	3
  3596  001138  6E21               	movwf	___wmul@multiplicand,c
  3597  00113A  EC24  F00E         	call	___wmul	;wreg free
  3598  00113E  0E60               	movlw	low _Battery_Volt
  3599  001140  241F               	addwf	?___wmul,w,c
  3600  001142  6ED9               	movwf	fsr2l,c
  3601  001144  0E00               	movlw	high _Battery_Volt
  3602  001146  2020               	addwfc	?___wmul+1,w,c
  3603  001148  6EDA               	movwf	fsr2h,c
  3604  00114A  C0D9  F01F         	movff	Battery_Filter@x,___wmul@multiplier
  3605  00114E  C0DA  F020         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  3606  001152  0E00               	movlw	0
  3607  001154  6E22               	movwf	___wmul@multiplicand+1,c
  3608  001156  0E03               	movlw	3
  3609  001158  6E21               	movwf	___wmul@multiplicand,c
  3610  00115A  EC24  F00E         	call	___wmul	;wreg free
  3611  00115E  0E32               	movlw	low _PrevBattery_Volt
  3612  001160  241F               	addwf	?___wmul,w,c
  3613  001162  6EE1               	movwf	fsr1l,c
  3614  001164  0E01               	movlw	high _PrevBattery_Volt
  3615  001166  2020               	addwfc	?___wmul+1,w,c
  3616  001168  6EE2               	movwf	fsr1h,c
  3617  00116A  CFDE FFE6          	movff	postinc2,postinc1
  3618  00116E  CFDE FFE6          	movff	postinc2,postinc1
  3619  001172  CFDE FFE6          	movff	postinc2,postinc1
  3620  001176  0100               	movlb	0	; () banked
  3621  001178  4BD9               	infsnz	Battery_Filter@x& (0+255),f,b
  3622  00117A  2BDA               	incf	(Battery_Filter@x+1)& (0+255),f,b
  3623  00117C  D7C9               	goto	l3064
  3624                           
  3625                           ; BSR set to: 0
  3626  00117E  0012               	return	
  3627  001180                     l338:
  3628                           
  3629                           ; BSR set to: 0
  3630  001180  0012               	return		;funcret
  3631  001182                     __end_of_Battery_Filter:
  3632                           	opt stack 0
  3633                           tblptru	equ	0xFF8
  3634                           tblptrh	equ	0xFF7
  3635                           tblptrl	equ	0xFF6
  3636                           tablat	equ	0xFF5
  3637                           intcon	equ	0xFF2
  3638                           intcon2	equ	0xFF1
  3639                           postinc0	equ	0xFEE
  3640                           wreg	equ	0xFE8
  3641                           postinc1	equ	0xFE6
  3642                           postdec1	equ	0xFE5
  3643                           fsr1h	equ	0xFE2
  3644                           fsr1l	equ	0xFE1
  3645                           postinc2	equ	0xFDE
  3646                           postdec2	equ	0xFDD
  3647                           fsr2h	equ	0xFDA
  3648                           fsr2l	equ	0xFD9
  3649                           status	equ	0xFD8
  3650                           
  3651 ;; *************** function ___wmul *****************
  3652 ;; Defined at:
  3653 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  multiplier      2   30[COMRAM] unsigned int 
  3656 ;;  multiplicand    2   32[COMRAM] unsigned int 
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;  product         2   34[COMRAM] unsigned int 
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  2   30[COMRAM] unsigned int 
  3661 ;; Registers used:
  3662 ;;		wreg, status,2, status,0, prodl, prodh
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3668 ;;      Params:         4       0       0       0       0       0       0
  3669 ;;      Locals:         2       0       0       0       0       0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0
  3671 ;;      Totals:         6       0       0       0       0       0       0
  3672 ;;Total ram usage:        6 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    3
  3675 ;; This function calls:
  3676 ;;		Nothing
  3677 ;; This function is called by:
  3678 ;;		_Battery_Fault
  3679 ;;		_Battery_Filter
  3680 ;;		_Battery_Convert
  3681 ;;		_Temp_Fault
  3682 ;;		_Temp_Filter
  3683 ;;		_Temp_Convert
  3684 ;;		_eval_poly
  3685 ;;		_Battery_Get
  3686 ;;		_Tempeture_Get
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           	psect	text23
  3691  001C48                     __ptext23:
  3692                           	opt stack 0
  3693  001C48                     ___wmul:
  3694                           	opt stack 26
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;incstack = 0
  3698  001C48  501F               	movf	___wmul@multiplier,w,c
  3699  001C4A  0221               	mulwf	___wmul@multiplicand,c
  3700  001C4C  CFF3 F023          	movff	prodl,___wmul@product
  3701  001C50  CFF4 F024          	movff	prodh,___wmul@product+1
  3702  001C54  501F               	movf	___wmul@multiplier,w,c
  3703  001C56  0222               	mulwf	___wmul@multiplicand+1,c
  3704  001C58  50F3               	movf	prodl,w,c
  3705  001C5A  2624               	addwf	___wmul@product+1,f,c
  3706  001C5C  5020               	movf	___wmul@multiplier+1,w,c
  3707  001C5E  0221               	mulwf	___wmul@multiplicand,c
  3708  001C60  50F3               	movf	prodl,w,c
  3709  001C62  2624               	addwf	___wmul@product+1,f,c
  3710  001C64  C023  F01F         	movff	___wmul@product,?___wmul
  3711  001C68  C024  F020         	movff	___wmul@product+1,?___wmul+1
  3712  001C6C  0012               	return	
  3713  001C6E  0012               	return		;funcret
  3714  001C70                     __end_of___wmul:
  3715                           	opt stack 0
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           prodh	equ	0xFF4
  3721                           prodl	equ	0xFF3
  3722                           intcon	equ	0xFF2
  3723                           intcon2	equ	0xFF1
  3724                           postinc0	equ	0xFEE
  3725                           wreg	equ	0xFE8
  3726                           postinc1	equ	0xFE6
  3727                           postdec1	equ	0xFE5
  3728                           fsr1h	equ	0xFE2
  3729                           fsr1l	equ	0xFE1
  3730                           postinc2	equ	0xFDE
  3731                           postdec2	equ	0xFDD
  3732                           fsr2h	equ	0xFDA
  3733                           fsr2l	equ	0xFD9
  3734                           status	equ	0xFD8
  3735                           
  3736 ;; *************** function ___ftmul *****************
  3737 ;; Defined at:
  3738 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;  f1              3   40[COMRAM] float 
  3741 ;;  f2              3   43[COMRAM] float 
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  3744 ;;  sign            1    5[BANK0 ] unsigned char 
  3745 ;;  cntr            1    4[BANK0 ] unsigned char 
  3746 ;;  exp             1    0[BANK0 ] unsigned char 
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  3   40[COMRAM] float 
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3756 ;;      Params:         6       0       0       0       0       0       0
  3757 ;;      Locals:         0       6       0       0       0       0       0
  3758 ;;      Temps:          3       0       0       0       0       0       0
  3759 ;;      Totals:         9       6       0       0       0       0       0
  3760 ;;Total ram usage:       15 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    4
  3763 ;; This function calls:
  3764 ;;		___ftpack
  3765 ;; This function is called by:
  3766 ;;		_Battery_Filter
  3767 ;;		_Temp_Filter
  3768 ;;		_Temp_Convert
  3769 ;;		_log
  3770 ;;		_eval_poly
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           	psect	text24
  3775  0012C4                     __ptext24:
  3776                           	opt stack 0
  3777  0012C4                     ___ftmul:
  3778                           	opt stack 23
  3779                           
  3780                           ;incstack = 0
  3781  0012C4  C02B  F02F         	movff	___ftmul@f1+2,??___ftmul
  3782  0012C8  6A30               	clrf	(??___ftmul+1)& (0+255),c
  3783  0012CA  6A31               	clrf	(??___ftmul+2)& (0+255),c
  3784  0012CC  342A               	rlcf	___ftmul@f1+1,w,c
  3785  0012CE  362F               	rlcf	??___ftmul& (0+255),f,c
  3786  0012D0  E301               	bnc	u2451
  3787  0012D2  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  3788  0012D4                     u2451:
  3789  0012D4  502F               	movf	??___ftmul,w,c
  3790  0012D6  0100               	movlb	0	; () banked
  3791  0012D8  6FCA               	movwf	___ftmul@exp& (0+255),b
  3792  0012DA  0100               	movlb	0	; () banked
  3793  0012DC  51CA               	movf	___ftmul@exp& (0+255),w,b
  3794  0012DE  A4D8               	btfss	status,2,c
  3795  0012E0  D007               	goto	l2990
  3796                           
  3797                           ; BSR set to: 0
  3798  0012E2  0E00               	movlw	0
  3799  0012E4  6E29               	movwf	?___ftmul,c
  3800  0012E6  0E00               	movlw	0
  3801  0012E8  6E2A               	movwf	?___ftmul+1,c
  3802  0012EA  0E00               	movlw	0
  3803  0012EC  6E2B               	movwf	?___ftmul+2,c
  3804                           
  3805                           ; BSR set to: 0
  3806  0012EE  0012               	return	
  3807  0012F0                     l2990:
  3808                           
  3809                           ; BSR set to: 0
  3810  0012F0  C02E  F02F         	movff	___ftmul@f2+2,??___ftmul
  3811  0012F4  6A30               	clrf	(??___ftmul+1)& (0+255),c
  3812  0012F6  6A31               	clrf	(??___ftmul+2)& (0+255),c
  3813  0012F8  342D               	rlcf	___ftmul@f2+1,w,c
  3814  0012FA  362F               	rlcf	??___ftmul& (0+255),f,c
  3815  0012FC  E301               	bnc	u2471
  3816  0012FE  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  3817  001300                     u2471:
  3818  001300  502F               	movf	??___ftmul,w,c
  3819  001302  0100               	movlb	0	; () banked
  3820  001304  6FCF               	movwf	___ftmul@sign& (0+255),b
  3821  001306  0100               	movlb	0	; () banked
  3822  001308  51CF               	movf	___ftmul@sign& (0+255),w,b
  3823  00130A  A4D8               	btfss	status,2,c
  3824  00130C  D007               	goto	l2996
  3825                           
  3826                           ; BSR set to: 0
  3827  00130E  0E00               	movlw	0
  3828  001310  6E29               	movwf	?___ftmul,c
  3829  001312  0E00               	movlw	0
  3830  001314  6E2A               	movwf	?___ftmul+1,c
  3831  001316  0E00               	movlw	0
  3832  001318  6E2B               	movwf	?___ftmul+2,c
  3833                           
  3834                           ; BSR set to: 0
  3835  00131A  0012               	return	
  3836  00131C                     l2996:
  3837                           
  3838                           ; BSR set to: 0
  3839  00131C  0100               	movlb	0	; () banked
  3840  00131E  51CF               	movf	___ftmul@sign& (0+255),w,b
  3841  001320  0F7B               	addlw	123
  3842  001322  0100               	movlb	0	; () banked
  3843  001324  27CA               	addwf	___ftmul@exp& (0+255),f,b
  3844                           
  3845                           ; BSR set to: 0
  3846  001326  C02B  F0CF         	movff	___ftmul@f1+2,___ftmul@sign
  3847  00132A  502E               	movf	___ftmul@f2+2,w,c
  3848  00132C  0100               	movlb	0	; () banked
  3849  00132E  1BCF               	xorwf	___ftmul@sign& (0+255),f,b
  3850  001330  0E80               	movlw	128
  3851  001332  0100               	movlb	0	; () banked
  3852  001334  17CF               	andwf	___ftmul@sign& (0+255),f,b
  3853                           
  3854                           ; BSR set to: 0
  3855  001336  8E2A               	bsf	___ftmul@f1+1,7,c
  3856                           
  3857                           ; BSR set to: 0
  3858  001338  8E2D               	bsf	___ftmul@f2+1,7,c
  3859                           
  3860                           ; BSR set to: 0
  3861  00133A  0EFF               	movlw	255
  3862  00133C  162C               	andwf	___ftmul@f2,f,c
  3863  00133E  0EFF               	movlw	255
  3864  001340  162D               	andwf	___ftmul@f2+1,f,c
  3865  001342  0E00               	movlw	0
  3866  001344  162E               	andwf	___ftmul@f2+2,f,c
  3867                           
  3868                           ; BSR set to: 0
  3869  001346  0E00               	movlw	0
  3870  001348  0100               	movlb	0	; () banked
  3871  00134A  6FCB               	movwf	___ftmul@f3_as_product& (0+255),b
  3872  00134C  0E00               	movlw	0
  3873  00134E  0100               	movlb	0	; () banked
  3874  001350  6FCC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3875  001352  0E00               	movlw	0
  3876  001354  0100               	movlb	0	; () banked
  3877  001356  6FCD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3878                           
  3879                           ; BSR set to: 0
  3880  001358  0E07               	movlw	7
  3881  00135A  0100               	movlb	0	; () banked
  3882  00135C  6FCE               	movwf	___ftmul@cntr& (0+255),b
  3883  00135E  D000               	goto	l3010
  3884  001360                     l3010:
  3885                           
  3886                           ; BSR set to: 0
  3887  001360  A029               	btfss	___ftmul@f1,0,c
  3888  001362  D00A               	goto	l3014
  3889                           
  3890                           ; BSR set to: 0
  3891  001364  502C               	movf	___ftmul@f2,w,c
  3892  001366  0100               	movlb	0	; () banked
  3893  001368  27CB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3894  00136A  502D               	movf	___ftmul@f2+1,w,c
  3895  00136C  0100               	movlb	0	; () banked
  3896  00136E  23CC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3897  001370  502E               	movf	___ftmul@f2+2,w,c
  3898  001372  0100               	movlb	0	; () banked
  3899  001374  23CD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3900  001376  D000               	goto	l3014
  3901  001378                     l3014:
  3902                           
  3903                           ; BSR set to: 0
  3904  001378  90D8               	bcf	status,0,c
  3905  00137A  322B               	rrcf	___ftmul@f1+2,f,c
  3906  00137C  322A               	rrcf	___ftmul@f1+1,f,c
  3907  00137E  3229               	rrcf	___ftmul@f1,f,c
  3908  001380  90D8               	bcf	status,0,c
  3909  001382  362C               	rlcf	___ftmul@f2,f,c
  3910  001384  362D               	rlcf	___ftmul@f2+1,f,c
  3911  001386  362E               	rlcf	___ftmul@f2+2,f,c
  3912                           
  3913                           ; BSR set to: 0
  3914  001388  0100               	movlb	0	; () banked
  3915  00138A  2FCE               	decfsz	___ftmul@cntr& (0+255),f,b
  3916  00138C  D7E9               	goto	l3010
  3917  00138E  D000               	goto	l3018
  3918  001390                     l3018:
  3919                           
  3920                           ; BSR set to: 0
  3921  001390  0E09               	movlw	9
  3922  001392  0100               	movlb	0	; () banked
  3923  001394  6FCE               	movwf	___ftmul@cntr& (0+255),b
  3924  001396  D000               	goto	l3020
  3925  001398                     l3020:
  3926                           
  3927                           ; BSR set to: 0
  3928  001398  A029               	btfss	___ftmul@f1,0,c
  3929  00139A  D00A               	goto	l3024
  3930                           
  3931                           ; BSR set to: 0
  3932  00139C  502C               	movf	___ftmul@f2,w,c
  3933  00139E  0100               	movlb	0	; () banked
  3934  0013A0  27CB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3935  0013A2  502D               	movf	___ftmul@f2+1,w,c
  3936  0013A4  0100               	movlb	0	; () banked
  3937  0013A6  23CC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3938  0013A8  502E               	movf	___ftmul@f2+2,w,c
  3939  0013AA  0100               	movlb	0	; () banked
  3940  0013AC  23CD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3941  0013AE  D000               	goto	l3024
  3942  0013B0                     l3024:
  3943                           
  3944                           ; BSR set to: 0
  3945  0013B0  90D8               	bcf	status,0,c
  3946  0013B2  322B               	rrcf	___ftmul@f1+2,f,c
  3947  0013B4  322A               	rrcf	___ftmul@f1+1,f,c
  3948  0013B6  3229               	rrcf	___ftmul@f1,f,c
  3949  0013B8  0100               	movlb	0	; () banked
  3950  0013BA  90D8               	bcf	status,0,c
  3951  0013BC  33CD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3952  0013BE  33CC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3953  0013C0  33CB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3954                           
  3955                           ; BSR set to: 0
  3956  0013C2  0100               	movlb	0	; () banked
  3957  0013C4  2FCE               	decfsz	___ftmul@cntr& (0+255),f,b
  3958  0013C6  D7E8               	goto	l3020
  3959  0013C8  D000               	goto	l3028
  3960  0013CA                     l3028:
  3961                           
  3962                           ; BSR set to: 0
  3963  0013CA  C0CB  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  3964  0013CE  C0CC  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3965  0013D2  C0CD  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3966  0013D6  C0CA  F01A         	movff	___ftmul@exp,___ftpack@exp
  3967  0013DA  C0CF  F01B         	movff	___ftmul@sign,___ftpack@sign
  3968  0013DE  EC46  F00B         	call	___ftpack	;wreg free
  3969  0013E2  C017  F029         	movff	?___ftpack,?___ftmul
  3970  0013E6  C018  F02A         	movff	?___ftpack+1,?___ftmul+1
  3971  0013EA  C019  F02B         	movff	?___ftpack+2,?___ftmul+2
  3972  0013EE  0012               	return	
  3973  0013F0  0012               	return		;funcret
  3974  0013F2                     __end_of___ftmul:
  3975                           	opt stack 0
  3976                           tblptru	equ	0xFF8
  3977                           tblptrh	equ	0xFF7
  3978                           tblptrl	equ	0xFF6
  3979                           tablat	equ	0xFF5
  3980                           prodh	equ	0xFF4
  3981                           prodl	equ	0xFF3
  3982                           intcon	equ	0xFF2
  3983                           intcon2	equ	0xFF1
  3984                           postinc0	equ	0xFEE
  3985                           wreg	equ	0xFE8
  3986                           postinc1	equ	0xFE6
  3987                           postdec1	equ	0xFE5
  3988                           fsr1h	equ	0xFE2
  3989                           fsr1l	equ	0xFE1
  3990                           postinc2	equ	0xFDE
  3991                           postdec2	equ	0xFDD
  3992                           fsr2h	equ	0xFDA
  3993                           fsr2l	equ	0xFD9
  3994                           status	equ	0xFD8
  3995                           
  3996 ;; *************** function ___ftadd *****************
  3997 ;; Defined at:
  3998 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  f1              3    6[BANK0 ] float 
  4001 ;;  f2              3    9[BANK0 ] float 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  exp1            1   14[BANK0 ] unsigned char 
  4004 ;;  exp2            1   13[BANK0 ] unsigned char 
  4005 ;;  sign            1   12[BANK0 ] unsigned char 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  3    6[BANK0 ] float 
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4015 ;;      Params:         0       6       0       0       0       0       0
  4016 ;;      Locals:         0       3       0       0       0       0       0
  4017 ;;      Temps:          3       0       0       0       0       0       0
  4018 ;;      Totals:         3       9       0       0       0       0       0
  4019 ;;Total ram usage:       12 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    4
  4022 ;; This function calls:
  4023 ;;		___ftpack
  4024 ;; This function is called by:
  4025 ;;		_Battery_Filter
  4026 ;;		_Battery_Convert
  4027 ;;		_Temp_Filter
  4028 ;;		_Temp_Convert
  4029 ;;		___ftsub
  4030 ;;		_log
  4031 ;;		_eval_poly
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text25
  4036  000A4A                     __ptext25:
  4037                           	opt stack 0
  4038  000A4A                     ___ftadd:
  4039                           	opt stack 23
  4040                           
  4041                           ;incstack = 0
  4042  000A4A  C0D2  F032         	movff	___ftadd@f1+2,??___ftadd
  4043  000A4E  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4044  000A50  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4045  000A52  0100               	movlb	0	; () banked
  4046  000A54  35D1               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4047  000A56  3632               	rlcf	??___ftadd& (0+255),f,c
  4048  000A58  E301               	bnc	u2241
  4049  000A5A  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4050  000A5C                     u2241:
  4051  000A5C  5032               	movf	??___ftadd,w,c
  4052  000A5E  0100               	movlb	0	; () banked
  4053  000A60  6FD8               	movwf	___ftadd@exp1& (0+255),b
  4054  000A62  C0D5  F032         	movff	___ftadd@f2+2,??___ftadd
  4055  000A66  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4056  000A68  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4057  000A6A  0100               	movlb	0	; () banked
  4058  000A6C  35D4               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4059  000A6E  3632               	rlcf	??___ftadd& (0+255),f,c
  4060  000A70  E301               	bnc	u2251
  4061  000A72  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4062  000A74                     u2251:
  4063  000A74  5032               	movf	??___ftadd,w,c
  4064  000A76  0100               	movlb	0	; () banked
  4065  000A78  6FD7               	movwf	___ftadd@exp2& (0+255),b
  4066                           
  4067                           ; BSR set to: 0
  4068  000A7A  0100               	movlb	0	; () banked
  4069  000A7C  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4070  000A7E  0100               	movlb	0	; () banked
  4071  000A80  B4D8               	btfsc	status,2,c
  4072  000A82  D00F               	goto	l817
  4073                           
  4074                           ; BSR set to: 0
  4075  000A84  0100               	movlb	0	; () banked
  4076  000A86  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4077  000A88  0100               	movlb	0	; () banked
  4078  000A8A  5DD8               	subwf	___ftadd@exp1& (0+255),w,b
  4079  000A8C  B0D8               	btfsc	status,0,c
  4080  000A8E  D010               	goto	l2922
  4081                           
  4082                           ; BSR set to: 0
  4083  000A90  0100               	movlb	0	; () banked
  4084  000A92  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4085  000A94  0800               	sublw	0
  4086  000A96  0100               	movlb	0	; () banked
  4087  000A98  25D7               	addwf	___ftadd@exp2& (0+255),w,b
  4088  000A9A  6E32               	movwf	??___ftadd& (0+255),c
  4089  000A9C  0E18               	movlw	24
  4090  000A9E  6432               	cpfsgt	??___ftadd,c
  4091  000AA0  D007               	goto	l2922
  4092  000AA2                     l817:
  4093                           
  4094                           ; BSR set to: 0
  4095  000AA2  C0D3  F0D0         	movff	___ftadd@f2,?___ftadd
  4096  000AA6  C0D4  F0D1         	movff	___ftadd@f2+1,?___ftadd+1
  4097  000AAA  C0D5  F0D2         	movff	___ftadd@f2+2,?___ftadd+2
  4098  000AAE  0012               	return	
  4099  000AB0                     l2922:
  4100                           
  4101                           ; BSR set to: 0
  4102  000AB0  0100               	movlb	0	; () banked
  4103  000AB2  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4104  000AB4  0100               	movlb	0	; () banked
  4105  000AB6  B4D8               	btfsc	status,2,c
  4106  000AB8  D00F               	goto	l821
  4107                           
  4108                           ; BSR set to: 0
  4109  000ABA  0100               	movlb	0	; () banked
  4110  000ABC  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4111  000ABE  0100               	movlb	0	; () banked
  4112  000AC0  5DD7               	subwf	___ftadd@exp2& (0+255),w,b
  4113  000AC2  B0D8               	btfsc	status,0,c
  4114  000AC4  D010               	goto	l2928
  4115                           
  4116                           ; BSR set to: 0
  4117  000AC6  0100               	movlb	0	; () banked
  4118  000AC8  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4119  000ACA  0800               	sublw	0
  4120  000ACC  0100               	movlb	0	; () banked
  4121  000ACE  25D8               	addwf	___ftadd@exp1& (0+255),w,b
  4122  000AD0  6E32               	movwf	??___ftadd& (0+255),c
  4123  000AD2  0E18               	movlw	24
  4124  000AD4  6432               	cpfsgt	??___ftadd,c
  4125  000AD6  D007               	goto	l2928
  4126  000AD8                     l821:
  4127                           
  4128                           ; BSR set to: 0
  4129  000AD8  C0D0  F0D0         	movff	___ftadd@f1,?___ftadd
  4130  000ADC  C0D1  F0D1         	movff	___ftadd@f1+1,?___ftadd+1
  4131  000AE0  C0D2  F0D2         	movff	___ftadd@f1+2,?___ftadd+2
  4132  000AE4  0012               	return	
  4133  000AE6                     l2928:
  4134                           
  4135                           ; BSR set to: 0
  4136  000AE6  0E06               	movlw	6
  4137  000AE8  0100               	movlb	0	; () banked
  4138  000AEA  6FD6               	movwf	___ftadd@sign& (0+255),b
  4139                           
  4140                           ; BSR set to: 0
  4141  000AEC  0100               	movlb	0	; () banked
  4142  000AEE  AFD2               	btfss	(___ftadd@f1+2)& (0+255),7,b
  4143  000AF0  D003               	goto	l2934
  4144                           
  4145                           ; BSR set to: 0
  4146  000AF2  0100               	movlb	0	; () banked
  4147  000AF4  8FD6               	bsf	___ftadd@sign& (0+255),7,b
  4148  000AF6  D000               	goto	l2934
  4149  000AF8                     l2934:
  4150                           
  4151                           ; BSR set to: 0
  4152  000AF8  0100               	movlb	0	; () banked
  4153  000AFA  AFD5               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4154  000AFC  D002               	goto	l823
  4155                           
  4156                           ; BSR set to: 0
  4157  000AFE  0100               	movlb	0	; () banked
  4158  000B00  8DD6               	bsf	___ftadd@sign& (0+255),6,b
  4159  000B02                     l823:
  4160                           
  4161                           ; BSR set to: 0
  4162  000B02  0100               	movlb	0	; () banked
  4163  000B04  8FD1               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4164                           
  4165                           ; BSR set to: 0
  4166  000B06  0EFF               	movlw	255
  4167  000B08  0100               	movlb	0	; () banked
  4168  000B0A  17D0               	andwf	___ftadd@f1& (0+255),f,b
  4169  000B0C  0EFF               	movlw	255
  4170  000B0E  0100               	movlb	0	; () banked
  4171  000B10  17D1               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4172  000B12  0E00               	movlw	0
  4173  000B14  0100               	movlb	0	; () banked
  4174  000B16  17D2               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4175  000B18  0100               	movlb	0	; () banked
  4176  000B1A  8FD4               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4177                           
  4178                           ; BSR set to: 0
  4179  000B1C  0EFF               	movlw	255
  4180  000B1E  0100               	movlb	0	; () banked
  4181  000B20  17D3               	andwf	___ftadd@f2& (0+255),f,b
  4182  000B22  0EFF               	movlw	255
  4183  000B24  0100               	movlb	0	; () banked
  4184  000B26  17D4               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4185  000B28  0E00               	movlw	0
  4186  000B2A  0100               	movlb	0	; () banked
  4187  000B2C  17D5               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4188                           
  4189                           ; BSR set to: 0
  4190  000B2E  0100               	movlb	0	; () banked
  4191  000B30  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4192  000B32  0100               	movlb	0	; () banked
  4193  000B34  5DD8               	subwf	___ftadd@exp1& (0+255),w,b
  4194  000B36  B0D8               	btfsc	status,0,c
  4195  000B38  D027               	goto	l2954
  4196  000B3A                     l2944:
  4197                           
  4198                           ; BSR set to: 0
  4199  000B3A  0100               	movlb	0	; () banked
  4200  000B3C  90D8               	bcf	status,0,c
  4201  000B3E  37D3               	rlcf	___ftadd@f2& (0+255),f,b
  4202  000B40  37D4               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4203  000B42  37D5               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4204  000B44  0100               	movlb	0	; () banked
  4205  000B46  07D7               	decf	___ftadd@exp2& (0+255),f,b
  4206                           
  4207                           ; BSR set to: 0
  4208  000B48  0100               	movlb	0	; () banked
  4209  000B4A  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4210  000B4C  0100               	movlb	0	; () banked
  4211  000B4E  19D7               	xorwf	___ftadd@exp2& (0+255),w,b
  4212  000B50  B4D8               	btfsc	status,2,c
  4213  000B52  D012               	goto	l2952
  4214                           
  4215                           ; BSR set to: 0
  4216  000B54  0100               	movlb	0	; () banked
  4217  000B56  07D6               	decf	___ftadd@sign& (0+255),f,b
  4218  000B58  C0D6  F032         	movff	___ftadd@sign,??___ftadd
  4219  000B5C  0E07               	movlw	7
  4220  000B5E  1632               	andwf	??___ftadd,f,c
  4221  000B60  B4D8               	btfsc	status,2,c
  4222  000B62  D00A               	goto	l2952
  4223  000B64  D7EA               	goto	l2944
  4224                           
  4225                           ; BSR set to: 0
  4226                           
  4227                           ; BSR set to: 0
  4228  000B66  D008               	goto	l2952
  4229  000B68                     l2950:
  4230                           
  4231                           ; BSR set to: 0
  4232  000B68  0100               	movlb	0	; () banked
  4233  000B6A  90D8               	bcf	status,0,c
  4234  000B6C  33D2               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4235  000B6E  33D1               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4236  000B70  33D0               	rrcf	___ftadd@f1& (0+255),f,b
  4237  000B72  0100               	movlb	0	; () banked
  4238  000B74  2BD8               	incf	___ftadd@exp1& (0+255),f,b
  4239  000B76  D000               	goto	l2952
  4240  000B78                     l2952:
  4241                           
  4242                           ; BSR set to: 0
  4243  000B78  0100               	movlb	0	; () banked
  4244  000B7A  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4245  000B7C  0100               	movlb	0	; () banked
  4246  000B7E  19D8               	xorwf	___ftadd@exp1& (0+255),w,b
  4247  000B80  B4D8               	btfsc	status,2,c
  4248  000B82  D02F               	goto	l832
  4249  000B84  D7F1               	goto	l2950
  4250                           
  4251                           ; BSR set to: 0
  4252  000B86  D02D               	goto	l832
  4253  000B88                     l2954:
  4254                           
  4255                           ; BSR set to: 0
  4256  000B88  0100               	movlb	0	; () banked
  4257  000B8A  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4258  000B8C  0100               	movlb	0	; () banked
  4259  000B8E  5DD7               	subwf	___ftadd@exp2& (0+255),w,b
  4260  000B90  B0D8               	btfsc	status,0,c
  4261  000B92  D027               	goto	l832
  4262  000B94                     l2956:
  4263                           
  4264                           ; BSR set to: 0
  4265  000B94  0100               	movlb	0	; () banked
  4266  000B96  90D8               	bcf	status,0,c
  4267  000B98  37D0               	rlcf	___ftadd@f1& (0+255),f,b
  4268  000B9A  37D1               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4269  000B9C  37D2               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4270  000B9E  0100               	movlb	0	; () banked
  4271  000BA0  07D8               	decf	___ftadd@exp1& (0+255),f,b
  4272                           
  4273                           ; BSR set to: 0
  4274  000BA2  0100               	movlb	0	; () banked
  4275  000BA4  51D8               	movf	___ftadd@exp1& (0+255),w,b
  4276  000BA6  0100               	movlb	0	; () banked
  4277  000BA8  19D7               	xorwf	___ftadd@exp2& (0+255),w,b
  4278  000BAA  B4D8               	btfsc	status,2,c
  4279  000BAC  D012               	goto	l2964
  4280                           
  4281                           ; BSR set to: 0
  4282  000BAE  0100               	movlb	0	; () banked
  4283  000BB0  07D6               	decf	___ftadd@sign& (0+255),f,b
  4284  000BB2  C0D6  F032         	movff	___ftadd@sign,??___ftadd
  4285  000BB6  0E07               	movlw	7
  4286  000BB8  1632               	andwf	??___ftadd,f,c
  4287  000BBA  B4D8               	btfsc	status,2,c
  4288  000BBC  D00A               	goto	l2964
  4289  000BBE  D7EA               	goto	l2956
  4290                           
  4291                           ; BSR set to: 0
  4292                           
  4293                           ; BSR set to: 0
  4294  000BC0  D008               	goto	l2964
  4295  000BC2                     l2962:
  4296                           
  4297                           ; BSR set to: 0
  4298  000BC2  0100               	movlb	0	; () banked
  4299  000BC4  90D8               	bcf	status,0,c
  4300  000BC6  33D5               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4301  000BC8  33D4               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4302  000BCA  33D3               	rrcf	___ftadd@f2& (0+255),f,b
  4303  000BCC  0100               	movlb	0	; () banked
  4304  000BCE  2BD7               	incf	___ftadd@exp2& (0+255),f,b
  4305  000BD0  D000               	goto	l2964
  4306  000BD2                     l2964:
  4307                           
  4308                           ; BSR set to: 0
  4309  000BD2  0100               	movlb	0	; () banked
  4310  000BD4  51D7               	movf	___ftadd@exp2& (0+255),w,b
  4311  000BD6  0100               	movlb	0	; () banked
  4312  000BD8  19D8               	xorwf	___ftadd@exp1& (0+255),w,b
  4313  000BDA  B4D8               	btfsc	status,2,c
  4314  000BDC  D002               	goto	l832
  4315  000BDE  D7F1               	goto	l2962
  4316                           
  4317                           ; BSR set to: 0
  4318  000BE0  D000               	goto	l832
  4319  000BE2                     l832:
  4320                           
  4321                           ; BSR set to: 0
  4322  000BE2  0100               	movlb	0	; () banked
  4323  000BE4  AFD6               	btfss	___ftadd@sign& (0+255),7,b
  4324  000BE6  D012               	goto	l841
  4325                           
  4326                           ; BSR set to: 0
  4327  000BE8  0EFF               	movlw	255
  4328  000BEA  0100               	movlb	0	; () banked
  4329  000BEC  1BD0               	xorwf	___ftadd@f1& (0+255),f,b
  4330  000BEE  0EFF               	movlw	255
  4331  000BF0  0100               	movlb	0	; () banked
  4332  000BF2  1BD1               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4333  000BF4  0EFF               	movlw	255
  4334  000BF6  0100               	movlb	0	; () banked
  4335  000BF8  1BD2               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4336  000BFA  0E01               	movlw	1
  4337  000BFC  0100               	movlb	0	; () banked
  4338  000BFE  27D0               	addwf	___ftadd@f1& (0+255),f,b
  4339  000C00  0E00               	movlw	0
  4340  000C02  0100               	movlb	0	; () banked
  4341  000C04  23D1               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4342  000C06  0E00               	movlw	0
  4343  000C08  0100               	movlb	0	; () banked
  4344  000C0A  23D2               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4345  000C0C                     l841:
  4346                           
  4347                           ; BSR set to: 0
  4348  000C0C  0100               	movlb	0	; () banked
  4349  000C0E  ADD6               	btfss	___ftadd@sign& (0+255),6,b
  4350  000C10  D013               	goto	l2970
  4351                           
  4352                           ; BSR set to: 0
  4353  000C12  0EFF               	movlw	255
  4354  000C14  0100               	movlb	0	; () banked
  4355  000C16  1BD3               	xorwf	___ftadd@f2& (0+255),f,b
  4356  000C18  0EFF               	movlw	255
  4357  000C1A  0100               	movlb	0	; () banked
  4358  000C1C  1BD4               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4359  000C1E  0EFF               	movlw	255
  4360  000C20  0100               	movlb	0	; () banked
  4361  000C22  1BD5               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4362  000C24  0E01               	movlw	1
  4363  000C26  0100               	movlb	0	; () banked
  4364  000C28  27D3               	addwf	___ftadd@f2& (0+255),f,b
  4365  000C2A  0E00               	movlw	0
  4366  000C2C  0100               	movlb	0	; () banked
  4367  000C2E  23D4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4368  000C30  0E00               	movlw	0
  4369  000C32  0100               	movlb	0	; () banked
  4370  000C34  23D5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4371  000C36  D000               	goto	l2970
  4372  000C38                     l2970:
  4373                           
  4374                           ; BSR set to: 0
  4375  000C38  0E00               	movlw	0
  4376  000C3A  0100               	movlb	0	; () banked
  4377  000C3C  6FD6               	movwf	___ftadd@sign& (0+255),b
  4378                           
  4379                           ; BSR set to: 0
  4380  000C3E  0100               	movlb	0	; () banked
  4381  000C40  51D0               	movf	___ftadd@f1& (0+255),w,b
  4382  000C42  0100               	movlb	0	; () banked
  4383  000C44  27D3               	addwf	___ftadd@f2& (0+255),f,b
  4384  000C46  0100               	movlb	0	; () banked
  4385  000C48  51D1               	movf	(___ftadd@f1+1)& (0+255),w,b
  4386  000C4A  0100               	movlb	0	; () banked
  4387  000C4C  23D4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4388  000C4E  0100               	movlb	0	; () banked
  4389  000C50  51D2               	movf	(___ftadd@f1+2)& (0+255),w,b
  4390  000C52  0100               	movlb	0	; () banked
  4391  000C54  23D5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4392                           
  4393                           ; BSR set to: 0
  4394  000C56  0100               	movlb	0	; () banked
  4395  000C58  AFD5               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4396  000C5A  D016               	goto	l2980
  4397                           
  4398                           ; BSR set to: 0
  4399  000C5C  0EFF               	movlw	255
  4400  000C5E  0100               	movlb	0	; () banked
  4401  000C60  1BD3               	xorwf	___ftadd@f2& (0+255),f,b
  4402  000C62  0EFF               	movlw	255
  4403  000C64  0100               	movlb	0	; () banked
  4404  000C66  1BD4               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4405  000C68  0EFF               	movlw	255
  4406  000C6A  0100               	movlb	0	; () banked
  4407  000C6C  1BD5               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4408  000C6E  0E01               	movlw	1
  4409  000C70  0100               	movlb	0	; () banked
  4410  000C72  27D3               	addwf	___ftadd@f2& (0+255),f,b
  4411  000C74  0E00               	movlw	0
  4412  000C76  0100               	movlb	0	; () banked
  4413  000C78  23D4               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4414  000C7A  0E00               	movlw	0
  4415  000C7C  0100               	movlb	0	; () banked
  4416  000C7E  23D5               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4417                           
  4418                           ; BSR set to: 0
  4419  000C80  0E01               	movlw	1
  4420  000C82  0100               	movlb	0	; () banked
  4421  000C84  6FD6               	movwf	___ftadd@sign& (0+255),b
  4422  000C86  D000               	goto	l2980
  4423  000C88                     l2980:
  4424                           
  4425                           ; BSR set to: 0
  4426  000C88  C0D3  F017         	movff	___ftadd@f2,___ftpack@arg
  4427  000C8C  C0D4  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  4428  000C90  C0D5  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  4429  000C94  C0D8  F01A         	movff	___ftadd@exp1,___ftpack@exp
  4430  000C98  C0D6  F01B         	movff	___ftadd@sign,___ftpack@sign
  4431  000C9C  EC46  F00B         	call	___ftpack	;wreg free
  4432  000CA0  C017  F0D0         	movff	?___ftpack,?___ftadd
  4433  000CA4  C018  F0D1         	movff	?___ftpack+1,?___ftadd+1
  4434  000CA8  C019  F0D2         	movff	?___ftpack+2,?___ftadd+2
  4435  000CAC  0012               	return	
  4436  000CAE  0012               	return		;funcret
  4437  000CB0                     __end_of___ftadd:
  4438                           	opt stack 0
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           prodh	equ	0xFF4
  4444                           prodl	equ	0xFF3
  4445                           intcon	equ	0xFF2
  4446                           intcon2	equ	0xFF1
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           postinc1	equ	0xFE6
  4450                           postdec1	equ	0xFE5
  4451                           fsr1h	equ	0xFE2
  4452                           fsr1l	equ	0xFE1
  4453                           postinc2	equ	0xFDE
  4454                           postdec2	equ	0xFDD
  4455                           fsr2h	equ	0xFDA
  4456                           fsr2l	equ	0xFD9
  4457                           status	equ	0xFD8
  4458                           
  4459 ;; *************** function ___ftpack *****************
  4460 ;; Defined at:
  4461 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;  arg             3   22[COMRAM] unsigned um
  4464 ;;  exp             1   25[COMRAM] unsigned char 
  4465 ;;  sign            1   26[COMRAM] unsigned char 
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;		None
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  3   22[COMRAM] float 
  4470 ;; Registers used:
  4471 ;;		wreg, status,2, status,0
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4477 ;;      Params:         5       0       0       0       0       0       0
  4478 ;;      Locals:         0       0       0       0       0       0       0
  4479 ;;      Temps:          3       0       0       0       0       0       0
  4480 ;;      Totals:         8       0       0       0       0       0       0
  4481 ;;Total ram usage:        8 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    3
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		___awtoft
  4488 ;;		___ftadd
  4489 ;;		___ftdiv
  4490 ;;		___ftmul
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text26
  4495  00168C                     __ptext26:
  4496                           	opt stack 0
  4497  00168C                     ___ftpack:
  4498                           	opt stack 23
  4499                           
  4500                           ;incstack = 0
  4501  00168C  501A               	movf	___ftpack@exp,w,c
  4502  00168E  B4D8               	btfsc	status,2,c
  4503  001690  D005               	goto	l2876
  4504  001692  5017               	movf	___ftpack@arg,w,c
  4505  001694  1018               	iorwf	___ftpack@arg+1,w,c
  4506  001696  1019               	iorwf	___ftpack@arg+2,w,c
  4507  001698  A4D8               	btfss	status,2,c
  4508  00169A  D00E               	goto	l2882
  4509  00169C                     l2876:
  4510  00169C  0E00               	movlw	0
  4511  00169E  6E17               	movwf	?___ftpack,c
  4512  0016A0  0E00               	movlw	0
  4513  0016A2  6E18               	movwf	?___ftpack+1,c
  4514  0016A4  0E00               	movlw	0
  4515  0016A6  6E19               	movwf	?___ftpack+2,c
  4516  0016A8  0012               	return	
  4517  0016AA  D006               	goto	l2882
  4518  0016AC                     l2880:
  4519  0016AC  2A1A               	incf	___ftpack@exp,f,c
  4520  0016AE  90D8               	bcf	status,0,c
  4521  0016B0  3219               	rrcf	___ftpack@arg+2,f,c
  4522  0016B2  3218               	rrcf	___ftpack@arg+1,f,c
  4523  0016B4  3217               	rrcf	___ftpack@arg,f,c
  4524  0016B6  D000               	goto	l2882
  4525  0016B8                     l2882:
  4526  0016B8  0E00               	movlw	0
  4527  0016BA  1417               	andwf	___ftpack@arg,w,c
  4528  0016BC  6E1C               	movwf	??___ftpack& (0+255),c
  4529  0016BE  0E00               	movlw	0
  4530  0016C0  1418               	andwf	___ftpack@arg+1,w,c
  4531  0016C2  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  4532  0016C4  0EFE               	movlw	254
  4533  0016C6  1419               	andwf	___ftpack@arg+2,w,c
  4534  0016C8  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  4535  0016CA  501C               	movf	??___ftpack,w,c
  4536  0016CC  101D               	iorwf	??___ftpack+1,w,c
  4537  0016CE  101E               	iorwf	??___ftpack+2,w,c
  4538  0016D0  B4D8               	btfsc	status,2,c
  4539  0016D2  D00E               	goto	l2888
  4540  0016D4  D7EB               	goto	l2880
  4541  0016D6  D00C               	goto	l2888
  4542  0016D8                     l2884:
  4543  0016D8  2A1A               	incf	___ftpack@exp,f,c
  4544  0016DA  0E01               	movlw	1
  4545  0016DC  2617               	addwf	___ftpack@arg,f,c
  4546  0016DE  0E00               	movlw	0
  4547  0016E0  2218               	addwfc	___ftpack@arg+1,f,c
  4548  0016E2  0E00               	movlw	0
  4549  0016E4  2219               	addwfc	___ftpack@arg+2,f,c
  4550  0016E6  90D8               	bcf	status,0,c
  4551  0016E8  3219               	rrcf	___ftpack@arg+2,f,c
  4552  0016EA  3218               	rrcf	___ftpack@arg+1,f,c
  4553  0016EC  3217               	rrcf	___ftpack@arg,f,c
  4554  0016EE  D000               	goto	l2888
  4555  0016F0                     l2888:
  4556  0016F0  0E00               	movlw	0
  4557  0016F2  1417               	andwf	___ftpack@arg,w,c
  4558  0016F4  6E1C               	movwf	??___ftpack& (0+255),c
  4559  0016F6  0E00               	movlw	0
  4560  0016F8  1418               	andwf	___ftpack@arg+1,w,c
  4561  0016FA  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  4562  0016FC  0EFF               	movlw	255
  4563  0016FE  1419               	andwf	___ftpack@arg+2,w,c
  4564  001700  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  4565  001702  501C               	movf	??___ftpack,w,c
  4566  001704  101D               	iorwf	??___ftpack+1,w,c
  4567  001706  101E               	iorwf	??___ftpack+2,w,c
  4568  001708  B4D8               	btfsc	status,2,c
  4569  00170A  D008               	goto	l2892
  4570  00170C  D7E5               	goto	l2884
  4571  00170E  D006               	goto	l2892
  4572  001710                     l2890:
  4573  001710  061A               	decf	___ftpack@exp,f,c
  4574  001712  90D8               	bcf	status,0,c
  4575  001714  3617               	rlcf	___ftpack@arg,f,c
  4576  001716  3618               	rlcf	___ftpack@arg+1,f,c
  4577  001718  3619               	rlcf	___ftpack@arg+2,f,c
  4578  00171A  D000               	goto	l2892
  4579  00171C                     l2892:
  4580  00171C  BE18               	btfsc	___ftpack@arg+1,7,c
  4581  00171E  D004               	goto	l788
  4582  001720  0E02               	movlw	2
  4583  001722  601A               	cpfslt	___ftpack@exp,c
  4584  001724  D7F5               	goto	l2890
  4585  001726  D000               	goto	l788
  4586  001728                     l788:
  4587  001728  B01A               	btfsc	___ftpack@exp,0,c
  4588  00172A  D002               	goto	l2898
  4589  00172C  9E18               	bcf	___ftpack@arg+1,7,c
  4590  00172E  D000               	goto	l2898
  4591  001730                     l2898:
  4592  001730  90D8               	bcf	status,0,c
  4593  001732  321A               	rrcf	___ftpack@exp,f,c
  4594  001734  501A               	movf	___ftpack@exp,w,c
  4595  001736  1219               	iorwf	___ftpack@arg+2,f,c
  4596  001738  501B               	movf	___ftpack@sign,w,c
  4597  00173A  B4D8               	btfsc	status,2,c
  4598  00173C  D002               	goto	l2904
  4599  00173E  8E19               	bsf	___ftpack@arg+2,7,c
  4600  001740  D000               	goto	l2904
  4601  001742                     l2904:
  4602  001742  C017  F017         	movff	___ftpack@arg,?___ftpack
  4603  001746  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  4604  00174A  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  4605  00174E  0012               	return	
  4606  001750  0012               	return		;funcret
  4607  001752                     __end_of___ftpack:
  4608                           	opt stack 0
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           intcon	equ	0xFF2
  4616                           intcon2	equ	0xFF1
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           postinc1	equ	0xFE6
  4620                           postdec1	equ	0xFE5
  4621                           fsr1h	equ	0xFE2
  4622                           fsr1l	equ	0xFE1
  4623                           postinc2	equ	0xFDE
  4624                           postdec2	equ	0xFDD
  4625                           fsr2h	equ	0xFDA
  4626                           fsr2l	equ	0xFD9
  4627                           status	equ	0xFD8
  4628                           
  4629 ;; *************** function _INTERRUPT_InterruptManager *****************
  4630 ;; Defined at:
  4631 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;		None
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;		None
  4636 ;; Return value:  Size  Location     Type
  4637 ;;		None               void
  4638 ;; Registers used:
  4639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4645 ;;      Params:         0       0       0       0       0       0       0
  4646 ;;      Locals:         0       0       0       0       0       0       0
  4647 ;;      Temps:         14       0       0       0       0       0       0
  4648 ;;      Totals:        14       0       0       0       0       0       0
  4649 ;;Total ram usage:       14 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    2
  4652 ;; This function calls:
  4653 ;;		_ADC_ISR
  4654 ;;		_EUSART1_Receive_ISR
  4655 ;;		_EUSART1_Transmit_ISR
  4656 ;;		_TMR1_ISR
  4657 ;; This function is called by:
  4658 ;;		Interrupt level 2
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	intcode
  4663  000008                     __pintcode:
  4664                           	opt stack 0
  4665  000008                     _INTERRUPT_InterruptManager:
  4666                           	opt stack 23
  4667                           
  4668                           ;incstack = 0
  4669  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
  4670  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4671  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4672  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4673  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4674  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4675  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4676  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4677  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4678  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4679  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4680  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4681  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4682  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4683                           
  4684                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  4685  000040  BA9D               	btfsc	3997,5,c	;volatile
  4686  000042  AA9E               	btfss	3998,5,c	;volatile
  4687  000044  D003               	goto	i2l274
  4688                           
  4689                           ;interrupt_manager.c: 73: {
  4690                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  4691  000046  ECF5  F00D         	call	_EUSART1_Receive_ISR	;wreg free
  4692                           
  4693                           ;interrupt_manager.c: 75: }
  4694  00004A  D012               	goto	i2l282
  4695  00004C                     i2l274:
  4696                           
  4697                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  4698  00004C  BC9D               	btfsc	3997,6,c	;volatile
  4699  00004E  AC9E               	btfss	3998,6,c	;volatile
  4700  000050  D003               	goto	i2l276
  4701                           
  4702                           ;interrupt_manager.c: 77: {
  4703                           ;interrupt_manager.c: 78: ADC_ISR();
  4704  000052  EC0F  F003         	call	_ADC_ISR	;wreg free
  4705                           
  4706                           ;interrupt_manager.c: 79: }
  4707  000056  D00C               	goto	i2l282
  4708  000058                     i2l276:
  4709                           
  4710                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  4711  000058  B09D               	btfsc	3997,0,c	;volatile
  4712  00005A  A09E               	btfss	3998,0,c	;volatile
  4713  00005C  D003               	goto	i2l278
  4714                           
  4715                           ;interrupt_manager.c: 81: {
  4716                           ;interrupt_manager.c: 82: TMR1_ISR();
  4717  00005E  EC7A  F00E         	call	_TMR1_ISR	;wreg free
  4718                           
  4719                           ;interrupt_manager.c: 83: }
  4720  000062  D006               	goto	i2l282
  4721  000064                     i2l278:
  4722                           
  4723                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  4724  000064  B89D               	btfsc	3997,4,c	;volatile
  4725  000066  A89E               	btfss	3998,4,c	;volatile
  4726  000068  D003               	goto	i2l282
  4727                           
  4728                           ;interrupt_manager.c: 85: {
  4729                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  4730  00006A  ECDC  F00D         	call	_EUSART1_Transmit_ISR	;wreg free
  4731                           
  4732                           ;interrupt_manager.c: 88: else
  4733                           ;interrupt_manager.c: 89: {
  4734                           
  4735                           ;interrupt_manager.c: 87: }
  4736  00006E  D000               	goto	i2l282
  4737  000070                     i2l282:
  4738  000070  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4739  000074  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4740  000078  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4741  00007C  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4742  000080  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4743  000084  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4744  000088  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4745  00008C  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4746  000090  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4747  000094  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4748  000098  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4749  00009C  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4750  0000A0  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4751  0000A4  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4752  0000A8  0011               	retfie		f
  4753  0000AA                     __end_of_INTERRUPT_InterruptManager:
  4754                           	opt stack 0
  4755                           pclatu	equ	0xFFB
  4756                           pclath	equ	0xFFA
  4757                           tblptru	equ	0xFF8
  4758                           tblptrh	equ	0xFF7
  4759                           tblptrl	equ	0xFF6
  4760                           tablat	equ	0xFF5
  4761                           prodh	equ	0xFF4
  4762                           prodl	equ	0xFF3
  4763                           intcon	equ	0xFF2
  4764                           intcon2	equ	0xFF1
  4765                           postinc0	equ	0xFEE
  4766                           fsr0h	equ	0xFEA
  4767                           fsr0l	equ	0xFE9
  4768                           wreg	equ	0xFE8
  4769                           postinc1	equ	0xFE6
  4770                           postdec1	equ	0xFE5
  4771                           fsr1h	equ	0xFE2
  4772                           fsr1l	equ	0xFE1
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           fsr2h	equ	0xFDA
  4776                           fsr2l	equ	0xFD9
  4777                           status	equ	0xFD8
  4778                           
  4779 ;; *************** function _TMR1_ISR *****************
  4780 ;; Defined at:
  4781 ;;		line 109 in file "mcc_generated_files/tmr1.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;		None               void
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4795 ;;      Params:         0       0       0       0       0       0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0
  4798 ;;      Totals:         0       0       0       0       0       0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    1
  4802 ;; This function calls:
  4803 ;;		_TMR1_CallBack
  4804 ;; This function is called by:
  4805 ;;		_INTERRUPT_InterruptManager
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text28
  4810  001CF4                     __ptext28:
  4811                           	opt stack 0
  4812  001CF4                     _TMR1_ISR:
  4813                           	opt stack 23
  4814                           
  4815                           ;tmr1.c: 113: PIR1bits.TMR1IF = 0;
  4816                           
  4817                           ;incstack = 0
  4818  001CF4  909E               	bcf	3998,0,c	;volatile
  4819                           
  4820                           ;tmr1.c: 116: TMR1H = (timer1ReloadVal >> 8);
  4821  001CF6  5047               	movf	_timer1ReloadVal+1,w,c	;volatile
  4822  001CF8  6ECF               	movwf	4047,c	;volatile
  4823                           
  4824                           ;tmr1.c: 117: TMR1L = (uint8_t) timer1ReloadVal;
  4825  001CFA  C046  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  4826                           
  4827                           ;tmr1.c: 121: TMR1_CallBack();
  4828  001CFE  EC8F  F00E         	call	_TMR1_CallBack	;wreg free
  4829  001D02  0012               	return		;funcret
  4830  001D04                     __end_of_TMR1_ISR:
  4831                           	opt stack 0
  4832                           pclatu	equ	0xFFB
  4833                           pclath	equ	0xFFA
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon2	equ	0xFF1
  4842                           postinc0	equ	0xFEE
  4843                           fsr0h	equ	0xFEA
  4844                           fsr0l	equ	0xFE9
  4845                           wreg	equ	0xFE8
  4846                           postinc1	equ	0xFE6
  4847                           postdec1	equ	0xFE5
  4848                           fsr1h	equ	0xFE2
  4849                           fsr1l	equ	0xFE1
  4850                           postinc2	equ	0xFDE
  4851                           postdec2	equ	0xFDD
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function _TMR1_CallBack *****************
  4857 ;; Defined at:
  4858 ;;		line 125 in file "mcc_generated_files/tmr1.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;		None
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;		None
  4863 ;; Return value:  Size  Location     Type
  4864 ;;		None               void
  4865 ;; Registers used:
  4866 ;;		None
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4872 ;;      Params:         0       0       0       0       0       0       0
  4873 ;;      Locals:         0       0       0       0       0       0       0
  4874 ;;      Temps:          0       0       0       0       0       0       0
  4875 ;;      Totals:         0       0       0       0       0       0       0
  4876 ;;Total ram usage:        0 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		_TMR1_ISR
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           	psect	text29
  4886  001D1E                     __ptext29:
  4887                           	opt stack 0
  4888  001D1E                     _TMR1_CallBack:
  4889                           	opt stack 23
  4890                           
  4891                           ;incstack = 0
  4892                           ;tmr1.c: 128: do { LATA4 = ~LATA4; } while(0);
  4893  001D1E  7889               	btg	3977,4,c	;volatile
  4894  001D20  0012               	return	
  4895  001D22  0012               	return		;funcret
  4896  001D24                     __end_of_TMR1_CallBack:
  4897                           	opt stack 0
  4898                           pclatu	equ	0xFFB
  4899                           pclath	equ	0xFFA
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           intcon	equ	0xFF2
  4907                           intcon2	equ	0xFF1
  4908                           postinc0	equ	0xFEE
  4909                           fsr0h	equ	0xFEA
  4910                           fsr0l	equ	0xFE9
  4911                           wreg	equ	0xFE8
  4912                           postinc1	equ	0xFE6
  4913                           postdec1	equ	0xFE5
  4914                           fsr1h	equ	0xFE2
  4915                           fsr1l	equ	0xFE1
  4916                           postinc2	equ	0xFDE
  4917                           postdec2	equ	0xFDD
  4918                           fsr2h	equ	0xFDA
  4919                           fsr2l	equ	0xFD9
  4920                           status	equ	0xFD8
  4921                           
  4922 ;; *************** function _EUSART1_Transmit_ISR *****************
  4923 ;; Defined at:
  4924 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  4925 ;; Parameters:    Size  Location     Type
  4926 ;;		None
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;		None
  4929 ;; Return value:  Size  Location     Type
  4930 ;;		None               void
  4931 ;; Registers used:
  4932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4938 ;;      Params:         0       0       0       0       0       0       0
  4939 ;;      Locals:         0       0       0       0       0       0       0
  4940 ;;      Temps:          0       0       0       0       0       0       0
  4941 ;;      Totals:         0       0       0       0       0       0       0
  4942 ;;Total ram usage:        0 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; This function calls:
  4945 ;;		Nothing
  4946 ;; This function is called by:
  4947 ;;		_INTERRUPT_InterruptManager
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           	psect	text30
  4952  001BB8                     __ptext30:
  4953                           	opt stack 0
  4954  001BB8                     _EUSART1_Transmit_ISR:
  4955                           	opt stack 24
  4956                           
  4957                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  4958                           
  4959                           ;incstack = 0
  4960  001BB8  0E08               	movlw	8
  4961  001BBA  6048               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  4962  001BBC  D013               	goto	i2l126
  4963                           
  4964                           ;eusart1.c: 178: {
  4965                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  4966  001BBE  5045               	movf	_eusart1TxTail,w,c
  4967  001BC0  0D01               	mullw	1
  4968  001BC2  0E35               	movlw	low _eusart1TxBuffer
  4969  001BC4  24F3               	addwf	prodl,w,c
  4970  001BC6  6ED9               	movwf	fsr2l,c
  4971  001BC8  0E00               	movlw	high _eusart1TxBuffer
  4972  001BCA  20F4               	addwfc	prodh,w,c
  4973  001BCC  6EDA               	movwf	fsr2h,c
  4974  001BCE  50DF               	movf	indf2,w,c
  4975  001BD0  6EAD               	movwf	4013,c	;volatile
  4976  001BD2  2A45               	incf	_eusart1TxTail,f,c
  4977                           
  4978                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  4979  001BD4  0E07               	movlw	7
  4980  001BD6  6445               	cpfsgt	_eusart1TxTail,c
  4981  001BD8  D003               	goto	i2l1602
  4982                           
  4983                           ;eusart1.c: 181: {
  4984                           ;eusart1.c: 182: eusart1TxTail = 0;
  4985  001BDA  0E00               	movlw	0
  4986  001BDC  6E45               	movwf	_eusart1TxTail,c
  4987  001BDE  D000               	goto	i2l1602
  4988  001BE0                     i2l1602:
  4989                           
  4990                           ;eusart1.c: 183: }
  4991                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  4992  001BE0  2A48               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  4993                           
  4994                           ;eusart1.c: 185: }
  4995  001BE2  0012               	return	
  4996  001BE4                     i2l126:
  4997                           
  4998                           ;eusart1.c: 186: else
  4999                           ;eusart1.c: 187: {
  5000                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  5001  001BE4  989D               	bcf	3997,4,c	;volatile
  5002  001BE6  0012               	return	
  5003  001BE8  0012               	return		;funcret
  5004  001BEA                     __end_of_EUSART1_Transmit_ISR:
  5005                           	opt stack 0
  5006                           pclatu	equ	0xFFB
  5007                           pclath	equ	0xFFA
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodh	equ	0xFF4
  5013                           prodl	equ	0xFF3
  5014                           intcon	equ	0xFF2
  5015                           intcon2	equ	0xFF1
  5016                           postinc0	equ	0xFEE
  5017                           fsr0h	equ	0xFEA
  5018                           fsr0l	equ	0xFE9
  5019                           wreg	equ	0xFE8
  5020                           postinc1	equ	0xFE6
  5021                           postdec1	equ	0xFE5
  5022                           fsr1h	equ	0xFE2
  5023                           fsr1l	equ	0xFE1
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _EUSART1_Receive_ISR *****************
  5032 ;; Defined at:
  5033 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;		None
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;		None
  5038 ;; Return value:  Size  Location     Type
  5039 ;;		None               void
  5040 ;; Registers used:
  5041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5047 ;;      Params:         0       0       0       0       0       0       0
  5048 ;;      Locals:         0       0       0       0       0       0       0
  5049 ;;      Temps:          0       0       0       0       0       0       0
  5050 ;;      Totals:         0       0       0       0       0       0       0
  5051 ;;Total ram usage:        0 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; This function calls:
  5054 ;;		Nothing
  5055 ;; This function is called by:
  5056 ;;		_INTERRUPT_InterruptManager
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text31
  5061  001BEA                     __ptext31:
  5062                           	opt stack 0
  5063  001BEA                     _EUSART1_Receive_ISR:
  5064                           	opt stack 24
  5065                           
  5066                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  5067                           
  5068                           ;incstack = 0
  5069  001BEA  A2AB               	btfss	4011,1,c	;volatile
  5070  001BEC  D003               	goto	i2l2494
  5071                           
  5072                           ;eusart1.c: 195: {
  5073                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  5074  001BEE  98AB               	bcf	4011,4,c	;volatile
  5075                           
  5076                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  5077  001BF0  88AB               	bsf	4011,4,c	;volatile
  5078  001BF2  D000               	goto	i2l2494
  5079  001BF4                     i2l2494:
  5080                           
  5081                           ;eusart1.c: 200: }
  5082                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  5083  001BF4  5042               	movf	_eusart1RxHead,w,c
  5084  001BF6  0D01               	mullw	1
  5085  001BF8  0E00               	movlw	low _eusart1RxBuffer
  5086  001BFA  24F3               	addwf	prodl,w,c
  5087  001BFC  6ED9               	movwf	fsr2l,c
  5088  001BFE  0E01               	movlw	high _eusart1RxBuffer
  5089  001C00  20F4               	addwfc	prodh,w,c
  5090  001C02  6EDA               	movwf	fsr2h,c
  5091  001C04  CFAE FFDF          	movff	4014,indf2	;volatile
  5092  001C08  2A42               	incf	_eusart1RxHead,f,c
  5093                           
  5094                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  5095  001C0A  0E31               	movlw	49
  5096  001C0C  6442               	cpfsgt	_eusart1RxHead,c
  5097  001C0E  D003               	goto	i2l2502
  5098                           
  5099                           ;eusart1.c: 205: {
  5100                           ;eusart1.c: 206: eusart1RxHead = 0;
  5101  001C10  0E00               	movlw	0
  5102  001C12  6E42               	movwf	_eusart1RxHead,c
  5103  001C14  D000               	goto	i2l2502
  5104  001C16                     i2l2502:
  5105                           
  5106                           ;eusart1.c: 207: }
  5107                           ;eusart1.c: 208: eusart1RxCount++;
  5108  001C16  2A41               	incf	_eusart1RxCount,f,c	;volatile
  5109  001C18  0012               	return		;funcret
  5110  001C1A                     __end_of_EUSART1_Receive_ISR:
  5111                           	opt stack 0
  5112                           pclatu	equ	0xFFB
  5113                           pclath	equ	0xFFA
  5114                           tblptru	equ	0xFF8
  5115                           tblptrh	equ	0xFF7
  5116                           tblptrl	equ	0xFF6
  5117                           tablat	equ	0xFF5
  5118                           prodh	equ	0xFF4
  5119                           prodl	equ	0xFF3
  5120                           intcon	equ	0xFF2
  5121                           intcon2	equ	0xFF1
  5122                           postinc0	equ	0xFEE
  5123                           fsr0h	equ	0xFEA
  5124                           fsr0l	equ	0xFE9
  5125                           wreg	equ	0xFE8
  5126                           postinc1	equ	0xFE6
  5127                           postdec1	equ	0xFE5
  5128                           fsr1h	equ	0xFE2
  5129                           fsr1l	equ	0xFE1
  5130                           indf2	equ	0xFDF
  5131                           postinc2	equ	0xFDE
  5132                           postdec2	equ	0xFDD
  5133                           fsr2h	equ	0xFDA
  5134                           fsr2l	equ	0xFD9
  5135                           status	equ	0xFD8
  5136                           
  5137 ;; *************** function _ADC_ISR *****************
  5138 ;; Defined at:
  5139 ;;		line 82 in file "mcc_generated_files/adc.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;		None
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  ADC_Result      2    6[COMRAM] int 
  5144 ;; Return value:  Size  Location     Type
  5145 ;;		None               void
  5146 ;; Registers used:
  5147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5153 ;;      Params:         0       0       0       0       0       0       0
  5154 ;;      Locals:         2       0       0       0       0       0       0
  5155 ;;      Temps:          2       0       0       0       0       0       0
  5156 ;;      Totals:         4       0       0       0       0       0       0
  5157 ;;Total ram usage:        4 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; Hardware stack levels required when called:    1
  5160 ;; This function calls:
  5161 ;;		_ADC_GetConversionResult
  5162 ;;		_ADC_StartConversion
  5163 ;;		_Set_4051
  5164 ;; This function is called by:
  5165 ;;		_INTERRUPT_InterruptManager
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           	psect	text32
  5170  00061E                     __ptext32:
  5171                           	opt stack 0
  5172  00061E                     _ADC_ISR:
  5173                           	opt stack 23
  5174                           
  5175                           ;adc.c: 85: PIR1bits.ADIF = 0;
  5176                           
  5177                           ;incstack = 0
  5178  00061E  9C9E               	bcf	3998,6,c	;volatile
  5179                           
  5180                           ;adc.c: 86: int ADC_Result = 0;
  5181  000620  0E00               	movlw	0
  5182  000622  6E08               	movwf	ADC_ISR@ADC_Result+1,c
  5183  000624  0E00               	movlw	0
  5184  000626  6E07               	movwf	ADC_ISR@ADC_Result,c
  5185                           
  5186                           ;adc.c: 87: if (Temp_Aquire){
  5187  000628  503F               	movf	_Temp_Aquire,w,c
  5188  00062A  B4D8               	btfsc	status,2,c
  5189  00062C  D123               	goto	i2l2578
  5190                           
  5191                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  5192  00062E  EC6F  F00E         	call	_ADC_GetConversionResult	;wreg free
  5193  000632  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  5194  000636  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  5195                           
  5196                           ;adc.c: 90: switch ( ADC_Buffer_Point )
  5197  00063A  D0EE               	goto	i2l2574
  5198  00063C                     i2l2510:
  5199                           
  5200                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5201  00063C  90D8               	bcf	status,0,c
  5202  00063E  343D               	rlcf	_ADC_Buffer_Point,w,c
  5203  000640  6ED9               	movwf	fsr2l,c
  5204  000642  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5205  000644  6EDA               	movwf	fsr2h,c
  5206  000646  0EB6               	movlw	low _Temp_Adc
  5207  000648  26D9               	addwf	fsr2l,f,c
  5208  00064A  0E00               	movlw	high _Temp_Adc
  5209  00064C  22DA               	addwfc	fsr2h,f,c
  5210  00064E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5211  000652  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5212                           
  5213                           ;adc.c: 94: Set_4051(0);
  5214  000656  0E00               	movlw	0
  5215  000658  6E02               	movwf	Set_4051@Channel+1,c
  5216  00065A  0E00               	movlw	0
  5217  00065C  6E01               	movwf	Set_4051@Channel,c
  5218  00065E  ECC0  F00D         	call	_Set_4051	;wreg free
  5219                           
  5220                           ;adc.c: 95: ADC_StartConversion(Temp1);
  5221  000662  0E0E               	movlw	14
  5222  000664  EC56  F00E         	call	_ADC_StartConversion
  5223                           
  5224                           ;adc.c: 96: break;
  5225  000668  D102               	goto	i2l2576
  5226  00066A                     i2l2516:
  5227                           
  5228                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5229  00066A  90D8               	bcf	status,0,c
  5230  00066C  343D               	rlcf	_ADC_Buffer_Point,w,c
  5231  00066E  6ED9               	movwf	fsr2l,c
  5232  000670  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5233  000672  6EDA               	movwf	fsr2h,c
  5234  000674  0EB6               	movlw	low _Temp_Adc
  5235  000676  26D9               	addwf	fsr2l,f,c
  5236  000678  0E00               	movlw	high _Temp_Adc
  5237  00067A  22DA               	addwfc	fsr2h,f,c
  5238  00067C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5239  000680  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5240                           
  5241                           ;adc.c: 99: Set_4051(1);
  5242  000684  0E00               	movlw	0
  5243  000686  6E02               	movwf	Set_4051@Channel+1,c
  5244  000688  0E01               	movlw	1
  5245  00068A  6E01               	movwf	Set_4051@Channel,c
  5246  00068C  ECC0  F00D         	call	_Set_4051	;wreg free
  5247                           
  5248                           ;adc.c: 100: ADC_StartConversion(Temp1);
  5249  000690  0E0E               	movlw	14
  5250  000692  EC56  F00E         	call	_ADC_StartConversion
  5251                           
  5252                           ;adc.c: 101: break;
  5253  000696  D0EB               	goto	i2l2576
  5254  000698                     i2l2522:
  5255                           
  5256                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5257  000698  90D8               	bcf	status,0,c
  5258  00069A  343D               	rlcf	_ADC_Buffer_Point,w,c
  5259  00069C  6ED9               	movwf	fsr2l,c
  5260  00069E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5261  0006A0  6EDA               	movwf	fsr2h,c
  5262  0006A2  0EB6               	movlw	low _Temp_Adc
  5263  0006A4  26D9               	addwf	fsr2l,f,c
  5264  0006A6  0E00               	movlw	high _Temp_Adc
  5265  0006A8  22DA               	addwfc	fsr2h,f,c
  5266  0006AA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5267  0006AE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5268                           
  5269                           ;adc.c: 104: Set_4051(2);
  5270  0006B2  0E00               	movlw	0
  5271  0006B4  6E02               	movwf	Set_4051@Channel+1,c
  5272  0006B6  0E02               	movlw	2
  5273  0006B8  6E01               	movwf	Set_4051@Channel,c
  5274  0006BA  ECC0  F00D         	call	_Set_4051	;wreg free
  5275                           
  5276                           ;adc.c: 105: ADC_StartConversion(Temp1);
  5277  0006BE  0E0E               	movlw	14
  5278  0006C0  EC56  F00E         	call	_ADC_StartConversion
  5279                           
  5280                           ;adc.c: 106: break;
  5281  0006C4  D0D4               	goto	i2l2576
  5282  0006C6                     i2l2528:
  5283                           
  5284                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5285  0006C6  90D8               	bcf	status,0,c
  5286  0006C8  343D               	rlcf	_ADC_Buffer_Point,w,c
  5287  0006CA  6ED9               	movwf	fsr2l,c
  5288  0006CC  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5289  0006CE  6EDA               	movwf	fsr2h,c
  5290  0006D0  0EB6               	movlw	low _Temp_Adc
  5291  0006D2  26D9               	addwf	fsr2l,f,c
  5292  0006D4  0E00               	movlw	high _Temp_Adc
  5293  0006D6  22DA               	addwfc	fsr2h,f,c
  5294  0006D8  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5295  0006DC  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5296                           
  5297                           ;adc.c: 109: Set_4051(3);
  5298  0006E0  0E00               	movlw	0
  5299  0006E2  6E02               	movwf	Set_4051@Channel+1,c
  5300  0006E4  0E03               	movlw	3
  5301  0006E6  6E01               	movwf	Set_4051@Channel,c
  5302  0006E8  ECC0  F00D         	call	_Set_4051	;wreg free
  5303                           
  5304                           ;adc.c: 110: ADC_StartConversion(Temp1);
  5305  0006EC  0E0E               	movlw	14
  5306  0006EE  EC56  F00E         	call	_ADC_StartConversion
  5307                           
  5308                           ;adc.c: 111: break;
  5309  0006F2  D0BD               	goto	i2l2576
  5310  0006F4                     i2l2534:
  5311                           
  5312                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5313  0006F4  90D8               	bcf	status,0,c
  5314  0006F6  343D               	rlcf	_ADC_Buffer_Point,w,c
  5315  0006F8  6ED9               	movwf	fsr2l,c
  5316  0006FA  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5317  0006FC  6EDA               	movwf	fsr2h,c
  5318  0006FE  0EB6               	movlw	low _Temp_Adc
  5319  000700  26D9               	addwf	fsr2l,f,c
  5320  000702  0E00               	movlw	high _Temp_Adc
  5321  000704  22DA               	addwfc	fsr2h,f,c
  5322  000706  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5323  00070A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5324                           
  5325                           ;adc.c: 114: Set_4051(4);
  5326  00070E  0E00               	movlw	0
  5327  000710  6E02               	movwf	Set_4051@Channel+1,c
  5328  000712  0E04               	movlw	4
  5329  000714  6E01               	movwf	Set_4051@Channel,c
  5330  000716  ECC0  F00D         	call	_Set_4051	;wreg free
  5331                           
  5332                           ;adc.c: 115: ADC_StartConversion(Temp1);
  5333  00071A  0E0E               	movlw	14
  5334  00071C  EC56  F00E         	call	_ADC_StartConversion
  5335                           
  5336                           ;adc.c: 116: break;
  5337  000720  D0A6               	goto	i2l2576
  5338  000722                     i2l2540:
  5339                           
  5340                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5341  000722  90D8               	bcf	status,0,c
  5342  000724  343D               	rlcf	_ADC_Buffer_Point,w,c
  5343  000726  6ED9               	movwf	fsr2l,c
  5344  000728  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5345  00072A  6EDA               	movwf	fsr2h,c
  5346  00072C  0EB6               	movlw	low _Temp_Adc
  5347  00072E  26D9               	addwf	fsr2l,f,c
  5348  000730  0E00               	movlw	high _Temp_Adc
  5349  000732  22DA               	addwfc	fsr2h,f,c
  5350  000734  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5351  000738  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5352                           
  5353                           ;adc.c: 119: Set_4051(5);
  5354  00073C  0E00               	movlw	0
  5355  00073E  6E02               	movwf	Set_4051@Channel+1,c
  5356  000740  0E05               	movlw	5
  5357  000742  6E01               	movwf	Set_4051@Channel,c
  5358  000744  ECC0  F00D         	call	_Set_4051	;wreg free
  5359                           
  5360                           ;adc.c: 120: ADC_StartConversion(Temp1);
  5361  000748  0E0E               	movlw	14
  5362  00074A  EC56  F00E         	call	_ADC_StartConversion
  5363                           
  5364                           ;adc.c: 121: break;
  5365  00074E  D08F               	goto	i2l2576
  5366  000750                     i2l2546:
  5367                           
  5368                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5369  000750  90D8               	bcf	status,0,c
  5370  000752  343D               	rlcf	_ADC_Buffer_Point,w,c
  5371  000754  6ED9               	movwf	fsr2l,c
  5372  000756  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5373  000758  6EDA               	movwf	fsr2h,c
  5374  00075A  0EB6               	movlw	low _Temp_Adc
  5375  00075C  26D9               	addwf	fsr2l,f,c
  5376  00075E  0E00               	movlw	high _Temp_Adc
  5377  000760  22DA               	addwfc	fsr2h,f,c
  5378  000762  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5379  000766  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5380                           
  5381                           ;adc.c: 124: Set_4051(6);
  5382  00076A  0E00               	movlw	0
  5383  00076C  6E02               	movwf	Set_4051@Channel+1,c
  5384  00076E  0E06               	movlw	6
  5385  000770  6E01               	movwf	Set_4051@Channel,c
  5386  000772  ECC0  F00D         	call	_Set_4051	;wreg free
  5387                           
  5388                           ;adc.c: 125: ADC_StartConversion(Temp1);
  5389  000776  0E0E               	movlw	14
  5390  000778  EC56  F00E         	call	_ADC_StartConversion
  5391                           
  5392                           ;adc.c: 126: break;
  5393  00077C  D078               	goto	i2l2576
  5394  00077E                     i2l2552:
  5395                           
  5396                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5397  00077E  90D8               	bcf	status,0,c
  5398  000780  343D               	rlcf	_ADC_Buffer_Point,w,c
  5399  000782  6ED9               	movwf	fsr2l,c
  5400  000784  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5401  000786  6EDA               	movwf	fsr2h,c
  5402  000788  0EB6               	movlw	low _Temp_Adc
  5403  00078A  26D9               	addwf	fsr2l,f,c
  5404  00078C  0E00               	movlw	high _Temp_Adc
  5405  00078E  22DA               	addwfc	fsr2h,f,c
  5406  000790  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5407  000794  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5408                           
  5409                           ;adc.c: 129: Set_4051(7);
  5410  000798  0E00               	movlw	0
  5411  00079A  6E02               	movwf	Set_4051@Channel+1,c
  5412  00079C  0E07               	movlw	7
  5413  00079E  6E01               	movwf	Set_4051@Channel,c
  5414  0007A0  ECC0  F00D         	call	_Set_4051	;wreg free
  5415                           
  5416                           ;adc.c: 130: ADC_StartConversion(Temp1);
  5417  0007A4  0E0E               	movlw	14
  5418  0007A6  EC56  F00E         	call	_ADC_StartConversion
  5419                           
  5420                           ;adc.c: 131: break;
  5421  0007AA  D061               	goto	i2l2576
  5422  0007AC                     i2l2558:
  5423                           
  5424                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5425  0007AC  90D8               	bcf	status,0,c
  5426  0007AE  343D               	rlcf	_ADC_Buffer_Point,w,c
  5427  0007B0  6ED9               	movwf	fsr2l,c
  5428  0007B2  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5429  0007B4  6EDA               	movwf	fsr2h,c
  5430  0007B6  0EB6               	movlw	low _Temp_Adc
  5431  0007B8  26D9               	addwf	fsr2l,f,c
  5432  0007BA  0E00               	movlw	high _Temp_Adc
  5433  0007BC  22DA               	addwfc	fsr2h,f,c
  5434  0007BE  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5435  0007C2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5436                           
  5437                           ;adc.c: 134: Set_4051(0);
  5438  0007C6  0E00               	movlw	0
  5439  0007C8  6E02               	movwf	Set_4051@Channel+1,c
  5440  0007CA  0E00               	movlw	0
  5441  0007CC  6E01               	movwf	Set_4051@Channel,c
  5442  0007CE  ECC0  F00D         	call	_Set_4051	;wreg free
  5443                           
  5444                           ;adc.c: 135: ADC_StartConversion(Temp2);
  5445  0007D2  0E14               	movlw	20
  5446  0007D4  EC56  F00E         	call	_ADC_StartConversion
  5447                           
  5448                           ;adc.c: 136: break;
  5449  0007D8  D04A               	goto	i2l2576
  5450  0007DA                     i2l2564:
  5451                           
  5452                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  5453  0007DA  90D8               	bcf	status,0,c
  5454  0007DC  343D               	rlcf	_ADC_Buffer_Point,w,c
  5455  0007DE  6ED9               	movwf	fsr2l,c
  5456  0007E0  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5457  0007E2  6EDA               	movwf	fsr2h,c
  5458  0007E4  0EB6               	movlw	low _Temp_Adc
  5459  0007E6  26D9               	addwf	fsr2l,f,c
  5460  0007E8  0E00               	movlw	high _Temp_Adc
  5461  0007EA  22DA               	addwfc	fsr2h,f,c
  5462  0007EC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5463  0007F0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5464                           
  5465                           ;adc.c: 139: Set_4051(1);
  5466  0007F4  0E00               	movlw	0
  5467  0007F6  6E02               	movwf	Set_4051@Channel+1,c
  5468  0007F8  0E01               	movlw	1
  5469  0007FA  6E01               	movwf	Set_4051@Channel,c
  5470  0007FC  ECC0  F00D         	call	_Set_4051	;wreg free
  5471                           
  5472                           ;adc.c: 140: ADC_StartConversion(Temp2);
  5473  000800  0E14               	movlw	20
  5474  000802  EC56  F00E         	call	_ADC_StartConversion
  5475                           
  5476                           ;adc.c: 141: break;
  5477  000806  D033               	goto	i2l2576
  5478  000808                     i2l2570:
  5479                           
  5480                           ;adc.c: 143: Temp_Aquire = 0;
  5481  000808  0E00               	movlw	0
  5482  00080A  6E3F               	movwf	_Temp_Aquire,c
  5483                           
  5484                           ;adc.c: 144: Temp_Done = 1;
  5485  00080C  0E00               	movlw	0
  5486  00080E  0100               	movlb	0	; () banked
  5487  000810  6FB1               	movwf	(_Temp_Done+1)& (0+255),b
  5488  000812  0E01               	movlw	1
  5489  000814  6FB0               	movwf	_Temp_Done& (0+255),b
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;adc.c: 146: }
  5493                           
  5494                           ;adc.c: 145: break;
  5495  000816  D02B               	goto	i2l2576
  5496  000818                     i2l2574:
  5497  000818  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  5498  00081C  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  5499                           
  5500                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5501                           ; Switch size 1, requested type "space"
  5502                           ; Number of cases is 1, Range of values is 0 to 0
  5503                           ; switch strategies available:
  5504                           ; Name         Instructions Cycles
  5505                           ; simple_byte            4     3 (average)
  5506                           ;	Chosen strategy is simple_byte
  5507  000820  5006               	movf	??_ADC_ISR+1,w,c
  5508  000822  0A00               	xorlw	0	; case 0
  5509  000824  A4D8               	btfss	status,2,c
  5510  000826  D023               	goto	i2l2576
  5511                           
  5512                           ; Switch size 1, requested type "space"
  5513                           ; Number of cases is 11, Range of values is 0 to 10
  5514                           ; switch strategies available:
  5515                           ; Name         Instructions Cycles
  5516                           ; simple_byte           34    18 (average)
  5517                           ;	Chosen strategy is simple_byte
  5518  000828  5005               	movf	??_ADC_ISR,w,c
  5519  00082A  0A00               	xorlw	0	; case 0
  5520  00082C  B4D8               	btfsc	status,2,c
  5521  00082E  D706               	goto	i2l2510
  5522  000830  0A01               	xorlw	1	; case 1
  5523  000832  B4D8               	btfsc	status,2,c
  5524  000834  D71A               	goto	i2l2516
  5525  000836  0A03               	xorlw	3	; case 2
  5526  000838  B4D8               	btfsc	status,2,c
  5527  00083A  D72E               	goto	i2l2522
  5528  00083C  0A01               	xorlw	1	; case 3
  5529  00083E  B4D8               	btfsc	status,2,c
  5530  000840  D742               	goto	i2l2528
  5531  000842  0A07               	xorlw	7	; case 4
  5532  000844  B4D8               	btfsc	status,2,c
  5533  000846  D756               	goto	i2l2534
  5534  000848  0A01               	xorlw	1	; case 5
  5535  00084A  B4D8               	btfsc	status,2,c
  5536  00084C  D76A               	goto	i2l2540
  5537  00084E  0A03               	xorlw	3	; case 6
  5538  000850  B4D8               	btfsc	status,2,c
  5539  000852  D77E               	goto	i2l2546
  5540  000854  0A01               	xorlw	1	; case 7
  5541  000856  B4D8               	btfsc	status,2,c
  5542  000858  D792               	goto	i2l2552
  5543  00085A  0A0F               	xorlw	15	; case 8
  5544  00085C  B4D8               	btfsc	status,2,c
  5545  00085E  D7A6               	goto	i2l2558
  5546  000860  0A01               	xorlw	1	; case 9
  5547  000862  B4D8               	btfsc	status,2,c
  5548  000864  D7BA               	goto	i2l2564
  5549  000866  0A03               	xorlw	3	; case 10
  5550  000868  B4D8               	btfsc	status,2,c
  5551  00086A  D7CE               	goto	i2l2570
  5552  00086C  D000               	goto	i2l2576
  5553  00086E                     i2l2576:
  5554                           
  5555                           ;adc.c: 147: ADC_Buffer_Point++;
  5556  00086E  4A3D               	infsnz	_ADC_Buffer_Point,f,c
  5557  000870  2A3E               	incf	_ADC_Buffer_Point+1,f,c
  5558  000872  D000               	goto	i2l2578
  5559  000874                     i2l2578:
  5560                           
  5561                           ;adc.c: 148: }
  5562                           ;adc.c: 149: if (Volt_Aquire){
  5563  000874  5040               	movf	_Volt_Aquire,w,c
  5564  000876  B4D8               	btfsc	status,2,c
  5565  000878  0012               	return	
  5566                           
  5567                           ;adc.c: 151: ADC_Result = ADC_GetConversionResult();
  5568  00087A  EC6F  F00E         	call	_ADC_GetConversionResult	;wreg free
  5569  00087E  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  5570  000882  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  5571                           
  5572                           ;adc.c: 152: switch ( ADC_Buffer_Point )
  5573  000886  D0B2               	goto	i2l2626
  5574  000888                     i2l2582:
  5575                           
  5576                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5577  000888  90D8               	bcf	status,0,c
  5578  00088A  343D               	rlcf	_ADC_Buffer_Point,w,c
  5579  00088C  6ED9               	movwf	fsr2l,c
  5580  00088E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5581  000890  6EDA               	movwf	fsr2h,c
  5582  000892  0E9C               	movlw	low _Battery_Adc
  5583  000894  26D9               	addwf	fsr2l,f,c
  5584  000896  0E00               	movlw	high _Battery_Adc
  5585  000898  22DA               	addwfc	fsr2h,f,c
  5586  00089A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5587  00089E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5588                           
  5589                           ;adc.c: 156: ADC_StartConversion(Battery1);
  5590  0008A2  0E01               	movlw	1
  5591  0008A4  EC56  F00E         	call	_ADC_StartConversion
  5592                           
  5593                           ;adc.c: 157: break;
  5594  0008A8  D0CC               	goto	i2l2628
  5595  0008AA                     i2l2586:
  5596                           
  5597                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5598  0008AA  90D8               	bcf	status,0,c
  5599  0008AC  343D               	rlcf	_ADC_Buffer_Point,w,c
  5600  0008AE  6ED9               	movwf	fsr2l,c
  5601  0008B0  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5602  0008B2  6EDA               	movwf	fsr2h,c
  5603  0008B4  0E9C               	movlw	low _Battery_Adc
  5604  0008B6  26D9               	addwf	fsr2l,f,c
  5605  0008B8  0E00               	movlw	high _Battery_Adc
  5606  0008BA  22DA               	addwfc	fsr2h,f,c
  5607  0008BC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5608  0008C0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5609                           
  5610                           ;adc.c: 160: ADC_StartConversion(Battery2);
  5611  0008C4  0E03               	movlw	3
  5612  0008C6  EC56  F00E         	call	_ADC_StartConversion
  5613                           
  5614                           ;adc.c: 161: break;
  5615  0008CA  D0BB               	goto	i2l2628
  5616  0008CC                     i2l2590:
  5617                           
  5618                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5619  0008CC  90D8               	bcf	status,0,c
  5620  0008CE  343D               	rlcf	_ADC_Buffer_Point,w,c
  5621  0008D0  6ED9               	movwf	fsr2l,c
  5622  0008D2  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5623  0008D4  6EDA               	movwf	fsr2h,c
  5624  0008D6  0E9C               	movlw	low _Battery_Adc
  5625  0008D8  26D9               	addwf	fsr2l,f,c
  5626  0008DA  0E00               	movlw	high _Battery_Adc
  5627  0008DC  22DA               	addwfc	fsr2h,f,c
  5628  0008DE  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5629  0008E2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5630                           
  5631                           ;adc.c: 164: ADC_StartConversion(Battery3);
  5632  0008E6  0E04               	movlw	4
  5633  0008E8  EC56  F00E         	call	_ADC_StartConversion
  5634                           
  5635                           ;adc.c: 165: break;
  5636  0008EC  D0AA               	goto	i2l2628
  5637  0008EE                     i2l2594:
  5638                           
  5639                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5640  0008EE  90D8               	bcf	status,0,c
  5641  0008F0  343D               	rlcf	_ADC_Buffer_Point,w,c
  5642  0008F2  6ED9               	movwf	fsr2l,c
  5643  0008F4  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5644  0008F6  6EDA               	movwf	fsr2h,c
  5645  0008F8  0E9C               	movlw	low _Battery_Adc
  5646  0008FA  26D9               	addwf	fsr2l,f,c
  5647  0008FC  0E00               	movlw	high _Battery_Adc
  5648  0008FE  22DA               	addwfc	fsr2h,f,c
  5649  000900  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5650  000904  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5651                           
  5652                           ;adc.c: 168: ADC_StartConversion(Battery4);
  5653  000908  0E05               	movlw	5
  5654  00090A  EC56  F00E         	call	_ADC_StartConversion
  5655                           
  5656                           ;adc.c: 169: break;
  5657  00090E  D099               	goto	i2l2628
  5658  000910                     i2l2598:
  5659                           
  5660                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5661  000910  90D8               	bcf	status,0,c
  5662  000912  343D               	rlcf	_ADC_Buffer_Point,w,c
  5663  000914  6ED9               	movwf	fsr2l,c
  5664  000916  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5665  000918  6EDA               	movwf	fsr2h,c
  5666  00091A  0E9C               	movlw	low _Battery_Adc
  5667  00091C  26D9               	addwf	fsr2l,f,c
  5668  00091E  0E00               	movlw	high _Battery_Adc
  5669  000920  22DA               	addwfc	fsr2h,f,c
  5670  000922  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5671  000926  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5672                           
  5673                           ;adc.c: 172: ADC_StartConversion(Battery5);
  5674  00092A  0E18               	movlw	24
  5675  00092C  EC56  F00E         	call	_ADC_StartConversion
  5676                           
  5677                           ;adc.c: 173: break;
  5678  000930  D088               	goto	i2l2628
  5679  000932                     i2l2602:
  5680                           
  5681                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5682  000932  90D8               	bcf	status,0,c
  5683  000934  343D               	rlcf	_ADC_Buffer_Point,w,c
  5684  000936  6ED9               	movwf	fsr2l,c
  5685  000938  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5686  00093A  6EDA               	movwf	fsr2h,c
  5687  00093C  0E9C               	movlw	low _Battery_Adc
  5688  00093E  26D9               	addwf	fsr2l,f,c
  5689  000940  0E00               	movlw	high _Battery_Adc
  5690  000942  22DA               	addwfc	fsr2h,f,c
  5691  000944  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5692  000948  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5693                           
  5694                           ;adc.c: 176: ADC_StartConversion(Battery6);
  5695  00094C  0E1A               	movlw	26
  5696  00094E  EC56  F00E         	call	_ADC_StartConversion
  5697                           
  5698                           ;adc.c: 177: break;
  5699  000952  D077               	goto	i2l2628
  5700  000954                     i2l2606:
  5701                           
  5702                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5703  000954  90D8               	bcf	status,0,c
  5704  000956  343D               	rlcf	_ADC_Buffer_Point,w,c
  5705  000958  6ED9               	movwf	fsr2l,c
  5706  00095A  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5707  00095C  6EDA               	movwf	fsr2h,c
  5708  00095E  0E9C               	movlw	low _Battery_Adc
  5709  000960  26D9               	addwf	fsr2l,f,c
  5710  000962  0E00               	movlw	high _Battery_Adc
  5711  000964  22DA               	addwfc	fsr2h,f,c
  5712  000966  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5713  00096A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5714                           
  5715                           ;adc.c: 180: ADC_StartConversion(Battery7);
  5716  00096E  0E1B               	movlw	27
  5717  000970  EC56  F00E         	call	_ADC_StartConversion
  5718                           
  5719                           ;adc.c: 181: break;
  5720  000974  D066               	goto	i2l2628
  5721  000976                     i2l2610:
  5722                           
  5723                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5724  000976  90D8               	bcf	status,0,c
  5725  000978  343D               	rlcf	_ADC_Buffer_Point,w,c
  5726  00097A  6ED9               	movwf	fsr2l,c
  5727  00097C  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5728  00097E  6EDA               	movwf	fsr2h,c
  5729  000980  0E9C               	movlw	low _Battery_Adc
  5730  000982  26D9               	addwf	fsr2l,f,c
  5731  000984  0E00               	movlw	high _Battery_Adc
  5732  000986  22DA               	addwfc	fsr2h,f,c
  5733  000988  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5734  00098C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5735                           
  5736                           ;adc.c: 184: ADC_StartConversion(Battery8);
  5737  000990  0E08               	movlw	8
  5738  000992  EC56  F00E         	call	_ADC_StartConversion
  5739                           
  5740                           ;adc.c: 185: break;
  5741  000996  D055               	goto	i2l2628
  5742  000998                     i2l2614:
  5743                           
  5744                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5745  000998  90D8               	bcf	status,0,c
  5746  00099A  343D               	rlcf	_ADC_Buffer_Point,w,c
  5747  00099C  6ED9               	movwf	fsr2l,c
  5748  00099E  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5749  0009A0  6EDA               	movwf	fsr2h,c
  5750  0009A2  0E9C               	movlw	low _Battery_Adc
  5751  0009A4  26D9               	addwf	fsr2l,f,c
  5752  0009A6  0E00               	movlw	high _Battery_Adc
  5753  0009A8  22DA               	addwfc	fsr2h,f,c
  5754  0009AA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5755  0009AE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5756                           
  5757                           ;adc.c: 188: ADC_StartConversion(Battery9);
  5758  0009B2  0E0B               	movlw	11
  5759  0009B4  EC56  F00E         	call	_ADC_StartConversion
  5760                           
  5761                           ;adc.c: 189: break;
  5762  0009B8  D044               	goto	i2l2628
  5763  0009BA                     i2l2618:
  5764                           
  5765                           ;adc.c: 191: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  5766  0009BA  90D8               	bcf	status,0,c
  5767  0009BC  343D               	rlcf	_ADC_Buffer_Point,w,c
  5768  0009BE  6ED9               	movwf	fsr2l,c
  5769  0009C0  343E               	rlcf	_ADC_Buffer_Point+1,w,c
  5770  0009C2  6EDA               	movwf	fsr2h,c
  5771  0009C4  0E9C               	movlw	low _Battery_Adc
  5772  0009C6  26D9               	addwf	fsr2l,f,c
  5773  0009C8  0E00               	movlw	high _Battery_Adc
  5774  0009CA  22DA               	addwfc	fsr2h,f,c
  5775  0009CC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  5776  0009D0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  5777                           
  5778                           ;adc.c: 192: ADC_StartConversion(Battery10);
  5779  0009D4  0E0D               	movlw	13
  5780  0009D6  EC56  F00E         	call	_ADC_StartConversion
  5781                           
  5782                           ;adc.c: 193: break;
  5783  0009DA  D033               	goto	i2l2628
  5784  0009DC                     i2l2622:
  5785                           
  5786                           ;adc.c: 195: Volt_Aquire = 0;
  5787  0009DC  0E00               	movlw	0
  5788  0009DE  6E40               	movwf	_Volt_Aquire,c
  5789                           
  5790                           ;adc.c: 196: Volt_Done = 1;
  5791  0009E0  0E00               	movlw	0
  5792  0009E2  0100               	movlb	0	; () banked
  5793  0009E4  6FB3               	movwf	(_Volt_Done+1)& (0+255),b
  5794  0009E6  0E01               	movlw	1
  5795  0009E8  6FB2               	movwf	_Volt_Done& (0+255),b
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;adc.c: 198: }
  5799                           
  5800                           ;adc.c: 197: break;
  5801  0009EA  D02B               	goto	i2l2628
  5802  0009EC                     i2l2626:
  5803  0009EC  C03D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
  5804  0009F0  C03E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  5805                           
  5806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5807                           ; Switch size 1, requested type "space"
  5808                           ; Number of cases is 1, Range of values is 0 to 0
  5809                           ; switch strategies available:
  5810                           ; Name         Instructions Cycles
  5811                           ; simple_byte            4     3 (average)
  5812                           ;	Chosen strategy is simple_byte
  5813  0009F4  5006               	movf	??_ADC_ISR+1,w,c
  5814  0009F6  0A00               	xorlw	0	; case 0
  5815  0009F8  A4D8               	btfss	status,2,c
  5816  0009FA  D023               	goto	i2l2628
  5817                           
  5818                           ; Switch size 1, requested type "space"
  5819                           ; Number of cases is 11, Range of values is 0 to 10
  5820                           ; switch strategies available:
  5821                           ; Name         Instructions Cycles
  5822                           ; simple_byte           34    18 (average)
  5823                           ;	Chosen strategy is simple_byte
  5824  0009FC  5005               	movf	??_ADC_ISR,w,c
  5825  0009FE  0A00               	xorlw	0	; case 0
  5826  000A00  B4D8               	btfsc	status,2,c
  5827  000A02  D742               	goto	i2l2582
  5828  000A04  0A01               	xorlw	1	; case 1
  5829  000A06  B4D8               	btfsc	status,2,c
  5830  000A08  D750               	goto	i2l2586
  5831  000A0A  0A03               	xorlw	3	; case 2
  5832  000A0C  B4D8               	btfsc	status,2,c
  5833  000A0E  D75E               	goto	i2l2590
  5834  000A10  0A01               	xorlw	1	; case 3
  5835  000A12  B4D8               	btfsc	status,2,c
  5836  000A14  D76C               	goto	i2l2594
  5837  000A16  0A07               	xorlw	7	; case 4
  5838  000A18  B4D8               	btfsc	status,2,c
  5839  000A1A  D77A               	goto	i2l2598
  5840  000A1C  0A01               	xorlw	1	; case 5
  5841  000A1E  B4D8               	btfsc	status,2,c
  5842  000A20  D788               	goto	i2l2602
  5843  000A22  0A03               	xorlw	3	; case 6
  5844  000A24  B4D8               	btfsc	status,2,c
  5845  000A26  D796               	goto	i2l2606
  5846  000A28  0A01               	xorlw	1	; case 7
  5847  000A2A  B4D8               	btfsc	status,2,c
  5848  000A2C  D7A4               	goto	i2l2610
  5849  000A2E  0A0F               	xorlw	15	; case 8
  5850  000A30  B4D8               	btfsc	status,2,c
  5851  000A32  D7B2               	goto	i2l2614
  5852  000A34  0A01               	xorlw	1	; case 9
  5853  000A36  B4D8               	btfsc	status,2,c
  5854  000A38  D7C0               	goto	i2l2618
  5855  000A3A  0A03               	xorlw	3	; case 10
  5856  000A3C  B4D8               	btfsc	status,2,c
  5857  000A3E  D7CE               	goto	i2l2622
  5858  000A40  D000               	goto	i2l2628
  5859  000A42                     i2l2628:
  5860                           
  5861                           ;adc.c: 199: ADC_Buffer_Point++;
  5862  000A42  4A3D               	infsnz	_ADC_Buffer_Point,f,c
  5863  000A44  2A3E               	incf	_ADC_Buffer_Point+1,f,c
  5864  000A46  0012               	return	
  5865  000A48  0012               	return		;funcret
  5866  000A4A                     __end_of_ADC_ISR:
  5867                           	opt stack 0
  5868                           pclatu	equ	0xFFB
  5869                           pclath	equ	0xFFA
  5870                           tblptru	equ	0xFF8
  5871                           tblptrh	equ	0xFF7
  5872                           tblptrl	equ	0xFF6
  5873                           tablat	equ	0xFF5
  5874                           prodh	equ	0xFF4
  5875                           prodl	equ	0xFF3
  5876                           intcon	equ	0xFF2
  5877                           intcon2	equ	0xFF1
  5878                           postinc0	equ	0xFEE
  5879                           fsr0h	equ	0xFEA
  5880                           fsr0l	equ	0xFE9
  5881                           wreg	equ	0xFE8
  5882                           postinc1	equ	0xFE6
  5883                           postdec1	equ	0xFE5
  5884                           fsr1h	equ	0xFE2
  5885                           fsr1l	equ	0xFE1
  5886                           indf2	equ	0xFDF
  5887                           postinc2	equ	0xFDE
  5888                           postdec2	equ	0xFDD
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _Set_4051 *****************
  5894 ;; Defined at:
  5895 ;;		line 7 in file "Functions.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  Channel         2    0[COMRAM] int 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;		None
  5900 ;; Return value:  Size  Location     Type
  5901 ;;		None               void
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5909 ;;      Params:         2       0       0       0       0       0       0
  5910 ;;      Locals:         0       0       0       0       0       0       0
  5911 ;;      Temps:          2       0       0       0       0       0       0
  5912 ;;      Totals:         4       0       0       0       0       0       0
  5913 ;;Total ram usage:        4 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_ADC_ISR
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text33
  5923  001B80                     __ptext33:
  5924                           	opt stack 0
  5925  001B80                     _Set_4051:
  5926                           	opt stack 23
  5927                           
  5928                           ;Functions.c: 9: if (Channel & 0x01)
  5929                           
  5930                           ;incstack = 0
  5931  001B80  A001               	btfss	Set_4051@Channel,0,c
  5932  001B82  D002               	goto	i2l2272
  5933                           
  5934                           ;Functions.c: 10: {
  5935                           ;Functions.c: 11: do { LATA6 = ~LATA6; } while(0);
  5936  001B84  7C89               	btg	3977,6,c	;volatile
  5937  001B86  D000               	goto	i2l2272
  5938  001B88                     i2l2272:
  5939                           
  5940                           ;Functions.c: 12: }
  5941                           ;Functions.c: 13: if ((Channel>>1) & 0x01)
  5942  001B88  3402               	rlcf	Set_4051@Channel+1,w,c
  5943  001B8A  3002               	rrcf	Set_4051@Channel+1,w,c
  5944  001B8C  6E04               	movwf	(??_Set_4051+1)& (0+255),c
  5945  001B8E  3001               	rrcf	Set_4051@Channel,w,c
  5946  001B90  6E03               	movwf	??_Set_4051& (0+255),c
  5947  001B92  A003               	btfss	??_Set_4051,0,c
  5948  001B94  D002               	goto	i2l2274
  5949                           
  5950                           ;Functions.c: 14: {
  5951                           ;Functions.c: 15: do { LATC0 = ~LATC0; } while(0);
  5952  001B96  708B               	btg	3979,0,c	;volatile
  5953  001B98  D000               	goto	i2l2274
  5954  001B9A                     i2l2274:
  5955                           
  5956                           ;Functions.c: 16: }
  5957                           ;Functions.c: 17: if ((Channel>>2) & 0x01)
  5958  001B9A  C001  F003         	movff	Set_4051@Channel,??_Set_4051
  5959  001B9E  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
  5960  001BA2  3404               	rlcf	??_Set_4051+1,w,c
  5961  001BA4  3204               	rrcf	??_Set_4051+1,f,c
  5962  001BA6  3203               	rrcf	??_Set_4051,f,c
  5963  001BA8  3404               	rlcf	??_Set_4051+1,w,c
  5964  001BAA  3204               	rrcf	??_Set_4051+1,f,c
  5965  001BAC  3203               	rrcf	??_Set_4051,f,c
  5966  001BAE  A003               	btfss	??_Set_4051,0,c
  5967  001BB0  0012               	return	
  5968                           
  5969                           ;Functions.c: 18: {
  5970                           ;Functions.c: 19: do { LATC1 = ~LATC1; } while(0);
  5971  001BB2  728B               	btg	3979,1,c	;volatile
  5972  001BB4  0012               	return	
  5973  001BB6  0012               	return		;funcret
  5974  001BB8                     __end_of_Set_4051:
  5975                           	opt stack 0
  5976                           pclatu	equ	0xFFB
  5977                           pclath	equ	0xFFA
  5978                           tblptru	equ	0xFF8
  5979                           tblptrh	equ	0xFF7
  5980                           tblptrl	equ	0xFF6
  5981                           tablat	equ	0xFF5
  5982                           prodh	equ	0xFF4
  5983                           prodl	equ	0xFF3
  5984                           intcon	equ	0xFF2
  5985                           intcon2	equ	0xFF1
  5986                           postinc0	equ	0xFEE
  5987                           fsr0h	equ	0xFEA
  5988                           fsr0l	equ	0xFE9
  5989                           wreg	equ	0xFE8
  5990                           postinc1	equ	0xFE6
  5991                           postdec1	equ	0xFE5
  5992                           fsr1h	equ	0xFE2
  5993                           fsr1l	equ	0xFE1
  5994                           indf2	equ	0xFDF
  5995                           postinc2	equ	0xFDE
  5996                           postdec2	equ	0xFDD
  5997                           fsr2h	equ	0xFDA
  5998                           fsr2l	equ	0xFD9
  5999                           status	equ	0xFD8
  6000                           
  6001 ;; *************** function _ADC_StartConversion *****************
  6002 ;; Defined at:
  6003 ;;		line 36 in file "mcc_generated_files/adc.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;  channel         1    wreg     enum E8837
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  channel         1    1[COMRAM] enum E8837
  6008 ;; Return value:  Size  Location     Type
  6009 ;;		None               void
  6010 ;; Registers used:
  6011 ;;		wreg, status,2, status,0
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6017 ;;      Params:         0       0       0       0       0       0       0
  6018 ;;      Locals:         1       0       0       0       0       0       0
  6019 ;;      Temps:          1       0       0       0       0       0       0
  6020 ;;      Totals:         2       0       0       0       0       0       0
  6021 ;;Total ram usage:        2 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_ADC_ISR
  6027 ;;		_Battery_Read
  6028 ;;		_Temp_Read
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           	psect	text34
  6033  001CAC                     __ptext34:
  6034                           	opt stack 0
  6035  001CAC                     _ADC_StartConversion:
  6036                           	opt stack 23
  6037                           
  6038                           ;incstack = 0
  6039                           ;ADC_StartConversion@channel stored from wreg
  6040  001CAC  6E02               	movwf	ADC_StartConversion@channel,c
  6041                           
  6042                           ;adc.c: 39: ADCON0bits.CHS = channel;
  6043  001CAE  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  6044  001CB2  4601               	rlncf	??_ADC_StartConversion,f,c
  6045  001CB4  4601               	rlncf	??_ADC_StartConversion,f,c
  6046  001CB6  50C2               	movf	4034,w,c	;volatile
  6047  001CB8  1801               	xorwf	??_ADC_StartConversion,w,c
  6048  001CBA  0B83               	andlw	-125
  6049  001CBC  1801               	xorwf	??_ADC_StartConversion,w,c
  6050  001CBE  6EC2               	movwf	4034,c	;volatile
  6051                           
  6052                           ;adc.c: 42: ADCON0bits.ADON = 1;
  6053  001CC0  80C2               	bsf	4034,0,c	;volatile
  6054                           
  6055                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
  6056  001CC2  82C2               	bsf	4034,1,c	;volatile
  6057  001CC4  0012               	return		;funcret
  6058  001CC6                     __end_of_ADC_StartConversion:
  6059                           	opt stack 0
  6060                           pclatu	equ	0xFFB
  6061                           pclath	equ	0xFFA
  6062                           tblptru	equ	0xFF8
  6063                           tblptrh	equ	0xFF7
  6064                           tblptrl	equ	0xFF6
  6065                           tablat	equ	0xFF5
  6066                           prodh	equ	0xFF4
  6067                           prodl	equ	0xFF3
  6068                           intcon	equ	0xFF2
  6069                           intcon2	equ	0xFF1
  6070                           postinc0	equ	0xFEE
  6071                           fsr0h	equ	0xFEA
  6072                           fsr0l	equ	0xFE9
  6073                           wreg	equ	0xFE8
  6074                           postinc1	equ	0xFE6
  6075                           postdec1	equ	0xFE5
  6076                           fsr1h	equ	0xFE2
  6077                           fsr1l	equ	0xFE1
  6078                           indf2	equ	0xFDF
  6079                           postinc2	equ	0xFDE
  6080                           postdec2	equ	0xFDD
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _ADC_GetConversionResult *****************
  6086 ;; Defined at:
  6087 ;;		line 55 in file "mcc_generated_files/adc.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;		None
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;		None
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  2    0[COMRAM] unsigned int 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6101 ;;      Params:         2       0       0       0       0       0       0
  6102 ;;      Locals:         0       0       0       0       0       0       0
  6103 ;;      Temps:          2       0       0       0       0       0       0
  6104 ;;      Totals:         4       0       0       0       0       0       0
  6105 ;;Total ram usage:        4 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_ADC_ISR
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           	psect	text35
  6115  001CDE                     __ptext35:
  6116                           	opt stack 0
  6117  001CDE                     _ADC_GetConversionResult:
  6118                           	opt stack 23
  6119                           
  6120                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
  6121                           
  6122                           ;incstack = 0
  6123  001CDE  50C4               	movf	4036,w,c	;volatile
  6124  001CE0  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  6125  001CE2  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  6126  001CE4  50C3               	movf	4035,w,c	;volatile
  6127  001CE6  2403               	addwf	??_ADC_GetConversionResult,w,c
  6128  001CE8  6E01               	movwf	?_ADC_GetConversionResult,c
  6129  001CEA  0E00               	movlw	0
  6130  001CEC  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  6131  001CEE  6E02               	movwf	?_ADC_GetConversionResult+1,c
  6132  001CF0  0012               	return	
  6133  001CF2  0012               	return		;funcret
  6134  001CF4                     __end_of_ADC_GetConversionResult:
  6135                           	opt stack 0
  6136                           pclatu	equ	0xFFB
  6137                           pclath	equ	0xFFA
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           intcon	equ	0xFF2
  6145                           intcon2	equ	0xFF1
  6146                           postinc0	equ	0xFEE
  6147                           fsr0h	equ	0xFEA
  6148                           fsr0l	equ	0xFE9
  6149                           wreg	equ	0xFE8
  6150                           postinc1	equ	0xFE6
  6151                           postdec1	equ	0xFE5
  6152                           fsr1h	equ	0xFE2
  6153                           fsr1l	equ	0xFE1
  6154                           indf2	equ	0xFDF
  6155                           postinc2	equ	0xFDE
  6156                           postdec2	equ	0xFDD
  6157                           fsr2h	equ	0xFDA
  6158                           fsr2l	equ	0xFD9
  6159                           status	equ	0xFD8
  6160                           pclatu	equ	0xFFB
  6161                           pclath	equ	0xFFA
  6162                           tblptru	equ	0xFF8
  6163                           tblptrh	equ	0xFF7
  6164                           tblptrl	equ	0xFF6
  6165                           tablat	equ	0xFF5
  6166                           prodh	equ	0xFF4
  6167                           prodl	equ	0xFF3
  6168                           intcon	equ	0xFF2
  6169                           intcon2	equ	0xFF1
  6170                           postinc0	equ	0xFEE
  6171                           fsr0h	equ	0xFEA
  6172                           fsr0l	equ	0xFE9
  6173                           wreg	equ	0xFE8
  6174                           postinc1	equ	0xFE6
  6175                           postdec1	equ	0xFE5
  6176                           fsr1h	equ	0xFE2
  6177                           fsr1l	equ	0xFE1
  6178                           indf2	equ	0xFDF
  6179                           postinc2	equ	0xFDE
  6180                           postdec2	equ	0xFDD
  6181                           fsr2h	equ	0xFDA
  6182                           fsr2l	equ	0xFD9
  6183                           status	equ	0xFD8
  6184                           
  6185                           	psect	rparam
  6186  0000                     pclatu	equ	0xFFB
  6187                           pclath	equ	0xFFA
  6188                           tblptru	equ	0xFF8
  6189                           tblptrh	equ	0xFF7
  6190                           tblptrl	equ	0xFF6
  6191                           tablat	equ	0xFF5
  6192                           prodh	equ	0xFF4
  6193                           prodl	equ	0xFF3
  6194                           intcon	equ	0xFF2
  6195                           intcon2	equ	0xFF1
  6196                           postinc0	equ	0xFEE
  6197                           fsr0h	equ	0xFEA
  6198                           fsr0l	equ	0xFE9
  6199                           wreg	equ	0xFE8
  6200                           postinc1	equ	0xFE6
  6201                           postdec1	equ	0xFE5
  6202                           fsr1h	equ	0xFE2
  6203                           fsr1l	equ	0xFE1
  6204                           indf2	equ	0xFDF
  6205                           postinc2	equ	0xFDE
  6206                           postdec2	equ	0xFDD
  6207                           fsr2h	equ	0xFDA
  6208                           fsr2l	equ	0xFD9
  6209                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        0
    BSS         293
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      72
    BANK0           160     46     152
    BANK1           256      0     170
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 


Critical Paths under _main in COMRAM

    _Temp_Fault->___ftge
    _Temp_Convert->___ftadd
    _log->___ftadd
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftdiv->___ftpack
    _Temp_Filter->___ftadd
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___ftadd
    ___awtoft->___wmul
    _Battery_Filter->___ftadd
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   99507
                                             41 BANK0      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    3944
                                             45 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                         9     9      0   65864
                                             32 BANK0      9     9      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   26563
                                             27 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   13398
                                             15 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5553
                                             15 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3306
                                             30 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   13204
                                             15 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    3975
                                             45 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                             36 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      2     2      0   25724
                                             17 BANK0      2     2      0
                     _Battery_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2828
                                             36 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1061
                                             22 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   13204
                                             15 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3312
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4412
                                             40 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5189
                                             49 COMRAM     3     3      0
                                              6 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2464
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1171
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1171
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      AA       6       66.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2E      98       4       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      48       1       75.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18A       9        0.0%
DATA                 0      0     18A      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 09 11:11:02 2015

           _eusart1TxBufferRemaining 0048                         ___awdiv@sign 001C  
                ___wmul@multiplicand 0021                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         ___ftadd@exp1 00D8  
                       ___ftadd@exp2 00D7                         ___ftadd@sign 00D6  
                                l328 1800                                  l338 1180  
                                l384 1A2E                                  l394 1016  
                                l821 0AD8                                  l823 0B02  
                                l832 0BE2                                  l841 0C0C  
                                l817 0AA2                                  l852 14A8  
                                l788 1728                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0046  
                                _log 1182                      __end_of_ADC_ISR 0A4A  
                                prod 000FF3                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                      ?_Battery_Filter 0001  
                       ___ftdiv@cntr 0028                         ___ftdiv@sign 002D  
                               l3010 1360                                 l3020 1398  
                               l3014 1378                                 l2222 1956  
                               l3110 11D4                                 l3024 13B0  
                               l3040 1B20                                 l3104 11A6  
                               l3018 1390                                 l3210 1912  
                               l3028 13CA                                 l3052 1022  
                               l3220 175E                                 l3132 1442  
                               l3062 1106                                 l3214 1922  
                               l3206 1906                                 l3230 17F8  
                               l3126 141A                                 l3046 1522  
                               l3064 1110                                 l3056 103C  
                               l3240 15E4                                 l3224 1772  
                               l3080 0ED2                                 l3152 1482  
                               l3048 15A6                                 l3162 14B6  
                               l3170 1A54                                 l3250 19CC  
                               l3314 1B66                                 l3068 112A  
                               l3236 15CA                                 l2460 1866  
                               l3092 0FC0                                 l3076 0EB8  
                               l3308 1B50                                 l3182 18AE  
                               l3246 1686                                 l3086 0F9C  
                               l3254 19E0                                 l2456 1834  
                               l3088 0FA6                                 l3194 18D6  
                               l2466 1892                                 l3258 1A26  
                               l3196 18E0                                 l3188 18C0  
                               l3292 0EA8                                 l3268 0CD4  
                               l3198 18E8                                 l2904 1742  
                               l2922 0AB0                                 l2950 0B68  
                               l2934 0AF8                                 l2880 16AC  
                               l2952 0B78                                 l2944 0B3A  
                               l2928 0AE6                                 l2890 1710  
                               l2882 16B8                                 l2970 0C38  
                               l2962 0BC2                                 l2954 0B88  
                               l2892 171C                                 l2884 16D8  
                               l2876 169C                                 l2980 0C88  
                               l2964 0BD2                                 l2956 0B94  
                               l2990 12F0                                 l2888 16F0  
                               l2898 1730                                 l2996 131C  
                               ?_log 00E5                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 u2241 0A5C  
                               _LATE 000F8D                                 u2251 0A74  
                               u1490 197E                                 u2451 12D4  
                               u2471 1300                                 u2631 1402  
                               u1498 1980                                 u2651 142A  
                               u2840 0CD2                                 _TMR1 000FCE  
                               _WPUB 000F61                                 _main 1B46  
                       ___ftpack@arg 0017                         ___ftpack@exp 001A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               log@x 00E5                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00AA                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 00CE                         ___param_bank 000010  
                       ___ftmul@sign 00CF                    ADC_ISR@ADC_Result 0007  
                              ??_log 0035                     ?_Battery_Convert 0001  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 1D12  
                              ?_main 00F3                      __end_of___awdiv 192E  
                    __end_of___ftadd 0CB0                      __end_of___ftdiv 14DE  
                    _TMR1_StartTimer 1D24                      __end_of___ftmul 13F2  
                    ___awdiv@divisor 0019                                _T1CON 000FCD  
                    __end_of___ftsub 1A80                                _LATC0 007C58  
                              _LATA4 007C4C                                _LATC1 007C59  
                              _LATA6 007C4E                       __CFG_DEBUG$OFF 000000  
                              i2l126 1BE4                                i2l282 0070  
                              i2l274 004C                                i2l276 0058  
                              i2l278 0064                      ___awdiv@counter 001B  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0016  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 1BB8                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR1_ISR 1D04                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 0028  
                              _frexp 192E                                _errno 00B4  
                 __CFG_MCLRE$EXTMCLR 000000                        ___ftpack@sign 001B  
            __end_of_TMR1_Initialize 1C92                          _Battery_Adc 009C  
                              tablat 000FF5                                status 000FD8  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                    __initialization 1C1A                          log@exponent 00E8  
         __end_of_EUSART1_Initialize 1B0A                         __end_of_main 1B80  
                   __end_of_Set_4051 1BB8                            ??_ADC_ISR 0005  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 0035  
                      __activetblptr 000002           ADC_StartConversion@channel 0002  
              ?_EUSART1_Transmit_ISR 0001                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 0017                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 0017  
                   __end_of___awtoft 1B46                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 1752                               _T1GCON 000FCC  
                             _RC1REG 000FAE                               _RC1STA 000FAB  
                             i2l1602 1BE0                               i2l2510 063C  
                             i2l2502 1C16                               i2l2272 1B88  
                             i2l2274 1B9A                               i2l2610 0976  
                             i2l2602 0932                               i2l2522 0698  
                             i2l2540 0722                               i2l2516 066A  
                             i2l2622 09DC                               i2l2614 0998  
                             i2l2606 0954                               i2l2534 06F4  
                     __CFG_WDTEN$OFF 000000                               i2l2552 077E  
                             i2l2528 06C6                               i2l2618 09BA  
                             i2l2626 09EC                               i2l2570 0808  
                             i2l2546 0750                               i2l2628 0A42  
                             i2l2564 07DA                               i2l2590 08CC  
                             i2l2582 0888                               i2l2558 07AC  
                             i2l2574 0818                               i2l2494 1BF4  
                             i2l2576 086E                               i2l2594 08EE  
                             i2l2586 08AA                               i2l2578 0874  
                             i2l2598 0910                               _RCREG1 000FAE  
                      ??_Temp_Filter 0035                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _TX1REG 000FAD  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                         _Temp_Fault 19C0                       __CFG_XINST$OFF 000000  
                             ___ftge 1802              __end_of_TMR1_StartTimer 1D28  
                             ___wmul 1C48                            ??___awdiv 001B  
                          ??___ftadd 0032                       __CFG_STVREN$ON 000000  
                          ??___ftdiv 0025                            ??___ftmul 002F  
                          ??___ftsub 0035                               clear_0 1C20  
                             clear_1 1C2C                               clear_2 1C38  
                   ___awdiv@quotient 001D                ___ftmul@f3_as_product 00CB  
                       _Battery_Volt 0060                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                      _eusart1RxBuffer 0100  
      __size_of_INTERRUPT_Initialize 000C                __end_of_TMR1_CallBack 1D24  
                    _eusart1TxBuffer 0035                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 1C92                     __end_oflog@coeff 061C  
                         __accesstop 0060              __end_of__initialization 1C3E  
                         ___ftadd@f1 00D0                           ___ftadd@f2 00D3  
                         ___ftge@ff1 0025                           ___ftge@ff2 0028  
                 ?_SYSTEM_Initialize 0001                         eval_poly@res 00E2  
                      ___rparam_used 000001                           ___ftdiv@f1 001F  
                         ___ftdiv@f2 0022                           ___ftdiv@f3 0029  
                         ___awtoft@c 0025                           ___ftmul@f1 0029  
                         ___ftmul@f2 002C                           ___ftsub@f1 00D9  
                         ___ftsub@f2 00DC                  __end_of_Temp_Filter 1018  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0017                            ?_TMR1_ISR 0001  
                      __end_of_frexp 19C0               ??_EUSART1_Transmit_ISR 0001  
            _ADC_GetConversionResult 1CDE                     ??_Battery_Filter 0035  
        __end_of_EUSART1_Receive_ISR 1C1A                        ?_Temp_Convert 0001  
                            ??_frexp 001C            __end_of_SYSTEM_Initialize 1CAC  
                      _eusart1RxHead 0042                        _eusart1TxHead 0044  
                      _eusart1RxTail 0043                           __pbssBANK0 0060  
                         __pbssBANK1 0100                        _eusart1TxTail 0045  
                 __size_of_eval_poly 00E2                      __CFG_PLLCFG$OFF 000000  
                          ?_Set_4051 0001                           __pnvCOMRAM 0046  
              Temp_Convert@steinhart 00F0                          ?_Temp_Fault 0001  
                 __CFG_CCP2MX$PORTC1 000000                          Temp_Fault@i 002F  
                            ?___ftge 0025                              ?___wmul 001F  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0001  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 061E  
                          ?___awtoft 0025                            ?___ftpack 0017  
            __size_of_ADC_Initialize 0018                        Temp_Convert@x 00EE  
             __size_of_Battery_Fault 00B0                      Temp_Fault@fault 002E  
                     Battery_Fault@i 002F                              _OSCCON2 000FD2  
                     ??_Temp_Convert 0035                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                         ??_Set_4051 0003                          _Temp_Filter 0EAE  
                        _Temp_Aquire 003F                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                              __Lparam 0000  
                    __size_of___ftge 0096                              ___awdiv 1898  
                            ___ftadd 0A4A                              ___ftdiv 13F2  
                    __size_of___wmul 0028                              ___ftmul 12C4  
                            ___ftsub 1A30                         __psmallconst 0600  
          ??_ADC_GetConversionResult 0003                              __pcinit 1C1A  
                         ??___awtoft 0028                           ??___ftpack 001C  
                  __end_of_eval_poly 15C0                              __ramtop 0600  
                            __ptext0 1B46                              __ptext1 19C0  
                            __ptext2 0CB0                              __ptext3 1182  
                            __ptext4 192E                              __ptext5 14DE  
                            __ptext6 1A30                              __ptext7 13F2  
                            __ptext8 0EAE                              __ptext9 1C92  
                          _T1CONbits 000FCD                _OSCILLATOR_Initialize 1D04  
                       __size_of_log 0142                  __size_of_Temp_Fault 0070  
                 _EUSART1_Initialize 1ACE             ??_PIN_MANAGER_Initialize 0017  
           __size_of_Battery_Convert 00CC           __size_of_SYSTEM_Initialize 001A  
               end_of_initialization 1C3E                  ?_EUSART1_Initialize 0001  
                      __Lmediumconst 0000                        _Battery_Fault 1752  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                     Battery_Convert@x 00DB  
               ??_EUSART1_Initialize 0017                  _ADC_StartConversion 1CAC  
                        _Volt_Aquire 0040                       ?_Battery_Fault 0001  
                        ___ftdiv@exp 002C                          ___ftmul@exp 00CA  
               ?_ADC_StartConversion 0001                 __end_of_Temp_Convert 0EAE  
       __end_of_INTERRUPT_Initialize 1D1E                       __end_of___ftge 1898  
                     __end_of___wmul 1C70                    __size_of_TMR1_ISR 0010  
                     _ADC_Initialize 1CC6               ?_OSCILLATOR_Initialize 0001  
                start_initialization 1C1A                           eval_poly@d 00DC  
                         eval_poly@n 00DE                           eval_poly@x 00D9  
    __size_of_PIN_MANAGER_Initialize 004E                          __end_of_log 12C4  
                         frexp@value 0017                    ??_Battery_Convert 0035  
                       ??_Temp_Fault 002E                    __size_of_Set_4051 0038  
                          _Temp_DegF 007E                     _PrevBattery_Volt 0132  
                          _Temp_Done 00B0                ??_ADC_StartConversion 0001  
           __size_of_TMR1_Initialize 0022                             ??___ftge 002B  
                           ??___wmul 0023               __end_of_ADC_Initialize 1CDE  
                           ?_ADC_ISR 0001               __size_of_TMR1_CallBack 0006  
                     _eusart1RxCount 0041                    __size_of___awtoft 003C  
                  __size_of___ftpack 00C6                            _Volt_Done 00B2  
                        __pbssCOMRAM 0035        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 00CA                   __end_of_Temp_Fault 1A30  
                      _PrevTemp_DegF 0150                      ??_Battery_Fault 002E  
       __size_of_EUSART1_Receive_ISR 0030                         ?_Temp_Filter 0001  
             _PIN_MANAGER_Initialize 1A80                            __pintcode 0008  
                  _Temp_Convert$1582 00EA                    _Temp_Convert$1583 00EC  
                           ?___awdiv 0017                             ?___ftadd 00D0  
                           ?___ftdiv 001F                             ?___ftmul 0029  
                           ?___ftsub 00D9                         Temp_Filter@x 00D9  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 0009  
                           _BAUD1CON 000FB8                          __smallconst 0600  
           __size_of_TMR1_StartTimer 0004                            _eval_poly 14DE  
                     __size_of_frexp 0092                 _INTERRUPT_Initialize 1D12  
                      _TMR1_CallBack 1D1E              __size_of_Battery_Filter 016A  
                     ___wmul@product 0023                __size_of_Temp_Convert 01FE  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 00A2                             _PIR1bits 000F9E  
                    Battery_Filter@x 00D9                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 1CF4  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 042C  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 001F  
                         ?_eval_poly 00D9                         _Temp_Convert 0CB0  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                     ?_TMR1_CallBack 0001                             _Set_4051 1B80  
                          frexp@eptr 001A                             __Hrparam 0000  
                           _Temp_Adc 00B6                             __Lrparam 0000  
           ?_ADC_GetConversionResult 0001                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0017  
                   __size_of___awdiv 0096                     __size_of___ftadd 0266  
                   __size_of___ftdiv 00EC                     __size_of___ftmul 012E  
                   __size_of___ftsub 0050          __size_of_EUSART1_Initialize 003C  
                           ___awtoft 1B0A                             ___ftpack 168C  
                    _Battery_Convert 15C0                   Battery_Fault@fault 002E  
                           __ptext10 1C70                             __ptext11 1D24  
                           __ptext20 1B0A                             __ptext12 1A80  
                           __ptext21 1898                             __ptext13 1D04  
                         _T1GCONbits 000FCC                             __ptext30 1BB8  
                           __ptext22 1018                             __ptext14 1D12  
                           __ptext31 1BEA                             __ptext23 1C48  
                           __ptext15 1ACE                             __ptext32 061E  
                           __ptext24 12C4                             __ptext16 1CC6  
                           __ptext33 1B80                             __ptext25 0A4A  
                           __ptext17 1752                             __ptext34 1CAC  
                           __ptext26 168C                             __ptext18 1802  
                           __ptext35 1CDE                             __ptext19 15C0  
                           __ptext28 1CF4                             __ptext29 1D1E  
                  ??_TMR1_StartTimer 0017                        __size_of_main 003A  
                       _TmpTemp_DegF 018C                 __size_of_Temp_Filter 016A  
                         _RC1STAbits 000FAB   __end_of_INTERRUPT_InterruptManager 00AA  
         _INTERRUPT_InterruptManager 0008                             main@argc 00F3  
                           main@argv 00F5                  _EUSART1_Receive_ISR 1BEA  
                           log@coeff 0601                           _INTCONbits 000FF2  
                        ??_eval_poly 00E0               ??_INTERRUPT_Initialize 0017  
                    ??_TMR1_CallBack 0001                             intlevel2 0000  
                     _Battery_Filter 1018                 ?_EUSART1_Receive_ISR 0001  
        __end_of_ADC_StartConversion 1CC6                     _TempBattery_Volt 016E  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 1CF4  
       __end_of_EUSART1_Transmit_ISR 1BEA                     ??_ADC_Initialize 0017  
            __end_of_Battery_Convert 168C                    __CFG_T3CMX$PORTC0 000000  
             __end_of_Battery_Filter 1182                ??_EUSART1_Receive_ISR 0001  
     __end_of_PIN_MANAGER_Initialize 1ACE                __end_of_Battery_Fault 1802  
                  __CFG_FOSC$INTIO67 000000                      _TMR1_Initialize 1C70  
                   _ADC_Buffer_Point 003D                      Set_4051@Channel 0001  
