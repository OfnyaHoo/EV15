

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun May 03 02:48:05 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           	psect	smallconst
    72  000600                     __psmallconst:
    73                           	opt stack 0
    74  000600  00                 	db	0
    75  000601                     _dpowers:
    76                           	opt stack 0
    77  000601  0001               	dw	1
    78  000603  0000               	dw	0
    79  000605  000A               	dw	10
    80  000607  0000               	dw	0
    81  000609  0064               	dw	100
    82  00060B  0000               	dw	0
    83  00060D  03E8               	dw	1000
    84  00060F  0000               	dw	0
    85  000611  2710               	dw	10000
    86  000613  0000               	dw	0
    87  000615  86A0               	dw	34464
    88  000617  0001               	dw	1
    89  000619  4240               	dw	16960
    90  00061B  000F               	dw	15
    91  00061D  9680               	dw	38528
    92  00061F  0098               	dw	152
    93  000621  E100               	dw	57600
    94  000623  05F5               	dw	1525
    95  000625  CA00               	dw	51712
    96  000627  3B9A               	dw	15258
    97  000629                     __end_of_dpowers:
    98                           	opt stack 0
    99  000629                     __npowers_:
   100                           	opt stack 0
   101  000629  00                 	db	0
   102  00062A  80                 	db	128
   103  00062B  3F                 	db	63
   104  00062C  CD                 	db	205
   105  00062D  CC                 	db	204
   106  00062E  3D                 	db	61
   107  00062F  D7                 	db	215
   108  000630  23                 	db	35
   109  000631  3C                 	db	60
   110  000632  12                 	db	18
   111  000633  83                 	db	131
   112  000634  3A                 	db	58
   113  000635  B7                 	db	183
   114  000636  D1                 	db	209
   115  000637  38                 	db	56
   116  000638  C6                 	db	198
   117  000639  27                 	db	39
   118  00063A  37                 	db	55
   119  00063B  38                 	db	56
   120  00063C  86                 	db	134
   121  00063D  35                 	db	53
   122  00063E  C0                 	db	192
   123  00063F  D6                 	db	214
   124  000640  33                 	db	51
   125  000641  CC                 	db	204
   126  000642  2B                 	db	43
   127  000643  32                 	db	50
   128  000644  70                 	db	112
   129  000645  89                 	db	137
   130  000646  30                 	db	48
   131  000647  E7                 	db	231
   132  000648  DB                 	db	219
   133  000649  2E                 	db	46
   134  00064A  E5                 	db	229
   135  00064B  3C                 	db	60
   136  00064C  1E                 	db	30
   137  00064D  42                 	db	66
   138  00064E  A2                 	db	162
   139  00064F  0D                 	db	13
   140  000650                     __end_of__npowers_:
   141                           	opt stack 0
   142  000650                     __powers_:
   143                           	opt stack 0
   144  000650  00                 	db	0
   145  000651  80                 	db	128
   146  000652  3F                 	db	63
   147  000653  00                 	db	0
   148  000654  20                 	db	32
   149  000655  41                 	db	65
   150  000656  00                 	db	0
   151  000657  C8                 	db	200
   152  000658  42                 	db	66
   153  000659  00                 	db	0
   154  00065A  7A                 	db	122
   155  00065B  44                 	db	68
   156  00065C  40                 	db	64
   157  00065D  1C                 	db	28
   158  00065E  46                 	db	70
   159  00065F  50                 	db	80
   160  000660  C3                 	db	195
   161  000661  47                 	db	71
   162  000662  24                 	db	36
   163  000663  74                 	db	116
   164  000664  49                 	db	73
   165  000665  97                 	db	151
   166  000666  18                 	db	24
   167  000667  4B                 	db	75
   168  000668  BC                 	db	188
   169  000669  BE                 	db	190
   170  00066A  4C                 	db	76
   171  00066B  6B                 	db	107
   172  00066C  6E                 	db	110
   173  00066D  4E                 	db	78
   174  00066E  03                 	db	3
   175  00066F  15                 	db	21
   176  000670  50                 	db	80
   177  000671  79                 	db	121
   178  000672  AD                 	db	173
   179  000673  60                 	db	96
   180  000674  F3                 	db	243
   181  000675  49                 	db	73
   182  000676  71                 	db	113
   183  000677                     __end_of__powers_:
   184                           	opt stack 0
   185  000677                     log@coeff:
   186                           	opt stack 0
   187  000677  00                 	db	0
   188  000678  00                 	db	0
   189  000679  00                 	db	0
   190  00067A  00                 	db	0
   191  00067B  80                 	db	128
   192  00067C  3F                 	db	63
   193  00067D  F0                 	db	240
   194  00067E  FF                 	db	255
   195  00067F  BE                 	db	190
   196  000680  E2                 	db	226
   197  000681  A9                 	db	169
   198  000682  3E                 	db	62
   199  000683  83                 	db	131
   200  000684  76                 	db	118
   201  000685  BE                 	db	190
   202  000686  AE                 	db	174
   203  000687  2B                 	db	43
   204  000688  3E                 	db	62
   205  000689  3C                 	db	60
   206  00068A  C3                 	db	195
   207  00068B  BD                 	db	189
   208  00068C  D2                 	db	210
   209  00068D  13                 	db	19
   210  00068E  3D                 	db	61
   211  00068F  78                 	db	120
   212  000690  D3                 	db	211
   213  000691  BB                 	db	187
   214  000692                     __end_oflog@coeff:
   215                           	opt stack 0
   216  0000                     _TMR1	set	4046
   217  0000                     _ADCON0	set	4034
   218  0000                     _ADCON0bits	set	4034
   219  0000                     _ADCON1	set	4033
   220  0000                     _ADCON2	set	4032
   221  0000                     _ADRESH	set	4036
   222  0000                     _ADRESL	set	4035
   223  0000                     _ANSELA	set	3896
   224  0000                     _ANSELB	set	3897
   225  0000                     _ANSELC	set	3898
   226  0000                     _ANSELD	set	3899
   227  0000                     _ANSELE	set	3900
   228  0000                     _BAUD1CON	set	4024
   229  0000                     _INTCON2bits	set	4081
   230  0000                     _INTCONbits	set	4082
   231  0000                     _IPR1bits	set	3999
   232  0000                     _LATA	set	3977
   233  0000                     _LATB	set	3978
   234  0000                     _LATC	set	3979
   235  0000                     _LATD	set	3980
   236  0000                     _LATE	set	3981
   237  0000                     _OSCCON	set	4051
   238  0000                     _OSCCON2	set	4050
   239  0000                     _OSCTUNE	set	3995
   240  0000                     _PIE1bits	set	3997
   241  0000                     _PIR1bits	set	3998
   242  0000                     _RC1REG	set	4014
   243  0000                     _RC1STA	set	4011
   244  0000                     _RC1STAbits	set	4011
   245  0000                     _RCONbits	set	4048
   246  0000                     _RCREG1	set	4014
   247  0000                     _SPBRG1	set	4015
   248  0000                     _SPBRGH1	set	4016
   249  0000                     _T1CON	set	4045
   250  0000                     _T1CONbits	set	4045
   251  0000                     _T1GCON	set	4044
   252  0000                     _T1GCONbits	set	4044
   253  0000                     _TMR1H	set	4047
   254  0000                     _TMR1L	set	4046
   255  0000                     _TRISA	set	3986
   256  0000                     _TRISB	set	3987
   257  0000                     _TRISC	set	3988
   258  0000                     _TRISD	set	3989
   259  0000                     _TRISE	set	3990
   260  0000                     _TX1REG	set	4013
   261  0000                     _TX1STA	set	4012
   262  0000                     _TXREG1	set	4013
   263  0000                     _WPUB	set	3937
   264  0000                     _LATA0	set	31816
   265  0000                     _LATA4	set	31820
   266  0000                     _LATA6	set	31822
   267  0000                     _LATB0	set	31824
   268  0000                     _LATB1	set	31825
   269  0000                     _LATB3	set	31827
   270  0000                     _LATC0	set	31832
   271  0000                     _LATC1	set	31833
   272  0000                     _LATC4	set	31836
   273  0000                     _LATC5	set	31837
   274  0000                     _LATD1	set	31841
   275  0000                     _LATD2	set	31842
   276  0000                     _LATD3	set	31843
   277  0000                     _LATD5	set	31845
   278  000692                     __stringdata:
   279                           	opt stack 0
   280  000692                     STR_2:
   281  000692  42                 	db	66	;'B'
   282  000693  61                 	db	97	;'a'
   283  000694  74                 	db	116	;'t'
   284  000695  74                 	db	116	;'t'
   285  000696  65                 	db	101	;'e'
   286  000697  72                 	db	114	;'r'
   287  000698  79                 	db	121	;'y'
   288  000699  20                 	db	32
   289  00069A  25                 	db	37
   290  00069B  64                 	db	100	;'d'
   291  00069C  20                 	db	32
   292  00069D  3D                 	db	61	;'='
   293  00069E  20                 	db	32
   294  00069F  25                 	db	37
   295  0006A0  66                 	db	102	;'f'
   296  0006A1  20                 	db	32
   297  0006A2  0D                 	db	13
   298  0006A3  0A                 	db	10
   299  0006A4  00                 	db	0
   300  0006A5                     STR_1:
   301  0006A5  48                 	db	72	;'H'
   302  0006A6  69                 	db	105	;'i'
   303  0006A7  20                 	db	32
   304  0006A8  4D                 	db	77	;'M'
   305  0006A9  6F                 	db	111	;'o'
   306  0006AA  74                 	db	116	;'t'
   307  0006AB  68                 	db	104	;'h'
   308  0006AC  65                 	db	101	;'e'
   309  0006AD  72                 	db	114	;'r'
   310  0006AE  20                 	db	32
   311  0006AF  46                 	db	70	;'F'
   312  0006B0  75                 	db	117	;'u'
   313  0006B1  63                 	db	99	;'c'
   314  0006B2  6B                 	db	107	;'k'
   315  0006B3  65                 	db	101	;'e'
   316  0006B4  72                 	db	114	;'r'
   317  0006B5  00                 	db	0
   318  0006B6                     __end_of__stringdata:
   319                           	opt stack 0
   320                           
   321                           ; #config settings
   322  0006B6  00                 	db	0	; dummy byte at the end
   323  0000                     
   324                           	psect	nvCOMRAM
   325  000047                     __pnvCOMRAM:
   326                           	opt stack 0
   327  000047                     _timer1ReloadVal:
   328                           	opt stack 0
   329  000047                     	ds	2
   330  000049                     _eusart1TxBufferRemaining:
   331                           	opt stack 0
   332  000049                     	ds	1
   333                           
   334                           	psect	cinit
   335  00370A                     __pcinit:
   336                           	opt stack 0
   337  00370A                     start_initialization:
   338                           	opt stack 0
   339  00370A                     __initialization:
   340                           	opt stack 0
   341                           
   342                           ; Clear objects allocated to BANK1 (200 bytes)
   343  00370A  EE01  F000         	lfsr	0,__pbssBANK1
   344  00370E  0EC8               	movlw	200
   345  003710                     clear_0:
   346  003710  6AEE               	clrf	postinc0,c
   347  003712  06E8               	decf	wreg,f,c
   348  003714  E1FD               	bnz	clear_0
   349                           
   350                           ; Clear objects allocated to BANK0 (76 bytes)
   351  003716  EE00  F060         	lfsr	0,__pbssBANK0
   352  00371A  0E4C               	movlw	76
   353  00371C                     clear_1:
   354  00371C  6AEE               	clrf	postinc0,c
   355  00371E  06E8               	decf	wreg,f,c
   356  003720  E1FD               	bnz	clear_1
   357                           
   358                           ; Clear objects allocated to COMRAM (19 bytes)
   359  003722  EE00  F034         	lfsr	0,__pbssCOMRAM
   360  003726  0E13               	movlw	19
   361  003728                     clear_2:
   362  003728  6AEE               	clrf	postinc0,c
   363  00372A  06E8               	decf	wreg,f,c
   364  00372C  E1FD               	bnz	clear_2
   365  00372E                     end_of_initialization:
   366                           	opt stack 0
   367  00372E                     __end_of__initialization:
   368                           	opt stack 0
   369  00372E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   370  003730  6EF8               	movwf	tblptru,c
   371  003732  0100               	movlb	0
   372  003734  EF26  F014         	goto	_main	;jump to C main() function
   373                           tblptru	equ	0xFF8
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           
   377                           	psect	bssCOMRAM
   378  000034                     __pbssCOMRAM:
   379                           	opt stack 0
   380  000034                     _eusart1TxBuffer:
   381                           	opt stack 0
   382  000034                     	ds	8
   383  00003C                     TMR1_ISR@CountCallBack:
   384                           	opt stack 0
   385  00003C                     	ds	2
   386  00003E                     _ADC_Buffer_Point:
   387                           	opt stack 0
   388  00003E                     	ds	2
   389  000040                     _Temp_Aquire:
   390                           	opt stack 0
   391  000040                     	ds	1
   392  000041                     _Volt_Aquire:
   393                           	opt stack 0
   394  000041                     	ds	1
   395  000042                     _eusart1RxCount:
   396                           	opt stack 0
   397  000042                     	ds	1
   398  000043                     _eusart1RxHead:
   399                           	opt stack 0
   400  000043                     	ds	1
   401  000044                     _eusart1RxTail:
   402                           	opt stack 0
   403  000044                     	ds	1
   404  000045                     _eusart1TxHead:
   405                           	opt stack 0
   406  000045                     	ds	1
   407  000046                     _eusart1TxTail:
   408                           	opt stack 0
   409  000046                     	ds	1
   410                           tblptru	equ	0xFF8
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           
   414                           	psect	bssBANK0
   415  000060                     __pbssBANK0:
   416                           	opt stack 0
   417  000060                     _Battery_Volt:
   418                           	opt stack 0
   419  000060                     	ds	30
   420  00007E                     _Battery_Adc:
   421                           	opt stack 0
   422  00007E                     	ds	20
   423  000092                     _Temp_Done:
   424                           	opt stack 0
   425  000092                     	ds	2
   426  000094                     _Volt_Done:
   427                           	opt stack 0
   428  000094                     	ds	2
   429  000096                     _errno:
   430                           	opt stack 0
   431  000096                     	ds	2
   432  000098                     _Temp_Adc:
   433                           	opt stack 0
   434  000098                     	ds	20
   435                           tblptru	equ	0xFF8
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           
   439                           	psect	bssBANK1
   440  000100                     __pbssBANK1:
   441                           	opt stack 0
   442  000100                     _eusart1RxBuffer:
   443                           	opt stack 0
   444  000100                     	ds	50
   445  000132                     _PrevBattery_Volt:
   446                           	opt stack 0
   447  000132                     	ds	30
   448  000150                     _PrevTemp_DegF:
   449                           	opt stack 0
   450  000150                     	ds	30
   451  00016E                     _Temp_DegF:
   452                           	opt stack 0
   453  00016E                     	ds	30
   454  00018C                     _TempBattery_Volt:
   455                           	opt stack 0
   456  00018C                     	ds	30
   457  0001AA                     _TmpTemp_DegF:
   458                           	opt stack 0
   459  0001AA                     	ds	30
   460                           tblptru	equ	0xFF8
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           
   464                           	psect	cstackBANK1
   465  0001C8                     __pcstackBANK1:
   466                           	opt stack 0
   467  0001C8                     _printf$1705:
   468                           	opt stack 0
   469                           
   470                           ; 3 bytes @ 0x0
   471  0001C8                     	ds	3
   472  0001CB                     _printf$1058:
   473                           	opt stack 0
   474                           
   475                           ; 4 bytes @ 0x3
   476  0001CB                     	ds	4
   477  0001CF                     printf@vd:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x7
   481  0001CF                     	ds	4
   482  0001D3                     printf@vd_1060:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0xB
   486  0001D3                     	ds	4
   487  0001D7                     printf@ap:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0xF
   491  0001D7                     	ds	2
   492  0001D9                     printf@flag:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x11
   496  0001D9                     	ds	2
   497  0001DB                     printf@integ:
   498                           	opt stack 0
   499                           
   500                           ; 3 bytes @ 0x13
   501  0001DB                     	ds	3
   502  0001DE                     printf@prec:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x16
   506  0001DE                     	ds	2
   507  0001E0                     printf@_val:
   508                           	opt stack 0
   509                           
   510                           ; 5 bytes @ 0x18
   511  0001E0                     	ds	5
   512  0001E5                     printf@exp:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x1D
   516  0001E5                     	ds	2
   517  0001E7                     printf@fval:
   518                           	opt stack 0
   519                           
   520                           ; 3 bytes @ 0x1F
   521  0001E7                     	ds	3
   522  0001EA                     printf@c:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x22
   526  0001EA                     	ds	1
   527                           tblptru	equ	0xFF8
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           
   531                           	psect	cstackBANK0
   532  0000AC                     __pcstackBANK0:
   533                           	opt stack 0
   534  0000AC                     ?___ftmul:
   535                           	opt stack 0
   536  0000AC                     Battery_Fault@fault:
   537                           	opt stack 0
   538  0000AC                     Temp_Fault@fault:
   539                           	opt stack 0
   540  0000AC                     RunBypas@cellbyp:
   541                           	opt stack 0
   542  0000AC                     ___ftmul@f1:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x0
   546  0000AC                     	ds	1
   547  0000AD                     Battery_Fault@i:
   548                           	opt stack 0
   549  0000AD                     Temp_Fault@i:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x1
   553  0000AD                     	ds	1
   554  0000AE                     RunBypas@batvolt:
   555                           	opt stack 0
   556                           
   557                           ; 3 bytes @ 0x2
   558  0000AE                     	ds	1
   559  0000AF                     ___ftmul@f2:
   560                           	opt stack 0
   561                           
   562                           ; 3 bytes @ 0x3
   563  0000AF                     	ds	2
   564  0000B1                     RunBypas@i:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x5
   568  0000B1                     	ds	1
   569  0000B2                     ___ftmul@exp:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x6
   573  0000B2                     	ds	1
   574  0000B3                     ___ftmul@f3_as_product:
   575                           	opt stack 0
   576                           
   577                           ; 3 bytes @ 0x7
   578  0000B3                     	ds	3
   579  0000B6                     ___ftmul@cntr:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0xA
   583  0000B6                     	ds	1
   584  0000B7                     ___ftmul@sign:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0xB
   588  0000B7                     	ds	1
   589  0000B8                     ?_fround:
   590                           	opt stack 0
   591  0000B8                     ?_scale:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0xC
   595  0000B8                     	ds	3
   596  0000BB                     _fround$1703:
   597                           	opt stack 0
   598  0000BB                     _scale$1704:
   599                           	opt stack 0
   600                           
   601                           ; 3 bytes @ 0xF
   602  0000BB                     	ds	3
   603  0000BE                     scale@scl:
   604                           	opt stack 0
   605  0000BE                     _fround$1702:
   606                           	opt stack 0
   607                           
   608                           ; 3 bytes @ 0x12
   609  0000BE                     	ds	1
   610  0000BF                     ?___fttol:
   611                           	opt stack 0
   612  0000BF                     ___fttol@f1:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0x13
   616  0000BF                     	ds	2
   617  0000C1                     fround@prec:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x15
   621  0000C1                     	ds	1
   622  0000C2                     ?___ftadd:
   623                           	opt stack 0
   624  0000C2                     ___ftadd@f1:
   625                           	opt stack 0
   626                           
   627                           ; 3 bytes @ 0x16
   628  0000C2                     	ds	1
   629  0000C3                     ??___fttol:
   630                           
   631                           ; 0 bytes @ 0x17
   632  0000C3                     	ds	2
   633  0000C5                     ___ftadd@f2:
   634                           	opt stack 0
   635                           
   636                           ; 3 bytes @ 0x19
   637  0000C5                     	ds	3
   638  0000C8                     ??___ftadd:
   639  0000C8                     ___fttol@sign1:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x1C
   643  0000C8                     	ds	1
   644  0000C9                     ___fttol@lval:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x1D
   648  0000C9                     	ds	2
   649  0000CB                     ___ftadd@sign:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x1F
   653  0000CB                     	ds	1
   654  0000CC                     ___ftadd@exp2:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x20
   658  0000CC                     	ds	1
   659  0000CD                     ___ftadd@exp1:
   660                           	opt stack 0
   661  0000CD                     ___fttol@exp1:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x21
   665  0000CD                     	ds	1
   666  0000CE                     ??_Battery_Convert:
   667  0000CE                     ?___ftsub:
   668                           	opt stack 0
   669  0000CE                     ?_eval_poly:
   670                           	opt stack 0
   671  0000CE                     ___ftsub@f1:
   672                           	opt stack 0
   673  0000CE                     eval_poly@x:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x22
   677  0000CE                     	ds	2
   678  0000D0                     Battery_Convert@x:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x24
   682  0000D0                     	ds	1
   683  0000D1                     eval_poly@d:
   684                           	opt stack 0
   685  0000D1                     ___ftsub@f2:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x25
   689  0000D1                     	ds	2
   690  0000D3                     eval_poly@n:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x27
   694  0000D3                     	ds	1
   695  0000D4                     ?_printf:
   696                           	opt stack 0
   697  0000D4                     printf@f:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x28
   701  0000D4                     	ds	1
   702  0000D5                     eval_poly@res:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x29
   706  0000D5                     	ds	3
   707  0000D8                     ?_log:
   708                           	opt stack 0
   709  0000D8                     log@x:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x2C
   713  0000D8                     	ds	3
   714  0000DB                     ??_printf:
   715  0000DB                     log@exponent:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x2F
   719  0000DB                     	ds	2
   720  0000DD                     ??_Temp_Convert:
   721                           
   722                           ; 0 bytes @ 0x31
   723  0000DD                     	ds	2
   724  0000DF                     _Temp_Convert$1700:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x33
   728  0000DF                     	ds	2
   729  0000E1                     _Temp_Convert$1701:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x35
   733  0000E1                     	ds	2
   734  0000E3                     Temp_Convert@x:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x37
   738  0000E3                     	ds	2
   739  0000E5                     Temp_Convert@steinhart:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x39
   743  0000E5                     	ds	3
   744  0000E8                     
   745                           ; 2 bytes @ 0x3C
   746  0000E8                     	ds	2
   747  0000EA                     
   748                           ; 3 bytes @ 0x3E
   749  0000EA                     	ds	3
   750  0000ED                     main@x:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x41
   754  0000ED                     	ds	2
   755  0000EF                     main@i:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x43
   759  0000EF                     	ds	2
   760  0000F1                     main@i_984:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x45
   764  0000F1                     	ds	2
   765  0000F3                     main@x_979:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x47
   769  0000F3                     	ds	2
   770                           tblptru	equ	0xFF8
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           
   774                           	psect	cstackCOMRAM
   775  000001                     __pcstackCOMRAM:
   776                           	opt stack 0
   777  000001                     ??_ADC_StartConversion:
   778  000001                     ?_ADC_GetConversionResult:
   779                           	opt stack 0
   780  000001                     Set_4051@Channel:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x0
   784  000001                     	ds	1
   785  000002                     ADC_StartConversion@channel:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x1
   789  000002                     	ds	1
   790  000003                     ??_Set_4051:
   791  000003                     ??_TMR1_ISR:
   792  000003                     ??_ADC_GetConversionResult:
   793                           
   794                           ; 0 bytes @ 0x2
   795  000003                     	ds	2
   796  000005                     ??_ADC_ISR:
   797                           
   798                           ; 0 bytes @ 0x4
   799  000005                     	ds	2
   800  000007                     ADC_ISR@ADC_Result:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x6
   804  000007                     	ds	2
   805  000009                     ??_INTERRUPT_InterruptManager:
   806                           
   807                           ; 0 bytes @ 0x8
   808  000009                     	ds	14
   809  000017                     ?___awmod:
   810                           	opt stack 0
   811  000017                     ?___ftpack:
   812                           	opt stack 0
   813  000017                     ?_frexp:
   814                           	opt stack 0
   815  000017                     ?___ftneg:
   816                           	opt stack 0
   817  000017                     ?__tdiv_to_l_:
   818                           	opt stack 0
   819  000017                     ?__div_to_l_:
   820                           	opt stack 0
   821  000017                     ?___lldiv:
   822                           	opt stack 0
   823  000017                     EUSART1_Write@txData:
   824                           	opt stack 0
   825  000017                     SetBypass@pin:
   826                           	opt stack 0
   827  000017                     ___awmod@dividend:
   828                           	opt stack 0
   829  000017                     __div_to_l_@f1:
   830                           	opt stack 0
   831  000017                     ___ftpack@arg:
   832                           	opt stack 0
   833  000017                     __tdiv_to_l_@f1:
   834                           	opt stack 0
   835  000017                     ___ftneg@f1:
   836                           	opt stack 0
   837  000017                     frexp@value:
   838                           	opt stack 0
   839  000017                     Delay@d_lenth:
   840                           	opt stack 0
   841  000017                     ___lldiv@dividend:
   842                           	opt stack 0
   843                           
   844                           ; 4 bytes @ 0x16
   845  000017                     	ds	1
   846  000018                     putch@txData:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x17
   850  000018                     	ds	1
   851  000019                     SetBypass@state:
   852                           	opt stack 0
   853  000019                     ___awmod@divisor:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x18
   857  000019                     	ds	1
   858  00001A                     ___ftpack@exp:
   859                           	opt stack 0
   860  00001A                     frexp@eptr:
   861                           	opt stack 0
   862  00001A                     __div_to_l_@f2:
   863                           	opt stack 0
   864  00001A                     __tdiv_to_l_@f2:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x19
   868  00001A                     	ds	1
   869  00001B                     ??_SetBypass:
   870  00001B                     ??_Delay:
   871  00001B                     ___awmod@counter:
   872                           	opt stack 0
   873  00001B                     ___ftpack@sign:
   874                           	opt stack 0
   875  00001B                     ___lldiv@divisor:
   876                           	opt stack 0
   877                           
   878                           ; 4 bytes @ 0x1A
   879  00001B                     	ds	1
   880  00001C                     ??___ftpack:
   881  00001C                     ??_frexp:
   882  00001C                     ___awmod@sign:
   883                           	opt stack 0
   884  00001C                     Delay@wait:
   885                           	opt stack 0
   886                           
   887                           ; 4 bytes @ 0x1B
   888  00001C                     	ds	1
   889  00001D                     ??__tdiv_to_l_:
   890  00001D                     ??__div_to_l_:
   891  00001D                     ?___awdiv:
   892                           	opt stack 0
   893  00001D                     ___awdiv@dividend:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x1C
   897  00001D                     	ds	2
   898  00001F                     ?___ftdiv:
   899                           	opt stack 0
   900  00001F                     ?___lltoft:
   901                           	opt stack 0
   902  00001F                     ___awdiv@divisor:
   903                           	opt stack 0
   904  00001F                     ___ftdiv@f1:
   905                           	opt stack 0
   906  00001F                     ___lldiv@quotient:
   907                           	opt stack 0
   908  00001F                     ___lltoft@c:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x1E
   912  00001F                     	ds	1
   913  000020                     __tdiv_to_l_@quot:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x1F
   917  000020                     	ds	1
   918  000021                     ___awdiv@counter:
   919                           	opt stack 0
   920  000021                     __div_to_l_@quot:
   921                           	opt stack 0
   922                           
   923                           ; 4 bytes @ 0x20
   924  000021                     	ds	1
   925  000022                     ___awdiv@sign:
   926                           	opt stack 0
   927  000022                     ___ftdiv@f2:
   928                           	opt stack 0
   929                           
   930                           ; 3 bytes @ 0x21
   931  000022                     	ds	1
   932  000023                     ??___lltoft:
   933  000023                     ___lldiv@counter:
   934                           	opt stack 0
   935  000023                     ___awdiv@quotient:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x22
   939  000023                     	ds	1
   940  000024                     ?___llmod:
   941                           	opt stack 0
   942  000024                     __tdiv_to_l_@cntr:
   943                           	opt stack 0
   944  000024                     ___llmod@dividend:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x23
   948  000024                     	ds	1
   949  000025                     ??___ftdiv:
   950  000025                     ?___wmul:
   951                           	opt stack 0
   952  000025                     __div_to_l_@cntr:
   953                           	opt stack 0
   954  000025                     __tdiv_to_l_@exp1:
   955                           	opt stack 0
   956  000025                     ___wmul@multiplier:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x24
   960  000025                     	ds	1
   961  000026                     __div_to_l_@exp1:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x25
   965  000026                     	ds	1
   966  000027                     ___lltoft@exp:
   967                           	opt stack 0
   968  000027                     ___wmul@multiplicand:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x26
   972  000027                     	ds	1
   973  000028                     ___ftdiv@cntr:
   974                           	opt stack 0
   975  000028                     ___llmod@divisor:
   976                           	opt stack 0
   977                           
   978                           ; 4 bytes @ 0x27
   979  000028                     	ds	1
   980  000029                     ___wmul@product:
   981                           	opt stack 0
   982  000029                     ___ftdiv@f3:
   983                           	opt stack 0
   984                           
   985                           ; 3 bytes @ 0x28
   986  000029                     	ds	2
   987  00002B                     ?_Battery_Get:
   988                           	opt stack 0
   989  00002B                     ?___awtoft:
   990                           	opt stack 0
   991  00002B                     Battery_Get@channelnum:
   992                           	opt stack 0
   993  00002B                     ___awtoft@c:
   994                           	opt stack 0
   995  00002B                     ___ftge@ff1:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x2A
   999  00002B                     	ds	1
  1000  00002C                     ___ftdiv@exp:
  1001                           	opt stack 0
  1002  00002C                     ___llmod@counter:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x2B
  1006  00002C                     	ds	1
  1007  00002D                     ___ftdiv@sign:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x2C
  1011  00002D                     	ds	1
  1012  00002E                     ___awtoft@sign:
  1013                           	opt stack 0
  1014  00002E                     ___ftge@ff2:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x2D
  1018  00002E                     	ds	1
  1019  00002F                     ??___ftmul:
  1020                           
  1021                           ; 0 bytes @ 0x2E
  1022  00002F                     	ds	2
  1023  000031                     ??___ftge:
  1024                           
  1025                           ; 0 bytes @ 0x30
  1026  000031                     	ds	1
  1027  000032                     ??_eval_poly:
  1028  000032                     Battery_Filter@x:
  1029                           	opt stack 0
  1030  000032                     Temp_Filter@x:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x31
  1034  000032                     	ds	2
  1035  000034                     tblptru	equ	0xFF8
  1036                           postinc0	equ	0xFEE
  1037                           wreg	equ	0xFE8
  1038                           
  1039                           ; 0 bytes @ 0x33
  1040 ;;
  1041 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1042 ;;
  1043 ;; *************** function _main *****************
  1044 ;; Defined at:
  1045 ;;		line 30 in file "Main.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  argc            2   60[BANK0 ] int 
  1048 ;;  argv            3   62[BANK0 ] PTR PTR unsigned char 
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  x               2   71[BANK0 ] int 
  1051 ;;  x               2   65[BANK0 ] int 
  1052 ;;  i               2   69[BANK0 ] int 
  1053 ;;  i               2   67[BANK0 ] int 
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  2   60[BANK0 ] int 
  1056 ;; Registers used:
  1057 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1063 ;;      Params:         0       5       0       0       0       0       0
  1064 ;;      Locals:         0       8       0       0       0       0       0
  1065 ;;      Temps:          0       0       0       0       0       0       0
  1066 ;;      Totals:         0      13       0       0       0       0       0
  1067 ;;Total ram usage:       13 bytes
  1068 ;; Hardware stack levels required when called:    9
  1069 ;; This function calls:
  1070 ;;		_Battery_Convert
  1071 ;;		_Battery_Fault
  1072 ;;		_Battery_Get
  1073 ;;		_Delay
  1074 ;;		_RunBypas
  1075 ;;		_SYSTEM_Initialize
  1076 ;;		_SetBypass
  1077 ;;		_Temp_Convert
  1078 ;;		_Temp_Fault
  1079 ;;		_printf
  1080 ;; This function is called by:
  1081 ;;		Startup code after reset
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text0
  1086  00284C                     __ptext0:
  1087                           	opt stack 0
  1088  00284C                     _main:
  1089                           	opt stack 22
  1090                           
  1091                           ;Main.c: 32: SYSTEM_Initialize();
  1092                           
  1093                           ;incstack = 0
  1094  00284C  ECEA  F01B         	call	_SYSTEM_Initialize	;wreg free
  1095                           
  1096                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1097  002850  8EF2               	bsf	intcon,7,c	;volatile
  1098                           
  1099                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1100  002852  8CF2               	bsf	intcon,6,c	;volatile
  1101                           
  1102                           ;Main.c: 63: printf("Hi Mother Fucker");
  1103  002854  0E06               	movlw	high STR_1
  1104  002856  0100               	movlb	0	; () banked
  1105  002858  6FD5               	movwf	(printf@f+1)& (0+255),b
  1106  00285A  0EA5               	movlw	low STR_1
  1107  00285C  0100               	movlb	0	; () banked
  1108  00285E  6FD4               	movwf	printf@f& (0+255),b
  1109  002860  EC5C  F003         	call	_printf	;wreg free
  1110  002864                     l5322:
  1111                           
  1112                           ;Main.c: 65: {
  1113                           ;Main.c: 66: if (Temp_Done)
  1114  002864  0100               	movlb	0	; () banked
  1115  002866  5193               	movf	(_Temp_Done+1)& (0+255),w,b
  1116  002868  1192               	iorwf	_Temp_Done& (0+255),w,b
  1117  00286A  B4D8               	btfsc	status,2,c
  1118  00286C  D017               	goto	l5338
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;Main.c: 67: {
  1122                           ;Main.c: 68: Temp_Convert();
  1123  00286E  ECCC  F00E         	call	_Temp_Convert	;wreg free
  1124                           
  1125                           ;Main.c: 69: Temp_Fault();
  1126  002872  ECB0  F019         	call	_Temp_Fault	;wreg free
  1127                           
  1128                           ;Main.c: 70: for (int x = 0;x<12;x++)
  1129  002876  0E00               	movlw	0
  1130  002878  0100               	movlb	0	; () banked
  1131  00287A  6FEE               	movwf	(main@x+1)& (0+255),b
  1132  00287C  0E00               	movlw	0
  1133  00287E  0100               	movlb	0	; () banked
  1134  002880  6FED               	movwf	main@x& (0+255),b
  1135  002882                     
  1136                           ; BSR set to: 0
  1137  002882  0100               	movlb	0	; () banked
  1138  002884  51EE               	movf	(main@x+1)& (0+255),w,b
  1139  002886  0A80               	xorlw	128
  1140  002888  0F80               	addlw	-128
  1141  00288A  0E0C               	movlw	12
  1142  00288C  B4D8               	btfsc	status,2,c
  1143  00288E  5DED               	subwf	main@x& (0+255),w,b
  1144  002890  B0D8               	btfsc	status,0,c
  1145  002892  D004               	goto	l5338
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;Main.c: 71: {
  1149                           
  1150                           ; BSR set to: 0
  1151                           
  1152                           ; BSR set to: 0
  1153  002894  0100               	movlb	0	; () banked
  1154  002896  4BED               	infsnz	main@x& (0+255),f,b
  1155  002898  2BEE               	incf	(main@x+1)& (0+255),f,b
  1156  00289A  D7F3               	goto	L1
  1157  00289C                     l5338:
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;Main.c: 73: }
  1161                           ;Main.c: 74: }
  1162                           ;Main.c: 75: if (Volt_Done)
  1163  00289C  0100               	movlb	0	; () banked
  1164  00289E  5195               	movf	(_Volt_Done+1)& (0+255),w,b
  1165  0028A0  1194               	iorwf	_Volt_Done& (0+255),w,b
  1166  0028A2  B4D8               	btfsc	status,2,c
  1167  0028A4  D031               	goto	l5358
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;Main.c: 76: {
  1171                           ;Main.c: 77: Battery_Convert();
  1172  0028A6  EC95  F017         	call	_Battery_Convert	;wreg free
  1173                           
  1174                           ;Main.c: 78: Battery_Fault();
  1175  0028AA  EC38  F017         	call	_Battery_Fault	;wreg free
  1176                           
  1177                           ;Main.c: 79: RunBypas();
  1178  0028AE  ECCA  F016         	call	_RunBypas	;wreg free
  1179                           
  1180                           ;Main.c: 80: for (int x = 0;x<10;x++)
  1181  0028B2  0E00               	movlw	0
  1182  0028B4  0100               	movlb	0	; () banked
  1183  0028B6  6FF4               	movwf	(main@x_979+1)& (0+255),b
  1184  0028B8  0E00               	movlw	0
  1185  0028BA  0100               	movlb	0	; () banked
  1186  0028BC  6FF3               	movwf	main@x_979& (0+255),b
  1187  0028BE                     
  1188                           ; BSR set to: 0
  1189  0028BE  0100               	movlb	0	; () banked
  1190  0028C0  51F4               	movf	(main@x_979+1)& (0+255),w,b
  1191  0028C2  0A80               	xorlw	128
  1192  0028C4  0F80               	addlw	-128
  1193  0028C6  0E0A               	movlw	10
  1194  0028C8  B4D8               	btfsc	status,2,c
  1195  0028CA  5DF3               	subwf	main@x_979& (0+255),w,b
  1196  0028CC  B0D8               	btfsc	status,0,c
  1197  0028CE  D01C               	goto	l5358
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;Main.c: 81: {
  1201                           ;Main.c: 82: printf("Battery %d = %f \r\n", x,Battery_Get(x));
  1202                           
  1203                           ; BSR set to: 0
  1204                           
  1205                           ; BSR set to: 0
  1206  0028D0  0E06               	movlw	high STR_2
  1207  0028D2  0100               	movlb	0	; () banked
  1208  0028D4  6FD5               	movwf	(printf@f+1)& (0+255),b
  1209  0028D6  0E92               	movlw	low STR_2
  1210  0028D8  0100               	movlb	0	; () banked
  1211  0028DA  6FD4               	movwf	printf@f& (0+255),b
  1212  0028DC  C0F3  F0D6         	movff	main@x_979,?_printf+2
  1213  0028E0  C0F4  F0D7         	movff	main@x_979+1,?_printf+3
  1214  0028E4  C0F3  F02B         	movff	main@x_979,Battery_Get@channelnum
  1215  0028E8  C0F4  F02C         	movff	main@x_979+1,Battery_Get@channelnum+1
  1216  0028EC  EC3C  F01B         	call	_Battery_Get	;wreg free
  1217  0028F0  C02B  F0D8         	movff	?_Battery_Get,?_printf+4
  1218  0028F4  C02C  F0D9         	movff	?_Battery_Get+1,?_printf+5
  1219  0028F8  C02D  F0DA         	movff	?_Battery_Get+2,?_printf+6
  1220  0028FC  EC5C  F003         	call	_printf	;wreg free
  1221  002900  0100               	movlb	0	; () banked
  1222  002902  4BF3               	infsnz	main@x_979& (0+255),f,b
  1223  002904  2BF4               	incf	(main@x_979+1)& (0+255),f,b
  1224  002906  D7DB               	goto	L2
  1225  002908                     l5358:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;Main.c: 83: }
  1229                           ;Main.c: 84: }
  1230                           ;Main.c: 85: Delay(1000);
  1231  002908  0EE8               	movlw	232
  1232  00290A  6E17               	movwf	Delay@d_lenth,c
  1233  00290C  0E03               	movlw	3
  1234  00290E  6E18               	movwf	Delay@d_lenth+1,c
  1235  002910  0E00               	movlw	0
  1236  002912  6E19               	movwf	Delay@d_lenth+2,c
  1237  002914  0E00               	movlw	0
  1238  002916  6E1A               	movwf	Delay@d_lenth+3,c
  1239  002918  EC73  F01A         	call	_Delay	;wreg free
  1240                           
  1241                           ;Main.c: 86: for(int i = 0;i<10;i++)
  1242  00291C  0E00               	movlw	0
  1243  00291E  0100               	movlb	0	; () banked
  1244  002920  6FF0               	movwf	(main@i+1)& (0+255),b
  1245  002922  0E00               	movlw	0
  1246  002924  0100               	movlb	0	; () banked
  1247  002926  6FEF               	movwf	main@i& (0+255),b
  1248  002928                     
  1249                           ; BSR set to: 0
  1250  002928  0100               	movlb	0	; () banked
  1251  00292A  51F0               	movf	(main@i+1)& (0+255),w,b
  1252  00292C  0A80               	xorlw	128
  1253  00292E  0F80               	addlw	-128
  1254  002930  0E0A               	movlw	10
  1255  002932  B4D8               	btfsc	status,2,c
  1256  002934  5DEF               	subwf	main@i& (0+255),w,b
  1257  002936  B0D8               	btfsc	status,0,c
  1258  002938  D00E               	goto	l5372
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;Main.c: 87: {
  1262                           ;Main.c: 88: SetBypass(i,1);
  1263                           
  1264                           ; BSR set to: 0
  1265                           
  1266                           ; BSR set to: 0
  1267  00293A  C0EF  F017         	movff	main@i,SetBypass@pin
  1268  00293E  C0F0  F018         	movff	main@i+1,SetBypass@pin+1
  1269  002942  0E00               	movlw	0
  1270  002944  6E1A               	movwf	SetBypass@state+1,c
  1271  002946  0E01               	movlw	1
  1272  002948  6E19               	movwf	SetBypass@state,c
  1273  00294A  EC6B  F015         	call	_SetBypass	;wreg free
  1274  00294E  0100               	movlb	0	; () banked
  1275  002950  4BEF               	infsnz	main@i& (0+255),f,b
  1276  002952  2BF0               	incf	(main@i+1)& (0+255),f,b
  1277  002954  D7E9               	goto	L3
  1278  002956                     l5372:
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;Main.c: 89: }
  1282                           ;Main.c: 90: Delay(1000);
  1283  002956  0EE8               	movlw	232
  1284  002958  6E17               	movwf	Delay@d_lenth,c
  1285  00295A  0E03               	movlw	3
  1286  00295C  6E18               	movwf	Delay@d_lenth+1,c
  1287  00295E  0E00               	movlw	0
  1288  002960  6E19               	movwf	Delay@d_lenth+2,c
  1289  002962  0E00               	movlw	0
  1290  002964  6E1A               	movwf	Delay@d_lenth+3,c
  1291  002966  EC73  F01A         	call	_Delay	;wreg free
  1292                           
  1293                           ;Main.c: 91: for(int i = 0;i<10;i++)
  1294  00296A  0E00               	movlw	0
  1295  00296C  0100               	movlb	0	; () banked
  1296  00296E  6FF2               	movwf	(main@i_984+1)& (0+255),b
  1297  002970  0E00               	movlw	0
  1298  002972  0100               	movlb	0	; () banked
  1299  002974  6FF1               	movwf	main@i_984& (0+255),b
  1300  002976                     
  1301                           ; BSR set to: 0
  1302  002976  0100               	movlb	0	; () banked
  1303  002978  51F2               	movf	(main@i_984+1)& (0+255),w,b
  1304  00297A  0A80               	xorlw	128
  1305  00297C  0F80               	addlw	-128
  1306  00297E  0E0A               	movlw	10
  1307  002980  B4D8               	btfsc	status,2,c
  1308  002982  5DF1               	subwf	main@i_984& (0+255),w,b
  1309  002984  B0D8               	btfsc	status,0,c
  1310  002986  D76E               	goto	l5322
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;Main.c: 92: {
  1314                           ;Main.c: 93: SetBypass(i,0);
  1315                           
  1316                           ; BSR set to: 0
  1317                           
  1318                           ; BSR set to: 0
  1319  002988  C0F1  F017         	movff	main@i_984,SetBypass@pin
  1320  00298C  C0F2  F018         	movff	main@i_984+1,SetBypass@pin+1
  1321  002990  0E00               	movlw	0
  1322  002992  6E1A               	movwf	SetBypass@state+1,c
  1323  002994  0E00               	movlw	0
  1324  002996  6E19               	movwf	SetBypass@state,c
  1325  002998  EC6B  F015         	call	_SetBypass	;wreg free
  1326  00299C  0100               	movlb	0	; () banked
  1327  00299E  4BF1               	infsnz	main@i_984& (0+255),f,b
  1328  0029A0  2BF2               	incf	(main@i_984+1)& (0+255),f,b
  1329  0029A2  D7E9               	goto	L4
  1330  0029A4                     __end_of_main:
  1331                           	opt stack 0
  1332                           tblptru	equ	0xFF8
  1333                           intcon	equ	0xFF2
  1334                           postinc0	equ	0xFEE
  1335                           wreg	equ	0xFE8
  1336                           status	equ	0xFD8
  1337                           
  1338 ;; *************** function _printf *****************
  1339 ;; Defined at:
  1340 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;  f               2   40[BANK0 ] PTR const unsigned char 
  1343 ;;		 -> STR_2(19), STR_1(17), 
  1344 ;; Auto vars:     Size  Location     Type
  1345 ;;  vd              4    7[BANK1 ] unsigned long 
  1346 ;;  vd              4   11[BANK1 ] unsigned long 
  1347 ;;  _val            5   24[BANK1 ] struct .
  1348 ;;  fval            3   31[BANK1 ] struct .
  1349 ;;  integ           3   19[BANK1 ] struct .
  1350 ;;  ival            3    0        struct .
  1351 ;;  exp             2   29[BANK1 ] int 
  1352 ;;  prec            2   22[BANK1 ] int 
  1353 ;;  flag            2   17[BANK1 ] unsigned short 
  1354 ;;  ap              2   15[BANK1 ] PTR void [1]
  1355 ;;		 -> ?_printf(2), 
  1356 ;;  width           2    0        int 
  1357 ;;  c               1   34[BANK1 ] char 
  1358 ;;  d               1    0        unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  2   40[BANK0 ] int 
  1361 ;; Registers used:
  1362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1368 ;;      Params:         0       7       0       0       0       0       0
  1369 ;;      Locals:         0       0      35       0       0       0       0
  1370 ;;      Temps:          0       6       0       0       0       0       0
  1371 ;;      Totals:         0      13      35       0       0       0       0
  1372 ;;Total ram usage:       48 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    7
  1375 ;; This function calls:
  1376 ;;		___awdiv
  1377 ;;		___ftadd
  1378 ;;		___ftge
  1379 ;;		___ftmul
  1380 ;;		___ftneg
  1381 ;;		___ftsub
  1382 ;;		___fttol
  1383 ;;		___lldiv
  1384 ;;		___llmod
  1385 ;;		___lltoft
  1386 ;;		___wmul
  1387 ;;		__div_to_l_
  1388 ;;		__tdiv_to_l_
  1389 ;;		_fround
  1390 ;;		_putch
  1391 ;;		_scale
  1392 ;; This function is called by:
  1393 ;;		_main
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text1
  1398  0006B8                     __ptext1:
  1399                           	opt stack 0
  1400  0006B8                     _printf:
  1401                           	opt stack 23
  1402                           
  1403                           ;doprnt.c: 466: va_list ap;
  1404                           ;doprnt.c: 499: signed char c;
  1405                           ;doprnt.c: 501: int width;
  1406                           ;doprnt.c: 504: int prec;
  1407                           ;doprnt.c: 508: unsigned short flag;
  1408                           ;doprnt.c: 515: char d;
  1409                           ;doprnt.c: 516: double fval, integ;
  1410                           ;doprnt.c: 517: int exp;
  1411                           ;doprnt.c: 518: double ival;
  1412                           ;doprnt.c: 519: union {
  1413                           ;doprnt.c: 520: unsigned long _val;
  1414                           ;doprnt.c: 521: struct {
  1415                           ;doprnt.c: 522: const char * _cp;
  1416                           ;doprnt.c: 523: unsigned _len;
  1417                           ;doprnt.c: 524: } _str;
  1418                           ;doprnt.c: 525: } _val;
  1419                           ;doprnt.c: 542: *ap = __va_start();
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;incstack = 0
  1423  0006B8  0100               	movlb	0	; () banked
  1424  0006BA  0E00               	movlw	high (?_printf+2)
  1425  0006BC  0101               	movlb	1	; () banked
  1426  0006BE  6FD8               	movwf	(printf@ap+1)& (0+255),b
  1427  0006C0  0100               	movlb	0	; () banked
  1428  0006C2  0ED6               	movlw	low (?_printf+2)
  1429  0006C4  0101               	movlb	1	; () banked
  1430  0006C6  6FD7               	movwf	printf@ap& (0+255),b
  1431                           
  1432                           ;doprnt.c: 545: while(c = *f++) {
  1433  0006C8  EF8E  F007         	goto	l5286
  1434  0006CC                     l5102:
  1435                           
  1436                           ; BSR set to: 1
  1437                           ;doprnt.c: 547: if(c != '%')
  1438  0006CC  0101               	movlb	1	; () banked
  1439  0006CE  51EA               	movf	printf@c& (0+255),w,b
  1440  0006D0  0A25               	xorlw	37
  1441  0006D2  B4D8               	btfsc	status,2,c
  1442  0006D4  D006               	goto	l5106
  1443                           
  1444                           ; BSR set to: 1
  1445                           ;doprnt.c: 549: {
  1446                           ;doprnt.c: 550: (putch(c) );
  1447  0006D6  0101               	movlb	1	; () banked
  1448  0006D8  51EA               	movf	printf@c& (0+255),w,b
  1449  0006DA  EC3F  F01C         	call	_putch
  1450                           
  1451                           ;doprnt.c: 551: continue;
  1452  0006DE  EF8E  F007         	goto	l5286
  1453  0006E2                     l5106:
  1454                           
  1455                           ;doprnt.c: 552: }
  1456                           ;doprnt.c: 557: flag = 0;
  1457  0006E2  0E00               	movlw	0
  1458  0006E4  0101               	movlb	1	; () banked
  1459  0006E6  6FDA               	movwf	(printf@flag+1)& (0+255),b
  1460  0006E8  0E00               	movlw	0
  1461  0006EA  0101               	movlb	1	; () banked
  1462  0006EC  6FD9               	movwf	printf@flag& (0+255),b
  1463                           
  1464                           ;doprnt.c: 644: switch(c = *f++) {
  1465  0006EE  D003               	goto	l5112
  1466  0006F0                     l5108:
  1467                           
  1468                           ; BSR set to: 1
  1469                           ;doprnt.c: 672: flag |= 0x400;
  1470  0006F0  0101               	movlb	1	; () banked
  1471  0006F2  85DA               	bsf	(printf@flag+1)& (0+255),2,b
  1472                           
  1473                           ;doprnt.c: 673: break;
  1474  0006F4  D01B               	goto	l5114
  1475  0006F6                     l5112:
  1476                           
  1477                           ; BSR set to: 1
  1478  0006F6  0100               	movlb	0	; () banked
  1479  0006F8  C0D4  FFF6         	movff	printf@f,tblptrl
  1480  0006FC  0100               	movlb	0	; () banked
  1481  0006FE  C0D5  FFF7         	movff	printf@f+1,tblptrh
  1482  000702  0100               	movlb	0	; () banked
  1483  000704  4BD4               	infsnz	printf@f& (0+255),f,b
  1484  000706  2BD5               	incf	(printf@f+1)& (0+255),f,b
  1485  000708                     	if	0	;tblptru may be non-zero
  1486  000708                     	endif
  1487  000708                     	if	0	;tblptru may be non-zero
  1488  000708                     	endif
  1489  000708  0008               	tblrd		*
  1490  00070A  0101               	movlb	1	; () banked
  1491  00070C  CFF5 F1EA          	movff	tablat,printf@c
  1492  000710  0101               	movlb	1	; () banked
  1493  000712  51EA               	movf	printf@c& (0+255),w,b
  1494                           
  1495                           ; Switch size 1, requested type "space"
  1496                           ; Number of cases is 4, Range of values is 0 to 105
  1497                           ; switch strategies available:
  1498                           ; Name         Instructions Cycles
  1499                           ; simple_byte           13     7 (average)
  1500                           ;	Chosen strategy is simple_byte
  1501  000714  0A00               	xorlw	0	; case 0
  1502  000716  B4D8               	btfsc	status,2,c
  1503  000718  0012               	return	
  1504  00071A  0A64               	xorlw	100	; case 100
  1505  00071C  B4D8               	btfsc	status,2,c
  1506  00071E  D006               	goto	l5114
  1507  000720  0A02               	xorlw	2	; case 102
  1508  000722  B4D8               	btfsc	status,2,c
  1509  000724  D7E5               	goto	l5108
  1510  000726  0A0F               	xorlw	15	; case 105
  1511  000728  A4D8               	btfss	status,2,c
  1512  00072A  D3F8               	goto	l5286
  1513  00072C                     l5114:
  1514                           
  1515                           ; BSR set to: 1
  1516                           ;doprnt.c: 834: if(flag & (0x700)) {
  1517  00072C  0E07               	movlw	7
  1518  00072E  0101               	movlb	1	; () banked
  1519  000730  15DA               	andwf	(printf@flag+1)& (0+255),w,b
  1520  000732  B4D8               	btfsc	status,2,c
  1521  000734  D31C               	goto	l5250
  1522                           
  1523                           ; BSR set to: 1
  1524                           ;doprnt.c: 838: prec = 6;
  1525  000736  0E00               	movlw	0
  1526  000738  0101               	movlb	1	; () banked
  1527  00073A  6FDF               	movwf	(printf@prec+1)& (0+255),b
  1528  00073C  0E06               	movlw	6
  1529  00073E  0101               	movlb	1	; () banked
  1530  000740  6FDE               	movwf	printf@prec& (0+255),b
  1531                           
  1532                           ; BSR set to: 1
  1533                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1534  000742  C1D7  FFD9         	movff	printf@ap,fsr2l
  1535  000746  C1D8  FFDA         	movff	printf@ap+1,fsr2h
  1536  00074A  0101               	movlb	1	; () banked
  1537  00074C  CFDE F1E7          	movff	postinc2,printf@fval
  1538  000750  0101               	movlb	1	; () banked
  1539  000752  CFDE F1E8          	movff	postinc2,printf@fval+1
  1540  000756  0101               	movlb	1	; () banked
  1541  000758  CFDD F1E9          	movff	postdec2,printf@fval+2
  1542                           
  1543                           ; BSR set to: 1
  1544  00075C  0E03               	movlw	3
  1545  00075E  0101               	movlb	1	; () banked
  1546  000760  27D7               	addwf	printf@ap& (0+255),f,b
  1547  000762  0E00               	movlw	0
  1548  000764  0101               	movlb	1	; () banked
  1549  000766  23D8               	addwfc	(printf@ap+1)& (0+255),f,b
  1550                           
  1551                           ; BSR set to: 1
  1552                           ;doprnt.c: 840: if(fval < 0.0) {
  1553  000768  0101               	movlb	1	; () banked
  1554  00076A  51E9               	movf	(printf@fval+2)& (0+255),w,b
  1555  00076C  0A80               	xorlw	128
  1556  00076E  0F80               	addlw	128
  1557  000770  E107               	bnz	u5365
  1558  000772  0E00               	movlw	0
  1559  000774  0101               	movlb	1	; () banked
  1560  000776  5DE8               	subwf	(printf@fval+1)& (0+255),w,b
  1561  000778  E103               	bnz	u5365
  1562  00077A  0E00               	movlw	0
  1563  00077C  0101               	movlb	1	; () banked
  1564  00077E  5DE7               	subwf	printf@fval& (0+255),w,b
  1565  000780                     u5365:
  1566  000780  B0D8               	btfsc	status,0,c
  1567  000782  D011               	goto	l5128
  1568                           
  1569                           ; BSR set to: 1
  1570                           ;doprnt.c: 841: fval = -fval;
  1571  000784  C1E7  F017         	movff	printf@fval,___ftneg@f1
  1572  000788  C1E8  F018         	movff	printf@fval+1,___ftneg@f1+1
  1573  00078C  C1E9  F019         	movff	printf@fval+2,___ftneg@f1+2
  1574  000790  ECB3  F01B         	call	___ftneg	;wreg free
  1575  000794  C017  F1E7         	movff	?___ftneg,printf@fval
  1576  000798  C018  F1E8         	movff	?___ftneg+1,printf@fval+1
  1577  00079C  C019  F1E9         	movff	?___ftneg+2,printf@fval+2
  1578                           
  1579                           ;doprnt.c: 842: flag |= 0x03;
  1580  0007A0  0E03               	movlw	3
  1581  0007A2  0101               	movlb	1	; () banked
  1582  0007A4  13D9               	iorwf	printf@flag& (0+255),f,b
  1583  0007A6                     l5128:
  1584                           
  1585                           ; BSR set to: 1
  1586                           ;doprnt.c: 843: }
  1587                           ;doprnt.c: 844: exp = 0;
  1588  0007A6  0E00               	movlw	0
  1589  0007A8  0101               	movlb	1	; () banked
  1590  0007AA  6FE6               	movwf	(printf@exp+1)& (0+255),b
  1591  0007AC  0E00               	movlw	0
  1592  0007AE  0101               	movlb	1	; () banked
  1593  0007B0  6FE5               	movwf	printf@exp& (0+255),b
  1594                           
  1595                           ; BSR set to: 1
  1596                           ;doprnt.c: 845: if( fval!=0) {
  1597  0007B2  0E7F               	movlw	127
  1598  0007B4  0101               	movlb	1	; () banked
  1599  0007B6  15E9               	andwf	(printf@fval+2)& (0+255),w,b
  1600  0007B8  0101               	movlb	1	; () banked
  1601  0007BA  11E8               	iorwf	(printf@fval+1)& (0+255),w,b
  1602  0007BC  0101               	movlb	1	; () banked
  1603  0007BE  11E7               	iorwf	printf@fval& (0+255),w,b
  1604  0007C0  B4D8               	btfsc	status,2,c
  1605  0007C2  D09C               	goto	l5156
  1606                           
  1607                           ; BSR set to: 1
  1608                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1609  0007C4  0E82               	movlw	130
  1610  0007C6  0100               	movlb	0	; () banked
  1611  0007C8  6FDB               	movwf	??_printf& (0+255),b
  1612  0007CA  0EFF               	movlw	255
  1613  0007CC  6FDC               	movwf	(??_printf+1)& (0+255),b
  1614  0007CE  0101               	movlb	1	; () banked
  1615  0007D0  C1E7  F0DD         	movff	printf@fval,??_printf+2
  1616  0007D4  0101               	movlb	1	; () banked
  1617  0007D6  C1E8  F0DE         	movff	printf@fval+1,??_printf+3
  1618  0007DA  0101               	movlb	1	; () banked
  1619  0007DC  C1E9  F0DF         	movff	printf@fval+2,??_printf+4
  1620  0007E0  0101               	movlb	1	; () banked
  1621  0007E2  C1EA  F0E0         	movff	printf@fval+3,??_printf+5
  1622  0007E6  0E10               	movlw	16
  1623  0007E8  D006               	goto	u5380
  1624  0007EA                     u5385:
  1625  0007EA  0100               	movlb	0	; () banked
  1626  0007EC  90D8               	bcf	status,0,c
  1627  0007EE  33E0               	rrcf	(??_printf+5)& (0+255),f,b
  1628  0007F0  33DF               	rrcf	(??_printf+4)& (0+255),f,b
  1629  0007F2  33DE               	rrcf	(??_printf+3)& (0+255),f,b
  1630  0007F4  33DD               	rrcf	(??_printf+2)& (0+255),f,b
  1631  0007F6                     u5380:
  1632  0007F6  2EE8               	decfsz	wreg,f,c
  1633  0007F8  D7F8               	goto	u5385
  1634  0007FA  0100               	movlb	0	; () banked
  1635  0007FC  51DD               	movf	(??_printf+2)& (0+255),w,b
  1636  0007FE  0100               	movlb	0	; () banked
  1637  000800  25DB               	addwf	??_printf& (0+255),w,b
  1638  000802  0101               	movlb	1	; () banked
  1639  000804  6FE5               	movwf	printf@exp& (0+255),b
  1640  000806  0E00               	movlw	0
  1641  000808  0100               	movlb	0	; () banked
  1642  00080A  21DC               	addwfc	(??_printf+1)& (0+255),w,b
  1643  00080C  0101               	movlb	1	; () banked
  1644  00080E  6FE6               	movwf	(printf@exp+1)& (0+255),b
  1645                           
  1646                           ; BSR set to: 1
  1647                           ;doprnt.c: 847: exp--;
  1648  000810  0101               	movlb	1	; () banked
  1649  000812  07E5               	decf	printf@exp& (0+255),f,b
  1650  000814  A0D8               	btfss	status,0,c
  1651  000816  07E6               	decf	(printf@exp+1)& (0+255),f,b
  1652                           
  1653                           ; BSR set to: 1
  1654                           ;doprnt.c: 848: exp *= 3;
  1655  000818  C1E5  F025         	movff	printf@exp,___wmul@multiplier
  1656  00081C  C1E6  F026         	movff	printf@exp+1,___wmul@multiplier+1
  1657  000820  0E00               	movlw	0
  1658  000822  6E28               	movwf	___wmul@multiplicand+1,c
  1659  000824  0E03               	movlw	3
  1660  000826  6E27               	movwf	___wmul@multiplicand,c
  1661  000828  ECC6  F01B         	call	___wmul	;wreg free
  1662  00082C  C025  F1E5         	movff	?___wmul,printf@exp
  1663  000830  C026  F1E6         	movff	?___wmul+1,printf@exp+1
  1664                           
  1665                           ;doprnt.c: 849: exp /= 10;
  1666  000834  C1E5  F01D         	movff	printf@exp,___awdiv@dividend
  1667  000838  C1E6  F01E         	movff	printf@exp+1,___awdiv@dividend+1
  1668  00083C  0E00               	movlw	0
  1669  00083E  6E20               	movwf	___awdiv@divisor+1,c
  1670  000840  0E0A               	movlw	10
  1671  000842  6E1F               	movwf	___awdiv@divisor,c
  1672  000844  EC44  F018         	call	___awdiv	;wreg free
  1673  000848  C01D  F1E5         	movff	?___awdiv,printf@exp
  1674  00084C  C01E  F1E6         	movff	?___awdiv+1,printf@exp+1
  1675                           
  1676                           ;doprnt.c: 850: if(exp < 0)
  1677  000850  0101               	movlb	1	; () banked
  1678  000852  51E6               	movf	(printf@exp+1)& (0+255),w,b
  1679  000854  0A80               	xorlw	128
  1680  000856  6EF3               	movwf	prodl,c
  1681  000858  0E80               	movlw	128
  1682  00085A  5CF3               	subwf	prodl,w,c
  1683  00085C  0E00               	movlw	0
  1684  00085E  B4D8               	btfsc	status,2,c
  1685  000860  5DE5               	subwf	printf@exp& (0+255),w,b
  1686  000862  B0D8               	btfsc	status,0,c
  1687  000864  D004               	goto	l5144
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;doprnt.c: 851: exp--;
  1691  000866  0101               	movlb	1	; () banked
  1692  000868  07E5               	decf	printf@exp& (0+255),f,b
  1693  00086A  A0D8               	btfss	status,0,c
  1694  00086C  07E6               	decf	(printf@exp+1)& (0+255),f,b
  1695  00086E                     l5144:
  1696                           
  1697                           ; BSR set to: 1
  1698                           ;doprnt.c: 855: integ = scale(-exp);
  1699  00086E  0101               	movlb	1	; () banked
  1700  000870  51E5               	movf	printf@exp& (0+255),w,b
  1701  000872  0800               	sublw	0
  1702  000874  EC04  F00A         	call	_scale
  1703  000878  C0B8  F1DB         	movff	?_scale,printf@integ
  1704  00087C  C0B9  F1DC         	movff	?_scale+1,printf@integ+1
  1705  000880  C0BA  F1DD         	movff	?_scale+2,printf@integ+2
  1706                           
  1707                           ;doprnt.c: 856: integ *= fval;
  1708  000884  C1DB  F0AC         	movff	printf@integ,___ftmul@f1
  1709  000888  C1DC  F0AD         	movff	printf@integ+1,___ftmul@f1+1
  1710  00088C  C1DD  F0AE         	movff	printf@integ+2,___ftmul@f1+2
  1711  000890  C1E7  F0AF         	movff	printf@fval,___ftmul@f2
  1712  000894  C1E8  F0B0         	movff	printf@fval+1,___ftmul@f2+1
  1713  000898  C1E9  F0B1         	movff	printf@fval+2,___ftmul@f2+2
  1714  00089C  ECBD  F012         	call	___ftmul	;wreg free
  1715  0008A0  C0AC  F1DB         	movff	?___ftmul,printf@integ
  1716  0008A4  C0AD  F1DC         	movff	?___ftmul+1,printf@integ+1
  1717  0008A8  C0AE  F1DD         	movff	?___ftmul+2,printf@integ+2
  1718                           
  1719                           ;doprnt.c: 857: if(integ < 1.0)
  1720  0008AC  C1DB  F02B         	movff	printf@integ,___ftge@ff1
  1721  0008B0  C1DC  F02C         	movff	printf@integ+1,___ftge@ff1+1
  1722  0008B4  C1DD  F02D         	movff	printf@integ+2,___ftge@ff1+2
  1723  0008B8  0E00               	movlw	0
  1724  0008BA  6E2E               	movwf	___ftge@ff2,c
  1725  0008BC  0E80               	movlw	128
  1726  0008BE  6E2F               	movwf	___ftge@ff2+1,c
  1727  0008C0  0E3F               	movlw	63
  1728  0008C2  6E30               	movwf	___ftge@ff2+2,c
  1729  0008C4  EC27  F019         	call	___ftge	;wreg free
  1730  0008C8  B0D8               	btfsc	status,0,c
  1731  0008CA  D005               	goto	l5152
  1732                           
  1733                           ;doprnt.c: 858: exp--;
  1734  0008CC  0101               	movlb	1	; () banked
  1735  0008CE  07E5               	decf	printf@exp& (0+255),f,b
  1736  0008D0  A0D8               	btfss	status,0,c
  1737  0008D2  07E6               	decf	(printf@exp+1)& (0+255),f,b
  1738  0008D4  D013               	goto	l5156
  1739  0008D6                     l5152:
  1740                           
  1741                           ;doprnt.c: 859: else if(integ >= 10.0)
  1742  0008D6  C1DB  F02B         	movff	printf@integ,___ftge@ff1
  1743  0008DA  C1DC  F02C         	movff	printf@integ+1,___ftge@ff1+1
  1744  0008DE  C1DD  F02D         	movff	printf@integ+2,___ftge@ff1+2
  1745  0008E2  0E00               	movlw	0
  1746  0008E4  6E2E               	movwf	___ftge@ff2,c
  1747  0008E6  0E20               	movlw	32
  1748  0008E8  6E2F               	movwf	___ftge@ff2+1,c
  1749  0008EA  0E41               	movlw	65
  1750  0008EC  6E30               	movwf	___ftge@ff2+2,c
  1751  0008EE  EC27  F019         	call	___ftge	;wreg free
  1752  0008F2  A0D8               	btfss	status,0,c
  1753  0008F4  D003               	goto	l5156
  1754                           
  1755                           ;doprnt.c: 860: exp++;
  1756  0008F6  0101               	movlb	1	; () banked
  1757  0008F8  4BE5               	infsnz	printf@exp& (0+255),f,b
  1758  0008FA  2BE6               	incf	(printf@exp+1)& (0+255),f,b
  1759  0008FC                     l5156:
  1760                           
  1761                           ;doprnt.c: 861: }
  1762                           ;doprnt.c: 1121: if(prec <= 12)
  1763  0008FC  0101               	movlb	1	; () banked
  1764  0008FE  51DF               	movf	(printf@prec+1)& (0+255),w,b
  1765  000900  0A80               	xorlw	128
  1766  000902  6EF3               	movwf	prodl,c
  1767  000904  0E80               	movlw	128
  1768  000906  5CF3               	subwf	prodl,w,c
  1769  000908  0E0D               	movlw	13
  1770  00090A  B4D8               	btfsc	status,2,c
  1771  00090C  5DDE               	subwf	printf@prec& (0+255),w,b
  1772  00090E  B0D8               	btfsc	status,0,c
  1773  000910  D018               	goto	l5160
  1774                           
  1775                           ; BSR set to: 1
  1776                           ;doprnt.c: 1122: fval += fround(prec);
  1777  000912  C1E7  F0C2         	movff	printf@fval,___ftadd@f1
  1778  000916  C1E8  F0C3         	movff	printf@fval+1,___ftadd@f1+1
  1779  00091A  C1E9  F0C4         	movff	printf@fval+2,___ftadd@f1+2
  1780  00091E  0101               	movlb	1	; () banked
  1781  000920  51DE               	movf	printf@prec& (0+255),w,b
  1782  000922  EC3F  F00C         	call	_fround
  1783  000926  C0B8  F0C5         	movff	?_fround,___ftadd@f2
  1784  00092A  C0B9  F0C6         	movff	?_fround+1,___ftadd@f2+1
  1785  00092E  C0BA  F0C7         	movff	?_fround+2,___ftadd@f2+2
  1786  000932  EC8C  F00D         	call	___ftadd	;wreg free
  1787  000936  C0C2  F1E7         	movff	?___ftadd,printf@fval
  1788  00093A  C0C3  F1E8         	movff	?___ftadd+1,printf@fval+1
  1789  00093E  C0C4  F1E9         	movff	?___ftadd+2,printf@fval+2
  1790  000942                     l5160:
  1791                           
  1792                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1793  000942  0101               	movlb	1	; () banked
  1794  000944  51E6               	movf	(printf@exp+1)& (0+255),w,b
  1795  000946  0A80               	xorlw	128
  1796  000948  6EF3               	movwf	prodl,c
  1797  00094A  0E80               	movlw	128
  1798  00094C  5CF3               	subwf	prodl,w,c
  1799  00094E  0E0A               	movlw	10
  1800  000950  B4D8               	btfsc	status,2,c
  1801  000952  5DE5               	subwf	printf@exp& (0+255),w,b
  1802  000954  B0D8               	btfsc	status,0,c
  1803  000956  D029               	goto	l5168
  1804                           
  1805                           ; BSR set to: 1
  1806  000958  0E7F               	movlw	127
  1807  00095A  0101               	movlb	1	; () banked
  1808  00095C  15E9               	andwf	(printf@fval+2)& (0+255),w,b
  1809  00095E  0101               	movlb	1	; () banked
  1810  000960  11E8               	iorwf	(printf@fval+1)& (0+255),w,b
  1811  000962  0101               	movlb	1	; () banked
  1812  000964  11E7               	iorwf	printf@fval& (0+255),w,b
  1813  000966  B4D8               	btfsc	status,2,c
  1814  000968  D06C               	goto	l5184
  1815                           
  1816                           ; BSR set to: 1
  1817  00096A  C1E7  F0BF         	movff	printf@fval,___fttol@f1
  1818  00096E  C1E8  F0C0         	movff	printf@fval+1,___fttol@f1+1
  1819  000972  C1E9  F0C1         	movff	printf@fval+2,___fttol@f1+2
  1820  000976  ECD0  F00F         	call	___fttol	;wreg free
  1821  00097A  C0BF  F0DB         	movff	?___fttol,??_printf
  1822  00097E  C0C0  F0DC         	movff	?___fttol+1,??_printf+1
  1823  000982  C0C1  F0DD         	movff	?___fttol+2,??_printf+2
  1824  000986  C0C2  F0DE         	movff	?___fttol+3,??_printf+3
  1825  00098A  0100               	movlb	0	; () banked
  1826  00098C  51DE               	movf	(??_printf+3)& (0+255),w,b
  1827  00098E  11DB               	iorwf	??_printf& (0+255),w,b
  1828  000990  11DC               	iorwf	(??_printf+1)& (0+255),w,b
  1829  000992  11DD               	iorwf	(??_printf+2)& (0+255),w,b
  1830  000994  A4D8               	btfss	status,2,c
  1831  000996  D055               	goto	l5184
  1832                           
  1833                           ; BSR set to: 0
  1834  000998  0101               	movlb	1	; () banked
  1835  00099A  51E6               	movf	(printf@exp+1)& (0+255),w,b
  1836  00099C  0A80               	xorlw	128
  1837  00099E  0F80               	addlw	-128
  1838  0009A0  0E02               	movlw	2
  1839  0009A2  B4D8               	btfsc	status,2,c
  1840  0009A4  5DE5               	subwf	printf@exp& (0+255),w,b
  1841  0009A6  A0D8               	btfss	status,0,c
  1842  0009A8  D04C               	goto	l5184
  1843  0009AA                     l5168:
  1844                           
  1845                           ; BSR set to: 1
  1846                           ;doprnt.c: 1129: if(integ < 4.294967296){
  1847  0009AA  C1DB  F02B         	movff	printf@integ,___ftge@ff1
  1848  0009AE  C1DC  F02C         	movff	printf@integ+1,___ftge@ff1+1
  1849  0009B2  C1DD  F02D         	movff	printf@integ+2,___ftge@ff1+2
  1850  0009B6  0E70               	movlw	112
  1851  0009B8  6E2E               	movwf	___ftge@ff2,c
  1852  0009BA  0E89               	movlw	137
  1853  0009BC  6E2F               	movwf	___ftge@ff2+1,c
  1854  0009BE  0E40               	movlw	64
  1855  0009C0  6E30               	movwf	___ftge@ff2+2,c
  1856  0009C2  EC27  F019         	call	___ftge	;wreg free
  1857  0009C6  B0D8               	btfsc	status,0,c
  1858  0009C8  D003               	goto	l5172
  1859                           
  1860                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1861  0009CA  0101               	movlb	1	; () banked
  1862  0009CC  0EF7               	movlw	247
  1863  0009CE  D002               	goto	L5
  1864  0009D0                     l5172:
  1865                           
  1866                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1867  0009D0  0101               	movlb	1	; () banked
  1868  0009D2  0EF8               	movlw	248
  1869  0009D4                     L5:
  1870  0009D4  0101               	movlb	1	; () banked
  1871  0009D6  27E5               	addwf	printf@exp& (0+255),f,b
  1872  0009D8  0EFF               	movlw	255
  1873  0009DA  0101               	movlb	1	; () banked
  1874  0009DC  23E6               	addwfc	(printf@exp+1)& (0+255),f,b
  1875                           
  1876                           ; BSR set to: 1
  1877                           ;doprnt.c: 1133: }
  1878                           ;doprnt.c: 1134: integ = scale(exp);
  1879                           
  1880                           ; BSR set to: 1
  1881  0009DE  0101               	movlb	1	; () banked
  1882  0009E0  51E5               	movf	printf@exp& (0+255),w,b
  1883  0009E2  EC04  F00A         	call	_scale
  1884  0009E6  C0B8  F1DB         	movff	?_scale,printf@integ
  1885  0009EA  C0B9  F1DC         	movff	?_scale+1,printf@integ+1
  1886  0009EE  C0BA  F1DD         	movff	?_scale+2,printf@integ+2
  1887                           
  1888                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  1889  0009F2  C1E7  F017         	movff	printf@fval,__tdiv_to_l_@f1
  1890  0009F6  C1E8  F018         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1891  0009FA  C1E9  F019         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1892  0009FE  C1DB  F01A         	movff	printf@integ,__tdiv_to_l_@f2
  1893  000A02  C1DC  F01B         	movff	printf@integ+1,__tdiv_to_l_@f2+1
  1894  000A06  C1DD  F01C         	movff	printf@integ+2,__tdiv_to_l_@f2+2
  1895  000A0A  ECD2  F014         	call	__tdiv_to_l_	;wreg free
  1896  000A0E  C017  F1CB         	movff	?__tdiv_to_l_,_printf$1058
  1897  000A12  C018  F1CC         	movff	?__tdiv_to_l_+1,_printf$1058+1
  1898  000A16  C019  F1CD         	movff	?__tdiv_to_l_+2,_printf$1058+2
  1899  000A1A  C01A  F1CE         	movff	?__tdiv_to_l_+3,_printf$1058+3
  1900  000A1E  C1CB  F1E0         	movff	_printf$1058,printf@_val
  1901  000A22  C1CC  F1E1         	movff	_printf$1058+1,printf@_val+1
  1902  000A26  C1CD  F1E2         	movff	_printf$1058+2,printf@_val+2
  1903  000A2A  C1CE  F1E3         	movff	_printf$1058+3,printf@_val+3
  1904                           
  1905                           ;doprnt.c: 1138: fval = 0.0;
  1906  000A2E  0E00               	movlw	0
  1907  000A30  0101               	movlb	1	; () banked
  1908  000A32  6FE7               	movwf	printf@fval& (0+255),b
  1909  000A34  0E00               	movlw	0
  1910  000A36  0101               	movlb	1	; () banked
  1911  000A38  6FE8               	movwf	(printf@fval+1)& (0+255),b
  1912  000A3A  0E00               	movlw	0
  1913  000A3C  0101               	movlb	1	; () banked
  1914  000A3E  6FE9               	movwf	(printf@fval+2)& (0+255),b
  1915                           
  1916                           ;doprnt.c: 1139: } else {
  1917  000A40  D034               	goto	l5188
  1918  000A42                     l5184:
  1919                           
  1920                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  1921  000A42  C1E7  F0BF         	movff	printf@fval,___fttol@f1
  1922  000A46  C1E8  F0C0         	movff	printf@fval+1,___fttol@f1+1
  1923  000A4A  C1E9  F0C1         	movff	printf@fval+2,___fttol@f1+2
  1924  000A4E  ECD0  F00F         	call	___fttol	;wreg free
  1925  000A52  C0BF  F1E0         	movff	?___fttol,printf@_val
  1926  000A56  C0C0  F1E1         	movff	?___fttol+1,printf@_val+1
  1927  000A5A  C0C1  F1E2         	movff	?___fttol+2,printf@_val+2
  1928  000A5E  C0C2  F1E3         	movff	?___fttol+3,printf@_val+3
  1929                           
  1930                           ;doprnt.c: 1141: fval -= (double)_val._val;
  1931  000A62  C1E7  F0CE         	movff	printf@fval,___ftsub@f1
  1932  000A66  C1E8  F0CF         	movff	printf@fval+1,___ftsub@f1+1
  1933  000A6A  C1E9  F0D0         	movff	printf@fval+2,___ftsub@f1+2
  1934  000A6E  C1E0  F01F         	movff	printf@_val,___lltoft@c
  1935  000A72  C1E1  F020         	movff	printf@_val+1,___lltoft@c+1
  1936  000A76  C1E2  F021         	movff	printf@_val+2,___lltoft@c+2
  1937  000A7A  C1E3  F022         	movff	printf@_val+3,___lltoft@c+3
  1938  000A7E  EC1E  F01A         	call	___lltoft	;wreg free
  1939  000A82  C01F  F0D1         	movff	?___lltoft,___ftsub@f2
  1940  000A86  C020  F0D2         	movff	?___lltoft+1,___ftsub@f2+1
  1941  000A8A  C021  F0D3         	movff	?___lltoft+2,___ftsub@f2+2
  1942  000A8E  ECE3  F01A         	call	___ftsub	;wreg free
  1943  000A92  C0CE  F1E7         	movff	?___ftsub,printf@fval
  1944  000A96  C0CF  F1E8         	movff	?___ftsub+1,printf@fval+1
  1945  000A9A  C0D0  F1E9         	movff	?___ftsub+2,printf@fval+2
  1946                           
  1947                           ;doprnt.c: 1142: exp = 0;
  1948  000A9E  0E00               	movlw	0
  1949  000AA0  0101               	movlb	1	; () banked
  1950  000AA2  6FE6               	movwf	(printf@exp+1)& (0+255),b
  1951  000AA4  0E00               	movlw	0
  1952  000AA6  0101               	movlb	1	; () banked
  1953  000AA8  6FE5               	movwf	printf@exp& (0+255),b
  1954  000AAA                     l5188:
  1955                           
  1956                           ; BSR set to: 1
  1957                           ;doprnt.c: 1143: }
  1958                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1959  000AAA  0E01               	movlw	1
  1960  000AAC  0101               	movlb	1	; () banked
  1961  000AAE  6FEA               	movwf	printf@c& (0+255),b
  1962  000AB0                     
  1963                           ; BSR set to: 1
  1964  000AB0  0101               	movlb	1	; () banked
  1965  000AB2  51EA               	movf	printf@c& (0+255),w,b
  1966  000AB4  0A0A               	xorlw	10
  1967  000AB6  B4D8               	btfsc	status,2,c
  1968  000AB8  D01E               	goto	l5202
  1969                           
  1970                           ; BSR set to: 1
  1971                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  1972                           
  1973                           ; BSR set to: 1
  1974                           
  1975                           ; BSR set to: 1
  1976  000ABA  0101               	movlb	1	; () banked
  1977  000ABC  51EA               	movf	printf@c& (0+255),w,b
  1978  000ABE  0D04               	mullw	4
  1979  000AC0  0E01               	movlw	low _dpowers
  1980  000AC2  24F3               	addwf	prodl,w,c
  1981  000AC4  6EF6               	movwf	tblptrl,c
  1982  000AC6  0E06               	movlw	high _dpowers
  1983  000AC8  20F4               	addwfc	prodh,w,c
  1984  000ACA  6EF7               	movwf	tblptrh,c
  1985  000ACC                     	if	0	;There are less than 3 active tblptr bytes
  1986  000ACC                     	endif
  1987  000ACC  0009               	tblrd		*+
  1988  000ACE  50F5               	movf	tablat,w,c
  1989  000AD0  0101               	movlb	1	; () banked
  1990  000AD2  5DE0               	subwf	printf@_val& (0+255),w,b
  1991  000AD4  0009               	tblrd		*+
  1992  000AD6  50F5               	movf	tablat,w,c
  1993  000AD8  0101               	movlb	1	; () banked
  1994  000ADA  59E1               	subwfb	(printf@_val+1)& (0+255),w,b
  1995  000ADC  0009               	tblrd		*+
  1996  000ADE  50F5               	movf	tablat,w,c
  1997  000AE0  0101               	movlb	1	; () banked
  1998  000AE2  59E2               	subwfb	(printf@_val+2)& (0+255),w,b
  1999  000AE4  0009               	tblrd		*+
  2000  000AE6  50F5               	movf	tablat,w,c
  2001  000AE8  0101               	movlb	1	; () banked
  2002  000AEA  59E3               	subwfb	(printf@_val+3)& (0+255),w,b
  2003  000AEC  A0D8               	btfss	status,0,c
  2004  000AEE  D003               	goto	l5202
  2005                           
  2006                           ; BSR set to: 1
  2007                           
  2008                           ; BSR set to: 1
  2009                           
  2010                           ; BSR set to: 1
  2011                           ;doprnt.c: 1147: break;
  2012  000AF0  0101               	movlb	1	; () banked
  2013  000AF2  2BEA               	incf	printf@c& (0+255),f,b
  2014  000AF4  D7DD               	goto	L6
  2015  000AF6                     l5202:
  2016                           
  2017                           ; BSR set to: 1
  2018                           ;doprnt.c: 1184: {
  2019                           ;doprnt.c: 1197: if(flag & 0x03)
  2020  000AF6  0E03               	movlw	3
  2021  000AF8  0101               	movlb	1	; () banked
  2022  000AFA  15D9               	andwf	printf@flag& (0+255),w,b
  2023  000AFC  0100               	movlb	0	; () banked
  2024  000AFE  6FDB               	movwf	??_printf& (0+255),b
  2025  000B00  0E00               	movlw	0
  2026  000B02  0101               	movlb	1	; () banked
  2027  000B04  15DA               	andwf	(printf@flag+1)& (0+255),w,b
  2028  000B06  0100               	movlb	0	; () banked
  2029  000B08  6FDC               	movwf	(??_printf+1)& (0+255),b
  2030  000B0A  0100               	movlb	0	; () banked
  2031  000B0C  51DC               	movf	(??_printf+1)& (0+255),w,b
  2032  000B0E  11DB               	iorwf	??_printf& (0+255),w,b
  2033  000B10  B4D8               	btfsc	status,2,c
  2034  000B12  D04A               	goto	l5212
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;doprnt.c: 1199: (putch('-') );
  2038  000B14  0E2D               	movlw	45
  2039  000B16  EC3F  F01C         	call	_putch
  2040  000B1A  D046               	goto	l5212
  2041  000B1C                     l5206:
  2042                           
  2043                           ;doprnt.c: 1209: {
  2044                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  2045  000B1C  C1E0  F017         	movff	printf@_val,___lldiv@dividend
  2046  000B20  C1E1  F018         	movff	printf@_val+1,___lldiv@dividend+1
  2047  000B24  C1E2  F019         	movff	printf@_val+2,___lldiv@dividend+2
  2048  000B28  C1E3  F01A         	movff	printf@_val+3,___lldiv@dividend+3
  2049  000B2C  0101               	movlb	1	; () banked
  2050  000B2E  51EA               	movf	printf@c& (0+255),w,b
  2051  000B30  0D04               	mullw	4
  2052  000B32  0E01               	movlw	low _dpowers
  2053  000B34  24F3               	addwf	prodl,w,c
  2054  000B36  6EF6               	movwf	tblptrl,c
  2055  000B38  0E06               	movlw	high _dpowers
  2056  000B3A  20F4               	addwfc	prodh,w,c
  2057  000B3C  6EF7               	movwf	tblptrh,c
  2058  000B3E                     	if	0	;There are less than 3 active tblptr bytes
  2059  000B3E                     	endif
  2060  000B3E  0009               	tblrd		*+
  2061  000B40  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2062  000B44  0009               	tblrd		*+
  2063  000B46  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2064  000B4A  0009               	tblrd		*+
  2065  000B4C  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2066  000B50  000A               	tblrd		*-
  2067  000B52  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2068  000B56  EC6F  F019         	call	___lldiv	;wreg free
  2069  000B5A  C017  F1CF         	movff	?___lldiv,printf@vd
  2070  000B5E  C018  F1D0         	movff	?___lldiv+1,printf@vd+1
  2071  000B62  C019  F1D1         	movff	?___lldiv+2,printf@vd+2
  2072  000B66  C01A  F1D2         	movff	?___lldiv+3,printf@vd+3
  2073                           
  2074                           ;doprnt.c: 1211: vd %= 10;
  2075  000B6A  C1CF  F024         	movff	printf@vd,___llmod@dividend
  2076  000B6E  C1D0  F025         	movff	printf@vd+1,___llmod@dividend+1
  2077  000B72  C1D1  F026         	movff	printf@vd+2,___llmod@dividend+2
  2078  000B76  C1D2  F027         	movff	printf@vd+3,___llmod@dividend+3
  2079  000B7A  0E0A               	movlw	10
  2080  000B7C  6E28               	movwf	___llmod@divisor,c
  2081  000B7E  0E00               	movlw	0
  2082  000B80  6E29               	movwf	___llmod@divisor+1,c
  2083  000B82  0E00               	movlw	0
  2084  000B84  6E2A               	movwf	___llmod@divisor+2,c
  2085  000B86  0E00               	movlw	0
  2086  000B88  6E2B               	movwf	___llmod@divisor+3,c
  2087  000B8A  ECEB  F019         	call	___llmod	;wreg free
  2088  000B8E  C024  F1CF         	movff	?___llmod,printf@vd
  2089  000B92  C025  F1D0         	movff	?___llmod+1,printf@vd+1
  2090  000B96  C026  F1D1         	movff	?___llmod+2,printf@vd+2
  2091  000B9A  C027  F1D2         	movff	?___llmod+3,printf@vd+3
  2092                           
  2093                           ;doprnt.c: 1212: (putch('0' + vd) );
  2094  000B9E  0101               	movlb	1	; () banked
  2095  000BA0  51CF               	movf	printf@vd& (0+255),w,b
  2096  000BA2  0F30               	addlw	48
  2097  000BA4  EC3F  F01C         	call	_putch
  2098  000BA8                     l5212:
  2099  000BA8  0101               	movlb	1	; () banked
  2100  000BAA  07EA               	decf	printf@c& (0+255),f,b
  2101  000BAC  0101               	movlb	1	; () banked
  2102  000BAE  29EA               	incf	printf@c& (0+255),w,b
  2103  000BB0  B4D8               	btfsc	status,2,c
  2104  000BB2  D008               	goto	l5218
  2105  000BB4  D7B3               	goto	l5206
  2106  000BB6                     l5214:
  2107                           
  2108                           ; BSR set to: 1
  2109                           ;doprnt.c: 1217: (putch('0') );
  2110  000BB6  0E30               	movlw	48
  2111  000BB8  EC3F  F01C         	call	_putch
  2112                           
  2113                           ;doprnt.c: 1218: exp--;
  2114  000BBC  0101               	movlb	1	; () banked
  2115  000BBE  07E5               	decf	printf@exp& (0+255),f,b
  2116  000BC0  A0D8               	btfss	status,0,c
  2117  000BC2  07E6               	decf	(printf@exp+1)& (0+255),f,b
  2118  000BC4                     l5218:
  2119                           
  2120                           ; BSR set to: 1
  2121  000BC4  0101               	movlb	1	; () banked
  2122  000BC6  51E6               	movf	(printf@exp+1)& (0+255),w,b
  2123  000BC8  0A80               	xorlw	128
  2124  000BCA  6EF3               	movwf	prodl,c
  2125  000BCC  0E80               	movlw	128
  2126  000BCE  5CF3               	subwf	prodl,w,c
  2127  000BD0  0E01               	movlw	1
  2128  000BD2  B4D8               	btfsc	status,2,c
  2129  000BD4  5DE5               	subwf	printf@exp& (0+255),w,b
  2130  000BD6  B0D8               	btfsc	status,0,c
  2131  000BD8  D7EE               	goto	l5214
  2132                           
  2133                           ; BSR set to: 1
  2134                           ;doprnt.c: 1219: }
  2135                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2136                           
  2137                           ; BSR set to: 1
  2138  000BDA  0101               	movlb	1	; () banked
  2139  000BDC  51DF               	movf	(printf@prec+1)& (0+255),w,b
  2140  000BDE  0A80               	xorlw	128
  2141  000BE0  0F80               	addlw	-128
  2142  000BE2  0E09               	movlw	9
  2143  000BE4  B4D8               	btfsc	status,2,c
  2144  000BE6  5DDE               	subwf	printf@prec& (0+255),w,b
  2145  000BE8  A0D8               	btfss	status,0,c
  2146  000BEA  D004               	goto	l658
  2147                           
  2148                           ; BSR set to: 1
  2149                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2150  000BEC  0E08               	movlw	8
  2151  000BEE  0101               	movlb	1	; () banked
  2152  000BF0  6FEA               	movwf	printf@c& (0+255),b
  2153  000BF2  D002               	goto	l5224
  2154  000BF4                     l658:
  2155                           
  2156                           ; BSR set to: 1
  2157                           ;doprnt.c: 1222: else
  2158                           ;doprnt.c: 1223: c = prec;
  2159  000BF4  C1DE  F1EA         	movff	printf@prec,printf@c
  2160  000BF8                     l5224:
  2161                           
  2162                           ; BSR set to: 1
  2163                           ;doprnt.c: 1224: prec -= c;
  2164  000BF8  0101               	movlb	1	; () banked
  2165  000BFA  51EA               	movf	printf@c& (0+255),w,b
  2166  000BFC  0101               	movlb	1	; () banked
  2167  000BFE  5FDE               	subwf	printf@prec& (0+255),f,b
  2168  000C00  0E00               	movlw	0
  2169  000C02  0101               	movlb	1	; () banked
  2170  000C04  BFEA               	btfsc	printf@c& (0+255),7,b
  2171  000C06  0EFF               	movlw	255
  2172  000C08  0101               	movlb	1	; () banked
  2173  000C0A  5BDF               	subwfb	(printf@prec+1)& (0+255),f,b
  2174                           
  2175                           ; BSR set to: 1
  2176                           ;doprnt.c: 1228: if(c)
  2177  000C0C  0101               	movlb	1	; () banked
  2178  000C0E  51EA               	movf	printf@c& (0+255),w,b
  2179  000C10  B4D8               	btfsc	status,2,c
  2180  000C12  D003               	goto	l5230
  2181                           
  2182                           ; BSR set to: 1
  2183                           ;doprnt.c: 1230: (putch('.') );
  2184  000C14  0E2E               	movlw	46
  2185  000C16  EC3F  F01C         	call	_putch
  2186  000C1A                     l5230:
  2187                           
  2188                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2189  000C1A  0101               	movlb	1	; () banked
  2190  000C1C  51EA               	movf	printf@c& (0+255),w,b
  2191  000C1E  EC04  F00A         	call	_scale
  2192  000C22  C0B8  F1C8         	movff	?_scale,_printf$1705
  2193  000C26  C0B9  F1C9         	movff	?_scale+1,_printf$1705+1
  2194  000C2A  C0BA  F1CA         	movff	?_scale+2,_printf$1705+2
  2195                           
  2196                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2197  000C2E  C1E7  F0AF         	movff	printf@fval,___ftmul@f2
  2198  000C32  C1E8  F0B0         	movff	printf@fval+1,___ftmul@f2+1
  2199  000C36  C1E9  F0B1         	movff	printf@fval+2,___ftmul@f2+2
  2200  000C3A  C1C8  F0AC         	movff	_printf$1705,___ftmul@f1
  2201  000C3E  C1C9  F0AD         	movff	_printf$1705+1,___ftmul@f1+1
  2202  000C42  C1CA  F0AE         	movff	_printf$1705+2,___ftmul@f1+2
  2203  000C46  ECBD  F012         	call	___ftmul	;wreg free
  2204  000C4A  C0AC  F0BF         	movff	?___ftmul,___fttol@f1
  2205  000C4E  C0AD  F0C0         	movff	?___ftmul+1,___fttol@f1+1
  2206  000C52  C0AE  F0C1         	movff	?___ftmul+2,___fttol@f1+2
  2207  000C56  ECD0  F00F         	call	___fttol	;wreg free
  2208  000C5A  C0BF  F1E0         	movff	?___fttol,printf@_val
  2209  000C5E  C0C0  F1E1         	movff	?___fttol+1,printf@_val+1
  2210  000C62  C0C1  F1E2         	movff	?___fttol+2,printf@_val+2
  2211  000C66  C0C2  F1E3         	movff	?___fttol+3,printf@_val+3
  2212                           
  2213                           ;doprnt.c: 1237: while(c--) {
  2214  000C6A  D06D               	goto	l5242
  2215  000C6C                     l5234:
  2216                           
  2217                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2218  000C6C  C1E0  F017         	movff	printf@_val,___lldiv@dividend
  2219  000C70  C1E1  F018         	movff	printf@_val+1,___lldiv@dividend+1
  2220  000C74  C1E2  F019         	movff	printf@_val+2,___lldiv@dividend+2
  2221  000C78  C1E3  F01A         	movff	printf@_val+3,___lldiv@dividend+3
  2222  000C7C  0101               	movlb	1	; () banked
  2223  000C7E  51EA               	movf	printf@c& (0+255),w,b
  2224  000C80  0D04               	mullw	4
  2225  000C82  0E01               	movlw	low _dpowers
  2226  000C84  24F3               	addwf	prodl,w,c
  2227  000C86  6EF6               	movwf	tblptrl,c
  2228  000C88  0E06               	movlw	high _dpowers
  2229  000C8A  20F4               	addwfc	prodh,w,c
  2230  000C8C  6EF7               	movwf	tblptrh,c
  2231  000C8E                     	if	0	;There are less than 3 active tblptr bytes
  2232  000C8E                     	endif
  2233  000C8E  0009               	tblrd		*+
  2234  000C90  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2235  000C94  0009               	tblrd		*+
  2236  000C96  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2237  000C9A  0009               	tblrd		*+
  2238  000C9C  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2239  000CA0  000A               	tblrd		*-
  2240  000CA2  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2241  000CA6  EC6F  F019         	call	___lldiv	;wreg free
  2242  000CAA  C017  F1D3         	movff	?___lldiv,printf@vd_1060
  2243  000CAE  C018  F1D4         	movff	?___lldiv+1,printf@vd_1060+1
  2244  000CB2  C019  F1D5         	movff	?___lldiv+2,printf@vd_1060+2
  2245  000CB6  C01A  F1D6         	movff	?___lldiv+3,printf@vd_1060+3
  2246                           
  2247                           ;doprnt.c: 1239: vd %= 10;
  2248  000CBA  C1D3  F024         	movff	printf@vd_1060,___llmod@dividend
  2249  000CBE  C1D4  F025         	movff	printf@vd_1060+1,___llmod@dividend+1
  2250  000CC2  C1D5  F026         	movff	printf@vd_1060+2,___llmod@dividend+2
  2251  000CC6  C1D6  F027         	movff	printf@vd_1060+3,___llmod@dividend+3
  2252  000CCA  0E0A               	movlw	10
  2253  000CCC  6E28               	movwf	___llmod@divisor,c
  2254  000CCE  0E00               	movlw	0
  2255  000CD0  6E29               	movwf	___llmod@divisor+1,c
  2256  000CD2  0E00               	movlw	0
  2257  000CD4  6E2A               	movwf	___llmod@divisor+2,c
  2258  000CD6  0E00               	movlw	0
  2259  000CD8  6E2B               	movwf	___llmod@divisor+3,c
  2260  000CDA  ECEB  F019         	call	___llmod	;wreg free
  2261  000CDE  C024  F1D3         	movff	?___llmod,printf@vd_1060
  2262  000CE2  C025  F1D4         	movff	?___llmod+1,printf@vd_1060+1
  2263  000CE6  C026  F1D5         	movff	?___llmod+2,printf@vd_1060+2
  2264  000CEA  C027  F1D6         	movff	?___llmod+3,printf@vd_1060+3
  2265                           
  2266                           ;doprnt.c: 1240: (putch('0' + vd) );
  2267  000CEE  0101               	movlb	1	; () banked
  2268  000CF0  51D3               	movf	printf@vd_1060& (0+255),w,b
  2269  000CF2  0F30               	addlw	48
  2270  000CF4  EC3F  F01C         	call	_putch
  2271                           
  2272                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2273  000CF8  C1E0  F024         	movff	printf@_val,___llmod@dividend
  2274  000CFC  C1E1  F025         	movff	printf@_val+1,___llmod@dividend+1
  2275  000D00  C1E2  F026         	movff	printf@_val+2,___llmod@dividend+2
  2276  000D04  C1E3  F027         	movff	printf@_val+3,___llmod@dividend+3
  2277  000D08  0101               	movlb	1	; () banked
  2278  000D0A  51EA               	movf	printf@c& (0+255),w,b
  2279  000D0C  0D04               	mullw	4
  2280  000D0E  0E01               	movlw	low _dpowers
  2281  000D10  24F3               	addwf	prodl,w,c
  2282  000D12  6EF6               	movwf	tblptrl,c
  2283  000D14  0E06               	movlw	high _dpowers
  2284  000D16  20F4               	addwfc	prodh,w,c
  2285  000D18  6EF7               	movwf	tblptrh,c
  2286  000D1A                     	if	0	;There are less than 3 active tblptr bytes
  2287  000D1A                     	endif
  2288  000D1A  0009               	tblrd		*+
  2289  000D1C  CFF5 F028          	movff	tablat,___llmod@divisor
  2290  000D20  0009               	tblrd		*+
  2291  000D22  CFF5 F029          	movff	tablat,___llmod@divisor+1
  2292  000D26  0009               	tblrd		*+
  2293  000D28  CFF5 F02A          	movff	tablat,___llmod@divisor+2
  2294  000D2C  000A               	tblrd		*-
  2295  000D2E  CFF5 F02B          	movff	tablat,___llmod@divisor+3
  2296  000D32  ECEB  F019         	call	___llmod	;wreg free
  2297  000D36  C024  F1E0         	movff	?___llmod,printf@_val
  2298  000D3A  C025  F1E1         	movff	?___llmod+1,printf@_val+1
  2299  000D3E  C026  F1E2         	movff	?___llmod+2,printf@_val+2
  2300  000D42  C027  F1E3         	movff	?___llmod+3,printf@_val+3
  2301  000D46                     l5242:
  2302  000D46  0101               	movlb	1	; () banked
  2303  000D48  07EA               	decf	printf@c& (0+255),f,b
  2304  000D4A  0101               	movlb	1	; () banked
  2305  000D4C  29EA               	incf	printf@c& (0+255),w,b
  2306  000D4E  B4D8               	btfsc	status,2,c
  2307  000D50  D008               	goto	l5248
  2308  000D52  D78C               	goto	l5234
  2309  000D54                     l5244:
  2310                           
  2311                           ; BSR set to: 1
  2312                           ;doprnt.c: 1245: (putch('0') );
  2313  000D54  0E30               	movlw	48
  2314  000D56  EC3F  F01C         	call	_putch
  2315                           
  2316                           ;doprnt.c: 1246: prec--;
  2317  000D5A  0101               	movlb	1	; () banked
  2318  000D5C  07DE               	decf	printf@prec& (0+255),f,b
  2319  000D5E  A0D8               	btfss	status,0,c
  2320  000D60  07DF               	decf	(printf@prec+1)& (0+255),f,b
  2321  000D62                     l5248:
  2322                           
  2323                           ; BSR set to: 1
  2324  000D62  0101               	movlb	1	; () banked
  2325  000D64  51DF               	movf	(printf@prec+1)& (0+255),w,b
  2326  000D66  11DE               	iorwf	printf@prec& (0+255),w,b
  2327  000D68  B4D8               	btfsc	status,2,c
  2328  000D6A  D0D8               	goto	l5286
  2329  000D6C  D7F3               	goto	l5244
  2330  000D6E                     l5250:
  2331                           
  2332                           ; BSR set to: 1
  2333                           ;doprnt.c: 1255: }
  2334                           ;doprnt.c: 1262: {
  2335                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2336  000D6E  C1D7  FFD9         	movff	printf@ap,fsr2l
  2337  000D72  C1D8  FFDA         	movff	printf@ap+1,fsr2h
  2338  000D76  0101               	movlb	1	; () banked
  2339  000D78  CFDE F1E0          	movff	postinc2,printf@_val
  2340  000D7C  0101               	movlb	1	; () banked
  2341  000D7E  CFDD F1E1          	movff	postdec2,printf@_val+1
  2342  000D82  0101               	movlb	1	; () banked
  2343  000D84  0E00               	movlw	0
  2344  000D86  0101               	movlb	1	; () banked
  2345  000D88  BFE1               	btfsc	(printf@_val+1)& (0+255),7,b
  2346  000D8A  0EFF               	movlw	-1
  2347  000D8C  0101               	movlb	1	; () banked
  2348  000D8E  6FE2               	movwf	(printf@_val+2)& (0+255),b
  2349  000D90  0101               	movlb	1	; () banked
  2350  000D92  6FE3               	movwf	(printf@_val+3)& (0+255),b
  2351                           
  2352                           ; BSR set to: 1
  2353  000D94  0E02               	movlw	2
  2354  000D96  0101               	movlb	1	; () banked
  2355  000D98  27D7               	addwf	printf@ap& (0+255),f,b
  2356  000D9A  0E00               	movlw	0
  2357  000D9C  0101               	movlb	1	; () banked
  2358  000D9E  23D8               	addwfc	(printf@ap+1)& (0+255),f,b
  2359                           
  2360                           ; BSR set to: 1
  2361                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  2362  000DA0  0101               	movlb	1	; () banked
  2363  000DA2  51E3               	movf	(printf@_val+3)& (0+255),w,b
  2364  000DA4  0A80               	xorlw	128
  2365  000DA6  0F80               	addlw	128
  2366  000DA8  E10B               	bnz	u5585
  2367  000DAA  0E00               	movlw	0
  2368  000DAC  0101               	movlb	1	; () banked
  2369  000DAE  5DE2               	subwf	(printf@_val+2)& (0+255),w,b
  2370  000DB0  E107               	bnz	u5585
  2371  000DB2  0E00               	movlw	0
  2372  000DB4  0101               	movlb	1	; () banked
  2373  000DB6  5DE1               	subwf	(printf@_val+1)& (0+255),w,b
  2374  000DB8  E103               	bnz	u5585
  2375  000DBA  0E00               	movlw	0
  2376  000DBC  0101               	movlb	1	; () banked
  2377  000DBE  5DE0               	subwf	printf@_val& (0+255),w,b
  2378  000DC0                     u5585:
  2379  000DC0  B0D8               	btfsc	status,0,c
  2380  000DC2  D012               	goto	l5260
  2381                           
  2382                           ; BSR set to: 1
  2383                           ;doprnt.c: 1271: flag |= 0x03;
  2384  000DC4  0E03               	movlw	3
  2385  000DC6  0101               	movlb	1	; () banked
  2386  000DC8  13D9               	iorwf	printf@flag& (0+255),f,b
  2387                           
  2388                           ; BSR set to: 1
  2389                           ;doprnt.c: 1272: _val._val = -_val._val;
  2390  000DCA  0101               	movlb	1	; () banked
  2391  000DCC  1FE3               	comf	(printf@_val+3)& (0+255),f,b
  2392  000DCE  0101               	movlb	1	; () banked
  2393  000DD0  1FE2               	comf	(printf@_val+2)& (0+255),f,b
  2394  000DD2  0101               	movlb	1	; () banked
  2395  000DD4  1FE1               	comf	(printf@_val+1)& (0+255),f,b
  2396  000DD6  0101               	movlb	1	; () banked
  2397  000DD8  6DE0               	negf	printf@_val& (0+255),b
  2398  000DDA  0E00               	movlw	0
  2399  000DDC  0101               	movlb	1	; () banked
  2400  000DDE  23E1               	addwfc	(printf@_val+1)& (0+255),f,b
  2401  000DE0  0101               	movlb	1	; () banked
  2402  000DE2  23E2               	addwfc	(printf@_val+2)& (0+255),f,b
  2403  000DE4  0101               	movlb	1	; () banked
  2404  000DE6  23E3               	addwfc	(printf@_val+3)& (0+255),f,b
  2405  000DE8                     l5260:
  2406                           
  2407                           ; BSR set to: 1
  2408                           ;doprnt.c: 1273: }
  2409                           ;doprnt.c: 1275: }
  2410                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2411  000DE8  0E01               	movlw	1
  2412  000DEA  0101               	movlb	1	; () banked
  2413  000DEC  6FEA               	movwf	printf@c& (0+255),b
  2414  000DEE                     
  2415                           ; BSR set to: 1
  2416  000DEE  0101               	movlb	1	; () banked
  2417  000DF0  51EA               	movf	printf@c& (0+255),w,b
  2418  000DF2  0A0A               	xorlw	10
  2419  000DF4  B4D8               	btfsc	status,2,c
  2420  000DF6  D01E               	goto	l5274
  2421                           
  2422                           ; BSR set to: 1
  2423                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2424                           
  2425                           ; BSR set to: 1
  2426                           
  2427                           ; BSR set to: 1
  2428  000DF8  0101               	movlb	1	; () banked
  2429  000DFA  51EA               	movf	printf@c& (0+255),w,b
  2430  000DFC  0D04               	mullw	4
  2431  000DFE  0E01               	movlw	low _dpowers
  2432  000E00  24F3               	addwf	prodl,w,c
  2433  000E02  6EF6               	movwf	tblptrl,c
  2434  000E04  0E06               	movlw	high _dpowers
  2435  000E06  20F4               	addwfc	prodh,w,c
  2436  000E08  6EF7               	movwf	tblptrh,c
  2437  000E0A                     	if	0	;There are less than 3 active tblptr bytes
  2438  000E0A                     	endif
  2439  000E0A  0009               	tblrd		*+
  2440  000E0C  50F5               	movf	tablat,w,c
  2441  000E0E  0101               	movlb	1	; () banked
  2442  000E10  5DE0               	subwf	printf@_val& (0+255),w,b
  2443  000E12  0009               	tblrd		*+
  2444  000E14  50F5               	movf	tablat,w,c
  2445  000E16  0101               	movlb	1	; () banked
  2446  000E18  59E1               	subwfb	(printf@_val+1)& (0+255),w,b
  2447  000E1A  0009               	tblrd		*+
  2448  000E1C  50F5               	movf	tablat,w,c
  2449  000E1E  0101               	movlb	1	; () banked
  2450  000E20  59E2               	subwfb	(printf@_val+2)& (0+255),w,b
  2451  000E22  0009               	tblrd		*+
  2452  000E24  50F5               	movf	tablat,w,c
  2453  000E26  0101               	movlb	1	; () banked
  2454  000E28  59E3               	subwfb	(printf@_val+3)& (0+255),w,b
  2455  000E2A  A0D8               	btfss	status,0,c
  2456  000E2C  D003               	goto	l5274
  2457                           
  2458                           ; BSR set to: 1
  2459                           
  2460                           ; BSR set to: 1
  2461                           
  2462                           ; BSR set to: 1
  2463                           ;doprnt.c: 1316: break;
  2464  000E2E  0101               	movlb	1	; () banked
  2465  000E30  2BEA               	incf	printf@c& (0+255),f,b
  2466  000E32  D7DD               	goto	L7
  2467  000E34                     l5274:
  2468                           
  2469                           ; BSR set to: 1
  2470                           ;doprnt.c: 1431: {
  2471                           ;doprnt.c: 1447: if(flag & 0x03)
  2472  000E34  0E03               	movlw	3
  2473  000E36  0101               	movlb	1	; () banked
  2474  000E38  15D9               	andwf	printf@flag& (0+255),w,b
  2475  000E3A  0100               	movlb	0	; () banked
  2476  000E3C  6FDB               	movwf	??_printf& (0+255),b
  2477  000E3E  0E00               	movlw	0
  2478  000E40  0101               	movlb	1	; () banked
  2479  000E42  15DA               	andwf	(printf@flag+1)& (0+255),w,b
  2480  000E44  0100               	movlb	0	; () banked
  2481  000E46  6FDC               	movwf	(??_printf+1)& (0+255),b
  2482  000E48  0100               	movlb	0	; () banked
  2483  000E4A  51DC               	movf	(??_printf+1)& (0+255),w,b
  2484  000E4C  11DB               	iorwf	??_printf& (0+255),w,b
  2485  000E4E  B4D8               	btfsc	status,2,c
  2486  000E50  D003               	goto	l5278
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;doprnt.c: 1448: (putch('-') );
  2490  000E52  0E2D               	movlw	45
  2491  000E54  EC3F  F01C         	call	_putch
  2492  000E58                     l5278:
  2493                           
  2494                           ;doprnt.c: 1478: }
  2495                           ;doprnt.c: 1481: prec = c;
  2496  000E58  0101               	movlb	1	; () banked
  2497  000E5A  51EA               	movf	printf@c& (0+255),w,b
  2498  000E5C  0101               	movlb	1	; () banked
  2499  000E5E  6FDE               	movwf	printf@prec& (0+255),b
  2500  000E60  0101               	movlb	1	; () banked
  2501  000E62  6BDF               	clrf	(printf@prec+1)& (0+255),b
  2502  000E64  0101               	movlb	1	; () banked
  2503  000E66  BFDE               	btfsc	printf@prec& (0+255),7,b
  2504  000E68  07DF               	decf	(printf@prec+1)& (0+255),f,b
  2505                           
  2506                           ;doprnt.c: 1483: while(prec--) {
  2507  000E6A  D04E               	goto	l5284
  2508  000E6C                     l5280:
  2509                           
  2510                           ; BSR set to: 1
  2511                           ;doprnt.c: 1487: {
  2512                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2513  000E6C  0101               	movlb	1	; () banked
  2514  000E6E  C1DE  F0DB         	movff	printf@prec,??_printf
  2515  000E72  0101               	movlb	1	; () banked
  2516  000E74  C1DF  F0DC         	movff	printf@prec+1,??_printf+1
  2517  000E78  0100               	movlb	0	; () banked
  2518  000E7A  90D8               	bcf	status,0,c
  2519  000E7C  37DB               	rlcf	??_printf& (0+255),f,b
  2520  000E7E  37DC               	rlcf	(??_printf+1)& (0+255),f,b
  2521  000E80  0100               	movlb	0	; () banked
  2522  000E82  90D8               	bcf	status,0,c
  2523  000E84  37DB               	rlcf	??_printf& (0+255),f,b
  2524  000E86  37DC               	rlcf	(??_printf+1)& (0+255),f,b
  2525  000E88  0E01               	movlw	low _dpowers
  2526  000E8A  0100               	movlb	0	; () banked
  2527  000E8C  25DB               	addwf	??_printf& (0+255),w,b
  2528  000E8E  6EF6               	movwf	tblptrl,c
  2529  000E90  0E06               	movlw	high _dpowers
  2530  000E92  21DC               	addwfc	(??_printf+1)& (0+255),w,b
  2531  000E94  6EF7               	movwf	tblptrh,c
  2532  000E96                     	if	0	;There are less than 3 active tblptr bytes
  2533  000E96                     	endif
  2534  000E96  0009               	tblrd		*+
  2535  000E98  CFF5 F01B          	movff	tablat,___lldiv@divisor
  2536  000E9C  0009               	tblrd		*+
  2537  000E9E  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  2538  000EA2  0009               	tblrd		*+
  2539  000EA4  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  2540  000EA8  000A               	tblrd		*-
  2541  000EAA  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  2542  000EAE  C1E0  F017         	movff	printf@_val,___lldiv@dividend
  2543  000EB2  C1E1  F018         	movff	printf@_val+1,___lldiv@dividend+1
  2544  000EB6  C1E2  F019         	movff	printf@_val+2,___lldiv@dividend+2
  2545  000EBA  C1E3  F01A         	movff	printf@_val+3,___lldiv@dividend+3
  2546  000EBE  EC6F  F019         	call	___lldiv	;wreg free
  2547  000EC2  C017  F024         	movff	?___lldiv,___llmod@dividend
  2548  000EC6  C018  F025         	movff	?___lldiv+1,___llmod@dividend+1
  2549  000ECA  C019  F026         	movff	?___lldiv+2,___llmod@dividend+2
  2550  000ECE  C01A  F027         	movff	?___lldiv+3,___llmod@dividend+3
  2551  000ED2  0E0A               	movlw	10
  2552  000ED4  6E28               	movwf	___llmod@divisor,c
  2553  000ED6  0E00               	movlw	0
  2554  000ED8  6E29               	movwf	___llmod@divisor+1,c
  2555  000EDA  0E00               	movlw	0
  2556  000EDC  6E2A               	movwf	___llmod@divisor+2,c
  2557  000EDE  0E00               	movlw	0
  2558  000EE0  6E2B               	movwf	___llmod@divisor+3,c
  2559  000EE2  ECEB  F019         	call	___llmod	;wreg free
  2560  000EE6  C024  F0DD         	movff	?___llmod,??_printf+2
  2561  000EEA  C025  F0DE         	movff	?___llmod+1,??_printf+3
  2562  000EEE  C026  F0DF         	movff	?___llmod+2,??_printf+4
  2563  000EF2  C027  F0E0         	movff	?___llmod+3,??_printf+5
  2564  000EF6  0100               	movlb	0	; () banked
  2565  000EF8  51DD               	movf	(??_printf+2)& (0+255),w,b
  2566  000EFA  0F30               	addlw	48
  2567  000EFC  0101               	movlb	1	; () banked
  2568  000EFE  6FEA               	movwf	printf@c& (0+255),b
  2569                           
  2570                           ; BSR set to: 1
  2571                           ;doprnt.c: 1532: }
  2572                           ;doprnt.c: 1533: (putch(c) );
  2573  000F00  0101               	movlb	1	; () banked
  2574  000F02  51EA               	movf	printf@c& (0+255),w,b
  2575  000F04  EC3F  F01C         	call	_putch
  2576  000F08                     l5284:
  2577  000F08  0101               	movlb	1	; () banked
  2578  000F0A  07DE               	decf	printf@prec& (0+255),f,b
  2579  000F0C  A0D8               	btfss	status,0,c
  2580  000F0E  07DF               	decf	(printf@prec+1)& (0+255),f,b
  2581  000F10  0101               	movlb	1	; () banked
  2582  000F12  29DE               	incf	printf@prec& (0+255),w,b
  2583  000F14  B4D8               	btfsc	status,2,c
  2584  000F16  29DF               	incf	(printf@prec+1)& (0+255),w,b
  2585  000F18  A4D8               	btfss	status,2,c
  2586  000F1A  D7A8               	goto	l5280
  2587  000F1C                     l5286:
  2588  000F1C  0100               	movlb	0	; () banked
  2589  000F1E  C0D4  FFF6         	movff	printf@f,tblptrl
  2590  000F22  0100               	movlb	0	; () banked
  2591  000F24  C0D5  FFF7         	movff	printf@f+1,tblptrh
  2592  000F28  0100               	movlb	0	; () banked
  2593  000F2A  4BD4               	infsnz	printf@f& (0+255),f,b
  2594  000F2C  2BD5               	incf	(printf@f+1)& (0+255),f,b
  2595  000F2E                     	if	0	;tblptru may be non-zero
  2596  000F2E                     	endif
  2597  000F2E                     	if	0	;tblptru may be non-zero
  2598  000F2E                     	endif
  2599  000F2E  0008               	tblrd		*
  2600  000F30  0101               	movlb	1	; () banked
  2601  000F32  CFF5 F1EA          	movff	tablat,printf@c
  2602  000F36  0101               	movlb	1	; () banked
  2603  000F38  67EA               	tstfsz	printf@c& (0+255),b
  2604  000F3A  EF66  F003         	goto	l5102
  2605  000F3E  0012               	return	
  2606  000F40                     __end_of_printf:
  2607                           	opt stack 0
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           prodh	equ	0xFF4
  2613                           prodl	equ	0xFF3
  2614                           intcon	equ	0xFF2
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           postinc2	equ	0xFDE
  2618                           postdec2	equ	0xFDD
  2619                           fsr2h	equ	0xFDA
  2620                           fsr2l	equ	0xFD9
  2621                           status	equ	0xFD8
  2622                           
  2623 ;; *************** function _scale *****************
  2624 ;; Defined at:
  2625 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  scl             1    wreg     char 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  scl             1   18[BANK0 ] char 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  3   12[BANK0 ] char 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2639 ;;      Params:         0       3       0       0       0       0       0
  2640 ;;      Locals:         0       4       0       0       0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0
  2642 ;;      Totals:         0       7       0       0       0       0       0
  2643 ;;Total ram usage:        7 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    6
  2646 ;; This function calls:
  2647 ;;		___awdiv
  2648 ;;		___awmod
  2649 ;;		___ftmul
  2650 ;;		___wmul
  2651 ;; This function is called by:
  2652 ;;		_printf
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text2
  2657  001408                     __ptext2:
  2658                           	opt stack 0
  2659  001408                     _scale:
  2660                           	opt stack 23
  2661                           
  2662                           ; BSR set to: 1
  2663                           ;incstack = 0
  2664                           ;scale@scl stored from wreg
  2665  001408  0100               	movlb	0	; () banked
  2666  00140A  6FBE               	movwf	scale@scl& (0+255),b
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;doprnt.c: 428: if(scl < 0) {
  2670  00140C  0100               	movlb	0	; () banked
  2671  00140E  AFBE               	btfss	scale@scl& (0+255),7,b
  2672  001410  D11C               	goto	l4726
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;doprnt.c: 429: scl = -scl;
  2676  001412  0100               	movlb	0	; () banked
  2677  001414  6DBE               	negf	scale@scl& (0+255),b
  2678                           
  2679                           ;doprnt.c: 430: if(scl>=110)
  2680  001416  0100               	movlb	0	; () banked
  2681  001418  51BE               	movf	scale@scl& (0+255),w,b
  2682  00141A  0A80               	xorlw	128
  2683  00141C  0F12               	addlw	-238
  2684  00141E  A0D8               	btfss	status,0,c
  2685  001420  D09D               	goto	l4716
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2689  001422  0E00               	movlw	0
  2690  001424  6E28               	movwf	___wmul@multiplicand+1,c
  2691  001426  0E03               	movlw	3
  2692  001428  6E27               	movwf	___wmul@multiplicand,c
  2693  00142A  0E00               	movlw	0
  2694  00142C  6E20               	movwf	___awdiv@divisor+1,c
  2695  00142E  0E0A               	movlw	10
  2696  001430  6E1F               	movwf	___awdiv@divisor,c
  2697  001432  0E00               	movlw	0
  2698  001434  6E1A               	movwf	___awmod@divisor+1,c
  2699  001436  0E64               	movlw	100
  2700  001438  6E19               	movwf	___awmod@divisor,c
  2701  00143A  0100               	movlb	0	; () banked
  2702  00143C  51BE               	movf	scale@scl& (0+255),w,b
  2703  00143E  6E17               	movwf	___awmod@dividend,c
  2704  001440  6A18               	clrf	___awmod@dividend+1,c
  2705  001442  BE17               	btfsc	___awmod@dividend,7,c
  2706  001444  0618               	decf	___awmod@dividend+1,f,c
  2707  001446  ECDF  F018         	call	___awmod	;wreg free
  2708  00144A  C017  F01D         	movff	?___awmod,___awdiv@dividend
  2709  00144E  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  2710  001452  EC44  F018         	call	___awdiv	;wreg free
  2711  001456  0E09               	movlw	9
  2712  001458  241D               	addwf	?___awdiv,w,c
  2713  00145A  6E25               	movwf	___wmul@multiplier,c
  2714  00145C  0E00               	movlw	0
  2715  00145E  201E               	addwfc	?___awdiv+1,w,c
  2716  001460  6E26               	movwf	___wmul@multiplier+1,c
  2717  001462  ECC6  F01B         	call	___wmul	;wreg free
  2718  001466  0E29               	movlw	low __npowers_
  2719  001468  2425               	addwf	?___wmul,w,c
  2720  00146A  6EF6               	movwf	tblptrl,c
  2721  00146C  0E06               	movlw	high __npowers_
  2722  00146E  2026               	addwfc	?___wmul+1,w,c
  2723  001470  6EF7               	movwf	tblptrh,c
  2724  001472                     	if	0	;There are less than 3 active tblptr bytes
  2725  001472                     	endif
  2726  001472  0009               	tblrd		*+
  2727  001474  0100               	movlb	0	; () banked
  2728  001476  CFF5 F0AF          	movff	tablat,___ftmul@f2
  2729  00147A  0009               	tblrd		*+
  2730  00147C  0100               	movlb	0	; () banked
  2731  00147E  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  2732  001482  000A               	tblrd		*-
  2733  001484  0100               	movlb	0	; () banked
  2734  001486  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  2735  00148A  0E00               	movlw	0
  2736  00148C  6E20               	movwf	___awdiv@divisor+1,c
  2737  00148E  0E64               	movlw	100
  2738  001490  6E1F               	movwf	___awdiv@divisor,c
  2739  001492  0100               	movlb	0	; () banked
  2740  001494  51BE               	movf	scale@scl& (0+255),w,b
  2741  001496  6E1D               	movwf	___awdiv@dividend,c
  2742  001498  6A1E               	clrf	___awdiv@dividend+1,c
  2743  00149A  BE1D               	btfsc	___awdiv@dividend,7,c
  2744  00149C  061E               	decf	___awdiv@dividend+1,f,c
  2745  00149E  EC44  F018         	call	___awdiv	;wreg free
  2746  0014A2  0E12               	movlw	18
  2747  0014A4  241D               	addwf	?___awdiv,w,c
  2748  0014A6  6E25               	movwf	___wmul@multiplier,c
  2749  0014A8  0E00               	movlw	0
  2750  0014AA  201E               	addwfc	?___awdiv+1,w,c
  2751  0014AC  6E26               	movwf	___wmul@multiplier+1,c
  2752  0014AE  0E00               	movlw	0
  2753  0014B0  6E28               	movwf	___wmul@multiplicand+1,c
  2754  0014B2  0E03               	movlw	3
  2755  0014B4  6E27               	movwf	___wmul@multiplicand,c
  2756  0014B6  ECC6  F01B         	call	___wmul	;wreg free
  2757  0014BA  0E29               	movlw	low __npowers_
  2758  0014BC  2425               	addwf	?___wmul,w,c
  2759  0014BE  6EF6               	movwf	tblptrl,c
  2760  0014C0  0E06               	movlw	high __npowers_
  2761  0014C2  2026               	addwfc	?___wmul+1,w,c
  2762  0014C4  6EF7               	movwf	tblptrh,c
  2763  0014C6                     	if	0	;There are less than 3 active tblptr bytes
  2764  0014C6                     	endif
  2765  0014C6  0009               	tblrd		*+
  2766  0014C8  0100               	movlb	0	; () banked
  2767  0014CA  CFF5 F0AC          	movff	tablat,___ftmul@f1
  2768  0014CE  0009               	tblrd		*+
  2769  0014D0  0100               	movlb	0	; () banked
  2770  0014D2  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  2771  0014D6  000A               	tblrd		*-
  2772  0014D8  0100               	movlb	0	; () banked
  2773  0014DA  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  2774  0014DE  ECBD  F012         	call	___ftmul	;wreg free
  2775  0014E2  C0AC  F0BB         	movff	?___ftmul,_scale$1704
  2776  0014E6  C0AD  F0BC         	movff	?___ftmul+1,_scale$1704+1
  2777  0014EA  C0AE  F0BD         	movff	?___ftmul+2,_scale$1704+2
  2778                           
  2779                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2780  0014EE  C0BB  F0AC         	movff	_scale$1704,___ftmul@f1
  2781  0014F2  C0BC  F0AD         	movff	_scale$1704+1,___ftmul@f1+1
  2782  0014F6  C0BD  F0AE         	movff	_scale$1704+2,___ftmul@f1+2
  2783  0014FA  0E00               	movlw	0
  2784  0014FC  6E28               	movwf	___wmul@multiplicand+1,c
  2785  0014FE  0E03               	movlw	3
  2786  001500  6E27               	movwf	___wmul@multiplicand,c
  2787  001502  0E00               	movlw	0
  2788  001504  6E1A               	movwf	___awmod@divisor+1,c
  2789  001506  0E0A               	movlw	10
  2790  001508  6E19               	movwf	___awmod@divisor,c
  2791  00150A  0100               	movlb	0	; () banked
  2792  00150C  51BE               	movf	scale@scl& (0+255),w,b
  2793  00150E  6E17               	movwf	___awmod@dividend,c
  2794  001510  6A18               	clrf	___awmod@dividend+1,c
  2795  001512  BE17               	btfsc	___awmod@dividend,7,c
  2796  001514  0618               	decf	___awmod@dividend+1,f,c
  2797  001516  ECDF  F018         	call	___awmod	;wreg free
  2798  00151A  C017  F025         	movff	?___awmod,___wmul@multiplier
  2799  00151E  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  2800  001522  ECC6  F01B         	call	___wmul	;wreg free
  2801  001526  0E29               	movlw	low __npowers_
  2802  001528  2425               	addwf	?___wmul,w,c
  2803  00152A  6EF6               	movwf	tblptrl,c
  2804  00152C  0E06               	movlw	high __npowers_
  2805  00152E  2026               	addwfc	?___wmul+1,w,c
  2806  001530  6EF7               	movwf	tblptrh,c
  2807  001532                     	if	0	;There are less than 3 active tblptr bytes
  2808  001532                     	endif
  2809  001532  0009               	tblrd		*+
  2810  001534  0100               	movlb	0	; () banked
  2811  001536  CFF5 F0AF          	movff	tablat,___ftmul@f2
  2812  00153A  0009               	tblrd		*+
  2813  00153C  0100               	movlb	0	; () banked
  2814  00153E  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  2815  001542  000A               	tblrd		*-
  2816  001544  0100               	movlb	0	; () banked
  2817  001546  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  2818  00154A  ECBD  F012         	call	___ftmul	;wreg free
  2819  00154E  C0AC  F0B8         	movff	?___ftmul,?_scale
  2820  001552  C0AD  F0B9         	movff	?___ftmul+1,?_scale+1
  2821  001556  C0AE  F0BA         	movff	?___ftmul+2,?_scale+2
  2822  00155A  0012               	return	
  2823  00155C                     l4716:
  2824                           
  2825                           ;doprnt.c: 432: else if(scl > 10)
  2826  00155C  0100               	movlb	0	; () banked
  2827  00155E  51BE               	movf	scale@scl& (0+255),w,b
  2828  001560  0A80               	xorlw	128
  2829  001562  0F75               	addlw	-139
  2830  001564  A0D8               	btfss	status,0,c
  2831  001566  D05B               	goto	l4722
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2835  001568  0E00               	movlw	0
  2836  00156A  6E20               	movwf	___awdiv@divisor+1,c
  2837  00156C  0E0A               	movlw	10
  2838  00156E  6E1F               	movwf	___awdiv@divisor,c
  2839  001570  0100               	movlb	0	; () banked
  2840  001572  51BE               	movf	scale@scl& (0+255),w,b
  2841  001574  6E1D               	movwf	___awdiv@dividend,c
  2842  001576  6A1E               	clrf	___awdiv@dividend+1,c
  2843  001578  BE1D               	btfsc	___awdiv@dividend,7,c
  2844  00157A  061E               	decf	___awdiv@dividend+1,f,c
  2845  00157C  EC44  F018         	call	___awdiv	;wreg free
  2846  001580  0E09               	movlw	9
  2847  001582  241D               	addwf	?___awdiv,w,c
  2848  001584  6E25               	movwf	___wmul@multiplier,c
  2849  001586  0E00               	movlw	0
  2850  001588  201E               	addwfc	?___awdiv+1,w,c
  2851  00158A  6E26               	movwf	___wmul@multiplier+1,c
  2852  00158C  0E00               	movlw	0
  2853  00158E  6E28               	movwf	___wmul@multiplicand+1,c
  2854  001590  0E03               	movlw	3
  2855  001592  6E27               	movwf	___wmul@multiplicand,c
  2856  001594  ECC6  F01B         	call	___wmul	;wreg free
  2857  001598  0E29               	movlw	low __npowers_
  2858  00159A  2425               	addwf	?___wmul,w,c
  2859  00159C  6EF6               	movwf	tblptrl,c
  2860  00159E  0E06               	movlw	high __npowers_
  2861  0015A0  2026               	addwfc	?___wmul+1,w,c
  2862  0015A2  6EF7               	movwf	tblptrh,c
  2863  0015A4                     	if	0	;There are less than 3 active tblptr bytes
  2864  0015A4                     	endif
  2865  0015A4  0009               	tblrd		*+
  2866  0015A6  0100               	movlb	0	; () banked
  2867  0015A8  CFF5 F0AC          	movff	tablat,___ftmul@f1
  2868  0015AC  0009               	tblrd		*+
  2869  0015AE  0100               	movlb	0	; () banked
  2870  0015B0  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  2871  0015B4  000A               	tblrd		*-
  2872  0015B6  0100               	movlb	0	; () banked
  2873  0015B8  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  2874  0015BC  0E00               	movlw	0
  2875  0015BE  6E28               	movwf	___wmul@multiplicand+1,c
  2876  0015C0  0E03               	movlw	3
  2877  0015C2  6E27               	movwf	___wmul@multiplicand,c
  2878  0015C4  0E00               	movlw	0
  2879  0015C6  6E1A               	movwf	___awmod@divisor+1,c
  2880  0015C8  0E0A               	movlw	10
  2881  0015CA  6E19               	movwf	___awmod@divisor,c
  2882  0015CC  0100               	movlb	0	; () banked
  2883  0015CE  51BE               	movf	scale@scl& (0+255),w,b
  2884  0015D0  6E17               	movwf	___awmod@dividend,c
  2885  0015D2  6A18               	clrf	___awmod@dividend+1,c
  2886  0015D4  BE17               	btfsc	___awmod@dividend,7,c
  2887  0015D6  0618               	decf	___awmod@dividend+1,f,c
  2888  0015D8  ECDF  F018         	call	___awmod	;wreg free
  2889  0015DC  C017  F025         	movff	?___awmod,___wmul@multiplier
  2890  0015E0  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  2891  0015E4  ECC6  F01B         	call	___wmul	;wreg free
  2892  0015E8  0E29               	movlw	low __npowers_
  2893  0015EA  2425               	addwf	?___wmul,w,c
  2894  0015EC  6EF6               	movwf	tblptrl,c
  2895  0015EE  0E06               	movlw	high __npowers_
  2896  0015F0  2026               	addwfc	?___wmul+1,w,c
  2897  0015F2  6EF7               	movwf	tblptrh,c
  2898  0015F4                     	if	0	;There are less than 3 active tblptr bytes
  2899  0015F4                     	endif
  2900  0015F4  0009               	tblrd		*+
  2901  0015F6  0100               	movlb	0	; () banked
  2902  0015F8  CFF5 F0AF          	movff	tablat,___ftmul@f2
  2903  0015FC  0009               	tblrd		*+
  2904  0015FE  0100               	movlb	0	; () banked
  2905  001600  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  2906  001604  000A               	tblrd		*-
  2907  001606  0100               	movlb	0	; () banked
  2908  001608  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  2909  00160C  ECBD  F012         	call	___ftmul	;wreg free
  2910  001610  C0AC  F0B8         	movff	?___ftmul,?_scale
  2911  001614  C0AD  F0B9         	movff	?___ftmul+1,?_scale+1
  2912  001618  C0AE  F0BA         	movff	?___ftmul+2,?_scale+2
  2913  00161C  0012               	return	
  2914  00161E                     l4722:
  2915                           
  2916                           ;doprnt.c: 434: return _npowers_[scl];
  2917  00161E  0100               	movlb	0	; () banked
  2918  001620  51BE               	movf	scale@scl& (0+255),w,b
  2919  001622  0D03               	mullw	3
  2920  001624  0E29               	movlw	low __npowers_
  2921  001626  24F3               	addwf	prodl,w,c
  2922  001628  6EF6               	movwf	tblptrl,c
  2923  00162A  0E06               	movlw	high __npowers_
  2924  00162C  20F4               	addwfc	prodh,w,c
  2925  00162E  6EF7               	movwf	tblptrh,c
  2926  001630                     	if	0	;There are less than 3 active tblptr bytes
  2927  001630                     	endif
  2928  001630  0009               	tblrd		*+
  2929  001632  0100               	movlb	0	; () banked
  2930  001634  CFF5 F0B8          	movff	tablat,?_scale
  2931  001638  0009               	tblrd		*+
  2932  00163A  0100               	movlb	0	; () banked
  2933  00163C  CFF5 F0B9          	movff	tablat,?_scale+1
  2934  001640  000A               	tblrd		*-
  2935  001642  0100               	movlb	0	; () banked
  2936  001644  CFF5 F0BA          	movff	tablat,?_scale+2
  2937  001648  0012               	return	
  2938  00164A                     l4726:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;doprnt.c: 435: }
  2942                           ;doprnt.c: 436: if(scl>=110)
  2943  00164A  0100               	movlb	0	; () banked
  2944  00164C  51BE               	movf	scale@scl& (0+255),w,b
  2945  00164E  0A80               	xorlw	128
  2946  001650  0F12               	addlw	-238
  2947  001652  A0D8               	btfss	status,0,c
  2948  001654  D09D               	goto	l4734
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2952  001656  0E00               	movlw	0
  2953  001658  6E28               	movwf	___wmul@multiplicand+1,c
  2954  00165A  0E03               	movlw	3
  2955  00165C  6E27               	movwf	___wmul@multiplicand,c
  2956  00165E  0E00               	movlw	0
  2957  001660  6E20               	movwf	___awdiv@divisor+1,c
  2958  001662  0E0A               	movlw	10
  2959  001664  6E1F               	movwf	___awdiv@divisor,c
  2960  001666  0E00               	movlw	0
  2961  001668  6E1A               	movwf	___awmod@divisor+1,c
  2962  00166A  0E64               	movlw	100
  2963  00166C  6E19               	movwf	___awmod@divisor,c
  2964  00166E  0100               	movlb	0	; () banked
  2965  001670  51BE               	movf	scale@scl& (0+255),w,b
  2966  001672  6E17               	movwf	___awmod@dividend,c
  2967  001674  6A18               	clrf	___awmod@dividend+1,c
  2968  001676  BE17               	btfsc	___awmod@dividend,7,c
  2969  001678  0618               	decf	___awmod@dividend+1,f,c
  2970  00167A  ECDF  F018         	call	___awmod	;wreg free
  2971  00167E  C017  F01D         	movff	?___awmod,___awdiv@dividend
  2972  001682  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  2973  001686  EC44  F018         	call	___awdiv	;wreg free
  2974  00168A  0E09               	movlw	9
  2975  00168C  241D               	addwf	?___awdiv,w,c
  2976  00168E  6E25               	movwf	___wmul@multiplier,c
  2977  001690  0E00               	movlw	0
  2978  001692  201E               	addwfc	?___awdiv+1,w,c
  2979  001694  6E26               	movwf	___wmul@multiplier+1,c
  2980  001696  ECC6  F01B         	call	___wmul	;wreg free
  2981  00169A  0E50               	movlw	low __powers_
  2982  00169C  2425               	addwf	?___wmul,w,c
  2983  00169E  6EF6               	movwf	tblptrl,c
  2984  0016A0  0E06               	movlw	high __powers_
  2985  0016A2  2026               	addwfc	?___wmul+1,w,c
  2986  0016A4  6EF7               	movwf	tblptrh,c
  2987  0016A6                     	if	0	;There are less than 3 active tblptr bytes
  2988  0016A6                     	endif
  2989  0016A6  0009               	tblrd		*+
  2990  0016A8  0100               	movlb	0	; () banked
  2991  0016AA  CFF5 F0AF          	movff	tablat,___ftmul@f2
  2992  0016AE  0009               	tblrd		*+
  2993  0016B0  0100               	movlb	0	; () banked
  2994  0016B2  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  2995  0016B6  000A               	tblrd		*-
  2996  0016B8  0100               	movlb	0	; () banked
  2997  0016BA  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  2998  0016BE  0E00               	movlw	0
  2999  0016C0  6E20               	movwf	___awdiv@divisor+1,c
  3000  0016C2  0E64               	movlw	100
  3001  0016C4  6E1F               	movwf	___awdiv@divisor,c
  3002  0016C6  0100               	movlb	0	; () banked
  3003  0016C8  51BE               	movf	scale@scl& (0+255),w,b
  3004  0016CA  6E1D               	movwf	___awdiv@dividend,c
  3005  0016CC  6A1E               	clrf	___awdiv@dividend+1,c
  3006  0016CE  BE1D               	btfsc	___awdiv@dividend,7,c
  3007  0016D0  061E               	decf	___awdiv@dividend+1,f,c
  3008  0016D2  EC44  F018         	call	___awdiv	;wreg free
  3009  0016D6  0E12               	movlw	18
  3010  0016D8  241D               	addwf	?___awdiv,w,c
  3011  0016DA  6E25               	movwf	___wmul@multiplier,c
  3012  0016DC  0E00               	movlw	0
  3013  0016DE  201E               	addwfc	?___awdiv+1,w,c
  3014  0016E0  6E26               	movwf	___wmul@multiplier+1,c
  3015  0016E2  0E00               	movlw	0
  3016  0016E4  6E28               	movwf	___wmul@multiplicand+1,c
  3017  0016E6  0E03               	movlw	3
  3018  0016E8  6E27               	movwf	___wmul@multiplicand,c
  3019  0016EA  ECC6  F01B         	call	___wmul	;wreg free
  3020  0016EE  0E50               	movlw	low __powers_
  3021  0016F0  2425               	addwf	?___wmul,w,c
  3022  0016F2  6EF6               	movwf	tblptrl,c
  3023  0016F4  0E06               	movlw	high __powers_
  3024  0016F6  2026               	addwfc	?___wmul+1,w,c
  3025  0016F8  6EF7               	movwf	tblptrh,c
  3026  0016FA                     	if	0	;There are less than 3 active tblptr bytes
  3027  0016FA                     	endif
  3028  0016FA  0009               	tblrd		*+
  3029  0016FC  0100               	movlb	0	; () banked
  3030  0016FE  CFF5 F0AC          	movff	tablat,___ftmul@f1
  3031  001702  0009               	tblrd		*+
  3032  001704  0100               	movlb	0	; () banked
  3033  001706  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  3034  00170A  000A               	tblrd		*-
  3035  00170C  0100               	movlb	0	; () banked
  3036  00170E  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  3037  001712  ECBD  F012         	call	___ftmul	;wreg free
  3038  001716  C0AC  F0BB         	movff	?___ftmul,_scale$1704
  3039  00171A  C0AD  F0BC         	movff	?___ftmul+1,_scale$1704+1
  3040  00171E  C0AE  F0BD         	movff	?___ftmul+2,_scale$1704+2
  3041                           
  3042                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3043  001722  C0BB  F0AC         	movff	_scale$1704,___ftmul@f1
  3044  001726  C0BC  F0AD         	movff	_scale$1704+1,___ftmul@f1+1
  3045  00172A  C0BD  F0AE         	movff	_scale$1704+2,___ftmul@f1+2
  3046  00172E  0E00               	movlw	0
  3047  001730  6E28               	movwf	___wmul@multiplicand+1,c
  3048  001732  0E03               	movlw	3
  3049  001734  6E27               	movwf	___wmul@multiplicand,c
  3050  001736  0E00               	movlw	0
  3051  001738  6E1A               	movwf	___awmod@divisor+1,c
  3052  00173A  0E0A               	movlw	10
  3053  00173C  6E19               	movwf	___awmod@divisor,c
  3054  00173E  0100               	movlb	0	; () banked
  3055  001740  51BE               	movf	scale@scl& (0+255),w,b
  3056  001742  6E17               	movwf	___awmod@dividend,c
  3057  001744  6A18               	clrf	___awmod@dividend+1,c
  3058  001746  BE17               	btfsc	___awmod@dividend,7,c
  3059  001748  0618               	decf	___awmod@dividend+1,f,c
  3060  00174A  ECDF  F018         	call	___awmod	;wreg free
  3061  00174E  C017  F025         	movff	?___awmod,___wmul@multiplier
  3062  001752  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3063  001756  ECC6  F01B         	call	___wmul	;wreg free
  3064  00175A  0E50               	movlw	low __powers_
  3065  00175C  2425               	addwf	?___wmul,w,c
  3066  00175E  6EF6               	movwf	tblptrl,c
  3067  001760  0E06               	movlw	high __powers_
  3068  001762  2026               	addwfc	?___wmul+1,w,c
  3069  001764  6EF7               	movwf	tblptrh,c
  3070  001766                     	if	0	;There are less than 3 active tblptr bytes
  3071  001766                     	endif
  3072  001766  0009               	tblrd		*+
  3073  001768  0100               	movlb	0	; () banked
  3074  00176A  CFF5 F0AF          	movff	tablat,___ftmul@f2
  3075  00176E  0009               	tblrd		*+
  3076  001770  0100               	movlb	0	; () banked
  3077  001772  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  3078  001776  000A               	tblrd		*-
  3079  001778  0100               	movlb	0	; () banked
  3080  00177A  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  3081  00177E  ECBD  F012         	call	___ftmul	;wreg free
  3082  001782  C0AC  F0B8         	movff	?___ftmul,?_scale
  3083  001786  C0AD  F0B9         	movff	?___ftmul+1,?_scale+1
  3084  00178A  C0AE  F0BA         	movff	?___ftmul+2,?_scale+2
  3085  00178E  0012               	return	
  3086  001790                     l4734:
  3087                           
  3088                           ;doprnt.c: 438: else if(scl > 10)
  3089  001790  0100               	movlb	0	; () banked
  3090  001792  51BE               	movf	scale@scl& (0+255),w,b
  3091  001794  0A80               	xorlw	128
  3092  001796  0F75               	addlw	-139
  3093  001798  A0D8               	btfss	status,0,c
  3094  00179A  D05B               	goto	l4740
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3098  00179C  0E00               	movlw	0
  3099  00179E  6E20               	movwf	___awdiv@divisor+1,c
  3100  0017A0  0E0A               	movlw	10
  3101  0017A2  6E1F               	movwf	___awdiv@divisor,c
  3102  0017A4  0100               	movlb	0	; () banked
  3103  0017A6  51BE               	movf	scale@scl& (0+255),w,b
  3104  0017A8  6E1D               	movwf	___awdiv@dividend,c
  3105  0017AA  6A1E               	clrf	___awdiv@dividend+1,c
  3106  0017AC  BE1D               	btfsc	___awdiv@dividend,7,c
  3107  0017AE  061E               	decf	___awdiv@dividend+1,f,c
  3108  0017B0  EC44  F018         	call	___awdiv	;wreg free
  3109  0017B4  0E09               	movlw	9
  3110  0017B6  241D               	addwf	?___awdiv,w,c
  3111  0017B8  6E25               	movwf	___wmul@multiplier,c
  3112  0017BA  0E00               	movlw	0
  3113  0017BC  201E               	addwfc	?___awdiv+1,w,c
  3114  0017BE  6E26               	movwf	___wmul@multiplier+1,c
  3115  0017C0  0E00               	movlw	0
  3116  0017C2  6E28               	movwf	___wmul@multiplicand+1,c
  3117  0017C4  0E03               	movlw	3
  3118  0017C6  6E27               	movwf	___wmul@multiplicand,c
  3119  0017C8  ECC6  F01B         	call	___wmul	;wreg free
  3120  0017CC  0E50               	movlw	low __powers_
  3121  0017CE  2425               	addwf	?___wmul,w,c
  3122  0017D0  6EF6               	movwf	tblptrl,c
  3123  0017D2  0E06               	movlw	high __powers_
  3124  0017D4  2026               	addwfc	?___wmul+1,w,c
  3125  0017D6  6EF7               	movwf	tblptrh,c
  3126  0017D8                     	if	0	;There are less than 3 active tblptr bytes
  3127  0017D8                     	endif
  3128  0017D8  0009               	tblrd		*+
  3129  0017DA  0100               	movlb	0	; () banked
  3130  0017DC  CFF5 F0AC          	movff	tablat,___ftmul@f1
  3131  0017E0  0009               	tblrd		*+
  3132  0017E2  0100               	movlb	0	; () banked
  3133  0017E4  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  3134  0017E8  000A               	tblrd		*-
  3135  0017EA  0100               	movlb	0	; () banked
  3136  0017EC  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  3137  0017F0  0E00               	movlw	0
  3138  0017F2  6E28               	movwf	___wmul@multiplicand+1,c
  3139  0017F4  0E03               	movlw	3
  3140  0017F6  6E27               	movwf	___wmul@multiplicand,c
  3141  0017F8  0E00               	movlw	0
  3142  0017FA  6E1A               	movwf	___awmod@divisor+1,c
  3143  0017FC  0E0A               	movlw	10
  3144  0017FE  6E19               	movwf	___awmod@divisor,c
  3145  001800  0100               	movlb	0	; () banked
  3146  001802  51BE               	movf	scale@scl& (0+255),w,b
  3147  001804  6E17               	movwf	___awmod@dividend,c
  3148  001806  6A18               	clrf	___awmod@dividend+1,c
  3149  001808  BE17               	btfsc	___awmod@dividend,7,c
  3150  00180A  0618               	decf	___awmod@dividend+1,f,c
  3151  00180C  ECDF  F018         	call	___awmod	;wreg free
  3152  001810  C017  F025         	movff	?___awmod,___wmul@multiplier
  3153  001814  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3154  001818  ECC6  F01B         	call	___wmul	;wreg free
  3155  00181C  0E50               	movlw	low __powers_
  3156  00181E  2425               	addwf	?___wmul,w,c
  3157  001820  6EF6               	movwf	tblptrl,c
  3158  001822  0E06               	movlw	high __powers_
  3159  001824  2026               	addwfc	?___wmul+1,w,c
  3160  001826  6EF7               	movwf	tblptrh,c
  3161  001828                     	if	0	;There are less than 3 active tblptr bytes
  3162  001828                     	endif
  3163  001828  0009               	tblrd		*+
  3164  00182A  0100               	movlb	0	; () banked
  3165  00182C  CFF5 F0AF          	movff	tablat,___ftmul@f2
  3166  001830  0009               	tblrd		*+
  3167  001832  0100               	movlb	0	; () banked
  3168  001834  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  3169  001838  000A               	tblrd		*-
  3170  00183A  0100               	movlb	0	; () banked
  3171  00183C  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  3172  001840  ECBD  F012         	call	___ftmul	;wreg free
  3173  001844  C0AC  F0B8         	movff	?___ftmul,?_scale
  3174  001848  C0AD  F0B9         	movff	?___ftmul+1,?_scale+1
  3175  00184C  C0AE  F0BA         	movff	?___ftmul+2,?_scale+2
  3176  001850  0012               	return	
  3177  001852                     l4740:
  3178                           
  3179                           ;doprnt.c: 440: return _powers_[scl];
  3180  001852  0100               	movlb	0	; () banked
  3181  001854  51BE               	movf	scale@scl& (0+255),w,b
  3182  001856  0D03               	mullw	3
  3183  001858  0E50               	movlw	low __powers_
  3184  00185A  24F3               	addwf	prodl,w,c
  3185  00185C  6EF6               	movwf	tblptrl,c
  3186  00185E  0E06               	movlw	high __powers_
  3187  001860  20F4               	addwfc	prodh,w,c
  3188  001862  6EF7               	movwf	tblptrh,c
  3189  001864                     	if	0	;There are less than 3 active tblptr bytes
  3190  001864                     	endif
  3191  001864  0009               	tblrd		*+
  3192  001866  0100               	movlb	0	; () banked
  3193  001868  CFF5 F0B8          	movff	tablat,?_scale
  3194  00186C  0009               	tblrd		*+
  3195  00186E  0100               	movlb	0	; () banked
  3196  001870  CFF5 F0B9          	movff	tablat,?_scale+1
  3197  001874  000A               	tblrd		*-
  3198  001876  0100               	movlb	0	; () banked
  3199  001878  CFF5 F0BA          	movff	tablat,?_scale+2
  3200  00187C  0012               	return	
  3201  00187E                     __end_of_scale:
  3202                           	opt stack 0
  3203                           tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           prodh	equ	0xFF4
  3208                           prodl	equ	0xFF3
  3209                           intcon	equ	0xFF2
  3210                           postinc0	equ	0xFEE
  3211                           wreg	equ	0xFE8
  3212                           postinc2	equ	0xFDE
  3213                           postdec2	equ	0xFDD
  3214                           fsr2h	equ	0xFDA
  3215                           fsr2l	equ	0xFD9
  3216                           status	equ	0xFD8
  3217                           
  3218 ;; *************** function _putch *****************
  3219 ;; Defined at:
  3220 ;;		line 168 in file "mcc_generated_files/eusart1.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  txData          1    wreg     unsigned char 
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  txData          1   23[COMRAM] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;		None               void
  3227 ;; Registers used:
  3228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3234 ;;      Params:         0       0       0       0       0       0       0
  3235 ;;      Locals:         1       0       0       0       0       0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0
  3237 ;;      Totals:         1       0       0       0       0       0       0
  3238 ;;Total ram usage:        1 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    5
  3241 ;; This function calls:
  3242 ;;		_EUSART1_Write
  3243 ;; This function is called by:
  3244 ;;		_printf
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text3
  3249  00387E                     __ptext3:
  3250                           	opt stack 0
  3251  00387E                     _putch:
  3252                           	opt stack 24
  3253                           
  3254                           ;incstack = 0
  3255                           ;putch@txData stored from wreg
  3256  00387E  6E18               	movwf	putch@txData,c
  3257                           
  3258                           ;eusart1.c: 170: EUSART1_Write(txData);
  3259  003880  5018               	movf	putch@txData,w,c
  3260  003882  EC1F  F01B         	call	_EUSART1_Write
  3261  003886  0012               	return	
  3262  003888                     __end_of_putch:
  3263                           	opt stack 0
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           intcon	equ	0xFF2
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           postinc2	equ	0xFDE
  3274                           postdec2	equ	0xFDD
  3275                           fsr2h	equ	0xFDA
  3276                           fsr2l	equ	0xFD9
  3277                           status	equ	0xFD8
  3278                           
  3279 ;; *************** function _EUSART1_Write *****************
  3280 ;; Defined at:
  3281 ;;		line 140 in file "mcc_generated_files/eusart1.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  txData          1    wreg     unsigned char 
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;  txData          1   22[COMRAM] unsigned char 
  3286 ;; Return value:  Size  Location     Type
  3287 ;;		None               void
  3288 ;; Registers used:
  3289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3295 ;;      Params:         0       0       0       0       0       0       0
  3296 ;;      Locals:         1       0       0       0       0       0       0
  3297 ;;      Temps:          0       0       0       0       0       0       0
  3298 ;;      Totals:         1       0       0       0       0       0       0
  3299 ;;Total ram usage:        1 bytes
  3300 ;; Hardware stack levels used:    1
  3301 ;; Hardware stack levels required when called:    4
  3302 ;; This function calls:
  3303 ;;		Nothing
  3304 ;; This function is called by:
  3305 ;;		_putch
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           	psect	text4
  3310  00363E                     __ptext4:
  3311                           	opt stack 0
  3312  00363E                     _EUSART1_Write:
  3313                           	opt stack 24
  3314                           
  3315                           ;incstack = 0
  3316                           ;EUSART1_Write@txData stored from wreg
  3317  00363E  6E17               	movwf	EUSART1_Write@txData,c
  3318  003640                     l4464:
  3319  003640  5049               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  3320  003642  B4D8               	btfsc	status,2,c
  3321  003644  D7FD               	goto	l4464
  3322                           
  3323                           ;eusart1.c: 144: }
  3324                           ;eusart1.c: 146: if(0 == PIE1bits.TX1IE)
  3325  003646  B89D               	btfsc	3997,4,c	;volatile
  3326  003648  D003               	goto	l122
  3327                           
  3328                           ;eusart1.c: 147: {
  3329                           ;eusart1.c: 148: TX1REG = txData;
  3330  00364A  C017  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  3331                           
  3332                           ;eusart1.c: 149: }
  3333  00364E  D012               	goto	l4478
  3334  003650                     l122:
  3335                           
  3336                           ;eusart1.c: 150: else
  3337                           ;eusart1.c: 151: {
  3338                           ;eusart1.c: 152: PIE1bits.TX1IE = 0;
  3339  003650  989D               	bcf	3997,4,c	;volatile
  3340                           
  3341                           ;eusart1.c: 153: eusart1TxBuffer[eusart1TxHead++] = txData;
  3342  003652  5045               	movf	_eusart1TxHead,w,c
  3343  003654  0D01               	mullw	1
  3344  003656  0E34               	movlw	low _eusart1TxBuffer
  3345  003658  24F3               	addwf	prodl,w,c
  3346  00365A  6ED9               	movwf	fsr2l,c
  3347  00365C  0E00               	movlw	high _eusart1TxBuffer
  3348  00365E  20F4               	addwfc	prodh,w,c
  3349  003660  6EDA               	movwf	fsr2h,c
  3350  003662  C017  FFDF         	movff	EUSART1_Write@txData,indf2
  3351  003666  2A45               	incf	_eusart1TxHead,f,c
  3352                           
  3353                           ;eusart1.c: 154: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  3354  003668  0E07               	movlw	7
  3355  00366A  6445               	cpfsgt	_eusart1TxHead,c
  3356  00366C  D002               	goto	l4476
  3357                           
  3358                           ;eusart1.c: 155: {
  3359                           ;eusart1.c: 156: eusart1TxHead = 0;
  3360  00366E  0E00               	movlw	0
  3361  003670  6E45               	movwf	_eusart1TxHead,c
  3362  003672                     l4476:
  3363                           
  3364                           ;eusart1.c: 157: }
  3365                           ;eusart1.c: 158: eusart1TxBufferRemaining--;
  3366  003672  0649               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  3367  003674                     l4478:
  3368                           
  3369                           ;eusart1.c: 159: }
  3370                           ;eusart1.c: 160: PIE1bits.TX1IE = 1;
  3371  003674  889D               	bsf	3997,4,c	;volatile
  3372  003676  0012               	return	
  3373  003678                     __end_of_EUSART1_Write:
  3374                           	opt stack 0
  3375                           tblptru	equ	0xFF8
  3376                           tblptrh	equ	0xFF7
  3377                           tblptrl	equ	0xFF6
  3378                           tablat	equ	0xFF5
  3379                           prodh	equ	0xFF4
  3380                           prodl	equ	0xFF3
  3381                           intcon	equ	0xFF2
  3382                           postinc0	equ	0xFEE
  3383                           wreg	equ	0xFE8
  3384                           indf2	equ	0xFDF
  3385                           postinc2	equ	0xFDE
  3386                           postdec2	equ	0xFDD
  3387                           fsr2h	equ	0xFDA
  3388                           fsr2l	equ	0xFD9
  3389                           status	equ	0xFD8
  3390                           
  3391 ;; *************** function _fround *****************
  3392 ;; Defined at:
  3393 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  prec            1    wreg     unsigned char 
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;  prec            1   21[BANK0 ] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  3   12[BANK0 ] unsigned char 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3407 ;;      Params:         0       3       0       0       0       0       0
  3408 ;;      Locals:         0       7       0       0       0       0       0
  3409 ;;      Temps:          0       0       0       0       0       0       0
  3410 ;;      Totals:         0      10       0       0       0       0       0
  3411 ;;Total ram usage:       10 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    6
  3414 ;; This function calls:
  3415 ;;		___awdiv
  3416 ;;		___awmod
  3417 ;;		___ftmul
  3418 ;;		___wmul
  3419 ;; This function is called by:
  3420 ;;		_printf
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text5
  3425  00187E                     __ptext5:
  3426                           	opt stack 0
  3427  00187E                     _fround:
  3428                           	opt stack 23
  3429                           
  3430                           ;incstack = 0
  3431                           ;fround@prec stored from wreg
  3432  00187E  0100               	movlb	0	; () banked
  3433  001880  6FC1               	movwf	fround@prec& (0+255),b
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;doprnt.c: 413: if(prec>=110)
  3437  001882  0E6D               	movlw	109
  3438  001884  0100               	movlb	0	; () banked
  3439  001886  65C1               	cpfsgt	fround@prec& (0+255),b
  3440  001888  D0AE               	goto	l4694
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3444  00188A  0E00               	movlw	0
  3445  00188C  6E28               	movwf	___wmul@multiplicand+1,c
  3446  00188E  0E03               	movlw	3
  3447  001890  6E27               	movwf	___wmul@multiplicand,c
  3448  001892  0E00               	movlw	0
  3449  001894  6E20               	movwf	___awdiv@divisor+1,c
  3450  001896  0E0A               	movlw	10
  3451  001898  6E1F               	movwf	___awdiv@divisor,c
  3452  00189A  0E00               	movlw	0
  3453  00189C  6E1A               	movwf	___awmod@divisor+1,c
  3454  00189E  0E64               	movlw	100
  3455  0018A0  6E19               	movwf	___awmod@divisor,c
  3456  0018A2  0100               	movlb	0	; () banked
  3457  0018A4  C0C1  F017         	movff	fround@prec,___awmod@dividend
  3458  0018A8  6A18               	clrf	___awmod@dividend+1,c
  3459  0018AA  ECDF  F018         	call	___awmod	;wreg free
  3460  0018AE  C017  F01D         	movff	?___awmod,___awdiv@dividend
  3461  0018B2  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  3462  0018B6  EC44  F018         	call	___awdiv	;wreg free
  3463  0018BA  0E09               	movlw	9
  3464  0018BC  241D               	addwf	?___awdiv,w,c
  3465  0018BE  6E25               	movwf	___wmul@multiplier,c
  3466  0018C0  0E00               	movlw	0
  3467  0018C2  201E               	addwfc	?___awdiv+1,w,c
  3468  0018C4  6E26               	movwf	___wmul@multiplier+1,c
  3469  0018C6  ECC6  F01B         	call	___wmul	;wreg free
  3470  0018CA  0E29               	movlw	low __npowers_
  3471  0018CC  2425               	addwf	?___wmul,w,c
  3472  0018CE  6EF6               	movwf	tblptrl,c
  3473  0018D0  0E06               	movlw	high __npowers_
  3474  0018D2  2026               	addwfc	?___wmul+1,w,c
  3475  0018D4  6EF7               	movwf	tblptrh,c
  3476  0018D6                     	if	0	;There are less than 3 active tblptr bytes
  3477  0018D6                     	endif
  3478  0018D6  0009               	tblrd		*+
  3479  0018D8  0100               	movlb	0	; () banked
  3480  0018DA  CFF5 F0AF          	movff	tablat,___ftmul@f2
  3481  0018DE  0009               	tblrd		*+
  3482  0018E0  0100               	movlb	0	; () banked
  3483  0018E2  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  3484  0018E6  000A               	tblrd		*-
  3485  0018E8  0100               	movlb	0	; () banked
  3486  0018EA  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  3487  0018EE  0E00               	movlw	0
  3488  0018F0  6E20               	movwf	___awdiv@divisor+1,c
  3489  0018F2  0E64               	movlw	100
  3490  0018F4  6E1F               	movwf	___awdiv@divisor,c
  3491  0018F6  0100               	movlb	0	; () banked
  3492  0018F8  C0C1  F01D         	movff	fround@prec,___awdiv@dividend
  3493  0018FC  6A1E               	clrf	___awdiv@dividend+1,c
  3494  0018FE  EC44  F018         	call	___awdiv	;wreg free
  3495  001902  0E12               	movlw	18
  3496  001904  241D               	addwf	?___awdiv,w,c
  3497  001906  6E25               	movwf	___wmul@multiplier,c
  3498  001908  0E00               	movlw	0
  3499  00190A  201E               	addwfc	?___awdiv+1,w,c
  3500  00190C  6E26               	movwf	___wmul@multiplier+1,c
  3501  00190E  0E00               	movlw	0
  3502  001910  6E28               	movwf	___wmul@multiplicand+1,c
  3503  001912  0E03               	movlw	3
  3504  001914  6E27               	movwf	___wmul@multiplicand,c
  3505  001916  ECC6  F01B         	call	___wmul	;wreg free
  3506  00191A  0E29               	movlw	low __npowers_
  3507  00191C  2425               	addwf	?___wmul,w,c
  3508  00191E  6EF6               	movwf	tblptrl,c
  3509  001920  0E06               	movlw	high __npowers_
  3510  001922  2026               	addwfc	?___wmul+1,w,c
  3511  001924  6EF7               	movwf	tblptrh,c
  3512  001926                     	if	0	;There are less than 3 active tblptr bytes
  3513  001926                     	endif
  3514  001926  0009               	tblrd		*+
  3515  001928  0100               	movlb	0	; () banked
  3516  00192A  CFF5 F0AC          	movff	tablat,___ftmul@f1
  3517  00192E  0009               	tblrd		*+
  3518  001930  0100               	movlb	0	; () banked
  3519  001932  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  3520  001936  000A               	tblrd		*-
  3521  001938  0100               	movlb	0	; () banked
  3522  00193A  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  3523  00193E  ECBD  F012         	call	___ftmul	;wreg free
  3524  001942  C0AC  F0BE         	movff	?___ftmul,_fround$1702
  3525  001946  C0AD  F0BF         	movff	?___ftmul+1,_fround$1702+1
  3526  00194A  C0AE  F0C0         	movff	?___ftmul+2,_fround$1702+2
  3527                           
  3528                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3529  00194E  0E00               	movlw	0
  3530  001950  6E28               	movwf	___wmul@multiplicand+1,c
  3531  001952  0E03               	movlw	3
  3532  001954  6E27               	movwf	___wmul@multiplicand,c
  3533  001956  0E00               	movlw	0
  3534  001958  6E1A               	movwf	___awmod@divisor+1,c
  3535  00195A  0E0A               	movlw	10
  3536  00195C  6E19               	movwf	___awmod@divisor,c
  3537  00195E  0100               	movlb	0	; () banked
  3538  001960  C0C1  F017         	movff	fround@prec,___awmod@dividend
  3539  001964  6A18               	clrf	___awmod@dividend+1,c
  3540  001966  ECDF  F018         	call	___awmod	;wreg free
  3541  00196A  C017  F025         	movff	?___awmod,___wmul@multiplier
  3542  00196E  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3543  001972  ECC6  F01B         	call	___wmul	;wreg free
  3544  001976  0E29               	movlw	low __npowers_
  3545  001978  2425               	addwf	?___wmul,w,c
  3546  00197A  6EF6               	movwf	tblptrl,c
  3547  00197C  0E06               	movlw	high __npowers_
  3548  00197E  2026               	addwfc	?___wmul+1,w,c
  3549  001980  6EF7               	movwf	tblptrh,c
  3550  001982                     	if	0	;There are less than 3 active tblptr bytes
  3551  001982                     	endif
  3552  001982  0009               	tblrd		*+
  3553  001984  0100               	movlb	0	; () banked
  3554  001986  CFF5 F0AF          	movff	tablat,___ftmul@f2
  3555  00198A  0009               	tblrd		*+
  3556  00198C  0100               	movlb	0	; () banked
  3557  00198E  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  3558  001992  000A               	tblrd		*-
  3559  001994  0100               	movlb	0	; () banked
  3560  001996  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  3561  00199A  C0BE  F0AC         	movff	_fround$1702,___ftmul@f1
  3562  00199E  C0BF  F0AD         	movff	_fround$1702+1,___ftmul@f1+1
  3563  0019A2  C0C0  F0AE         	movff	_fround$1702+2,___ftmul@f1+2
  3564  0019A6  ECBD  F012         	call	___ftmul	;wreg free
  3565  0019AA  C0AC  F0BB         	movff	?___ftmul,_fround$1703
  3566  0019AE  C0AD  F0BC         	movff	?___ftmul+1,_fround$1703+1
  3567  0019B2  C0AE  F0BD         	movff	?___ftmul+2,_fround$1703+2
  3568                           
  3569                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3570  0019B6  C0BB  F0AC         	movff	_fround$1703,___ftmul@f1
  3571  0019BA  C0BC  F0AD         	movff	_fround$1703+1,___ftmul@f1+1
  3572  0019BE  C0BD  F0AE         	movff	_fround$1703+2,___ftmul@f1+2
  3573  0019C2  0E00               	movlw	0
  3574  0019C4  0100               	movlb	0	; () banked
  3575  0019C6  6FAF               	movwf	___ftmul@f2& (0+255),b
  3576  0019C8  0E00               	movlw	0
  3577  0019CA  0100               	movlb	0	; () banked
  3578  0019CC  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  3579  0019CE  0E3F               	movlw	63
  3580  0019D0  0100               	movlb	0	; () banked
  3581  0019D2  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  3582  0019D4  ECBD  F012         	call	___ftmul	;wreg free
  3583  0019D8  C0AC  F0B8         	movff	?___ftmul,?_fround
  3584  0019DC  C0AD  F0B9         	movff	?___ftmul+1,?_fround+1
  3585  0019E0  C0AE  F0BA         	movff	?___ftmul+2,?_fround+2
  3586  0019E4  0012               	return	
  3587  0019E6                     l4694:
  3588                           
  3589                           ;doprnt.c: 415: else if(prec > 10)
  3590  0019E6  0E0A               	movlw	10
  3591  0019E8  0100               	movlb	0	; () banked
  3592  0019EA  65C1               	cpfsgt	fround@prec& (0+255),b
  3593  0019EC  D06E               	goto	l4702
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3597  0019EE  0E00               	movlw	0
  3598  0019F0  6E28               	movwf	___wmul@multiplicand+1,c
  3599  0019F2  0E03               	movlw	3
  3600  0019F4  6E27               	movwf	___wmul@multiplicand,c
  3601  0019F6  0E00               	movlw	0
  3602  0019F8  6E1A               	movwf	___awmod@divisor+1,c
  3603  0019FA  0E0A               	movlw	10
  3604  0019FC  6E19               	movwf	___awmod@divisor,c
  3605  0019FE  0100               	movlb	0	; () banked
  3606  001A00  C0C1  F017         	movff	fround@prec,___awmod@dividend
  3607  001A04  6A18               	clrf	___awmod@dividend+1,c
  3608  001A06  ECDF  F018         	call	___awmod	;wreg free
  3609  001A0A  C017  F025         	movff	?___awmod,___wmul@multiplier
  3610  001A0E  C018  F026         	movff	?___awmod+1,___wmul@multiplier+1
  3611  001A12  ECC6  F01B         	call	___wmul	;wreg free
  3612  001A16  0E29               	movlw	low __npowers_
  3613  001A18  2425               	addwf	?___wmul,w,c
  3614  001A1A  6EF6               	movwf	tblptrl,c
  3615  001A1C  0E06               	movlw	high __npowers_
  3616  001A1E  2026               	addwfc	?___wmul+1,w,c
  3617  001A20  6EF7               	movwf	tblptrh,c
  3618  001A22                     	if	0	;There are less than 3 active tblptr bytes
  3619  001A22                     	endif
  3620  001A22  0009               	tblrd		*+
  3621  001A24  0100               	movlb	0	; () banked
  3622  001A26  CFF5 F0AF          	movff	tablat,___ftmul@f2
  3623  001A2A  0009               	tblrd		*+
  3624  001A2C  0100               	movlb	0	; () banked
  3625  001A2E  CFF5 F0B0          	movff	tablat,___ftmul@f2+1
  3626  001A32  000A               	tblrd		*-
  3627  001A34  0100               	movlb	0	; () banked
  3628  001A36  CFF5 F0B1          	movff	tablat,___ftmul@f2+2
  3629  001A3A  0E00               	movlw	0
  3630  001A3C  6E20               	movwf	___awdiv@divisor+1,c
  3631  001A3E  0E0A               	movlw	10
  3632  001A40  6E1F               	movwf	___awdiv@divisor,c
  3633  001A42  0100               	movlb	0	; () banked
  3634  001A44  C0C1  F01D         	movff	fround@prec,___awdiv@dividend
  3635  001A48  6A1E               	clrf	___awdiv@dividend+1,c
  3636  001A4A  EC44  F018         	call	___awdiv	;wreg free
  3637  001A4E  0E09               	movlw	9
  3638  001A50  241D               	addwf	?___awdiv,w,c
  3639  001A52  6E25               	movwf	___wmul@multiplier,c
  3640  001A54  0E00               	movlw	0
  3641  001A56  201E               	addwfc	?___awdiv+1,w,c
  3642  001A58  6E26               	movwf	___wmul@multiplier+1,c
  3643  001A5A  0E00               	movlw	0
  3644  001A5C  6E28               	movwf	___wmul@multiplicand+1,c
  3645  001A5E  0E03               	movlw	3
  3646  001A60  6E27               	movwf	___wmul@multiplicand,c
  3647  001A62  ECC6  F01B         	call	___wmul	;wreg free
  3648  001A66  0E29               	movlw	low __npowers_
  3649  001A68  2425               	addwf	?___wmul,w,c
  3650  001A6A  6EF6               	movwf	tblptrl,c
  3651  001A6C  0E06               	movlw	high __npowers_
  3652  001A6E  2026               	addwfc	?___wmul+1,w,c
  3653  001A70  6EF7               	movwf	tblptrh,c
  3654  001A72                     	if	0	;There are less than 3 active tblptr bytes
  3655  001A72                     	endif
  3656  001A72  0009               	tblrd		*+
  3657  001A74  0100               	movlb	0	; () banked
  3658  001A76  CFF5 F0AC          	movff	tablat,___ftmul@f1
  3659  001A7A  0009               	tblrd		*+
  3660  001A7C  0100               	movlb	0	; () banked
  3661  001A7E  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  3662  001A82  000A               	tblrd		*-
  3663  001A84  0100               	movlb	0	; () banked
  3664  001A86  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  3665  001A8A  ECBD  F012         	call	___ftmul	;wreg free
  3666  001A8E  C0AC  F0BE         	movff	?___ftmul,_fround$1702
  3667  001A92  C0AD  F0BF         	movff	?___ftmul+1,_fround$1702+1
  3668  001A96  C0AE  F0C0         	movff	?___ftmul+2,_fround$1702+2
  3669                           
  3670                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3671  001A9A  C0BE  F0AC         	movff	_fround$1702,___ftmul@f1
  3672  001A9E  C0BF  F0AD         	movff	_fround$1702+1,___ftmul@f1+1
  3673  001AA2  C0C0  F0AE         	movff	_fround$1702+2,___ftmul@f1+2
  3674  001AA6  0E00               	movlw	0
  3675  001AA8  0100               	movlb	0	; () banked
  3676  001AAA  6FAF               	movwf	___ftmul@f2& (0+255),b
  3677  001AAC  0E00               	movlw	0
  3678  001AAE  0100               	movlb	0	; () banked
  3679  001AB0  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  3680  001AB2  0E3F               	movlw	63
  3681  001AB4  0100               	movlb	0	; () banked
  3682  001AB6  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  3683  001AB8  ECBD  F012         	call	___ftmul	;wreg free
  3684  001ABC  C0AC  F0B8         	movff	?___ftmul,?_fround
  3685  001AC0  C0AD  F0B9         	movff	?___ftmul+1,?_fround+1
  3686  001AC4  C0AE  F0BA         	movff	?___ftmul+2,?_fround+2
  3687  001AC8  0012               	return	
  3688  001ACA                     l4702:
  3689                           
  3690                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3691  001ACA  0100               	movlb	0	; () banked
  3692  001ACC  51C1               	movf	fround@prec& (0+255),w,b
  3693  001ACE  0D03               	mullw	3
  3694  001AD0  0E29               	movlw	low __npowers_
  3695  001AD2  24F3               	addwf	prodl,w,c
  3696  001AD4  6EF6               	movwf	tblptrl,c
  3697  001AD6  0E06               	movlw	high __npowers_
  3698  001AD8  20F4               	addwfc	prodh,w,c
  3699  001ADA  6EF7               	movwf	tblptrh,c
  3700  001ADC                     	if	0	;There are less than 3 active tblptr bytes
  3701  001ADC                     	endif
  3702  001ADC  0009               	tblrd		*+
  3703  001ADE  0100               	movlb	0	; () banked
  3704  001AE0  CFF5 F0AC          	movff	tablat,___ftmul@f1
  3705  001AE4  0009               	tblrd		*+
  3706  001AE6  0100               	movlb	0	; () banked
  3707  001AE8  CFF5 F0AD          	movff	tablat,___ftmul@f1+1
  3708  001AEC  000A               	tblrd		*-
  3709  001AEE  0100               	movlb	0	; () banked
  3710  001AF0  CFF5 F0AE          	movff	tablat,___ftmul@f1+2
  3711  001AF4  0E00               	movlw	0
  3712  001AF6  0100               	movlb	0	; () banked
  3713  001AF8  6FAF               	movwf	___ftmul@f2& (0+255),b
  3714  001AFA  0E00               	movlw	0
  3715  001AFC  0100               	movlb	0	; () banked
  3716  001AFE  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  3717  001B00  0E3F               	movlw	63
  3718  001B02  0100               	movlb	0	; () banked
  3719  001B04  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  3720  001B06  ECBD  F012         	call	___ftmul	;wreg free
  3721  001B0A  C0AC  F0B8         	movff	?___ftmul,?_fround
  3722  001B0E  C0AD  F0B9         	movff	?___ftmul+1,?_fround+1
  3723  001B12  C0AE  F0BA         	movff	?___ftmul+2,?_fround+2
  3724  001B16  0012               	return	
  3725  001B18                     __end_of_fround:
  3726                           	opt stack 0
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           prodh	equ	0xFF4
  3732                           prodl	equ	0xFF3
  3733                           intcon	equ	0xFF2
  3734                           postinc0	equ	0xFEE
  3735                           wreg	equ	0xFE8
  3736                           indf2	equ	0xFDF
  3737                           postinc2	equ	0xFDE
  3738                           postdec2	equ	0xFDD
  3739                           fsr2h	equ	0xFDA
  3740                           fsr2l	equ	0xFD9
  3741                           status	equ	0xFD8
  3742                           
  3743 ;; *************** function ___awmod *****************
  3744 ;; Defined at:
  3745 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  dividend        2   22[COMRAM] int 
  3748 ;;  divisor         2   24[COMRAM] int 
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;  sign            1   27[COMRAM] unsigned char 
  3751 ;;  counter         1   26[COMRAM] unsigned char 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  2   22[COMRAM] int 
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0, prodl
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3761 ;;      Params:         4       0       0       0       0       0       0
  3762 ;;      Locals:         2       0       0       0       0       0       0
  3763 ;;      Temps:          0       0       0       0       0       0       0
  3764 ;;      Totals:         6       0       0       0       0       0       0
  3765 ;;Total ram usage:        6 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    4
  3768 ;; This function calls:
  3769 ;;		Nothing
  3770 ;; This function is called by:
  3771 ;;		_fround
  3772 ;;		_scale
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           	psect	text6
  3777  0031BE                     __ptext6:
  3778                           	opt stack 0
  3779  0031BE                     ___awmod:
  3780                           	opt stack 24
  3781                           
  3782                           ;incstack = 0
  3783  0031BE  0E00               	movlw	0
  3784  0031C0  6E1C               	movwf	___awmod@sign,c
  3785  0031C2  5018               	movf	___awmod@dividend+1,w,c
  3786  0031C4  0A80               	xorlw	128
  3787  0031C6  6EF3               	movwf	prodl,c
  3788  0031C8  0E80               	movlw	128
  3789  0031CA  5CF3               	subwf	prodl,w,c
  3790  0031CC  0E00               	movlw	0
  3791  0031CE  B4D8               	btfsc	status,2,c
  3792  0031D0  5C17               	subwf	___awmod@dividend,w,c
  3793  0031D2  B0D8               	btfsc	status,0,c
  3794  0031D4  D006               	goto	l4532
  3795  0031D6  6C17               	negf	___awmod@dividend,c
  3796  0031D8  1E18               	comf	___awmod@dividend+1,f,c
  3797  0031DA  B0D8               	btfsc	status,0,c
  3798  0031DC  2A18               	incf	___awmod@dividend+1,f,c
  3799  0031DE  0E01               	movlw	1
  3800  0031E0  6E1C               	movwf	___awmod@sign,c
  3801  0031E2                     l4532:
  3802  0031E2  501A               	movf	___awmod@divisor+1,w,c
  3803  0031E4  0A80               	xorlw	128
  3804  0031E6  6EF3               	movwf	prodl,c
  3805  0031E8  0E80               	movlw	128
  3806  0031EA  5CF3               	subwf	prodl,w,c
  3807  0031EC  0E00               	movlw	0
  3808  0031EE  B4D8               	btfsc	status,2,c
  3809  0031F0  5C19               	subwf	___awmod@divisor,w,c
  3810  0031F2  B0D8               	btfsc	status,0,c
  3811  0031F4  D004               	goto	l4536
  3812  0031F6  6C19               	negf	___awmod@divisor,c
  3813  0031F8  1E1A               	comf	___awmod@divisor+1,f,c
  3814  0031FA  B0D8               	btfsc	status,0,c
  3815  0031FC  2A1A               	incf	___awmod@divisor+1,f,c
  3816  0031FE                     l4536:
  3817  0031FE  501A               	movf	___awmod@divisor+1,w,c
  3818  003200  1019               	iorwf	___awmod@divisor,w,c
  3819  003202  B4D8               	btfsc	status,2,c
  3820  003204  D018               	goto	l4552
  3821  003206  0E01               	movlw	1
  3822  003208  6E1B               	movwf	___awmod@counter,c
  3823  00320A  D004               	goto	l4542
  3824  00320C                     l4540:
  3825  00320C  90D8               	bcf	status,0,c
  3826  00320E  3619               	rlcf	___awmod@divisor,f,c
  3827  003210  361A               	rlcf	___awmod@divisor+1,f,c
  3828  003212  2A1B               	incf	___awmod@counter,f,c
  3829  003214                     l4542:
  3830  003214  AE1A               	btfss	___awmod@divisor+1,7,c
  3831  003216  D7FA               	goto	l4540
  3832  003218                     l4544:
  3833  003218  5019               	movf	___awmod@divisor,w,c
  3834  00321A  5C17               	subwf	___awmod@dividend,w,c
  3835  00321C  501A               	movf	___awmod@divisor+1,w,c
  3836  00321E  5818               	subwfb	___awmod@dividend+1,w,c
  3837  003220  A0D8               	btfss	status,0,c
  3838  003222  D004               	goto	l4548
  3839  003224  5019               	movf	___awmod@divisor,w,c
  3840  003226  5E17               	subwf	___awmod@dividend,f,c
  3841  003228  501A               	movf	___awmod@divisor+1,w,c
  3842  00322A  5A18               	subwfb	___awmod@dividend+1,f,c
  3843  00322C                     l4548:
  3844  00322C  90D8               	bcf	status,0,c
  3845  00322E  321A               	rrcf	___awmod@divisor+1,f,c
  3846  003230  3219               	rrcf	___awmod@divisor,f,c
  3847  003232  2E1B               	decfsz	___awmod@counter,f,c
  3848  003234  D7F1               	goto	l4544
  3849  003236                     l4552:
  3850  003236  501C               	movf	___awmod@sign,w,c
  3851  003238  B4D8               	btfsc	status,2,c
  3852  00323A  D004               	goto	l4556
  3853  00323C  6C17               	negf	___awmod@dividend,c
  3854  00323E  1E18               	comf	___awmod@dividend+1,f,c
  3855  003240  B0D8               	btfsc	status,0,c
  3856  003242  2A18               	incf	___awmod@dividend+1,f,c
  3857  003244                     l4556:
  3858  003244  C017  F017         	movff	___awmod@dividend,?___awmod
  3859  003248  C018  F018         	movff	___awmod@dividend+1,?___awmod+1
  3860  00324C  0012               	return	
  3861  00324E                     __end_of___awmod:
  3862                           	opt stack 0
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           postinc0	equ	0xFEE
  3871                           wreg	equ	0xFE8
  3872                           indf2	equ	0xFDF
  3873                           postinc2	equ	0xFDE
  3874                           postdec2	equ	0xFDD
  3875                           fsr2h	equ	0xFDA
  3876                           fsr2l	equ	0xFD9
  3877                           status	equ	0xFD8
  3878                           
  3879 ;; *************** function __tdiv_to_l_ *****************
  3880 ;; Defined at:
  3881 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;  f1              3   22[COMRAM] float 
  3884 ;;  f2              3   25[COMRAM] float 
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;  quot            4   31[COMRAM] unsigned long 
  3887 ;;  exp1            1   36[COMRAM] unsigned char 
  3888 ;;  cntr            1   35[COMRAM] unsigned char 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  4   22[COMRAM] unsigned long 
  3891 ;; Registers used:
  3892 ;;		wreg, status,2, status,0
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3898 ;;      Params:         6       0       0       0       0       0       0
  3899 ;;      Locals:         6       0       0       0       0       0       0
  3900 ;;      Temps:          3       0       0       0       0       0       0
  3901 ;;      Totals:        15       0       0       0       0       0       0
  3902 ;;Total ram usage:       15 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    4
  3905 ;; This function calls:
  3906 ;;		Nothing
  3907 ;; This function is called by:
  3908 ;;		_printf
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           	psect	text7
  3913  0029A4                     __ptext7:
  3914                           	opt stack 0
  3915  0029A4                     __tdiv_to_l_:
  3916                           	opt stack 25
  3917                           
  3918                           ;incstack = 0
  3919  0029A4  C019  F01D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3920  0029A8  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3921  0029AA  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3922  0029AC  3418               	rlcf	__tdiv_to_l_@f1+1,w,c
  3923  0029AE  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3924  0029B0  E301               	bnc	u4811
  3925  0029B2  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3926  0029B4                     u4811:
  3927  0029B4  501D               	movf	??__tdiv_to_l_,w,c
  3928  0029B6  6E25               	movwf	__tdiv_to_l_@exp1,c
  3929  0029B8  6625               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  3930  0029BA  D009               	goto	l4750
  3931  0029BC  0E00               	movlw	0
  3932  0029BE  6E17               	movwf	?__tdiv_to_l_,c
  3933  0029C0  0E00               	movlw	0
  3934  0029C2  6E18               	movwf	?__tdiv_to_l_+1,c
  3935  0029C4  0E00               	movlw	0
  3936  0029C6  6E19               	movwf	?__tdiv_to_l_+2,c
  3937  0029C8  0E00               	movlw	0
  3938  0029CA  6E1A               	movwf	?__tdiv_to_l_+3,c
  3939  0029CC  0012               	return	
  3940  0029CE                     l4750:
  3941  0029CE  C01C  F01D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3942  0029D2  6A1E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3943  0029D4  6A1F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3944  0029D6  341B               	rlcf	__tdiv_to_l_@f2+1,w,c
  3945  0029D8  361D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3946  0029DA  E301               	bnc	u4831
  3947  0029DC  801E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3948  0029DE                     u4831:
  3949  0029DE  501D               	movf	??__tdiv_to_l_,w,c
  3950  0029E0  6E24               	movwf	__tdiv_to_l_@cntr,c
  3951  0029E2  6624               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  3952  0029E4  D009               	goto	l4756
  3953  0029E6  0E00               	movlw	0
  3954  0029E8  6E17               	movwf	?__tdiv_to_l_,c
  3955  0029EA  0E00               	movlw	0
  3956  0029EC  6E18               	movwf	?__tdiv_to_l_+1,c
  3957  0029EE  0E00               	movlw	0
  3958  0029F0  6E19               	movwf	?__tdiv_to_l_+2,c
  3959  0029F2  0E00               	movlw	0
  3960  0029F4  6E1A               	movwf	?__tdiv_to_l_+3,c
  3961  0029F6  0012               	return	
  3962  0029F8                     l4756:
  3963  0029F8  8E18               	bsf	__tdiv_to_l_@f1+1,7,c
  3964  0029FA  0EFF               	movlw	255
  3965  0029FC  1617               	andwf	__tdiv_to_l_@f1,f,c
  3966  0029FE  0EFF               	movlw	255
  3967  002A00  1618               	andwf	__tdiv_to_l_@f1+1,f,c
  3968  002A02  0E00               	movlw	0
  3969  002A04  1619               	andwf	__tdiv_to_l_@f1+2,f,c
  3970  002A06  8E1B               	bsf	__tdiv_to_l_@f2+1,7,c
  3971  002A08  0EFF               	movlw	255
  3972  002A0A  161A               	andwf	__tdiv_to_l_@f2,f,c
  3973  002A0C  0EFF               	movlw	255
  3974  002A0E  161B               	andwf	__tdiv_to_l_@f2+1,f,c
  3975  002A10  0E00               	movlw	0
  3976  002A12  161C               	andwf	__tdiv_to_l_@f2+2,f,c
  3977  002A14  0E00               	movlw	0
  3978  002A16  6E20               	movwf	__tdiv_to_l_@quot,c
  3979  002A18  0E00               	movlw	0
  3980  002A1A  6E21               	movwf	__tdiv_to_l_@quot+1,c
  3981  002A1C  0E00               	movlw	0
  3982  002A1E  6E22               	movwf	__tdiv_to_l_@quot+2,c
  3983  002A20  0E00               	movlw	0
  3984  002A22  6E23               	movwf	__tdiv_to_l_@quot+3,c
  3985  002A24  0E7F               	movlw	127
  3986  002A26  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  3987  002A28  5024               	movf	__tdiv_to_l_@cntr,w,c
  3988  002A2A  0F98               	addlw	152
  3989  002A2C  5E25               	subwf	__tdiv_to_l_@exp1,f,c
  3990  002A2E  0E18               	movlw	24
  3991  002A30  6E24               	movwf	__tdiv_to_l_@cntr,c
  3992  002A32                     l1081:
  3993  002A32  90D8               	bcf	status,0,c
  3994  002A34  3620               	rlcf	__tdiv_to_l_@quot,f,c
  3995  002A36  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  3996  002A38  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  3997  002A3A  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  3998  002A3C  501A               	movf	__tdiv_to_l_@f2,w,c
  3999  002A3E  5C17               	subwf	__tdiv_to_l_@f1,w,c
  4000  002A40  501B               	movf	__tdiv_to_l_@f2+1,w,c
  4001  002A42  5818               	subwfb	__tdiv_to_l_@f1+1,w,c
  4002  002A44  501C               	movf	__tdiv_to_l_@f2+2,w,c
  4003  002A46  5819               	subwfb	__tdiv_to_l_@f1+2,w,c
  4004  002A48  A0D8               	btfss	status,0,c
  4005  002A4A  D007               	goto	l1082
  4006  002A4C  501A               	movf	__tdiv_to_l_@f2,w,c
  4007  002A4E  5E17               	subwf	__tdiv_to_l_@f1,f,c
  4008  002A50  501B               	movf	__tdiv_to_l_@f2+1,w,c
  4009  002A52  5A18               	subwfb	__tdiv_to_l_@f1+1,f,c
  4010  002A54  501C               	movf	__tdiv_to_l_@f2+2,w,c
  4011  002A56  5A19               	subwfb	__tdiv_to_l_@f1+2,f,c
  4012  002A58  8020               	bsf	__tdiv_to_l_@quot,0,c
  4013  002A5A                     l1082:
  4014  002A5A  90D8               	bcf	status,0,c
  4015  002A5C  3617               	rlcf	__tdiv_to_l_@f1,f,c
  4016  002A5E  3618               	rlcf	__tdiv_to_l_@f1+1,f,c
  4017  002A60  3619               	rlcf	__tdiv_to_l_@f1+2,f,c
  4018  002A62  2E24               	decfsz	__tdiv_to_l_@cntr,f,c
  4019  002A64  D7E6               	goto	l1081
  4020  002A66  AE25               	btfss	__tdiv_to_l_@exp1,7,c
  4021  002A68  D019               	goto	l4788
  4022  002A6A  5025               	movf	__tdiv_to_l_@exp1,w,c
  4023  002A6C  0A80               	xorlw	128
  4024  002A6E  6E1D               	movwf	??__tdiv_to_l_& (0+255),c
  4025  002A70  0EE9               	movlw	233
  4026  002A72  0A80               	xorlw	128
  4027  002A74  5C1D               	subwf	??__tdiv_to_l_,w,c
  4028  002A76  B0D8               	btfsc	status,0,c
  4029  002A78  D009               	goto	l4784
  4030  002A7A  0E00               	movlw	0
  4031  002A7C  6E17               	movwf	?__tdiv_to_l_,c
  4032  002A7E  0E00               	movlw	0
  4033  002A80  6E18               	movwf	?__tdiv_to_l_+1,c
  4034  002A82  0E00               	movlw	0
  4035  002A84  6E19               	movwf	?__tdiv_to_l_+2,c
  4036  002A86  0E00               	movlw	0
  4037  002A88  6E1A               	movwf	?__tdiv_to_l_+3,c
  4038  002A8A  0012               	return	
  4039  002A8C                     l4784:
  4040  002A8C  90D8               	bcf	status,0,c
  4041  002A8E  3223               	rrcf	__tdiv_to_l_@quot+3,f,c
  4042  002A90  3222               	rrcf	__tdiv_to_l_@quot+2,f,c
  4043  002A92  3221               	rrcf	__tdiv_to_l_@quot+1,f,c
  4044  002A94  3220               	rrcf	__tdiv_to_l_@quot,f,c
  4045  002A96  3E25               	incfsz	__tdiv_to_l_@exp1,f,c
  4046  002A98  D7F9               	goto	l4784
  4047  002A9A  D014               	goto	l1088
  4048  002A9C                     l4788:
  4049  002A9C  0E17               	movlw	23
  4050  002A9E  6425               	cpfsgt	__tdiv_to_l_@exp1,c
  4051  002AA0  D00F               	goto	l4796
  4052  002AA2  0E00               	movlw	0
  4053  002AA4  6E17               	movwf	?__tdiv_to_l_,c
  4054  002AA6  0E00               	movlw	0
  4055  002AA8  6E18               	movwf	?__tdiv_to_l_+1,c
  4056  002AAA  0E00               	movlw	0
  4057  002AAC  6E19               	movwf	?__tdiv_to_l_+2,c
  4058  002AAE  0E00               	movlw	0
  4059  002AB0  6E1A               	movwf	?__tdiv_to_l_+3,c
  4060  002AB2  0012               	return	
  4061  002AB4                     l4794:
  4062  002AB4  90D8               	bcf	status,0,c
  4063  002AB6  3620               	rlcf	__tdiv_to_l_@quot,f,c
  4064  002AB8  3621               	rlcf	__tdiv_to_l_@quot+1,f,c
  4065  002ABA  3622               	rlcf	__tdiv_to_l_@quot+2,f,c
  4066  002ABC  3623               	rlcf	__tdiv_to_l_@quot+3,f,c
  4067  002ABE  0625               	decf	__tdiv_to_l_@exp1,f,c
  4068  002AC0                     l4796:
  4069  002AC0  6625               	tstfsz	__tdiv_to_l_@exp1,c
  4070  002AC2  D7F8               	goto	l4794
  4071  002AC4                     l1088:
  4072  002AC4  C020  F017         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4073  002AC8  C021  F018         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4074  002ACC  C022  F019         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4075  002AD0  C023  F01A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4076  002AD4  0012               	return	
  4077  002AD6                     __end_of__tdiv_to_l_:
  4078                           	opt stack 0
  4079                           tblptru	equ	0xFF8
  4080                           tblptrh	equ	0xFF7
  4081                           tblptrl	equ	0xFF6
  4082                           tablat	equ	0xFF5
  4083                           prodh	equ	0xFF4
  4084                           prodl	equ	0xFF3
  4085                           intcon	equ	0xFF2
  4086                           postinc0	equ	0xFEE
  4087                           wreg	equ	0xFE8
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           postdec2	equ	0xFDD
  4091                           fsr2h	equ	0xFDA
  4092                           fsr2l	equ	0xFD9
  4093                           status	equ	0xFD8
  4094                           
  4095 ;; *************** function __div_to_l_ *****************
  4096 ;; Defined at:
  4097 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  f1              3   22[COMRAM] unsigned long 
  4100 ;;  f2              3   25[COMRAM] unsigned long 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  quot            4   32[COMRAM] unsigned long 
  4103 ;;  exp1            1   37[COMRAM] unsigned char 
  4104 ;;  cntr            1   36[COMRAM] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  4   22[COMRAM] unsigned long 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4114 ;;      Params:         6       0       0       0       0       0       0
  4115 ;;      Locals:         6       0       0       0       0       0       0
  4116 ;;      Temps:          4       0       0       0       0       0       0
  4117 ;;      Totals:        16       0       0       0       0       0       0
  4118 ;;Total ram usage:       16 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    4
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_printf
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text8
  4129  0026E4                     __ptext8:
  4130                           	opt stack 0
  4131  0026E4                     __div_to_l_:
  4132                           	opt stack 25
  4133                           
  4134                           ;incstack = 0
  4135  0026E4  C017  F01D         	movff	__div_to_l_@f1,??__div_to_l_
  4136  0026E8  C018  F01E         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  4137  0026EC  C019  F01F         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  4138  0026F0  C01A  F020         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  4139  0026F4  0E18               	movlw	24
  4140  0026F6  D005               	goto	u4900
  4141  0026F8                     u4905:
  4142  0026F8  90D8               	bcf	status,0,c
  4143  0026FA  3220               	rrcf	??__div_to_l_+3,f,c
  4144  0026FC  321F               	rrcf	??__div_to_l_+2,f,c
  4145  0026FE  321E               	rrcf	??__div_to_l_+1,f,c
  4146  002700  321D               	rrcf	??__div_to_l_,f,c
  4147  002702                     u4900:
  4148  002702  2EE8               	decfsz	wreg,f,c
  4149  002704  D7F9               	goto	u4905
  4150  002706  501D               	movf	??__div_to_l_,w,c
  4151  002708  6E26               	movwf	__div_to_l_@exp1,c
  4152  00270A  6626               	tstfsz	__div_to_l_@exp1& (0+255),c
  4153  00270C  D009               	goto	l4804
  4154  00270E  0E00               	movlw	0
  4155  002710  6E17               	movwf	?__div_to_l_,c
  4156  002712  0E00               	movlw	0
  4157  002714  6E18               	movwf	?__div_to_l_+1,c
  4158  002716  0E00               	movlw	0
  4159  002718  6E19               	movwf	?__div_to_l_+2,c
  4160  00271A  0E00               	movlw	0
  4161  00271C  6E1A               	movwf	?__div_to_l_+3,c
  4162  00271E  0012               	return	
  4163  002720                     l4804:
  4164  002720  C01A  F01D         	movff	__div_to_l_@f2,??__div_to_l_
  4165  002724  C01B  F01E         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  4166  002728  C01C  F01F         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  4167  00272C  C01D  F020         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  4168  002730  0E18               	movlw	24
  4169  002732  D005               	goto	u4920
  4170  002734                     u4925:
  4171  002734  90D8               	bcf	status,0,c
  4172  002736  3220               	rrcf	??__div_to_l_+3,f,c
  4173  002738  321F               	rrcf	??__div_to_l_+2,f,c
  4174  00273A  321E               	rrcf	??__div_to_l_+1,f,c
  4175  00273C  321D               	rrcf	??__div_to_l_,f,c
  4176  00273E                     u4920:
  4177  00273E  2EE8               	decfsz	wreg,f,c
  4178  002740  D7F9               	goto	u4925
  4179  002742  501D               	movf	??__div_to_l_,w,c
  4180  002744  6E25               	movwf	__div_to_l_@cntr,c
  4181  002746  6625               	tstfsz	__div_to_l_@cntr& (0+255),c
  4182  002748  D009               	goto	l4810
  4183  00274A  0E00               	movlw	0
  4184  00274C  6E17               	movwf	?__div_to_l_,c
  4185  00274E  0E00               	movlw	0
  4186  002750  6E18               	movwf	?__div_to_l_+1,c
  4187  002752  0E00               	movlw	0
  4188  002754  6E19               	movwf	?__div_to_l_+2,c
  4189  002756  0E00               	movlw	0
  4190  002758  6E1A               	movwf	?__div_to_l_+3,c
  4191  00275A  0012               	return	
  4192  00275C                     l4810:
  4193  00275C  8E19               	bsf	__div_to_l_@f1+2,7,c
  4194  00275E  0EFF               	movlw	255
  4195  002760  1617               	andwf	__div_to_l_@f1,f,c
  4196  002762  0EFF               	movlw	255
  4197  002764  1618               	andwf	__div_to_l_@f1+1,f,c
  4198  002766  0EFF               	movlw	255
  4199  002768  1619               	andwf	__div_to_l_@f1+2,f,c
  4200  00276A  0E00               	movlw	0
  4201  00276C  161A               	andwf	__div_to_l_@f1+3,f,c
  4202  00276E  8E1C               	bsf	__div_to_l_@f2+2,7,c
  4203  002770  0EFF               	movlw	255
  4204  002772  161A               	andwf	__div_to_l_@f2,f,c
  4205  002774  0EFF               	movlw	255
  4206  002776  161B               	andwf	__div_to_l_@f2+1,f,c
  4207  002778  0EFF               	movlw	255
  4208  00277A  161C               	andwf	__div_to_l_@f2+2,f,c
  4209  00277C  0E00               	movlw	0
  4210  00277E  161D               	andwf	__div_to_l_@f2+3,f,c
  4211  002780  0E00               	movlw	0
  4212  002782  6E21               	movwf	__div_to_l_@quot,c
  4213  002784  0E00               	movlw	0
  4214  002786  6E22               	movwf	__div_to_l_@quot+1,c
  4215  002788  0E00               	movlw	0
  4216  00278A  6E23               	movwf	__div_to_l_@quot+2,c
  4217  00278C  0E00               	movlw	0
  4218  00278E  6E24               	movwf	__div_to_l_@quot+3,c
  4219  002790  0E7F               	movlw	127
  4220  002792  5E26               	subwf	__div_to_l_@exp1,f,c
  4221  002794  5025               	movf	__div_to_l_@cntr,w,c
  4222  002796  0FA0               	addlw	160
  4223  002798  5E26               	subwf	__div_to_l_@exp1,f,c
  4224  00279A  0E20               	movlw	32
  4225  00279C  6E25               	movwf	__div_to_l_@cntr,c
  4226  00279E                     l4824:
  4227  00279E  90D8               	bcf	status,0,c
  4228  0027A0  3621               	rlcf	__div_to_l_@quot,f,c
  4229  0027A2  3622               	rlcf	__div_to_l_@quot+1,f,c
  4230  0027A4  3623               	rlcf	__div_to_l_@quot+2,f,c
  4231  0027A6  3624               	rlcf	__div_to_l_@quot+3,f,c
  4232  0027A8  501A               	movf	__div_to_l_@f2,w,c
  4233  0027AA  5C17               	subwf	__div_to_l_@f1,w,c
  4234  0027AC  501B               	movf	__div_to_l_@f2+1,w,c
  4235  0027AE  5818               	subwfb	__div_to_l_@f1+1,w,c
  4236  0027B0  501C               	movf	__div_to_l_@f2+2,w,c
  4237  0027B2  5819               	subwfb	__div_to_l_@f1+2,w,c
  4238  0027B4  501D               	movf	__div_to_l_@f2+3,w,c
  4239  0027B6  581A               	subwfb	__div_to_l_@f1+3,w,c
  4240  0027B8  A0D8               	btfss	status,0,c
  4241  0027BA  D009               	goto	l4832
  4242  0027BC  501A               	movf	__div_to_l_@f2,w,c
  4243  0027BE  5E17               	subwf	__div_to_l_@f1,f,c
  4244  0027C0  501B               	movf	__div_to_l_@f2+1,w,c
  4245  0027C2  5A18               	subwfb	__div_to_l_@f1+1,f,c
  4246  0027C4  501C               	movf	__div_to_l_@f2+2,w,c
  4247  0027C6  5A19               	subwfb	__div_to_l_@f1+2,f,c
  4248  0027C8  501D               	movf	__div_to_l_@f2+3,w,c
  4249  0027CA  5A1A               	subwfb	__div_to_l_@f1+3,f,c
  4250  0027CC  8021               	bsf	__div_to_l_@quot,0,c
  4251  0027CE                     l4832:
  4252  0027CE  90D8               	bcf	status,0,c
  4253  0027D0  3617               	rlcf	__div_to_l_@f1,f,c
  4254  0027D2  3618               	rlcf	__div_to_l_@f1+1,f,c
  4255  0027D4  3619               	rlcf	__div_to_l_@f1+2,f,c
  4256  0027D6  361A               	rlcf	__div_to_l_@f1+3,f,c
  4257  0027D8  2E25               	decfsz	__div_to_l_@cntr,f,c
  4258  0027DA  D7E1               	goto	l4824
  4259  0027DC  AE26               	btfss	__div_to_l_@exp1,7,c
  4260  0027DE  D019               	goto	l4846
  4261  0027E0  5026               	movf	__div_to_l_@exp1,w,c
  4262  0027E2  0A80               	xorlw	128
  4263  0027E4  6E1D               	movwf	??__div_to_l_& (0+255),c
  4264  0027E6  0EE1               	movlw	225
  4265  0027E8  0A80               	xorlw	128
  4266  0027EA  5C1D               	subwf	??__div_to_l_,w,c
  4267  0027EC  B0D8               	btfsc	status,0,c
  4268  0027EE  D009               	goto	l4842
  4269  0027F0  0E00               	movlw	0
  4270  0027F2  6E17               	movwf	?__div_to_l_,c
  4271  0027F4  0E00               	movlw	0
  4272  0027F6  6E18               	movwf	?__div_to_l_+1,c
  4273  0027F8  0E00               	movlw	0
  4274  0027FA  6E19               	movwf	?__div_to_l_+2,c
  4275  0027FC  0E00               	movlw	0
  4276  0027FE  6E1A               	movwf	?__div_to_l_+3,c
  4277  002800  0012               	return	
  4278  002802                     l4842:
  4279  002802  90D8               	bcf	status,0,c
  4280  002804  3224               	rrcf	__div_to_l_@quot+3,f,c
  4281  002806  3223               	rrcf	__div_to_l_@quot+2,f,c
  4282  002808  3222               	rrcf	__div_to_l_@quot+1,f,c
  4283  00280A  3221               	rrcf	__div_to_l_@quot,f,c
  4284  00280C  3E26               	incfsz	__div_to_l_@exp1,f,c
  4285  00280E  D7F9               	goto	l4842
  4286  002810  D014               	goto	l970
  4287  002812                     l4846:
  4288  002812  0E1F               	movlw	31
  4289  002814  6426               	cpfsgt	__div_to_l_@exp1,c
  4290  002816  D00F               	goto	l4854
  4291  002818  0E00               	movlw	0
  4292  00281A  6E17               	movwf	?__div_to_l_,c
  4293  00281C  0E00               	movlw	0
  4294  00281E  6E18               	movwf	?__div_to_l_+1,c
  4295  002820  0E00               	movlw	0
  4296  002822  6E19               	movwf	?__div_to_l_+2,c
  4297  002824  0E00               	movlw	0
  4298  002826  6E1A               	movwf	?__div_to_l_+3,c
  4299  002828  0012               	return	
  4300  00282A                     l4852:
  4301  00282A  90D8               	bcf	status,0,c
  4302  00282C  3621               	rlcf	__div_to_l_@quot,f,c
  4303  00282E  3622               	rlcf	__div_to_l_@quot+1,f,c
  4304  002830  3623               	rlcf	__div_to_l_@quot+2,f,c
  4305  002832  3624               	rlcf	__div_to_l_@quot+3,f,c
  4306  002834  0626               	decf	__div_to_l_@exp1,f,c
  4307  002836                     l4854:
  4308  002836  6626               	tstfsz	__div_to_l_@exp1,c
  4309  002838  D7F8               	goto	l4852
  4310  00283A                     l970:
  4311  00283A  C021  F017         	movff	__div_to_l_@quot,?__div_to_l_
  4312  00283E  C022  F018         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4313  002842  C023  F019         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4314  002846  C024  F01A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4315  00284A  0012               	return	
  4316  00284C                     __end_of__div_to_l_:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           intcon	equ	0xFF2
  4325                           postinc0	equ	0xFEE
  4326                           wreg	equ	0xFE8
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           postdec2	equ	0xFDD
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function ___lltoft *****************
  4335 ;; Defined at:
  4336 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  c               4   30[COMRAM] unsigned long 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  exp             1   38[COMRAM] unsigned char 
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  3   30[COMRAM] float 
  4343 ;; Registers used:
  4344 ;;		wreg, status,2, status,0, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4350 ;;      Params:         4       0       0       0       0       0       0
  4351 ;;      Locals:         1       0       0       0       0       0       0
  4352 ;;      Temps:          4       0       0       0       0       0       0
  4353 ;;      Totals:         9       0       0       0       0       0       0
  4354 ;;Total ram usage:        9 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    5
  4357 ;; This function calls:
  4358 ;;		___ftpack
  4359 ;; This function is called by:
  4360 ;;		_printf
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text9
  4365  00343C                     __ptext9:
  4366                           	opt stack 0
  4367  00343C                     ___lltoft:
  4368                           	opt stack 24
  4369                           
  4370                           ;incstack = 0
  4371  00343C  0E8E               	movlw	142
  4372  00343E  6E27               	movwf	___lltoft@exp,c
  4373  003440  D006               	goto	l5018
  4374  003442                     l5016:
  4375  003442  90D8               	bcf	status,0,c
  4376  003444  3222               	rrcf	___lltoft@c+3,f,c
  4377  003446  3221               	rrcf	___lltoft@c+2,f,c
  4378  003448  3220               	rrcf	___lltoft@c+1,f,c
  4379  00344A  321F               	rrcf	___lltoft@c,f,c
  4380  00344C  2A27               	incf	___lltoft@exp,f,c
  4381  00344E                     l5018:
  4382  00344E  0E00               	movlw	0
  4383  003450  141F               	andwf	___lltoft@c,w,c
  4384  003452  6E23               	movwf	??___lltoft& (0+255),c
  4385  003454  0E00               	movlw	0
  4386  003456  1420               	andwf	___lltoft@c+1,w,c
  4387  003458  6E24               	movwf	(??___lltoft+1)& (0+255),c
  4388  00345A  0E00               	movlw	0
  4389  00345C  1421               	andwf	___lltoft@c+2,w,c
  4390  00345E  6E25               	movwf	(??___lltoft+2)& (0+255),c
  4391  003460  0EFF               	movlw	255
  4392  003462  1422               	andwf	___lltoft@c+3,w,c
  4393  003464  6E26               	movwf	(??___lltoft+3)& (0+255),c
  4394  003466  5026               	movf	??___lltoft+3,w,c
  4395  003468  1023               	iorwf	??___lltoft,w,c
  4396  00346A  1024               	iorwf	??___lltoft+1,w,c
  4397  00346C  1025               	iorwf	??___lltoft+2,w,c
  4398  00346E  A4D8               	btfss	status,2,c
  4399  003470  D7E8               	goto	l5016
  4400  003472  C01F  F017         	movff	___lltoft@c,___ftpack@arg
  4401  003476  C020  F018         	movff	___lltoft@c+1,___ftpack@arg+1
  4402  00347A  C021  F019         	movff	___lltoft@c+2,___ftpack@arg+2
  4403  00347E  C027  F01A         	movff	___lltoft@exp,___ftpack@exp
  4404  003482  0E00               	movlw	0
  4405  003484  6E1B               	movwf	___ftpack@sign,c
  4406  003486  ECF0  F017         	call	___ftpack	;wreg free
  4407  00348A  C017  F01F         	movff	?___ftpack,?___lltoft
  4408  00348E  C018  F020         	movff	?___ftpack+1,?___lltoft+1
  4409  003492  C019  F021         	movff	?___ftpack+2,?___lltoft+2
  4410  003496  0012               	return	
  4411  003498                     __end_of___lltoft:
  4412                           	opt stack 0
  4413                           tblptru	equ	0xFF8
  4414                           tblptrh	equ	0xFF7
  4415                           tblptrl	equ	0xFF6
  4416                           tablat	equ	0xFF5
  4417                           prodh	equ	0xFF4
  4418                           prodl	equ	0xFF3
  4419                           intcon	equ	0xFF2
  4420                           postinc0	equ	0xFEE
  4421                           wreg	equ	0xFE8
  4422                           indf2	equ	0xFDF
  4423                           postinc2	equ	0xFDE
  4424                           postdec2	equ	0xFDD
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function ___llmod *****************
  4430 ;; Defined at:
  4431 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  dividend        4   35[COMRAM] unsigned long 
  4434 ;;  divisor         4   39[COMRAM] unsigned long 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  counter         1   43[COMRAM] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  4   35[COMRAM] unsigned long 
  4439 ;; Registers used:
  4440 ;;		wreg, status,2, status,0
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4446 ;;      Params:         8       0       0       0       0       0       0
  4447 ;;      Locals:         1       0       0       0       0       0       0
  4448 ;;      Temps:          0       0       0       0       0       0       0
  4449 ;;      Totals:         9       0       0       0       0       0       0
  4450 ;;Total ram usage:        9 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    4
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_printf
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           	psect	text10
  4461  0033D6                     __ptext10:
  4462                           	opt stack 0
  4463  0033D6                     ___llmod:
  4464                           	opt stack 25
  4465                           
  4466                           ;incstack = 0
  4467  0033D6  502B               	movf	___llmod@divisor+3,w,c
  4468  0033D8  1028               	iorwf	___llmod@divisor,w,c
  4469  0033DA  1029               	iorwf	___llmod@divisor+1,w,c
  4470  0033DC  102A               	iorwf	___llmod@divisor+2,w,c
  4471  0033DE  B4D8               	btfsc	status,2,c
  4472  0033E0  D024               	goto	l1172
  4473  0033E2  0E01               	movlw	1
  4474  0033E4  6E2C               	movwf	___llmod@counter,c
  4475  0033E6  D006               	goto	l5004
  4476  0033E8                     l5002:
  4477  0033E8  90D8               	bcf	status,0,c
  4478  0033EA  3628               	rlcf	___llmod@divisor,f,c
  4479  0033EC  3629               	rlcf	___llmod@divisor+1,f,c
  4480  0033EE  362A               	rlcf	___llmod@divisor+2,f,c
  4481  0033F0  362B               	rlcf	___llmod@divisor+3,f,c
  4482  0033F2  2A2C               	incf	___llmod@counter,f,c
  4483  0033F4                     l5004:
  4484  0033F4  AE2B               	btfss	___llmod@divisor+3,7,c
  4485  0033F6  D7F8               	goto	l5002
  4486  0033F8                     l5006:
  4487  0033F8  5028               	movf	___llmod@divisor,w,c
  4488  0033FA  5C24               	subwf	___llmod@dividend,w,c
  4489  0033FC  5029               	movf	___llmod@divisor+1,w,c
  4490  0033FE  5825               	subwfb	___llmod@dividend+1,w,c
  4491  003400  502A               	movf	___llmod@divisor+2,w,c
  4492  003402  5826               	subwfb	___llmod@dividend+2,w,c
  4493  003404  502B               	movf	___llmod@divisor+3,w,c
  4494  003406  5827               	subwfb	___llmod@dividend+3,w,c
  4495  003408  A0D8               	btfss	status,0,c
  4496  00340A  D008               	goto	l5010
  4497  00340C  5028               	movf	___llmod@divisor,w,c
  4498  00340E  5E24               	subwf	___llmod@dividend,f,c
  4499  003410  5029               	movf	___llmod@divisor+1,w,c
  4500  003412  5A25               	subwfb	___llmod@dividend+1,f,c
  4501  003414  502A               	movf	___llmod@divisor+2,w,c
  4502  003416  5A26               	subwfb	___llmod@dividend+2,f,c
  4503  003418  502B               	movf	___llmod@divisor+3,w,c
  4504  00341A  5A27               	subwfb	___llmod@dividend+3,f,c
  4505  00341C                     l5010:
  4506  00341C  90D8               	bcf	status,0,c
  4507  00341E  322B               	rrcf	___llmod@divisor+3,f,c
  4508  003420  322A               	rrcf	___llmod@divisor+2,f,c
  4509  003422  3229               	rrcf	___llmod@divisor+1,f,c
  4510  003424  3228               	rrcf	___llmod@divisor,f,c
  4511  003426  2E2C               	decfsz	___llmod@counter,f,c
  4512  003428  D7E7               	goto	l5006
  4513  00342A                     l1172:
  4514  00342A  C024  F024         	movff	___llmod@dividend,?___llmod
  4515  00342E  C025  F025         	movff	___llmod@dividend+1,?___llmod+1
  4516  003432  C026  F026         	movff	___llmod@dividend+2,?___llmod+2
  4517  003436  C027  F027         	movff	___llmod@dividend+3,?___llmod+3
  4518  00343A  0012               	return	
  4519  00343C                     __end_of___llmod:
  4520                           	opt stack 0
  4521                           tblptru	equ	0xFF8
  4522                           tblptrh	equ	0xFF7
  4523                           tblptrl	equ	0xFF6
  4524                           tablat	equ	0xFF5
  4525                           prodh	equ	0xFF4
  4526                           prodl	equ	0xFF3
  4527                           intcon	equ	0xFF2
  4528                           postinc0	equ	0xFEE
  4529                           wreg	equ	0xFE8
  4530                           indf2	equ	0xFDF
  4531                           postinc2	equ	0xFDE
  4532                           postdec2	equ	0xFDD
  4533                           fsr2h	equ	0xFDA
  4534                           fsr2l	equ	0xFD9
  4535                           status	equ	0xFD8
  4536                           
  4537 ;; *************** function ___lldiv *****************
  4538 ;; Defined at:
  4539 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  dividend        4   22[COMRAM] unsigned long 
  4542 ;;  divisor         4   26[COMRAM] unsigned long 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  quotient        4   30[COMRAM] unsigned long 
  4545 ;;  counter         1   34[COMRAM] unsigned char 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  4   22[COMRAM] unsigned long 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2, status,0
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4555 ;;      Params:         8       0       0       0       0       0       0
  4556 ;;      Locals:         5       0       0       0       0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0
  4558 ;;      Totals:        13       0       0       0       0       0       0
  4559 ;;Total ram usage:       13 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    4
  4562 ;; This function calls:
  4563 ;;		Nothing
  4564 ;; This function is called by:
  4565 ;;		_printf
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text11
  4570  0032DE                     __ptext11:
  4571                           	opt stack 0
  4572  0032DE                     ___lldiv:
  4573                           	opt stack 25
  4574                           
  4575                           ;incstack = 0
  4576  0032DE  0E00               	movlw	0
  4577  0032E0  6E1F               	movwf	___lldiv@quotient,c
  4578  0032E2  0E00               	movlw	0
  4579  0032E4  6E20               	movwf	___lldiv@quotient+1,c
  4580  0032E6  0E00               	movlw	0
  4581  0032E8  6E21               	movwf	___lldiv@quotient+2,c
  4582  0032EA  0E00               	movlw	0
  4583  0032EC  6E22               	movwf	___lldiv@quotient+3,c
  4584  0032EE  501E               	movf	___lldiv@divisor+3,w,c
  4585  0032F0  101B               	iorwf	___lldiv@divisor,w,c
  4586  0032F2  101C               	iorwf	___lldiv@divisor+1,w,c
  4587  0032F4  101D               	iorwf	___lldiv@divisor+2,w,c
  4588  0032F6  B4D8               	btfsc	status,2,c
  4589  0032F8  D02A               	goto	l1162
  4590  0032FA  0E01               	movlw	1
  4591  0032FC  6E23               	movwf	___lldiv@counter,c
  4592  0032FE  D006               	goto	l4984
  4593  003300                     l4982:
  4594  003300  90D8               	bcf	status,0,c
  4595  003302  361B               	rlcf	___lldiv@divisor,f,c
  4596  003304  361C               	rlcf	___lldiv@divisor+1,f,c
  4597  003306  361D               	rlcf	___lldiv@divisor+2,f,c
  4598  003308  361E               	rlcf	___lldiv@divisor+3,f,c
  4599  00330A  2A23               	incf	___lldiv@counter,f,c
  4600  00330C                     l4984:
  4601  00330C  AE1E               	btfss	___lldiv@divisor+3,7,c
  4602  00330E  D7F8               	goto	l4982
  4603  003310                     l4986:
  4604  003310  90D8               	bcf	status,0,c
  4605  003312  361F               	rlcf	___lldiv@quotient,f,c
  4606  003314  3620               	rlcf	___lldiv@quotient+1,f,c
  4607  003316  3621               	rlcf	___lldiv@quotient+2,f,c
  4608  003318  3622               	rlcf	___lldiv@quotient+3,f,c
  4609  00331A  501B               	movf	___lldiv@divisor,w,c
  4610  00331C  5C17               	subwf	___lldiv@dividend,w,c
  4611  00331E  501C               	movf	___lldiv@divisor+1,w,c
  4612  003320  5818               	subwfb	___lldiv@dividend+1,w,c
  4613  003322  501D               	movf	___lldiv@divisor+2,w,c
  4614  003324  5819               	subwfb	___lldiv@dividend+2,w,c
  4615  003326  501E               	movf	___lldiv@divisor+3,w,c
  4616  003328  581A               	subwfb	___lldiv@dividend+3,w,c
  4617  00332A  A0D8               	btfss	status,0,c
  4618  00332C  D009               	goto	l4994
  4619  00332E  501B               	movf	___lldiv@divisor,w,c
  4620  003330  5E17               	subwf	___lldiv@dividend,f,c
  4621  003332  501C               	movf	___lldiv@divisor+1,w,c
  4622  003334  5A18               	subwfb	___lldiv@dividend+1,f,c
  4623  003336  501D               	movf	___lldiv@divisor+2,w,c
  4624  003338  5A19               	subwfb	___lldiv@dividend+2,f,c
  4625  00333A  501E               	movf	___lldiv@divisor+3,w,c
  4626  00333C  5A1A               	subwfb	___lldiv@dividend+3,f,c
  4627  00333E  801F               	bsf	___lldiv@quotient,0,c
  4628  003340                     l4994:
  4629  003340  90D8               	bcf	status,0,c
  4630  003342  321E               	rrcf	___lldiv@divisor+3,f,c
  4631  003344  321D               	rrcf	___lldiv@divisor+2,f,c
  4632  003346  321C               	rrcf	___lldiv@divisor+1,f,c
  4633  003348  321B               	rrcf	___lldiv@divisor,f,c
  4634  00334A  2E23               	decfsz	___lldiv@counter,f,c
  4635  00334C  D7E1               	goto	l4986
  4636  00334E                     l1162:
  4637  00334E  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  4638  003352  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  4639  003356  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  4640  00335A  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  4641  00335E  0012               	return	
  4642  003360                     __end_of___lldiv:
  4643                           	opt stack 0
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodh	equ	0xFF4
  4649                           prodl	equ	0xFF3
  4650                           intcon	equ	0xFF2
  4651                           postinc0	equ	0xFEE
  4652                           wreg	equ	0xFE8
  4653                           indf2	equ	0xFDF
  4654                           postinc2	equ	0xFDE
  4655                           postdec2	equ	0xFDD
  4656                           fsr2h	equ	0xFDA
  4657                           fsr2l	equ	0xFD9
  4658                           status	equ	0xFD8
  4659                           
  4660 ;; *************** function ___fttol *****************
  4661 ;; Defined at:
  4662 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;  f1              3   19[BANK0 ] float 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  lval            4   29[BANK0 ] unsigned long 
  4667 ;;  exp1            1   33[BANK0 ] unsigned char 
  4668 ;;  sign1           1   28[BANK0 ] unsigned char 
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  4   19[BANK0 ] long 
  4671 ;; Registers used:
  4672 ;;		wreg, status,2, status,0
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4678 ;;      Params:         0       4       0       0       0       0       0
  4679 ;;      Locals:         0       6       0       0       0       0       0
  4680 ;;      Temps:          0       5       0       0       0       0       0
  4681 ;;      Totals:         0      15       0       0       0       0       0
  4682 ;;Total ram usage:       15 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    4
  4685 ;; This function calls:
  4686 ;;		Nothing
  4687 ;; This function is called by:
  4688 ;;		_printf
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           	psect	text12
  4693  001FA0                     __ptext12:
  4694                           	opt stack 0
  4695  001FA0                     ___fttol:
  4696                           	opt stack 25
  4697                           
  4698                           ;incstack = 0
  4699  001FA0  0100               	movlb	0	; () banked
  4700  001FA2  C0C1  F0C3         	movff	___fttol@f1+2,??___fttol
  4701  001FA6  0100               	movlb	0	; () banked
  4702  001FA8  6BC4               	clrf	(??___fttol+1)& (0+255),b
  4703  001FAA  6BC5               	clrf	(??___fttol+2)& (0+255),b
  4704  001FAC  0100               	movlb	0	; () banked
  4705  001FAE  35C0               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4706  001FB0  0100               	movlb	0	; () banked
  4707  001FB2  37C3               	rlcf	??___fttol& (0+255),f,b
  4708  001FB4  E301               	bnc	u5081
  4709  001FB6  81C4               	bsf	(??___fttol+1)& (0+255),0,b
  4710  001FB8                     u5081:
  4711  001FB8  0100               	movlb	0	; () banked
  4712  001FBA  51C3               	movf	??___fttol& (0+255),w,b
  4713  001FBC  0100               	movlb	0	; () banked
  4714  001FBE  6FCD               	movwf	___fttol@exp1& (0+255),b
  4715  001FC0  0100               	movlb	0	; () banked
  4716  001FC2  67CD               	tstfsz	___fttol@exp1& (0+255),b
  4717  001FC4  D00D               	goto	l4936
  4718                           
  4719                           ; BSR set to: 0
  4720  001FC6  0E00               	movlw	0
  4721  001FC8  0100               	movlb	0	; () banked
  4722  001FCA  6FBF               	movwf	?___fttol& (0+255),b
  4723  001FCC  0E00               	movlw	0
  4724  001FCE  0100               	movlb	0	; () banked
  4725  001FD0  6FC0               	movwf	(?___fttol+1)& (0+255),b
  4726  001FD2  0E00               	movlw	0
  4727  001FD4  0100               	movlb	0	; () banked
  4728  001FD6  6FC1               	movwf	(?___fttol+2)& (0+255),b
  4729  001FD8  0E00               	movlw	0
  4730  001FDA  0100               	movlb	0	; () banked
  4731  001FDC  6FC2               	movwf	(?___fttol+3)& (0+255),b
  4732  001FDE  0012               	return	
  4733  001FE0                     l4936:
  4734                           
  4735                           ; BSR set to: 0
  4736  001FE0  0E17               	movlw	23
  4737  001FE2  0100               	movlb	0	; () banked
  4738  001FE4  6FC3               	movwf	??___fttol& (0+255),b
  4739  001FE6  0100               	movlb	0	; () banked
  4740  001FE8  C0BF  F0C4         	movff	___fttol@f1,??___fttol+1
  4741  001FEC  0100               	movlb	0	; () banked
  4742  001FEE  C0C0  F0C5         	movff	___fttol@f1+1,??___fttol+2
  4743  001FF2  0100               	movlb	0	; () banked
  4744  001FF4  C0C1  F0C6         	movff	___fttol@f1+2,??___fttol+3
  4745  001FF8  0100               	movlb	0	; () banked
  4746  001FFA  29C3               	incf	??___fttol& (0+255),w,b
  4747  001FFC  0100               	movlb	0	; () banked
  4748  001FFE  6FC7               	movwf	(??___fttol+4)& (0+255),b
  4749  002000  D005               	goto	u5100
  4750  002002                     u5105:
  4751  002002  0100               	movlb	0	; () banked
  4752  002004  90D8               	bcf	status,0,c
  4753  002006  33C6               	rrcf	(??___fttol+3)& (0+255),f,b
  4754  002008  33C5               	rrcf	(??___fttol+2)& (0+255),f,b
  4755  00200A  33C4               	rrcf	(??___fttol+1)& (0+255),f,b
  4756  00200C                     u5100:
  4757  00200C  0100               	movlb	0	; () banked
  4758  00200E  2FC7               	decfsz	(??___fttol+4)& (0+255),f,b
  4759  002010  D7F8               	goto	u5105
  4760  002012  0100               	movlb	0	; () banked
  4761  002014  51C4               	movf	(??___fttol+1)& (0+255),w,b
  4762  002016  0100               	movlb	0	; () banked
  4763  002018  6FC8               	movwf	___fttol@sign1& (0+255),b
  4764                           
  4765                           ; BSR set to: 0
  4766  00201A  0100               	movlb	0	; () banked
  4767  00201C  8FC0               	bsf	(___fttol@f1+1)& (0+255),7,b
  4768                           
  4769                           ; BSR set to: 0
  4770  00201E  0EFF               	movlw	255
  4771  002020  0100               	movlb	0	; () banked
  4772  002022  17BF               	andwf	___fttol@f1& (0+255),f,b
  4773  002024  0EFF               	movlw	255
  4774  002026  0100               	movlb	0	; () banked
  4775  002028  17C0               	andwf	(___fttol@f1+1)& (0+255),f,b
  4776  00202A  0E00               	movlw	0
  4777  00202C  0100               	movlb	0	; () banked
  4778  00202E  17C1               	andwf	(___fttol@f1+2)& (0+255),f,b
  4779                           
  4780                           ; BSR set to: 0
  4781  002030  0100               	movlb	0	; () banked
  4782  002032  51BF               	movf	___fttol@f1& (0+255),w,b
  4783  002034  0100               	movlb	0	; () banked
  4784  002036  6FC9               	movwf	___fttol@lval& (0+255),b
  4785  002038  0100               	movlb	0	; () banked
  4786  00203A  51C0               	movf	(___fttol@f1+1)& (0+255),w,b
  4787  00203C  0100               	movlb	0	; () banked
  4788  00203E  6FCA               	movwf	(___fttol@lval+1)& (0+255),b
  4789  002040  0100               	movlb	0	; () banked
  4790  002042  51C1               	movf	(___fttol@f1+2)& (0+255),w,b
  4791  002044  0100               	movlb	0	; () banked
  4792  002046  6FCB               	movwf	(___fttol@lval+2)& (0+255),b
  4793  002048  0100               	movlb	0	; () banked
  4794  00204A  6BCC               	clrf	(___fttol@lval+3)& (0+255),b
  4795                           
  4796                           ; BSR set to: 0
  4797  00204C  0E8E               	movlw	142
  4798  00204E  0100               	movlb	0	; () banked
  4799  002050  5FCD               	subwf	___fttol@exp1& (0+255),f,b
  4800                           
  4801                           ; BSR set to: 0
  4802  002052  0100               	movlb	0	; () banked
  4803  002054  AFCD               	btfss	___fttol@exp1& (0+255),7,b
  4804  002056  D026               	goto	l4958
  4805                           
  4806                           ; BSR set to: 0
  4807  002058  0100               	movlb	0	; () banked
  4808  00205A  51CD               	movf	___fttol@exp1& (0+255),w,b
  4809  00205C  0A80               	xorlw	128
  4810  00205E  0100               	movlb	0	; () banked
  4811  002060  6FC3               	movwf	??___fttol& (0+255),b
  4812  002062  0EF1               	movlw	241
  4813  002064  0A80               	xorlw	128
  4814  002066  0100               	movlb	0	; () banked
  4815  002068  5DC3               	subwf	??___fttol& (0+255),w,b
  4816  00206A  B0D8               	btfsc	status,0,c
  4817  00206C  D00D               	goto	l4954
  4818                           
  4819                           ; BSR set to: 0
  4820  00206E  0E00               	movlw	0
  4821  002070  0100               	movlb	0	; () banked
  4822  002072  6FBF               	movwf	?___fttol& (0+255),b
  4823  002074  0E00               	movlw	0
  4824  002076  0100               	movlb	0	; () banked
  4825  002078  6FC0               	movwf	(?___fttol+1)& (0+255),b
  4826  00207A  0E00               	movlw	0
  4827  00207C  0100               	movlb	0	; () banked
  4828  00207E  6FC1               	movwf	(?___fttol+2)& (0+255),b
  4829  002080  0E00               	movlw	0
  4830  002082  0100               	movlb	0	; () banked
  4831  002084  6FC2               	movwf	(?___fttol+3)& (0+255),b
  4832  002086  0012               	return	
  4833  002088                     l4954:
  4834                           
  4835                           ; BSR set to: 0
  4836  002088  0100               	movlb	0	; () banked
  4837  00208A  90D8               	bcf	status,0,c
  4838  00208C  0100               	movlb	0	; () banked
  4839  00208E  33CC               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4840  002090  0100               	movlb	0	; () banked
  4841  002092  33CB               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4842  002094  0100               	movlb	0	; () banked
  4843  002096  33CA               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4844  002098  0100               	movlb	0	; () banked
  4845  00209A  33C9               	rrcf	___fttol@lval& (0+255),f,b
  4846                           
  4847                           ; BSR set to: 0
  4848  00209C  0100               	movlb	0	; () banked
  4849  00209E  3FCD               	incfsz	___fttol@exp1& (0+255),f,b
  4850  0020A0  D7F3               	goto	l4954
  4851  0020A2  D020               	goto	l4968
  4852  0020A4                     l4958:
  4853                           
  4854                           ; BSR set to: 0
  4855  0020A4  0E17               	movlw	23
  4856  0020A6  0100               	movlb	0	; () banked
  4857  0020A8  65CD               	cpfsgt	___fttol@exp1& (0+255),b
  4858  0020AA  D019               	goto	l4966
  4859                           
  4860                           ; BSR set to: 0
  4861  0020AC  0E00               	movlw	0
  4862  0020AE  0100               	movlb	0	; () banked
  4863  0020B0  6FBF               	movwf	?___fttol& (0+255),b
  4864  0020B2  0E00               	movlw	0
  4865  0020B4  0100               	movlb	0	; () banked
  4866  0020B6  6FC0               	movwf	(?___fttol+1)& (0+255),b
  4867  0020B8  0E00               	movlw	0
  4868  0020BA  0100               	movlb	0	; () banked
  4869  0020BC  6FC1               	movwf	(?___fttol+2)& (0+255),b
  4870  0020BE  0E00               	movlw	0
  4871  0020C0  0100               	movlb	0	; () banked
  4872  0020C2  6FC2               	movwf	(?___fttol+3)& (0+255),b
  4873  0020C4  0012               	return	
  4874  0020C6                     l4964:
  4875                           
  4876                           ; BSR set to: 0
  4877  0020C6  0100               	movlb	0	; () banked
  4878  0020C8  90D8               	bcf	status,0,c
  4879  0020CA  0100               	movlb	0	; () banked
  4880  0020CC  37C9               	rlcf	___fttol@lval& (0+255),f,b
  4881  0020CE  0100               	movlb	0	; () banked
  4882  0020D0  37CA               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4883  0020D2  0100               	movlb	0	; () banked
  4884  0020D4  37CB               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4885  0020D6  0100               	movlb	0	; () banked
  4886  0020D8  37CC               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4887  0020DA  0100               	movlb	0	; () banked
  4888  0020DC  07CD               	decf	___fttol@exp1& (0+255),f,b
  4889  0020DE                     l4966:
  4890                           
  4891                           ; BSR set to: 0
  4892  0020DE  0100               	movlb	0	; () banked
  4893  0020E0  67CD               	tstfsz	___fttol@exp1& (0+255),b
  4894  0020E2  D7F1               	goto	l4964
  4895  0020E4                     l4968:
  4896                           
  4897                           ; BSR set to: 0
  4898  0020E4  0100               	movlb	0	; () banked
  4899  0020E6  51C8               	movf	___fttol@sign1& (0+255),w,b
  4900  0020E8  B4D8               	btfsc	status,2,c
  4901  0020EA  D00F               	goto	l4972
  4902                           
  4903                           ; BSR set to: 0
  4904  0020EC  0100               	movlb	0	; () banked
  4905  0020EE  1FCC               	comf	(___fttol@lval+3)& (0+255),f,b
  4906  0020F0  0100               	movlb	0	; () banked
  4907  0020F2  1FCB               	comf	(___fttol@lval+2)& (0+255),f,b
  4908  0020F4  0100               	movlb	0	; () banked
  4909  0020F6  1FCA               	comf	(___fttol@lval+1)& (0+255),f,b
  4910  0020F8  0100               	movlb	0	; () banked
  4911  0020FA  6DC9               	negf	___fttol@lval& (0+255),b
  4912  0020FC  0E00               	movlw	0
  4913  0020FE  0100               	movlb	0	; () banked
  4914  002100  23CA               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4915  002102  0100               	movlb	0	; () banked
  4916  002104  23CB               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4917  002106  0100               	movlb	0	; () banked
  4918  002108  23CC               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4919  00210A                     l4972:
  4920                           
  4921                           ; BSR set to: 0
  4922  00210A  C0C9  F0BF         	movff	___fttol@lval,?___fttol
  4923  00210E  C0CA  F0C0         	movff	___fttol@lval+1,?___fttol+1
  4924  002112  C0CB  F0C1         	movff	___fttol@lval+2,?___fttol+2
  4925  002116  C0CC  F0C2         	movff	___fttol@lval+3,?___fttol+3
  4926  00211A  0012               	return	
  4927  00211C                     __end_of___fttol:
  4928                           	opt stack 0
  4929                           tblptru	equ	0xFF8
  4930                           tblptrh	equ	0xFF7
  4931                           tblptrl	equ	0xFF6
  4932                           tablat	equ	0xFF5
  4933                           prodh	equ	0xFF4
  4934                           prodl	equ	0xFF3
  4935                           intcon	equ	0xFF2
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           indf2	equ	0xFDF
  4939                           postinc2	equ	0xFDE
  4940                           postdec2	equ	0xFDD
  4941                           fsr2h	equ	0xFDA
  4942                           fsr2l	equ	0xFD9
  4943                           status	equ	0xFD8
  4944                           
  4945 ;; *************** function ___ftneg *****************
  4946 ;; Defined at:
  4947 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  f1              3   22[COMRAM] float 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;		None
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  3   22[COMRAM] float 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4961 ;;      Params:         3       0       0       0       0       0       0
  4962 ;;      Locals:         0       0       0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0
  4964 ;;      Totals:         3       0       0       0       0       0       0
  4965 ;;Total ram usage:        3 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    4
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_printf
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text13
  4976  003766                     __ptext13:
  4977                           	opt stack 0
  4978  003766                     ___ftneg:
  4979                           	opt stack 25
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;incstack = 0
  4983  003766  0E7F               	movlw	127
  4984  003768  1419               	andwf	___ftneg@f1+2,w,c
  4985  00376A  1018               	iorwf	___ftneg@f1+1,w,c
  4986  00376C  1017               	iorwf	___ftneg@f1,w,c
  4987  00376E  B4D8               	btfsc	status,2,c
  4988  003770  D006               	goto	l1113
  4989  003772  0E00               	movlw	0
  4990  003774  1A17               	xorwf	___ftneg@f1,f,c
  4991  003776  0E00               	movlw	0
  4992  003778  1A18               	xorwf	___ftneg@f1+1,f,c
  4993  00377A  0E80               	movlw	128
  4994  00377C  1A19               	xorwf	___ftneg@f1+2,f,c
  4995  00377E                     l1113:
  4996  00377E  C017  F017         	movff	___ftneg@f1,?___ftneg
  4997  003782  C018  F018         	movff	___ftneg@f1+1,?___ftneg+1
  4998  003786  C019  F019         	movff	___ftneg@f1+2,?___ftneg+2
  4999  00378A  0012               	return	
  5000  00378C                     __end_of___ftneg:
  5001                           	opt stack 0
  5002                           tblptru	equ	0xFF8
  5003                           tblptrh	equ	0xFF7
  5004                           tblptrl	equ	0xFF6
  5005                           tablat	equ	0xFF5
  5006                           prodh	equ	0xFF4
  5007                           prodl	equ	0xFF3
  5008                           intcon	equ	0xFF2
  5009                           postinc0	equ	0xFEE
  5010                           wreg	equ	0xFE8
  5011                           indf2	equ	0xFDF
  5012                           postinc2	equ	0xFDE
  5013                           postdec2	equ	0xFDD
  5014                           fsr2h	equ	0xFDA
  5015                           fsr2l	equ	0xFD9
  5016                           status	equ	0xFD8
  5017                           
  5018 ;; *************** function _Temp_Fault *****************
  5019 ;; Defined at:
  5020 ;;		line 12 in file "Tempeture.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;		None
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  i               2    1[BANK0 ] int 
  5025 ;;  fault           1    0[BANK0 ] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      unsigned char 
  5028 ;; Registers used:
  5029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5035 ;;      Params:         0       0       0       0       0       0       0
  5036 ;;      Locals:         0       3       0       0       0       0       0
  5037 ;;      Temps:          0       0       0       0       0       0       0
  5038 ;;      Totals:         0       3       0       0       0       0       0
  5039 ;;Total ram usage:        3 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    5
  5042 ;; This function calls:
  5043 ;;		___ftge
  5044 ;;		___wmul
  5045 ;; This function is called by:
  5046 ;;		_main
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text14
  5051  003360                     __ptext14:
  5052                           	opt stack 0
  5053  003360                     _Temp_Fault:
  5054                           	opt stack 25
  5055                           
  5056                           ;Tempeture.c: 15: char fault = 0;
  5057                           
  5058                           ;incstack = 0
  5059  003360  0E00               	movlw	0
  5060  003362  0100               	movlb	0	; () banked
  5061  003364  6FAC               	movwf	Temp_Fault@fault& (0+255),b
  5062                           
  5063                           ;Tempeture.c: 16: for(int i = 0;i<9;i++)
  5064  003366  0E00               	movlw	0
  5065  003368  0100               	movlb	0	; () banked
  5066  00336A  6FAE               	movwf	(Temp_Fault@i+1)& (0+255),b
  5067  00336C  0E00               	movlw	0
  5068  00336E  0100               	movlb	0	; () banked
  5069  003370  6FAD               	movwf	Temp_Fault@i& (0+255),b
  5070  003372                     
  5071                           ; BSR set to: 0
  5072  003372  0100               	movlb	0	; () banked
  5073  003374  51AE               	movf	(Temp_Fault@i+1)& (0+255),w,b
  5074  003376  0A80               	xorlw	128
  5075  003378  0F80               	addlw	-128
  5076  00337A  0E09               	movlw	9
  5077  00337C  B4D8               	btfsc	status,2,c
  5078  00337E  5DAD               	subwf	Temp_Fault@i& (0+255),w,b
  5079  003380  B0D8               	btfsc	status,0,c
  5080  003382  0012               	return	
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;Tempeture.c: 17: {
  5084                           ;Tempeture.c: 18: if (60.5 > Temp_DegF[i])
  5085                           
  5086                           ; BSR set to: 0
  5087                           
  5088                           ; BSR set to: 0
  5089  003384  C0AD  F025         	movff	Temp_Fault@i,___wmul@multiplier
  5090  003388  C0AE  F026         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  5091  00338C  0E00               	movlw	0
  5092  00338E  6E28               	movwf	___wmul@multiplicand+1,c
  5093  003390  0E03               	movlw	3
  5094  003392  6E27               	movwf	___wmul@multiplicand,c
  5095  003394  ECC6  F01B         	call	___wmul	;wreg free
  5096  003398  0101               	movlb	1	; () banked
  5097  00339A  0E6E               	movlw	low _Temp_DegF
  5098  00339C  2425               	addwf	?___wmul,w,c
  5099  00339E  6ED9               	movwf	fsr2l,c
  5100  0033A0  0101               	movlb	1	; () banked
  5101  0033A2  0E01               	movlw	high _Temp_DegF
  5102  0033A4  2026               	addwfc	?___wmul+1,w,c
  5103  0033A6  6EDA               	movwf	fsr2h,c
  5104  0033A8  CFDE F02B          	movff	postinc2,___ftge@ff1
  5105  0033AC  CFDE F02C          	movff	postinc2,___ftge@ff1+1
  5106  0033B0  CFDD F02D          	movff	postdec2,___ftge@ff1+2
  5107  0033B4  0E00               	movlw	0
  5108  0033B6  6E2E               	movwf	___ftge@ff2,c
  5109  0033B8  0E72               	movlw	114
  5110  0033BA  6E2F               	movwf	___ftge@ff2+1,c
  5111  0033BC  0E42               	movlw	66
  5112  0033BE  6E30               	movwf	___ftge@ff2+2,c
  5113  0033C0  EC27  F019         	call	___ftge	;wreg free
  5114  0033C4  B0D8               	btfsc	status,0,c
  5115  0033C6  D003               	goto	l5064
  5116                           
  5117                           ;Tempeture.c: 19: {
  5118                           ;Tempeture.c: 20: fault = 1;
  5119  0033C8  0E01               	movlw	1
  5120  0033CA  0100               	movlb	0	; () banked
  5121  0033CC  6FAC               	movwf	Temp_Fault@fault& (0+255),b
  5122  0033CE                     l5064:
  5123  0033CE  0100               	movlb	0	; () banked
  5124  0033D0  4BAD               	infsnz	Temp_Fault@i& (0+255),f,b
  5125  0033D2  2BAE               	incf	(Temp_Fault@i+1)& (0+255),f,b
  5126  0033D4  D7CE               	goto	L8
  5127  0033D6                     __end_of_Temp_Fault:
  5128                           	opt stack 0
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           prodh	equ	0xFF4
  5134                           prodl	equ	0xFF3
  5135                           intcon	equ	0xFF2
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           indf2	equ	0xFDF
  5139                           postinc2	equ	0xFDE
  5140                           postdec2	equ	0xFDD
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _Temp_Convert *****************
  5146 ;; Defined at:
  5147 ;;		line 50 in file "Tempeture.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  steinhart       3   57[BANK0 ] float 
  5152 ;;  x               2   55[BANK0 ] int 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;		None               void
  5155 ;; Registers used:
  5156 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5162 ;;      Params:         0       0       0       0       0       0       0
  5163 ;;      Locals:         0       9       0       0       0       0       0
  5164 ;;      Temps:          0       2       0       0       0       0       0
  5165 ;;      Totals:         0      11       0       0       0       0       0
  5166 ;;Total ram usage:       11 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    8
  5169 ;; This function calls:
  5170 ;;		_Temp_Filter
  5171 ;;		___awdiv
  5172 ;;		___awtoft
  5173 ;;		___ftadd
  5174 ;;		___ftdiv
  5175 ;;		___ftmul
  5176 ;;		___ftsub
  5177 ;;		___wmul
  5178 ;;		_log
  5179 ;; This function is called by:
  5180 ;;		_main
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text15
  5185  001D98                     __ptext15:
  5186                           	opt stack 0
  5187  001D98                     _Temp_Convert:
  5188                           	opt stack 22
  5189                           
  5190                           ;Tempeture.c: 52: int x;
  5191                           ;Tempeture.c: 53: float steinhart;
  5192                           ;Tempeture.c: 54: for(x = 0; x < 10; x++)
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;incstack = 0
  5196  001D98  0E00               	movlw	0
  5197  001D9A  0100               	movlb	0	; () banked
  5198  001D9C  6FE4               	movwf	(Temp_Convert@x+1)& (0+255),b
  5199  001D9E  0E00               	movlw	0
  5200  001DA0  0100               	movlb	0	; () banked
  5201  001DA2  6FE3               	movwf	Temp_Convert@x& (0+255),b
  5202  001DA4                     
  5203                           ; BSR set to: 0
  5204  001DA4  0100               	movlb	0	; () banked
  5205  001DA6  51E4               	movf	(Temp_Convert@x+1)& (0+255),w,b
  5206  001DA8  0A80               	xorlw	128
  5207  001DAA  0F80               	addlw	-128
  5208  001DAC  0E0A               	movlw	10
  5209  001DAE  B4D8               	btfsc	status,2,c
  5210  001DB0  5DE3               	subwf	Temp_Convert@x& (0+255),w,b
  5211  001DB2  B0D8               	btfsc	status,0,c
  5212  001DB4  D0F2               	goto	l5098
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;Tempeture.c: 55: {
  5216                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5217                           
  5218                           ; BSR set to: 0
  5219                           
  5220                           ; BSR set to: 0
  5221  001DB6  0E98               	movlw	low _Temp_Adc
  5222  001DB8  0100               	movlb	0	; () banked
  5223  001DBA  6FDD               	movwf	??_Temp_Convert& (0+255),b
  5224  001DBC  0E00               	movlw	high _Temp_Adc
  5225  001DBE  6FDE               	movwf	(??_Temp_Convert+1)& (0+255),b
  5226  001DC0  90D8               	bcf	status,0,c
  5227  001DC2  0100               	movlb	0	; () banked
  5228  001DC4  35E3               	rlcf	Temp_Convert@x& (0+255),w,b
  5229  001DC6  6ED9               	movwf	fsr2l,c
  5230  001DC8  0100               	movlb	0	; () banked
  5231  001DCA  35E4               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  5232  001DCC  6EDA               	movwf	fsr2h,c
  5233  001DCE  0100               	movlb	0	; () banked
  5234  001DD0  51DD               	movf	??_Temp_Convert& (0+255),w,b
  5235  001DD2  26D9               	addwf	fsr2l,f,c
  5236  001DD4  0100               	movlb	0	; () banked
  5237  001DD6  51DE               	movf	(??_Temp_Convert+1)& (0+255),w,b
  5238  001DD8  22DA               	addwfc	fsr2h,f,c
  5239  001DDA  CFDE F01F          	movff	postinc2,___awdiv@divisor
  5240  001DDE  CFDD F020          	movff	postdec2,___awdiv@divisor+1
  5241  001DE2  0E03               	movlw	3
  5242  001DE4  6E1E               	movwf	___awdiv@dividend+1,c
  5243  001DE6  681D               	setf	___awdiv@dividend,c
  5244  001DE8  EC44  F018         	call	___awdiv	;wreg free
  5245  001DEC  0EFF               	movlw	255
  5246  001DEE  241D               	addwf	?___awdiv,w,c
  5247  001DF0  0100               	movlb	0	; () banked
  5248  001DF2  6FDF               	movwf	_Temp_Convert$1700& (0+255),b
  5249  001DF4  0EFF               	movlw	255
  5250  001DF6  201E               	addwfc	?___awdiv+1,w,c
  5251  001DF8  0100               	movlb	0	; () banked
  5252  001DFA  6FE0               	movwf	(_Temp_Convert$1700+1)& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;Tempeture.c: 55: {
  5256                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5257  001DFC  C0DF  F01F         	movff	_Temp_Convert$1700,___awdiv@divisor
  5258  001E00  C0E0  F020         	movff	_Temp_Convert$1700+1,___awdiv@divisor+1
  5259  001E04  0E27               	movlw	39
  5260  001E06  6E1E               	movwf	___awdiv@dividend+1,c
  5261  001E08  0E10               	movlw	16
  5262  001E0A  6E1D               	movwf	___awdiv@dividend,c
  5263  001E0C  EC44  F018         	call	___awdiv	;wreg free
  5264  001E10  C01D  F0E1         	movff	?___awdiv,_Temp_Convert$1701
  5265  001E14  C01E  F0E2         	movff	?___awdiv+1,_Temp_Convert$1701+1
  5266                           
  5267                           ;Tempeture.c: 55: {
  5268                           ;Tempeture.c: 56: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  5269  001E18  0E27               	movlw	39
  5270  001E1A  6E20               	movwf	___awdiv@divisor+1,c
  5271  001E1C  0E10               	movlw	16
  5272  001E1E  6E1F               	movwf	___awdiv@divisor,c
  5273  001E20  C0E1  F01D         	movff	_Temp_Convert$1701,___awdiv@dividend
  5274  001E24  C0E2  F01E         	movff	_Temp_Convert$1701+1,___awdiv@dividend+1
  5275  001E28  EC44  F018         	call	___awdiv	;wreg free
  5276  001E2C  C01D  F02B         	movff	?___awdiv,___awtoft@c
  5277  001E30  C01E  F02C         	movff	?___awdiv+1,___awtoft@c+1
  5278  001E34  ECBF  F01A         	call	___awtoft	;wreg free
  5279  001E38  C02B  F0E5         	movff	?___awtoft,Temp_Convert@steinhart
  5280  001E3C  C02C  F0E6         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  5281  001E40  C02D  F0E7         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  5282                           
  5283                           ;Tempeture.c: 57: steinhart = log(steinhart);
  5284  001E44  C0E5  F0D8         	movff	Temp_Convert@steinhart,log@x
  5285  001E48  C0E6  F0D9         	movff	Temp_Convert@steinhart+1,log@x+1
  5286  001E4C  C0E7  F0DA         	movff	Temp_Convert@steinhart+2,log@x+2
  5287  001E50  EC06  F012         	call	_log	;wreg free
  5288  001E54  C0D8  F0E5         	movff	?_log,Temp_Convert@steinhart
  5289  001E58  C0D9  F0E6         	movff	?_log+1,Temp_Convert@steinhart+1
  5290  001E5C  C0DA  F0E7         	movff	?_log+2,Temp_Convert@steinhart+2
  5291                           
  5292                           ;Tempeture.c: 58: steinhart /= 3950;
  5293  001E60  C0E5  F01F         	movff	Temp_Convert@steinhart,___ftdiv@f1
  5294  001E64  C0E6  F020         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  5295  001E68  C0E7  F021         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  5296  001E6C  0EE0               	movlw	224
  5297  001E6E  6E22               	movwf	___ftdiv@f2,c
  5298  001E70  0E76               	movlw	118
  5299  001E72  6E23               	movwf	___ftdiv@f2+1,c
  5300  001E74  0E45               	movlw	69
  5301  001E76  6E24               	movwf	___ftdiv@f2+2,c
  5302  001E78  EC59  F016         	call	___ftdiv	;wreg free
  5303  001E7C  C01F  F0E5         	movff	?___ftdiv,Temp_Convert@steinhart
  5304  001E80  C020  F0E6         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5305  001E84  C021  F0E7         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5306                           
  5307                           ;Tempeture.c: 59: steinhart += 1.0 / (25 + 273.15);
  5308  001E88  C0E5  F0C2         	movff	Temp_Convert@steinhart,___ftadd@f1
  5309  001E8C  C0E6  F0C3         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  5310  001E90  C0E7  F0C4         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  5311  001E94  0ECF               	movlw	207
  5312  001E96  0100               	movlb	0	; () banked
  5313  001E98  6FC5               	movwf	___ftadd@f2& (0+255),b
  5314  001E9A  0E5B               	movlw	91
  5315  001E9C  0100               	movlb	0	; () banked
  5316  001E9E  6FC6               	movwf	(___ftadd@f2+1)& (0+255),b
  5317  001EA0  0E3B               	movlw	59
  5318  001EA2  0100               	movlb	0	; () banked
  5319  001EA4  6FC7               	movwf	(___ftadd@f2+2)& (0+255),b
  5320  001EA6  EC8C  F00D         	call	___ftadd	;wreg free
  5321  001EAA  C0C2  F0E5         	movff	?___ftadd,Temp_Convert@steinhart
  5322  001EAE  C0C3  F0E6         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  5323  001EB2  C0C4  F0E7         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  5324                           
  5325                           ;Tempeture.c: 60: steinhart = 1.0 / steinhart;
  5326  001EB6  0E00               	movlw	0
  5327  001EB8  6E1F               	movwf	___ftdiv@f1,c
  5328  001EBA  0E80               	movlw	128
  5329  001EBC  6E20               	movwf	___ftdiv@f1+1,c
  5330  001EBE  0E3F               	movlw	63
  5331  001EC0  6E21               	movwf	___ftdiv@f1+2,c
  5332  001EC2  C0E5  F022         	movff	Temp_Convert@steinhart,___ftdiv@f2
  5333  001EC6  C0E6  F023         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  5334  001ECA  C0E7  F024         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  5335  001ECE  EC59  F016         	call	___ftdiv	;wreg free
  5336  001ED2  C01F  F0E5         	movff	?___ftdiv,Temp_Convert@steinhart
  5337  001ED6  C020  F0E6         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  5338  001EDA  C021  F0E7         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  5339                           
  5340                           ;Tempeture.c: 61: steinhart -= 273.15;
  5341  001EDE  C0E5  F0CE         	movff	Temp_Convert@steinhart,___ftsub@f1
  5342  001EE2  C0E6  F0CF         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  5343  001EE6  C0E7  F0D0         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  5344  001EEA  0E93               	movlw	147
  5345  001EEC  0100               	movlb	0	; () banked
  5346  001EEE  6FD1               	movwf	___ftsub@f2& (0+255),b
  5347  001EF0  0E88               	movlw	136
  5348  001EF2  0100               	movlb	0	; () banked
  5349  001EF4  6FD2               	movwf	(___ftsub@f2+1)& (0+255),b
  5350  001EF6  0E43               	movlw	67
  5351  001EF8  0100               	movlb	0	; () banked
  5352  001EFA  6FD3               	movwf	(___ftsub@f2+2)& (0+255),b
  5353  001EFC  ECE3  F01A         	call	___ftsub	;wreg free
  5354  001F00  C0CE  F0E5         	movff	?___ftsub,Temp_Convert@steinhart
  5355  001F04  C0CF  F0E6         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  5356  001F08  C0D0  F0E7         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  5357                           
  5358                           ;Tempeture.c: 62: steinhart = (steinhart*1.800) + 32.00;
  5359  001F0C  0E66               	movlw	102
  5360  001F0E  0100               	movlb	0	; () banked
  5361  001F10  6FAF               	movwf	___ftmul@f2& (0+255),b
  5362  001F12  0EE6               	movlw	230
  5363  001F14  0100               	movlb	0	; () banked
  5364  001F16  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  5365  001F18  0E3F               	movlw	63
  5366  001F1A  0100               	movlb	0	; () banked
  5367  001F1C  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  5368  001F1E  C0E5  F0AC         	movff	Temp_Convert@steinhart,___ftmul@f1
  5369  001F22  C0E6  F0AD         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  5370  001F26  C0E7  F0AE         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  5371  001F2A  ECBD  F012         	call	___ftmul	;wreg free
  5372  001F2E  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  5373  001F32  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  5374  001F36  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  5375  001F3A  0E00               	movlw	0
  5376  001F3C  0100               	movlb	0	; () banked
  5377  001F3E  6FC5               	movwf	___ftadd@f2& (0+255),b
  5378  001F40  0E00               	movlw	0
  5379  001F42  0100               	movlb	0	; () banked
  5380  001F44  6FC6               	movwf	(___ftadd@f2+1)& (0+255),b
  5381  001F46  0E42               	movlw	66
  5382  001F48  0100               	movlb	0	; () banked
  5383  001F4A  6FC7               	movwf	(___ftadd@f2+2)& (0+255),b
  5384  001F4C  EC8C  F00D         	call	___ftadd	;wreg free
  5385  001F50  C0C2  F0E5         	movff	?___ftadd,Temp_Convert@steinhart
  5386  001F54  C0C3  F0E6         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  5387  001F58  C0C4  F0E7         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  5388                           
  5389                           ;Tempeture.c: 63: TmpTemp_DegF[x] = steinhart;
  5390  001F5C  C0E3  F025         	movff	Temp_Convert@x,___wmul@multiplier
  5391  001F60  C0E4  F026         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  5392  001F64  0E00               	movlw	0
  5393  001F66  6E28               	movwf	___wmul@multiplicand+1,c
  5394  001F68  0E03               	movlw	3
  5395  001F6A  6E27               	movwf	___wmul@multiplicand,c
  5396  001F6C  ECC6  F01B         	call	___wmul	;wreg free
  5397  001F70  0101               	movlb	1	; () banked
  5398  001F72  0EAA               	movlw	low _TmpTemp_DegF
  5399  001F74  2425               	addwf	?___wmul,w,c
  5400  001F76  6ED9               	movwf	fsr2l,c
  5401  001F78  0101               	movlb	1	; () banked
  5402  001F7A  0E01               	movlw	high _TmpTemp_DegF
  5403  001F7C  2026               	addwfc	?___wmul+1,w,c
  5404  001F7E  6EDA               	movwf	fsr2h,c
  5405  001F80  0100               	movlb	0	; () banked
  5406  001F82  C0E5  FFDE         	movff	Temp_Convert@steinhart,postinc2
  5407  001F86  0100               	movlb	0	; () banked
  5408  001F88  C0E6  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  5409  001F8C  0100               	movlb	0	; () banked
  5410  001F8E  C0E7  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  5411                           
  5412                           ; BSR set to: 0
  5413  001F92  0100               	movlb	0	; () banked
  5414  001F94  4BE3               	infsnz	Temp_Convert@x& (0+255),f,b
  5415  001F96  2BE4               	incf	(Temp_Convert@x+1)& (0+255),f,b
  5416  001F98  D705               	goto	L9
  5417  001F9A                     l5098:
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;Tempeture.c: 64: }
  5421                           ;Tempeture.c: 65: Temp_Filter();
  5422  001F9A  EC8E  F010         	call	_Temp_Filter	;wreg free
  5423  001F9E  0012               	return	
  5424  001FA0                     __end_of_Temp_Convert:
  5425                           	opt stack 0
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           postinc0	equ	0xFEE
  5434                           wreg	equ	0xFE8
  5435                           indf2	equ	0xFDF
  5436                           postinc2	equ	0xFDE
  5437                           postdec2	equ	0xFDD
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function _log *****************
  5443 ;; Defined at:
  5444 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;  x               3   44[BANK0 ] int 
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;  exponent        2   47[BANK0 ] int 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  3   44[BANK0 ] int 
  5451 ;; Registers used:
  5452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5458 ;;      Params:         0       3       0       0       0       0       0
  5459 ;;      Locals:         0       2       0       0       0       0       0
  5460 ;;      Temps:          0       0       0       0       0       0       0
  5461 ;;      Totals:         0       5       0       0       0       0       0
  5462 ;;Total ram usage:        5 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    7
  5465 ;; This function calls:
  5466 ;;		___awtoft
  5467 ;;		___ftadd
  5468 ;;		___ftmul
  5469 ;;		_eval_poly
  5470 ;;		_frexp
  5471 ;; This function is called by:
  5472 ;;		_Temp_Convert
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text16
  5477  00240C                     __ptext16:
  5478                           	opt stack 0
  5479  00240C                     _log:
  5480                           	opt stack 22
  5481                           
  5482                           ;incstack = 0
  5483  00240C  0100               	movlb	0	; () banked
  5484  00240E  51DA               	movf	(log@x+2)& (0+255),w,b
  5485  002410  0A80               	xorlw	128
  5486  002412  0F80               	addlw	128
  5487  002414  E107               	bnz	u4625
  5488  002416  0E00               	movlw	0
  5489  002418  0100               	movlb	0	; () banked
  5490  00241A  5DD9               	subwf	(log@x+1)& (0+255),w,b
  5491  00241C  E103               	bnz	u4625
  5492  00241E  0E00               	movlw	0
  5493  002420  0100               	movlb	0	; () banked
  5494  002422  5DD8               	subwf	log@x& (0+255),w,b
  5495  002424                     u4625:
  5496  002424  B0D8               	btfsc	status,0,c
  5497  002426  D010               	goto	l4638
  5498                           
  5499                           ; BSR set to: 0
  5500  002428  0E00               	movlw	0
  5501  00242A  0100               	movlb	0	; () banked
  5502  00242C  6F97               	movwf	(_errno+1)& (0+255),b
  5503  00242E  0E21               	movlw	33
  5504  002430  0100               	movlb	0	; () banked
  5505  002432  6F96               	movwf	_errno& (0+255),b
  5506  002434  0E00               	movlw	0
  5507  002436  0100               	movlb	0	; () banked
  5508  002438  6FD8               	movwf	?_log& (0+255),b
  5509  00243A  0E00               	movlw	0
  5510  00243C  0100               	movlb	0	; () banked
  5511  00243E  6FD9               	movwf	(?_log+1)& (0+255),b
  5512  002440  0E00               	movlw	0
  5513  002442  0100               	movlb	0	; () banked
  5514  002444  6FDA               	movwf	(?_log+2)& (0+255),b
  5515  002446  0012               	return	
  5516  002448                     l4638:
  5517                           
  5518                           ; BSR set to: 0
  5519  002448  0E7F               	movlw	127
  5520  00244A  0100               	movlb	0	; () banked
  5521  00244C  15DA               	andwf	(log@x+2)& (0+255),w,b
  5522  00244E  0100               	movlb	0	; () banked
  5523  002450  11D9               	iorwf	(log@x+1)& (0+255),w,b
  5524  002452  0100               	movlb	0	; () banked
  5525  002454  11D8               	iorwf	log@x& (0+255),w,b
  5526  002456  A4D8               	btfss	status,2,c
  5527  002458  D010               	goto	l4644
  5528                           
  5529                           ; BSR set to: 0
  5530  00245A  0E00               	movlw	0
  5531  00245C  0100               	movlb	0	; () banked
  5532  00245E  6F97               	movwf	(_errno+1)& (0+255),b
  5533  002460  0E22               	movlw	34
  5534  002462  0100               	movlb	0	; () banked
  5535  002464  6F96               	movwf	_errno& (0+255),b
  5536  002466  0E00               	movlw	0
  5537  002468  0100               	movlb	0	; () banked
  5538  00246A  6FD8               	movwf	?_log& (0+255),b
  5539  00246C  0E00               	movlw	0
  5540  00246E  0100               	movlb	0	; () banked
  5541  002470  6FD9               	movwf	(?_log+1)& (0+255),b
  5542  002472  0E00               	movlw	0
  5543  002474  0100               	movlb	0	; () banked
  5544  002476  6FDA               	movwf	(?_log+2)& (0+255),b
  5545  002478  0012               	return	
  5546  00247A                     l4644:
  5547                           
  5548                           ; BSR set to: 0
  5549  00247A  0E00               	movlw	0
  5550  00247C  0100               	movlb	0	; () banked
  5551  00247E  6FAF               	movwf	___ftmul@f2& (0+255),b
  5552  002480  0E00               	movlw	0
  5553  002482  0100               	movlb	0	; () banked
  5554  002484  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  5555  002486  0E40               	movlw	64
  5556  002488  0100               	movlb	0	; () banked
  5557  00248A  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  5558  00248C  0100               	movlb	0	; () banked
  5559  00248E  0E00               	movlw	high log@exponent
  5560  002490  6E1B               	movwf	frexp@eptr+1,c
  5561  002492  0100               	movlb	0	; () banked
  5562  002494  0EDB               	movlw	low log@exponent
  5563  002496  6E1A               	movwf	frexp@eptr,c
  5564  002498  C0D8  F017         	movff	log@x,frexp@value
  5565  00249C  C0D9  F018         	movff	log@x+1,frexp@value+1
  5566  0024A0  C0DA  F019         	movff	log@x+2,frexp@value+2
  5567  0024A4  EC96  F018         	call	_frexp	;wreg free
  5568  0024A8  C017  F0AC         	movff	?_frexp,___ftmul@f1
  5569  0024AC  C018  F0AD         	movff	?_frexp+1,___ftmul@f1+1
  5570  0024B0  C019  F0AE         	movff	?_frexp+2,___ftmul@f1+2
  5571  0024B4  ECBD  F012         	call	___ftmul	;wreg free
  5572  0024B8  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  5573  0024BC  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  5574  0024C0  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  5575  0024C4  0E00               	movlw	0
  5576  0024C6  0100               	movlb	0	; () banked
  5577  0024C8  6FC5               	movwf	___ftadd@f2& (0+255),b
  5578  0024CA  0E80               	movlw	128
  5579  0024CC  0100               	movlb	0	; () banked
  5580  0024CE  6FC6               	movwf	(___ftadd@f2+1)& (0+255),b
  5581  0024D0  0EBF               	movlw	191
  5582  0024D2  0100               	movlb	0	; () banked
  5583  0024D4  6FC7               	movwf	(___ftadd@f2+2)& (0+255),b
  5584  0024D6  EC8C  F00D         	call	___ftadd	;wreg free
  5585  0024DA  C0C2  F0D8         	movff	?___ftadd,log@x
  5586  0024DE  C0C3  F0D9         	movff	?___ftadd+1,log@x+1
  5587  0024E2  C0C4  F0DA         	movff	?___ftadd+2,log@x+2
  5588  0024E6  0100               	movlb	0	; () banked
  5589  0024E8  07DB               	decf	log@exponent& (0+255),f,b
  5590  0024EA  A0D8               	btfss	status,0,c
  5591  0024EC  07DC               	decf	(log@exponent+1)& (0+255),f,b
  5592                           
  5593                           ; BSR set to: 0
  5594  0024EE  C0D8  F0CE         	movff	log@x,eval_poly@x
  5595  0024F2  C0D9  F0CF         	movff	log@x+1,eval_poly@x+1
  5596  0024F6  C0DA  F0D0         	movff	log@x+2,eval_poly@x+2
  5597  0024FA  0E06               	movlw	high log@coeff
  5598  0024FC  0100               	movlb	0	; () banked
  5599  0024FE  6FD2               	movwf	(eval_poly@d+1)& (0+255),b
  5600  002500  0E77               	movlw	low log@coeff
  5601  002502  0100               	movlb	0	; () banked
  5602  002504  6FD1               	movwf	eval_poly@d& (0+255),b
  5603  002506  0E00               	movlw	0
  5604  002508  0100               	movlb	0	; () banked
  5605  00250A  6FD4               	movwf	(eval_poly@n+1)& (0+255),b
  5606  00250C  0E08               	movlw	8
  5607  00250E  0100               	movlb	0	; () banked
  5608  002510  6FD3               	movwf	eval_poly@n& (0+255),b
  5609  002512  ECE4  F015         	call	_eval_poly	;wreg free
  5610  002516  C0CE  F0D8         	movff	?_eval_poly,log@x
  5611  00251A  C0CF  F0D9         	movff	?_eval_poly+1,log@x+1
  5612  00251E  C0D0  F0DA         	movff	?_eval_poly+2,log@x+2
  5613  002522  0E72               	movlw	114
  5614  002524  0100               	movlb	0	; () banked
  5615  002526  6FAF               	movwf	___ftmul@f2& (0+255),b
  5616  002528  0E31               	movlw	49
  5617  00252A  0100               	movlb	0	; () banked
  5618  00252C  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  5619  00252E  0E3F               	movlw	63
  5620  002530  0100               	movlb	0	; () banked
  5621  002532  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  5622  002534  C0DB  F02B         	movff	log@exponent,___awtoft@c
  5623  002538  C0DC  F02C         	movff	log@exponent+1,___awtoft@c+1
  5624  00253C  ECBF  F01A         	call	___awtoft	;wreg free
  5625  002540  C02B  F0AC         	movff	?___awtoft,___ftmul@f1
  5626  002544  C02C  F0AD         	movff	?___awtoft+1,___ftmul@f1+1
  5627  002548  C02D  F0AE         	movff	?___awtoft+2,___ftmul@f1+2
  5628  00254C  ECBD  F012         	call	___ftmul	;wreg free
  5629  002550  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  5630  002554  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  5631  002558  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  5632  00255C  C0D8  F0C5         	movff	log@x,___ftadd@f2
  5633  002560  C0D9  F0C6         	movff	log@x+1,___ftadd@f2+1
  5634  002564  C0DA  F0C7         	movff	log@x+2,___ftadd@f2+2
  5635  002568  EC8C  F00D         	call	___ftadd	;wreg free
  5636  00256C  C0C2  F0D8         	movff	?___ftadd,?_log
  5637  002570  C0C3  F0D9         	movff	?___ftadd+1,?_log+1
  5638  002574  C0C4  F0DA         	movff	?___ftadd+2,?_log+2
  5639  002578  0012               	return	
  5640  00257A                     __end_of_log:
  5641                           	opt stack 0
  5642                           tblptru	equ	0xFF8
  5643                           tblptrh	equ	0xFF7
  5644                           tblptrl	equ	0xFF6
  5645                           tablat	equ	0xFF5
  5646                           prodh	equ	0xFF4
  5647                           prodl	equ	0xFF3
  5648                           intcon	equ	0xFF2
  5649                           postinc0	equ	0xFEE
  5650                           wreg	equ	0xFE8
  5651                           indf2	equ	0xFDF
  5652                           postinc2	equ	0xFDE
  5653                           postdec2	equ	0xFDD
  5654                           fsr2h	equ	0xFDA
  5655                           fsr2l	equ	0xFD9
  5656                           status	equ	0xFD8
  5657                           
  5658 ;; *************** function _frexp *****************
  5659 ;; Defined at:
  5660 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  value           3   22[COMRAM] int 
  5663 ;;  eptr            2   25[COMRAM] PTR int 
  5664 ;;		 -> log@exponent(2), 
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;		None
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  3   22[COMRAM] PTR int 
  5669 ;; Registers used:
  5670 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5676 ;;      Params:         5       0       0       0       0       0       0
  5677 ;;      Locals:         0       0       0       0       0       0       0
  5678 ;;      Temps:          2       0       0       0       0       0       0
  5679 ;;      Totals:         7       0       0       0       0       0       0
  5680 ;;Total ram usage:        7 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    4
  5683 ;; This function calls:
  5684 ;;		Nothing
  5685 ;; This function is called by:
  5686 ;;		_log
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text17
  5691  00312C                     __ptext17:
  5692                           	opt stack 0
  5693  00312C                     _frexp:
  5694                           	opt stack 24
  5695                           
  5696                           ;incstack = 0
  5697  00312C  0E7F               	movlw	127
  5698  00312E  1419               	andwf	frexp@value+2,w,c
  5699  003130  1018               	iorwf	frexp@value+1,w,c
  5700  003132  1017               	iorwf	frexp@value,w,c
  5701  003134  A4D8               	btfss	status,2,c
  5702  003136  D00F               	goto	l3144
  5703  003138  C01A  FFD9         	movff	frexp@eptr,fsr2l
  5704  00313C  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  5705  003140  0E00               	movlw	0
  5706  003142  6EDE               	movwf	postinc2,c
  5707  003144  0E00               	movlw	0
  5708  003146  6EDD               	movwf	postdec2,c
  5709  003148  0E00               	movlw	0
  5710  00314A  6E17               	movwf	?_frexp,c
  5711  00314C  0E00               	movlw	0
  5712  00314E  6E18               	movwf	?_frexp+1,c
  5713  003150  0E00               	movlw	0
  5714  003152  6E19               	movwf	?_frexp+2,c
  5715  003154  0012               	return	
  5716  003156                     l3144:
  5717  003156  5019               	movf	frexp@value+2,w,c
  5718  003158  0B7F               	andlw	127
  5719  00315A  6E1C               	movwf	??_frexp& (0+255),c
  5720  00315C  6A1D               	clrf	(??_frexp+1)& (0+255),c
  5721  00315E  90D8               	bcf	status,0,c
  5722  003160  361C               	rlcf	??_frexp,f,c
  5723  003162  361D               	rlcf	??_frexp+1,f,c
  5724  003164  C01A  FFD9         	movff	frexp@eptr,fsr2l
  5725  003168  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  5726  00316C  C01C  FFDE         	movff	??_frexp,postinc2
  5727  003170  C01D  FFDD         	movff	??_frexp+1,postdec2
  5728  003174  AE18               	btfss	frexp@value+1,7,c
  5729  003176  D003               	goto	u2550
  5730  003178  6A1C               	clrf	??_frexp& (0+255),c
  5731  00317A  2A1C               	incf	??_frexp& (0+255),f,c
  5732  00317C  D001               	goto	u2558
  5733  00317E                     u2550:
  5734  00317E  6A1C               	clrf	??_frexp& (0+255),c
  5735  003180                     u2558:
  5736  003180  501C               	movf	??_frexp,w,c
  5737  003182  C01A  FFD9         	movff	frexp@eptr,fsr2l
  5738  003186  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  5739  00318A  12DE               	iorwf	postinc2,f,c
  5740  00318C  0E00               	movlw	0
  5741  00318E  12DD               	iorwf	postdec2,f,c
  5742  003190  C01A  FFD9         	movff	frexp@eptr,fsr2l
  5743  003194  C01B  FFDA         	movff	frexp@eptr+1,fsr2h
  5744  003198  0E82               	movlw	130
  5745  00319A  26DE               	addwf	postinc2,f,c
  5746  00319C  0EFF               	movlw	255
  5747  00319E  22DD               	addwfc	postdec2,f,c
  5748  0031A0  8019               	bsf	frexp@value+2,0,c
  5749  0031A2  8219               	bsf	frexp@value+2,1,c
  5750  0031A4  8419               	bsf	frexp@value+2,2,c
  5751  0031A6  8619               	bsf	frexp@value+2,3,c
  5752  0031A8  8819               	bsf	frexp@value+2,4,c
  5753  0031AA  8A19               	bsf	frexp@value+2,5,c
  5754  0031AC  9C19               	bcf	frexp@value+2,6,c
  5755  0031AE  9E18               	bcf	frexp@value+1,7,c
  5756  0031B0  C017  F017         	movff	frexp@value,?_frexp
  5757  0031B4  C018  F018         	movff	frexp@value+1,?_frexp+1
  5758  0031B8  C019  F019         	movff	frexp@value+2,?_frexp+2
  5759  0031BC  0012               	return	
  5760  0031BE                     __end_of_frexp:
  5761                           	opt stack 0
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodh	equ	0xFF4
  5767                           prodl	equ	0xFF3
  5768                           intcon	equ	0xFF2
  5769                           postinc0	equ	0xFEE
  5770                           wreg	equ	0xFE8
  5771                           indf2	equ	0xFDF
  5772                           postinc2	equ	0xFDE
  5773                           postdec2	equ	0xFDD
  5774                           fsr2h	equ	0xFDA
  5775                           fsr2l	equ	0xFD9
  5776                           status	equ	0xFD8
  5777                           
  5778 ;; *************** function _eval_poly *****************
  5779 ;; Defined at:
  5780 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  x               3   34[BANK0 ] PTR int 
  5783 ;;  d               2   37[BANK0 ] PTR const 
  5784 ;;		 -> log@coeff(27), 
  5785 ;;  n               2   39[BANK0 ] int 
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;  res             3   41[BANK0 ] int 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  3   34[BANK0 ] int 
  5790 ;; Registers used:
  5791 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5797 ;;      Params:         0       7       0       0       0       0       0
  5798 ;;      Locals:         0       3       0       0       0       0       0
  5799 ;;      Temps:          2       0       0       0       0       0       0
  5800 ;;      Totals:         2      10       0       0       0       0       0
  5801 ;;Total ram usage:       12 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    6
  5804 ;; This function calls:
  5805 ;;		___ftadd
  5806 ;;		___ftmul
  5807 ;;		___wmul
  5808 ;; This function is called by:
  5809 ;;		_log
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text18
  5814  002BC8                     __ptext18:
  5815                           	opt stack 0
  5816  002BC8                     _eval_poly:
  5817                           	opt stack 22
  5818                           
  5819                           ;incstack = 0
  5820  002BC8  C0D3  F025         	movff	eval_poly@n,___wmul@multiplier
  5821  002BCC  C0D4  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  5822  002BD0  0E00               	movlw	0
  5823  002BD2  6E28               	movwf	___wmul@multiplicand+1,c
  5824  002BD4  0E03               	movlw	3
  5825  002BD6  6E27               	movwf	___wmul@multiplicand,c
  5826  002BD8  ECC6  F01B         	call	___wmul	;wreg free
  5827  002BDC  0100               	movlb	0	; () banked
  5828  002BDE  C0D1  F032         	movff	eval_poly@d,??_eval_poly
  5829  002BE2  0100               	movlb	0	; () banked
  5830  002BE4  C0D2  F033         	movff	eval_poly@d+1,??_eval_poly+1
  5831  002BE8  5025               	movf	?___wmul,w,c
  5832  002BEA  2632               	addwf	??_eval_poly,f,c
  5833  002BEC  5026               	movf	?___wmul+1,w,c
  5834  002BEE  2233               	addwfc	??_eval_poly+1,f,c
  5835  002BF0  C032  FFF6         	movff	??_eval_poly,tblptrl
  5836  002BF4  C033  FFF7         	movff	??_eval_poly+1,tblptrh
  5837  002BF8                     	if	0	;tblptru may be non-zero
  5838  002BF8                     	endif
  5839  002BF8                     	if	0	;tblptru may be non-zero
  5840  002BF8                     	endif
  5841  002BF8  0009               	tblrd		*+
  5842  002BFA  0100               	movlb	0	; () banked
  5843  002BFC  CFF5 F0D5          	movff	tablat,eval_poly@res
  5844  002C00  0009               	tblrd		*+
  5845  002C02  0100               	movlb	0	; () banked
  5846  002C04  CFF5 F0D6          	movff	tablat,eval_poly@res+1
  5847  002C08  000A               	tblrd		*-
  5848  002C0A  0100               	movlb	0	; () banked
  5849  002C0C  CFF5 F0D7          	movff	tablat,eval_poly@res+2
  5850  002C10  D044               	goto	l4576
  5851  002C12                     l4574:
  5852                           
  5853                           ; BSR set to: 0
  5854  002C12  C0D5  F0AF         	movff	eval_poly@res,___ftmul@f2
  5855  002C16  C0D6  F0B0         	movff	eval_poly@res+1,___ftmul@f2+1
  5856  002C1A  C0D7  F0B1         	movff	eval_poly@res+2,___ftmul@f2+2
  5857  002C1E  C0CE  F0AC         	movff	eval_poly@x,___ftmul@f1
  5858  002C22  C0CF  F0AD         	movff	eval_poly@x+1,___ftmul@f1+1
  5859  002C26  C0D0  F0AE         	movff	eval_poly@x+2,___ftmul@f1+2
  5860  002C2A  ECBD  F012         	call	___ftmul	;wreg free
  5861  002C2E  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  5862  002C32  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  5863  002C36  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  5864  002C3A  0E00               	movlw	0
  5865  002C3C  6E28               	movwf	___wmul@multiplicand+1,c
  5866  002C3E  0E03               	movlw	3
  5867  002C40  6E27               	movwf	___wmul@multiplicand,c
  5868  002C42  0100               	movlb	0	; () banked
  5869  002C44  07D3               	decf	eval_poly@n& (0+255),f,b
  5870  002C46  A0D8               	btfss	status,0,c
  5871  002C48  07D4               	decf	(eval_poly@n+1)& (0+255),f,b
  5872  002C4A  C0D3  F025         	movff	eval_poly@n,___wmul@multiplier
  5873  002C4E  C0D4  F026         	movff	eval_poly@n+1,___wmul@multiplier+1
  5874  002C52  ECC6  F01B         	call	___wmul	;wreg free
  5875  002C56  0100               	movlb	0	; () banked
  5876  002C58  C0D1  F032         	movff	eval_poly@d,??_eval_poly
  5877  002C5C  0100               	movlb	0	; () banked
  5878  002C5E  C0D2  F033         	movff	eval_poly@d+1,??_eval_poly+1
  5879  002C62  5025               	movf	?___wmul,w,c
  5880  002C64  2632               	addwf	??_eval_poly,f,c
  5881  002C66  5026               	movf	?___wmul+1,w,c
  5882  002C68  2233               	addwfc	??_eval_poly+1,f,c
  5883  002C6A  C032  FFF6         	movff	??_eval_poly,tblptrl
  5884  002C6E  C033  FFF7         	movff	??_eval_poly+1,tblptrh
  5885  002C72                     	if	0	;tblptru may be non-zero
  5886  002C72                     	endif
  5887  002C72                     	if	0	;tblptru may be non-zero
  5888  002C72                     	endif
  5889  002C72  0009               	tblrd		*+
  5890  002C74  0100               	movlb	0	; () banked
  5891  002C76  CFF5 F0C5          	movff	tablat,___ftadd@f2
  5892  002C7A  0009               	tblrd		*+
  5893  002C7C  0100               	movlb	0	; () banked
  5894  002C7E  CFF5 F0C6          	movff	tablat,___ftadd@f2+1
  5895  002C82  000A               	tblrd		*-
  5896  002C84  0100               	movlb	0	; () banked
  5897  002C86  CFF5 F0C7          	movff	tablat,___ftadd@f2+2
  5898  002C8A  EC8C  F00D         	call	___ftadd	;wreg free
  5899  002C8E  C0C2  F0D5         	movff	?___ftadd,eval_poly@res
  5900  002C92  C0C3  F0D6         	movff	?___ftadd+1,eval_poly@res+1
  5901  002C96  C0C4  F0D7         	movff	?___ftadd+2,eval_poly@res+2
  5902  002C9A                     l4576:
  5903  002C9A  0100               	movlb	0	; () banked
  5904  002C9C  51D4               	movf	(eval_poly@n+1)& (0+255),w,b
  5905  002C9E  11D3               	iorwf	eval_poly@n& (0+255),w,b
  5906  002CA0  A4D8               	btfss	status,2,c
  5907  002CA2  D7B7               	goto	l4574
  5908                           
  5909                           ; BSR set to: 0
  5910  002CA4  C0D5  F0CE         	movff	eval_poly@res,?_eval_poly
  5911  002CA8  C0D6  F0CF         	movff	eval_poly@res+1,?_eval_poly+1
  5912  002CAC  C0D7  F0D0         	movff	eval_poly@res+2,?_eval_poly+2
  5913                           
  5914                           ; BSR set to: 0
  5915  002CB0  0012               	return	
  5916  002CB2                     __end_of_eval_poly:
  5917                           	opt stack 0
  5918                           tblptru	equ	0xFF8
  5919                           tblptrh	equ	0xFF7
  5920                           tblptrl	equ	0xFF6
  5921                           tablat	equ	0xFF5
  5922                           prodh	equ	0xFF4
  5923                           prodl	equ	0xFF3
  5924                           intcon	equ	0xFF2
  5925                           postinc0	equ	0xFEE
  5926                           wreg	equ	0xFE8
  5927                           indf2	equ	0xFDF
  5928                           postinc2	equ	0xFDE
  5929                           postdec2	equ	0xFDD
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function ___ftsub *****************
  5935 ;; Defined at:
  5936 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  f1              3   34[BANK0 ] float 
  5939 ;;  f2              3   37[BANK0 ] float 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  3   34[BANK0 ] float 
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5951 ;;      Params:         0       6       0       0       0       0       0
  5952 ;;      Locals:         0       0       0       0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0
  5954 ;;      Totals:         0       6       0       0       0       0       0
  5955 ;;Total ram usage:        6 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    6
  5958 ;; This function calls:
  5959 ;;		___ftadd
  5960 ;; This function is called by:
  5961 ;;		_Temp_Convert
  5962 ;;		_printf
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           	psect	text19
  5967  0035C6                     __ptext19:
  5968                           	opt stack 0
  5969  0035C6                     ___ftsub:
  5970                           	opt stack 23
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;incstack = 0
  5974  0035C6  0E00               	movlw	0
  5975  0035C8  0100               	movlb	0	; () banked
  5976  0035CA  1BD1               	xorwf	___ftsub@f2& (0+255),f,b
  5977  0035CC  0E00               	movlw	0
  5978  0035CE  0100               	movlb	0	; () banked
  5979  0035D0  1BD2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5980  0035D2  0E80               	movlw	128
  5981  0035D4  0100               	movlb	0	; () banked
  5982  0035D6  1BD3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5983                           
  5984                           ; BSR set to: 0
  5985  0035D8  C0CE  F0C2         	movff	___ftsub@f1,___ftadd@f1
  5986  0035DC  C0CF  F0C3         	movff	___ftsub@f1+1,___ftadd@f1+1
  5987  0035E0  C0D0  F0C4         	movff	___ftsub@f1+2,___ftadd@f1+2
  5988  0035E4  C0D1  F0C5         	movff	___ftsub@f2,___ftadd@f2
  5989  0035E8  C0D2  F0C6         	movff	___ftsub@f2+1,___ftadd@f2+1
  5990  0035EC  C0D3  F0C7         	movff	___ftsub@f2+2,___ftadd@f2+2
  5991  0035F0  EC8C  F00D         	call	___ftadd	;wreg free
  5992  0035F4  C0C2  F0CE         	movff	?___ftadd,?___ftsub
  5993  0035F8  C0C3  F0CF         	movff	?___ftadd+1,?___ftsub+1
  5994  0035FC  C0C4  F0D0         	movff	?___ftadd+2,?___ftsub+2
  5995  003600  0012               	return	
  5996  003602                     __end_of___ftsub:
  5997                           	opt stack 0
  5998                           tblptru	equ	0xFF8
  5999                           tblptrh	equ	0xFF7
  6000                           tblptrl	equ	0xFF6
  6001                           tablat	equ	0xFF5
  6002                           prodh	equ	0xFF4
  6003                           prodl	equ	0xFF3
  6004                           intcon	equ	0xFF2
  6005                           postinc0	equ	0xFEE
  6006                           wreg	equ	0xFE8
  6007                           indf2	equ	0xFDF
  6008                           postinc2	equ	0xFDE
  6009                           postdec2	equ	0xFDD
  6010                           fsr2h	equ	0xFDA
  6011                           fsr2l	equ	0xFD9
  6012                           status	equ	0xFD8
  6013                           
  6014 ;; *************** function ___ftdiv *****************
  6015 ;; Defined at:
  6016 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  f1              3   30[COMRAM] float 
  6019 ;;  f2              3   33[COMRAM] float 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  f3              3   40[COMRAM] float 
  6022 ;;  sign            1   44[COMRAM] unsigned char 
  6023 ;;  exp             1   43[COMRAM] unsigned char 
  6024 ;;  cntr            1   39[COMRAM] unsigned char 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  3   30[COMRAM] float 
  6027 ;; Registers used:
  6028 ;;		wreg, status,2, status,0, cstack
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6034 ;;      Params:         6       0       0       0       0       0       0
  6035 ;;      Locals:         6       0       0       0       0       0       0
  6036 ;;      Temps:          3       0       0       0       0       0       0
  6037 ;;      Totals:        15       0       0       0       0       0       0
  6038 ;;Total ram usage:       15 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:    5
  6041 ;; This function calls:
  6042 ;;		___ftpack
  6043 ;; This function is called by:
  6044 ;;		_Temp_Convert
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text20
  6049  002CB2                     __ptext20:
  6050                           	opt stack 0
  6051  002CB2                     ___ftdiv:
  6052                           	opt stack 24
  6053                           
  6054                           ;incstack = 0
  6055  002CB2  C021  F025         	movff	___ftdiv@f1+2,??___ftdiv
  6056  002CB6  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  6057  002CB8  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  6058  002CBA  3420               	rlcf	___ftdiv@f1+1,w,c
  6059  002CBC  3625               	rlcf	??___ftdiv& (0+255),f,c
  6060  002CBE  E301               	bnc	u4991
  6061  002CC0  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  6062  002CC2                     u4991:
  6063  002CC2  5025               	movf	??___ftdiv,w,c
  6064  002CC4  6E2C               	movwf	___ftdiv@exp,c
  6065  002CC6  662C               	tstfsz	___ftdiv@exp& (0+255),c
  6066  002CC8  D007               	goto	l4862
  6067  002CCA  0E00               	movlw	0
  6068  002CCC  6E1F               	movwf	?___ftdiv,c
  6069  002CCE  0E00               	movlw	0
  6070  002CD0  6E20               	movwf	?___ftdiv+1,c
  6071  002CD2  0E00               	movlw	0
  6072  002CD4  6E21               	movwf	?___ftdiv+2,c
  6073  002CD6  0012               	return	
  6074  002CD8                     l4862:
  6075  002CD8  C024  F025         	movff	___ftdiv@f2+2,??___ftdiv
  6076  002CDC  6A26               	clrf	(??___ftdiv+1)& (0+255),c
  6077  002CDE  6A27               	clrf	(??___ftdiv+2)& (0+255),c
  6078  002CE0  3423               	rlcf	___ftdiv@f2+1,w,c
  6079  002CE2  3625               	rlcf	??___ftdiv& (0+255),f,c
  6080  002CE4  E301               	bnc	u5011
  6081  002CE6  8026               	bsf	(??___ftdiv+1)& (0+255),0,c
  6082  002CE8                     u5011:
  6083  002CE8  5025               	movf	??___ftdiv,w,c
  6084  002CEA  6E2D               	movwf	___ftdiv@sign,c
  6085  002CEC  662D               	tstfsz	___ftdiv@sign& (0+255),c
  6086  002CEE  D007               	goto	l4868
  6087  002CF0  0E00               	movlw	0
  6088  002CF2  6E1F               	movwf	?___ftdiv,c
  6089  002CF4  0E00               	movlw	0
  6090  002CF6  6E20               	movwf	?___ftdiv+1,c
  6091  002CF8  0E00               	movlw	0
  6092  002CFA  6E21               	movwf	?___ftdiv+2,c
  6093  002CFC  0012               	return	
  6094  002CFE                     l4868:
  6095  002CFE  0E00               	movlw	0
  6096  002D00  6E29               	movwf	___ftdiv@f3,c
  6097  002D02  0E00               	movlw	0
  6098  002D04  6E2A               	movwf	___ftdiv@f3+1,c
  6099  002D06  0E00               	movlw	0
  6100  002D08  6E2B               	movwf	___ftdiv@f3+2,c
  6101  002D0A  502D               	movf	___ftdiv@sign,w,c
  6102  002D0C  0F89               	addlw	137
  6103  002D0E  5E2C               	subwf	___ftdiv@exp,f,c
  6104  002D10  C021  F02D         	movff	___ftdiv@f1+2,___ftdiv@sign
  6105  002D14  5024               	movf	___ftdiv@f2+2,w,c
  6106  002D16  1A2D               	xorwf	___ftdiv@sign,f,c
  6107  002D18  0E80               	movlw	128
  6108  002D1A  162D               	andwf	___ftdiv@sign,f,c
  6109  002D1C  8E20               	bsf	___ftdiv@f1+1,7,c
  6110  002D1E  0EFF               	movlw	255
  6111  002D20  161F               	andwf	___ftdiv@f1,f,c
  6112  002D22  0EFF               	movlw	255
  6113  002D24  1620               	andwf	___ftdiv@f1+1,f,c
  6114  002D26  0E00               	movlw	0
  6115  002D28  1621               	andwf	___ftdiv@f1+2,f,c
  6116  002D2A  8E23               	bsf	___ftdiv@f2+1,7,c
  6117  002D2C  0EFF               	movlw	255
  6118  002D2E  1622               	andwf	___ftdiv@f2,f,c
  6119  002D30  0EFF               	movlw	255
  6120  002D32  1623               	andwf	___ftdiv@f2+1,f,c
  6121  002D34  0E00               	movlw	0
  6122  002D36  1624               	andwf	___ftdiv@f2+2,f,c
  6123  002D38  0E18               	movlw	24
  6124  002D3A  6E28               	movwf	___ftdiv@cntr,c
  6125  002D3C                     l4888:
  6126  002D3C  90D8               	bcf	status,0,c
  6127  002D3E  3629               	rlcf	___ftdiv@f3,f,c
  6128  002D40  362A               	rlcf	___ftdiv@f3+1,f,c
  6129  002D42  362B               	rlcf	___ftdiv@f3+2,f,c
  6130  002D44  5022               	movf	___ftdiv@f2,w,c
  6131  002D46  5C1F               	subwf	___ftdiv@f1,w,c
  6132  002D48  5023               	movf	___ftdiv@f2+1,w,c
  6133  002D4A  5820               	subwfb	___ftdiv@f1+1,w,c
  6134  002D4C  5024               	movf	___ftdiv@f2+2,w,c
  6135  002D4E  5821               	subwfb	___ftdiv@f1+2,w,c
  6136  002D50  A0D8               	btfss	status,0,c
  6137  002D52  D007               	goto	l1074
  6138  002D54  5022               	movf	___ftdiv@f2,w,c
  6139  002D56  5E1F               	subwf	___ftdiv@f1,f,c
  6140  002D58  5023               	movf	___ftdiv@f2+1,w,c
  6141  002D5A  5A20               	subwfb	___ftdiv@f1+1,f,c
  6142  002D5C  5024               	movf	___ftdiv@f2+2,w,c
  6143  002D5E  5A21               	subwfb	___ftdiv@f1+2,f,c
  6144  002D60  8029               	bsf	___ftdiv@f3,0,c
  6145  002D62                     l1074:
  6146  002D62  90D8               	bcf	status,0,c
  6147  002D64  361F               	rlcf	___ftdiv@f1,f,c
  6148  002D66  3620               	rlcf	___ftdiv@f1+1,f,c
  6149  002D68  3621               	rlcf	___ftdiv@f1+2,f,c
  6150  002D6A  2E28               	decfsz	___ftdiv@cntr,f,c
  6151  002D6C  D7E7               	goto	l4888
  6152  002D6E  C029  F017         	movff	___ftdiv@f3,___ftpack@arg
  6153  002D72  C02A  F018         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6154  002D76  C02B  F019         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6155  002D7A  C02C  F01A         	movff	___ftdiv@exp,___ftpack@exp
  6156  002D7E  C02D  F01B         	movff	___ftdiv@sign,___ftpack@sign
  6157  002D82  ECF0  F017         	call	___ftpack	;wreg free
  6158  002D86  C017  F01F         	movff	?___ftpack,?___ftdiv
  6159  002D8A  C018  F020         	movff	?___ftpack+1,?___ftdiv+1
  6160  002D8E  C019  F021         	movff	?___ftpack+2,?___ftdiv+2
  6161  002D92  0012               	return	
  6162  002D94                     __end_of___ftdiv:
  6163                           	opt stack 0
  6164                           tblptru	equ	0xFF8
  6165                           tblptrh	equ	0xFF7
  6166                           tblptrl	equ	0xFF6
  6167                           tablat	equ	0xFF5
  6168                           prodh	equ	0xFF4
  6169                           prodl	equ	0xFF3
  6170                           intcon	equ	0xFF2
  6171                           postinc0	equ	0xFEE
  6172                           wreg	equ	0xFE8
  6173                           indf2	equ	0xFDF
  6174                           postinc2	equ	0xFDE
  6175                           postdec2	equ	0xFDD
  6176                           fsr2h	equ	0xFDA
  6177                           fsr2l	equ	0xFD9
  6178                           status	equ	0xFD8
  6179                           
  6180 ;; *************** function _Temp_Filter *****************
  6181 ;; Defined at:
  6182 ;;		line 36 in file "Tempeture.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;		None
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  x               2   49[COMRAM] int 
  6187 ;; Return value:  Size  Location     Type
  6188 ;;		None               void
  6189 ;; Registers used:
  6190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6196 ;;      Params:         0       0       0       0       0       0       0
  6197 ;;      Locals:         2       0       0       0       0       0       0
  6198 ;;      Temps:          0       0       0       0       0       0       0
  6199 ;;      Totals:         2       0       0       0       0       0       0
  6200 ;;Total ram usage:        2 bytes
  6201 ;; Hardware stack levels used:    1
  6202 ;; Hardware stack levels required when called:    6
  6203 ;; This function calls:
  6204 ;;		___ftadd
  6205 ;;		___ftmul
  6206 ;;		___wmul
  6207 ;; This function is called by:
  6208 ;;		_Temp_Convert
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           	psect	text21
  6213  00211C                     __ptext21:
  6214                           	opt stack 0
  6215  00211C                     _Temp_Filter:
  6216                           	opt stack 23
  6217                           
  6218                           ;Tempeture.c: 39: int x;
  6219                           ;Tempeture.c: 40: for(x = 0; x < 10; x++)
  6220                           
  6221                           ;incstack = 0
  6222  00211C  0E00               	movlw	0
  6223  00211E  6E33               	movwf	Temp_Filter@x+1,c
  6224  002120  0E00               	movlw	0
  6225  002122  6E32               	movwf	Temp_Filter@x,c
  6226  002124  5033               	movf	Temp_Filter@x+1,w,c
  6227  002126  0A80               	xorlw	128
  6228  002128  0F80               	addlw	-128
  6229  00212A  0E0A               	movlw	10
  6230  00212C  B4D8               	btfsc	status,2,c
  6231  00212E  5C32               	subwf	Temp_Filter@x,w,c
  6232  002130  B0D8               	btfsc	status,0,c
  6233  002132  D076               	goto	l4620
  6234                           
  6235                           ;Tempeture.c: 41: {
  6236                           ;Tempeture.c: 42: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  6237  002134  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6238  002138  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6239  00213C  0E00               	movlw	0
  6240  00213E  6E28               	movwf	___wmul@multiplicand+1,c
  6241  002140  0E03               	movlw	3
  6242  002142  6E27               	movwf	___wmul@multiplicand,c
  6243  002144  ECC6  F01B         	call	___wmul	;wreg free
  6244  002148  0101               	movlb	1	; () banked
  6245  00214A  0E6E               	movlw	low _Temp_DegF
  6246  00214C  2425               	addwf	?___wmul,w,c
  6247  00214E  6ED9               	movwf	fsr2l,c
  6248  002150  0101               	movlb	1	; () banked
  6249  002152  0E01               	movlw	high _Temp_DegF
  6250  002154  2026               	addwfc	?___wmul+1,w,c
  6251  002156  6EDA               	movwf	fsr2h,c
  6252  002158  0E48               	movlw	72
  6253  00215A  0100               	movlb	0	; () banked
  6254  00215C  6FAF               	movwf	___ftmul@f2& (0+255),b
  6255  00215E  0E61               	movlw	97
  6256  002160  0100               	movlb	0	; () banked
  6257  002162  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  6258  002164  0E3F               	movlw	63
  6259  002166  0100               	movlb	0	; () banked
  6260  002168  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  6261  00216A  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6262  00216E  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6263  002172  0E00               	movlw	0
  6264  002174  6E28               	movwf	___wmul@multiplicand+1,c
  6265  002176  0E03               	movlw	3
  6266  002178  6E27               	movwf	___wmul@multiplicand,c
  6267  00217A  ECC6  F01B         	call	___wmul	;wreg free
  6268  00217E  0101               	movlb	1	; () banked
  6269  002180  0EAA               	movlw	low _TmpTemp_DegF
  6270  002182  2425               	addwf	?___wmul,w,c
  6271  002184  6EE1               	movwf	fsr1l,c
  6272  002186  0101               	movlb	1	; () banked
  6273  002188  0E01               	movlw	high _TmpTemp_DegF
  6274  00218A  2026               	addwfc	?___wmul+1,w,c
  6275  00218C  6EE2               	movwf	fsr1h,c
  6276  00218E  0100               	movlb	0	; () banked
  6277  002190  CFE6 F0AC          	movff	postinc1,___ftmul@f1
  6278  002194  0100               	movlb	0	; () banked
  6279  002196  CFE6 F0AD          	movff	postinc1,___ftmul@f1+1
  6280  00219A  0100               	movlb	0	; () banked
  6281  00219C  CFE5 F0AE          	movff	postdec1,___ftmul@f1+2
  6282  0021A0  ECBD  F012         	call	___ftmul	;wreg free
  6283  0021A4  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  6284  0021A8  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  6285  0021AC  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  6286  0021B0  0EC3               	movlw	195
  6287  0021B2  0100               	movlb	0	; () banked
  6288  0021B4  6FAF               	movwf	___ftmul@f2& (0+255),b
  6289  0021B6  0EF5               	movlw	245
  6290  0021B8  0100               	movlb	0	; () banked
  6291  0021BA  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  6292  0021BC  0E3D               	movlw	61
  6293  0021BE  0100               	movlb	0	; () banked
  6294  0021C0  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  6295  0021C2  0E00               	movlw	0
  6296  0021C4  6E28               	movwf	___wmul@multiplicand+1,c
  6297  0021C6  0E03               	movlw	3
  6298  0021C8  6E27               	movwf	___wmul@multiplicand,c
  6299  0021CA  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6300  0021CE  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6301  0021D2  ECC6  F01B         	call	___wmul	;wreg free
  6302  0021D6  0101               	movlb	1	; () banked
  6303  0021D8  0E50               	movlw	low _PrevTemp_DegF
  6304  0021DA  2425               	addwf	?___wmul,w,c
  6305  0021DC  6EE1               	movwf	fsr1l,c
  6306  0021DE  0101               	movlb	1	; () banked
  6307  0021E0  0E01               	movlw	high _PrevTemp_DegF
  6308  0021E2  2026               	addwfc	?___wmul+1,w,c
  6309  0021E4  6EE2               	movwf	fsr1h,c
  6310  0021E6  0100               	movlb	0	; () banked
  6311  0021E8  CFE6 F0AC          	movff	postinc1,___ftmul@f1
  6312  0021EC  0100               	movlb	0	; () banked
  6313  0021EE  CFE6 F0AD          	movff	postinc1,___ftmul@f1+1
  6314  0021F2  0100               	movlb	0	; () banked
  6315  0021F4  CFE5 F0AE          	movff	postdec1,___ftmul@f1+2
  6316  0021F8  ECBD  F012         	call	___ftmul	;wreg free
  6317  0021FC  C0AC  F0C5         	movff	?___ftmul,___ftadd@f2
  6318  002200  C0AD  F0C6         	movff	?___ftmul+1,___ftadd@f2+1
  6319  002204  C0AE  F0C7         	movff	?___ftmul+2,___ftadd@f2+2
  6320  002208  EC8C  F00D         	call	___ftadd	;wreg free
  6321  00220C  C0C2  FFDE         	movff	?___ftadd,postinc2
  6322  002210  C0C3  FFDE         	movff	?___ftadd+1,postinc2
  6323  002214  C0C4  FFDD         	movff	?___ftadd+2,postdec2
  6324  002218  52DD               	movf	postdec2,f,c
  6325  00221A  4A32               	infsnz	Temp_Filter@x,f,c
  6326  00221C  2A33               	incf	Temp_Filter@x+1,f,c
  6327  00221E  D782               	goto	L10
  6328  002220                     l4620:
  6329                           
  6330                           ;Tempeture.c: 43: }
  6331                           ;Tempeture.c: 44: for(x = 0; x < 10; x++)
  6332  002220  0E00               	movlw	0
  6333  002222  6E33               	movwf	Temp_Filter@x+1,c
  6334  002224  0E00               	movlw	0
  6335  002226  6E32               	movwf	Temp_Filter@x,c
  6336  002228  5033               	movf	Temp_Filter@x+1,w,c
  6337  00222A  0A80               	xorlw	128
  6338  00222C  0F80               	addlw	-128
  6339  00222E  0E0A               	movlw	10
  6340  002230  B4D8               	btfsc	status,2,c
  6341  002232  5C32               	subwf	Temp_Filter@x,w,c
  6342  002234  B0D8               	btfsc	status,0,c
  6343  002236  0012               	return	
  6344                           
  6345                           ;Tempeture.c: 45: {
  6346                           ;Tempeture.c: 46: PrevTemp_DegF[x] = Temp_DegF[x];
  6347  002238  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6348  00223C  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6349  002240  0E00               	movlw	0
  6350  002242  6E28               	movwf	___wmul@multiplicand+1,c
  6351  002244  0E03               	movlw	3
  6352  002246  6E27               	movwf	___wmul@multiplicand,c
  6353  002248  ECC6  F01B         	call	___wmul	;wreg free
  6354  00224C  0101               	movlb	1	; () banked
  6355  00224E  0E6E               	movlw	low _Temp_DegF
  6356  002250  2425               	addwf	?___wmul,w,c
  6357  002252  6ED9               	movwf	fsr2l,c
  6358  002254  0101               	movlb	1	; () banked
  6359  002256  0E01               	movlw	high _Temp_DegF
  6360  002258  2026               	addwfc	?___wmul+1,w,c
  6361  00225A  6EDA               	movwf	fsr2h,c
  6362  00225C  C032  F025         	movff	Temp_Filter@x,___wmul@multiplier
  6363  002260  C033  F026         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  6364  002264  0E00               	movlw	0
  6365  002266  6E28               	movwf	___wmul@multiplicand+1,c
  6366  002268  0E03               	movlw	3
  6367  00226A  6E27               	movwf	___wmul@multiplicand,c
  6368  00226C  ECC6  F01B         	call	___wmul	;wreg free
  6369  002270  0101               	movlb	1	; () banked
  6370  002272  0E50               	movlw	low _PrevTemp_DegF
  6371  002274  2425               	addwf	?___wmul,w,c
  6372  002276  6EE1               	movwf	fsr1l,c
  6373  002278  0101               	movlb	1	; () banked
  6374  00227A  0E01               	movlw	high _PrevTemp_DegF
  6375  00227C  2026               	addwfc	?___wmul+1,w,c
  6376  00227E  6EE2               	movwf	fsr1h,c
  6377  002280  CFDE FFE6          	movff	postinc2,postinc1
  6378  002284  CFDE FFE6          	movff	postinc2,postinc1
  6379  002288  CFDE FFE5          	movff	postinc2,postdec1
  6380  00228C  52E5               	movf	postdec1,f,c
  6381                           
  6382                           ; BSR set to: 1
  6383  00228E  4A32               	infsnz	Temp_Filter@x,f,c
  6384  002290  2A33               	incf	Temp_Filter@x+1,f,c
  6385  002292  D7CA               	goto	L11
  6386  002294                     __end_of_Temp_Filter:
  6387                           	opt stack 0
  6388                           tblptru	equ	0xFF8
  6389                           tblptrh	equ	0xFF7
  6390                           tblptrl	equ	0xFF6
  6391                           tablat	equ	0xFF5
  6392                           prodh	equ	0xFF4
  6393                           prodl	equ	0xFF3
  6394                           intcon	equ	0xFF2
  6395                           postinc0	equ	0xFEE
  6396                           wreg	equ	0xFE8
  6397                           postinc1	equ	0xFE6
  6398                           postdec1	equ	0xFE5
  6399                           fsr1h	equ	0xFE2
  6400                           fsr1l	equ	0xFE1
  6401                           indf2	equ	0xFDF
  6402                           postinc2	equ	0xFDE
  6403                           postdec2	equ	0xFDD
  6404                           fsr2h	equ	0xFDA
  6405                           fsr2l	equ	0xFD9
  6406                           status	equ	0xFD8
  6407                           
  6408 ;; *************** function _SYSTEM_Initialize *****************
  6409 ;; Defined at:
  6410 ;;		line 112 in file "mcc_generated_files/mcc.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;		None
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6424 ;;      Params:         0       0       0       0       0       0       0
  6425 ;;      Locals:         0       0       0       0       0       0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0
  6427 ;;      Totals:         0       0       0       0       0       0       0
  6428 ;;Total ram usage:        0 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    6
  6431 ;; This function calls:
  6432 ;;		_ADC_Initialize
  6433 ;;		_EUSART1_Initialize
  6434 ;;		_INTERRUPT_Initialize
  6435 ;;		_OSCILLATOR_Initialize
  6436 ;;		_PIN_MANAGER_Initialize
  6437 ;;		_TMR1_Initialize
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text22
  6444  0037D4                     __ptext22:
  6445                           	opt stack 0
  6446  0037D4                     _SYSTEM_Initialize:
  6447                           	opt stack 24
  6448                           
  6449                           ;mcc.c: 114: OSCILLATOR_Initialize();
  6450                           
  6451                           ;incstack = 0
  6452  0037D4  EC32  F01C         	call	_OSCILLATOR_Initialize	;wreg free
  6453                           
  6454                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  6455  0037D8  EC4C  F01A         	call	_PIN_MANAGER_Initialize	;wreg free
  6456                           
  6457                           ;mcc.c: 116: INTERRUPT_Initialize();
  6458  0037DC  EC39  F01C         	call	_INTERRUPT_Initialize	;wreg free
  6459                           
  6460                           ;mcc.c: 117: ADC_Initialize();
  6461  0037E0  EC04  F01C         	call	_ADC_Initialize	;wreg free
  6462                           
  6463                           ;mcc.c: 118: EUSART1_Initialize();
  6464  0037E4  EC01  F01B         	call	_EUSART1_Initialize	;wreg free
  6465                           
  6466                           ;mcc.c: 119: TMR1_Initialize();
  6467  0037E8  ECD9  F01B         	call	_TMR1_Initialize	;wreg free
  6468  0037EC  0012               	return	
  6469  0037EE                     __end_of_SYSTEM_Initialize:
  6470                           	opt stack 0
  6471                           tblptru	equ	0xFF8
  6472                           tblptrh	equ	0xFF7
  6473                           tblptrl	equ	0xFF6
  6474                           tablat	equ	0xFF5
  6475                           prodh	equ	0xFF4
  6476                           prodl	equ	0xFF3
  6477                           intcon	equ	0xFF2
  6478                           postinc0	equ	0xFEE
  6479                           wreg	equ	0xFE8
  6480                           postinc1	equ	0xFE6
  6481                           postdec1	equ	0xFE5
  6482                           fsr1h	equ	0xFE2
  6483                           fsr1l	equ	0xFE1
  6484                           indf2	equ	0xFDF
  6485                           postinc2	equ	0xFDE
  6486                           postdec2	equ	0xFDD
  6487                           fsr2h	equ	0xFDA
  6488                           fsr2l	equ	0xFD9
  6489                           status	equ	0xFD8
  6490                           
  6491 ;; *************** function _TMR1_Initialize *****************
  6492 ;; Defined at:
  6493 ;;		line 15 in file "mcc_generated_files/tmr1.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;		None
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;		None
  6498 ;; Return value:  Size  Location     Type
  6499 ;;		None               void
  6500 ;; Registers used:
  6501 ;;		wreg, status,2, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6507 ;;      Params:         0       0       0       0       0       0       0
  6508 ;;      Locals:         0       0       0       0       0       0       0
  6509 ;;      Temps:          0       0       0       0       0       0       0
  6510 ;;      Totals:         0       0       0       0       0       0       0
  6511 ;;Total ram usage:        0 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    5
  6514 ;; This function calls:
  6515 ;;		_TMR1_StartTimer
  6516 ;; This function is called by:
  6517 ;;		_SYSTEM_Initialize
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text23
  6522  0037B2                     __ptext23:
  6523                           	opt stack 0
  6524  0037B2                     _TMR1_Initialize:
  6525                           	opt stack 24
  6526                           
  6527                           ;tmr1.c: 20: T1CON = 0x34;
  6528                           
  6529                           ;incstack = 0
  6530  0037B2  0E34               	movlw	52
  6531  0037B4  6ECD               	movwf	4045,c	;volatile
  6532                           
  6533                           ;tmr1.c: 23: T1GCON = 0x00;
  6534  0037B6  0E00               	movlw	0
  6535  0037B8  6ECC               	movwf	4044,c	;volatile
  6536                           
  6537                           ;tmr1.c: 26: TMR1H = 0x0B;
  6538  0037BA  0E0B               	movlw	11
  6539  0037BC  6ECF               	movwf	4047,c	;volatile
  6540                           
  6541                           ;tmr1.c: 29: TMR1L = 0xDC;
  6542  0037BE  0EDC               	movlw	220
  6543  0037C0  6ECE               	movwf	4046,c	;volatile
  6544                           
  6545                           ;tmr1.c: 32: timer1ReloadVal=TMR1;
  6546  0037C2  CFCE F047          	movff	4046,_timer1ReloadVal	;volatile
  6547  0037C6  CFCF F048          	movff	4047,_timer1ReloadVal+1	;volatile
  6548                           
  6549                           ;tmr1.c: 35: PIR1bits.TMR1IF = 0;
  6550  0037CA  909E               	bcf	3998,0,c	;volatile
  6551                           
  6552                           ;tmr1.c: 38: PIE1bits.TMR1IE = 1;
  6553  0037CC  809D               	bsf	3997,0,c	;volatile
  6554                           
  6555                           ;tmr1.c: 41: TMR1_StartTimer();
  6556  0037CE  EC44  F01C         	call	_TMR1_StartTimer	;wreg free
  6557  0037D2  0012               	return	
  6558  0037D4                     __end_of_TMR1_Initialize:
  6559                           	opt stack 0
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           prodh	equ	0xFF4
  6565                           prodl	equ	0xFF3
  6566                           intcon	equ	0xFF2
  6567                           postinc0	equ	0xFEE
  6568                           wreg	equ	0xFE8
  6569                           postinc1	equ	0xFE6
  6570                           postdec1	equ	0xFE5
  6571                           fsr1h	equ	0xFE2
  6572                           fsr1l	equ	0xFE1
  6573                           indf2	equ	0xFDF
  6574                           postinc2	equ	0xFDE
  6575                           postdec2	equ	0xFDD
  6576                           fsr2h	equ	0xFDA
  6577                           fsr2l	equ	0xFD9
  6578                           status	equ	0xFD8
  6579                           
  6580 ;; *************** function _TMR1_StartTimer *****************
  6581 ;; Defined at:
  6582 ;;		line 44 in file "mcc_generated_files/tmr1.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;		None
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;		None
  6587 ;; Return value:  Size  Location     Type
  6588 ;;		None               void
  6589 ;; Registers used:
  6590 ;;		None
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6596 ;;      Params:         0       0       0       0       0       0       0
  6597 ;;      Locals:         0       0       0       0       0       0       0
  6598 ;;      Temps:          0       0       0       0       0       0       0
  6599 ;;      Totals:         0       0       0       0       0       0       0
  6600 ;;Total ram usage:        0 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    4
  6603 ;; This function calls:
  6604 ;;		Nothing
  6605 ;; This function is called by:
  6606 ;;		_TMR1_Initialize
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text24
  6611  003888                     __ptext24:
  6612                           	opt stack 0
  6613  003888                     _TMR1_StartTimer:
  6614                           	opt stack 24
  6615                           
  6616                           ;tmr1.c: 47: T1CONbits.TMR1ON = 1;
  6617                           
  6618                           ;incstack = 0
  6619  003888  80CD               	bsf	4045,0,c	;volatile
  6620  00388A  0012               	return	
  6621  00388C                     __end_of_TMR1_StartTimer:
  6622                           	opt stack 0
  6623                           tblptru	equ	0xFF8
  6624                           tblptrh	equ	0xFF7
  6625                           tblptrl	equ	0xFF6
  6626                           tablat	equ	0xFF5
  6627                           prodh	equ	0xFF4
  6628                           prodl	equ	0xFF3
  6629                           intcon	equ	0xFF2
  6630                           postinc0	equ	0xFEE
  6631                           wreg	equ	0xFE8
  6632                           postinc1	equ	0xFE6
  6633                           postdec1	equ	0xFE5
  6634                           fsr1h	equ	0xFE2
  6635                           fsr1l	equ	0xFE1
  6636                           indf2	equ	0xFDF
  6637                           postinc2	equ	0xFDE
  6638                           postdec2	equ	0xFDD
  6639                           fsr2h	equ	0xFDA
  6640                           fsr2l	equ	0xFD9
  6641                           status	equ	0xFD8
  6642                           
  6643 ;; *************** function _PIN_MANAGER_Initialize *****************
  6644 ;; Defined at:
  6645 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;		None
  6650 ;; Return value:  Size  Location     Type
  6651 ;;		None               void
  6652 ;; Registers used:
  6653 ;;		wreg, status,2
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6659 ;;      Params:         0       0       0       0       0       0       0
  6660 ;;      Locals:         0       0       0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0
  6662 ;;      Totals:         0       0       0       0       0       0       0
  6663 ;;Total ram usage:        0 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    4
  6666 ;; This function calls:
  6667 ;;		Nothing
  6668 ;; This function is called by:
  6669 ;;		_SYSTEM_Initialize
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text25
  6674  003498                     __ptext25:
  6675                           	opt stack 0
  6676  003498                     _PIN_MANAGER_Initialize:
  6677                           	opt stack 25
  6678                           
  6679                           ;pin_manager.c: 8: LATA = 0x00;
  6680                           
  6681                           ;incstack = 0
  6682  003498  0E00               	movlw	0
  6683  00349A  6E89               	movwf	3977,c	;volatile
  6684                           
  6685                           ;pin_manager.c: 9: TRISA = 0xAE;
  6686  00349C  0EAE               	movlw	174
  6687  00349E  6E92               	movwf	3986,c	;volatile
  6688                           
  6689                           ;pin_manager.c: 10: ANSELA = 0x2E;
  6690  0034A0  0E2E               	movlw	46
  6691  0034A2  010F               	movlb	15	; () banked
  6692  0034A4  6F38               	movwf	56,b	;volatile
  6693                           
  6694                           ;pin_manager.c: 12: LATB = 0x00;
  6695  0034A6  0E00               	movlw	0
  6696  0034A8  6E8A               	movwf	3978,c	;volatile
  6697                           
  6698                           ;pin_manager.c: 13: TRISB = 0xF4;
  6699  0034AA  0EF4               	movlw	244
  6700  0034AC  6E93               	movwf	3987,c	;volatile
  6701                           
  6702                           ;pin_manager.c: 14: ANSELB = 0x34;
  6703  0034AE  0E34               	movlw	52
  6704  0034B0  010F               	movlb	15	; () banked
  6705  0034B2  6F39               	movwf	57,b	;volatile
  6706                           
  6707                           ;pin_manager.c: 15: WPUB = 0x00;
  6708  0034B4  0E00               	movlw	0
  6709  0034B6  6E61               	movwf	3937,c	;volatile
  6710                           
  6711                           ;pin_manager.c: 17: LATC = 0x08;
  6712  0034B8  0E08               	movlw	8
  6713  0034BA  6E8B               	movwf	3979,c	;volatile
  6714                           
  6715                           ;pin_manager.c: 18: TRISC = 0xC4;
  6716  0034BC  0EC4               	movlw	196
  6717  0034BE  6E94               	movwf	3988,c	;volatile
  6718                           
  6719                           ;pin_manager.c: 19: ANSELC = 0x04;
  6720  0034C0  0E04               	movlw	4
  6721  0034C2  010F               	movlb	15	; () banked
  6722  0034C4  6F3A               	movwf	58,b	;volatile
  6723                           
  6724                           ;pin_manager.c: 21: LATD = 0x00;
  6725  0034C6  0E00               	movlw	0
  6726  0034C8  6E8C               	movwf	3980,c	;volatile
  6727                           
  6728                           ;pin_manager.c: 22: TRISD = 0xD1;
  6729  0034CA  0ED1               	movlw	209
  6730  0034CC  6E95               	movwf	3989,c	;volatile
  6731                           
  6732                           ;pin_manager.c: 23: ANSELD = 0xD1;
  6733  0034CE  0ED1               	movlw	209
  6734  0034D0  010F               	movlb	15	; () banked
  6735  0034D2  6F3B               	movwf	59,b	;volatile
  6736                           
  6737                           ;pin_manager.c: 25: LATE = 0x00;
  6738  0034D4  0E00               	movlw	0
  6739  0034D6  6E8D               	movwf	3981,c	;volatile
  6740                           
  6741                           ;pin_manager.c: 26: TRISE = 0x05;
  6742  0034D8  0E05               	movlw	5
  6743  0034DA  6E96               	movwf	3990,c	;volatile
  6744                           
  6745                           ;pin_manager.c: 27: ANSELE = 0x05;
  6746  0034DC  0E05               	movlw	5
  6747  0034DE  010F               	movlb	15	; () banked
  6748  0034E0  6F3C               	movwf	60,b	;volatile
  6749                           
  6750                           ; BSR set to: 15
  6751                           ;pin_manager.c: 29: INTCON2bits.nRBPU = 0x01;
  6752  0034E2  8EF1               	bsf	intcon2,7,c	;volatile
  6753                           
  6754                           ; BSR set to: 15
  6755  0034E4  0012               	return	
  6756  0034E6                     __end_of_PIN_MANAGER_Initialize:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           intcon	equ	0xFF2
  6765                           intcon2	equ	0xFF1
  6766                           postinc0	equ	0xFEE
  6767                           wreg	equ	0xFE8
  6768                           postinc1	equ	0xFE6
  6769                           postdec1	equ	0xFE5
  6770                           fsr1h	equ	0xFE2
  6771                           fsr1l	equ	0xFE1
  6772                           indf2	equ	0xFDF
  6773                           postinc2	equ	0xFDE
  6774                           postdec2	equ	0xFDD
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _OSCILLATOR_Initialize *****************
  6780 ;; Defined at:
  6781 ;;		line 122 in file "mcc_generated_files/mcc.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;		None
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;		None
  6786 ;; Return value:  Size  Location     Type
  6787 ;;		None               void
  6788 ;; Registers used:
  6789 ;;		wreg, status,2
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6795 ;;      Params:         0       0       0       0       0       0       0
  6796 ;;      Locals:         0       0       0       0       0       0       0
  6797 ;;      Temps:          0       0       0       0       0       0       0
  6798 ;;      Totals:         0       0       0       0       0       0       0
  6799 ;;Total ram usage:        0 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    4
  6802 ;; This function calls:
  6803 ;;		Nothing
  6804 ;; This function is called by:
  6805 ;;		_SYSTEM_Initialize
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           	psect	text26
  6810  003864                     __ptext26:
  6811                           	opt stack 0
  6812  003864                     _OSCILLATOR_Initialize:
  6813                           	opt stack 25
  6814                           
  6815                           ;mcc.c: 125: OSCCON = 0x62;
  6816                           
  6817                           ; BSR set to: 15
  6818                           ;incstack = 0
  6819  003864  0E62               	movlw	98
  6820  003866  6ED3               	movwf	4051,c	;volatile
  6821                           
  6822                           ;mcc.c: 127: OSCCON2 = 0x04;
  6823  003868  0E04               	movlw	4
  6824  00386A  6ED2               	movwf	4050,c	;volatile
  6825                           
  6826                           ;mcc.c: 129: OSCTUNE = 0x00;
  6827  00386C  0E00               	movlw	0
  6828  00386E  6E9B               	movwf	3995,c	;volatile
  6829  003870  0012               	return	
  6830  003872                     __end_of_OSCILLATOR_Initialize:
  6831                           	opt stack 0
  6832                           tblptru	equ	0xFF8
  6833                           tblptrh	equ	0xFF7
  6834                           tblptrl	equ	0xFF6
  6835                           tablat	equ	0xFF5
  6836                           prodh	equ	0xFF4
  6837                           prodl	equ	0xFF3
  6838                           intcon	equ	0xFF2
  6839                           intcon2	equ	0xFF1
  6840                           postinc0	equ	0xFEE
  6841                           wreg	equ	0xFE8
  6842                           postinc1	equ	0xFE6
  6843                           postdec1	equ	0xFE5
  6844                           fsr1h	equ	0xFE2
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           fsr2h	equ	0xFDA
  6850                           fsr2l	equ	0xFD9
  6851                           status	equ	0xFD8
  6852                           
  6853 ;; *************** function _INTERRUPT_Initialize *****************
  6854 ;; Defined at:
  6855 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;		None               void
  6862 ;; Registers used:
  6863 ;;		None
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6869 ;;      Params:         0       0       0       0       0       0       0
  6870 ;;      Locals:         0       0       0       0       0       0       0
  6871 ;;      Temps:          0       0       0       0       0       0       0
  6872 ;;      Totals:         0       0       0       0       0       0       0
  6873 ;;Total ram usage:        0 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    4
  6876 ;; This function calls:
  6877 ;;		Nothing
  6878 ;; This function is called by:
  6879 ;;		_SYSTEM_Initialize
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text27
  6884  003872                     __ptext27:
  6885                           	opt stack 0
  6886  003872                     _INTERRUPT_Initialize:
  6887                           	opt stack 25
  6888                           
  6889                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  6890                           
  6891                           ;incstack = 0
  6892  003872  9ED0               	bcf	4048,7,c	;volatile
  6893                           
  6894                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  6895  003874  9A9F               	bcf	3999,5,c	;volatile
  6896                           
  6897                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  6898  003876  9C9F               	bcf	3999,6,c	;volatile
  6899                           
  6900                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  6901  003878  909F               	bcf	3999,0,c	;volatile
  6902                           
  6903                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  6904  00387A  989F               	bcf	3999,4,c	;volatile
  6905  00387C  0012               	return	
  6906  00387E                     __end_of_INTERRUPT_Initialize:
  6907                           	opt stack 0
  6908                           tblptru	equ	0xFF8
  6909                           tblptrh	equ	0xFF7
  6910                           tblptrl	equ	0xFF6
  6911                           tablat	equ	0xFF5
  6912                           prodh	equ	0xFF4
  6913                           prodl	equ	0xFF3
  6914                           intcon	equ	0xFF2
  6915                           intcon2	equ	0xFF1
  6916                           postinc0	equ	0xFEE
  6917                           wreg	equ	0xFE8
  6918                           postinc1	equ	0xFE6
  6919                           postdec1	equ	0xFE5
  6920                           fsr1h	equ	0xFE2
  6921                           fsr1l	equ	0xFE1
  6922                           indf2	equ	0xFDF
  6923                           postinc2	equ	0xFDE
  6924                           postdec2	equ	0xFDD
  6925                           fsr2h	equ	0xFDA
  6926                           fsr2l	equ	0xFD9
  6927                           status	equ	0xFD8
  6928                           
  6929 ;; *************** function _EUSART1_Initialize *****************
  6930 ;; Defined at:
  6931 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;		None               void
  6938 ;; Registers used:
  6939 ;;		wreg, status,2
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6945 ;;      Params:         0       0       0       0       0       0       0
  6946 ;;      Locals:         0       0       0       0       0       0       0
  6947 ;;      Temps:          0       0       0       0       0       0       0
  6948 ;;      Totals:         0       0       0       0       0       0       0
  6949 ;;Total ram usage:        0 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    4
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		_SYSTEM_Initialize
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text28
  6960  003602                     __ptext28:
  6961                           	opt stack 0
  6962  003602                     _EUSART1_Initialize:
  6963                           	opt stack 25
  6964                           
  6965                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  6966                           
  6967                           ;incstack = 0
  6968  003602  9A9D               	bcf	3997,5,c	;volatile
  6969                           
  6970                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  6971  003604  989D               	bcf	3997,4,c	;volatile
  6972                           
  6973                           ;eusart1.c: 85: BAUD1CON = 0x48;
  6974  003606  0E48               	movlw	72
  6975  003608  6EB8               	movwf	4024,c	;volatile
  6976                           
  6977                           ;eusart1.c: 88: RC1STA = 0x98;
  6978  00360A  0E98               	movlw	152
  6979  00360C  6EAB               	movwf	4011,c	;volatile
  6980                           
  6981                           ;eusart1.c: 91: TX1STA = 0x26;
  6982  00360E  0E26               	movlw	38
  6983  003610  6EAC               	movwf	4012,c	;volatile
  6984                           
  6985                           ;eusart1.c: 94: SPBRG1 = 0x22;
  6986  003612  0E22               	movlw	34
  6987  003614  6EAF               	movwf	4015,c	;volatile
  6988                           
  6989                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  6990  003616  0E00               	movlw	0
  6991  003618  6EB0               	movwf	4016,c	;volatile
  6992                           
  6993                           ;eusart1.c: 100: TXREG1 = 0x00;
  6994  00361A  0E00               	movlw	0
  6995  00361C  6EAD               	movwf	4013,c	;volatile
  6996                           
  6997                           ;eusart1.c: 103: RCREG1 = 0x00;
  6998  00361E  0E00               	movlw	0
  6999  003620  6EAE               	movwf	4014,c	;volatile
  7000                           
  7001                           ;eusart1.c: 107: eusart1TxHead = 0;
  7002  003622  0E00               	movlw	0
  7003  003624  6E45               	movwf	_eusart1TxHead,c
  7004                           
  7005                           ;eusart1.c: 108: eusart1TxTail = 0;
  7006  003626  0E00               	movlw	0
  7007  003628  6E46               	movwf	_eusart1TxTail,c
  7008                           
  7009                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  7010  00362A  0E08               	movlw	8
  7011  00362C  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  7012                           
  7013                           ;eusart1.c: 111: eusart1RxHead = 0;
  7014  00362E  0E00               	movlw	0
  7015  003630  6E43               	movwf	_eusart1RxHead,c
  7016                           
  7017                           ;eusart1.c: 112: eusart1RxTail = 0;
  7018  003632  0E00               	movlw	0
  7019  003634  6E44               	movwf	_eusart1RxTail,c
  7020                           
  7021                           ;eusart1.c: 113: eusart1RxCount = 0;
  7022  003636  0E00               	movlw	0
  7023  003638  6E42               	movwf	_eusart1RxCount,c	;volatile
  7024                           
  7025                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  7026  00363A  8A9D               	bsf	3997,5,c	;volatile
  7027  00363C  0012               	return	
  7028  00363E                     __end_of_EUSART1_Initialize:
  7029                           	opt stack 0
  7030                           tblptru	equ	0xFF8
  7031                           tblptrh	equ	0xFF7
  7032                           tblptrl	equ	0xFF6
  7033                           tablat	equ	0xFF5
  7034                           prodh	equ	0xFF4
  7035                           prodl	equ	0xFF3
  7036                           intcon	equ	0xFF2
  7037                           intcon2	equ	0xFF1
  7038                           postinc0	equ	0xFEE
  7039                           wreg	equ	0xFE8
  7040                           postinc1	equ	0xFE6
  7041                           postdec1	equ	0xFE5
  7042                           fsr1h	equ	0xFE2
  7043                           fsr1l	equ	0xFE1
  7044                           indf2	equ	0xFDF
  7045                           postinc2	equ	0xFDE
  7046                           postdec2	equ	0xFDD
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function _ADC_Initialize *****************
  7052 ;; Defined at:
  7053 ;;		line 13 in file "mcc_generated_files/adc.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;		None
  7058 ;; Return value:  Size  Location     Type
  7059 ;;		None               void
  7060 ;; Registers used:
  7061 ;;		wreg, status,2
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7067 ;;      Params:         0       0       0       0       0       0       0
  7068 ;;      Locals:         0       0       0       0       0       0       0
  7069 ;;      Temps:          0       0       0       0       0       0       0
  7070 ;;      Totals:         0       0       0       0       0       0       0
  7071 ;;Total ram usage:        0 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:    4
  7074 ;; This function calls:
  7075 ;;		Nothing
  7076 ;; This function is called by:
  7077 ;;		_SYSTEM_Initialize
  7078 ;; This function uses a non-reentrant model
  7079 ;;
  7080                           
  7081                           	psect	text29
  7082  003808                     __ptext29:
  7083                           	opt stack 0
  7084  003808                     _ADC_Initialize:
  7085                           	opt stack 25
  7086                           
  7087                           ;adc.c: 18: ADCON0 = 0x01;
  7088                           
  7089                           ;incstack = 0
  7090  003808  0E01               	movlw	1
  7091  00380A  6EC2               	movwf	4034,c	;volatile
  7092                           
  7093                           ;adc.c: 21: ADCON1 = 0x80;
  7094  00380C  0E80               	movlw	128
  7095  00380E  6EC1               	movwf	4033,c	;volatile
  7096                           
  7097                           ;adc.c: 24: ADCON2 = 0x0A;
  7098  003810  0E0A               	movlw	10
  7099  003812  6EC0               	movwf	4032,c	;volatile
  7100                           
  7101                           ;adc.c: 27: ADRESL = 0x00;
  7102  003814  0E00               	movlw	0
  7103  003816  6EC3               	movwf	4035,c	;volatile
  7104                           
  7105                           ;adc.c: 30: ADRESH = 0x00;
  7106  003818  0E00               	movlw	0
  7107  00381A  6EC4               	movwf	4036,c	;volatile
  7108                           
  7109                           ;adc.c: 33: PIE1bits.ADIE = 1;
  7110  00381C  8C9D               	bsf	3997,6,c	;volatile
  7111  00381E  0012               	return	
  7112  003820                     __end_of_ADC_Initialize:
  7113                           	opt stack 0
  7114                           tblptru	equ	0xFF8
  7115                           tblptrh	equ	0xFF7
  7116                           tblptrl	equ	0xFF6
  7117                           tablat	equ	0xFF5
  7118                           prodh	equ	0xFF4
  7119                           prodl	equ	0xFF3
  7120                           intcon	equ	0xFF2
  7121                           intcon2	equ	0xFF1
  7122                           postinc0	equ	0xFEE
  7123                           wreg	equ	0xFE8
  7124                           postinc1	equ	0xFE6
  7125                           postdec1	equ	0xFE5
  7126                           fsr1h	equ	0xFE2
  7127                           fsr1l	equ	0xFE1
  7128                           indf2	equ	0xFDF
  7129                           postinc2	equ	0xFDE
  7130                           postdec2	equ	0xFDD
  7131                           fsr2h	equ	0xFDA
  7132                           fsr2l	equ	0xFD9
  7133                           status	equ	0xFD8
  7134                           
  7135 ;; *************** function _RunBypas *****************
  7136 ;; Defined at:
  7137 ;;		line 131 in file "Bypass.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;		None
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;  batvolt         3    2[BANK0 ] float 
  7142 ;;  i               2    5[BANK0 ] int 
  7143 ;;  cellbyp         2    0[BANK0 ] int 
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  2  458[COMRAM] int 
  7146 ;; Registers used:
  7147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7153 ;;      Params:         0       0       0       0       0       0       0
  7154 ;;      Locals:         0       7       0       0       0       0       0
  7155 ;;      Temps:          0       0       0       0       0       0       0
  7156 ;;      Totals:         0       7       0       0       0       0       0
  7157 ;;Total ram usage:        7 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:    6
  7160 ;; This function calls:
  7161 ;;		_Battery_Get
  7162 ;;		_SetBypass
  7163 ;;		___ftge
  7164 ;; This function is called by:
  7165 ;;		_main
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text30
  7170  002D94                     __ptext30:
  7171                           	opt stack 0
  7172  002D94                     _RunBypas:
  7173                           	opt stack 24
  7174                           
  7175                           ;Bypass.c: 133: int cellbyp = 0;
  7176                           
  7177                           ;incstack = 0
  7178  002D94  0E00               	movlw	0
  7179  002D96  0100               	movlb	0	; () banked
  7180  002D98  6FAD               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  7181  002D9A  0E00               	movlw	0
  7182  002D9C  0100               	movlb	0	; () banked
  7183  002D9E  6FAC               	movwf	RunBypas@cellbyp& (0+255),b
  7184                           
  7185                           ;Bypass.c: 134: int i = 0;
  7186  002DA0  0E00               	movlw	0
  7187  002DA2  0100               	movlb	0	; () banked
  7188  002DA4  6FB2               	movwf	(RunBypas@i+1)& (0+255),b
  7189  002DA6  0E00               	movlw	0
  7190  002DA8  0100               	movlb	0	; () banked
  7191  002DAA  6FB1               	movwf	RunBypas@i& (0+255),b
  7192                           
  7193                           ;Bypass.c: 135: float batvolt = 0;
  7194  002DAC  0E00               	movlw	0
  7195  002DAE  0100               	movlb	0	; () banked
  7196  002DB0  6FAE               	movwf	RunBypas@batvolt& (0+255),b
  7197  002DB2  0E00               	movlw	0
  7198  002DB4  0100               	movlb	0	; () banked
  7199  002DB6  6FAF               	movwf	(RunBypas@batvolt+1)& (0+255),b
  7200  002DB8  0E00               	movlw	0
  7201  002DBA  0100               	movlb	0	; () banked
  7202  002DBC  6FB0               	movwf	(RunBypas@batvolt+2)& (0+255),b
  7203                           
  7204                           ;Bypass.c: 137: for(i = 0; i<9;i++)
  7205  002DBE  0E00               	movlw	0
  7206  002DC0  0100               	movlb	0	; () banked
  7207  002DC2  6FB2               	movwf	(RunBypas@i+1)& (0+255),b
  7208  002DC4  0E00               	movlw	0
  7209  002DC6  0100               	movlb	0	; () banked
  7210  002DC8  6FB1               	movwf	RunBypas@i& (0+255),b
  7211  002DCA                     
  7212                           ; BSR set to: 0
  7213  002DCA  0100               	movlb	0	; () banked
  7214  002DCC  51B2               	movf	(RunBypas@i+1)& (0+255),w,b
  7215  002DCE  0A80               	xorlw	128
  7216  002DD0  0F80               	addlw	-128
  7217  002DD2  0E09               	movlw	9
  7218  002DD4  B4D8               	btfsc	status,2,c
  7219  002DD6  5DB1               	subwf	RunBypas@i& (0+255),w,b
  7220  002DD8  B0D8               	btfsc	status,0,c
  7221  002DDA  0012               	return	
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;Bypass.c: 138: {
  7225                           ;Bypass.c: 139: batvolt = Battery_Get(i);
  7226                           
  7227                           ; BSR set to: 0
  7228                           
  7229                           ; BSR set to: 0
  7230  002DDC  C0B1  F02B         	movff	RunBypas@i,Battery_Get@channelnum
  7231  002DE0  C0B2  F02C         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  7232  002DE4  EC3C  F01B         	call	_Battery_Get	;wreg free
  7233  002DE8  C02B  F0AE         	movff	?_Battery_Get,RunBypas@batvolt
  7234  002DEC  C02C  F0AF         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  7235  002DF0  C02D  F0B0         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  7236                           
  7237                           ;Bypass.c: 141: if(batvolt >= 4.18)
  7238  002DF4  C0AE  F02B         	movff	RunBypas@batvolt,___ftge@ff1
  7239  002DF8  C0AF  F02C         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  7240  002DFC  C0B0  F02D         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  7241  002E00  0EC3               	movlw	195
  7242  002E02  6E2E               	movwf	___ftge@ff2,c
  7243  002E04  0E85               	movlw	133
  7244  002E06  6E2F               	movwf	___ftge@ff2+1,c
  7245  002E08  0E40               	movlw	64
  7246  002E0A  6E30               	movwf	___ftge@ff2+2,c
  7247  002E0C  EC27  F019         	call	___ftge	;wreg free
  7248  002E10  A0D8               	btfss	status,0,c
  7249  002E12  D010               	goto	l5302
  7250                           
  7251                           ;Bypass.c: 142: {
  7252                           ;Bypass.c: 143: SetBypass(i,1);
  7253  002E14  C0B1  F017         	movff	RunBypas@i,SetBypass@pin
  7254  002E18  C0B2  F018         	movff	RunBypas@i+1,SetBypass@pin+1
  7255  002E1C  0E00               	movlw	0
  7256  002E1E  6E1A               	movwf	SetBypass@state+1,c
  7257  002E20  0E01               	movlw	1
  7258  002E22  6E19               	movwf	SetBypass@state,c
  7259  002E24  EC6B  F015         	call	_SetBypass	;wreg free
  7260                           
  7261                           ;Bypass.c: 144: cellbyp = 1;
  7262  002E28  0E00               	movlw	0
  7263  002E2A  0100               	movlb	0	; () banked
  7264  002E2C  6FAD               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  7265  002E2E  0E01               	movlw	1
  7266  002E30  0100               	movlb	0	; () banked
  7267  002E32  6FAC               	movwf	RunBypas@cellbyp& (0+255),b
  7268  002E34                     l5302:
  7269                           
  7270                           ;Bypass.c: 145: }
  7271                           ;Bypass.c: 146: if(batvolt <= 4.15)
  7272  002E34  0ECD               	movlw	205
  7273  002E36  6E2B               	movwf	___ftge@ff1,c
  7274  002E38  0E84               	movlw	132
  7275  002E3A  6E2C               	movwf	___ftge@ff1+1,c
  7276  002E3C  0E40               	movlw	64
  7277  002E3E  6E2D               	movwf	___ftge@ff1+2,c
  7278  002E40  C0AE  F02E         	movff	RunBypas@batvolt,___ftge@ff2
  7279  002E44  C0AF  F02F         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  7280  002E48  C0B0  F030         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  7281  002E4C  EC27  F019         	call	___ftge	;wreg free
  7282  002E50  A0D8               	btfss	status,0,c
  7283  002E52  D00A               	goto	l5306
  7284                           
  7285                           ;Bypass.c: 147: {
  7286                           ;Bypass.c: 148: SetBypass(i,0);
  7287  002E54  C0B1  F017         	movff	RunBypas@i,SetBypass@pin
  7288  002E58  C0B2  F018         	movff	RunBypas@i+1,SetBypass@pin+1
  7289  002E5C  0E00               	movlw	0
  7290  002E5E  6E1A               	movwf	SetBypass@state+1,c
  7291  002E60  0E00               	movlw	0
  7292  002E62  6E19               	movwf	SetBypass@state,c
  7293  002E64  EC6B  F015         	call	_SetBypass	;wreg free
  7294  002E68                     l5306:
  7295  002E68  0100               	movlb	0	; () banked
  7296  002E6A  4BB1               	infsnz	RunBypas@i& (0+255),f,b
  7297  002E6C  2BB2               	incf	(RunBypas@i+1)& (0+255),f,b
  7298  002E6E  D7AD               	goto	L12
  7299  002E70                     __end_of_RunBypas:
  7300                           	opt stack 0
  7301                           tblptru	equ	0xFF8
  7302                           tblptrh	equ	0xFF7
  7303                           tblptrl	equ	0xFF6
  7304                           tablat	equ	0xFF5
  7305                           prodh	equ	0xFF4
  7306                           prodl	equ	0xFF3
  7307                           intcon	equ	0xFF2
  7308                           intcon2	equ	0xFF1
  7309                           postinc0	equ	0xFEE
  7310                           wreg	equ	0xFE8
  7311                           postinc1	equ	0xFE6
  7312                           postdec1	equ	0xFE5
  7313                           fsr1h	equ	0xFE2
  7314                           fsr1l	equ	0xFE1
  7315                           indf2	equ	0xFDF
  7316                           postinc2	equ	0xFDE
  7317                           postdec2	equ	0xFDD
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function _SetBypass *****************
  7323 ;; Defined at:
  7324 ;;		line 18 in file "Bypass.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  pin             2   22[COMRAM] int 
  7327 ;;  state           2   24[COMRAM] int 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;		None
  7330 ;; Return value:  Size  Location     Type
  7331 ;;                  2   22[COMRAM] int 
  7332 ;; Registers used:
  7333 ;;		wreg, status,2, status,0
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7339 ;;      Params:         4       0       0       0       0       0       0
  7340 ;;      Locals:         0       0       0       0       0       0       0
  7341 ;;      Temps:          2       0       0       0       0       0       0
  7342 ;;      Totals:         6       0       0       0       0       0       0
  7343 ;;Total ram usage:        6 bytes
  7344 ;; Hardware stack levels used:    1
  7345 ;; Hardware stack levels required when called:    4
  7346 ;; This function calls:
  7347 ;;		Nothing
  7348 ;; This function is called by:
  7349 ;;		_main
  7350 ;;		_RunBypas
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text31
  7355  002AD6                     __ptext31:
  7356                           	opt stack 0
  7357  002AD6                     _SetBypass:
  7358                           	opt stack 26
  7359                           
  7360                           ;Bypass.c: 20: switch (pin) {
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;incstack = 0
  7364  002AD6  D050               	goto	l4678
  7365  002AD8                     l4656:
  7366                           
  7367                           ;Bypass.c: 22: if (state)
  7368  002AD8  501A               	movf	SetBypass@state+1,w,c
  7369  002ADA  1019               	iorwf	SetBypass@state,w,c
  7370  002ADC  B4D8               	btfsc	status,2,c
  7371  002ADE  D002               	goto	l511
  7372                           
  7373                           ;Bypass.c: 23: {
  7374                           ;Bypass.c: 24: do { LATC5 = 1; } while(0);
  7375  002AE0  8A8B               	bsf	3979,5,c	;volatile
  7376  002AE2  0012               	return	
  7377  002AE4                     l511:
  7378  002AE4  9A8B               	bcf	3979,5,c	;volatile
  7379  002AE6  0012               	return	
  7380  002AE8                     l4658:
  7381                           
  7382                           ;Bypass.c: 32: if (state)
  7383  002AE8  501A               	movf	SetBypass@state+1,w,c
  7384  002AEA  1019               	iorwf	SetBypass@state,w,c
  7385  002AEC  B4D8               	btfsc	status,2,c
  7386  002AEE  D002               	goto	l519
  7387                           
  7388                           ;Bypass.c: 33: {
  7389                           ;Bypass.c: 34: do { LATC4 = 1; } while(0);
  7390  002AF0  888B               	bsf	3979,4,c	;volatile
  7391  002AF2  0012               	return	
  7392  002AF4                     l519:
  7393  002AF4  988B               	bcf	3979,4,c	;volatile
  7394  002AF6  0012               	return	
  7395  002AF8                     l4660:
  7396                           
  7397                           ;Bypass.c: 42: if (state)
  7398  002AF8  501A               	movf	SetBypass@state+1,w,c
  7399  002AFA  1019               	iorwf	SetBypass@state,w,c
  7400  002AFC  B4D8               	btfsc	status,2,c
  7401  002AFE  D002               	goto	l526
  7402                           
  7403                           ;Bypass.c: 43: {
  7404                           ;Bypass.c: 44: do { LATD3 = 1; } while(0);
  7405  002B00  868C               	bsf	3980,3,c	;volatile
  7406  002B02  0012               	return	
  7407  002B04                     l526:
  7408  002B04  968C               	bcf	3980,3,c	;volatile
  7409  002B06  0012               	return	
  7410  002B08                     l4662:
  7411                           
  7412                           ;Bypass.c: 52: if (state)
  7413  002B08  501A               	movf	SetBypass@state+1,w,c
  7414  002B0A  1019               	iorwf	SetBypass@state,w,c
  7415  002B0C  B4D8               	btfsc	status,2,c
  7416  002B0E  D002               	goto	l533
  7417                           
  7418                           ;Bypass.c: 53: {
  7419                           ;Bypass.c: 54: do { LATD2 = 1; } while(0);
  7420  002B10  848C               	bsf	3980,2,c	;volatile
  7421  002B12  0012               	return	
  7422  002B14                     l533:
  7423  002B14  948C               	bcf	3980,2,c	;volatile
  7424  002B16  0012               	return	
  7425  002B18                     l4664:
  7426                           
  7427                           ;Bypass.c: 62: if (state)
  7428  002B18  501A               	movf	SetBypass@state+1,w,c
  7429  002B1A  1019               	iorwf	SetBypass@state,w,c
  7430  002B1C  B4D8               	btfsc	status,2,c
  7431  002B1E  D002               	goto	l540
  7432                           
  7433                           ;Bypass.c: 63: {
  7434                           ;Bypass.c: 64: do { LATD1 = 1; } while(0);
  7435  002B20  828C               	bsf	3980,1,c	;volatile
  7436  002B22  0012               	return	
  7437  002B24                     l540:
  7438  002B24  928C               	bcf	3980,1,c	;volatile
  7439  002B26  0012               	return	
  7440  002B28                     l4666:
  7441                           
  7442                           ;Bypass.c: 72: if (state)
  7443  002B28  501A               	movf	SetBypass@state+1,w,c
  7444  002B2A  1019               	iorwf	SetBypass@state,w,c
  7445  002B2C  B4D8               	btfsc	status,2,c
  7446  002B2E  D002               	goto	l547
  7447                           
  7448                           ;Bypass.c: 73: {
  7449                           ;Bypass.c: 74: do { LATD5 = 1; } while(0);
  7450  002B30  8A8C               	bsf	3980,5,c	;volatile
  7451  002B32  0012               	return	
  7452  002B34                     l547:
  7453  002B34  9A8C               	bcf	3980,5,c	;volatile
  7454  002B36  0012               	return	
  7455  002B38                     l4668:
  7456                           
  7457                           ;Bypass.c: 82: if (state)
  7458  002B38  501A               	movf	SetBypass@state+1,w,c
  7459  002B3A  1019               	iorwf	SetBypass@state,w,c
  7460  002B3C  B4D8               	btfsc	status,2,c
  7461  002B3E  D002               	goto	l554
  7462                           
  7463                           ;Bypass.c: 83: {
  7464                           ;Bypass.c: 84: do { LATB0 = 1; } while(0);
  7465  002B40  808A               	bsf	3978,0,c	;volatile
  7466  002B42  0012               	return	
  7467  002B44                     l554:
  7468  002B44  908A               	bcf	3978,0,c	;volatile
  7469  002B46  0012               	return	
  7470  002B48                     l4670:
  7471                           
  7472                           ;Bypass.c: 92: if (state)
  7473  002B48  501A               	movf	SetBypass@state+1,w,c
  7474  002B4A  1019               	iorwf	SetBypass@state,w,c
  7475  002B4C  B4D8               	btfsc	status,2,c
  7476  002B4E  D002               	goto	l561
  7477                           
  7478                           ;Bypass.c: 93: {
  7479                           ;Bypass.c: 94: do { LATB1 = 1; } while(0);
  7480  002B50  828A               	bsf	3978,1,c	;volatile
  7481  002B52  0012               	return	
  7482  002B54                     l561:
  7483  002B54  928A               	bcf	3978,1,c	;volatile
  7484  002B56  0012               	return	
  7485  002B58                     l4672:
  7486                           
  7487                           ;Bypass.c: 102: if (state)
  7488  002B58  501A               	movf	SetBypass@state+1,w,c
  7489  002B5A  1019               	iorwf	SetBypass@state,w,c
  7490  002B5C  B4D8               	btfsc	status,2,c
  7491  002B5E  D002               	goto	l568
  7492                           
  7493                           ;Bypass.c: 103: {
  7494                           ;Bypass.c: 104: do { LATB3 = 1; } while(0);
  7495  002B60  868A               	bsf	3978,3,c	;volatile
  7496  002B62  0012               	return	
  7497  002B64                     l568:
  7498  002B64  968A               	bcf	3978,3,c	;volatile
  7499  002B66  0012               	return	
  7500  002B68                     l4674:
  7501                           
  7502                           ;Bypass.c: 112: if (state)
  7503  002B68  501A               	movf	SetBypass@state+1,w,c
  7504  002B6A  1019               	iorwf	SetBypass@state,w,c
  7505  002B6C  B4D8               	btfsc	status,2,c
  7506  002B6E  D002               	goto	l575
  7507                           
  7508                           ;Bypass.c: 113: {
  7509                           ;Bypass.c: 114: do { LATA0 = 1; } while(0);
  7510  002B70  8089               	bsf	3977,0,c	;volatile
  7511  002B72  0012               	return	
  7512  002B74                     l575:
  7513  002B74  9089               	bcf	3977,0,c	;volatile
  7514  002B76  0012               	return	
  7515  002B78                     l4678:
  7516  002B78  C017  F01B         	movff	SetBypass@pin,??_SetBypass
  7517  002B7C  C018  F01C         	movff	SetBypass@pin+1,??_SetBypass+1
  7518                           
  7519                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7520                           ; Switch size 1, requested type "space"
  7521                           ; Number of cases is 1, Range of values is 0 to 0
  7522                           ; switch strategies available:
  7523                           ; Name         Instructions Cycles
  7524                           ; simple_byte            4     3 (average)
  7525                           ;	Chosen strategy is simple_byte
  7526  002B80  501C               	movf	??_SetBypass+1,w,c
  7527  002B82  0A00               	xorlw	0	; case 0
  7528  002B84  A4D8               	btfss	status,2,c
  7529  002B86  0012               	return	
  7530                           
  7531                           ; Switch size 1, requested type "space"
  7532                           ; Number of cases is 10, Range of values is 0 to 9
  7533                           ; switch strategies available:
  7534                           ; Name         Instructions Cycles
  7535                           ; simple_byte           31    16 (average)
  7536                           ;	Chosen strategy is simple_byte
  7537  002B88  501B               	movf	??_SetBypass,w,c
  7538  002B8A  0A00               	xorlw	0	; case 0
  7539  002B8C  B4D8               	btfsc	status,2,c
  7540  002B8E  D7A4               	goto	l4656
  7541  002B90  0A01               	xorlw	1	; case 1
  7542  002B92  B4D8               	btfsc	status,2,c
  7543  002B94  D7A9               	goto	l4658
  7544  002B96  0A03               	xorlw	3	; case 2
  7545  002B98  B4D8               	btfsc	status,2,c
  7546  002B9A  D7AE               	goto	l4660
  7547  002B9C  0A01               	xorlw	1	; case 3
  7548  002B9E  B4D8               	btfsc	status,2,c
  7549  002BA0  D7B3               	goto	l4662
  7550  002BA2  0A07               	xorlw	7	; case 4
  7551  002BA4  B4D8               	btfsc	status,2,c
  7552  002BA6  D7B8               	goto	l4664
  7553  002BA8  0A01               	xorlw	1	; case 5
  7554  002BAA  B4D8               	btfsc	status,2,c
  7555  002BAC  D7BD               	goto	l4666
  7556  002BAE  0A03               	xorlw	3	; case 6
  7557  002BB0  B4D8               	btfsc	status,2,c
  7558  002BB2  D7C2               	goto	l4668
  7559  002BB4  0A01               	xorlw	1	; case 7
  7560  002BB6  B4D8               	btfsc	status,2,c
  7561  002BB8  D7C7               	goto	l4670
  7562  002BBA  0A0F               	xorlw	15	; case 8
  7563  002BBC  B4D8               	btfsc	status,2,c
  7564  002BBE  D7CC               	goto	l4672
  7565  002BC0  0A01               	xorlw	1	; case 9
  7566  002BC2  A4D8               	btfss	status,2,c
  7567  002BC4  0012               	return	
  7568  002BC6  D7D0               	goto	l4674
  7569  002BC8                     __end_of_SetBypass:
  7570                           	opt stack 0
  7571                           tblptru	equ	0xFF8
  7572                           tblptrh	equ	0xFF7
  7573                           tblptrl	equ	0xFF6
  7574                           tablat	equ	0xFF5
  7575                           prodh	equ	0xFF4
  7576                           prodl	equ	0xFF3
  7577                           intcon	equ	0xFF2
  7578                           intcon2	equ	0xFF1
  7579                           postinc0	equ	0xFEE
  7580                           wreg	equ	0xFE8
  7581                           postinc1	equ	0xFE6
  7582                           postdec1	equ	0xFE5
  7583                           fsr1h	equ	0xFE2
  7584                           fsr1l	equ	0xFE1
  7585                           indf2	equ	0xFDF
  7586                           postinc2	equ	0xFDE
  7587                           postdec2	equ	0xFDD
  7588                           fsr2h	equ	0xFDA
  7589                           fsr2l	equ	0xFD9
  7590                           status	equ	0xFD8
  7591                           
  7592 ;; *************** function _Battery_Get *****************
  7593 ;; Defined at:
  7594 ;;		line 94 in file "Battery.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  channelnum      2   42[COMRAM] int 
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;		None
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  3   42[COMRAM] float 
  7601 ;; Registers used:
  7602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7608 ;;      Params:         3       0       0       0       0       0       0
  7609 ;;      Locals:         0       0       0       0       0       0       0
  7610 ;;      Temps:          0       0       0       0       0       0       0
  7611 ;;      Totals:         3       0       0       0       0       0       0
  7612 ;;Total ram usage:        3 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    5
  7615 ;; This function calls:
  7616 ;;		___wmul
  7617 ;; This function is called by:
  7618 ;;		_main
  7619 ;;		_RunBypas
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           	psect	text32
  7624  003678                     __ptext32:
  7625                           	opt stack 0
  7626  003678                     _Battery_Get:
  7627                           	opt stack 24
  7628                           
  7629                           ;Battery.c: 96: return Battery_Volt[channelnum];
  7630                           
  7631                           ;incstack = 0
  7632  003678  C02B  F025         	movff	Battery_Get@channelnum,___wmul@multiplier
  7633  00367C  C02C  F026         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  7634  003680  0E00               	movlw	0
  7635  003682  6E28               	movwf	___wmul@multiplicand+1,c
  7636  003684  0E03               	movlw	3
  7637  003686  6E27               	movwf	___wmul@multiplicand,c
  7638  003688  ECC6  F01B         	call	___wmul	;wreg free
  7639  00368C  0100               	movlb	0	; () banked
  7640  00368E  0E60               	movlw	low _Battery_Volt
  7641  003690  2425               	addwf	?___wmul,w,c
  7642  003692  6ED9               	movwf	fsr2l,c
  7643  003694  0100               	movlb	0	; () banked
  7644  003696  0E00               	movlw	high _Battery_Volt
  7645  003698  2026               	addwfc	?___wmul+1,w,c
  7646  00369A  6EDA               	movwf	fsr2h,c
  7647  00369C  CFDE F02B          	movff	postinc2,?_Battery_Get
  7648  0036A0  CFDE F02C          	movff	postinc2,?_Battery_Get+1
  7649  0036A4  CFDD F02D          	movff	postdec2,?_Battery_Get+2
  7650  0036A8  0012               	return	
  7651  0036AA                     __end_of_Battery_Get:
  7652                           	opt stack 0
  7653                           tblptru	equ	0xFF8
  7654                           tblptrh	equ	0xFF7
  7655                           tblptrl	equ	0xFF6
  7656                           tablat	equ	0xFF5
  7657                           prodh	equ	0xFF4
  7658                           prodl	equ	0xFF3
  7659                           intcon	equ	0xFF2
  7660                           intcon2	equ	0xFF1
  7661                           postinc0	equ	0xFEE
  7662                           wreg	equ	0xFE8
  7663                           postinc1	equ	0xFE6
  7664                           postdec1	equ	0xFE5
  7665                           fsr1h	equ	0xFE2
  7666                           fsr1l	equ	0xFE1
  7667                           indf2	equ	0xFDF
  7668                           postinc2	equ	0xFDE
  7669                           postdec2	equ	0xFDD
  7670                           fsr2h	equ	0xFDA
  7671                           fsr2l	equ	0xFD9
  7672                           status	equ	0xFD8
  7673                           
  7674 ;; *************** function _Delay *****************
  7675 ;; Defined at:
  7676 ;;		line 25 in file "Functions.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  d_lenth         4   22[COMRAM] long 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  wait            4   27[COMRAM] long 
  7681 ;; Return value:  Size  Location     Type
  7682 ;;		None               void
  7683 ;; Registers used:
  7684 ;;		wreg, status,2, status,0
  7685 ;; Tracked objects:
  7686 ;;		On entry : 0/0
  7687 ;;		On exit  : 0/0
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7690 ;;      Params:         4       0       0       0       0       0       0
  7691 ;;      Locals:         4       0       0       0       0       0       0
  7692 ;;      Temps:          1       0       0       0       0       0       0
  7693 ;;      Totals:         9       0       0       0       0       0       0
  7694 ;;Total ram usage:        9 bytes
  7695 ;; Hardware stack levels used:    1
  7696 ;; Hardware stack levels required when called:    4
  7697 ;; This function calls:
  7698 ;;		Nothing
  7699 ;; This function is called by:
  7700 ;;		_main
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           	psect	text33
  7705  0034E6                     __ptext33:
  7706                           	opt stack 0
  7707  0034E6                     _Delay:
  7708                           	opt stack 26
  7709                           
  7710                           ;Functions.c: 27: long int wait = 0;
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;incstack = 0
  7714  0034E6  0E00               	movlw	0
  7715  0034E8  6E1C               	movwf	Delay@wait,c
  7716  0034EA  0E00               	movlw	0
  7717  0034EC  6E1D               	movwf	Delay@wait+1,c
  7718  0034EE  0E00               	movlw	0
  7719  0034F0  6E1E               	movwf	Delay@wait+2,c
  7720  0034F2  0E00               	movlw	0
  7721  0034F4  6E1F               	movwf	Delay@wait+3,c
  7722                           
  7723                           ;Functions.c: 28: for(wait = 0;wait<d_lenth;wait++)
  7724  0034F6  0E00               	movlw	0
  7725  0034F8  6E1C               	movwf	Delay@wait,c
  7726  0034FA  0E00               	movlw	0
  7727  0034FC  6E1D               	movwf	Delay@wait+1,c
  7728  0034FE  0E00               	movlw	0
  7729  003500  6E1E               	movwf	Delay@wait+2,c
  7730  003502  0E00               	movlw	0
  7731  003504  6E1F               	movwf	Delay@wait+3,c
  7732  003506  D007               	goto	l435
  7733  003508                     l436:
  7734                           
  7735                           ;Functions.c: 29: {
  7736                           ;Functions.c: 30: _delay(1);
  7737  003508  F000               	nop	
  7738  00350A  0E01               	movlw	1
  7739  00350C  261C               	addwf	Delay@wait,f,c
  7740  00350E  0E00               	movlw	0
  7741  003510  221D               	addwfc	Delay@wait+1,f,c
  7742  003512  221E               	addwfc	Delay@wait+2,f,c
  7743  003514  221F               	addwfc	Delay@wait+3,f,c
  7744  003516                     l435:
  7745  003516  501F               	movf	Delay@wait+3,w,c
  7746  003518  0A80               	xorlw	128
  7747  00351A  6E1B               	movwf	??_Delay& (0+255),c
  7748  00351C  5017               	movf	Delay@d_lenth,w,c
  7749  00351E  5C1C               	subwf	Delay@wait,w,c
  7750  003520  5018               	movf	Delay@d_lenth+1,w,c
  7751  003522  581D               	subwfb	Delay@wait+1,w,c
  7752  003524  5019               	movf	Delay@d_lenth+2,w,c
  7753  003526  581E               	subwfb	Delay@wait+2,w,c
  7754  003528  501A               	movf	Delay@d_lenth+3,w,c
  7755  00352A  0A80               	xorlw	128
  7756  00352C  581B               	subwfb	??_Delay& (0+255),w,c
  7757  00352E  B0D8               	btfsc	status,0,c
  7758  003530  0012               	return	
  7759  003532  D7EA               	goto	l436
  7760  003534                     __end_of_Delay:
  7761                           	opt stack 0
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodh	equ	0xFF4
  7767                           prodl	equ	0xFF3
  7768                           intcon	equ	0xFF2
  7769                           intcon2	equ	0xFF1
  7770                           postinc0	equ	0xFEE
  7771                           wreg	equ	0xFE8
  7772                           postinc1	equ	0xFE6
  7773                           postdec1	equ	0xFE5
  7774                           fsr1h	equ	0xFE2
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function _Battery_Fault *****************
  7784 ;; Defined at:
  7785 ;;		line 73 in file "Battery.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  i               2    1[BANK0 ] int 
  7790 ;;  fault           1    0[BANK0 ] unsigned char 
  7791 ;; Return value:  Size  Location     Type
  7792 ;;                  1    wreg      unsigned char 
  7793 ;; Registers used:
  7794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7795 ;; Tracked objects:
  7796 ;;		On entry : 0/0
  7797 ;;		On exit  : 0/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7800 ;;      Params:         0       0       0       0       0       0       0
  7801 ;;      Locals:         0       3       0       0       0       0       0
  7802 ;;      Temps:          0       0       0       0       0       0       0
  7803 ;;      Totals:         0       3       0       0       0       0       0
  7804 ;;Total ram usage:        3 bytes
  7805 ;; Hardware stack levels used:    1
  7806 ;; Hardware stack levels required when called:    5
  7807 ;; This function calls:
  7808 ;;		___ftge
  7809 ;;		___wmul
  7810 ;; This function is called by:
  7811 ;;		_main
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text34
  7816  002E70                     __ptext34:
  7817                           	opt stack 0
  7818  002E70                     _Battery_Fault:
  7819                           	opt stack 25
  7820                           
  7821                           ;Battery.c: 75: char fault = 0;
  7822                           
  7823                           ;incstack = 0
  7824  002E70  0E00               	movlw	0
  7825  002E72  0100               	movlb	0	; () banked
  7826  002E74  6FAC               	movwf	Battery_Fault@fault& (0+255),b
  7827                           
  7828                           ;Battery.c: 76: for(int i = 0;i<9;i++)
  7829  002E76  0E00               	movlw	0
  7830  002E78  0100               	movlb	0	; () banked
  7831  002E7A  6FAE               	movwf	(Battery_Fault@i+1)& (0+255),b
  7832  002E7C  0E00               	movlw	0
  7833  002E7E  0100               	movlb	0	; () banked
  7834  002E80  6FAD               	movwf	Battery_Fault@i& (0+255),b
  7835  002E82                     
  7836                           ; BSR set to: 0
  7837  002E82  0100               	movlb	0	; () banked
  7838  002E84  51AE               	movf	(Battery_Fault@i+1)& (0+255),w,b
  7839  002E86  0A80               	xorlw	128
  7840  002E88  0F80               	addlw	-128
  7841  002E8A  0E09               	movlw	9
  7842  002E8C  B4D8               	btfsc	status,2,c
  7843  002E8E  5DAD               	subwf	Battery_Fault@i& (0+255),w,b
  7844  002E90  B0D8               	btfsc	status,0,c
  7845  002E92  0012               	return	
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;Battery.c: 77: {
  7849                           ;Battery.c: 78: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  7850                           
  7851                           ; BSR set to: 0
  7852                           
  7853                           ; BSR set to: 0
  7854  002E94  0E00               	movlw	0
  7855  002E96  6E2B               	movwf	___ftge@ff1,c
  7856  002E98  0E40               	movlw	64
  7857  002E9A  6E2C               	movwf	___ftge@ff1+1,c
  7858  002E9C  0E40               	movlw	64
  7859  002E9E  6E2D               	movwf	___ftge@ff1+2,c
  7860  002EA0  C0AD  F025         	movff	Battery_Fault@i,___wmul@multiplier
  7861  002EA4  C0AE  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  7862  002EA8  0E00               	movlw	0
  7863  002EAA  6E28               	movwf	___wmul@multiplicand+1,c
  7864  002EAC  0E03               	movlw	3
  7865  002EAE  6E27               	movwf	___wmul@multiplicand,c
  7866  002EB0  ECC6  F01B         	call	___wmul	;wreg free
  7867  002EB4  0100               	movlb	0	; () banked
  7868  002EB6  0E60               	movlw	low _Battery_Volt
  7869  002EB8  2425               	addwf	?___wmul,w,c
  7870  002EBA  6ED9               	movwf	fsr2l,c
  7871  002EBC  0100               	movlb	0	; () banked
  7872  002EBE  0E00               	movlw	high _Battery_Volt
  7873  002EC0  2026               	addwfc	?___wmul+1,w,c
  7874  002EC2  6EDA               	movwf	fsr2h,c
  7875  002EC4  CFDE F02E          	movff	postinc2,___ftge@ff2
  7876  002EC8  CFDE F02F          	movff	postinc2,___ftge@ff2+1
  7877  002ECC  CFDD F030          	movff	postdec2,___ftge@ff2+2
  7878  002ED0  EC27  F019         	call	___ftge	;wreg free
  7879  002ED4  B0D8               	btfsc	status,0,c
  7880  002ED6  D025               	goto	l5050
  7881  002ED8  C0AD  F025         	movff	Battery_Fault@i,___wmul@multiplier
  7882  002EDC  C0AE  F026         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  7883  002EE0  0E00               	movlw	0
  7884  002EE2  6E28               	movwf	___wmul@multiplicand+1,c
  7885  002EE4  0E03               	movlw	3
  7886  002EE6  6E27               	movwf	___wmul@multiplicand,c
  7887  002EE8  ECC6  F01B         	call	___wmul	;wreg free
  7888  002EEC  0100               	movlb	0	; () banked
  7889  002EEE  0E60               	movlw	low _Battery_Volt
  7890  002EF0  2425               	addwf	?___wmul,w,c
  7891  002EF2  6ED9               	movwf	fsr2l,c
  7892  002EF4  0100               	movlb	0	; () banked
  7893  002EF6  0E00               	movlw	high _Battery_Volt
  7894  002EF8  2026               	addwfc	?___wmul+1,w,c
  7895  002EFA  6EDA               	movwf	fsr2h,c
  7896  002EFC  CFDE F02B          	movff	postinc2,___ftge@ff1
  7897  002F00  CFDE F02C          	movff	postinc2,___ftge@ff1+1
  7898  002F04  CFDD F02D          	movff	postdec2,___ftge@ff1+2
  7899  002F08  0EB8               	movlw	184
  7900  002F0A  6E2E               	movwf	___ftge@ff2,c
  7901  002F0C  0E86               	movlw	134
  7902  002F0E  6E2F               	movwf	___ftge@ff2+1,c
  7903  002F10  0E40               	movlw	64
  7904  002F12  6E30               	movwf	___ftge@ff2+2,c
  7905  002F14  EC27  F019         	call	___ftge	;wreg free
  7906  002F18  B0D8               	btfsc	status,0,c
  7907  002F1A  D003               	goto	l5050
  7908                           
  7909                           ;Battery.c: 79: {
  7910                           ;Battery.c: 80: fault = 1;
  7911  002F1C  0E01               	movlw	1
  7912  002F1E  0100               	movlb	0	; () banked
  7913  002F20  6FAC               	movwf	Battery_Fault@fault& (0+255),b
  7914  002F22                     l5050:
  7915  002F22  0100               	movlb	0	; () banked
  7916  002F24  4BAD               	infsnz	Battery_Fault@i& (0+255),f,b
  7917  002F26  2BAE               	incf	(Battery_Fault@i+1)& (0+255),f,b
  7918  002F28  D7AC               	goto	L13
  7919  002F2A                     __end_of_Battery_Fault:
  7920                           	opt stack 0
  7921                           tblptru	equ	0xFF8
  7922                           tblptrh	equ	0xFF7
  7923                           tblptrl	equ	0xFF6
  7924                           tablat	equ	0xFF5
  7925                           prodh	equ	0xFF4
  7926                           prodl	equ	0xFF3
  7927                           intcon	equ	0xFF2
  7928                           intcon2	equ	0xFF1
  7929                           postinc0	equ	0xFEE
  7930                           wreg	equ	0xFE8
  7931                           postinc1	equ	0xFE6
  7932                           postdec1	equ	0xFE5
  7933                           fsr1h	equ	0xFE2
  7934                           fsr1l	equ	0xFE1
  7935                           indf2	equ	0xFDF
  7936                           postinc2	equ	0xFDE
  7937                           postdec2	equ	0xFDD
  7938                           fsr2h	equ	0xFDA
  7939                           fsr2l	equ	0xFD9
  7940                           status	equ	0xFD8
  7941                           
  7942 ;; *************** function ___ftge *****************
  7943 ;; Defined at:
  7944 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;  ff1             3   42[COMRAM] float 
  7947 ;;  ff2             3   45[COMRAM] float 
  7948 ;; Auto vars:     Size  Location     Type
  7949 ;;		None
  7950 ;; Return value:  Size  Location     Type
  7951 ;;		None               void
  7952 ;; Registers used:
  7953 ;;		wreg, status,2, status,0
  7954 ;; Tracked objects:
  7955 ;;		On entry : 0/0
  7956 ;;		On exit  : 0/0
  7957 ;;		Unchanged: 0/0
  7958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7959 ;;      Params:         6       0       0       0       0       0       0
  7960 ;;      Locals:         0       0       0       0       0       0       0
  7961 ;;      Temps:          3       0       0       0       0       0       0
  7962 ;;      Totals:         9       0       0       0       0       0       0
  7963 ;;Total ram usage:        9 bytes
  7964 ;; Hardware stack levels used:    1
  7965 ;; Hardware stack levels required when called:    4
  7966 ;; This function calls:
  7967 ;;		Nothing
  7968 ;; This function is called by:
  7969 ;;		_Battery_Fault
  7970 ;;		_Temp_Fault
  7971 ;;		_RunBypas
  7972 ;;		_printf
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           	psect	text35
  7977  00324E                     __ptext35:
  7978                           	opt stack 0
  7979  00324E                     ___ftge:
  7980                           	opt stack 25
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;incstack = 0
  7984  00324E  AE2D               	btfss	___ftge@ff1+2,7,c
  7985  003250  D016               	goto	l4912
  7986  003252  C02B  F031         	movff	___ftge@ff1,??___ftge
  7987  003256  C02C  F032         	movff	___ftge@ff1+1,??___ftge+1
  7988  00325A  C02D  F033         	movff	___ftge@ff1+2,??___ftge+2
  7989  00325E  1E31               	comf	??___ftge,f,c
  7990  003260  1E32               	comf	??___ftge+1,f,c
  7991  003262  1E33               	comf	??___ftge+2,f,c
  7992  003264  2A31               	incf	??___ftge,f,c
  7993  003266  0E00               	movlw	0
  7994  003268  2232               	addwfc	??___ftge+1,f,c
  7995  00326A  2233               	addwfc	??___ftge+2,f,c
  7996  00326C  0E00               	movlw	0
  7997  00326E  2431               	addwf	??___ftge,w,c
  7998  003270  6E2B               	movwf	___ftge@ff1,c
  7999  003272  0E00               	movlw	0
  8000  003274  2032               	addwfc	??___ftge+1,w,c
  8001  003276  6E2C               	movwf	___ftge@ff1+1,c
  8002  003278  0E80               	movlw	128
  8003  00327A  2033               	addwfc	??___ftge+2,w,c
  8004  00327C  6E2D               	movwf	___ftge@ff1+2,c
  8005  00327E                     l4912:
  8006  00327E  AE30               	btfss	___ftge@ff2+2,7,c
  8007  003280  D016               	goto	l4916
  8008  003282  C02E  F031         	movff	___ftge@ff2,??___ftge
  8009  003286  C02F  F032         	movff	___ftge@ff2+1,??___ftge+1
  8010  00328A  C030  F033         	movff	___ftge@ff2+2,??___ftge+2
  8011  00328E  1E31               	comf	??___ftge,f,c
  8012  003290  1E32               	comf	??___ftge+1,f,c
  8013  003292  1E33               	comf	??___ftge+2,f,c
  8014  003294  2A31               	incf	??___ftge,f,c
  8015  003296  0E00               	movlw	0
  8016  003298  2232               	addwfc	??___ftge+1,f,c
  8017  00329A  2233               	addwfc	??___ftge+2,f,c
  8018  00329C  0E00               	movlw	0
  8019  00329E  2431               	addwf	??___ftge,w,c
  8020  0032A0  6E2E               	movwf	___ftge@ff2,c
  8021  0032A2  0E00               	movlw	0
  8022  0032A4  2032               	addwfc	??___ftge+1,w,c
  8023  0032A6  6E2F               	movwf	___ftge@ff2+1,c
  8024  0032A8  0E80               	movlw	128
  8025  0032AA  2033               	addwfc	??___ftge+2,w,c
  8026  0032AC  6E30               	movwf	___ftge@ff2+2,c
  8027  0032AE                     l4916:
  8028  0032AE  0E00               	movlw	0
  8029  0032B0  1A2B               	xorwf	___ftge@ff1,f,c
  8030  0032B2  0E00               	movlw	0
  8031  0032B4  1A2C               	xorwf	___ftge@ff1+1,f,c
  8032  0032B6  0E80               	movlw	128
  8033  0032B8  1A2D               	xorwf	___ftge@ff1+2,f,c
  8034  0032BA  0E00               	movlw	0
  8035  0032BC  1A2E               	xorwf	___ftge@ff2,f,c
  8036  0032BE  0E00               	movlw	0
  8037  0032C0  1A2F               	xorwf	___ftge@ff2+1,f,c
  8038  0032C2  0E80               	movlw	128
  8039  0032C4  1A30               	xorwf	___ftge@ff2+2,f,c
  8040  0032C6  502E               	movf	___ftge@ff2,w,c
  8041  0032C8  5C2B               	subwf	___ftge@ff1,w,c
  8042  0032CA  502F               	movf	___ftge@ff2+1,w,c
  8043  0032CC  582C               	subwfb	___ftge@ff1+1,w,c
  8044  0032CE  5030               	movf	___ftge@ff2+2,w,c
  8045  0032D0  582D               	subwfb	___ftge@ff1+2,w,c
  8046  0032D2  B0D8               	btfsc	status,0,c
  8047  0032D4  D002               	goto	l4922
  8048  0032D6  90D8               	bcf	status,0,c
  8049  0032D8  0012               	return	
  8050  0032DA                     l4922:
  8051  0032DA  80D8               	bsf	status,0,c
  8052  0032DC  0012               	return	
  8053  0032DE                     __end_of___ftge:
  8054                           	opt stack 0
  8055                           tblptru	equ	0xFF8
  8056                           tblptrh	equ	0xFF7
  8057                           tblptrl	equ	0xFF6
  8058                           tablat	equ	0xFF5
  8059                           prodh	equ	0xFF4
  8060                           prodl	equ	0xFF3
  8061                           intcon	equ	0xFF2
  8062                           intcon2	equ	0xFF1
  8063                           postinc0	equ	0xFEE
  8064                           wreg	equ	0xFE8
  8065                           postinc1	equ	0xFE6
  8066                           postdec1	equ	0xFE5
  8067                           fsr1h	equ	0xFE2
  8068                           fsr1l	equ	0xFE1
  8069                           indf2	equ	0xFDF
  8070                           postinc2	equ	0xFDE
  8071                           postdec2	equ	0xFDD
  8072                           fsr2h	equ	0xFDA
  8073                           fsr2l	equ	0xFD9
  8074                           status	equ	0xFD8
  8075                           
  8076 ;; *************** function _Battery_Convert *****************
  8077 ;; Defined at:
  8078 ;;		line 35 in file "Battery.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;		None
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  x               2   36[BANK0 ] int 
  8083 ;; Return value:  Size  Location     Type
  8084 ;;		None               void
  8085 ;; Registers used:
  8086 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8092 ;;      Params:         0       0       0       0       0       0       0
  8093 ;;      Locals:         0       2       0       0       0       0       0
  8094 ;;      Temps:          0       2       0       0       0       0       0
  8095 ;;      Totals:         0       4       0       0       0       0       0
  8096 ;;Total ram usage:        4 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    7
  8099 ;; This function calls:
  8100 ;;		_Battery_Filter
  8101 ;;		___awdiv
  8102 ;;		___awtoft
  8103 ;;		___wmul
  8104 ;; This function is called by:
  8105 ;;		_main
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text36
  8110  002F2A                     __ptext36:
  8111                           	opt stack 0
  8112  002F2A                     _Battery_Convert:
  8113                           	opt stack 23
  8114                           
  8115                           ;Battery.c: 37: int x;
  8116                           ;Battery.c: 38: for(x = 0; x < 10; x++)
  8117                           
  8118                           ;incstack = 0
  8119  002F2A  0E00               	movlw	0
  8120  002F2C  0100               	movlb	0	; () banked
  8121  002F2E  6FD1               	movwf	(Battery_Convert@x+1)& (0+255),b
  8122  002F30  0E00               	movlw	0
  8123  002F32  0100               	movlb	0	; () banked
  8124  002F34  6FD0               	movwf	Battery_Convert@x& (0+255),b
  8125  002F36                     
  8126                           ; BSR set to: 0
  8127  002F36  0100               	movlb	0	; () banked
  8128  002F38  51D1               	movf	(Battery_Convert@x+1)& (0+255),w,b
  8129  002F3A  0A80               	xorlw	128
  8130  002F3C  0F80               	addlw	-128
  8131  002F3E  0E0A               	movlw	10
  8132  002F40  B4D8               	btfsc	status,2,c
  8133  002F42  5DD0               	subwf	Battery_Convert@x& (0+255),w,b
  8134  002F44  B0D8               	btfsc	status,0,c
  8135  002F46  D049               	goto	l5036
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;Battery.c: 39: {
  8139                           ;Battery.c: 40: TempBattery_Volt[x] = ((Battery_Adc[x]/1024)*5);
  8140                           
  8141                           ; BSR set to: 0
  8142                           
  8143                           ; BSR set to: 0
  8144  002F48  C0D0  F025         	movff	Battery_Convert@x,___wmul@multiplier
  8145  002F4C  C0D1  F026         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  8146  002F50  0E00               	movlw	0
  8147  002F52  6E28               	movwf	___wmul@multiplicand+1,c
  8148  002F54  0E03               	movlw	3
  8149  002F56  6E27               	movwf	___wmul@multiplicand,c
  8150  002F58  ECC6  F01B         	call	___wmul	;wreg free
  8151  002F5C  0101               	movlb	1	; () banked
  8152  002F5E  0E8C               	movlw	low _TempBattery_Volt
  8153  002F60  2425               	addwf	?___wmul,w,c
  8154  002F62  6ED9               	movwf	fsr2l,c
  8155  002F64  0101               	movlb	1	; () banked
  8156  002F66  0E01               	movlw	high _TempBattery_Volt
  8157  002F68  2026               	addwfc	?___wmul+1,w,c
  8158  002F6A  6EDA               	movwf	fsr2h,c
  8159  002F6C  0E04               	movlw	4
  8160  002F6E  6E20               	movwf	___awdiv@divisor+1,c
  8161  002F70  0E00               	movlw	0
  8162  002F72  6E1F               	movwf	___awdiv@divisor,c
  8163  002F74  0E7E               	movlw	low _Battery_Adc
  8164  002F76  0100               	movlb	0	; () banked
  8165  002F78  6FCE               	movwf	??_Battery_Convert& (0+255),b
  8166  002F7A  0E00               	movlw	high _Battery_Adc
  8167  002F7C  6FCF               	movwf	(??_Battery_Convert+1)& (0+255),b
  8168  002F7E  90D8               	bcf	status,0,c
  8169  002F80  0100               	movlb	0	; () banked
  8170  002F82  35D0               	rlcf	Battery_Convert@x& (0+255),w,b
  8171  002F84  6EE1               	movwf	fsr1l,c
  8172  002F86  0100               	movlb	0	; () banked
  8173  002F88  35D1               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  8174  002F8A  6EE2               	movwf	fsr1h,c
  8175  002F8C  0100               	movlb	0	; () banked
  8176  002F8E  51CE               	movf	??_Battery_Convert& (0+255),w,b
  8177  002F90  26E1               	addwf	fsr1l,f,c
  8178  002F92  0100               	movlb	0	; () banked
  8179  002F94  51CF               	movf	(??_Battery_Convert+1)& (0+255),w,b
  8180  002F96  22E2               	addwfc	fsr1h,f,c
  8181  002F98  CFE6 F01D          	movff	postinc1,___awdiv@dividend
  8182  002F9C  CFE5 F01E          	movff	postdec1,___awdiv@dividend+1
  8183  002FA0  EC44  F018         	call	___awdiv	;wreg free
  8184  002FA4  C01D  F025         	movff	?___awdiv,___wmul@multiplier
  8185  002FA8  C01E  F026         	movff	?___awdiv+1,___wmul@multiplier+1
  8186  002FAC  0E00               	movlw	0
  8187  002FAE  6E28               	movwf	___wmul@multiplicand+1,c
  8188  002FB0  0E05               	movlw	5
  8189  002FB2  6E27               	movwf	___wmul@multiplicand,c
  8190  002FB4  ECC6  F01B         	call	___wmul	;wreg free
  8191  002FB8  C025  F02B         	movff	?___wmul,___awtoft@c
  8192  002FBC  C026  F02C         	movff	?___wmul+1,___awtoft@c+1
  8193  002FC0  ECBF  F01A         	call	___awtoft	;wreg free
  8194  002FC4  C02B  FFDE         	movff	?___awtoft,postinc2
  8195  002FC8  C02C  FFDE         	movff	?___awtoft+1,postinc2
  8196  002FCC  C02D  FFDD         	movff	?___awtoft+2,postdec2
  8197  002FD0  52DD               	movf	postdec2,f,c
  8198  002FD2  0100               	movlb	0	; () banked
  8199  002FD4  4BD0               	infsnz	Battery_Convert@x& (0+255),f,b
  8200  002FD6  2BD1               	incf	(Battery_Convert@x+1)& (0+255),f,b
  8201  002FD8  D7AE               	goto	L14
  8202  002FDA                     l5036:
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;Battery.c: 41: }
  8206                           ;Battery.c: 42: Battery_Filter();
  8207  002FDA  EC4A  F011         	call	_Battery_Filter	;wreg free
  8208  002FDE  0012               	return	
  8209  002FE0                     __end_of_Battery_Convert:
  8210                           	opt stack 0
  8211                           tblptru	equ	0xFF8
  8212                           tblptrh	equ	0xFF7
  8213                           tblptrl	equ	0xFF6
  8214                           tablat	equ	0xFF5
  8215                           prodh	equ	0xFF4
  8216                           prodl	equ	0xFF3
  8217                           intcon	equ	0xFF2
  8218                           intcon2	equ	0xFF1
  8219                           postinc0	equ	0xFEE
  8220                           wreg	equ	0xFE8
  8221                           postinc1	equ	0xFE6
  8222                           postdec1	equ	0xFE5
  8223                           fsr1h	equ	0xFE2
  8224                           fsr1l	equ	0xFE1
  8225                           indf2	equ	0xFDF
  8226                           postinc2	equ	0xFDE
  8227                           postdec2	equ	0xFDD
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function ___awtoft *****************
  8233 ;; Defined at:
  8234 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;  c               2   42[COMRAM] int 
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;  sign            1   45[COMRAM] unsigned char 
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  3   42[COMRAM] float 
  8241 ;; Registers used:
  8242 ;;		wreg, status,2, status,0, prodl, cstack
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8248 ;;      Params:         3       0       0       0       0       0       0
  8249 ;;      Locals:         1       0       0       0       0       0       0
  8250 ;;      Temps:          0       0       0       0       0       0       0
  8251 ;;      Totals:         4       0       0       0       0       0       0
  8252 ;;Total ram usage:        4 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    5
  8255 ;; This function calls:
  8256 ;;		___ftpack
  8257 ;; This function is called by:
  8258 ;;		_Battery_Convert
  8259 ;;		_Temp_Convert
  8260 ;;		_log
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           	psect	text37
  8265  00357E                     __ptext37:
  8266                           	opt stack 0
  8267  00357E                     ___awtoft:
  8268                           	opt stack 23
  8269                           
  8270                           ;incstack = 0
  8271  00357E  0E00               	movlw	0
  8272  003580  6E2E               	movwf	___awtoft@sign,c
  8273  003582  502C               	movf	___awtoft@c+1,w,c
  8274  003584  0A80               	xorlw	128
  8275  003586  6EF3               	movwf	prodl,c
  8276  003588  0E80               	movlw	128
  8277  00358A  5CF3               	subwf	prodl,w,c
  8278  00358C  0E00               	movlw	0
  8279  00358E  B4D8               	btfsc	status,2,c
  8280  003590  5C2B               	subwf	___awtoft@c,w,c
  8281  003592  B0D8               	btfsc	status,0,c
  8282  003594  D006               	goto	l4568
  8283  003596  6C2B               	negf	___awtoft@c,c
  8284  003598  1E2C               	comf	___awtoft@c+1,f,c
  8285  00359A  B0D8               	btfsc	status,0,c
  8286  00359C  2A2C               	incf	___awtoft@c+1,f,c
  8287  00359E  0E01               	movlw	1
  8288  0035A0  6E2E               	movwf	___awtoft@sign,c
  8289  0035A2                     l4568:
  8290  0035A2  C02B  F017         	movff	___awtoft@c,___ftpack@arg
  8291  0035A6  C02C  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  8292  0035AA  6A19               	clrf	___ftpack@arg+2,c
  8293  0035AC  0E8E               	movlw	142
  8294  0035AE  6E1A               	movwf	___ftpack@exp,c
  8295  0035B0  C02E  F01B         	movff	___awtoft@sign,___ftpack@sign
  8296  0035B4  ECF0  F017         	call	___ftpack	;wreg free
  8297  0035B8  C017  F02B         	movff	?___ftpack,?___awtoft
  8298  0035BC  C018  F02C         	movff	?___ftpack+1,?___awtoft+1
  8299  0035C0  C019  F02D         	movff	?___ftpack+2,?___awtoft+2
  8300  0035C4  0012               	return	
  8301  0035C6                     __end_of___awtoft:
  8302                           	opt stack 0
  8303                           tblptru	equ	0xFF8
  8304                           tblptrh	equ	0xFF7
  8305                           tblptrl	equ	0xFF6
  8306                           tablat	equ	0xFF5
  8307                           prodh	equ	0xFF4
  8308                           prodl	equ	0xFF3
  8309                           intcon	equ	0xFF2
  8310                           intcon2	equ	0xFF1
  8311                           postinc0	equ	0xFEE
  8312                           wreg	equ	0xFE8
  8313                           postinc1	equ	0xFE6
  8314                           postdec1	equ	0xFE5
  8315                           fsr1h	equ	0xFE2
  8316                           fsr1l	equ	0xFE1
  8317                           indf2	equ	0xFDF
  8318                           postinc2	equ	0xFDE
  8319                           postdec2	equ	0xFDD
  8320                           fsr2h	equ	0xFDA
  8321                           fsr2l	equ	0xFD9
  8322                           status	equ	0xFD8
  8323                           
  8324 ;; *************** function ___awdiv *****************
  8325 ;; Defined at:
  8326 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  dividend        2   28[COMRAM] int 
  8329 ;;  divisor         2   30[COMRAM] int 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  quotient        2   34[COMRAM] int 
  8332 ;;  sign            1   33[COMRAM] unsigned char 
  8333 ;;  counter         1   32[COMRAM] unsigned char 
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  2   28[COMRAM] int 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2, status,0, prodl
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8343 ;;      Params:         4       0       0       0       0       0       0
  8344 ;;      Locals:         4       0       0       0       0       0       0
  8345 ;;      Temps:          0       0       0       0       0       0       0
  8346 ;;      Totals:         8       0       0       0       0       0       0
  8347 ;;Total ram usage:        8 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    4
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		_Battery_Convert
  8354 ;;		_Temp_Convert
  8355 ;;		_fround
  8356 ;;		_scale
  8357 ;;		_printf
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           	psect	text38
  8362  003088                     __ptext38:
  8363                           	opt stack 0
  8364  003088                     ___awdiv:
  8365                           	opt stack 24
  8366                           
  8367                           ;incstack = 0
  8368  003088  0E00               	movlw	0
  8369  00308A  6E22               	movwf	___awdiv@sign,c
  8370  00308C  5020               	movf	___awdiv@divisor+1,w,c
  8371  00308E  0A80               	xorlw	128
  8372  003090  6EF3               	movwf	prodl,c
  8373  003092  0E80               	movlw	128
  8374  003094  5CF3               	subwf	prodl,w,c
  8375  003096  0E00               	movlw	0
  8376  003098  B4D8               	btfsc	status,2,c
  8377  00309A  5C1F               	subwf	___awdiv@divisor,w,c
  8378  00309C  B0D8               	btfsc	status,0,c
  8379  00309E  D006               	goto	l4488
  8380  0030A0  6C1F               	negf	___awdiv@divisor,c
  8381  0030A2  1E20               	comf	___awdiv@divisor+1,f,c
  8382  0030A4  B0D8               	btfsc	status,0,c
  8383  0030A6  2A20               	incf	___awdiv@divisor+1,f,c
  8384  0030A8  0E01               	movlw	1
  8385  0030AA  6E22               	movwf	___awdiv@sign,c
  8386  0030AC                     l4488:
  8387  0030AC  501E               	movf	___awdiv@dividend+1,w,c
  8388  0030AE  0A80               	xorlw	128
  8389  0030B0  6EF3               	movwf	prodl,c
  8390  0030B2  0E80               	movlw	128
  8391  0030B4  5CF3               	subwf	prodl,w,c
  8392  0030B6  0E00               	movlw	0
  8393  0030B8  B4D8               	btfsc	status,2,c
  8394  0030BA  5C1D               	subwf	___awdiv@dividend,w,c
  8395  0030BC  B0D8               	btfsc	status,0,c
  8396  0030BE  D006               	goto	l4494
  8397  0030C0  6C1D               	negf	___awdiv@dividend,c
  8398  0030C2  1E1E               	comf	___awdiv@dividend+1,f,c
  8399  0030C4  B0D8               	btfsc	status,0,c
  8400  0030C6  2A1E               	incf	___awdiv@dividend+1,f,c
  8401  0030C8  0E01               	movlw	1
  8402  0030CA  1A22               	xorwf	___awdiv@sign,f,c
  8403  0030CC                     l4494:
  8404  0030CC  0E00               	movlw	0
  8405  0030CE  6E24               	movwf	___awdiv@quotient+1,c
  8406  0030D0  0E00               	movlw	0
  8407  0030D2  6E23               	movwf	___awdiv@quotient,c
  8408  0030D4  5020               	movf	___awdiv@divisor+1,w,c
  8409  0030D6  101F               	iorwf	___awdiv@divisor,w,c
  8410  0030D8  B4D8               	btfsc	status,2,c
  8411  0030DA  D01C               	goto	l4516
  8412  0030DC  0E01               	movlw	1
  8413  0030DE  6E21               	movwf	___awdiv@counter,c
  8414  0030E0  D004               	goto	l4502
  8415  0030E2                     l4500:
  8416  0030E2  90D8               	bcf	status,0,c
  8417  0030E4  361F               	rlcf	___awdiv@divisor,f,c
  8418  0030E6  3620               	rlcf	___awdiv@divisor+1,f,c
  8419  0030E8  2A21               	incf	___awdiv@counter,f,c
  8420  0030EA                     l4502:
  8421  0030EA  AE20               	btfss	___awdiv@divisor+1,7,c
  8422  0030EC  D7FA               	goto	l4500
  8423  0030EE                     l4504:
  8424  0030EE  90D8               	bcf	status,0,c
  8425  0030F0  3623               	rlcf	___awdiv@quotient,f,c
  8426  0030F2  3624               	rlcf	___awdiv@quotient+1,f,c
  8427  0030F4  501F               	movf	___awdiv@divisor,w,c
  8428  0030F6  5C1D               	subwf	___awdiv@dividend,w,c
  8429  0030F8  5020               	movf	___awdiv@divisor+1,w,c
  8430  0030FA  581E               	subwfb	___awdiv@dividend+1,w,c
  8431  0030FC  A0D8               	btfss	status,0,c
  8432  0030FE  D005               	goto	l4512
  8433  003100  501F               	movf	___awdiv@divisor,w,c
  8434  003102  5E1D               	subwf	___awdiv@dividend,f,c
  8435  003104  5020               	movf	___awdiv@divisor+1,w,c
  8436  003106  5A1E               	subwfb	___awdiv@dividend+1,f,c
  8437  003108  8023               	bsf	___awdiv@quotient,0,c
  8438  00310A                     l4512:
  8439  00310A  90D8               	bcf	status,0,c
  8440  00310C  3220               	rrcf	___awdiv@divisor+1,f,c
  8441  00310E  321F               	rrcf	___awdiv@divisor,f,c
  8442  003110  2E21               	decfsz	___awdiv@counter,f,c
  8443  003112  D7ED               	goto	l4504
  8444  003114                     l4516:
  8445  003114  5022               	movf	___awdiv@sign,w,c
  8446  003116  B4D8               	btfsc	status,2,c
  8447  003118  D004               	goto	l4520
  8448  00311A  6C23               	negf	___awdiv@quotient,c
  8449  00311C  1E24               	comf	___awdiv@quotient+1,f,c
  8450  00311E  B0D8               	btfsc	status,0,c
  8451  003120  2A24               	incf	___awdiv@quotient+1,f,c
  8452  003122                     l4520:
  8453  003122  C023  F01D         	movff	___awdiv@quotient,?___awdiv
  8454  003126  C024  F01E         	movff	___awdiv@quotient+1,?___awdiv+1
  8455  00312A  0012               	return	
  8456  00312C                     __end_of___awdiv:
  8457                           	opt stack 0
  8458                           tblptru	equ	0xFF8
  8459                           tblptrh	equ	0xFF7
  8460                           tblptrl	equ	0xFF6
  8461                           tablat	equ	0xFF5
  8462                           prodh	equ	0xFF4
  8463                           prodl	equ	0xFF3
  8464                           intcon	equ	0xFF2
  8465                           intcon2	equ	0xFF1
  8466                           postinc0	equ	0xFEE
  8467                           wreg	equ	0xFE8
  8468                           postinc1	equ	0xFE6
  8469                           postdec1	equ	0xFE5
  8470                           fsr1h	equ	0xFE2
  8471                           fsr1l	equ	0xFE1
  8472                           indf2	equ	0xFDF
  8473                           postinc2	equ	0xFDE
  8474                           postdec2	equ	0xFDD
  8475                           fsr2h	equ	0xFDA
  8476                           fsr2l	equ	0xFD9
  8477                           status	equ	0xFD8
  8478                           
  8479 ;; *************** function _Battery_Filter *****************
  8480 ;; Defined at:
  8481 ;;		line 52 in file "Battery.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;		None
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;  x               2   49[COMRAM] int 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;		None               void
  8488 ;; Registers used:
  8489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8495 ;;      Params:         0       0       0       0       0       0       0
  8496 ;;      Locals:         2       0       0       0       0       0       0
  8497 ;;      Temps:          0       0       0       0       0       0       0
  8498 ;;      Totals:         2       0       0       0       0       0       0
  8499 ;;Total ram usage:        2 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:    6
  8502 ;; This function calls:
  8503 ;;		___ftadd
  8504 ;;		___ftmul
  8505 ;;		___wmul
  8506 ;; This function is called by:
  8507 ;;		_Battery_Convert
  8508 ;; This function uses a non-reentrant model
  8509 ;;
  8510                           
  8511                           	psect	text39
  8512  002294                     __ptext39:
  8513                           	opt stack 0
  8514  002294                     _Battery_Filter:
  8515                           	opt stack 23
  8516                           
  8517                           ;Battery.c: 55: int x;
  8518                           ;Battery.c: 56: for(x = 0; x < 10; x++)
  8519                           
  8520                           ;incstack = 0
  8521  002294  0E00               	movlw	0
  8522  002296  6E33               	movwf	Battery_Filter@x+1,c
  8523  002298  0E00               	movlw	0
  8524  00229A  6E32               	movwf	Battery_Filter@x,c
  8525  00229C  5033               	movf	Battery_Filter@x+1,w,c
  8526  00229E  0A80               	xorlw	128
  8527  0022A0  0F80               	addlw	-128
  8528  0022A2  0E0A               	movlw	10
  8529  0022A4  B4D8               	btfsc	status,2,c
  8530  0022A6  5C32               	subwf	Battery_Filter@x,w,c
  8531  0022A8  B0D8               	btfsc	status,0,c
  8532  0022AA  D076               	goto	l4592
  8533                           
  8534                           ;Battery.c: 57: {
  8535                           ;Battery.c: 58: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  8536  0022AC  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8537  0022B0  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8538  0022B4  0E00               	movlw	0
  8539  0022B6  6E28               	movwf	___wmul@multiplicand+1,c
  8540  0022B8  0E03               	movlw	3
  8541  0022BA  6E27               	movwf	___wmul@multiplicand,c
  8542  0022BC  ECC6  F01B         	call	___wmul	;wreg free
  8543  0022C0  0100               	movlb	0	; () banked
  8544  0022C2  0E60               	movlw	low _Battery_Volt
  8545  0022C4  2425               	addwf	?___wmul,w,c
  8546  0022C6  6ED9               	movwf	fsr2l,c
  8547  0022C8  0100               	movlb	0	; () banked
  8548  0022CA  0E00               	movlw	high _Battery_Volt
  8549  0022CC  2026               	addwfc	?___wmul+1,w,c
  8550  0022CE  6EDA               	movwf	fsr2h,c
  8551  0022D0  0E48               	movlw	72
  8552  0022D2  0100               	movlb	0	; () banked
  8553  0022D4  6FAF               	movwf	___ftmul@f2& (0+255),b
  8554  0022D6  0E61               	movlw	97
  8555  0022D8  0100               	movlb	0	; () banked
  8556  0022DA  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  8557  0022DC  0E3F               	movlw	63
  8558  0022DE  0100               	movlb	0	; () banked
  8559  0022E0  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  8560  0022E2  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8561  0022E6  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8562  0022EA  0E00               	movlw	0
  8563  0022EC  6E28               	movwf	___wmul@multiplicand+1,c
  8564  0022EE  0E03               	movlw	3
  8565  0022F0  6E27               	movwf	___wmul@multiplicand,c
  8566  0022F2  ECC6  F01B         	call	___wmul	;wreg free
  8567  0022F6  0101               	movlb	1	; () banked
  8568  0022F8  0E8C               	movlw	low _TempBattery_Volt
  8569  0022FA  2425               	addwf	?___wmul,w,c
  8570  0022FC  6EE1               	movwf	fsr1l,c
  8571  0022FE  0101               	movlb	1	; () banked
  8572  002300  0E01               	movlw	high _TempBattery_Volt
  8573  002302  2026               	addwfc	?___wmul+1,w,c
  8574  002304  6EE2               	movwf	fsr1h,c
  8575  002306  0100               	movlb	0	; () banked
  8576  002308  CFE6 F0AC          	movff	postinc1,___ftmul@f1
  8577  00230C  0100               	movlb	0	; () banked
  8578  00230E  CFE6 F0AD          	movff	postinc1,___ftmul@f1+1
  8579  002312  0100               	movlb	0	; () banked
  8580  002314  CFE5 F0AE          	movff	postdec1,___ftmul@f1+2
  8581  002318  ECBD  F012         	call	___ftmul	;wreg free
  8582  00231C  C0AC  F0C2         	movff	?___ftmul,___ftadd@f1
  8583  002320  C0AD  F0C3         	movff	?___ftmul+1,___ftadd@f1+1
  8584  002324  C0AE  F0C4         	movff	?___ftmul+2,___ftadd@f1+2
  8585  002328  0EC3               	movlw	195
  8586  00232A  0100               	movlb	0	; () banked
  8587  00232C  6FAF               	movwf	___ftmul@f2& (0+255),b
  8588  00232E  0EF5               	movlw	245
  8589  002330  0100               	movlb	0	; () banked
  8590  002332  6FB0               	movwf	(___ftmul@f2+1)& (0+255),b
  8591  002334  0E3D               	movlw	61
  8592  002336  0100               	movlb	0	; () banked
  8593  002338  6FB1               	movwf	(___ftmul@f2+2)& (0+255),b
  8594  00233A  0E00               	movlw	0
  8595  00233C  6E28               	movwf	___wmul@multiplicand+1,c
  8596  00233E  0E03               	movlw	3
  8597  002340  6E27               	movwf	___wmul@multiplicand,c
  8598  002342  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8599  002346  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8600  00234A  ECC6  F01B         	call	___wmul	;wreg free
  8601  00234E  0101               	movlb	1	; () banked
  8602  002350  0E32               	movlw	low _PrevBattery_Volt
  8603  002352  2425               	addwf	?___wmul,w,c
  8604  002354  6EE1               	movwf	fsr1l,c
  8605  002356  0101               	movlb	1	; () banked
  8606  002358  0E01               	movlw	high _PrevBattery_Volt
  8607  00235A  2026               	addwfc	?___wmul+1,w,c
  8608  00235C  6EE2               	movwf	fsr1h,c
  8609  00235E  0100               	movlb	0	; () banked
  8610  002360  CFE6 F0AC          	movff	postinc1,___ftmul@f1
  8611  002364  0100               	movlb	0	; () banked
  8612  002366  CFE6 F0AD          	movff	postinc1,___ftmul@f1+1
  8613  00236A  0100               	movlb	0	; () banked
  8614  00236C  CFE5 F0AE          	movff	postdec1,___ftmul@f1+2
  8615  002370  ECBD  F012         	call	___ftmul	;wreg free
  8616  002374  C0AC  F0C5         	movff	?___ftmul,___ftadd@f2
  8617  002378  C0AD  F0C6         	movff	?___ftmul+1,___ftadd@f2+1
  8618  00237C  C0AE  F0C7         	movff	?___ftmul+2,___ftadd@f2+2
  8619  002380  EC8C  F00D         	call	___ftadd	;wreg free
  8620  002384  C0C2  FFDE         	movff	?___ftadd,postinc2
  8621  002388  C0C3  FFDE         	movff	?___ftadd+1,postinc2
  8622  00238C  C0C4  FFDD         	movff	?___ftadd+2,postdec2
  8623  002390  52DD               	movf	postdec2,f,c
  8624  002392  4A32               	infsnz	Battery_Filter@x,f,c
  8625  002394  2A33               	incf	Battery_Filter@x+1,f,c
  8626  002396  D782               	goto	L15
  8627  002398                     l4592:
  8628                           
  8629                           ;Battery.c: 59: }
  8630                           ;Battery.c: 60: for(x = 0; x < 10; x++)
  8631  002398  0E00               	movlw	0
  8632  00239A  6E33               	movwf	Battery_Filter@x+1,c
  8633  00239C  0E00               	movlw	0
  8634  00239E  6E32               	movwf	Battery_Filter@x,c
  8635  0023A0  5033               	movf	Battery_Filter@x+1,w,c
  8636  0023A2  0A80               	xorlw	128
  8637  0023A4  0F80               	addlw	-128
  8638  0023A6  0E0A               	movlw	10
  8639  0023A8  B4D8               	btfsc	status,2,c
  8640  0023AA  5C32               	subwf	Battery_Filter@x,w,c
  8641  0023AC  B0D8               	btfsc	status,0,c
  8642  0023AE  0012               	return	
  8643                           
  8644                           ;Battery.c: 61: {
  8645                           ;Battery.c: 62: PrevBattery_Volt[x] = Battery_Volt[x];
  8646  0023B0  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8647  0023B4  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8648  0023B8  0E00               	movlw	0
  8649  0023BA  6E28               	movwf	___wmul@multiplicand+1,c
  8650  0023BC  0E03               	movlw	3
  8651  0023BE  6E27               	movwf	___wmul@multiplicand,c
  8652  0023C0  ECC6  F01B         	call	___wmul	;wreg free
  8653  0023C4  0100               	movlb	0	; () banked
  8654  0023C6  0E60               	movlw	low _Battery_Volt
  8655  0023C8  2425               	addwf	?___wmul,w,c
  8656  0023CA  6ED9               	movwf	fsr2l,c
  8657  0023CC  0100               	movlb	0	; () banked
  8658  0023CE  0E00               	movlw	high _Battery_Volt
  8659  0023D0  2026               	addwfc	?___wmul+1,w,c
  8660  0023D2  6EDA               	movwf	fsr2h,c
  8661  0023D4  C032  F025         	movff	Battery_Filter@x,___wmul@multiplier
  8662  0023D8  C033  F026         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  8663  0023DC  0E00               	movlw	0
  8664  0023DE  6E28               	movwf	___wmul@multiplicand+1,c
  8665  0023E0  0E03               	movlw	3
  8666  0023E2  6E27               	movwf	___wmul@multiplicand,c
  8667  0023E4  ECC6  F01B         	call	___wmul	;wreg free
  8668  0023E8  0101               	movlb	1	; () banked
  8669  0023EA  0E32               	movlw	low _PrevBattery_Volt
  8670  0023EC  2425               	addwf	?___wmul,w,c
  8671  0023EE  6EE1               	movwf	fsr1l,c
  8672  0023F0  0101               	movlb	1	; () banked
  8673  0023F2  0E01               	movlw	high _PrevBattery_Volt
  8674  0023F4  2026               	addwfc	?___wmul+1,w,c
  8675  0023F6  6EE2               	movwf	fsr1h,c
  8676  0023F8  CFDE FFE6          	movff	postinc2,postinc1
  8677  0023FC  CFDE FFE6          	movff	postinc2,postinc1
  8678  002400  CFDE FFE5          	movff	postinc2,postdec1
  8679  002404  52E5               	movf	postdec1,f,c
  8680                           
  8681                           ; BSR set to: 1
  8682  002406  4A32               	infsnz	Battery_Filter@x,f,c
  8683  002408  2A33               	incf	Battery_Filter@x+1,f,c
  8684  00240A  D7CA               	goto	L16
  8685  00240C                     __end_of_Battery_Filter:
  8686                           	opt stack 0
  8687                           tblptru	equ	0xFF8
  8688                           tblptrh	equ	0xFF7
  8689                           tblptrl	equ	0xFF6
  8690                           tablat	equ	0xFF5
  8691                           prodh	equ	0xFF4
  8692                           prodl	equ	0xFF3
  8693                           intcon	equ	0xFF2
  8694                           intcon2	equ	0xFF1
  8695                           postinc0	equ	0xFEE
  8696                           wreg	equ	0xFE8
  8697                           postinc1	equ	0xFE6
  8698                           postdec1	equ	0xFE5
  8699                           fsr1h	equ	0xFE2
  8700                           fsr1l	equ	0xFE1
  8701                           indf2	equ	0xFDF
  8702                           postinc2	equ	0xFDE
  8703                           postdec2	equ	0xFDD
  8704                           fsr2h	equ	0xFDA
  8705                           fsr2l	equ	0xFD9
  8706                           status	equ	0xFD8
  8707                           
  8708 ;; *************** function ___wmul *****************
  8709 ;; Defined at:
  8710 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  8711 ;; Parameters:    Size  Location     Type
  8712 ;;  multiplier      2   36[COMRAM] unsigned int 
  8713 ;;  multiplicand    2   38[COMRAM] unsigned int 
  8714 ;; Auto vars:     Size  Location     Type
  8715 ;;  product         2   40[COMRAM] unsigned int 
  8716 ;; Return value:  Size  Location     Type
  8717 ;;                  2   36[COMRAM] unsigned int 
  8718 ;; Registers used:
  8719 ;;		wreg, status,2, status,0, prodl, prodh
  8720 ;; Tracked objects:
  8721 ;;		On entry : 0/0
  8722 ;;		On exit  : 0/0
  8723 ;;		Unchanged: 0/0
  8724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8725 ;;      Params:         4       0       0       0       0       0       0
  8726 ;;      Locals:         2       0       0       0       0       0       0
  8727 ;;      Temps:          0       0       0       0       0       0       0
  8728 ;;      Totals:         6       0       0       0       0       0       0
  8729 ;;Total ram usage:        6 bytes
  8730 ;; Hardware stack levels used:    1
  8731 ;; Hardware stack levels required when called:    4
  8732 ;; This function calls:
  8733 ;;		Nothing
  8734 ;; This function is called by:
  8735 ;;		_Battery_Convert
  8736 ;;		_Battery_Filter
  8737 ;;		_Battery_Fault
  8738 ;;		_Battery_Get
  8739 ;;		_Temp_Fault
  8740 ;;		_Temp_Filter
  8741 ;;		_Temp_Convert
  8742 ;;		_fround
  8743 ;;		_scale
  8744 ;;		_printf
  8745 ;;		_eval_poly
  8746 ;;		_Tempeture_Get
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text40
  8751  00378C                     __ptext40:
  8752                           	opt stack 0
  8753  00378C                     ___wmul:
  8754                           	opt stack 24
  8755                           
  8756                           ;incstack = 0
  8757  00378C  5025               	movf	___wmul@multiplier,w,c
  8758  00378E  0227               	mulwf	___wmul@multiplicand,c
  8759  003790  CFF3 F029          	movff	prodl,___wmul@product
  8760  003794  CFF4 F02A          	movff	prodh,___wmul@product+1
  8761  003798  5025               	movf	___wmul@multiplier,w,c
  8762  00379A  0228               	mulwf	___wmul@multiplicand+1,c
  8763  00379C  50F3               	movf	prodl,w,c
  8764  00379E  262A               	addwf	___wmul@product+1,f,c
  8765  0037A0  5026               	movf	___wmul@multiplier+1,w,c
  8766  0037A2  0227               	mulwf	___wmul@multiplicand,c
  8767  0037A4  50F3               	movf	prodl,w,c
  8768  0037A6  262A               	addwf	___wmul@product+1,f,c
  8769  0037A8  C029  F025         	movff	___wmul@product,?___wmul
  8770  0037AC  C02A  F026         	movff	___wmul@product+1,?___wmul+1
  8771  0037B0  0012               	return	
  8772  0037B2                     __end_of___wmul:
  8773                           	opt stack 0
  8774                           tblptru	equ	0xFF8
  8775                           tblptrh	equ	0xFF7
  8776                           tblptrl	equ	0xFF6
  8777                           tablat	equ	0xFF5
  8778                           prodh	equ	0xFF4
  8779                           prodl	equ	0xFF3
  8780                           intcon	equ	0xFF2
  8781                           intcon2	equ	0xFF1
  8782                           postinc0	equ	0xFEE
  8783                           wreg	equ	0xFE8
  8784                           postinc1	equ	0xFE6
  8785                           postdec1	equ	0xFE5
  8786                           fsr1h	equ	0xFE2
  8787                           fsr1l	equ	0xFE1
  8788                           indf2	equ	0xFDF
  8789                           postinc2	equ	0xFDE
  8790                           postdec2	equ	0xFDD
  8791                           fsr2h	equ	0xFDA
  8792                           fsr2l	equ	0xFD9
  8793                           status	equ	0xFD8
  8794                           
  8795 ;; *************** function ___ftmul *****************
  8796 ;; Defined at:
  8797 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  8798 ;; Parameters:    Size  Location     Type
  8799 ;;  f1              3    0[BANK0 ] float 
  8800 ;;  f2              3    3[BANK0 ] float 
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  8803 ;;  sign            1   11[BANK0 ] unsigned char 
  8804 ;;  cntr            1   10[BANK0 ] unsigned char 
  8805 ;;  exp             1    6[BANK0 ] unsigned char 
  8806 ;; Return value:  Size  Location     Type
  8807 ;;                  3    0[BANK0 ] float 
  8808 ;; Registers used:
  8809 ;;		wreg, status,2, status,0, cstack
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8815 ;;      Params:         0       6       0       0       0       0       0
  8816 ;;      Locals:         0       6       0       0       0       0       0
  8817 ;;      Temps:          3       0       0       0       0       0       0
  8818 ;;      Totals:         3      12       0       0       0       0       0
  8819 ;;Total ram usage:       15 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; Hardware stack levels required when called:    5
  8822 ;; This function calls:
  8823 ;;		___ftpack
  8824 ;; This function is called by:
  8825 ;;		_Battery_Filter
  8826 ;;		_Temp_Filter
  8827 ;;		_Temp_Convert
  8828 ;;		_fround
  8829 ;;		_scale
  8830 ;;		_printf
  8831 ;;		_log
  8832 ;;		_eval_poly
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           	psect	text41
  8837  00257A                     __ptext41:
  8838                           	opt stack 0
  8839  00257A                     ___ftmul:
  8840                           	opt stack 23
  8841                           
  8842                           ;incstack = 0
  8843  00257A  0100               	movlb	0	; () banked
  8844  00257C  C0AE  F02F         	movff	___ftmul@f1+2,??___ftmul
  8845  002580  6A30               	clrf	(??___ftmul+1)& (0+255),c
  8846  002582  6A31               	clrf	(??___ftmul+2)& (0+255),c
  8847  002584  0100               	movlb	0	; () banked
  8848  002586  35AD               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8849  002588  362F               	rlcf	??___ftmul& (0+255),f,c
  8850  00258A  E301               	bnc	u4311
  8851  00258C  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  8852  00258E                     u4311:
  8853  00258E  502F               	movf	??___ftmul,w,c
  8854  002590  0100               	movlb	0	; () banked
  8855  002592  6FB2               	movwf	___ftmul@exp& (0+255),b
  8856  002594  0100               	movlb	0	; () banked
  8857  002596  67B2               	tstfsz	___ftmul@exp& (0+255),b
  8858  002598  D00A               	goto	l4420
  8859                           
  8860                           ; BSR set to: 0
  8861  00259A  0E00               	movlw	0
  8862  00259C  0100               	movlb	0	; () banked
  8863  00259E  6FAC               	movwf	?___ftmul& (0+255),b
  8864  0025A0  0E00               	movlw	0
  8865  0025A2  0100               	movlb	0	; () banked
  8866  0025A4  6FAD               	movwf	(?___ftmul+1)& (0+255),b
  8867  0025A6  0E00               	movlw	0
  8868  0025A8  0100               	movlb	0	; () banked
  8869  0025AA  6FAE               	movwf	(?___ftmul+2)& (0+255),b
  8870  0025AC  0012               	return	
  8871  0025AE                     l4420:
  8872                           
  8873                           ; BSR set to: 0
  8874  0025AE  0100               	movlb	0	; () banked
  8875  0025B0  C0B1  F02F         	movff	___ftmul@f2+2,??___ftmul
  8876  0025B4  6A30               	clrf	(??___ftmul+1)& (0+255),c
  8877  0025B6  6A31               	clrf	(??___ftmul+2)& (0+255),c
  8878  0025B8  0100               	movlb	0	; () banked
  8879  0025BA  35B0               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8880  0025BC  362F               	rlcf	??___ftmul& (0+255),f,c
  8881  0025BE  E301               	bnc	u4331
  8882  0025C0  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  8883  0025C2                     u4331:
  8884  0025C2  502F               	movf	??___ftmul,w,c
  8885  0025C4  0100               	movlb	0	; () banked
  8886  0025C6  6FB7               	movwf	___ftmul@sign& (0+255),b
  8887  0025C8  0100               	movlb	0	; () banked
  8888  0025CA  67B7               	tstfsz	___ftmul@sign& (0+255),b
  8889  0025CC  D00A               	goto	l4426
  8890                           
  8891                           ; BSR set to: 0
  8892  0025CE  0E00               	movlw	0
  8893  0025D0  0100               	movlb	0	; () banked
  8894  0025D2  6FAC               	movwf	?___ftmul& (0+255),b
  8895  0025D4  0E00               	movlw	0
  8896  0025D6  0100               	movlb	0	; () banked
  8897  0025D8  6FAD               	movwf	(?___ftmul+1)& (0+255),b
  8898  0025DA  0E00               	movlw	0
  8899  0025DC  0100               	movlb	0	; () banked
  8900  0025DE  6FAE               	movwf	(?___ftmul+2)& (0+255),b
  8901  0025E0  0012               	return	
  8902  0025E2                     l4426:
  8903                           
  8904                           ; BSR set to: 0
  8905  0025E2  0100               	movlb	0	; () banked
  8906  0025E4  51B7               	movf	___ftmul@sign& (0+255),w,b
  8907  0025E6  0F7B               	addlw	123
  8908  0025E8  0100               	movlb	0	; () banked
  8909  0025EA  27B2               	addwf	___ftmul@exp& (0+255),f,b
  8910                           
  8911                           ; BSR set to: 0
  8912  0025EC  C0AE  F0B7         	movff	___ftmul@f1+2,___ftmul@sign
  8913  0025F0  0100               	movlb	0	; () banked
  8914  0025F2  51B1               	movf	(___ftmul@f2+2)& (0+255),w,b
  8915  0025F4  0100               	movlb	0	; () banked
  8916  0025F6  1BB7               	xorwf	___ftmul@sign& (0+255),f,b
  8917  0025F8  0E80               	movlw	128
  8918  0025FA  0100               	movlb	0	; () banked
  8919  0025FC  17B7               	andwf	___ftmul@sign& (0+255),f,b
  8920                           
  8921                           ; BSR set to: 0
  8922  0025FE  0100               	movlb	0	; () banked
  8923  002600  8FAD               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8924                           
  8925                           ; BSR set to: 0
  8926  002602  0100               	movlb	0	; () banked
  8927  002604  8FB0               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8928                           
  8929                           ; BSR set to: 0
  8930  002606  0EFF               	movlw	255
  8931  002608  0100               	movlb	0	; () banked
  8932  00260A  17AF               	andwf	___ftmul@f2& (0+255),f,b
  8933  00260C  0EFF               	movlw	255
  8934  00260E  0100               	movlb	0	; () banked
  8935  002610  17B0               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8936  002612  0E00               	movlw	0
  8937  002614  0100               	movlb	0	; () banked
  8938  002616  17B1               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8939                           
  8940                           ; BSR set to: 0
  8941  002618  0E00               	movlw	0
  8942  00261A  0100               	movlb	0	; () banked
  8943  00261C  6FB3               	movwf	___ftmul@f3_as_product& (0+255),b
  8944  00261E  0E00               	movlw	0
  8945  002620  0100               	movlb	0	; () banked
  8946  002622  6FB4               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8947  002624  0E00               	movlw	0
  8948  002626  0100               	movlb	0	; () banked
  8949  002628  6FB5               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8950                           
  8951                           ; BSR set to: 0
  8952  00262A  0E07               	movlw	7
  8953  00262C  0100               	movlb	0	; () banked
  8954  00262E  6FB6               	movwf	___ftmul@cntr& (0+255),b
  8955  002630                     l4440:
  8956                           
  8957                           ; BSR set to: 0
  8958  002630  0100               	movlb	0	; () banked
  8959  002632  A1AC               	btfss	___ftmul@f1& (0+255),0,b
  8960  002634  D00C               	goto	l4444
  8961                           
  8962                           ; BSR set to: 0
  8963  002636  0100               	movlb	0	; () banked
  8964  002638  51AF               	movf	___ftmul@f2& (0+255),w,b
  8965  00263A  0100               	movlb	0	; () banked
  8966  00263C  27B3               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8967  00263E  0100               	movlb	0	; () banked
  8968  002640  51B0               	movf	(___ftmul@f2+1)& (0+255),w,b
  8969  002642  0100               	movlb	0	; () banked
  8970  002644  23B4               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8971  002646  0100               	movlb	0	; () banked
  8972  002648  51B1               	movf	(___ftmul@f2+2)& (0+255),w,b
  8973  00264A  0100               	movlb	0	; () banked
  8974  00264C  23B5               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8975  00264E                     l4444:
  8976                           
  8977                           ; BSR set to: 0
  8978  00264E  0100               	movlb	0	; () banked
  8979  002650  90D8               	bcf	status,0,c
  8980  002652  0100               	movlb	0	; () banked
  8981  002654  33AE               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8982  002656  0100               	movlb	0	; () banked
  8983  002658  33AD               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8984  00265A  0100               	movlb	0	; () banked
  8985  00265C  33AC               	rrcf	___ftmul@f1& (0+255),f,b
  8986  00265E  0100               	movlb	0	; () banked
  8987  002660  90D8               	bcf	status,0,c
  8988  002662  0100               	movlb	0	; () banked
  8989  002664  37AF               	rlcf	___ftmul@f2& (0+255),f,b
  8990  002666  0100               	movlb	0	; () banked
  8991  002668  37B0               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8992  00266A  0100               	movlb	0	; () banked
  8993  00266C  37B1               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8994                           
  8995                           ; BSR set to: 0
  8996  00266E  0100               	movlb	0	; () banked
  8997  002670  2FB6               	decfsz	___ftmul@cntr& (0+255),f,b
  8998  002672  D7DE               	goto	l4440
  8999                           
  9000                           ; BSR set to: 0
  9001                           
  9002                           ; BSR set to: 0
  9003  002674  0E09               	movlw	9
  9004  002676  0100               	movlb	0	; () banked
  9005  002678  6FB6               	movwf	___ftmul@cntr& (0+255),b
  9006  00267A                     l4450:
  9007                           
  9008                           ; BSR set to: 0
  9009  00267A  0100               	movlb	0	; () banked
  9010  00267C  A1AC               	btfss	___ftmul@f1& (0+255),0,b
  9011  00267E  D00C               	goto	l4454
  9012                           
  9013                           ; BSR set to: 0
  9014  002680  0100               	movlb	0	; () banked
  9015  002682  51AF               	movf	___ftmul@f2& (0+255),w,b
  9016  002684  0100               	movlb	0	; () banked
  9017  002686  27B3               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9018  002688  0100               	movlb	0	; () banked
  9019  00268A  51B0               	movf	(___ftmul@f2+1)& (0+255),w,b
  9020  00268C  0100               	movlb	0	; () banked
  9021  00268E  23B4               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9022  002690  0100               	movlb	0	; () banked
  9023  002692  51B1               	movf	(___ftmul@f2+2)& (0+255),w,b
  9024  002694  0100               	movlb	0	; () banked
  9025  002696  23B5               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9026  002698                     l4454:
  9027                           
  9028                           ; BSR set to: 0
  9029  002698  0100               	movlb	0	; () banked
  9030  00269A  90D8               	bcf	status,0,c
  9031  00269C  0100               	movlb	0	; () banked
  9032  00269E  33AE               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9033  0026A0  0100               	movlb	0	; () banked
  9034  0026A2  33AD               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9035  0026A4  0100               	movlb	0	; () banked
  9036  0026A6  33AC               	rrcf	___ftmul@f1& (0+255),f,b
  9037  0026A8  0100               	movlb	0	; () banked
  9038  0026AA  90D8               	bcf	status,0,c
  9039  0026AC  0100               	movlb	0	; () banked
  9040  0026AE  33B5               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9041  0026B0  0100               	movlb	0	; () banked
  9042  0026B2  33B4               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9043  0026B4  0100               	movlb	0	; () banked
  9044  0026B6  33B3               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9045                           
  9046                           ; BSR set to: 0
  9047  0026B8  0100               	movlb	0	; () banked
  9048  0026BA  2FB6               	decfsz	___ftmul@cntr& (0+255),f,b
  9049  0026BC  D7DE               	goto	l4450
  9050                           
  9051                           ; BSR set to: 0
  9052                           
  9053                           ; BSR set to: 0
  9054  0026BE  C0B3  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  9055  0026C2  C0B4  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9056  0026C6  C0B5  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9057  0026CA  C0B2  F01A         	movff	___ftmul@exp,___ftpack@exp
  9058  0026CE  C0B7  F01B         	movff	___ftmul@sign,___ftpack@sign
  9059  0026D2  ECF0  F017         	call	___ftpack	;wreg free
  9060  0026D6  C017  F0AC         	movff	?___ftpack,?___ftmul
  9061  0026DA  C018  F0AD         	movff	?___ftpack+1,?___ftmul+1
  9062  0026DE  C019  F0AE         	movff	?___ftpack+2,?___ftmul+2
  9063  0026E2  0012               	return	
  9064  0026E4                     __end_of___ftmul:
  9065                           	opt stack 0
  9066                           tblptru	equ	0xFF8
  9067                           tblptrh	equ	0xFF7
  9068                           tblptrl	equ	0xFF6
  9069                           tablat	equ	0xFF5
  9070                           prodh	equ	0xFF4
  9071                           prodl	equ	0xFF3
  9072                           intcon	equ	0xFF2
  9073                           intcon2	equ	0xFF1
  9074                           postinc0	equ	0xFEE
  9075                           wreg	equ	0xFE8
  9076                           postinc1	equ	0xFE6
  9077                           postdec1	equ	0xFE5
  9078                           fsr1h	equ	0xFE2
  9079                           fsr1l	equ	0xFE1
  9080                           indf2	equ	0xFDF
  9081                           postinc2	equ	0xFDE
  9082                           postdec2	equ	0xFDD
  9083                           fsr2h	equ	0xFDA
  9084                           fsr2l	equ	0xFD9
  9085                           status	equ	0xFD8
  9086                           
  9087 ;; *************** function ___ftadd *****************
  9088 ;; Defined at:
  9089 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;  f1              3   22[BANK0 ] float 
  9092 ;;  f2              3   25[BANK0 ] float 
  9093 ;; Auto vars:     Size  Location     Type
  9094 ;;  exp1            1   33[BANK0 ] unsigned char 
  9095 ;;  exp2            1   32[BANK0 ] unsigned char 
  9096 ;;  sign            1   31[BANK0 ] unsigned char 
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  3   22[BANK0 ] float 
  9099 ;; Registers used:
  9100 ;;		wreg, status,2, status,0, cstack
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9106 ;;      Params:         0       6       0       0       0       0       0
  9107 ;;      Locals:         0       3       0       0       0       0       0
  9108 ;;      Temps:          0       3       0       0       0       0       0
  9109 ;;      Totals:         0      12       0       0       0       0       0
  9110 ;;Total ram usage:       12 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    5
  9113 ;; This function calls:
  9114 ;;		___ftpack
  9115 ;; This function is called by:
  9116 ;;		_Battery_Filter
  9117 ;;		_Temp_Filter
  9118 ;;		_Temp_Convert
  9119 ;;		_printf
  9120 ;;		___ftsub
  9121 ;;		_log
  9122 ;;		_eval_poly
  9123 ;; This function uses a non-reentrant model
  9124 ;;
  9125                           
  9126                           	psect	text42
  9127  001B18                     __ptext42:
  9128                           	opt stack 0
  9129  001B18                     ___ftadd:
  9130                           	opt stack 23
  9131                           
  9132                           ;incstack = 0
  9133  001B18  0100               	movlb	0	; () banked
  9134  001B1A  C0C4  F0C8         	movff	___ftadd@f1+2,??___ftadd
  9135  001B1E  0100               	movlb	0	; () banked
  9136  001B20  6BC9               	clrf	(??___ftadd+1)& (0+255),b
  9137  001B22  6BCA               	clrf	(??___ftadd+2)& (0+255),b
  9138  001B24  0100               	movlb	0	; () banked
  9139  001B26  35C3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9140  001B28  0100               	movlb	0	; () banked
  9141  001B2A  37C8               	rlcf	??___ftadd& (0+255),f,b
  9142  001B2C  E301               	bnc	u4101
  9143  001B2E  81C9               	bsf	(??___ftadd+1)& (0+255),0,b
  9144  001B30                     u4101:
  9145  001B30  0100               	movlb	0	; () banked
  9146  001B32  51C8               	movf	??___ftadd& (0+255),w,b
  9147  001B34  0100               	movlb	0	; () banked
  9148  001B36  6FCD               	movwf	___ftadd@exp1& (0+255),b
  9149  001B38  0100               	movlb	0	; () banked
  9150  001B3A  C0C7  F0C8         	movff	___ftadd@f2+2,??___ftadd
  9151  001B3E  0100               	movlb	0	; () banked
  9152  001B40  6BC9               	clrf	(??___ftadd+1)& (0+255),b
  9153  001B42  6BCA               	clrf	(??___ftadd+2)& (0+255),b
  9154  001B44  0100               	movlb	0	; () banked
  9155  001B46  35C6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9156  001B48  0100               	movlb	0	; () banked
  9157  001B4A  37C8               	rlcf	??___ftadd& (0+255),f,b
  9158  001B4C  E301               	bnc	u4111
  9159  001B4E  81C9               	bsf	(??___ftadd+1)& (0+255),0,b
  9160  001B50                     u4111:
  9161  001B50  0100               	movlb	0	; () banked
  9162  001B52  51C8               	movf	??___ftadd& (0+255),w,b
  9163  001B54  0100               	movlb	0	; () banked
  9164  001B56  6FCC               	movwf	___ftadd@exp2& (0+255),b
  9165                           
  9166                           ; BSR set to: 0
  9167  001B58  0100               	movlb	0	; () banked
  9168  001B5A  51CD               	movf	___ftadd@exp1& (0+255),w,b
  9169  001B5C  B4D8               	btfsc	status,2,c
  9170  001B5E  D012               	goto	l1039
  9171                           
  9172                           ; BSR set to: 0
  9173  001B60  0100               	movlb	0	; () banked
  9174  001B62  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9175  001B64  0100               	movlb	0	; () banked
  9176  001B66  5DCD               	subwf	___ftadd@exp1& (0+255),w,b
  9177  001B68  B0D8               	btfsc	status,0,c
  9178  001B6A  D013               	goto	l4352
  9179                           
  9180                           ; BSR set to: 0
  9181  001B6C  0100               	movlb	0	; () banked
  9182  001B6E  51CD               	movf	___ftadd@exp1& (0+255),w,b
  9183  001B70  0800               	sublw	0
  9184  001B72  0100               	movlb	0	; () banked
  9185  001B74  25CC               	addwf	___ftadd@exp2& (0+255),w,b
  9186  001B76  0100               	movlb	0	; () banked
  9187  001B78  6FC8               	movwf	??___ftadd& (0+255),b
  9188  001B7A  0E19               	movlw	25
  9189  001B7C  0100               	movlb	0	; () banked
  9190  001B7E  5DC8               	subwf	??___ftadd& (0+255),w,b
  9191  001B80  A0D8               	btfss	status,0,c
  9192  001B82  D007               	goto	l4352
  9193  001B84                     l1039:
  9194                           
  9195                           ; BSR set to: 0
  9196  001B84  C0C5  F0C2         	movff	___ftadd@f2,?___ftadd
  9197  001B88  C0C6  F0C3         	movff	___ftadd@f2+1,?___ftadd+1
  9198  001B8C  C0C7  F0C4         	movff	___ftadd@f2+2,?___ftadd+2
  9199  001B90  0012               	return	
  9200  001B92                     l4352:
  9201                           
  9202                           ; BSR set to: 0
  9203  001B92  0100               	movlb	0	; () banked
  9204  001B94  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9205  001B96  B4D8               	btfsc	status,2,c
  9206  001B98  D012               	goto	l1043
  9207                           
  9208                           ; BSR set to: 0
  9209  001B9A  0100               	movlb	0	; () banked
  9210  001B9C  51CD               	movf	___ftadd@exp1& (0+255),w,b
  9211  001B9E  0100               	movlb	0	; () banked
  9212  001BA0  5DCC               	subwf	___ftadd@exp2& (0+255),w,b
  9213  001BA2  B0D8               	btfsc	status,0,c
  9214  001BA4  D013               	goto	l4358
  9215                           
  9216                           ; BSR set to: 0
  9217  001BA6  0100               	movlb	0	; () banked
  9218  001BA8  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9219  001BAA  0800               	sublw	0
  9220  001BAC  0100               	movlb	0	; () banked
  9221  001BAE  25CD               	addwf	___ftadd@exp1& (0+255),w,b
  9222  001BB0  0100               	movlb	0	; () banked
  9223  001BB2  6FC8               	movwf	??___ftadd& (0+255),b
  9224  001BB4  0E19               	movlw	25
  9225  001BB6  0100               	movlb	0	; () banked
  9226  001BB8  5DC8               	subwf	??___ftadd& (0+255),w,b
  9227  001BBA  A0D8               	btfss	status,0,c
  9228  001BBC  D007               	goto	l4358
  9229  001BBE                     l1043:
  9230                           
  9231                           ; BSR set to: 0
  9232  001BBE  C0C2  F0C2         	movff	___ftadd@f1,?___ftadd
  9233  001BC2  C0C3  F0C3         	movff	___ftadd@f1+1,?___ftadd+1
  9234  001BC6  C0C4  F0C4         	movff	___ftadd@f1+2,?___ftadd+2
  9235  001BCA  0012               	return	
  9236  001BCC                     l4358:
  9237                           
  9238                           ; BSR set to: 0
  9239  001BCC  0E06               	movlw	6
  9240  001BCE  0100               	movlb	0	; () banked
  9241  001BD0  6FCB               	movwf	___ftadd@sign& (0+255),b
  9242                           
  9243                           ; BSR set to: 0
  9244  001BD2  0100               	movlb	0	; () banked
  9245  001BD4  AFC4               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9246  001BD6  D002               	goto	l4364
  9247                           
  9248                           ; BSR set to: 0
  9249  001BD8  0100               	movlb	0	; () banked
  9250  001BDA  8FCB               	bsf	___ftadd@sign& (0+255),7,b
  9251  001BDC                     l4364:
  9252                           
  9253                           ; BSR set to: 0
  9254  001BDC  0100               	movlb	0	; () banked
  9255  001BDE  AFC7               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9256  001BE0  D002               	goto	l1045
  9257                           
  9258                           ; BSR set to: 0
  9259  001BE2  0100               	movlb	0	; () banked
  9260  001BE4  8DCB               	bsf	___ftadd@sign& (0+255),6,b
  9261  001BE6                     l1045:
  9262                           
  9263                           ; BSR set to: 0
  9264  001BE6  0100               	movlb	0	; () banked
  9265  001BE8  8FC3               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9266                           
  9267                           ; BSR set to: 0
  9268  001BEA  0EFF               	movlw	255
  9269  001BEC  0100               	movlb	0	; () banked
  9270  001BEE  17C2               	andwf	___ftadd@f1& (0+255),f,b
  9271  001BF0  0EFF               	movlw	255
  9272  001BF2  0100               	movlb	0	; () banked
  9273  001BF4  17C3               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9274  001BF6  0E00               	movlw	0
  9275  001BF8  0100               	movlb	0	; () banked
  9276  001BFA  17C4               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9277  001BFC  0100               	movlb	0	; () banked
  9278  001BFE  8FC6               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9279                           
  9280                           ; BSR set to: 0
  9281  001C00  0EFF               	movlw	255
  9282  001C02  0100               	movlb	0	; () banked
  9283  001C04  17C5               	andwf	___ftadd@f2& (0+255),f,b
  9284  001C06  0EFF               	movlw	255
  9285  001C08  0100               	movlb	0	; () banked
  9286  001C0A  17C6               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9287  001C0C  0E00               	movlw	0
  9288  001C0E  0100               	movlb	0	; () banked
  9289  001C10  17C7               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9290                           
  9291                           ; BSR set to: 0
  9292  001C12  0100               	movlb	0	; () banked
  9293  001C14  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9294  001C16  0100               	movlb	0	; () banked
  9295  001C18  5DCD               	subwf	___ftadd@exp1& (0+255),w,b
  9296  001C1A  B0D8               	btfsc	status,0,c
  9297  001C1C  D02A               	goto	l4384
  9298  001C1E                     l4374:
  9299                           
  9300                           ; BSR set to: 0
  9301  001C1E  0100               	movlb	0	; () banked
  9302  001C20  90D8               	bcf	status,0,c
  9303  001C22  0100               	movlb	0	; () banked
  9304  001C24  37C5               	rlcf	___ftadd@f2& (0+255),f,b
  9305  001C26  0100               	movlb	0	; () banked
  9306  001C28  37C6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9307  001C2A  0100               	movlb	0	; () banked
  9308  001C2C  37C7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9309  001C2E  0100               	movlb	0	; () banked
  9310  001C30  07CC               	decf	___ftadd@exp2& (0+255),f,b
  9311                           
  9312                           ; BSR set to: 0
  9313  001C32  0100               	movlb	0	; () banked
  9314  001C34  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9315  001C36  0100               	movlb	0	; () banked
  9316  001C38  19CD               	xorwf	___ftadd@exp1& (0+255),w,b
  9317  001C3A  B4D8               	btfsc	status,2,c
  9318  001C3C  D014               	goto	l4382
  9319                           
  9320                           ; BSR set to: 0
  9321  001C3E  0100               	movlb	0	; () banked
  9322  001C40  07CB               	decf	___ftadd@sign& (0+255),f,b
  9323  001C42  C0CB  F0C8         	movff	___ftadd@sign,??___ftadd
  9324  001C46  0E07               	movlw	7
  9325  001C48  0100               	movlb	0	; () banked
  9326  001C4A  17C8               	andwf	??___ftadd& (0+255),f,b
  9327  001C4C  B4D8               	btfsc	status,2,c
  9328  001C4E  D00B               	goto	l4382
  9329  001C50  D7E6               	goto	l4374
  9330  001C52                     l4380:
  9331                           
  9332                           ; BSR set to: 0
  9333  001C52  0100               	movlb	0	; () banked
  9334  001C54  90D8               	bcf	status,0,c
  9335  001C56  0100               	movlb	0	; () banked
  9336  001C58  33C4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9337  001C5A  0100               	movlb	0	; () banked
  9338  001C5C  33C3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9339  001C5E  0100               	movlb	0	; () banked
  9340  001C60  33C2               	rrcf	___ftadd@f1& (0+255),f,b
  9341  001C62  0100               	movlb	0	; () banked
  9342  001C64  2BCD               	incf	___ftadd@exp1& (0+255),f,b
  9343  001C66                     l4382:
  9344                           
  9345                           ; BSR set to: 0
  9346  001C66  0100               	movlb	0	; () banked
  9347  001C68  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9348  001C6A  0100               	movlb	0	; () banked
  9349  001C6C  63CD               	cpfseq	___ftadd@exp1& (0+255),b
  9350  001C6E  D7F1               	goto	l4380
  9351  001C70  D02F               	goto	l1054
  9352  001C72                     l4384:
  9353                           
  9354                           ; BSR set to: 0
  9355  001C72  0100               	movlb	0	; () banked
  9356  001C74  51CD               	movf	___ftadd@exp1& (0+255),w,b
  9357  001C76  0100               	movlb	0	; () banked
  9358  001C78  5DCC               	subwf	___ftadd@exp2& (0+255),w,b
  9359  001C7A  B0D8               	btfsc	status,0,c
  9360  001C7C  D029               	goto	l1054
  9361  001C7E                     l4386:
  9362                           
  9363                           ; BSR set to: 0
  9364  001C7E  0100               	movlb	0	; () banked
  9365  001C80  90D8               	bcf	status,0,c
  9366  001C82  0100               	movlb	0	; () banked
  9367  001C84  37C2               	rlcf	___ftadd@f1& (0+255),f,b
  9368  001C86  0100               	movlb	0	; () banked
  9369  001C88  37C3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9370  001C8A  0100               	movlb	0	; () banked
  9371  001C8C  37C4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9372  001C8E  0100               	movlb	0	; () banked
  9373  001C90  07CD               	decf	___ftadd@exp1& (0+255),f,b
  9374                           
  9375                           ; BSR set to: 0
  9376  001C92  0100               	movlb	0	; () banked
  9377  001C94  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9378  001C96  0100               	movlb	0	; () banked
  9379  001C98  19CD               	xorwf	___ftadd@exp1& (0+255),w,b
  9380  001C9A  B4D8               	btfsc	status,2,c
  9381  001C9C  D014               	goto	l4394
  9382                           
  9383                           ; BSR set to: 0
  9384  001C9E  0100               	movlb	0	; () banked
  9385  001CA0  07CB               	decf	___ftadd@sign& (0+255),f,b
  9386  001CA2  C0CB  F0C8         	movff	___ftadd@sign,??___ftadd
  9387  001CA6  0E07               	movlw	7
  9388  001CA8  0100               	movlb	0	; () banked
  9389  001CAA  17C8               	andwf	??___ftadd& (0+255),f,b
  9390  001CAC  B4D8               	btfsc	status,2,c
  9391  001CAE  D00B               	goto	l4394
  9392  001CB0  D7E6               	goto	l4386
  9393  001CB2                     l4392:
  9394                           
  9395                           ; BSR set to: 0
  9396  001CB2  0100               	movlb	0	; () banked
  9397  001CB4  90D8               	bcf	status,0,c
  9398  001CB6  0100               	movlb	0	; () banked
  9399  001CB8  33C7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9400  001CBA  0100               	movlb	0	; () banked
  9401  001CBC  33C6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9402  001CBE  0100               	movlb	0	; () banked
  9403  001CC0  33C5               	rrcf	___ftadd@f2& (0+255),f,b
  9404  001CC2  0100               	movlb	0	; () banked
  9405  001CC4  2BCC               	incf	___ftadd@exp2& (0+255),f,b
  9406  001CC6                     l4394:
  9407                           
  9408                           ; BSR set to: 0
  9409  001CC6  0100               	movlb	0	; () banked
  9410  001CC8  51CC               	movf	___ftadd@exp2& (0+255),w,b
  9411  001CCA  0100               	movlb	0	; () banked
  9412  001CCC  63CD               	cpfseq	___ftadd@exp1& (0+255),b
  9413  001CCE  D7F1               	goto	l4392
  9414  001CD0                     l1054:
  9415                           
  9416                           ; BSR set to: 0
  9417  001CD0  0100               	movlb	0	; () banked
  9418  001CD2  AFCB               	btfss	___ftadd@sign& (0+255),7,b
  9419  001CD4  D012               	goto	l1063
  9420                           
  9421                           ; BSR set to: 0
  9422  001CD6  0EFF               	movlw	255
  9423  001CD8  0100               	movlb	0	; () banked
  9424  001CDA  1BC2               	xorwf	___ftadd@f1& (0+255),f,b
  9425  001CDC  0EFF               	movlw	255
  9426  001CDE  0100               	movlb	0	; () banked
  9427  001CE0  1BC3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9428  001CE2  0EFF               	movlw	255
  9429  001CE4  0100               	movlb	0	; () banked
  9430  001CE6  1BC4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9431  001CE8  0E01               	movlw	1
  9432  001CEA  0100               	movlb	0	; () banked
  9433  001CEC  27C2               	addwf	___ftadd@f1& (0+255),f,b
  9434  001CEE  0E00               	movlw	0
  9435  001CF0  0100               	movlb	0	; () banked
  9436  001CF2  23C3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9437  001CF4  0E00               	movlw	0
  9438  001CF6  0100               	movlb	0	; () banked
  9439  001CF8  23C4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9440  001CFA                     l1063:
  9441                           
  9442                           ; BSR set to: 0
  9443  001CFA  0100               	movlb	0	; () banked
  9444  001CFC  ADCB               	btfss	___ftadd@sign& (0+255),6,b
  9445  001CFE  D012               	goto	l4400
  9446                           
  9447                           ; BSR set to: 0
  9448  001D00  0EFF               	movlw	255
  9449  001D02  0100               	movlb	0	; () banked
  9450  001D04  1BC5               	xorwf	___ftadd@f2& (0+255),f,b
  9451  001D06  0EFF               	movlw	255
  9452  001D08  0100               	movlb	0	; () banked
  9453  001D0A  1BC6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9454  001D0C  0EFF               	movlw	255
  9455  001D0E  0100               	movlb	0	; () banked
  9456  001D10  1BC7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9457  001D12  0E01               	movlw	1
  9458  001D14  0100               	movlb	0	; () banked
  9459  001D16  27C5               	addwf	___ftadd@f2& (0+255),f,b
  9460  001D18  0E00               	movlw	0
  9461  001D1A  0100               	movlb	0	; () banked
  9462  001D1C  23C6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9463  001D1E  0E00               	movlw	0
  9464  001D20  0100               	movlb	0	; () banked
  9465  001D22  23C7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9466  001D24                     l4400:
  9467                           
  9468                           ; BSR set to: 0
  9469  001D24  0E00               	movlw	0
  9470  001D26  0100               	movlb	0	; () banked
  9471  001D28  6FCB               	movwf	___ftadd@sign& (0+255),b
  9472                           
  9473                           ; BSR set to: 0
  9474  001D2A  0100               	movlb	0	; () banked
  9475  001D2C  51C2               	movf	___ftadd@f1& (0+255),w,b
  9476  001D2E  0100               	movlb	0	; () banked
  9477  001D30  27C5               	addwf	___ftadd@f2& (0+255),f,b
  9478  001D32  0100               	movlb	0	; () banked
  9479  001D34  51C3               	movf	(___ftadd@f1+1)& (0+255),w,b
  9480  001D36  0100               	movlb	0	; () banked
  9481  001D38  23C6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9482  001D3A  0100               	movlb	0	; () banked
  9483  001D3C  51C4               	movf	(___ftadd@f1+2)& (0+255),w,b
  9484  001D3E  0100               	movlb	0	; () banked
  9485  001D40  23C7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9486                           
  9487                           ; BSR set to: 0
  9488  001D42  0100               	movlb	0	; () banked
  9489  001D44  AFC7               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9490  001D46  D015               	goto	l4410
  9491                           
  9492                           ; BSR set to: 0
  9493  001D48  0EFF               	movlw	255
  9494  001D4A  0100               	movlb	0	; () banked
  9495  001D4C  1BC5               	xorwf	___ftadd@f2& (0+255),f,b
  9496  001D4E  0EFF               	movlw	255
  9497  001D50  0100               	movlb	0	; () banked
  9498  001D52  1BC6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9499  001D54  0EFF               	movlw	255
  9500  001D56  0100               	movlb	0	; () banked
  9501  001D58  1BC7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9502  001D5A  0E01               	movlw	1
  9503  001D5C  0100               	movlb	0	; () banked
  9504  001D5E  27C5               	addwf	___ftadd@f2& (0+255),f,b
  9505  001D60  0E00               	movlw	0
  9506  001D62  0100               	movlb	0	; () banked
  9507  001D64  23C6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9508  001D66  0E00               	movlw	0
  9509  001D68  0100               	movlb	0	; () banked
  9510  001D6A  23C7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9511                           
  9512                           ; BSR set to: 0
  9513  001D6C  0E01               	movlw	1
  9514  001D6E  0100               	movlb	0	; () banked
  9515  001D70  6FCB               	movwf	___ftadd@sign& (0+255),b
  9516  001D72                     l4410:
  9517                           
  9518                           ; BSR set to: 0
  9519  001D72  C0C5  F017         	movff	___ftadd@f2,___ftpack@arg
  9520  001D76  C0C6  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  9521  001D7A  C0C7  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  9522  001D7E  C0CD  F01A         	movff	___ftadd@exp1,___ftpack@exp
  9523  001D82  C0CB  F01B         	movff	___ftadd@sign,___ftpack@sign
  9524  001D86  ECF0  F017         	call	___ftpack	;wreg free
  9525  001D8A  C017  F0C2         	movff	?___ftpack,?___ftadd
  9526  001D8E  C018  F0C3         	movff	?___ftpack+1,?___ftadd+1
  9527  001D92  C019  F0C4         	movff	?___ftpack+2,?___ftadd+2
  9528  001D96  0012               	return	
  9529  001D98                     __end_of___ftadd:
  9530                           	opt stack 0
  9531                           tblptru	equ	0xFF8
  9532                           tblptrh	equ	0xFF7
  9533                           tblptrl	equ	0xFF6
  9534                           tablat	equ	0xFF5
  9535                           prodh	equ	0xFF4
  9536                           prodl	equ	0xFF3
  9537                           intcon	equ	0xFF2
  9538                           intcon2	equ	0xFF1
  9539                           postinc0	equ	0xFEE
  9540                           wreg	equ	0xFE8
  9541                           postinc1	equ	0xFE6
  9542                           postdec1	equ	0xFE5
  9543                           fsr1h	equ	0xFE2
  9544                           fsr1l	equ	0xFE1
  9545                           indf2	equ	0xFDF
  9546                           postinc2	equ	0xFDE
  9547                           postdec2	equ	0xFDD
  9548                           fsr2h	equ	0xFDA
  9549                           fsr2l	equ	0xFD9
  9550                           status	equ	0xFD8
  9551                           
  9552 ;; *************** function ___ftpack *****************
  9553 ;; Defined at:
  9554 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  9555 ;; Parameters:    Size  Location     Type
  9556 ;;  arg             3   22[COMRAM] unsigned um
  9557 ;;  exp             1   25[COMRAM] unsigned char 
  9558 ;;  sign            1   26[COMRAM] unsigned char 
  9559 ;; Auto vars:     Size  Location     Type
  9560 ;;		None
  9561 ;; Return value:  Size  Location     Type
  9562 ;;                  3   22[COMRAM] float 
  9563 ;; Registers used:
  9564 ;;		wreg, status,2, status,0
  9565 ;; Tracked objects:
  9566 ;;		On entry : 0/0
  9567 ;;		On exit  : 0/0
  9568 ;;		Unchanged: 0/0
  9569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9570 ;;      Params:         5       0       0       0       0       0       0
  9571 ;;      Locals:         0       0       0       0       0       0       0
  9572 ;;      Temps:          3       0       0       0       0       0       0
  9573 ;;      Totals:         8       0       0       0       0       0       0
  9574 ;;Total ram usage:        8 bytes
  9575 ;; Hardware stack levels used:    1
  9576 ;; Hardware stack levels required when called:    4
  9577 ;; This function calls:
  9578 ;;		Nothing
  9579 ;; This function is called by:
  9580 ;;		___awtoft
  9581 ;;		___ftadd
  9582 ;;		___ftdiv
  9583 ;;		___ftmul
  9584 ;;		___lltoft
  9585 ;; This function uses a non-reentrant model
  9586 ;;
  9587                           
  9588                           	psect	text43
  9589  002FE0                     __ptext43:
  9590                           	opt stack 0
  9591  002FE0                     ___ftpack:
  9592                           	opt stack 23
  9593                           
  9594                           ;incstack = 0
  9595  002FE0  501A               	movf	___ftpack@exp,w,c
  9596  002FE2  B4D8               	btfsc	status,2,c
  9597  002FE4  D005               	goto	l4308
  9598  002FE6  5017               	movf	___ftpack@arg,w,c
  9599  002FE8  1018               	iorwf	___ftpack@arg+1,w,c
  9600  002FEA  1019               	iorwf	___ftpack@arg+2,w,c
  9601  002FEC  A4D8               	btfss	status,2,c
  9602  002FEE  D00C               	goto	l4314
  9603  002FF0                     l4308:
  9604  002FF0  0E00               	movlw	0
  9605  002FF2  6E17               	movwf	?___ftpack,c
  9606  002FF4  0E00               	movlw	0
  9607  002FF6  6E18               	movwf	?___ftpack+1,c
  9608  002FF8  0E00               	movlw	0
  9609  002FFA  6E19               	movwf	?___ftpack+2,c
  9610  002FFC  0012               	return	
  9611  002FFE                     l4312:
  9612  002FFE  2A1A               	incf	___ftpack@exp,f,c
  9613  003000  90D8               	bcf	status,0,c
  9614  003002  3219               	rrcf	___ftpack@arg+2,f,c
  9615  003004  3218               	rrcf	___ftpack@arg+1,f,c
  9616  003006  3217               	rrcf	___ftpack@arg,f,c
  9617  003008                     l4314:
  9618  003008  0E00               	movlw	0
  9619  00300A  1417               	andwf	___ftpack@arg,w,c
  9620  00300C  6E1C               	movwf	??___ftpack& (0+255),c
  9621  00300E  0E00               	movlw	0
  9622  003010  1418               	andwf	___ftpack@arg+1,w,c
  9623  003012  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  9624  003014  0EFE               	movlw	254
  9625  003016  1419               	andwf	___ftpack@arg+2,w,c
  9626  003018  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  9627  00301A  501C               	movf	??___ftpack,w,c
  9628  00301C  101D               	iorwf	??___ftpack+1,w,c
  9629  00301E  101E               	iorwf	??___ftpack+2,w,c
  9630  003020  B4D8               	btfsc	status,2,c
  9631  003022  D00C               	goto	l4320
  9632  003024  D7EC               	goto	l4312
  9633  003026                     l4316:
  9634  003026  2A1A               	incf	___ftpack@exp,f,c
  9635  003028  0E01               	movlw	1
  9636  00302A  2617               	addwf	___ftpack@arg,f,c
  9637  00302C  0E00               	movlw	0
  9638  00302E  2218               	addwfc	___ftpack@arg+1,f,c
  9639  003030  0E00               	movlw	0
  9640  003032  2219               	addwfc	___ftpack@arg+2,f,c
  9641  003034  90D8               	bcf	status,0,c
  9642  003036  3219               	rrcf	___ftpack@arg+2,f,c
  9643  003038  3218               	rrcf	___ftpack@arg+1,f,c
  9644  00303A  3217               	rrcf	___ftpack@arg,f,c
  9645  00303C                     l4320:
  9646  00303C  0E00               	movlw	0
  9647  00303E  1417               	andwf	___ftpack@arg,w,c
  9648  003040  6E1C               	movwf	??___ftpack& (0+255),c
  9649  003042  0E00               	movlw	0
  9650  003044  1418               	andwf	___ftpack@arg+1,w,c
  9651  003046  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  9652  003048  0EFF               	movlw	255
  9653  00304A  1419               	andwf	___ftpack@arg+2,w,c
  9654  00304C  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  9655  00304E  501C               	movf	??___ftpack,w,c
  9656  003050  101D               	iorwf	??___ftpack+1,w,c
  9657  003052  101E               	iorwf	??___ftpack+2,w,c
  9658  003054  B4D8               	btfsc	status,2,c
  9659  003056  D006               	goto	l4324
  9660  003058  D7E6               	goto	l4316
  9661  00305A                     l4322:
  9662  00305A  061A               	decf	___ftpack@exp,f,c
  9663  00305C  90D8               	bcf	status,0,c
  9664  00305E  3617               	rlcf	___ftpack@arg,f,c
  9665  003060  3618               	rlcf	___ftpack@arg+1,f,c
  9666  003062  3619               	rlcf	___ftpack@arg+2,f,c
  9667  003064                     l4324:
  9668  003064  AE18               	btfss	___ftpack@arg+1,7,c
  9669  003066  D7F9               	goto	l4322
  9670  003068  A01A               	btfss	___ftpack@exp,0,c
  9671  00306A  9E18               	bcf	___ftpack@arg+1,7,c
  9672  00306C  90D8               	bcf	status,0,c
  9673  00306E  321A               	rrcf	___ftpack@exp,f,c
  9674  003070  501A               	movf	___ftpack@exp,w,c
  9675  003072  1219               	iorwf	___ftpack@arg+2,f,c
  9676  003074  501B               	movf	___ftpack@sign,w,c
  9677  003076  A4D8               	btfss	status,2,c
  9678  003078  8E19               	bsf	___ftpack@arg+2,7,c
  9679  00307A  C017  F017         	movff	___ftpack@arg,?___ftpack
  9680  00307E  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  9681  003082  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  9682  003086  0012               	return	
  9683  003088                     __end_of___ftpack:
  9684                           	opt stack 0
  9685                           tblptru	equ	0xFF8
  9686                           tblptrh	equ	0xFF7
  9687                           tblptrl	equ	0xFF6
  9688                           tablat	equ	0xFF5
  9689                           prodh	equ	0xFF4
  9690                           prodl	equ	0xFF3
  9691                           intcon	equ	0xFF2
  9692                           intcon2	equ	0xFF1
  9693                           postinc0	equ	0xFEE
  9694                           wreg	equ	0xFE8
  9695                           postinc1	equ	0xFE6
  9696                           postdec1	equ	0xFE5
  9697                           fsr1h	equ	0xFE2
  9698                           fsr1l	equ	0xFE1
  9699                           indf2	equ	0xFDF
  9700                           postinc2	equ	0xFDE
  9701                           postdec2	equ	0xFDD
  9702                           fsr2h	equ	0xFDA
  9703                           fsr2l	equ	0xFD9
  9704                           status	equ	0xFD8
  9705                           
  9706 ;; *************** function _INTERRUPT_InterruptManager *****************
  9707 ;; Defined at:
  9708 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;		None
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;		None
  9713 ;; Return value:  Size  Location     Type
  9714 ;;		None               void
  9715 ;; Registers used:
  9716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9722 ;;      Params:         0       0       0       0       0       0       0
  9723 ;;      Locals:         0       0       0       0       0       0       0
  9724 ;;      Temps:         14       0       0       0       0       0       0
  9725 ;;      Totals:        14       0       0       0       0       0       0
  9726 ;;Total ram usage:       14 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    3
  9729 ;; This function calls:
  9730 ;;		_ADC_ISR
  9731 ;;		_EUSART1_Receive_ISR
  9732 ;;		_EUSART1_Transmit_ISR
  9733 ;;		_TMR1_ISR
  9734 ;; This function is called by:
  9735 ;;		Interrupt level 2
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           	psect	intcode
  9740  000008                     __pintcode:
  9741                           	opt stack 0
  9742  000008                     _INTERRUPT_InterruptManager:
  9743                           	opt stack 22
  9744                           
  9745                           ;incstack = 0
  9746  000008  CFFA F009          	movff	pclath,??_INTERRUPT_InterruptManager
  9747  00000C  CFFB F00A          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  9748  000010  CFE9 F00B          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  9749  000014  CFEA F00C          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  9750  000018  CFE1 F00D          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  9751  00001C  CFE2 F00E          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  9752  000020  CFD9 F00F          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  9753  000024  CFDA F010          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  9754  000028  CFF3 F011          	movff	prodl,??_INTERRUPT_InterruptManager+8
  9755  00002C  CFF4 F012          	movff	prodh,??_INTERRUPT_InterruptManager+9
  9756  000030  CFF6 F013          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  9757  000034  CFF7 F014          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  9758  000038  CFF8 F015          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  9759  00003C  CFF5 F016          	movff	tablat,??_INTERRUPT_InterruptManager+13
  9760                           
  9761                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  9762  000040  BA9D               	btfsc	3997,5,c	;volatile
  9763  000042  AA9E               	btfss	3998,5,c	;volatile
  9764  000044  D003               	goto	i2l282
  9765                           
  9766                           ;interrupt_manager.c: 73: {
  9767                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  9768  000046  EC6D  F01B         	call	_EUSART1_Receive_ISR	;wreg free
  9769                           
  9770                           ;interrupt_manager.c: 75: }
  9771  00004A  D011               	goto	i2l290
  9772  00004C                     i2l282:
  9773                           
  9774                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  9775  00004C  BC9D               	btfsc	3997,6,c	;volatile
  9776  00004E  AC9E               	btfss	3998,6,c	;volatile
  9777  000050  D003               	goto	i2l284
  9778                           
  9779                           ;interrupt_manager.c: 77: {
  9780                           ;interrupt_manager.c: 78: ADC_ISR();
  9781  000052  ECA0  F007         	call	_ADC_ISR	;wreg free
  9782                           
  9783                           ;interrupt_manager.c: 79: }
  9784  000056  D00B               	goto	i2l290
  9785  000058                     i2l284:
  9786                           
  9787                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  9788  000058  B09D               	btfsc	3997,0,c	;volatile
  9789  00005A  A09E               	btfss	3998,0,c	;volatile
  9790  00005C  D003               	goto	i2l286
  9791                           
  9792                           ;interrupt_manager.c: 81: {
  9793                           ;interrupt_manager.c: 82: TMR1_ISR();
  9794  00005E  EC9A  F01A         	call	_TMR1_ISR	;wreg free
  9795                           
  9796                           ;interrupt_manager.c: 83: }
  9797  000062  D005               	goto	i2l290
  9798  000064                     i2l286:
  9799                           
  9800                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  9801  000064  B89D               	btfsc	3997,4,c	;volatile
  9802  000066  A89E               	btfss	3998,4,c	;volatile
  9803  000068  D002               	goto	i2l290
  9804                           
  9805                           ;interrupt_manager.c: 85: {
  9806                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  9807  00006A  EC55  F01B         	call	_EUSART1_Transmit_ISR	;wreg free
  9808  00006E                     i2l290:
  9809  00006E  C016  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  9810  000072  C015  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  9811  000076  C014  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  9812  00007A  C013  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  9813  00007E  C012  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  9814  000082  C011  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  9815  000086  C010  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  9816  00008A  C00F  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  9817  00008E  C00E  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  9818  000092  C00D  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  9819  000096  C00C  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  9820  00009A  C00B  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  9821  00009E  C00A  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  9822  0000A2  C009  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  9823  0000A6  0011               	retfie		f
  9824  0000A8                     __end_of_INTERRUPT_InterruptManager:
  9825                           	opt stack 0
  9826                           pclatu	equ	0xFFB
  9827                           pclath	equ	0xFFA
  9828                           tblptru	equ	0xFF8
  9829                           tblptrh	equ	0xFF7
  9830                           tblptrl	equ	0xFF6
  9831                           tablat	equ	0xFF5
  9832                           prodh	equ	0xFF4
  9833                           prodl	equ	0xFF3
  9834                           intcon	equ	0xFF2
  9835                           intcon2	equ	0xFF1
  9836                           postinc0	equ	0xFEE
  9837                           fsr0h	equ	0xFEA
  9838                           fsr0l	equ	0xFE9
  9839                           wreg	equ	0xFE8
  9840                           postinc1	equ	0xFE6
  9841                           postdec1	equ	0xFE5
  9842                           fsr1h	equ	0xFE2
  9843                           fsr1l	equ	0xFE1
  9844                           indf2	equ	0xFDF
  9845                           postinc2	equ	0xFDE
  9846                           postdec2	equ	0xFDD
  9847                           fsr2h	equ	0xFDA
  9848                           fsr2l	equ	0xFD9
  9849                           status	equ	0xFD8
  9850                           
  9851 ;; *************** function _TMR1_ISR *****************
  9852 ;; Defined at:
  9853 ;;		line 109 in file "mcc_generated_files/tmr1.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;		None
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;		None
  9858 ;; Return value:  Size  Location     Type
  9859 ;;		None               void
  9860 ;; Registers used:
  9861 ;;		wreg, status,2, status,0, cstack
  9862 ;; Tracked objects:
  9863 ;;		On entry : 0/0
  9864 ;;		On exit  : 0/0
  9865 ;;		Unchanged: 0/0
  9866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9867 ;;      Params:         0       0       0       0       0       0       0
  9868 ;;      Locals:         0       0       0       0       0       0       0
  9869 ;;      Temps:          3       0       0       0       0       0       0
  9870 ;;      Totals:         3       0       0       0       0       0       0
  9871 ;;Total ram usage:        3 bytes
  9872 ;; Hardware stack levels used:    1
  9873 ;; Hardware stack levels required when called:    2
  9874 ;; This function calls:
  9875 ;;		_Battery_Read
  9876 ;;		_Temp_Read
  9877 ;; This function is called by:
  9878 ;;		_INTERRUPT_InterruptManager
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text45
  9883  003534                     __ptext45:
  9884                           	opt stack 0
  9885  003534                     _TMR1_ISR:
  9886                           	opt stack 22
  9887                           
  9888                           ;tmr1.c: 111: static volatile unsigned int CountCallBack = 0;
  9889                           ;tmr1.c: 114: PIR1bits.TMR1IF = 0;
  9890                           
  9891                           ;incstack = 0
  9892  003534  909E               	bcf	3998,0,c	;volatile
  9893                           
  9894                           ;tmr1.c: 117: TMR1H = (timer1ReloadVal >> 8);
  9895  003536  C048  F003         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  9896  00353A  C003  F004         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  9897  00353E  6A05               	clrf	(??_TMR1_ISR+2)& (0+255),c
  9898  003540  5004               	movf	??_TMR1_ISR+1,w,c
  9899  003542  6ECF               	movwf	4047,c	;volatile
  9900                           
  9901                           ;tmr1.c: 118: TMR1L = (uint8_t) timer1ReloadVal;
  9902  003544  C047  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  9903                           
  9904                           ;tmr1.c: 121: if (++CountCallBack >= 4)
  9905  003548  4A3C               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
  9906  00354A  2A3D               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
  9907  00354C  0E04               	movlw	4
  9908  00354E  5C3C               	subwf	TMR1_ISR@CountCallBack& (0+255),w,c	;volatile
  9909  003550  0E00               	movlw	0
  9910  003552  583D               	subwfb	(TMR1_ISR@CountCallBack+1)& (0+255),w,c	;volatile
  9911  003554  A0D8               	btfss	status,0,c
  9912  003556  D005               	goto	i2l3666
  9913                           
  9914                           ;tmr1.c: 122: {
  9915                           ;tmr1.c: 124: do { LATA4 = ~LATA4; } while(0);
  9916  003558  7889               	btg	3977,4,c	;volatile
  9917                           
  9918                           ;tmr1.c: 127: CountCallBack = 0;
  9919  00355A  0E00               	movlw	0
  9920  00355C  6E3D               	movwf	TMR1_ISR@CountCallBack+1,c	;volatile
  9921  00355E  0E00               	movlw	0
  9922  003560  6E3C               	movwf	TMR1_ISR@CountCallBack,c	;volatile
  9923  003562                     i2l3666:
  9924                           
  9925                           ;tmr1.c: 132: }
  9926                           ;tmr1.c: 133: if(CountCallBack == 2)
  9927  003562  503C               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  9928  003564  0A02               	xorlw	2
  9929  003566  103D               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  9930  003568  B4D8               	btfsc	status,2,c
  9931                           
  9932                           ;tmr1.c: 134: {
  9933                           ;tmr1.c: 135: Battery_Read();
  9934  00356A  EC1C  F01C         	call	_Battery_Read	;wreg free
  9935                           
  9936                           ;tmr1.c: 136: }
  9937                           ;tmr1.c: 137: if(CountCallBack == 3)
  9938  00356E  503C               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  9939  003570  0A03               	xorlw	3
  9940  003572  103D               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  9941  003574  A4D8               	btfss	status,2,c
  9942  003576  0012               	return	
  9943                           
  9944                           ;tmr1.c: 138: {
  9945                           ;tmr1.c: 139: Temp_Read();
  9946  003578  EC10  F01C         	call	_Temp_Read	;wreg free
  9947  00357C  0012               	return	
  9948  00357E                     __end_of_TMR1_ISR:
  9949                           	opt stack 0
  9950                           pclatu	equ	0xFFB
  9951                           pclath	equ	0xFFA
  9952                           tblptru	equ	0xFF8
  9953                           tblptrh	equ	0xFF7
  9954                           tblptrl	equ	0xFF6
  9955                           tablat	equ	0xFF5
  9956                           prodh	equ	0xFF4
  9957                           prodl	equ	0xFF3
  9958                           intcon	equ	0xFF2
  9959                           intcon2	equ	0xFF1
  9960                           postinc0	equ	0xFEE
  9961                           fsr0h	equ	0xFEA
  9962                           fsr0l	equ	0xFE9
  9963                           wreg	equ	0xFE8
  9964                           postinc1	equ	0xFE6
  9965                           postdec1	equ	0xFE5
  9966                           fsr1h	equ	0xFE2
  9967                           fsr1l	equ	0xFE1
  9968                           indf2	equ	0xFDF
  9969                           postinc2	equ	0xFDE
  9970                           postdec2	equ	0xFDD
  9971                           fsr2h	equ	0xFDA
  9972                           fsr2l	equ	0xFD9
  9973                           status	equ	0xFD8
  9974                           
  9975 ;; *************** function _Temp_Read *****************
  9976 ;; Defined at:
  9977 ;;		line 27 in file "Tempeture.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;		None
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;		None
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  2   26[COMRAM] int 
  9984 ;; Registers used:
  9985 ;;		wreg, status,2, status,0, cstack
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9991 ;;      Params:         0       0       0       0       0       0       0
  9992 ;;      Locals:         0       0       0       0       0       0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0
  9994 ;;      Totals:         0       0       0       0       0       0       0
  9995 ;;Total ram usage:        0 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    1
  9998 ;; This function calls:
  9999 ;;		_ADC_StartConversion
 10000 ;; This function is called by:
 10001 ;;		_TMR1_ISR
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           	psect	text46
 10006  003820                     __ptext46:
 10007                           	opt stack 0
 10008  003820                     _Temp_Read:
 10009                           	opt stack 22
 10010                           
 10011                           ;Tempeture.c: 30: ADC_Buffer_Point = 0;
 10012                           
 10013                           ;incstack = 0
 10014  003820  0E00               	movlw	0
 10015  003822  6E3F               	movwf	_ADC_Buffer_Point+1,c
 10016  003824  0E00               	movlw	0
 10017  003826  6E3E               	movwf	_ADC_Buffer_Point,c
 10018                           
 10019                           ;Tempeture.c: 31: Temp_Aquire = 1;
 10020  003828  0E01               	movlw	1
 10021  00382A  6E40               	movwf	_Temp_Aquire,c
 10022                           
 10023                           ;Tempeture.c: 32: ADCON1 = 0x80;
 10024  00382C  0E80               	movlw	128
 10025  00382E  6EC1               	movwf	4033,c	;volatile
 10026                           
 10027                           ;Tempeture.c: 33: ADC_StartConversion(Temp1);
 10028  003830  0E0E               	movlw	14
 10029  003832  ECF7  F01B         	call	_ADC_StartConversion
 10030  003836  0012               	return	
 10031  003838                     __end_of_Temp_Read:
 10032                           	opt stack 0
 10033                           pclatu	equ	0xFFB
 10034                           pclath	equ	0xFFA
 10035                           tblptru	equ	0xFF8
 10036                           tblptrh	equ	0xFF7
 10037                           tblptrl	equ	0xFF6
 10038                           tablat	equ	0xFF5
 10039                           prodh	equ	0xFF4
 10040                           prodl	equ	0xFF3
 10041                           intcon	equ	0xFF2
 10042                           intcon2	equ	0xFF1
 10043                           postinc0	equ	0xFEE
 10044                           fsr0h	equ	0xFEA
 10045                           fsr0l	equ	0xFE9
 10046                           wreg	equ	0xFE8
 10047                           postinc1	equ	0xFE6
 10048                           postdec1	equ	0xFE5
 10049                           fsr1h	equ	0xFE2
 10050                           fsr1l	equ	0xFE1
 10051                           indf2	equ	0xFDF
 10052                           postinc2	equ	0xFDE
 10053                           postdec2	equ	0xFDD
 10054                           fsr2h	equ	0xFDA
 10055                           fsr2l	equ	0xFD9
 10056                           status	equ	0xFD8
 10057                           
 10058 ;; *************** function _Battery_Read *****************
 10059 ;; Defined at:
 10060 ;;		line 18 in file "Battery.c"
 10061 ;; Parameters:    Size  Location     Type
 10062 ;;		None
 10063 ;; Auto vars:     Size  Location     Type
 10064 ;;		None
 10065 ;; Return value:  Size  Location     Type
 10066 ;;                  2   24[COMRAM] int 
 10067 ;; Registers used:
 10068 ;;		wreg, status,2, status,0, cstack
 10069 ;; Tracked objects:
 10070 ;;		On entry : 0/0
 10071 ;;		On exit  : 0/0
 10072 ;;		Unchanged: 0/0
 10073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10074 ;;      Params:         0       0       0       0       0       0       0
 10075 ;;      Locals:         0       0       0       0       0       0       0
 10076 ;;      Temps:          0       0       0       0       0       0       0
 10077 ;;      Totals:         0       0       0       0       0       0       0
 10078 ;;Total ram usage:        0 bytes
 10079 ;; Hardware stack levels used:    1
 10080 ;; Hardware stack levels required when called:    1
 10081 ;; This function calls:
 10082 ;;		_ADC_StartConversion
 10083 ;; This function is called by:
 10084 ;;		_TMR1_ISR
 10085 ;; This function uses a non-reentrant model
 10086 ;;
 10087                           
 10088                           	psect	text47
 10089  003838                     __ptext47:
 10090                           	opt stack 0
 10091  003838                     _Battery_Read:
 10092                           	opt stack 22
 10093                           
 10094                           ;Battery.c: 22: ADC_Buffer_Point = 0;
 10095                           
 10096                           ;incstack = 0
 10097  003838  0E00               	movlw	0
 10098  00383A  6E3F               	movwf	_ADC_Buffer_Point+1,c
 10099  00383C  0E00               	movlw	0
 10100  00383E  6E3E               	movwf	_ADC_Buffer_Point,c
 10101                           
 10102                           ;Battery.c: 23: Volt_Aquire = 1;
 10103  003840  0E01               	movlw	1
 10104  003842  6E41               	movwf	_Volt_Aquire,c
 10105                           
 10106                           ;Battery.c: 24: ADCON1 = 0x80;
 10107  003844  0E80               	movlw	128
 10108  003846  6EC1               	movwf	4033,c	;volatile
 10109                           
 10110                           ;Battery.c: 25: ADC_StartConversion(Battery1);
 10111  003848  0E01               	movlw	1
 10112  00384A  ECF7  F01B         	call	_ADC_StartConversion
 10113  00384E  0012               	return	
 10114  003850                     __end_of_Battery_Read:
 10115                           	opt stack 0
 10116                           pclatu	equ	0xFFB
 10117                           pclath	equ	0xFFA
 10118                           tblptru	equ	0xFF8
 10119                           tblptrh	equ	0xFF7
 10120                           tblptrl	equ	0xFF6
 10121                           tablat	equ	0xFF5
 10122                           prodh	equ	0xFF4
 10123                           prodl	equ	0xFF3
 10124                           intcon	equ	0xFF2
 10125                           intcon2	equ	0xFF1
 10126                           postinc0	equ	0xFEE
 10127                           fsr0h	equ	0xFEA
 10128                           fsr0l	equ	0xFE9
 10129                           wreg	equ	0xFE8
 10130                           postinc1	equ	0xFE6
 10131                           postdec1	equ	0xFE5
 10132                           fsr1h	equ	0xFE2
 10133                           fsr1l	equ	0xFE1
 10134                           indf2	equ	0xFDF
 10135                           postinc2	equ	0xFDE
 10136                           postdec2	equ	0xFDD
 10137                           fsr2h	equ	0xFDA
 10138                           fsr2l	equ	0xFD9
 10139                           status	equ	0xFD8
 10140                           
 10141 ;; *************** function _EUSART1_Transmit_ISR *****************
 10142 ;; Defined at:
 10143 ;;		line 173 in file "mcc_generated_files/eusart1.c"
 10144 ;; Parameters:    Size  Location     Type
 10145 ;;		None
 10146 ;; Auto vars:     Size  Location     Type
 10147 ;;		None
 10148 ;; Return value:  Size  Location     Type
 10149 ;;		None               void
 10150 ;; Registers used:
 10151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10152 ;; Tracked objects:
 10153 ;;		On entry : 0/0
 10154 ;;		On exit  : 0/0
 10155 ;;		Unchanged: 0/0
 10156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10157 ;;      Params:         0       0       0       0       0       0       0
 10158 ;;      Locals:         0       0       0       0       0       0       0
 10159 ;;      Temps:          0       0       0       0       0       0       0
 10160 ;;      Totals:         0       0       0       0       0       0       0
 10161 ;;Total ram usage:        0 bytes
 10162 ;; Hardware stack levels used:    1
 10163 ;; This function calls:
 10164 ;;		Nothing
 10165 ;; This function is called by:
 10166 ;;		_INTERRUPT_InterruptManager
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           	psect	text48
 10171  0036AA                     __ptext48:
 10172                           	opt stack 0
 10173  0036AA                     _EUSART1_Transmit_ISR:
 10174                           	opt stack 24
 10175                           
 10176                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 10177                           
 10178                           ;incstack = 0
 10179  0036AA  0E08               	movlw	8
 10180  0036AC  5C49               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
 10181  0036AE  B0D8               	btfsc	status,0,c
 10182  0036B0  D012               	goto	i2l134
 10183                           
 10184                           ;eusart1.c: 178: {
 10185                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
 10186  0036B2  5046               	movf	_eusart1TxTail,w,c
 10187  0036B4  0D01               	mullw	1
 10188  0036B6  0E34               	movlw	low _eusart1TxBuffer
 10189  0036B8  24F3               	addwf	prodl,w,c
 10190  0036BA  6ED9               	movwf	fsr2l,c
 10191  0036BC  0E00               	movlw	high _eusart1TxBuffer
 10192  0036BE  20F4               	addwfc	prodh,w,c
 10193  0036C0  6EDA               	movwf	fsr2h,c
 10194  0036C2  50DF               	movf	indf2,w,c
 10195  0036C4  6EAD               	movwf	4013,c	;volatile
 10196  0036C6  2A46               	incf	_eusart1TxTail,f,c
 10197                           
 10198                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 10199  0036C8  0E07               	movlw	7
 10200  0036CA  6446               	cpfsgt	_eusart1TxTail,c
 10201  0036CC  D002               	goto	i2l2202
 10202                           
 10203                           ;eusart1.c: 181: {
 10204                           ;eusart1.c: 182: eusart1TxTail = 0;
 10205  0036CE  0E00               	movlw	0
 10206  0036D0  6E46               	movwf	_eusart1TxTail,c
 10207  0036D2                     i2l2202:
 10208                           
 10209                           ;eusart1.c: 183: }
 10210                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
 10211  0036D2  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 10212                           
 10213                           ;eusart1.c: 185: }
 10214  0036D4  0012               	return	
 10215  0036D6                     i2l134:
 10216                           
 10217                           ;eusart1.c: 186: else
 10218                           ;eusart1.c: 187: {
 10219                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
 10220  0036D6  989D               	bcf	3997,4,c	;volatile
 10221  0036D8  0012               	return	
 10222  0036DA                     __end_of_EUSART1_Transmit_ISR:
 10223                           	opt stack 0
 10224                           pclatu	equ	0xFFB
 10225                           pclath	equ	0xFFA
 10226                           tblptru	equ	0xFF8
 10227                           tblptrh	equ	0xFF7
 10228                           tblptrl	equ	0xFF6
 10229                           tablat	equ	0xFF5
 10230                           prodh	equ	0xFF4
 10231                           prodl	equ	0xFF3
 10232                           intcon	equ	0xFF2
 10233                           intcon2	equ	0xFF1
 10234                           postinc0	equ	0xFEE
 10235                           fsr0h	equ	0xFEA
 10236                           fsr0l	equ	0xFE9
 10237                           wreg	equ	0xFE8
 10238                           postinc1	equ	0xFE6
 10239                           postdec1	equ	0xFE5
 10240                           fsr1h	equ	0xFE2
 10241                           fsr1l	equ	0xFE1
 10242                           indf2	equ	0xFDF
 10243                           postinc2	equ	0xFDE
 10244                           postdec2	equ	0xFDD
 10245                           fsr2h	equ	0xFDA
 10246                           fsr2l	equ	0xFD9
 10247                           status	equ	0xFD8
 10248                           
 10249 ;; *************** function _EUSART1_Receive_ISR *****************
 10250 ;; Defined at:
 10251 ;;		line 192 in file "mcc_generated_files/eusart1.c"
 10252 ;; Parameters:    Size  Location     Type
 10253 ;;		None
 10254 ;; Auto vars:     Size  Location     Type
 10255 ;;		None
 10256 ;; Return value:  Size  Location     Type
 10257 ;;		None               void
 10258 ;; Registers used:
 10259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/0
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10265 ;;      Params:         0       0       0       0       0       0       0
 10266 ;;      Locals:         0       0       0       0       0       0       0
 10267 ;;      Temps:          0       0       0       0       0       0       0
 10268 ;;      Totals:         0       0       0       0       0       0       0
 10269 ;;Total ram usage:        0 bytes
 10270 ;; Hardware stack levels used:    1
 10271 ;; This function calls:
 10272 ;;		Nothing
 10273 ;; This function is called by:
 10274 ;;		_INTERRUPT_InterruptManager
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           	psect	text49
 10279  0036DA                     __ptext49:
 10280                           	opt stack 0
 10281  0036DA                     _EUSART1_Receive_ISR:
 10282                           	opt stack 24
 10283                           
 10284                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
 10285                           
 10286                           ;incstack = 0
 10287  0036DA  A2AB               	btfss	4011,1,c	;volatile
 10288  0036DC  D002               	goto	i2l3698
 10289                           
 10290                           ;eusart1.c: 195: {
 10291                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
 10292  0036DE  98AB               	bcf	4011,4,c	;volatile
 10293                           
 10294                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
 10295  0036E0  88AB               	bsf	4011,4,c	;volatile
 10296  0036E2                     i2l3698:
 10297                           
 10298                           ;eusart1.c: 200: }
 10299                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
 10300  0036E2  5043               	movf	_eusart1RxHead,w,c
 10301  0036E4  0D01               	mullw	1
 10302  0036E6  0101               	movlb	1	; () banked
 10303  0036E8  0E00               	movlw	low _eusart1RxBuffer
 10304  0036EA  24F3               	addwf	prodl,w,c
 10305  0036EC  6ED9               	movwf	fsr2l,c
 10306  0036EE  0101               	movlb	1	; () banked
 10307  0036F0  0E01               	movlw	high _eusart1RxBuffer
 10308  0036F2  20F4               	addwfc	prodh,w,c
 10309  0036F4  6EDA               	movwf	fsr2h,c
 10310  0036F6  CFAE FFDF          	movff	4014,indf2	;volatile
 10311                           
 10312                           ; BSR set to: 1
 10313  0036FA  2A43               	incf	_eusart1RxHead,f,c
 10314                           
 10315                           ; BSR set to: 1
 10316                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 10317  0036FC  0E31               	movlw	49
 10318  0036FE  6443               	cpfsgt	_eusart1RxHead,c
 10319  003700  D002               	goto	i2l3706
 10320                           
 10321                           ; BSR set to: 1
 10322                           ;eusart1.c: 205: {
 10323                           ;eusart1.c: 206: eusart1RxHead = 0;
 10324  003702  0E00               	movlw	0
 10325  003704  6E43               	movwf	_eusart1RxHead,c
 10326  003706                     i2l3706:
 10327                           
 10328                           ; BSR set to: 1
 10329                           ;eusart1.c: 207: }
 10330                           ;eusart1.c: 208: eusart1RxCount++;
 10331  003706  2A42               	incf	_eusart1RxCount,f,c	;volatile
 10332                           
 10333                           ; BSR set to: 1
 10334  003708  0012               	return	
 10335  00370A                     __end_of_EUSART1_Receive_ISR:
 10336                           	opt stack 0
 10337                           pclatu	equ	0xFFB
 10338                           pclath	equ	0xFFA
 10339                           tblptru	equ	0xFF8
 10340                           tblptrh	equ	0xFF7
 10341                           tblptrl	equ	0xFF6
 10342                           tablat	equ	0xFF5
 10343                           prodh	equ	0xFF4
 10344                           prodl	equ	0xFF3
 10345                           intcon	equ	0xFF2
 10346                           intcon2	equ	0xFF1
 10347                           postinc0	equ	0xFEE
 10348                           fsr0h	equ	0xFEA
 10349                           fsr0l	equ	0xFE9
 10350                           wreg	equ	0xFE8
 10351                           postinc1	equ	0xFE6
 10352                           postdec1	equ	0xFE5
 10353                           fsr1h	equ	0xFE2
 10354                           fsr1l	equ	0xFE1
 10355                           indf2	equ	0xFDF
 10356                           postinc2	equ	0xFDE
 10357                           postdec2	equ	0xFDD
 10358                           fsr2h	equ	0xFDA
 10359                           fsr2l	equ	0xFD9
 10360                           status	equ	0xFD8
 10361                           
 10362 ;; *************** function _ADC_ISR *****************
 10363 ;; Defined at:
 10364 ;;		line 82 in file "mcc_generated_files/adc.c"
 10365 ;; Parameters:    Size  Location     Type
 10366 ;;		None
 10367 ;; Auto vars:     Size  Location     Type
 10368 ;;  ADC_Result      2    6[COMRAM] int 
 10369 ;; Return value:  Size  Location     Type
 10370 ;;		None               void
 10371 ;; Registers used:
 10372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10373 ;; Tracked objects:
 10374 ;;		On entry : 0/0
 10375 ;;		On exit  : 0/0
 10376 ;;		Unchanged: 0/0
 10377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10378 ;;      Params:         0       0       0       0       0       0       0
 10379 ;;      Locals:         2       0       0       0       0       0       0
 10380 ;;      Temps:          2       0       0       0       0       0       0
 10381 ;;      Totals:         4       0       0       0       0       0       0
 10382 ;;Total ram usage:        4 bytes
 10383 ;; Hardware stack levels used:    1
 10384 ;; Hardware stack levels required when called:    1
 10385 ;; This function calls:
 10386 ;;		_ADC_GetConversionResult
 10387 ;;		_ADC_StartConversion
 10388 ;;		_Set_4051
 10389 ;; This function is called by:
 10390 ;;		_INTERRUPT_InterruptManager
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394                           	psect	text50
 10395  000F40                     __ptext50:
 10396                           	opt stack 0
 10397  000F40                     _ADC_ISR:
 10398                           	opt stack 23
 10399                           
 10400                           ;adc.c: 85: PIR1bits.ADIF = 0;
 10401                           
 10402                           ; BSR set to: 1
 10403                           ;incstack = 0
 10404  000F40  9C9E               	bcf	3998,6,c	;volatile
 10405                           
 10406                           ;adc.c: 86: int ADC_Result = 0;
 10407  000F42  0E00               	movlw	0
 10408  000F44  6E08               	movwf	ADC_ISR@ADC_Result+1,c
 10409  000F46  0E00               	movlw	0
 10410  000F48  6E07               	movwf	ADC_ISR@ADC_Result,c
 10411                           
 10412                           ;adc.c: 87: if (Temp_Aquire){
 10413  000F4A  5040               	movf	_Temp_Aquire,w,c
 10414  000F4C  B4D8               	btfsc	status,2,c
 10415  000F4E  D14A               	goto	i2l3782
 10416                           
 10417                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 10418  000F50  EC28  F01C         	call	_ADC_GetConversionResult	;wreg free
 10419  000F54  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 10420  000F58  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 10421                           
 10422                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 10423  000F5C  D117               	goto	i2l3778
 10424  000F5E                     i2l3714:
 10425                           
 10426                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10427  000F5E  0E98               	movlw	low _Temp_Adc
 10428  000F60  6E05               	movwf	??_ADC_ISR& (0+255),c
 10429  000F62  0E00               	movlw	high _Temp_Adc
 10430  000F64  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10431  000F66  90D8               	bcf	status,0,c
 10432  000F68  343E               	rlcf	_ADC_Buffer_Point,w,c
 10433  000F6A  6ED9               	movwf	fsr2l,c
 10434  000F6C  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10435  000F6E  6EDA               	movwf	fsr2h,c
 10436  000F70  5005               	movf	??_ADC_ISR,w,c
 10437  000F72  26D9               	addwf	fsr2l,f,c
 10438  000F74  5006               	movf	??_ADC_ISR+1,w,c
 10439  000F76  22DA               	addwfc	fsr2h,f,c
 10440  000F78  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10441  000F7C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10442                           
 10443                           ;adc.c: 94: Set_4051(0);
 10444  000F80  0E00               	movlw	0
 10445  000F82  6E02               	movwf	Set_4051@Channel+1,c
 10446  000F84  0E00               	movlw	0
 10447  000F86  6E01               	movwf	Set_4051@Channel,c
 10448  000F88  EC9C  F01B         	call	_Set_4051	;wreg free
 10449                           
 10450                           ;adc.c: 95: ADC_StartConversion(Temp1);
 10451  000F8C  0E0E               	movlw	14
 10452  000F8E  ECF7  F01B         	call	_ADC_StartConversion
 10453                           
 10454                           ;adc.c: 96: break;
 10455  000F92  D126               	goto	i2l3780
 10456  000F94                     i2l3720:
 10457                           
 10458                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10459  000F94  0E98               	movlw	low _Temp_Adc
 10460  000F96  6E05               	movwf	??_ADC_ISR& (0+255),c
 10461  000F98  0E00               	movlw	high _Temp_Adc
 10462  000F9A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10463  000F9C  90D8               	bcf	status,0,c
 10464  000F9E  343E               	rlcf	_ADC_Buffer_Point,w,c
 10465  000FA0  6ED9               	movwf	fsr2l,c
 10466  000FA2  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10467  000FA4  6EDA               	movwf	fsr2h,c
 10468  000FA6  5005               	movf	??_ADC_ISR,w,c
 10469  000FA8  26D9               	addwf	fsr2l,f,c
 10470  000FAA  5006               	movf	??_ADC_ISR+1,w,c
 10471  000FAC  22DA               	addwfc	fsr2h,f,c
 10472  000FAE  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10473  000FB2  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10474                           
 10475                           ;adc.c: 99: Set_4051(1);
 10476  000FB6  0E00               	movlw	0
 10477  000FB8  6E02               	movwf	Set_4051@Channel+1,c
 10478  000FBA  0E01               	movlw	1
 10479  000FBC  6E01               	movwf	Set_4051@Channel,c
 10480  000FBE  EC9C  F01B         	call	_Set_4051	;wreg free
 10481                           
 10482                           ;adc.c: 100: ADC_StartConversion(Temp1);
 10483  000FC2  0E0E               	movlw	14
 10484  000FC4  ECF7  F01B         	call	_ADC_StartConversion
 10485                           
 10486                           ;adc.c: 101: break;
 10487  000FC8  D10B               	goto	i2l3780
 10488  000FCA                     i2l3726:
 10489                           
 10490                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10491  000FCA  0E98               	movlw	low _Temp_Adc
 10492  000FCC  6E05               	movwf	??_ADC_ISR& (0+255),c
 10493  000FCE  0E00               	movlw	high _Temp_Adc
 10494  000FD0  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10495  000FD2  90D8               	bcf	status,0,c
 10496  000FD4  343E               	rlcf	_ADC_Buffer_Point,w,c
 10497  000FD6  6ED9               	movwf	fsr2l,c
 10498  000FD8  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10499  000FDA  6EDA               	movwf	fsr2h,c
 10500  000FDC  5005               	movf	??_ADC_ISR,w,c
 10501  000FDE  26D9               	addwf	fsr2l,f,c
 10502  000FE0  5006               	movf	??_ADC_ISR+1,w,c
 10503  000FE2  22DA               	addwfc	fsr2h,f,c
 10504  000FE4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10505  000FE8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10506                           
 10507                           ;adc.c: 104: Set_4051(2);
 10508  000FEC  0E00               	movlw	0
 10509  000FEE  6E02               	movwf	Set_4051@Channel+1,c
 10510  000FF0  0E02               	movlw	2
 10511  000FF2  6E01               	movwf	Set_4051@Channel,c
 10512  000FF4  EC9C  F01B         	call	_Set_4051	;wreg free
 10513                           
 10514                           ;adc.c: 105: ADC_StartConversion(Temp1);
 10515  000FF8  0E0E               	movlw	14
 10516  000FFA  ECF7  F01B         	call	_ADC_StartConversion
 10517                           
 10518                           ;adc.c: 106: break;
 10519  000FFE  D0F0               	goto	i2l3780
 10520  001000                     i2l3732:
 10521                           
 10522                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10523  001000  0E98               	movlw	low _Temp_Adc
 10524  001002  6E05               	movwf	??_ADC_ISR& (0+255),c
 10525  001004  0E00               	movlw	high _Temp_Adc
 10526  001006  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10527  001008  90D8               	bcf	status,0,c
 10528  00100A  343E               	rlcf	_ADC_Buffer_Point,w,c
 10529  00100C  6ED9               	movwf	fsr2l,c
 10530  00100E  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10531  001010  6EDA               	movwf	fsr2h,c
 10532  001012  5005               	movf	??_ADC_ISR,w,c
 10533  001014  26D9               	addwf	fsr2l,f,c
 10534  001016  5006               	movf	??_ADC_ISR+1,w,c
 10535  001018  22DA               	addwfc	fsr2h,f,c
 10536  00101A  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10537  00101E  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10538                           
 10539                           ;adc.c: 109: Set_4051(3);
 10540  001022  0E00               	movlw	0
 10541  001024  6E02               	movwf	Set_4051@Channel+1,c
 10542  001026  0E03               	movlw	3
 10543  001028  6E01               	movwf	Set_4051@Channel,c
 10544  00102A  EC9C  F01B         	call	_Set_4051	;wreg free
 10545                           
 10546                           ;adc.c: 110: ADC_StartConversion(Temp1);
 10547  00102E  0E0E               	movlw	14
 10548  001030  ECF7  F01B         	call	_ADC_StartConversion
 10549                           
 10550                           ;adc.c: 111: break;
 10551  001034  D0D5               	goto	i2l3780
 10552  001036                     i2l3738:
 10553                           
 10554                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10555  001036  0E98               	movlw	low _Temp_Adc
 10556  001038  6E05               	movwf	??_ADC_ISR& (0+255),c
 10557  00103A  0E00               	movlw	high _Temp_Adc
 10558  00103C  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10559  00103E  90D8               	bcf	status,0,c
 10560  001040  343E               	rlcf	_ADC_Buffer_Point,w,c
 10561  001042  6ED9               	movwf	fsr2l,c
 10562  001044  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10563  001046  6EDA               	movwf	fsr2h,c
 10564  001048  5005               	movf	??_ADC_ISR,w,c
 10565  00104A  26D9               	addwf	fsr2l,f,c
 10566  00104C  5006               	movf	??_ADC_ISR+1,w,c
 10567  00104E  22DA               	addwfc	fsr2h,f,c
 10568  001050  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10569  001054  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10570                           
 10571                           ;adc.c: 114: Set_4051(4);
 10572  001058  0E00               	movlw	0
 10573  00105A  6E02               	movwf	Set_4051@Channel+1,c
 10574  00105C  0E04               	movlw	4
 10575  00105E  6E01               	movwf	Set_4051@Channel,c
 10576  001060  EC9C  F01B         	call	_Set_4051	;wreg free
 10577                           
 10578                           ;adc.c: 115: ADC_StartConversion(Temp1);
 10579  001064  0E0E               	movlw	14
 10580  001066  ECF7  F01B         	call	_ADC_StartConversion
 10581                           
 10582                           ;adc.c: 116: break;
 10583  00106A  D0BA               	goto	i2l3780
 10584  00106C                     i2l3744:
 10585                           
 10586                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10587  00106C  0E98               	movlw	low _Temp_Adc
 10588  00106E  6E05               	movwf	??_ADC_ISR& (0+255),c
 10589  001070  0E00               	movlw	high _Temp_Adc
 10590  001072  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10591  001074  90D8               	bcf	status,0,c
 10592  001076  343E               	rlcf	_ADC_Buffer_Point,w,c
 10593  001078  6ED9               	movwf	fsr2l,c
 10594  00107A  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10595  00107C  6EDA               	movwf	fsr2h,c
 10596  00107E  5005               	movf	??_ADC_ISR,w,c
 10597  001080  26D9               	addwf	fsr2l,f,c
 10598  001082  5006               	movf	??_ADC_ISR+1,w,c
 10599  001084  22DA               	addwfc	fsr2h,f,c
 10600  001086  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10601  00108A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10602                           
 10603                           ;adc.c: 119: Set_4051(5);
 10604  00108E  0E00               	movlw	0
 10605  001090  6E02               	movwf	Set_4051@Channel+1,c
 10606  001092  0E05               	movlw	5
 10607  001094  6E01               	movwf	Set_4051@Channel,c
 10608  001096  EC9C  F01B         	call	_Set_4051	;wreg free
 10609                           
 10610                           ;adc.c: 120: ADC_StartConversion(Temp1);
 10611  00109A  0E0E               	movlw	14
 10612  00109C  ECF7  F01B         	call	_ADC_StartConversion
 10613                           
 10614                           ;adc.c: 121: break;
 10615  0010A0  D09F               	goto	i2l3780
 10616  0010A2                     i2l3750:
 10617                           
 10618                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10619  0010A2  0E98               	movlw	low _Temp_Adc
 10620  0010A4  6E05               	movwf	??_ADC_ISR& (0+255),c
 10621  0010A6  0E00               	movlw	high _Temp_Adc
 10622  0010A8  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10623  0010AA  90D8               	bcf	status,0,c
 10624  0010AC  343E               	rlcf	_ADC_Buffer_Point,w,c
 10625  0010AE  6ED9               	movwf	fsr2l,c
 10626  0010B0  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10627  0010B2  6EDA               	movwf	fsr2h,c
 10628  0010B4  5005               	movf	??_ADC_ISR,w,c
 10629  0010B6  26D9               	addwf	fsr2l,f,c
 10630  0010B8  5006               	movf	??_ADC_ISR+1,w,c
 10631  0010BA  22DA               	addwfc	fsr2h,f,c
 10632  0010BC  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10633  0010C0  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10634                           
 10635                           ;adc.c: 124: Set_4051(6);
 10636  0010C4  0E00               	movlw	0
 10637  0010C6  6E02               	movwf	Set_4051@Channel+1,c
 10638  0010C8  0E06               	movlw	6
 10639  0010CA  6E01               	movwf	Set_4051@Channel,c
 10640  0010CC  EC9C  F01B         	call	_Set_4051	;wreg free
 10641                           
 10642                           ;adc.c: 125: ADC_StartConversion(Temp1);
 10643  0010D0  0E0E               	movlw	14
 10644  0010D2  ECF7  F01B         	call	_ADC_StartConversion
 10645                           
 10646                           ;adc.c: 126: break;
 10647  0010D6  D084               	goto	i2l3780
 10648  0010D8                     i2l3756:
 10649                           
 10650                           ;adc.c: 128: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10651  0010D8  0E98               	movlw	low _Temp_Adc
 10652  0010DA  6E05               	movwf	??_ADC_ISR& (0+255),c
 10653  0010DC  0E00               	movlw	high _Temp_Adc
 10654  0010DE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10655  0010E0  90D8               	bcf	status,0,c
 10656  0010E2  343E               	rlcf	_ADC_Buffer_Point,w,c
 10657  0010E4  6ED9               	movwf	fsr2l,c
 10658  0010E6  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10659  0010E8  6EDA               	movwf	fsr2h,c
 10660  0010EA  5005               	movf	??_ADC_ISR,w,c
 10661  0010EC  26D9               	addwf	fsr2l,f,c
 10662  0010EE  5006               	movf	??_ADC_ISR+1,w,c
 10663  0010F0  22DA               	addwfc	fsr2h,f,c
 10664  0010F2  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10665  0010F6  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10666                           
 10667                           ;adc.c: 129: Set_4051(7);
 10668  0010FA  0E00               	movlw	0
 10669  0010FC  6E02               	movwf	Set_4051@Channel+1,c
 10670  0010FE  0E07               	movlw	7
 10671  001100  6E01               	movwf	Set_4051@Channel,c
 10672  001102  EC9C  F01B         	call	_Set_4051	;wreg free
 10673                           
 10674                           ;adc.c: 130: ADC_StartConversion(Temp1);
 10675  001106  0E0E               	movlw	14
 10676  001108  ECF7  F01B         	call	_ADC_StartConversion
 10677                           
 10678                           ;adc.c: 131: break;
 10679  00110C  D069               	goto	i2l3780
 10680  00110E                     i2l3762:
 10681                           
 10682                           ;adc.c: 133: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10683  00110E  0E98               	movlw	low _Temp_Adc
 10684  001110  6E05               	movwf	??_ADC_ISR& (0+255),c
 10685  001112  0E00               	movlw	high _Temp_Adc
 10686  001114  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10687  001116  90D8               	bcf	status,0,c
 10688  001118  343E               	rlcf	_ADC_Buffer_Point,w,c
 10689  00111A  6ED9               	movwf	fsr2l,c
 10690  00111C  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10691  00111E  6EDA               	movwf	fsr2h,c
 10692  001120  5005               	movf	??_ADC_ISR,w,c
 10693  001122  26D9               	addwf	fsr2l,f,c
 10694  001124  5006               	movf	??_ADC_ISR+1,w,c
 10695  001126  22DA               	addwfc	fsr2h,f,c
 10696  001128  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10697  00112C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10698                           
 10699                           ;adc.c: 134: Set_4051(0);
 10700  001130  0E00               	movlw	0
 10701  001132  6E02               	movwf	Set_4051@Channel+1,c
 10702  001134  0E00               	movlw	0
 10703  001136  6E01               	movwf	Set_4051@Channel,c
 10704  001138  EC9C  F01B         	call	_Set_4051	;wreg free
 10705                           
 10706                           ;adc.c: 135: ADC_StartConversion(Temp2);
 10707  00113C  0E14               	movlw	20
 10708  00113E  ECF7  F01B         	call	_ADC_StartConversion
 10709                           
 10710                           ;adc.c: 136: break;
 10711  001142  D04E               	goto	i2l3780
 10712  001144                     i2l3768:
 10713                           
 10714                           ;adc.c: 138: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 10715  001144  0E98               	movlw	low _Temp_Adc
 10716  001146  6E05               	movwf	??_ADC_ISR& (0+255),c
 10717  001148  0E00               	movlw	high _Temp_Adc
 10718  00114A  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10719  00114C  90D8               	bcf	status,0,c
 10720  00114E  343E               	rlcf	_ADC_Buffer_Point,w,c
 10721  001150  6ED9               	movwf	fsr2l,c
 10722  001152  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10723  001154  6EDA               	movwf	fsr2h,c
 10724  001156  5005               	movf	??_ADC_ISR,w,c
 10725  001158  26D9               	addwf	fsr2l,f,c
 10726  00115A  5006               	movf	??_ADC_ISR+1,w,c
 10727  00115C  22DA               	addwfc	fsr2h,f,c
 10728  00115E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10729  001162  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10730                           
 10731                           ;adc.c: 139: Set_4051(1);
 10732  001166  0E00               	movlw	0
 10733  001168  6E02               	movwf	Set_4051@Channel+1,c
 10734  00116A  0E01               	movlw	1
 10735  00116C  6E01               	movwf	Set_4051@Channel,c
 10736  00116E  EC9C  F01B         	call	_Set_4051	;wreg free
 10737                           
 10738                           ;adc.c: 140: ADC_StartConversion(Temp2);
 10739  001172  0E14               	movlw	20
 10740  001174  ECF7  F01B         	call	_ADC_StartConversion
 10741                           
 10742                           ;adc.c: 141: break;
 10743  001178  D033               	goto	i2l3780
 10744  00117A                     i2l3774:
 10745                           
 10746                           ;adc.c: 143: Temp_Aquire = 0;
 10747  00117A  0E00               	movlw	0
 10748  00117C  6E40               	movwf	_Temp_Aquire,c
 10749                           
 10750                           ;adc.c: 144: Temp_Done = 1;
 10751  00117E  0E00               	movlw	0
 10752  001180  0100               	movlb	0	; () banked
 10753  001182  6F93               	movwf	(_Temp_Done+1)& (0+255),b
 10754  001184  0E01               	movlw	1
 10755  001186  0100               	movlb	0	; () banked
 10756  001188  6F92               	movwf	_Temp_Done& (0+255),b
 10757                           
 10758                           ;adc.c: 145: break;
 10759  00118A  D02A               	goto	i2l3780
 10760  00118C                     i2l3778:
 10761  00118C  C03E  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 10762  001190  C03F  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 10763                           
 10764                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10765                           ; Switch size 1, requested type "space"
 10766                           ; Number of cases is 1, Range of values is 0 to 0
 10767                           ; switch strategies available:
 10768                           ; Name         Instructions Cycles
 10769                           ; simple_byte            4     3 (average)
 10770                           ;	Chosen strategy is simple_byte
 10771  001194  5006               	movf	??_ADC_ISR+1,w,c
 10772  001196  0A00               	xorlw	0	; case 0
 10773  001198  A4D8               	btfss	status,2,c
 10774  00119A  D022               	goto	i2l3780
 10775                           
 10776                           ; Switch size 1, requested type "space"
 10777                           ; Number of cases is 11, Range of values is 0 to 10
 10778                           ; switch strategies available:
 10779                           ; Name         Instructions Cycles
 10780                           ; simple_byte           34    18 (average)
 10781                           ;	Chosen strategy is simple_byte
 10782  00119C  5005               	movf	??_ADC_ISR,w,c
 10783  00119E  0A00               	xorlw	0	; case 0
 10784  0011A0  B4D8               	btfsc	status,2,c
 10785  0011A2  D6DD               	goto	i2l3714
 10786  0011A4  0A01               	xorlw	1	; case 1
 10787  0011A6  B4D8               	btfsc	status,2,c
 10788  0011A8  D6F5               	goto	i2l3720
 10789  0011AA  0A03               	xorlw	3	; case 2
 10790  0011AC  B4D8               	btfsc	status,2,c
 10791  0011AE  D70D               	goto	i2l3726
 10792  0011B0  0A01               	xorlw	1	; case 3
 10793  0011B2  B4D8               	btfsc	status,2,c
 10794  0011B4  D725               	goto	i2l3732
 10795  0011B6  0A07               	xorlw	7	; case 4
 10796  0011B8  B4D8               	btfsc	status,2,c
 10797  0011BA  D73D               	goto	i2l3738
 10798  0011BC  0A01               	xorlw	1	; case 5
 10799  0011BE  B4D8               	btfsc	status,2,c
 10800  0011C0  D755               	goto	i2l3744
 10801  0011C2  0A03               	xorlw	3	; case 6
 10802  0011C4  B4D8               	btfsc	status,2,c
 10803  0011C6  D76D               	goto	i2l3750
 10804  0011C8  0A01               	xorlw	1	; case 7
 10805  0011CA  B4D8               	btfsc	status,2,c
 10806  0011CC  D785               	goto	i2l3756
 10807  0011CE  0A0F               	xorlw	15	; case 8
 10808  0011D0  B4D8               	btfsc	status,2,c
 10809  0011D2  D79D               	goto	i2l3762
 10810  0011D4  0A01               	xorlw	1	; case 9
 10811  0011D6  B4D8               	btfsc	status,2,c
 10812  0011D8  D7B5               	goto	i2l3768
 10813  0011DA  0A03               	xorlw	3	; case 10
 10814  0011DC  B4D8               	btfsc	status,2,c
 10815  0011DE  D7CD               	goto	i2l3774
 10816  0011E0                     i2l3780:
 10817                           
 10818                           ;adc.c: 147: ADC_Buffer_Point++;
 10819  0011E0  4A3E               	infsnz	_ADC_Buffer_Point,f,c
 10820  0011E2  2A3F               	incf	_ADC_Buffer_Point+1,f,c
 10821  0011E4                     i2l3782:
 10822                           
 10823                           ;adc.c: 148: }
 10824                           ;adc.c: 149: if (Volt_Aquire){
 10825  0011E4  5041               	movf	_Volt_Aquire,w,c
 10826  0011E6  B4D8               	btfsc	status,2,c
 10827  0011E8  0012               	return	
 10828                           
 10829                           ;adc.c: 151: ADC_Result = ADC_GetConversionResult();
 10830  0011EA  EC28  F01C         	call	_ADC_GetConversionResult	;wreg free
 10831  0011EE  C001  F007         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 10832  0011F2  C002  F008         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 10833                           
 10834                           ;adc.c: 152: switch ( ADC_Buffer_Point )
 10835  0011F6  D0DB               	goto	i2l3830
 10836  0011F8                     i2l3786:
 10837                           
 10838                           ;adc.c: 155: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10839  0011F8  0E7E               	movlw	low _Battery_Adc
 10840  0011FA  6E05               	movwf	??_ADC_ISR& (0+255),c
 10841  0011FC  0E00               	movlw	high _Battery_Adc
 10842  0011FE  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10843  001200  90D8               	bcf	status,0,c
 10844  001202  343E               	rlcf	_ADC_Buffer_Point,w,c
 10845  001204  6ED9               	movwf	fsr2l,c
 10846  001206  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10847  001208  6EDA               	movwf	fsr2h,c
 10848  00120A  5005               	movf	??_ADC_ISR,w,c
 10849  00120C  26D9               	addwf	fsr2l,f,c
 10850  00120E  5006               	movf	??_ADC_ISR+1,w,c
 10851  001210  22DA               	addwfc	fsr2h,f,c
 10852  001212  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10853  001216  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10854                           
 10855                           ;adc.c: 156: ADC_StartConversion(Battery1);
 10856  00121A  0E01               	movlw	1
 10857  00121C  ECF7  F01B         	call	_ADC_StartConversion
 10858                           
 10859                           ;adc.c: 157: break;
 10860  001220  D0F0               	goto	i2l3832
 10861  001222                     i2l3790:
 10862                           
 10863                           ;adc.c: 159: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10864  001222  0E7E               	movlw	low _Battery_Adc
 10865  001224  6E05               	movwf	??_ADC_ISR& (0+255),c
 10866  001226  0E00               	movlw	high _Battery_Adc
 10867  001228  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10868  00122A  90D8               	bcf	status,0,c
 10869  00122C  343E               	rlcf	_ADC_Buffer_Point,w,c
 10870  00122E  6ED9               	movwf	fsr2l,c
 10871  001230  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10872  001232  6EDA               	movwf	fsr2h,c
 10873  001234  5005               	movf	??_ADC_ISR,w,c
 10874  001236  26D9               	addwf	fsr2l,f,c
 10875  001238  5006               	movf	??_ADC_ISR+1,w,c
 10876  00123A  22DA               	addwfc	fsr2h,f,c
 10877  00123C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10878  001240  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10879                           
 10880                           ;adc.c: 160: ADC_StartConversion(Battery2);
 10881  001244  0E03               	movlw	3
 10882  001246  ECF7  F01B         	call	_ADC_StartConversion
 10883                           
 10884                           ;adc.c: 161: break;
 10885  00124A  D0DB               	goto	i2l3832
 10886  00124C                     i2l3794:
 10887                           
 10888                           ;adc.c: 163: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10889  00124C  0E7E               	movlw	low _Battery_Adc
 10890  00124E  6E05               	movwf	??_ADC_ISR& (0+255),c
 10891  001250  0E00               	movlw	high _Battery_Adc
 10892  001252  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10893  001254  90D8               	bcf	status,0,c
 10894  001256  343E               	rlcf	_ADC_Buffer_Point,w,c
 10895  001258  6ED9               	movwf	fsr2l,c
 10896  00125A  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10897  00125C  6EDA               	movwf	fsr2h,c
 10898  00125E  5005               	movf	??_ADC_ISR,w,c
 10899  001260  26D9               	addwf	fsr2l,f,c
 10900  001262  5006               	movf	??_ADC_ISR+1,w,c
 10901  001264  22DA               	addwfc	fsr2h,f,c
 10902  001266  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10903  00126A  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10904                           
 10905                           ;adc.c: 164: ADC_StartConversion(Battery3);
 10906  00126E  0E04               	movlw	4
 10907  001270  ECF7  F01B         	call	_ADC_StartConversion
 10908                           
 10909                           ;adc.c: 165: break;
 10910  001274  D0C6               	goto	i2l3832
 10911  001276                     i2l3798:
 10912                           
 10913                           ;adc.c: 167: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10914  001276  0E7E               	movlw	low _Battery_Adc
 10915  001278  6E05               	movwf	??_ADC_ISR& (0+255),c
 10916  00127A  0E00               	movlw	high _Battery_Adc
 10917  00127C  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10918  00127E  90D8               	bcf	status,0,c
 10919  001280  343E               	rlcf	_ADC_Buffer_Point,w,c
 10920  001282  6ED9               	movwf	fsr2l,c
 10921  001284  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10922  001286  6EDA               	movwf	fsr2h,c
 10923  001288  5005               	movf	??_ADC_ISR,w,c
 10924  00128A  26D9               	addwf	fsr2l,f,c
 10925  00128C  5006               	movf	??_ADC_ISR+1,w,c
 10926  00128E  22DA               	addwfc	fsr2h,f,c
 10927  001290  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10928  001294  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10929                           
 10930                           ;adc.c: 168: ADC_StartConversion(Battery4);
 10931  001298  0E05               	movlw	5
 10932  00129A  ECF7  F01B         	call	_ADC_StartConversion
 10933                           
 10934                           ;adc.c: 169: break;
 10935  00129E  D0B1               	goto	i2l3832
 10936  0012A0                     i2l3802:
 10937                           
 10938                           ;adc.c: 171: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10939  0012A0  0E7E               	movlw	low _Battery_Adc
 10940  0012A2  6E05               	movwf	??_ADC_ISR& (0+255),c
 10941  0012A4  0E00               	movlw	high _Battery_Adc
 10942  0012A6  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10943  0012A8  90D8               	bcf	status,0,c
 10944  0012AA  343E               	rlcf	_ADC_Buffer_Point,w,c
 10945  0012AC  6ED9               	movwf	fsr2l,c
 10946  0012AE  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10947  0012B0  6EDA               	movwf	fsr2h,c
 10948  0012B2  5005               	movf	??_ADC_ISR,w,c
 10949  0012B4  26D9               	addwf	fsr2l,f,c
 10950  0012B6  5006               	movf	??_ADC_ISR+1,w,c
 10951  0012B8  22DA               	addwfc	fsr2h,f,c
 10952  0012BA  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10953  0012BE  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10954                           
 10955                           ;adc.c: 172: ADC_StartConversion(Battery5);
 10956  0012C2  0E18               	movlw	24
 10957  0012C4  ECF7  F01B         	call	_ADC_StartConversion
 10958                           
 10959                           ;adc.c: 173: break;
 10960  0012C8  D09C               	goto	i2l3832
 10961  0012CA                     i2l3806:
 10962                           
 10963                           ;adc.c: 175: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10964  0012CA  0E7E               	movlw	low _Battery_Adc
 10965  0012CC  6E05               	movwf	??_ADC_ISR& (0+255),c
 10966  0012CE  0E00               	movlw	high _Battery_Adc
 10967  0012D0  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10968  0012D2  90D8               	bcf	status,0,c
 10969  0012D4  343E               	rlcf	_ADC_Buffer_Point,w,c
 10970  0012D6  6ED9               	movwf	fsr2l,c
 10971  0012D8  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10972  0012DA  6EDA               	movwf	fsr2h,c
 10973  0012DC  5005               	movf	??_ADC_ISR,w,c
 10974  0012DE  26D9               	addwf	fsr2l,f,c
 10975  0012E0  5006               	movf	??_ADC_ISR+1,w,c
 10976  0012E2  22DA               	addwfc	fsr2h,f,c
 10977  0012E4  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 10978  0012E8  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 10979                           
 10980                           ;adc.c: 176: ADC_StartConversion(Battery6);
 10981  0012EC  0E1A               	movlw	26
 10982  0012EE  ECF7  F01B         	call	_ADC_StartConversion
 10983                           
 10984                           ;adc.c: 177: break;
 10985  0012F2  D087               	goto	i2l3832
 10986  0012F4                     i2l3810:
 10987                           
 10988                           ;adc.c: 179: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 10989  0012F4  0E7E               	movlw	low _Battery_Adc
 10990  0012F6  6E05               	movwf	??_ADC_ISR& (0+255),c
 10991  0012F8  0E00               	movlw	high _Battery_Adc
 10992  0012FA  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 10993  0012FC  90D8               	bcf	status,0,c
 10994  0012FE  343E               	rlcf	_ADC_Buffer_Point,w,c
 10995  001300  6ED9               	movwf	fsr2l,c
 10996  001302  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 10997  001304  6EDA               	movwf	fsr2h,c
 10998  001306  5005               	movf	??_ADC_ISR,w,c
 10999  001308  26D9               	addwf	fsr2l,f,c
 11000  00130A  5006               	movf	??_ADC_ISR+1,w,c
 11001  00130C  22DA               	addwfc	fsr2h,f,c
 11002  00130E  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11003  001312  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11004                           
 11005                           ;adc.c: 180: ADC_StartConversion(Battery7);
 11006  001316  0E1B               	movlw	27
 11007  001318  ECF7  F01B         	call	_ADC_StartConversion
 11008                           
 11009                           ;adc.c: 181: break;
 11010  00131C  D072               	goto	i2l3832
 11011  00131E                     i2l3814:
 11012                           
 11013                           ;adc.c: 183: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11014  00131E  0E7E               	movlw	low _Battery_Adc
 11015  001320  6E05               	movwf	??_ADC_ISR& (0+255),c
 11016  001322  0E00               	movlw	high _Battery_Adc
 11017  001324  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11018  001326  90D8               	bcf	status,0,c
 11019  001328  343E               	rlcf	_ADC_Buffer_Point,w,c
 11020  00132A  6ED9               	movwf	fsr2l,c
 11021  00132C  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 11022  00132E  6EDA               	movwf	fsr2h,c
 11023  001330  5005               	movf	??_ADC_ISR,w,c
 11024  001332  26D9               	addwf	fsr2l,f,c
 11025  001334  5006               	movf	??_ADC_ISR+1,w,c
 11026  001336  22DA               	addwfc	fsr2h,f,c
 11027  001338  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11028  00133C  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11029                           
 11030                           ;adc.c: 184: ADC_StartConversion(Battery8);
 11031  001340  0E08               	movlw	8
 11032  001342  ECF7  F01B         	call	_ADC_StartConversion
 11033                           
 11034                           ;adc.c: 185: break;
 11035  001346  D05D               	goto	i2l3832
 11036  001348                     i2l3818:
 11037                           
 11038                           ;adc.c: 187: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11039  001348  0E7E               	movlw	low _Battery_Adc
 11040  00134A  6E05               	movwf	??_ADC_ISR& (0+255),c
 11041  00134C  0E00               	movlw	high _Battery_Adc
 11042  00134E  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11043  001350  90D8               	bcf	status,0,c
 11044  001352  343E               	rlcf	_ADC_Buffer_Point,w,c
 11045  001354  6ED9               	movwf	fsr2l,c
 11046  001356  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 11047  001358  6EDA               	movwf	fsr2h,c
 11048  00135A  5005               	movf	??_ADC_ISR,w,c
 11049  00135C  26D9               	addwf	fsr2l,f,c
 11050  00135E  5006               	movf	??_ADC_ISR+1,w,c
 11051  001360  22DA               	addwfc	fsr2h,f,c
 11052  001362  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11053  001366  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11054                           
 11055                           ;adc.c: 188: ADC_StartConversion(Battery9);
 11056  00136A  0E0B               	movlw	11
 11057  00136C  ECF7  F01B         	call	_ADC_StartConversion
 11058                           
 11059                           ;adc.c: 189: break;
 11060  001370  D048               	goto	i2l3832
 11061  001372                     i2l3822:
 11062                           
 11063                           ;adc.c: 191: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 11064  001372  0E7E               	movlw	low _Battery_Adc
 11065  001374  6E05               	movwf	??_ADC_ISR& (0+255),c
 11066  001376  0E00               	movlw	high _Battery_Adc
 11067  001378  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 11068  00137A  90D8               	bcf	status,0,c
 11069  00137C  343E               	rlcf	_ADC_Buffer_Point,w,c
 11070  00137E  6ED9               	movwf	fsr2l,c
 11071  001380  343F               	rlcf	_ADC_Buffer_Point+1,w,c
 11072  001382  6EDA               	movwf	fsr2h,c
 11073  001384  5005               	movf	??_ADC_ISR,w,c
 11074  001386  26D9               	addwf	fsr2l,f,c
 11075  001388  5006               	movf	??_ADC_ISR+1,w,c
 11076  00138A  22DA               	addwfc	fsr2h,f,c
 11077  00138C  C007  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 11078  001390  C008  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 11079                           
 11080                           ;adc.c: 192: ADC_StartConversion(Battery10);
 11081  001394  0E0D               	movlw	13
 11082  001396  ECF7  F01B         	call	_ADC_StartConversion
 11083                           
 11084                           ;adc.c: 193: break;
 11085  00139A  D033               	goto	i2l3832
 11086  00139C                     i2l3826:
 11087                           
 11088                           ;adc.c: 195: Volt_Aquire = 0;
 11089  00139C  0E00               	movlw	0
 11090  00139E  6E41               	movwf	_Volt_Aquire,c
 11091                           
 11092                           ;adc.c: 196: Volt_Done = 1;
 11093  0013A0  0E00               	movlw	0
 11094  0013A2  0100               	movlb	0	; () banked
 11095  0013A4  6F95               	movwf	(_Volt_Done+1)& (0+255),b
 11096  0013A6  0E01               	movlw	1
 11097  0013A8  0100               	movlb	0	; () banked
 11098  0013AA  6F94               	movwf	_Volt_Done& (0+255),b
 11099                           
 11100                           ;adc.c: 197: break;
 11101  0013AC  D02A               	goto	i2l3832
 11102  0013AE                     i2l3830:
 11103  0013AE  C03E  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 11104  0013B2  C03F  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 11105                           
 11106                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11107                           ; Switch size 1, requested type "space"
 11108                           ; Number of cases is 1, Range of values is 0 to 0
 11109                           ; switch strategies available:
 11110                           ; Name         Instructions Cycles
 11111                           ; simple_byte            4     3 (average)
 11112                           ;	Chosen strategy is simple_byte
 11113  0013B6  5006               	movf	??_ADC_ISR+1,w,c
 11114  0013B8  0A00               	xorlw	0	; case 0
 11115  0013BA  A4D8               	btfss	status,2,c
 11116  0013BC  D022               	goto	i2l3832
 11117                           
 11118                           ; Switch size 1, requested type "space"
 11119                           ; Number of cases is 11, Range of values is 0 to 10
 11120                           ; switch strategies available:
 11121                           ; Name         Instructions Cycles
 11122                           ; simple_byte           34    18 (average)
 11123                           ;	Chosen strategy is simple_byte
 11124  0013BE  5005               	movf	??_ADC_ISR,w,c
 11125  0013C0  0A00               	xorlw	0	; case 0
 11126  0013C2  B4D8               	btfsc	status,2,c
 11127  0013C4  D719               	goto	i2l3786
 11128  0013C6  0A01               	xorlw	1	; case 1
 11129  0013C8  B4D8               	btfsc	status,2,c
 11130  0013CA  D72B               	goto	i2l3790
 11131  0013CC  0A03               	xorlw	3	; case 2
 11132  0013CE  B4D8               	btfsc	status,2,c
 11133  0013D0  D73D               	goto	i2l3794
 11134  0013D2  0A01               	xorlw	1	; case 3
 11135  0013D4  B4D8               	btfsc	status,2,c
 11136  0013D6  D74F               	goto	i2l3798
 11137  0013D8  0A07               	xorlw	7	; case 4
 11138  0013DA  B4D8               	btfsc	status,2,c
 11139  0013DC  D761               	goto	i2l3802
 11140  0013DE  0A01               	xorlw	1	; case 5
 11141  0013E0  B4D8               	btfsc	status,2,c
 11142  0013E2  D773               	goto	i2l3806
 11143  0013E4  0A03               	xorlw	3	; case 6
 11144  0013E6  B4D8               	btfsc	status,2,c
 11145  0013E8  D785               	goto	i2l3810
 11146  0013EA  0A01               	xorlw	1	; case 7
 11147  0013EC  B4D8               	btfsc	status,2,c
 11148  0013EE  D797               	goto	i2l3814
 11149  0013F0  0A0F               	xorlw	15	; case 8
 11150  0013F2  B4D8               	btfsc	status,2,c
 11151  0013F4  D7A9               	goto	i2l3818
 11152  0013F6  0A01               	xorlw	1	; case 9
 11153  0013F8  B4D8               	btfsc	status,2,c
 11154  0013FA  D7BB               	goto	i2l3822
 11155  0013FC  0A03               	xorlw	3	; case 10
 11156  0013FE  B4D8               	btfsc	status,2,c
 11157  001400  D7CD               	goto	i2l3826
 11158  001402                     i2l3832:
 11159                           
 11160                           ;adc.c: 199: ADC_Buffer_Point++;
 11161  001402  4A3E               	infsnz	_ADC_Buffer_Point,f,c
 11162  001404  2A3F               	incf	_ADC_Buffer_Point+1,f,c
 11163  001406  0012               	return	
 11164  001408                     __end_of_ADC_ISR:
 11165                           	opt stack 0
 11166                           pclatu	equ	0xFFB
 11167                           pclath	equ	0xFFA
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           intcon2	equ	0xFF1
 11176                           postinc0	equ	0xFEE
 11177                           fsr0h	equ	0xFEA
 11178                           fsr0l	equ	0xFE9
 11179                           wreg	equ	0xFE8
 11180                           postinc1	equ	0xFE6
 11181                           postdec1	equ	0xFE5
 11182                           fsr1h	equ	0xFE2
 11183                           fsr1l	equ	0xFE1
 11184                           indf2	equ	0xFDF
 11185                           postinc2	equ	0xFDE
 11186                           postdec2	equ	0xFDD
 11187                           fsr2h	equ	0xFDA
 11188                           fsr2l	equ	0xFD9
 11189                           status	equ	0xFD8
 11190                           
 11191 ;; *************** function _Set_4051 *****************
 11192 ;; Defined at:
 11193 ;;		line 9 in file "Functions.c"
 11194 ;; Parameters:    Size  Location     Type
 11195 ;;  Channel         2    0[COMRAM] int 
 11196 ;; Auto vars:     Size  Location     Type
 11197 ;;		None
 11198 ;; Return value:  Size  Location     Type
 11199 ;;		None               void
 11200 ;; Registers used:
 11201 ;;		wreg, status,2, status,0
 11202 ;; Tracked objects:
 11203 ;;		On entry : 0/0
 11204 ;;		On exit  : 0/0
 11205 ;;		Unchanged: 0/0
 11206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11207 ;;      Params:         2       0       0       0       0       0       0
 11208 ;;      Locals:         0       0       0       0       0       0       0
 11209 ;;      Temps:          2       0       0       0       0       0       0
 11210 ;;      Totals:         4       0       0       0       0       0       0
 11211 ;;Total ram usage:        4 bytes
 11212 ;; Hardware stack levels used:    1
 11213 ;; This function calls:
 11214 ;;		Nothing
 11215 ;; This function is called by:
 11216 ;;		_ADC_ISR
 11217 ;; This function uses a non-reentrant model
 11218 ;;
 11219                           
 11220                           	psect	text51
 11221  003738                     __ptext51:
 11222                           	opt stack 0
 11223  003738                     _Set_4051:
 11224                           	opt stack 23
 11225                           
 11226                           ;Functions.c: 11: if (Channel & 0x01)
 11227                           
 11228                           ;incstack = 0
 11229  003738  B001               	btfsc	Set_4051@Channel,0,c
 11230                           
 11231                           ;Functions.c: 12: {
 11232                           ;Functions.c: 13: do { LATA6 = ~LATA6; } while(0);
 11233  00373A  7C89               	btg	3977,6,c	;volatile
 11234                           
 11235                           ;Functions.c: 14: }
 11236                           ;Functions.c: 15: if ((Channel>>1) & 0x01)
 11237  00373C  3402               	rlcf	Set_4051@Channel+1,w,c
 11238  00373E  3002               	rrcf	Set_4051@Channel+1,w,c
 11239  003740  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 11240  003742  3001               	rrcf	Set_4051@Channel,w,c
 11241  003744  6E03               	movwf	??_Set_4051& (0+255),c
 11242  003746  B003               	btfsc	??_Set_4051,0,c
 11243                           
 11244                           ;Functions.c: 16: {
 11245                           ;Functions.c: 17: do { LATC0 = ~LATC0; } while(0);
 11246  003748  708B               	btg	3979,0,c	;volatile
 11247                           
 11248                           ;Functions.c: 18: }
 11249                           ;Functions.c: 19: if ((Channel>>2) & 0x01)
 11250  00374A  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 11251  00374E  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 11252  003752  3404               	rlcf	??_Set_4051+1,w,c
 11253  003754  3204               	rrcf	??_Set_4051+1,f,c
 11254  003756  3203               	rrcf	??_Set_4051,f,c
 11255  003758  3404               	rlcf	??_Set_4051+1,w,c
 11256  00375A  3204               	rrcf	??_Set_4051+1,f,c
 11257  00375C  3203               	rrcf	??_Set_4051,f,c
 11258  00375E  A003               	btfss	??_Set_4051,0,c
 11259  003760  0012               	return	
 11260                           
 11261                           ;Functions.c: 20: {
 11262                           ;Functions.c: 21: do { LATC1 = ~LATC1; } while(0);
 11263  003762  728B               	btg	3979,1,c	;volatile
 11264  003764  0012               	return	
 11265  003766                     __end_of_Set_4051:
 11266                           	opt stack 0
 11267                           pclatu	equ	0xFFB
 11268                           pclath	equ	0xFFA
 11269                           tblptru	equ	0xFF8
 11270                           tblptrh	equ	0xFF7
 11271                           tblptrl	equ	0xFF6
 11272                           tablat	equ	0xFF5
 11273                           prodh	equ	0xFF4
 11274                           prodl	equ	0xFF3
 11275                           intcon	equ	0xFF2
 11276                           intcon2	equ	0xFF1
 11277                           postinc0	equ	0xFEE
 11278                           fsr0h	equ	0xFEA
 11279                           fsr0l	equ	0xFE9
 11280                           wreg	equ	0xFE8
 11281                           postinc1	equ	0xFE6
 11282                           postdec1	equ	0xFE5
 11283                           fsr1h	equ	0xFE2
 11284                           fsr1l	equ	0xFE1
 11285                           indf2	equ	0xFDF
 11286                           postinc2	equ	0xFDE
 11287                           postdec2	equ	0xFDD
 11288                           fsr2h	equ	0xFDA
 11289                           fsr2l	equ	0xFD9
 11290                           status	equ	0xFD8
 11291                           
 11292 ;; *************** function _ADC_StartConversion *****************
 11293 ;; Defined at:
 11294 ;;		line 36 in file "mcc_generated_files/adc.c"
 11295 ;; Parameters:    Size  Location     Type
 11296 ;;  channel         1    wreg     enum E8837
 11297 ;; Auto vars:     Size  Location     Type
 11298 ;;  channel         1    1[COMRAM] enum E8837
 11299 ;; Return value:  Size  Location     Type
 11300 ;;		None               void
 11301 ;; Registers used:
 11302 ;;		wreg, status,2, status,0
 11303 ;; Tracked objects:
 11304 ;;		On entry : 0/0
 11305 ;;		On exit  : 0/0
 11306 ;;		Unchanged: 0/0
 11307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11308 ;;      Params:         0       0       0       0       0       0       0
 11309 ;;      Locals:         1       0       0       0       0       0       0
 11310 ;;      Temps:          1       0       0       0       0       0       0
 11311 ;;      Totals:         2       0       0       0       0       0       0
 11312 ;;Total ram usage:        2 bytes
 11313 ;; Hardware stack levels used:    1
 11314 ;; This function calls:
 11315 ;;		Nothing
 11316 ;; This function is called by:
 11317 ;;		_ADC_ISR
 11318 ;;		_Battery_Read
 11319 ;;		_Temp_Read
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           	psect	text52
 11324  0037EE                     __ptext52:
 11325                           	opt stack 0
 11326  0037EE                     _ADC_StartConversion:
 11327                           	opt stack 22
 11328                           
 11329                           ;incstack = 0
 11330                           ;ADC_StartConversion@channel stored from wreg
 11331  0037EE  6E02               	movwf	ADC_StartConversion@channel,c
 11332                           
 11333                           ;adc.c: 39: ADCON0bits.CHS = channel;
 11334  0037F0  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 11335  0037F4  4601               	rlncf	??_ADC_StartConversion,f,c
 11336  0037F6  4601               	rlncf	??_ADC_StartConversion,f,c
 11337  0037F8  50C2               	movf	4034,w,c	;volatile
 11338  0037FA  1801               	xorwf	??_ADC_StartConversion,w,c
 11339  0037FC  0B83               	andlw	-125
 11340  0037FE  1801               	xorwf	??_ADC_StartConversion,w,c
 11341  003800  6EC2               	movwf	4034,c	;volatile
 11342                           
 11343                           ;adc.c: 42: ADCON0bits.ADON = 1;
 11344  003802  80C2               	bsf	4034,0,c	;volatile
 11345                           
 11346                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 11347  003804  82C2               	bsf	4034,1,c	;volatile
 11348  003806  0012               	return	
 11349  003808                     __end_of_ADC_StartConversion:
 11350                           	opt stack 0
 11351                           pclatu	equ	0xFFB
 11352                           pclath	equ	0xFFA
 11353                           tblptru	equ	0xFF8
 11354                           tblptrh	equ	0xFF7
 11355                           tblptrl	equ	0xFF6
 11356                           tablat	equ	0xFF5
 11357                           prodh	equ	0xFF4
 11358                           prodl	equ	0xFF3
 11359                           intcon	equ	0xFF2
 11360                           intcon2	equ	0xFF1
 11361                           postinc0	equ	0xFEE
 11362                           fsr0h	equ	0xFEA
 11363                           fsr0l	equ	0xFE9
 11364                           wreg	equ	0xFE8
 11365                           postinc1	equ	0xFE6
 11366                           postdec1	equ	0xFE5
 11367                           fsr1h	equ	0xFE2
 11368                           fsr1l	equ	0xFE1
 11369                           indf2	equ	0xFDF
 11370                           postinc2	equ	0xFDE
 11371                           postdec2	equ	0xFDD
 11372                           fsr2h	equ	0xFDA
 11373                           fsr2l	equ	0xFD9
 11374                           status	equ	0xFD8
 11375                           
 11376 ;; *************** function _ADC_GetConversionResult *****************
 11377 ;; Defined at:
 11378 ;;		line 55 in file "mcc_generated_files/adc.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;		None
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;		None
 11383 ;; Return value:  Size  Location     Type
 11384 ;;                  2    0[COMRAM] unsigned int 
 11385 ;; Registers used:
 11386 ;;		wreg, status,2, status,0
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11392 ;;      Params:         2       0       0       0       0       0       0
 11393 ;;      Locals:         0       0       0       0       0       0       0
 11394 ;;      Temps:          2       0       0       0       0       0       0
 11395 ;;      Totals:         4       0       0       0       0       0       0
 11396 ;;Total ram usage:        4 bytes
 11397 ;; Hardware stack levels used:    1
 11398 ;; This function calls:
 11399 ;;		Nothing
 11400 ;; This function is called by:
 11401 ;;		_ADC_ISR
 11402 ;; This function uses a non-reentrant model
 11403 ;;
 11404                           
 11405                           	psect	text53
 11406  003850                     __ptext53:
 11407                           	opt stack 0
 11408  003850                     _ADC_GetConversionResult:
 11409                           	opt stack 23
 11410                           
 11411                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 11412                           
 11413                           ;incstack = 0
 11414  003850  50C4               	movf	4036,w,c	;volatile
 11415  003852  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 11416  003854  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 11417  003856  50C3               	movf	4035,w,c	;volatile
 11418  003858  2403               	addwf	??_ADC_GetConversionResult,w,c
 11419  00385A  6E01               	movwf	?_ADC_GetConversionResult,c
 11420  00385C  0E00               	movlw	0
 11421  00385E  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 11422  003860  6E02               	movwf	?_ADC_GetConversionResult+1,c
 11423  003862  0012               	return	
 11424  003864                     __end_of_ADC_GetConversionResult:
 11425                           	opt stack 0
 11426                           pclatu	equ	0xFFB
 11427                           pclath	equ	0xFFA
 11428                           tblptru	equ	0xFF8
 11429                           tblptrh	equ	0xFF7
 11430                           tblptrl	equ	0xFF6
 11431                           tablat	equ	0xFF5
 11432                           prodh	equ	0xFF4
 11433                           prodl	equ	0xFF3
 11434                           intcon	equ	0xFF2
 11435                           intcon2	equ	0xFF1
 11436                           postinc0	equ	0xFEE
 11437                           fsr0h	equ	0xFEA
 11438                           fsr0l	equ	0xFE9
 11439                           wreg	equ	0xFE8
 11440                           postinc1	equ	0xFE6
 11441                           postdec1	equ	0xFE5
 11442                           fsr1h	equ	0xFE2
 11443                           fsr1l	equ	0xFE1
 11444                           indf2	equ	0xFDF
 11445                           postinc2	equ	0xFDE
 11446                           postdec2	equ	0xFDD
 11447                           fsr2h	equ	0xFDA
 11448                           fsr2l	equ	0xFD9
 11449                           status	equ	0xFD8
 11450                           pclatu	equ	0xFFB
 11451                           pclath	equ	0xFFA
 11452                           tblptru	equ	0xFF8
 11453                           tblptrh	equ	0xFF7
 11454                           tblptrl	equ	0xFF6
 11455                           tablat	equ	0xFF5
 11456                           prodh	equ	0xFF4
 11457                           prodl	equ	0xFF3
 11458                           intcon	equ	0xFF2
 11459                           intcon2	equ	0xFF1
 11460                           postinc0	equ	0xFEE
 11461                           fsr0h	equ	0xFEA
 11462                           fsr0l	equ	0xFE9
 11463                           wreg	equ	0xFE8
 11464                           postinc1	equ	0xFE6
 11465                           postdec1	equ	0xFE5
 11466                           fsr1h	equ	0xFE2
 11467                           fsr1l	equ	0xFE1
 11468                           indf2	equ	0xFDF
 11469                           postinc2	equ	0xFDE
 11470                           postdec2	equ	0xFDD
 11471                           fsr2h	equ	0xFDA
 11472                           fsr2l	equ	0xFD9
 11473                           status	equ	0xFD8
 11474                           
 11475                           	psect	rparam
 11476  0000                     pclatu	equ	0xFFB
 11477                           pclath	equ	0xFFA
 11478                           tblptru	equ	0xFF8
 11479                           tblptrh	equ	0xFF7
 11480                           tblptrl	equ	0xFF6
 11481                           tablat	equ	0xFF5
 11482                           prodh	equ	0xFF4
 11483                           prodl	equ	0xFF3
 11484                           intcon	equ	0xFF2
 11485                           intcon2	equ	0xFF1
 11486                           postinc0	equ	0xFEE
 11487                           fsr0h	equ	0xFEA
 11488                           fsr0l	equ	0xFE9
 11489                           wreg	equ	0xFE8
 11490                           postinc1	equ	0xFE6
 11491                           postdec1	equ	0xFE5
 11492                           fsr1h	equ	0xFE2
 11493                           fsr1l	equ	0xFE1
 11494                           indf2	equ	0xFDF
 11495                           postinc2	equ	0xFDE
 11496                           postdec2	equ	0xFDD
 11497                           fsr2h	equ	0xFDA
 11498                           fsr2l	equ	0xFD9
 11499                           status	equ	0xFD8


Data Sizes:
    Strings     36
    Constant    145
    Data        0
    BSS         295
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     51      73
    BANK0           160     73     149
    BANK1           256     35     235
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[19]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1044$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _printf->___ftge
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Temp_Fault->___ftge
    _Temp_Convert->_Temp_Filter
    _log->_eval_poly
    _eval_poly->___ftmul
    ___ftdiv->___ftpack
    _Temp_Filter->___ftmul
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->_Battery_Filter
    ___awtoft->___wmul
    ___awdiv->___awmod
    _Battery_Filter->___ftmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Battery_Filter->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13     8      5  214651
                                             60 BANK0     13     8      5
                    _Battery_Convert
                      _Battery_Fault
                        _Battery_Get
                              _Delay
                           _RunBypas
                  _SYSTEM_Initialize
                          _SetBypass
                       _Temp_Convert
                         _Temp_Fault
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              54    47      7   71041
                                             40 BANK0     13     6      7
                                              0 BANK1     35    35      0
                        _Battery_Get (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   17490
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             23 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   17211
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             22 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          16    10      6     827
                                             22 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2672
                                             30 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             35 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     703
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             22 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    7318
                                              0 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   83661
                                             49 BANK0     11    11      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   33392
                                             44 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     352
                                             22 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   18030
                                             49 COMRAM     2     2      0
                                             34 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5659
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3335
                                             30 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   17836
                                             49 COMRAM     2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    8593
                                              0 BANK0      7     7      0
                        _Battery_Get
                          _SetBypass
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _SetBypass                                            6     2      4     957
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    5961
                                             42 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Delay                                                9     5      4     175
                                             22 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    7349
                                              0 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1430
                                             42 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   29200
                                             34 BANK0      4     4      0
                     _Battery_Filter
                            ___awdiv
                           ___awtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2857
                                             42 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2601
                                             28 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   17836
                                             49 COMRAM     2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    5776
                                             36 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6597
                                             46 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5172
                                             22 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2493
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1215
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             3     3      0      44
                                              2 COMRAM     3     3      0
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1171
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             4     2      2     706
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Battery_Get
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _Delay
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _SetBypass
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _SetBypass
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printf
     _Battery_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch (ARG)
       _EUSART1_Write
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     23      EB       6       91.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     49      95       4       93.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     33      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C9       9        0.0%
DATA                 0      0     1C9      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun May 03 02:48:05 2015

           _eusart1TxBufferRemaining 0049                         ___awdiv@sign 0022  
                ___wmul@multiplicand 0027                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                         ___ftadd@exp1 00CD  
                       ___ftadd@exp2 00CC                         ___ftadd@sign 00CB  
                                l122 3650                                  l511 2AE4  
                                l435 3516                                  l436 3508  
                                l540 2B24                                  l533 2B14  
                                l526 2B04                                  l519 2AF4  
                                l561 2B54                                  l554 2B44  
                                l547 2B34                                  l575 2B74  
                                l568 2B64                                  l658 0BF4  
                                l970 283A                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0047  
                                _log 240C                      __end_of_ADC_ISR 1408  
                       ___awmod@sign 001C                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                    ?_Battery_Filter 0001                         ___ftdiv@cntr 0028  
                       ___ftdiv@sign 002D                                 l1113 377E  
                               l1043 1BBE                                 l1045 1BE6  
                               l1054 1CD0                                 l1063 1CFA  
                               l1039 1B84                                 l1081 2A32  
                               l1074 2D62                                 l1162 334E  
                               l1082 2A5A                                 l1172 342A  
                               l1088 2AC4                                 l3144 3156  
                               l5010 341C                                 l5002 33E8  
                               l5004 33F4                                 l5006 33F8  
                               l5102 06CC                                 l4320 303C  
                               l4312 2FFE                                 l4400 1D24  
                               l5016 3442                                 l5112 06F6  
                               l4322 305A                                 l4314 3008  
                               l4410 1D72                                 l5050 2F22  
                               l5018 344E                                 l5202 0AF6  
                               l5114 072C                                 l5106 06E2  
                               l4324 3064                                 l4316 3026  
                               l4308 2FF0                                 l4420 25AE  
                               l4500 30E2                                 l5036 2FDA  
                               l5212 0BA8                                 l5108 06F0  
                               l4502 30EA                                 l5302 2E34  
                               l5230 0C1A                                 l5214 0BB6  
                               l5206 0B1C                                 l4352 1B92  
                               l4440 2630                                 l4520 3122  
                               l4512 310A                                 l4504 30EE  
                               l5064 33CE                                 l5224 0BF8  
                               l5160 0942                                 l5152 08D6  
                               l5144 086E                                 l5128 07A6  
                               l4450 267A                                 l4426 25E2  
                               l5306 2E68                                 l5234 0C6C  
                               l5242 0D46                                 l5218 0BC4  
                               l5250 0D6E                                 l5322 2864  
                               l4380 1C52                                 l4364 1BDC  
                               l4444 264E                                 l4516 3114  
                               l4620 2220                                 l4540 320C  
                               l4532 31E2                                 l5260 0DE8  
                               l5244 0D54                                 l5172 09D0  
                               l5156 08FC                                 l4382 1C66  
                               l4374 1C1E                                 l4358 1BCC  
                               l4454 2698                                 l4542 3214  
                               l4702 1ACA                                 l4392 1CB2  
                               l4384 1C72                                 l4544 3218  
                               l4552 3236                                 l4536 31FE  
                               l4464 3640                                 l5280 0E6C  
                               l5248 0D62                                 l5184 0A42  
                               l5168 09AA                                 l4394 1CC6  
                               l4386 1C7E                                 l5098 1F9A  
                               l4810 275C                                 l4722 161E  
                               l5274 0E34                                 l5338 289C  
                               l4660 2AF8                                 l4644 247A  
                               l4804 2720                                 l4556 3244  
                               l4548 322C                                 l4476 3672  
                               l4740 1852                                 l4716 155C  
                               l5284 0F08                                 l5188 0AAA  
                               l5372 2956                                 l4494 30CC  
                               l4670 2B48                                 l4662 2B08  
                               l4574 2C12                                 l4638 2448  
                               l4750 29CE                                 l4478 3674  
                               l4734 1790                                 l4726 164A  
                               l5278 0E58                                 l5286 0F1C  
                               l5358 2908                                 l4592 2398  
                               l4488 30AC                                 l4568 35A2  
                               l4912 327E                                 l4672 2B58  
                               l4664 2B18                                 l4656 2AD8  
                               l4576 2C9A                                 l4832 27CE  
                               l4824 279E                                 l4922 32DA  
                               l4674 2B68                                 l4666 2B28  
                               l4658 2AE8                                 l4842 2802  
                               l4916 32AE                                 l4668 2B38  
                               l4852 282A                                 l4756 29F8  
                               ?_log 00D8                                 l4678 2B78  
                               l4862 2CD8                                 l4854 2836  
                               l4846 2812                                 l4694 19E6  
                               l4936 1FE0                                 l4784 2A8C  
                               l4954 2088                                 l4794 2AB4  
                               l4868 2CFE                                 l4972 210A  
                               l4964 20C6                                 l4796 2AC0  
                               l4788 2A9C                                 l4966 20DE  
                               l4958 20A4                                 l4982 3300  
                               l4888 2D3C                                 l4968 20E4  
                               l4984 330C                                 l4994 3340  
                               l4986 3310                                 STR_1 06A5  
                               STR_2 0692                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u4101 1B30                                 u4111 1B50  
                               u5011 2CE8                                 u5100 200C  
                               u2550 317E                                 u4311 258E  
                               u5105 2002                                 u4331 25C2  
                               u2558 3180                                 u5081 1FB8  
                               u4625 2424                                 u4811 29B4  
                               u4900 2702                                 u5380 07F6  
                               u5365 0780                                 u4831 29DE  
                               u4920 273E                                 u4905 26F8  
                               u5385 07EA                                 u4925 2734  
                               u5585 0DC0                                 u4991 2CC2  
                               _TMR1 000FCE                                 _WPUB 000F61  
                      _EUSART1_Write 363E                                 _main 284C  
                       ___ftpack@arg 0017                         ___ftpack@exp 001A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               log@x 00D8                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 00B6                        printf@vd_1060 01D3  
                       ___ftmul@sign 00B7                    ADC_ISR@ADC_Result 0007  
                       ___fttol@exp1 00CD                                ??_log 0034  
                       ___fttol@lval 00C9                     ?_Battery_Convert 0001  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 3872  
                              ?_main 00E8                      __end_of___awdiv 312C  
                    __end_of___ftadd 1D98                      __end_of___awmod 324E  
                    __end_of___ftdiv 2D94                      _TMR1_StartTimer 3888  
                    __end_of___ftneg 378C                      __end_of___lldiv 3360  
                    __end_of___ftmul 26E4                      ___awdiv@divisor 001F  
                              _T1CON 000FCD                      __end_of___llmod 343C  
                    __end_of___ftsub 3602                      __end_of___fttol 211C  
                              _LATA0 007C48                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATA4 007C4C                                _LATC1 007C59  
                              _LATB3 007C53                                _LATA6 007C4E  
                              _LATD1 007C61                                _LATD2 007C62  
                              _LATC4 007C5C                                _LATD3 007C63  
                              _LATC5 007C5D                                _LATD5 007C65  
                     __CFG_DEBUG$OFF 000000                                i2l134 36D6  
                              i2l290 006E                                i2l282 004C  
                              i2l284 0058                                i2l286 0064  
                    ___awdiv@counter 0021                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
   __size_of_ADC_GetConversionResult 0014                                _Delay 34E6  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                       ___lltoft@exp 0027                 _EUSART1_Transmit_ISR 36AA  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     __end_of_TMR1_ISR 357E  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 002E                      __end_of_dpowers 0629  
                              _frexp 312C                                _errno 0096  
                              _scale 1408                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001B                                _putch 387E  
                              main@i 00EF                                main@x 00ED  
                     SetBypass@state 0019                       ?_EUSART1_Write 0001  
            __end_of_TMR1_Initialize 37D4                          _Battery_Adc 007E  
                              tablat 000FF5                          _Battery_Get 3678  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                    RunBypas@cellbyp 00AC                      RunBypas@batvolt 00AE  
                     __CFG_PBADEN$ON 000000                      __initialization 370A  
                        log@exponent 00DB           __end_of_EUSART1_Initialize 363E  
                       __end_of_main 29A4                     __end_of_Set_4051 3766  
                          ??_ADC_ISR 0005          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 0034                        ___fttol@sign1 00C8  
                      __activetblptr 000002           ADC_StartConversion@channel 0002  
               __size_of__tdiv_to_l_ 0132                               ?_Delay 0017  
              ?_EUSART1_Transmit_ISR 0001                     __end_of_RunBypas 2E70  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               ?_frexp 0017  
                   ___llmod@dividend 0024                               ?_scale 00B8  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                   ___awdiv@dividend 001D                     __end_of___awtoft 35C6  
                             _ANSELA 000F38                               ?_putch 0001  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                   __end_of___ftpack 3088                               _T1GCON 000FCC  
                             _RC1REG 000FAE                               _RC1STA 000FAB  
                   __end_of___lltoft 3498                __size_of_Battery_Read 0018  
                             i2l2202 36D2                       __CFG_WDTEN$OFF 000000  
                             i2l3720 0F94                               i2l3810 12F4  
                             i2l3802 12A0                               i2l3714 0F5E  
                             i2l3706 3706                               i2l3732 1000  
                             i2l3822 1372                               i2l3814 131E  
                             i2l3806 12CA                               i2l3830 13AE  
                             i2l3750 10A2                               i2l3726 0FCA  
                             i2l3832 1402                               i2l3744 106C  
                             i2l3826 139C                               i2l3818 1348  
                             i2l3762 110E                               i2l3738 1036  
                             i2l3666 3562                               i2l3756 10D8  
                             i2l3780 11E0                               i2l3790 1222  
                             i2l3774 117A                               i2l3782 11E4  
                             i2l3768 1144                               i2l3794 124C  
                             i2l3786 11F8                               i2l3778 118C  
                             i2l3698 36E2                               i2l3798 1276  
                             _RCREG1 000FAE                        ??_Temp_Filter 0032  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1REG 000FAD                               _TX1STA 000FAC  
                             _TXREG1 000FAD                           _Temp_Fault 3360  
                     __CFG_XINST$OFF 000000                     __end_of__powers_ 0677  
                             ___ftge 324E              __end_of_TMR1_StartTimer 388C  
                 __size_of_SetBypass 00F2                               ___wmul 378C  
                          ??___awdiv 0021                            ??___ftadd 00C8  
                     __CFG_STVREN$ON 000000                            ??___awmod 001B  
                          ??___ftdiv 0025                            ??___ftneg 001A  
                          ??___lldiv 001F                            ??___ftmul 002F  
                          ??___llmod 002C                            ??___ftsub 0032  
                          ??___fttol 00C3                               _fround 187E  
                             clear_0 3710                               clear_1 371C  
                             clear_2 3728                     ___awdiv@quotient 0023  
                 __size_of_Temp_Read 0018                      ___awmod@divisor 0019  
                    ___awmod@counter 001B                               _printf 06B8  
              ___ftmul@f3_as_product 00B3                         _Battery_Read 3838  
                       _Battery_Volt 0060                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                      ??_EUSART1_Write 0017  
                    _eusart1RxBuffer 0100        __size_of_INTERRUPT_Initialize 000C  
                    _eusart1TxBuffer 0034                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 37D4                     __end_oflog@coeff 0692  
                         __accesstop 0060              __end_of__initialization 372E  
                         ___ftadd@f1 00C2                           ___ftadd@f2 00C5  
                         ___ftge@ff1 002B                           ___ftge@ff2 002E  
                 ?_SYSTEM_Initialize 0001                         eval_poly@res 00D5  
                         ___ftdiv@f1 001F                           ___ftdiv@f2 0022  
                         ___ftdiv@f3 0029                           ___ftneg@f1 0017  
                         ___awtoft@c 002B                        __end_of_Delay 3534  
                         ___ftmul@f1 00AC                           ___ftmul@f2 00AF  
                         ___ftsub@f1 00CE                           ___ftsub@f2 00D1  
                __end_of_Temp_Filter 2294                           ___fttol@f1 00BF  
       __size_of_ADC_StartConversion 001A                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0017                            ?_TMR1_ISR 0001  
                         ___lltoft@c 001F                        __end_of_frexp 31BE  
                      __end_of_scale 187E                        __end_of_putch 3888  
              Battery_Get@channelnum 002B               ??_EUSART1_Transmit_ISR 0001  
            _ADC_GetConversionResult 3850                           __div_to_l_ 26E4  
                   ??_Battery_Filter 0032                              ??_Delay 001B  
        __end_of_EUSART1_Receive_ISR 370A                        ?_Temp_Convert 0001  
                    __div_to_l_@exp1 0026                      __div_to_l_@cntr 0025  
                            ??_frexp 001C                              ??_scale 0032  
          __end_of_SYSTEM_Initialize 37EE                    __end_of_SetBypass 2BC8  
                    __div_to_l_@quot 0021                              ??_putch 0018  
                      _eusart1RxHead 0043                        _eusart1TxHead 0045  
                      _eusart1RxTail 0044                           __pbssBANK0 0060  
                         __pbssBANK1 0100                        _eusart1TxTail 0046  
                 __size_of_eval_poly 00EA                      __CFG_PLLCFG$OFF 000000  
                  __end_of_Temp_Read 3838                            ?_Set_4051 0001  
                         __pnvCOMRAM 0047                Temp_Convert@steinhart 00E5  
                        ?_Temp_Fault 0001                        __div_to_l_@f1 0017  
                      __div_to_l_@f2 001A                   __CFG_CCP2MX$PORTC1 000000  
                        Temp_Fault@i 00AD                              ?___ftge 002B  
                          ?_RunBypas 0001                              ?___wmul 0025  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0003  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 0F40  
                            ?_fround 00B8                            ?___awtoft 002B  
                          ?___ftpack 0017                              ?_printf 00D4  
                          ?___lltoft 001F              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 00E3               __size_of_Battery_Fault 00BA  
                    Temp_Fault@fault 00AC                       Battery_Fault@i 00AD  
                            _OSCCON2 000FD2                       ??_Temp_Convert 00DD  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                         ?_Battery_Get 002B  
                         ??_Set_4051 0003                          _Temp_Filter 211C  
                        _Temp_Aquire 0040                      __CFG_PWRTEN$OFF 000000  
                  __end_of__npowers_ 0650                              __Hparam 0000  
                         _scale$1704 00BB                              __Lparam 0000  
                         ??_RunBypas 0034                      __size_of___ftge 0090  
                            ___awdiv 3088                              ___ftadd 1B18  
                            ___awmod 31BE                              ___ftdiv 2CB2  
                            ___ftneg 3766                              ___lldiv 32DE  
                    __size_of___wmul 0026                              ___ftmul 257A  
                            ___llmod 33D6                              ___ftsub 35C6  
                            ___fttol 1FA0                         __psmallconst 0600  
          ??_ADC_GetConversionResult 0003                              __pcinit 370A  
                         ??___awtoft 002E                           ??___ftpack 001C  
                  __end_of_eval_poly 2CB2                      __size_of_fround 029A  
                            __ramtop 0600                           ??___lltoft 0023  
                            __ptext0 284C                              __ptext1 06B8  
                            __ptext2 1408                              __ptext3 387E  
                            __ptext4 363E                              __ptext5 187E  
                            __ptext6 31BE                              __ptext7 29A4  
                            __ptext8 26E4                              __ptext9 343C  
                    __size_of_printf 0888                            _T1CONbits 000FCD  
                        ?__div_to_l_ 0017                              _dpowers 0601  
              _OSCILLATOR_Initialize 3864                         __size_of_log 016E  
                   ___awmod@dividend 0017                  __size_of_Temp_Fault 0076  
                 _EUSART1_Initialize 3602             ??_PIN_MANAGER_Initialize 0017  
           __size_of_Battery_Convert 00B6           __size_of_SYSTEM_Initialize 001A  
               end_of_initialization 372E                            Delay@wait 001C  
                ?_EUSART1_Initialize 0001                        __Lmediumconst 0000  
                      _Battery_Fault 2E70                      ___lldiv@divisor 001B  
                    ___lldiv@counter 0023                              printf@c 01EA  
                            printf@f 00D4                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                   Battery_Convert@x 00D0                       __tdiv_to_l_@f1 0017  
                     __tdiv_to_l_@f2 001A                 ??_EUSART1_Initialize 0017  
                      ??__tdiv_to_l_ 001D                  _ADC_StartConversion 37EE  
                EUSART1_Write@txData 0017                          _Volt_Aquire 0041  
                     ?_Battery_Fault 0001                          printf@integ 01DB  
                        ___ftdiv@exp 002C                         SetBypass@pin 0017  
                __size_of__div_to_l_ 0168                         Delay@d_lenth 0017  
                        ___ftmul@exp 00B2                 ?_ADC_StartConversion 0001  
               __end_of_Temp_Convert 1FA0         __end_of_INTERRUPT_Initialize 387E  
                     __end_of___ftge 32DE                       __end_of___wmul 37B2  
                  __size_of_TMR1_ISR 004A                       _ADC_Initialize 3808  
             ?_OSCILLATOR_Initialize 0001                       __end_of_fround 1B18  
                     __end_of_printf 0F40                  start_initialization 370A  
                         eval_poly@d 00D1                           eval_poly@n 00D3  
                         eval_poly@x 00CE      __size_of_PIN_MANAGER_Initialize 004E  
                __end_of__tdiv_to_l_ 2AD6                          __end_of_log 257A  
                        putch@txData 0018                __end_of_EUSART1_Write 3678  
                         frexp@value 0017                    ??_Battery_Convert 00CE  
                          _SetBypass 2AD6                      ___llmod@divisor 0028  
               __size_of_Battery_Get 0032                      ___llmod@counter 002C  
                       ??_Temp_Fault 0034                    __size_of_Set_4051 002E  
                          _Temp_DegF 016E                     _PrevBattery_Volt 0132  
                          _Temp_Done 0092                            _Temp_Read 3820  
              ??_ADC_StartConversion 0001             __size_of_TMR1_Initialize 0022  
                           ??___ftge 0031                             ??___wmul 0029  
             __end_of_ADC_Initialize 3820                            RunBypas@i 00B1  
                           ?_ADC_ISR 0001                             ??_fround 0032  
                  __size_of_RunBypas 00DC                             ??_printf 00DB  
                     _eusart1RxCount 0042                           fround@prec 00C1  
                  __size_of___awtoft 0048                    __size_of___ftpack 00A8  
                          _Volt_Done 0094                TMR1_ISR@CountCallBack 003C  
                  __size_of___lltoft 005C                          __pbssCOMRAM 0034  
      __size_of_EUSART1_Transmit_ISR 0030                        __pcstackBANK0 00AC  
                      __pcstackBANK1 01C8                   __end_of_Temp_Fault 33D6  
                __end_of__stringdata 06B6                        _PrevTemp_DegF 0150  
                    ??_Battery_Fault 0034         __size_of_EUSART1_Receive_ISR 0030  
                       ?_Temp_Filter 0001                           ?_SetBypass 0017  
                         ?_Temp_Read 0001               _PIN_MANAGER_Initialize 3498  
                          __pintcode 0008                    _Temp_Convert$1700 00DF  
                  _Temp_Convert$1701 00E1                             ?___awdiv 001D  
                           ?___ftadd 00C2                             ?___awmod 0017  
                           ?___ftdiv 001F                             ?___ftneg 0017  
                           ?___lldiv 0017                             ?___ftmul 00AC  
                           ?___llmod 0024                             ?___ftsub 00CE  
                          __npowers_ 0629                             ?___fttol 00BF  
                       Temp_Filter@x 0032                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 0009                          __tdiv_to_l_ 29A4  
                       ??__div_to_l_ 001D                             _BAUD1CON 000FB8  
                        __smallconst 0600             __size_of_TMR1_StartTimer 0004  
                          _eval_poly 2BC8                       __size_of_Delay 004E  
                     __size_of_frexp 0092                       __size_of_scale 0476  
                     __size_of_putch 000A                 _INTERRUPT_Initialize 3872  
            __size_of_Battery_Filter 0178                       ___wmul@product 0029  
              __size_of_Temp_Convert 0208                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A0  
                           _PIR1bits 000F9E                   __end_of__div_to_l_ 284C  
                    Battery_Filter@x 0032                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 3534  
                  ??_TMR1_Initialize 0017                     __size_of_ADC_ISR 04C8  
                         _ADCON0bits 000FC2                          __stringdata 0692  
                  ___wmul@multiplier 0025                            main@i_984 00F1  
                          main@x_979 00F3                           printf@_val 01E0  
                         printf@flag 01D9                           printf@fval 01E7  
                         printf@prec 01DE                        ?_Battery_Read 0001  
                         ?_eval_poly 00CE                         _Temp_Convert 1D98  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                           _Set_4051 3738                          ??_SetBypass 001B  
                          frexp@eptr 001A                             __Hrparam 0000  
                        ??_Temp_Read 0003                             _Temp_Adc 0098  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                 __CFG_BOREN$SBORDIS 000000                             _RunBypas 2D94  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0017  
                   __size_of___awdiv 00A4                     __size_of___ftadd 0280  
                   __size_of___awmod 0090                     __size_of___ftdiv 00E2  
                   __size_of___ftneg 0026                     __size_of___lldiv 0082  
                   __size_of___ftmul 016A                     __size_of___llmod 0066  
                   __size_of___ftsub 003C                     __size_of___fttol 017C  
        __size_of_EUSART1_Initialize 003C                             ___awtoft 357E  
                           ___ftpack 2FE0                          _fround$1702 00BE  
                        _fround$1703 00BB                             ___lltoft 343C  
                     ??_Battery_Read 0003                      _Battery_Convert 2F2A  
                 Battery_Fault@fault 00AC                             __ptext10 33D6  
                           __ptext11 32DE                             __ptext20 2CB2  
                           __ptext12 1FA0                             __ptext21 211C  
                           __ptext13 3766                           _T1GCONbits 000FCC  
                           __ptext30 2D94                             __ptext22 37D4  
                           __ptext14 3360                             __ptext31 2AD6  
                           __ptext23 37B2                             __ptext15 1D98  
                           __ptext40 378C                             __ptext32 3678  
                           __ptext24 3888                             __ptext16 240C  
                           __ptext41 257A                             __ptext33 34E6  
                           __ptext25 3498                             __ptext17 312C  
                           __ptext50 0F40                             __ptext42 1B18  
                           __ptext34 2E70                             __ptext26 3864  
                           __ptext18 2BC8                             __ptext51 3738  
                           __ptext43 2FE0                             __ptext35 324E  
                           __ptext27 3872                             __ptext19 35C6  
                           __ptext52 37EE                             __ptext36 2F2A  
                           __ptext28 3602                             __ptext53 3850  
                           __ptext45 3534                             __ptext37 357E  
                           __ptext29 3808                             __ptext46 3820  
                           __ptext38 3088                             __ptext47 3838  
                           __ptext39 2294                             __ptext48 36AA  
                           __ptext49 36DA                             __powers_ 0650  
                  ??_TMR1_StartTimer 0017                        __size_of_main 0158  
                       _TmpTemp_DegF 01AA                 __size_of_Temp_Filter 0178  
                         _RC1STAbits 000FAB   __end_of_INTERRUPT_InterruptManager 00A8  
         _INTERRUPT_InterruptManager 0008                             main@argc 00E8  
                          printf@exp 01E5                             main@argv 00EA  
                _EUSART1_Receive_ISR 36DA                             log@coeff 0677  
                         _INTCONbits 000FF2                          ??_eval_poly 0032  
             ??_INTERRUPT_Initialize 0017                             scale@scl 00BE  
                      ??_Battery_Get 002E                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0025                     __tdiv_to_l_@cntr 0024  
                     _Battery_Filter 2294                     __tdiv_to_l_@quot 0020  
               ?_EUSART1_Receive_ISR 0001          __end_of_ADC_StartConversion 3808  
                   _TempBattery_Volt 018C                     ___lldiv@dividend 0017  
            ?_PIN_MANAGER_Initialize 0001      __end_of_ADC_GetConversionResult 3864  
       __end_of_EUSART1_Transmit_ISR 36DA                     ??_ADC_Initialize 0017  
                           printf@ap 01D7                             printf@vd 01CF  
            __end_of_Battery_Convert 2FE0               __size_of_EUSART1_Write 003A  
                       ?__tdiv_to_l_ 0017                          _printf$1058 01CB  
                        _printf$1705 01C8                     ___lldiv@quotient 001F  
                  __CFG_T3CMX$PORTC0 000000               __end_of_Battery_Filter 240C  
              ??_EUSART1_Receive_ISR 0001       __end_of_PIN_MANAGER_Initialize 34E6  
              __end_of_Battery_Fault 2F2A                    __CFG_FOSC$INTIO67 000000  
               __end_of_Battery_Read 3850                      _TMR1_Initialize 37B2  
                   _ADC_Buffer_Point 003E                  __end_of_Battery_Get 36AA  
                    Set_4051@Channel 0001  
