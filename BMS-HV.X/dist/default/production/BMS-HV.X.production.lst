

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Mar 25 23:54:28 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    34  0000                     _TMR1	set	4046
    35  0000                     _ADCON0	set	4034
    36  0000                     _ADCON0bits	set	4034
    37  0000                     _ADCON1	set	4033
    38  0000                     _ADCON2	set	4032
    39  0000                     _ADRESH	set	4036
    40  0000                     _ADRESL	set	4035
    41  0000                     _ANSELA	set	3896
    42  0000                     _ANSELB	set	3897
    43  0000                     _ANSELC	set	3898
    44  0000                     _ANSELD	set	3899
    45  0000                     _ANSELE	set	3900
    46  0000                     _BAUD1CON	set	4024
    47  0000                     _INTCON2bits	set	4081
    48  0000                     _INTCONbits	set	4082
    49  0000                     _IPR1bits	set	3999
    50  0000                     _LATA	set	3977
    51  0000                     _LATB	set	3978
    52  0000                     _LATC	set	3979
    53  0000                     _LATD	set	3980
    54  0000                     _LATE	set	3981
    55  0000                     _OSCCON	set	4051
    56  0000                     _OSCCON2	set	4050
    57  0000                     _OSCTUNE	set	3995
    58  0000                     _PIE1bits	set	3997
    59  0000                     _PIR1bits	set	3998
    60  0000                     _RC1REG	set	4014
    61  0000                     _RC1STA	set	4011
    62  0000                     _RC1STAbits	set	4011
    63  0000                     _RCONbits	set	4048
    64  0000                     _RCREG1	set	4014
    65  0000                     _SPBRG1	set	4015
    66  0000                     _SPBRGH1	set	4016
    67  0000                     _T1CON	set	4045
    68  0000                     _T1CONbits	set	4045
    69  0000                     _T1GCON	set	4044
    70  0000                     _T1GCONbits	set	4044
    71  0000                     _TMR1H	set	4047
    72  0000                     _TMR1L	set	4046
    73  0000                     _TRISA	set	3986
    74  0000                     _TRISB	set	3987
    75  0000                     _TRISC	set	3988
    76  0000                     _TRISD	set	3989
    77  0000                     _TRISE	set	3990
    78  0000                     _TX1REG	set	4013
    79  0000                     _TX1STA	set	4012
    80  0000                     _TXREG1	set	4013
    81  0000                     _WPUB	set	3937
    82  0000                     _LATA6	set	31822
    83  0000                     _LATC0	set	31832
    84  0000                     _LATC1	set	31833
    85                           
    86                           	psect	nvCOMRAM
    87  000046                     __pnvCOMRAM:
    88                           	opt stack 0
    89  000046                     _timer1ReloadVal:
    90                           	opt stack 0
    91  000046                     	ds	2
    92  000048                     _eusart1TxBufferRemaining:
    93                           	opt stack 0
    94  000048                     	ds	1
    95                           
    96                           ; #config settings
    97  0000                     
    98                           	psect	cinit
    99  00082C                     __pcinit:
   100                           	opt stack 0
   101  00082C                     start_initialization:
   102                           	opt stack 0
   103  00082C                     __initialization:
   104                           	opt stack 0
   105                           
   106                           ; Clear objects allocated to BANK0 (88 bytes)
   107  00082C  EE00  F060         	lfsr	0,__pbssBANK0
   108  000830  0E58               	movlw	88
   109  000832                     clear_0:
   110  000832  6AEE               	clrf	postinc0,c
   111  000834  06E8               	decf	wreg,f,c
   112  000836  E1FD               	bnz	clear_0
   113                           
   114                           ; Clear objects allocated to COMRAM (41 bytes)
   115  000838  EE00  F001         	lfsr	0,__pbssCOMRAM
   116  00083C  0E29               	movlw	41
   117  00083E                     clear_1:
   118  00083E  6AEE               	clrf	postinc0,c
   119  000840  06E8               	decf	wreg,f,c
   120  000842  E1FD               	bnz	clear_1
   121  000844                     end_of_initialization:
   122                           	opt stack 0
   123  000844                     __end_of__initialization:
   124                           	opt stack 0
   125  000844  0E00               	movlw	low (__Lmediumconst shr (0+16))
   126  000846  6EF8               	movwf	tblptru,c
   127  000848  0100               	movlb	0
   128  00084A  EF38  F004         	goto	_main	;jump to C main() function
   129                           tblptru	equ	0xFF8
   130                           postinc0	equ	0xFEE
   131                           wreg	equ	0xFE8
   132                           
   133                           	psect	bssCOMRAM
   134  000001                     __pbssCOMRAM:
   135                           	opt stack 0
   136  000001                     _Temp_Adc:
   137                           	opt stack 0
   138  000001                     	ds	20
   139  000015                     _eusart1TxBuffer:
   140                           	opt stack 0
   141  000015                     	ds	8
   142  00001D                     _ADC_Buffer_Point:
   143                           	opt stack 0
   144  00001D                     	ds	2
   145  00001F                     _Temp_Done:
   146                           	opt stack 0
   147  00001F                     	ds	2
   148  000021                     _Volt_Done:
   149                           	opt stack 0
   150  000021                     	ds	2
   151  000023                     _Temp_Aquire:
   152                           	opt stack 0
   153  000023                     	ds	1
   154  000024                     _Volt_Aquire:
   155                           	opt stack 0
   156  000024                     	ds	1
   157  000025                     _eusart1RxCount:
   158                           	opt stack 0
   159  000025                     	ds	1
   160  000026                     _eusart1RxHead:
   161                           	opt stack 0
   162  000026                     	ds	1
   163  000027                     _eusart1RxTail:
   164                           	opt stack 0
   165  000027                     	ds	1
   166  000028                     _eusart1TxHead:
   167                           	opt stack 0
   168  000028                     	ds	1
   169  000029                     _eusart1TxTail:
   170                           	opt stack 0
   171  000029                     	ds	1
   172                           tblptru	equ	0xFF8
   173                           postinc0	equ	0xFEE
   174                           wreg	equ	0xFE8
   175                           
   176                           	psect	bssBANK0
   177  000060                     __pbssBANK0:
   178                           	opt stack 0
   179  000060                     _Battery_Volt:
   180                           	opt stack 0
   181  000060                     	ds	30
   182  00007E                     _Temp_DegF:
   183                           	opt stack 0
   184  00007E                     	ds	30
   185  00009C                     _Battery_Adc:
   186                           	opt stack 0
   187  00009C                     	ds	20
   188  0000B0                     _eusart1RxBuffer:
   189                           	opt stack 0
   190  0000B0                     	ds	8
   191                           tblptru	equ	0xFF8
   192                           postinc0	equ	0xFEE
   193                           wreg	equ	0xFE8
   194                           
   195                           	psect	cstackBANK0
   196  0000B8                     __pcstackBANK0:
   197                           	opt stack 0
   198  0000B8                     ___ftge@ff1:
   199                           	opt stack 0
   200                           
   201                           ; 3 bytes @ 0x0
   202  0000B8                     	ds	3
   203  0000BB                     ___ftge@ff2:
   204                           	opt stack 0
   205                           
   206                           ; 3 bytes @ 0x3
   207  0000BB                     	ds	3
   208  0000BE                     ??___ftge:
   209                           
   210                           ; 0 bytes @ 0x6
   211  0000BE                     	ds	3
   212  0000C1                     Battery_Fault@fault:
   213                           	opt stack 0
   214  0000C1                     Temp_Fault@fault:
   215                           	opt stack 0
   216                           
   217                           ; 1 bytes @ 0x9
   218  0000C1                     	ds	1
   219  0000C2                     Battery_Fault@i:
   220                           	opt stack 0
   221  0000C2                     Temp_Fault@i:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0xA
   225  0000C2                     	ds	2
   226  0000C4                     
   227                           ; 2 bytes @ 0xC
   228  0000C4                     	ds	2
   229  0000C6                     
   230                           ; 3 bytes @ 0xE
   231  0000C6                     	ds	3
   232                           tblptru	equ	0xFF8
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	cstackCOMRAM
   237  00002A                     __pcstackCOMRAM:
   238                           	opt stack 0
   239  00002A                     ??_TMR1_ISR:
   240  00002A                     ??_ADC_StartConversion:
   241  00002A                     ?_ADC_GetConversionResult:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x0
   245  00002A                     	ds	1
   246  00002B                     ADC_StartConversion@channel:
   247                           	opt stack 0
   248                           
   249                           ; 1 bytes @ 0x1
   250  00002B                     	ds	1
   251  00002C                     ??_ADC_GetConversionResult:
   252                           
   253                           ; 0 bytes @ 0x2
   254  00002C                     	ds	2
   255  00002E                     ??_ADC_ISR:
   256                           
   257                           ; 0 bytes @ 0x4
   258  00002E                     	ds	2
   259  000030                     ADC_ISR@ADC_Result:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x6
   263  000030                     	ds	2
   264  000032                     ??_INTERRUPT_InterruptManager:
   265                           
   266                           ; 0 bytes @ 0x8
   267  000032                     	ds	14
   268  000040                     ?___wmul:
   269                           	opt stack 0
   270  000040                     ___wmul@multiplier:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x16
   274  000040                     	ds	2
   275  000042                     ___wmul@multiplicand:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x18
   279  000042                     	ds	2
   280  000044                     ___wmul@product:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x1A
   284  000044                     	ds	2
   285  000046                     tblptru	equ	0xFF8
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           
   289                           ; 0 bytes @ 0x1C
   290 ;;
   291 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   292 ;;
   293 ;; *************** function _main *****************
   294 ;; Defined at:
   295 ;;		line 31 in file "Main.c"
   296 ;; Parameters:    Size  Location     Type
   297 ;;  argc            2   12[BANK0 ] int 
   298 ;;  argv            3   14[BANK0 ] PTR PTR unsigned char 
   299 ;; Auto vars:     Size  Location     Type
   300 ;;		None
   301 ;; Return value:  Size  Location     Type
   302 ;;                  2   12[BANK0 ] int 
   303 ;; Registers used:
   304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   305 ;; Tracked objects:
   306 ;;		On entry : 0/0
   307 ;;		On exit  : 0/0
   308 ;;		Unchanged: 0/0
   309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   310 ;;      Params:         0       5       0       0       0       0       0
   311 ;;      Locals:         0       0       0       0       0       0       0
   312 ;;      Temps:          0       0       0       0       0       0       0
   313 ;;      Totals:         0       5       0       0       0       0       0
   314 ;;Total ram usage:        5 bytes
   315 ;; Hardware stack levels required when called:    6
   316 ;; This function calls:
   317 ;;		_Battery_Fault
   318 ;;		_SYSTEM_Initialize
   319 ;;		_Temp_Fault
   320 ;; This function is called by:
   321 ;;		Startup code after reset
   322 ;; This function uses a non-reentrant model
   323 ;;
   324                           
   325                           	psect	text0
   326  000870                     __ptext0:
   327                           	opt stack 0
   328  000870                     _main:
   329                           	opt stack 25
   330                           
   331                           ;Main.c: 33: SYSTEM_Initialize();
   332                           
   333                           ;incstack = 0
   334  000870  EC48  F004         	call	_SYSTEM_Initialize	;wreg free
   335                           
   336                           ;Main.c: 52: (INTCONbits.GIE = 1);
   337  000874  8EF2               	bsf	intcon,7,c	;volatile
   338                           
   339                           ;Main.c: 55: (INTCONbits.PEIE = 1);
   340  000876  8CF2               	bsf	intcon,6,c	;volatile
   341  000878                     l1858:
   342                           
   343                           ;Main.c: 65: {
   344                           ;Main.c: 66: if (Temp_Done)
   345  000878  5020               	movf	_Temp_Done+1,w,c
   346  00087A  101F               	iorwf	_Temp_Done,w,c
   347  00087C  A4D8               	btfss	status,2,c
   348                           
   349                           ;Main.c: 67: {
   350                           ;Main.c: 68: Temp_Fault();
   351  00087E  EC4D  F003         	call	_Temp_Fault	;wreg free
   352                           
   353                           ;Main.c: 69: }
   354                           ;Main.c: 70: if (Volt_Done)
   355  000882  5022               	movf	_Volt_Done+1,w,c
   356  000884  1021               	iorwf	_Volt_Done,w,c
   357  000886  B4D8               	btfsc	status,2,c
   358  000888  D7F7               	goto	l1858
   359                           
   360                           ;Main.c: 71: {
   361                           ;Main.c: 72: Battery_Fault();
   362  00088A  ECE4  F002         	call	_Battery_Fault	;wreg free
   363  00088E  D7F4               	goto	l1858
   364  000890                     __end_of_main:
   365                           	opt stack 0
   366                           tblptru	equ	0xFF8
   367                           intcon	equ	0xFF2
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           status	equ	0xFD8
   371                           
   372 ;; *************** function _Temp_Fault *****************
   373 ;; Defined at:
   374 ;;		line 9 in file "Tempeture.c"
   375 ;; Parameters:    Size  Location     Type
   376 ;;		None
   377 ;; Auto vars:     Size  Location     Type
   378 ;;  i               2   10[BANK0 ] int 
   379 ;;  fault           1    9[BANK0 ] unsigned char 
   380 ;; Return value:  Size  Location     Type
   381 ;;                  1    wreg      unsigned char 
   382 ;; Registers used:
   383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   384 ;; Tracked objects:
   385 ;;		On entry : 0/0
   386 ;;		On exit  : 0/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   389 ;;      Params:         0       0       0       0       0       0       0
   390 ;;      Locals:         0       3       0       0       0       0       0
   391 ;;      Temps:          0       0       0       0       0       0       0
   392 ;;      Totals:         0       3       0       0       0       0       0
   393 ;;Total ram usage:        3 bytes
   394 ;; Hardware stack levels used:    1
   395 ;; Hardware stack levels required when called:    4
   396 ;; This function calls:
   397 ;;		___ftge
   398 ;;		___wmul
   399 ;; This function is called by:
   400 ;;		_main
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404                           	psect	text1
   405  00069A                     __ptext1:
   406                           	opt stack 0
   407  00069A                     _Temp_Fault:
   408                           	opt stack 26
   409                           
   410                           ;Tempeture.c: 12: char fault = 0;
   411                           
   412                           ;incstack = 0
   413  00069A  0E00               	movlw	0
   414  00069C  0100               	movlb	0	; () banked
   415  00069E  6FC1               	movwf	Temp_Fault@fault& (0+255),b
   416                           
   417                           ;Tempeture.c: 13: for(int i = 0;i<9;i++)
   418  0006A0  0E00               	movlw	0
   419  0006A2  0100               	movlb	0	; () banked
   420  0006A4  6FC3               	movwf	(Temp_Fault@i+1)& (0+255),b
   421  0006A6  0E00               	movlw	0
   422  0006A8  0100               	movlb	0	; () banked
   423  0006AA  6FC2               	movwf	Temp_Fault@i& (0+255),b
   424  0006AC                     
   425                           ; BSR set to: 0
   426  0006AC  0100               	movlb	0	; () banked
   427  0006AE  51C3               	movf	(Temp_Fault@i+1)& (0+255),w,b
   428  0006B0  0A80               	xorlw	128
   429  0006B2  0F80               	addlw	-128
   430  0006B4  0E09               	movlw	9
   431  0006B6  B4D8               	btfsc	status,2,c
   432  0006B8  5DC2               	subwf	Temp_Fault@i& (0+255),w,b
   433  0006BA  B0D8               	btfsc	status,0,c
   434  0006BC  0012               	return	
   435                           
   436                           ; BSR set to: 0
   437                           ;Tempeture.c: 14: {
   438                           ;Tempeture.c: 15: if (60.5 > Temp_DegF[i])
   439                           
   440                           ; BSR set to: 0
   441                           
   442                           ; BSR set to: 0
   443  0006BE  C0C2  F040         	movff	Temp_Fault@i,___wmul@multiplier
   444  0006C2  C0C3  F041         	movff	Temp_Fault@i+1,___wmul@multiplier+1
   445  0006C6  0E00               	movlw	0
   446  0006C8  6E43               	movwf	___wmul@multiplicand+1,c
   447  0006CA  0E03               	movlw	3
   448  0006CC  6E42               	movwf	___wmul@multiplicand,c
   449  0006CE  EC03  F004         	call	___wmul	;wreg free
   450  0006D2  0100               	movlb	0	; () banked
   451  0006D4  0E7E               	movlw	low _Temp_DegF
   452  0006D6  2440               	addwf	?___wmul,w,c
   453  0006D8  6ED9               	movwf	fsr2l,c
   454  0006DA  0100               	movlb	0	; () banked
   455  0006DC  0E00               	movlw	high _Temp_DegF
   456  0006DE  2041               	addwfc	?___wmul+1,w,c
   457  0006E0  6EDA               	movwf	fsr2h,c
   458  0006E2  0100               	movlb	0	; () banked
   459  0006E4  CFDE F0B8          	movff	postinc2,___ftge@ff1
   460  0006E8  0100               	movlb	0	; () banked
   461  0006EA  CFDE F0B9          	movff	postinc2,___ftge@ff1+1
   462  0006EE  0100               	movlb	0	; () banked
   463  0006F0  CFDD F0BA          	movff	postdec2,___ftge@ff1+2
   464  0006F4  0E00               	movlw	0
   465  0006F6  0100               	movlb	0	; () banked
   466  0006F8  6FBB               	movwf	___ftge@ff2& (0+255),b
   467  0006FA  0E72               	movlw	114
   468  0006FC  0100               	movlb	0	; () banked
   469  0006FE  6FBC               	movwf	(___ftge@ff2+1)& (0+255),b
   470  000700  0E42               	movlw	66
   471  000702  0100               	movlb	0	; () banked
   472  000704  6FBD               	movwf	(___ftge@ff2+2)& (0+255),b
   473  000706  EC7A  F002         	call	___ftge	;wreg free
   474  00070A  B0D8               	btfsc	status,0,c
   475  00070C  D003               	goto	l1840
   476                           
   477                           ;Tempeture.c: 16: {
   478                           ;Tempeture.c: 17: fault = 1;
   479  00070E  0E01               	movlw	1
   480  000710  0100               	movlb	0	; () banked
   481  000712  6FC1               	movwf	Temp_Fault@fault& (0+255),b
   482  000714                     l1840:
   483  000714  0100               	movlb	0	; () banked
   484  000716  4BC2               	infsnz	Temp_Fault@i& (0+255),f,b
   485  000718  2BC3               	incf	(Temp_Fault@i+1)& (0+255),f,b
   486  00071A  D7C8               	goto	L1
   487  00071C                     __end_of_Temp_Fault:
   488                           	opt stack 0
   489                           tblptru	equ	0xFF8
   490                           intcon	equ	0xFF2
   491                           postinc0	equ	0xFEE
   492                           wreg	equ	0xFE8
   493                           postinc2	equ	0xFDE
   494                           postdec2	equ	0xFDD
   495                           fsr2h	equ	0xFDA
   496                           fsr2l	equ	0xFD9
   497                           status	equ	0xFD8
   498                           
   499 ;; *************** function _SYSTEM_Initialize *****************
   500 ;; Defined at:
   501 ;;		line 112 in file "mcc_generated_files/mcc.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;		None
   506 ;; Return value:  Size  Location     Type
   507 ;;		None               void
   508 ;; Registers used:
   509 ;;		wreg, status,2, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   515 ;;      Params:         0       0       0       0       0       0       0
   516 ;;      Locals:         0       0       0       0       0       0       0
   517 ;;      Temps:          0       0       0       0       0       0       0
   518 ;;      Totals:         0       0       0       0       0       0       0
   519 ;;Total ram usage:        0 bytes
   520 ;; Hardware stack levels used:    1
   521 ;; Hardware stack levels required when called:    5
   522 ;; This function calls:
   523 ;;		_ADC_Initialize
   524 ;;		_EUSART1_Initialize
   525 ;;		_INTERRUPT_Initialize
   526 ;;		_OSCILLATOR_Initialize
   527 ;;		_PIN_MANAGER_Initialize
   528 ;;		_TMR1_Initialize
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           	psect	text2
   535  000890                     __ptext2:
   536                           	opt stack 0
   537  000890                     _SYSTEM_Initialize:
   538                           	opt stack 25
   539                           
   540                           ;mcc.c: 114: OSCILLATOR_Initialize();
   541                           
   542                           ; BSR set to: 0
   543                           ;incstack = 0
   544  000890  EC85  F004         	call	_OSCILLATOR_Initialize	;wreg free
   545                           
   546                           ;mcc.c: 115: PIN_MANAGER_Initialize();
   547  000894  EC8E  F003         	call	_PIN_MANAGER_Initialize	;wreg free
   548                           
   549                           ;mcc.c: 116: INTERRUPT_Initialize();
   550  000898  EC8C  F004         	call	_INTERRUPT_Initialize	;wreg free
   551                           
   552                           ;mcc.c: 117: ADC_Initialize();
   553  00089C  EC6F  F004         	call	_ADC_Initialize	;wreg free
   554                           
   555                           ;mcc.c: 118: EUSART1_Initialize();
   556  0008A0  ECB5  F003         	call	_EUSART1_Initialize	;wreg free
   557                           
   558                           ;mcc.c: 119: TMR1_Initialize();
   559  0008A4  EC27  F004         	call	_TMR1_Initialize	;wreg free
   560  0008A8  0012               	return	
   561  0008AA                     __end_of_SYSTEM_Initialize:
   562                           	opt stack 0
   563                           tblptru	equ	0xFF8
   564                           intcon	equ	0xFF2
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postinc2	equ	0xFDE
   568                           postdec2	equ	0xFDD
   569                           fsr2h	equ	0xFDA
   570                           fsr2l	equ	0xFD9
   571                           status	equ	0xFD8
   572                           
   573 ;; *************** function _TMR1_Initialize *****************
   574 ;; Defined at:
   575 ;;		line 63 in file "mcc_generated_files/tmr1.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;		None
   578 ;; Auto vars:     Size  Location     Type
   579 ;;		None
   580 ;; Return value:  Size  Location     Type
   581 ;;		None               void
   582 ;; Registers used:
   583 ;;		wreg, status,2, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   589 ;;      Params:         0       0       0       0       0       0       0
   590 ;;      Locals:         0       0       0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0       0       0
   592 ;;      Totals:         0       0       0       0       0       0       0
   593 ;;Total ram usage:        0 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; Hardware stack levels required when called:    4
   596 ;; This function calls:
   597 ;;		_TMR1_StartTimer
   598 ;; This function is called by:
   599 ;;		_SYSTEM_Initialize
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text3
   604  00084E                     __ptext3:
   605                           	opt stack 0
   606  00084E                     _TMR1_Initialize:
   607                           	opt stack 25
   608                           
   609                           ;tmr1.c: 68: T1CON = 0x00;
   610                           
   611                           ;incstack = 0
   612  00084E  0E00               	movlw	0
   613  000850  6ECD               	movwf	4045,c	;volatile
   614                           
   615                           ;tmr1.c: 71: T1GCON = 0x00;
   616  000852  0E00               	movlw	0
   617  000854  6ECC               	movwf	4044,c	;volatile
   618                           
   619                           ;tmr1.c: 74: TMR1H = 0xB1;
   620  000856  0EB1               	movlw	177
   621  000858  6ECF               	movwf	4047,c	;volatile
   622                           
   623                           ;tmr1.c: 77: TMR1L = 0xE0;
   624  00085A  0EE0               	movlw	224
   625  00085C  6ECE               	movwf	4046,c	;volatile
   626                           
   627                           ;tmr1.c: 80: timer1ReloadVal=TMR1;
   628  00085E  CFCE F046          	movff	4046,_timer1ReloadVal	;volatile
   629  000862  CFCF F047          	movff	4047,_timer1ReloadVal+1	;volatile
   630                           
   631                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
   632  000866  909E               	bcf	3998,0,c	;volatile
   633                           
   634                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
   635  000868  809D               	bsf	3997,0,c	;volatile
   636                           
   637                           ;tmr1.c: 89: TMR1_StartTimer();
   638  00086A  EC92  F004         	call	_TMR1_StartTimer	;wreg free
   639  00086E  0012               	return	
   640  000870                     __end_of_TMR1_Initialize:
   641                           	opt stack 0
   642                           tblptru	equ	0xFF8
   643                           intcon	equ	0xFF2
   644                           postinc0	equ	0xFEE
   645                           wreg	equ	0xFE8
   646                           postinc2	equ	0xFDE
   647                           postdec2	equ	0xFDD
   648                           fsr2h	equ	0xFDA
   649                           fsr2l	equ	0xFD9
   650                           status	equ	0xFD8
   651                           
   652 ;; *************** function _TMR1_StartTimer *****************
   653 ;; Defined at:
   654 ;;		line 92 in file "mcc_generated_files/tmr1.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;		None
   659 ;; Return value:  Size  Location     Type
   660 ;;		None               void
   661 ;; Registers used:
   662 ;;		None
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   668 ;;      Params:         0       0       0       0       0       0       0
   669 ;;      Locals:         0       0       0       0       0       0       0
   670 ;;      Temps:          0       0       0       0       0       0       0
   671 ;;      Totals:         0       0       0       0       0       0       0
   672 ;;Total ram usage:        0 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    3
   675 ;; This function calls:
   676 ;;		Nothing
   677 ;; This function is called by:
   678 ;;		_TMR1_Initialize
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text4
   683  000924                     __ptext4:
   684                           	opt stack 0
   685  000924                     _TMR1_StartTimer:
   686                           	opt stack 25
   687                           
   688                           ;tmr1.c: 95: T1CONbits.TMR1ON = 1;
   689                           
   690                           ;incstack = 0
   691  000924  80CD               	bsf	4045,0,c	;volatile
   692  000926  0012               	return	
   693  000928                     __end_of_TMR1_StartTimer:
   694                           	opt stack 0
   695                           tblptru	equ	0xFF8
   696                           intcon	equ	0xFF2
   697                           postinc0	equ	0xFEE
   698                           wreg	equ	0xFE8
   699                           postinc2	equ	0xFDE
   700                           postdec2	equ	0xFDD
   701                           fsr2h	equ	0xFDA
   702                           fsr2l	equ	0xFD9
   703                           status	equ	0xFD8
   704                           
   705 ;; *************** function _PIN_MANAGER_Initialize *****************
   706 ;; Defined at:
   707 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;		None
   710 ;; Auto vars:     Size  Location     Type
   711 ;;		None
   712 ;; Return value:  Size  Location     Type
   713 ;;		None               void
   714 ;; Registers used:
   715 ;;		wreg, status,2
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   721 ;;      Params:         0       0       0       0       0       0       0
   722 ;;      Locals:         0       0       0       0       0       0       0
   723 ;;      Temps:          0       0       0       0       0       0       0
   724 ;;      Totals:         0       0       0       0       0       0       0
   725 ;;Total ram usage:        0 bytes
   726 ;; Hardware stack levels used:    1
   727 ;; Hardware stack levels required when called:    3
   728 ;; This function calls:
   729 ;;		Nothing
   730 ;; This function is called by:
   731 ;;		_SYSTEM_Initialize
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           	psect	text5
   736  00071C                     __ptext5:
   737                           	opt stack 0
   738  00071C                     _PIN_MANAGER_Initialize:
   739                           	opt stack 26
   740                           
   741                           ;pin_manager.c: 52: LATA = 0x00;
   742                           
   743                           ;incstack = 0
   744  00071C  0E00               	movlw	0
   745  00071E  6E89               	movwf	3977,c	;volatile
   746                           
   747                           ;pin_manager.c: 53: TRISA = 0xAE;
   748  000720  0EAE               	movlw	174
   749  000722  6E92               	movwf	3986,c	;volatile
   750                           
   751                           ;pin_manager.c: 54: ANSELA = 0x2E;
   752  000724  0E2E               	movlw	46
   753  000726  010F               	movlb	15	; () banked
   754  000728  6F38               	movwf	56,b	;volatile
   755                           
   756                           ;pin_manager.c: 56: LATB = 0x00;
   757  00072A  0E00               	movlw	0
   758  00072C  6E8A               	movwf	3978,c	;volatile
   759                           
   760                           ;pin_manager.c: 57: TRISB = 0xF4;
   761  00072E  0EF4               	movlw	244
   762  000730  6E93               	movwf	3987,c	;volatile
   763                           
   764                           ;pin_manager.c: 58: ANSELB = 0x34;
   765  000732  0E34               	movlw	52
   766  000734  010F               	movlb	15	; () banked
   767  000736  6F39               	movwf	57,b	;volatile
   768                           
   769                           ;pin_manager.c: 59: WPUB = 0x00;
   770  000738  0E00               	movlw	0
   771  00073A  6E61               	movwf	3937,c	;volatile
   772                           
   773                           ;pin_manager.c: 61: LATC = 0x08;
   774  00073C  0E08               	movlw	8
   775  00073E  6E8B               	movwf	3979,c	;volatile
   776                           
   777                           ;pin_manager.c: 62: TRISC = 0xC4;
   778  000740  0EC4               	movlw	196
   779  000742  6E94               	movwf	3988,c	;volatile
   780                           
   781                           ;pin_manager.c: 63: ANSELC = 0x04;
   782  000744  0E04               	movlw	4
   783  000746  010F               	movlb	15	; () banked
   784  000748  6F3A               	movwf	58,b	;volatile
   785                           
   786                           ;pin_manager.c: 65: LATD = 0x00;
   787  00074A  0E00               	movlw	0
   788  00074C  6E8C               	movwf	3980,c	;volatile
   789                           
   790                           ;pin_manager.c: 66: TRISD = 0xD1;
   791  00074E  0ED1               	movlw	209
   792  000750  6E95               	movwf	3989,c	;volatile
   793                           
   794                           ;pin_manager.c: 67: ANSELD = 0xD1;
   795  000752  0ED1               	movlw	209
   796  000754  010F               	movlb	15	; () banked
   797  000756  6F3B               	movwf	59,b	;volatile
   798                           
   799                           ;pin_manager.c: 69: LATE = 0x00;
   800  000758  0E00               	movlw	0
   801  00075A  6E8D               	movwf	3981,c	;volatile
   802                           
   803                           ;pin_manager.c: 70: TRISE = 0x05;
   804  00075C  0E05               	movlw	5
   805  00075E  6E96               	movwf	3990,c	;volatile
   806                           
   807                           ;pin_manager.c: 71: ANSELE = 0x05;
   808  000760  0E05               	movlw	5
   809  000762  010F               	movlb	15	; () banked
   810  000764  6F3C               	movwf	60,b	;volatile
   811                           
   812                           ; BSR set to: 15
   813                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
   814  000766  8EF1               	bsf	intcon2,7,c	;volatile
   815                           
   816                           ; BSR set to: 15
   817  000768  0012               	return	
   818  00076A                     __end_of_PIN_MANAGER_Initialize:
   819                           	opt stack 0
   820                           tblptru	equ	0xFF8
   821                           intcon	equ	0xFF2
   822                           intcon2	equ	0xFF1
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           postinc2	equ	0xFDE
   826                           postdec2	equ	0xFDD
   827                           fsr2h	equ	0xFDA
   828                           fsr2l	equ	0xFD9
   829                           status	equ	0xFD8
   830                           
   831 ;; *************** function _OSCILLATOR_Initialize *****************
   832 ;; Defined at:
   833 ;;		line 122 in file "mcc_generated_files/mcc.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;		None
   838 ;; Return value:  Size  Location     Type
   839 ;;		None               void
   840 ;; Registers used:
   841 ;;		wreg, status,2
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   847 ;;      Params:         0       0       0       0       0       0       0
   848 ;;      Locals:         0       0       0       0       0       0       0
   849 ;;      Temps:          0       0       0       0       0       0       0
   850 ;;      Totals:         0       0       0       0       0       0       0
   851 ;;Total ram usage:        0 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    3
   854 ;; This function calls:
   855 ;;		Nothing
   856 ;; This function is called by:
   857 ;;		_SYSTEM_Initialize
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text6
   862  00090A                     __ptext6:
   863                           	opt stack 0
   864  00090A                     _OSCILLATOR_Initialize:
   865                           	opt stack 26
   866                           
   867                           ;mcc.c: 125: OSCCON = 0x62;
   868                           
   869                           ; BSR set to: 15
   870                           ;incstack = 0
   871  00090A  0E62               	movlw	98
   872  00090C  6ED3               	movwf	4051,c	;volatile
   873                           
   874                           ;mcc.c: 127: OSCCON2 = 0x04;
   875  00090E  0E04               	movlw	4
   876  000910  6ED2               	movwf	4050,c	;volatile
   877                           
   878                           ;mcc.c: 129: OSCTUNE = 0x00;
   879  000912  0E00               	movlw	0
   880  000914  6E9B               	movwf	3995,c	;volatile
   881  000916  0012               	return	
   882  000918                     __end_of_OSCILLATOR_Initialize:
   883                           	opt stack 0
   884                           tblptru	equ	0xFF8
   885                           intcon	equ	0xFF2
   886                           intcon2	equ	0xFF1
   887                           postinc0	equ	0xFEE
   888                           wreg	equ	0xFE8
   889                           postinc2	equ	0xFDE
   890                           postdec2	equ	0xFDD
   891                           fsr2h	equ	0xFDA
   892                           fsr2l	equ	0xFD9
   893                           status	equ	0xFD8
   894                           
   895 ;; *************** function _INTERRUPT_Initialize *****************
   896 ;; Defined at:
   897 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;		None               void
   904 ;; Registers used:
   905 ;;		None
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   911 ;;      Params:         0       0       0       0       0       0       0
   912 ;;      Locals:         0       0       0       0       0       0       0
   913 ;;      Temps:          0       0       0       0       0       0       0
   914 ;;      Totals:         0       0       0       0       0       0       0
   915 ;;Total ram usage:        0 bytes
   916 ;; Hardware stack levels used:    1
   917 ;; Hardware stack levels required when called:    3
   918 ;; This function calls:
   919 ;;		Nothing
   920 ;; This function is called by:
   921 ;;		_SYSTEM_Initialize
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           	psect	text7
   926  000918                     __ptext7:
   927                           	opt stack 0
   928  000918                     _INTERRUPT_Initialize:
   929                           	opt stack 26
   930                           
   931                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
   932                           
   933                           ;incstack = 0
   934  000918  9ED0               	bcf	4048,7,c	;volatile
   935                           
   936                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
   937  00091A  9A9F               	bcf	3999,5,c	;volatile
   938                           
   939                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
   940  00091C  9C9F               	bcf	3999,6,c	;volatile
   941                           
   942                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
   943  00091E  909F               	bcf	3999,0,c	;volatile
   944                           
   945                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
   946  000920  989F               	bcf	3999,4,c	;volatile
   947  000922  0012               	return	
   948  000924                     __end_of_INTERRUPT_Initialize:
   949                           	opt stack 0
   950                           tblptru	equ	0xFF8
   951                           intcon	equ	0xFF2
   952                           intcon2	equ	0xFF1
   953                           postinc0	equ	0xFEE
   954                           wreg	equ	0xFE8
   955                           postinc2	equ	0xFDE
   956                           postdec2	equ	0xFDD
   957                           fsr2h	equ	0xFDA
   958                           fsr2l	equ	0xFD9
   959                           status	equ	0xFD8
   960                           
   961 ;; *************** function _EUSART1_Initialize *****************
   962 ;; Defined at:
   963 ;;		line 76 in file "mcc_generated_files/eusart1.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;		None
   966 ;; Auto vars:     Size  Location     Type
   967 ;;		None
   968 ;; Return value:  Size  Location     Type
   969 ;;		None               void
   970 ;; Registers used:
   971 ;;		wreg, status,2
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   977 ;;      Params:         0       0       0       0       0       0       0
   978 ;;      Locals:         0       0       0       0       0       0       0
   979 ;;      Temps:          0       0       0       0       0       0       0
   980 ;;      Totals:         0       0       0       0       0       0       0
   981 ;;Total ram usage:        0 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; Hardware stack levels required when called:    3
   984 ;; This function calls:
   985 ;;		Nothing
   986 ;; This function is called by:
   987 ;;		_SYSTEM_Initialize
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text8
   992  00076A                     __ptext8:
   993                           	opt stack 0
   994  00076A                     _EUSART1_Initialize:
   995                           	opt stack 26
   996                           
   997                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
   998                           
   999                           ;incstack = 0
  1000  00076A  9A9D               	bcf	3997,5,c	;volatile
  1001                           
  1002                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  1003  00076C  989D               	bcf	3997,4,c	;volatile
  1004                           
  1005                           ;eusart1.c: 85: BAUD1CON = 0x48;
  1006  00076E  0E48               	movlw	72
  1007  000770  6EB8               	movwf	4024,c	;volatile
  1008                           
  1009                           ;eusart1.c: 88: RC1STA = 0x98;
  1010  000772  0E98               	movlw	152
  1011  000774  6EAB               	movwf	4011,c	;volatile
  1012                           
  1013                           ;eusart1.c: 91: TX1STA = 0x26;
  1014  000776  0E26               	movlw	38
  1015  000778  6EAC               	movwf	4012,c	;volatile
  1016                           
  1017                           ;eusart1.c: 94: SPBRG1 = 0x22;
  1018  00077A  0E22               	movlw	34
  1019  00077C  6EAF               	movwf	4015,c	;volatile
  1020                           
  1021                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  1022  00077E  0E00               	movlw	0
  1023  000780  6EB0               	movwf	4016,c	;volatile
  1024                           
  1025                           ;eusart1.c: 100: TXREG1 = 0x00;
  1026  000782  0E00               	movlw	0
  1027  000784  6EAD               	movwf	4013,c	;volatile
  1028                           
  1029                           ;eusart1.c: 103: RCREG1 = 0x00;
  1030  000786  0E00               	movlw	0
  1031  000788  6EAE               	movwf	4014,c	;volatile
  1032                           
  1033                           ;eusart1.c: 107: eusart1TxHead = 0;
  1034  00078A  0E00               	movlw	0
  1035  00078C  6E28               	movwf	_eusart1TxHead,c
  1036                           
  1037                           ;eusart1.c: 108: eusart1TxTail = 0;
  1038  00078E  0E00               	movlw	0
  1039  000790  6E29               	movwf	_eusart1TxTail,c
  1040                           
  1041                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  1042  000792  0E08               	movlw	8
  1043  000794  6E48               	movwf	_eusart1TxBufferRemaining,c	;volatile
  1044                           
  1045                           ;eusart1.c: 111: eusart1RxHead = 0;
  1046  000796  0E00               	movlw	0
  1047  000798  6E26               	movwf	_eusart1RxHead,c
  1048                           
  1049                           ;eusart1.c: 112: eusart1RxTail = 0;
  1050  00079A  0E00               	movlw	0
  1051  00079C  6E27               	movwf	_eusart1RxTail,c
  1052                           
  1053                           ;eusart1.c: 113: eusart1RxCount = 0;
  1054  00079E  0E00               	movlw	0
  1055  0007A0  6E25               	movwf	_eusart1RxCount,c	;volatile
  1056                           
  1057                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  1058  0007A2  8A9D               	bsf	3997,5,c	;volatile
  1059  0007A4  0012               	return	
  1060  0007A6                     __end_of_EUSART1_Initialize:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           intcon	equ	0xFF2
  1064                           intcon2	equ	0xFF1
  1065                           postinc0	equ	0xFEE
  1066                           wreg	equ	0xFE8
  1067                           postinc2	equ	0xFDE
  1068                           postdec2	equ	0xFDD
  1069                           fsr2h	equ	0xFDA
  1070                           fsr2l	equ	0xFD9
  1071                           status	equ	0xFD8
  1072                           
  1073 ;; *************** function _ADC_Initialize *****************
  1074 ;; Defined at:
  1075 ;;		line 13 in file "mcc_generated_files/adc.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;		None
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;		None
  1080 ;; Return value:  Size  Location     Type
  1081 ;;		None               void
  1082 ;; Registers used:
  1083 ;;		wreg, status,2
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1089 ;;      Params:         0       0       0       0       0       0       0
  1090 ;;      Locals:         0       0       0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0
  1092 ;;      Totals:         0       0       0       0       0       0       0
  1093 ;;Total ram usage:        0 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    3
  1096 ;; This function calls:
  1097 ;;		Nothing
  1098 ;; This function is called by:
  1099 ;;		_SYSTEM_Initialize
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text9
  1104  0008DE                     __ptext9:
  1105                           	opt stack 0
  1106  0008DE                     _ADC_Initialize:
  1107                           	opt stack 26
  1108                           
  1109                           ;adc.c: 18: ADCON0 = 0x01;
  1110                           
  1111                           ;incstack = 0
  1112  0008DE  0E01               	movlw	1
  1113  0008E0  6EC2               	movwf	4034,c	;volatile
  1114                           
  1115                           ;adc.c: 21: ADCON1 = 0x80;
  1116  0008E2  0E80               	movlw	128
  1117  0008E4  6EC1               	movwf	4033,c	;volatile
  1118                           
  1119                           ;adc.c: 24: ADCON2 = 0x0A;
  1120  0008E6  0E0A               	movlw	10
  1121  0008E8  6EC0               	movwf	4032,c	;volatile
  1122                           
  1123                           ;adc.c: 27: ADRESL = 0x00;
  1124  0008EA  0E00               	movlw	0
  1125  0008EC  6EC3               	movwf	4035,c	;volatile
  1126                           
  1127                           ;adc.c: 30: ADRESH = 0x00;
  1128  0008EE  0E00               	movlw	0
  1129  0008F0  6EC4               	movwf	4036,c	;volatile
  1130                           
  1131                           ;adc.c: 33: PIE1bits.ADIE = 1;
  1132  0008F2  8C9D               	bsf	3997,6,c	;volatile
  1133  0008F4  0012               	return	
  1134  0008F6                     __end_of_ADC_Initialize:
  1135                           	opt stack 0
  1136                           tblptru	equ	0xFF8
  1137                           intcon	equ	0xFF2
  1138                           intcon2	equ	0xFF1
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           postinc2	equ	0xFDE
  1142                           postdec2	equ	0xFDD
  1143                           fsr2h	equ	0xFDA
  1144                           fsr2l	equ	0xFD9
  1145                           status	equ	0xFD8
  1146                           
  1147 ;; *************** function _Battery_Fault *****************
  1148 ;; Defined at:
  1149 ;;		line 9 in file "Battery.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;		None
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  i               2   10[BANK0 ] int 
  1154 ;;  fault           1    9[BANK0 ] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      unsigned char 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1164 ;;      Params:         0       0       0       0       0       0       0
  1165 ;;      Locals:         0       3       0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0       0       0
  1167 ;;      Totals:         0       3       0       0       0       0       0
  1168 ;;Total ram usage:        3 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    4
  1171 ;; This function calls:
  1172 ;;		___ftge
  1173 ;;		___wmul
  1174 ;; This function is called by:
  1175 ;;		_main
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           	psect	text10
  1180  0005C8                     __ptext10:
  1181                           	opt stack 0
  1182  0005C8                     _Battery_Fault:
  1183                           	opt stack 26
  1184                           
  1185                           ;Battery.c: 12: char fault = 0;
  1186                           
  1187                           ;incstack = 0
  1188  0005C8  0E00               	movlw	0
  1189  0005CA  0100               	movlb	0	; () banked
  1190  0005CC  6FC1               	movwf	Battery_Fault@fault& (0+255),b
  1191                           
  1192                           ;Battery.c: 13: for(int i = 0;i<9;i++)
  1193  0005CE  0E00               	movlw	0
  1194  0005D0  0100               	movlb	0	; () banked
  1195  0005D2  6FC3               	movwf	(Battery_Fault@i+1)& (0+255),b
  1196  0005D4  0E00               	movlw	0
  1197  0005D6  0100               	movlb	0	; () banked
  1198  0005D8  6FC2               	movwf	Battery_Fault@i& (0+255),b
  1199  0005DA                     
  1200                           ; BSR set to: 0
  1201  0005DA  0100               	movlb	0	; () banked
  1202  0005DC  51C3               	movf	(Battery_Fault@i+1)& (0+255),w,b
  1203  0005DE  0A80               	xorlw	128
  1204  0005E0  0F80               	addlw	-128
  1205  0005E2  0E09               	movlw	9
  1206  0005E4  B4D8               	btfsc	status,2,c
  1207  0005E6  5DC2               	subwf	Battery_Fault@i& (0+255),w,b
  1208  0005E8  B0D8               	btfsc	status,0,c
  1209  0005EA  0012               	return	
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;Battery.c: 14: {
  1213                           ;Battery.c: 15: if ((3.00 < Battery_Volt[i]) && (4.21 > Battery_Volt[i]))
  1214                           
  1215                           ; BSR set to: 0
  1216                           
  1217                           ; BSR set to: 0
  1218  0005EC  0E00               	movlw	0
  1219  0005EE  0100               	movlb	0	; () banked
  1220  0005F0  6FB8               	movwf	___ftge@ff1& (0+255),b
  1221  0005F2  0E40               	movlw	64
  1222  0005F4  0100               	movlb	0	; () banked
  1223  0005F6  6FB9               	movwf	(___ftge@ff1+1)& (0+255),b
  1224  0005F8  0E40               	movlw	64
  1225  0005FA  0100               	movlb	0	; () banked
  1226  0005FC  6FBA               	movwf	(___ftge@ff1+2)& (0+255),b
  1227  0005FE  C0C2  F040         	movff	Battery_Fault@i,___wmul@multiplier
  1228  000602  C0C3  F041         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  1229  000606  0E00               	movlw	0
  1230  000608  6E43               	movwf	___wmul@multiplicand+1,c
  1231  00060A  0E03               	movlw	3
  1232  00060C  6E42               	movwf	___wmul@multiplicand,c
  1233  00060E  EC03  F004         	call	___wmul	;wreg free
  1234  000612  0100               	movlb	0	; () banked
  1235  000614  0E60               	movlw	low _Battery_Volt
  1236  000616  2440               	addwf	?___wmul,w,c
  1237  000618  6ED9               	movwf	fsr2l,c
  1238  00061A  0100               	movlb	0	; () banked
  1239  00061C  0E00               	movlw	high _Battery_Volt
  1240  00061E  2041               	addwfc	?___wmul+1,w,c
  1241  000620  6EDA               	movwf	fsr2h,c
  1242  000622  0100               	movlb	0	; () banked
  1243  000624  CFDE F0BB          	movff	postinc2,___ftge@ff2
  1244  000628  0100               	movlb	0	; () banked
  1245  00062A  CFDE F0BC          	movff	postinc2,___ftge@ff2+1
  1246  00062E  0100               	movlb	0	; () banked
  1247  000630  CFDD F0BD          	movff	postdec2,___ftge@ff2+2
  1248  000634  EC7A  F002         	call	___ftge	;wreg free
  1249  000638  B0D8               	btfsc	status,0,c
  1250  00063A  D02B               	goto	l1826
  1251  00063C  C0C2  F040         	movff	Battery_Fault@i,___wmul@multiplier
  1252  000640  C0C3  F041         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  1253  000644  0E00               	movlw	0
  1254  000646  6E43               	movwf	___wmul@multiplicand+1,c
  1255  000648  0E03               	movlw	3
  1256  00064A  6E42               	movwf	___wmul@multiplicand,c
  1257  00064C  EC03  F004         	call	___wmul	;wreg free
  1258  000650  0100               	movlb	0	; () banked
  1259  000652  0E60               	movlw	low _Battery_Volt
  1260  000654  2440               	addwf	?___wmul,w,c
  1261  000656  6ED9               	movwf	fsr2l,c
  1262  000658  0100               	movlb	0	; () banked
  1263  00065A  0E00               	movlw	high _Battery_Volt
  1264  00065C  2041               	addwfc	?___wmul+1,w,c
  1265  00065E  6EDA               	movwf	fsr2h,c
  1266  000660  0100               	movlb	0	; () banked
  1267  000662  CFDE F0B8          	movff	postinc2,___ftge@ff1
  1268  000666  0100               	movlb	0	; () banked
  1269  000668  CFDE F0B9          	movff	postinc2,___ftge@ff1+1
  1270  00066C  0100               	movlb	0	; () banked
  1271  00066E  CFDD F0BA          	movff	postdec2,___ftge@ff1+2
  1272  000672  0EB8               	movlw	184
  1273  000674  0100               	movlb	0	; () banked
  1274  000676  6FBB               	movwf	___ftge@ff2& (0+255),b
  1275  000678  0E86               	movlw	134
  1276  00067A  0100               	movlb	0	; () banked
  1277  00067C  6FBC               	movwf	(___ftge@ff2+1)& (0+255),b
  1278  00067E  0E40               	movlw	64
  1279  000680  0100               	movlb	0	; () banked
  1280  000682  6FBD               	movwf	(___ftge@ff2+2)& (0+255),b
  1281  000684  EC7A  F002         	call	___ftge	;wreg free
  1282  000688  B0D8               	btfsc	status,0,c
  1283  00068A  D003               	goto	l1826
  1284                           
  1285                           ;Battery.c: 16: {
  1286                           ;Battery.c: 17: fault = 1;
  1287  00068C  0E01               	movlw	1
  1288  00068E  0100               	movlb	0	; () banked
  1289  000690  6FC1               	movwf	Battery_Fault@fault& (0+255),b
  1290  000692                     l1826:
  1291  000692  0100               	movlb	0	; () banked
  1292  000694  4BC2               	infsnz	Battery_Fault@i& (0+255),f,b
  1293  000696  2BC3               	incf	(Battery_Fault@i+1)& (0+255),f,b
  1294  000698  D7A0               	goto	L2
  1295  00069A                     __end_of_Battery_Fault:
  1296                           	opt stack 0
  1297                           tblptru	equ	0xFF8
  1298                           intcon	equ	0xFF2
  1299                           intcon2	equ	0xFF1
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           postinc2	equ	0xFDE
  1303                           postdec2	equ	0xFDD
  1304                           fsr2h	equ	0xFDA
  1305                           fsr2l	equ	0xFD9
  1306                           status	equ	0xFD8
  1307                           
  1308 ;; *************** function ___wmul *****************
  1309 ;; Defined at:
  1310 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;  multiplier      2   22[COMRAM] unsigned int 
  1313 ;;  multiplicand    2   24[COMRAM] unsigned int 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  product         2   26[COMRAM] unsigned int 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  2   22[COMRAM] unsigned int 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, prodl, prodh
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1325 ;;      Params:         4       0       0       0       0       0       0
  1326 ;;      Locals:         2       0       0       0       0       0       0
  1327 ;;      Temps:          0       0       0       0       0       0       0
  1328 ;;      Totals:         6       0       0       0       0       0       0
  1329 ;;Total ram usage:        6 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    3
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_Battery_Fault
  1336 ;;		_Temp_Fault
  1337 ;;		_Battery_Get
  1338 ;;		_Tempeture_Get
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text11
  1343  000806                     __ptext11:
  1344                           	opt stack 0
  1345  000806                     ___wmul:
  1346                           	opt stack 26
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;incstack = 0
  1350  000806  5040               	movf	___wmul@multiplier,w,c
  1351  000808  0242               	mulwf	___wmul@multiplicand,c
  1352  00080A  CFF3 F044          	movff	prodl,___wmul@product
  1353  00080E  CFF4 F045          	movff	prodh,___wmul@product+1
  1354  000812  5040               	movf	___wmul@multiplier,w,c
  1355  000814  0243               	mulwf	___wmul@multiplicand+1,c
  1356  000816  50F3               	movf	prodl,w,c
  1357  000818  2645               	addwf	___wmul@product+1,f,c
  1358  00081A  5041               	movf	___wmul@multiplier+1,w,c
  1359  00081C  0242               	mulwf	___wmul@multiplicand,c
  1360  00081E  50F3               	movf	prodl,w,c
  1361  000820  2645               	addwf	___wmul@product+1,f,c
  1362  000822  C044  F040         	movff	___wmul@product,?___wmul
  1363  000826  C045  F041         	movff	___wmul@product+1,?___wmul+1
  1364  00082A  0012               	return	
  1365  00082C                     __end_of___wmul:
  1366                           	opt stack 0
  1367                           tblptru	equ	0xFF8
  1368                           prodh	equ	0xFF4
  1369                           prodl	equ	0xFF3
  1370                           intcon	equ	0xFF2
  1371                           intcon2	equ	0xFF1
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postinc2	equ	0xFDE
  1375                           postdec2	equ	0xFDD
  1376                           fsr2h	equ	0xFDA
  1377                           fsr2l	equ	0xFD9
  1378                           status	equ	0xFD8
  1379                           
  1380 ;; *************** function ___ftge *****************
  1381 ;; Defined at:
  1382 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;  ff1             3    0[BANK0 ] float 
  1385 ;;  ff2             3    3[BANK0 ] float 
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;		None               void
  1390 ;; Registers used:
  1391 ;;		wreg, status,2, status,0
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1397 ;;      Params:         0       6       0       0       0       0       0
  1398 ;;      Locals:         0       0       0       0       0       0       0
  1399 ;;      Temps:          0       3       0       0       0       0       0
  1400 ;;      Totals:         0       9       0       0       0       0       0
  1401 ;;Total ram usage:        9 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; Hardware stack levels required when called:    3
  1404 ;; This function calls:
  1405 ;;		Nothing
  1406 ;; This function is called by:
  1407 ;;		_Battery_Fault
  1408 ;;		_Temp_Fault
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text12
  1413  0004F4                     __ptext12:
  1414                           	opt stack 0
  1415  0004F4                     ___ftge:
  1416                           	opt stack 26
  1417                           
  1418                           ;incstack = 0
  1419  0004F4  0100               	movlb	0	; () banked
  1420  0004F6  AFBA               	btfss	(___ftge@ff1+2)& (0+255),7,b
  1421  0004F8  D020               	goto	l1800
  1422                           
  1423                           ; BSR set to: 0
  1424  0004FA  0100               	movlb	0	; () banked
  1425  0004FC  C0B8  F0BE         	movff	___ftge@ff1,??___ftge
  1426  000500  0100               	movlb	0	; () banked
  1427  000502  C0B9  F0BF         	movff	___ftge@ff1+1,??___ftge+1
  1428  000506  0100               	movlb	0	; () banked
  1429  000508  C0BA  F0C0         	movff	___ftge@ff1+2,??___ftge+2
  1430  00050C  0100               	movlb	0	; () banked
  1431  00050E  1FBE               	comf	??___ftge& (0+255),f,b
  1432  000510  1FBF               	comf	(??___ftge+1)& (0+255),f,b
  1433  000512  1FC0               	comf	(??___ftge+2)& (0+255),f,b
  1434  000514  2BBE               	incf	??___ftge& (0+255),f,b
  1435  000516  0E00               	movlw	0
  1436  000518  23BF               	addwfc	(??___ftge+1)& (0+255),f,b
  1437  00051A  23C0               	addwfc	(??___ftge+2)& (0+255),f,b
  1438  00051C  0E00               	movlw	0
  1439  00051E  0100               	movlb	0	; () banked
  1440  000520  25BE               	addwf	??___ftge& (0+255),w,b
  1441  000522  0100               	movlb	0	; () banked
  1442  000524  6FB8               	movwf	___ftge@ff1& (0+255),b
  1443  000526  0E00               	movlw	0
  1444  000528  0100               	movlb	0	; () banked
  1445  00052A  21BF               	addwfc	(??___ftge+1)& (0+255),w,b
  1446  00052C  0100               	movlb	0	; () banked
  1447  00052E  6FB9               	movwf	(___ftge@ff1+1)& (0+255),b
  1448  000530  0E80               	movlw	128
  1449  000532  0100               	movlb	0	; () banked
  1450  000534  21C0               	addwfc	(??___ftge+2)& (0+255),w,b
  1451  000536  0100               	movlb	0	; () banked
  1452  000538  6FBA               	movwf	(___ftge@ff1+2)& (0+255),b
  1453  00053A                     l1800:
  1454                           
  1455                           ; BSR set to: 0
  1456  00053A  0100               	movlb	0	; () banked
  1457  00053C  AFBD               	btfss	(___ftge@ff2+2)& (0+255),7,b
  1458  00053E  D020               	goto	l1804
  1459                           
  1460                           ; BSR set to: 0
  1461  000540  0100               	movlb	0	; () banked
  1462  000542  C0BB  F0BE         	movff	___ftge@ff2,??___ftge
  1463  000546  0100               	movlb	0	; () banked
  1464  000548  C0BC  F0BF         	movff	___ftge@ff2+1,??___ftge+1
  1465  00054C  0100               	movlb	0	; () banked
  1466  00054E  C0BD  F0C0         	movff	___ftge@ff2+2,??___ftge+2
  1467  000552  0100               	movlb	0	; () banked
  1468  000554  1FBE               	comf	??___ftge& (0+255),f,b
  1469  000556  1FBF               	comf	(??___ftge+1)& (0+255),f,b
  1470  000558  1FC0               	comf	(??___ftge+2)& (0+255),f,b
  1471  00055A  2BBE               	incf	??___ftge& (0+255),f,b
  1472  00055C  0E00               	movlw	0
  1473  00055E  23BF               	addwfc	(??___ftge+1)& (0+255),f,b
  1474  000560  23C0               	addwfc	(??___ftge+2)& (0+255),f,b
  1475  000562  0E00               	movlw	0
  1476  000564  0100               	movlb	0	; () banked
  1477  000566  25BE               	addwf	??___ftge& (0+255),w,b
  1478  000568  0100               	movlb	0	; () banked
  1479  00056A  6FBB               	movwf	___ftge@ff2& (0+255),b
  1480  00056C  0E00               	movlw	0
  1481  00056E  0100               	movlb	0	; () banked
  1482  000570  21BF               	addwfc	(??___ftge+1)& (0+255),w,b
  1483  000572  0100               	movlb	0	; () banked
  1484  000574  6FBC               	movwf	(___ftge@ff2+1)& (0+255),b
  1485  000576  0E80               	movlw	128
  1486  000578  0100               	movlb	0	; () banked
  1487  00057A  21C0               	addwfc	(??___ftge+2)& (0+255),w,b
  1488  00057C  0100               	movlb	0	; () banked
  1489  00057E  6FBD               	movwf	(___ftge@ff2+2)& (0+255),b
  1490  000580                     l1804:
  1491                           
  1492                           ; BSR set to: 0
  1493  000580  0E00               	movlw	0
  1494  000582  0100               	movlb	0	; () banked
  1495  000584  1BB8               	xorwf	___ftge@ff1& (0+255),f,b
  1496  000586  0E00               	movlw	0
  1497  000588  0100               	movlb	0	; () banked
  1498  00058A  1BB9               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  1499  00058C  0E80               	movlw	128
  1500  00058E  0100               	movlb	0	; () banked
  1501  000590  1BBA               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  1502                           
  1503                           ; BSR set to: 0
  1504  000592  0E00               	movlw	0
  1505  000594  0100               	movlb	0	; () banked
  1506  000596  1BBB               	xorwf	___ftge@ff2& (0+255),f,b
  1507  000598  0E00               	movlw	0
  1508  00059A  0100               	movlb	0	; () banked
  1509  00059C  1BBC               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  1510  00059E  0E80               	movlw	128
  1511  0005A0  0100               	movlb	0	; () banked
  1512  0005A2  1BBD               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  1513  0005A4  0100               	movlb	0	; () banked
  1514  0005A6  51BB               	movf	___ftge@ff2& (0+255),w,b
  1515  0005A8  0100               	movlb	0	; () banked
  1516  0005AA  5DB8               	subwf	___ftge@ff1& (0+255),w,b
  1517  0005AC  0100               	movlb	0	; () banked
  1518  0005AE  51BC               	movf	(___ftge@ff2+1)& (0+255),w,b
  1519  0005B0  0100               	movlb	0	; () banked
  1520  0005B2  59B9               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  1521  0005B4  0100               	movlb	0	; () banked
  1522  0005B6  51BD               	movf	(___ftge@ff2+2)& (0+255),w,b
  1523  0005B8  0100               	movlb	0	; () banked
  1524  0005BA  59BA               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  1525  0005BC  B0D8               	btfsc	status,0,c
  1526  0005BE  D002               	goto	l1810
  1527                           
  1528                           ; BSR set to: 0
  1529  0005C0  90D8               	bcf	status,0,c
  1530  0005C2  0012               	return	
  1531  0005C4                     l1810:
  1532                           
  1533                           ; BSR set to: 0
  1534  0005C4  80D8               	bsf	status,0,c
  1535  0005C6  0012               	return	
  1536  0005C8                     __end_of___ftge:
  1537                           	opt stack 0
  1538                           tblptru	equ	0xFF8
  1539                           prodh	equ	0xFF4
  1540                           prodl	equ	0xFF3
  1541                           intcon	equ	0xFF2
  1542                           intcon2	equ	0xFF1
  1543                           postinc0	equ	0xFEE
  1544                           wreg	equ	0xFE8
  1545                           postinc2	equ	0xFDE
  1546                           postdec2	equ	0xFDD
  1547                           fsr2h	equ	0xFDA
  1548                           fsr2l	equ	0xFD9
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function _INTERRUPT_InterruptManager *****************
  1552 ;; Defined at:
  1553 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;		None
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;		None
  1558 ;; Return value:  Size  Location     Type
  1559 ;;		None               void
  1560 ;; Registers used:
  1561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1567 ;;      Params:         0       0       0       0       0       0       0
  1568 ;;      Locals:         0       0       0       0       0       0       0
  1569 ;;      Temps:         14       0       0       0       0       0       0
  1570 ;;      Totals:        14       0       0       0       0       0       0
  1571 ;;Total ram usage:       14 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    2
  1574 ;; This function calls:
  1575 ;;		_ADC_ISR
  1576 ;;		_EUSART1_Receive_ISR
  1577 ;;		_EUSART1_Transmit_ISR
  1578 ;;		_TMR1_ISR
  1579 ;; This function is called by:
  1580 ;;		Interrupt level 2
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	intcode
  1585  000008                     __pintcode:
  1586                           	opt stack 0
  1587  000008                     _INTERRUPT_InterruptManager:
  1588                           	opt stack 25
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;incstack = 0
  1592  000008  CFFA F032          	movff	pclath,??_INTERRUPT_InterruptManager
  1593  00000C  CFFB F033          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  1594  000010  CFE9 F034          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  1595  000014  CFEA F035          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  1596  000018  CFE1 F036          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  1597  00001C  CFE2 F037          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  1598  000020  CFD9 F038          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  1599  000024  CFDA F039          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  1600  000028  CFF3 F03A          	movff	prodl,??_INTERRUPT_InterruptManager+8
  1601  00002C  CFF4 F03B          	movff	prodh,??_INTERRUPT_InterruptManager+9
  1602  000030  CFF6 F03C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  1603  000034  CFF7 F03D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  1604  000038  CFF8 F03E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  1605  00003C  CFF5 F03F          	movff	tablat,??_INTERRUPT_InterruptManager+13
  1606                           
  1607                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  1608  000040  BA9D               	btfsc	3997,5,c	;volatile
  1609  000042  AA9E               	btfss	3998,5,c	;volatile
  1610  000044  D003               	goto	i2l268
  1611                           
  1612                           ;interrupt_manager.c: 73: {
  1613                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
  1614  000046  ECEB  F003         	call	_EUSART1_Receive_ISR	;wreg free
  1615                           
  1616                           ;interrupt_manager.c: 75: }
  1617  00004A  D011               	goto	i2l276
  1618  00004C                     i2l268:
  1619                           
  1620                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  1621  00004C  BC9D               	btfsc	3997,6,c	;volatile
  1622  00004E  AC9E               	btfss	3998,6,c	;volatile
  1623  000050  D003               	goto	i2l270
  1624                           
  1625                           ;interrupt_manager.c: 77: {
  1626                           ;interrupt_manager.c: 78: ADC_ISR();
  1627  000052  EC56  F000         	call	_ADC_ISR	;wreg free
  1628                           
  1629                           ;interrupt_manager.c: 79: }
  1630  000056  D00B               	goto	i2l276
  1631  000058                     i2l270:
  1632                           
  1633                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  1634  000058  B09D               	btfsc	3997,0,c	;volatile
  1635  00005A  A09E               	btfss	3998,0,c	;volatile
  1636  00005C  D003               	goto	i2l272
  1637                           
  1638                           ;interrupt_manager.c: 81: {
  1639                           ;interrupt_manager.c: 82: TMR1_ISR();
  1640  00005E  EC55  F004         	call	_TMR1_ISR	;wreg free
  1641                           
  1642                           ;interrupt_manager.c: 83: }
  1643  000062  D005               	goto	i2l276
  1644  000064                     i2l272:
  1645                           
  1646                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  1647  000064  B89D               	btfsc	3997,4,c	;volatile
  1648  000066  A89E               	btfss	3998,4,c	;volatile
  1649  000068  D002               	goto	i2l276
  1650                           
  1651                           ;interrupt_manager.c: 85: {
  1652                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
  1653  00006A  ECD3  F003         	call	_EUSART1_Transmit_ISR	;wreg free
  1654  00006E                     i2l276:
  1655  00006E  C03F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  1656  000072  C03E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  1657  000076  C03D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  1658  00007A  C03C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  1659  00007E  C03B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  1660  000082  C03A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  1661  000086  C039  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  1662  00008A  C038  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  1663  00008E  C037  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  1664  000092  C036  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  1665  000096  C035  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  1666  00009A  C034  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  1667  00009E  C033  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  1668  0000A2  C032  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  1669  0000A6  0011               	retfie		f
  1670  0000A8                     __end_of_INTERRUPT_InterruptManager:
  1671                           	opt stack 0
  1672                           pclatu	equ	0xFFB
  1673                           pclath	equ	0xFFA
  1674                           tblptru	equ	0xFF8
  1675                           tblptrh	equ	0xFF7
  1676                           tblptrl	equ	0xFF6
  1677                           tablat	equ	0xFF5
  1678                           prodh	equ	0xFF4
  1679                           prodl	equ	0xFF3
  1680                           intcon	equ	0xFF2
  1681                           intcon2	equ	0xFF1
  1682                           postinc0	equ	0xFEE
  1683                           fsr0h	equ	0xFEA
  1684                           fsr0l	equ	0xFE9
  1685                           wreg	equ	0xFE8
  1686                           fsr1h	equ	0xFE2
  1687                           fsr1l	equ	0xFE1
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _TMR1_ISR *****************
  1695 ;; Defined at:
  1696 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;		None               void
  1703 ;; Registers used:
  1704 ;;		wreg, status,2, cstack
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1710 ;;      Params:         0       0       0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0       0       0
  1712 ;;      Temps:          3       0       0       0       0       0       0
  1713 ;;      Totals:         3       0       0       0       0       0       0
  1714 ;;Total ram usage:        3 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    1
  1717 ;; This function calls:
  1718 ;;		_TMR1_CallBack
  1719 ;; This function is called by:
  1720 ;;		_INTERRUPT_InterruptManager
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text14
  1725  0008AA                     __ptext14:
  1726                           	opt stack 0
  1727  0008AA                     _TMR1_ISR:
  1728                           	opt stack 25
  1729                           
  1730                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
  1731                           
  1732                           ;incstack = 0
  1733  0008AA  909E               	bcf	3998,0,c	;volatile
  1734                           
  1735                           ;tmr1.c: 164: TMR1H = (timer1ReloadVal >> 8);
  1736  0008AC  C047  F02A         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  1737  0008B0  C02A  F02B         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  1738  0008B4  6A2C               	clrf	(??_TMR1_ISR+2)& (0+255),c
  1739  0008B6  502B               	movf	??_TMR1_ISR+1,w,c
  1740  0008B8  6ECF               	movwf	4047,c	;volatile
  1741                           
  1742                           ;tmr1.c: 165: TMR1L = (uint8_t) timer1ReloadVal;
  1743  0008BA  C046  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  1744                           
  1745                           ;tmr1.c: 169: TMR1_CallBack();
  1746  0008BE  EC94  F004         	call	_TMR1_CallBack	;wreg free
  1747  0008C2  0012               	return	
  1748  0008C4                     __end_of_TMR1_ISR:
  1749                           	opt stack 0
  1750                           pclatu	equ	0xFFB
  1751                           pclath	equ	0xFFA
  1752                           tblptru	equ	0xFF8
  1753                           tblptrh	equ	0xFF7
  1754                           tblptrl	equ	0xFF6
  1755                           tablat	equ	0xFF5
  1756                           prodh	equ	0xFF4
  1757                           prodl	equ	0xFF3
  1758                           intcon	equ	0xFF2
  1759                           intcon2	equ	0xFF1
  1760                           postinc0	equ	0xFEE
  1761                           fsr0h	equ	0xFEA
  1762                           fsr0l	equ	0xFE9
  1763                           wreg	equ	0xFE8
  1764                           fsr1h	equ	0xFE2
  1765                           fsr1l	equ	0xFE1
  1766                           postinc2	equ	0xFDE
  1767                           postdec2	equ	0xFDD
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8
  1771                           
  1772 ;; *************** function _TMR1_CallBack *****************
  1773 ;; Defined at:
  1774 ;;		line 173 in file "mcc_generated_files/tmr1.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;		None
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;		None
  1779 ;; Return value:  Size  Location     Type
  1780 ;;		None               void
  1781 ;; Registers used:
  1782 ;;		None
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1788 ;;      Params:         0       0       0       0       0       0       0
  1789 ;;      Locals:         0       0       0       0       0       0       0
  1790 ;;      Temps:          0       0       0       0       0       0       0
  1791 ;;      Totals:         0       0       0       0       0       0       0
  1792 ;;Total ram usage:        0 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; This function calls:
  1795 ;;		Nothing
  1796 ;; This function is called by:
  1797 ;;		_TMR1_ISR
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text15
  1802  000928                     __ptext15:
  1803                           	opt stack 0
  1804  000928                     _TMR1_CallBack:
  1805                           	opt stack 25
  1806                           
  1807                           ;incstack = 0
  1808  000928  0012               	return	
  1809  00092A                     __end_of_TMR1_CallBack:
  1810                           	opt stack 0
  1811                           pclatu	equ	0xFFB
  1812                           pclath	equ	0xFFA
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           prodh	equ	0xFF4
  1818                           prodl	equ	0xFF3
  1819                           intcon	equ	0xFF2
  1820                           intcon2	equ	0xFF1
  1821                           postinc0	equ	0xFEE
  1822                           fsr0h	equ	0xFEA
  1823                           fsr0l	equ	0xFE9
  1824                           wreg	equ	0xFE8
  1825                           fsr1h	equ	0xFE2
  1826                           fsr1l	equ	0xFE1
  1827                           postinc2	equ	0xFDE
  1828                           postdec2	equ	0xFDD
  1829                           fsr2h	equ	0xFDA
  1830                           fsr2l	equ	0xFD9
  1831                           status	equ	0xFD8
  1832                           
  1833 ;; *************** function _EUSART1_Transmit_ISR *****************
  1834 ;; Defined at:
  1835 ;;		line 173 in file "mcc_generated_files/eusart1.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;		None               void
  1842 ;; Registers used:
  1843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1849 ;;      Params:         0       0       0       0       0       0       0
  1850 ;;      Locals:         0       0       0       0       0       0       0
  1851 ;;      Temps:          0       0       0       0       0       0       0
  1852 ;;      Totals:         0       0       0       0       0       0       0
  1853 ;;Total ram usage:        0 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; This function calls:
  1856 ;;		Nothing
  1857 ;; This function is called by:
  1858 ;;		_INTERRUPT_InterruptManager
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           	psect	text16
  1863  0007A6                     __ptext16:
  1864                           	opt stack 0
  1865  0007A6                     _EUSART1_Transmit_ISR:
  1866                           	opt stack 26
  1867                           
  1868                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  1869                           
  1870                           ;incstack = 0
  1871  0007A6  0E08               	movlw	8
  1872  0007A8  5C48               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  1873  0007AA  B0D8               	btfsc	status,0,c
  1874  0007AC  D012               	goto	i2l122
  1875                           
  1876                           ;eusart1.c: 178: {
  1877                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  1878  0007AE  5029               	movf	_eusart1TxTail,w,c
  1879  0007B0  0D01               	mullw	1
  1880  0007B2  0E15               	movlw	low _eusart1TxBuffer
  1881  0007B4  24F3               	addwf	prodl,w,c
  1882  0007B6  6ED9               	movwf	fsr2l,c
  1883  0007B8  0E00               	movlw	high _eusart1TxBuffer
  1884  0007BA  20F4               	addwfc	prodh,w,c
  1885  0007BC  6EDA               	movwf	fsr2h,c
  1886  0007BE  50DF               	movf	indf2,w,c
  1887  0007C0  6EAD               	movwf	4013,c	;volatile
  1888  0007C2  2A29               	incf	_eusart1TxTail,f,c
  1889                           
  1890                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  1891  0007C4  0E07               	movlw	7
  1892  0007C6  6429               	cpfsgt	_eusart1TxTail,c
  1893  0007C8  D002               	goto	i2l1116
  1894                           
  1895                           ;eusart1.c: 181: {
  1896                           ;eusart1.c: 182: eusart1TxTail = 0;
  1897  0007CA  0E00               	movlw	0
  1898  0007CC  6E29               	movwf	_eusart1TxTail,c
  1899  0007CE                     i2l1116:
  1900                           
  1901                           ;eusart1.c: 183: }
  1902                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
  1903  0007CE  2A48               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  1904                           
  1905                           ;eusart1.c: 185: }
  1906  0007D0  0012               	return	
  1907  0007D2                     i2l122:
  1908                           
  1909                           ;eusart1.c: 186: else
  1910                           ;eusart1.c: 187: {
  1911                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
  1912  0007D2  989D               	bcf	3997,4,c	;volatile
  1913  0007D4  0012               	return	
  1914  0007D6                     __end_of_EUSART1_Transmit_ISR:
  1915                           	opt stack 0
  1916                           pclatu	equ	0xFFB
  1917                           pclath	equ	0xFFA
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           prodh	equ	0xFF4
  1923                           prodl	equ	0xFF3
  1924                           intcon	equ	0xFF2
  1925                           intcon2	equ	0xFF1
  1926                           postinc0	equ	0xFEE
  1927                           fsr0h	equ	0xFEA
  1928                           fsr0l	equ	0xFE9
  1929                           wreg	equ	0xFE8
  1930                           fsr1h	equ	0xFE2
  1931                           fsr1l	equ	0xFE1
  1932                           indf2	equ	0xFDF
  1933                           postinc2	equ	0xFDE
  1934                           postdec2	equ	0xFDD
  1935                           fsr2h	equ	0xFDA
  1936                           fsr2l	equ	0xFD9
  1937                           status	equ	0xFD8
  1938                           
  1939 ;; *************** function _EUSART1_Receive_ISR *****************
  1940 ;; Defined at:
  1941 ;;		line 192 in file "mcc_generated_files/eusart1.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;		None
  1946 ;; Return value:  Size  Location     Type
  1947 ;;		None               void
  1948 ;; Registers used:
  1949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1955 ;;      Params:         0       0       0       0       0       0       0
  1956 ;;      Locals:         0       0       0       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0       0       0
  1958 ;;      Totals:         0       0       0       0       0       0       0
  1959 ;;Total ram usage:        0 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_INTERRUPT_InterruptManager
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text17
  1969  0007D6                     __ptext17:
  1970                           	opt stack 0
  1971  0007D6                     _EUSART1_Receive_ISR:
  1972                           	opt stack 26
  1973                           
  1974                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  1975                           
  1976                           ;incstack = 0
  1977  0007D6  A2AB               	btfss	4011,1,c	;volatile
  1978  0007D8  D002               	goto	i2l1494
  1979                           
  1980                           ;eusart1.c: 195: {
  1981                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  1982  0007DA  98AB               	bcf	4011,4,c	;volatile
  1983                           
  1984                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  1985  0007DC  88AB               	bsf	4011,4,c	;volatile
  1986  0007DE                     i2l1494:
  1987                           
  1988                           ;eusart1.c: 200: }
  1989                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  1990  0007DE  5026               	movf	_eusart1RxHead,w,c
  1991  0007E0  0D01               	mullw	1
  1992  0007E2  0100               	movlb	0	; () banked
  1993  0007E4  0EB0               	movlw	low _eusart1RxBuffer
  1994  0007E6  24F3               	addwf	prodl,w,c
  1995  0007E8  6ED9               	movwf	fsr2l,c
  1996  0007EA  0100               	movlb	0	; () banked
  1997  0007EC  0E00               	movlw	high _eusart1RxBuffer
  1998  0007EE  20F4               	addwfc	prodh,w,c
  1999  0007F0  6EDA               	movwf	fsr2h,c
  2000  0007F2  CFAE FFDF          	movff	4014,indf2	;volatile
  2001                           
  2002                           ; BSR set to: 0
  2003  0007F6  2A26               	incf	_eusart1RxHead,f,c
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  2007  0007F8  0E07               	movlw	7
  2008  0007FA  6426               	cpfsgt	_eusart1RxHead,c
  2009  0007FC  D002               	goto	i2l1502
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;eusart1.c: 205: {
  2013                           ;eusart1.c: 206: eusart1RxHead = 0;
  2014  0007FE  0E00               	movlw	0
  2015  000800  6E26               	movwf	_eusart1RxHead,c
  2016  000802                     i2l1502:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;eusart1.c: 207: }
  2020                           ;eusart1.c: 208: eusart1RxCount++;
  2021  000802  2A25               	incf	_eusart1RxCount,f,c	;volatile
  2022                           
  2023                           ; BSR set to: 0
  2024  000804  0012               	return	
  2025  000806                     __end_of_EUSART1_Receive_ISR:
  2026                           	opt stack 0
  2027                           pclatu	equ	0xFFB
  2028                           pclath	equ	0xFFA
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           prodh	equ	0xFF4
  2034                           prodl	equ	0xFF3
  2035                           intcon	equ	0xFF2
  2036                           intcon2	equ	0xFF1
  2037                           postinc0	equ	0xFEE
  2038                           fsr0h	equ	0xFEA
  2039                           fsr0l	equ	0xFE9
  2040                           wreg	equ	0xFE8
  2041                           fsr1h	equ	0xFE2
  2042                           fsr1l	equ	0xFE1
  2043                           indf2	equ	0xFDF
  2044                           postinc2	equ	0xFDE
  2045                           postdec2	equ	0xFDD
  2046                           fsr2h	equ	0xFDA
  2047                           fsr2l	equ	0xFD9
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _ADC_ISR *****************
  2051 ;; Defined at:
  2052 ;;		line 82 in file "mcc_generated_files/adc.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  ADC_Result      2    6[COMRAM] int 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;		None               void
  2059 ;; Registers used:
  2060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2066 ;;      Params:         0       0       0       0       0       0       0
  2067 ;;      Locals:         2       0       0       0       0       0       0
  2068 ;;      Temps:          2       0       0       0       0       0       0
  2069 ;;      Totals:         4       0       0       0       0       0       0
  2070 ;;Total ram usage:        4 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    1
  2073 ;; This function calls:
  2074 ;;		_ADC_GetConversionResult
  2075 ;;		_ADC_StartConversion
  2076 ;; This function is called by:
  2077 ;;		_INTERRUPT_InterruptManager
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text18
  2082  0000AC                     __ptext18:
  2083                           	opt stack 0
  2084  0000AC                     _ADC_ISR:
  2085                           	opt stack 25
  2086                           
  2087                           ;adc.c: 85: PIR1bits.ADIF = 0;
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;incstack = 0
  2091  0000AC  9C9E               	bcf	3998,6,c	;volatile
  2092                           
  2093                           ;adc.c: 86: int ADC_Result = 0;
  2094  0000AE  0E00               	movlw	0
  2095  0000B0  6E31               	movwf	ADC_ISR@ADC_Result+1,c
  2096  0000B2  0E00               	movlw	0
  2097  0000B4  6E30               	movwf	ADC_ISR@ADC_Result,c
  2098                           
  2099                           ;adc.c: 87: if (Temp_Aquire){
  2100  0000B6  5023               	movf	_Temp_Aquire,w,c
  2101  0000B8  B4D8               	btfsc	status,2,c
  2102  0000BA  D10C               	goto	i2l1558
  2103                           
  2104                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
  2105  0000BC  EC7B  F004         	call	_ADC_GetConversionResult	;wreg free
  2106  0000C0  C02A  F030         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  2107  0000C4  C02B  F031         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  2108                           
  2109                           ;adc.c: 90: switch ( ADC_Buffer_Point )
  2110  0000C8  D0D9               	goto	i2l1554
  2111  0000CA                     i2l1510:
  2112                           
  2113                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2114  0000CA  0E01               	movlw	low _Temp_Adc
  2115  0000CC  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2116  0000CE  0E00               	movlw	high _Temp_Adc
  2117  0000D0  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2118  0000D2  90D8               	bcf	status,0,c
  2119  0000D4  341D               	rlcf	_ADC_Buffer_Point,w,c
  2120  0000D6  6ED9               	movwf	fsr2l,c
  2121  0000D8  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2122  0000DA  6EDA               	movwf	fsr2h,c
  2123  0000DC  502E               	movf	??_ADC_ISR,w,c
  2124  0000DE  26D9               	addwf	fsr2l,f,c
  2125  0000E0  502F               	movf	??_ADC_ISR+1,w,c
  2126  0000E2  22DA               	addwfc	fsr2h,f,c
  2127  0000E4  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2128  0000E8  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2129                           
  2130                           ;adc.c: 94: ADC_StartConversion(Temp1);
  2131  0000EC  0E0E               	movlw	14
  2132  0000EE  EC62  F004         	call	_ADC_StartConversion
  2133                           
  2134                           ;adc.c: 95: break;
  2135  0000F2  D0EE               	goto	i2l1556
  2136  0000F4                     i2l1514:
  2137                           
  2138                           ;adc.c: 97: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2139  0000F4  0E01               	movlw	low _Temp_Adc
  2140  0000F6  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2141  0000F8  0E00               	movlw	high _Temp_Adc
  2142  0000FA  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2143  0000FC  90D8               	bcf	status,0,c
  2144  0000FE  341D               	rlcf	_ADC_Buffer_Point,w,c
  2145  000100  6ED9               	movwf	fsr2l,c
  2146  000102  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2147  000104  6EDA               	movwf	fsr2h,c
  2148  000106  502E               	movf	??_ADC_ISR,w,c
  2149  000108  26D9               	addwf	fsr2l,f,c
  2150  00010A  502F               	movf	??_ADC_ISR+1,w,c
  2151  00010C  22DA               	addwfc	fsr2h,f,c
  2152  00010E  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2153  000112  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2154                           
  2155                           ;adc.c: 98: ADC_StartConversion(Temp1);
  2156  000116  0E0E               	movlw	14
  2157  000118  EC62  F004         	call	_ADC_StartConversion
  2158                           
  2159                           ;adc.c: 99: break;
  2160  00011C  D0D9               	goto	i2l1556
  2161  00011E                     i2l1518:
  2162                           
  2163                           ;adc.c: 101: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2164  00011E  0E01               	movlw	low _Temp_Adc
  2165  000120  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2166  000122  0E00               	movlw	high _Temp_Adc
  2167  000124  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2168  000126  90D8               	bcf	status,0,c
  2169  000128  341D               	rlcf	_ADC_Buffer_Point,w,c
  2170  00012A  6ED9               	movwf	fsr2l,c
  2171  00012C  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2172  00012E  6EDA               	movwf	fsr2h,c
  2173  000130  502E               	movf	??_ADC_ISR,w,c
  2174  000132  26D9               	addwf	fsr2l,f,c
  2175  000134  502F               	movf	??_ADC_ISR+1,w,c
  2176  000136  22DA               	addwfc	fsr2h,f,c
  2177  000138  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2178  00013C  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2179                           
  2180                           ;adc.c: 102: ADC_StartConversion(Temp1);
  2181  000140  0E0E               	movlw	14
  2182  000142  EC62  F004         	call	_ADC_StartConversion
  2183                           
  2184                           ;adc.c: 103: break;
  2185  000146  D0C4               	goto	i2l1556
  2186  000148                     i2l1522:
  2187                           
  2188                           ;adc.c: 105: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2189  000148  0E01               	movlw	low _Temp_Adc
  2190  00014A  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2191  00014C  0E00               	movlw	high _Temp_Adc
  2192  00014E  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2193  000150  90D8               	bcf	status,0,c
  2194  000152  341D               	rlcf	_ADC_Buffer_Point,w,c
  2195  000154  6ED9               	movwf	fsr2l,c
  2196  000156  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2197  000158  6EDA               	movwf	fsr2h,c
  2198  00015A  502E               	movf	??_ADC_ISR,w,c
  2199  00015C  26D9               	addwf	fsr2l,f,c
  2200  00015E  502F               	movf	??_ADC_ISR+1,w,c
  2201  000160  22DA               	addwfc	fsr2h,f,c
  2202  000162  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2203  000166  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2204                           
  2205                           ;adc.c: 106: ADC_StartConversion(Temp1);
  2206  00016A  0E0E               	movlw	14
  2207  00016C  EC62  F004         	call	_ADC_StartConversion
  2208                           
  2209                           ;adc.c: 107: break;
  2210  000170  D0AF               	goto	i2l1556
  2211  000172                     i2l1526:
  2212                           
  2213                           ;adc.c: 109: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2214  000172  0E01               	movlw	low _Temp_Adc
  2215  000174  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2216  000176  0E00               	movlw	high _Temp_Adc
  2217  000178  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2218  00017A  90D8               	bcf	status,0,c
  2219  00017C  341D               	rlcf	_ADC_Buffer_Point,w,c
  2220  00017E  6ED9               	movwf	fsr2l,c
  2221  000180  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2222  000182  6EDA               	movwf	fsr2h,c
  2223  000184  502E               	movf	??_ADC_ISR,w,c
  2224  000186  26D9               	addwf	fsr2l,f,c
  2225  000188  502F               	movf	??_ADC_ISR+1,w,c
  2226  00018A  22DA               	addwfc	fsr2h,f,c
  2227  00018C  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2228  000190  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2229                           
  2230                           ;adc.c: 110: ADC_StartConversion(Temp1);
  2231  000194  0E0E               	movlw	14
  2232  000196  EC62  F004         	call	_ADC_StartConversion
  2233                           
  2234                           ;adc.c: 111: break;
  2235  00019A  D09A               	goto	i2l1556
  2236  00019C                     i2l1530:
  2237                           
  2238                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2239  00019C  0E01               	movlw	low _Temp_Adc
  2240  00019E  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2241  0001A0  0E00               	movlw	high _Temp_Adc
  2242  0001A2  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2243  0001A4  90D8               	bcf	status,0,c
  2244  0001A6  341D               	rlcf	_ADC_Buffer_Point,w,c
  2245  0001A8  6ED9               	movwf	fsr2l,c
  2246  0001AA  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2247  0001AC  6EDA               	movwf	fsr2h,c
  2248  0001AE  502E               	movf	??_ADC_ISR,w,c
  2249  0001B0  26D9               	addwf	fsr2l,f,c
  2250  0001B2  502F               	movf	??_ADC_ISR+1,w,c
  2251  0001B4  22DA               	addwfc	fsr2h,f,c
  2252  0001B6  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2253  0001BA  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2254                           
  2255                           ;adc.c: 114: ADC_StartConversion(Temp1);
  2256  0001BE  0E0E               	movlw	14
  2257  0001C0  EC62  F004         	call	_ADC_StartConversion
  2258                           
  2259                           ;adc.c: 115: break;
  2260  0001C4  D085               	goto	i2l1556
  2261  0001C6                     i2l1534:
  2262                           
  2263                           ;adc.c: 117: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2264  0001C6  0E01               	movlw	low _Temp_Adc
  2265  0001C8  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2266  0001CA  0E00               	movlw	high _Temp_Adc
  2267  0001CC  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2268  0001CE  90D8               	bcf	status,0,c
  2269  0001D0  341D               	rlcf	_ADC_Buffer_Point,w,c
  2270  0001D2  6ED9               	movwf	fsr2l,c
  2271  0001D4  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2272  0001D6  6EDA               	movwf	fsr2h,c
  2273  0001D8  502E               	movf	??_ADC_ISR,w,c
  2274  0001DA  26D9               	addwf	fsr2l,f,c
  2275  0001DC  502F               	movf	??_ADC_ISR+1,w,c
  2276  0001DE  22DA               	addwfc	fsr2h,f,c
  2277  0001E0  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2278  0001E4  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2279                           
  2280                           ;adc.c: 118: ADC_StartConversion(Temp1);
  2281  0001E8  0E0E               	movlw	14
  2282  0001EA  EC62  F004         	call	_ADC_StartConversion
  2283                           
  2284                           ;adc.c: 119: break;
  2285  0001EE  D070               	goto	i2l1556
  2286  0001F0                     i2l1538:
  2287                           
  2288                           ;adc.c: 121: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2289  0001F0  0E01               	movlw	low _Temp_Adc
  2290  0001F2  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2291  0001F4  0E00               	movlw	high _Temp_Adc
  2292  0001F6  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2293  0001F8  90D8               	bcf	status,0,c
  2294  0001FA  341D               	rlcf	_ADC_Buffer_Point,w,c
  2295  0001FC  6ED9               	movwf	fsr2l,c
  2296  0001FE  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2297  000200  6EDA               	movwf	fsr2h,c
  2298  000202  502E               	movf	??_ADC_ISR,w,c
  2299  000204  26D9               	addwf	fsr2l,f,c
  2300  000206  502F               	movf	??_ADC_ISR+1,w,c
  2301  000208  22DA               	addwfc	fsr2h,f,c
  2302  00020A  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2303  00020E  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2304                           
  2305                           ;adc.c: 122: ADC_StartConversion(Temp1);
  2306  000212  0E0E               	movlw	14
  2307  000214  EC62  F004         	call	_ADC_StartConversion
  2308                           
  2309                           ;adc.c: 123: break;
  2310  000218  D05B               	goto	i2l1556
  2311  00021A                     i2l1542:
  2312                           
  2313                           ;adc.c: 125: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2314  00021A  0E01               	movlw	low _Temp_Adc
  2315  00021C  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2316  00021E  0E00               	movlw	high _Temp_Adc
  2317  000220  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2318  000222  90D8               	bcf	status,0,c
  2319  000224  341D               	rlcf	_ADC_Buffer_Point,w,c
  2320  000226  6ED9               	movwf	fsr2l,c
  2321  000228  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2322  00022A  6EDA               	movwf	fsr2h,c
  2323  00022C  502E               	movf	??_ADC_ISR,w,c
  2324  00022E  26D9               	addwf	fsr2l,f,c
  2325  000230  502F               	movf	??_ADC_ISR+1,w,c
  2326  000232  22DA               	addwfc	fsr2h,f,c
  2327  000234  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2328  000238  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2329                           
  2330                           ;adc.c: 126: ADC_StartConversion(Temp2);
  2331  00023C  0E14               	movlw	20
  2332  00023E  EC62  F004         	call	_ADC_StartConversion
  2333                           
  2334                           ;adc.c: 127: break;
  2335  000242  D046               	goto	i2l1556
  2336  000244                     i2l1546:
  2337                           
  2338                           ;adc.c: 129: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  2339  000244  0E01               	movlw	low _Temp_Adc
  2340  000246  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2341  000248  0E00               	movlw	high _Temp_Adc
  2342  00024A  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2343  00024C  90D8               	bcf	status,0,c
  2344  00024E  341D               	rlcf	_ADC_Buffer_Point,w,c
  2345  000250  6ED9               	movwf	fsr2l,c
  2346  000252  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2347  000254  6EDA               	movwf	fsr2h,c
  2348  000256  502E               	movf	??_ADC_ISR,w,c
  2349  000258  26D9               	addwf	fsr2l,f,c
  2350  00025A  502F               	movf	??_ADC_ISR+1,w,c
  2351  00025C  22DA               	addwfc	fsr2h,f,c
  2352  00025E  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2353  000262  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2354                           
  2355                           ;adc.c: 130: ADC_StartConversion(Temp2);
  2356  000266  0E14               	movlw	20
  2357  000268  EC62  F004         	call	_ADC_StartConversion
  2358                           
  2359                           ;adc.c: 131: break;
  2360  00026C  D031               	goto	i2l1556
  2361  00026E                     i2l1550:
  2362                           
  2363                           ;adc.c: 133: Temp_Aquire = 0;
  2364  00026E  0E00               	movlw	0
  2365  000270  6E23               	movwf	_Temp_Aquire,c
  2366                           
  2367                           ;adc.c: 134: Temp_Done = 1;
  2368  000272  0E00               	movlw	0
  2369  000274  6E20               	movwf	_Temp_Done+1,c
  2370  000276  0E01               	movlw	1
  2371  000278  6E1F               	movwf	_Temp_Done,c
  2372                           
  2373                           ;adc.c: 135: break;
  2374  00027A  D02A               	goto	i2l1556
  2375  00027C                     i2l1554:
  2376  00027C  C01D  F02E         	movff	_ADC_Buffer_Point,??_ADC_ISR
  2377  000280  C01E  F02F         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  2378                           
  2379                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2380                           ; Switch size 1, requested type "space"
  2381                           ; Number of cases is 1, Range of values is 0 to 0
  2382                           ; switch strategies available:
  2383                           ; Name         Instructions Cycles
  2384                           ; simple_byte            4     3 (average)
  2385                           ;	Chosen strategy is simple_byte
  2386  000284  502F               	movf	??_ADC_ISR+1,w,c
  2387  000286  0A00               	xorlw	0	; case 0
  2388  000288  A4D8               	btfss	status,2,c
  2389  00028A  D022               	goto	i2l1556
  2390                           
  2391                           ; Switch size 1, requested type "space"
  2392                           ; Number of cases is 11, Range of values is 0 to 10
  2393                           ; switch strategies available:
  2394                           ; Name         Instructions Cycles
  2395                           ; simple_byte           34    18 (average)
  2396                           ;	Chosen strategy is simple_byte
  2397  00028C  502E               	movf	??_ADC_ISR,w,c
  2398  00028E  0A00               	xorlw	0	; case 0
  2399  000290  B4D8               	btfsc	status,2,c
  2400  000292  D71B               	goto	i2l1510
  2401  000294  0A01               	xorlw	1	; case 1
  2402  000296  B4D8               	btfsc	status,2,c
  2403  000298  D72D               	goto	i2l1514
  2404  00029A  0A03               	xorlw	3	; case 2
  2405  00029C  B4D8               	btfsc	status,2,c
  2406  00029E  D73F               	goto	i2l1518
  2407  0002A0  0A01               	xorlw	1	; case 3
  2408  0002A2  B4D8               	btfsc	status,2,c
  2409  0002A4  D751               	goto	i2l1522
  2410  0002A6  0A07               	xorlw	7	; case 4
  2411  0002A8  B4D8               	btfsc	status,2,c
  2412  0002AA  D763               	goto	i2l1526
  2413  0002AC  0A01               	xorlw	1	; case 5
  2414  0002AE  B4D8               	btfsc	status,2,c
  2415  0002B0  D775               	goto	i2l1530
  2416  0002B2  0A03               	xorlw	3	; case 6
  2417  0002B4  B4D8               	btfsc	status,2,c
  2418  0002B6  D787               	goto	i2l1534
  2419  0002B8  0A01               	xorlw	1	; case 7
  2420  0002BA  B4D8               	btfsc	status,2,c
  2421  0002BC  D799               	goto	i2l1538
  2422  0002BE  0A0F               	xorlw	15	; case 8
  2423  0002C0  B4D8               	btfsc	status,2,c
  2424  0002C2  D7AB               	goto	i2l1542
  2425  0002C4  0A01               	xorlw	1	; case 9
  2426  0002C6  B4D8               	btfsc	status,2,c
  2427  0002C8  D7BD               	goto	i2l1546
  2428  0002CA  0A03               	xorlw	3	; case 10
  2429  0002CC  B4D8               	btfsc	status,2,c
  2430  0002CE  D7CF               	goto	i2l1550
  2431  0002D0                     i2l1556:
  2432                           
  2433                           ;adc.c: 137: ADC_Buffer_Point++;
  2434  0002D0  4A1D               	infsnz	_ADC_Buffer_Point,f,c
  2435  0002D2  2A1E               	incf	_ADC_Buffer_Point+1,f,c
  2436  0002D4                     i2l1558:
  2437                           
  2438                           ;adc.c: 138: }
  2439                           ;adc.c: 139: if (Volt_Aquire){
  2440  0002D4  5024               	movf	_Volt_Aquire,w,c
  2441  0002D6  B4D8               	btfsc	status,2,c
  2442  0002D8  0012               	return	
  2443                           
  2444                           ;adc.c: 141: ADC_Result = ADC_GetConversionResult();
  2445  0002DA  EC7B  F004         	call	_ADC_GetConversionResult	;wreg free
  2446  0002DE  C02A  F030         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  2447  0002E2  C02B  F031         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  2448                           
  2449                           ;adc.c: 142: switch ( ADC_Buffer_Point )
  2450  0002E6  D0D9               	goto	i2l1606
  2451  0002E8                     i2l1562:
  2452                           
  2453                           ;adc.c: 145: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2454  0002E8  0E9C               	movlw	low _Battery_Adc
  2455  0002EA  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2456  0002EC  0E00               	movlw	high _Battery_Adc
  2457  0002EE  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2458  0002F0  90D8               	bcf	status,0,c
  2459  0002F2  341D               	rlcf	_ADC_Buffer_Point,w,c
  2460  0002F4  6ED9               	movwf	fsr2l,c
  2461  0002F6  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2462  0002F8  6EDA               	movwf	fsr2h,c
  2463  0002FA  502E               	movf	??_ADC_ISR,w,c
  2464  0002FC  26D9               	addwf	fsr2l,f,c
  2465  0002FE  502F               	movf	??_ADC_ISR+1,w,c
  2466  000300  22DA               	addwfc	fsr2h,f,c
  2467  000302  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2468  000306  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2469                           
  2470                           ;adc.c: 146: ADC_StartConversion(Battery1);
  2471  00030A  0E01               	movlw	1
  2472  00030C  EC62  F004         	call	_ADC_StartConversion
  2473                           
  2474                           ;adc.c: 147: break;
  2475  000310  D0EE               	goto	i2l1608
  2476  000312                     i2l1566:
  2477                           
  2478                           ;adc.c: 149: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2479  000312  0E9C               	movlw	low _Battery_Adc
  2480  000314  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2481  000316  0E00               	movlw	high _Battery_Adc
  2482  000318  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2483  00031A  90D8               	bcf	status,0,c
  2484  00031C  341D               	rlcf	_ADC_Buffer_Point,w,c
  2485  00031E  6ED9               	movwf	fsr2l,c
  2486  000320  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2487  000322  6EDA               	movwf	fsr2h,c
  2488  000324  502E               	movf	??_ADC_ISR,w,c
  2489  000326  26D9               	addwf	fsr2l,f,c
  2490  000328  502F               	movf	??_ADC_ISR+1,w,c
  2491  00032A  22DA               	addwfc	fsr2h,f,c
  2492  00032C  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2493  000330  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2494                           
  2495                           ;adc.c: 150: ADC_StartConversion(Battery2);
  2496  000334  0E03               	movlw	3
  2497  000336  EC62  F004         	call	_ADC_StartConversion
  2498                           
  2499                           ;adc.c: 151: break;
  2500  00033A  D0D9               	goto	i2l1608
  2501  00033C                     i2l1570:
  2502                           
  2503                           ;adc.c: 153: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2504  00033C  0E9C               	movlw	low _Battery_Adc
  2505  00033E  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2506  000340  0E00               	movlw	high _Battery_Adc
  2507  000342  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2508  000344  90D8               	bcf	status,0,c
  2509  000346  341D               	rlcf	_ADC_Buffer_Point,w,c
  2510  000348  6ED9               	movwf	fsr2l,c
  2511  00034A  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2512  00034C  6EDA               	movwf	fsr2h,c
  2513  00034E  502E               	movf	??_ADC_ISR,w,c
  2514  000350  26D9               	addwf	fsr2l,f,c
  2515  000352  502F               	movf	??_ADC_ISR+1,w,c
  2516  000354  22DA               	addwfc	fsr2h,f,c
  2517  000356  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2518  00035A  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2519                           
  2520                           ;adc.c: 154: ADC_StartConversion(Battery3);
  2521  00035E  0E04               	movlw	4
  2522  000360  EC62  F004         	call	_ADC_StartConversion
  2523                           
  2524                           ;adc.c: 155: break;
  2525  000364  D0C4               	goto	i2l1608
  2526  000366                     i2l1574:
  2527                           
  2528                           ;adc.c: 157: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2529  000366  0E9C               	movlw	low _Battery_Adc
  2530  000368  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2531  00036A  0E00               	movlw	high _Battery_Adc
  2532  00036C  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2533  00036E  90D8               	bcf	status,0,c
  2534  000370  341D               	rlcf	_ADC_Buffer_Point,w,c
  2535  000372  6ED9               	movwf	fsr2l,c
  2536  000374  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2537  000376  6EDA               	movwf	fsr2h,c
  2538  000378  502E               	movf	??_ADC_ISR,w,c
  2539  00037A  26D9               	addwf	fsr2l,f,c
  2540  00037C  502F               	movf	??_ADC_ISR+1,w,c
  2541  00037E  22DA               	addwfc	fsr2h,f,c
  2542  000380  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2543  000384  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2544                           
  2545                           ;adc.c: 158: ADC_StartConversion(Battery4);
  2546  000388  0E05               	movlw	5
  2547  00038A  EC62  F004         	call	_ADC_StartConversion
  2548                           
  2549                           ;adc.c: 159: break;
  2550  00038E  D0AF               	goto	i2l1608
  2551  000390                     i2l1578:
  2552                           
  2553                           ;adc.c: 161: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2554  000390  0E9C               	movlw	low _Battery_Adc
  2555  000392  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2556  000394  0E00               	movlw	high _Battery_Adc
  2557  000396  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2558  000398  90D8               	bcf	status,0,c
  2559  00039A  341D               	rlcf	_ADC_Buffer_Point,w,c
  2560  00039C  6ED9               	movwf	fsr2l,c
  2561  00039E  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2562  0003A0  6EDA               	movwf	fsr2h,c
  2563  0003A2  502E               	movf	??_ADC_ISR,w,c
  2564  0003A4  26D9               	addwf	fsr2l,f,c
  2565  0003A6  502F               	movf	??_ADC_ISR+1,w,c
  2566  0003A8  22DA               	addwfc	fsr2h,f,c
  2567  0003AA  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2568  0003AE  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2569                           
  2570                           ;adc.c: 162: ADC_StartConversion(Battery5);
  2571  0003B2  0E18               	movlw	24
  2572  0003B4  EC62  F004         	call	_ADC_StartConversion
  2573                           
  2574                           ;adc.c: 163: break;
  2575  0003B8  D09A               	goto	i2l1608
  2576  0003BA                     i2l1582:
  2577                           
  2578                           ;adc.c: 165: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2579  0003BA  0E9C               	movlw	low _Battery_Adc
  2580  0003BC  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2581  0003BE  0E00               	movlw	high _Battery_Adc
  2582  0003C0  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2583  0003C2  90D8               	bcf	status,0,c
  2584  0003C4  341D               	rlcf	_ADC_Buffer_Point,w,c
  2585  0003C6  6ED9               	movwf	fsr2l,c
  2586  0003C8  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2587  0003CA  6EDA               	movwf	fsr2h,c
  2588  0003CC  502E               	movf	??_ADC_ISR,w,c
  2589  0003CE  26D9               	addwf	fsr2l,f,c
  2590  0003D0  502F               	movf	??_ADC_ISR+1,w,c
  2591  0003D2  22DA               	addwfc	fsr2h,f,c
  2592  0003D4  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2593  0003D8  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2594                           
  2595                           ;adc.c: 166: ADC_StartConversion(Battery6);
  2596  0003DC  0E1A               	movlw	26
  2597  0003DE  EC62  F004         	call	_ADC_StartConversion
  2598                           
  2599                           ;adc.c: 167: break;
  2600  0003E2  D085               	goto	i2l1608
  2601  0003E4                     i2l1586:
  2602                           
  2603                           ;adc.c: 169: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2604  0003E4  0E9C               	movlw	low _Battery_Adc
  2605  0003E6  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2606  0003E8  0E00               	movlw	high _Battery_Adc
  2607  0003EA  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2608  0003EC  90D8               	bcf	status,0,c
  2609  0003EE  341D               	rlcf	_ADC_Buffer_Point,w,c
  2610  0003F0  6ED9               	movwf	fsr2l,c
  2611  0003F2  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2612  0003F4  6EDA               	movwf	fsr2h,c
  2613  0003F6  502E               	movf	??_ADC_ISR,w,c
  2614  0003F8  26D9               	addwf	fsr2l,f,c
  2615  0003FA  502F               	movf	??_ADC_ISR+1,w,c
  2616  0003FC  22DA               	addwfc	fsr2h,f,c
  2617  0003FE  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2618  000402  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2619                           
  2620                           ;adc.c: 170: ADC_StartConversion(Battery7);
  2621  000406  0E1B               	movlw	27
  2622  000408  EC62  F004         	call	_ADC_StartConversion
  2623                           
  2624                           ;adc.c: 171: break;
  2625  00040C  D070               	goto	i2l1608
  2626  00040E                     i2l1590:
  2627                           
  2628                           ;adc.c: 173: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2629  00040E  0E9C               	movlw	low _Battery_Adc
  2630  000410  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2631  000412  0E00               	movlw	high _Battery_Adc
  2632  000414  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2633  000416  90D8               	bcf	status,0,c
  2634  000418  341D               	rlcf	_ADC_Buffer_Point,w,c
  2635  00041A  6ED9               	movwf	fsr2l,c
  2636  00041C  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2637  00041E  6EDA               	movwf	fsr2h,c
  2638  000420  502E               	movf	??_ADC_ISR,w,c
  2639  000422  26D9               	addwf	fsr2l,f,c
  2640  000424  502F               	movf	??_ADC_ISR+1,w,c
  2641  000426  22DA               	addwfc	fsr2h,f,c
  2642  000428  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2643  00042C  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2644                           
  2645                           ;adc.c: 174: ADC_StartConversion(Battery8);
  2646  000430  0E08               	movlw	8
  2647  000432  EC62  F004         	call	_ADC_StartConversion
  2648                           
  2649                           ;adc.c: 175: break;
  2650  000436  D05B               	goto	i2l1608
  2651  000438                     i2l1594:
  2652                           
  2653                           ;adc.c: 177: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2654  000438  0E9C               	movlw	low _Battery_Adc
  2655  00043A  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2656  00043C  0E00               	movlw	high _Battery_Adc
  2657  00043E  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2658  000440  90D8               	bcf	status,0,c
  2659  000442  341D               	rlcf	_ADC_Buffer_Point,w,c
  2660  000444  6ED9               	movwf	fsr2l,c
  2661  000446  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2662  000448  6EDA               	movwf	fsr2h,c
  2663  00044A  502E               	movf	??_ADC_ISR,w,c
  2664  00044C  26D9               	addwf	fsr2l,f,c
  2665  00044E  502F               	movf	??_ADC_ISR+1,w,c
  2666  000450  22DA               	addwfc	fsr2h,f,c
  2667  000452  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2668  000456  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2669                           
  2670                           ;adc.c: 178: ADC_StartConversion(Battery9);
  2671  00045A  0E0B               	movlw	11
  2672  00045C  EC62  F004         	call	_ADC_StartConversion
  2673                           
  2674                           ;adc.c: 179: break;
  2675  000460  D046               	goto	i2l1608
  2676  000462                     i2l1598:
  2677                           
  2678                           ;adc.c: 181: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  2679  000462  0E9C               	movlw	low _Battery_Adc
  2680  000464  6E2E               	movwf	??_ADC_ISR& (0+255),c
  2681  000466  0E00               	movlw	high _Battery_Adc
  2682  000468  6E2F               	movwf	(??_ADC_ISR+1)& (0+255),c
  2683  00046A  90D8               	bcf	status,0,c
  2684  00046C  341D               	rlcf	_ADC_Buffer_Point,w,c
  2685  00046E  6ED9               	movwf	fsr2l,c
  2686  000470  341E               	rlcf	_ADC_Buffer_Point+1,w,c
  2687  000472  6EDA               	movwf	fsr2h,c
  2688  000474  502E               	movf	??_ADC_ISR,w,c
  2689  000476  26D9               	addwf	fsr2l,f,c
  2690  000478  502F               	movf	??_ADC_ISR+1,w,c
  2691  00047A  22DA               	addwfc	fsr2h,f,c
  2692  00047C  C030  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  2693  000480  C031  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  2694                           
  2695                           ;adc.c: 182: ADC_StartConversion(Battery10);
  2696  000484  0E0D               	movlw	13
  2697  000486  EC62  F004         	call	_ADC_StartConversion
  2698                           
  2699                           ;adc.c: 183: break;
  2700  00048A  D031               	goto	i2l1608
  2701  00048C                     i2l1602:
  2702                           
  2703                           ;adc.c: 185: Volt_Aquire = 0;
  2704  00048C  0E00               	movlw	0
  2705  00048E  6E24               	movwf	_Volt_Aquire,c
  2706                           
  2707                           ;adc.c: 186: Volt_Done = 1;
  2708  000490  0E00               	movlw	0
  2709  000492  6E22               	movwf	_Volt_Done+1,c
  2710  000494  0E01               	movlw	1
  2711  000496  6E21               	movwf	_Volt_Done,c
  2712                           
  2713                           ;adc.c: 187: break;
  2714  000498  D02A               	goto	i2l1608
  2715  00049A                     i2l1606:
  2716  00049A  C01D  F02E         	movff	_ADC_Buffer_Point,??_ADC_ISR
  2717  00049E  C01E  F02F         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  2718                           
  2719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2720                           ; Switch size 1, requested type "space"
  2721                           ; Number of cases is 1, Range of values is 0 to 0
  2722                           ; switch strategies available:
  2723                           ; Name         Instructions Cycles
  2724                           ; simple_byte            4     3 (average)
  2725                           ;	Chosen strategy is simple_byte
  2726  0004A2  502F               	movf	??_ADC_ISR+1,w,c
  2727  0004A4  0A00               	xorlw	0	; case 0
  2728  0004A6  A4D8               	btfss	status,2,c
  2729  0004A8  D022               	goto	i2l1608
  2730                           
  2731                           ; Switch size 1, requested type "space"
  2732                           ; Number of cases is 11, Range of values is 0 to 10
  2733                           ; switch strategies available:
  2734                           ; Name         Instructions Cycles
  2735                           ; simple_byte           34    18 (average)
  2736                           ;	Chosen strategy is simple_byte
  2737  0004AA  502E               	movf	??_ADC_ISR,w,c
  2738  0004AC  0A00               	xorlw	0	; case 0
  2739  0004AE  B4D8               	btfsc	status,2,c
  2740  0004B0  D71B               	goto	i2l1562
  2741  0004B2  0A01               	xorlw	1	; case 1
  2742  0004B4  B4D8               	btfsc	status,2,c
  2743  0004B6  D72D               	goto	i2l1566
  2744  0004B8  0A03               	xorlw	3	; case 2
  2745  0004BA  B4D8               	btfsc	status,2,c
  2746  0004BC  D73F               	goto	i2l1570
  2747  0004BE  0A01               	xorlw	1	; case 3
  2748  0004C0  B4D8               	btfsc	status,2,c
  2749  0004C2  D751               	goto	i2l1574
  2750  0004C4  0A07               	xorlw	7	; case 4
  2751  0004C6  B4D8               	btfsc	status,2,c
  2752  0004C8  D763               	goto	i2l1578
  2753  0004CA  0A01               	xorlw	1	; case 5
  2754  0004CC  B4D8               	btfsc	status,2,c
  2755  0004CE  D775               	goto	i2l1582
  2756  0004D0  0A03               	xorlw	3	; case 6
  2757  0004D2  B4D8               	btfsc	status,2,c
  2758  0004D4  D787               	goto	i2l1586
  2759  0004D6  0A01               	xorlw	1	; case 7
  2760  0004D8  B4D8               	btfsc	status,2,c
  2761  0004DA  D799               	goto	i2l1590
  2762  0004DC  0A0F               	xorlw	15	; case 8
  2763  0004DE  B4D8               	btfsc	status,2,c
  2764  0004E0  D7AB               	goto	i2l1594
  2765  0004E2  0A01               	xorlw	1	; case 9
  2766  0004E4  B4D8               	btfsc	status,2,c
  2767  0004E6  D7BD               	goto	i2l1598
  2768  0004E8  0A03               	xorlw	3	; case 10
  2769  0004EA  B4D8               	btfsc	status,2,c
  2770  0004EC  D7CF               	goto	i2l1602
  2771  0004EE                     i2l1608:
  2772                           
  2773                           ;adc.c: 189: ADC_Buffer_Point++;
  2774  0004EE  4A1D               	infsnz	_ADC_Buffer_Point,f,c
  2775  0004F0  2A1E               	incf	_ADC_Buffer_Point+1,f,c
  2776  0004F2  0012               	return	
  2777  0004F4                     __end_of_ADC_ISR:
  2778                           	opt stack 0
  2779                           pclatu	equ	0xFFB
  2780                           pclath	equ	0xFFA
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           prodh	equ	0xFF4
  2786                           prodl	equ	0xFF3
  2787                           intcon	equ	0xFF2
  2788                           intcon2	equ	0xFF1
  2789                           postinc0	equ	0xFEE
  2790                           fsr0h	equ	0xFEA
  2791                           fsr0l	equ	0xFE9
  2792                           wreg	equ	0xFE8
  2793                           fsr1h	equ	0xFE2
  2794                           fsr1l	equ	0xFE1
  2795                           indf2	equ	0xFDF
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _ADC_StartConversion *****************
  2803 ;; Defined at:
  2804 ;;		line 36 in file "mcc_generated_files/adc.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  channel         1    wreg     enum E8837
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  channel         1    1[COMRAM] enum E8837
  2809 ;; Return value:  Size  Location     Type
  2810 ;;		None               void
  2811 ;; Registers used:
  2812 ;;		wreg, status,2, status,0
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2818 ;;      Params:         0       0       0       0       0       0       0
  2819 ;;      Locals:         1       0       0       0       0       0       0
  2820 ;;      Temps:          1       0       0       0       0       0       0
  2821 ;;      Totals:         2       0       0       0       0       0       0
  2822 ;;Total ram usage:        2 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_ADC_ISR
  2828 ;;		_Battery_Read
  2829 ;;		_Temp_Read
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text19
  2834  0008C4                     __ptext19:
  2835                           	opt stack 0
  2836  0008C4                     _ADC_StartConversion:
  2837                           	opt stack 25
  2838                           
  2839                           ;incstack = 0
  2840                           ;ADC_StartConversion@channel stored from wreg
  2841  0008C4  6E2B               	movwf	ADC_StartConversion@channel,c
  2842                           
  2843                           ;adc.c: 39: ADCON0bits.CHS = channel;
  2844  0008C6  C02B  F02A         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  2845  0008CA  462A               	rlncf	??_ADC_StartConversion,f,c
  2846  0008CC  462A               	rlncf	??_ADC_StartConversion,f,c
  2847  0008CE  50C2               	movf	4034,w,c	;volatile
  2848  0008D0  182A               	xorwf	??_ADC_StartConversion,w,c
  2849  0008D2  0B83               	andlw	-125
  2850  0008D4  182A               	xorwf	??_ADC_StartConversion,w,c
  2851  0008D6  6EC2               	movwf	4034,c	;volatile
  2852                           
  2853                           ;adc.c: 42: ADCON0bits.ADON = 1;
  2854  0008D8  80C2               	bsf	4034,0,c	;volatile
  2855                           
  2856                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
  2857  0008DA  82C2               	bsf	4034,1,c	;volatile
  2858  0008DC  0012               	return	
  2859  0008DE                     __end_of_ADC_StartConversion:
  2860                           	opt stack 0
  2861                           pclatu	equ	0xFFB
  2862                           pclath	equ	0xFFA
  2863                           tblptru	equ	0xFF8
  2864                           tblptrh	equ	0xFF7
  2865                           tblptrl	equ	0xFF6
  2866                           tablat	equ	0xFF5
  2867                           prodh	equ	0xFF4
  2868                           prodl	equ	0xFF3
  2869                           intcon	equ	0xFF2
  2870                           intcon2	equ	0xFF1
  2871                           postinc0	equ	0xFEE
  2872                           fsr0h	equ	0xFEA
  2873                           fsr0l	equ	0xFE9
  2874                           wreg	equ	0xFE8
  2875                           fsr1h	equ	0xFE2
  2876                           fsr1l	equ	0xFE1
  2877                           indf2	equ	0xFDF
  2878                           postinc2	equ	0xFDE
  2879                           postdec2	equ	0xFDD
  2880                           fsr2h	equ	0xFDA
  2881                           fsr2l	equ	0xFD9
  2882                           status	equ	0xFD8
  2883                           
  2884 ;; *************** function _ADC_GetConversionResult *****************
  2885 ;; Defined at:
  2886 ;;		line 55 in file "mcc_generated_files/adc.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;		None
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;		None
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2    0[COMRAM] unsigned int 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2900 ;;      Params:         2       0       0       0       0       0       0
  2901 ;;      Locals:         0       0       0       0       0       0       0
  2902 ;;      Temps:          2       0       0       0       0       0       0
  2903 ;;      Totals:         4       0       0       0       0       0       0
  2904 ;;Total ram usage:        4 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_ADC_ISR
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text20
  2914  0008F6                     __ptext20:
  2915                           	opt stack 0
  2916  0008F6                     _ADC_GetConversionResult:
  2917                           	opt stack 25
  2918                           
  2919                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
  2920                           
  2921                           ;incstack = 0
  2922  0008F6  50C4               	movf	4036,w,c	;volatile
  2923  0008F8  6E2D               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  2924  0008FA  6A2C               	clrf	??_ADC_GetConversionResult& (0+255),c
  2925  0008FC  50C3               	movf	4035,w,c	;volatile
  2926  0008FE  242C               	addwf	??_ADC_GetConversionResult,w,c
  2927  000900  6E2A               	movwf	?_ADC_GetConversionResult,c
  2928  000902  0E00               	movlw	0
  2929  000904  202D               	addwfc	??_ADC_GetConversionResult+1,w,c
  2930  000906  6E2B               	movwf	?_ADC_GetConversionResult+1,c
  2931  000908  0012               	return	
  2932  00090A                     __end_of_ADC_GetConversionResult:
  2933                           	opt stack 0
  2934  0000                     pclatu	equ	0xFFB
  2935                           pclath	equ	0xFFA
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           intcon	equ	0xFF2
  2943                           intcon2	equ	0xFF1
  2944                           postinc0	equ	0xFEE
  2945                           fsr0h	equ	0xFEA
  2946                           fsr0l	equ	0xFE9
  2947                           wreg	equ	0xFE8
  2948                           fsr1h	equ	0xFE2
  2949                           fsr1l	equ	0xFE1
  2950                           indf2	equ	0xFDF
  2951                           postinc2	equ	0xFDE
  2952                           postdec2	equ	0xFDD
  2953                           fsr2h	equ	0xFDA
  2954                           fsr2l	equ	0xFD9
  2955                           status	equ	0xFD8
  2956                           pclatu	equ	0xFFB
  2957                           pclath	equ	0xFFA
  2958                           tblptru	equ	0xFF8
  2959                           tblptrh	equ	0xFF7
  2960                           tblptrl	equ	0xFF6
  2961                           tablat	equ	0xFF5
  2962                           prodh	equ	0xFF4
  2963                           prodl	equ	0xFF3
  2964                           intcon	equ	0xFF2
  2965                           intcon2	equ	0xFF1
  2966                           postinc0	equ	0xFEE
  2967                           fsr0h	equ	0xFEA
  2968                           fsr0l	equ	0xFE9
  2969                           wreg	equ	0xFE8
  2970                           fsr1h	equ	0xFE2
  2971                           fsr1l	equ	0xFE1
  2972                           indf2	equ	0xFDF
  2973                           postinc2	equ	0xFDE
  2974                           postdec2	equ	0xFDD
  2975                           fsr2h	equ	0xFDA
  2976                           fsr2l	equ	0xFD9
  2977                           status	equ	0xFD8
  2978                           
  2979                           	psect	rparam
  2980  0000                     pclatu	equ	0xFFB
  2981                           pclath	equ	0xFFA
  2982                           tblptru	equ	0xFF8
  2983                           tblptrh	equ	0xFF7
  2984                           tblptrl	equ	0xFF6
  2985                           tablat	equ	0xFF5
  2986                           prodh	equ	0xFF4
  2987                           prodl	equ	0xFF3
  2988                           intcon	equ	0xFF2
  2989                           intcon2	equ	0xFF1
  2990                           postinc0	equ	0xFEE
  2991                           fsr0h	equ	0xFEA
  2992                           fsr0l	equ	0xFE9
  2993                           wreg	equ	0xFE8
  2994                           fsr1h	equ	0xFE2
  2995                           fsr1l	equ	0xFE1
  2996                           indf2	equ	0xFDF
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         129
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     28      72
    BANK0           160     17     105
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _Temp_Fault->___wmul
    _Battery_Fault->___wmul
    ___ftge->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _ADC_ISR->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_Battery_Fault
    _main->_Temp_Fault
    _Temp_Fault->___ftge
    _Battery_Fault->___ftge

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5    2843
                                             12 BANK0      5     0      5
                      _Battery_Fault
                  _SYSTEM_Initialize
                         _Temp_Fault
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    1406
                                              9 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    1437
                                              9 BANK0      3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     772
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     522
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0     465
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             3     3      0       0
                                              0 COMRAM     3     3      0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              4     4      0     465
                                              4 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (6) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     11      69       4       65.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1C      48       1       75.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B1       9        0.0%
DATA                 0      0      B1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Mar 25 23:54:28 2015

           _eusart1TxBufferRemaining 0048                  ___wmul@multiplicand 0042  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0046                      __end_of_ADC_ISR 04F4  
                                prod 000FF3                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                                 l1800 053A  
                               l1810 05C4                                 l1804 0580  
                               l1840 0714                                 l1826 0692  
                               l1858 0878                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               _TMR1 000FCE                                 _WPUB 000F61  
                               _main 0870                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                      __CFG_BORV$190 000000                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                  ADC_ISR@ADC_Result 0030       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 0918                                ?_main 00C4  
                    _TMR1_StartTimer 0924                                _T1CON 000FCD  
                              _LATC0 007C58                                _LATC1 007C59  
                              _LATA6 007C4E                       __CFG_DEBUG$OFF 000000  
                              i2l122 07D2                                i2l270 0058  
                              i2l272 0064                                i2l276 006E  
                              i2l268 004C                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
   __size_of_ADC_GetConversionResult 0014                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 07A6  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     __end_of_TMR1_ISR 08C4  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                 __CFG_MCLRE$EXTMCLR 000000              __end_of_TMR1_Initialize 0870  
                        _Battery_Adc 009C                                tablat 000FF5  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                     __CFG_PBADEN$ON 000000                      __initialization 082C  
         __end_of_EUSART1_Initialize 07A6                         __end_of_main 0890  
                          ??_ADC_ISR 002E          ?_INTERRUPT_InterruptManager 002A  
                             ??_main 0046                        __activetblptr 000002  
         ADC_StartConversion@channel 002B                ?_EUSART1_Transmit_ISR 002A  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                             _T1GCON 000FCC                               _RC1REG 000FAE  
                             _RC1STA 000FAB                               i2l1116 07CE  
                             i2l1510 00CA                               i2l1502 0802  
                             i2l1602 048C                               i2l1530 019C  
                             i2l1522 0148                               i2l1514 00F4  
                             i2l1606 049A                               i2l1550 026E  
                             i2l1542 021A                               i2l1534 01C6  
                             i2l1526 0172                               i2l1518 011E  
                             i2l1608 04EE                               i2l1570 033C  
                             i2l1562 02E8                               i2l1546 0244  
                             i2l1538 01F0                               i2l1554 027C  
                             i2l1556 02D0                               i2l1590 040E  
                             i2l1582 03BA                               i2l1574 0366  
                             i2l1566 0312                               i2l1558 02D4  
                             i2l1494 07DE                       __CFG_WDTEN$OFF 000000  
                             i2l1594 0438                               i2l1586 03E4  
                             i2l1578 0390                               i2l1598 0462  
                             _RCREG1 000FAE                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _TX1REG 000FAD  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                         _Temp_Fault 069A                       __CFG_XINST$OFF 000000  
                             ___ftge 04F4              __end_of_TMR1_StartTimer 0928  
                             ___wmul 0806                       __CFG_STVREN$ON 000000  
                             clear_0 0832                               clear_1 083E  
                       _Battery_Volt 0060                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                    _eusart1RxBuffer 00B0        __size_of_INTERRUPT_Initialize 000C  
              __end_of_TMR1_CallBack 092A                      _eusart1TxBuffer 0015  
                   ?_TMR1_Initialize 002A                    _SYSTEM_Initialize 0890  
                         __accesstop 0060              __end_of__initialization 0844  
                         ___ftge@ff1 00B8                           ___ftge@ff2 00BB  
                 ?_SYSTEM_Initialize 002A         __size_of_ADC_StartConversion 001A  
                     __pcstackCOMRAM 002A                  ??_SYSTEM_Initialize 0040  
                          ?_TMR1_ISR 002A               ??_EUSART1_Transmit_ISR 002A  
            _ADC_GetConversionResult 08F6          __end_of_EUSART1_Receive_ISR 0806  
          __end_of_SYSTEM_Initialize 08AA                        _eusart1RxHead 0026  
                      _eusart1TxHead 0028                        _eusart1RxTail 0027  
                         __pbssBANK0 0060                        _eusart1TxTail 0029  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 0046  
                        ?_Temp_Fault 002A                   __CFG_CCP2MX$PORTC1 000000  
                        Temp_Fault@i 00C2                              ?___ftge 00B8  
                            ?___wmul 0040                     ?_TMR1_StartTimer 002A  
                         ??_TMR1_ISR 002A                   __CFG_CCP3MX$PORTB5 000000  
                            _ADC_ISR 00AC              __size_of_ADC_Initialize 0018  
             __size_of_Battery_Fault 00D2                      Temp_Fault@fault 00C1  
                     Battery_Fault@i 00C2                              _OSCCON2 000FD2  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                          _Temp_Aquire 0023  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                      __size_of___ftge 00D4  
                    __size_of___wmul 0026            ??_ADC_GetConversionResult 002C  
                            __pcinit 082C                              __ramtop 0600  
                            __ptext0 0870                              __ptext1 069A  
                            __ptext2 0890                              __ptext3 084E  
                            __ptext4 0924                              __ptext5 071C  
                            __ptext6 090A                              __ptext7 0918  
                            __ptext8 076A                              __ptext9 08DE  
                          _T1CONbits 000FCD                _OSCILLATOR_Initialize 090A  
                __size_of_Temp_Fault 0082                   _EUSART1_Initialize 076A  
           ??_PIN_MANAGER_Initialize 0040           __size_of_SYSTEM_Initialize 001A  
               end_of_initialization 0844                  ?_EUSART1_Initialize 002A  
                      __Lmediumconst 0000                        _Battery_Fault 05C8  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                 ??_EUSART1_Initialize 0040  
                _ADC_StartConversion 08C4                          _Volt_Aquire 0024  
                     ?_Battery_Fault 002A                 ?_ADC_StartConversion 002A  
       __end_of_INTERRUPT_Initialize 0924                       __end_of___ftge 05C8  
                     __end_of___wmul 082C                    __size_of_TMR1_ISR 001A  
                     _ADC_Initialize 08DE               ?_OSCILLATOR_Initialize 002A  
                start_initialization 082C      __size_of_PIN_MANAGER_Initialize 004E  
                       ??_Temp_Fault 0046                            _Temp_DegF 007E  
                          _Temp_Done 001F                ??_ADC_StartConversion 002A  
           __size_of_TMR1_Initialize 0022                             ??___ftge 00BE  
                           ??___wmul 0044               __end_of_ADC_Initialize 08F6  
                           ?_ADC_ISR 002A               __size_of_TMR1_CallBack 0002  
                     _eusart1RxCount 0025                            _Volt_Done 0021  
                        __pbssCOMRAM 0001        __size_of_EUSART1_Transmit_ISR 0030  
                      __pcstackBANK0 00B8                   __end_of_Temp_Fault 071C  
                    ??_Battery_Fault 0046         __size_of_EUSART1_Receive_ISR 0030  
             _PIN_MANAGER_Initialize 071C                            __pintcode 0008  
                    ?_ADC_Initialize 002A         ??_INTERRUPT_InterruptManager 0032  
                           _BAUD1CON 000FB8             __size_of_TMR1_StartTimer 0004  
               _INTERRUPT_Initialize 0918                        _TMR1_CallBack 0928  
                     ___wmul@product 0044                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A0  
                           _PIR1bits 000F9E                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR1_ISR 08AA  
                  ??_TMR1_Initialize 0040                     __size_of_ADC_ISR 0448  
                         _ADCON0bits 000FC2                    ___wmul@multiplier 0040  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 002A  
                     ?_TMR1_CallBack 002A                             __Hrparam 0000  
                           _Temp_Adc 0001                             __Lrparam 0000  
           ?_ADC_GetConversionResult 002A                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0040  
        __size_of_EUSART1_Initialize 003C                   Battery_Fault@fault 00C1  
                           __ptext10 05C8                             __ptext11 0806  
                           __ptext20 08F6                             __ptext12 04F4  
                         _T1GCONbits 000FCC                             __ptext14 08AA  
                           __ptext15 0928                             __ptext16 07A6  
                           __ptext17 07D6                             __ptext18 00AC  
                           __ptext19 08C4                    ??_TMR1_StartTimer 0040  
                      __size_of_main 0020                           _RC1STAbits 000FAB  
 __end_of_INTERRUPT_InterruptManager 00A8           _INTERRUPT_InterruptManager 0008  
                           main@argc 00C4                             main@argv 00C6  
                _EUSART1_Receive_ISR 07D6                           _INTCONbits 000FF2  
             ??_INTERRUPT_Initialize 0040                      ??_TMR1_CallBack 002A  
                           intlevel2 0000                 ?_EUSART1_Receive_ISR 002A  
        __end_of_ADC_StartConversion 08DE              ?_PIN_MANAGER_Initialize 002A  
    __end_of_ADC_GetConversionResult 090A         __end_of_EUSART1_Transmit_ISR 07D6  
                   ??_ADC_Initialize 0040                    __CFG_T3CMX$PORTC0 000000  
              ??_EUSART1_Receive_ISR 002A       __end_of_PIN_MANAGER_Initialize 076A  
              __end_of_Battery_Fault 069A                    __CFG_FOSC$INTIO67 000000  
                    _TMR1_Initialize 084E                     _ADC_Buffer_Point 001D  
