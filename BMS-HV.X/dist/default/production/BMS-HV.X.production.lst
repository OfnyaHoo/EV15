

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Sep 23 00:22:24 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1
    97                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    98  0000                     
    99                           	psect	idataCOMRAM
   100  003CDE                     __pidataCOMRAM:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _Transmit_stall
   104  003CDE  01                 	db	1
   105                           
   106                           	psect	idataBANK0
   107  003CC2                     __pidataBANK0:
   108                           	opt stack 0
   109                           
   110                           ;initializer for _Temp_DegF
   111  003CC2  00                 	db	0
   112  003CC3  8C                 	db	140
   113  003CC4  42                 	db	66
   114  003CC5  00                 	db	0
   115  003CC6  8C                 	db	140
   116  003CC7  42                 	db	66
   117  003CC8  00                 	db	0
   118  003CC9  8C                 	db	140
   119  003CCA  42                 	db	66
   120  003CCB  00                 	db	0
   121  003CCC  8C                 	db	140
   122  003CCD  42                 	db	66
   123                           
   124                           	psect	idataBANK1
   125  003BB0                     __pidataBANK1:
   126                           	opt stack 0
   127                           
   128                           ;initializer for _Battery_Volt
   129  003BB0  00                 	db	0
   130  003BB1  40                 	db	64
   131  003BB2  40                 	db	64
   132  003BB3  00                 	db	0
   133  003BB4  40                 	db	64
   134  003BB5  40                 	db	64
   135  003BB6  00                 	db	0
   136  003BB7  40                 	db	64
   137  003BB8  40                 	db	64
   138  003BB9  00                 	db	0
   139  003BBA  40                 	db	64
   140  003BBB  40                 	db	64
   141  003BBC  00                 	db	0
   142  003BBD  40                 	db	64
   143  003BBE  40                 	db	64
   144  003BBF  00                 	db	0
   145  003BC0  40                 	db	64
   146  003BC1  40                 	db	64
   147  003BC2  00                 	db	0
   148  003BC3  40                 	db	64
   149  003BC4  40                 	db	64
   150  003BC5  00                 	db	0
   151  003BC6  40                 	db	64
   152  003BC7  40                 	db	64
   153  003BC8  00                 	db	0
   154  003BC9  40                 	db	64
   155  003BCA  40                 	db	64
   156  003BCB  00                 	db	0
   157  003BCC  40                 	db	64
   158  003BCD  40                 	db	64
   159                           
   160                           	psect	smallconst
   161  000600                     __psmallconst:
   162                           	opt stack 0
   163  000600  00                 	db	0
   164  000601                     log@coeff:
   165                           	opt stack 0
   166  000601  00                 	db	0
   167  000602  00                 	db	0
   168  000603  00                 	db	0
   169  000604  00                 	db	0
   170  000605  80                 	db	128
   171  000606  3F                 	db	63
   172  000607  F0                 	db	240
   173  000608  FF                 	db	255
   174  000609  BE                 	db	190
   175  00060A  E2                 	db	226
   176  00060B  A9                 	db	169
   177  00060C  3E                 	db	62
   178  00060D  83                 	db	131
   179  00060E  76                 	db	118
   180  00060F  BE                 	db	190
   181  000610  AE                 	db	174
   182  000611  2B                 	db	43
   183  000612  3E                 	db	62
   184  000613  3C                 	db	60
   185  000614  C3                 	db	195
   186  000615  BD                 	db	189
   187  000616  D2                 	db	210
   188  000617  13                 	db	19
   189  000618  3D                 	db	61
   190  000619  78                 	db	120
   191  00061A  D3                 	db	211
   192  00061B  BB                 	db	187
   193  00061C                     __end_oflog@coeff:
   194                           	opt stack 0
   195  0000                     _TMR1	set	4046
   196  0000                     _ADCON0	set	4034
   197  0000                     _ADCON0bits	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADCON2	set	4032
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADRESL	set	4035
   202  0000                     _ANSELA	set	3896
   203  0000                     _ANSELB	set	3897
   204  0000                     _ANSELC	set	3898
   205  0000                     _ANSELD	set	3899
   206  0000                     _ANSELE	set	3900
   207  0000                     _BAUD1CON	set	4024
   208  0000                     _INTCON2bits	set	4081
   209  0000                     _INTCONbits	set	4082
   210  0000                     _IPR1bits	set	3999
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATD	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCCON2	set	4050
   220  0000                     _OSCTUNE	set	3995
   221  0000                     _PIE1bits	set	3997
   222  0000                     _PIR1bits	set	3998
   223  0000                     _RC1STA	set	4011
   224  0000                     _RC1STAbits	set	4011
   225  0000                     _RCONbits	set	4048
   226  0000                     _RCREG1	set	4014
   227  0000                     _SPBRG1	set	4015
   228  0000                     _SPBRGH1	set	4016
   229  0000                     _T1CON	set	4045
   230  0000                     _T1CONbits	set	4045
   231  0000                     _T1GCON	set	4044
   232  0000                     _T1GCONbits	set	4044
   233  0000                     _TMR1H	set	4047
   234  0000                     _TMR1L	set	4046
   235  0000                     _TRISA	set	3986
   236  0000                     _TRISB	set	3987
   237  0000                     _TRISC	set	3988
   238  0000                     _TRISCbits	set	3988
   239  0000                     _TRISD	set	3989
   240  0000                     _TRISE	set	3990
   241  0000                     _TX1STA	set	4012
   242  0000                     _TXREG1	set	4013
   243  0000                     _WPUB	set	3937
   244  0000                     _LATA0	set	31816
   245  0000                     _LATA4	set	31820
   246  0000                     _LATA6	set	31822
   247  0000                     _LATB0	set	31824
   248  0000                     _LATB1	set	31825
   249  0000                     _LATB3	set	31827
   250  0000                     _LATC0	set	31832
   251  0000                     _LATC1	set	31833
   252  0000                     _LATC4	set	31836
   253  0000                     _LATC5	set	31837
   254  0000                     _LATD1	set	31841
   255  0000                     _LATD2	set	31842
   256  0000                     _LATD3	set	31843
   257  0000                     _LATD5	set	31845
   258                           
   259                           ; #config settings
   260  00061C  00                 	db	0	; dummy byte at the end
   261  0000                     
   262                           	psect	cinit
   263  002FC2                     __pcinit:
   264                           	opt stack 0
   265  002FC2                     start_initialization:
   266                           	opt stack 0
   267  002FC2                     __initialization:
   268                           	opt stack 0
   269                           
   270                           ; Clear objects allocated to BANK5 (206 bytes)
   271  002FC2  EE05  F000         	lfsr	0,__pbssBANK5
   272  002FC6  0ECE               	movlw	206
   273  002FC8                     clear_0:
   274  002FC8  6AEE               	clrf	postinc0,c
   275  002FCA  06E8               	decf	wreg,f,c
   276  002FCC  E1FD               	bnz	clear_0
   277                           
   278                           ; Clear objects allocated to BANK4 (206 bytes)
   279  002FCE  EE04  F000         	lfsr	0,__pbssBANK4
   280  002FD2  0ECE               	movlw	206
   281  002FD4                     clear_1:
   282  002FD4  6AEE               	clrf	postinc0,c
   283  002FD6  06E8               	decf	wreg,f,c
   284  002FD8  E1FD               	bnz	clear_1
   285                           
   286                           ; Clear objects allocated to BANK3 (200 bytes)
   287  002FDA  EE03  F000         	lfsr	0,__pbssBANK3
   288  002FDE  0EC8               	movlw	200
   289  002FE0                     clear_2:
   290  002FE0  6AEE               	clrf	postinc0,c
   291  002FE2  06E8               	decf	wreg,f,c
   292  002FE4  E1FD               	bnz	clear_2
   293                           
   294                           ; Clear objects allocated to BANK2 (206 bytes)
   295  002FE6  EE02  F000         	lfsr	0,__pbssBANK2
   296  002FEA  0ECE               	movlw	206
   297  002FEC                     clear_3:
   298  002FEC  6AEE               	clrf	postinc0,c
   299  002FEE  06E8               	decf	wreg,f,c
   300  002FF0  E1FD               	bnz	clear_3
   301                           
   302                           ; Clear objects allocated to BANK1 (112 bytes)
   303  002FF2  EE01  F000         	lfsr	0,__pbssBANK1
   304  002FF6  0E70               	movlw	112
   305  002FF8                     clear_4:
   306  002FF8  6AEE               	clrf	postinc0,c
   307  002FFA  06E8               	decf	wreg,f,c
   308  002FFC  E1FD               	bnz	clear_4
   309                           
   310                           ; Clear objects allocated to BANK0 (97 bytes)
   311  002FFE  EE00  F060         	lfsr	0,__pbssBANK0
   312  003002  0E61               	movlw	97
   313  003004                     clear_5:
   314  003004  6AEE               	clrf	postinc0,c
   315  003006  06E8               	decf	wreg,f,c
   316  003008  E1FD               	bnz	clear_5
   317                           
   318                           ; Clear objects allocated to COMRAM (24 bytes)
   319  00300A  EE00  F02D         	lfsr	0,__pbssCOMRAM
   320  00300E  0E18               	movlw	24
   321  003010                     clear_6:
   322  003010  6AEE               	clrf	postinc0,c
   323  003012  06E8               	decf	wreg,f,c
   324  003014  E1FD               	bnz	clear_6
   325                           
   326                           ; Initialize objects allocated to BANK1 (30 bytes)
   327                           ; load TBLPTR registers with __pidataBANK1
   328  003016  0EB0               	movlw	low __pidataBANK1
   329  003018  6EF6               	movwf	tblptrl,c
   330  00301A  0E3B               	movlw	high __pidataBANK1
   331  00301C  6EF7               	movwf	tblptrh,c
   332  00301E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   333  003020  6EF8               	movwf	tblptru,c
   334  003022  EE01  F070         	lfsr	0,__pdataBANK1
   335  003026  EE10 F01E          	lfsr	1,30
   336  00302A                     copy_data0:
   337  00302A  0009               	tblrd		*+
   338  00302C  CFF5 FFEE          	movff	tablat,postinc0
   339  003030  50E5               	movf	postdec1,w,c
   340  003032  50E1               	movf	fsr1l,w,c
   341  003034  E1FA               	bnz	copy_data0
   342                           
   343                           ; Initialize objects allocated to BANK0 (12 bytes)
   344                           ; load TBLPTR registers with __pidataBANK0
   345  003036  0EC2               	movlw	low __pidataBANK0
   346  003038  6EF6               	movwf	tblptrl,c
   347  00303A  0E3C               	movlw	high __pidataBANK0
   348  00303C  6EF7               	movwf	tblptrh,c
   349  00303E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   350  003040  6EF8               	movwf	tblptru,c
   351  003042  EE00  F0F4         	lfsr	0,__pdataBANK0
   352  003046  EE10 F00C          	lfsr	1,12
   353  00304A                     copy_data1:
   354  00304A  0009               	tblrd		*+
   355  00304C  CFF5 FFEE          	movff	tablat,postinc0
   356  003050  50E5               	movf	postdec1,w,c
   357  003052  50E1               	movf	fsr1l,w,c
   358  003054  E1FA               	bnz	copy_data1
   359                           
   360                           ; Initialize objects allocated to COMRAM (1 bytes)
   361                           ; load TBLPTR registers with __pidataCOMRAM
   362  003056  0EDE               	movlw	low __pidataCOMRAM
   363  003058  6EF6               	movwf	tblptrl,c
   364  00305A  0E3C               	movlw	high __pidataCOMRAM
   365  00305C  6EF7               	movwf	tblptrh,c
   366  00305E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   367  003060  6EF8               	movwf	tblptru,c
   368  003062  0009               	tblrd		*+	;fetch initializer
   369  003064  CFF5 F045          	movff	tablat,__pdataCOMRAM
   370  003068                     end_of_initialization:
   371                           	opt stack 0
   372  003068                     __end_of__initialization:
   373                           	opt stack 0
   374  003068  0E00               	movlw	low (__Lmediumconst shr (0+16))
   375  00306A  6EF8               	movwf	tblptru,c
   376  00306C  0100               	movlb	0
   377  00306E  EF9A  F01C         	goto	_main	;jump to C main() function
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           postinc0	equ	0xFEE
   383                           wreg	equ	0xFE8
   384                           postdec1	equ	0xFE5
   385                           fsr1l	equ	0xFE1
   386                           
   387                           	psect	bssCOMRAM
   388  00002D                     __pbssCOMRAM:
   389                           	opt stack 0
   390  00002D                     _ADC_Buffer_Point:
   391                           	opt stack 0
   392  00002D                     	ds	2
   393  00002F                     _CountCallBack:
   394                           	opt stack 0
   395  00002F                     	ds	2
   396  000031                     _serial_available:
   397                           	opt stack 0
   398  000031                     	ds	2
   399  000033                     _serial_read:
   400                           	opt stack 0
   401  000033                     	ds	2
   402  000035                     _serial_write:
   403                           	opt stack 0
   404  000035                     	ds	2
   405  000037                     _timer1ReloadVal:
   406                           	opt stack 0
   407  000037                     	ds	2
   408  000039                     _AKNAKsend:
   409                           	opt stack 0
   410  000039                     	ds	1
   411  00003A                     _Temp_Aquire:
   412                           	opt stack 0
   413  00003A                     	ds	1
   414  00003B                     _Volt_Aquire:
   415                           	opt stack 0
   416  00003B                     	ds	1
   417  00003C                     _calc_CS:
   418                           	opt stack 0
   419  00003C                     	ds	1
   420  00003D                     _maxDataAddress:
   421                           	opt stack 0
   422  00003D                     	ds	1
   423  00003E                     _moduleAddress:
   424                           	opt stack 0
   425  00003E                     	ds	1
   426  00003F                     _returnAddress:
   427                           	opt stack 0
   428  00003F                     	ds	1
   429  000040                     _rx_address:
   430                           	opt stack 0
   431  000040                     	ds	1
   432  000041                     _rx_array_inx:
   433                           	opt stack 0
   434  000041                     	ds	1
   435  000042                     _rx_len:
   436                           	opt stack 0
   437  000042                     	ds	1
   438  000043                     _group:
   439                           	opt stack 0
   440  000043                     	ds	2
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           postdec1	equ	0xFE5
   448                           fsr1l	equ	0xFE1
   449                           
   450                           	psect	dataCOMRAM
   451  000045                     __pdataCOMRAM:
   452                           	opt stack 0
   453  000045                     _Transmit_stall:
   454                           	opt stack 0
   455  000045                     	ds	1
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           tblptrl	equ	0xFF6
   459                           tablat	equ	0xFF5
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           postdec1	equ	0xFE5
   463                           fsr1l	equ	0xFE1
   464                           
   465                           	psect	bssBANK0
   466  000060                     __pbssBANK0:
   467                           	opt stack 0
   468  000060                     _Battery_Adc:
   469                           	opt stack 0
   470  000060                     	ds	40
   471  000088                     _Temp_Done:
   472                           	opt stack 0
   473  000088                     	ds	2
   474  00008A                     _Volt_Done:
   475                           	opt stack 0
   476  00008A                     	ds	2
   477  00008C                     _addressErrorCounter:
   478                           	opt stack 0
   479  00008C                     	ds	2
   480  00008E                     _alignErrorCounter:
   481                           	opt stack 0
   482  00008E                     	ds	2
   483  000090                     _crcErrorCounter:
   484                           	opt stack 0
   485  000090                     	ds	2
   486  000092                     _dataAdressErrorCounter:
   487                           	opt stack 0
   488  000092                     	ds	2
   489  000094                     _errno:
   490                           	opt stack 0
   491  000094                     	ds	2
   492  000096                     _receiveArrayAddress:
   493                           	opt stack 0
   494  000096                     	ds	2
   495  000098                     _sendStructAddress:
   496                           	opt stack 0
   497  000098                     	ds	2
   498  00009A                     _serial_peek:
   499                           	opt stack 0
   500  00009A                     	ds	2
   501  00009C                     _crc_buffer:
   502                           	opt stack 0
   503  00009C                     	ds	17
   504  0000AD                     _TmpTemp_DegF:
   505                           	opt stack 0
   506  0000AD                     	ds	12
   507  0000B9                     _Temp_Adc:
   508                           	opt stack 0
   509  0000B9                     	ds	8
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           
   519                           	psect	dataBANK0
   520  0000F4                     __pdataBANK0:
   521                           	opt stack 0
   522  0000F4                     _Temp_DegF:
   523                           	opt stack 0
   524  0000F4                     	ds	12
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           postdec1	equ	0xFE5
   532                           fsr1l	equ	0xFE1
   533                           
   534                           	psect	bssBANK1
   535  000100                     __pbssBANK1:
   536                           	opt stack 0
   537  000100                     _PrevBattery_Volt:
   538                           	opt stack 0
   539  000100                     	ds	30
   540  00011E                     _PrevTemp_DegF:
   541                           	opt stack 0
   542  00011E                     	ds	12
   543  00012A                     _receiveArray:
   544                           	opt stack 0
   545  00012A                     	ds	40
   546  000152                     _TempBattery_Volt:
   547                           	opt stack 0
   548  000152                     	ds	30
   549                           tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           postdec1	equ	0xFE5
   556                           fsr1l	equ	0xFE1
   557                           
   558                           	psect	dataBANK1
   559  000170                     __pdataBANK1:
   560                           	opt stack 0
   561  000170                     _Battery_Volt:
   562                           	opt stack 0
   563  000170                     	ds	30
   564                           tblptru	equ	0xFF8
   565                           tblptrh	equ	0xFF7
   566                           tblptrl	equ	0xFF6
   567                           tablat	equ	0xFF5
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           postdec1	equ	0xFE5
   571                           fsr1l	equ	0xFE1
   572                           
   573                           	psect	bssBANK2
   574  000200                     __pbssBANK2:
   575                           	opt stack 0
   576  000200                     _ring_buffer:
   577                           	opt stack 0
   578  000200                     	ds	206
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           postdec1	equ	0xFE5
   586                           fsr1l	equ	0xFE1
   587                           
   588                           	psect	bssBANK3
   589  000300                     __pbssBANK3:
   590                           	opt stack 0
   591  000300                     _rx_buffer:
   592                           	opt stack 0
   593  000300                     	ds	200
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1l	equ	0xFE1
   602                           
   603                           	psect	bssBANK4
   604  000400                     __pbssBANK4:
   605                           	opt stack 0
   606  000400                     _input_buffer:
   607                           	opt stack 0
   608  000400                     	ds	206
   609                           tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           postdec1	equ	0xFE5
   616                           fsr1l	equ	0xFE1
   617                           
   618                           	psect	bssBANK5
   619  000500                     __pbssBANK5:
   620                           	opt stack 0
   621  000500                     _output_buffer:
   622                           	opt stack 0
   623  000500                     	ds	206
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	cstackBANK1
   634  00018E                     __pcstackBANK1:
   635                           	opt stack 0
   636  00018E                     ??_updateComms:
   637  00018E                     eval_poly@res:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x0
   641  00018E                     	ds	3
   642  000191                     ?_log:
   643                           	opt stack 0
   644  000191                     log@x:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x3
   648  000191                     	ds	3
   649  000194                     log@exponent:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x6
   653  000194                     	ds	2
   654  000196                     ??_Temp_Convert:
   655                           
   656                           ; 0 bytes @ 0x8
   657  000196                     	ds	2
   658  000198                     _Temp_Convert$2202:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0xA
   662  000198                     	ds	2
   663  00019A                     _Temp_Convert$2203:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0xC
   667  00019A                     	ds	2
   668  00019C                     Temp_Convert@x:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0xE
   672  00019C                     	ds	2
   673  00019E                     Temp_Convert@steinhart:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x10
   677  00019E                     	ds	3
   678  0001A1                     
   679                           ; 2 bytes @ 0x13
   680  0001A1                     	ds	2
   681  0001A3                     
   682                           ; 3 bytes @ 0x15
   683  0001A3                     	ds	3
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec1	equ	0xFE5
   691                           fsr1l	equ	0xFE1
   692                           
   693                           	psect	cstackBANK0
   694  0000C1                     __pcstackBANK0:
   695                           	opt stack 0
   696  0000C1                     ?___ftdiv:
   697                           	opt stack 0
   698  0000C1                     CRCcheck@SentCRC:
   699                           	opt stack 0
   700  0000C1                     RunBypas@cellbyp:
   701                           	opt stack 0
   702  0000C1                     begin@ptr:
   703                           	opt stack 0
   704  0000C1                     ___ftdiv@f1:
   705                           	opt stack 0
   706                           
   707                           ; 3 bytes @ 0x0
   708  0000C1                     	ds	1
   709  0000C2                     CRCcheck@calculatedCRC:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x1
   713  0000C2                     	ds	1
   714  0000C3                     begin@maxSize:
   715                           	opt stack 0
   716  0000C3                     RunBypas@batvolt:
   717                           	opt stack 0
   718  0000C3                     CRCcheck@arrayHolder:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x2
   722  0000C3                     	ds	1
   723  0000C4                     begin@givenAddress:
   724                           	opt stack 0
   725  0000C4                     ___ftdiv@f2:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x3
   729  0000C4                     	ds	1
   730  0000C5                     begin@error:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x4
   734  0000C5                     	ds	1
   735  0000C6                     RunBypas@i:
   736                           	opt stack 0
   737  0000C6                     begin@stufftosend:
   738                           	opt stack 0
   739  0000C6                     CRCcheck@rt:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x5
   743  0000C6                     	ds	1
   744  0000C7                     ??___ftdiv:
   745                           
   746                           ; 0 bytes @ 0x6
   747  0000C7                     	ds	1
   748  0000C8                     begin@stufftoreceive:
   749                           	opt stack 0
   750  0000C8                     receiveData@holder:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x7
   754  0000C8                     	ds	2
   755  0000CA                     ___ftdiv@cntr:
   756                           	opt stack 0
   757  0000CA                     begin@stuffavailable:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x9
   761  0000CA                     	ds	1
   762  0000CB                     receiveData@holder_1131:
   763                           	opt stack 0
   764  0000CB                     ___ftdiv@f3:
   765                           	opt stack 0
   766                           
   767                           ; 3 bytes @ 0xA
   768  0000CB                     	ds	1
   769  0000CC                     begin@stuffpeek:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0xB
   773  0000CC                     	ds	2
   774  0000CE                     receiveData@crcHolder:
   775                           	opt stack 0
   776  0000CE                     ___ftdiv@exp:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0xD
   780  0000CE                     	ds	1
   781  0000CF                     receiveData@crcHolder_1132:
   782                           	opt stack 0
   783  0000CF                     ___ftdiv@sign:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0xE
   787  0000CF                     	ds	1
   788  0000D0                     ?___ftmul:
   789                           	opt stack 0
   790  0000D0                     receiveData@u:
   791                           	opt stack 0
   792  0000D0                     ___ftmul@f1:
   793                           	opt stack 0
   794                           
   795                           ; 3 bytes @ 0xF
   796  0000D0                     	ds	2
   797  0000D2                     receiveData@r:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x11
   801  0000D2                     	ds	1
   802  0000D3                     ___ftmul@f2:
   803                           	opt stack 0
   804                           
   805                           ; 3 bytes @ 0x12
   806  0000D3                     	ds	3
   807  0000D6                     ??___ftmul:
   808                           
   809                           ; 0 bytes @ 0x15
   810  0000D6                     	ds	3
   811  0000D9                     ___ftmul@exp:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x18
   815  0000D9                     	ds	1
   816  0000DA                     ___ftmul@f3_as_product:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x19
   820  0000DA                     	ds	3
   821  0000DD                     ___ftmul@cntr:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x1C
   825  0000DD                     	ds	1
   826  0000DE                     ___ftmul@sign:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x1D
   830  0000DE                     	ds	1
   831  0000DF                     ?___ftadd:
   832                           	opt stack 0
   833  0000DF                     ?___fttol:
   834                           	opt stack 0
   835  0000DF                     ___ftadd@f1:
   836                           	opt stack 0
   837  0000DF                     ___fttol@f1:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x1E
   841  0000DF                     	ds	3
   842  0000E2                     ___ftadd@f2:
   843                           	opt stack 0
   844                           
   845                           ; 3 bytes @ 0x21
   846  0000E2                     	ds	1
   847  0000E3                     ??___fttol:
   848                           
   849                           ; 0 bytes @ 0x22
   850  0000E3                     	ds	2
   851  0000E5                     ??___ftadd:
   852                           
   853                           ; 0 bytes @ 0x24
   854  0000E5                     	ds	3
   855  0000E8                     ___ftadd@sign:
   856                           	opt stack 0
   857  0000E8                     ___fttol@sign1:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x27
   861  0000E8                     	ds	1
   862  0000E9                     ___ftadd@exp2:
   863                           	opt stack 0
   864  0000E9                     ___fttol@lval:
   865                           	opt stack 0
   866                           
   867                           ; 4 bytes @ 0x28
   868  0000E9                     	ds	1
   869  0000EA                     ___ftadd@exp1:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x29
   873  0000EA                     	ds	1
   874  0000EB                     ?___ftsub:
   875                           	opt stack 0
   876  0000EB                     ?_eval_poly:
   877                           	opt stack 0
   878  0000EB                     Battery_Filter@x:
   879                           	opt stack 0
   880  0000EB                     Temp_Filter@x:
   881                           	opt stack 0
   882  0000EB                     ___ftsub@f1:
   883                           	opt stack 0
   884  0000EB                     eval_poly@x:
   885                           	opt stack 0
   886                           
   887                           ; 3 bytes @ 0x2A
   888  0000EB                     	ds	2
   889  0000ED                     ??_Battery_Convert:
   890  0000ED                     ___fttol@exp1:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x2C
   894  0000ED                     	ds	1
   895  0000EE                     ToSend@what:
   896                           	opt stack 0
   897  0000EE                     eval_poly@d:
   898                           	opt stack 0
   899  0000EE                     ___ftsub@f2:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x2D
   903  0000EE                     	ds	1
   904  0000EF                     Battery_Convert@x:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x2E
   908  0000EF                     	ds	1
   909  0000F0                     ToSend@where:
   910                           	opt stack 0
   911  0000F0                     eval_poly@n:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x2F
   915  0000F0                     	ds	2
   916  0000F2                     ??_eval_poly:
   917                           
   918                           ; 0 bytes @ 0x31
   919  0000F2                     	ds	2
   920                           tblptru	equ	0xFF8
   921                           tblptrh	equ	0xFF7
   922                           tblptrl	equ	0xFF6
   923                           tablat	equ	0xFF5
   924                           postinc0	equ	0xFEE
   925                           wreg	equ	0xFE8
   926                           postdec1	equ	0xFE5
   927                           fsr1l	equ	0xFE1
   928                           
   929                           	psect	cstackCOMRAM
   930  000001                     __pcstackCOMRAM:
   931                           	opt stack 0
   932  000001                     ??_ADC_StartConversion:
   933  000001                     ?_ADC_GetConversionResult:
   934                           	opt stack 0
   935  000001                     ?i2_UART_buff_size:
   936                           	opt stack 0
   937  000001                     ?i2_UART_buff_modulo_inc:
   938                           	opt stack 0
   939  000001                     Set_4051@Channel:
   940                           	opt stack 0
   941  000001                     i2UART_buff_size@_this:
   942                           	opt stack 0
   943  000001                     i2UART_buff_modulo_inc@value:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x0
   947  000001                     	ds	1
   948  000002                     ADC_StartConversion@channel:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x1
   952  000002                     	ds	1
   953  000003                     ??_Set_4051:
   954  000003                     ??_ADC_GetConversionResult:
   955  000003                     i2UART_buff_modulo_inc@modulus:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x2
   959  000003                     	ds	2
   960  000005                     ??_TMR1_ISR:
   961  000005                     ??_ADC_ISR:
   962  000005                     i2UART_buff_modulo_inc@my_value:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x4
   966  000005                     	ds	2
   967  000007                     i2UART_buff_put@_this:
   968                           	opt stack 0
   969  000007                     i2UART_buff_get@_this:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x6
   973  000007                     	ds	2
   974  000009                     ??i2_UART_buff_get:
   975  000009                     i2UART_buff_put@c:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x8
   979  000009                     	ds	1
   980  00000A                     ??i2_UART_buff_put:
   981                           
   982                           ; 0 bytes @ 0x9
   983  00000A                     	ds	1
   984  00000B                     i2UART_buff_get@c:
   985                           	opt stack 0
   986  00000B                     ADC_ISR@ADC_Result:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0xA
   990  00000B                     	ds	1
   991  00000C                     EUSART1_Receive_ISR@data:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0xB
   995  00000C                     	ds	1
   996  00000D                     ??_INTERRUPT_InterruptManager:
   997                           
   998                           ; 0 bytes @ 0xC
   999  00000D                     	ds	14
  1000  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1001                           	opt stack 0
  1002  00001B                     ?_UART_buff_modulo_inc:
  1003                           	opt stack 0
  1004  00001B                     ?_UART_buff_size:
  1005                           	opt stack 0
  1006  00001B                     ?___wmul:
  1007                           	opt stack 0
  1008  00001B                     ?___awdiv:
  1009                           	opt stack 0
  1010  00001B                     ?___ftpack:
  1011                           	opt stack 0
  1012  00001B                     ?_frexp:
  1013                           	opt stack 0
  1014  00001B                     SetBypass@pin:
  1015                           	opt stack 0
  1016  00001B                     CRC8@data:
  1017                           	opt stack 0
  1018  00001B                     FastTransfer_buffer_modulo_inc@value:
  1019                           	opt stack 0
  1020  00001B                     crcBufS_put@_this:
  1021                           	opt stack 0
  1022  00001B                     crcBufS_status_put@_this:
  1023                           	opt stack 0
  1024  00001B                     crcBufS_get@_this:
  1025                           	opt stack 0
  1026  00001B                     UART_buff_size@_this:
  1027                           	opt stack 0
  1028  00001B                     UART_buff_modulo_inc@value:
  1029                           	opt stack 0
  1030  00001B                     UART_buff_peek@_this:
  1031                           	opt stack 0
  1032  00001B                     ___wmul@multiplier:
  1033                           	opt stack 0
  1034  00001B                     ___awdiv@dividend:
  1035                           	opt stack 0
  1036  00001B                     memset@p1:
  1037                           	opt stack 0
  1038  00001B                     ___ftpack@arg:
  1039                           	opt stack 0
  1040  00001B                     frexp@value:
  1041                           	opt stack 0
  1042  00001B                     Delay@d_lenth:
  1043                           	opt stack 0
  1044                           
  1045                           ; 4 bytes @ 0x1A
  1046  00001B                     	ds	2
  1047  00001D                     ??_UART_buff_peek:
  1048  00001D                     ?_Receive_available:
  1049                           	opt stack 0
  1050  00001D                     CRC8@len:
  1051                           	opt stack 0
  1052  00001D                     crcBufS_put@address:
  1053                           	opt stack 0
  1054  00001D                     crcBufS_status_put@time:
  1055                           	opt stack 0
  1056  00001D                     crcBufS_get@time:
  1057                           	opt stack 0
  1058  00001D                     SetBypass@state:
  1059                           	opt stack 0
  1060  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1061                           	opt stack 0
  1062  00001D                     UART_buff_modulo_inc@modulus:
  1063                           	opt stack 0
  1064  00001D                     ___wmul@multiplicand:
  1065                           	opt stack 0
  1066  00001D                     ___awdiv@divisor:
  1067                           	opt stack 0
  1068  00001D                     memset@c:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x1C
  1072  00001D                     	ds	1
  1073  00001E                     CRC8@sum:
  1074                           	opt stack 0
  1075  00001E                     crcBufS_put@oldCRC:
  1076                           	opt stack 0
  1077  00001E                     crcBufS_status_put@status:
  1078                           	opt stack 0
  1079  00001E                     crcBufS_get@space:
  1080                           	opt stack 0
  1081  00001E                     ___ftpack@exp:
  1082                           	opt stack 0
  1083  00001E                     frexp@eptr:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x1D
  1087  00001E                     	ds	1
  1088  00001F                     ??_crcBufS_get:
  1089  00001F                     ??_Delay:
  1090  00001F                     ??_SetBypass:
  1091  00001F                     ??_crcBufS_status_put:
  1092  00001F                     CRC8@extract:
  1093                           	opt stack 0
  1094  00001F                     crcBufS_put@status:
  1095                           	opt stack 0
  1096  00001F                     ___awdiv@counter:
  1097                           	opt stack 0
  1098  00001F                     ___ftpack@sign:
  1099                           	opt stack 0
  1100  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1101                           	opt stack 0
  1102  00001F                     UART_buff_modulo_inc@my_value:
  1103                           	opt stack 0
  1104  00001F                     ___wmul@product:
  1105                           	opt stack 0
  1106  00001F                     memset@n:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x1E
  1110  00001F                     	ds	1
  1111  000020                     ??_crcBufS_put:
  1112  000020                     ??___ftpack:
  1113  000020                     ??_frexp:
  1114  000020                     CRC8@tempI:
  1115                           	opt stack 0
  1116  000020                     ___awdiv@sign:
  1117                           	opt stack 0
  1118  000020                     Delay@wait:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0x1F
  1122  000020                     	ds	1
  1123  000021                     ?_Battery_Get:
  1124                           	opt stack 0
  1125  000021                     ?_Tempeture_Get:
  1126                           	opt stack 0
  1127  000021                     CRC8@crc:
  1128                           	opt stack 0
  1129  000021                     Battery_Get@channelnum:
  1130                           	opt stack 0
  1131  000021                     Tempeture_Get@channelnum:
  1132                           	opt stack 0
  1133  000021                     FastTransfer_buffer_put@_this:
  1134                           	opt stack 0
  1135  000021                     UART_buff_put@_this:
  1136                           	opt stack 0
  1137  000021                     UART_buff_get@_this:
  1138                           	opt stack 0
  1139  000021                     ___awdiv@quotient:
  1140                           	opt stack 0
  1141  000021                     memset@p:
  1142                           	opt stack 0
  1143  000021                     ___ftge@ff1:
  1144                           	opt stack 0
  1145                           
  1146                           ; 3 bytes @ 0x20
  1147  000021                     	ds	2
  1148  000023                     ??_UART_buff_get:
  1149  000023                     ?___altoft:
  1150                           	opt stack 0
  1151  000023                     ?___awtoft:
  1152                           	opt stack 0
  1153  000023                     FastTransfer_buffer_put@towhere:
  1154                           	opt stack 0
  1155  000023                     UART_buff_put@c:
  1156                           	opt stack 0
  1157  000023                     FastTransfer_buffer_flush@_this:
  1158                           	opt stack 0
  1159  000023                     crcBufS_status_put@wantedTime:
  1160                           	opt stack 0
  1161  000023                     UART_buff_init@_this:
  1162                           	opt stack 0
  1163  000023                     ___awtoft@c:
  1164                           	opt stack 0
  1165  000023                     ___altoft@c:
  1166                           	opt stack 0
  1167                           
  1168                           ; 4 bytes @ 0x22
  1169  000023                     	ds	1
  1170  000024                     ??_UART_buff_put:
  1171  000024                     FastTransfer_buffer_put@towhat:
  1172                           	opt stack 0
  1173  000024                     ___ftge@ff2:
  1174                           	opt stack 0
  1175                           
  1176                           ; 3 bytes @ 0x23
  1177  000024                     	ds	1
  1178  000025                     UART_buff_get@c:
  1179                           	opt stack 0
  1180  000025                     FastTransfer_buffer_flush@clearBuffer:
  1181                           	opt stack 0
  1182  000025                     crcBufS_get@wantedTime:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x24
  1186  000025                     	ds	1
  1187  000026                     ??_FastTransfer_buffer_put:
  1188  000026                     Send_put@_data:
  1189                           	opt stack 0
  1190  000026                     ___awtoft@sign:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x25
  1194  000026                     	ds	1
  1195  000027                     ??_sendData:
  1196  000027                     ??_receiveData:
  1197  000027                     ??___altoft:
  1198  000027                     ??___ftge:
  1199                           
  1200                           ; 0 bytes @ 0x26
  1201  000027                     	ds	1
  1202  000028                     sendData@whereToSend:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x27
  1206  000028                     	ds	1
  1207  000029                     sendData@CS:
  1208                           	opt stack 0
  1209                           
  1210                           ; 1 bytes @ 0x28
  1211  000029                     	ds	1
  1212  00002A                     Battery_Fault@fault:
  1213                           	opt stack 0
  1214  00002A                     Temp_Fault@fault:
  1215                           	opt stack 0
  1216  00002A                     sendData@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x29
  1220  00002A                     	ds	1
  1221  00002B                     ___altoft@exp:
  1222                           	opt stack 0
  1223  00002B                     Battery_Fault@i:
  1224                           	opt stack 0
  1225  00002B                     Temp_Fault@i:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x2A
  1229  00002B                     	ds	1
  1230  00002C                     ___altoft@sign:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x2B
  1234  00002C                     	ds	1
  1235  00002D                     tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1l	equ	0xFE1
  1243                           
  1244                           ; 0 bytes @ 0x2C
  1245 ;;
  1246 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1247 ;;
  1248 ;; *************** function _main *****************
  1249 ;; Defined at:
  1250 ;;		line 30 in file "Main.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  argc            2   19[BANK1 ] int 
  1253 ;;  argv            3   21[BANK1 ] PTR PTR unsigned char 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;		None
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  2   19[BANK1 ] int 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1265 ;;      Params:         0       0       5       0       0       0       0
  1266 ;;      Locals:         0       0       0       0       0       0       0
  1267 ;;      Temps:          0       0       0       0       0       0       0
  1268 ;;      Totals:         0       0       5       0       0       0       0
  1269 ;;Total ram usage:        5 bytes
  1270 ;; Hardware stack levels required when called:   10
  1271 ;; This function calls:
  1272 ;;		_Battery_Convert
  1273 ;;		_Battery_Fault
  1274 ;;		_RunBypas
  1275 ;;		_SYSTEM_Initialize
  1276 ;;		_Temp_Convert
  1277 ;;		_Temp_Fault
  1278 ;;		_updateComms
  1279 ;; This function is called by:
  1280 ;;		Startup code after reset
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text0
  1285  003934                     __ptext0:
  1286                           	opt stack 0
  1287  003934                     _main:
  1288                           	opt stack 21
  1289                           
  1290                           ;Main.c: 32: SYSTEM_Initialize();
  1291                           
  1292                           ;incstack = 0
  1293  003934  ECDE  F01A         	call	_SYSTEM_Initialize	;wreg free
  1294                           
  1295                           ;Main.c: 51: (INTCONbits.GIE = 1);
  1296  003938  8EF2               	bsf	intcon,7,c	;volatile
  1297                           
  1298                           ;Main.c: 54: (INTCONbits.PEIE = 1);
  1299  00393A  8CF2               	bsf	intcon,6,c	;volatile
  1300  00393C                     l5329:
  1301                           
  1302                           ;Main.c: 65: {
  1303                           ;Main.c: 66: if (Temp_Done)
  1304  00393C  0100               	movlb	0	; () banked
  1305  00393E  5189               	movf	(_Temp_Done+1)& (0+255),w,b
  1306  003940  1188               	iorwf	_Temp_Done& (0+255),w,b
  1307  003942  B4D8               	btfsc	status,2,c
  1308  003944  D004               	goto	l5335
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;Main.c: 67: {
  1312                           ;Main.c: 68: Temp_Convert();
  1313  003946  EC39  F00C         	call	_Temp_Convert	;wreg free
  1314                           
  1315                           ;Main.c: 69: Temp_Fault();
  1316  00394A  EC16  F01B         	call	_Temp_Fault	;wreg free
  1317  00394E                     l5335:
  1318                           
  1319                           ;Main.c: 74: }
  1320                           ;Main.c: 75: if (Volt_Done)
  1321  00394E  0100               	movlb	0	; () banked
  1322  003950  518B               	movf	(_Volt_Done+1)& (0+255),w,b
  1323  003952  118A               	iorwf	_Volt_Done& (0+255),w,b
  1324  003954  B4D8               	btfsc	status,2,c
  1325  003956  D006               	goto	l5343
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;Main.c: 76: {
  1329                           ;Main.c: 77: Battery_Convert();
  1330  003958  EC29  F016         	call	_Battery_Convert	;wreg free
  1331                           
  1332                           ;Main.c: 78: Battery_Fault();
  1333  00395C  EC39  F018         	call	_Battery_Fault	;wreg free
  1334                           
  1335                           ;Main.c: 79: RunBypas();
  1336  003960  EC08  F017         	call	_RunBypas	;wreg free
  1337  003964                     l5343:
  1338                           
  1339                           ;Main.c: 84: }
  1340                           ;Main.c: 85: updateComms();
  1341  003964  EC36  F006         	call	_updateComms	;wreg free
  1342  003968  D7E9               	goto	l5329
  1343  00396A                     __end_of_main:
  1344                           	opt stack 0
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           intcon	equ	0xFF2
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           postdec1	equ	0xFE5
  1353                           fsr1l	equ	0xFE1
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _updateComms *****************
  1357 ;; Defined at:
  1358 ;;		line 12 in file "Communications.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;		None               void
  1365 ;; Registers used:
  1366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1372 ;;      Params:         0       0       0       0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0       0       0
  1374 ;;      Temps:          0       0       4       0       0       0       0
  1375 ;;      Totals:         0       0       4       0       0       0       0
  1376 ;;Total ram usage:        4 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    9
  1379 ;; This function calls:
  1380 ;;		_Battery_Get
  1381 ;;		_Delay
  1382 ;;		_Tempeture_Get
  1383 ;;		_ToSend
  1384 ;;		___ftmul
  1385 ;;		___fttol
  1386 ;;		_receiveData
  1387 ;;		_sendData
  1388 ;; This function is called by:
  1389 ;;		_main
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text1
  1394  000C6C                     __ptext1:
  1395                           	opt stack 0
  1396  000C6C                     _updateComms:
  1397                           	opt stack 21
  1398                           
  1399                           ;Communications.c: 15: if (receiveData()) {
  1400                           
  1401                           ;incstack = 0
  1402  000C6C  EC0F  F003         	call	_receiveData	;wreg free
  1403  000C70  0900               	iorlw	0
  1404  000C72  B4D8               	btfsc	status,2,c
  1405  000C74  0012               	return	
  1406                           
  1407                           ;Communications.c: 16: Delay(5);
  1408  000C76  0E05               	movlw	5
  1409  000C78  6E1B               	movwf	Delay@d_lenth,c
  1410  000C7A  0E00               	movlw	0
  1411  000C7C  6E1C               	movwf	Delay@d_lenth+1,c
  1412  000C7E  0E00               	movlw	0
  1413  000C80  6E1D               	movwf	Delay@d_lenth+2,c
  1414  000C82  0E00               	movlw	0
  1415  000C84  6E1E               	movwf	Delay@d_lenth+3,c
  1416  000C86  ECCF  F01B         	call	_Delay	;wreg free
  1417                           
  1418                           ;Communications.c: 17: LATEbits.LATE1 = 1;
  1419  000C8A  828D               	bsf	3981,1,c	;volatile
  1420                           
  1421                           ;Communications.c: 18: Delay(5);
  1422  000C8C  0E05               	movlw	5
  1423  000C8E  6E1B               	movwf	Delay@d_lenth,c
  1424  000C90  0E00               	movlw	0
  1425  000C92  6E1C               	movwf	Delay@d_lenth+1,c
  1426  000C94  0E00               	movlw	0
  1427  000C96  6E1D               	movwf	Delay@d_lenth+2,c
  1428  000C98  0E00               	movlw	0
  1429  000C9A  6E1E               	movwf	Delay@d_lenth+3,c
  1430  000C9C  ECCF  F01B         	call	_Delay	;wreg free
  1431                           
  1432                           ;Communications.c: 19: ToSend(0, 1);
  1433  000CA0  0E00               	movlw	0
  1434  000CA2  0100               	movlb	0	; () banked
  1435  000CA4  6FEF               	movwf	(ToSend@what+1)& (0+255),b
  1436  000CA6  0E01               	movlw	1
  1437  000CA8  0100               	movlb	0	; () banked
  1438  000CAA  6FEE               	movwf	ToSend@what& (0+255),b
  1439  000CAC  0E00               	movlw	0
  1440  000CAE  ECA5  F01D         	call	_ToSend
  1441                           
  1442                           ;Communications.c: 20: ToSend(1, (int) (Battery_Get(0)*1000.0));
  1443  000CB2  0E00               	movlw	0
  1444  000CB4  0100               	movlb	0	; () banked
  1445  000CB6  6FD3               	movwf	___ftmul@f2& (0+255),b
  1446  000CB8  0E7A               	movlw	122
  1447  000CBA  0100               	movlb	0	; () banked
  1448  000CBC  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1449  000CBE  0E44               	movlw	68
  1450  000CC0  0100               	movlb	0	; () banked
  1451  000CC2  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1452  000CC4  0E00               	movlw	0
  1453  000CC6  6E22               	movwf	Battery_Get@channelnum+1,c
  1454  000CC8  0E00               	movlw	0
  1455  000CCA  6E21               	movwf	Battery_Get@channelnum,c
  1456  000CCC  ECE9  F01C         	call	_Battery_Get	;wreg free
  1457  000CD0  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1458  000CD4  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1459  000CD8  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1460  000CDC  ECC5  F00E         	call	___ftmul	;wreg free
  1461  000CE0  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1462  000CE4  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1463  000CE8  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1464  000CEC  EC07  F00E         	call	___fttol	;wreg free
  1465  000CF0  C0DF  F18E         	movff	?___fttol,??_updateComms
  1466  000CF4  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1467  000CF8  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1468  000CFC  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1469  000D00  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1470  000D04  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1471  000D08  0E01               	movlw	1
  1472  000D0A  ECA5  F01D         	call	_ToSend
  1473                           
  1474                           ;Communications.c: 21: ToSend(2, (int) (Battery_Get(1)*1000.0));
  1475  000D0E  0E00               	movlw	0
  1476  000D10  0100               	movlb	0	; () banked
  1477  000D12  6FD3               	movwf	___ftmul@f2& (0+255),b
  1478  000D14  0E7A               	movlw	122
  1479  000D16  0100               	movlb	0	; () banked
  1480  000D18  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1481  000D1A  0E44               	movlw	68
  1482  000D1C  0100               	movlb	0	; () banked
  1483  000D1E  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1484  000D20  0E00               	movlw	0
  1485  000D22  6E22               	movwf	Battery_Get@channelnum+1,c
  1486  000D24  0E01               	movlw	1
  1487  000D26  6E21               	movwf	Battery_Get@channelnum,c
  1488  000D28  ECE9  F01C         	call	_Battery_Get	;wreg free
  1489  000D2C  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1490  000D30  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1491  000D34  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1492  000D38  ECC5  F00E         	call	___ftmul	;wreg free
  1493  000D3C  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1494  000D40  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1495  000D44  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1496  000D48  EC07  F00E         	call	___fttol	;wreg free
  1497  000D4C  C0DF  F18E         	movff	?___fttol,??_updateComms
  1498  000D50  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1499  000D54  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1500  000D58  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1501  000D5C  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1502  000D60  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1503  000D64  0E02               	movlw	2
  1504  000D66  ECA5  F01D         	call	_ToSend
  1505                           
  1506                           ;Communications.c: 22: ToSend(3, (int) (Battery_Get(2)*1000.0));
  1507  000D6A  0E00               	movlw	0
  1508  000D6C  0100               	movlb	0	; () banked
  1509  000D6E  6FD3               	movwf	___ftmul@f2& (0+255),b
  1510  000D70  0E7A               	movlw	122
  1511  000D72  0100               	movlb	0	; () banked
  1512  000D74  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1513  000D76  0E44               	movlw	68
  1514  000D78  0100               	movlb	0	; () banked
  1515  000D7A  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1516  000D7C  0E00               	movlw	0
  1517  000D7E  6E22               	movwf	Battery_Get@channelnum+1,c
  1518  000D80  0E02               	movlw	2
  1519  000D82  6E21               	movwf	Battery_Get@channelnum,c
  1520  000D84  ECE9  F01C         	call	_Battery_Get	;wreg free
  1521  000D88  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1522  000D8C  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1523  000D90  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1524  000D94  ECC5  F00E         	call	___ftmul	;wreg free
  1525  000D98  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1526  000D9C  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1527  000DA0  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1528  000DA4  EC07  F00E         	call	___fttol	;wreg free
  1529  000DA8  C0DF  F18E         	movff	?___fttol,??_updateComms
  1530  000DAC  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1531  000DB0  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1532  000DB4  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1533  000DB8  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1534  000DBC  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1535  000DC0  0E03               	movlw	3
  1536  000DC2  ECA5  F01D         	call	_ToSend
  1537                           
  1538                           ;Communications.c: 23: ToSend(4, (int) (Battery_Get(3)*1000.0));
  1539  000DC6  0E00               	movlw	0
  1540  000DC8  0100               	movlb	0	; () banked
  1541  000DCA  6FD3               	movwf	___ftmul@f2& (0+255),b
  1542  000DCC  0E7A               	movlw	122
  1543  000DCE  0100               	movlb	0	; () banked
  1544  000DD0  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1545  000DD2  0E44               	movlw	68
  1546  000DD4  0100               	movlb	0	; () banked
  1547  000DD6  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1548  000DD8  0E00               	movlw	0
  1549  000DDA  6E22               	movwf	Battery_Get@channelnum+1,c
  1550  000DDC  0E03               	movlw	3
  1551  000DDE  6E21               	movwf	Battery_Get@channelnum,c
  1552  000DE0  ECE9  F01C         	call	_Battery_Get	;wreg free
  1553  000DE4  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1554  000DE8  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1555  000DEC  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1556  000DF0  ECC5  F00E         	call	___ftmul	;wreg free
  1557  000DF4  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1558  000DF8  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1559  000DFC  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1560  000E00  EC07  F00E         	call	___fttol	;wreg free
  1561  000E04  C0DF  F18E         	movff	?___fttol,??_updateComms
  1562  000E08  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1563  000E0C  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1564  000E10  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1565  000E14  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1566  000E18  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1567  000E1C  0E04               	movlw	4
  1568  000E1E  ECA5  F01D         	call	_ToSend
  1569                           
  1570                           ;Communications.c: 24: ToSend(5, (int) (Battery_Get(4)*1000.0));
  1571  000E22  0E00               	movlw	0
  1572  000E24  0100               	movlb	0	; () banked
  1573  000E26  6FD3               	movwf	___ftmul@f2& (0+255),b
  1574  000E28  0E7A               	movlw	122
  1575  000E2A  0100               	movlb	0	; () banked
  1576  000E2C  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1577  000E2E  0E44               	movlw	68
  1578  000E30  0100               	movlb	0	; () banked
  1579  000E32  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1580  000E34  0E00               	movlw	0
  1581  000E36  6E22               	movwf	Battery_Get@channelnum+1,c
  1582  000E38  0E04               	movlw	4
  1583  000E3A  6E21               	movwf	Battery_Get@channelnum,c
  1584  000E3C  ECE9  F01C         	call	_Battery_Get	;wreg free
  1585  000E40  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1586  000E44  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1587  000E48  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1588  000E4C  ECC5  F00E         	call	___ftmul	;wreg free
  1589  000E50  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1590  000E54  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1591  000E58  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1592  000E5C  EC07  F00E         	call	___fttol	;wreg free
  1593  000E60  C0DF  F18E         	movff	?___fttol,??_updateComms
  1594  000E64  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1595  000E68  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1596  000E6C  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1597  000E70  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1598  000E74  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1599  000E78  0E05               	movlw	5
  1600  000E7A  ECA5  F01D         	call	_ToSend
  1601                           
  1602                           ;Communications.c: 25: ToSend(6, (int) (Battery_Get(5)*1000.0));
  1603  000E7E  0E00               	movlw	0
  1604  000E80  0100               	movlb	0	; () banked
  1605  000E82  6FD3               	movwf	___ftmul@f2& (0+255),b
  1606  000E84  0E7A               	movlw	122
  1607  000E86  0100               	movlb	0	; () banked
  1608  000E88  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1609  000E8A  0E44               	movlw	68
  1610  000E8C  0100               	movlb	0	; () banked
  1611  000E8E  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1612  000E90  0E00               	movlw	0
  1613  000E92  6E22               	movwf	Battery_Get@channelnum+1,c
  1614  000E94  0E05               	movlw	5
  1615  000E96  6E21               	movwf	Battery_Get@channelnum,c
  1616  000E98  ECE9  F01C         	call	_Battery_Get	;wreg free
  1617  000E9C  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1618  000EA0  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1619  000EA4  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1620  000EA8  ECC5  F00E         	call	___ftmul	;wreg free
  1621  000EAC  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1622  000EB0  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1623  000EB4  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1624  000EB8  EC07  F00E         	call	___fttol	;wreg free
  1625  000EBC  C0DF  F18E         	movff	?___fttol,??_updateComms
  1626  000EC0  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1627  000EC4  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1628  000EC8  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1629  000ECC  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1630  000ED0  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1631  000ED4  0E06               	movlw	6
  1632  000ED6  ECA5  F01D         	call	_ToSend
  1633                           
  1634                           ;Communications.c: 26: ToSend(7, (int) (Battery_Get(6)*1000.0));
  1635  000EDA  0E00               	movlw	0
  1636  000EDC  0100               	movlb	0	; () banked
  1637  000EDE  6FD3               	movwf	___ftmul@f2& (0+255),b
  1638  000EE0  0E7A               	movlw	122
  1639  000EE2  0100               	movlb	0	; () banked
  1640  000EE4  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1641  000EE6  0E44               	movlw	68
  1642  000EE8  0100               	movlb	0	; () banked
  1643  000EEA  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1644  000EEC  0E00               	movlw	0
  1645  000EEE  6E22               	movwf	Battery_Get@channelnum+1,c
  1646  000EF0  0E06               	movlw	6
  1647  000EF2  6E21               	movwf	Battery_Get@channelnum,c
  1648  000EF4  ECE9  F01C         	call	_Battery_Get	;wreg free
  1649  000EF8  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1650  000EFC  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1651  000F00  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1652  000F04  ECC5  F00E         	call	___ftmul	;wreg free
  1653  000F08  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1654  000F0C  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1655  000F10  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1656  000F14  EC07  F00E         	call	___fttol	;wreg free
  1657  000F18  C0DF  F18E         	movff	?___fttol,??_updateComms
  1658  000F1C  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1659  000F20  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1660  000F24  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1661  000F28  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1662  000F2C  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1663  000F30  0E07               	movlw	7
  1664  000F32  ECA5  F01D         	call	_ToSend
  1665                           
  1666                           ;Communications.c: 27: ToSend(8, (int) (Battery_Get(7)*1000.0));
  1667  000F36  0E00               	movlw	0
  1668  000F38  0100               	movlb	0	; () banked
  1669  000F3A  6FD3               	movwf	___ftmul@f2& (0+255),b
  1670  000F3C  0E7A               	movlw	122
  1671  000F3E  0100               	movlb	0	; () banked
  1672  000F40  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1673  000F42  0E44               	movlw	68
  1674  000F44  0100               	movlb	0	; () banked
  1675  000F46  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1676  000F48  0E00               	movlw	0
  1677  000F4A  6E22               	movwf	Battery_Get@channelnum+1,c
  1678  000F4C  0E07               	movlw	7
  1679  000F4E  6E21               	movwf	Battery_Get@channelnum,c
  1680  000F50  ECE9  F01C         	call	_Battery_Get	;wreg free
  1681  000F54  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1682  000F58  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1683  000F5C  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1684  000F60  ECC5  F00E         	call	___ftmul	;wreg free
  1685  000F64  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1686  000F68  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1687  000F6C  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1688  000F70  EC07  F00E         	call	___fttol	;wreg free
  1689  000F74  C0DF  F18E         	movff	?___fttol,??_updateComms
  1690  000F78  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1691  000F7C  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1692  000F80  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1693  000F84  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1694  000F88  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1695  000F8C  0E08               	movlw	8
  1696  000F8E  ECA5  F01D         	call	_ToSend
  1697                           
  1698                           ;Communications.c: 28: ToSend(9, (int) (Battery_Get(8)*1000.0));
  1699  000F92  0E00               	movlw	0
  1700  000F94  0100               	movlb	0	; () banked
  1701  000F96  6FD3               	movwf	___ftmul@f2& (0+255),b
  1702  000F98  0E7A               	movlw	122
  1703  000F9A  0100               	movlb	0	; () banked
  1704  000F9C  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1705  000F9E  0E44               	movlw	68
  1706  000FA0  0100               	movlb	0	; () banked
  1707  000FA2  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1708  000FA4  0E00               	movlw	0
  1709  000FA6  6E22               	movwf	Battery_Get@channelnum+1,c
  1710  000FA8  0E08               	movlw	8
  1711  000FAA  6E21               	movwf	Battery_Get@channelnum,c
  1712  000FAC  ECE9  F01C         	call	_Battery_Get	;wreg free
  1713  000FB0  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1714  000FB4  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1715  000FB8  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1716  000FBC  ECC5  F00E         	call	___ftmul	;wreg free
  1717  000FC0  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1718  000FC4  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1719  000FC8  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1720  000FCC  EC07  F00E         	call	___fttol	;wreg free
  1721  000FD0  C0DF  F18E         	movff	?___fttol,??_updateComms
  1722  000FD4  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1723  000FD8  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1724  000FDC  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1725  000FE0  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1726  000FE4  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1727  000FE8  0E09               	movlw	9
  1728  000FEA  ECA5  F01D         	call	_ToSend
  1729                           
  1730                           ;Communications.c: 29: ToSend(10, (int) (Battery_Get(9)*1000.0));
  1731  000FEE  0E00               	movlw	0
  1732  000FF0  0100               	movlb	0	; () banked
  1733  000FF2  6FD3               	movwf	___ftmul@f2& (0+255),b
  1734  000FF4  0E7A               	movlw	122
  1735  000FF6  0100               	movlb	0	; () banked
  1736  000FF8  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  1737  000FFA  0E44               	movlw	68
  1738  000FFC  0100               	movlb	0	; () banked
  1739  000FFE  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  1740  001000  0E00               	movlw	0
  1741  001002  6E22               	movwf	Battery_Get@channelnum+1,c
  1742  001004  0E09               	movlw	9
  1743  001006  6E21               	movwf	Battery_Get@channelnum,c
  1744  001008  ECE9  F01C         	call	_Battery_Get	;wreg free
  1745  00100C  C021  F0D0         	movff	?_Battery_Get,___ftmul@f1
  1746  001010  C022  F0D1         	movff	?_Battery_Get+1,___ftmul@f1+1
  1747  001014  C023  F0D2         	movff	?_Battery_Get+2,___ftmul@f1+2
  1748  001018  ECC5  F00E         	call	___ftmul	;wreg free
  1749  00101C  C0D0  F0DF         	movff	?___ftmul,___fttol@f1
  1750  001020  C0D1  F0E0         	movff	?___ftmul+1,___fttol@f1+1
  1751  001024  C0D2  F0E1         	movff	?___ftmul+2,___fttol@f1+2
  1752  001028  EC07  F00E         	call	___fttol	;wreg free
  1753  00102C  C0DF  F18E         	movff	?___fttol,??_updateComms
  1754  001030  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1755  001034  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1756  001038  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1757  00103C  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1758  001040  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1759  001044  0E0A               	movlw	10
  1760  001046  ECA5  F01D         	call	_ToSend
  1761                           
  1762                           ;Communications.c: 30: ToSend(11, (int) Tempeture_Get(0));
  1763  00104A  0E00               	movlw	0
  1764  00104C  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1765  00104E  0E00               	movlw	0
  1766  001050  6E21               	movwf	Tempeture_Get@channelnum,c
  1767  001052  ECD0  F01C         	call	_Tempeture_Get	;wreg free
  1768  001056  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1769  00105A  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1770  00105E  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1771  001062  EC07  F00E         	call	___fttol	;wreg free
  1772  001066  C0DF  F18E         	movff	?___fttol,??_updateComms
  1773  00106A  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1774  00106E  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1775  001072  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1776  001076  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1777  00107A  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1778  00107E  0E0B               	movlw	11
  1779  001080  ECA5  F01D         	call	_ToSend
  1780                           
  1781                           ;Communications.c: 31: ToSend(12, (int) Tempeture_Get(1));
  1782  001084  0E00               	movlw	0
  1783  001086  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1784  001088  0E01               	movlw	1
  1785  00108A  6E21               	movwf	Tempeture_Get@channelnum,c
  1786  00108C  ECD0  F01C         	call	_Tempeture_Get	;wreg free
  1787  001090  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1788  001094  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1789  001098  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1790  00109C  EC07  F00E         	call	___fttol	;wreg free
  1791  0010A0  C0DF  F18E         	movff	?___fttol,??_updateComms
  1792  0010A4  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1793  0010A8  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1794  0010AC  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1795  0010B0  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1796  0010B4  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1797  0010B8  0E0C               	movlw	12
  1798  0010BA  ECA5  F01D         	call	_ToSend
  1799                           
  1800                           ;Communications.c: 32: ToSend(13, (int) Tempeture_Get(2));
  1801  0010BE  0E00               	movlw	0
  1802  0010C0  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1803  0010C2  0E02               	movlw	2
  1804  0010C4  6E21               	movwf	Tempeture_Get@channelnum,c
  1805  0010C6  ECD0  F01C         	call	_Tempeture_Get	;wreg free
  1806  0010CA  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1807  0010CE  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1808  0010D2  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1809  0010D6  EC07  F00E         	call	___fttol	;wreg free
  1810  0010DA  C0DF  F18E         	movff	?___fttol,??_updateComms
  1811  0010DE  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1812  0010E2  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1813  0010E6  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1814  0010EA  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1815  0010EE  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1816  0010F2  0E0D               	movlw	13
  1817  0010F4  ECA5  F01D         	call	_ToSend
  1818                           
  1819                           ;Communications.c: 33: ToSend(14, (int) Tempeture_Get(3));
  1820  0010F8  0E00               	movlw	0
  1821  0010FA  6E22               	movwf	Tempeture_Get@channelnum+1,c
  1822  0010FC  0E03               	movlw	3
  1823  0010FE  6E21               	movwf	Tempeture_Get@channelnum,c
  1824  001100  ECD0  F01C         	call	_Tempeture_Get	;wreg free
  1825  001104  C021  F0DF         	movff	?_Tempeture_Get,___fttol@f1
  1826  001108  C022  F0E0         	movff	?_Tempeture_Get+1,___fttol@f1+1
  1827  00110C  C023  F0E1         	movff	?_Tempeture_Get+2,___fttol@f1+2
  1828  001110  EC07  F00E         	call	___fttol	;wreg free
  1829  001114  C0DF  F18E         	movff	?___fttol,??_updateComms
  1830  001118  C0E0  F18F         	movff	?___fttol+1,??_updateComms+1
  1831  00111C  C0E1  F190         	movff	?___fttol+2,??_updateComms+2
  1832  001120  C0E2  F191         	movff	?___fttol+3,??_updateComms+3
  1833  001124  C18E  F0EE         	movff	??_updateComms,ToSend@what
  1834  001128  C18F  F0EF         	movff	??_updateComms+1,ToSend@what+1
  1835  00112C  0E0E               	movlw	14
  1836  00112E  ECA5  F01D         	call	_ToSend
  1837                           
  1838                           ;Communications.c: 34: sendData(16);
  1839  001132  0E10               	movlw	16
  1840  001134  EC02  F013         	call	_sendData
  1841                           
  1842                           ;Communications.c: 35: Delay(10);
  1843  001138  0E0A               	movlw	10
  1844  00113A  6E1B               	movwf	Delay@d_lenth,c
  1845  00113C  0E00               	movlw	0
  1846  00113E  6E1C               	movwf	Delay@d_lenth+1,c
  1847  001140  0E00               	movlw	0
  1848  001142  6E1D               	movwf	Delay@d_lenth+2,c
  1849  001144  0E00               	movlw	0
  1850  001146  6E1E               	movwf	Delay@d_lenth+3,c
  1851  001148  ECCF  F01B         	call	_Delay	;wreg free
  1852                           
  1853                           ;Communications.c: 36: LATEbits.LATE1 = 0;
  1854  00114C  928D               	bcf	3981,1,c	;volatile
  1855                           
  1856                           ;Communications.c: 37: LATAbits.LATA4 ^= 1;
  1857  00114E  7889               	btg	3977,4,c	;volatile
  1858  001150  0012               	return	
  1859  001152                     __end_of_updateComms:
  1860                           	opt stack 0
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           intcon	equ	0xFF2
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           postdec1	equ	0xFE5
  1869                           fsr1l	equ	0xFE1
  1870                           status	equ	0xFD8
  1871                           
  1872 ;; *************** function _sendData *****************
  1873 ;; Defined at:
  1874 ;;		line 53 in file "FastTransfer.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;  whereToSend     1    wreg     unsigned char 
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;  whereToSend     1   39[COMRAM] unsigned char 
  1879 ;;  i               2   41[COMRAM] int 
  1880 ;;  CS              1   40[COMRAM] unsigned char 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;		None               void
  1883 ;; Registers used:
  1884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1890 ;;      Params:         0       0       0       0       0       0       0
  1891 ;;      Locals:         4       0       0       0       0       0       0
  1892 ;;      Temps:          1       0       0       0       0       0       0
  1893 ;;      Totals:         5       0       0       0       0       0       0
  1894 ;;Total ram usage:        5 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    7
  1897 ;; This function calls:
  1898 ;;		Absolute function
  1899 ;;		_CRC8
  1900 ;;		_FastTransfer_buffer_flush
  1901 ;;		_Send_put
  1902 ;;		_crcBufS_put
  1903 ;; This function is called by:
  1904 ;;		_updateComms
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text2
  1909  002604                     __ptext2:
  1910                           	opt stack 0
  1911  002604                     _sendData:
  1912                           	opt stack 22
  1913                           
  1914                           ;incstack = 0
  1915                           ;sendData@whereToSend stored from wreg
  1916  002604  6E28               	movwf	sendData@whereToSend,c
  1917                           
  1918                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1919  002606  0100               	movlb	0	; () banked
  1920  002608  C099  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1921  00260C  0100               	movlb	0	; () banked
  1922  00260E  C098  F01B         	movff	_sendStructAddress,CRC8@data
  1923  002612  C2CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1924  002616  ECF4  F01B         	call	_CRC8	;wreg free
  1925  00261A  6E29               	movwf	sendData@CS,c
  1926                           
  1927                           ;FastTransfer.c: 58: serial_write(0x06);
  1928  00261C  D801               	call	u5168
  1929  00261E  D00B               	goto	u5169
  1930  002620                     u5168:
  1931  002620  0005               	push	
  1932  002622  6EFA               	movwf	pclath,c
  1933  002624  5035               	movf	_serial_write,w,c
  1934  002626  6EFD               	movwf	tosl,c
  1935  002628  5036               	movf	_serial_write+1,w,c
  1936  00262A  6EFE               	movwf	tosh,c
  1937  00262C  50F8               	movf	tblptru,w,c
  1938  00262E  6EFF               	movwf	tosu,c
  1939  002630  50FA               	movf	pclath,w,c
  1940  002632  0E06               	movlw	6
  1941  002634  0012               	return		;indir
  1942  002636                     u5169:
  1943                           
  1944                           ;FastTransfer.c: 59: serial_write(0x85);
  1945  002636  D801               	call	u5178
  1946  002638  D00B               	goto	u5179
  1947  00263A                     u5178:
  1948  00263A  0005               	push	
  1949  00263C  6EFA               	movwf	pclath,c
  1950  00263E  5035               	movf	_serial_write,w,c
  1951  002640  6EFD               	movwf	tosl,c
  1952  002642  5036               	movf	_serial_write+1,w,c
  1953  002644  6EFE               	movwf	tosh,c
  1954  002646  50F8               	movf	tblptru,w,c
  1955  002648  6EFF               	movwf	tosu,c
  1956  00264A  50FA               	movf	pclath,w,c
  1957  00264C  0E85               	movlw	133
  1958  00264E  0012               	return		;indir
  1959  002650                     u5179:
  1960                           
  1961                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1962  002650  D801               	call	u5188
  1963  002652  D00B               	goto	u5189
  1964  002654                     u5188:
  1965  002654  0005               	push	
  1966  002656  6EFA               	movwf	pclath,c
  1967  002658  5035               	movf	_serial_write,w,c
  1968  00265A  6EFD               	movwf	tosl,c
  1969  00265C  5036               	movf	_serial_write+1,w,c
  1970  00265E  6EFE               	movwf	tosh,c
  1971  002660  50F8               	movf	tblptru,w,c
  1972  002662  6EFF               	movwf	tosu,c
  1973  002664  50FA               	movf	pclath,w,c
  1974  002666  5028               	movf	sendData@whereToSend,w,c
  1975  002668  0012               	return		;indir
  1976  00266A                     u5189:
  1977                           
  1978                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1979  00266A  D801               	call	u5198
  1980  00266C  D00B               	goto	u5199
  1981  00266E                     u5198:
  1982  00266E  0005               	push	
  1983  002670  6EFA               	movwf	pclath,c
  1984  002672  5035               	movf	_serial_write,w,c
  1985  002674  6EFD               	movwf	tosl,c
  1986  002676  5036               	movf	_serial_write+1,w,c
  1987  002678  6EFE               	movwf	tosh,c
  1988  00267A  50F8               	movf	tblptru,w,c
  1989  00267C  6EFF               	movwf	tosu,c
  1990  00267E  50FA               	movf	pclath,w,c
  1991  002680  503E               	movf	_moduleAddress,w,c
  1992  002682  0012               	return		;indir
  1993  002684                     u5199:
  1994                           
  1995                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1996  002684  D801               	call	u5208
  1997  002686  D00C               	goto	u5209
  1998  002688                     u5208:
  1999  002688  0005               	push	
  2000  00268A  6EFA               	movwf	pclath,c
  2001  00268C  5035               	movf	_serial_write,w,c
  2002  00268E  6EFD               	movwf	tosl,c
  2003  002690  5036               	movf	_serial_write+1,w,c
  2004  002692  6EFE               	movwf	tosh,c
  2005  002694  50F8               	movf	tblptru,w,c
  2006  002696  6EFF               	movwf	tosu,c
  2007  002698  50FA               	movf	pclath,w,c
  2008  00269A  0102               	movlb	2	; () banked
  2009  00269C  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2010  00269E  0012               	return		;indir
  2011  0026A0                     u5209:
  2012                           
  2013                           ;FastTransfer.c: 66: int i;
  2014                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  2015  0026A0  0E00               	movlw	0
  2016  0026A2  6E2B               	movwf	sendData@i+1,c
  2017  0026A4  0E00               	movlw	0
  2018  0026A6  6E2A               	movwf	sendData@i,c
  2019  0026A8  D017               	goto	l4907
  2020  0026AA                     l4903:
  2021                           
  2022                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  2023  0026AA  D801               	call	u5218
  2024  0026AC  D013               	goto	u5219
  2025  0026AE                     u5218:
  2026  0026AE  0005               	push	
  2027  0026B0  6EFA               	movwf	pclath,c
  2028  0026B2  5035               	movf	_serial_write,w,c
  2029  0026B4  6EFD               	movwf	tosl,c
  2030  0026B6  5036               	movf	_serial_write+1,w,c
  2031  0026B8  6EFE               	movwf	tosh,c
  2032  0026BA  50F8               	movf	tblptru,w,c
  2033  0026BC  6EFF               	movwf	tosu,c
  2034  0026BE  50FA               	movf	pclath,w,c
  2035  0026C0  502A               	movf	sendData@i,w,c
  2036  0026C2  0100               	movlb	0	; () banked
  2037  0026C4  2598               	addwf	_sendStructAddress& (0+255),w,b
  2038  0026C6  6ED9               	movwf	fsr2l,c
  2039  0026C8  502B               	movf	sendData@i+1,w,c
  2040  0026CA  0100               	movlb	0	; () banked
  2041  0026CC  2199               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  2042  0026CE  6EDA               	movwf	fsr2h,c
  2043  0026D0  50DF               	movf	indf2,w,c
  2044  0026D2  0012               	return		;indir
  2045  0026D4                     u5219:
  2046  0026D4  4A2A               	infsnz	sendData@i,f,c
  2047  0026D6  2A2B               	incf	sendData@i+1,f,c
  2048  0026D8                     l4907:
  2049  0026D8  502B               	movf	sendData@i+1,w,c
  2050  0026DA  0A80               	xorlw	128
  2051  0026DC  6E27               	movwf	??_sendData& (0+255),c
  2052  0026DE  0102               	movlb	2	; () banked
  2053  0026E0  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2054  0026E2  5C2A               	subwf	sendData@i,w,c
  2055  0026E4  0102               	movlb	2	; () banked
  2056  0026E6  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  2057  0026E8  0A80               	xorlw	128
  2058  0026EA  5827               	subwfb	??_sendData& (0+255),w,c
  2059  0026EC  A0D8               	btfss	status,0,c
  2060  0026EE  D7DD               	goto	l4903
  2061                           
  2062                           ; BSR set to: 2
  2063                           ;FastTransfer.c: 69: }
  2064                           ;FastTransfer.c: 72: serial_write(CS);
  2065                           
  2066                           ; BSR set to: 2
  2067  0026F0  D801               	call	u5238
  2068  0026F2  D00B               	goto	u5239
  2069  0026F4                     u5238:
  2070  0026F4  0005               	push	
  2071  0026F6  6EFA               	movwf	pclath,c
  2072  0026F8  5035               	movf	_serial_write,w,c
  2073  0026FA  6EFD               	movwf	tosl,c
  2074  0026FC  5036               	movf	_serial_write+1,w,c
  2075  0026FE  6EFE               	movwf	tosh,c
  2076  002700  50F8               	movf	tblptru,w,c
  2077  002702  6EFF               	movwf	tosu,c
  2078  002704  50FA               	movf	pclath,w,c
  2079  002706  5029               	movf	sendData@CS,w,c
  2080  002708  0012               	return		;indir
  2081  00270A                     u5239:
  2082                           
  2083                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  2084  00270A  0100               	movlb	0	; () banked
  2085  00270C  0E00               	movlw	high _crc_buffer
  2086  00270E  6E1C               	movwf	crcBufS_put@_this+1,c
  2087  002710  0100               	movlb	0	; () banked
  2088  002712  0E9C               	movlw	low _crc_buffer
  2089  002714  6E1B               	movwf	crcBufS_put@_this,c
  2090  002716  C028  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  2091  00271A  C029  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  2092  00271E  0E00               	movlw	0
  2093  002720  6E1F               	movwf	crcBufS_put@status,c
  2094  002722  EC76  F017         	call	_crcBufS_put
  2095                           
  2096                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  2097  002726  0102               	movlb	2	; () banked
  2098  002728  0E02               	movlw	high _ring_buffer
  2099  00272A  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  2100  00272C  0102               	movlb	2	; () banked
  2101  00272E  0E00               	movlw	low _ring_buffer
  2102  002730  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  2103  002732  0E00               	movlw	0
  2104  002734  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  2105  002736  0E01               	movlw	1
  2106  002738  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  2107  00273A  EC4B  F01B         	call	_FastTransfer_buffer_flush	;wreg free
  2108  00273E  0012               	return	
  2109  002740                     __end_of_sendData:
  2110                           	opt stack 0
  2111                           tosu	equ	0xFFF
  2112                           tosh	equ	0xFFE
  2113                           tosl	equ	0xFFD
  2114                           pclath	equ	0xFFA
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           intcon	equ	0xFF2
  2120                           postinc0	equ	0xFEE
  2121                           wreg	equ	0xFE8
  2122                           postdec1	equ	0xFE5
  2123                           fsr1l	equ	0xFE1
  2124                           indf2	equ	0xFDF
  2125                           fsr2h	equ	0xFDA
  2126                           fsr2l	equ	0xFD9
  2127                           status	equ	0xFD8
  2128                           
  2129 ;; *************** function _crcBufS_put *****************
  2130 ;; Defined at:
  2131 ;;		line 321 in file "FastTransfer.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2134 ;;		 -> crc_buffer(17), 
  2135 ;;  address         1   28[COMRAM] unsigned char 
  2136 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2137 ;;  status          1   30[COMRAM] unsigned char 
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;		None               void
  2142 ;; Registers used:
  2143 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2149 ;;      Params:         5       0       0       0       0       0       0
  2150 ;;      Locals:         0       0       0       0       0       0       0
  2151 ;;      Temps:          2       0       0       0       0       0       0
  2152 ;;      Totals:         7       0       0       0       0       0       0
  2153 ;;Total ram usage:        7 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    4
  2156 ;; This function calls:
  2157 ;;		Nothing
  2158 ;; This function is called by:
  2159 ;;		_sendData
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text3
  2164  002EEC                     __ptext3:
  2165                           	opt stack 0
  2166  002EEC                     _crcBufS_put:
  2167                           	opt stack 24
  2168                           
  2169                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  2170                           
  2171                           ;incstack = 0
  2172  002EEC  EE20 F00F          	lfsr	2,15
  2173  002EF0  501B               	movf	crcBufS_put@_this,w,c
  2174  002EF2  26D9               	addwf	fsr2l,f,c
  2175  002EF4  501C               	movf	crcBufS_put@_this+1,w,c
  2176  002EF6  22DA               	addwfc	fsr2h,f,c
  2177  002EF8  CFDE F020          	movff	postinc2,??_crcBufS_put
  2178  002EFC  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2179  002F00  5020               	movf	??_crcBufS_put,w,c
  2180  002F02  241B               	addwf	crcBufS_put@_this,w,c
  2181  002F04  6ED9               	movwf	fsr2l,c
  2182  002F06  5021               	movf	??_crcBufS_put+1,w,c
  2183  002F08  201C               	addwfc	crcBufS_put@_this+1,w,c
  2184  002F0A  6EDA               	movwf	fsr2h,c
  2185  002F0C  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2186                           
  2187                           ;FastTransfer.c: 323: _this->head++;
  2188  002F10  EE20 F00F          	lfsr	2,15
  2189  002F14  501B               	movf	crcBufS_put@_this,w,c
  2190  002F16  26D9               	addwf	fsr2l,f,c
  2191  002F18  501C               	movf	crcBufS_put@_this+1,w,c
  2192  002F1A  22DA               	addwfc	fsr2h,f,c
  2193  002F1C  2ADE               	incf	postinc2,f,c
  2194  002F1E  0E00               	movlw	0
  2195  002F20  22DD               	addwfc	postdec2,f,c
  2196                           
  2197                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  2198  002F22  EE20 F00F          	lfsr	2,15
  2199  002F26  501B               	movf	crcBufS_put@_this,w,c
  2200  002F28  26D9               	addwf	fsr2l,f,c
  2201  002F2A  501C               	movf	crcBufS_put@_this+1,w,c
  2202  002F2C  22DA               	addwfc	fsr2h,f,c
  2203  002F2E  CFDE F020          	movff	postinc2,??_crcBufS_put
  2204  002F32  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2205  002F36  5020               	movf	??_crcBufS_put,w,c
  2206  002F38  241B               	addwf	crcBufS_put@_this,w,c
  2207  002F3A  6ED9               	movwf	fsr2l,c
  2208  002F3C  5021               	movf	??_crcBufS_put+1,w,c
  2209  002F3E  201C               	addwfc	crcBufS_put@_this+1,w,c
  2210  002F40  6EDA               	movwf	fsr2h,c
  2211  002F42  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2212                           
  2213                           ;FastTransfer.c: 325: _this->head++;
  2214  002F46  EE20 F00F          	lfsr	2,15
  2215  002F4A  501B               	movf	crcBufS_put@_this,w,c
  2216  002F4C  26D9               	addwf	fsr2l,f,c
  2217  002F4E  501C               	movf	crcBufS_put@_this+1,w,c
  2218  002F50  22DA               	addwfc	fsr2h,f,c
  2219  002F52  2ADE               	incf	postinc2,f,c
  2220  002F54  0E00               	movlw	0
  2221  002F56  22DD               	addwfc	postdec2,f,c
  2222                           
  2223                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  2224  002F58  EE20 F00F          	lfsr	2,15
  2225  002F5C  501B               	movf	crcBufS_put@_this,w,c
  2226  002F5E  26D9               	addwf	fsr2l,f,c
  2227  002F60  501C               	movf	crcBufS_put@_this+1,w,c
  2228  002F62  22DA               	addwfc	fsr2h,f,c
  2229  002F64  CFDE F020          	movff	postinc2,??_crcBufS_put
  2230  002F68  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2231  002F6C  5020               	movf	??_crcBufS_put,w,c
  2232  002F6E  241B               	addwf	crcBufS_put@_this,w,c
  2233  002F70  6ED9               	movwf	fsr2l,c
  2234  002F72  5021               	movf	??_crcBufS_put+1,w,c
  2235  002F74  201C               	addwfc	crcBufS_put@_this+1,w,c
  2236  002F76  6EDA               	movwf	fsr2h,c
  2237  002F78  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2238                           
  2239                           ;FastTransfer.c: 327: _this->head++;
  2240  002F7C  EE20 F00F          	lfsr	2,15
  2241  002F80  501B               	movf	crcBufS_put@_this,w,c
  2242  002F82  26D9               	addwf	fsr2l,f,c
  2243  002F84  501C               	movf	crcBufS_put@_this+1,w,c
  2244  002F86  22DA               	addwfc	fsr2h,f,c
  2245  002F88  2ADE               	incf	postinc2,f,c
  2246  002F8A  0E00               	movlw	0
  2247  002F8C  22DD               	addwfc	postdec2,f,c
  2248                           
  2249                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  2250  002F8E  EE20 F00F          	lfsr	2,15
  2251  002F92  501B               	movf	crcBufS_put@_this,w,c
  2252  002F94  26D9               	addwf	fsr2l,f,c
  2253  002F96  501C               	movf	crcBufS_put@_this+1,w,c
  2254  002F98  22DA               	addwfc	fsr2h,f,c
  2255  002F9A  52DE               	movf	postinc2,f,c
  2256  002F9C  50DD               	movf	postdec2,w,c
  2257  002F9E  0A80               	xorlw	128
  2258  002FA0  0F80               	addlw	128
  2259  002FA2  0E0F               	movlw	15
  2260  002FA4  B4D8               	btfsc	status,2,c
  2261  002FA6  5CDF               	subwf	indf2,w,c
  2262  002FA8  A0D8               	btfss	status,0,c
  2263  002FAA  0012               	return	
  2264                           
  2265                           ;FastTransfer.c: 329: _this->head = 0;
  2266  002FAC  EE20 F00F          	lfsr	2,15
  2267  002FB0  501B               	movf	crcBufS_put@_this,w,c
  2268  002FB2  26D9               	addwf	fsr2l,f,c
  2269  002FB4  501C               	movf	crcBufS_put@_this+1,w,c
  2270  002FB6  22DA               	addwfc	fsr2h,f,c
  2271  002FB8  0E00               	movlw	0
  2272  002FBA  6EDE               	movwf	postinc2,c
  2273  002FBC  0E00               	movlw	0
  2274  002FBE  6EDD               	movwf	postdec2,c
  2275  002FC0  0012               	return	
  2276  002FC2                     __end_of_crcBufS_put:
  2277                           	opt stack 0
  2278                           tosu	equ	0xFFF
  2279                           tosh	equ	0xFFE
  2280                           tosl	equ	0xFFD
  2281                           pclath	equ	0xFFA
  2282                           tblptru	equ	0xFF8
  2283                           tblptrh	equ	0xFF7
  2284                           tblptrl	equ	0xFF6
  2285                           tablat	equ	0xFF5
  2286                           intcon	equ	0xFF2
  2287                           postinc0	equ	0xFEE
  2288                           wreg	equ	0xFE8
  2289                           postdec1	equ	0xFE5
  2290                           fsr1l	equ	0xFE1
  2291                           indf2	equ	0xFDF
  2292                           postinc2	equ	0xFDE
  2293                           postdec2	equ	0xFDD
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           status	equ	0xFD8
  2297                           
  2298 ;; *************** function _FastTransfer_buffer_flush *****************
  2299 ;; Defined at:
  2300 ;;		line 261 in file "FastTransfer.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  2303 ;;		 -> ring_buffer(206), 
  2304 ;;  clearBuffer     2   36[COMRAM] const int 
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;		None
  2307 ;; Return value:  Size  Location     Type
  2308 ;;		None               void
  2309 ;; Registers used:
  2310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2316 ;;      Params:         4       0       0       0       0       0       0
  2317 ;;      Locals:         0       0       0       0       0       0       0
  2318 ;;      Temps:          0       0       0       0       0       0       0
  2319 ;;      Totals:         4       0       0       0       0       0       0
  2320 ;;Total ram usage:        4 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:    5
  2323 ;; This function calls:
  2324 ;;		_memset
  2325 ;; This function is called by:
  2326 ;;		_sendData
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text4
  2331  003696                     __ptext4:
  2332                           	opt stack 0
  2333  003696                     _FastTransfer_buffer_flush:
  2334                           	opt stack 23
  2335                           
  2336                           ;FastTransfer.c: 262: _this->count = 0;
  2337                           
  2338                           ;incstack = 0
  2339  003696  EE20 F0CC          	lfsr	2,204
  2340  00369A  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2341  00369C  26D9               	addwf	fsr2l,f,c
  2342  00369E  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2343  0036A0  22DA               	addwfc	fsr2h,f,c
  2344  0036A2  0E00               	movlw	0
  2345  0036A4  6EDE               	movwf	postinc2,c
  2346  0036A6  0E00               	movlw	0
  2347  0036A8  6EDD               	movwf	postdec2,c
  2348                           
  2349                           ;FastTransfer.c: 263: _this->head = 0;
  2350  0036AA  EE20 F0C8          	lfsr	2,200
  2351  0036AE  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2352  0036B0  26D9               	addwf	fsr2l,f,c
  2353  0036B2  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2354  0036B4  22DA               	addwfc	fsr2h,f,c
  2355  0036B6  0E00               	movlw	0
  2356  0036B8  6EDE               	movwf	postinc2,c
  2357  0036BA  0E00               	movlw	0
  2358  0036BC  6EDD               	movwf	postdec2,c
  2359                           
  2360                           ;FastTransfer.c: 264: _this->tail = 0;
  2361  0036BE  EE20 F0CA          	lfsr	2,202
  2362  0036C2  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2363  0036C4  26D9               	addwf	fsr2l,f,c
  2364  0036C6  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2365  0036C8  22DA               	addwfc	fsr2h,f,c
  2366  0036CA  0E00               	movlw	0
  2367  0036CC  6EDE               	movwf	postinc2,c
  2368  0036CE  0E00               	movlw	0
  2369  0036D0  6EDD               	movwf	postdec2,c
  2370                           
  2371                           ;FastTransfer.c: 265: if (clearBuffer) {
  2372  0036D2  5026               	movf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  2373  0036D4  1025               	iorwf	FastTransfer_buffer_flush@clearBuffer,w,c
  2374  0036D6  B4D8               	btfsc	status,2,c
  2375  0036D8  0012               	return	
  2376                           
  2377                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2378  0036DA  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2379  0036DE  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2380  0036E2  0E00               	movlw	0
  2381  0036E4  6E1E               	movwf	memset@c+1,c
  2382  0036E6  0E00               	movlw	0
  2383  0036E8  6E1D               	movwf	memset@c,c
  2384  0036EA  0E00               	movlw	0
  2385  0036EC  6E20               	movwf	memset@n+1,c
  2386  0036EE  0EC8               	movlw	200
  2387  0036F0  6E1F               	movwf	memset@n,c
  2388  0036F2  EC19  F01D         	call	_memset	;wreg free
  2389  0036F6  0012               	return	
  2390  0036F8                     __end_of_FastTransfer_buffer_flush:
  2391                           	opt stack 0
  2392                           tosu	equ	0xFFF
  2393                           tosh	equ	0xFFE
  2394                           tosl	equ	0xFFD
  2395                           pclath	equ	0xFFA
  2396                           tblptru	equ	0xFF8
  2397                           tblptrh	equ	0xFF7
  2398                           tblptrl	equ	0xFF6
  2399                           tablat	equ	0xFF5
  2400                           intcon	equ	0xFF2
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           postdec1	equ	0xFE5
  2404                           fsr1l	equ	0xFE1
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           postdec2	equ	0xFDD
  2408                           fsr2h	equ	0xFDA
  2409                           fsr2l	equ	0xFD9
  2410                           status	equ	0xFD8
  2411                           
  2412 ;; *************** function _receiveData *****************
  2413 ;; Defined at:
  2414 ;;		line 82 in file "FastTransfer.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  holder          3   10[BANK0 ] unsigned char [3]
  2419 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2420 ;;  holder          3    7[BANK0 ] unsigned char [3]
  2421 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2422 ;;  u               2   15[BANK0 ] int 
  2423 ;;  r               2   17[BANK0 ] int 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      unsigned char 
  2426 ;; Registers used:
  2427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2433 ;;      Params:         0       0       0       0       0       0       0
  2434 ;;      Locals:         0      12       0       0       0       0       0
  2435 ;;      Temps:          4       0       0       0       0       0       0
  2436 ;;      Totals:         4      12       0       0       0       0       0
  2437 ;;Total ram usage:       16 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    8
  2440 ;; This function calls:
  2441 ;;		Absolute function
  2442 ;;		_CRC8
  2443 ;;		_CRCcheck
  2444 ;;		_Receive_available
  2445 ;;		_Receive_get
  2446 ;;		_Receive_peek
  2447 ;;		_Send_put
  2448 ;; This function is called by:
  2449 ;;		_updateComms
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text5
  2454  00061E                     __ptext5:
  2455                           	opt stack 0
  2456  00061E                     _receiveData:
  2457                           	opt stack 21
  2458                           
  2459                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2460                           
  2461                           ;incstack = 0
  2462  00061E  6642               	tstfsz	_rx_len,c
  2463  000620  D0A9               	goto	l4953
  2464                           
  2465                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2466  000622  D801               	call	u5258
  2467  000624  D00A               	goto	u5259
  2468  000626                     u5258:
  2469  000626  0005               	push	
  2470  000628  6EFA               	movwf	pclath,c
  2471  00062A  5031               	movf	_serial_available,w,c
  2472  00062C  6EFD               	movwf	tosl,c
  2473  00062E  5032               	movf	_serial_available+1,w,c
  2474  000630  6EFE               	movwf	tosh,c
  2475  000632  50F8               	movf	tblptru,w,c
  2476  000634  6EFF               	movwf	tosu,c
  2477  000636  50FA               	movf	pclath,w,c
  2478  000638  0012               	return		;indir
  2479  00063A                     u5259:
  2480  00063A  501E               	movf	?_Receive_available+1,w,c
  2481  00063C  0A80               	xorlw	128
  2482  00063E  0F80               	addlw	-128
  2483  000640  0E05               	movlw	5
  2484  000642  B4D8               	btfsc	status,2,c
  2485  000644  5C1D               	subwf	?_Receive_available,w,c
  2486  000646  B0D8               	btfsc	status,0,c
  2487  000648  D01C               	goto	l4929
  2488  00064A  D094               	goto	l4953
  2489  00064C                     l4921:
  2490                           
  2491                           ;FastTransfer.c: 93: alignErrorCounter++;
  2492  00064C  0100               	movlb	0	; () banked
  2493  00064E  4B8E               	infsnz	_alignErrorCounter& (0+255),f,b
  2494  000650  2B8F               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2498  000652  D801               	call	u5278
  2499  000654  D00A               	goto	u5279
  2500  000656                     u5278:
  2501  000656  0005               	push	
  2502  000658  6EFA               	movwf	pclath,c
  2503  00065A  5031               	movf	_serial_available,w,c
  2504  00065C  6EFD               	movwf	tosl,c
  2505  00065E  5032               	movf	_serial_available+1,w,c
  2506  000660  6EFE               	movwf	tosh,c
  2507  000662  50F8               	movf	tblptru,w,c
  2508  000664  6EFF               	movwf	tosu,c
  2509  000666  50FA               	movf	pclath,w,c
  2510  000668  0012               	return		;indir
  2511  00066A                     u5279:
  2512  00066A  501E               	movf	?_Receive_available+1,w,c
  2513  00066C  0A80               	xorlw	128
  2514  00066E  6EF3               	movwf	prodl,c
  2515  000670  0E80               	movlw	128
  2516  000672  5CF3               	subwf	prodl,w,c
  2517  000674  0E05               	movlw	5
  2518  000676  B4D8               	btfsc	status,2,c
  2519  000678  5C1D               	subwf	?_Receive_available,w,c
  2520  00067A  B0D8               	btfsc	status,0,c
  2521  00067C  D002               	goto	l4929
  2522                           
  2523                           ;FastTransfer.c: 95: return 0;
  2524  00067E  0E00               	movlw	0
  2525  000680  0012               	return	
  2526  000682                     l4929:
  2527  000682  D801               	call	u5298
  2528  000684  D00A               	goto	u5299
  2529  000686                     u5298:
  2530  000686  0005               	push	
  2531  000688  6EFA               	movwf	pclath,c
  2532  00068A  5033               	movf	_serial_read,w,c
  2533  00068C  6EFD               	movwf	tosl,c
  2534  00068E  5034               	movf	_serial_read+1,w,c
  2535  000690  6EFE               	movwf	tosh,c
  2536  000692  50F8               	movf	tblptru,w,c
  2537  000694  6EFF               	movwf	tosu,c
  2538  000696  50FA               	movf	pclath,w,c
  2539  000698  0012               	return		;indir
  2540  00069A                     u5299:
  2541  00069A  0A06               	xorlw	6
  2542  00069C  A4D8               	btfss	status,2,c
  2543  00069E  D7D6               	goto	l4921
  2544                           
  2545                           ;FastTransfer.c: 96: }
  2546                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2547  0006A0  D801               	call	u5318
  2548  0006A2  D00A               	goto	u5319
  2549  0006A4                     u5318:
  2550  0006A4  0005               	push	
  2551  0006A6  6EFA               	movwf	pclath,c
  2552  0006A8  5033               	movf	_serial_read,w,c
  2553  0006AA  6EFD               	movwf	tosl,c
  2554  0006AC  5034               	movf	_serial_read+1,w,c
  2555  0006AE  6EFE               	movwf	tosh,c
  2556  0006B0  50F8               	movf	tblptru,w,c
  2557  0006B2  6EFF               	movwf	tosu,c
  2558  0006B4  50FA               	movf	pclath,w,c
  2559  0006B6  0012               	return		;indir
  2560  0006B8                     u5319:
  2561  0006B8  0A85               	xorlw	133
  2562  0006BA  A4D8               	btfss	status,2,c
  2563  0006BC  D05B               	goto	l4953
  2564                           
  2565                           ;FastTransfer.c: 98: rx_address = serial_read();
  2566  0006BE  D801               	call	u5338
  2567  0006C0  D00A               	goto	u5339
  2568  0006C2                     u5338:
  2569  0006C2  0005               	push	
  2570  0006C4  6EFA               	movwf	pclath,c
  2571  0006C6  5033               	movf	_serial_read,w,c
  2572  0006C8  6EFD               	movwf	tosl,c
  2573  0006CA  5034               	movf	_serial_read+1,w,c
  2574  0006CC  6EFE               	movwf	tosh,c
  2575  0006CE  50F8               	movf	tblptru,w,c
  2576  0006D0  6EFF               	movwf	tosu,c
  2577  0006D2  50FA               	movf	pclath,w,c
  2578  0006D4  0012               	return		;indir
  2579  0006D6                     u5339:
  2580  0006D6  6E40               	movwf	_rx_address,c
  2581                           
  2582                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2583  0006D8  D801               	call	u5348
  2584  0006DA  D00A               	goto	u5349
  2585  0006DC                     u5348:
  2586  0006DC  0005               	push	
  2587  0006DE  6EFA               	movwf	pclath,c
  2588  0006E0  5033               	movf	_serial_read,w,c
  2589  0006E2  6EFD               	movwf	tosl,c
  2590  0006E4  5034               	movf	_serial_read+1,w,c
  2591  0006E6  6EFE               	movwf	tosh,c
  2592  0006E8  50F8               	movf	tblptru,w,c
  2593  0006EA  6EFF               	movwf	tosu,c
  2594  0006EC  50FA               	movf	pclath,w,c
  2595  0006EE  0012               	return		;indir
  2596  0006F0                     u5349:
  2597  0006F0  6E3F               	movwf	_returnAddress,c
  2598                           
  2599                           ;FastTransfer.c: 100: rx_len = serial_read();
  2600  0006F2  D801               	call	u5358
  2601  0006F4  D00A               	goto	u5359
  2602  0006F6                     u5358:
  2603  0006F6  0005               	push	
  2604  0006F8  6EFA               	movwf	pclath,c
  2605  0006FA  5033               	movf	_serial_read,w,c
  2606  0006FC  6EFD               	movwf	tosl,c
  2607  0006FE  5034               	movf	_serial_read+1,w,c
  2608  000700  6EFE               	movwf	tosh,c
  2609  000702  50F8               	movf	tblptru,w,c
  2610  000704  6EFF               	movwf	tosu,c
  2611  000706  50FA               	movf	pclath,w,c
  2612  000708  0012               	return		;indir
  2613  00070A                     u5359:
  2614  00070A  6E42               	movwf	_rx_len,c
  2615                           
  2616                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2617  00070C  5040               	movf	_rx_address,w,c
  2618  00070E  183E               	xorwf	_moduleAddress,w,c
  2619  000710  B4D8               	btfsc	status,2,c
  2620  000712  D030               	goto	l4953
  2621                           
  2622                           ;FastTransfer.c: 103: addressErrorCounter++;
  2623  000714  0100               	movlb	0	; () banked
  2624  000716  4B8C               	infsnz	_addressErrorCounter& (0+255),f,b
  2625  000718  2B8D               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;FastTransfer.c: 106: int u;
  2629                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2630  00071A  0E00               	movlw	0
  2631  00071C  0100               	movlb	0	; () banked
  2632  00071E  6FD1               	movwf	(receiveData@u+1)& (0+255),b
  2633  000720  0E00               	movlw	0
  2634  000722  0100               	movlb	0	; () banked
  2635  000724  6FD0               	movwf	receiveData@u& (0+255),b
  2636  000726  D00F               	goto	l4945
  2637  000728                     l4941:
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;FastTransfer.c: 108: serial_read();
  2641  000728  D801               	call	u5378
  2642  00072A  D00A               	goto	u5379
  2643  00072C                     u5378:
  2644  00072C  0005               	push	
  2645  00072E  6EFA               	movwf	pclath,c
  2646  000730  5033               	movf	_serial_read,w,c
  2647  000732  6EFD               	movwf	tosl,c
  2648  000734  5034               	movf	_serial_read+1,w,c
  2649  000736  6EFE               	movwf	tosh,c
  2650  000738  50F8               	movf	tblptru,w,c
  2651  00073A  6EFF               	movwf	tosu,c
  2652  00073C  50FA               	movf	pclath,w,c
  2653  00073E  0012               	return		;indir
  2654  000740                     u5379:
  2655  000740  0100               	movlb	0	; () banked
  2656  000742  4BD0               	infsnz	receiveData@u& (0+255),f,b
  2657  000744  2BD1               	incf	(receiveData@u+1)& (0+255),f,b
  2658  000746                     l4945:
  2659                           
  2660                           ; BSR set to: 0
  2661  000746  5042               	movf	_rx_len,w,c
  2662  000748  6E27               	movwf	??_receiveData& (0+255),c
  2663  00074A  6A28               	clrf	(??_receiveData+1)& (0+255),c
  2664  00074C  0E01               	movlw	1
  2665  00074E  2627               	addwf	??_receiveData,f,c
  2666  000750  0E00               	movlw	0
  2667  000752  2228               	addwfc	??_receiveData+1,f,c
  2668  000754  5028               	movf	??_receiveData+1,w,c
  2669  000756  0A80               	xorlw	128
  2670  000758  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2671  00075A  0100               	movlb	0	; () banked
  2672  00075C  51D0               	movf	receiveData@u& (0+255),w,b
  2673  00075E  5C27               	subwf	??_receiveData,w,c
  2674  000760  0100               	movlb	0	; () banked
  2675  000762  51D1               	movf	(receiveData@u+1)& (0+255),w,b
  2676  000764  0A80               	xorlw	128
  2677  000766  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  2678  000768  B0D8               	btfsc	status,0,c
  2679  00076A  D7DE               	goto	l4941
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;FastTransfer.c: 109: }
  2683                           ;FastTransfer.c: 110: rx_len = 0;
  2684                           
  2685                           ; BSR set to: 0
  2686  00076C  0E00               	movlw	0
  2687  00076E  6E42               	movwf	_rx_len,c
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;FastTransfer.c: 111: return 0;
  2691  000770  0E00               	movlw	0
  2692  000772  0012               	return	
  2693  000774                     l4953:
  2694                           
  2695                           ;FastTransfer.c: 112: }
  2696                           ;FastTransfer.c: 114: }
  2697                           ;FastTransfer.c: 115: }
  2698                           ;FastTransfer.c: 116: }
  2699                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2700  000774  5042               	movf	_rx_len,w,c
  2701  000776  B4D8               	btfsc	status,2,c
  2702  000778  D277               	goto	l5077
  2703                           
  2704                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2705  00077A  6641               	tstfsz	_rx_array_inx,c
  2706  00077C  D049               	goto	l4977
  2707  00077E                     l4959:
  2708  00077E  D801               	call	u5418
  2709  000780  D00A               	goto	u5419
  2710  000782                     u5418:
  2711  000782  0005               	push	
  2712  000784  6EFA               	movwf	pclath,c
  2713  000786  5031               	movf	_serial_available,w,c
  2714  000788  6EFD               	movwf	tosl,c
  2715  00078A  5032               	movf	_serial_available+1,w,c
  2716  00078C  6EFE               	movwf	tosh,c
  2717  00078E  50F8               	movf	tblptru,w,c
  2718  000790  6EFF               	movwf	tosu,c
  2719  000792  50FA               	movf	pclath,w,c
  2720  000794  0012               	return		;indir
  2721  000796                     u5419:
  2722  000796  501E               	movf	?_Receive_available+1,w,c
  2723  000798  0A80               	xorlw	128
  2724  00079A  0F80               	addlw	-128
  2725  00079C  0E01               	movlw	1
  2726  00079E  B4D8               	btfsc	status,2,c
  2727  0007A0  5C1D               	subwf	?_Receive_available,w,c
  2728  0007A2  A0D8               	btfss	status,0,c
  2729  0007A4  D7EC               	goto	l4959
  2730                           
  2731                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2732  0007A6  D801               	call	u5438
  2733  0007A8  D00D               	goto	u5439
  2734  0007AA                     u5438:
  2735  0007AA  0005               	push	
  2736  0007AC  0100               	movlb	0	; () banked
  2737  0007AE  6EFA               	movwf	pclath,c
  2738  0007B0  0100               	movlb	0	; () banked
  2739  0007B2  519A               	movf	_serial_peek& (0+255),w,b
  2740  0007B4  6EFD               	movwf	tosl,c
  2741  0007B6  0100               	movlb	0	; () banked
  2742  0007B8  519B               	movf	(_serial_peek+1)& (0+255),w,b
  2743  0007BA  6EFE               	movwf	tosh,c
  2744  0007BC  50F8               	movf	tblptru,w,c
  2745  0007BE  6EFF               	movwf	tosu,c
  2746  0007C0  50FA               	movf	pclath,w,c
  2747  0007C2  0012               	return		;indir
  2748  0007C4                     u5439:
  2749  0007C4  6E27               	movwf	??_receiveData& (0+255),c
  2750  0007C6  2827               	incf	??_receiveData,w,c
  2751  0007C8  A4D8               	btfss	status,2,c
  2752  0007CA  D022               	goto	l4977
  2753                           
  2754                           ;FastTransfer.c: 125: CRCcheck();
  2755  0007CC  ECEF  F010         	call	_CRCcheck	;wreg free
  2756                           
  2757                           ;FastTransfer.c: 126: rx_len = 0;
  2758  0007D0  0E00               	movlw	0
  2759  0007D2  6E42               	movwf	_rx_len,c
  2760                           
  2761                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2762  0007D4  0E00               	movlw	0
  2763  0007D6  6E41               	movwf	_rx_array_inx,c
  2764                           
  2765                           ;FastTransfer.c: 128: return 0;
  2766  0007D8  0E00               	movlw	0
  2767  0007DA  0012               	return	
  2768  0007DC                     l4973:
  2769                           
  2770                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2771  0007DC  D801               	call	u5458
  2772  0007DE  D00A               	goto	u5459
  2773  0007E0                     u5458:
  2774  0007E0  0005               	push	
  2775  0007E2  6EFA               	movwf	pclath,c
  2776  0007E4  5033               	movf	_serial_read,w,c
  2777  0007E6  6EFD               	movwf	tosl,c
  2778  0007E8  5034               	movf	_serial_read+1,w,c
  2779  0007EA  6EFE               	movwf	tosh,c
  2780  0007EC  50F8               	movf	tblptru,w,c
  2781  0007EE  6EFF               	movwf	tosu,c
  2782  0007F0  50FA               	movf	pclath,w,c
  2783  0007F2  0012               	return		;indir
  2784  0007F4                     u5459:
  2785  0007F4  6E27               	movwf	??_receiveData& (0+255),c
  2786  0007F6  5041               	movf	_rx_array_inx,w,c
  2787  0007F8  0D01               	mullw	1
  2788  0007FA  0103               	movlb	3	; () banked
  2789  0007FC  0E00               	movlw	low _rx_buffer
  2790  0007FE  24F3               	addwf	prodl,w,c
  2791  000800  6ED9               	movwf	fsr2l,c
  2792  000802  0103               	movlb	3	; () banked
  2793  000804  0E03               	movlw	high _rx_buffer
  2794  000806  20F4               	addwfc	prodh,w,c
  2795  000808  6EDA               	movwf	fsr2h,c
  2796  00080A  C027  FFDF         	movff	??_receiveData,indf2
  2797                           
  2798                           ; BSR set to: 3
  2799  00080E  2A41               	incf	_rx_array_inx,f,c
  2800  000810                     l4977:
  2801  000810  D801               	call	u5468
  2802  000812  D00A               	goto	u5469
  2803  000814                     u5468:
  2804  000814  0005               	push	
  2805  000816  6EFA               	movwf	pclath,c
  2806  000818  5031               	movf	_serial_available,w,c
  2807  00081A  6EFD               	movwf	tosl,c
  2808  00081C  5032               	movf	_serial_available+1,w,c
  2809  00081E  6EFE               	movwf	tosh,c
  2810  000820  50F8               	movf	tblptru,w,c
  2811  000822  6EFF               	movwf	tosu,c
  2812  000824  50FA               	movf	pclath,w,c
  2813  000826  0012               	return		;indir
  2814  000828                     u5469:
  2815  000828  501E               	movf	?_Receive_available+1,w,c
  2816  00082A  101D               	iorwf	?_Receive_available,w,c
  2817  00082C  B4D8               	btfsc	status,2,c
  2818  00082E  D004               	goto	l4981
  2819  000830  5041               	movf	_rx_array_inx,w,c
  2820  000832  5C42               	subwf	_rx_len,w,c
  2821  000834  B0D8               	btfsc	status,0,c
  2822  000836  D7D2               	goto	l4973
  2823  000838                     l4981:
  2824                           
  2825                           ;FastTransfer.c: 135: }
  2826                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2827  000838  0EFF               	movlw	255
  2828  00083A  6E27               	movwf	??_receiveData& (0+255),c
  2829  00083C  0EFF               	movlw	255
  2830  00083E  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2831  000840  5041               	movf	_rx_array_inx,w,c
  2832  000842  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2833  000844  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2834  000846  5027               	movf	??_receiveData,w,c
  2835  000848  2629               	addwf	??_receiveData+2,f,c
  2836  00084A  5028               	movf	??_receiveData+1,w,c
  2837  00084C  222A               	addwfc	??_receiveData+3,f,c
  2838  00084E  5042               	movf	_rx_len,w,c
  2839  000850  1829               	xorwf	??_receiveData+2,w,c
  2840  000852  102A               	iorwf	??_receiveData+3,w,c
  2841  000854  A4D8               	btfss	status,2,c
  2842  000856  D208               	goto	l5077
  2843                           
  2844                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2845  000858  0103               	movlb	3	; () banked
  2846  00085A  0E03               	movlw	high _rx_buffer
  2847  00085C  6E1C               	movwf	CRC8@data+1,c
  2848  00085E  0103               	movlb	3	; () banked
  2849  000860  0E00               	movlw	low _rx_buffer
  2850  000862  6E1B               	movwf	CRC8@data,c
  2851  000864  C042  F01D         	movff	_rx_len,CRC8@len
  2852  000868  ECF4  F01B         	call	_CRC8	;wreg free
  2853  00086C  6E3C               	movwf	_calc_CS,c
  2854                           
  2855                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2856  00086E  0EFF               	movlw	255
  2857  000870  6E27               	movwf	??_receiveData& (0+255),c
  2858  000872  0EFF               	movlw	255
  2859  000874  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2860  000876  5041               	movf	_rx_array_inx,w,c
  2861  000878  6E29               	movwf	(??_receiveData+2)& (0+255),c
  2862  00087A  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  2863  00087C  5027               	movf	??_receiveData,w,c
  2864  00087E  2629               	addwf	??_receiveData+2,f,c
  2865  000880  5028               	movf	??_receiveData+1,w,c
  2866  000882  222A               	addwfc	??_receiveData+3,f,c
  2867  000884  0103               	movlb	3	; () banked
  2868  000886  0E00               	movlw	low _rx_buffer
  2869  000888  2429               	addwf	??_receiveData+2,w,c
  2870  00088A  6ED9               	movwf	fsr2l,c
  2871  00088C  0103               	movlb	3	; () banked
  2872  00088E  0E03               	movlw	high _rx_buffer
  2873  000890  202A               	addwfc	??_receiveData+3,w,c
  2874  000892  6EDA               	movwf	fsr2h,c
  2875  000894  503C               	movf	_calc_CS,w,c
  2876  000896  62DF               	cpfseq	indf2,c
  2877  000898  D12B               	goto	l5039
  2878                           
  2879                           ; BSR set to: 3
  2880                           ;FastTransfer.c: 147: int r;
  2881                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2882  00089A  0E00               	movlw	0
  2883  00089C  0100               	movlb	0	; () banked
  2884  00089E  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  2885  0008A0  0E00               	movlw	0
  2886  0008A2  0100               	movlb	0	; () banked
  2887  0008A4  6FD2               	movwf	receiveData@r& (0+255),b
  2888  0008A6  D05C               	goto	l4999
  2889  0008A8                     l4989:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2893  0008A8  0103               	movlb	3	; () banked
  2894  0008AA  0E00               	movlw	low _rx_buffer
  2895  0008AC  0100               	movlb	0	; () banked
  2896  0008AE  25D2               	addwf	receiveData@r& (0+255),w,b
  2897  0008B0  6ED9               	movwf	fsr2l,c
  2898  0008B2  0103               	movlb	3	; () banked
  2899  0008B4  0E03               	movlw	high _rx_buffer
  2900  0008B6  0100               	movlb	0	; () banked
  2901  0008B8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2902  0008BA  6EDA               	movwf	fsr2h,c
  2903  0008BC  50DF               	movf	indf2,w,c
  2904  0008BE  6E27               	movwf	??_receiveData& (0+255),c
  2905  0008C0  503D               	movf	_maxDataAddress,w,c
  2906  0008C2  5C27               	subwf	??_receiveData,w,c
  2907  0008C4  B0D8               	btfsc	status,0,c
  2908  0008C6  D03F               	goto	l4995
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2912  0008C8  0E01               	movlw	1
  2913  0008CA  0100               	movlb	0	; () banked
  2914  0008CC  25D2               	addwf	receiveData@r& (0+255),w,b
  2915  0008CE  6E27               	movwf	??_receiveData& (0+255),c
  2916  0008D0  0E00               	movlw	0
  2917  0008D2  0100               	movlb	0	; () banked
  2918  0008D4  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2919  0008D6  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2920  0008D8  0103               	movlb	3	; () banked
  2921  0008DA  0E00               	movlw	low _rx_buffer
  2922  0008DC  2427               	addwf	??_receiveData,w,c
  2923  0008DE  6ED9               	movwf	fsr2l,c
  2924  0008E0  0103               	movlb	3	; () banked
  2925  0008E2  0E03               	movlw	high _rx_buffer
  2926  0008E4  2028               	addwfc	??_receiveData+1,w,c
  2927  0008E6  6EDA               	movwf	fsr2h,c
  2928  0008E8  50DF               	movf	indf2,w,c
  2929  0008EA  6E43               	movwf	_group,c
  2930                           
  2931                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2932  0008EC  0E02               	movlw	2
  2933  0008EE  0100               	movlb	0	; () banked
  2934  0008F0  25D2               	addwf	receiveData@r& (0+255),w,b
  2935  0008F2  6E27               	movwf	??_receiveData& (0+255),c
  2936  0008F4  0E00               	movlw	0
  2937  0008F6  0100               	movlb	0	; () banked
  2938  0008F8  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2939  0008FA  6E28               	movwf	(??_receiveData+1)& (0+255),c
  2940  0008FC  0103               	movlb	3	; () banked
  2941  0008FE  0E00               	movlw	low _rx_buffer
  2942  000900  2427               	addwf	??_receiveData,w,c
  2943  000902  6ED9               	movwf	fsr2l,c
  2944  000904  0103               	movlb	3	; () banked
  2945  000906  0E03               	movlw	high _rx_buffer
  2946  000908  2028               	addwfc	??_receiveData+1,w,c
  2947  00090A  6EDA               	movwf	fsr2h,c
  2948  00090C  50DF               	movf	indf2,w,c
  2949  00090E  6E44               	movwf	_group+1,c
  2950                           
  2951                           ; BSR set to: 3
  2952                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2953  000910  0103               	movlb	3	; () banked
  2954  000912  0E00               	movlw	low _rx_buffer
  2955  000914  0100               	movlb	0	; () banked
  2956  000916  25D2               	addwf	receiveData@r& (0+255),w,b
  2957  000918  6ED9               	movwf	fsr2l,c
  2958  00091A  0103               	movlb	3	; () banked
  2959  00091C  0E03               	movlw	high _rx_buffer
  2960  00091E  0100               	movlb	0	; () banked
  2961  000920  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2962  000922  6EDA               	movwf	fsr2h,c
  2963  000924  50DF               	movf	indf2,w,c
  2964  000926  6E27               	movwf	??_receiveData& (0+255),c
  2965  000928  5027               	movf	??_receiveData,w,c
  2966  00092A  0D02               	mullw	2
  2967  00092C  50F3               	movf	prodl,w,c
  2968  00092E  0100               	movlb	0	; () banked
  2969  000930  2596               	addwf	_receiveArrayAddress& (0+255),w,b
  2970  000932  6ED9               	movwf	fsr2l,c
  2971  000934  50F4               	movf	prodh,w,c
  2972  000936  0100               	movlb	0	; () banked
  2973  000938  2197               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2974  00093A  6EDA               	movwf	fsr2h,c
  2975  00093C  C043  FFDE         	movff	_group,postinc2
  2976  000940  C044  FFDD         	movff	_group+1,postdec2
  2977                           
  2978                           ;FastTransfer.c: 153: } else {
  2979  000944  D003               	goto	l4997
  2980  000946                     l4995:
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2984  000946  0100               	movlb	0	; () banked
  2985  000948  4B92               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2986  00094A  2B93               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2987  00094C                     l4997:
  2988                           
  2989                           ; BSR set to: 0
  2990  00094C  0E03               	movlw	3
  2991  00094E  0100               	movlb	0	; () banked
  2992  000950  25D2               	addwf	receiveData@r& (0+255),w,b
  2993  000952  0100               	movlb	0	; () banked
  2994  000954  6FD2               	movwf	receiveData@r& (0+255),b
  2995  000956  0E00               	movlw	0
  2996  000958  0100               	movlb	0	; () banked
  2997  00095A  21D3               	addwfc	(receiveData@r+1)& (0+255),w,b
  2998  00095C  0100               	movlb	0	; () banked
  2999  00095E  6FD3               	movwf	(receiveData@r+1)& (0+255),b
  3000  000960                     l4999:
  3001                           
  3002                           ; BSR set to: 0
  3003  000960  5042               	movf	_rx_len,w,c
  3004  000962  6E27               	movwf	??_receiveData& (0+255),c
  3005  000964  6A28               	clrf	(??_receiveData+1)& (0+255),c
  3006  000966  0100               	movlb	0	; () banked
  3007  000968  51D3               	movf	(receiveData@r+1)& (0+255),w,b
  3008  00096A  0A80               	xorlw	128
  3009  00096C  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3010  00096E  5027               	movf	??_receiveData,w,c
  3011  000970  0100               	movlb	0	; () banked
  3012  000972  5DD2               	subwf	receiveData@r& (0+255),w,b
  3013  000974  5028               	movf	??_receiveData+1,w,c
  3014  000976  0A80               	xorlw	128
  3015  000978  5829               	subwfb	(??_receiveData+2)& (0+255),w,c
  3016  00097A  A0D8               	btfss	status,0,c
  3017  00097C  D795               	goto	l4989
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;FastTransfer.c: 155: }
  3021                           ;FastTransfer.c: 156: }
  3022                           ;FastTransfer.c: 159: if (AKNAKsend) {
  3023                           
  3024                           ; BSR set to: 0
  3025  00097E  5039               	movf	_AKNAKsend,w,c
  3026  000980  B4D8               	btfsc	status,2,c
  3027  000982  D0B0               	goto	l5029
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;FastTransfer.c: 160: unsigned char holder[3];
  3031                           ;FastTransfer.c: 161: holder[0] = 255;
  3032  000984  0100               	movlb	0	; () banked
  3033  000986  69C8               	setf	receiveData@holder& (0+255),b
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;FastTransfer.c: 162: holder[1] = 1;
  3037  000988  0E01               	movlw	1
  3038  00098A  0100               	movlb	0	; () banked
  3039  00098C  6FC9               	movwf	(receiveData@holder+1)& (0+255),b
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  3043  00098E  0EFF               	movlw	255
  3044  000990  6E27               	movwf	??_receiveData& (0+255),c
  3045  000992  0EFF               	movlw	255
  3046  000994  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3047  000996  5041               	movf	_rx_array_inx,w,c
  3048  000998  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3049  00099A  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3050  00099C  5027               	movf	??_receiveData,w,c
  3051  00099E  2629               	addwf	??_receiveData+2,f,c
  3052  0009A0  5028               	movf	??_receiveData+1,w,c
  3053  0009A2  222A               	addwfc	??_receiveData+3,f,c
  3054  0009A4  0103               	movlb	3	; () banked
  3055  0009A6  0E00               	movlw	low _rx_buffer
  3056  0009A8  2429               	addwf	??_receiveData+2,w,c
  3057  0009AA  6ED9               	movwf	fsr2l,c
  3058  0009AC  0103               	movlb	3	; () banked
  3059  0009AE  0E03               	movlw	high _rx_buffer
  3060  0009B0  202A               	addwfc	??_receiveData+3,w,c
  3061  0009B2  6EDA               	movwf	fsr2h,c
  3062  0009B4  50DF               	movf	indf2,w,c
  3063  0009B6  0100               	movlb	0	; () banked
  3064  0009B8  6FCA               	movwf	(receiveData@holder+2)& (0+255),b
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  3068  0009BA  0100               	movlb	0	; () banked
  3069  0009BC  0E00               	movlw	high receiveData@holder
  3070  0009BE  6E1C               	movwf	CRC8@data+1,c
  3071  0009C0  0100               	movlb	0	; () banked
  3072  0009C2  0EC8               	movlw	low receiveData@holder
  3073  0009C4  6E1B               	movwf	CRC8@data,c
  3074  0009C6  0E03               	movlw	3
  3075  0009C8  6E1D               	movwf	CRC8@len,c
  3076  0009CA  ECF4  F01B         	call	_CRC8	;wreg free
  3077  0009CE  0100               	movlb	0	; () banked
  3078  0009D0  6FCE               	movwf	receiveData@crcHolder& (0+255),b
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;FastTransfer.c: 165: serial_write(0x06);
  3082  0009D2  D801               	call	u5548
  3083  0009D4  D00B               	goto	u5549
  3084  0009D6                     u5548:
  3085  0009D6  0005               	push	
  3086  0009D8  6EFA               	movwf	pclath,c
  3087  0009DA  5035               	movf	_serial_write,w,c
  3088  0009DC  6EFD               	movwf	tosl,c
  3089  0009DE  5036               	movf	_serial_write+1,w,c
  3090  0009E0  6EFE               	movwf	tosh,c
  3091  0009E2  50F8               	movf	tblptru,w,c
  3092  0009E4  6EFF               	movwf	tosu,c
  3093  0009E6  50FA               	movf	pclath,w,c
  3094  0009E8  0E06               	movlw	6
  3095  0009EA  0012               	return		;indir
  3096  0009EC                     u5549:
  3097                           
  3098                           ;FastTransfer.c: 166: serial_write(0x85);
  3099  0009EC  D801               	call	u5558
  3100  0009EE  D00B               	goto	u5559
  3101  0009F0                     u5558:
  3102  0009F0  0005               	push	
  3103  0009F2  6EFA               	movwf	pclath,c
  3104  0009F4  5035               	movf	_serial_write,w,c
  3105  0009F6  6EFD               	movwf	tosl,c
  3106  0009F8  5036               	movf	_serial_write+1,w,c
  3107  0009FA  6EFE               	movwf	tosh,c
  3108  0009FC  50F8               	movf	tblptru,w,c
  3109  0009FE  6EFF               	movwf	tosu,c
  3110  000A00  50FA               	movf	pclath,w,c
  3111  000A02  0E85               	movlw	133
  3112  000A04  0012               	return		;indir
  3113  000A06                     u5559:
  3114                           
  3115                           ;FastTransfer.c: 167: serial_write(returnAddress);
  3116  000A06  D801               	call	u5568
  3117  000A08  D00B               	goto	u5569
  3118  000A0A                     u5568:
  3119  000A0A  0005               	push	
  3120  000A0C  6EFA               	movwf	pclath,c
  3121  000A0E  5035               	movf	_serial_write,w,c
  3122  000A10  6EFD               	movwf	tosl,c
  3123  000A12  5036               	movf	_serial_write+1,w,c
  3124  000A14  6EFE               	movwf	tosh,c
  3125  000A16  50F8               	movf	tblptru,w,c
  3126  000A18  6EFF               	movwf	tosu,c
  3127  000A1A  50FA               	movf	pclath,w,c
  3128  000A1C  503F               	movf	_returnAddress,w,c
  3129  000A1E  0012               	return		;indir
  3130  000A20                     u5569:
  3131                           
  3132                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  3133  000A20  D801               	call	u5578
  3134  000A22  D00B               	goto	u5579
  3135  000A24                     u5578:
  3136  000A24  0005               	push	
  3137  000A26  6EFA               	movwf	pclath,c
  3138  000A28  5035               	movf	_serial_write,w,c
  3139  000A2A  6EFD               	movwf	tosl,c
  3140  000A2C  5036               	movf	_serial_write+1,w,c
  3141  000A2E  6EFE               	movwf	tosh,c
  3142  000A30  50F8               	movf	tblptru,w,c
  3143  000A32  6EFF               	movwf	tosu,c
  3144  000A34  50FA               	movf	pclath,w,c
  3145  000A36  503E               	movf	_moduleAddress,w,c
  3146  000A38  0012               	return		;indir
  3147  000A3A                     u5579:
  3148                           
  3149                           ;FastTransfer.c: 169: serial_write(3);
  3150  000A3A  D801               	call	u5588
  3151  000A3C  D00B               	goto	u5589
  3152  000A3E                     u5588:
  3153  000A3E  0005               	push	
  3154  000A40  6EFA               	movwf	pclath,c
  3155  000A42  5035               	movf	_serial_write,w,c
  3156  000A44  6EFD               	movwf	tosl,c
  3157  000A46  5036               	movf	_serial_write+1,w,c
  3158  000A48  6EFE               	movwf	tosh,c
  3159  000A4A  50F8               	movf	tblptru,w,c
  3160  000A4C  6EFF               	movwf	tosu,c
  3161  000A4E  50FA               	movf	pclath,w,c
  3162  000A50  0E03               	movlw	3
  3163  000A52  0012               	return		;indir
  3164  000A54                     u5589:
  3165                           
  3166                           ;FastTransfer.c: 170: serial_write(255);
  3167  000A54  D801               	call	u5598
  3168  000A56  D00B               	goto	u5599
  3169  000A58                     u5598:
  3170  000A58  0005               	push	
  3171  000A5A  6EFA               	movwf	pclath,c
  3172  000A5C  5035               	movf	_serial_write,w,c
  3173  000A5E  6EFD               	movwf	tosl,c
  3174  000A60  5036               	movf	_serial_write+1,w,c
  3175  000A62  6EFE               	movwf	tosh,c
  3176  000A64  50F8               	movf	tblptru,w,c
  3177  000A66  6EFF               	movwf	tosu,c
  3178  000A68  50FA               	movf	pclath,w,c
  3179  000A6A  0EFF               	movlw	255
  3180  000A6C  0012               	return		;indir
  3181  000A6E                     u5599:
  3182                           
  3183                           ;FastTransfer.c: 171: serial_write(1);
  3184  000A6E  D801               	call	u5608
  3185  000A70  D00B               	goto	u5609
  3186  000A72                     u5608:
  3187  000A72  0005               	push	
  3188  000A74  6EFA               	movwf	pclath,c
  3189  000A76  5035               	movf	_serial_write,w,c
  3190  000A78  6EFD               	movwf	tosl,c
  3191  000A7A  5036               	movf	_serial_write+1,w,c
  3192  000A7C  6EFE               	movwf	tosh,c
  3193  000A7E  50F8               	movf	tblptru,w,c
  3194  000A80  6EFF               	movwf	tosu,c
  3195  000A82  50FA               	movf	pclath,w,c
  3196  000A84  0E01               	movlw	1
  3197  000A86  0012               	return		;indir
  3198  000A88                     u5609:
  3199                           
  3200                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  3201  000A88  D801               	call	u5618
  3202  000A8A  D01E               	goto	u5619
  3203  000A8C                     u5618:
  3204  000A8C  0005               	push	
  3205  000A8E  6EFA               	movwf	pclath,c
  3206  000A90  5035               	movf	_serial_write,w,c
  3207  000A92  6EFD               	movwf	tosl,c
  3208  000A94  5036               	movf	_serial_write+1,w,c
  3209  000A96  6EFE               	movwf	tosh,c
  3210  000A98  50F8               	movf	tblptru,w,c
  3211  000A9A  6EFF               	movwf	tosu,c
  3212  000A9C  50FA               	movf	pclath,w,c
  3213  000A9E  0EFF               	movlw	255
  3214  000AA0  6E27               	movwf	??_receiveData& (0+255),c
  3215  000AA2  0EFF               	movlw	255
  3216  000AA4  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3217  000AA6  5041               	movf	_rx_array_inx,w,c
  3218  000AA8  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3219  000AAA  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3220  000AAC  5027               	movf	??_receiveData,w,c
  3221  000AAE  2629               	addwf	??_receiveData+2,f,c
  3222  000AB0  5028               	movf	??_receiveData+1,w,c
  3223  000AB2  222A               	addwfc	??_receiveData+3,f,c
  3224  000AB4  0103               	movlb	3	; () banked
  3225  000AB6  0E00               	movlw	low _rx_buffer
  3226  000AB8  2429               	addwf	??_receiveData+2,w,c
  3227  000ABA  6ED9               	movwf	fsr2l,c
  3228  000ABC  0103               	movlb	3	; () banked
  3229  000ABE  0E03               	movlw	high _rx_buffer
  3230  000AC0  202A               	addwfc	??_receiveData+3,w,c
  3231  000AC2  6EDA               	movwf	fsr2h,c
  3232  000AC4  50DF               	movf	indf2,w,c
  3233  000AC6  0012               	return		;indir
  3234  000AC8                     u5619:
  3235                           
  3236                           ;FastTransfer.c: 173: serial_write(crcHolder);
  3237  000AC8  D801               	call	u5628
  3238  000ACA  D00C               	goto	l5029
  3239  000ACC                     u5628:
  3240  000ACC  0005               	push	
  3241  000ACE  6EFA               	movwf	pclath,c
  3242  000AD0  5035               	movf	_serial_write,w,c
  3243  000AD2  6EFD               	movwf	tosl,c
  3244  000AD4  5036               	movf	_serial_write+1,w,c
  3245  000AD6  6EFE               	movwf	tosh,c
  3246  000AD8  50F8               	movf	tblptru,w,c
  3247  000ADA  6EFF               	movwf	tosu,c
  3248  000ADC  50FA               	movf	pclath,w,c
  3249  000ADE  0100               	movlb	0	; () banked
  3250  000AE0  51CE               	movf	receiveData@crcHolder& (0+255),w,b
  3251  000AE2  0012               	return		;indir
  3252  000AE4                     l5029:
  3253                           
  3254                           ;FastTransfer.c: 174: }
  3255                           ;FastTransfer.c: 178: rx_len = 0;
  3256  000AE4  0E00               	movlw	0
  3257  000AE6  6E42               	movwf	_rx_len,c
  3258                           
  3259                           ;FastTransfer.c: 179: rx_array_inx = 0;
  3260  000AE8  0E00               	movlw	0
  3261  000AEA  6E41               	movwf	_rx_array_inx,c
  3262                           
  3263                           ;FastTransfer.c: 180: return 1;
  3264  000AEC  0E01               	movlw	1
  3265  000AEE  0012               	return	
  3266  000AF0                     l5039:
  3267                           
  3268                           ;FastTransfer.c: 182: crcErrorCounter++;
  3269  000AF0  0100               	movlb	0	; () banked
  3270  000AF2  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  3271  000AF4  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;FastTransfer.c: 184: if (AKNAKsend) {
  3275  000AF6  5039               	movf	_AKNAKsend,w,c
  3276  000AF8  B4D8               	btfsc	status,2,c
  3277  000AFA  D0B0               	goto	l5069
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;FastTransfer.c: 185: unsigned char holder[3];
  3281                           ;FastTransfer.c: 186: holder[0] = 255;
  3282  000AFC  0100               	movlb	0	; () banked
  3283  000AFE  69CB               	setf	receiveData@holder_1131& (0+255),b
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;FastTransfer.c: 187: holder[1] = 2;
  3287  000B00  0E02               	movlw	2
  3288  000B02  0100               	movlb	0	; () banked
  3289  000B04  6FCC               	movwf	(receiveData@holder_1131+1)& (0+255),b
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  3293  000B06  0EFF               	movlw	255
  3294  000B08  6E27               	movwf	??_receiveData& (0+255),c
  3295  000B0A  0EFF               	movlw	255
  3296  000B0C  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3297  000B0E  5041               	movf	_rx_array_inx,w,c
  3298  000B10  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3299  000B12  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3300  000B14  5027               	movf	??_receiveData,w,c
  3301  000B16  2629               	addwf	??_receiveData+2,f,c
  3302  000B18  5028               	movf	??_receiveData+1,w,c
  3303  000B1A  222A               	addwfc	??_receiveData+3,f,c
  3304  000B1C  0103               	movlb	3	; () banked
  3305  000B1E  0E00               	movlw	low _rx_buffer
  3306  000B20  2429               	addwf	??_receiveData+2,w,c
  3307  000B22  6ED9               	movwf	fsr2l,c
  3308  000B24  0103               	movlb	3	; () banked
  3309  000B26  0E03               	movlw	high _rx_buffer
  3310  000B28  202A               	addwfc	??_receiveData+3,w,c
  3311  000B2A  6EDA               	movwf	fsr2h,c
  3312  000B2C  50DF               	movf	indf2,w,c
  3313  000B2E  0100               	movlb	0	; () banked
  3314  000B30  6FCD               	movwf	(receiveData@holder_1131+2)& (0+255),b
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  3318  000B32  0100               	movlb	0	; () banked
  3319  000B34  0E00               	movlw	high receiveData@holder_1131
  3320  000B36  6E1C               	movwf	CRC8@data+1,c
  3321  000B38  0100               	movlb	0	; () banked
  3322  000B3A  0ECB               	movlw	low receiveData@holder_1131
  3323  000B3C  6E1B               	movwf	CRC8@data,c
  3324  000B3E  0E03               	movlw	3
  3325  000B40  6E1D               	movwf	CRC8@len,c
  3326  000B42  ECF4  F01B         	call	_CRC8
  3327  000B46  0100               	movlb	0	; () banked
  3328  000B48  6FCF               	movwf	receiveData@crcHolder_1132& (0+255),b
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;FastTransfer.c: 190: serial_write(0x06);
  3332  000B4A  D801               	call	u5648
  3333  000B4C  D00B               	goto	u5649
  3334  000B4E                     u5648:
  3335  000B4E  0005               	push	
  3336  000B50  6EFA               	movwf	pclath,c
  3337  000B52  5035               	movf	_serial_write,w,c
  3338  000B54  6EFD               	movwf	tosl,c
  3339  000B56  5036               	movf	_serial_write+1,w,c
  3340  000B58  6EFE               	movwf	tosh,c
  3341  000B5A  50F8               	movf	tblptru,w,c
  3342  000B5C  6EFF               	movwf	tosu,c
  3343  000B5E  50FA               	movf	pclath,w,c
  3344  000B60  0E06               	movlw	6
  3345  000B62  0012               	return		;indir
  3346  000B64                     u5649:
  3347                           
  3348                           ;FastTransfer.c: 191: serial_write(0x85);
  3349  000B64  D801               	call	u5658
  3350  000B66  D00B               	goto	u5659
  3351  000B68                     u5658:
  3352  000B68  0005               	push	
  3353  000B6A  6EFA               	movwf	pclath,c
  3354  000B6C  5035               	movf	_serial_write,w,c
  3355  000B6E  6EFD               	movwf	tosl,c
  3356  000B70  5036               	movf	_serial_write+1,w,c
  3357  000B72  6EFE               	movwf	tosh,c
  3358  000B74  50F8               	movf	tblptru,w,c
  3359  000B76  6EFF               	movwf	tosu,c
  3360  000B78  50FA               	movf	pclath,w,c
  3361  000B7A  0E85               	movlw	133
  3362  000B7C  0012               	return		;indir
  3363  000B7E                     u5659:
  3364                           
  3365                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3366  000B7E  D801               	call	u5668
  3367  000B80  D00B               	goto	u5669
  3368  000B82                     u5668:
  3369  000B82  0005               	push	
  3370  000B84  6EFA               	movwf	pclath,c
  3371  000B86  5035               	movf	_serial_write,w,c
  3372  000B88  6EFD               	movwf	tosl,c
  3373  000B8A  5036               	movf	_serial_write+1,w,c
  3374  000B8C  6EFE               	movwf	tosh,c
  3375  000B8E  50F8               	movf	tblptru,w,c
  3376  000B90  6EFF               	movwf	tosu,c
  3377  000B92  50FA               	movf	pclath,w,c
  3378  000B94  503F               	movf	_returnAddress,w,c
  3379  000B96  0012               	return		;indir
  3380  000B98                     u5669:
  3381                           
  3382                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3383  000B98  D801               	call	u5678
  3384  000B9A  D00B               	goto	u5679
  3385  000B9C                     u5678:
  3386  000B9C  0005               	push	
  3387  000B9E  6EFA               	movwf	pclath,c
  3388  000BA0  5035               	movf	_serial_write,w,c
  3389  000BA2  6EFD               	movwf	tosl,c
  3390  000BA4  5036               	movf	_serial_write+1,w,c
  3391  000BA6  6EFE               	movwf	tosh,c
  3392  000BA8  50F8               	movf	tblptru,w,c
  3393  000BAA  6EFF               	movwf	tosu,c
  3394  000BAC  50FA               	movf	pclath,w,c
  3395  000BAE  503E               	movf	_moduleAddress,w,c
  3396  000BB0  0012               	return		;indir
  3397  000BB2                     u5679:
  3398                           
  3399                           ;FastTransfer.c: 194: serial_write(3);
  3400  000BB2  D801               	call	u5688
  3401  000BB4  D00B               	goto	u5689
  3402  000BB6                     u5688:
  3403  000BB6  0005               	push	
  3404  000BB8  6EFA               	movwf	pclath,c
  3405  000BBA  5035               	movf	_serial_write,w,c
  3406  000BBC  6EFD               	movwf	tosl,c
  3407  000BBE  5036               	movf	_serial_write+1,w,c
  3408  000BC0  6EFE               	movwf	tosh,c
  3409  000BC2  50F8               	movf	tblptru,w,c
  3410  000BC4  6EFF               	movwf	tosu,c
  3411  000BC6  50FA               	movf	pclath,w,c
  3412  000BC8  0E03               	movlw	3
  3413  000BCA  0012               	return		;indir
  3414  000BCC                     u5689:
  3415                           
  3416                           ;FastTransfer.c: 195: serial_write(255);
  3417  000BCC  D801               	call	u5698
  3418  000BCE  D00B               	goto	u5699
  3419  000BD0                     u5698:
  3420  000BD0  0005               	push	
  3421  000BD2  6EFA               	movwf	pclath,c
  3422  000BD4  5035               	movf	_serial_write,w,c
  3423  000BD6  6EFD               	movwf	tosl,c
  3424  000BD8  5036               	movf	_serial_write+1,w,c
  3425  000BDA  6EFE               	movwf	tosh,c
  3426  000BDC  50F8               	movf	tblptru,w,c
  3427  000BDE  6EFF               	movwf	tosu,c
  3428  000BE0  50FA               	movf	pclath,w,c
  3429  000BE2  0EFF               	movlw	255
  3430  000BE4  0012               	return		;indir
  3431  000BE6                     u5699:
  3432                           
  3433                           ;FastTransfer.c: 196: serial_write(2);
  3434  000BE6  D801               	call	u5708
  3435  000BE8  D00B               	goto	u5709
  3436  000BEA                     u5708:
  3437  000BEA  0005               	push	
  3438  000BEC  6EFA               	movwf	pclath,c
  3439  000BEE  5035               	movf	_serial_write,w,c
  3440  000BF0  6EFD               	movwf	tosl,c
  3441  000BF2  5036               	movf	_serial_write+1,w,c
  3442  000BF4  6EFE               	movwf	tosh,c
  3443  000BF6  50F8               	movf	tblptru,w,c
  3444  000BF8  6EFF               	movwf	tosu,c
  3445  000BFA  50FA               	movf	pclath,w,c
  3446  000BFC  0E02               	movlw	2
  3447  000BFE  0012               	return		;indir
  3448  000C00                     u5709:
  3449                           
  3450                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3451  000C00  D801               	call	u5718
  3452  000C02  D01E               	goto	u5719
  3453  000C04                     u5718:
  3454  000C04  0005               	push	
  3455  000C06  6EFA               	movwf	pclath,c
  3456  000C08  5035               	movf	_serial_write,w,c
  3457  000C0A  6EFD               	movwf	tosl,c
  3458  000C0C  5036               	movf	_serial_write+1,w,c
  3459  000C0E  6EFE               	movwf	tosh,c
  3460  000C10  50F8               	movf	tblptru,w,c
  3461  000C12  6EFF               	movwf	tosu,c
  3462  000C14  50FA               	movf	pclath,w,c
  3463  000C16  0EFF               	movlw	255
  3464  000C18  6E27               	movwf	??_receiveData& (0+255),c
  3465  000C1A  0EFF               	movlw	255
  3466  000C1C  6E28               	movwf	(??_receiveData+1)& (0+255),c
  3467  000C1E  5041               	movf	_rx_array_inx,w,c
  3468  000C20  6E29               	movwf	(??_receiveData+2)& (0+255),c
  3469  000C22  6A2A               	clrf	(??_receiveData+3)& (0+255),c
  3470  000C24  5027               	movf	??_receiveData,w,c
  3471  000C26  2629               	addwf	??_receiveData+2,f,c
  3472  000C28  5028               	movf	??_receiveData+1,w,c
  3473  000C2A  222A               	addwfc	??_receiveData+3,f,c
  3474  000C2C  0103               	movlb	3	; () banked
  3475  000C2E  0E00               	movlw	low _rx_buffer
  3476  000C30  2429               	addwf	??_receiveData+2,w,c
  3477  000C32  6ED9               	movwf	fsr2l,c
  3478  000C34  0103               	movlb	3	; () banked
  3479  000C36  0E03               	movlw	high _rx_buffer
  3480  000C38  202A               	addwfc	??_receiveData+3,w,c
  3481  000C3A  6EDA               	movwf	fsr2h,c
  3482  000C3C  50DF               	movf	indf2,w,c
  3483  000C3E  0012               	return		;indir
  3484  000C40                     u5719:
  3485                           
  3486                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3487  000C40  D801               	call	u5728
  3488  000C42  D00C               	goto	l5069
  3489  000C44                     u5728:
  3490  000C44  0005               	push	
  3491  000C46  6EFA               	movwf	pclath,c
  3492  000C48  5035               	movf	_serial_write,w,c
  3493  000C4A  6EFD               	movwf	tosl,c
  3494  000C4C  5036               	movf	_serial_write+1,w,c
  3495  000C4E  6EFE               	movwf	tosh,c
  3496  000C50  50F8               	movf	tblptru,w,c
  3497  000C52  6EFF               	movwf	tosu,c
  3498  000C54  50FA               	movf	pclath,w,c
  3499  000C56  0100               	movlb	0	; () banked
  3500  000C58  51CF               	movf	receiveData@crcHolder_1132& (0+255),w,b
  3501  000C5A  0012               	return		;indir
  3502  000C5C                     l5069:
  3503                           
  3504                           ;FastTransfer.c: 199: }
  3505                           ;FastTransfer.c: 202: rx_len = 0;
  3506  000C5C  0E00               	movlw	0
  3507  000C5E  6E42               	movwf	_rx_len,c
  3508                           
  3509                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3510  000C60  0E00               	movlw	0
  3511  000C62  6E41               	movwf	_rx_array_inx,c
  3512                           
  3513                           ;FastTransfer.c: 204: return 0;
  3514  000C64  0E00               	movlw	0
  3515  000C66  0012               	return	
  3516  000C68                     l5077:
  3517                           
  3518                           ;FastTransfer.c: 205: }
  3519                           ;FastTransfer.c: 206: }
  3520                           ;FastTransfer.c: 207: }
  3521                           ;FastTransfer.c: 210: return 0;
  3522  000C68  0E00               	movlw	0
  3523  000C6A  0012               	return	
  3524  000C6C                     __end_of_receiveData:
  3525                           	opt stack 0
  3526                           tosu	equ	0xFFF
  3527                           tosh	equ	0xFFE
  3528                           tosl	equ	0xFFD
  3529                           pclath	equ	0xFFA
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           prodh	equ	0xFF4
  3535                           prodl	equ	0xFF3
  3536                           intcon	equ	0xFF2
  3537                           postinc0	equ	0xFEE
  3538                           wreg	equ	0xFE8
  3539                           postdec1	equ	0xFE5
  3540                           fsr1l	equ	0xFE1
  3541                           indf2	equ	0xFDF
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function _Send_put *****************
  3549 ;; Defined at:
  3550 ;;		line 130 in file "UART.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;  _data           1    wreg     unsigned char 
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  _data           1   37[COMRAM] unsigned char 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;		None               void
  3557 ;; Registers used:
  3558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3564 ;;      Params:         0       0       0       0       0       0       0
  3565 ;;      Locals:         1       0       0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0
  3567 ;;      Totals:         1       0       0       0       0       0       0
  3568 ;;Total ram usage:        1 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    6
  3571 ;; This function calls:
  3572 ;;		_UART_buff_get
  3573 ;;		_UART_buff_put
  3574 ;; This function is called by:
  3575 ;;		_SYSTEM_Initialize
  3576 ;;		_putch
  3577 ;;		_sendData
  3578 ;;		_receiveData
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text6
  3583  00396A                     __ptext6:
  3584                           	opt stack 0
  3585  00396A                     _Send_put:
  3586                           	opt stack 22
  3587                           
  3588                           ;incstack = 0
  3589                           ;Send_put@_data stored from wreg
  3590  00396A  6E26               	movwf	Send_put@_data,c
  3591                           
  3592                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3593  00396C  0105               	movlb	5	; () banked
  3594  00396E  0E05               	movlw	high _output_buffer
  3595  003970  6E22               	movwf	UART_buff_put@_this+1,c
  3596  003972  0105               	movlb	5	; () banked
  3597  003974  0E00               	movlw	low _output_buffer
  3598  003976  6E21               	movwf	UART_buff_put@_this,c
  3599  003978  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3600  00397C  ECA0  F013         	call	_UART_buff_put
  3601                           
  3602                           ;UART.c: 132: if (Transmit_stall == 1) {
  3603  003980  0445               	decf	_Transmit_stall,w,c
  3604  003982  A4D8               	btfss	status,2,c
  3605  003984  0012               	return	
  3606                           
  3607                           ;UART.c: 133: Transmit_stall = 0;
  3608  003986  0E00               	movlw	0
  3609  003988  6E45               	movwf	_Transmit_stall,c
  3610                           
  3611                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3612  00398A  0105               	movlb	5	; () banked
  3613  00398C  0E05               	movlw	high _output_buffer
  3614  00398E  6E22               	movwf	UART_buff_get@_this+1,c
  3615  003990  0105               	movlb	5	; () banked
  3616  003992  0E00               	movlw	low _output_buffer
  3617  003994  6E21               	movwf	UART_buff_get@_this,c
  3618  003996  EC36  F019         	call	_UART_buff_get	;wreg free
  3619  00399A  6EAD               	movwf	4013,c	;volatile
  3620                           
  3621                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3622  00399C  889D               	bsf	3997,4,c	;volatile
  3623  00399E  0012               	return	
  3624  0039A0                     __end_of_Send_put:
  3625                           	opt stack 0
  3626                           tosu	equ	0xFFF
  3627                           tosh	equ	0xFFE
  3628                           tosl	equ	0xFFD
  3629                           pclath	equ	0xFFA
  3630                           tblptru	equ	0xFF8
  3631                           tblptrh	equ	0xFF7
  3632                           tblptrl	equ	0xFF6
  3633                           tablat	equ	0xFF5
  3634                           prodh	equ	0xFF4
  3635                           prodl	equ	0xFF3
  3636                           intcon	equ	0xFF2
  3637                           postinc0	equ	0xFEE
  3638                           wreg	equ	0xFE8
  3639                           postdec1	equ	0xFE5
  3640                           fsr1l	equ	0xFE1
  3641                           indf2	equ	0xFDF
  3642                           postinc2	equ	0xFDE
  3643                           postdec2	equ	0xFDD
  3644                           fsr2h	equ	0xFDA
  3645                           fsr2l	equ	0xFD9
  3646                           status	equ	0xFD8
  3647                           
  3648 ;; *************** function _UART_buff_put *****************
  3649 ;; Defined at:
  3650 ;;		line 68 in file "UART.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3653 ;;		 -> output_buffer(206), input_buffer(206), 
  3654 ;;  c               1   34[COMRAM] const unsigned char 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;		None               void
  3659 ;; Registers used:
  3660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3666 ;;      Params:         3       0       0       0       0       0       0
  3667 ;;      Locals:         0       0       0       0       0       0       0
  3668 ;;      Temps:          2       0       0       0       0       0       0
  3669 ;;      Totals:         5       0       0       0       0       0       0
  3670 ;;Total ram usage:        5 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    5
  3673 ;; This function calls:
  3674 ;;		_UART_buff_modulo_inc
  3675 ;; This function is called by:
  3676 ;;		_Send_put
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text7
  3681  002740                     __ptext7:
  3682                           	opt stack 0
  3683  002740                     _UART_buff_put:
  3684                           	opt stack 22
  3685                           
  3686                           ;UART.c: 69: if (_this->count < 200) {
  3687                           
  3688                           ;incstack = 0
  3689  002740  EE20 F0CC          	lfsr	2,204
  3690  002744  5021               	movf	UART_buff_put@_this,w,c
  3691  002746  26D9               	addwf	fsr2l,f,c
  3692  002748  5022               	movf	UART_buff_put@_this+1,w,c
  3693  00274A  22DA               	addwfc	fsr2h,f,c
  3694  00274C  CFDE F024          	movff	postinc2,??_UART_buff_put
  3695  002750  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3696  002754  5025               	movf	??_UART_buff_put+1,w,c
  3697  002756  0A80               	xorlw	128
  3698  002758  6EF3               	movwf	prodl,c
  3699  00275A  0E80               	movlw	128
  3700  00275C  5CF3               	subwf	prodl,w,c
  3701  00275E  0EC8               	movlw	200
  3702  002760  B4D8               	btfsc	status,2,c
  3703  002762  5C24               	subwf	??_UART_buff_put,w,c
  3704  002764  B0D8               	btfsc	status,0,c
  3705  002766  D036               	goto	l4489
  3706                           
  3707                           ;UART.c: 70: _this->buf[_this->head] = c;
  3708  002768  EE20 F0C8          	lfsr	2,200
  3709  00276C  5021               	movf	UART_buff_put@_this,w,c
  3710  00276E  26D9               	addwf	fsr2l,f,c
  3711  002770  5022               	movf	UART_buff_put@_this+1,w,c
  3712  002772  22DA               	addwfc	fsr2h,f,c
  3713  002774  CFDE F024          	movff	postinc2,??_UART_buff_put
  3714  002778  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3715  00277C  5024               	movf	??_UART_buff_put,w,c
  3716  00277E  2421               	addwf	UART_buff_put@_this,w,c
  3717  002780  6ED9               	movwf	fsr2l,c
  3718  002782  5025               	movf	??_UART_buff_put+1,w,c
  3719  002784  2022               	addwfc	UART_buff_put@_this+1,w,c
  3720  002786  6EDA               	movwf	fsr2h,c
  3721  002788  C023  FFDF         	movff	UART_buff_put@c,indf2
  3722                           
  3723                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3724  00278C  EE20 F0C8          	lfsr	2,200
  3725  002790  5021               	movf	UART_buff_put@_this,w,c
  3726  002792  26D9               	addwf	fsr2l,f,c
  3727  002794  5022               	movf	UART_buff_put@_this+1,w,c
  3728  002796  22DA               	addwfc	fsr2h,f,c
  3729  002798  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3730  00279C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3731  0027A0  0E00               	movlw	0
  3732  0027A2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3733  0027A4  0EC8               	movlw	200
  3734  0027A6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3735  0027A8  EC2F  F01D         	call	_UART_buff_modulo_inc	;wreg free
  3736  0027AC  EE20 F0C8          	lfsr	2,200
  3737  0027B0  5021               	movf	UART_buff_put@_this,w,c
  3738  0027B2  26D9               	addwf	fsr2l,f,c
  3739  0027B4  5022               	movf	UART_buff_put@_this+1,w,c
  3740  0027B6  22DA               	addwfc	fsr2h,f,c
  3741  0027B8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3742  0027BC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3743                           
  3744                           ;UART.c: 72: ++_this->count;
  3745  0027C0  EE20 F0CC          	lfsr	2,204
  3746  0027C4  5021               	movf	UART_buff_put@_this,w,c
  3747  0027C6  26D9               	addwf	fsr2l,f,c
  3748  0027C8  5022               	movf	UART_buff_put@_this+1,w,c
  3749  0027CA  22DA               	addwfc	fsr2h,f,c
  3750  0027CC  2ADE               	incf	postinc2,f,c
  3751  0027CE  0E00               	movlw	0
  3752  0027D0  22DD               	addwfc	postdec2,f,c
  3753                           
  3754                           ;UART.c: 73: } else {
  3755  0027D2  0012               	return	
  3756  0027D4                     l4489:
  3757                           
  3758                           ;UART.c: 74: _this->buf[_this->head] = c;
  3759  0027D4  EE20 F0C8          	lfsr	2,200
  3760  0027D8  5021               	movf	UART_buff_put@_this,w,c
  3761  0027DA  26D9               	addwf	fsr2l,f,c
  3762  0027DC  5022               	movf	UART_buff_put@_this+1,w,c
  3763  0027DE  22DA               	addwfc	fsr2h,f,c
  3764  0027E0  CFDE F024          	movff	postinc2,??_UART_buff_put
  3765  0027E4  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3766  0027E8  5024               	movf	??_UART_buff_put,w,c
  3767  0027EA  2421               	addwf	UART_buff_put@_this,w,c
  3768  0027EC  6ED9               	movwf	fsr2l,c
  3769  0027EE  5025               	movf	??_UART_buff_put+1,w,c
  3770  0027F0  2022               	addwfc	UART_buff_put@_this+1,w,c
  3771  0027F2  6EDA               	movwf	fsr2h,c
  3772  0027F4  C023  FFDF         	movff	UART_buff_put@c,indf2
  3773                           
  3774                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3775  0027F8  EE20 F0C8          	lfsr	2,200
  3776  0027FC  5021               	movf	UART_buff_put@_this,w,c
  3777  0027FE  26D9               	addwf	fsr2l,f,c
  3778  002800  5022               	movf	UART_buff_put@_this+1,w,c
  3779  002802  22DA               	addwfc	fsr2h,f,c
  3780  002804  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3781  002808  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3782  00280C  0E00               	movlw	0
  3783  00280E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3784  002810  0EC8               	movlw	200
  3785  002812  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3786  002814  EC2F  F01D         	call	_UART_buff_modulo_inc	;wreg free
  3787  002818  EE20 F0C8          	lfsr	2,200
  3788  00281C  5021               	movf	UART_buff_put@_this,w,c
  3789  00281E  26D9               	addwf	fsr2l,f,c
  3790  002820  5022               	movf	UART_buff_put@_this+1,w,c
  3791  002822  22DA               	addwfc	fsr2h,f,c
  3792  002824  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3793  002828  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3794                           
  3795                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3796  00282C  EE20 F0CA          	lfsr	2,202
  3797  002830  5021               	movf	UART_buff_put@_this,w,c
  3798  002832  26D9               	addwf	fsr2l,f,c
  3799  002834  5022               	movf	UART_buff_put@_this+1,w,c
  3800  002836  22DA               	addwfc	fsr2h,f,c
  3801  002838  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3802  00283C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3803  002840  0E00               	movlw	0
  3804  002842  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3805  002844  0EC8               	movlw	200
  3806  002846  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3807  002848  EC2F  F01D         	call	_UART_buff_modulo_inc	;wreg free
  3808  00284C  EE20 F0CA          	lfsr	2,202
  3809  002850  5021               	movf	UART_buff_put@_this,w,c
  3810  002852  26D9               	addwf	fsr2l,f,c
  3811  002854  5022               	movf	UART_buff_put@_this+1,w,c
  3812  002856  22DA               	addwfc	fsr2h,f,c
  3813  002858  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3814  00285C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3815  002860  0012               	return	
  3816  002862                     __end_of_UART_buff_put:
  3817                           	opt stack 0
  3818                           tosu	equ	0xFFF
  3819                           tosh	equ	0xFFE
  3820                           tosl	equ	0xFFD
  3821                           pclath	equ	0xFFA
  3822                           tblptru	equ	0xFF8
  3823                           tblptrh	equ	0xFF7
  3824                           tblptrl	equ	0xFF6
  3825                           tablat	equ	0xFF5
  3826                           prodh	equ	0xFF4
  3827                           prodl	equ	0xFF3
  3828                           intcon	equ	0xFF2
  3829                           postinc0	equ	0xFEE
  3830                           wreg	equ	0xFE8
  3831                           postdec1	equ	0xFE5
  3832                           fsr1l	equ	0xFE1
  3833                           indf2	equ	0xFDF
  3834                           postinc2	equ	0xFDE
  3835                           postdec2	equ	0xFDD
  3836                           fsr2h	equ	0xFDA
  3837                           fsr2l	equ	0xFD9
  3838                           status	equ	0xFD8
  3839                           
  3840 ;; *************** function _Receive_peek *****************
  3841 ;; Defined at:
  3842 ;;		line 118 in file "UART.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;		None
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;		None
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  1    wreg      unsigned char 
  3849 ;; Registers used:
  3850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3856 ;;      Params:         0       0       0       0       0       0       0
  3857 ;;      Locals:         0       0       0       0       0       0       0
  3858 ;;      Temps:          0       0       0       0       0       0       0
  3859 ;;      Totals:         0       0       0       0       0       0       0
  3860 ;;Total ram usage:        0 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; Hardware stack levels required when called:    5
  3863 ;; This function calls:
  3864 ;;		_UART_buff_peek
  3865 ;; This function is called by:
  3866 ;;		_SYSTEM_Initialize
  3867 ;;		_receiveData
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text8
  3872  003C90                     __ptext8:
  3873                           	opt stack 0
  3874  003C90                     _Receive_peek:
  3875                           	opt stack 23
  3876                           
  3877                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3878                           
  3879                           ;incstack = 0
  3880  003C90  0104               	movlb	4	; () banked
  3881  003C92  0E04               	movlw	high _input_buffer
  3882  003C94  6E1C               	movwf	UART_buff_peek@_this+1,c
  3883  003C96  0104               	movlb	4	; () banked
  3884  003C98  0E00               	movlw	low _input_buffer
  3885  003C9A  6E1B               	movwf	UART_buff_peek@_this,c
  3886  003C9C  EC81  F01D         	call	_UART_buff_peek	;wreg free
  3887  003CA0  0012               	return	
  3888  003CA2                     __end_of_Receive_peek:
  3889                           	opt stack 0
  3890                           tosu	equ	0xFFF
  3891                           tosh	equ	0xFFE
  3892                           tosl	equ	0xFFD
  3893                           pclath	equ	0xFFA
  3894                           tblptru	equ	0xFF8
  3895                           tblptrh	equ	0xFF7
  3896                           tblptrl	equ	0xFF6
  3897                           tablat	equ	0xFF5
  3898                           prodh	equ	0xFF4
  3899                           prodl	equ	0xFF3
  3900                           intcon	equ	0xFF2
  3901                           postinc0	equ	0xFEE
  3902                           wreg	equ	0xFE8
  3903                           postdec1	equ	0xFE5
  3904                           fsr1l	equ	0xFE1
  3905                           indf2	equ	0xFDF
  3906                           postinc2	equ	0xFDE
  3907                           postdec2	equ	0xFDD
  3908                           fsr2h	equ	0xFDA
  3909                           fsr2l	equ	0xFD9
  3910                           status	equ	0xFD8
  3911                           
  3912 ;; *************** function _UART_buff_peek *****************
  3913 ;; Defined at:
  3914 ;;		line 114 in file "UART.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3917 ;;		 -> input_buffer(206), 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      unsigned char 
  3922 ;; Registers used:
  3923 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3929 ;;      Params:         2       0       0       0       0       0       0
  3930 ;;      Locals:         0       0       0       0       0       0       0
  3931 ;;      Temps:          2       0       0       0       0       0       0
  3932 ;;      Totals:         4       0       0       0       0       0       0
  3933 ;;Total ram usage:        4 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    4
  3936 ;; This function calls:
  3937 ;;		Nothing
  3938 ;; This function is called by:
  3939 ;;		_Receive_peek
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           	psect	text9
  3944  003B02                     __ptext9:
  3945                           	opt stack 0
  3946  003B02                     _UART_buff_peek:
  3947                           	opt stack 23
  3948                           
  3949                           ;UART.c: 115: return _this->buf[_this->tail];
  3950                           
  3951                           ;incstack = 0
  3952  003B02  EE20 F0CA          	lfsr	2,202
  3953  003B06  501B               	movf	UART_buff_peek@_this,w,c
  3954  003B08  26D9               	addwf	fsr2l,f,c
  3955  003B0A  501C               	movf	UART_buff_peek@_this+1,w,c
  3956  003B0C  22DA               	addwfc	fsr2h,f,c
  3957  003B0E  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3958  003B12  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3959  003B16  501D               	movf	??_UART_buff_peek,w,c
  3960  003B18  241B               	addwf	UART_buff_peek@_this,w,c
  3961  003B1A  6ED9               	movwf	fsr2l,c
  3962  003B1C  501E               	movf	??_UART_buff_peek+1,w,c
  3963  003B1E  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3964  003B20  6EDA               	movwf	fsr2h,c
  3965  003B22  50DF               	movf	indf2,w,c
  3966  003B24  0012               	return	
  3967  003B26                     __end_of_UART_buff_peek:
  3968                           	opt stack 0
  3969                           tosu	equ	0xFFF
  3970                           tosh	equ	0xFFE
  3971                           tosl	equ	0xFFD
  3972                           pclath	equ	0xFFA
  3973                           tblptru	equ	0xFF8
  3974                           tblptrh	equ	0xFF7
  3975                           tblptrl	equ	0xFF6
  3976                           tablat	equ	0xFF5
  3977                           prodh	equ	0xFF4
  3978                           prodl	equ	0xFF3
  3979                           intcon	equ	0xFF2
  3980                           postinc0	equ	0xFEE
  3981                           wreg	equ	0xFE8
  3982                           postdec1	equ	0xFE5
  3983                           fsr1l	equ	0xFE1
  3984                           indf2	equ	0xFDF
  3985                           postinc2	equ	0xFDE
  3986                           postdec2	equ	0xFDD
  3987                           fsr2h	equ	0xFDA
  3988                           fsr2l	equ	0xFD9
  3989                           status	equ	0xFD8
  3990                           
  3991 ;; *************** function _CRCcheck *****************
  3992 ;; Defined at:
  3993 ;;		line 373 in file "FastTransfer.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;  rt              2    5[BANK0 ] int 
  3998 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3999 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  4000 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;		None               void
  4003 ;; Registers used:
  4004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4010 ;;      Params:         0       0       0       0       0       0       0
  4011 ;;      Locals:         0       7       0       0       0       0       0
  4012 ;;      Temps:          0       0       0       0       0       0       0
  4013 ;;      Totals:         0       7       0       0       0       0       0
  4014 ;;Total ram usage:        7 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    7
  4017 ;; This function calls:
  4018 ;;		Absolute function
  4019 ;;		_CRC8
  4020 ;;		_Receive_available
  4021 ;;		_Receive_get
  4022 ;;		_crcBufS_get
  4023 ;;		_crcBufS_status_put
  4024 ;; This function is called by:
  4025 ;;		_receiveData
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           	psect	text10
  4030  0021DE                     __ptext10:
  4031                           	opt stack 0
  4032  0021DE                     _CRCcheck:
  4033                           	opt stack 21
  4034  0021DE                     l4633:
  4035  0021DE  D801               	call	u4738
  4036  0021E0  D00A               	goto	u4739
  4037  0021E2                     u4738:
  4038  0021E2  0005               	push	
  4039  0021E4  6EFA               	movwf	pclath,c
  4040  0021E6  5031               	movf	_serial_available,w,c
  4041  0021E8  6EFD               	movwf	tosl,c
  4042  0021EA  5032               	movf	_serial_available+1,w,c
  4043  0021EC  6EFE               	movwf	tosh,c
  4044  0021EE  50F8               	movf	tblptru,w,c
  4045  0021F0  6EFF               	movwf	tosu,c
  4046  0021F2  50FA               	movf	pclath,w,c
  4047  0021F4  0012               	return		;indir
  4048  0021F6                     u4739:
  4049  0021F6  501E               	movf	?_Receive_available+1,w,c
  4050  0021F8  0A80               	xorlw	128
  4051  0021FA  0F80               	addlw	-128
  4052  0021FC  0E04               	movlw	4
  4053  0021FE  B4D8               	btfsc	status,2,c
  4054  002200  5C1D               	subwf	?_Receive_available,w,c
  4055  002202  A0D8               	btfss	status,0,c
  4056  002204  D7EC               	goto	l4633
  4057                           
  4058                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  4059                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  4060  002206  D801               	call	u4758
  4061  002208  D00A               	goto	u4759
  4062  00220A                     u4758:
  4063  00220A  0005               	push	
  4064  00220C  6EFA               	movwf	pclath,c
  4065  00220E  5033               	movf	_serial_read,w,c
  4066  002210  6EFD               	movwf	tosl,c
  4067  002212  5034               	movf	_serial_read+1,w,c
  4068  002214  6EFE               	movwf	tosh,c
  4069  002216  50F8               	movf	tblptru,w,c
  4070  002218  6EFF               	movwf	tosu,c
  4071  00221A  50FA               	movf	pclath,w,c
  4072  00221C  0012               	return		;indir
  4073  00221E                     u4759:
  4074  00221E  0100               	movlb	0	; () banked
  4075  002220  6FC3               	movwf	CRCcheck@arrayHolder& (0+255),b
  4076                           
  4077                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  4078  002222  D801               	call	u4768
  4079  002224  D00A               	goto	u4769
  4080  002226                     u4768:
  4081  002226  0005               	push	
  4082  002228  6EFA               	movwf	pclath,c
  4083  00222A  5033               	movf	_serial_read,w,c
  4084  00222C  6EFD               	movwf	tosl,c
  4085  00222E  5034               	movf	_serial_read+1,w,c
  4086  002230  6EFE               	movwf	tosh,c
  4087  002232  50F8               	movf	tblptru,w,c
  4088  002234  6EFF               	movwf	tosu,c
  4089  002236  50FA               	movf	pclath,w,c
  4090  002238  0012               	return		;indir
  4091  00223A                     u4769:
  4092  00223A  0100               	movlb	0	; () banked
  4093  00223C  6FC4               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  4094                           
  4095                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  4096  00223E  D801               	call	u4778
  4097  002240  D00A               	goto	u4779
  4098  002242                     u4778:
  4099  002242  0005               	push	
  4100  002244  6EFA               	movwf	pclath,c
  4101  002246  5033               	movf	_serial_read,w,c
  4102  002248  6EFD               	movwf	tosl,c
  4103  00224A  5034               	movf	_serial_read+1,w,c
  4104  00224C  6EFE               	movwf	tosh,c
  4105  00224E  50F8               	movf	tblptru,w,c
  4106  002250  6EFF               	movwf	tosu,c
  4107  002252  50FA               	movf	pclath,w,c
  4108  002254  0012               	return		;indir
  4109  002256                     u4779:
  4110  002256  0100               	movlb	0	; () banked
  4111  002258  6FC5               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  4112                           
  4113                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  4114  00225A  D801               	call	u4788
  4115  00225C  D00A               	goto	u4789
  4116  00225E                     u4788:
  4117  00225E  0005               	push	
  4118  002260  6EFA               	movwf	pclath,c
  4119  002262  5033               	movf	_serial_read,w,c
  4120  002264  6EFD               	movwf	tosl,c
  4121  002266  5034               	movf	_serial_read+1,w,c
  4122  002268  6EFE               	movwf	tosh,c
  4123  00226A  50F8               	movf	tblptru,w,c
  4124  00226C  6EFF               	movwf	tosu,c
  4125  00226E  50FA               	movf	pclath,w,c
  4126  002270  0012               	return		;indir
  4127  002272                     u4789:
  4128  002272  0100               	movlb	0	; () banked
  4129  002274  6FC1               	movwf	CRCcheck@SentCRC& (0+255),b
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  4133  002276  0100               	movlb	0	; () banked
  4134  002278  0E00               	movlw	high CRCcheck@arrayHolder
  4135  00227A  6E1C               	movwf	CRC8@data+1,c
  4136  00227C  0100               	movlb	0	; () banked
  4137  00227E  0EC3               	movlw	low CRCcheck@arrayHolder
  4138  002280  6E1B               	movwf	CRC8@data,c
  4139  002282  0E03               	movlw	3
  4140  002284  6E1D               	movwf	CRC8@len,c
  4141  002286  ECF4  F01B         	call	_CRC8	;wreg free
  4142  00228A  0100               	movlb	0	; () banked
  4143  00228C  6FC2               	movwf	CRCcheck@calculatedCRC& (0+255),b
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  4147  00228E  0100               	movlb	0	; () banked
  4148  002290  51C2               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  4149  002292  0100               	movlb	0	; () banked
  4150  002294  63C1               	cpfseq	CRCcheck@SentCRC& (0+255),b
  4151  002296  D055               	goto	l4665
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;FastTransfer.c: 387: int rt;
  4155                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  4156  002298  0E00               	movlw	0
  4157  00229A  0100               	movlb	0	; () banked
  4158  00229C  6FC7               	movwf	(CRCcheck@rt+1)& (0+255),b
  4159  00229E  0E00               	movlw	0
  4160  0022A0  0100               	movlb	0	; () banked
  4161  0022A2  6FC6               	movwf	CRCcheck@rt& (0+255),b
  4162  0022A4                     
  4163                           ; BSR set to: 0
  4164  0022A4  0100               	movlb	0	; () banked
  4165  0022A6  51C7               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4166  0022A8  0A80               	xorlw	128
  4167  0022AA  0F80               	addlw	-128
  4168  0022AC  0E05               	movlw	5
  4169  0022AE  B4D8               	btfsc	status,2,c
  4170  0022B0  5DC6               	subwf	CRCcheck@rt& (0+255),w,b
  4171  0022B2  B0D8               	btfsc	status,0,c
  4172  0022B4  0012               	return	
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4176                           
  4177                           ; BSR set to: 0
  4178                           
  4179                           ; BSR set to: 0
  4180  0022B6  0100               	movlb	0	; () banked
  4181  0022B8  0E00               	movlw	high _crc_buffer
  4182  0022BA  6E1C               	movwf	crcBufS_get@_this+1,c
  4183  0022BC  0100               	movlb	0	; () banked
  4184  0022BE  0E9C               	movlw	low _crc_buffer
  4185  0022C0  6E1B               	movwf	crcBufS_get@_this,c
  4186  0022C2  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4187  0022C6  0E00               	movlw	0
  4188  0022C8  6E1E               	movwf	crcBufS_get@space,c
  4189  0022CA  ECB4  F015         	call	_crcBufS_get	;wreg free
  4190  0022CE  183F               	xorwf	_returnAddress,w,c
  4191  0022D0  A4D8               	btfss	status,2,c
  4192  0022D2  D033               	goto	l4661
  4193                           
  4194                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4195  0022D4  0100               	movlb	0	; () banked
  4196  0022D6  0E00               	movlw	high _crc_buffer
  4197  0022D8  6E1C               	movwf	crcBufS_get@_this+1,c
  4198  0022DA  0100               	movlb	0	; () banked
  4199  0022DC  0E9C               	movlw	low _crc_buffer
  4200  0022DE  6E1B               	movwf	crcBufS_get@_this,c
  4201  0022E0  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4202  0022E4  0E01               	movlw	1
  4203  0022E6  6E1E               	movwf	crcBufS_get@space,c
  4204  0022E8  ECB4  F015         	call	_crcBufS_get	;wreg free
  4205  0022EC  0100               	movlb	0	; () banked
  4206  0022EE  19C5               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4207  0022F0  A4D8               	btfss	status,2,c
  4208  0022F2  D023               	goto	l4661
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  4212  0022F4  0100               	movlb	0	; () banked
  4213  0022F6  05C4               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4214  0022F8  A4D8               	btfss	status,2,c
  4215  0022FA  D00D               	goto	l4657
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  4219  0022FC  0100               	movlb	0	; () banked
  4220  0022FE  0E00               	movlw	high _crc_buffer
  4221  002300  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4222  002302  0100               	movlb	0	; () banked
  4223  002304  0E9C               	movlw	low _crc_buffer
  4224  002306  6E1B               	movwf	crcBufS_status_put@_this,c
  4225  002308  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4226  00230C  0E01               	movlw	1
  4227  00230E  6E1E               	movwf	crcBufS_status_put@status,c
  4228  002310  EC99  F016         	call	_crcBufS_status_put	;wreg free
  4229                           
  4230                           ;FastTransfer.c: 393: break;
  4231  002314  0012               	return	
  4232  002316                     l4657:
  4233  002316  0100               	movlb	0	; () banked
  4234  002318  51C4               	movf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4235  00231A  0A02               	xorlw	2
  4236  00231C  A4D8               	btfss	status,2,c
  4237  00231E  D00D               	goto	l4661
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  4241  002320  0100               	movlb	0	; () banked
  4242  002322  0E00               	movlw	high _crc_buffer
  4243  002324  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4244  002326  0100               	movlb	0	; () banked
  4245  002328  0E9C               	movlw	low _crc_buffer
  4246  00232A  6E1B               	movwf	crcBufS_status_put@_this,c
  4247  00232C  C0C6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4248  002330  0E02               	movlw	2
  4249  002332  6E1E               	movwf	crcBufS_status_put@status,c
  4250  002334  EC99  F016         	call	_crcBufS_status_put	;wreg free
  4251                           
  4252                           ;FastTransfer.c: 396: break;
  4253  002338  0012               	return	
  4254  00233A                     l4661:
  4255  00233A  0100               	movlb	0	; () banked
  4256  00233C  4BC6               	infsnz	CRCcheck@rt& (0+255),f,b
  4257  00233E  2BC7               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4258  002340  D7B1               	goto	L1
  4259  002342                     l4665:
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;FastTransfer.c: 402: crcErrorCounter++;
  4263  002342  0100               	movlb	0	; () banked
  4264  002344  4B90               	infsnz	_crcErrorCounter& (0+255),f,b
  4265  002346  2B91               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4266  002348  0012               	return	
  4267  00234A                     __end_of_CRCcheck:
  4268                           	opt stack 0
  4269                           tosu	equ	0xFFF
  4270                           tosh	equ	0xFFE
  4271                           tosl	equ	0xFFD
  4272                           pclath	equ	0xFFA
  4273                           tblptru	equ	0xFF8
  4274                           tblptrh	equ	0xFF7
  4275                           tblptrl	equ	0xFF6
  4276                           tablat	equ	0xFF5
  4277                           prodh	equ	0xFF4
  4278                           prodl	equ	0xFF3
  4279                           intcon	equ	0xFF2
  4280                           postinc0	equ	0xFEE
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           fsr1l	equ	0xFE1
  4284                           indf2	equ	0xFDF
  4285                           postinc2	equ	0xFDE
  4286                           postdec2	equ	0xFDD
  4287                           fsr2h	equ	0xFDA
  4288                           fsr2l	equ	0xFD9
  4289                           status	equ	0xFD8
  4290                           
  4291 ;; *************** function _crcBufS_status_put *****************
  4292 ;; Defined at:
  4293 ;;		line 336 in file "FastTransfer.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4296 ;;		 -> crc_buffer(17), 
  4297 ;;  time            1   28[COMRAM] unsigned char 
  4298 ;;  status          1   29[COMRAM] unsigned char 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  wantedTime      2   34[COMRAM] int 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;		None               void
  4303 ;; Registers used:
  4304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4310 ;;      Params:         4       0       0       0       0       0       0
  4311 ;;      Locals:         2       0       0       0       0       0       0
  4312 ;;      Temps:          4       0       0       0       0       0       0
  4313 ;;      Totals:        10       0       0       0       0       0       0
  4314 ;;Total ram usage:       10 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    4
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_CRCcheck
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text11
  4325  002D32                     __ptext11:
  4326                           	opt stack 0
  4327  002D32                     _crcBufS_status_put:
  4328                           	opt stack 23
  4329                           
  4330                           ;FastTransfer.c: 337: if (time >= 5) {
  4331                           
  4332                           ;incstack = 0
  4333  002D32  0E04               	movlw	4
  4334  002D34  641D               	cpfsgt	crcBufS_status_put@time,c
  4335  002D36  D002               	goto	l4471
  4336                           
  4337                           ;FastTransfer.c: 338: time = 5 - 1;
  4338  002D38  0E04               	movlw	4
  4339  002D3A  6E1D               	movwf	crcBufS_status_put@time,c
  4340  002D3C                     l4471:
  4341                           
  4342                           ;FastTransfer.c: 339: }
  4343                           ;FastTransfer.c: 340: time = time + 1;
  4344  002D3C  281D               	incf	crcBufS_status_put@time,w,c
  4345  002D3E  6E1D               	movwf	crcBufS_status_put@time,c
  4346                           
  4347                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4348  002D40  501D               	movf	crcBufS_status_put@time,w,c
  4349  002D42  0D03               	mullw	3
  4350  002D44  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4351  002D48  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4352                           
  4353                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4354  002D4C  EE20 F00F          	lfsr	2,15
  4355  002D50  501B               	movf	crcBufS_status_put@_this,w,c
  4356  002D52  26D9               	addwf	fsr2l,f,c
  4357  002D54  501C               	movf	crcBufS_status_put@_this+1,w,c
  4358  002D56  22DA               	addwfc	fsr2h,f,c
  4359  002D58  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4360  002D5C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4361  002D60  5020               	movf	??_crcBufS_status_put+1,w,c
  4362  002D62  0A80               	xorlw	128
  4363  002D64  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4364  002D66  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4365  002D68  5C1F               	subwf	??_crcBufS_status_put,w,c
  4366  002D6A  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4367  002D6C  0A80               	xorlw	128
  4368  002D6E  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4369  002D70  B0D8               	btfsc	status,0,c
  4370  002D72  D02B               	goto	l4479
  4371                           
  4372                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4373  002D74  EE20 F00F          	lfsr	2,15
  4374  002D78  501B               	movf	crcBufS_status_put@_this,w,c
  4375  002D7A  26D9               	addwf	fsr2l,f,c
  4376  002D7C  501C               	movf	crcBufS_status_put@_this+1,w,c
  4377  002D7E  22DA               	addwfc	fsr2h,f,c
  4378  002D80  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4379  002D84  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4380  002D88  1E1F               	comf	??_crcBufS_status_put,f,c
  4381  002D8A  1E20               	comf	??_crcBufS_status_put+1,f,c
  4382  002D8C  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4383  002D8E  2A20               	incf	??_crcBufS_status_put+1,f,c
  4384  002D90  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4385  002D92  261F               	addwf	??_crcBufS_status_put,f,c
  4386  002D94  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4387  002D96  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4388  002D98  1E1F               	comf	??_crcBufS_status_put,f,c
  4389  002D9A  1E20               	comf	??_crcBufS_status_put+1,f,c
  4390  002D9C  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4391  002D9E  2A20               	incf	??_crcBufS_status_put+1,f,c
  4392  002DA0  0E0F               	movlw	15
  4393  002DA2  241F               	addwf	??_crcBufS_status_put,w,c
  4394  002DA4  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4395  002DA6  0E00               	movlw	0
  4396  002DA8  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4397  002DAA  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4398                           
  4399                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4400  002DAC  0E02               	movlw	2
  4401  002DAE  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4402  002DB0  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4403  002DB2  0E00               	movlw	0
  4404  002DB4  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4405  002DB6  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4406  002DB8  501F               	movf	??_crcBufS_status_put,w,c
  4407  002DBA  241B               	addwf	crcBufS_status_put@_this,w,c
  4408  002DBC  6ED9               	movwf	fsr2l,c
  4409  002DBE  5020               	movf	??_crcBufS_status_put+1,w,c
  4410  002DC0  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4411  002DC2  6EDA               	movwf	fsr2h,c
  4412  002DC4  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4413                           
  4414                           ;FastTransfer.c: 345: } else {
  4415  002DC8  0012               	return	
  4416  002DCA                     l4479:
  4417                           
  4418                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4419  002DCA  EE20 F00F          	lfsr	2,15
  4420  002DCE  501B               	movf	crcBufS_status_put@_this,w,c
  4421  002DD0  26D9               	addwf	fsr2l,f,c
  4422  002DD2  501C               	movf	crcBufS_status_put@_this+1,w,c
  4423  002DD4  22DA               	addwfc	fsr2h,f,c
  4424  002DD6  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4425  002DDA  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4426  002DDE  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4427  002DE2  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4428  002DE6  1E21               	comf	??_crcBufS_status_put+2,f,c
  4429  002DE8  1E22               	comf	??_crcBufS_status_put+3,f,c
  4430  002DEA  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4431  002DEC  2A22               	incf	??_crcBufS_status_put+3,f,c
  4432  002DEE  501F               	movf	??_crcBufS_status_put,w,c
  4433  002DF0  2621               	addwf	??_crcBufS_status_put+2,f,c
  4434  002DF2  5020               	movf	??_crcBufS_status_put+1,w,c
  4435  002DF4  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4436  002DF6  0E02               	movlw	2
  4437  002DF8  2621               	addwf	??_crcBufS_status_put+2,f,c
  4438  002DFA  0E00               	movlw	0
  4439  002DFC  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4440  002DFE  5021               	movf	??_crcBufS_status_put+2,w,c
  4441  002E00  241B               	addwf	crcBufS_status_put@_this,w,c
  4442  002E02  6ED9               	movwf	fsr2l,c
  4443  002E04  5022               	movf	??_crcBufS_status_put+3,w,c
  4444  002E06  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4445  002E08  6EDA               	movwf	fsr2h,c
  4446  002E0A  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4447  002E0E  0012               	return	
  4448  002E10                     __end_of_crcBufS_status_put:
  4449                           	opt stack 0
  4450                           tosu	equ	0xFFF
  4451                           tosh	equ	0xFFE
  4452                           tosl	equ	0xFFD
  4453                           pclath	equ	0xFFA
  4454                           tblptru	equ	0xFF8
  4455                           tblptrh	equ	0xFF7
  4456                           tblptrl	equ	0xFF6
  4457                           tablat	equ	0xFF5
  4458                           prodh	equ	0xFF4
  4459                           prodl	equ	0xFF3
  4460                           intcon	equ	0xFF2
  4461                           postinc0	equ	0xFEE
  4462                           wreg	equ	0xFE8
  4463                           postdec1	equ	0xFE5
  4464                           fsr1l	equ	0xFE1
  4465                           indf2	equ	0xFDF
  4466                           postinc2	equ	0xFDE
  4467                           postdec2	equ	0xFDD
  4468                           fsr2h	equ	0xFDA
  4469                           fsr2l	equ	0xFD9
  4470                           status	equ	0xFD8
  4471                           
  4472 ;; *************** function _crcBufS_get *****************
  4473 ;; Defined at:
  4474 ;;		line 353 in file "FastTransfer.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4477 ;;		 -> crc_buffer(17), 
  4478 ;;  time            1   28[COMRAM] unsigned char 
  4479 ;;  space           1   29[COMRAM] unsigned char 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  wantedTime      2   36[COMRAM] int 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      unsigned char 
  4484 ;; Registers used:
  4485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4491 ;;      Params:         4       0       0       0       0       0       0
  4492 ;;      Locals:         2       0       0       0       0       0       0
  4493 ;;      Temps:          6       0       0       0       0       0       0
  4494 ;;      Totals:        12       0       0       0       0       0       0
  4495 ;;Total ram usage:       12 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    4
  4498 ;; This function calls:
  4499 ;;		Nothing
  4500 ;; This function is called by:
  4501 ;;		_CRCcheck
  4502 ;;		_AKNAK
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text12
  4507  002B68                     __ptext12:
  4508                           	opt stack 0
  4509  002B68                     _crcBufS_get:
  4510                           	opt stack 23
  4511                           
  4512                           ;FastTransfer.c: 354: if (time >= 5) {
  4513                           
  4514                           ;incstack = 0
  4515  002B68  0E04               	movlw	4
  4516  002B6A  641D               	cpfsgt	crcBufS_get@time,c
  4517  002B6C  D002               	goto	l4447
  4518                           
  4519                           ;FastTransfer.c: 355: time = 5 - 1;
  4520  002B6E  0E04               	movlw	4
  4521  002B70  6E1D               	movwf	crcBufS_get@time,c
  4522  002B72                     l4447:
  4523                           
  4524                           ;FastTransfer.c: 356: }
  4525                           ;FastTransfer.c: 357: if (space >= 3) {
  4526  002B72  0E02               	movlw	2
  4527  002B74  641E               	cpfsgt	crcBufS_get@space,c
  4528  002B76  D002               	goto	l4451
  4529                           
  4530                           ;FastTransfer.c: 358: space = 3 - 1;
  4531  002B78  0E02               	movlw	2
  4532  002B7A  6E1E               	movwf	crcBufS_get@space,c
  4533  002B7C                     l4451:
  4534                           
  4535                           ;FastTransfer.c: 359: }
  4536                           ;FastTransfer.c: 360: time = time + 1;
  4537  002B7C  281D               	incf	crcBufS_get@time,w,c
  4538  002B7E  6E1D               	movwf	crcBufS_get@time,c
  4539                           
  4540                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4541  002B80  501D               	movf	crcBufS_get@time,w,c
  4542  002B82  0D03               	mullw	3
  4543  002B84  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4544  002B88  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4545                           
  4546                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4547  002B8C  EE20 F00F          	lfsr	2,15
  4548  002B90  501B               	movf	crcBufS_get@_this,w,c
  4549  002B92  26D9               	addwf	fsr2l,f,c
  4550  002B94  501C               	movf	crcBufS_get@_this+1,w,c
  4551  002B96  22DA               	addwfc	fsr2h,f,c
  4552  002B98  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4553  002B9C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4554  002BA0  5020               	movf	??_crcBufS_get+1,w,c
  4555  002BA2  0A80               	xorlw	128
  4556  002BA4  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4557  002BA6  5025               	movf	crcBufS_get@wantedTime,w,c
  4558  002BA8  5C1F               	subwf	??_crcBufS_get,w,c
  4559  002BAA  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4560  002BAC  0A80               	xorlw	128
  4561  002BAE  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4562  002BB0  B0D8               	btfsc	status,0,c
  4563  002BB2  D02A               	goto	l4463
  4564                           
  4565                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4566  002BB4  EE20 F00F          	lfsr	2,15
  4567  002BB8  501B               	movf	crcBufS_get@_this,w,c
  4568  002BBA  26D9               	addwf	fsr2l,f,c
  4569  002BBC  501C               	movf	crcBufS_get@_this+1,w,c
  4570  002BBE  22DA               	addwfc	fsr2h,f,c
  4571  002BC0  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4572  002BC4  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4573  002BC8  1E1F               	comf	??_crcBufS_get,f,c
  4574  002BCA  1E20               	comf	??_crcBufS_get+1,f,c
  4575  002BCC  4A1F               	infsnz	??_crcBufS_get,f,c
  4576  002BCE  2A20               	incf	??_crcBufS_get+1,f,c
  4577  002BD0  5025               	movf	crcBufS_get@wantedTime,w,c
  4578  002BD2  261F               	addwf	??_crcBufS_get,f,c
  4579  002BD4  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4580  002BD6  2220               	addwfc	??_crcBufS_get+1,f,c
  4581  002BD8  1E1F               	comf	??_crcBufS_get,f,c
  4582  002BDA  1E20               	comf	??_crcBufS_get+1,f,c
  4583  002BDC  4A1F               	infsnz	??_crcBufS_get,f,c
  4584  002BDE  2A20               	incf	??_crcBufS_get+1,f,c
  4585  002BE0  0E0F               	movlw	15
  4586  002BE2  241F               	addwf	??_crcBufS_get,w,c
  4587  002BE4  6E25               	movwf	crcBufS_get@wantedTime,c
  4588  002BE6  0E00               	movlw	0
  4589  002BE8  2020               	addwfc	??_crcBufS_get+1,w,c
  4590  002BEA  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4591                           
  4592                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4593  002BEC  501E               	movf	crcBufS_get@space,w,c
  4594  002BEE  2425               	addwf	crcBufS_get@wantedTime,w,c
  4595  002BF0  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4596  002BF2  0E00               	movlw	0
  4597  002BF4  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4598  002BF6  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4599  002BF8  501F               	movf	??_crcBufS_get,w,c
  4600  002BFA  241B               	addwf	crcBufS_get@_this,w,c
  4601  002BFC  6ED9               	movwf	fsr2l,c
  4602  002BFE  5020               	movf	??_crcBufS_get+1,w,c
  4603  002C00  201C               	addwfc	crcBufS_get@_this+1,w,c
  4604  002C02  6EDA               	movwf	fsr2h,c
  4605  002C04  50DF               	movf	indf2,w,c
  4606  002C06  0012               	return	
  4607  002C08                     l4463:
  4608                           
  4609                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4610  002C08  EE20 F00F          	lfsr	2,15
  4611  002C0C  501B               	movf	crcBufS_get@_this,w,c
  4612  002C0E  26D9               	addwf	fsr2l,f,c
  4613  002C10  501C               	movf	crcBufS_get@_this+1,w,c
  4614  002C12  22DA               	addwfc	fsr2h,f,c
  4615  002C14  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4616  002C18  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4617  002C1C  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4618  002C20  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4619  002C24  1E21               	comf	??_crcBufS_get+2,f,c
  4620  002C26  1E22               	comf	??_crcBufS_get+3,f,c
  4621  002C28  4A21               	infsnz	??_crcBufS_get+2,f,c
  4622  002C2A  2A22               	incf	??_crcBufS_get+3,f,c
  4623  002C2C  501E               	movf	crcBufS_get@space,w,c
  4624  002C2E  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4625  002C30  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4626  002C32  5021               	movf	??_crcBufS_get+2,w,c
  4627  002C34  2623               	addwf	??_crcBufS_get+4,f,c
  4628  002C36  5022               	movf	??_crcBufS_get+3,w,c
  4629  002C38  2224               	addwfc	??_crcBufS_get+5,f,c
  4630  002C3A  501F               	movf	??_crcBufS_get,w,c
  4631  002C3C  2623               	addwf	??_crcBufS_get+4,f,c
  4632  002C3E  5020               	movf	??_crcBufS_get+1,w,c
  4633  002C40  2224               	addwfc	??_crcBufS_get+5,f,c
  4634  002C42  5023               	movf	??_crcBufS_get+4,w,c
  4635  002C44  241B               	addwf	crcBufS_get@_this,w,c
  4636  002C46  6ED9               	movwf	fsr2l,c
  4637  002C48  5024               	movf	??_crcBufS_get+5,w,c
  4638  002C4A  201C               	addwfc	crcBufS_get@_this+1,w,c
  4639  002C4C  6EDA               	movwf	fsr2h,c
  4640  002C4E  50DF               	movf	indf2,w,c
  4641  002C50  0012               	return	
  4642  002C52                     __end_of_crcBufS_get:
  4643                           	opt stack 0
  4644                           tosu	equ	0xFFF
  4645                           tosh	equ	0xFFE
  4646                           tosl	equ	0xFFD
  4647                           pclath	equ	0xFFA
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           prodh	equ	0xFF4
  4653                           prodl	equ	0xFF3
  4654                           intcon	equ	0xFF2
  4655                           postinc0	equ	0xFEE
  4656                           wreg	equ	0xFE8
  4657                           postdec1	equ	0xFE5
  4658                           fsr1l	equ	0xFE1
  4659                           indf2	equ	0xFDF
  4660                           postinc2	equ	0xFDE
  4661                           postdec2	equ	0xFDD
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666 ;; *************** function _Receive_get *****************
  4667 ;; Defined at:
  4668 ;;		line 126 in file "UART.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;		None
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;		None
  4673 ;; Return value:  Size  Location     Type
  4674 ;;                  1    wreg      unsigned char 
  4675 ;; Registers used:
  4676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4677 ;; Tracked objects:
  4678 ;;		On entry : 0/0
  4679 ;;		On exit  : 0/0
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4682 ;;      Params:         0       0       0       0       0       0       0
  4683 ;;      Locals:         0       0       0       0       0       0       0
  4684 ;;      Temps:          0       0       0       0       0       0       0
  4685 ;;      Totals:         0       0       0       0       0       0       0
  4686 ;;Total ram usage:        0 bytes
  4687 ;; Hardware stack levels used:    1
  4688 ;; Hardware stack levels required when called:    6
  4689 ;; This function calls:
  4690 ;;		_UART_buff_get
  4691 ;; This function is called by:
  4692 ;;		_SYSTEM_Initialize
  4693 ;;		_getch
  4694 ;;		_CRCcheck
  4695 ;;		_receiveData
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text13
  4700  003CA2                     __ptext13:
  4701                           	opt stack 0
  4702  003CA2                     _Receive_get:
  4703                           	opt stack 22
  4704                           
  4705                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4706                           
  4707                           ;incstack = 0
  4708  003CA2  0104               	movlb	4	; () banked
  4709  003CA4  0E04               	movlw	high _input_buffer
  4710  003CA6  6E22               	movwf	UART_buff_get@_this+1,c
  4711  003CA8  0104               	movlb	4	; () banked
  4712  003CAA  0E00               	movlw	low _input_buffer
  4713  003CAC  6E21               	movwf	UART_buff_get@_this,c
  4714  003CAE  EC36  F019         	call	_UART_buff_get	;wreg free
  4715  003CB2  0012               	return	
  4716  003CB4                     __end_of_Receive_get:
  4717                           	opt stack 0
  4718                           tosu	equ	0xFFF
  4719                           tosh	equ	0xFFE
  4720                           tosl	equ	0xFFD
  4721                           pclath	equ	0xFFA
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           prodh	equ	0xFF4
  4727                           prodl	equ	0xFF3
  4728                           intcon	equ	0xFF2
  4729                           postinc0	equ	0xFEE
  4730                           wreg	equ	0xFE8
  4731                           postdec1	equ	0xFE5
  4732                           fsr1l	equ	0xFE1
  4733                           indf2	equ	0xFDF
  4734                           postinc2	equ	0xFDE
  4735                           postdec2	equ	0xFDD
  4736                           fsr2h	equ	0xFDA
  4737                           fsr2l	equ	0xFD9
  4738                           status	equ	0xFD8
  4739                           
  4740 ;; *************** function _UART_buff_get *****************
  4741 ;; Defined at:
  4742 ;;		line 81 in file "UART.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4745 ;;		 -> output_buffer(206), input_buffer(206), 
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;  c               1   36[COMRAM] unsigned char 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  1    wreg      unsigned char 
  4750 ;; Registers used:
  4751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4757 ;;      Params:         2       0       0       0       0       0       0
  4758 ;;      Locals:         1       0       0       0       0       0       0
  4759 ;;      Temps:          2       0       0       0       0       0       0
  4760 ;;      Totals:         5       0       0       0       0       0       0
  4761 ;;Total ram usage:        5 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    5
  4764 ;; This function calls:
  4765 ;;		_UART_buff_modulo_inc
  4766 ;; This function is called by:
  4767 ;;		_Receive_get
  4768 ;;		_Send_put
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           	psect	text14
  4773  00326C                     __ptext14:
  4774                           	opt stack 0
  4775  00326C                     _UART_buff_get:
  4776                           	opt stack 22
  4777                           
  4778                           ;UART.c: 82: unsigned char c;
  4779                           ;UART.c: 83: if (_this->count > 0) {
  4780                           
  4781                           ;incstack = 0
  4782  00326C  EE20 F0CC          	lfsr	2,204
  4783  003270  5021               	movf	UART_buff_get@_this,w,c
  4784  003272  26D9               	addwf	fsr2l,f,c
  4785  003274  5022               	movf	UART_buff_get@_this+1,w,c
  4786  003276  22DA               	addwfc	fsr2h,f,c
  4787  003278  52DE               	movf	postinc2,f,c
  4788  00327A  50DD               	movf	postdec2,w,c
  4789  00327C  0A80               	xorlw	128
  4790  00327E  0F80               	addlw	128
  4791  003280  0E01               	movlw	1
  4792  003282  B4D8               	btfsc	status,2,c
  4793  003284  5CDF               	subwf	indf2,w,c
  4794  003286  A0D8               	btfss	status,0,c
  4795  003288  D036               	goto	l4369
  4796                           
  4797                           ;UART.c: 84: c = _this->buf[_this->tail];
  4798  00328A  EE20 F0CA          	lfsr	2,202
  4799  00328E  5021               	movf	UART_buff_get@_this,w,c
  4800  003290  26D9               	addwf	fsr2l,f,c
  4801  003292  5022               	movf	UART_buff_get@_this+1,w,c
  4802  003294  22DA               	addwfc	fsr2h,f,c
  4803  003296  CFDE F023          	movff	postinc2,??_UART_buff_get
  4804  00329A  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4805  00329E  5023               	movf	??_UART_buff_get,w,c
  4806  0032A0  2421               	addwf	UART_buff_get@_this,w,c
  4807  0032A2  6ED9               	movwf	fsr2l,c
  4808  0032A4  5024               	movf	??_UART_buff_get+1,w,c
  4809  0032A6  2022               	addwfc	UART_buff_get@_this+1,w,c
  4810  0032A8  6EDA               	movwf	fsr2h,c
  4811  0032AA  50DF               	movf	indf2,w,c
  4812  0032AC  6E25               	movwf	UART_buff_get@c,c
  4813                           
  4814                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4815  0032AE  EE20 F0CA          	lfsr	2,202
  4816  0032B2  5021               	movf	UART_buff_get@_this,w,c
  4817  0032B4  26D9               	addwf	fsr2l,f,c
  4818  0032B6  5022               	movf	UART_buff_get@_this+1,w,c
  4819  0032B8  22DA               	addwfc	fsr2h,f,c
  4820  0032BA  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4821  0032BE  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4822  0032C2  0E00               	movlw	0
  4823  0032C4  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4824  0032C6  0EC8               	movlw	200
  4825  0032C8  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4826  0032CA  EC2F  F01D         	call	_UART_buff_modulo_inc	;wreg free
  4827  0032CE  EE20 F0CA          	lfsr	2,202
  4828  0032D2  5021               	movf	UART_buff_get@_this,w,c
  4829  0032D4  26D9               	addwf	fsr2l,f,c
  4830  0032D6  5022               	movf	UART_buff_get@_this+1,w,c
  4831  0032D8  22DA               	addwfc	fsr2h,f,c
  4832  0032DA  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4833  0032DE  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4834                           
  4835                           ;UART.c: 86: --_this->count;
  4836  0032E2  EE20 F0CC          	lfsr	2,204
  4837  0032E6  5021               	movf	UART_buff_get@_this,w,c
  4838  0032E8  26D9               	addwf	fsr2l,f,c
  4839  0032EA  5022               	movf	UART_buff_get@_this+1,w,c
  4840  0032EC  22DA               	addwfc	fsr2h,f,c
  4841  0032EE  06DE               	decf	postinc2,f,c
  4842  0032F0  0E00               	movlw	0
  4843  0032F2  5ADD               	subwfb	postdec2,f,c
  4844                           
  4845                           ;UART.c: 87: } else {
  4846  0032F4  D002               	goto	l778
  4847  0032F6                     l4369:
  4848                           
  4849                           ;UART.c: 88: c = 0;
  4850  0032F6  0E00               	movlw	0
  4851  0032F8  6E25               	movwf	UART_buff_get@c,c
  4852  0032FA                     l778:
  4853                           
  4854                           ;UART.c: 89: }
  4855                           ;UART.c: 90: return (c);
  4856  0032FA  5025               	movf	UART_buff_get@c,w,c
  4857  0032FC  0012               	return	
  4858  0032FE                     __end_of_UART_buff_get:
  4859                           	opt stack 0
  4860                           tosu	equ	0xFFF
  4861                           tosh	equ	0xFFE
  4862                           tosl	equ	0xFFD
  4863                           pclath	equ	0xFFA
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           postinc0	equ	0xFEE
  4872                           wreg	equ	0xFE8
  4873                           postdec1	equ	0xFE5
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _UART_buff_modulo_inc *****************
  4883 ;; Defined at:
  4884 ;;		line 106 in file "UART.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  value           2   26[COMRAM] const unsigned int 
  4887 ;;  modulus         2   28[COMRAM] const unsigned int 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;  my_value        2   30[COMRAM] unsigned int 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  2   26[COMRAM] unsigned int 
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4899 ;;      Params:         4       0       0       0       0       0       0
  4900 ;;      Locals:         2       0       0       0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0
  4902 ;;      Totals:         6       0       0       0       0       0       0
  4903 ;;Total ram usage:        6 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    4
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		_UART_buff_put
  4910 ;;		_UART_buff_get
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text15
  4915  003A5E                     __ptext15:
  4916                           	opt stack 0
  4917  003A5E                     _UART_buff_modulo_inc:
  4918                           	opt stack 22
  4919                           
  4920                           ;UART.c: 107: unsigned int my_value = value + 1;
  4921                           
  4922                           ;incstack = 0
  4923  003A5E  0E01               	movlw	1
  4924  003A60  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4925  003A62  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4926  003A64  0E00               	movlw	0
  4927  003A66  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4928  003A68  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4929                           
  4930                           ;UART.c: 108: if (my_value >= modulus) {
  4931  003A6A  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4932  003A6C  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4933  003A6E  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4934  003A70  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4935  003A72  A0D8               	btfss	status,0,c
  4936  003A74  D004               	goto	l4357
  4937                           
  4938                           ;UART.c: 109: my_value = 0;
  4939  003A76  0E00               	movlw	0
  4940  003A78  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4941  003A7A  0E00               	movlw	0
  4942  003A7C  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4943  003A7E                     l4357:
  4944                           
  4945                           ;UART.c: 110: }
  4946                           ;UART.c: 111: return (my_value);
  4947  003A7E  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4948  003A82  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4949  003A86  0012               	return	
  4950  003A88                     __end_of_UART_buff_modulo_inc:
  4951                           	opt stack 0
  4952                           tosu	equ	0xFFF
  4953                           tosh	equ	0xFFE
  4954                           tosl	equ	0xFFD
  4955                           pclath	equ	0xFFA
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           postinc0	equ	0xFEE
  4964                           wreg	equ	0xFE8
  4965                           postdec1	equ	0xFE5
  4966                           fsr1l	equ	0xFE1
  4967                           indf2	equ	0xFDF
  4968                           postinc2	equ	0xFDE
  4969                           postdec2	equ	0xFDD
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function _Receive_available *****************
  4975 ;; Defined at:
  4976 ;;		line 122 in file "UART.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;		None
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  2   28[COMRAM] int 
  4983 ;; Registers used:
  4984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4990 ;;      Params:         2       0       0       0       0       0       0
  4991 ;;      Locals:         0       0       0       0       0       0       0
  4992 ;;      Temps:          0       0       0       0       0       0       0
  4993 ;;      Totals:         2       0       0       0       0       0       0
  4994 ;;Total ram usage:        2 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    5
  4997 ;; This function calls:
  4998 ;;		_UART_buff_size
  4999 ;; This function is called by:
  5000 ;;		_SYSTEM_Initialize
  5001 ;;		_CRCcheck
  5002 ;;		_receiveData
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text16
  5007  003BEC                     __ptext16:
  5008                           	opt stack 0
  5009  003BEC                     _Receive_available:
  5010                           	opt stack 23
  5011                           
  5012                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  5013                           
  5014                           ;incstack = 0
  5015  003BEC  0104               	movlb	4	; () banked
  5016  003BEE  0E04               	movlw	high _input_buffer
  5017  003BF0  6E1C               	movwf	UART_buff_size@_this+1,c
  5018  003BF2  0104               	movlb	4	; () banked
  5019  003BF4  0E00               	movlw	low _input_buffer
  5020  003BF6  6E1B               	movwf	UART_buff_size@_this,c
  5021  003BF8  EC28  F01E         	call	_UART_buff_size	;wreg free
  5022  003BFC  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  5023  003C00  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  5024  003C04  0012               	return	
  5025  003C06                     __end_of_Receive_available:
  5026                           	opt stack 0
  5027                           tosu	equ	0xFFF
  5028                           tosh	equ	0xFFE
  5029                           tosl	equ	0xFFD
  5030                           pclath	equ	0xFFA
  5031                           tblptru	equ	0xFF8
  5032                           tblptrh	equ	0xFF7
  5033                           tblptrl	equ	0xFF6
  5034                           tablat	equ	0xFF5
  5035                           prodh	equ	0xFF4
  5036                           prodl	equ	0xFF3
  5037                           intcon	equ	0xFF2
  5038                           postinc0	equ	0xFEE
  5039                           wreg	equ	0xFE8
  5040                           postdec1	equ	0xFE5
  5041                           fsr1l	equ	0xFE1
  5042                           indf2	equ	0xFDF
  5043                           postinc2	equ	0xFDE
  5044                           postdec2	equ	0xFDD
  5045                           fsr2h	equ	0xFDA
  5046                           fsr2l	equ	0xFD9
  5047                           status	equ	0xFD8
  5048                           
  5049 ;; *************** function _UART_buff_size *****************
  5050 ;; Defined at:
  5051 ;;		line 102 in file "UART.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  5054 ;;		 -> output_buffer(206), input_buffer(206), 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;		None
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  2   26[COMRAM] int 
  5059 ;; Registers used:
  5060 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5066 ;;      Params:         2       0       0       0       0       0       0
  5067 ;;      Locals:         0       0       0       0       0       0       0
  5068 ;;      Temps:          0       0       0       0       0       0       0
  5069 ;;      Totals:         2       0       0       0       0       0       0
  5070 ;;Total ram usage:        2 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    4
  5073 ;; This function calls:
  5074 ;;		Nothing
  5075 ;; This function is called by:
  5076 ;;		_Receive_available
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text17
  5081  003C50                     __ptext17:
  5082                           	opt stack 0
  5083  003C50                     _UART_buff_size:
  5084                           	opt stack 23
  5085                           
  5086                           ;UART.c: 103: return (_this->count);
  5087                           
  5088                           ;incstack = 0
  5089  003C50  EE20 F0CC          	lfsr	2,204
  5090  003C54  501B               	movf	UART_buff_size@_this,w,c
  5091  003C56  26D9               	addwf	fsr2l,f,c
  5092  003C58  501C               	movf	UART_buff_size@_this+1,w,c
  5093  003C5A  22DA               	addwfc	fsr2h,f,c
  5094  003C5C  CFDE F01B          	movff	postinc2,?_UART_buff_size
  5095  003C60  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  5096  003C64  0012               	return	
  5097  003C66                     __end_of_UART_buff_size:
  5098                           	opt stack 0
  5099                           tosu	equ	0xFFF
  5100                           tosh	equ	0xFFE
  5101                           tosl	equ	0xFFD
  5102                           pclath	equ	0xFFA
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           intcon	equ	0xFF2
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _CRC8 *****************
  5122 ;; Defined at:
  5123 ;;		line 34 in file "FastTransfer.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  data            2   26[COMRAM] PTR const unsigned char 
  5126 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1131(3), receiveData@holder(3), 
  5127 ;;		 -> rx_buffer(200), ring_buffer(206), 
  5128 ;;  len             1   28[COMRAM] unsigned char 
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;  sum             1   29[COMRAM] unsigned char 
  5131 ;;  tempI           1   31[COMRAM] unsigned char 
  5132 ;;  extract         1   30[COMRAM] unsigned char 
  5133 ;;  crc             1   32[COMRAM] unsigned char 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      unsigned char 
  5136 ;; Registers used:
  5137 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5143 ;;      Params:         3       0       0       0       0       0       0
  5144 ;;      Locals:         4       0       0       0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0
  5146 ;;      Totals:         7       0       0       0       0       0       0
  5147 ;;Total ram usage:        7 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    4
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_sendData
  5154 ;;		_receiveData
  5155 ;;		_CRCcheck
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           	psect	text18
  5160  0037E8                     __ptext18:
  5161                           	opt stack 0
  5162  0037E8                     _CRC8:
  5163                           	opt stack 24
  5164                           
  5165                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  5166                           
  5167                           ;incstack = 0
  5168  0037E8  0E00               	movlw	0
  5169  0037EA  6E21               	movwf	CRC8@crc,c
  5170                           
  5171                           ;FastTransfer.c: 36: while (len--) {
  5172  0037EC  D01B               	goto	l4429
  5173  0037EE                     l4413:
  5174                           
  5175                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  5176  0037EE  C01B  FFD9         	movff	CRC8@data,fsr2l
  5177  0037F2  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5178  0037F6  50DF               	movf	indf2,w,c
  5179  0037F8  6E1F               	movwf	CRC8@extract,c
  5180  0037FA  4A1B               	infsnz	CRC8@data,f,c
  5181  0037FC  2A1C               	incf	CRC8@data+1,f,c
  5182                           
  5183                           ;FastTransfer.c: 38: unsigned char tempI;
  5184                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  5185  0037FE  0E08               	movlw	8
  5186  003800  6E20               	movwf	CRC8@tempI,c
  5187  003802  D00E               	goto	l4427
  5188  003804                     l4419:
  5189                           
  5190                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  5191  003804  5021               	movf	CRC8@crc,w,c
  5192  003806  181F               	xorwf	CRC8@extract,w,c
  5193  003808  0B01               	andlw	1
  5194  00380A  6E1E               	movwf	CRC8@sum,c
  5195                           
  5196                           ;FastTransfer.c: 41: crc >>= 1;
  5197  00380C  90D8               	bcf	status,0,c
  5198  00380E  3221               	rrcf	CRC8@crc,f,c
  5199                           
  5200                           ;FastTransfer.c: 42: if (sum) {
  5201  003810  501E               	movf	CRC8@sum,w,c
  5202  003812  B4D8               	btfsc	status,2,c
  5203  003814  D002               	goto	l599
  5204                           
  5205                           ;FastTransfer.c: 43: crc ^= 0x8C;
  5206  003816  0E8C               	movlw	140
  5207  003818  1A21               	xorwf	CRC8@crc,f,c
  5208  00381A                     l599:
  5209                           
  5210                           ;FastTransfer.c: 44: }
  5211                           ;FastTransfer.c: 45: extract >>= 1;
  5212  00381A  90D8               	bcf	status,0,c
  5213  00381C  321F               	rrcf	CRC8@extract,f,c
  5214  00381E  0620               	decf	CRC8@tempI,f,c
  5215  003820                     l4427:
  5216  003820  6620               	tstfsz	CRC8@tempI,c
  5217  003822  D7F0               	goto	l4419
  5218  003824                     l4429:
  5219  003824  061D               	decf	CRC8@len,f,c
  5220  003826  281D               	incf	CRC8@len& (0+255),w,c
  5221  003828  A4D8               	btfss	status,2,c
  5222  00382A  D7E1               	goto	l4413
  5223                           
  5224                           ;FastTransfer.c: 46: }
  5225                           ;FastTransfer.c: 47: }
  5226                           ;FastTransfer.c: 48: return crc;
  5227  00382C  5021               	movf	CRC8@crc,w,c
  5228  00382E  0012               	return	
  5229  003830                     __end_of_CRC8:
  5230                           	opt stack 0
  5231                           tosu	equ	0xFFF
  5232                           tosh	equ	0xFFE
  5233                           tosl	equ	0xFFD
  5234                           pclath	equ	0xFFA
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           postinc0	equ	0xFEE
  5243                           wreg	equ	0xFE8
  5244                           postdec1	equ	0xFE5
  5245                           fsr1l	equ	0xFE1
  5246                           indf2	equ	0xFDF
  5247                           postinc2	equ	0xFDE
  5248                           postdec2	equ	0xFDD
  5249                           fsr2h	equ	0xFDA
  5250                           fsr2l	equ	0xFD9
  5251                           status	equ	0xFD8
  5252                           
  5253 ;; *************** function ___fttol *****************
  5254 ;; Defined at:
  5255 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  f1              3   30[BANK0 ] float 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  lval            4   40[BANK0 ] unsigned long 
  5260 ;;  exp1            1   44[BANK0 ] unsigned char 
  5261 ;;  sign1           1   39[BANK0 ] unsigned char 
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  4   30[BANK0 ] long 
  5264 ;; Registers used:
  5265 ;;		wreg, status,2, status,0
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5271 ;;      Params:         0       4       0       0       0       0       0
  5272 ;;      Locals:         0       6       0       0       0       0       0
  5273 ;;      Temps:          0       5       0       0       0       0       0
  5274 ;;      Totals:         0      15       0       0       0       0       0
  5275 ;;Total ram usage:       15 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    4
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_updateComms
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text19
  5286  001C0E                     __ptext19:
  5287                           	opt stack 0
  5288  001C0E                     ___fttol:
  5289                           	opt stack 25
  5290                           
  5291                           ;incstack = 0
  5292  001C0E  0100               	movlb	0	; () banked
  5293  001C10  C0E1  F0E3         	movff	___fttol@f1+2,??___fttol
  5294  001C14  0100               	movlb	0	; () banked
  5295  001C16  6BE4               	clrf	(??___fttol+1)& (0+255),b
  5296  001C18  6BE5               	clrf	(??___fttol+2)& (0+255),b
  5297  001C1A  0100               	movlb	0	; () banked
  5298  001C1C  35E0               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5299  001C1E  0100               	movlb	0	; () banked
  5300  001C20  37E3               	rlcf	??___fttol& (0+255),f,b
  5301  001C22  E301               	bnc	u3791
  5302  001C24  81E4               	bsf	(??___fttol+1)& (0+255),0,b
  5303  001C26                     u3791:
  5304  001C26  0100               	movlb	0	; () banked
  5305  001C28  51E3               	movf	??___fttol& (0+255),w,b
  5306  001C2A  0100               	movlb	0	; () banked
  5307  001C2C  6FED               	movwf	___fttol@exp1& (0+255),b
  5308  001C2E  0100               	movlb	0	; () banked
  5309  001C30  67ED               	tstfsz	___fttol@exp1& (0+255),b
  5310  001C32  D00D               	goto	l3861
  5311                           
  5312                           ; BSR set to: 0
  5313  001C34  0E00               	movlw	0
  5314  001C36  0100               	movlb	0	; () banked
  5315  001C38  6FDF               	movwf	?___fttol& (0+255),b
  5316  001C3A  0E00               	movlw	0
  5317  001C3C  0100               	movlb	0	; () banked
  5318  001C3E  6FE0               	movwf	(?___fttol+1)& (0+255),b
  5319  001C40  0E00               	movlw	0
  5320  001C42  0100               	movlb	0	; () banked
  5321  001C44  6FE1               	movwf	(?___fttol+2)& (0+255),b
  5322  001C46  0E00               	movlw	0
  5323  001C48  0100               	movlb	0	; () banked
  5324  001C4A  6FE2               	movwf	(?___fttol+3)& (0+255),b
  5325  001C4C  0012               	return	
  5326  001C4E                     l3861:
  5327                           
  5328                           ; BSR set to: 0
  5329  001C4E  0E17               	movlw	23
  5330  001C50  0100               	movlb	0	; () banked
  5331  001C52  6FE3               	movwf	??___fttol& (0+255),b
  5332  001C54  0100               	movlb	0	; () banked
  5333  001C56  C0DF  F0E4         	movff	___fttol@f1,??___fttol+1
  5334  001C5A  0100               	movlb	0	; () banked
  5335  001C5C  C0E0  F0E5         	movff	___fttol@f1+1,??___fttol+2
  5336  001C60  0100               	movlb	0	; () banked
  5337  001C62  C0E1  F0E6         	movff	___fttol@f1+2,??___fttol+3
  5338  001C66  0100               	movlb	0	; () banked
  5339  001C68  29E3               	incf	??___fttol& (0+255),w,b
  5340  001C6A  0100               	movlb	0	; () banked
  5341  001C6C  6FE7               	movwf	(??___fttol+4)& (0+255),b
  5342  001C6E  D005               	goto	u3810
  5343  001C70                     u3815:
  5344  001C70  0100               	movlb	0	; () banked
  5345  001C72  90D8               	bcf	status,0,c
  5346  001C74  33E6               	rrcf	(??___fttol+3)& (0+255),f,b
  5347  001C76  33E5               	rrcf	(??___fttol+2)& (0+255),f,b
  5348  001C78  33E4               	rrcf	(??___fttol+1)& (0+255),f,b
  5349  001C7A                     u3810:
  5350  001C7A  0100               	movlb	0	; () banked
  5351  001C7C  2FE7               	decfsz	(??___fttol+4)& (0+255),f,b
  5352  001C7E  D7F8               	goto	u3815
  5353  001C80  0100               	movlb	0	; () banked
  5354  001C82  51E4               	movf	(??___fttol+1)& (0+255),w,b
  5355  001C84  0100               	movlb	0	; () banked
  5356  001C86  6FE8               	movwf	___fttol@sign1& (0+255),b
  5357                           
  5358                           ; BSR set to: 0
  5359  001C88  0100               	movlb	0	; () banked
  5360  001C8A  8FE0               	bsf	(___fttol@f1+1)& (0+255),7,b
  5361                           
  5362                           ; BSR set to: 0
  5363  001C8C  0EFF               	movlw	255
  5364  001C8E  0100               	movlb	0	; () banked
  5365  001C90  17DF               	andwf	___fttol@f1& (0+255),f,b
  5366  001C92  0EFF               	movlw	255
  5367  001C94  0100               	movlb	0	; () banked
  5368  001C96  17E0               	andwf	(___fttol@f1+1)& (0+255),f,b
  5369  001C98  0E00               	movlw	0
  5370  001C9A  0100               	movlb	0	; () banked
  5371  001C9C  17E1               	andwf	(___fttol@f1+2)& (0+255),f,b
  5372                           
  5373                           ; BSR set to: 0
  5374  001C9E  0100               	movlb	0	; () banked
  5375  001CA0  51DF               	movf	___fttol@f1& (0+255),w,b
  5376  001CA2  0100               	movlb	0	; () banked
  5377  001CA4  6FE9               	movwf	___fttol@lval& (0+255),b
  5378  001CA6  0100               	movlb	0	; () banked
  5379  001CA8  51E0               	movf	(___fttol@f1+1)& (0+255),w,b
  5380  001CAA  0100               	movlb	0	; () banked
  5381  001CAC  6FEA               	movwf	(___fttol@lval+1)& (0+255),b
  5382  001CAE  0100               	movlb	0	; () banked
  5383  001CB0  51E1               	movf	(___fttol@f1+2)& (0+255),w,b
  5384  001CB2  0100               	movlb	0	; () banked
  5385  001CB4  6FEB               	movwf	(___fttol@lval+2)& (0+255),b
  5386  001CB6  0100               	movlb	0	; () banked
  5387  001CB8  6BEC               	clrf	(___fttol@lval+3)& (0+255),b
  5388                           
  5389                           ; BSR set to: 0
  5390  001CBA  0E8E               	movlw	142
  5391  001CBC  0100               	movlb	0	; () banked
  5392  001CBE  5FED               	subwf	___fttol@exp1& (0+255),f,b
  5393                           
  5394                           ; BSR set to: 0
  5395  001CC0  0100               	movlb	0	; () banked
  5396  001CC2  AFED               	btfss	___fttol@exp1& (0+255),7,b
  5397  001CC4  D026               	goto	l3883
  5398                           
  5399                           ; BSR set to: 0
  5400  001CC6  0100               	movlb	0	; () banked
  5401  001CC8  51ED               	movf	___fttol@exp1& (0+255),w,b
  5402  001CCA  0A80               	xorlw	128
  5403  001CCC  0100               	movlb	0	; () banked
  5404  001CCE  6FE3               	movwf	??___fttol& (0+255),b
  5405  001CD0  0EF1               	movlw	241
  5406  001CD2  0A80               	xorlw	128
  5407  001CD4  0100               	movlb	0	; () banked
  5408  001CD6  5DE3               	subwf	??___fttol& (0+255),w,b
  5409  001CD8  B0D8               	btfsc	status,0,c
  5410  001CDA  D00D               	goto	l3879
  5411                           
  5412                           ; BSR set to: 0
  5413  001CDC  0E00               	movlw	0
  5414  001CDE  0100               	movlb	0	; () banked
  5415  001CE0  6FDF               	movwf	?___fttol& (0+255),b
  5416  001CE2  0E00               	movlw	0
  5417  001CE4  0100               	movlb	0	; () banked
  5418  001CE6  6FE0               	movwf	(?___fttol+1)& (0+255),b
  5419  001CE8  0E00               	movlw	0
  5420  001CEA  0100               	movlb	0	; () banked
  5421  001CEC  6FE1               	movwf	(?___fttol+2)& (0+255),b
  5422  001CEE  0E00               	movlw	0
  5423  001CF0  0100               	movlb	0	; () banked
  5424  001CF2  6FE2               	movwf	(?___fttol+3)& (0+255),b
  5425  001CF4  0012               	return	
  5426  001CF6                     l3879:
  5427                           
  5428                           ; BSR set to: 0
  5429  001CF6  0100               	movlb	0	; () banked
  5430  001CF8  90D8               	bcf	status,0,c
  5431  001CFA  0100               	movlb	0	; () banked
  5432  001CFC  33EC               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5433  001CFE  0100               	movlb	0	; () banked
  5434  001D00  33EB               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5435  001D02  0100               	movlb	0	; () banked
  5436  001D04  33EA               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5437  001D06  0100               	movlb	0	; () banked
  5438  001D08  33E9               	rrcf	___fttol@lval& (0+255),f,b
  5439                           
  5440                           ; BSR set to: 0
  5441  001D0A  0100               	movlb	0	; () banked
  5442  001D0C  3FED               	incfsz	___fttol@exp1& (0+255),f,b
  5443  001D0E  D7F3               	goto	l3879
  5444  001D10  D020               	goto	l3893
  5445  001D12                     l3883:
  5446                           
  5447                           ; BSR set to: 0
  5448  001D12  0E17               	movlw	23
  5449  001D14  0100               	movlb	0	; () banked
  5450  001D16  65ED               	cpfsgt	___fttol@exp1& (0+255),b
  5451  001D18  D019               	goto	l3891
  5452                           
  5453                           ; BSR set to: 0
  5454  001D1A  0E00               	movlw	0
  5455  001D1C  0100               	movlb	0	; () banked
  5456  001D1E  6FDF               	movwf	?___fttol& (0+255),b
  5457  001D20  0E00               	movlw	0
  5458  001D22  0100               	movlb	0	; () banked
  5459  001D24  6FE0               	movwf	(?___fttol+1)& (0+255),b
  5460  001D26  0E00               	movlw	0
  5461  001D28  0100               	movlb	0	; () banked
  5462  001D2A  6FE1               	movwf	(?___fttol+2)& (0+255),b
  5463  001D2C  0E00               	movlw	0
  5464  001D2E  0100               	movlb	0	; () banked
  5465  001D30  6FE2               	movwf	(?___fttol+3)& (0+255),b
  5466  001D32  0012               	return	
  5467  001D34                     l3889:
  5468                           
  5469                           ; BSR set to: 0
  5470  001D34  0100               	movlb	0	; () banked
  5471  001D36  90D8               	bcf	status,0,c
  5472  001D38  0100               	movlb	0	; () banked
  5473  001D3A  37E9               	rlcf	___fttol@lval& (0+255),f,b
  5474  001D3C  0100               	movlb	0	; () banked
  5475  001D3E  37EA               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5476  001D40  0100               	movlb	0	; () banked
  5477  001D42  37EB               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5478  001D44  0100               	movlb	0	; () banked
  5479  001D46  37EC               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5480  001D48  0100               	movlb	0	; () banked
  5481  001D4A  07ED               	decf	___fttol@exp1& (0+255),f,b
  5482  001D4C                     l3891:
  5483                           
  5484                           ; BSR set to: 0
  5485  001D4C  0100               	movlb	0	; () banked
  5486  001D4E  67ED               	tstfsz	___fttol@exp1& (0+255),b
  5487  001D50  D7F1               	goto	l3889
  5488  001D52                     l3893:
  5489                           
  5490                           ; BSR set to: 0
  5491  001D52  0100               	movlb	0	; () banked
  5492  001D54  51E8               	movf	___fttol@sign1& (0+255),w,b
  5493  001D56  B4D8               	btfsc	status,2,c
  5494  001D58  D00F               	goto	l3897
  5495                           
  5496                           ; BSR set to: 0
  5497  001D5A  0100               	movlb	0	; () banked
  5498  001D5C  1FEC               	comf	(___fttol@lval+3)& (0+255),f,b
  5499  001D5E  0100               	movlb	0	; () banked
  5500  001D60  1FEB               	comf	(___fttol@lval+2)& (0+255),f,b
  5501  001D62  0100               	movlb	0	; () banked
  5502  001D64  1FEA               	comf	(___fttol@lval+1)& (0+255),f,b
  5503  001D66  0100               	movlb	0	; () banked
  5504  001D68  6DE9               	negf	___fttol@lval& (0+255),b
  5505  001D6A  0E00               	movlw	0
  5506  001D6C  0100               	movlb	0	; () banked
  5507  001D6E  23EA               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5508  001D70  0100               	movlb	0	; () banked
  5509  001D72  23EB               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5510  001D74  0100               	movlb	0	; () banked
  5511  001D76  23EC               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5512  001D78                     l3897:
  5513                           
  5514                           ; BSR set to: 0
  5515  001D78  C0E9  F0DF         	movff	___fttol@lval,?___fttol
  5516  001D7C  C0EA  F0E0         	movff	___fttol@lval+1,?___fttol+1
  5517  001D80  C0EB  F0E1         	movff	___fttol@lval+2,?___fttol+2
  5518  001D84  C0EC  F0E2         	movff	___fttol@lval+3,?___fttol+3
  5519  001D88  0012               	return	
  5520  001D8A                     __end_of___fttol:
  5521                           	opt stack 0
  5522                           tosu	equ	0xFFF
  5523                           tosh	equ	0xFFE
  5524                           tosl	equ	0xFFD
  5525                           pclath	equ	0xFFA
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodh	equ	0xFF4
  5531                           prodl	equ	0xFF3
  5532                           intcon	equ	0xFF2
  5533                           postinc0	equ	0xFEE
  5534                           wreg	equ	0xFE8
  5535                           postdec1	equ	0xFE5
  5536                           fsr1l	equ	0xFE1
  5537                           indf2	equ	0xFDF
  5538                           postinc2	equ	0xFDE
  5539                           postdec2	equ	0xFDD
  5540                           fsr2h	equ	0xFDA
  5541                           fsr2l	equ	0xFD9
  5542                           status	equ	0xFD8
  5543                           
  5544 ;; *************** function _ToSend *****************
  5545 ;; Defined at:
  5546 ;;		line 216 in file "FastTransfer.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  where           1    wreg     unsigned char 
  5549 ;;  what            2   45[BANK0 ] unsigned int 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  where           1   47[BANK0 ] unsigned char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;		None               void
  5554 ;; Registers used:
  5555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5561 ;;      Params:         0       2       0       0       0       0       0
  5562 ;;      Locals:         0       1       0       0       0       0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0
  5564 ;;      Totals:         0       3       0       0       0       0       0
  5565 ;;Total ram usage:        3 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    6
  5568 ;; This function calls:
  5569 ;;		_FastTransfer_buffer_put
  5570 ;; This function is called by:
  5571 ;;		_updateComms
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text20
  5576  003B4A                     __ptext20:
  5577                           	opt stack 0
  5578  003B4A                     _ToSend:
  5579                           	opt stack 23
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;incstack = 0
  5583                           ;ToSend@where stored from wreg
  5584  003B4A  0100               	movlb	0	; () banked
  5585  003B4C  6FF0               	movwf	ToSend@where& (0+255),b
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  5589  003B4E  0102               	movlb	2	; () banked
  5590  003B50  0E02               	movlw	high _ring_buffer
  5591  003B52  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5592  003B54  0102               	movlb	2	; () banked
  5593  003B56  0E00               	movlw	low _ring_buffer
  5594  003B58  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5595  003B5A  C0F0  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5596  003B5E  C0EE  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5597  003B62  C0EF  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5598  003B66  EC80  F00F         	call	_FastTransfer_buffer_put	;wreg free
  5599  003B6A  0012               	return	
  5600  003B6C                     __end_of_ToSend:
  5601                           	opt stack 0
  5602                           tosu	equ	0xFFF
  5603                           tosh	equ	0xFFE
  5604                           tosl	equ	0xFFD
  5605                           pclath	equ	0xFFA
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           intcon	equ	0xFF2
  5613                           postinc0	equ	0xFEE
  5614                           wreg	equ	0xFE8
  5615                           postdec1	equ	0xFE5
  5616                           fsr1l	equ	0xFE1
  5617                           indf2	equ	0xFDF
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           fsr2h	equ	0xFDA
  5621                           fsr2l	equ	0xFD9
  5622                           status	equ	0xFD8
  5623                           
  5624 ;; *************** function _FastTransfer_buffer_put *****************
  5625 ;; Defined at:
  5626 ;;		line 223 in file "FastTransfer.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5629 ;;		 -> ring_buffer(206), 
  5630 ;;  towhere         1   34[COMRAM] unsigned char 
  5631 ;;  towhat          2   35[COMRAM] unsigned int 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;		None               void
  5636 ;; Registers used:
  5637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5643 ;;      Params:         5       0       0       0       0       0       0
  5644 ;;      Locals:         0       0       0       0       0       0       0
  5645 ;;      Temps:          2       0       0       0       0       0       0
  5646 ;;      Totals:         7       0       0       0       0       0       0
  5647 ;;Total ram usage:        7 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    5
  5650 ;; This function calls:
  5651 ;;		_FastTransfer_buffer_modulo_inc
  5652 ;; This function is called by:
  5653 ;;		_ToSend
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           	psect	text21
  5658  001F00                     __ptext21:
  5659                           	opt stack 0
  5660  001F00                     _FastTransfer_buffer_put:
  5661                           	opt stack 23
  5662                           
  5663                           ;FastTransfer.c: 225: group.integer = towhat;
  5664                           
  5665                           ;incstack = 0
  5666  001F00  C024  F043         	movff	FastTransfer_buffer_put@towhat,_group
  5667  001F04  C025  F044         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5668                           
  5669                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  5670  001F08  EE20 F0CC          	lfsr	2,204
  5671  001F0C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5672  001F0E  26D9               	addwf	fsr2l,f,c
  5673  001F10  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5674  001F12  22DA               	addwfc	fsr2h,f,c
  5675  001F14  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5676  001F18  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5677  001F1C  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5678  001F1E  0A80               	xorlw	128
  5679  001F20  6EF3               	movwf	prodl,c
  5680  001F22  0E80               	movlw	128
  5681  001F24  5CF3               	subwf	prodl,w,c
  5682  001F26  0EC5               	movlw	197
  5683  001F28  B4D8               	btfsc	status,2,c
  5684  001F2A  5C26               	subwf	??_FastTransfer_buffer_put,w,c
  5685  001F2C  B0D8               	btfsc	status,0,c
  5686  001F2E  0012               	return	
  5687                           
  5688                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  5689  001F30  EE20 F0C8          	lfsr	2,200
  5690  001F34  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5691  001F36  26D9               	addwf	fsr2l,f,c
  5692  001F38  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5693  001F3A  22DA               	addwfc	fsr2h,f,c
  5694  001F3C  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5695  001F40  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5696  001F44  5026               	movf	??_FastTransfer_buffer_put,w,c
  5697  001F46  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5698  001F48  6ED9               	movwf	fsr2l,c
  5699  001F4A  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5700  001F4C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5701  001F4E  6EDA               	movwf	fsr2h,c
  5702  001F50  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5703                           
  5704                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5705  001F54  EE20 F0C8          	lfsr	2,200
  5706  001F58  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5707  001F5A  26D9               	addwf	fsr2l,f,c
  5708  001F5C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5709  001F5E  22DA               	addwfc	fsr2h,f,c
  5710  001F60  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5711  001F64  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5712  001F68  0E00               	movlw	0
  5713  001F6A  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5714  001F6C  0EC8               	movlw	200
  5715  001F6E  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5716  001F70  EC44  F01D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5717  001F74  EE20 F0C8          	lfsr	2,200
  5718  001F78  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5719  001F7A  26D9               	addwf	fsr2l,f,c
  5720  001F7C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5721  001F7E  22DA               	addwfc	fsr2h,f,c
  5722  001F80  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5723  001F84  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5724                           
  5725                           ;FastTransfer.c: 230: ++_this->count;
  5726  001F88  EE20 F0CC          	lfsr	2,204
  5727  001F8C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5728  001F8E  26D9               	addwf	fsr2l,f,c
  5729  001F90  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5730  001F92  22DA               	addwfc	fsr2h,f,c
  5731  001F94  2ADE               	incf	postinc2,f,c
  5732  001F96  0E00               	movlw	0
  5733  001F98  22DD               	addwfc	postdec2,f,c
  5734                           
  5735                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  5736  001F9A  EE20 F0C8          	lfsr	2,200
  5737  001F9E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5738  001FA0  26D9               	addwf	fsr2l,f,c
  5739  001FA2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5740  001FA4  22DA               	addwfc	fsr2h,f,c
  5741  001FA6  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5742  001FAA  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5743  001FAE  5026               	movf	??_FastTransfer_buffer_put,w,c
  5744  001FB0  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5745  001FB2  6ED9               	movwf	fsr2l,c
  5746  001FB4  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5747  001FB6  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5748  001FB8  6EDA               	movwf	fsr2h,c
  5749  001FBA  C043  FFDF         	movff	_group,indf2
  5750                           
  5751                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5752  001FBE  EE20 F0C8          	lfsr	2,200
  5753  001FC2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5754  001FC4  26D9               	addwf	fsr2l,f,c
  5755  001FC6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5756  001FC8  22DA               	addwfc	fsr2h,f,c
  5757  001FCA  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5758  001FCE  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5759  001FD2  0E00               	movlw	0
  5760  001FD4  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5761  001FD6  0EC8               	movlw	200
  5762  001FD8  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5763  001FDA  EC44  F01D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5764  001FDE  EE20 F0C8          	lfsr	2,200
  5765  001FE2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5766  001FE4  26D9               	addwf	fsr2l,f,c
  5767  001FE6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5768  001FE8  22DA               	addwfc	fsr2h,f,c
  5769  001FEA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5770  001FEE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5771                           
  5772                           ;FastTransfer.c: 233: ++_this->count;
  5773  001FF2  EE20 F0CC          	lfsr	2,204
  5774  001FF6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5775  001FF8  26D9               	addwf	fsr2l,f,c
  5776  001FFA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5777  001FFC  22DA               	addwfc	fsr2h,f,c
  5778  001FFE  2ADE               	incf	postinc2,f,c
  5779  002000  0E00               	movlw	0
  5780  002002  22DD               	addwfc	postdec2,f,c
  5781                           
  5782                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  5783  002004  EE20 F0C8          	lfsr	2,200
  5784  002008  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5785  00200A  26D9               	addwf	fsr2l,f,c
  5786  00200C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5787  00200E  22DA               	addwfc	fsr2h,f,c
  5788  002010  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  5789  002014  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  5790  002018  5026               	movf	??_FastTransfer_buffer_put,w,c
  5791  00201A  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5792  00201C  6ED9               	movwf	fsr2l,c
  5793  00201E  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  5794  002020  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5795  002022  6EDA               	movwf	fsr2h,c
  5796  002024  C044  FFDF         	movff	_group+1,indf2
  5797                           
  5798                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5799  002028  EE20 F0C8          	lfsr	2,200
  5800  00202C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5801  00202E  26D9               	addwf	fsr2l,f,c
  5802  002030  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5803  002032  22DA               	addwfc	fsr2h,f,c
  5804  002034  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5805  002038  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5806  00203C  0E00               	movlw	0
  5807  00203E  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5808  002040  0EC8               	movlw	200
  5809  002042  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5810  002044  EC44  F01D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5811  002048  EE20 F0C8          	lfsr	2,200
  5812  00204C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5813  00204E  26D9               	addwf	fsr2l,f,c
  5814  002050  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5815  002052  22DA               	addwfc	fsr2h,f,c
  5816  002054  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5817  002058  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5818                           
  5819                           ;FastTransfer.c: 236: ++_this->count;
  5820  00205C  EE20 F0CC          	lfsr	2,204
  5821  002060  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5822  002062  26D9               	addwf	fsr2l,f,c
  5823  002064  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5824  002066  22DA               	addwfc	fsr2h,f,c
  5825  002068  2ADE               	incf	postinc2,f,c
  5826  00206A  0E00               	movlw	0
  5827  00206C  22DD               	addwfc	postdec2,f,c
  5828  00206E  0012               	return	
  5829  002070                     __end_of_FastTransfer_buffer_put:
  5830                           	opt stack 0
  5831                           tosu	equ	0xFFF
  5832                           tosh	equ	0xFFE
  5833                           tosl	equ	0xFFD
  5834                           pclath	equ	0xFFA
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           postdec1	equ	0xFE5
  5845                           fsr1l	equ	0xFE1
  5846                           indf2	equ	0xFDF
  5847                           postinc2	equ	0xFDE
  5848                           postdec2	equ	0xFDD
  5849                           fsr2h	equ	0xFDA
  5850                           fsr2l	equ	0xFD9
  5851                           status	equ	0xFD8
  5852                           
  5853 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5854 ;; Defined at:
  5855 ;;		line 273 in file "FastTransfer.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  value           2   26[COMRAM] const unsigned int 
  5858 ;;  modulus         2   28[COMRAM] const unsigned int 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  my_value        2   30[COMRAM] unsigned int 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  2   26[COMRAM] unsigned int 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5870 ;;      Params:         4       0       0       0       0       0       0
  5871 ;;      Locals:         2       0       0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0
  5873 ;;      Totals:         6       0       0       0       0       0       0
  5874 ;;Total ram usage:        6 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    4
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_FastTransfer_buffer_put
  5881 ;;		_FastTransfer_buffer_get
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           	psect	text22
  5886  003A88                     __ptext22:
  5887                           	opt stack 0
  5888  003A88                     _FastTransfer_buffer_modulo_inc:
  5889                           	opt stack 23
  5890                           
  5891                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  5892                           
  5893                           ;incstack = 0
  5894  003A88  0E01               	movlw	1
  5895  003A8A  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5896  003A8C  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5897  003A8E  0E00               	movlw	0
  5898  003A90  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5899  003A92  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5900                           
  5901                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  5902  003A94  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5903  003A96  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5904  003A98  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5905  003A9A  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5906  003A9C  A0D8               	btfss	status,0,c
  5907  003A9E  D004               	goto	l4439
  5908                           
  5909                           ;FastTransfer.c: 276: my_value = 0;
  5910  003AA0  0E00               	movlw	0
  5911  003AA2  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5912  003AA4  0E00               	movlw	0
  5913  003AA6  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5914  003AA8                     l4439:
  5915                           
  5916                           ;FastTransfer.c: 277: }
  5917                           ;FastTransfer.c: 278: return (my_value);
  5918  003AA8  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5919  003AAC  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5920  003AB0  0012               	return	
  5921  003AB2                     __end_of_FastTransfer_buffer_modulo_inc:
  5922                           	opt stack 0
  5923                           tosu	equ	0xFFF
  5924                           tosh	equ	0xFFE
  5925                           tosl	equ	0xFFD
  5926                           pclath	equ	0xFFA
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           intcon	equ	0xFF2
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           postdec1	equ	0xFE5
  5937                           fsr1l	equ	0xFE1
  5938                           indf2	equ	0xFDF
  5939                           postinc2	equ	0xFDE
  5940                           postdec2	equ	0xFDD
  5941                           fsr2h	equ	0xFDA
  5942                           fsr2l	equ	0xFD9
  5943                           status	equ	0xFD8
  5944                           
  5945 ;; *************** function _Tempeture_Get *****************
  5946 ;; Defined at:
  5947 ;;		line 82 in file "Tempeture.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;  channelnum      2   32[COMRAM] int 
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;		None
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  3   32[COMRAM] float 
  5954 ;; Registers used:
  5955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5961 ;;      Params:         3       0       0       0       0       0       0
  5962 ;;      Locals:         0       0       0       0       0       0       0
  5963 ;;      Temps:          0       0       0       0       0       0       0
  5964 ;;      Totals:         3       0       0       0       0       0       0
  5965 ;;Total ram usage:        3 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    5
  5968 ;; This function calls:
  5969 ;;		___wmul
  5970 ;; This function is called by:
  5971 ;;		_updateComms
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text23
  5976  0039A0                     __ptext23:
  5977                           	opt stack 0
  5978  0039A0                     _Tempeture_Get:
  5979                           	opt stack 24
  5980                           
  5981                           ;Tempeture.c: 83: return Temp_DegF[channelnum];
  5982                           
  5983                           ;incstack = 0
  5984  0039A0  C021  F01B         	movff	Tempeture_Get@channelnum,___wmul@multiplier
  5985  0039A4  C022  F01C         	movff	Tempeture_Get@channelnum+1,___wmul@multiplier+1
  5986  0039A8  0E00               	movlw	0
  5987  0039AA  6E1E               	movwf	___wmul@multiplicand+1,c
  5988  0039AC  0E03               	movlw	3
  5989  0039AE  6E1D               	movwf	___wmul@multiplicand,c
  5990  0039B0  EC6E  F01D         	call	___wmul	;wreg free
  5991  0039B4  0100               	movlb	0	; () banked
  5992  0039B6  0EF4               	movlw	low _Temp_DegF
  5993  0039B8  241B               	addwf	?___wmul,w,c
  5994  0039BA  6ED9               	movwf	fsr2l,c
  5995  0039BC  0100               	movlb	0	; () banked
  5996  0039BE  0E00               	movlw	high _Temp_DegF
  5997  0039C0  201C               	addwfc	?___wmul+1,w,c
  5998  0039C2  6EDA               	movwf	fsr2h,c
  5999  0039C4  CFDE F021          	movff	postinc2,?_Tempeture_Get
  6000  0039C8  CFDE F022          	movff	postinc2,?_Tempeture_Get+1
  6001  0039CC  CFDD F023          	movff	postdec2,?_Tempeture_Get+2
  6002  0039D0  0012               	return	
  6003  0039D2                     __end_of_Tempeture_Get:
  6004                           	opt stack 0
  6005                           tosu	equ	0xFFF
  6006                           tosh	equ	0xFFE
  6007                           tosl	equ	0xFFD
  6008                           pclath	equ	0xFFA
  6009                           tblptru	equ	0xFF8
  6010                           tblptrh	equ	0xFF7
  6011                           tblptrl	equ	0xFF6
  6012                           tablat	equ	0xFF5
  6013                           prodh	equ	0xFF4
  6014                           prodl	equ	0xFF3
  6015                           intcon	equ	0xFF2
  6016                           postinc0	equ	0xFEE
  6017                           wreg	equ	0xFE8
  6018                           postdec1	equ	0xFE5
  6019                           fsr1l	equ	0xFE1
  6020                           indf2	equ	0xFDF
  6021                           postinc2	equ	0xFDE
  6022                           postdec2	equ	0xFDD
  6023                           fsr2h	equ	0xFDA
  6024                           fsr2l	equ	0xFD9
  6025                           status	equ	0xFD8
  6026                           
  6027 ;; *************** function _Delay *****************
  6028 ;; Defined at:
  6029 ;;		line 37 in file "Functions.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  d_lenth         4   26[COMRAM] long 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  wait            4   31[COMRAM] long 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;		None               void
  6036 ;; Registers used:
  6037 ;;		wreg, status,2, status,0
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6043 ;;      Params:         4       0       0       0       0       0       0
  6044 ;;      Locals:         4       0       0       0       0       0       0
  6045 ;;      Temps:          1       0       0       0       0       0       0
  6046 ;;      Totals:         9       0       0       0       0       0       0
  6047 ;;Total ram usage:        9 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    4
  6050 ;; This function calls:
  6051 ;;		Nothing
  6052 ;; This function is called by:
  6053 ;;		_updateComms
  6054 ;; This function uses a non-reentrant model
  6055 ;;
  6056                           
  6057                           	psect	text24
  6058  00379E                     __ptext24:
  6059                           	opt stack 0
  6060  00379E                     _Delay:
  6061                           	opt stack 25
  6062                           
  6063                           ;Functions.c: 39: long int wait = 0;
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;incstack = 0
  6067  00379E  0E00               	movlw	0
  6068  0037A0  6E20               	movwf	Delay@wait,c
  6069  0037A2  0E00               	movlw	0
  6070  0037A4  6E21               	movwf	Delay@wait+1,c
  6071  0037A6  0E00               	movlw	0
  6072  0037A8  6E22               	movwf	Delay@wait+2,c
  6073  0037AA  0E00               	movlw	0
  6074  0037AC  6E23               	movwf	Delay@wait+3,c
  6075  0037AE  D00D               	goto	l3543
  6076  0037B0                     l3539:
  6077                           
  6078                           ;Functions.c: 41: {
  6079                           ;Functions.c: 42: _delay((unsigned long)((1)*(8000000/4000.0)));
  6080  0037B0  0E03               	movlw	3
  6081  0037B2  6E1F               	movwf	??_Delay& (0+255),c
  6082  0037B4  0E98               	movlw	152
  6083  0037B6                     u6057:
  6084  0037B6  2EE8               	decfsz	wreg,f,c
  6085  0037B8  D7FE               	goto	u6057
  6086  0037BA  2E1F               	decfsz	??_Delay& (0+255),f,c
  6087  0037BC  D7FC               	goto	u6057
  6088  0037BE  0E01               	movlw	1
  6089  0037C0  2620               	addwf	Delay@wait,f,c
  6090  0037C2  0E00               	movlw	0
  6091  0037C4  2221               	addwfc	Delay@wait+1,f,c
  6092  0037C6  2222               	addwfc	Delay@wait+2,f,c
  6093  0037C8  2223               	addwfc	Delay@wait+3,f,c
  6094  0037CA                     l3543:
  6095  0037CA  5023               	movf	Delay@wait+3,w,c
  6096  0037CC  0A80               	xorlw	128
  6097  0037CE  6E1F               	movwf	??_Delay& (0+255),c
  6098  0037D0  501B               	movf	Delay@d_lenth,w,c
  6099  0037D2  5C20               	subwf	Delay@wait,w,c
  6100  0037D4  501C               	movf	Delay@d_lenth+1,w,c
  6101  0037D6  5821               	subwfb	Delay@wait+1,w,c
  6102  0037D8  501D               	movf	Delay@d_lenth+2,w,c
  6103  0037DA  5822               	subwfb	Delay@wait+2,w,c
  6104  0037DC  501E               	movf	Delay@d_lenth+3,w,c
  6105  0037DE  0A80               	xorlw	128
  6106  0037E0  581F               	subwfb	??_Delay& (0+255),w,c
  6107  0037E2  B0D8               	btfsc	status,0,c
  6108  0037E4  0012               	return	
  6109  0037E6  D7E4               	goto	l3539
  6110  0037E8                     __end_of_Delay:
  6111                           	opt stack 0
  6112                           tosu	equ	0xFFF
  6113                           tosh	equ	0xFFE
  6114                           tosl	equ	0xFFD
  6115                           pclath	equ	0xFFA
  6116                           tblptru	equ	0xFF8
  6117                           tblptrh	equ	0xFF7
  6118                           tblptrl	equ	0xFF6
  6119                           tablat	equ	0xFF5
  6120                           prodh	equ	0xFF4
  6121                           prodl	equ	0xFF3
  6122                           intcon	equ	0xFF2
  6123                           postinc0	equ	0xFEE
  6124                           wreg	equ	0xFE8
  6125                           postdec1	equ	0xFE5
  6126                           fsr1l	equ	0xFE1
  6127                           indf2	equ	0xFDF
  6128                           postinc2	equ	0xFDE
  6129                           postdec2	equ	0xFDD
  6130                           fsr2h	equ	0xFDA
  6131                           fsr2l	equ	0xFD9
  6132                           status	equ	0xFD8
  6133                           
  6134 ;; *************** function _Temp_Fault *****************
  6135 ;; Defined at:
  6136 ;;		line 16 in file "Tempeture.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;		None
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;  i               2   42[COMRAM] int 
  6141 ;;  fault           1   41[COMRAM] unsigned char 
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  1    wreg      unsigned char 
  6144 ;; Registers used:
  6145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6151 ;;      Params:         0       0       0       0       0       0       0
  6152 ;;      Locals:         3       0       0       0       0       0       0
  6153 ;;      Temps:          0       0       0       0       0       0       0
  6154 ;;      Totals:         3       0       0       0       0       0       0
  6155 ;;Total ram usage:        3 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    5
  6158 ;; This function calls:
  6159 ;;		___ftge
  6160 ;;		___wmul
  6161 ;; This function is called by:
  6162 ;;		_main
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text25
  6167  00362C                     __ptext25:
  6168                           	opt stack 0
  6169  00362C                     _Temp_Fault:
  6170                           	opt stack 25
  6171                           
  6172                           ;Tempeture.c: 18: char fault = 0;
  6173                           
  6174                           ;incstack = 0
  6175  00362C  0E00               	movlw	0
  6176  00362E  6E2A               	movwf	Temp_Fault@fault,c
  6177                           
  6178                           ;Tempeture.c: 19: for (int i = 0; i < 4; i++) {
  6179  003630  0E00               	movlw	0
  6180  003632  6E2C               	movwf	Temp_Fault@i+1,c
  6181  003634  0E00               	movlw	0
  6182  003636  6E2B               	movwf	Temp_Fault@i,c
  6183  003638  502C               	movf	Temp_Fault@i+1,w,c
  6184  00363A  0A80               	xorlw	128
  6185  00363C  0F80               	addlw	-128
  6186  00363E  0E04               	movlw	4
  6187  003640  B4D8               	btfsc	status,2,c
  6188  003642  5C2B               	subwf	Temp_Fault@i,w,c
  6189  003644  B0D8               	btfsc	status,0,c
  6190  003646  0012               	return	
  6191                           
  6192                           ;Tempeture.c: 20: if (60.5 > Temp_DegF[i]) {
  6193  003648  C02B  F01B         	movff	Temp_Fault@i,___wmul@multiplier
  6194  00364C  C02C  F01C         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  6195  003650  0E00               	movlw	0
  6196  003652  6E1E               	movwf	___wmul@multiplicand+1,c
  6197  003654  0E03               	movlw	3
  6198  003656  6E1D               	movwf	___wmul@multiplicand,c
  6199  003658  EC6E  F01D         	call	___wmul	;wreg free
  6200  00365C  0100               	movlb	0	; () banked
  6201  00365E  0EF4               	movlw	low _Temp_DegF
  6202  003660  241B               	addwf	?___wmul,w,c
  6203  003662  6ED9               	movwf	fsr2l,c
  6204  003664  0100               	movlb	0	; () banked
  6205  003666  0E00               	movlw	high _Temp_DegF
  6206  003668  201C               	addwfc	?___wmul+1,w,c
  6207  00366A  6EDA               	movwf	fsr2h,c
  6208  00366C  CFDE F021          	movff	postinc2,___ftge@ff1
  6209  003670  CFDE F022          	movff	postinc2,___ftge@ff1+1
  6210  003674  CFDD F023          	movff	postdec2,___ftge@ff1+2
  6211  003678  0E00               	movlw	0
  6212  00367A  6E24               	movwf	___ftge@ff2,c
  6213  00367C  0E72               	movlw	114
  6214  00367E  6E25               	movwf	___ftge@ff2+1,c
  6215  003680  0E42               	movlw	66
  6216  003682  6E26               	movwf	___ftge@ff2+2,c
  6217  003684  EC11  F01A         	call	___ftge	;wreg free
  6218  003688  B0D8               	btfsc	status,0,c
  6219  00368A  D002               	goto	l5221
  6220                           
  6221                           ;Tempeture.c: 21: fault = 1;
  6222  00368C  0E01               	movlw	1
  6223  00368E  6E2A               	movwf	Temp_Fault@fault,c
  6224  003690                     l5221:
  6225  003690  4A2B               	infsnz	Temp_Fault@i,f,c
  6226  003692  2A2C               	incf	Temp_Fault@i+1,f,c
  6227  003694  D7D1               	goto	L2
  6228  003696                     __end_of_Temp_Fault:
  6229                           	opt stack 0
  6230                           tosu	equ	0xFFF
  6231                           tosh	equ	0xFFE
  6232                           tosl	equ	0xFFD
  6233                           pclath	equ	0xFFA
  6234                           tblptru	equ	0xFF8
  6235                           tblptrh	equ	0xFF7
  6236                           tblptrl	equ	0xFF6
  6237                           tablat	equ	0xFF5
  6238                           prodh	equ	0xFF4
  6239                           prodl	equ	0xFF3
  6240                           intcon	equ	0xFF2
  6241                           postinc0	equ	0xFEE
  6242                           wreg	equ	0xFE8
  6243                           postdec1	equ	0xFE5
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function _Temp_Convert *****************
  6253 ;; Defined at:
  6254 ;;		line 61 in file "Tempeture.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;  steinhart       3   16[BANK1 ] float 
  6259 ;;  x               2   14[BANK1 ] int 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;		None               void
  6262 ;; Registers used:
  6263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6269 ;;      Params:         0       0       0       0       0       0       0
  6270 ;;      Locals:         0       0       9       0       0       0       0
  6271 ;;      Temps:          0       0       2       0       0       0       0
  6272 ;;      Totals:         0       0      11       0       0       0       0
  6273 ;;Total ram usage:       11 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    8
  6276 ;; This function calls:
  6277 ;;		_Temp_Filter
  6278 ;;		___awdiv
  6279 ;;		___awtoft
  6280 ;;		___ftadd
  6281 ;;		___ftdiv
  6282 ;;		___ftmul
  6283 ;;		___ftsub
  6284 ;;		___wmul
  6285 ;;		_log
  6286 ;; This function is called by:
  6287 ;;		_main
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text26
  6292  001872                     __ptext26:
  6293                           	opt stack 0
  6294  001872                     _Temp_Convert:
  6295                           	opt stack 22
  6296                           
  6297                           ;Tempeture.c: 62: int x;
  6298                           ;Tempeture.c: 63: float steinhart;
  6299                           ;Tempeture.c: 64: for (x = 0; x < 4; x++) {
  6300                           
  6301                           ;incstack = 0
  6302  001872  0E00               	movlw	0
  6303  001874  0101               	movlb	1	; () banked
  6304  001876  6F9D               	movwf	(Temp_Convert@x+1)& (0+255),b
  6305  001878  0E00               	movlw	0
  6306  00187A  0101               	movlb	1	; () banked
  6307  00187C  6F9C               	movwf	Temp_Convert@x& (0+255),b
  6308  00187E                     
  6309                           ; BSR set to: 1
  6310  00187E  0101               	movlb	1	; () banked
  6311  001880  519D               	movf	(Temp_Convert@x+1)& (0+255),w,b
  6312  001882  0A80               	xorlw	128
  6313  001884  0F80               	addlw	-128
  6314  001886  0E04               	movlw	4
  6315  001888  B4D8               	btfsc	status,2,c
  6316  00188A  5D9C               	subwf	Temp_Convert@x& (0+255),w,b
  6317  00188C  B0D8               	btfsc	status,0,c
  6318  00188E  D0F8               	goto	l5255
  6319                           
  6320                           ; BSR set to: 1
  6321                           ;Tempeture.c: 65: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6322                           
  6323                           ; BSR set to: 1
  6324                           
  6325                           ; BSR set to: 1
  6326  001890  0EB9               	movlw	low _Temp_Adc
  6327  001892  0101               	movlb	1	; () banked
  6328  001894  6F96               	movwf	??_Temp_Convert& (0+255),b
  6329  001896  0E00               	movlw	high _Temp_Adc
  6330  001898  6F97               	movwf	(??_Temp_Convert+1)& (0+255),b
  6331  00189A  90D8               	bcf	status,0,c
  6332  00189C  0101               	movlb	1	; () banked
  6333  00189E  359C               	rlcf	Temp_Convert@x& (0+255),w,b
  6334  0018A0  6ED9               	movwf	fsr2l,c
  6335  0018A2  0101               	movlb	1	; () banked
  6336  0018A4  359D               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  6337  0018A6  6EDA               	movwf	fsr2h,c
  6338  0018A8  0101               	movlb	1	; () banked
  6339  0018AA  5196               	movf	??_Temp_Convert& (0+255),w,b
  6340  0018AC  26D9               	addwf	fsr2l,f,c
  6341  0018AE  0101               	movlb	1	; () banked
  6342  0018B0  5197               	movf	(??_Temp_Convert+1)& (0+255),w,b
  6343  0018B2  22DA               	addwfc	fsr2h,f,c
  6344  0018B4  CFDE F01D          	movff	postinc2,___awdiv@divisor
  6345  0018B8  CFDD F01E          	movff	postdec2,___awdiv@divisor+1
  6346  0018BC  0E03               	movlw	3
  6347  0018BE  6E1C               	movwf	___awdiv@dividend+1,c
  6348  0018C0  681B               	setf	___awdiv@dividend,c
  6349  0018C2  ECE4  F018         	call	___awdiv	;wreg free
  6350  0018C6  0EFF               	movlw	255
  6351  0018C8  241B               	addwf	?___awdiv,w,c
  6352  0018CA  0101               	movlb	1	; () banked
  6353  0018CC  6F98               	movwf	_Temp_Convert$2202& (0+255),b
  6354  0018CE  0EFF               	movlw	255
  6355  0018D0  201C               	addwfc	?___awdiv+1,w,c
  6356  0018D2  0101               	movlb	1	; () banked
  6357  0018D4  6F99               	movwf	(_Temp_Convert$2202+1)& (0+255),b
  6358                           
  6359                           ; BSR set to: 1
  6360                           ;Tempeture.c: 65: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6361  0018D6  C198  F01D         	movff	_Temp_Convert$2202,___awdiv@divisor
  6362  0018DA  C199  F01E         	movff	_Temp_Convert$2202+1,___awdiv@divisor+1
  6363  0018DE  0E27               	movlw	39
  6364  0018E0  6E1C               	movwf	___awdiv@dividend+1,c
  6365  0018E2  0E10               	movlw	16
  6366  0018E4  6E1B               	movwf	___awdiv@dividend,c
  6367  0018E6  ECE4  F018         	call	___awdiv	;wreg free
  6368  0018EA  C01B  F19A         	movff	?___awdiv,_Temp_Convert$2203
  6369  0018EE  C01C  F19B         	movff	?___awdiv+1,_Temp_Convert$2203+1
  6370                           
  6371                           ;Tempeture.c: 65: steinhart = (10000 / ((1023 / Temp_Adc[x]) - 1)) / 10000;
  6372  0018F2  0E27               	movlw	39
  6373  0018F4  6E1E               	movwf	___awdiv@divisor+1,c
  6374  0018F6  0E10               	movlw	16
  6375  0018F8  6E1D               	movwf	___awdiv@divisor,c
  6376  0018FA  C19A  F01B         	movff	_Temp_Convert$2203,___awdiv@dividend
  6377  0018FE  C19B  F01C         	movff	_Temp_Convert$2203+1,___awdiv@dividend+1
  6378  001902  ECE4  F018         	call	___awdiv	;wreg free
  6379  001906  C01B  F023         	movff	?___awdiv,___awtoft@c
  6380  00190A  C01C  F024         	movff	?___awdiv+1,___awtoft@c+1
  6381  00190E  EC18  F01C         	call	___awtoft	;wreg free
  6382  001912  C023  F19E         	movff	?___awtoft,Temp_Convert@steinhart
  6383  001916  C024  F19F         	movff	?___awtoft+1,Temp_Convert@steinhart+1
  6384  00191A  C025  F1A0         	movff	?___awtoft+2,Temp_Convert@steinhart+2
  6385                           
  6386                           ;Tempeture.c: 66: steinhart = log(steinhart);
  6387  00191E  C19E  F191         	movff	Temp_Convert@steinhart,log@x
  6388  001922  C19F  F192         	movff	Temp_Convert@steinhart+1,log@x+1
  6389  001926  C1A0  F193         	movff	Temp_Convert@steinhart+2,log@x+2
  6390  00192A  EC38  F010         	call	_log	;wreg free
  6391  00192E  C191  F19E         	movff	?_log,Temp_Convert@steinhart
  6392  001932  C192  F19F         	movff	?_log+1,Temp_Convert@steinhart+1
  6393  001936  C193  F1A0         	movff	?_log+2,Temp_Convert@steinhart+2
  6394                           
  6395                           ;Tempeture.c: 67: steinhart /= 3950;
  6396  00193A  C19E  F0C1         	movff	Temp_Convert@steinhart,___ftdiv@f1
  6397  00193E  C19F  F0C2         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  6398  001942  C1A0  F0C3         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  6399  001946  0EE0               	movlw	224
  6400  001948  0100               	movlb	0	; () banked
  6401  00194A  6FC4               	movwf	___ftdiv@f2& (0+255),b
  6402  00194C  0E76               	movlw	118
  6403  00194E  0100               	movlb	0	; () banked
  6404  001950  6FC5               	movwf	(___ftdiv@f2+1)& (0+255),b
  6405  001952  0E45               	movlw	69
  6406  001954  0100               	movlb	0	; () banked
  6407  001956  6FC6               	movwf	(___ftdiv@f2+2)& (0+255),b
  6408  001958  EC56  F012         	call	___ftdiv	;wreg free
  6409  00195C  C0C1  F19E         	movff	?___ftdiv,Temp_Convert@steinhart
  6410  001960  C0C2  F19F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6411  001964  C0C3  F1A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6412                           
  6413                           ;Tempeture.c: 68: steinhart += 1.0 / (25 + 273.15);
  6414  001968  C19E  F0DF         	movff	Temp_Convert@steinhart,___ftadd@f1
  6415  00196C  C19F  F0E0         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  6416  001970  C1A0  F0E1         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  6417  001974  0ECF               	movlw	207
  6418  001976  0100               	movlb	0	; () banked
  6419  001978  6FE2               	movwf	___ftadd@f2& (0+255),b
  6420  00197A  0E5B               	movlw	91
  6421  00197C  0100               	movlb	0	; () banked
  6422  00197E  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6423  001980  0E3B               	movlw	59
  6424  001982  0100               	movlb	0	; () banked
  6425  001984  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6426  001986  ECF9  F00A         	call	___ftadd	;wreg free
  6427  00198A  C0DF  F19E         	movff	?___ftadd,Temp_Convert@steinhart
  6428  00198E  C0E0  F19F         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6429  001992  C0E1  F1A0         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6430                           
  6431                           ;Tempeture.c: 69: steinhart = 1.0 / steinhart;
  6432  001996  0E00               	movlw	0
  6433  001998  0100               	movlb	0	; () banked
  6434  00199A  6FC1               	movwf	___ftdiv@f1& (0+255),b
  6435  00199C  0E80               	movlw	128
  6436  00199E  0100               	movlb	0	; () banked
  6437  0019A0  6FC2               	movwf	(___ftdiv@f1+1)& (0+255),b
  6438  0019A2  0E3F               	movlw	63
  6439  0019A4  0100               	movlb	0	; () banked
  6440  0019A6  6FC3               	movwf	(___ftdiv@f1+2)& (0+255),b
  6441  0019A8  C19E  F0C4         	movff	Temp_Convert@steinhart,___ftdiv@f2
  6442  0019AC  C19F  F0C5         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  6443  0019B0  C1A0  F0C6         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  6444  0019B4  EC56  F012         	call	___ftdiv	;wreg free
  6445  0019B8  C0C1  F19E         	movff	?___ftdiv,Temp_Convert@steinhart
  6446  0019BC  C0C2  F19F         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  6447  0019C0  C0C3  F1A0         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  6448                           
  6449                           ;Tempeture.c: 70: steinhart -= 273.15;
  6450  0019C4  C19E  F0EB         	movff	Temp_Convert@steinhart,___ftsub@f1
  6451  0019C8  C19F  F0EC         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  6452  0019CC  C1A0  F0ED         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  6453  0019D0  0E93               	movlw	147
  6454  0019D2  0100               	movlb	0	; () banked
  6455  0019D4  6FEE               	movwf	___ftsub@f2& (0+255),b
  6456  0019D6  0E88               	movlw	136
  6457  0019D8  0100               	movlb	0	; () banked
  6458  0019DA  6FEF               	movwf	(___ftsub@f2+1)& (0+255),b
  6459  0019DC  0E43               	movlw	67
  6460  0019DE  0100               	movlb	0	; () banked
  6461  0019E0  6FF0               	movwf	(___ftsub@f2+2)& (0+255),b
  6462  0019E2  EC5E  F01C         	call	___ftsub	;wreg free
  6463  0019E6  C0EB  F19E         	movff	?___ftsub,Temp_Convert@steinhart
  6464  0019EA  C0EC  F19F         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  6465  0019EE  C0ED  F1A0         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  6466                           
  6467                           ;Tempeture.c: 71: steinhart = (steinhart * 1.800) + 32.00;
  6468  0019F2  0E66               	movlw	102
  6469  0019F4  0100               	movlb	0	; () banked
  6470  0019F6  6FD3               	movwf	___ftmul@f2& (0+255),b
  6471  0019F8  0EE6               	movlw	230
  6472  0019FA  0100               	movlb	0	; () banked
  6473  0019FC  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6474  0019FE  0E3F               	movlw	63
  6475  001A00  0100               	movlb	0	; () banked
  6476  001A02  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6477  001A04  C19E  F0D0         	movff	Temp_Convert@steinhart,___ftmul@f1
  6478  001A08  C19F  F0D1         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  6479  001A0C  C1A0  F0D2         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  6480  001A10  ECC5  F00E         	call	___ftmul	;wreg free
  6481  001A14  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6482  001A18  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6483  001A1C  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6484  001A20  0E00               	movlw	0
  6485  001A22  0100               	movlb	0	; () banked
  6486  001A24  6FE2               	movwf	___ftadd@f2& (0+255),b
  6487  001A26  0E00               	movlw	0
  6488  001A28  0100               	movlb	0	; () banked
  6489  001A2A  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6490  001A2C  0E42               	movlw	66
  6491  001A2E  0100               	movlb	0	; () banked
  6492  001A30  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6493  001A32  ECF9  F00A         	call	___ftadd	;wreg free
  6494  001A36  C0DF  F19E         	movff	?___ftadd,Temp_Convert@steinhart
  6495  001A3A  C0E0  F19F         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  6496  001A3E  C0E1  F1A0         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  6497                           
  6498                           ;Tempeture.c: 72: TmpTemp_DegF[x] = steinhart;
  6499  001A42  C19C  F01B         	movff	Temp_Convert@x,___wmul@multiplier
  6500  001A46  C19D  F01C         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  6501  001A4A  0E00               	movlw	0
  6502  001A4C  6E1E               	movwf	___wmul@multiplicand+1,c
  6503  001A4E  0E03               	movlw	3
  6504  001A50  6E1D               	movwf	___wmul@multiplicand,c
  6505  001A52  EC6E  F01D         	call	___wmul	;wreg free
  6506  001A56  0100               	movlb	0	; () banked
  6507  001A58  0EAD               	movlw	low _TmpTemp_DegF
  6508  001A5A  241B               	addwf	?___wmul,w,c
  6509  001A5C  6ED9               	movwf	fsr2l,c
  6510  001A5E  0100               	movlb	0	; () banked
  6511  001A60  0E00               	movlw	high _TmpTemp_DegF
  6512  001A62  201C               	addwfc	?___wmul+1,w,c
  6513  001A64  6EDA               	movwf	fsr2h,c
  6514  001A66  0101               	movlb	1	; () banked
  6515  001A68  C19E  FFDE         	movff	Temp_Convert@steinhart,postinc2
  6516  001A6C  0101               	movlb	1	; () banked
  6517  001A6E  C19F  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  6518  001A72  0101               	movlb	1	; () banked
  6519  001A74  C1A0  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  6520                           
  6521                           ; BSR set to: 1
  6522  001A78  0101               	movlb	1	; () banked
  6523  001A7A  4B9C               	infsnz	Temp_Convert@x& (0+255),f,b
  6524  001A7C  2B9D               	incf	(Temp_Convert@x+1)& (0+255),f,b
  6525  001A7E  D6FF               	goto	L3
  6526  001A80                     l5255:
  6527                           
  6528                           ; BSR set to: 1
  6529                           ;Tempeture.c: 73: }
  6530                           ;Tempeture.c: 74: Temp_Filter();
  6531  001A80  EC43  F00D         	call	_Temp_Filter	;wreg free
  6532  001A84  0012               	return	
  6533  001A86                     __end_of_Temp_Convert:
  6534                           	opt stack 0
  6535                           tosu	equ	0xFFF
  6536                           tosh	equ	0xFFE
  6537                           tosl	equ	0xFFD
  6538                           pclath	equ	0xFFA
  6539                           tblptru	equ	0xFF8
  6540                           tblptrh	equ	0xFF7
  6541                           tblptrl	equ	0xFF6
  6542                           tablat	equ	0xFF5
  6543                           prodh	equ	0xFF4
  6544                           prodl	equ	0xFF3
  6545                           intcon	equ	0xFF2
  6546                           postinc0	equ	0xFEE
  6547                           wreg	equ	0xFE8
  6548                           postdec1	equ	0xFE5
  6549                           fsr1l	equ	0xFE1
  6550                           indf2	equ	0xFDF
  6551                           postinc2	equ	0xFDE
  6552                           postdec2	equ	0xFDD
  6553                           fsr2h	equ	0xFDA
  6554                           fsr2l	equ	0xFD9
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function _log *****************
  6558 ;; Defined at:
  6559 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  x               3    3[BANK1 ] int 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  exponent        2    6[BANK1 ] int 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  3    3[BANK1 ] int 
  6566 ;; Registers used:
  6567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6573 ;;      Params:         0       0       3       0       0       0       0
  6574 ;;      Locals:         0       0       2       0       0       0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0
  6576 ;;      Totals:         0       0       5       0       0       0       0
  6577 ;;Total ram usage:        5 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    7
  6580 ;; This function calls:
  6581 ;;		___awtoft
  6582 ;;		___ftadd
  6583 ;;		___ftmul
  6584 ;;		_eval_poly
  6585 ;;		_frexp
  6586 ;; This function is called by:
  6587 ;;		_Temp_Convert
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text27
  6592  002070                     __ptext27:
  6593                           	opt stack 0
  6594  002070                     _log:
  6595                           	opt stack 22
  6596                           
  6597                           ;incstack = 0
  6598  002070  0101               	movlb	1	; () banked
  6599  002072  5193               	movf	(log@x+2)& (0+255),w,b
  6600  002074  0A80               	xorlw	128
  6601  002076  0F80               	addlw	128
  6602  002078  E107               	bnz	u5045
  6603  00207A  0E00               	movlw	0
  6604  00207C  0101               	movlb	1	; () banked
  6605  00207E  5D92               	subwf	(log@x+1)& (0+255),w,b
  6606  002080  E103               	bnz	u5045
  6607  002082  0E00               	movlw	0
  6608  002084  0101               	movlb	1	; () banked
  6609  002086  5D91               	subwf	log@x& (0+255),w,b
  6610  002088                     u5045:
  6611  002088  B0D8               	btfsc	status,0,c
  6612  00208A  D010               	goto	l4839
  6613                           
  6614                           ; BSR set to: 1
  6615  00208C  0E00               	movlw	0
  6616  00208E  0100               	movlb	0	; () banked
  6617  002090  6F95               	movwf	(_errno+1)& (0+255),b
  6618  002092  0E21               	movlw	33
  6619  002094  0100               	movlb	0	; () banked
  6620  002096  6F94               	movwf	_errno& (0+255),b
  6621  002098  0E00               	movlw	0
  6622  00209A  0101               	movlb	1	; () banked
  6623  00209C  6F91               	movwf	?_log& (0+255),b
  6624  00209E  0E00               	movlw	0
  6625  0020A0  0101               	movlb	1	; () banked
  6626  0020A2  6F92               	movwf	(?_log+1)& (0+255),b
  6627  0020A4  0E00               	movlw	0
  6628  0020A6  0101               	movlb	1	; () banked
  6629  0020A8  6F93               	movwf	(?_log+2)& (0+255),b
  6630  0020AA  0012               	return	
  6631  0020AC                     l4839:
  6632                           
  6633                           ; BSR set to: 1
  6634  0020AC  0E7F               	movlw	127
  6635  0020AE  0101               	movlb	1	; () banked
  6636  0020B0  1593               	andwf	(log@x+2)& (0+255),w,b
  6637  0020B2  0101               	movlb	1	; () banked
  6638  0020B4  1192               	iorwf	(log@x+1)& (0+255),w,b
  6639  0020B6  0101               	movlb	1	; () banked
  6640  0020B8  1191               	iorwf	log@x& (0+255),w,b
  6641  0020BA  A4D8               	btfss	status,2,c
  6642  0020BC  D010               	goto	l4845
  6643                           
  6644                           ; BSR set to: 1
  6645  0020BE  0E00               	movlw	0
  6646  0020C0  0100               	movlb	0	; () banked
  6647  0020C2  6F95               	movwf	(_errno+1)& (0+255),b
  6648  0020C4  0E22               	movlw	34
  6649  0020C6  0100               	movlb	0	; () banked
  6650  0020C8  6F94               	movwf	_errno& (0+255),b
  6651  0020CA  0E00               	movlw	0
  6652  0020CC  0101               	movlb	1	; () banked
  6653  0020CE  6F91               	movwf	?_log& (0+255),b
  6654  0020D0  0E00               	movlw	0
  6655  0020D2  0101               	movlb	1	; () banked
  6656  0020D4  6F92               	movwf	(?_log+1)& (0+255),b
  6657  0020D6  0E00               	movlw	0
  6658  0020D8  0101               	movlb	1	; () banked
  6659  0020DA  6F93               	movwf	(?_log+2)& (0+255),b
  6660  0020DC  0012               	return	
  6661  0020DE                     l4845:
  6662                           
  6663                           ; BSR set to: 1
  6664  0020DE  0E00               	movlw	0
  6665  0020E0  0100               	movlb	0	; () banked
  6666  0020E2  6FD3               	movwf	___ftmul@f2& (0+255),b
  6667  0020E4  0E00               	movlw	0
  6668  0020E6  0100               	movlb	0	; () banked
  6669  0020E8  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6670  0020EA  0E40               	movlw	64
  6671  0020EC  0100               	movlb	0	; () banked
  6672  0020EE  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6673  0020F0  0101               	movlb	1	; () banked
  6674  0020F2  0E01               	movlw	high log@exponent
  6675  0020F4  6E1F               	movwf	frexp@eptr+1,c
  6676  0020F6  0101               	movlb	1	; () banked
  6677  0020F8  0E94               	movlw	low log@exponent
  6678  0020FA  6E1E               	movwf	frexp@eptr,c
  6679  0020FC  C191  F01B         	movff	log@x,frexp@value
  6680  002100  C192  F01C         	movff	log@x+1,frexp@value+1
  6681  002104  C193  F01D         	movff	log@x+2,frexp@value+2
  6682  002108  EC7F  F019         	call	_frexp	;wreg free
  6683  00210C  C01B  F0D0         	movff	?_frexp,___ftmul@f1
  6684  002110  C01C  F0D1         	movff	?_frexp+1,___ftmul@f1+1
  6685  002114  C01D  F0D2         	movff	?_frexp+2,___ftmul@f1+2
  6686  002118  ECC5  F00E         	call	___ftmul	;wreg free
  6687  00211C  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6688  002120  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6689  002124  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6690  002128  0E00               	movlw	0
  6691  00212A  0100               	movlb	0	; () banked
  6692  00212C  6FE2               	movwf	___ftadd@f2& (0+255),b
  6693  00212E  0E80               	movlw	128
  6694  002130  0100               	movlb	0	; () banked
  6695  002132  6FE3               	movwf	(___ftadd@f2+1)& (0+255),b
  6696  002134  0EBF               	movlw	191
  6697  002136  0100               	movlb	0	; () banked
  6698  002138  6FE4               	movwf	(___ftadd@f2+2)& (0+255),b
  6699  00213A  ECF9  F00A         	call	___ftadd	;wreg free
  6700  00213E  C0DF  F191         	movff	?___ftadd,log@x
  6701  002142  C0E0  F192         	movff	?___ftadd+1,log@x+1
  6702  002146  C0E1  F193         	movff	?___ftadd+2,log@x+2
  6703  00214A  0101               	movlb	1	; () banked
  6704  00214C  0794               	decf	log@exponent& (0+255),f,b
  6705  00214E  A0D8               	btfss	status,0,c
  6706  002150  0795               	decf	(log@exponent+1)& (0+255),f,b
  6707                           
  6708                           ; BSR set to: 1
  6709  002152  C191  F0EB         	movff	log@x,eval_poly@x
  6710  002156  C192  F0EC         	movff	log@x+1,eval_poly@x+1
  6711  00215A  C193  F0ED         	movff	log@x+2,eval_poly@x+2
  6712  00215E  0E06               	movlw	high log@coeff
  6713  002160  0100               	movlb	0	; () banked
  6714  002162  6FEF               	movwf	(eval_poly@d+1)& (0+255),b
  6715  002164  0E01               	movlw	low log@coeff
  6716  002166  0100               	movlb	0	; () banked
  6717  002168  6FEE               	movwf	eval_poly@d& (0+255),b
  6718  00216A  0E00               	movlw	0
  6719  00216C  0100               	movlb	0	; () banked
  6720  00216E  6FF1               	movwf	(eval_poly@n+1)& (0+255),b
  6721  002170  0E08               	movlw	8
  6722  002172  0100               	movlb	0	; () banked
  6723  002174  6FF0               	movwf	eval_poly@n& (0+255),b
  6724  002176  ECC2  F014         	call	_eval_poly	;wreg free
  6725  00217A  C0EB  F191         	movff	?_eval_poly,log@x
  6726  00217E  C0EC  F192         	movff	?_eval_poly+1,log@x+1
  6727  002182  C0ED  F193         	movff	?_eval_poly+2,log@x+2
  6728  002186  0E72               	movlw	114
  6729  002188  0100               	movlb	0	; () banked
  6730  00218A  6FD3               	movwf	___ftmul@f2& (0+255),b
  6731  00218C  0E31               	movlw	49
  6732  00218E  0100               	movlb	0	; () banked
  6733  002190  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  6734  002192  0E3F               	movlw	63
  6735  002194  0100               	movlb	0	; () banked
  6736  002196  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  6737  002198  C194  F023         	movff	log@exponent,___awtoft@c
  6738  00219C  C195  F024         	movff	log@exponent+1,___awtoft@c+1
  6739  0021A0  EC18  F01C         	call	___awtoft	;wreg free
  6740  0021A4  C023  F0D0         	movff	?___awtoft,___ftmul@f1
  6741  0021A8  C024  F0D1         	movff	?___awtoft+1,___ftmul@f1+1
  6742  0021AC  C025  F0D2         	movff	?___awtoft+2,___ftmul@f1+2
  6743  0021B0  ECC5  F00E         	call	___ftmul	;wreg free
  6744  0021B4  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6745  0021B8  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6746  0021BC  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6747  0021C0  C191  F0E2         	movff	log@x,___ftadd@f2
  6748  0021C4  C192  F0E3         	movff	log@x+1,___ftadd@f2+1
  6749  0021C8  C193  F0E4         	movff	log@x+2,___ftadd@f2+2
  6750  0021CC  ECF9  F00A         	call	___ftadd	;wreg free
  6751  0021D0  C0DF  F191         	movff	?___ftadd,?_log
  6752  0021D4  C0E0  F192         	movff	?___ftadd+1,?_log+1
  6753  0021D8  C0E1  F193         	movff	?___ftadd+2,?_log+2
  6754  0021DC  0012               	return	
  6755  0021DE                     __end_of_log:
  6756                           	opt stack 0
  6757                           tosu	equ	0xFFF
  6758                           tosh	equ	0xFFE
  6759                           tosl	equ	0xFFD
  6760                           pclath	equ	0xFFA
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           intcon	equ	0xFF2
  6768                           postinc0	equ	0xFEE
  6769                           wreg	equ	0xFE8
  6770                           postdec1	equ	0xFE5
  6771                           fsr1l	equ	0xFE1
  6772                           indf2	equ	0xFDF
  6773                           postinc2	equ	0xFDE
  6774                           postdec2	equ	0xFDD
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _frexp *****************
  6780 ;; Defined at:
  6781 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  value           3   26[COMRAM] int 
  6784 ;;  eptr            2   29[COMRAM] PTR int 
  6785 ;;		 -> log@exponent(2), 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  3   26[COMRAM] PTR int 
  6790 ;; Registers used:
  6791 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6797 ;;      Params:         5       0       0       0       0       0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0
  6799 ;;      Temps:          2       0       0       0       0       0       0
  6800 ;;      Totals:         7       0       0       0       0       0       0
  6801 ;;Total ram usage:        7 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    4
  6804 ;; This function calls:
  6805 ;;		Nothing
  6806 ;; This function is called by:
  6807 ;;		_log
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           	psect	text28
  6812  0032FE                     __ptext28:
  6813                           	opt stack 0
  6814  0032FE                     _frexp:
  6815                           	opt stack 24
  6816                           
  6817                           ;incstack = 0
  6818  0032FE  0E7F               	movlw	127
  6819  003300  141D               	andwf	frexp@value+2,w,c
  6820  003302  101C               	iorwf	frexp@value+1,w,c
  6821  003304  101B               	iorwf	frexp@value,w,c
  6822  003306  A4D8               	btfss	status,2,c
  6823  003308  D00F               	goto	l4763
  6824  00330A  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6825  00330E  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6826  003312  0E00               	movlw	0
  6827  003314  6EDE               	movwf	postinc2,c
  6828  003316  0E00               	movlw	0
  6829  003318  6EDD               	movwf	postdec2,c
  6830  00331A  0E00               	movlw	0
  6831  00331C  6E1B               	movwf	?_frexp,c
  6832  00331E  0E00               	movlw	0
  6833  003320  6E1C               	movwf	?_frexp+1,c
  6834  003322  0E00               	movlw	0
  6835  003324  6E1D               	movwf	?_frexp+2,c
  6836  003326  0012               	return	
  6837  003328                     l4763:
  6838  003328  501D               	movf	frexp@value+2,w,c
  6839  00332A  0B7F               	andlw	127
  6840  00332C  6E20               	movwf	??_frexp& (0+255),c
  6841  00332E  6A21               	clrf	(??_frexp+1)& (0+255),c
  6842  003330  90D8               	bcf	status,0,c
  6843  003332  3620               	rlcf	??_frexp,f,c
  6844  003334  3621               	rlcf	??_frexp+1,f,c
  6845  003336  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6846  00333A  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6847  00333E  C020  FFDE         	movff	??_frexp,postinc2
  6848  003342  C021  FFDD         	movff	??_frexp+1,postdec2
  6849  003346  AE1C               	btfss	frexp@value+1,7,c
  6850  003348  D003               	goto	u4960
  6851  00334A  6A20               	clrf	??_frexp& (0+255),c
  6852  00334C  2A20               	incf	??_frexp& (0+255),f,c
  6853  00334E  D001               	goto	u4968
  6854  003350                     u4960:
  6855  003350  6A20               	clrf	??_frexp& (0+255),c
  6856  003352                     u4968:
  6857  003352  5020               	movf	??_frexp,w,c
  6858  003354  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6859  003358  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6860  00335C  12DE               	iorwf	postinc2,f,c
  6861  00335E  0E00               	movlw	0
  6862  003360  12DD               	iorwf	postdec2,f,c
  6863  003362  C01E  FFD9         	movff	frexp@eptr,fsr2l
  6864  003366  C01F  FFDA         	movff	frexp@eptr+1,fsr2h
  6865  00336A  0E82               	movlw	130
  6866  00336C  26DE               	addwf	postinc2,f,c
  6867  00336E  0EFF               	movlw	255
  6868  003370  22DD               	addwfc	postdec2,f,c
  6869  003372  801D               	bsf	frexp@value+2,0,c
  6870  003374  821D               	bsf	frexp@value+2,1,c
  6871  003376  841D               	bsf	frexp@value+2,2,c
  6872  003378  861D               	bsf	frexp@value+2,3,c
  6873  00337A  881D               	bsf	frexp@value+2,4,c
  6874  00337C  8A1D               	bsf	frexp@value+2,5,c
  6875  00337E  9C1D               	bcf	frexp@value+2,6,c
  6876  003380  9E1C               	bcf	frexp@value+1,7,c
  6877  003382  C01B  F01B         	movff	frexp@value,?_frexp
  6878  003386  C01C  F01C         	movff	frexp@value+1,?_frexp+1
  6879  00338A  C01D  F01D         	movff	frexp@value+2,?_frexp+2
  6880  00338E  0012               	return	
  6881  003390                     __end_of_frexp:
  6882                           	opt stack 0
  6883                           tosu	equ	0xFFF
  6884                           tosh	equ	0xFFE
  6885                           tosl	equ	0xFFD
  6886                           pclath	equ	0xFFA
  6887                           tblptru	equ	0xFF8
  6888                           tblptrh	equ	0xFF7
  6889                           tblptrl	equ	0xFF6
  6890                           tablat	equ	0xFF5
  6891                           prodh	equ	0xFF4
  6892                           prodl	equ	0xFF3
  6893                           intcon	equ	0xFF2
  6894                           postinc0	equ	0xFEE
  6895                           wreg	equ	0xFE8
  6896                           postdec1	equ	0xFE5
  6897                           fsr1l	equ	0xFE1
  6898                           indf2	equ	0xFDF
  6899                           postinc2	equ	0xFDE
  6900                           postdec2	equ	0xFDD
  6901                           fsr2h	equ	0xFDA
  6902                           fsr2l	equ	0xFD9
  6903                           status	equ	0xFD8
  6904                           
  6905 ;; *************** function _eval_poly *****************
  6906 ;; Defined at:
  6907 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;  x               3   42[BANK0 ] PTR int 
  6910 ;;  d               2   45[BANK0 ] PTR const 
  6911 ;;		 -> log@coeff(27), 
  6912 ;;  n               2   47[BANK0 ] int 
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;  res             3    0[BANK1 ] int 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  3   42[BANK0 ] int 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6924 ;;      Params:         0       7       0       0       0       0       0
  6925 ;;      Locals:         0       0       3       0       0       0       0
  6926 ;;      Temps:          0       2       0       0       0       0       0
  6927 ;;      Totals:         0       9       3       0       0       0       0
  6928 ;;Total ram usage:       12 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    6
  6931 ;; This function calls:
  6932 ;;		___ftadd
  6933 ;;		___ftmul
  6934 ;;		___wmul
  6935 ;; This function is called by:
  6936 ;;		_log
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text29
  6941  002984                     __ptext29:
  6942                           	opt stack 0
  6943  002984                     _eval_poly:
  6944                           	opt stack 22
  6945                           
  6946                           ;incstack = 0
  6947  002984  C0F0  F01B         	movff	eval_poly@n,___wmul@multiplier
  6948  002988  C0F1  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  6949  00298C  0E00               	movlw	0
  6950  00298E  6E1E               	movwf	___wmul@multiplicand+1,c
  6951  002990  0E03               	movlw	3
  6952  002992  6E1D               	movwf	___wmul@multiplicand,c
  6953  002994  EC6E  F01D         	call	___wmul	;wreg free
  6954  002998  0100               	movlb	0	; () banked
  6955  00299A  C0EE  F0F2         	movff	eval_poly@d,??_eval_poly
  6956  00299E  0100               	movlb	0	; () banked
  6957  0029A0  C0EF  F0F3         	movff	eval_poly@d+1,??_eval_poly+1
  6958  0029A4  501B               	movf	?___wmul,w,c
  6959  0029A6  0100               	movlb	0	; () banked
  6960  0029A8  27F2               	addwf	??_eval_poly& (0+255),f,b
  6961  0029AA  501C               	movf	?___wmul+1,w,c
  6962  0029AC  0100               	movlb	0	; () banked
  6963  0029AE  23F3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6964  0029B0  C0F2  FFF6         	movff	??_eval_poly,tblptrl
  6965  0029B4  C0F3  FFF7         	movff	??_eval_poly+1,tblptrh
  6966  0029B8                     	if	0	;tblptru may be non-zero
  6967  0029B8                     	endif
  6968  0029B8                     	if	0	;tblptru may be non-zero
  6969  0029B8                     	endif
  6970  0029B8  0009               	tblrd		*+
  6971  0029BA  0101               	movlb	1	; () banked
  6972  0029BC  CFF5 F18E          	movff	tablat,eval_poly@res
  6973  0029C0  0009               	tblrd		*+
  6974  0029C2  0101               	movlb	1	; () banked
  6975  0029C4  CFF5 F18F          	movff	tablat,eval_poly@res+1
  6976  0029C8  000A               	tblrd		*-
  6977  0029CA  0101               	movlb	1	; () banked
  6978  0029CC  CFF5 F190          	movff	tablat,eval_poly@res+2
  6979  0029D0  D046               	goto	l4779
  6980  0029D2                     l4777:
  6981  0029D2  C18E  F0D3         	movff	eval_poly@res,___ftmul@f2
  6982  0029D6  C18F  F0D4         	movff	eval_poly@res+1,___ftmul@f2+1
  6983  0029DA  C190  F0D5         	movff	eval_poly@res+2,___ftmul@f2+2
  6984  0029DE  C0EB  F0D0         	movff	eval_poly@x,___ftmul@f1
  6985  0029E2  C0EC  F0D1         	movff	eval_poly@x+1,___ftmul@f1+1
  6986  0029E6  C0ED  F0D2         	movff	eval_poly@x+2,___ftmul@f1+2
  6987  0029EA  ECC5  F00E         	call	___ftmul	;wreg free
  6988  0029EE  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  6989  0029F2  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  6990  0029F6  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  6991  0029FA  0E00               	movlw	0
  6992  0029FC  6E1E               	movwf	___wmul@multiplicand+1,c
  6993  0029FE  0E03               	movlw	3
  6994  002A00  6E1D               	movwf	___wmul@multiplicand,c
  6995  002A02  0100               	movlb	0	; () banked
  6996  002A04  07F0               	decf	eval_poly@n& (0+255),f,b
  6997  002A06  A0D8               	btfss	status,0,c
  6998  002A08  07F1               	decf	(eval_poly@n+1)& (0+255),f,b
  6999  002A0A  C0F0  F01B         	movff	eval_poly@n,___wmul@multiplier
  7000  002A0E  C0F1  F01C         	movff	eval_poly@n+1,___wmul@multiplier+1
  7001  002A12  EC6E  F01D         	call	___wmul	;wreg free
  7002  002A16  0100               	movlb	0	; () banked
  7003  002A18  C0EE  F0F2         	movff	eval_poly@d,??_eval_poly
  7004  002A1C  0100               	movlb	0	; () banked
  7005  002A1E  C0EF  F0F3         	movff	eval_poly@d+1,??_eval_poly+1
  7006  002A22  501B               	movf	?___wmul,w,c
  7007  002A24  0100               	movlb	0	; () banked
  7008  002A26  27F2               	addwf	??_eval_poly& (0+255),f,b
  7009  002A28  501C               	movf	?___wmul+1,w,c
  7010  002A2A  0100               	movlb	0	; () banked
  7011  002A2C  23F3               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7012  002A2E  C0F2  FFF6         	movff	??_eval_poly,tblptrl
  7013  002A32  C0F3  FFF7         	movff	??_eval_poly+1,tblptrh
  7014  002A36                     	if	0	;tblptru may be non-zero
  7015  002A36                     	endif
  7016  002A36                     	if	0	;tblptru may be non-zero
  7017  002A36                     	endif
  7018  002A36  0009               	tblrd		*+
  7019  002A38  0100               	movlb	0	; () banked
  7020  002A3A  CFF5 F0E2          	movff	tablat,___ftadd@f2
  7021  002A3E  0009               	tblrd		*+
  7022  002A40  0100               	movlb	0	; () banked
  7023  002A42  CFF5 F0E3          	movff	tablat,___ftadd@f2+1
  7024  002A46  000A               	tblrd		*-
  7025  002A48  0100               	movlb	0	; () banked
  7026  002A4A  CFF5 F0E4          	movff	tablat,___ftadd@f2+2
  7027  002A4E  ECF9  F00A         	call	___ftadd	;wreg free
  7028  002A52  C0DF  F18E         	movff	?___ftadd,eval_poly@res
  7029  002A56  C0E0  F18F         	movff	?___ftadd+1,eval_poly@res+1
  7030  002A5A  C0E1  F190         	movff	?___ftadd+2,eval_poly@res+2
  7031  002A5E                     l4779:
  7032  002A5E  0100               	movlb	0	; () banked
  7033  002A60  51F1               	movf	(eval_poly@n+1)& (0+255),w,b
  7034  002A62  11F0               	iorwf	eval_poly@n& (0+255),w,b
  7035  002A64  A4D8               	btfss	status,2,c
  7036  002A66  D7B5               	goto	l4777
  7037                           
  7038                           ; BSR set to: 0
  7039  002A68  C18E  F0EB         	movff	eval_poly@res,?_eval_poly
  7040  002A6C  C18F  F0EC         	movff	eval_poly@res+1,?_eval_poly+1
  7041  002A70  C190  F0ED         	movff	eval_poly@res+2,?_eval_poly+2
  7042                           
  7043                           ; BSR set to: 0
  7044  002A74  0012               	return	
  7045  002A76                     __end_of_eval_poly:
  7046                           	opt stack 0
  7047                           tosu	equ	0xFFF
  7048                           tosh	equ	0xFFE
  7049                           tosl	equ	0xFFD
  7050                           pclath	equ	0xFFA
  7051                           tblptru	equ	0xFF8
  7052                           tblptrh	equ	0xFF7
  7053                           tblptrl	equ	0xFF6
  7054                           tablat	equ	0xFF5
  7055                           prodh	equ	0xFF4
  7056                           prodl	equ	0xFF3
  7057                           intcon	equ	0xFF2
  7058                           postinc0	equ	0xFEE
  7059                           wreg	equ	0xFE8
  7060                           postdec1	equ	0xFE5
  7061                           fsr1l	equ	0xFE1
  7062                           indf2	equ	0xFDF
  7063                           postinc2	equ	0xFDE
  7064                           postdec2	equ	0xFDD
  7065                           fsr2h	equ	0xFDA
  7066                           fsr2l	equ	0xFD9
  7067                           status	equ	0xFD8
  7068                           
  7069 ;; *************** function ___awtoft *****************
  7070 ;; Defined at:
  7071 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;  c               2   34[COMRAM] int 
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;  sign            1   37[COMRAM] unsigned char 
  7076 ;; Return value:  Size  Location     Type
  7077 ;;                  3   34[COMRAM] float 
  7078 ;; Registers used:
  7079 ;;		wreg, status,2, status,0, prodl, cstack
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7085 ;;      Params:         3       0       0       0       0       0       0
  7086 ;;      Locals:         1       0       0       0       0       0       0
  7087 ;;      Temps:          0       0       0       0       0       0       0
  7088 ;;      Totals:         4       0       0       0       0       0       0
  7089 ;;Total ram usage:        4 bytes
  7090 ;; Hardware stack levels used:    1
  7091 ;; Hardware stack levels required when called:    5
  7092 ;; This function calls:
  7093 ;;		___ftpack
  7094 ;; This function is called by:
  7095 ;;		_Temp_Convert
  7096 ;;		_log
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text30
  7101  003830                     __ptext30:
  7102                           	opt stack 0
  7103  003830                     ___awtoft:
  7104                           	opt stack 23
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;incstack = 0
  7108  003830  0E00               	movlw	0
  7109  003832  6E26               	movwf	___awtoft@sign,c
  7110  003834  5024               	movf	___awtoft@c+1,w,c
  7111  003836  0A80               	xorlw	128
  7112  003838  6EF3               	movwf	prodl,c
  7113  00383A  0E80               	movlw	128
  7114  00383C  5CF3               	subwf	prodl,w,c
  7115  00383E  0E00               	movlw	0
  7116  003840  B4D8               	btfsc	status,2,c
  7117  003842  5C23               	subwf	___awtoft@c,w,c
  7118  003844  B0D8               	btfsc	status,0,c
  7119  003846  D006               	goto	l4751
  7120  003848  6C23               	negf	___awtoft@c,c
  7121  00384A  1E24               	comf	___awtoft@c+1,f,c
  7122  00384C  B0D8               	btfsc	status,0,c
  7123  00384E  2A24               	incf	___awtoft@c+1,f,c
  7124  003850  0E01               	movlw	1
  7125  003852  6E26               	movwf	___awtoft@sign,c
  7126  003854                     l4751:
  7127  003854  C023  F01B         	movff	___awtoft@c,___ftpack@arg
  7128  003858  C024  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
  7129  00385C  6A1D               	clrf	___ftpack@arg+2,c
  7130  00385E  0E8E               	movlw	142
  7131  003860  6E1E               	movwf	___ftpack@exp,c
  7132  003862  C026  F01F         	movff	___awtoft@sign,___ftpack@sign
  7133  003866  EC90  F018         	call	___ftpack	;wreg free
  7134  00386A  C01B  F023         	movff	?___ftpack,?___awtoft
  7135  00386E  C01C  F024         	movff	?___ftpack+1,?___awtoft+1
  7136  003872  C01D  F025         	movff	?___ftpack+2,?___awtoft+2
  7137  003876  0012               	return	
  7138  003878                     __end_of___awtoft:
  7139                           	opt stack 0
  7140                           tosu	equ	0xFFF
  7141                           tosh	equ	0xFFE
  7142                           tosl	equ	0xFFD
  7143                           pclath	equ	0xFFA
  7144                           tblptru	equ	0xFF8
  7145                           tblptrh	equ	0xFF7
  7146                           tblptrl	equ	0xFF6
  7147                           tablat	equ	0xFF5
  7148                           prodh	equ	0xFF4
  7149                           prodl	equ	0xFF3
  7150                           intcon	equ	0xFF2
  7151                           postinc0	equ	0xFEE
  7152                           wreg	equ	0xFE8
  7153                           postdec1	equ	0xFE5
  7154                           fsr1l	equ	0xFE1
  7155                           indf2	equ	0xFDF
  7156                           postinc2	equ	0xFDE
  7157                           postdec2	equ	0xFDD
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           
  7162 ;; *************** function ___ftsub *****************
  7163 ;; Defined at:
  7164 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;  f1              3   42[BANK0 ] float 
  7167 ;;  f2              3   45[BANK0 ] float 
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;		None
  7170 ;; Return value:  Size  Location     Type
  7171 ;;                  3   42[BANK0 ] float 
  7172 ;; Registers used:
  7173 ;;		wreg, status,2, status,0, cstack
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7179 ;;      Params:         0       6       0       0       0       0       0
  7180 ;;      Locals:         0       0       0       0       0       0       0
  7181 ;;      Temps:          0       0       0       0       0       0       0
  7182 ;;      Totals:         0       6       0       0       0       0       0
  7183 ;;Total ram usage:        6 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; Hardware stack levels required when called:    6
  7186 ;; This function calls:
  7187 ;;		___ftadd
  7188 ;; This function is called by:
  7189 ;;		_Temp_Convert
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text31
  7194  0038BC                     __ptext31:
  7195                           	opt stack 0
  7196  0038BC                     ___ftsub:
  7197                           	opt stack 23
  7198                           
  7199                           ;incstack = 0
  7200  0038BC  0E00               	movlw	0
  7201  0038BE  0100               	movlb	0	; () banked
  7202  0038C0  1BEE               	xorwf	___ftsub@f2& (0+255),f,b
  7203  0038C2  0E00               	movlw	0
  7204  0038C4  0100               	movlb	0	; () banked
  7205  0038C6  1BEF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7206  0038C8  0E80               	movlw	128
  7207  0038CA  0100               	movlb	0	; () banked
  7208  0038CC  1BF0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7209                           
  7210                           ; BSR set to: 0
  7211  0038CE  C0EB  F0DF         	movff	___ftsub@f1,___ftadd@f1
  7212  0038D2  C0EC  F0E0         	movff	___ftsub@f1+1,___ftadd@f1+1
  7213  0038D6  C0ED  F0E1         	movff	___ftsub@f1+2,___ftadd@f1+2
  7214  0038DA  C0EE  F0E2         	movff	___ftsub@f2,___ftadd@f2
  7215  0038DE  C0EF  F0E3         	movff	___ftsub@f2+1,___ftadd@f2+1
  7216  0038E2  C0F0  F0E4         	movff	___ftsub@f2+2,___ftadd@f2+2
  7217  0038E6  ECF9  F00A         	call	___ftadd	;wreg free
  7218  0038EA  C0DF  F0EB         	movff	?___ftadd,?___ftsub
  7219  0038EE  C0E0  F0EC         	movff	?___ftadd+1,?___ftsub+1
  7220  0038F2  C0E1  F0ED         	movff	?___ftadd+2,?___ftsub+2
  7221  0038F6  0012               	return	
  7222  0038F8                     __end_of___ftsub:
  7223                           	opt stack 0
  7224                           tosu	equ	0xFFF
  7225                           tosh	equ	0xFFE
  7226                           tosl	equ	0xFFD
  7227                           pclath	equ	0xFFA
  7228                           tblptru	equ	0xFF8
  7229                           tblptrh	equ	0xFF7
  7230                           tblptrl	equ	0xFF6
  7231                           tablat	equ	0xFF5
  7232                           prodh	equ	0xFF4
  7233                           prodl	equ	0xFF3
  7234                           intcon	equ	0xFF2
  7235                           postinc0	equ	0xFEE
  7236                           wreg	equ	0xFE8
  7237                           postdec1	equ	0xFE5
  7238                           fsr1l	equ	0xFE1
  7239                           indf2	equ	0xFDF
  7240                           postinc2	equ	0xFDE
  7241                           postdec2	equ	0xFDD
  7242                           fsr2h	equ	0xFDA
  7243                           fsr2l	equ	0xFD9
  7244                           status	equ	0xFD8
  7245                           
  7246 ;; *************** function _Temp_Filter *****************
  7247 ;; Defined at:
  7248 ;;		line 45 in file "Tempeture.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;		None
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;  x               2   42[BANK0 ] int 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;		None               void
  7255 ;; Registers used:
  7256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7262 ;;      Params:         0       0       0       0       0       0       0
  7263 ;;      Locals:         0       2       0       0       0       0       0
  7264 ;;      Temps:          0       0       0       0       0       0       0
  7265 ;;      Totals:         0       2       0       0       0       0       0
  7266 ;;Total ram usage:        2 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:    6
  7269 ;; This function calls:
  7270 ;;		___ftadd
  7271 ;;		___ftmul
  7272 ;;		___wmul
  7273 ;; This function is called by:
  7274 ;;		_Temp_Convert
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277                           
  7278                           	psect	text32
  7279  001A86                     __ptext32:
  7280                           	opt stack 0
  7281  001A86                     _Temp_Filter:
  7282                           	opt stack 23
  7283                           
  7284                           ;Tempeture.c: 47: int x;
  7285                           ;Tempeture.c: 48: for (x = 0; x < 4; x++) {
  7286                           
  7287                           ;incstack = 0
  7288  001A86  0E00               	movlw	0
  7289  001A88  0100               	movlb	0	; () banked
  7290  001A8A  6FEC               	movwf	(Temp_Filter@x+1)& (0+255),b
  7291  001A8C  0E00               	movlw	0
  7292  001A8E  0100               	movlb	0	; () banked
  7293  001A90  6FEB               	movwf	Temp_Filter@x& (0+255),b
  7294  001A92                     
  7295                           ; BSR set to: 0
  7296  001A92  0100               	movlb	0	; () banked
  7297  001A94  51EC               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7298  001A96  0A80               	xorlw	128
  7299  001A98  0F80               	addlw	-128
  7300  001A9A  0E04               	movlw	4
  7301  001A9C  B4D8               	btfsc	status,2,c
  7302  001A9E  5DEB               	subwf	Temp_Filter@x& (0+255),w,b
  7303  001AA0  B0D8               	btfsc	status,0,c
  7304  001AA2  D077               	goto	l4821
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;Tempeture.c: 49: Temp_DegF[x] = (0.88 * TmpTemp_DegF[x] + ((1 - 0.88) * PrevTemp_DegF[x
      +                          ]));
  7308                           
  7309                           ; BSR set to: 0
  7310                           
  7311                           ; BSR set to: 0
  7312  001AA4  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7313  001AA8  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7314  001AAC  0E00               	movlw	0
  7315  001AAE  6E1E               	movwf	___wmul@multiplicand+1,c
  7316  001AB0  0E03               	movlw	3
  7317  001AB2  6E1D               	movwf	___wmul@multiplicand,c
  7318  001AB4  EC6E  F01D         	call	___wmul	;wreg free
  7319  001AB8  0100               	movlb	0	; () banked
  7320  001ABA  0EF4               	movlw	low _Temp_DegF
  7321  001ABC  241B               	addwf	?___wmul,w,c
  7322  001ABE  6ED9               	movwf	fsr2l,c
  7323  001AC0  0100               	movlb	0	; () banked
  7324  001AC2  0E00               	movlw	high _Temp_DegF
  7325  001AC4  201C               	addwfc	?___wmul+1,w,c
  7326  001AC6  6EDA               	movwf	fsr2h,c
  7327  001AC8  0E48               	movlw	72
  7328  001ACA  0100               	movlb	0	; () banked
  7329  001ACC  6FD3               	movwf	___ftmul@f2& (0+255),b
  7330  001ACE  0E61               	movlw	97
  7331  001AD0  0100               	movlb	0	; () banked
  7332  001AD2  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  7333  001AD4  0E3F               	movlw	63
  7334  001AD6  0100               	movlb	0	; () banked
  7335  001AD8  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  7336  001ADA  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7337  001ADE  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7338  001AE2  0E00               	movlw	0
  7339  001AE4  6E1E               	movwf	___wmul@multiplicand+1,c
  7340  001AE6  0E03               	movlw	3
  7341  001AE8  6E1D               	movwf	___wmul@multiplicand,c
  7342  001AEA  EC6E  F01D         	call	___wmul	;wreg free
  7343  001AEE  0100               	movlb	0	; () banked
  7344  001AF0  0EAD               	movlw	low _TmpTemp_DegF
  7345  001AF2  241B               	addwf	?___wmul,w,c
  7346  001AF4  6EE1               	movwf	fsr1l,c
  7347  001AF6  0100               	movlb	0	; () banked
  7348  001AF8  0E00               	movlw	high _TmpTemp_DegF
  7349  001AFA  201C               	addwfc	?___wmul+1,w,c
  7350  001AFC  6EE2               	movwf	fsr1h,c
  7351  001AFE  0100               	movlb	0	; () banked
  7352  001B00  CFE6 F0D0          	movff	postinc1,___ftmul@f1
  7353  001B04  0100               	movlb	0	; () banked
  7354  001B06  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
  7355  001B0A  0100               	movlb	0	; () banked
  7356  001B0C  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
  7357  001B10  ECC5  F00E         	call	___ftmul	;wreg free
  7358  001B14  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
  7359  001B18  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
  7360  001B1C  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
  7361  001B20  0EC3               	movlw	195
  7362  001B22  0100               	movlb	0	; () banked
  7363  001B24  6FD3               	movwf	___ftmul@f2& (0+255),b
  7364  001B26  0EF5               	movlw	245
  7365  001B28  0100               	movlb	0	; () banked
  7366  001B2A  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  7367  001B2C  0E3D               	movlw	61
  7368  001B2E  0100               	movlb	0	; () banked
  7369  001B30  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  7370  001B32  0E00               	movlw	0
  7371  001B34  6E1E               	movwf	___wmul@multiplicand+1,c
  7372  001B36  0E03               	movlw	3
  7373  001B38  6E1D               	movwf	___wmul@multiplicand,c
  7374  001B3A  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7375  001B3E  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7376  001B42  EC6E  F01D         	call	___wmul	;wreg free
  7377  001B46  0101               	movlb	1	; () banked
  7378  001B48  0E1E               	movlw	low _PrevTemp_DegF
  7379  001B4A  241B               	addwf	?___wmul,w,c
  7380  001B4C  6EE1               	movwf	fsr1l,c
  7381  001B4E  0101               	movlb	1	; () banked
  7382  001B50  0E01               	movlw	high _PrevTemp_DegF
  7383  001B52  201C               	addwfc	?___wmul+1,w,c
  7384  001B54  6EE2               	movwf	fsr1h,c
  7385  001B56  0100               	movlb	0	; () banked
  7386  001B58  CFE6 F0D0          	movff	postinc1,___ftmul@f1
  7387  001B5C  0100               	movlb	0	; () banked
  7388  001B5E  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
  7389  001B62  0100               	movlb	0	; () banked
  7390  001B64  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
  7391  001B68  ECC5  F00E         	call	___ftmul	;wreg free
  7392  001B6C  C0D0  F0E2         	movff	?___ftmul,___ftadd@f2
  7393  001B70  C0D1  F0E3         	movff	?___ftmul+1,___ftadd@f2+1
  7394  001B74  C0D2  F0E4         	movff	?___ftmul+2,___ftadd@f2+2
  7395  001B78  ECF9  F00A         	call	___ftadd	;wreg free
  7396  001B7C  C0DF  FFDE         	movff	?___ftadd,postinc2
  7397  001B80  C0E0  FFDE         	movff	?___ftadd+1,postinc2
  7398  001B84  C0E1  FFDD         	movff	?___ftadd+2,postdec2
  7399  001B88  52DD               	movf	postdec2,f,c
  7400  001B8A  0100               	movlb	0	; () banked
  7401  001B8C  4BEB               	infsnz	Temp_Filter@x& (0+255),f,b
  7402  001B8E  2BEC               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7403  001B90  D780               	goto	L4
  7404  001B92                     l4821:
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;Tempeture.c: 50: }
  7408                           ;Tempeture.c: 51: for (x = 0; x < 4; x++) {
  7409  001B92  0E00               	movlw	0
  7410  001B94  0100               	movlb	0	; () banked
  7411  001B96  6FEC               	movwf	(Temp_Filter@x+1)& (0+255),b
  7412  001B98  0E00               	movlw	0
  7413  001B9A  0100               	movlb	0	; () banked
  7414  001B9C  6FEB               	movwf	Temp_Filter@x& (0+255),b
  7415  001B9E                     
  7416                           ; BSR set to: 0
  7417  001B9E  0100               	movlb	0	; () banked
  7418  001BA0  51EC               	movf	(Temp_Filter@x+1)& (0+255),w,b
  7419  001BA2  0A80               	xorlw	128
  7420  001BA4  0F80               	addlw	-128
  7421  001BA6  0E04               	movlw	4
  7422  001BA8  B4D8               	btfsc	status,2,c
  7423  001BAA  5DEB               	subwf	Temp_Filter@x& (0+255),w,b
  7424  001BAC  B0D8               	btfsc	status,0,c
  7425  001BAE  0012               	return	
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;Tempeture.c: 52: PrevTemp_DegF[x] = Temp_DegF[x];
  7429                           
  7430                           ; BSR set to: 0
  7431                           
  7432                           ; BSR set to: 0
  7433  001BB0  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7434  001BB4  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7435  001BB8  0E00               	movlw	0
  7436  001BBA  6E1E               	movwf	___wmul@multiplicand+1,c
  7437  001BBC  0E03               	movlw	3
  7438  001BBE  6E1D               	movwf	___wmul@multiplicand,c
  7439  001BC0  EC6E  F01D         	call	___wmul	;wreg free
  7440  001BC4  0100               	movlb	0	; () banked
  7441  001BC6  0EF4               	movlw	low _Temp_DegF
  7442  001BC8  241B               	addwf	?___wmul,w,c
  7443  001BCA  6ED9               	movwf	fsr2l,c
  7444  001BCC  0100               	movlb	0	; () banked
  7445  001BCE  0E00               	movlw	high _Temp_DegF
  7446  001BD0  201C               	addwfc	?___wmul+1,w,c
  7447  001BD2  6EDA               	movwf	fsr2h,c
  7448  001BD4  C0EB  F01B         	movff	Temp_Filter@x,___wmul@multiplier
  7449  001BD8  C0EC  F01C         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  7450  001BDC  0E00               	movlw	0
  7451  001BDE  6E1E               	movwf	___wmul@multiplicand+1,c
  7452  001BE0  0E03               	movlw	3
  7453  001BE2  6E1D               	movwf	___wmul@multiplicand,c
  7454  001BE4  EC6E  F01D         	call	___wmul	;wreg free
  7455  001BE8  0101               	movlb	1	; () banked
  7456  001BEA  0E1E               	movlw	low _PrevTemp_DegF
  7457  001BEC  241B               	addwf	?___wmul,w,c
  7458  001BEE  6EE1               	movwf	fsr1l,c
  7459  001BF0  0101               	movlb	1	; () banked
  7460  001BF2  0E01               	movlw	high _PrevTemp_DegF
  7461  001BF4  201C               	addwfc	?___wmul+1,w,c
  7462  001BF6  6EE2               	movwf	fsr1h,c
  7463  001BF8  CFDE FFE6          	movff	postinc2,postinc1
  7464  001BFC  CFDE FFE6          	movff	postinc2,postinc1
  7465  001C00  CFDE FFE5          	movff	postinc2,postdec1
  7466  001C04  52E5               	movf	postdec1,f,c
  7467                           
  7468                           ; BSR set to: 1
  7469  001C06  0100               	movlb	0	; () banked
  7470  001C08  4BEB               	infsnz	Temp_Filter@x& (0+255),f,b
  7471  001C0A  2BEC               	incf	(Temp_Filter@x+1)& (0+255),f,b
  7472  001C0C  D7C8               	goto	L5
  7473  001C0E                     __end_of_Temp_Filter:
  7474                           	opt stack 0
  7475                           tosu	equ	0xFFF
  7476                           tosh	equ	0xFFE
  7477                           tosl	equ	0xFFD
  7478                           pclath	equ	0xFFA
  7479                           tblptru	equ	0xFF8
  7480                           tblptrh	equ	0xFF7
  7481                           tblptrl	equ	0xFF6
  7482                           tablat	equ	0xFF5
  7483                           prodh	equ	0xFF4
  7484                           prodl	equ	0xFF3
  7485                           intcon	equ	0xFF2
  7486                           postinc0	equ	0xFEE
  7487                           wreg	equ	0xFE8
  7488                           postinc1	equ	0xFE6
  7489                           postdec1	equ	0xFE5
  7490                           fsr1h	equ	0xFE2
  7491                           fsr1l	equ	0xFE1
  7492                           indf2	equ	0xFDF
  7493                           postinc2	equ	0xFDE
  7494                           postdec2	equ	0xFDD
  7495                           fsr2h	equ	0xFDA
  7496                           fsr2l	equ	0xFD9
  7497                           status	equ	0xFD8
  7498                           
  7499 ;; *************** function _SYSTEM_Initialize *****************
  7500 ;; Defined at:
  7501 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;		None
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;		None
  7506 ;; Return value:  Size  Location     Type
  7507 ;;		None               void
  7508 ;; Registers used:
  7509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7515 ;;      Params:         0       0       0       0       0       0       0
  7516 ;;      Locals:         0       0       0       0       0       0       0
  7517 ;;      Temps:          0       0       0       0       0       0       0
  7518 ;;      Totals:         0       0       0       0       0       0       0
  7519 ;;Total ram usage:        0 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:    7
  7522 ;; This function calls:
  7523 ;;		_ADC_Initialize
  7524 ;;		_EUSART1_Initialize
  7525 ;;		_INTERRUPT_Initialize
  7526 ;;		_OSCILLATOR_Initialize
  7527 ;;		_PIN_MANAGER_Initialize
  7528 ;;		_TMR1_Initialize
  7529 ;;		_begin
  7530 ;; This function is called by:
  7531 ;;		_main
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           	psect	text33
  7536  0035BC                     __ptext33:
  7537                           	opt stack 0
  7538  0035BC                     _SYSTEM_Initialize:
  7539                           	opt stack 23
  7540                           
  7541                           ;mcc.c: 113: OSCILLATOR_Initialize();
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;incstack = 0
  7545  0035BC  EC5A  F01E         	call	_OSCILLATOR_Initialize	;wreg free
  7546                           
  7547                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  7548  0035C0  ECA6  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  7549                           
  7550                           ;mcc.c: 115: INTERRUPT_Initialize();
  7551  0035C4  EC67  F01E         	call	_INTERRUPT_Initialize	;wreg free
  7552                           
  7553                           ;mcc.c: 116: ADC_Initialize();
  7554  0035C8  EC10  F01E         	call	_ADC_Initialize	;wreg free
  7555                           
  7556                           ;mcc.c: 117: EUSART1_Initialize();
  7557  0035CC  EC3C  F01C         	call	_EUSART1_Initialize	;wreg free
  7558                           
  7559                           ;mcc.c: 118: TMR1_Initialize();
  7560  0035D0  ECB6  F01D         	call	_TMR1_Initialize	;wreg free
  7561                           
  7562                           ;mcc.c: 119: begin(receiveArray, sizeof (receiveArray), 1, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  7563  0035D4  0101               	movlb	1	; () banked
  7564  0035D6  0E01               	movlw	high _receiveArray	;volatile
  7565  0035D8  0100               	movlb	0	; () banked
  7566  0035DA  6FC2               	movwf	(begin@ptr+1)& (0+255),b
  7567  0035DC  0101               	movlb	1	; () banked
  7568  0035DE  0E2A               	movlw	low _receiveArray	;volatile
  7569  0035E0  0100               	movlb	0	; () banked
  7570  0035E2  6FC1               	movwf	begin@ptr& (0+255),b
  7571  0035E4  0E28               	movlw	40
  7572  0035E6  0100               	movlb	0	; () banked
  7573  0035E8  6FC3               	movwf	begin@maxSize& (0+255),b
  7574  0035EA  0E01               	movlw	1
  7575  0035EC  0100               	movlb	0	; () banked
  7576  0035EE  6FC4               	movwf	begin@givenAddress& (0+255),b
  7577  0035F0  0E00               	movlw	0
  7578  0035F2  0100               	movlb	0	; () banked
  7579  0035F4  6FC5               	movwf	begin@error& (0+255),b
  7580  0035F6  0E39               	movlw	high _Send_put
  7581  0035F8  0100               	movlb	0	; () banked
  7582  0035FA  6FC7               	movwf	(begin@stufftosend+1)& (0+255),b
  7583  0035FC  0E6A               	movlw	low _Send_put
  7584  0035FE  0100               	movlb	0	; () banked
  7585  003600  6FC6               	movwf	begin@stufftosend& (0+255),b
  7586  003602  0E3C               	movlw	high _Receive_get
  7587  003604  0100               	movlb	0	; () banked
  7588  003606  6FC9               	movwf	(begin@stufftoreceive+1)& (0+255),b
  7589  003608  0EA2               	movlw	low _Receive_get
  7590  00360A  0100               	movlb	0	; () banked
  7591  00360C  6FC8               	movwf	begin@stufftoreceive& (0+255),b
  7592  00360E  0E3B               	movlw	high _Receive_available
  7593  003610  0100               	movlb	0	; () banked
  7594  003612  6FCB               	movwf	(begin@stuffavailable+1)& (0+255),b
  7595  003614  0EEC               	movlw	low _Receive_available
  7596  003616  0100               	movlb	0	; () banked
  7597  003618  6FCA               	movwf	begin@stuffavailable& (0+255),b
  7598  00361A  0E3C               	movlw	high _Receive_peek
  7599  00361C  0100               	movlb	0	; () banked
  7600  00361E  6FCD               	movwf	(begin@stuffpeek+1)& (0+255),b
  7601  003620  0E90               	movlw	low _Receive_peek
  7602  003622  0100               	movlb	0	; () banked
  7603  003624  6FCC               	movwf	begin@stuffpeek& (0+255),b
  7604  003626  ECA1  F01A         	call	_begin	;wreg free
  7605  00362A  0012               	return	
  7606  00362C                     __end_of_SYSTEM_Initialize:
  7607                           	opt stack 0
  7608                           tosu	equ	0xFFF
  7609                           tosh	equ	0xFFE
  7610                           tosl	equ	0xFFD
  7611                           pclath	equ	0xFFA
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon	equ	0xFF2
  7619                           postinc0	equ	0xFEE
  7620                           wreg	equ	0xFE8
  7621                           postinc1	equ	0xFE6
  7622                           postdec1	equ	0xFE5
  7623                           fsr1h	equ	0xFE2
  7624                           fsr1l	equ	0xFE1
  7625                           indf2	equ	0xFDF
  7626                           postinc2	equ	0xFDE
  7627                           postdec2	equ	0xFDD
  7628                           fsr2h	equ	0xFDA
  7629                           fsr2l	equ	0xFD9
  7630                           status	equ	0xFD8
  7631                           
  7632 ;; *************** function _begin *****************
  7633 ;; Defined at:
  7634 ;;		line 18 in file "FastTransfer.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  7637 ;;		 -> receiveArray(40), 
  7638 ;;  maxSize         1    2[BANK0 ] unsigned char 
  7639 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  7640 ;;  error           1    4[BANK0 ] unsigned char 
  7641 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  7642 ;;		 -> Send_put(0), 
  7643 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  7644 ;;		 -> Receive_get(1), 
  7645 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  7646 ;;		 -> Receive_available(2), 
  7647 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  7648 ;;		 -> Receive_peek(1), 
  7649 ;; Auto vars:     Size  Location     Type
  7650 ;;		None
  7651 ;; Return value:  Size  Location     Type
  7652 ;;		None               void
  7653 ;; Registers used:
  7654 ;;		wreg, status,2, status,0, prodl, cstack
  7655 ;; Tracked objects:
  7656 ;;		On entry : 0/0
  7657 ;;		On exit  : 0/0
  7658 ;;		Unchanged: 0/0
  7659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7660 ;;      Params:         0      13       0       0       0       0       0
  7661 ;;      Locals:         0       0       0       0       0       0       0
  7662 ;;      Temps:          0       0       0       0       0       0       0
  7663 ;;      Totals:         0      13       0       0       0       0       0
  7664 ;;Total ram usage:       13 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; Hardware stack levels required when called:    5
  7667 ;; This function calls:
  7668 ;;		___awdiv
  7669 ;; This function is called by:
  7670 ;;		_SYSTEM_Initialize
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           	psect	text34
  7675  003542                     __ptext34:
  7676                           	opt stack 0
  7677  003542                     _begin:
  7678                           	opt stack 24
  7679                           
  7680                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  7681                           
  7682                           ;incstack = 0
  7683  003542  0100               	movlb	0	; () banked
  7684  003544  C0C2  F097         	movff	begin@ptr+1,_receiveArrayAddress+1
  7685  003548  0100               	movlb	0	; () banked
  7686  00354A  C0C1  F096         	movff	begin@ptr,_receiveArrayAddress
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  7690  00354E  C0C4  F03E         	movff	begin@givenAddress,_moduleAddress
  7691                           
  7692                           ;FastTransfer.c: 21: serial_write = stufftosend;
  7693  003552  0100               	movlb	0	; () banked
  7694  003554  C0C7  F036         	movff	begin@stufftosend+1,_serial_write+1
  7695  003558  0100               	movlb	0	; () banked
  7696  00355A  C0C6  F035         	movff	begin@stufftosend,_serial_write
  7697                           
  7698                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  7699  00355E  0100               	movlb	0	; () banked
  7700  003560  C0CB  F032         	movff	begin@stuffavailable+1,_serial_available+1
  7701  003564  0100               	movlb	0	; () banked
  7702  003566  C0CA  F031         	movff	begin@stuffavailable,_serial_available
  7703                           
  7704                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  7705  00356A  0100               	movlb	0	; () banked
  7706  00356C  C0CD  F09B         	movff	begin@stuffpeek+1,_serial_peek+1
  7707  003570  0100               	movlb	0	; () banked
  7708  003572  C0CC  F09A         	movff	begin@stuffpeek,_serial_peek
  7709                           
  7710                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  7711  003576  0100               	movlb	0	; () banked
  7712  003578  C0C9  F034         	movff	begin@stufftoreceive+1,_serial_read+1
  7713  00357C  0100               	movlb	0	; () banked
  7714  00357E  C0C8  F033         	movff	begin@stufftoreceive,_serial_read
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  7718  003582  0100               	movlb	0	; () banked
  7719  003584  C0C3  F01B         	movff	begin@maxSize,___awdiv@dividend
  7720  003588  6A1C               	clrf	___awdiv@dividend+1,c
  7721  00358A  0E00               	movlw	0
  7722  00358C  6E1E               	movwf	___awdiv@divisor+1,c
  7723  00358E  0E02               	movlw	2
  7724  003590  6E1D               	movwf	___awdiv@divisor,c
  7725  003592  ECE4  F018         	call	___awdiv	;wreg free
  7726  003596  501B               	movf	?___awdiv,w,c
  7727  003598  6E3D               	movwf	_maxDataAddress,c
  7728                           
  7729                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  7730  00359A  0102               	movlb	2	; () banked
  7731  00359C  0E02               	movlw	high _ring_buffer
  7732  00359E  0100               	movlb	0	; () banked
  7733  0035A0  6F99               	movwf	(_sendStructAddress+1)& (0+255),b
  7734  0035A2  0102               	movlb	2	; () banked
  7735  0035A4  0E00               	movlw	low _ring_buffer
  7736  0035A6  0100               	movlb	0	; () banked
  7737  0035A8  6F98               	movwf	_sendStructAddress& (0+255),b
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;FastTransfer.c: 27: AKNAKsend = error;
  7741  0035AA  C0C5  F039         	movff	begin@error,_AKNAKsend
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  7745  0035AE  0E00               	movlw	0
  7746  0035B0  0100               	movlb	0	; () banked
  7747  0035B2  6F8F               	movwf	(_alignErrorCounter+1)& (0+255),b
  7748  0035B4  0E00               	movlw	0
  7749  0035B6  0100               	movlb	0	; () banked
  7750  0035B8  6F8E               	movwf	_alignErrorCounter& (0+255),b
  7751                           
  7752                           ; BSR set to: 0
  7753  0035BA  0012               	return	
  7754  0035BC                     __end_of_begin:
  7755                           	opt stack 0
  7756                           tosu	equ	0xFFF
  7757                           tosh	equ	0xFFE
  7758                           tosl	equ	0xFFD
  7759                           pclath	equ	0xFFA
  7760                           tblptru	equ	0xFF8
  7761                           tblptrh	equ	0xFF7
  7762                           tblptrl	equ	0xFF6
  7763                           tablat	equ	0xFF5
  7764                           prodh	equ	0xFF4
  7765                           prodl	equ	0xFF3
  7766                           intcon	equ	0xFF2
  7767                           postinc0	equ	0xFEE
  7768                           wreg	equ	0xFE8
  7769                           postinc1	equ	0xFE6
  7770                           postdec1	equ	0xFE5
  7771                           fsr1h	equ	0xFE2
  7772                           fsr1l	equ	0xFE1
  7773                           indf2	equ	0xFDF
  7774                           postinc2	equ	0xFDE
  7775                           postdec2	equ	0xFDD
  7776                           fsr2h	equ	0xFDA
  7777                           fsr2l	equ	0xFD9
  7778                           status	equ	0xFD8
  7779                           
  7780 ;; *************** function ___awdiv *****************
  7781 ;; Defined at:
  7782 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;  dividend        2   26[COMRAM] int 
  7785 ;;  divisor         2   28[COMRAM] int 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  quotient        2   32[COMRAM] int 
  7788 ;;  sign            1   31[COMRAM] unsigned char 
  7789 ;;  counter         1   30[COMRAM] unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  2   26[COMRAM] int 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0, prodl
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7799 ;;      Params:         4       0       0       0       0       0       0
  7800 ;;      Locals:         4       0       0       0       0       0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0
  7802 ;;      Totals:         8       0       0       0       0       0       0
  7803 ;;Total ram usage:        8 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    4
  7806 ;; This function calls:
  7807 ;;		Nothing
  7808 ;; This function is called by:
  7809 ;;		_Temp_Convert
  7810 ;;		_begin
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text35
  7815  0031C8                     __ptext35:
  7816                           	opt stack 0
  7817  0031C8                     ___awdiv:
  7818                           	opt stack 25
  7819                           
  7820                           ; BSR set to: 0
  7821                           ;incstack = 0
  7822  0031C8  0E00               	movlw	0
  7823  0031CA  6E20               	movwf	___awdiv@sign,c
  7824  0031CC  501E               	movf	___awdiv@divisor+1,w,c
  7825  0031CE  0A80               	xorlw	128
  7826  0031D0  6EF3               	movwf	prodl,c
  7827  0031D2  0E80               	movlw	128
  7828  0031D4  5CF3               	subwf	prodl,w,c
  7829  0031D6  0E00               	movlw	0
  7830  0031D8  B4D8               	btfsc	status,2,c
  7831  0031DA  5C1D               	subwf	___awdiv@divisor,w,c
  7832  0031DC  B0D8               	btfsc	status,0,c
  7833  0031DE  D006               	goto	l4707
  7834  0031E0  6C1D               	negf	___awdiv@divisor,c
  7835  0031E2  1E1E               	comf	___awdiv@divisor+1,f,c
  7836  0031E4  B0D8               	btfsc	status,0,c
  7837  0031E6  2A1E               	incf	___awdiv@divisor+1,f,c
  7838  0031E8  0E01               	movlw	1
  7839  0031EA  6E20               	movwf	___awdiv@sign,c
  7840  0031EC                     l4707:
  7841  0031EC  501C               	movf	___awdiv@dividend+1,w,c
  7842  0031EE  0A80               	xorlw	128
  7843  0031F0  6EF3               	movwf	prodl,c
  7844  0031F2  0E80               	movlw	128
  7845  0031F4  5CF3               	subwf	prodl,w,c
  7846  0031F6  0E00               	movlw	0
  7847  0031F8  B4D8               	btfsc	status,2,c
  7848  0031FA  5C1B               	subwf	___awdiv@dividend,w,c
  7849  0031FC  B0D8               	btfsc	status,0,c
  7850  0031FE  D006               	goto	l4713
  7851  003200  6C1B               	negf	___awdiv@dividend,c
  7852  003202  1E1C               	comf	___awdiv@dividend+1,f,c
  7853  003204  B0D8               	btfsc	status,0,c
  7854  003206  2A1C               	incf	___awdiv@dividend+1,f,c
  7855  003208  0E01               	movlw	1
  7856  00320A  1A20               	xorwf	___awdiv@sign,f,c
  7857  00320C                     l4713:
  7858  00320C  0E00               	movlw	0
  7859  00320E  6E22               	movwf	___awdiv@quotient+1,c
  7860  003210  0E00               	movlw	0
  7861  003212  6E21               	movwf	___awdiv@quotient,c
  7862  003214  501E               	movf	___awdiv@divisor+1,w,c
  7863  003216  101D               	iorwf	___awdiv@divisor,w,c
  7864  003218  B4D8               	btfsc	status,2,c
  7865  00321A  D01C               	goto	l4735
  7866  00321C  0E01               	movlw	1
  7867  00321E  6E1F               	movwf	___awdiv@counter,c
  7868  003220  D004               	goto	l4721
  7869  003222                     l4719:
  7870  003222  90D8               	bcf	status,0,c
  7871  003224  361D               	rlcf	___awdiv@divisor,f,c
  7872  003226  361E               	rlcf	___awdiv@divisor+1,f,c
  7873  003228  2A1F               	incf	___awdiv@counter,f,c
  7874  00322A                     l4721:
  7875  00322A  AE1E               	btfss	___awdiv@divisor+1,7,c
  7876  00322C  D7FA               	goto	l4719
  7877  00322E                     l4723:
  7878  00322E  90D8               	bcf	status,0,c
  7879  003230  3621               	rlcf	___awdiv@quotient,f,c
  7880  003232  3622               	rlcf	___awdiv@quotient+1,f,c
  7881  003234  501D               	movf	___awdiv@divisor,w,c
  7882  003236  5C1B               	subwf	___awdiv@dividend,w,c
  7883  003238  501E               	movf	___awdiv@divisor+1,w,c
  7884  00323A  581C               	subwfb	___awdiv@dividend+1,w,c
  7885  00323C  A0D8               	btfss	status,0,c
  7886  00323E  D005               	goto	l4731
  7887  003240  501D               	movf	___awdiv@divisor,w,c
  7888  003242  5E1B               	subwf	___awdiv@dividend,f,c
  7889  003244  501E               	movf	___awdiv@divisor+1,w,c
  7890  003246  5A1C               	subwfb	___awdiv@dividend+1,f,c
  7891  003248  8021               	bsf	___awdiv@quotient,0,c
  7892  00324A                     l4731:
  7893  00324A  90D8               	bcf	status,0,c
  7894  00324C  321E               	rrcf	___awdiv@divisor+1,f,c
  7895  00324E  321D               	rrcf	___awdiv@divisor,f,c
  7896  003250  2E1F               	decfsz	___awdiv@counter,f,c
  7897  003252  D7ED               	goto	l4723
  7898  003254                     l4735:
  7899  003254  5020               	movf	___awdiv@sign,w,c
  7900  003256  B4D8               	btfsc	status,2,c
  7901  003258  D004               	goto	l4739
  7902  00325A  6C21               	negf	___awdiv@quotient,c
  7903  00325C  1E22               	comf	___awdiv@quotient+1,f,c
  7904  00325E  B0D8               	btfsc	status,0,c
  7905  003260  2A22               	incf	___awdiv@quotient+1,f,c
  7906  003262                     l4739:
  7907  003262  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  7908  003266  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  7909  00326A  0012               	return	
  7910  00326C                     __end_of___awdiv:
  7911                           	opt stack 0
  7912                           tosu	equ	0xFFF
  7913                           tosh	equ	0xFFE
  7914                           tosl	equ	0xFFD
  7915                           pclath	equ	0xFFA
  7916                           tblptru	equ	0xFF8
  7917                           tblptrh	equ	0xFF7
  7918                           tblptrl	equ	0xFF6
  7919                           tablat	equ	0xFF5
  7920                           prodh	equ	0xFF4
  7921                           prodl	equ	0xFF3
  7922                           intcon	equ	0xFF2
  7923                           postinc0	equ	0xFEE
  7924                           wreg	equ	0xFE8
  7925                           postinc1	equ	0xFE6
  7926                           postdec1	equ	0xFE5
  7927                           fsr1h	equ	0xFE2
  7928                           fsr1l	equ	0xFE1
  7929                           indf2	equ	0xFDF
  7930                           postinc2	equ	0xFDE
  7931                           postdec2	equ	0xFDD
  7932                           fsr2h	equ	0xFDA
  7933                           fsr2l	equ	0xFD9
  7934                           status	equ	0xFD8
  7935                           
  7936 ;; *************** function _TMR1_Initialize *****************
  7937 ;; Defined at:
  7938 ;;		line 18 in file "mcc_generated_files/tmr1.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;		None
  7941 ;; Auto vars:     Size  Location     Type
  7942 ;;		None
  7943 ;; Return value:  Size  Location     Type
  7944 ;;		None               void
  7945 ;; Registers used:
  7946 ;;		wreg, status,2, cstack
  7947 ;; Tracked objects:
  7948 ;;		On entry : 0/0
  7949 ;;		On exit  : 0/0
  7950 ;;		Unchanged: 0/0
  7951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7952 ;;      Params:         0       0       0       0       0       0       0
  7953 ;;      Locals:         0       0       0       0       0       0       0
  7954 ;;      Temps:          0       0       0       0       0       0       0
  7955 ;;      Totals:         0       0       0       0       0       0       0
  7956 ;;Total ram usage:        0 bytes
  7957 ;; Hardware stack levels used:    1
  7958 ;; Hardware stack levels required when called:    5
  7959 ;; This function calls:
  7960 ;;		_TMR1_StartTimer
  7961 ;; This function is called by:
  7962 ;;		_SYSTEM_Initialize
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text36
  7967  003B6C                     __ptext36:
  7968                           	opt stack 0
  7969  003B6C                     _TMR1_Initialize:
  7970                           	opt stack 24
  7971                           
  7972                           ;tmr1.c: 23: T1CON = 0x30;
  7973                           
  7974                           ;incstack = 0
  7975  003B6C  0E30               	movlw	48
  7976  003B6E  6ECD               	movwf	4045,c	;volatile
  7977                           
  7978                           ;tmr1.c: 26: T1GCON = 0x00;
  7979  003B70  0E00               	movlw	0
  7980  003B72  6ECC               	movwf	4044,c	;volatile
  7981                           
  7982                           ;tmr1.c: 29: TMR1H = 0x0B;
  7983  003B74  0E0B               	movlw	11
  7984  003B76  6ECF               	movwf	4047,c	;volatile
  7985                           
  7986                           ;tmr1.c: 32: TMR1L = 0xDC;
  7987  003B78  0EDC               	movlw	220
  7988  003B7A  6ECE               	movwf	4046,c	;volatile
  7989                           
  7990                           ;tmr1.c: 35: timer1ReloadVal=TMR1;
  7991  003B7C  CFCE F037          	movff	4046,_timer1ReloadVal	;volatile
  7992  003B80  CFCF F038          	movff	4047,_timer1ReloadVal+1	;volatile
  7993                           
  7994                           ;tmr1.c: 38: PIR1bits.TMR1IF = 0;
  7995  003B84  909E               	bcf	3998,0,c	;volatile
  7996                           
  7997                           ;tmr1.c: 41: PIE1bits.TMR1IE = 1;
  7998  003B86  809D               	bsf	3997,0,c	;volatile
  7999                           
  8000                           ;tmr1.c: 44: TMR1_StartTimer();
  8001  003B88  EC6D  F01E         	call	_TMR1_StartTimer	;wreg free
  8002  003B8C  0012               	return	
  8003  003B8E                     __end_of_TMR1_Initialize:
  8004                           	opt stack 0
  8005                           tosu	equ	0xFFF
  8006                           tosh	equ	0xFFE
  8007                           tosl	equ	0xFFD
  8008                           pclath	equ	0xFFA
  8009                           tblptru	equ	0xFF8
  8010                           tblptrh	equ	0xFF7
  8011                           tblptrl	equ	0xFF6
  8012                           tablat	equ	0xFF5
  8013                           prodh	equ	0xFF4
  8014                           prodl	equ	0xFF3
  8015                           intcon	equ	0xFF2
  8016                           postinc0	equ	0xFEE
  8017                           wreg	equ	0xFE8
  8018                           postinc1	equ	0xFE6
  8019                           postdec1	equ	0xFE5
  8020                           fsr1h	equ	0xFE2
  8021                           fsr1l	equ	0xFE1
  8022                           indf2	equ	0xFDF
  8023                           postinc2	equ	0xFDE
  8024                           postdec2	equ	0xFDD
  8025                           fsr2h	equ	0xFDA
  8026                           fsr2l	equ	0xFD9
  8027                           status	equ	0xFD8
  8028                           
  8029 ;; *************** function _TMR1_StartTimer *****************
  8030 ;; Defined at:
  8031 ;;		line 47 in file "mcc_generated_files/tmr1.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;		None
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;		None
  8036 ;; Return value:  Size  Location     Type
  8037 ;;		None               void
  8038 ;; Registers used:
  8039 ;;		None
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8045 ;;      Params:         0       0       0       0       0       0       0
  8046 ;;      Locals:         0       0       0       0       0       0       0
  8047 ;;      Temps:          0       0       0       0       0       0       0
  8048 ;;      Totals:         0       0       0       0       0       0       0
  8049 ;;Total ram usage:        0 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    4
  8052 ;; This function calls:
  8053 ;;		Nothing
  8054 ;; This function is called by:
  8055 ;;		_TMR1_Initialize
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           	psect	text37
  8060  003CDA                     __ptext37:
  8061                           	opt stack 0
  8062  003CDA                     _TMR1_StartTimer:
  8063                           	opt stack 24
  8064                           
  8065                           ;tmr1.c: 50: T1CONbits.TMR1ON = 1;
  8066                           
  8067                           ;incstack = 0
  8068  003CDA  80CD               	bsf	4045,0,c	;volatile
  8069  003CDC  0012               	return	
  8070  003CDE                     __end_of_TMR1_StartTimer:
  8071                           	opt stack 0
  8072                           tosu	equ	0xFFF
  8073                           tosh	equ	0xFFE
  8074                           tosl	equ	0xFFD
  8075                           pclath	equ	0xFFA
  8076                           tblptru	equ	0xFF8
  8077                           tblptrh	equ	0xFF7
  8078                           tblptrl	equ	0xFF6
  8079                           tablat	equ	0xFF5
  8080                           prodh	equ	0xFF4
  8081                           prodl	equ	0xFF3
  8082                           intcon	equ	0xFF2
  8083                           postinc0	equ	0xFEE
  8084                           wreg	equ	0xFE8
  8085                           postinc1	equ	0xFE6
  8086                           postdec1	equ	0xFE5
  8087                           fsr1h	equ	0xFE2
  8088                           fsr1l	equ	0xFE1
  8089                           indf2	equ	0xFDF
  8090                           postinc2	equ	0xFDE
  8091                           postdec2	equ	0xFDD
  8092                           fsr2h	equ	0xFDA
  8093                           fsr2l	equ	0xFD9
  8094                           status	equ	0xFD8
  8095                           
  8096 ;; *************** function _PIN_MANAGER_Initialize *****************
  8097 ;; Defined at:
  8098 ;;		line 6 in file "mcc_generated_files/pin_manager.c"
  8099 ;; Parameters:    Size  Location     Type
  8100 ;;		None
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;		None
  8103 ;; Return value:  Size  Location     Type
  8104 ;;		None               void
  8105 ;; Registers used:
  8106 ;;		wreg, status,2
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8112 ;;      Params:         0       0       0       0       0       0       0
  8113 ;;      Locals:         0       0       0       0       0       0       0
  8114 ;;      Temps:          0       0       0       0       0       0       0
  8115 ;;      Totals:         0       0       0       0       0       0       0
  8116 ;;Total ram usage:        0 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    4
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		_SYSTEM_Initialize
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text38
  8127  00374C                     __ptext38:
  8128                           	opt stack 0
  8129  00374C                     _PIN_MANAGER_Initialize:
  8130                           	opt stack 25
  8131                           
  8132                           ;pin_manager.c: 8: LATA = 0x00;
  8133                           
  8134                           ;incstack = 0
  8135  00374C  0E00               	movlw	0
  8136  00374E  6E89               	movwf	3977,c	;volatile
  8137                           
  8138                           ;pin_manager.c: 9: TRISA = 0xAE;
  8139  003750  0EAE               	movlw	174
  8140  003752  6E92               	movwf	3986,c	;volatile
  8141                           
  8142                           ;pin_manager.c: 10: ANSELA = 0x2E;
  8143  003754  0E2E               	movlw	46
  8144  003756  010F               	movlb	15	; () banked
  8145  003758  6F38               	movwf	56,b	;volatile
  8146                           
  8147                           ;pin_manager.c: 12: LATB = 0x00;
  8148  00375A  0E00               	movlw	0
  8149  00375C  6E8A               	movwf	3978,c	;volatile
  8150                           
  8151                           ;pin_manager.c: 13: TRISB = 0xF4;
  8152  00375E  0EF4               	movlw	244
  8153  003760  6E93               	movwf	3987,c	;volatile
  8154                           
  8155                           ;pin_manager.c: 14: ANSELB = 0x34;
  8156  003762  0E34               	movlw	52
  8157  003764  010F               	movlb	15	; () banked
  8158  003766  6F39               	movwf	57,b	;volatile
  8159                           
  8160                           ;pin_manager.c: 15: WPUB = 0x00;
  8161  003768  0E00               	movlw	0
  8162  00376A  6E61               	movwf	3937,c	;volatile
  8163                           
  8164                           ;pin_manager.c: 17: LATC = 0x48;
  8165  00376C  0E48               	movlw	72
  8166  00376E  6E8B               	movwf	3979,c	;volatile
  8167                           
  8168                           ;pin_manager.c: 18: TRISC = 0xC4;
  8169  003770  0EC4               	movlw	196
  8170  003772  6E94               	movwf	3988,c	;volatile
  8171                           
  8172                           ;pin_manager.c: 19: ANSELC = 0x04;
  8173  003774  0E04               	movlw	4
  8174  003776  010F               	movlb	15	; () banked
  8175  003778  6F3A               	movwf	58,b	;volatile
  8176                           
  8177                           ;pin_manager.c: 21: LATD = 0x00;
  8178  00377A  0E00               	movlw	0
  8179  00377C  6E8C               	movwf	3980,c	;volatile
  8180                           
  8181                           ;pin_manager.c: 22: TRISD = 0xD1;
  8182  00377E  0ED1               	movlw	209
  8183  003780  6E95               	movwf	3989,c	;volatile
  8184                           
  8185                           ;pin_manager.c: 23: ANSELD = 0xD1;
  8186  003782  0ED1               	movlw	209
  8187  003784  010F               	movlb	15	; () banked
  8188  003786  6F3B               	movwf	59,b	;volatile
  8189                           
  8190                           ;pin_manager.c: 25: LATE = 0x00;
  8191  003788  0E00               	movlw	0
  8192  00378A  6E8D               	movwf	3981,c	;volatile
  8193                           
  8194                           ;pin_manager.c: 26: TRISE = 0x04;
  8195  00378C  0E04               	movlw	4
  8196  00378E  6E96               	movwf	3990,c	;volatile
  8197                           
  8198                           ;pin_manager.c: 27: ANSELE = 0x04;
  8199  003790  0E04               	movlw	4
  8200  003792  010F               	movlb	15	; () banked
  8201  003794  6F3C               	movwf	60,b	;volatile
  8202                           
  8203                           ; BSR set to: 15
  8204                           ;pin_manager.c: 29: TRISCbits.TRISC6 = 1;
  8205  003796  8C94               	bsf	3988,6,c	;volatile
  8206                           
  8207                           ; BSR set to: 15
  8208                           ;pin_manager.c: 30: TRISCbits.TRISC7 = 1;
  8209  003798  8E94               	bsf	3988,7,c	;volatile
  8210                           
  8211                           ; BSR set to: 15
  8212                           ;pin_manager.c: 34: INTCON2bits.nRBPU = 0x01;
  8213  00379A  8EF1               	bsf	intcon2,7,c	;volatile
  8214                           
  8215                           ; BSR set to: 15
  8216  00379C  0012               	return	
  8217  00379E                     __end_of_PIN_MANAGER_Initialize:
  8218                           	opt stack 0
  8219                           tosu	equ	0xFFF
  8220                           tosh	equ	0xFFE
  8221                           tosl	equ	0xFFD
  8222                           pclath	equ	0xFFA
  8223                           tblptru	equ	0xFF8
  8224                           tblptrh	equ	0xFF7
  8225                           tblptrl	equ	0xFF6
  8226                           tablat	equ	0xFF5
  8227                           prodh	equ	0xFF4
  8228                           prodl	equ	0xFF3
  8229                           intcon	equ	0xFF2
  8230                           intcon2	equ	0xFF1
  8231                           postinc0	equ	0xFEE
  8232                           wreg	equ	0xFE8
  8233                           postinc1	equ	0xFE6
  8234                           postdec1	equ	0xFE5
  8235                           fsr1h	equ	0xFE2
  8236                           fsr1l	equ	0xFE1
  8237                           indf2	equ	0xFDF
  8238                           postinc2	equ	0xFDE
  8239                           postdec2	equ	0xFDD
  8240                           fsr2h	equ	0xFDA
  8241                           fsr2l	equ	0xFD9
  8242                           status	equ	0xFD8
  8243                           
  8244 ;; *************** function _OSCILLATOR_Initialize *****************
  8245 ;; Defined at:
  8246 ;;		line 124 in file "mcc_generated_files/mcc.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;		None
  8251 ;; Return value:  Size  Location     Type
  8252 ;;		None               void
  8253 ;; Registers used:
  8254 ;;		wreg, status,2
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8260 ;;      Params:         0       0       0       0       0       0       0
  8261 ;;      Locals:         0       0       0       0       0       0       0
  8262 ;;      Temps:          0       0       0       0       0       0       0
  8263 ;;      Totals:         0       0       0       0       0       0       0
  8264 ;;Total ram usage:        0 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    4
  8267 ;; This function calls:
  8268 ;;		Nothing
  8269 ;; This function is called by:
  8270 ;;		_SYSTEM_Initialize
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text39
  8275  003CB4                     __ptext39:
  8276                           	opt stack 0
  8277  003CB4                     _OSCILLATOR_Initialize:
  8278                           	opt stack 25
  8279                           
  8280                           ;mcc.c: 126: OSCCON = 0x62;
  8281                           
  8282                           ; BSR set to: 15
  8283                           ;incstack = 0
  8284  003CB4  0E62               	movlw	98
  8285  003CB6  6ED3               	movwf	4051,c	;volatile
  8286                           
  8287                           ;mcc.c: 128: OSCCON2 = 0x04;
  8288  003CB8  0E04               	movlw	4
  8289  003CBA  6ED2               	movwf	4050,c	;volatile
  8290                           
  8291                           ;mcc.c: 130: OSCTUNE = 0x00;
  8292  003CBC  0E00               	movlw	0
  8293  003CBE  6E9B               	movwf	3995,c	;volatile
  8294  003CC0  0012               	return	
  8295  003CC2                     __end_of_OSCILLATOR_Initialize:
  8296                           	opt stack 0
  8297                           tosu	equ	0xFFF
  8298                           tosh	equ	0xFFE
  8299                           tosl	equ	0xFFD
  8300                           pclath	equ	0xFFA
  8301                           tblptru	equ	0xFF8
  8302                           tblptrh	equ	0xFF7
  8303                           tblptrl	equ	0xFF6
  8304                           tablat	equ	0xFF5
  8305                           prodh	equ	0xFF4
  8306                           prodl	equ	0xFF3
  8307                           intcon	equ	0xFF2
  8308                           intcon2	equ	0xFF1
  8309                           postinc0	equ	0xFEE
  8310                           wreg	equ	0xFE8
  8311                           postinc1	equ	0xFE6
  8312                           postdec1	equ	0xFE5
  8313                           fsr1h	equ	0xFE2
  8314                           fsr1l	equ	0xFE1
  8315                           indf2	equ	0xFDF
  8316                           postinc2	equ	0xFDE
  8317                           postdec2	equ	0xFDD
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function _INTERRUPT_Initialize *****************
  8323 ;; Defined at:
  8324 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;		None
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;		None
  8329 ;; Return value:  Size  Location     Type
  8330 ;;		None               void
  8331 ;; Registers used:
  8332 ;;		None
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8338 ;;      Params:         0       0       0       0       0       0       0
  8339 ;;      Locals:         0       0       0       0       0       0       0
  8340 ;;      Temps:          0       0       0       0       0       0       0
  8341 ;;      Totals:         0       0       0       0       0       0       0
  8342 ;;Total ram usage:        0 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    4
  8345 ;; This function calls:
  8346 ;;		Nothing
  8347 ;; This function is called by:
  8348 ;;		_SYSTEM_Initialize
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text40
  8353  003CCE                     __ptext40:
  8354                           	opt stack 0
  8355  003CCE                     _INTERRUPT_Initialize:
  8356                           	opt stack 25
  8357                           
  8358                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  8359                           
  8360                           ;incstack = 0
  8361  003CCE  9ED0               	bcf	4048,7,c	;volatile
  8362                           
  8363                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  8364  003CD0  9A9F               	bcf	3999,5,c	;volatile
  8365                           
  8366                           ;interrupt_manager.c: 62: IPR1bits.ADIP = 0;
  8367  003CD2  9C9F               	bcf	3999,6,c	;volatile
  8368                           
  8369                           ;interrupt_manager.c: 64: IPR1bits.TMR1IP = 0;
  8370  003CD4  909F               	bcf	3999,0,c	;volatile
  8371                           
  8372                           ;interrupt_manager.c: 66: IPR1bits.TX1IP = 0;
  8373  003CD6  989F               	bcf	3999,4,c	;volatile
  8374  003CD8  0012               	return	
  8375  003CDA                     __end_of_INTERRUPT_Initialize:
  8376                           	opt stack 0
  8377                           tosu	equ	0xFFF
  8378                           tosh	equ	0xFFE
  8379                           tosl	equ	0xFFD
  8380                           pclath	equ	0xFFA
  8381                           tblptru	equ	0xFF8
  8382                           tblptrh	equ	0xFF7
  8383                           tblptrl	equ	0xFF6
  8384                           tablat	equ	0xFF5
  8385                           prodh	equ	0xFF4
  8386                           prodl	equ	0xFF3
  8387                           intcon	equ	0xFF2
  8388                           intcon2	equ	0xFF1
  8389                           postinc0	equ	0xFEE
  8390                           wreg	equ	0xFE8
  8391                           postinc1	equ	0xFE6
  8392                           postdec1	equ	0xFE5
  8393                           fsr1h	equ	0xFE2
  8394                           fsr1l	equ	0xFE1
  8395                           indf2	equ	0xFDF
  8396                           postinc2	equ	0xFDE
  8397                           postdec2	equ	0xFDD
  8398                           fsr2h	equ	0xFDA
  8399                           fsr2l	equ	0xFD9
  8400                           status	equ	0xFD8
  8401                           
  8402 ;; *************** function _EUSART1_Initialize *****************
  8403 ;; Defined at:
  8404 ;;		line 21 in file "UART.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;		None
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;		None
  8409 ;; Return value:  Size  Location     Type
  8410 ;;		None               void
  8411 ;; Registers used:
  8412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8418 ;;      Params:         0       0       0       0       0       0       0
  8419 ;;      Locals:         0       0       0       0       0       0       0
  8420 ;;      Temps:          0       0       0       0       0       0       0
  8421 ;;      Totals:         0       0       0       0       0       0       0
  8422 ;;Total ram usage:        0 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    6
  8425 ;; This function calls:
  8426 ;;		_UART_buff_init
  8427 ;; This function is called by:
  8428 ;;		_SYSTEM_Initialize
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           	psect	text41
  8433  003878                     __ptext41:
  8434                           	opt stack 0
  8435  003878                     _EUSART1_Initialize:
  8436                           	opt stack 23
  8437                           
  8438                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  8439                           
  8440                           ;incstack = 0
  8441  003878  9A9D               	bcf	3997,5,c	;volatile
  8442                           
  8443                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  8444  00387A  989D               	bcf	3997,4,c	;volatile
  8445                           
  8446                           ;UART.c: 29: BAUD1CON = 0x48;
  8447  00387C  0E48               	movlw	72
  8448  00387E  6EB8               	movwf	4024,c	;volatile
  8449                           
  8450                           ;UART.c: 32: RC1STA = 0x98;
  8451  003880  0E98               	movlw	152
  8452  003882  6EAB               	movwf	4011,c	;volatile
  8453                           
  8454                           ;UART.c: 35: TX1STA = 0x26;
  8455  003884  0E26               	movlw	38
  8456  003886  6EAC               	movwf	4012,c	;volatile
  8457                           
  8458                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  8459  003888  0E33               	movlw	51
  8460  00388A  6EAF               	movwf	4015,c	;volatile
  8461                           
  8462                           ;UART.c: 41: SPBRGH1 = 0x00;
  8463  00388C  0E00               	movlw	0
  8464  00388E  6EB0               	movwf	4016,c	;volatile
  8465                           
  8466                           ;UART.c: 44: TXREG1 = 0x00;
  8467  003890  0E00               	movlw	0
  8468  003892  6EAD               	movwf	4013,c	;volatile
  8469                           
  8470                           ;UART.c: 47: RCREG1 = 0x00;
  8471  003894  0E00               	movlw	0
  8472  003896  6EAE               	movwf	4014,c	;volatile
  8473                           
  8474                           ;UART.c: 49: UART_buff_init(&input_buffer);
  8475  003898  0104               	movlb	4	; () banked
  8476  00389A  0E04               	movlw	high _input_buffer
  8477  00389C  6E24               	movwf	UART_buff_init@_this+1,c
  8478  00389E  0104               	movlb	4	; () banked
  8479  0038A0  0E00               	movlw	low _input_buffer
  8480  0038A2  6E23               	movwf	UART_buff_init@_this,c
  8481  0038A4  ECE7  F01D         	call	_UART_buff_init	;wreg free
  8482                           
  8483                           ;UART.c: 50: UART_buff_init(&output_buffer);
  8484  0038A8  0105               	movlb	5	; () banked
  8485  0038AA  0E05               	movlw	high _output_buffer
  8486  0038AC  6E24               	movwf	UART_buff_init@_this+1,c
  8487  0038AE  0105               	movlb	5	; () banked
  8488  0038B0  0E00               	movlw	low _output_buffer
  8489  0038B2  6E23               	movwf	UART_buff_init@_this,c
  8490  0038B4  ECE7  F01D         	call	_UART_buff_init	;wreg free
  8491                           
  8492                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  8493  0038B8  8A9D               	bsf	3997,5,c	;volatile
  8494  0038BA  0012               	return	
  8495  0038BC                     __end_of_EUSART1_Initialize:
  8496                           	opt stack 0
  8497                           tosu	equ	0xFFF
  8498                           tosh	equ	0xFFE
  8499                           tosl	equ	0xFFD
  8500                           pclath	equ	0xFFA
  8501                           tblptru	equ	0xFF8
  8502                           tblptrh	equ	0xFF7
  8503                           tblptrl	equ	0xFF6
  8504                           tablat	equ	0xFF5
  8505                           prodh	equ	0xFF4
  8506                           prodl	equ	0xFF3
  8507                           intcon	equ	0xFF2
  8508                           intcon2	equ	0xFF1
  8509                           postinc0	equ	0xFEE
  8510                           wreg	equ	0xFE8
  8511                           postinc1	equ	0xFE6
  8512                           postdec1	equ	0xFE5
  8513                           fsr1h	equ	0xFE2
  8514                           fsr1l	equ	0xFE1
  8515                           indf2	equ	0xFDF
  8516                           postinc2	equ	0xFDE
  8517                           postdec2	equ	0xFDD
  8518                           fsr2h	equ	0xFDA
  8519                           fsr2l	equ	0xFD9
  8520                           status	equ	0xFD8
  8521                           
  8522 ;; *************** function _UART_buff_init *****************
  8523 ;; Defined at:
  8524 ;;		line 56 in file "UART.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  8527 ;;		 -> output_buffer(206), input_buffer(206), 
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;		None
  8530 ;; Return value:  Size  Location     Type
  8531 ;;		None               void
  8532 ;; Registers used:
  8533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8539 ;;      Params:         2       0       0       0       0       0       0
  8540 ;;      Locals:         0       0       0       0       0       0       0
  8541 ;;      Temps:          0       0       0       0       0       0       0
  8542 ;;      Totals:         2       0       0       0       0       0       0
  8543 ;;Total ram usage:        2 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; Hardware stack levels required when called:    5
  8546 ;; This function calls:
  8547 ;;		_memset
  8548 ;; This function is called by:
  8549 ;;		_EUSART1_Initialize
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           	psect	text42
  8554  003BCE                     __ptext42:
  8555                           	opt stack 0
  8556  003BCE                     _UART_buff_init:
  8557                           	opt stack 23
  8558                           
  8559                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  8560                           
  8561                           ;incstack = 0
  8562  003BCE  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  8563  003BD2  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  8564  003BD6  0E00               	movlw	0
  8565  003BD8  6E1E               	movwf	memset@c+1,c
  8566  003BDA  0E00               	movlw	0
  8567  003BDC  6E1D               	movwf	memset@c,c
  8568  003BDE  0E00               	movlw	0
  8569  003BE0  6E20               	movwf	memset@n+1,c
  8570  003BE2  0ECE               	movlw	206
  8571  003BE4  6E1F               	movwf	memset@n,c
  8572  003BE6  EC19  F01D         	call	_memset	;wreg free
  8573  003BEA  0012               	return	
  8574  003BEC                     __end_of_UART_buff_init:
  8575                           	opt stack 0
  8576                           tosu	equ	0xFFF
  8577                           tosh	equ	0xFFE
  8578                           tosl	equ	0xFFD
  8579                           pclath	equ	0xFFA
  8580                           tblptru	equ	0xFF8
  8581                           tblptrh	equ	0xFF7
  8582                           tblptrl	equ	0xFF6
  8583                           tablat	equ	0xFF5
  8584                           prodh	equ	0xFF4
  8585                           prodl	equ	0xFF3
  8586                           intcon	equ	0xFF2
  8587                           intcon2	equ	0xFF1
  8588                           postinc0	equ	0xFEE
  8589                           wreg	equ	0xFE8
  8590                           postinc1	equ	0xFE6
  8591                           postdec1	equ	0xFE5
  8592                           fsr1h	equ	0xFE2
  8593                           fsr1l	equ	0xFE1
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8
  8600                           
  8601 ;; *************** function _memset *****************
  8602 ;; Defined at:
  8603 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\memset.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;  p1              2   26[COMRAM] PTR void 
  8606 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8607 ;;  c               2   28[COMRAM] int 
  8608 ;;  n               2   30[COMRAM] unsigned int 
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;  p               2   32[COMRAM] PTR unsigned char 
  8611 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8612 ;; Return value:  Size  Location     Type
  8613 ;;                  2   26[COMRAM] PTR void 
  8614 ;; Registers used:
  8615 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8621 ;;      Params:         6       0       0       0       0       0       0
  8622 ;;      Locals:         2       0       0       0       0       0       0
  8623 ;;      Temps:          0       0       0       0       0       0       0
  8624 ;;      Totals:         8       0       0       0       0       0       0
  8625 ;;Total ram usage:        8 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; Hardware stack levels required when called:    4
  8628 ;; This function calls:
  8629 ;;		Nothing
  8630 ;; This function is called by:
  8631 ;;		_FastTransfer_buffer_flush
  8632 ;;		_UART_buff_init
  8633 ;;		_UART_buff_flush
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           	psect	text43
  8638  003A32                     __ptext43:
  8639                           	opt stack 0
  8640  003A32                     _memset:
  8641                           	opt stack 23
  8642                           
  8643                           ;incstack = 0
  8644  003A32  C01C  F022         	movff	memset@p1+1,memset@p+1
  8645  003A36  C01B  F021         	movff	memset@p1,memset@p
  8646  003A3A  D008               	goto	l3035
  8647  003A3C                     l3031:
  8648  003A3C  C021  FFD9         	movff	memset@p,fsr2l
  8649  003A40  C022  FFDA         	movff	memset@p+1,fsr2h
  8650  003A44  C01D  FFDF         	movff	memset@c,indf2
  8651  003A48  4A21               	infsnz	memset@p,f,c
  8652  003A4A  2A22               	incf	memset@p+1,f,c
  8653  003A4C                     l3035:
  8654  003A4C  061F               	decf	memset@n,f,c
  8655  003A4E  A0D8               	btfss	status,0,c
  8656  003A50  0620               	decf	memset@n+1,f,c
  8657  003A52  281F               	incf	memset@n& (0+255),w,c
  8658  003A54  B4D8               	btfsc	status,2,c
  8659  003A56  2820               	incf	(memset@n+1)& (0+255),w,c
  8660  003A58  B4D8               	btfsc	status,2,c
  8661                           
  8662                           ;	Return value of _memset is never used
  8663  003A5A  0012               	return	
  8664  003A5C  D7EF               	goto	l3031
  8665  003A5E                     __end_of_memset:
  8666                           	opt stack 0
  8667                           tosu	equ	0xFFF
  8668                           tosh	equ	0xFFE
  8669                           tosl	equ	0xFFD
  8670                           pclath	equ	0xFFA
  8671                           tblptru	equ	0xFF8
  8672                           tblptrh	equ	0xFF7
  8673                           tblptrl	equ	0xFF6
  8674                           tablat	equ	0xFF5
  8675                           prodh	equ	0xFF4
  8676                           prodl	equ	0xFF3
  8677                           intcon	equ	0xFF2
  8678                           intcon2	equ	0xFF1
  8679                           postinc0	equ	0xFEE
  8680                           wreg	equ	0xFE8
  8681                           postinc1	equ	0xFE6
  8682                           postdec1	equ	0xFE5
  8683                           fsr1h	equ	0xFE2
  8684                           fsr1l	equ	0xFE1
  8685                           indf2	equ	0xFDF
  8686                           postinc2	equ	0xFDE
  8687                           postdec2	equ	0xFDD
  8688                           fsr2h	equ	0xFDA
  8689                           fsr2l	equ	0xFD9
  8690                           status	equ	0xFD8
  8691                           
  8692 ;; *************** function _ADC_Initialize *****************
  8693 ;; Defined at:
  8694 ;;		line 13 in file "mcc_generated_files/adc.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;		None
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;		None
  8699 ;; Return value:  Size  Location     Type
  8700 ;;		None               void
  8701 ;; Registers used:
  8702 ;;		wreg, status,2
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8708 ;;      Params:         0       0       0       0       0       0       0
  8709 ;;      Locals:         0       0       0       0       0       0       0
  8710 ;;      Temps:          0       0       0       0       0       0       0
  8711 ;;      Totals:         0       0       0       0       0       0       0
  8712 ;;Total ram usage:        0 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    4
  8715 ;; This function calls:
  8716 ;;		Nothing
  8717 ;; This function is called by:
  8718 ;;		_SYSTEM_Initialize
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text44
  8723  003C20                     __ptext44:
  8724                           	opt stack 0
  8725  003C20                     _ADC_Initialize:
  8726                           	opt stack 25
  8727                           
  8728                           ;adc.c: 18: ADCON0 = 0x01;
  8729                           
  8730                           ;incstack = 0
  8731  003C20  0E01               	movlw	1
  8732  003C22  6EC2               	movwf	4034,c	;volatile
  8733                           
  8734                           ;adc.c: 21: ADCON1 = 0x80;
  8735  003C24  0E80               	movlw	128
  8736  003C26  6EC1               	movwf	4033,c	;volatile
  8737                           
  8738                           ;adc.c: 24: ADCON2 = 0xA9;
  8739  003C28  0EA9               	movlw	169
  8740  003C2A  6EC0               	movwf	4032,c	;volatile
  8741                           
  8742                           ;adc.c: 27: ADRESL = 0x00;
  8743  003C2C  0E00               	movlw	0
  8744  003C2E  6EC3               	movwf	4035,c	;volatile
  8745                           
  8746                           ;adc.c: 30: ADRESH = 0x00;
  8747  003C30  0E00               	movlw	0
  8748  003C32  6EC4               	movwf	4036,c	;volatile
  8749                           
  8750                           ;adc.c: 33: PIE1bits.ADIE = 1;
  8751  003C34  8C9D               	bsf	3997,6,c	;volatile
  8752  003C36  0012               	return	
  8753  003C38                     __end_of_ADC_Initialize:
  8754                           	opt stack 0
  8755                           tosu	equ	0xFFF
  8756                           tosh	equ	0xFFE
  8757                           tosl	equ	0xFFD
  8758                           pclath	equ	0xFFA
  8759                           tblptru	equ	0xFF8
  8760                           tblptrh	equ	0xFF7
  8761                           tblptrl	equ	0xFF6
  8762                           tablat	equ	0xFF5
  8763                           prodh	equ	0xFF4
  8764                           prodl	equ	0xFF3
  8765                           intcon	equ	0xFF2
  8766                           intcon2	equ	0xFF1
  8767                           postinc0	equ	0xFEE
  8768                           wreg	equ	0xFE8
  8769                           postinc1	equ	0xFE6
  8770                           postdec1	equ	0xFE5
  8771                           fsr1h	equ	0xFE2
  8772                           fsr1l	equ	0xFE1
  8773                           indf2	equ	0xFDF
  8774                           postinc2	equ	0xFDE
  8775                           postdec2	equ	0xFDD
  8776                           fsr2h	equ	0xFDA
  8777                           fsr2l	equ	0xFD9
  8778                           status	equ	0xFD8
  8779                           
  8780 ;; *************** function _RunBypas *****************
  8781 ;; Defined at:
  8782 ;;		line 129 in file "Bypass.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;		None
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;  batvolt         3    2[BANK0 ] float 
  8787 ;;  i               2    5[BANK0 ] int 
  8788 ;;  cellbyp         2    0[BANK0 ] int 
  8789 ;; Return value:  Size  Location     Type
  8790 ;;                  2  409[COMRAM] int 
  8791 ;; Registers used:
  8792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8793 ;; Tracked objects:
  8794 ;;		On entry : 0/0
  8795 ;;		On exit  : 0/0
  8796 ;;		Unchanged: 0/0
  8797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8798 ;;      Params:         0       0       0       0       0       0       0
  8799 ;;      Locals:         0       7       0       0       0       0       0
  8800 ;;      Temps:          0       0       0       0       0       0       0
  8801 ;;      Totals:         0       7       0       0       0       0       0
  8802 ;;Total ram usage:        7 bytes
  8803 ;; Hardware stack levels used:    1
  8804 ;; Hardware stack levels required when called:    6
  8805 ;; This function calls:
  8806 ;;		_Battery_Get
  8807 ;;		_SetBypass
  8808 ;;		___ftge
  8809 ;; This function is called by:
  8810 ;;		_main
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           	psect	text45
  8815  002E10                     __ptext45:
  8816                           	opt stack 0
  8817  002E10                     _RunBypas:
  8818                           	opt stack 24
  8819                           
  8820                           ;Bypass.c: 131: int cellbyp = 0;
  8821                           
  8822                           ;incstack = 0
  8823  002E10  0E00               	movlw	0
  8824  002E12  0100               	movlb	0	; () banked
  8825  002E14  6FC2               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8826  002E16  0E00               	movlw	0
  8827  002E18  0100               	movlb	0	; () banked
  8828  002E1A  6FC1               	movwf	RunBypas@cellbyp& (0+255),b
  8829                           
  8830                           ;Bypass.c: 132: int i = 0;
  8831  002E1C  0E00               	movlw	0
  8832  002E1E  0100               	movlb	0	; () banked
  8833  002E20  6FC7               	movwf	(RunBypas@i+1)& (0+255),b
  8834  002E22  0E00               	movlw	0
  8835  002E24  0100               	movlb	0	; () banked
  8836  002E26  6FC6               	movwf	RunBypas@i& (0+255),b
  8837                           
  8838                           ;Bypass.c: 133: float batvolt = 0;
  8839  002E28  0E00               	movlw	0
  8840  002E2A  0100               	movlb	0	; () banked
  8841  002E2C  6FC3               	movwf	RunBypas@batvolt& (0+255),b
  8842  002E2E  0E00               	movlw	0
  8843  002E30  0100               	movlb	0	; () banked
  8844  002E32  6FC4               	movwf	(RunBypas@batvolt+1)& (0+255),b
  8845  002E34  0E00               	movlw	0
  8846  002E36  0100               	movlb	0	; () banked
  8847  002E38  6FC5               	movwf	(RunBypas@batvolt+2)& (0+255),b
  8848                           
  8849                           ;Bypass.c: 135: for(i = 0; i<=9;i++)
  8850  002E3A  0E00               	movlw	0
  8851  002E3C  0100               	movlb	0	; () banked
  8852  002E3E  6FC7               	movwf	(RunBypas@i+1)& (0+255),b
  8853  002E40  0E00               	movlw	0
  8854  002E42  0100               	movlb	0	; () banked
  8855  002E44  6FC6               	movwf	RunBypas@i& (0+255),b
  8856  002E46                     
  8857                           ; BSR set to: 0
  8858  002E46  0100               	movlb	0	; () banked
  8859  002E48  51C7               	movf	(RunBypas@i+1)& (0+255),w,b
  8860  002E4A  0A80               	xorlw	128
  8861  002E4C  0F80               	addlw	-128
  8862  002E4E  0E0A               	movlw	10
  8863  002E50  B4D8               	btfsc	status,2,c
  8864  002E52  5DC6               	subwf	RunBypas@i& (0+255),w,b
  8865  002E54  B0D8               	btfsc	status,0,c
  8866  002E56  0012               	return	
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;Bypass.c: 136: {
  8870                           ;Bypass.c: 137: batvolt = Battery_Get(i);
  8871                           
  8872                           ; BSR set to: 0
  8873                           
  8874                           ; BSR set to: 0
  8875  002E58  C0C6  F021         	movff	RunBypas@i,Battery_Get@channelnum
  8876  002E5C  C0C7  F022         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  8877  002E60  ECE9  F01C         	call	_Battery_Get	;wreg free
  8878  002E64  C021  F0C3         	movff	?_Battery_Get,RunBypas@batvolt
  8879  002E68  C022  F0C4         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  8880  002E6C  C023  F0C5         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  8881                           
  8882                           ;Bypass.c: 139: if(batvolt >= 4.18)
  8883  002E70  C0C3  F021         	movff	RunBypas@batvolt,___ftge@ff1
  8884  002E74  C0C4  F022         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  8885  002E78  C0C5  F023         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  8886  002E7C  0EC3               	movlw	195
  8887  002E7E  6E24               	movwf	___ftge@ff2,c
  8888  002E80  0E85               	movlw	133
  8889  002E82  6E25               	movwf	___ftge@ff2+1,c
  8890  002E84  0E40               	movlw	64
  8891  002E86  6E26               	movwf	___ftge@ff2+2,c
  8892  002E88  EC11  F01A         	call	___ftge	;wreg free
  8893  002E8C  A0D8               	btfss	status,0,c
  8894  002E8E  D010               	goto	l5271
  8895                           
  8896                           ;Bypass.c: 140: {
  8897                           ;Bypass.c: 141: SetBypass(i,1);
  8898  002E90  C0C6  F01B         	movff	RunBypas@i,SetBypass@pin
  8899  002E94  C0C7  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8900  002E98  0E00               	movlw	0
  8901  002E9A  6E1E               	movwf	SetBypass@state+1,c
  8902  002E9C  0E01               	movlw	1
  8903  002E9E  6E1D               	movwf	SetBypass@state,c
  8904  002EA0  EC3B  F015         	call	_SetBypass	;wreg free
  8905                           
  8906                           ;Bypass.c: 142: cellbyp = 1;
  8907  002EA4  0E00               	movlw	0
  8908  002EA6  0100               	movlb	0	; () banked
  8909  002EA8  6FC2               	movwf	(RunBypas@cellbyp+1)& (0+255),b
  8910  002EAA  0E01               	movlw	1
  8911  002EAC  0100               	movlb	0	; () banked
  8912  002EAE  6FC1               	movwf	RunBypas@cellbyp& (0+255),b
  8913  002EB0                     l5271:
  8914                           
  8915                           ;Bypass.c: 143: }
  8916                           ;Bypass.c: 144: if(batvolt <= 4.15)
  8917  002EB0  0ECD               	movlw	205
  8918  002EB2  6E21               	movwf	___ftge@ff1,c
  8919  002EB4  0E84               	movlw	132
  8920  002EB6  6E22               	movwf	___ftge@ff1+1,c
  8921  002EB8  0E40               	movlw	64
  8922  002EBA  6E23               	movwf	___ftge@ff1+2,c
  8923  002EBC  C0C3  F024         	movff	RunBypas@batvolt,___ftge@ff2
  8924  002EC0  C0C4  F025         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  8925  002EC4  C0C5  F026         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  8926  002EC8  EC11  F01A         	call	___ftge	;wreg free
  8927  002ECC  A0D8               	btfss	status,0,c
  8928  002ECE  D00A               	goto	l5275
  8929                           
  8930                           ;Bypass.c: 145: {
  8931                           ;Bypass.c: 146: SetBypass(i,0);
  8932  002ED0  C0C6  F01B         	movff	RunBypas@i,SetBypass@pin
  8933  002ED4  C0C7  F01C         	movff	RunBypas@i+1,SetBypass@pin+1
  8934  002ED8  0E00               	movlw	0
  8935  002EDA  6E1E               	movwf	SetBypass@state+1,c
  8936  002EDC  0E00               	movlw	0
  8937  002EDE  6E1D               	movwf	SetBypass@state,c
  8938  002EE0  EC3B  F015         	call	_SetBypass	;wreg free
  8939  002EE4                     l5275:
  8940  002EE4  0100               	movlb	0	; () banked
  8941  002EE6  4BC6               	infsnz	RunBypas@i& (0+255),f,b
  8942  002EE8  2BC7               	incf	(RunBypas@i+1)& (0+255),f,b
  8943  002EEA  D7AD               	goto	L6
  8944  002EEC                     __end_of_RunBypas:
  8945                           	opt stack 0
  8946                           tosu	equ	0xFFF
  8947                           tosh	equ	0xFFE
  8948                           tosl	equ	0xFFD
  8949                           pclath	equ	0xFFA
  8950                           tblptru	equ	0xFF8
  8951                           tblptrh	equ	0xFF7
  8952                           tblptrl	equ	0xFF6
  8953                           tablat	equ	0xFF5
  8954                           prodh	equ	0xFF4
  8955                           prodl	equ	0xFF3
  8956                           intcon	equ	0xFF2
  8957                           intcon2	equ	0xFF1
  8958                           postinc0	equ	0xFEE
  8959                           wreg	equ	0xFE8
  8960                           postinc1	equ	0xFE6
  8961                           postdec1	equ	0xFE5
  8962                           fsr1h	equ	0xFE2
  8963                           fsr1l	equ	0xFE1
  8964                           indf2	equ	0xFDF
  8965                           postinc2	equ	0xFDE
  8966                           postdec2	equ	0xFDD
  8967                           fsr2h	equ	0xFDA
  8968                           fsr2l	equ	0xFD9
  8969                           status	equ	0xFD8
  8970                           
  8971 ;; *************** function _SetBypass *****************
  8972 ;; Defined at:
  8973 ;;		line 18 in file "Bypass.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  pin             2   26[COMRAM] int 
  8976 ;;  state           2   28[COMRAM] int 
  8977 ;; Auto vars:     Size  Location     Type
  8978 ;;		None
  8979 ;; Return value:  Size  Location     Type
  8980 ;;                  2   26[COMRAM] int 
  8981 ;; Registers used:
  8982 ;;		wreg, status,2, status,0
  8983 ;; Tracked objects:
  8984 ;;		On entry : 0/0
  8985 ;;		On exit  : 0/0
  8986 ;;		Unchanged: 0/0
  8987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8988 ;;      Params:         4       0       0       0       0       0       0
  8989 ;;      Locals:         0       0       0       0       0       0       0
  8990 ;;      Temps:          2       0       0       0       0       0       0
  8991 ;;      Totals:         6       0       0       0       0       0       0
  8992 ;;Total ram usage:        6 bytes
  8993 ;; Hardware stack levels used:    1
  8994 ;; Hardware stack levels required when called:    4
  8995 ;; This function calls:
  8996 ;;		Nothing
  8997 ;; This function is called by:
  8998 ;;		_RunBypas
  8999 ;; This function uses a non-reentrant model
  9000 ;;
  9001                           
  9002                           	psect	text46
  9003  002A76                     __ptext46:
  9004                           	opt stack 0
  9005  002A76                     _SetBypass:
  9006                           	opt stack 25
  9007                           
  9008                           ;Bypass.c: 20: switch (pin) {
  9009                           
  9010                           ; BSR set to: 0
  9011                           ;incstack = 0
  9012  002A76  D050               	goto	l4883
  9013  002A78                     l4861:
  9014                           
  9015                           ;Bypass.c: 22: if (state)
  9016  002A78  501E               	movf	SetBypass@state+1,w,c
  9017  002A7A  101D               	iorwf	SetBypass@state,w,c
  9018  002A7C  B4D8               	btfsc	status,2,c
  9019  002A7E  D002               	goto	l456
  9020                           
  9021                           ;Bypass.c: 23: {
  9022                           ;Bypass.c: 24: do { LATC5 = 1; } while(0);
  9023  002A80  8A8B               	bsf	3979,5,c	;volatile
  9024  002A82  0012               	return	
  9025  002A84                     l456:
  9026  002A84  9A8B               	bcf	3979,5,c	;volatile
  9027  002A86  0012               	return	
  9028  002A88                     l4863:
  9029                           
  9030                           ;Bypass.c: 32: if (state)
  9031  002A88  501E               	movf	SetBypass@state+1,w,c
  9032  002A8A  101D               	iorwf	SetBypass@state,w,c
  9033  002A8C  B4D8               	btfsc	status,2,c
  9034  002A8E  D002               	goto	l464
  9035                           
  9036                           ;Bypass.c: 33: {
  9037                           ;Bypass.c: 34: do { LATC4 = 1; } while(0);
  9038  002A90  888B               	bsf	3979,4,c	;volatile
  9039  002A92  0012               	return	
  9040  002A94                     l464:
  9041  002A94  988B               	bcf	3979,4,c	;volatile
  9042  002A96  0012               	return	
  9043  002A98                     l4865:
  9044                           
  9045                           ;Bypass.c: 42: if (state)
  9046  002A98  501E               	movf	SetBypass@state+1,w,c
  9047  002A9A  101D               	iorwf	SetBypass@state,w,c
  9048  002A9C  B4D8               	btfsc	status,2,c
  9049  002A9E  D002               	goto	l471
  9050                           
  9051                           ;Bypass.c: 43: {
  9052                           ;Bypass.c: 44: do { LATD3 = 1; } while(0);
  9053  002AA0  868C               	bsf	3980,3,c	;volatile
  9054  002AA2  0012               	return	
  9055  002AA4                     l471:
  9056  002AA4  968C               	bcf	3980,3,c	;volatile
  9057  002AA6  0012               	return	
  9058  002AA8                     l4867:
  9059                           
  9060                           ;Bypass.c: 52: if (state)
  9061  002AA8  501E               	movf	SetBypass@state+1,w,c
  9062  002AAA  101D               	iorwf	SetBypass@state,w,c
  9063  002AAC  B4D8               	btfsc	status,2,c
  9064  002AAE  D002               	goto	l478
  9065                           
  9066                           ;Bypass.c: 53: {
  9067                           ;Bypass.c: 54: do { LATD2 = 1; } while(0);
  9068  002AB0  848C               	bsf	3980,2,c	;volatile
  9069  002AB2  0012               	return	
  9070  002AB4                     l478:
  9071  002AB4  948C               	bcf	3980,2,c	;volatile
  9072  002AB6  0012               	return	
  9073  002AB8                     l4869:
  9074                           
  9075                           ;Bypass.c: 62: if (state)
  9076  002AB8  501E               	movf	SetBypass@state+1,w,c
  9077  002ABA  101D               	iorwf	SetBypass@state,w,c
  9078  002ABC  B4D8               	btfsc	status,2,c
  9079  002ABE  D002               	goto	l485
  9080                           
  9081                           ;Bypass.c: 63: {
  9082                           ;Bypass.c: 64: do { LATD1 = 1; } while(0);
  9083  002AC0  828C               	bsf	3980,1,c	;volatile
  9084  002AC2  0012               	return	
  9085  002AC4                     l485:
  9086  002AC4  928C               	bcf	3980,1,c	;volatile
  9087  002AC6  0012               	return	
  9088  002AC8                     l4871:
  9089                           
  9090                           ;Bypass.c: 72: if (state)
  9091  002AC8  501E               	movf	SetBypass@state+1,w,c
  9092  002ACA  101D               	iorwf	SetBypass@state,w,c
  9093  002ACC  B4D8               	btfsc	status,2,c
  9094  002ACE  D002               	goto	l492
  9095                           
  9096                           ;Bypass.c: 73: {
  9097                           ;Bypass.c: 74: do { LATD5 = 1; } while(0);
  9098  002AD0  8A8C               	bsf	3980,5,c	;volatile
  9099  002AD2  0012               	return	
  9100  002AD4                     l492:
  9101  002AD4  9A8C               	bcf	3980,5,c	;volatile
  9102  002AD6  0012               	return	
  9103  002AD8                     l4873:
  9104                           
  9105                           ;Bypass.c: 82: if (state)
  9106  002AD8  501E               	movf	SetBypass@state+1,w,c
  9107  002ADA  101D               	iorwf	SetBypass@state,w,c
  9108  002ADC  B4D8               	btfsc	status,2,c
  9109  002ADE  D002               	goto	l499
  9110                           
  9111                           ;Bypass.c: 83: {
  9112                           ;Bypass.c: 84: do { LATB0 = 1; } while(0);
  9113  002AE0  808A               	bsf	3978,0,c	;volatile
  9114  002AE2  0012               	return	
  9115  002AE4                     l499:
  9116  002AE4  908A               	bcf	3978,0,c	;volatile
  9117  002AE6  0012               	return	
  9118  002AE8                     l4875:
  9119                           
  9120                           ;Bypass.c: 92: if (state)
  9121  002AE8  501E               	movf	SetBypass@state+1,w,c
  9122  002AEA  101D               	iorwf	SetBypass@state,w,c
  9123  002AEC  B4D8               	btfsc	status,2,c
  9124  002AEE  D002               	goto	l506
  9125                           
  9126                           ;Bypass.c: 93: {
  9127                           ;Bypass.c: 94: do { LATB1 = 1; } while(0);
  9128  002AF0  828A               	bsf	3978,1,c	;volatile
  9129  002AF2  0012               	return	
  9130  002AF4                     l506:
  9131  002AF4  928A               	bcf	3978,1,c	;volatile
  9132  002AF6  0012               	return	
  9133  002AF8                     l4877:
  9134                           
  9135                           ;Bypass.c: 102: if (state)
  9136  002AF8  501E               	movf	SetBypass@state+1,w,c
  9137  002AFA  101D               	iorwf	SetBypass@state,w,c
  9138  002AFC  B4D8               	btfsc	status,2,c
  9139  002AFE  D002               	goto	l513
  9140                           
  9141                           ;Bypass.c: 103: {
  9142                           ;Bypass.c: 104: do { LATB3 = 1; } while(0);
  9143  002B00  868A               	bsf	3978,3,c	;volatile
  9144  002B02  0012               	return	
  9145  002B04                     l513:
  9146  002B04  968A               	bcf	3978,3,c	;volatile
  9147  002B06  0012               	return	
  9148  002B08                     l4879:
  9149                           
  9150                           ;Bypass.c: 112: if (state)
  9151  002B08  501E               	movf	SetBypass@state+1,w,c
  9152  002B0A  101D               	iorwf	SetBypass@state,w,c
  9153  002B0C  B4D8               	btfsc	status,2,c
  9154  002B0E  D002               	goto	l520
  9155                           
  9156                           ;Bypass.c: 113: {
  9157                           ;Bypass.c: 114: do { LATA0 = 1; } while(0);
  9158  002B10  8089               	bsf	3977,0,c	;volatile
  9159  002B12  0012               	return	
  9160  002B14                     l520:
  9161  002B14  9089               	bcf	3977,0,c	;volatile
  9162  002B16  0012               	return	
  9163  002B18                     l4883:
  9164  002B18  C01B  F01F         	movff	SetBypass@pin,??_SetBypass
  9165  002B1C  C01C  F020         	movff	SetBypass@pin+1,??_SetBypass+1
  9166                           
  9167                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9168                           ; Switch size 1, requested type "space"
  9169                           ; Number of cases is 1, Range of values is 0 to 0
  9170                           ; switch strategies available:
  9171                           ; Name         Instructions Cycles
  9172                           ; simple_byte            4     3 (average)
  9173                           ;	Chosen strategy is simple_byte
  9174  002B20  5020               	movf	??_SetBypass+1,w,c
  9175  002B22  0A00               	xorlw	0	; case 0
  9176  002B24  A4D8               	btfss	status,2,c
  9177  002B26  0012               	return	
  9178                           
  9179                           ; Switch size 1, requested type "space"
  9180                           ; Number of cases is 10, Range of values is 0 to 9
  9181                           ; switch strategies available:
  9182                           ; Name         Instructions Cycles
  9183                           ; simple_byte           31    16 (average)
  9184                           ;	Chosen strategy is simple_byte
  9185  002B28  501F               	movf	??_SetBypass,w,c
  9186  002B2A  0A00               	xorlw	0	; case 0
  9187  002B2C  B4D8               	btfsc	status,2,c
  9188  002B2E  D7A4               	goto	l4861
  9189  002B30  0A01               	xorlw	1	; case 1
  9190  002B32  B4D8               	btfsc	status,2,c
  9191  002B34  D7A9               	goto	l4863
  9192  002B36  0A03               	xorlw	3	; case 2
  9193  002B38  B4D8               	btfsc	status,2,c
  9194  002B3A  D7AE               	goto	l4865
  9195  002B3C  0A01               	xorlw	1	; case 3
  9196  002B3E  B4D8               	btfsc	status,2,c
  9197  002B40  D7B3               	goto	l4867
  9198  002B42  0A07               	xorlw	7	; case 4
  9199  002B44  B4D8               	btfsc	status,2,c
  9200  002B46  D7B8               	goto	l4869
  9201  002B48  0A01               	xorlw	1	; case 5
  9202  002B4A  B4D8               	btfsc	status,2,c
  9203  002B4C  D7BD               	goto	l4871
  9204  002B4E  0A03               	xorlw	3	; case 6
  9205  002B50  B4D8               	btfsc	status,2,c
  9206  002B52  D7C2               	goto	l4873
  9207  002B54  0A01               	xorlw	1	; case 7
  9208  002B56  B4D8               	btfsc	status,2,c
  9209  002B58  D7C7               	goto	l4875
  9210  002B5A  0A0F               	xorlw	15	; case 8
  9211  002B5C  B4D8               	btfsc	status,2,c
  9212  002B5E  D7CC               	goto	l4877
  9213  002B60  0A01               	xorlw	1	; case 9
  9214  002B62  A4D8               	btfss	status,2,c
  9215  002B64  0012               	return	
  9216  002B66  D7D0               	goto	l4879
  9217  002B68                     __end_of_SetBypass:
  9218                           	opt stack 0
  9219                           tosu	equ	0xFFF
  9220                           tosh	equ	0xFFE
  9221                           tosl	equ	0xFFD
  9222                           pclath	equ	0xFFA
  9223                           tblptru	equ	0xFF8
  9224                           tblptrh	equ	0xFF7
  9225                           tblptrl	equ	0xFF6
  9226                           tablat	equ	0xFF5
  9227                           prodh	equ	0xFF4
  9228                           prodl	equ	0xFF3
  9229                           intcon	equ	0xFF2
  9230                           intcon2	equ	0xFF1
  9231                           postinc0	equ	0xFEE
  9232                           wreg	equ	0xFE8
  9233                           postinc1	equ	0xFE6
  9234                           postdec1	equ	0xFE5
  9235                           fsr1h	equ	0xFE2
  9236                           fsr1l	equ	0xFE1
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           postdec2	equ	0xFDD
  9240                           fsr2h	equ	0xFDA
  9241                           fsr2l	equ	0xFD9
  9242                           status	equ	0xFD8
  9243                           
  9244 ;; *************** function _Battery_Get *****************
  9245 ;; Defined at:
  9246 ;;		line 87 in file "Battery.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;  channelnum      2   32[COMRAM] int 
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;		None
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  3   32[COMRAM] float 
  9253 ;; Registers used:
  9254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9260 ;;      Params:         3       0       0       0       0       0       0
  9261 ;;      Locals:         0       0       0       0       0       0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0
  9263 ;;      Totals:         3       0       0       0       0       0       0
  9264 ;;Total ram usage:        3 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    5
  9267 ;; This function calls:
  9268 ;;		___wmul
  9269 ;; This function is called by:
  9270 ;;		_RunBypas
  9271 ;;		_updateComms
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           	psect	text47
  9276  0039D2                     __ptext47:
  9277                           	opt stack 0
  9278  0039D2                     _Battery_Get:
  9279                           	opt stack 24
  9280                           
  9281                           ;Battery.c: 89: return Battery_Volt[channelnum];
  9282                           
  9283                           ;incstack = 0
  9284  0039D2  C021  F01B         	movff	Battery_Get@channelnum,___wmul@multiplier
  9285  0039D6  C022  F01C         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  9286  0039DA  0E00               	movlw	0
  9287  0039DC  6E1E               	movwf	___wmul@multiplicand+1,c
  9288  0039DE  0E03               	movlw	3
  9289  0039E0  6E1D               	movwf	___wmul@multiplicand,c
  9290  0039E2  EC6E  F01D         	call	___wmul	;wreg free
  9291  0039E6  0101               	movlb	1	; () banked
  9292  0039E8  0E70               	movlw	low _Battery_Volt
  9293  0039EA  241B               	addwf	?___wmul,w,c
  9294  0039EC  6ED9               	movwf	fsr2l,c
  9295  0039EE  0101               	movlb	1	; () banked
  9296  0039F0  0E01               	movlw	high _Battery_Volt
  9297  0039F2  201C               	addwfc	?___wmul+1,w,c
  9298  0039F4  6EDA               	movwf	fsr2h,c
  9299  0039F6  CFDE F021          	movff	postinc2,?_Battery_Get
  9300  0039FA  CFDE F022          	movff	postinc2,?_Battery_Get+1
  9301  0039FE  CFDD F023          	movff	postdec2,?_Battery_Get+2
  9302  003A02  0012               	return	
  9303  003A04                     __end_of_Battery_Get:
  9304                           	opt stack 0
  9305                           tosu	equ	0xFFF
  9306                           tosh	equ	0xFFE
  9307                           tosl	equ	0xFFD
  9308                           pclath	equ	0xFFA
  9309                           tblptru	equ	0xFF8
  9310                           tblptrh	equ	0xFF7
  9311                           tblptrl	equ	0xFF6
  9312                           tablat	equ	0xFF5
  9313                           prodh	equ	0xFF4
  9314                           prodl	equ	0xFF3
  9315                           intcon	equ	0xFF2
  9316                           intcon2	equ	0xFF1
  9317                           postinc0	equ	0xFEE
  9318                           wreg	equ	0xFE8
  9319                           postinc1	equ	0xFE6
  9320                           postdec1	equ	0xFE5
  9321                           fsr1h	equ	0xFE2
  9322                           fsr1l	equ	0xFE1
  9323                           indf2	equ	0xFDF
  9324                           postinc2	equ	0xFDE
  9325                           postdec2	equ	0xFDD
  9326                           fsr2h	equ	0xFDA
  9327                           fsr2l	equ	0xFD9
  9328                           status	equ	0xFD8
  9329                           
  9330 ;; *************** function _Battery_Fault *****************
  9331 ;; Defined at:
  9332 ;;		line 66 in file "Battery.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  i               2   42[COMRAM] int 
  9337 ;;  fault           1   41[COMRAM] unsigned char 
  9338 ;; Return value:  Size  Location     Type
  9339 ;;                  1    wreg      unsigned char 
  9340 ;; Registers used:
  9341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9347 ;;      Params:         0       0       0       0       0       0       0
  9348 ;;      Locals:         3       0       0       0       0       0       0
  9349 ;;      Temps:          0       0       0       0       0       0       0
  9350 ;;      Totals:         3       0       0       0       0       0       0
  9351 ;;Total ram usage:        3 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; Hardware stack levels required when called:    5
  9354 ;; This function calls:
  9355 ;;		___ftge
  9356 ;;		___wmul
  9357 ;; This function is called by:
  9358 ;;		_main
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text48
  9363  003072                     __ptext48:
  9364                           	opt stack 0
  9365  003072                     _Battery_Fault:
  9366                           	opt stack 25
  9367                           
  9368                           ;Battery.c: 68: char fault = 0;
  9369                           
  9370                           ; BSR set to: 1
  9371                           ;incstack = 0
  9372  003072  0E00               	movlw	0
  9373  003074  6E2A               	movwf	Battery_Fault@fault,c
  9374                           
  9375                           ;Battery.c: 69: for(int i = 0;i<9;i++)
  9376  003076  0E00               	movlw	0
  9377  003078  6E2C               	movwf	Battery_Fault@i+1,c
  9378  00307A  0E00               	movlw	0
  9379  00307C  6E2B               	movwf	Battery_Fault@i,c
  9380  00307E  502C               	movf	Battery_Fault@i+1,w,c
  9381  003080  0A80               	xorlw	128
  9382  003082  0F80               	addlw	-128
  9383  003084  0E09               	movlw	9
  9384  003086  B4D8               	btfsc	status,2,c
  9385  003088  5C2B               	subwf	Battery_Fault@i,w,c
  9386  00308A  B0D8               	btfsc	status,0,c
  9387  00308C  0012               	return	
  9388                           
  9389                           ;Battery.c: 70: {
  9390                           ;Battery.c: 71: if ((3.00 > Battery_Volt[i]) || (4.21 > Battery_Volt[i]))
  9391  00308E  C02B  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9392  003092  C02C  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9393  003096  0E00               	movlw	0
  9394  003098  6E1E               	movwf	___wmul@multiplicand+1,c
  9395  00309A  0E03               	movlw	3
  9396  00309C  6E1D               	movwf	___wmul@multiplicand,c
  9397  00309E  EC6E  F01D         	call	___wmul	;wreg free
  9398  0030A2  0101               	movlb	1	; () banked
  9399  0030A4  0E70               	movlw	low _Battery_Volt
  9400  0030A6  241B               	addwf	?___wmul,w,c
  9401  0030A8  6ED9               	movwf	fsr2l,c
  9402  0030AA  0101               	movlb	1	; () banked
  9403  0030AC  0E01               	movlw	high _Battery_Volt
  9404  0030AE  201C               	addwfc	?___wmul+1,w,c
  9405  0030B0  6EDA               	movwf	fsr2h,c
  9406  0030B2  CFDE F021          	movff	postinc2,___ftge@ff1
  9407  0030B6  CFDE F022          	movff	postinc2,___ftge@ff1+1
  9408  0030BA  CFDD F023          	movff	postdec2,___ftge@ff1+2
  9409  0030BE  0E00               	movlw	0
  9410  0030C0  6E24               	movwf	___ftge@ff2,c
  9411  0030C2  0E40               	movlw	64
  9412  0030C4  6E25               	movwf	___ftge@ff2+1,c
  9413  0030C6  0E40               	movlw	64
  9414  0030C8  6E26               	movwf	___ftge@ff2+2,c
  9415  0030CA  EC11  F01A         	call	___ftge	;wreg free
  9416  0030CE  A0D8               	btfss	status,0,c
  9417  0030D0  D022               	goto	l5205
  9418  0030D2  C02B  F01B         	movff	Battery_Fault@i,___wmul@multiplier
  9419  0030D6  C02C  F01C         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  9420  0030DA  0E00               	movlw	0
  9421  0030DC  6E1E               	movwf	___wmul@multiplicand+1,c
  9422  0030DE  0E03               	movlw	3
  9423  0030E0  6E1D               	movwf	___wmul@multiplicand,c
  9424  0030E2  EC6E  F01D         	call	___wmul	;wreg free
  9425  0030E6  0101               	movlb	1	; () banked
  9426  0030E8  0E70               	movlw	low _Battery_Volt
  9427  0030EA  241B               	addwf	?___wmul,w,c
  9428  0030EC  6ED9               	movwf	fsr2l,c
  9429  0030EE  0101               	movlb	1	; () banked
  9430  0030F0  0E01               	movlw	high _Battery_Volt
  9431  0030F2  201C               	addwfc	?___wmul+1,w,c
  9432  0030F4  6EDA               	movwf	fsr2h,c
  9433  0030F6  CFDE F021          	movff	postinc2,___ftge@ff1
  9434  0030FA  CFDE F022          	movff	postinc2,___ftge@ff1+1
  9435  0030FE  CFDD F023          	movff	postdec2,___ftge@ff1+2
  9436  003102  0EB8               	movlw	184
  9437  003104  6E24               	movwf	___ftge@ff2,c
  9438  003106  0E86               	movlw	134
  9439  003108  6E25               	movwf	___ftge@ff2+1,c
  9440  00310A  0E40               	movlw	64
  9441  00310C  6E26               	movwf	___ftge@ff2+2,c
  9442  00310E  EC11  F01A         	call	___ftge	;wreg free
  9443  003112  B0D8               	btfsc	status,0,c
  9444  003114  D002               	goto	l5207
  9445  003116                     l5205:
  9446                           
  9447                           ;Battery.c: 72: {
  9448                           ;Battery.c: 73: fault = 1;
  9449  003116  0E01               	movlw	1
  9450  003118  6E2A               	movwf	Battery_Fault@fault,c
  9451  00311A                     l5207:
  9452  00311A  4A2B               	infsnz	Battery_Fault@i,f,c
  9453  00311C  2A2C               	incf	Battery_Fault@i+1,f,c
  9454  00311E  D7AF               	goto	L7
  9455  003120                     __end_of_Battery_Fault:
  9456                           	opt stack 0
  9457                           tosu	equ	0xFFF
  9458                           tosh	equ	0xFFE
  9459                           tosl	equ	0xFFD
  9460                           pclath	equ	0xFFA
  9461                           tblptru	equ	0xFF8
  9462                           tblptrh	equ	0xFF7
  9463                           tblptrl	equ	0xFF6
  9464                           tablat	equ	0xFF5
  9465                           prodh	equ	0xFF4
  9466                           prodl	equ	0xFF3
  9467                           intcon	equ	0xFF2
  9468                           intcon2	equ	0xFF1
  9469                           postinc0	equ	0xFEE
  9470                           wreg	equ	0xFE8
  9471                           postinc1	equ	0xFE6
  9472                           postdec1	equ	0xFE5
  9473                           fsr1h	equ	0xFE2
  9474                           fsr1l	equ	0xFE1
  9475                           indf2	equ	0xFDF
  9476                           postinc2	equ	0xFDE
  9477                           postdec2	equ	0xFDD
  9478                           fsr2h	equ	0xFDA
  9479                           fsr2l	equ	0xFD9
  9480                           status	equ	0xFD8
  9481                           
  9482 ;; *************** function ___ftge *****************
  9483 ;; Defined at:
  9484 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;  ff1             3   32[COMRAM] float 
  9487 ;;  ff2             3   35[COMRAM] float 
  9488 ;; Auto vars:     Size  Location     Type
  9489 ;;		None
  9490 ;; Return value:  Size  Location     Type
  9491 ;;		None               void
  9492 ;; Registers used:
  9493 ;;		wreg, status,2, status,0
  9494 ;; Tracked objects:
  9495 ;;		On entry : 0/0
  9496 ;;		On exit  : 0/0
  9497 ;;		Unchanged: 0/0
  9498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9499 ;;      Params:         6       0       0       0       0       0       0
  9500 ;;      Locals:         0       0       0       0       0       0       0
  9501 ;;      Temps:          3       0       0       0       0       0       0
  9502 ;;      Totals:         9       0       0       0       0       0       0
  9503 ;;Total ram usage:        9 bytes
  9504 ;; Hardware stack levels used:    1
  9505 ;; Hardware stack levels required when called:    4
  9506 ;; This function calls:
  9507 ;;		Nothing
  9508 ;; This function is called by:
  9509 ;;		_Battery_Fault
  9510 ;;		_Temp_Fault
  9511 ;;		_RunBypas
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           	psect	text49
  9516  003422                     __ptext49:
  9517                           	opt stack 0
  9518  003422                     ___ftge:
  9519                           	opt stack 25
  9520                           
  9521                           ;incstack = 0
  9522  003422  AE23               	btfss	___ftge@ff1+2,7,c
  9523  003424  D016               	goto	l5155
  9524  003426  C021  F027         	movff	___ftge@ff1,??___ftge
  9525  00342A  C022  F028         	movff	___ftge@ff1+1,??___ftge+1
  9526  00342E  C023  F029         	movff	___ftge@ff1+2,??___ftge+2
  9527  003432  1E27               	comf	??___ftge,f,c
  9528  003434  1E28               	comf	??___ftge+1,f,c
  9529  003436  1E29               	comf	??___ftge+2,f,c
  9530  003438  2A27               	incf	??___ftge,f,c
  9531  00343A  0E00               	movlw	0
  9532  00343C  2228               	addwfc	??___ftge+1,f,c
  9533  00343E  2229               	addwfc	??___ftge+2,f,c
  9534  003440  0E00               	movlw	0
  9535  003442  2427               	addwf	??___ftge,w,c
  9536  003444  6E21               	movwf	___ftge@ff1,c
  9537  003446  0E00               	movlw	0
  9538  003448  2028               	addwfc	??___ftge+1,w,c
  9539  00344A  6E22               	movwf	___ftge@ff1+1,c
  9540  00344C  0E80               	movlw	128
  9541  00344E  2029               	addwfc	??___ftge+2,w,c
  9542  003450  6E23               	movwf	___ftge@ff1+2,c
  9543  003452                     l5155:
  9544  003452  AE26               	btfss	___ftge@ff2+2,7,c
  9545  003454  D016               	goto	l5159
  9546  003456  C024  F027         	movff	___ftge@ff2,??___ftge
  9547  00345A  C025  F028         	movff	___ftge@ff2+1,??___ftge+1
  9548  00345E  C026  F029         	movff	___ftge@ff2+2,??___ftge+2
  9549  003462  1E27               	comf	??___ftge,f,c
  9550  003464  1E28               	comf	??___ftge+1,f,c
  9551  003466  1E29               	comf	??___ftge+2,f,c
  9552  003468  2A27               	incf	??___ftge,f,c
  9553  00346A  0E00               	movlw	0
  9554  00346C  2228               	addwfc	??___ftge+1,f,c
  9555  00346E  2229               	addwfc	??___ftge+2,f,c
  9556  003470  0E00               	movlw	0
  9557  003472  2427               	addwf	??___ftge,w,c
  9558  003474  6E24               	movwf	___ftge@ff2,c
  9559  003476  0E00               	movlw	0
  9560  003478  2028               	addwfc	??___ftge+1,w,c
  9561  00347A  6E25               	movwf	___ftge@ff2+1,c
  9562  00347C  0E80               	movlw	128
  9563  00347E  2029               	addwfc	??___ftge+2,w,c
  9564  003480  6E26               	movwf	___ftge@ff2+2,c
  9565  003482                     l5159:
  9566  003482  0E00               	movlw	0
  9567  003484  1A21               	xorwf	___ftge@ff1,f,c
  9568  003486  0E00               	movlw	0
  9569  003488  1A22               	xorwf	___ftge@ff1+1,f,c
  9570  00348A  0E80               	movlw	128
  9571  00348C  1A23               	xorwf	___ftge@ff1+2,f,c
  9572  00348E  0E00               	movlw	0
  9573  003490  1A24               	xorwf	___ftge@ff2,f,c
  9574  003492  0E00               	movlw	0
  9575  003494  1A25               	xorwf	___ftge@ff2+1,f,c
  9576  003496  0E80               	movlw	128
  9577  003498  1A26               	xorwf	___ftge@ff2+2,f,c
  9578  00349A  5024               	movf	___ftge@ff2,w,c
  9579  00349C  5C21               	subwf	___ftge@ff1,w,c
  9580  00349E  5025               	movf	___ftge@ff2+1,w,c
  9581  0034A0  5822               	subwfb	___ftge@ff1+1,w,c
  9582  0034A2  5026               	movf	___ftge@ff2+2,w,c
  9583  0034A4  5823               	subwfb	___ftge@ff1+2,w,c
  9584  0034A6  B0D8               	btfsc	status,0,c
  9585  0034A8  D002               	goto	l5165
  9586  0034AA  90D8               	bcf	status,0,c
  9587  0034AC  0012               	return	
  9588  0034AE                     l5165:
  9589  0034AE  80D8               	bsf	status,0,c
  9590  0034B0  0012               	return	
  9591  0034B2                     __end_of___ftge:
  9592                           	opt stack 0
  9593                           tosu	equ	0xFFF
  9594                           tosh	equ	0xFFE
  9595                           tosl	equ	0xFFD
  9596                           pclath	equ	0xFFA
  9597                           tblptru	equ	0xFF8
  9598                           tblptrh	equ	0xFF7
  9599                           tblptrl	equ	0xFF6
  9600                           tablat	equ	0xFF5
  9601                           prodh	equ	0xFF4
  9602                           prodl	equ	0xFF3
  9603                           intcon	equ	0xFF2
  9604                           intcon2	equ	0xFF1
  9605                           postinc0	equ	0xFEE
  9606                           wreg	equ	0xFE8
  9607                           postinc1	equ	0xFE6
  9608                           postdec1	equ	0xFE5
  9609                           fsr1h	equ	0xFE2
  9610                           fsr1l	equ	0xFE1
  9611                           indf2	equ	0xFDF
  9612                           postinc2	equ	0xFDE
  9613                           postdec2	equ	0xFDD
  9614                           fsr2h	equ	0xFDA
  9615                           fsr2l	equ	0xFD9
  9616                           status	equ	0xFD8
  9617                           
  9618 ;; *************** function _Battery_Convert *****************
  9619 ;; Defined at:
  9620 ;;		line 33 in file "Battery.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;		None
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  x               2   46[BANK0 ] int 
  9625 ;; Return value:  Size  Location     Type
  9626 ;;		None               void
  9627 ;; Registers used:
  9628 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9634 ;;      Params:         0       0       0       0       0       0       0
  9635 ;;      Locals:         0       2       0       0       0       0       0
  9636 ;;      Temps:          0       2       0       0       0       0       0
  9637 ;;      Totals:         0       4       0       0       0       0       0
  9638 ;;Total ram usage:        4 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:    7
  9641 ;; This function calls:
  9642 ;;		_Battery_Filter
  9643 ;;		___altoft
  9644 ;;		___ftdiv
  9645 ;;		___ftmul
  9646 ;;		___wmul
  9647 ;; This function is called by:
  9648 ;;		_main
  9649 ;; This function uses a non-reentrant model
  9650 ;;
  9651                           
  9652                           	psect	text50
  9653  002C52                     __ptext50:
  9654                           	opt stack 0
  9655  002C52                     _Battery_Convert:
  9656                           	opt stack 23
  9657                           
  9658                           ;Battery.c: 35: for(int x = 0; x < 9; x++)
  9659                           
  9660                           ;incstack = 0
  9661  002C52  0E00               	movlw	0
  9662  002C54  0100               	movlb	0	; () banked
  9663  002C56  6FF0               	movwf	(Battery_Convert@x+1)& (0+255),b
  9664  002C58  0E00               	movlw	0
  9665  002C5A  0100               	movlb	0	; () banked
  9666  002C5C  6FEF               	movwf	Battery_Convert@x& (0+255),b
  9667  002C5E                     
  9668                           ; BSR set to: 0
  9669  002C5E  0100               	movlb	0	; () banked
  9670  002C60  51F0               	movf	(Battery_Convert@x+1)& (0+255),w,b
  9671  002C62  0A80               	xorlw	128
  9672  002C64  0F80               	addlw	-128
  9673  002C66  0E09               	movlw	9
  9674  002C68  B4D8               	btfsc	status,2,c
  9675  002C6A  5DEF               	subwf	Battery_Convert@x& (0+255),w,b
  9676  002C6C  B0D8               	btfsc	status,0,c
  9677  002C6E  D05E               	goto	l5193
  9678                           
  9679                           ; BSR set to: 0
  9680                           ;Battery.c: 36: {
  9681                           ;Battery.c: 37: TempBattery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0);
  9682                           
  9683                           ; BSR set to: 0
  9684                           
  9685                           ; BSR set to: 0
  9686  002C70  C0EF  F01B         	movff	Battery_Convert@x,___wmul@multiplier
  9687  002C74  C0F0  F01C         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  9688  002C78  0E00               	movlw	0
  9689  002C7A  6E1E               	movwf	___wmul@multiplicand+1,c
  9690  002C7C  0E03               	movlw	3
  9691  002C7E  6E1D               	movwf	___wmul@multiplicand,c
  9692  002C80  EC6E  F01D         	call	___wmul	;wreg free
  9693  002C84  0101               	movlb	1	; () banked
  9694  002C86  0E52               	movlw	low _TempBattery_Volt
  9695  002C88  241B               	addwf	?___wmul,w,c
  9696  002C8A  6ED9               	movwf	fsr2l,c
  9697  002C8C  0101               	movlb	1	; () banked
  9698  002C8E  0E01               	movlw	high _TempBattery_Volt
  9699  002C90  201C               	addwfc	?___wmul+1,w,c
  9700  002C92  6EDA               	movwf	fsr2h,c
  9701  002C94  0E00               	movlw	0
  9702  002C96  0100               	movlb	0	; () banked
  9703  002C98  6FC4               	movwf	___ftdiv@f2& (0+255),b
  9704  002C9A  0E80               	movlw	128
  9705  002C9C  0100               	movlb	0	; () banked
  9706  002C9E  6FC5               	movwf	(___ftdiv@f2+1)& (0+255),b
  9707  002CA0  0E44               	movlw	68
  9708  002CA2  0100               	movlb	0	; () banked
  9709  002CA4  6FC6               	movwf	(___ftdiv@f2+2)& (0+255),b
  9710  002CA6  0E60               	movlw	low _Battery_Adc
  9711  002CA8  0100               	movlb	0	; () banked
  9712  002CAA  6FED               	movwf	??_Battery_Convert& (0+255),b
  9713  002CAC  0E00               	movlw	high _Battery_Adc
  9714  002CAE  6FEE               	movwf	(??_Battery_Convert+1)& (0+255),b
  9715  002CB0  90D8               	bcf	status,0,c
  9716  002CB2  0100               	movlb	0	; () banked
  9717  002CB4  35EF               	rlcf	Battery_Convert@x& (0+255),w,b
  9718  002CB6  6EE1               	movwf	fsr1l,c
  9719  002CB8  0100               	movlb	0	; () banked
  9720  002CBA  35F0               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  9721  002CBC  6EE2               	movwf	fsr1h,c
  9722  002CBE  90D8               	bcf	status,0,c
  9723  002CC0  36E1               	rlcf	fsr1l,f,c
  9724  002CC2  36E2               	rlcf	fsr1h,f,c
  9725  002CC4  0100               	movlb	0	; () banked
  9726  002CC6  51ED               	movf	??_Battery_Convert& (0+255),w,b
  9727  002CC8  26E1               	addwf	fsr1l,f,c
  9728  002CCA  0100               	movlb	0	; () banked
  9729  002CCC  51EE               	movf	(??_Battery_Convert+1)& (0+255),w,b
  9730  002CCE  22E2               	addwfc	fsr1h,f,c
  9731  002CD0  CFE6 F023          	movff	postinc1,___altoft@c
  9732  002CD4  CFE6 F024          	movff	postinc1,___altoft@c+1
  9733  002CD8  CFE6 F025          	movff	postinc1,___altoft@c+2
  9734  002CDC  CFE6 F026          	movff	postinc1,___altoft@c+3
  9735  002CE0  EC59  F01A         	call	___altoft	;wreg free
  9736  002CE4  C023  F0C1         	movff	?___altoft,___ftdiv@f1
  9737  002CE8  C024  F0C2         	movff	?___altoft+1,___ftdiv@f1+1
  9738  002CEC  C025  F0C3         	movff	?___altoft+2,___ftdiv@f1+2
  9739  002CF0  EC56  F012         	call	___ftdiv	;wreg free
  9740  002CF4  C0C1  F0D0         	movff	?___ftdiv,___ftmul@f1
  9741  002CF8  C0C2  F0D1         	movff	?___ftdiv+1,___ftmul@f1+1
  9742  002CFC  C0C3  F0D2         	movff	?___ftdiv+2,___ftmul@f1+2
  9743  002D00  0E00               	movlw	0
  9744  002D02  0100               	movlb	0	; () banked
  9745  002D04  6FD3               	movwf	___ftmul@f2& (0+255),b
  9746  002D06  0EA0               	movlw	160
  9747  002D08  0100               	movlb	0	; () banked
  9748  002D0A  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
  9749  002D0C  0E40               	movlw	64
  9750  002D0E  0100               	movlb	0	; () banked
  9751  002D10  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
  9752  002D12  ECC5  F00E         	call	___ftmul	;wreg free
  9753  002D16  C0D0  FFDE         	movff	?___ftmul,postinc2
  9754  002D1A  C0D1  FFDE         	movff	?___ftmul+1,postinc2
  9755  002D1E  C0D2  FFDD         	movff	?___ftmul+2,postdec2
  9756  002D22  52DD               	movf	postdec2,f,c
  9757  002D24  0100               	movlb	0	; () banked
  9758  002D26  4BEF               	infsnz	Battery_Convert@x& (0+255),f,b
  9759  002D28  2BF0               	incf	(Battery_Convert@x+1)& (0+255),f,b
  9760  002D2A  D799               	goto	L8
  9761  002D2C                     l5193:
  9762                           
  9763                           ; BSR set to: 0
  9764                           ;Battery.c: 38: }
  9765                           ;Battery.c: 39: Battery_Filter();
  9766  002D2C  ECA5  F011         	call	_Battery_Filter	;wreg free
  9767  002D30  0012               	return	
  9768  002D32                     __end_of_Battery_Convert:
  9769                           	opt stack 0
  9770                           tosu	equ	0xFFF
  9771                           tosh	equ	0xFFE
  9772                           tosl	equ	0xFFD
  9773                           pclath	equ	0xFFA
  9774                           tblptru	equ	0xFF8
  9775                           tblptrh	equ	0xFF7
  9776                           tblptrl	equ	0xFF6
  9777                           tablat	equ	0xFF5
  9778                           prodh	equ	0xFF4
  9779                           prodl	equ	0xFF3
  9780                           intcon	equ	0xFF2
  9781                           intcon2	equ	0xFF1
  9782                           postinc0	equ	0xFEE
  9783                           wreg	equ	0xFE8
  9784                           postinc1	equ	0xFE6
  9785                           postdec1	equ	0xFE5
  9786                           fsr1h	equ	0xFE2
  9787                           fsr1l	equ	0xFE1
  9788                           indf2	equ	0xFDF
  9789                           postinc2	equ	0xFDE
  9790                           postdec2	equ	0xFDD
  9791                           fsr2h	equ	0xFDA
  9792                           fsr2l	equ	0xFD9
  9793                           status	equ	0xFD8
  9794                           
  9795 ;; *************** function ___ftdiv *****************
  9796 ;; Defined at:
  9797 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;  f1              3    0[BANK0 ] float 
  9800 ;;  f2              3    3[BANK0 ] float 
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;  f3              3   10[BANK0 ] float 
  9803 ;;  sign            1   14[BANK0 ] unsigned char 
  9804 ;;  exp             1   13[BANK0 ] unsigned char 
  9805 ;;  cntr            1    9[BANK0 ] unsigned char 
  9806 ;; Return value:  Size  Location     Type
  9807 ;;                  3    0[BANK0 ] float 
  9808 ;; Registers used:
  9809 ;;		wreg, status,2, status,0, cstack
  9810 ;; Tracked objects:
  9811 ;;		On entry : 0/0
  9812 ;;		On exit  : 0/0
  9813 ;;		Unchanged: 0/0
  9814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9815 ;;      Params:         0       6       0       0       0       0       0
  9816 ;;      Locals:         0       6       0       0       0       0       0
  9817 ;;      Temps:          0       3       0       0       0       0       0
  9818 ;;      Totals:         0      15       0       0       0       0       0
  9819 ;;Total ram usage:       15 bytes
  9820 ;; Hardware stack levels used:    1
  9821 ;; Hardware stack levels required when called:    5
  9822 ;; This function calls:
  9823 ;;		___ftpack
  9824 ;; This function is called by:
  9825 ;;		_Battery_Convert
  9826 ;;		_Temp_Convert
  9827 ;; This function uses a non-reentrant model
  9828 ;;
  9829                           
  9830                           	psect	text51
  9831  0024AC                     __ptext51:
  9832                           	opt stack 0
  9833  0024AC                     ___ftdiv:
  9834                           	opt stack 24
  9835                           
  9836                           ;incstack = 0
  9837  0024AC  0100               	movlb	0	; () banked
  9838  0024AE  C0C3  F0C7         	movff	___ftdiv@f1+2,??___ftdiv
  9839  0024B2  0100               	movlb	0	; () banked
  9840  0024B4  6BC8               	clrf	(??___ftdiv+1)& (0+255),b
  9841  0024B6  6BC9               	clrf	(??___ftdiv+2)& (0+255),b
  9842  0024B8  0100               	movlb	0	; () banked
  9843  0024BA  35C2               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9844  0024BC  0100               	movlb	0	; () banked
  9845  0024BE  37C7               	rlcf	??___ftdiv& (0+255),f,b
  9846  0024C0  E301               	bnc	u5751
  9847  0024C2  81C8               	bsf	(??___ftdiv+1)& (0+255),0,b
  9848  0024C4                     u5751:
  9849  0024C4  0100               	movlb	0	; () banked
  9850  0024C6  51C7               	movf	??___ftdiv& (0+255),w,b
  9851  0024C8  0100               	movlb	0	; () banked
  9852  0024CA  6FCE               	movwf	___ftdiv@exp& (0+255),b
  9853  0024CC  0100               	movlb	0	; () banked
  9854  0024CE  67CE               	tstfsz	___ftdiv@exp& (0+255),b
  9855  0024D0  D00A               	goto	l5105
  9856                           
  9857                           ; BSR set to: 0
  9858  0024D2  0E00               	movlw	0
  9859  0024D4  0100               	movlb	0	; () banked
  9860  0024D6  6FC1               	movwf	?___ftdiv& (0+255),b
  9861  0024D8  0E00               	movlw	0
  9862  0024DA  0100               	movlb	0	; () banked
  9863  0024DC  6FC2               	movwf	(?___ftdiv+1)& (0+255),b
  9864  0024DE  0E00               	movlw	0
  9865  0024E0  0100               	movlb	0	; () banked
  9866  0024E2  6FC3               	movwf	(?___ftdiv+2)& (0+255),b
  9867  0024E4  0012               	return	
  9868  0024E6                     l5105:
  9869                           
  9870                           ; BSR set to: 0
  9871  0024E6  0100               	movlb	0	; () banked
  9872  0024E8  C0C6  F0C7         	movff	___ftdiv@f2+2,??___ftdiv
  9873  0024EC  0100               	movlb	0	; () banked
  9874  0024EE  6BC8               	clrf	(??___ftdiv+1)& (0+255),b
  9875  0024F0  6BC9               	clrf	(??___ftdiv+2)& (0+255),b
  9876  0024F2  0100               	movlb	0	; () banked
  9877  0024F4  35C5               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9878  0024F6  0100               	movlb	0	; () banked
  9879  0024F8  37C7               	rlcf	??___ftdiv& (0+255),f,b
  9880  0024FA  E301               	bnc	u5771
  9881  0024FC  81C8               	bsf	(??___ftdiv+1)& (0+255),0,b
  9882  0024FE                     u5771:
  9883  0024FE  0100               	movlb	0	; () banked
  9884  002500  51C7               	movf	??___ftdiv& (0+255),w,b
  9885  002502  0100               	movlb	0	; () banked
  9886  002504  6FCF               	movwf	___ftdiv@sign& (0+255),b
  9887  002506  0100               	movlb	0	; () banked
  9888  002508  67CF               	tstfsz	___ftdiv@sign& (0+255),b
  9889  00250A  D00A               	goto	l5111
  9890                           
  9891                           ; BSR set to: 0
  9892  00250C  0E00               	movlw	0
  9893  00250E  0100               	movlb	0	; () banked
  9894  002510  6FC1               	movwf	?___ftdiv& (0+255),b
  9895  002512  0E00               	movlw	0
  9896  002514  0100               	movlb	0	; () banked
  9897  002516  6FC2               	movwf	(?___ftdiv+1)& (0+255),b
  9898  002518  0E00               	movlw	0
  9899  00251A  0100               	movlb	0	; () banked
  9900  00251C  6FC3               	movwf	(?___ftdiv+2)& (0+255),b
  9901  00251E  0012               	return	
  9902  002520                     l5111:
  9903                           
  9904                           ; BSR set to: 0
  9905  002520  0E00               	movlw	0
  9906  002522  0100               	movlb	0	; () banked
  9907  002524  6FCB               	movwf	___ftdiv@f3& (0+255),b
  9908  002526  0E00               	movlw	0
  9909  002528  0100               	movlb	0	; () banked
  9910  00252A  6FCC               	movwf	(___ftdiv@f3+1)& (0+255),b
  9911  00252C  0E00               	movlw	0
  9912  00252E  0100               	movlb	0	; () banked
  9913  002530  6FCD               	movwf	(___ftdiv@f3+2)& (0+255),b
  9914                           
  9915                           ; BSR set to: 0
  9916  002532  0100               	movlb	0	; () banked
  9917  002534  51CF               	movf	___ftdiv@sign& (0+255),w,b
  9918  002536  0F89               	addlw	137
  9919  002538  0100               	movlb	0	; () banked
  9920  00253A  5FCE               	subwf	___ftdiv@exp& (0+255),f,b
  9921                           
  9922                           ; BSR set to: 0
  9923  00253C  C0C3  F0CF         	movff	___ftdiv@f1+2,___ftdiv@sign
  9924                           
  9925                           ; BSR set to: 0
  9926  002540  0100               	movlb	0	; () banked
  9927  002542  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9928  002544  0100               	movlb	0	; () banked
  9929  002546  1BCF               	xorwf	___ftdiv@sign& (0+255),f,b
  9930                           
  9931                           ; BSR set to: 0
  9932  002548  0E80               	movlw	128
  9933  00254A  0100               	movlb	0	; () banked
  9934  00254C  17CF               	andwf	___ftdiv@sign& (0+255),f,b
  9935                           
  9936                           ; BSR set to: 0
  9937  00254E  0100               	movlb	0	; () banked
  9938  002550  8FC2               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9939                           
  9940                           ; BSR set to: 0
  9941  002552  0EFF               	movlw	255
  9942  002554  0100               	movlb	0	; () banked
  9943  002556  17C1               	andwf	___ftdiv@f1& (0+255),f,b
  9944  002558  0EFF               	movlw	255
  9945  00255A  0100               	movlb	0	; () banked
  9946  00255C  17C2               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9947  00255E  0E00               	movlw	0
  9948  002560  0100               	movlb	0	; () banked
  9949  002562  17C3               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9950                           
  9951                           ; BSR set to: 0
  9952  002564  0100               	movlb	0	; () banked
  9953  002566  8FC5               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9954                           
  9955                           ; BSR set to: 0
  9956  002568  0EFF               	movlw	255
  9957  00256A  0100               	movlb	0	; () banked
  9958  00256C  17C4               	andwf	___ftdiv@f2& (0+255),f,b
  9959  00256E  0EFF               	movlw	255
  9960  002570  0100               	movlb	0	; () banked
  9961  002572  17C5               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9962  002574  0E00               	movlw	0
  9963  002576  0100               	movlb	0	; () banked
  9964  002578  17C6               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9965                           
  9966                           ; BSR set to: 0
  9967  00257A  0E18               	movlw	24
  9968  00257C  0100               	movlb	0	; () banked
  9969  00257E  6FCA               	movwf	___ftdiv@cntr& (0+255),b
  9970  002580                     l5131:
  9971                           
  9972                           ; BSR set to: 0
  9973  002580  0100               	movlb	0	; () banked
  9974  002582  90D8               	bcf	status,0,c
  9975  002584  0100               	movlb	0	; () banked
  9976  002586  37CB               	rlcf	___ftdiv@f3& (0+255),f,b
  9977  002588  0100               	movlb	0	; () banked
  9978  00258A  37CC               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9979  00258C  0100               	movlb	0	; () banked
  9980  00258E  37CD               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9981                           
  9982                           ; BSR set to: 0
  9983  002590  0100               	movlb	0	; () banked
  9984  002592  51C4               	movf	___ftdiv@f2& (0+255),w,b
  9985  002594  0100               	movlb	0	; () banked
  9986  002596  5DC1               	subwf	___ftdiv@f1& (0+255),w,b
  9987  002598  0100               	movlb	0	; () banked
  9988  00259A  51C5               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9989  00259C  0100               	movlb	0	; () banked
  9990  00259E  59C2               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9991  0025A0  0100               	movlb	0	; () banked
  9992  0025A2  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9993  0025A4  0100               	movlb	0	; () banked
  9994  0025A6  59C3               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9995  0025A8  A0D8               	btfss	status,0,c
  9996  0025AA  D00E               	goto	l1202
  9997                           
  9998                           ; BSR set to: 0
  9999  0025AC  0100               	movlb	0	; () banked
 10000  0025AE  51C4               	movf	___ftdiv@f2& (0+255),w,b
 10001  0025B0  0100               	movlb	0	; () banked
 10002  0025B2  5FC1               	subwf	___ftdiv@f1& (0+255),f,b
 10003  0025B4  0100               	movlb	0	; () banked
 10004  0025B6  51C5               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10005  0025B8  0100               	movlb	0	; () banked
 10006  0025BA  5BC2               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10007  0025BC  0100               	movlb	0	; () banked
 10008  0025BE  51C6               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10009  0025C0  0100               	movlb	0	; () banked
 10010  0025C2  5BC3               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10011                           
 10012                           ; BSR set to: 0
 10013  0025C4  0100               	movlb	0	; () banked
 10014  0025C6  81CB               	bsf	___ftdiv@f3& (0+255),0,b
 10015  0025C8                     l1202:
 10016                           
 10017                           ; BSR set to: 0
 10018  0025C8  0100               	movlb	0	; () banked
 10019  0025CA  90D8               	bcf	status,0,c
 10020  0025CC  0100               	movlb	0	; () banked
 10021  0025CE  37C1               	rlcf	___ftdiv@f1& (0+255),f,b
 10022  0025D0  0100               	movlb	0	; () banked
 10023  0025D2  37C2               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10024  0025D4  0100               	movlb	0	; () banked
 10025  0025D6  37C3               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10026                           
 10027                           ; BSR set to: 0
 10028  0025D8  0100               	movlb	0	; () banked
 10029  0025DA  2FCA               	decfsz	___ftdiv@cntr& (0+255),f,b
 10030  0025DC  D7D1               	goto	l5131
 10031                           
 10032                           ; BSR set to: 0
 10033                           
 10034                           ; BSR set to: 0
 10035  0025DE  C0CB  F01B         	movff	___ftdiv@f3,___ftpack@arg
 10036  0025E2  C0CC  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10037  0025E6  C0CD  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10038  0025EA  C0CE  F01E         	movff	___ftdiv@exp,___ftpack@exp
 10039  0025EE  C0CF  F01F         	movff	___ftdiv@sign,___ftpack@sign
 10040  0025F2  EC90  F018         	call	___ftpack	;wreg free
 10041  0025F6  C01B  F0C1         	movff	?___ftpack,?___ftdiv
 10042  0025FA  C01C  F0C2         	movff	?___ftpack+1,?___ftdiv+1
 10043  0025FE  C01D  F0C3         	movff	?___ftpack+2,?___ftdiv+2
 10044  002602  0012               	return	
 10045  002604                     __end_of___ftdiv:
 10046                           	opt stack 0
 10047                           tosu	equ	0xFFF
 10048                           tosh	equ	0xFFE
 10049                           tosl	equ	0xFFD
 10050                           pclath	equ	0xFFA
 10051                           tblptru	equ	0xFF8
 10052                           tblptrh	equ	0xFF7
 10053                           tblptrl	equ	0xFF6
 10054                           tablat	equ	0xFF5
 10055                           prodh	equ	0xFF4
 10056                           prodl	equ	0xFF3
 10057                           intcon	equ	0xFF2
 10058                           intcon2	equ	0xFF1
 10059                           postinc0	equ	0xFEE
 10060                           wreg	equ	0xFE8
 10061                           postinc1	equ	0xFE6
 10062                           postdec1	equ	0xFE5
 10063                           fsr1h	equ	0xFE2
 10064                           fsr1l	equ	0xFE1
 10065                           indf2	equ	0xFDF
 10066                           postinc2	equ	0xFDE
 10067                           postdec2	equ	0xFDD
 10068                           fsr2h	equ	0xFDA
 10069                           fsr2l	equ	0xFD9
 10070                           status	equ	0xFD8
 10071                           
 10072 ;; *************** function ___altoft *****************
 10073 ;; Defined at:
 10074 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\altoft.c"
 10075 ;; Parameters:    Size  Location     Type
 10076 ;;  c               4   34[COMRAM] long 
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;  sign            1   43[COMRAM] unsigned char 
 10079 ;;  exp             1   42[COMRAM] unsigned char 
 10080 ;; Return value:  Size  Location     Type
 10081 ;;                  3   34[COMRAM] float 
 10082 ;; Registers used:
 10083 ;;		wreg, status,2, status,0, cstack
 10084 ;; Tracked objects:
 10085 ;;		On entry : 0/0
 10086 ;;		On exit  : 0/0
 10087 ;;		Unchanged: 0/0
 10088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10089 ;;      Params:         4       0       0       0       0       0       0
 10090 ;;      Locals:         2       0       0       0       0       0       0
 10091 ;;      Temps:          4       0       0       0       0       0       0
 10092 ;;      Totals:        10       0       0       0       0       0       0
 10093 ;;Total ram usage:       10 bytes
 10094 ;; Hardware stack levels used:    1
 10095 ;; Hardware stack levels required when called:    5
 10096 ;; This function calls:
 10097 ;;		___ftpack
 10098 ;; This function is called by:
 10099 ;;		_Battery_Convert
 10100 ;; This function uses a non-reentrant model
 10101 ;;
 10102                           
 10103                           	psect	text52
 10104  0034B2                     __ptext52:
 10105                           	opt stack 0
 10106  0034B2                     ___altoft:
 10107                           	opt stack 24
 10108                           
 10109                           ;incstack = 0
 10110  0034B2  0E00               	movlw	0
 10111  0034B4  6E2C               	movwf	___altoft@sign,c
 10112  0034B6  0E8E               	movlw	142
 10113  0034B8  6E2B               	movwf	___altoft@exp,c
 10114  0034BA  5026               	movf	___altoft@c+3,w,c
 10115  0034BC  0A80               	xorlw	128
 10116  0034BE  0F80               	addlw	128
 10117  0034C0  E108               	bnz	u5735
 10118  0034C2  0E00               	movlw	0
 10119  0034C4  5C25               	subwf	___altoft@c+2,w,c
 10120  0034C6  E105               	bnz	u5735
 10121  0034C8  0E00               	movlw	0
 10122  0034CA  5C24               	subwf	___altoft@c+1,w,c
 10123  0034CC  E102               	bnz	u5735
 10124  0034CE  0E00               	movlw	0
 10125  0034D0  5C23               	subwf	___altoft@c,w,c
 10126  0034D2                     u5735:
 10127  0034D2  B0D8               	btfsc	status,0,c
 10128  0034D4  D011               	goto	l5093
 10129  0034D6  1E26               	comf	___altoft@c+3,f,c
 10130  0034D8  1E25               	comf	___altoft@c+2,f,c
 10131  0034DA  1E24               	comf	___altoft@c+1,f,c
 10132  0034DC  6C23               	negf	___altoft@c,c
 10133  0034DE  0E00               	movlw	0
 10134  0034E0  2224               	addwfc	___altoft@c+1,f,c
 10135  0034E2  2225               	addwfc	___altoft@c+2,f,c
 10136  0034E4  2226               	addwfc	___altoft@c+3,f,c
 10137  0034E6  0E01               	movlw	1
 10138  0034E8  6E2C               	movwf	___altoft@sign,c
 10139  0034EA  D006               	goto	l5093
 10140  0034EC                     l5091:
 10141  0034EC  90D8               	bcf	status,0,c
 10142  0034EE  3226               	rrcf	___altoft@c+3,f,c
 10143  0034F0  3225               	rrcf	___altoft@c+2,f,c
 10144  0034F2  3224               	rrcf	___altoft@c+1,f,c
 10145  0034F4  3223               	rrcf	___altoft@c,f,c
 10146  0034F6  2A2B               	incf	___altoft@exp,f,c
 10147  0034F8                     l5093:
 10148  0034F8  0E00               	movlw	0
 10149  0034FA  1423               	andwf	___altoft@c,w,c
 10150  0034FC  6E27               	movwf	??___altoft& (0+255),c
 10151  0034FE  0E00               	movlw	0
 10152  003500  1424               	andwf	___altoft@c+1,w,c
 10153  003502  6E28               	movwf	(??___altoft+1)& (0+255),c
 10154  003504  0E00               	movlw	0
 10155  003506  1425               	andwf	___altoft@c+2,w,c
 10156  003508  6E29               	movwf	(??___altoft+2)& (0+255),c
 10157  00350A  0EFF               	movlw	255
 10158  00350C  1426               	andwf	___altoft@c+3,w,c
 10159  00350E  6E2A               	movwf	(??___altoft+3)& (0+255),c
 10160  003510  502A               	movf	??___altoft+3,w,c
 10161  003512  1027               	iorwf	??___altoft,w,c
 10162  003514  1028               	iorwf	??___altoft+1,w,c
 10163  003516  1029               	iorwf	??___altoft+2,w,c
 10164  003518  A4D8               	btfss	status,2,c
 10165  00351A  D7E8               	goto	l5091
 10166  00351C  C023  F01B         	movff	___altoft@c,___ftpack@arg
 10167  003520  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
 10168  003524  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
 10169  003528  C02B  F01E         	movff	___altoft@exp,___ftpack@exp
 10170  00352C  C02C  F01F         	movff	___altoft@sign,___ftpack@sign
 10171  003530  EC90  F018         	call	___ftpack	;wreg free
 10172  003534  C01B  F023         	movff	?___ftpack,?___altoft
 10173  003538  C01C  F024         	movff	?___ftpack+1,?___altoft+1
 10174  00353C  C01D  F025         	movff	?___ftpack+2,?___altoft+2
 10175  003540  0012               	return	
 10176  003542                     __end_of___altoft:
 10177                           	opt stack 0
 10178                           tosu	equ	0xFFF
 10179                           tosh	equ	0xFFE
 10180                           tosl	equ	0xFFD
 10181                           pclath	equ	0xFFA
 10182                           tblptru	equ	0xFF8
 10183                           tblptrh	equ	0xFF7
 10184                           tblptrl	equ	0xFF6
 10185                           tablat	equ	0xFF5
 10186                           prodh	equ	0xFF4
 10187                           prodl	equ	0xFF3
 10188                           intcon	equ	0xFF2
 10189                           intcon2	equ	0xFF1
 10190                           postinc0	equ	0xFEE
 10191                           wreg	equ	0xFE8
 10192                           postinc1	equ	0xFE6
 10193                           postdec1	equ	0xFE5
 10194                           fsr1h	equ	0xFE2
 10195                           fsr1l	equ	0xFE1
 10196                           indf2	equ	0xFDF
 10197                           postinc2	equ	0xFDE
 10198                           postdec2	equ	0xFDD
 10199                           fsr2h	equ	0xFDA
 10200                           fsr2l	equ	0xFD9
 10201                           status	equ	0xFD8
 10202                           
 10203 ;; *************** function _Battery_Filter *****************
 10204 ;; Defined at:
 10205 ;;		line 49 in file "Battery.c"
 10206 ;; Parameters:    Size  Location     Type
 10207 ;;		None
 10208 ;; Auto vars:     Size  Location     Type
 10209 ;;  x               2   42[BANK0 ] int 
 10210 ;; Return value:  Size  Location     Type
 10211 ;;		None               void
 10212 ;; Registers used:
 10213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10219 ;;      Params:         0       0       0       0       0       0       0
 10220 ;;      Locals:         0       2       0       0       0       0       0
 10221 ;;      Temps:          0       0       0       0       0       0       0
 10222 ;;      Totals:         0       2       0       0       0       0       0
 10223 ;;Total ram usage:        2 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:    6
 10226 ;; This function calls:
 10227 ;;		___ftadd
 10228 ;;		___ftmul
 10229 ;;		___wmul
 10230 ;; This function is called by:
 10231 ;;		_Battery_Convert
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235                           	psect	text53
 10236  00234A                     __ptext53:
 10237                           	opt stack 0
 10238  00234A                     _Battery_Filter:
 10239                           	opt stack 23
 10240                           
 10241                           ;Battery.c: 52: for(int x = 0; x < 9; x++)
 10242                           
 10243                           ;incstack = 0
 10244  00234A  0E00               	movlw	0
 10245  00234C  0100               	movlb	0	; () banked
 10246  00234E  6FEC               	movwf	(Battery_Filter@x+1)& (0+255),b
 10247  002350  0E00               	movlw	0
 10248  002352  0100               	movlb	0	; () banked
 10249  002354  6FEB               	movwf	Battery_Filter@x& (0+255),b
 10250  002356                     
 10251                           ; BSR set to: 0
 10252  002356  0100               	movlb	0	; () banked
 10253  002358  51EC               	movf	(Battery_Filter@x+1)& (0+255),w,b
 10254  00235A  0A80               	xorlw	128
 10255  00235C  0F80               	addlw	-128
 10256  00235E  0E09               	movlw	9
 10257  002360  B4D8               	btfsc	status,2,c
 10258  002362  5DEB               	subwf	Battery_Filter@x& (0+255),w,b
 10259  002364  B0D8               	btfsc	status,0,c
 10260  002366  0012               	return	
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;Battery.c: 53: {
 10264                           ;Battery.c: 54: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
 10265                           
 10266                           ; BSR set to: 0
 10267                           
 10268                           ; BSR set to: 0
 10269  002368  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10270  00236C  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10271  002370  0E00               	movlw	0
 10272  002372  6E1E               	movwf	___wmul@multiplicand+1,c
 10273  002374  0E03               	movlw	3
 10274  002376  6E1D               	movwf	___wmul@multiplicand,c
 10275  002378  EC6E  F01D         	call	___wmul	;wreg free
 10276  00237C  0101               	movlb	1	; () banked
 10277  00237E  0E70               	movlw	low _Battery_Volt
 10278  002380  241B               	addwf	?___wmul,w,c
 10279  002382  6ED9               	movwf	fsr2l,c
 10280  002384  0101               	movlb	1	; () banked
 10281  002386  0E01               	movlw	high _Battery_Volt
 10282  002388  201C               	addwfc	?___wmul+1,w,c
 10283  00238A  6EDA               	movwf	fsr2h,c
 10284  00238C  0E48               	movlw	72
 10285  00238E  0100               	movlb	0	; () banked
 10286  002390  6FD3               	movwf	___ftmul@f2& (0+255),b
 10287  002392  0E61               	movlw	97
 10288  002394  0100               	movlb	0	; () banked
 10289  002396  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
 10290  002398  0E3F               	movlw	63
 10291  00239A  0100               	movlb	0	; () banked
 10292  00239C  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
 10293  00239E  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10294  0023A2  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10295  0023A6  0E00               	movlw	0
 10296  0023A8  6E1E               	movwf	___wmul@multiplicand+1,c
 10297  0023AA  0E03               	movlw	3
 10298  0023AC  6E1D               	movwf	___wmul@multiplicand,c
 10299  0023AE  EC6E  F01D         	call	___wmul	;wreg free
 10300  0023B2  0101               	movlb	1	; () banked
 10301  0023B4  0E52               	movlw	low _TempBattery_Volt
 10302  0023B6  241B               	addwf	?___wmul,w,c
 10303  0023B8  6EE1               	movwf	fsr1l,c
 10304  0023BA  0101               	movlb	1	; () banked
 10305  0023BC  0E01               	movlw	high _TempBattery_Volt
 10306  0023BE  201C               	addwfc	?___wmul+1,w,c
 10307  0023C0  6EE2               	movwf	fsr1h,c
 10308  0023C2  0100               	movlb	0	; () banked
 10309  0023C4  CFE6 F0D0          	movff	postinc1,___ftmul@f1
 10310  0023C8  0100               	movlb	0	; () banked
 10311  0023CA  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
 10312  0023CE  0100               	movlb	0	; () banked
 10313  0023D0  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
 10314  0023D4  ECC5  F00E         	call	___ftmul	;wreg free
 10315  0023D8  C0D0  F0DF         	movff	?___ftmul,___ftadd@f1
 10316  0023DC  C0D1  F0E0         	movff	?___ftmul+1,___ftadd@f1+1
 10317  0023E0  C0D2  F0E1         	movff	?___ftmul+2,___ftadd@f1+2
 10318  0023E4  0EC3               	movlw	195
 10319  0023E6  0100               	movlb	0	; () banked
 10320  0023E8  6FD3               	movwf	___ftmul@f2& (0+255),b
 10321  0023EA  0EF5               	movlw	245
 10322  0023EC  0100               	movlb	0	; () banked
 10323  0023EE  6FD4               	movwf	(___ftmul@f2+1)& (0+255),b
 10324  0023F0  0E3D               	movlw	61
 10325  0023F2  0100               	movlb	0	; () banked
 10326  0023F4  6FD5               	movwf	(___ftmul@f2+2)& (0+255),b
 10327  0023F6  0E00               	movlw	0
 10328  0023F8  6E1E               	movwf	___wmul@multiplicand+1,c
 10329  0023FA  0E03               	movlw	3
 10330  0023FC  6E1D               	movwf	___wmul@multiplicand,c
 10331  0023FE  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10332  002402  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10333  002406  EC6E  F01D         	call	___wmul	;wreg free
 10334  00240A  0101               	movlb	1	; () banked
 10335  00240C  0E00               	movlw	low _PrevBattery_Volt
 10336  00240E  241B               	addwf	?___wmul,w,c
 10337  002410  6EE1               	movwf	fsr1l,c
 10338  002412  0101               	movlb	1	; () banked
 10339  002414  0E01               	movlw	high _PrevBattery_Volt
 10340  002416  201C               	addwfc	?___wmul+1,w,c
 10341  002418  6EE2               	movwf	fsr1h,c
 10342  00241A  0100               	movlb	0	; () banked
 10343  00241C  CFE6 F0D0          	movff	postinc1,___ftmul@f1
 10344  002420  0100               	movlb	0	; () banked
 10345  002422  CFE6 F0D1          	movff	postinc1,___ftmul@f1+1
 10346  002426  0100               	movlb	0	; () banked
 10347  002428  CFE5 F0D2          	movff	postdec1,___ftmul@f1+2
 10348  00242C  ECC5  F00E         	call	___ftmul	;wreg free
 10349  002430  C0D0  F0E2         	movff	?___ftmul,___ftadd@f2
 10350  002434  C0D1  F0E3         	movff	?___ftmul+1,___ftadd@f2+1
 10351  002438  C0D2  F0E4         	movff	?___ftmul+2,___ftadd@f2+2
 10352  00243C  ECF9  F00A         	call	___ftadd	;wreg free
 10353  002440  C0DF  FFDE         	movff	?___ftadd,postinc2
 10354  002444  C0E0  FFDE         	movff	?___ftadd+1,postinc2
 10355  002448  C0E1  FFDD         	movff	?___ftadd+2,postdec2
 10356  00244C  52DD               	movf	postdec2,f,c
 10357                           
 10358                           ;Battery.c: 55: PrevBattery_Volt[x] = Battery_Volt[x];
 10359  00244E  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10360  002452  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10361  002456  0E00               	movlw	0
 10362  002458  6E1E               	movwf	___wmul@multiplicand+1,c
 10363  00245A  0E03               	movlw	3
 10364  00245C  6E1D               	movwf	___wmul@multiplicand,c
 10365  00245E  EC6E  F01D         	call	___wmul	;wreg free
 10366  002462  0101               	movlb	1	; () banked
 10367  002464  0E70               	movlw	low _Battery_Volt
 10368  002466  241B               	addwf	?___wmul,w,c
 10369  002468  6ED9               	movwf	fsr2l,c
 10370  00246A  0101               	movlb	1	; () banked
 10371  00246C  0E01               	movlw	high _Battery_Volt
 10372  00246E  201C               	addwfc	?___wmul+1,w,c
 10373  002470  6EDA               	movwf	fsr2h,c
 10374  002472  C0EB  F01B         	movff	Battery_Filter@x,___wmul@multiplier
 10375  002476  C0EC  F01C         	movff	Battery_Filter@x+1,___wmul@multiplier+1
 10376  00247A  0E00               	movlw	0
 10377  00247C  6E1E               	movwf	___wmul@multiplicand+1,c
 10378  00247E  0E03               	movlw	3
 10379  002480  6E1D               	movwf	___wmul@multiplicand,c
 10380  002482  EC6E  F01D         	call	___wmul	;wreg free
 10381  002486  0101               	movlb	1	; () banked
 10382  002488  0E00               	movlw	low _PrevBattery_Volt
 10383  00248A  241B               	addwf	?___wmul,w,c
 10384  00248C  6EE1               	movwf	fsr1l,c
 10385  00248E  0101               	movlb	1	; () banked
 10386  002490  0E01               	movlw	high _PrevBattery_Volt
 10387  002492  201C               	addwfc	?___wmul+1,w,c
 10388  002494  6EE2               	movwf	fsr1h,c
 10389  002496  CFDE FFE6          	movff	postinc2,postinc1
 10390  00249A  CFDE FFE6          	movff	postinc2,postinc1
 10391  00249E  CFDE FFE5          	movff	postinc2,postdec1
 10392  0024A2  52E5               	movf	postdec1,f,c
 10393                           
 10394                           ; BSR set to: 1
 10395  0024A4  0100               	movlb	0	; () banked
 10396  0024A6  4BEB               	infsnz	Battery_Filter@x& (0+255),f,b
 10397  0024A8  2BEC               	incf	(Battery_Filter@x+1)& (0+255),f,b
 10398  0024AA  D755               	goto	L9
 10399  0024AC                     __end_of_Battery_Filter:
 10400                           	opt stack 0
 10401                           tosu	equ	0xFFF
 10402                           tosh	equ	0xFFE
 10403                           tosl	equ	0xFFD
 10404                           pclath	equ	0xFFA
 10405                           tblptru	equ	0xFF8
 10406                           tblptrh	equ	0xFF7
 10407                           tblptrl	equ	0xFF6
 10408                           tablat	equ	0xFF5
 10409                           prodh	equ	0xFF4
 10410                           prodl	equ	0xFF3
 10411                           intcon	equ	0xFF2
 10412                           intcon2	equ	0xFF1
 10413                           postinc0	equ	0xFEE
 10414                           wreg	equ	0xFE8
 10415                           postinc1	equ	0xFE6
 10416                           postdec1	equ	0xFE5
 10417                           fsr1h	equ	0xFE2
 10418                           fsr1l	equ	0xFE1
 10419                           indf2	equ	0xFDF
 10420                           postinc2	equ	0xFDE
 10421                           postdec2	equ	0xFDD
 10422                           fsr2h	equ	0xFDA
 10423                           fsr2l	equ	0xFD9
 10424                           status	equ	0xFD8
 10425                           
 10426 ;; *************** function ___wmul *****************
 10427 ;; Defined at:
 10428 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;  multiplier      2   26[COMRAM] unsigned int 
 10431 ;;  multiplicand    2   28[COMRAM] unsigned int 
 10432 ;; Auto vars:     Size  Location     Type
 10433 ;;  product         2   30[COMRAM] unsigned int 
 10434 ;; Return value:  Size  Location     Type
 10435 ;;                  2   26[COMRAM] unsigned int 
 10436 ;; Registers used:
 10437 ;;		wreg, status,2, status,0, prodl, prodh
 10438 ;; Tracked objects:
 10439 ;;		On entry : 0/0
 10440 ;;		On exit  : 0/0
 10441 ;;		Unchanged: 0/0
 10442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10443 ;;      Params:         4       0       0       0       0       0       0
 10444 ;;      Locals:         2       0       0       0       0       0       0
 10445 ;;      Temps:          0       0       0       0       0       0       0
 10446 ;;      Totals:         6       0       0       0       0       0       0
 10447 ;;Total ram usage:        6 bytes
 10448 ;; Hardware stack levels used:    1
 10449 ;; Hardware stack levels required when called:    4
 10450 ;; This function calls:
 10451 ;;		Nothing
 10452 ;; This function is called by:
 10453 ;;		_Battery_Convert
 10454 ;;		_Battery_Filter
 10455 ;;		_Battery_Fault
 10456 ;;		_Battery_Get
 10457 ;;		_Temp_Fault
 10458 ;;		_Temp_Filter
 10459 ;;		_Temp_Convert
 10460 ;;		_Tempeture_Get
 10461 ;;		_eval_poly
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           	psect	text54
 10466  003ADC                     __ptext54:
 10467                           	opt stack 0
 10468  003ADC                     ___wmul:
 10469                           	opt stack 24
 10470                           
 10471                           ; BSR set to: 0
 10472                           ;incstack = 0
 10473  003ADC  501B               	movf	___wmul@multiplier,w,c
 10474  003ADE  021D               	mulwf	___wmul@multiplicand,c
 10475  003AE0  CFF3 F01F          	movff	prodl,___wmul@product
 10476  003AE4  CFF4 F020          	movff	prodh,___wmul@product+1
 10477  003AE8  501B               	movf	___wmul@multiplier,w,c
 10478  003AEA  021E               	mulwf	___wmul@multiplicand+1,c
 10479  003AEC  50F3               	movf	prodl,w,c
 10480  003AEE  2620               	addwf	___wmul@product+1,f,c
 10481  003AF0  501C               	movf	___wmul@multiplier+1,w,c
 10482  003AF2  021D               	mulwf	___wmul@multiplicand,c
 10483  003AF4  50F3               	movf	prodl,w,c
 10484  003AF6  2620               	addwf	___wmul@product+1,f,c
 10485  003AF8  C01F  F01B         	movff	___wmul@product,?___wmul
 10486  003AFC  C020  F01C         	movff	___wmul@product+1,?___wmul+1
 10487  003B00  0012               	return	
 10488  003B02                     __end_of___wmul:
 10489                           	opt stack 0
 10490                           tosu	equ	0xFFF
 10491                           tosh	equ	0xFFE
 10492                           tosl	equ	0xFFD
 10493                           pclath	equ	0xFFA
 10494                           tblptru	equ	0xFF8
 10495                           tblptrh	equ	0xFF7
 10496                           tblptrl	equ	0xFF6
 10497                           tablat	equ	0xFF5
 10498                           prodh	equ	0xFF4
 10499                           prodl	equ	0xFF3
 10500                           intcon	equ	0xFF2
 10501                           intcon2	equ	0xFF1
 10502                           postinc0	equ	0xFEE
 10503                           wreg	equ	0xFE8
 10504                           postinc1	equ	0xFE6
 10505                           postdec1	equ	0xFE5
 10506                           fsr1h	equ	0xFE2
 10507                           fsr1l	equ	0xFE1
 10508                           indf2	equ	0xFDF
 10509                           postinc2	equ	0xFDE
 10510                           postdec2	equ	0xFDD
 10511                           fsr2h	equ	0xFDA
 10512                           fsr2l	equ	0xFD9
 10513                           status	equ	0xFD8
 10514                           
 10515 ;; *************** function ___ftmul *****************
 10516 ;; Defined at:
 10517 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;  f1              3   15[BANK0 ] float 
 10520 ;;  f2              3   18[BANK0 ] float 
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 10523 ;;  sign            1   29[BANK0 ] unsigned char 
 10524 ;;  cntr            1   28[BANK0 ] unsigned char 
 10525 ;;  exp             1   24[BANK0 ] unsigned char 
 10526 ;; Return value:  Size  Location     Type
 10527 ;;                  3   15[BANK0 ] float 
 10528 ;; Registers used:
 10529 ;;		wreg, status,2, status,0, cstack
 10530 ;; Tracked objects:
 10531 ;;		On entry : 0/0
 10532 ;;		On exit  : 0/0
 10533 ;;		Unchanged: 0/0
 10534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10535 ;;      Params:         0       6       0       0       0       0       0
 10536 ;;      Locals:         0       6       0       0       0       0       0
 10537 ;;      Temps:          0       3       0       0       0       0       0
 10538 ;;      Totals:         0      15       0       0       0       0       0
 10539 ;;Total ram usage:       15 bytes
 10540 ;; Hardware stack levels used:    1
 10541 ;; Hardware stack levels required when called:    5
 10542 ;; This function calls:
 10543 ;;		___ftpack
 10544 ;; This function is called by:
 10545 ;;		_Battery_Convert
 10546 ;;		_Battery_Filter
 10547 ;;		_Temp_Filter
 10548 ;;		_Temp_Convert
 10549 ;;		_updateComms
 10550 ;;		_log
 10551 ;;		_eval_poly
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           	psect	text55
 10556  001D8A                     __ptext55:
 10557                           	opt stack 0
 10558  001D8A                     ___ftmul:
 10559                           	opt stack 24
 10560                           
 10561                           ;incstack = 0
 10562  001D8A  0100               	movlb	0	; () banked
 10563  001D8C  C0D2  F0D6         	movff	___ftmul@f1+2,??___ftmul
 10564  001D90  0100               	movlb	0	; () banked
 10565  001D92  6BD7               	clrf	(??___ftmul+1)& (0+255),b
 10566  001D94  6BD8               	clrf	(??___ftmul+2)& (0+255),b
 10567  001D96  0100               	movlb	0	; () banked
 10568  001D98  35D1               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10569  001D9A  0100               	movlb	0	; () banked
 10570  001D9C  37D6               	rlcf	??___ftmul& (0+255),f,b
 10571  001D9E  E301               	bnc	u4671
 10572  001DA0  81D7               	bsf	(??___ftmul+1)& (0+255),0,b
 10573  001DA2                     u4671:
 10574  001DA2  0100               	movlb	0	; () banked
 10575  001DA4  51D6               	movf	??___ftmul& (0+255),w,b
 10576  001DA6  0100               	movlb	0	; () banked
 10577  001DA8  6FD9               	movwf	___ftmul@exp& (0+255),b
 10578  001DAA  0100               	movlb	0	; () banked
 10579  001DAC  67D9               	tstfsz	___ftmul@exp& (0+255),b
 10580  001DAE  D00A               	goto	l4589
 10581                           
 10582                           ; BSR set to: 0
 10583  001DB0  0E00               	movlw	0
 10584  001DB2  0100               	movlb	0	; () banked
 10585  001DB4  6FD0               	movwf	?___ftmul& (0+255),b
 10586  001DB6  0E00               	movlw	0
 10587  001DB8  0100               	movlb	0	; () banked
 10588  001DBA  6FD1               	movwf	(?___ftmul+1)& (0+255),b
 10589  001DBC  0E00               	movlw	0
 10590  001DBE  0100               	movlb	0	; () banked
 10591  001DC0  6FD2               	movwf	(?___ftmul+2)& (0+255),b
 10592  001DC2  0012               	return	
 10593  001DC4                     l4589:
 10594                           
 10595                           ; BSR set to: 0
 10596  001DC4  0100               	movlb	0	; () banked
 10597  001DC6  C0D5  F0D6         	movff	___ftmul@f2+2,??___ftmul
 10598  001DCA  0100               	movlb	0	; () banked
 10599  001DCC  6BD7               	clrf	(??___ftmul+1)& (0+255),b
 10600  001DCE  6BD8               	clrf	(??___ftmul+2)& (0+255),b
 10601  001DD0  0100               	movlb	0	; () banked
 10602  001DD2  35D4               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10603  001DD4  0100               	movlb	0	; () banked
 10604  001DD6  37D6               	rlcf	??___ftmul& (0+255),f,b
 10605  001DD8  E301               	bnc	u4691
 10606  001DDA  81D7               	bsf	(??___ftmul+1)& (0+255),0,b
 10607  001DDC                     u4691:
 10608  001DDC  0100               	movlb	0	; () banked
 10609  001DDE  51D6               	movf	??___ftmul& (0+255),w,b
 10610  001DE0  0100               	movlb	0	; () banked
 10611  001DE2  6FDE               	movwf	___ftmul@sign& (0+255),b
 10612  001DE4  0100               	movlb	0	; () banked
 10613  001DE6  67DE               	tstfsz	___ftmul@sign& (0+255),b
 10614  001DE8  D00A               	goto	l4595
 10615                           
 10616                           ; BSR set to: 0
 10617  001DEA  0E00               	movlw	0
 10618  001DEC  0100               	movlb	0	; () banked
 10619  001DEE  6FD0               	movwf	?___ftmul& (0+255),b
 10620  001DF0  0E00               	movlw	0
 10621  001DF2  0100               	movlb	0	; () banked
 10622  001DF4  6FD1               	movwf	(?___ftmul+1)& (0+255),b
 10623  001DF6  0E00               	movlw	0
 10624  001DF8  0100               	movlb	0	; () banked
 10625  001DFA  6FD2               	movwf	(?___ftmul+2)& (0+255),b
 10626  001DFC  0012               	return	
 10627  001DFE                     l4595:
 10628                           
 10629                           ; BSR set to: 0
 10630  001DFE  0100               	movlb	0	; () banked
 10631  001E00  51DE               	movf	___ftmul@sign& (0+255),w,b
 10632  001E02  0F7B               	addlw	123
 10633  001E04  0100               	movlb	0	; () banked
 10634  001E06  27D9               	addwf	___ftmul@exp& (0+255),f,b
 10635                           
 10636                           ; BSR set to: 0
 10637  001E08  C0D2  F0DE         	movff	___ftmul@f1+2,___ftmul@sign
 10638  001E0C  0100               	movlb	0	; () banked
 10639  001E0E  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10640  001E10  0100               	movlb	0	; () banked
 10641  001E12  1BDE               	xorwf	___ftmul@sign& (0+255),f,b
 10642  001E14  0E80               	movlw	128
 10643  001E16  0100               	movlb	0	; () banked
 10644  001E18  17DE               	andwf	___ftmul@sign& (0+255),f,b
 10645                           
 10646                           ; BSR set to: 0
 10647  001E1A  0100               	movlb	0	; () banked
 10648  001E1C  8FD1               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10649                           
 10650                           ; BSR set to: 0
 10651  001E1E  0100               	movlb	0	; () banked
 10652  001E20  8FD4               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10653                           
 10654                           ; BSR set to: 0
 10655  001E22  0EFF               	movlw	255
 10656  001E24  0100               	movlb	0	; () banked
 10657  001E26  17D3               	andwf	___ftmul@f2& (0+255),f,b
 10658  001E28  0EFF               	movlw	255
 10659  001E2A  0100               	movlb	0	; () banked
 10660  001E2C  17D4               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10661  001E2E  0E00               	movlw	0
 10662  001E30  0100               	movlb	0	; () banked
 10663  001E32  17D5               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10664                           
 10665                           ; BSR set to: 0
 10666  001E34  0E00               	movlw	0
 10667  001E36  0100               	movlb	0	; () banked
 10668  001E38  6FDA               	movwf	___ftmul@f3_as_product& (0+255),b
 10669  001E3A  0E00               	movlw	0
 10670  001E3C  0100               	movlb	0	; () banked
 10671  001E3E  6FDB               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10672  001E40  0E00               	movlw	0
 10673  001E42  0100               	movlb	0	; () banked
 10674  001E44  6FDC               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10675                           
 10676                           ; BSR set to: 0
 10677  001E46  0E07               	movlw	7
 10678  001E48  0100               	movlb	0	; () banked
 10679  001E4A  6FDD               	movwf	___ftmul@cntr& (0+255),b
 10680  001E4C                     l4609:
 10681                           
 10682                           ; BSR set to: 0
 10683  001E4C  0100               	movlb	0	; () banked
 10684  001E4E  A1D0               	btfss	___ftmul@f1& (0+255),0,b
 10685  001E50  D00C               	goto	l4613
 10686                           
 10687                           ; BSR set to: 0
 10688  001E52  0100               	movlb	0	; () banked
 10689  001E54  51D3               	movf	___ftmul@f2& (0+255),w,b
 10690  001E56  0100               	movlb	0	; () banked
 10691  001E58  27DA               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10692  001E5A  0100               	movlb	0	; () banked
 10693  001E5C  51D4               	movf	(___ftmul@f2+1)& (0+255),w,b
 10694  001E5E  0100               	movlb	0	; () banked
 10695  001E60  23DB               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10696  001E62  0100               	movlb	0	; () banked
 10697  001E64  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10698  001E66  0100               	movlb	0	; () banked
 10699  001E68  23DC               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10700  001E6A                     l4613:
 10701                           
 10702                           ; BSR set to: 0
 10703  001E6A  0100               	movlb	0	; () banked
 10704  001E6C  90D8               	bcf	status,0,c
 10705  001E6E  0100               	movlb	0	; () banked
 10706  001E70  33D2               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10707  001E72  0100               	movlb	0	; () banked
 10708  001E74  33D1               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10709  001E76  0100               	movlb	0	; () banked
 10710  001E78  33D0               	rrcf	___ftmul@f1& (0+255),f,b
 10711  001E7A  0100               	movlb	0	; () banked
 10712  001E7C  90D8               	bcf	status,0,c
 10713  001E7E  0100               	movlb	0	; () banked
 10714  001E80  37D3               	rlcf	___ftmul@f2& (0+255),f,b
 10715  001E82  0100               	movlb	0	; () banked
 10716  001E84  37D4               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10717  001E86  0100               	movlb	0	; () banked
 10718  001E88  37D5               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10719                           
 10720                           ; BSR set to: 0
 10721  001E8A  0100               	movlb	0	; () banked
 10722  001E8C  2FDD               	decfsz	___ftmul@cntr& (0+255),f,b
 10723  001E8E  D7DE               	goto	l4609
 10724                           
 10725                           ; BSR set to: 0
 10726                           
 10727                           ; BSR set to: 0
 10728  001E90  0E09               	movlw	9
 10729  001E92  0100               	movlb	0	; () banked
 10730  001E94  6FDD               	movwf	___ftmul@cntr& (0+255),b
 10731  001E96                     l4619:
 10732                           
 10733                           ; BSR set to: 0
 10734  001E96  0100               	movlb	0	; () banked
 10735  001E98  A1D0               	btfss	___ftmul@f1& (0+255),0,b
 10736  001E9A  D00C               	goto	l4623
 10737                           
 10738                           ; BSR set to: 0
 10739  001E9C  0100               	movlb	0	; () banked
 10740  001E9E  51D3               	movf	___ftmul@f2& (0+255),w,b
 10741  001EA0  0100               	movlb	0	; () banked
 10742  001EA2  27DA               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10743  001EA4  0100               	movlb	0	; () banked
 10744  001EA6  51D4               	movf	(___ftmul@f2+1)& (0+255),w,b
 10745  001EA8  0100               	movlb	0	; () banked
 10746  001EAA  23DB               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10747  001EAC  0100               	movlb	0	; () banked
 10748  001EAE  51D5               	movf	(___ftmul@f2+2)& (0+255),w,b
 10749  001EB0  0100               	movlb	0	; () banked
 10750  001EB2  23DC               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10751  001EB4                     l4623:
 10752                           
 10753                           ; BSR set to: 0
 10754  001EB4  0100               	movlb	0	; () banked
 10755  001EB6  90D8               	bcf	status,0,c
 10756  001EB8  0100               	movlb	0	; () banked
 10757  001EBA  33D2               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10758  001EBC  0100               	movlb	0	; () banked
 10759  001EBE  33D1               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10760  001EC0  0100               	movlb	0	; () banked
 10761  001EC2  33D0               	rrcf	___ftmul@f1& (0+255),f,b
 10762  001EC4  0100               	movlb	0	; () banked
 10763  001EC6  90D8               	bcf	status,0,c
 10764  001EC8  0100               	movlb	0	; () banked
 10765  001ECA  33DC               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10766  001ECC  0100               	movlb	0	; () banked
 10767  001ECE  33DB               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10768  001ED0  0100               	movlb	0	; () banked
 10769  001ED2  33DA               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10770                           
 10771                           ; BSR set to: 0
 10772  001ED4  0100               	movlb	0	; () banked
 10773  001ED6  2FDD               	decfsz	___ftmul@cntr& (0+255),f,b
 10774  001ED8  D7DE               	goto	l4619
 10775                           
 10776                           ; BSR set to: 0
 10777                           
 10778                           ; BSR set to: 0
 10779  001EDA  C0DA  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
 10780  001EDE  C0DB  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10781  001EE2  C0DC  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10782  001EE6  C0D9  F01E         	movff	___ftmul@exp,___ftpack@exp
 10783  001EEA  C0DE  F01F         	movff	___ftmul@sign,___ftpack@sign
 10784  001EEE  EC90  F018         	call	___ftpack	;wreg free
 10785  001EF2  C01B  F0D0         	movff	?___ftpack,?___ftmul
 10786  001EF6  C01C  F0D1         	movff	?___ftpack+1,?___ftmul+1
 10787  001EFA  C01D  F0D2         	movff	?___ftpack+2,?___ftmul+2
 10788  001EFE  0012               	return	
 10789  001F00                     __end_of___ftmul:
 10790                           	opt stack 0
 10791                           tosu	equ	0xFFF
 10792                           tosh	equ	0xFFE
 10793                           tosl	equ	0xFFD
 10794                           pclath	equ	0xFFA
 10795                           tblptru	equ	0xFF8
 10796                           tblptrh	equ	0xFF7
 10797                           tblptrl	equ	0xFF6
 10798                           tablat	equ	0xFF5
 10799                           prodh	equ	0xFF4
 10800                           prodl	equ	0xFF3
 10801                           intcon	equ	0xFF2
 10802                           intcon2	equ	0xFF1
 10803                           postinc0	equ	0xFEE
 10804                           wreg	equ	0xFE8
 10805                           postinc1	equ	0xFE6
 10806                           postdec1	equ	0xFE5
 10807                           fsr1h	equ	0xFE2
 10808                           fsr1l	equ	0xFE1
 10809                           indf2	equ	0xFDF
 10810                           postinc2	equ	0xFDE
 10811                           postdec2	equ	0xFDD
 10812                           fsr2h	equ	0xFDA
 10813                           fsr2l	equ	0xFD9
 10814                           status	equ	0xFD8
 10815                           
 10816 ;; *************** function ___ftadd *****************
 10817 ;; Defined at:
 10818 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;  f1              3   30[BANK0 ] float 
 10821 ;;  f2              3   33[BANK0 ] float 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  exp1            1   41[BANK0 ] unsigned char 
 10824 ;;  exp2            1   40[BANK0 ] unsigned char 
 10825 ;;  sign            1   39[BANK0 ] unsigned char 
 10826 ;; Return value:  Size  Location     Type
 10827 ;;                  3   30[BANK0 ] float 
 10828 ;; Registers used:
 10829 ;;		wreg, status,2, status,0, cstack
 10830 ;; Tracked objects:
 10831 ;;		On entry : 0/0
 10832 ;;		On exit  : 0/0
 10833 ;;		Unchanged: 0/0
 10834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10835 ;;      Params:         0       6       0       0       0       0       0
 10836 ;;      Locals:         0       3       0       0       0       0       0
 10837 ;;      Temps:          0       3       0       0       0       0       0
 10838 ;;      Totals:         0      12       0       0       0       0       0
 10839 ;;Total ram usage:       12 bytes
 10840 ;; Hardware stack levels used:    1
 10841 ;; Hardware stack levels required when called:    5
 10842 ;; This function calls:
 10843 ;;		___ftpack
 10844 ;; This function is called by:
 10845 ;;		_Battery_Filter
 10846 ;;		_Temp_Filter
 10847 ;;		_Temp_Convert
 10848 ;;		___ftsub
 10849 ;;		_log
 10850 ;;		_eval_poly
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           	psect	text56
 10855  0015F2                     __ptext56:
 10856                           	opt stack 0
 10857  0015F2                     ___ftadd:
 10858                           	opt stack 22
 10859                           
 10860                           ;incstack = 0
 10861  0015F2  0100               	movlb	0	; () banked
 10862  0015F4  C0E1  F0E5         	movff	___ftadd@f1+2,??___ftadd
 10863  0015F8  0100               	movlb	0	; () banked
 10864  0015FA  6BE6               	clrf	(??___ftadd+1)& (0+255),b
 10865  0015FC  6BE7               	clrf	(??___ftadd+2)& (0+255),b
 10866  0015FE  0100               	movlb	0	; () banked
 10867  001600  35E0               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10868  001602  0100               	movlb	0	; () banked
 10869  001604  37E5               	rlcf	??___ftadd& (0+255),f,b
 10870  001606  E301               	bnc	u4461
 10871  001608  81E6               	bsf	(??___ftadd+1)& (0+255),0,b
 10872  00160A                     u4461:
 10873  00160A  0100               	movlb	0	; () banked
 10874  00160C  51E5               	movf	??___ftadd& (0+255),w,b
 10875  00160E  0100               	movlb	0	; () banked
 10876  001610  6FEA               	movwf	___ftadd@exp1& (0+255),b
 10877  001612  0100               	movlb	0	; () banked
 10878  001614  C0E4  F0E5         	movff	___ftadd@f2+2,??___ftadd
 10879  001618  0100               	movlb	0	; () banked
 10880  00161A  6BE6               	clrf	(??___ftadd+1)& (0+255),b
 10881  00161C  6BE7               	clrf	(??___ftadd+2)& (0+255),b
 10882  00161E  0100               	movlb	0	; () banked
 10883  001620  35E3               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10884  001622  0100               	movlb	0	; () banked
 10885  001624  37E5               	rlcf	??___ftadd& (0+255),f,b
 10886  001626  E301               	bnc	u4471
 10887  001628  81E6               	bsf	(??___ftadd+1)& (0+255),0,b
 10888  00162A                     u4471:
 10889  00162A  0100               	movlb	0	; () banked
 10890  00162C  51E5               	movf	??___ftadd& (0+255),w,b
 10891  00162E  0100               	movlb	0	; () banked
 10892  001630  6FE9               	movwf	___ftadd@exp2& (0+255),b
 10893                           
 10894                           ; BSR set to: 0
 10895  001632  0100               	movlb	0	; () banked
 10896  001634  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10897  001636  B4D8               	btfsc	status,2,c
 10898  001638  D012               	goto	l1167
 10899                           
 10900                           ; BSR set to: 0
 10901  00163A  0100               	movlb	0	; () banked
 10902  00163C  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10903  00163E  0100               	movlb	0	; () banked
 10904  001640  5DEA               	subwf	___ftadd@exp1& (0+255),w,b
 10905  001642  B0D8               	btfsc	status,0,c
 10906  001644  D013               	goto	l4521
 10907                           
 10908                           ; BSR set to: 0
 10909  001646  0100               	movlb	0	; () banked
 10910  001648  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10911  00164A  0800               	sublw	0
 10912  00164C  0100               	movlb	0	; () banked
 10913  00164E  25E9               	addwf	___ftadd@exp2& (0+255),w,b
 10914  001650  0100               	movlb	0	; () banked
 10915  001652  6FE5               	movwf	??___ftadd& (0+255),b
 10916  001654  0E19               	movlw	25
 10917  001656  0100               	movlb	0	; () banked
 10918  001658  5DE5               	subwf	??___ftadd& (0+255),w,b
 10919  00165A  A0D8               	btfss	status,0,c
 10920  00165C  D007               	goto	l4521
 10921  00165E                     l1167:
 10922                           
 10923                           ; BSR set to: 0
 10924  00165E  C0E2  F0DF         	movff	___ftadd@f2,?___ftadd
 10925  001662  C0E3  F0E0         	movff	___ftadd@f2+1,?___ftadd+1
 10926  001666  C0E4  F0E1         	movff	___ftadd@f2+2,?___ftadd+2
 10927  00166A  0012               	return	
 10928  00166C                     l4521:
 10929                           
 10930                           ; BSR set to: 0
 10931  00166C  0100               	movlb	0	; () banked
 10932  00166E  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10933  001670  B4D8               	btfsc	status,2,c
 10934  001672  D012               	goto	l1171
 10935                           
 10936                           ; BSR set to: 0
 10937  001674  0100               	movlb	0	; () banked
 10938  001676  51EA               	movf	___ftadd@exp1& (0+255),w,b
 10939  001678  0100               	movlb	0	; () banked
 10940  00167A  5DE9               	subwf	___ftadd@exp2& (0+255),w,b
 10941  00167C  B0D8               	btfsc	status,0,c
 10942  00167E  D013               	goto	l4527
 10943                           
 10944                           ; BSR set to: 0
 10945  001680  0100               	movlb	0	; () banked
 10946  001682  51E9               	movf	___ftadd@exp2& (0+255),w,b
 10947  001684  0800               	sublw	0
 10948  001686  0100               	movlb	0	; () banked
 10949  001688  25EA               	addwf	___ftadd@exp1& (0+255),w,b
 10950  00168A  0100               	movlb	0	; () banked
 10951  00168C  6FE5               	movwf	??___ftadd& (0+255),b
 10952  00168E  0E19               	movlw	25
 10953  001690  0100               	movlb	0	; () banked
 10954  001692  5DE5               	subwf	??___ftadd& (0+255),w,b
 10955  001694  A0D8               	btfss	status,0,c
 10956  001696  D007               	goto	l4527
 10957  001698                     l1171:
 10958                           
 10959                           ; BSR set to: 0
 10960  001698  C0DF  F0DF         	movff	___ftadd@f1,?___ftadd
 10961  00169C  C0E0  F0E0         	movff	___ftadd@f1+1,?___ftadd+1
 10962  0016A0  C0E1  F0E1         	movff	___ftadd@f1+2,?___ftadd+2
 10963  0016A4  0012               	return	
 10964  0016A6                     l4527:
 10965                           
 10966                           ; BSR set to: 0
 10967  0016A6  0E06               	movlw	6
 10968  0016A8  0100               	movlb	0	; () banked
 10969  0016AA  6FE8               	movwf	___ftadd@sign& (0+255),b
 10970                           
 10971                           ; BSR set to: 0
 10972  0016AC  0100               	movlb	0	; () banked
 10973  0016AE  AFE1               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10974  0016B0  D002               	goto	l4533
 10975                           
 10976                           ; BSR set to: 0
 10977  0016B2  0100               	movlb	0	; () banked
 10978  0016B4  8FE8               	bsf	___ftadd@sign& (0+255),7,b
 10979  0016B6                     l4533:
 10980                           
 10981                           ; BSR set to: 0
 10982  0016B6  0100               	movlb	0	; () banked
 10983  0016B8  AFE4               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10984  0016BA  D002               	goto	l1173
 10985                           
 10986                           ; BSR set to: 0
 10987  0016BC  0100               	movlb	0	; () banked
 10988  0016BE  8DE8               	bsf	___ftadd@sign& (0+255),6,b
 10989  0016C0                     l1173:
 10990                           
 10991                           ; BSR set to: 0
 10992  0016C0  0100               	movlb	0	; () banked
 10993  0016C2  8FE0               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10994                           
 10995                           ; BSR set to: 0
 10996  0016C4  0EFF               	movlw	255
 10997  0016C6  0100               	movlb	0	; () banked
 10998  0016C8  17DF               	andwf	___ftadd@f1& (0+255),f,b
 10999  0016CA  0EFF               	movlw	255
 11000  0016CC  0100               	movlb	0	; () banked
 11001  0016CE  17E0               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11002  0016D0  0E00               	movlw	0
 11003  0016D2  0100               	movlb	0	; () banked
 11004  0016D4  17E1               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11005  0016D6  0100               	movlb	0	; () banked
 11006  0016D8  8FE3               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11007                           
 11008                           ; BSR set to: 0
 11009  0016DA  0EFF               	movlw	255
 11010  0016DC  0100               	movlb	0	; () banked
 11011  0016DE  17E2               	andwf	___ftadd@f2& (0+255),f,b
 11012  0016E0  0EFF               	movlw	255
 11013  0016E2  0100               	movlb	0	; () banked
 11014  0016E4  17E3               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11015  0016E6  0E00               	movlw	0
 11016  0016E8  0100               	movlb	0	; () banked
 11017  0016EA  17E4               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11018                           
 11019                           ; BSR set to: 0
 11020  0016EC  0100               	movlb	0	; () banked
 11021  0016EE  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11022  0016F0  0100               	movlb	0	; () banked
 11023  0016F2  5DEA               	subwf	___ftadd@exp1& (0+255),w,b
 11024  0016F4  B0D8               	btfsc	status,0,c
 11025  0016F6  D02A               	goto	l4553
 11026  0016F8                     l4543:
 11027                           
 11028                           ; BSR set to: 0
 11029  0016F8  0100               	movlb	0	; () banked
 11030  0016FA  90D8               	bcf	status,0,c
 11031  0016FC  0100               	movlb	0	; () banked
 11032  0016FE  37E2               	rlcf	___ftadd@f2& (0+255),f,b
 11033  001700  0100               	movlb	0	; () banked
 11034  001702  37E3               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11035  001704  0100               	movlb	0	; () banked
 11036  001706  37E4               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11037  001708  0100               	movlb	0	; () banked
 11038  00170A  07E9               	decf	___ftadd@exp2& (0+255),f,b
 11039                           
 11040                           ; BSR set to: 0
 11041  00170C  0100               	movlb	0	; () banked
 11042  00170E  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11043  001710  0100               	movlb	0	; () banked
 11044  001712  19EA               	xorwf	___ftadd@exp1& (0+255),w,b
 11045  001714  B4D8               	btfsc	status,2,c
 11046  001716  D014               	goto	l4551
 11047                           
 11048                           ; BSR set to: 0
 11049  001718  0100               	movlb	0	; () banked
 11050  00171A  07E8               	decf	___ftadd@sign& (0+255),f,b
 11051  00171C  C0E8  F0E5         	movff	___ftadd@sign,??___ftadd
 11052  001720  0E07               	movlw	7
 11053  001722  0100               	movlb	0	; () banked
 11054  001724  17E5               	andwf	??___ftadd& (0+255),f,b
 11055  001726  B4D8               	btfsc	status,2,c
 11056  001728  D00B               	goto	l4551
 11057  00172A  D7E6               	goto	l4543
 11058  00172C                     l4549:
 11059                           
 11060                           ; BSR set to: 0
 11061  00172C  0100               	movlb	0	; () banked
 11062  00172E  90D8               	bcf	status,0,c
 11063  001730  0100               	movlb	0	; () banked
 11064  001732  33E1               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11065  001734  0100               	movlb	0	; () banked
 11066  001736  33E0               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11067  001738  0100               	movlb	0	; () banked
 11068  00173A  33DF               	rrcf	___ftadd@f1& (0+255),f,b
 11069  00173C  0100               	movlb	0	; () banked
 11070  00173E  2BEA               	incf	___ftadd@exp1& (0+255),f,b
 11071  001740                     l4551:
 11072                           
 11073                           ; BSR set to: 0
 11074  001740  0100               	movlb	0	; () banked
 11075  001742  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11076  001744  0100               	movlb	0	; () banked
 11077  001746  63EA               	cpfseq	___ftadd@exp1& (0+255),b
 11078  001748  D7F1               	goto	l4549
 11079  00174A  D02F               	goto	l1182
 11080  00174C                     l4553:
 11081                           
 11082                           ; BSR set to: 0
 11083  00174C  0100               	movlb	0	; () banked
 11084  00174E  51EA               	movf	___ftadd@exp1& (0+255),w,b
 11085  001750  0100               	movlb	0	; () banked
 11086  001752  5DE9               	subwf	___ftadd@exp2& (0+255),w,b
 11087  001754  B0D8               	btfsc	status,0,c
 11088  001756  D029               	goto	l1182
 11089  001758                     l4555:
 11090                           
 11091                           ; BSR set to: 0
 11092  001758  0100               	movlb	0	; () banked
 11093  00175A  90D8               	bcf	status,0,c
 11094  00175C  0100               	movlb	0	; () banked
 11095  00175E  37DF               	rlcf	___ftadd@f1& (0+255),f,b
 11096  001760  0100               	movlb	0	; () banked
 11097  001762  37E0               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11098  001764  0100               	movlb	0	; () banked
 11099  001766  37E1               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11100  001768  0100               	movlb	0	; () banked
 11101  00176A  07EA               	decf	___ftadd@exp1& (0+255),f,b
 11102                           
 11103                           ; BSR set to: 0
 11104  00176C  0100               	movlb	0	; () banked
 11105  00176E  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11106  001770  0100               	movlb	0	; () banked
 11107  001772  19EA               	xorwf	___ftadd@exp1& (0+255),w,b
 11108  001774  B4D8               	btfsc	status,2,c
 11109  001776  D014               	goto	l4563
 11110                           
 11111                           ; BSR set to: 0
 11112  001778  0100               	movlb	0	; () banked
 11113  00177A  07E8               	decf	___ftadd@sign& (0+255),f,b
 11114  00177C  C0E8  F0E5         	movff	___ftadd@sign,??___ftadd
 11115  001780  0E07               	movlw	7
 11116  001782  0100               	movlb	0	; () banked
 11117  001784  17E5               	andwf	??___ftadd& (0+255),f,b
 11118  001786  B4D8               	btfsc	status,2,c
 11119  001788  D00B               	goto	l4563
 11120  00178A  D7E6               	goto	l4555
 11121  00178C                     l4561:
 11122                           
 11123                           ; BSR set to: 0
 11124  00178C  0100               	movlb	0	; () banked
 11125  00178E  90D8               	bcf	status,0,c
 11126  001790  0100               	movlb	0	; () banked
 11127  001792  33E4               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11128  001794  0100               	movlb	0	; () banked
 11129  001796  33E3               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11130  001798  0100               	movlb	0	; () banked
 11131  00179A  33E2               	rrcf	___ftadd@f2& (0+255),f,b
 11132  00179C  0100               	movlb	0	; () banked
 11133  00179E  2BE9               	incf	___ftadd@exp2& (0+255),f,b
 11134  0017A0                     l4563:
 11135                           
 11136                           ; BSR set to: 0
 11137  0017A0  0100               	movlb	0	; () banked
 11138  0017A2  51E9               	movf	___ftadd@exp2& (0+255),w,b
 11139  0017A4  0100               	movlb	0	; () banked
 11140  0017A6  63EA               	cpfseq	___ftadd@exp1& (0+255),b
 11141  0017A8  D7F1               	goto	l4561
 11142  0017AA                     l1182:
 11143                           
 11144                           ; BSR set to: 0
 11145  0017AA  0100               	movlb	0	; () banked
 11146  0017AC  AFE8               	btfss	___ftadd@sign& (0+255),7,b
 11147  0017AE  D012               	goto	l1191
 11148                           
 11149                           ; BSR set to: 0
 11150  0017B0  0EFF               	movlw	255
 11151  0017B2  0100               	movlb	0	; () banked
 11152  0017B4  1BDF               	xorwf	___ftadd@f1& (0+255),f,b
 11153  0017B6  0EFF               	movlw	255
 11154  0017B8  0100               	movlb	0	; () banked
 11155  0017BA  1BE0               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11156  0017BC  0EFF               	movlw	255
 11157  0017BE  0100               	movlb	0	; () banked
 11158  0017C0  1BE1               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11159  0017C2  0E01               	movlw	1
 11160  0017C4  0100               	movlb	0	; () banked
 11161  0017C6  27DF               	addwf	___ftadd@f1& (0+255),f,b
 11162  0017C8  0E00               	movlw	0
 11163  0017CA  0100               	movlb	0	; () banked
 11164  0017CC  23E0               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11165  0017CE  0E00               	movlw	0
 11166  0017D0  0100               	movlb	0	; () banked
 11167  0017D2  23E1               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11168  0017D4                     l1191:
 11169                           
 11170                           ; BSR set to: 0
 11171  0017D4  0100               	movlb	0	; () banked
 11172  0017D6  ADE8               	btfss	___ftadd@sign& (0+255),6,b
 11173  0017D8  D012               	goto	l4569
 11174                           
 11175                           ; BSR set to: 0
 11176  0017DA  0EFF               	movlw	255
 11177  0017DC  0100               	movlb	0	; () banked
 11178  0017DE  1BE2               	xorwf	___ftadd@f2& (0+255),f,b
 11179  0017E0  0EFF               	movlw	255
 11180  0017E2  0100               	movlb	0	; () banked
 11181  0017E4  1BE3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11182  0017E6  0EFF               	movlw	255
 11183  0017E8  0100               	movlb	0	; () banked
 11184  0017EA  1BE4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11185  0017EC  0E01               	movlw	1
 11186  0017EE  0100               	movlb	0	; () banked
 11187  0017F0  27E2               	addwf	___ftadd@f2& (0+255),f,b
 11188  0017F2  0E00               	movlw	0
 11189  0017F4  0100               	movlb	0	; () banked
 11190  0017F6  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11191  0017F8  0E00               	movlw	0
 11192  0017FA  0100               	movlb	0	; () banked
 11193  0017FC  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11194  0017FE                     l4569:
 11195                           
 11196                           ; BSR set to: 0
 11197  0017FE  0E00               	movlw	0
 11198  001800  0100               	movlb	0	; () banked
 11199  001802  6FE8               	movwf	___ftadd@sign& (0+255),b
 11200                           
 11201                           ; BSR set to: 0
 11202  001804  0100               	movlb	0	; () banked
 11203  001806  51DF               	movf	___ftadd@f1& (0+255),w,b
 11204  001808  0100               	movlb	0	; () banked
 11205  00180A  27E2               	addwf	___ftadd@f2& (0+255),f,b
 11206  00180C  0100               	movlb	0	; () banked
 11207  00180E  51E0               	movf	(___ftadd@f1+1)& (0+255),w,b
 11208  001810  0100               	movlb	0	; () banked
 11209  001812  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11210  001814  0100               	movlb	0	; () banked
 11211  001816  51E1               	movf	(___ftadd@f1+2)& (0+255),w,b
 11212  001818  0100               	movlb	0	; () banked
 11213  00181A  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11214                           
 11215                           ; BSR set to: 0
 11216  00181C  0100               	movlb	0	; () banked
 11217  00181E  AFE4               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11218  001820  D015               	goto	l4579
 11219                           
 11220                           ; BSR set to: 0
 11221  001822  0EFF               	movlw	255
 11222  001824  0100               	movlb	0	; () banked
 11223  001826  1BE2               	xorwf	___ftadd@f2& (0+255),f,b
 11224  001828  0EFF               	movlw	255
 11225  00182A  0100               	movlb	0	; () banked
 11226  00182C  1BE3               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11227  00182E  0EFF               	movlw	255
 11228  001830  0100               	movlb	0	; () banked
 11229  001832  1BE4               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11230  001834  0E01               	movlw	1
 11231  001836  0100               	movlb	0	; () banked
 11232  001838  27E2               	addwf	___ftadd@f2& (0+255),f,b
 11233  00183A  0E00               	movlw	0
 11234  00183C  0100               	movlb	0	; () banked
 11235  00183E  23E3               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11236  001840  0E00               	movlw	0
 11237  001842  0100               	movlb	0	; () banked
 11238  001844  23E4               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11239                           
 11240                           ; BSR set to: 0
 11241  001846  0E01               	movlw	1
 11242  001848  0100               	movlb	0	; () banked
 11243  00184A  6FE8               	movwf	___ftadd@sign& (0+255),b
 11244  00184C                     l4579:
 11245                           
 11246                           ; BSR set to: 0
 11247  00184C  C0E2  F01B         	movff	___ftadd@f2,___ftpack@arg
 11248  001850  C0E3  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
 11249  001854  C0E4  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
 11250  001858  C0EA  F01E         	movff	___ftadd@exp1,___ftpack@exp
 11251  00185C  C0E8  F01F         	movff	___ftadd@sign,___ftpack@sign
 11252  001860  EC90  F018         	call	___ftpack	;wreg free
 11253  001864  C01B  F0DF         	movff	?___ftpack,?___ftadd
 11254  001868  C01C  F0E0         	movff	?___ftpack+1,?___ftadd+1
 11255  00186C  C01D  F0E1         	movff	?___ftpack+2,?___ftadd+2
 11256  001870  0012               	return	
 11257  001872                     __end_of___ftadd:
 11258                           	opt stack 0
 11259                           tosu	equ	0xFFF
 11260                           tosh	equ	0xFFE
 11261                           tosl	equ	0xFFD
 11262                           pclath	equ	0xFFA
 11263                           tblptru	equ	0xFF8
 11264                           tblptrh	equ	0xFF7
 11265                           tblptrl	equ	0xFF6
 11266                           tablat	equ	0xFF5
 11267                           prodh	equ	0xFF4
 11268                           prodl	equ	0xFF3
 11269                           intcon	equ	0xFF2
 11270                           intcon2	equ	0xFF1
 11271                           postinc0	equ	0xFEE
 11272                           wreg	equ	0xFE8
 11273                           postinc1	equ	0xFE6
 11274                           postdec1	equ	0xFE5
 11275                           fsr1h	equ	0xFE2
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           fsr2h	equ	0xFDA
 11281                           fsr2l	equ	0xFD9
 11282                           status	equ	0xFD8
 11283                           
 11284 ;; *************** function ___ftpack *****************
 11285 ;; Defined at:
 11286 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;  arg             3   26[COMRAM] unsigned um
 11289 ;;  exp             1   29[COMRAM] unsigned char 
 11290 ;;  sign            1   30[COMRAM] unsigned char 
 11291 ;; Auto vars:     Size  Location     Type
 11292 ;;		None
 11293 ;; Return value:  Size  Location     Type
 11294 ;;                  3   26[COMRAM] float 
 11295 ;; Registers used:
 11296 ;;		wreg, status,2, status,0
 11297 ;; Tracked objects:
 11298 ;;		On entry : 0/0
 11299 ;;		On exit  : 0/0
 11300 ;;		Unchanged: 0/0
 11301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11302 ;;      Params:         5       0       0       0       0       0       0
 11303 ;;      Locals:         0       0       0       0       0       0       0
 11304 ;;      Temps:          3       0       0       0       0       0       0
 11305 ;;      Totals:         8       0       0       0       0       0       0
 11306 ;;Total ram usage:        8 bytes
 11307 ;; Hardware stack levels used:    1
 11308 ;; Hardware stack levels required when called:    4
 11309 ;; This function calls:
 11310 ;;		Nothing
 11311 ;; This function is called by:
 11312 ;;		___altoft
 11313 ;;		___awtoft
 11314 ;;		___ftadd
 11315 ;;		___ftdiv
 11316 ;;		___ftmul
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           	psect	text57
 11321  003120                     __ptext57:
 11322                           	opt stack 0
 11323  003120                     ___ftpack:
 11324                           	opt stack 24
 11325                           
 11326                           ;incstack = 0
 11327  003120  501E               	movf	___ftpack@exp,w,c
 11328  003122  B4D8               	btfsc	status,2,c
 11329  003124  D005               	goto	l4381
 11330  003126  501B               	movf	___ftpack@arg,w,c
 11331  003128  101C               	iorwf	___ftpack@arg+1,w,c
 11332  00312A  101D               	iorwf	___ftpack@arg+2,w,c
 11333  00312C  A4D8               	btfss	status,2,c
 11334  00312E  D00C               	goto	l4387
 11335  003130                     l4381:
 11336  003130  0E00               	movlw	0
 11337  003132  6E1B               	movwf	?___ftpack,c
 11338  003134  0E00               	movlw	0
 11339  003136  6E1C               	movwf	?___ftpack+1,c
 11340  003138  0E00               	movlw	0
 11341  00313A  6E1D               	movwf	?___ftpack+2,c
 11342  00313C  0012               	return	
 11343  00313E                     l4385:
 11344  00313E  2A1E               	incf	___ftpack@exp,f,c
 11345  003140  90D8               	bcf	status,0,c
 11346  003142  321D               	rrcf	___ftpack@arg+2,f,c
 11347  003144  321C               	rrcf	___ftpack@arg+1,f,c
 11348  003146  321B               	rrcf	___ftpack@arg,f,c
 11349  003148                     l4387:
 11350  003148  0E00               	movlw	0
 11351  00314A  141B               	andwf	___ftpack@arg,w,c
 11352  00314C  6E20               	movwf	??___ftpack& (0+255),c
 11353  00314E  0E00               	movlw	0
 11354  003150  141C               	andwf	___ftpack@arg+1,w,c
 11355  003152  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11356  003154  0EFE               	movlw	254
 11357  003156  141D               	andwf	___ftpack@arg+2,w,c
 11358  003158  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11359  00315A  5020               	movf	??___ftpack,w,c
 11360  00315C  1021               	iorwf	??___ftpack+1,w,c
 11361  00315E  1022               	iorwf	??___ftpack+2,w,c
 11362  003160  B4D8               	btfsc	status,2,c
 11363  003162  D00C               	goto	l4393
 11364  003164  D7EC               	goto	l4385
 11365  003166                     l4389:
 11366  003166  2A1E               	incf	___ftpack@exp,f,c
 11367  003168  0E01               	movlw	1
 11368  00316A  261B               	addwf	___ftpack@arg,f,c
 11369  00316C  0E00               	movlw	0
 11370  00316E  221C               	addwfc	___ftpack@arg+1,f,c
 11371  003170  0E00               	movlw	0
 11372  003172  221D               	addwfc	___ftpack@arg+2,f,c
 11373  003174  90D8               	bcf	status,0,c
 11374  003176  321D               	rrcf	___ftpack@arg+2,f,c
 11375  003178  321C               	rrcf	___ftpack@arg+1,f,c
 11376  00317A  321B               	rrcf	___ftpack@arg,f,c
 11377  00317C                     l4393:
 11378  00317C  0E00               	movlw	0
 11379  00317E  141B               	andwf	___ftpack@arg,w,c
 11380  003180  6E20               	movwf	??___ftpack& (0+255),c
 11381  003182  0E00               	movlw	0
 11382  003184  141C               	andwf	___ftpack@arg+1,w,c
 11383  003186  6E21               	movwf	(??___ftpack+1)& (0+255),c
 11384  003188  0EFF               	movlw	255
 11385  00318A  141D               	andwf	___ftpack@arg+2,w,c
 11386  00318C  6E22               	movwf	(??___ftpack+2)& (0+255),c
 11387  00318E  5020               	movf	??___ftpack,w,c
 11388  003190  1021               	iorwf	??___ftpack+1,w,c
 11389  003192  1022               	iorwf	??___ftpack+2,w,c
 11390  003194  B4D8               	btfsc	status,2,c
 11391  003196  D006               	goto	l4397
 11392  003198  D7E6               	goto	l4389
 11393  00319A                     l4395:
 11394  00319A  061E               	decf	___ftpack@exp,f,c
 11395  00319C  90D8               	bcf	status,0,c
 11396  00319E  361B               	rlcf	___ftpack@arg,f,c
 11397  0031A0  361C               	rlcf	___ftpack@arg+1,f,c
 11398  0031A2  361D               	rlcf	___ftpack@arg+2,f,c
 11399  0031A4                     l4397:
 11400  0031A4  AE1C               	btfss	___ftpack@arg+1,7,c
 11401  0031A6  D7F9               	goto	l4395
 11402  0031A8  A01E               	btfss	___ftpack@exp,0,c
 11403  0031AA  9E1C               	bcf	___ftpack@arg+1,7,c
 11404  0031AC  90D8               	bcf	status,0,c
 11405  0031AE  321E               	rrcf	___ftpack@exp,f,c
 11406  0031B0  501E               	movf	___ftpack@exp,w,c
 11407  0031B2  121D               	iorwf	___ftpack@arg+2,f,c
 11408  0031B4  501F               	movf	___ftpack@sign,w,c
 11409  0031B6  A4D8               	btfss	status,2,c
 11410  0031B8  8E1D               	bsf	___ftpack@arg+2,7,c
 11411  0031BA  C01B  F01B         	movff	___ftpack@arg,?___ftpack
 11412  0031BE  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
 11413  0031C2  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
 11414  0031C6  0012               	return	
 11415  0031C8                     __end_of___ftpack:
 11416                           	opt stack 0
 11417                           tosu	equ	0xFFF
 11418                           tosh	equ	0xFFE
 11419                           tosl	equ	0xFFD
 11420                           pclath	equ	0xFFA
 11421                           tblptru	equ	0xFF8
 11422                           tblptrh	equ	0xFF7
 11423                           tblptrl	equ	0xFF6
 11424                           tablat	equ	0xFF5
 11425                           prodh	equ	0xFF4
 11426                           prodl	equ	0xFF3
 11427                           intcon	equ	0xFF2
 11428                           intcon2	equ	0xFF1
 11429                           postinc0	equ	0xFEE
 11430                           wreg	equ	0xFE8
 11431                           postinc1	equ	0xFE6
 11432                           postdec1	equ	0xFE5
 11433                           fsr1h	equ	0xFE2
 11434                           fsr1l	equ	0xFE1
 11435                           indf2	equ	0xFDF
 11436                           postinc2	equ	0xFDE
 11437                           postdec2	equ	0xFDD
 11438                           fsr2h	equ	0xFDA
 11439                           fsr2l	equ	0xFD9
 11440                           status	equ	0xFD8
 11441                           
 11442 ;; *************** function _INTERRUPT_InterruptManager *****************
 11443 ;; Defined at:
 11444 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 11445 ;; Parameters:    Size  Location     Type
 11446 ;;		None
 11447 ;; Auto vars:     Size  Location     Type
 11448 ;;		None
 11449 ;; Return value:  Size  Location     Type
 11450 ;;		None               void
 11451 ;; Registers used:
 11452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
 11453 ;; Tracked objects:
 11454 ;;		On entry : 0/0
 11455 ;;		On exit  : 0/0
 11456 ;;		Unchanged: 0/0
 11457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11458 ;;      Params:         0       0       0       0       0       0       0
 11459 ;;      Locals:         0       0       0       0       0       0       0
 11460 ;;      Temps:         14       0       0       0       0       0       0
 11461 ;;      Totals:        14       0       0       0       0       0       0
 11462 ;;Total ram usage:       14 bytes
 11463 ;; Hardware stack levels used:    1
 11464 ;; Hardware stack levels required when called:    3
 11465 ;; This function calls:
 11466 ;;		_ADC_ISR
 11467 ;;		_EUSART1_Receive_ISR
 11468 ;;		_EUSART1_Transmit_ISR
 11469 ;;		_TMR1_ISR
 11470 ;; This function is called by:
 11471 ;;		Interrupt level 2
 11472 ;; This function uses a non-reentrant model
 11473 ;;
 11474                           
 11475                           	psect	intcode
 11476  000008                     __pintcode:
 11477                           	opt stack 0
 11478  000008                     _INTERRUPT_InterruptManager:
 11479                           	opt stack 21
 11480                           
 11481                           ;incstack = 0
 11482  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
 11483  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 11484  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 11485  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 11486  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 11487  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 11488  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 11489  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 11490  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
 11491  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
 11492  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 11493  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 11494  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 11495  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
 11496                           
 11497                           ;interrupt_manager.c: 72: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 11498  000040  BA9D               	btfsc	3997,5,c	;volatile
 11499  000042  AA9E               	btfss	3998,5,c	;volatile
 11500  000044  D003               	goto	i2l207
 11501                           
 11502                           ;interrupt_manager.c: 73: {
 11503                           ;interrupt_manager.c: 74: EUSART1_Receive_ISR();
 11504  000046  ECC7  F01D         	call	_EUSART1_Receive_ISR	;wreg free
 11505                           
 11506                           ;interrupt_manager.c: 75: }
 11507  00004A  D011               	goto	i2l215
 11508  00004C                     i2l207:
 11509                           
 11510                           ;interrupt_manager.c: 76: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 11511  00004C  BC9D               	btfsc	3997,6,c	;volatile
 11512  00004E  AC9E               	btfss	3998,6,c	;volatile
 11513  000050  D003               	goto	i2l209
 11514                           
 11515                           ;interrupt_manager.c: 77: {
 11516                           ;interrupt_manager.c: 78: ADC_ISR();
 11517  000052  ECA9  F008         	call	_ADC_ISR	;wreg free
 11518                           
 11519                           ;interrupt_manager.c: 79: }
 11520  000056  D00B               	goto	i2l215
 11521  000058                     i2l209:
 11522                           
 11523                           ;interrupt_manager.c: 80: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 11524  000058  B09D               	btfsc	3997,0,c	;volatile
 11525  00005A  A09E               	btfss	3998,0,c	;volatile
 11526  00005C  D003               	goto	i2l211
 11527                           
 11528                           ;interrupt_manager.c: 81: {
 11529                           ;interrupt_manager.c: 82: TMR1_ISR();
 11530  00005E  EC7C  F01B         	call	_TMR1_ISR	;wreg free
 11531                           
 11532                           ;interrupt_manager.c: 83: }
 11533  000062  D005               	goto	i2l215
 11534  000064                     i2l211:
 11535                           
 11536                           ;interrupt_manager.c: 84: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 11537  000064  B89D               	btfsc	3997,4,c	;volatile
 11538  000066  A89E               	btfss	3998,4,c	;volatile
 11539  000068  D002               	goto	i2l215
 11540                           
 11541                           ;interrupt_manager.c: 85: {
 11542                           ;interrupt_manager.c: 86: EUSART1_Transmit_ISR();
 11543  00006A  EC7C  F01C         	call	_EUSART1_Transmit_ISR	;wreg free
 11544  00006E                     i2l215:
 11545  00006E  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 11546  000072  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 11547  000076  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 11548  00007A  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 11549  00007E  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 11550  000082  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 11551  000086  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 11552  00008A  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 11553  00008E  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 11554  000092  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 11555  000096  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 11556  00009A  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 11557  00009E  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 11558  0000A2  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 11559  0000A6  0011               	retfie		f
 11560  0000A8                     __end_of_INTERRUPT_InterruptManager:
 11561                           	opt stack 0
 11562                           tosu	equ	0xFFF
 11563                           tosh	equ	0xFFE
 11564                           tosl	equ	0xFFD
 11565                           pclatu	equ	0xFFB
 11566                           pclath	equ	0xFFA
 11567                           tblptru	equ	0xFF8
 11568                           tblptrh	equ	0xFF7
 11569                           tblptrl	equ	0xFF6
 11570                           tablat	equ	0xFF5
 11571                           prodh	equ	0xFF4
 11572                           prodl	equ	0xFF3
 11573                           intcon	equ	0xFF2
 11574                           intcon2	equ	0xFF1
 11575                           postinc0	equ	0xFEE
 11576                           fsr0h	equ	0xFEA
 11577                           fsr0l	equ	0xFE9
 11578                           wreg	equ	0xFE8
 11579                           postinc1	equ	0xFE6
 11580                           postdec1	equ	0xFE5
 11581                           fsr1h	equ	0xFE2
 11582                           fsr1l	equ	0xFE1
 11583                           indf2	equ	0xFDF
 11584                           postinc2	equ	0xFDE
 11585                           postdec2	equ	0xFDD
 11586                           fsr2h	equ	0xFDA
 11587                           fsr2l	equ	0xFD9
 11588                           status	equ	0xFD8
 11589                           
 11590 ;; *************** function _TMR1_ISR *****************
 11591 ;; Defined at:
 11592 ;;		line 112 in file "mcc_generated_files/tmr1.c"
 11593 ;; Parameters:    Size  Location     Type
 11594 ;;		None
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;		None
 11597 ;; Return value:  Size  Location     Type
 11598 ;;		None               void
 11599 ;; Registers used:
 11600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11601 ;; Tracked objects:
 11602 ;;		On entry : 0/0
 11603 ;;		On exit  : 0/0
 11604 ;;		Unchanged: 0/0
 11605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11606 ;;      Params:         0       0       0       0       0       0       0
 11607 ;;      Locals:         0       0       0       0       0       0       0
 11608 ;;      Temps:          3       0       0       0       0       0       0
 11609 ;;      Totals:         3       0       0       0       0       0       0
 11610 ;;Total ram usage:        3 bytes
 11611 ;; Hardware stack levels used:    1
 11612 ;; Hardware stack levels required when called:    2
 11613 ;; This function calls:
 11614 ;;		_Battery_Read
 11615 ;;		_Temp_Read
 11616 ;; This function is called by:
 11617 ;;		_INTERRUPT_InterruptManager
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text59
 11622  0036F8                     __ptext59:
 11623                           	opt stack 0
 11624  0036F8                     _TMR1_ISR:
 11625                           	opt stack 21
 11626                           
 11627                           ;tmr1.c: 116: PIR1bits.TMR1IF = 0;
 11628                           
 11629                           ;incstack = 0
 11630  0036F8  909E               	bcf	3998,0,c	;volatile
 11631                           
 11632                           ;tmr1.c: 119: TMR1H = (timer1ReloadVal >> 8);
 11633  0036FA  C038  F005         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
 11634  0036FE  C005  F006         	movff	??_TMR1_ISR,??_TMR1_ISR+1
 11635  003702  6A07               	clrf	(??_TMR1_ISR+2)& (0+255),c
 11636  003704  5006               	movf	??_TMR1_ISR+1,w,c
 11637  003706  6ECF               	movwf	4047,c	;volatile
 11638                           
 11639                           ;tmr1.c: 120: TMR1L = (uint8_t) timer1ReloadVal;
 11640  003708  C037  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 11641                           
 11642                           ;tmr1.c: 123: if (++CountCallBack >= 4)
 11643  00370C  EE20  F02F         	lfsr	2,_CountCallBack
 11644  003710  2ADE               	incf	postinc2,f,c
 11645  003712  0E00               	movlw	0
 11646  003714  22DD               	addwfc	postdec2,f,c
 11647  003716  52DE               	movf	postinc2,f,c
 11648  003718  50DD               	movf	postdec2,w,c
 11649  00371A  0A80               	xorlw	128
 11650  00371C  0F80               	addlw	128
 11651  00371E  0E04               	movlw	4
 11652  003720  B4D8               	btfsc	status,2,c
 11653  003722  5CDF               	subwf	indf2,w,c
 11654  003724  A0D8               	btfss	status,0,c
 11655  003726  D005               	goto	i2l3941
 11656                           
 11657                           ;tmr1.c: 124: {
 11658                           ;tmr1.c: 126: do { LATA4 = ~LATA4; } while(0);
 11659  003728  7889               	btg	3977,4,c	;volatile
 11660                           
 11661                           ;tmr1.c: 129: CountCallBack = 0;
 11662  00372A  0E00               	movlw	0
 11663  00372C  6E30               	movwf	_CountCallBack+1,c
 11664  00372E  0E00               	movlw	0
 11665  003730  6E2F               	movwf	_CountCallBack,c
 11666  003732                     i2l3941:
 11667                           
 11668                           ;tmr1.c: 130: }
 11669                           ;tmr1.c: 135: if(CountCallBack == 1)
 11670  003732  042F               	decf	_CountCallBack,w,c
 11671  003734  1030               	iorwf	_CountCallBack+1,w,c
 11672  003736  B4D8               	btfsc	status,2,c
 11673                           
 11674                           ;tmr1.c: 136: {
 11675                           ;tmr1.c: 137: Battery_Read();
 11676  003738  EC1C  F01E         	call	_Battery_Read	;wreg free
 11677                           
 11678                           ;tmr1.c: 138: }
 11679                           ;tmr1.c: 139: if(CountCallBack == 3)
 11680  00373C  502F               	movf	_CountCallBack,w,c
 11681  00373E  0A03               	xorlw	3
 11682  003740  1030               	iorwf	_CountCallBack+1,w,c
 11683  003742  A4D8               	btfss	status,2,c
 11684  003744  0012               	return	
 11685                           
 11686                           ;tmr1.c: 140: {
 11687                           ;tmr1.c: 141: Temp_Read();
 11688  003746  EC93  F01D         	call	_Temp_Read	;wreg free
 11689  00374A  0012               	return	
 11690  00374C                     __end_of_TMR1_ISR:
 11691                           	opt stack 0
 11692                           tosu	equ	0xFFF
 11693                           tosh	equ	0xFFE
 11694                           tosl	equ	0xFFD
 11695                           pclatu	equ	0xFFB
 11696                           pclath	equ	0xFFA
 11697                           tblptru	equ	0xFF8
 11698                           tblptrh	equ	0xFF7
 11699                           tblptrl	equ	0xFF6
 11700                           tablat	equ	0xFF5
 11701                           prodh	equ	0xFF4
 11702                           prodl	equ	0xFF3
 11703                           intcon	equ	0xFF2
 11704                           intcon2	equ	0xFF1
 11705                           postinc0	equ	0xFEE
 11706                           fsr0h	equ	0xFEA
 11707                           fsr0l	equ	0xFE9
 11708                           wreg	equ	0xFE8
 11709                           postinc1	equ	0xFE6
 11710                           postdec1	equ	0xFE5
 11711                           fsr1h	equ	0xFE2
 11712                           fsr1l	equ	0xFE1
 11713                           indf2	equ	0xFDF
 11714                           postinc2	equ	0xFDE
 11715                           postdec2	equ	0xFDD
 11716                           fsr2h	equ	0xFDA
 11717                           fsr2l	equ	0xFD9
 11718                           status	equ	0xFD8
 11719                           
 11720 ;; *************** function _Temp_Read *****************
 11721 ;; Defined at:
 11722 ;;		line 32 in file "Tempeture.c"
 11723 ;; Parameters:    Size  Location     Type
 11724 ;;		None
 11725 ;; Auto vars:     Size  Location     Type
 11726 ;;		None
 11727 ;; Return value:  Size  Location     Type
 11728 ;;		None               void
 11729 ;; Registers used:
 11730 ;;		wreg, status,2, status,0, cstack
 11731 ;; Tracked objects:
 11732 ;;		On entry : 0/0
 11733 ;;		On exit  : 0/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11736 ;;      Params:         0       0       0       0       0       0       0
 11737 ;;      Locals:         0       0       0       0       0       0       0
 11738 ;;      Temps:          0       0       0       0       0       0       0
 11739 ;;      Totals:         0       0       0       0       0       0       0
 11740 ;;Total ram usage:        0 bytes
 11741 ;; Hardware stack levels used:    1
 11742 ;; Hardware stack levels required when called:    1
 11743 ;; This function calls:
 11744 ;;		_ADC_StartConversion
 11745 ;;		_Set_4051
 11746 ;; This function is called by:
 11747 ;;		_TMR1_ISR
 11748 ;; This function uses a non-reentrant model
 11749 ;;
 11750                           
 11751                           	psect	text60
 11752  003B26                     __ptext60:
 11753                           	opt stack 0
 11754  003B26                     _Temp_Read:
 11755                           	opt stack 21
 11756                           
 11757                           ;Tempeture.c: 34: ADC_Buffer_Point = 0;
 11758                           
 11759                           ;incstack = 0
 11760  003B26  0E00               	movlw	0
 11761  003B28  6E2E               	movwf	_ADC_Buffer_Point+1,c
 11762  003B2A  0E00               	movlw	0
 11763  003B2C  6E2D               	movwf	_ADC_Buffer_Point,c
 11764                           
 11765                           ;Tempeture.c: 35: Temp_Aquire = 1;
 11766  003B2E  0E01               	movlw	1
 11767  003B30  6E3A               	movwf	_Temp_Aquire,c
 11768                           
 11769                           ;Tempeture.c: 36: Set_4051(1);
 11770  003B32  0E00               	movlw	0
 11771  003B34  6E02               	movwf	Set_4051@Channel+1,c
 11772  003B36  0E01               	movlw	1
 11773  003B38  6E01               	movwf	Set_4051@Channel,c
 11774  003B3A  EC02  F01D         	call	_Set_4051	;wreg free
 11775                           
 11776                           ;Tempeture.c: 37: ADCON1 = 0x80;
 11777  003B3E  0E80               	movlw	128
 11778  003B40  6EC1               	movwf	4033,c	;volatile
 11779                           
 11780                           ;Tempeture.c: 38: ADC_StartConversion(Temp1);
 11781  003B42  0E0E               	movlw	14
 11782  003B44  EC03  F01E         	call	_ADC_StartConversion
 11783  003B48  0012               	return	
 11784  003B4A                     __end_of_Temp_Read:
 11785                           	opt stack 0
 11786                           tosu	equ	0xFFF
 11787                           tosh	equ	0xFFE
 11788                           tosl	equ	0xFFD
 11789                           pclatu	equ	0xFFB
 11790                           pclath	equ	0xFFA
 11791                           tblptru	equ	0xFF8
 11792                           tblptrh	equ	0xFF7
 11793                           tblptrl	equ	0xFF6
 11794                           tablat	equ	0xFF5
 11795                           prodh	equ	0xFF4
 11796                           prodl	equ	0xFF3
 11797                           intcon	equ	0xFF2
 11798                           intcon2	equ	0xFF1
 11799                           postinc0	equ	0xFEE
 11800                           fsr0h	equ	0xFEA
 11801                           fsr0l	equ	0xFE9
 11802                           wreg	equ	0xFE8
 11803                           postinc1	equ	0xFE6
 11804                           postdec1	equ	0xFE5
 11805                           fsr1h	equ	0xFE2
 11806                           fsr1l	equ	0xFE1
 11807                           indf2	equ	0xFDF
 11808                           postinc2	equ	0xFDE
 11809                           postdec2	equ	0xFDD
 11810                           fsr2h	equ	0xFDA
 11811                           fsr2l	equ	0xFD9
 11812                           status	equ	0xFD8
 11813                           
 11814 ;; *************** function _Battery_Read *****************
 11815 ;; Defined at:
 11816 ;;		line 18 in file "Battery.c"
 11817 ;; Parameters:    Size  Location     Type
 11818 ;;		None
 11819 ;; Auto vars:     Size  Location     Type
 11820 ;;		None
 11821 ;; Return value:  Size  Location     Type
 11822 ;;		None               void
 11823 ;; Registers used:
 11824 ;;		wreg, status,2, status,0, cstack
 11825 ;; Tracked objects:
 11826 ;;		On entry : 0/0
 11827 ;;		On exit  : 0/0
 11828 ;;		Unchanged: 0/0
 11829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11830 ;;      Params:         0       0       0       0       0       0       0
 11831 ;;      Locals:         0       0       0       0       0       0       0
 11832 ;;      Temps:          0       0       0       0       0       0       0
 11833 ;;      Totals:         0       0       0       0       0       0       0
 11834 ;;Total ram usage:        0 bytes
 11835 ;; Hardware stack levels used:    1
 11836 ;; Hardware stack levels required when called:    1
 11837 ;; This function calls:
 11838 ;;		_ADC_StartConversion
 11839 ;; This function is called by:
 11840 ;;		_TMR1_ISR
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           	psect	text61
 11845  003C38                     __ptext61:
 11846                           	opt stack 0
 11847  003C38                     _Battery_Read:
 11848                           	opt stack 21
 11849                           
 11850                           ;Battery.c: 20: ADC_Buffer_Point = 0;
 11851                           
 11852                           ;incstack = 0
 11853  003C38  0E00               	movlw	0
 11854  003C3A  6E2E               	movwf	_ADC_Buffer_Point+1,c
 11855  003C3C  0E00               	movlw	0
 11856  003C3E  6E2D               	movwf	_ADC_Buffer_Point,c
 11857                           
 11858                           ;Battery.c: 21: Volt_Aquire = 1;
 11859  003C40  0E01               	movlw	1
 11860  003C42  6E3B               	movwf	_Volt_Aquire,c
 11861                           
 11862                           ;Battery.c: 22: ADCON1 = 0x80;
 11863  003C44  0E80               	movlw	128
 11864  003C46  6EC1               	movwf	4033,c	;volatile
 11865                           
 11866                           ;Battery.c: 23: ADC_StartConversion(Battery1);
 11867  003C48  0E01               	movlw	1
 11868  003C4A  EC03  F01E         	call	_ADC_StartConversion
 11869  003C4E  0012               	return	
 11870  003C50                     __end_of_Battery_Read:
 11871                           	opt stack 0
 11872                           tosu	equ	0xFFF
 11873                           tosh	equ	0xFFE
 11874                           tosl	equ	0xFFD
 11875                           pclatu	equ	0xFFB
 11876                           pclath	equ	0xFFA
 11877                           tblptru	equ	0xFF8
 11878                           tblptrh	equ	0xFF7
 11879                           tblptrl	equ	0xFF6
 11880                           tablat	equ	0xFF5
 11881                           prodh	equ	0xFF4
 11882                           prodl	equ	0xFF3
 11883                           intcon	equ	0xFF2
 11884                           intcon2	equ	0xFF1
 11885                           postinc0	equ	0xFEE
 11886                           fsr0h	equ	0xFEA
 11887                           fsr0l	equ	0xFE9
 11888                           wreg	equ	0xFE8
 11889                           postinc1	equ	0xFE6
 11890                           postdec1	equ	0xFE5
 11891                           fsr1h	equ	0xFE2
 11892                           fsr1l	equ	0xFE1
 11893                           indf2	equ	0xFDF
 11894                           postinc2	equ	0xFDE
 11895                           postdec2	equ	0xFDD
 11896                           fsr2h	equ	0xFDA
 11897                           fsr2l	equ	0xFD9
 11898                           status	equ	0xFD8
 11899                           
 11900 ;; *************** function _EUSART1_Transmit_ISR *****************
 11901 ;; Defined at:
 11902 ;;		line 157 in file "UART.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;		None
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;		None
 11907 ;; Return value:  Size  Location     Type
 11908 ;;		None               void
 11909 ;; Registers used:
 11910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11911 ;; Tracked objects:
 11912 ;;		On entry : 0/0
 11913 ;;		On exit  : 0/0
 11914 ;;		Unchanged: 0/0
 11915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11916 ;;      Params:         0       0       0       0       0       0       0
 11917 ;;      Locals:         0       0       0       0       0       0       0
 11918 ;;      Temps:          0       0       0       0       0       0       0
 11919 ;;      Totals:         0       0       0       0       0       0       0
 11920 ;;Total ram usage:        0 bytes
 11921 ;; Hardware stack levels used:    1
 11922 ;; Hardware stack levels required when called:    2
 11923 ;; This function calls:
 11924 ;;		i2_UART_buff_get
 11925 ;;		i2_UART_buff_size
 11926 ;; This function is called by:
 11927 ;;		_INTERRUPT_InterruptManager
 11928 ;; This function uses a non-reentrant model
 11929 ;;
 11930                           
 11931                           	psect	text62
 11932  0038F8                     __ptext62:
 11933                           	opt stack 0
 11934  0038F8                     _EUSART1_Transmit_ISR:
 11935                           	opt stack 21
 11936                           
 11937                           ;UART.c: 159: if (UART_buff_size(&output_buffer) > 0) {
 11938                           
 11939                           ;incstack = 0
 11940  0038F8  0105               	movlb	5	; () banked
 11941  0038FA  0E05               	movlw	high _output_buffer
 11942  0038FC  6E02               	movwf	i2UART_buff_size@_this+1,c
 11943  0038FE  0105               	movlb	5	; () banked
 11944  003900  0E00               	movlw	low _output_buffer
 11945  003902  6E01               	movwf	i2UART_buff_size@_this,c
 11946  003904  EC33  F01E         	call	i2_UART_buff_size	;wreg free
 11947  003908  5002               	movf	?i2_UART_buff_size+1,w,c
 11948  00390A  0A80               	xorlw	128
 11949  00390C  0F80               	addlw	-128
 11950  00390E  0E01               	movlw	1
 11951  003910  B4D8               	btfsc	status,2,c
 11952  003912  5C01               	subwf	?i2_UART_buff_size,w,c
 11953  003914  A0D8               	btfss	status,0,c
 11954  003916  D00A               	goto	i2l4055
 11955                           
 11956                           ;UART.c: 160: TXREG1 = UART_buff_get(&output_buffer);
 11957  003918  0105               	movlb	5	; () banked
 11958  00391A  0E05               	movlw	high _output_buffer
 11959  00391C  6E08               	movwf	i2UART_buff_get@_this+1,c
 11960  00391E  0105               	movlb	5	; () banked
 11961  003920  0E00               	movlw	low _output_buffer
 11962  003922  6E07               	movwf	i2UART_buff_get@_this,c
 11963  003924  ECC8  F019         	call	i2_UART_buff_get	;wreg free
 11964  003928  6EAD               	movwf	4013,c	;volatile
 11965                           
 11966                           ;UART.c: 161: } else {
 11967  00392A  0012               	return	
 11968  00392C                     i2l4055:
 11969                           
 11970                           ;UART.c: 162: Transmit_stall = 1;
 11971  00392C  0E01               	movlw	1
 11972  00392E  6E45               	movwf	_Transmit_stall,c
 11973                           
 11974                           ;UART.c: 163: PIE1bits.TX1IE = 0;
 11975  003930  989D               	bcf	3997,4,c	;volatile
 11976  003932  0012               	return	
 11977  003934                     __end_of_EUSART1_Transmit_ISR:
 11978                           	opt stack 0
 11979                           tosu	equ	0xFFF
 11980                           tosh	equ	0xFFE
 11981                           tosl	equ	0xFFD
 11982                           pclatu	equ	0xFFB
 11983                           pclath	equ	0xFFA
 11984                           tblptru	equ	0xFF8
 11985                           tblptrh	equ	0xFF7
 11986                           tblptrl	equ	0xFF6
 11987                           tablat	equ	0xFF5
 11988                           prodh	equ	0xFF4
 11989                           prodl	equ	0xFF3
 11990                           intcon	equ	0xFF2
 11991                           intcon2	equ	0xFF1
 11992                           postinc0	equ	0xFEE
 11993                           fsr0h	equ	0xFEA
 11994                           fsr0l	equ	0xFE9
 11995                           wreg	equ	0xFE8
 11996                           postinc1	equ	0xFE6
 11997                           postdec1	equ	0xFE5
 11998                           fsr1h	equ	0xFE2
 11999                           fsr1l	equ	0xFE1
 12000                           indf2	equ	0xFDF
 12001                           postinc2	equ	0xFDE
 12002                           postdec2	equ	0xFDD
 12003                           fsr2h	equ	0xFDA
 12004                           fsr2l	equ	0xFD9
 12005                           status	equ	0xFD8
 12006                           
 12007 ;; *************** function i2_UART_buff_size *****************
 12008 ;; Defined at:
 12009 ;;		line 102 in file "UART.c"
 12010 ;; Parameters:    Size  Location     Type
 12011 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 12012 ;;		 -> output_buffer(206), input_buffer(206), 
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;		None
 12015 ;; Return value:  Size  Location     Type
 12016 ;;                  2    0[COMRAM] int 
 12017 ;; Registers used:
 12018 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12019 ;; Tracked objects:
 12020 ;;		On entry : 0/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12024 ;;      Params:         2       0       0       0       0       0       0
 12025 ;;      Locals:         0       0       0       0       0       0       0
 12026 ;;      Temps:          0       0       0       0       0       0       0
 12027 ;;      Totals:         2       0       0       0       0       0       0
 12028 ;;Total ram usage:        2 bytes
 12029 ;; Hardware stack levels used:    1
 12030 ;; This function calls:
 12031 ;;		Nothing
 12032 ;; This function is called by:
 12033 ;;		_EUSART1_Transmit_ISR
 12034 ;; This function uses a non-reentrant model
 12035 ;;
 12036                           
 12037                           	psect	text63
 12038  003C66                     __ptext63:
 12039                           	opt stack 0
 12040  003C66                     i2_UART_buff_size:
 12041                           	opt stack 22
 12042                           
 12043                           ;UART.c: 103: return (_this->count);
 12044                           
 12045                           ;incstack = 0
 12046  003C66  EE20 F0CC          	lfsr	2,204
 12047  003C6A  5001               	movf	i2UART_buff_size@_this,w,c
 12048  003C6C  26D9               	addwf	fsr2l,f,c
 12049  003C6E  5002               	movf	i2UART_buff_size@_this+1,w,c
 12050  003C70  22DA               	addwfc	fsr2h,f,c
 12051  003C72  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 12052  003C76  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 12053  003C7A  0012               	return	
 12054  003C7C                     __end_ofi2_UART_buff_size:
 12055                           	opt stack 0
 12056                           tosu	equ	0xFFF
 12057                           tosh	equ	0xFFE
 12058                           tosl	equ	0xFFD
 12059                           pclatu	equ	0xFFB
 12060                           pclath	equ	0xFFA
 12061                           tblptru	equ	0xFF8
 12062                           tblptrh	equ	0xFF7
 12063                           tblptrl	equ	0xFF6
 12064                           tablat	equ	0xFF5
 12065                           prodh	equ	0xFF4
 12066                           prodl	equ	0xFF3
 12067                           intcon	equ	0xFF2
 12068                           intcon2	equ	0xFF1
 12069                           postinc0	equ	0xFEE
 12070                           fsr0h	equ	0xFEA
 12071                           fsr0l	equ	0xFE9
 12072                           wreg	equ	0xFE8
 12073                           postinc1	equ	0xFE6
 12074                           postdec1	equ	0xFE5
 12075                           fsr1h	equ	0xFE2
 12076                           fsr1l	equ	0xFE1
 12077                           indf2	equ	0xFDF
 12078                           postinc2	equ	0xFDE
 12079                           postdec2	equ	0xFDD
 12080                           fsr2h	equ	0xFDA
 12081                           fsr2l	equ	0xFD9
 12082                           status	equ	0xFD8
 12083                           
 12084 ;; *************** function i2_UART_buff_get *****************
 12085 ;; Defined at:
 12086 ;;		line 81 in file "UART.c"
 12087 ;; Parameters:    Size  Location     Type
 12088 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12089 ;;		 -> output_buffer(206), input_buffer(206), 
 12090 ;; Auto vars:     Size  Location     Type
 12091 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 12092 ;; Return value:  Size  Location     Type
 12093 ;;                  1    wreg      unsigned char 
 12094 ;; Registers used:
 12095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12101 ;;      Params:         2       0       0       0       0       0       0
 12102 ;;      Locals:         1       0       0       0       0       0       0
 12103 ;;      Temps:          2       0       0       0       0       0       0
 12104 ;;      Totals:         5       0       0       0       0       0       0
 12105 ;;Total ram usage:        5 bytes
 12106 ;; Hardware stack levels used:    1
 12107 ;; Hardware stack levels required when called:    1
 12108 ;; This function calls:
 12109 ;;		i2_UART_buff_modulo_inc
 12110 ;; This function is called by:
 12111 ;;		_EUSART1_Transmit_ISR
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           	psect	text64
 12116  003390                     __ptext64:
 12117                           	opt stack 0
 12118  003390                     i2_UART_buff_get:
 12119                           	opt stack 21
 12120                           
 12121                           ;UART.c: 82: unsigned char c;
 12122                           ;UART.c: 83: if (_this->count > 0) {
 12123                           
 12124                           ;incstack = 0
 12125  003390  EE20 F0CC          	lfsr	2,204
 12126  003394  5007               	movf	i2UART_buff_get@_this,w,c
 12127  003396  26D9               	addwf	fsr2l,f,c
 12128  003398  5008               	movf	i2UART_buff_get@_this+1,w,c
 12129  00339A  22DA               	addwfc	fsr2h,f,c
 12130  00339C  52DE               	movf	postinc2,f,c
 12131  00339E  50DD               	movf	postdec2,w,c
 12132  0033A0  0A80               	xorlw	128
 12133  0033A2  0F80               	addlw	128
 12134  0033A4  0E01               	movlw	1
 12135  0033A6  B4D8               	btfsc	status,2,c
 12136  0033A8  5CDF               	subwf	indf2,w,c
 12137  0033AA  A0D8               	btfss	status,0,c
 12138  0033AC  D036               	goto	i2l3923
 12139                           
 12140                           ;UART.c: 84: c = _this->buf[_this->tail];
 12141  0033AE  EE20 F0CA          	lfsr	2,202
 12142  0033B2  5007               	movf	i2UART_buff_get@_this,w,c
 12143  0033B4  26D9               	addwf	fsr2l,f,c
 12144  0033B6  5008               	movf	i2UART_buff_get@_this+1,w,c
 12145  0033B8  22DA               	addwfc	fsr2h,f,c
 12146  0033BA  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 12147  0033BE  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 12148  0033C2  5009               	movf	??i2_UART_buff_get,w,c
 12149  0033C4  2407               	addwf	i2UART_buff_get@_this,w,c
 12150  0033C6  6ED9               	movwf	fsr2l,c
 12151  0033C8  500A               	movf	??i2_UART_buff_get+1,w,c
 12152  0033CA  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 12153  0033CC  6EDA               	movwf	fsr2h,c
 12154  0033CE  50DF               	movf	indf2,w,c
 12155  0033D0  6E0B               	movwf	i2UART_buff_get@c,c
 12156                           
 12157                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12158  0033D2  EE20 F0CA          	lfsr	2,202
 12159  0033D6  5007               	movf	i2UART_buff_get@_this,w,c
 12160  0033D8  26D9               	addwf	fsr2l,f,c
 12161  0033DA  5008               	movf	i2UART_buff_get@_this+1,w,c
 12162  0033DC  22DA               	addwfc	fsr2h,f,c
 12163  0033DE  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12164  0033E2  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12165  0033E6  0E00               	movlw	0
 12166  0033E8  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12167  0033EA  0EC8               	movlw	200
 12168  0033EC  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12169  0033EE  EC59  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12170  0033F2  EE20 F0CA          	lfsr	2,202
 12171  0033F6  5007               	movf	i2UART_buff_get@_this,w,c
 12172  0033F8  26D9               	addwf	fsr2l,f,c
 12173  0033FA  5008               	movf	i2UART_buff_get@_this+1,w,c
 12174  0033FC  22DA               	addwfc	fsr2h,f,c
 12175  0033FE  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12176  003402  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12177                           
 12178                           ;UART.c: 86: --_this->count;
 12179  003406  EE20 F0CC          	lfsr	2,204
 12180  00340A  5007               	movf	i2UART_buff_get@_this,w,c
 12181  00340C  26D9               	addwf	fsr2l,f,c
 12182  00340E  5008               	movf	i2UART_buff_get@_this+1,w,c
 12183  003410  22DA               	addwfc	fsr2h,f,c
 12184  003412  06DE               	decf	postinc2,f,c
 12185  003414  0E00               	movlw	0
 12186  003416  5ADD               	subwfb	postdec2,f,c
 12187                           
 12188                           ;UART.c: 87: } else {
 12189  003418  D002               	goto	i2l778
 12190  00341A                     i2l3923:
 12191                           
 12192                           ;UART.c: 88: c = 0;
 12193  00341A  0E00               	movlw	0
 12194  00341C  6E0B               	movwf	i2UART_buff_get@c,c
 12195  00341E                     i2l778:
 12196                           
 12197                           ;UART.c: 89: }
 12198                           ;UART.c: 90: return (c);
 12199  00341E  500B               	movf	i2UART_buff_get@c,w,c
 12200  003420  0012               	return	
 12201  003422                     __end_ofi2_UART_buff_get:
 12202                           	opt stack 0
 12203                           tosu	equ	0xFFF
 12204                           tosh	equ	0xFFE
 12205                           tosl	equ	0xFFD
 12206                           pclatu	equ	0xFFB
 12207                           pclath	equ	0xFFA
 12208                           tblptru	equ	0xFF8
 12209                           tblptrh	equ	0xFF7
 12210                           tblptrl	equ	0xFF6
 12211                           tablat	equ	0xFF5
 12212                           prodh	equ	0xFF4
 12213                           prodl	equ	0xFF3
 12214                           intcon	equ	0xFF2
 12215                           intcon2	equ	0xFF1
 12216                           postinc0	equ	0xFEE
 12217                           fsr0h	equ	0xFEA
 12218                           fsr0l	equ	0xFE9
 12219                           wreg	equ	0xFE8
 12220                           postinc1	equ	0xFE6
 12221                           postdec1	equ	0xFE5
 12222                           fsr1h	equ	0xFE2
 12223                           fsr1l	equ	0xFE1
 12224                           indf2	equ	0xFDF
 12225                           postinc2	equ	0xFDE
 12226                           postdec2	equ	0xFDD
 12227                           fsr2h	equ	0xFDA
 12228                           fsr2l	equ	0xFD9
 12229                           status	equ	0xFD8
 12230                           
 12231 ;; *************** function _EUSART1_Receive_ISR *****************
 12232 ;; Defined at:
 12233 ;;		line 139 in file "UART.c"
 12234 ;; Parameters:    Size  Location     Type
 12235 ;;		None
 12236 ;; Auto vars:     Size  Location     Type
 12237 ;;  data            1   11[COMRAM] unsigned char 
 12238 ;; Return value:  Size  Location     Type
 12239 ;;		None               void
 12240 ;; Registers used:
 12241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
 12242 ;; Tracked objects:
 12243 ;;		On entry : 0/0
 12244 ;;		On exit  : 0/0
 12245 ;;		Unchanged: 0/0
 12246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12247 ;;      Params:         0       0       0       0       0       0       0
 12248 ;;      Locals:         1       0       0       0       0       0       0
 12249 ;;      Temps:          0       0       0       0       0       0       0
 12250 ;;      Totals:         1       0       0       0       0       0       0
 12251 ;;Total ram usage:        1 bytes
 12252 ;; Hardware stack levels used:    1
 12253 ;; Hardware stack levels required when called:    2
 12254 ;; This function calls:
 12255 ;;		i2_UART_buff_put
 12256 ;; This function is called by:
 12257 ;;		_INTERRUPT_InterruptManager
 12258 ;; This function uses a non-reentrant model
 12259 ;;
 12260                           
 12261                           	psect	text65
 12262  003B8E                     __ptext65:
 12263                           	opt stack 0
 12264  003B8E                     _EUSART1_Receive_ISR:
 12265                           	opt stack 21
 12266                           
 12267                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
 12268                           
 12269                           ;incstack = 0
 12270  003B8E  A2AB               	btfss	4011,1,c	;volatile
 12271  003B90  D002               	goto	i2l809
 12272                           
 12273                           ;UART.c: 143: RC1STAbits.CREN = 0;
 12274  003B92  98AB               	bcf	4011,4,c	;volatile
 12275                           
 12276                           ;UART.c: 144: RC1STAbits.CREN = 1;
 12277  003B94  88AB               	bsf	4011,4,c	;volatile
 12278  003B96                     i2l809:
 12279                           
 12280                           ;UART.c: 145: }
 12281                           ;UART.c: 153: unsigned char data = RCREG1;
 12282  003B96  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 12283                           
 12284                           ;UART.c: 154: UART_buff_put(&input_buffer, data);
 12285  003B9A  0104               	movlb	4	; () banked
 12286  003B9C  0E04               	movlw	high _input_buffer
 12287  003B9E  6E08               	movwf	i2UART_buff_put@_this+1,c
 12288  003BA0  0104               	movlb	4	; () banked
 12289  003BA2  0E00               	movlw	low _input_buffer
 12290  003BA4  6E07               	movwf	i2UART_buff_put@_this,c
 12291  003BA6  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 12292  003BAA  EC31  F014         	call	i2_UART_buff_put	;wreg free
 12293  003BAE  0012               	return	
 12294  003BB0                     __end_of_EUSART1_Receive_ISR:
 12295                           	opt stack 0
 12296                           tosu	equ	0xFFF
 12297                           tosh	equ	0xFFE
 12298                           tosl	equ	0xFFD
 12299                           pclatu	equ	0xFFB
 12300                           pclath	equ	0xFFA
 12301                           tblptru	equ	0xFF8
 12302                           tblptrh	equ	0xFF7
 12303                           tblptrl	equ	0xFF6
 12304                           tablat	equ	0xFF5
 12305                           prodh	equ	0xFF4
 12306                           prodl	equ	0xFF3
 12307                           intcon	equ	0xFF2
 12308                           intcon2	equ	0xFF1
 12309                           postinc0	equ	0xFEE
 12310                           fsr0h	equ	0xFEA
 12311                           fsr0l	equ	0xFE9
 12312                           wreg	equ	0xFE8
 12313                           postinc1	equ	0xFE6
 12314                           postdec1	equ	0xFE5
 12315                           fsr1h	equ	0xFE2
 12316                           fsr1l	equ	0xFE1
 12317                           indf2	equ	0xFDF
 12318                           postinc2	equ	0xFDE
 12319                           postdec2	equ	0xFDD
 12320                           fsr2h	equ	0xFDA
 12321                           fsr2l	equ	0xFD9
 12322                           status	equ	0xFD8
 12323                           
 12324 ;; *************** function i2_UART_buff_put *****************
 12325 ;; Defined at:
 12326 ;;		line 68 in file "UART.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 12329 ;;		 -> output_buffer(206), input_buffer(206), 
 12330 ;;  c               1    8[COMRAM] const unsigned char 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;		None
 12333 ;; Return value:  Size  Location     Type
 12334 ;;		None               void
 12335 ;; Registers used:
 12336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12342 ;;      Params:         3       0       0       0       0       0       0
 12343 ;;      Locals:         0       0       0       0       0       0       0
 12344 ;;      Temps:          2       0       0       0       0       0       0
 12345 ;;      Totals:         5       0       0       0       0       0       0
 12346 ;;Total ram usage:        5 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    1
 12349 ;; This function calls:
 12350 ;;		i2_UART_buff_modulo_inc
 12351 ;; This function is called by:
 12352 ;;		_EUSART1_Receive_ISR
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           	psect	text66
 12357  002862                     __ptext66:
 12358                           	opt stack 0
 12359  002862                     i2_UART_buff_put:
 12360                           	opt stack 21
 12361                           
 12362                           ;UART.c: 69: if (_this->count < 200) {
 12363                           
 12364                           ;incstack = 0
 12365  002862  EE20 F0CC          	lfsr	2,204
 12366  002866  5007               	movf	i2UART_buff_put@_this,w,c
 12367  002868  26D9               	addwf	fsr2l,f,c
 12368  00286A  5008               	movf	i2UART_buff_put@_this+1,w,c
 12369  00286C  22DA               	addwfc	fsr2h,f,c
 12370  00286E  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12371  002872  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12372  002876  500B               	movf	??i2_UART_buff_put+1,w,c
 12373  002878  0A80               	xorlw	128
 12374  00287A  6EF3               	movwf	prodl,c
 12375  00287C  0E80               	movlw	128
 12376  00287E  5CF3               	subwf	prodl,w,c
 12377  002880  0EC8               	movlw	200
 12378  002882  B4D8               	btfsc	status,2,c
 12379  002884  5C0A               	subwf	??i2_UART_buff_put,w,c
 12380  002886  B0D8               	btfsc	status,0,c
 12381  002888  D036               	goto	i2l3909
 12382                           
 12383                           ;UART.c: 70: _this->buf[_this->head] = c;
 12384  00288A  EE20 F0C8          	lfsr	2,200
 12385  00288E  5007               	movf	i2UART_buff_put@_this,w,c
 12386  002890  26D9               	addwf	fsr2l,f,c
 12387  002892  5008               	movf	i2UART_buff_put@_this+1,w,c
 12388  002894  22DA               	addwfc	fsr2h,f,c
 12389  002896  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12390  00289A  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12391  00289E  500A               	movf	??i2_UART_buff_put,w,c
 12392  0028A0  2407               	addwf	i2UART_buff_put@_this,w,c
 12393  0028A2  6ED9               	movwf	fsr2l,c
 12394  0028A4  500B               	movf	??i2_UART_buff_put+1,w,c
 12395  0028A6  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12396  0028A8  6EDA               	movwf	fsr2h,c
 12397  0028AA  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12398                           
 12399                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12400  0028AE  EE20 F0C8          	lfsr	2,200
 12401  0028B2  5007               	movf	i2UART_buff_put@_this,w,c
 12402  0028B4  26D9               	addwf	fsr2l,f,c
 12403  0028B6  5008               	movf	i2UART_buff_put@_this+1,w,c
 12404  0028B8  22DA               	addwfc	fsr2h,f,c
 12405  0028BA  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12406  0028BE  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12407  0028C2  0E00               	movlw	0
 12408  0028C4  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12409  0028C6  0EC8               	movlw	200
 12410  0028C8  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12411  0028CA  EC59  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12412  0028CE  EE20 F0C8          	lfsr	2,200
 12413  0028D2  5007               	movf	i2UART_buff_put@_this,w,c
 12414  0028D4  26D9               	addwf	fsr2l,f,c
 12415  0028D6  5008               	movf	i2UART_buff_put@_this+1,w,c
 12416  0028D8  22DA               	addwfc	fsr2h,f,c
 12417  0028DA  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12418  0028DE  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12419                           
 12420                           ;UART.c: 72: ++_this->count;
 12421  0028E2  EE20 F0CC          	lfsr	2,204
 12422  0028E6  5007               	movf	i2UART_buff_put@_this,w,c
 12423  0028E8  26D9               	addwf	fsr2l,f,c
 12424  0028EA  5008               	movf	i2UART_buff_put@_this+1,w,c
 12425  0028EC  22DA               	addwfc	fsr2h,f,c
 12426  0028EE  2ADE               	incf	postinc2,f,c
 12427  0028F0  0E00               	movlw	0
 12428  0028F2  22DD               	addwfc	postdec2,f,c
 12429                           
 12430                           ;UART.c: 73: } else {
 12431  0028F4  0012               	return	
 12432  0028F6                     i2l3909:
 12433                           
 12434                           ;UART.c: 74: _this->buf[_this->head] = c;
 12435  0028F6  EE20 F0C8          	lfsr	2,200
 12436  0028FA  5007               	movf	i2UART_buff_put@_this,w,c
 12437  0028FC  26D9               	addwf	fsr2l,f,c
 12438  0028FE  5008               	movf	i2UART_buff_put@_this+1,w,c
 12439  002900  22DA               	addwfc	fsr2h,f,c
 12440  002902  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 12441  002906  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 12442  00290A  500A               	movf	??i2_UART_buff_put,w,c
 12443  00290C  2407               	addwf	i2UART_buff_put@_this,w,c
 12444  00290E  6ED9               	movwf	fsr2l,c
 12445  002910  500B               	movf	??i2_UART_buff_put+1,w,c
 12446  002912  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 12447  002914  6EDA               	movwf	fsr2h,c
 12448  002916  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 12449                           
 12450                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
 12451  00291A  EE20 F0C8          	lfsr	2,200
 12452  00291E  5007               	movf	i2UART_buff_put@_this,w,c
 12453  002920  26D9               	addwf	fsr2l,f,c
 12454  002922  5008               	movf	i2UART_buff_put@_this+1,w,c
 12455  002924  22DA               	addwfc	fsr2h,f,c
 12456  002926  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12457  00292A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12458  00292E  0E00               	movlw	0
 12459  002930  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12460  002932  0EC8               	movlw	200
 12461  002934  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12462  002936  EC59  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12463  00293A  EE20 F0C8          	lfsr	2,200
 12464  00293E  5007               	movf	i2UART_buff_put@_this,w,c
 12465  002940  26D9               	addwf	fsr2l,f,c
 12466  002942  5008               	movf	i2UART_buff_put@_this+1,w,c
 12467  002944  22DA               	addwfc	fsr2h,f,c
 12468  002946  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12469  00294A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12470                           
 12471                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 12472  00294E  EE20 F0CA          	lfsr	2,202
 12473  002952  5007               	movf	i2UART_buff_put@_this,w,c
 12474  002954  26D9               	addwf	fsr2l,f,c
 12475  002956  5008               	movf	i2UART_buff_put@_this+1,w,c
 12476  002958  22DA               	addwfc	fsr2h,f,c
 12477  00295A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 12478  00295E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 12479  002962  0E00               	movlw	0
 12480  002964  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 12481  002966  0EC8               	movlw	200
 12482  002968  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 12483  00296A  EC59  F01D         	call	i2_UART_buff_modulo_inc	;wreg free
 12484  00296E  EE20 F0CA          	lfsr	2,202
 12485  002972  5007               	movf	i2UART_buff_put@_this,w,c
 12486  002974  26D9               	addwf	fsr2l,f,c
 12487  002976  5008               	movf	i2UART_buff_put@_this+1,w,c
 12488  002978  22DA               	addwfc	fsr2h,f,c
 12489  00297A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 12490  00297E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 12491  002982  0012               	return	
 12492  002984                     __end_ofi2_UART_buff_put:
 12493                           	opt stack 0
 12494                           tosu	equ	0xFFF
 12495                           tosh	equ	0xFFE
 12496                           tosl	equ	0xFFD
 12497                           pclatu	equ	0xFFB
 12498                           pclath	equ	0xFFA
 12499                           tblptru	equ	0xFF8
 12500                           tblptrh	equ	0xFF7
 12501                           tblptrl	equ	0xFF6
 12502                           tablat	equ	0xFF5
 12503                           prodh	equ	0xFF4
 12504                           prodl	equ	0xFF3
 12505                           intcon	equ	0xFF2
 12506                           intcon2	equ	0xFF1
 12507                           postinc0	equ	0xFEE
 12508                           fsr0h	equ	0xFEA
 12509                           fsr0l	equ	0xFE9
 12510                           wreg	equ	0xFE8
 12511                           postinc1	equ	0xFE6
 12512                           postdec1	equ	0xFE5
 12513                           fsr1h	equ	0xFE2
 12514                           fsr1l	equ	0xFE1
 12515                           indf2	equ	0xFDF
 12516                           postinc2	equ	0xFDE
 12517                           postdec2	equ	0xFDD
 12518                           fsr2h	equ	0xFDA
 12519                           fsr2l	equ	0xFD9
 12520                           status	equ	0xFD8
 12521                           
 12522 ;; *************** function i2_UART_buff_modulo_inc *****************
 12523 ;; Defined at:
 12524 ;;		line 106 in file "UART.c"
 12525 ;; Parameters:    Size  Location     Type
 12526 ;;  value           2    0[COMRAM] const unsigned int 
 12527 ;;  modulus         2    2[COMRAM] const unsigned int 
 12528 ;; Auto vars:     Size  Location     Type
 12529 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 12530 ;; Return value:  Size  Location     Type
 12531 ;;                  2    0[COMRAM] unsigned int 
 12532 ;; Registers used:
 12533 ;;		wreg, status,2, status,0
 12534 ;; Tracked objects:
 12535 ;;		On entry : 0/0
 12536 ;;		On exit  : 0/0
 12537 ;;		Unchanged: 0/0
 12538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12539 ;;      Params:         4       0       0       0       0       0       0
 12540 ;;      Locals:         2       0       0       0       0       0       0
 12541 ;;      Temps:          0       0       0       0       0       0       0
 12542 ;;      Totals:         6       0       0       0       0       0       0
 12543 ;;Total ram usage:        6 bytes
 12544 ;; Hardware stack levels used:    1
 12545 ;; This function calls:
 12546 ;;		Nothing
 12547 ;; This function is called by:
 12548 ;;		i2_UART_buff_put
 12549 ;;		i2_UART_buff_get
 12550 ;; This function uses a non-reentrant model
 12551 ;;
 12552                           
 12553                           	psect	text67
 12554  003AB2                     __ptext67:
 12555                           	opt stack 0
 12556  003AB2                     i2_UART_buff_modulo_inc:
 12557                           	opt stack 21
 12558                           
 12559                           ;UART.c: 107: unsigned int my_value = value + 1;
 12560                           
 12561                           ;incstack = 0
 12562  003AB2  0E01               	movlw	1
 12563  003AB4  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 12564  003AB6  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12565  003AB8  0E00               	movlw	0
 12566  003ABA  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 12567  003ABC  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12568                           
 12569                           ;UART.c: 108: if (my_value >= modulus) {
 12570  003ABE  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 12571  003AC0  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 12572  003AC2  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 12573  003AC4  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 12574  003AC6  A0D8               	btfss	status,0,c
 12575  003AC8  D004               	goto	i2l3405
 12576                           
 12577                           ;UART.c: 109: my_value = 0;
 12578  003ACA  0E00               	movlw	0
 12579  003ACC  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 12580  003ACE  0E00               	movlw	0
 12581  003AD0  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 12582  003AD2                     i2l3405:
 12583                           
 12584                           ;UART.c: 110: }
 12585                           ;UART.c: 111: return (my_value);
 12586  003AD2  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 12587  003AD6  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 12588  003ADA  0012               	return	
 12589  003ADC                     __end_ofi2_UART_buff_modulo_inc:
 12590                           	opt stack 0
 12591                           tosu	equ	0xFFF
 12592                           tosh	equ	0xFFE
 12593                           tosl	equ	0xFFD
 12594                           pclatu	equ	0xFFB
 12595                           pclath	equ	0xFFA
 12596                           tblptru	equ	0xFF8
 12597                           tblptrh	equ	0xFF7
 12598                           tblptrl	equ	0xFF6
 12599                           tablat	equ	0xFF5
 12600                           prodh	equ	0xFF4
 12601                           prodl	equ	0xFF3
 12602                           intcon	equ	0xFF2
 12603                           intcon2	equ	0xFF1
 12604                           postinc0	equ	0xFEE
 12605                           fsr0h	equ	0xFEA
 12606                           fsr0l	equ	0xFE9
 12607                           wreg	equ	0xFE8
 12608                           postinc1	equ	0xFE6
 12609                           postdec1	equ	0xFE5
 12610                           fsr1h	equ	0xFE2
 12611                           fsr1l	equ	0xFE1
 12612                           indf2	equ	0xFDF
 12613                           postinc2	equ	0xFDE
 12614                           postdec2	equ	0xFDD
 12615                           fsr2h	equ	0xFDA
 12616                           fsr2l	equ	0xFD9
 12617                           status	equ	0xFD8
 12618                           
 12619 ;; *************** function _ADC_ISR *****************
 12620 ;; Defined at:
 12621 ;;		line 82 in file "mcc_generated_files/adc.c"
 12622 ;; Parameters:    Size  Location     Type
 12623 ;;		None
 12624 ;; Auto vars:     Size  Location     Type
 12625 ;;  ADC_Result      2   10[COMRAM] int 
 12626 ;; Return value:  Size  Location     Type
 12627 ;;		None               void
 12628 ;; Registers used:
 12629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12630 ;; Tracked objects:
 12631 ;;		On entry : 0/0
 12632 ;;		On exit  : 0/0
 12633 ;;		Unchanged: 0/0
 12634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12635 ;;      Params:         0       0       0       0       0       0       0
 12636 ;;      Locals:         2       0       0       0       0       0       0
 12637 ;;      Temps:          6       0       0       0       0       0       0
 12638 ;;      Totals:         8       0       0       0       0       0       0
 12639 ;;Total ram usage:        8 bytes
 12640 ;; Hardware stack levels used:    1
 12641 ;; Hardware stack levels required when called:    1
 12642 ;; This function calls:
 12643 ;;		_ADC_GetConversionResult
 12644 ;;		_ADC_StartConversion
 12645 ;;		_Set_4051
 12646 ;; This function is called by:
 12647 ;;		_INTERRUPT_InterruptManager
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651                           	psect	text68
 12652  001152                     __ptext68:
 12653                           	opt stack 0
 12654  001152                     _ADC_ISR:
 12655                           	opt stack 22
 12656                           
 12657                           ;adc.c: 85: PIR1bits.ADIF = 0;
 12658                           
 12659                           ;incstack = 0
 12660  001152  9C9E               	bcf	3998,6,c	;volatile
 12661                           
 12662                           ;adc.c: 86: int ADC_Result = 0;
 12663  001154  0E00               	movlw	0
 12664  001156  6E0C               	movwf	ADC_ISR@ADC_Result+1,c
 12665  001158  0E00               	movlw	0
 12666  00115A  6E0B               	movwf	ADC_ISR@ADC_Result,c
 12667                           
 12668                           ;adc.c: 87: if (Temp_Aquire){
 12669  00115C  503A               	movf	_Temp_Aquire,w,c
 12670  00115E  B4D8               	btfsc	status,2,c
 12671  001160  D089               	goto	i2l3985
 12672                           
 12673                           ;adc.c: 89: ADC_Result = ADC_GetConversionResult();
 12674  001162  EC3E  F01E         	call	_ADC_GetConversionResult	;wreg free
 12675  001166  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12676  00116A  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12677                           
 12678                           ;adc.c: 90: switch ( ADC_Buffer_Point )
 12679  00116E  D06B               	goto	i2l3981
 12680  001170                     i2l3955:
 12681                           
 12682                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12683  001170  0EB9               	movlw	low _Temp_Adc
 12684  001172  6E05               	movwf	??_ADC_ISR& (0+255),c
 12685  001174  0E00               	movlw	high _Temp_Adc
 12686  001176  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 12687  001178  90D8               	bcf	status,0,c
 12688  00117A  342D               	rlcf	_ADC_Buffer_Point,w,c
 12689  00117C  6ED9               	movwf	fsr2l,c
 12690  00117E  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12691  001180  6EDA               	movwf	fsr2h,c
 12692  001182  5005               	movf	??_ADC_ISR,w,c
 12693  001184  26D9               	addwf	fsr2l,f,c
 12694  001186  5006               	movf	??_ADC_ISR+1,w,c
 12695  001188  22DA               	addwfc	fsr2h,f,c
 12696  00118A  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12697  00118E  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12698                           
 12699                           ;adc.c: 94: Set_4051(2);
 12700  001192  0E00               	movlw	0
 12701  001194  6E02               	movwf	Set_4051@Channel+1,c
 12702  001196  0E02               	movlw	2
 12703  001198  6E01               	movwf	Set_4051@Channel,c
 12704  00119A  EC02  F01D         	call	_Set_4051	;wreg free
 12705                           
 12706                           ;adc.c: 95: ADC_StartConversion(Temp1);
 12707  00119E  0E0E               	movlw	14
 12708  0011A0  EC03  F01E         	call	_ADC_StartConversion
 12709                           
 12710                           ;adc.c: 96: break;
 12711  0011A4  D065               	goto	i2l3983
 12712  0011A6                     i2l3961:
 12713                           
 12714                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12715  0011A6  0EB9               	movlw	low _Temp_Adc
 12716  0011A8  6E05               	movwf	??_ADC_ISR& (0+255),c
 12717  0011AA  0E00               	movlw	high _Temp_Adc
 12718  0011AC  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 12719  0011AE  90D8               	bcf	status,0,c
 12720  0011B0  342D               	rlcf	_ADC_Buffer_Point,w,c
 12721  0011B2  6ED9               	movwf	fsr2l,c
 12722  0011B4  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12723  0011B6  6EDA               	movwf	fsr2h,c
 12724  0011B8  5005               	movf	??_ADC_ISR,w,c
 12725  0011BA  26D9               	addwf	fsr2l,f,c
 12726  0011BC  5006               	movf	??_ADC_ISR+1,w,c
 12727  0011BE  22DA               	addwfc	fsr2h,f,c
 12728  0011C0  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12729  0011C4  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12730                           
 12731                           ;adc.c: 99: Set_4051(4);
 12732  0011C8  0E00               	movlw	0
 12733  0011CA  6E02               	movwf	Set_4051@Channel+1,c
 12734  0011CC  0E04               	movlw	4
 12735  0011CE  6E01               	movwf	Set_4051@Channel,c
 12736  0011D0  EC02  F01D         	call	_Set_4051	;wreg free
 12737                           
 12738                           ;adc.c: 100: ADC_StartConversion(Temp1);
 12739  0011D4  0E0E               	movlw	14
 12740  0011D6  EC03  F01E         	call	_ADC_StartConversion
 12741                           
 12742                           ;adc.c: 101: break;
 12743  0011DA  D04A               	goto	i2l3983
 12744  0011DC                     i2l3967:
 12745                           
 12746                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12747  0011DC  0EB9               	movlw	low _Temp_Adc
 12748  0011DE  6E05               	movwf	??_ADC_ISR& (0+255),c
 12749  0011E0  0E00               	movlw	high _Temp_Adc
 12750  0011E2  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 12751  0011E4  90D8               	bcf	status,0,c
 12752  0011E6  342D               	rlcf	_ADC_Buffer_Point,w,c
 12753  0011E8  6ED9               	movwf	fsr2l,c
 12754  0011EA  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12755  0011EC  6EDA               	movwf	fsr2h,c
 12756  0011EE  5005               	movf	??_ADC_ISR,w,c
 12757  0011F0  26D9               	addwf	fsr2l,f,c
 12758  0011F2  5006               	movf	??_ADC_ISR+1,w,c
 12759  0011F4  22DA               	addwfc	fsr2h,f,c
 12760  0011F6  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12761  0011FA  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12762                           
 12763                           ;adc.c: 104: Set_4051(5);
 12764  0011FE  0E00               	movlw	0
 12765  001200  6E02               	movwf	Set_4051@Channel+1,c
 12766  001202  0E05               	movlw	5
 12767  001204  6E01               	movwf	Set_4051@Channel,c
 12768  001206  EC02  F01D         	call	_Set_4051	;wreg free
 12769                           
 12770                           ;adc.c: 105: ADC_StartConversion(Temp1);
 12771  00120A  0E0E               	movlw	14
 12772  00120C  EC03  F01E         	call	_ADC_StartConversion
 12773                           
 12774                           ;adc.c: 106: break;
 12775  001210  D02F               	goto	i2l3983
 12776  001212                     i2l3973:
 12777                           
 12778                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
 12779  001212  0EB9               	movlw	low _Temp_Adc
 12780  001214  6E05               	movwf	??_ADC_ISR& (0+255),c
 12781  001216  0E00               	movlw	high _Temp_Adc
 12782  001218  6E06               	movwf	(??_ADC_ISR+1)& (0+255),c
 12783  00121A  90D8               	bcf	status,0,c
 12784  00121C  342D               	rlcf	_ADC_Buffer_Point,w,c
 12785  00121E  6ED9               	movwf	fsr2l,c
 12786  001220  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12787  001222  6EDA               	movwf	fsr2h,c
 12788  001224  5005               	movf	??_ADC_ISR,w,c
 12789  001226  26D9               	addwf	fsr2l,f,c
 12790  001228  5006               	movf	??_ADC_ISR+1,w,c
 12791  00122A  22DA               	addwfc	fsr2h,f,c
 12792  00122C  C00B  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
 12793  001230  C00C  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
 12794                           
 12795                           ;adc.c: 109: Temp_Aquire = 0;
 12796  001234  0E00               	movlw	0
 12797  001236  6E3A               	movwf	_Temp_Aquire,c
 12798                           
 12799                           ;adc.c: 110: Temp_Done = 1;
 12800  001238  0E00               	movlw	0
 12801  00123A  0100               	movlb	0	; () banked
 12802  00123C  6F89               	movwf	(_Temp_Done+1)& (0+255),b
 12803  00123E  0E01               	movlw	1
 12804  001240  0100               	movlb	0	; () banked
 12805  001242  6F88               	movwf	_Temp_Done& (0+255),b
 12806                           
 12807                           ;adc.c: 112: break;
 12808  001244  D015               	goto	i2l3983
 12809  001246                     i2l3981:
 12810  001246  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 12811  00124A  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 12812                           
 12813                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12814                           ; Switch size 1, requested type "space"
 12815                           ; Number of cases is 1, Range of values is 0 to 0
 12816                           ; switch strategies available:
 12817                           ; Name         Instructions Cycles
 12818                           ; simple_byte            4     3 (average)
 12819                           ;	Chosen strategy is simple_byte
 12820  00124E  5006               	movf	??_ADC_ISR+1,w,c
 12821  001250  0A00               	xorlw	0	; case 0
 12822  001252  A4D8               	btfss	status,2,c
 12823  001254  D00D               	goto	i2l3983
 12824                           
 12825                           ; Switch size 1, requested type "space"
 12826                           ; Number of cases is 4, Range of values is 0 to 3
 12827                           ; switch strategies available:
 12828                           ; Name         Instructions Cycles
 12829                           ; simple_byte           13     7 (average)
 12830                           ;	Chosen strategy is simple_byte
 12831  001256  5005               	movf	??_ADC_ISR,w,c
 12832  001258  0A00               	xorlw	0	; case 0
 12833  00125A  B4D8               	btfsc	status,2,c
 12834  00125C  D789               	goto	i2l3955
 12835  00125E  0A01               	xorlw	1	; case 1
 12836  001260  B4D8               	btfsc	status,2,c
 12837  001262  D7A1               	goto	i2l3961
 12838  001264  0A03               	xorlw	3	; case 2
 12839  001266  B4D8               	btfsc	status,2,c
 12840  001268  D7B9               	goto	i2l3967
 12841  00126A  0A01               	xorlw	1	; case 3
 12842  00126C  B4D8               	btfsc	status,2,c
 12843  00126E  D7D1               	goto	i2l3973
 12844  001270                     i2l3983:
 12845                           
 12846                           ;adc.c: 144: ADC_Buffer_Point++;
 12847  001270  4A2D               	infsnz	_ADC_Buffer_Point,f,c
 12848  001272  2A2E               	incf	_ADC_Buffer_Point+1,f,c
 12849  001274                     i2l3985:
 12850                           
 12851                           ;adc.c: 145: }
 12852                           ;adc.c: 146: if (Volt_Aquire){
 12853  001274  503B               	movf	_Volt_Aquire,w,c
 12854  001276  B4D8               	btfsc	status,2,c
 12855  001278  0012               	return	
 12856                           
 12857                           ;adc.c: 148: ADC_Result = ADC_GetConversionResult();
 12858  00127A  EC3E  F01E         	call	_ADC_GetConversionResult	;wreg free
 12859  00127E  C001  F00B         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
 12860  001282  C002  F00C         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
 12861                           
 12862                           ;adc.c: 149: switch ( ADC_Buffer_Point )
 12863  001286  D18B               	goto	i2l4033
 12864  001288                     i2l3989:
 12865                           
 12866                           ;adc.c: 152: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12867  001288  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12868  00128C  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12869  001290  0E00               	movlw	0
 12870  001292  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12871  001294  0EFF               	movlw	255
 12872  001296  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12873  001298  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12874  00129A  0E60               	movlw	low _Battery_Adc
 12875  00129C  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12876  00129E  0E00               	movlw	high _Battery_Adc
 12877  0012A0  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12878  0012A2  90D8               	bcf	status,0,c
 12879  0012A4  342D               	rlcf	_ADC_Buffer_Point,w,c
 12880  0012A6  6ED9               	movwf	fsr2l,c
 12881  0012A8  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12882  0012AA  6EDA               	movwf	fsr2h,c
 12883  0012AC  90D8               	bcf	status,0,c
 12884  0012AE  36D9               	rlcf	fsr2l,f,c
 12885  0012B0  36DA               	rlcf	fsr2h,f,c
 12886  0012B2  5009               	movf	??_ADC_ISR+4,w,c
 12887  0012B4  26D9               	addwf	fsr2l,f,c
 12888  0012B6  500A               	movf	??_ADC_ISR+5,w,c
 12889  0012B8  22DA               	addwfc	fsr2h,f,c
 12890  0012BA  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12891  0012BE  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12892  0012C2  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12893  0012C6  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12894  0012CA  06D9               	decf	fsr2l,f,c
 12895  0012CC  06D9               	decf	fsr2l,f,c
 12896                           
 12897                           ;adc.c: 153: ADC_StartConversion(Battery2);
 12898  0012CE  0E03               	movlw	3
 12899  0012D0  EC03  F01E         	call	_ADC_StartConversion
 12900                           
 12901                           ;adc.c: 154: break;
 12902  0012D4  D18B               	goto	i2l4035
 12903  0012D6                     i2l3993:
 12904                           
 12905                           ;adc.c: 156: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12906  0012D6  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12907  0012DA  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12908  0012DE  0E00               	movlw	0
 12909  0012E0  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12910  0012E2  0EFF               	movlw	255
 12911  0012E4  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12912  0012E6  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12913  0012E8  0E60               	movlw	low _Battery_Adc
 12914  0012EA  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12915  0012EC  0E00               	movlw	high _Battery_Adc
 12916  0012EE  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12917  0012F0  90D8               	bcf	status,0,c
 12918  0012F2  342D               	rlcf	_ADC_Buffer_Point,w,c
 12919  0012F4  6ED9               	movwf	fsr2l,c
 12920  0012F6  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12921  0012F8  6EDA               	movwf	fsr2h,c
 12922  0012FA  90D8               	bcf	status,0,c
 12923  0012FC  36D9               	rlcf	fsr2l,f,c
 12924  0012FE  36DA               	rlcf	fsr2h,f,c
 12925  001300  5009               	movf	??_ADC_ISR+4,w,c
 12926  001302  26D9               	addwf	fsr2l,f,c
 12927  001304  500A               	movf	??_ADC_ISR+5,w,c
 12928  001306  22DA               	addwfc	fsr2h,f,c
 12929  001308  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12930  00130C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12931  001310  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12932  001314  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12933  001318  06D9               	decf	fsr2l,f,c
 12934  00131A  06D9               	decf	fsr2l,f,c
 12935                           
 12936                           ;adc.c: 157: ADC_StartConversion(Battery3);
 12937  00131C  0E04               	movlw	4
 12938  00131E  EC03  F01E         	call	_ADC_StartConversion
 12939                           
 12940                           ;adc.c: 158: break;
 12941  001322  D164               	goto	i2l4035
 12942  001324                     i2l3997:
 12943                           
 12944                           ;adc.c: 160: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12945  001324  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12946  001328  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12947  00132C  0E00               	movlw	0
 12948  00132E  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12949  001330  0EFF               	movlw	255
 12950  001332  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12951  001334  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12952  001336  0E60               	movlw	low _Battery_Adc
 12953  001338  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12954  00133A  0E00               	movlw	high _Battery_Adc
 12955  00133C  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12956  00133E  90D8               	bcf	status,0,c
 12957  001340  342D               	rlcf	_ADC_Buffer_Point,w,c
 12958  001342  6ED9               	movwf	fsr2l,c
 12959  001344  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12960  001346  6EDA               	movwf	fsr2h,c
 12961  001348  90D8               	bcf	status,0,c
 12962  00134A  36D9               	rlcf	fsr2l,f,c
 12963  00134C  36DA               	rlcf	fsr2h,f,c
 12964  00134E  5009               	movf	??_ADC_ISR+4,w,c
 12965  001350  26D9               	addwf	fsr2l,f,c
 12966  001352  500A               	movf	??_ADC_ISR+5,w,c
 12967  001354  22DA               	addwfc	fsr2h,f,c
 12968  001356  C005  FFDE         	movff	??_ADC_ISR,postinc2
 12969  00135A  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 12970  00135E  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 12971  001362  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 12972  001366  06D9               	decf	fsr2l,f,c
 12973  001368  06D9               	decf	fsr2l,f,c
 12974                           
 12975                           ;adc.c: 161: ADC_StartConversion(Battery4);
 12976  00136A  0E05               	movlw	5
 12977  00136C  EC03  F01E         	call	_ADC_StartConversion
 12978                           
 12979                           ;adc.c: 162: break;
 12980  001370  D13D               	goto	i2l4035
 12981  001372                     i2l4001:
 12982                           
 12983                           ;adc.c: 164: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 12984  001372  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 12985  001376  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 12986  00137A  0E00               	movlw	0
 12987  00137C  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 12988  00137E  0EFF               	movlw	255
 12989  001380  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 12990  001382  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 12991  001384  0E60               	movlw	low _Battery_Adc
 12992  001386  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 12993  001388  0E00               	movlw	high _Battery_Adc
 12994  00138A  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 12995  00138C  90D8               	bcf	status,0,c
 12996  00138E  342D               	rlcf	_ADC_Buffer_Point,w,c
 12997  001390  6ED9               	movwf	fsr2l,c
 12998  001392  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 12999  001394  6EDA               	movwf	fsr2h,c
 13000  001396  90D8               	bcf	status,0,c
 13001  001398  36D9               	rlcf	fsr2l,f,c
 13002  00139A  36DA               	rlcf	fsr2h,f,c
 13003  00139C  5009               	movf	??_ADC_ISR+4,w,c
 13004  00139E  26D9               	addwf	fsr2l,f,c
 13005  0013A0  500A               	movf	??_ADC_ISR+5,w,c
 13006  0013A2  22DA               	addwfc	fsr2h,f,c
 13007  0013A4  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13008  0013A8  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13009  0013AC  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13010  0013B0  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 13011  0013B4  06D9               	decf	fsr2l,f,c
 13012  0013B6  06D9               	decf	fsr2l,f,c
 13013                           
 13014                           ;adc.c: 165: ADC_StartConversion(Battery5);
 13015  0013B8  0E18               	movlw	24
 13016  0013BA  EC03  F01E         	call	_ADC_StartConversion
 13017                           
 13018                           ;adc.c: 166: break;
 13019  0013BE  D116               	goto	i2l4035
 13020  0013C0                     i2l4005:
 13021                           
 13022                           ;adc.c: 168: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13023  0013C0  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13024  0013C4  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13025  0013C8  0E00               	movlw	0
 13026  0013CA  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13027  0013CC  0EFF               	movlw	255
 13028  0013CE  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13029  0013D0  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13030  0013D2  0E60               	movlw	low _Battery_Adc
 13031  0013D4  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13032  0013D6  0E00               	movlw	high _Battery_Adc
 13033  0013D8  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13034  0013DA  90D8               	bcf	status,0,c
 13035  0013DC  342D               	rlcf	_ADC_Buffer_Point,w,c
 13036  0013DE  6ED9               	movwf	fsr2l,c
 13037  0013E0  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13038  0013E2  6EDA               	movwf	fsr2h,c
 13039  0013E4  90D8               	bcf	status,0,c
 13040  0013E6  36D9               	rlcf	fsr2l,f,c
 13041  0013E8  36DA               	rlcf	fsr2h,f,c
 13042  0013EA  5009               	movf	??_ADC_ISR+4,w,c
 13043  0013EC  26D9               	addwf	fsr2l,f,c
 13044  0013EE  500A               	movf	??_ADC_ISR+5,w,c
 13045  0013F0  22DA               	addwfc	fsr2h,f,c
 13046  0013F2  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13047  0013F6  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13048  0013FA  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13049  0013FE  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 13050  001402  06D9               	decf	fsr2l,f,c
 13051  001404  06D9               	decf	fsr2l,f,c
 13052                           
 13053                           ;adc.c: 169: ADC_StartConversion(Battery6);
 13054  001406  0E1A               	movlw	26
 13055  001408  EC03  F01E         	call	_ADC_StartConversion
 13056                           
 13057                           ;adc.c: 170: break;
 13058  00140C  D0EF               	goto	i2l4035
 13059  00140E                     i2l4009:
 13060                           
 13061                           ;adc.c: 172: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13062  00140E  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13063  001412  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13064  001416  0E00               	movlw	0
 13065  001418  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13066  00141A  0EFF               	movlw	255
 13067  00141C  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13068  00141E  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13069  001420  0E60               	movlw	low _Battery_Adc
 13070  001422  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13071  001424  0E00               	movlw	high _Battery_Adc
 13072  001426  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13073  001428  90D8               	bcf	status,0,c
 13074  00142A  342D               	rlcf	_ADC_Buffer_Point,w,c
 13075  00142C  6ED9               	movwf	fsr2l,c
 13076  00142E  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13077  001430  6EDA               	movwf	fsr2h,c
 13078  001432  90D8               	bcf	status,0,c
 13079  001434  36D9               	rlcf	fsr2l,f,c
 13080  001436  36DA               	rlcf	fsr2h,f,c
 13081  001438  5009               	movf	??_ADC_ISR+4,w,c
 13082  00143A  26D9               	addwf	fsr2l,f,c
 13083  00143C  500A               	movf	??_ADC_ISR+5,w,c
 13084  00143E  22DA               	addwfc	fsr2h,f,c
 13085  001440  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13086  001444  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13087  001448  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13088  00144C  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 13089  001450  06D9               	decf	fsr2l,f,c
 13090  001452  06D9               	decf	fsr2l,f,c
 13091                           
 13092                           ;adc.c: 173: ADC_StartConversion(Battery7);
 13093  001454  0E1B               	movlw	27
 13094  001456  EC03  F01E         	call	_ADC_StartConversion
 13095                           
 13096                           ;adc.c: 174: break;
 13097  00145A  D0C8               	goto	i2l4035
 13098  00145C                     i2l4013:
 13099                           
 13100                           ;adc.c: 176: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13101  00145C  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13102  001460  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13103  001464  0E00               	movlw	0
 13104  001466  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13105  001468  0EFF               	movlw	255
 13106  00146A  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13107  00146C  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13108  00146E  0E60               	movlw	low _Battery_Adc
 13109  001470  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13110  001472  0E00               	movlw	high _Battery_Adc
 13111  001474  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13112  001476  90D8               	bcf	status,0,c
 13113  001478  342D               	rlcf	_ADC_Buffer_Point,w,c
 13114  00147A  6ED9               	movwf	fsr2l,c
 13115  00147C  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13116  00147E  6EDA               	movwf	fsr2h,c
 13117  001480  90D8               	bcf	status,0,c
 13118  001482  36D9               	rlcf	fsr2l,f,c
 13119  001484  36DA               	rlcf	fsr2h,f,c
 13120  001486  5009               	movf	??_ADC_ISR+4,w,c
 13121  001488  26D9               	addwf	fsr2l,f,c
 13122  00148A  500A               	movf	??_ADC_ISR+5,w,c
 13123  00148C  22DA               	addwfc	fsr2h,f,c
 13124  00148E  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13125  001492  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13126  001496  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13127  00149A  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 13128  00149E  06D9               	decf	fsr2l,f,c
 13129  0014A0  06D9               	decf	fsr2l,f,c
 13130                           
 13131                           ;adc.c: 177: ADC_StartConversion(Battery8);
 13132  0014A2  0E08               	movlw	8
 13133  0014A4  EC03  F01E         	call	_ADC_StartConversion
 13134                           
 13135                           ;adc.c: 178: break;
 13136  0014A8  D0A1               	goto	i2l4035
 13137  0014AA                     i2l4017:
 13138                           
 13139                           ;adc.c: 180: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13140  0014AA  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13141  0014AE  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13142  0014B2  0E00               	movlw	0
 13143  0014B4  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13144  0014B6  0EFF               	movlw	255
 13145  0014B8  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13146  0014BA  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13147  0014BC  0E60               	movlw	low _Battery_Adc
 13148  0014BE  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13149  0014C0  0E00               	movlw	high _Battery_Adc
 13150  0014C2  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13151  0014C4  90D8               	bcf	status,0,c
 13152  0014C6  342D               	rlcf	_ADC_Buffer_Point,w,c
 13153  0014C8  6ED9               	movwf	fsr2l,c
 13154  0014CA  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13155  0014CC  6EDA               	movwf	fsr2h,c
 13156  0014CE  90D8               	bcf	status,0,c
 13157  0014D0  36D9               	rlcf	fsr2l,f,c
 13158  0014D2  36DA               	rlcf	fsr2h,f,c
 13159  0014D4  5009               	movf	??_ADC_ISR+4,w,c
 13160  0014D6  26D9               	addwf	fsr2l,f,c
 13161  0014D8  500A               	movf	??_ADC_ISR+5,w,c
 13162  0014DA  22DA               	addwfc	fsr2h,f,c
 13163  0014DC  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13164  0014E0  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13165  0014E4  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13166  0014E8  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 13167  0014EC  06D9               	decf	fsr2l,f,c
 13168  0014EE  06D9               	decf	fsr2l,f,c
 13169                           
 13170                           ;adc.c: 181: ADC_StartConversion(Battery9);
 13171  0014F0  0E0B               	movlw	11
 13172  0014F2  EC03  F01E         	call	_ADC_StartConversion
 13173                           
 13174                           ;adc.c: 182: break;
 13175  0014F6  D07A               	goto	i2l4035
 13176  0014F8                     i2l4021:
 13177                           
 13178                           ;adc.c: 184: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13179  0014F8  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13180  0014FC  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13181  001500  0E00               	movlw	0
 13182  001502  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13183  001504  0EFF               	movlw	255
 13184  001506  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13185  001508  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13186  00150A  0E60               	movlw	low _Battery_Adc
 13187  00150C  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13188  00150E  0E00               	movlw	high _Battery_Adc
 13189  001510  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13190  001512  90D8               	bcf	status,0,c
 13191  001514  342D               	rlcf	_ADC_Buffer_Point,w,c
 13192  001516  6ED9               	movwf	fsr2l,c
 13193  001518  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13194  00151A  6EDA               	movwf	fsr2h,c
 13195  00151C  90D8               	bcf	status,0,c
 13196  00151E  36D9               	rlcf	fsr2l,f,c
 13197  001520  36DA               	rlcf	fsr2h,f,c
 13198  001522  5009               	movf	??_ADC_ISR+4,w,c
 13199  001524  26D9               	addwf	fsr2l,f,c
 13200  001526  500A               	movf	??_ADC_ISR+5,w,c
 13201  001528  22DA               	addwfc	fsr2h,f,c
 13202  00152A  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13203  00152E  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13204  001532  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13205  001536  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 13206  00153A  06D9               	decf	fsr2l,f,c
 13207  00153C  06D9               	decf	fsr2l,f,c
 13208                           
 13209                           ;adc.c: 185: ADC_StartConversion(Battery10);
 13210  00153E  0E0D               	movlw	13
 13211  001540  EC03  F01E         	call	_ADC_StartConversion
 13212                           
 13213                           ;adc.c: 186: break;
 13214  001544  D053               	goto	i2l4035
 13215  001546                     i2l4025:
 13216                           
 13217                           ;adc.c: 188: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
 13218  001546  C00B  F005         	movff	ADC_ISR@ADC_Result,??_ADC_ISR
 13219  00154A  C00C  F006         	movff	ADC_ISR@ADC_Result+1,??_ADC_ISR+1
 13220  00154E  0E00               	movlw	0
 13221  001550  BE06               	btfsc	(??_ADC_ISR+1)& (0+255),7,c
 13222  001552  0EFF               	movlw	255
 13223  001554  6E07               	movwf	(??_ADC_ISR+2)& (0+255),c
 13224  001556  6E08               	movwf	(??_ADC_ISR+3)& (0+255),c
 13225  001558  0E60               	movlw	low _Battery_Adc
 13226  00155A  6E09               	movwf	(??_ADC_ISR+4)& (0+255),c
 13227  00155C  0E00               	movlw	high _Battery_Adc
 13228  00155E  6E0A               	movwf	(??_ADC_ISR+5)& (0+255),c
 13229  001560  90D8               	bcf	status,0,c
 13230  001562  342D               	rlcf	_ADC_Buffer_Point,w,c
 13231  001564  6ED9               	movwf	fsr2l,c
 13232  001566  342E               	rlcf	_ADC_Buffer_Point+1,w,c
 13233  001568  6EDA               	movwf	fsr2h,c
 13234  00156A  90D8               	bcf	status,0,c
 13235  00156C  36D9               	rlcf	fsr2l,f,c
 13236  00156E  36DA               	rlcf	fsr2h,f,c
 13237  001570  5009               	movf	??_ADC_ISR+4,w,c
 13238  001572  26D9               	addwf	fsr2l,f,c
 13239  001574  500A               	movf	??_ADC_ISR+5,w,c
 13240  001576  22DA               	addwfc	fsr2h,f,c
 13241  001578  C005  FFDE         	movff	??_ADC_ISR,postinc2
 13242  00157C  C006  FFDE         	movff	??_ADC_ISR+1,postinc2
 13243  001580  C007  FFDE         	movff	??_ADC_ISR+2,postinc2
 13244  001584  C008  FFDD         	movff	??_ADC_ISR+3,postdec2
 13245  001588  06D9               	decf	fsr2l,f,c
 13246  00158A  06D9               	decf	fsr2l,f,c
 13247                           
 13248                           ;adc.c: 189: Volt_Aquire = 0;
 13249  00158C  0E00               	movlw	0
 13250  00158E  6E3B               	movwf	_Volt_Aquire,c
 13251                           
 13252                           ;adc.c: 190: Volt_Done = 1;
 13253  001590  0E00               	movlw	0
 13254  001592  0100               	movlb	0	; () banked
 13255  001594  6F8B               	movwf	(_Volt_Done+1)& (0+255),b
 13256  001596  0E01               	movlw	1
 13257  001598  0100               	movlb	0	; () banked
 13258  00159A  6F8A               	movwf	_Volt_Done& (0+255),b
 13259                           
 13260                           ;adc.c: 191: break;
 13261  00159C  D027               	goto	i2l4035
 13262  00159E                     i2l4033:
 13263  00159E  C02D  F005         	movff	_ADC_Buffer_Point,??_ADC_ISR
 13264  0015A2  C02E  F006         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
 13265                           
 13266                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13267                           ; Switch size 1, requested type "space"
 13268                           ; Number of cases is 1, Range of values is 0 to 0
 13269                           ; switch strategies available:
 13270                           ; Name         Instructions Cycles
 13271                           ; simple_byte            4     3 (average)
 13272                           ;	Chosen strategy is simple_byte
 13273  0015A6  5006               	movf	??_ADC_ISR+1,w,c
 13274  0015A8  0A00               	xorlw	0	; case 0
 13275  0015AA  A4D8               	btfss	status,2,c
 13276  0015AC  D01F               	goto	i2l4035
 13277                           
 13278                           ; Switch size 1, requested type "space"
 13279                           ; Number of cases is 10, Range of values is 0 to 9
 13280                           ; switch strategies available:
 13281                           ; Name         Instructions Cycles
 13282                           ; simple_byte           31    16 (average)
 13283                           ;	Chosen strategy is simple_byte
 13284  0015AE  5005               	movf	??_ADC_ISR,w,c
 13285  0015B0  0A00               	xorlw	0	; case 0
 13286  0015B2  B4D8               	btfsc	status,2,c
 13287  0015B4  D669               	goto	i2l3989
 13288  0015B6  0A01               	xorlw	1	; case 1
 13289  0015B8  B4D8               	btfsc	status,2,c
 13290  0015BA  D68D               	goto	i2l3993
 13291  0015BC  0A03               	xorlw	3	; case 2
 13292  0015BE  B4D8               	btfsc	status,2,c
 13293  0015C0  D6B1               	goto	i2l3997
 13294  0015C2  0A01               	xorlw	1	; case 3
 13295  0015C4  B4D8               	btfsc	status,2,c
 13296  0015C6  D6D5               	goto	i2l4001
 13297  0015C8  0A07               	xorlw	7	; case 4
 13298  0015CA  B4D8               	btfsc	status,2,c
 13299  0015CC  D6F9               	goto	i2l4005
 13300  0015CE  0A01               	xorlw	1	; case 5
 13301  0015D0  B4D8               	btfsc	status,2,c
 13302  0015D2  D71D               	goto	i2l4009
 13303  0015D4  0A03               	xorlw	3	; case 6
 13304  0015D6  B4D8               	btfsc	status,2,c
 13305  0015D8  D741               	goto	i2l4013
 13306  0015DA  0A01               	xorlw	1	; case 7
 13307  0015DC  B4D8               	btfsc	status,2,c
 13308  0015DE  D765               	goto	i2l4017
 13309  0015E0  0A0F               	xorlw	15	; case 8
 13310  0015E2  B4D8               	btfsc	status,2,c
 13311  0015E4  D789               	goto	i2l4021
 13312  0015E6  0A01               	xorlw	1	; case 9
 13313  0015E8  B4D8               	btfsc	status,2,c
 13314  0015EA  D7AD               	goto	i2l4025
 13315  0015EC                     i2l4035:
 13316                           
 13317                           ;adc.c: 193: ADC_Buffer_Point++;
 13318  0015EC  4A2D               	infsnz	_ADC_Buffer_Point,f,c
 13319  0015EE  2A2E               	incf	_ADC_Buffer_Point+1,f,c
 13320  0015F0  0012               	return	
 13321  0015F2                     __end_of_ADC_ISR:
 13322                           	opt stack 0
 13323                           tosu	equ	0xFFF
 13324                           tosh	equ	0xFFE
 13325                           tosl	equ	0xFFD
 13326                           pclatu	equ	0xFFB
 13327                           pclath	equ	0xFFA
 13328                           tblptru	equ	0xFF8
 13329                           tblptrh	equ	0xFF7
 13330                           tblptrl	equ	0xFF6
 13331                           tablat	equ	0xFF5
 13332                           prodh	equ	0xFF4
 13333                           prodl	equ	0xFF3
 13334                           intcon	equ	0xFF2
 13335                           intcon2	equ	0xFF1
 13336                           postinc0	equ	0xFEE
 13337                           fsr0h	equ	0xFEA
 13338                           fsr0l	equ	0xFE9
 13339                           wreg	equ	0xFE8
 13340                           postinc1	equ	0xFE6
 13341                           postdec1	equ	0xFE5
 13342                           fsr1h	equ	0xFE2
 13343                           fsr1l	equ	0xFE1
 13344                           indf2	equ	0xFDF
 13345                           postinc2	equ	0xFDE
 13346                           postdec2	equ	0xFDD
 13347                           fsr2h	equ	0xFDA
 13348                           fsr2l	equ	0xFD9
 13349                           status	equ	0xFD8
 13350                           
 13351 ;; *************** function _Set_4051 *****************
 13352 ;; Defined at:
 13353 ;;		line 15 in file "Functions.c"
 13354 ;; Parameters:    Size  Location     Type
 13355 ;;  Channel         2    0[COMRAM] int 
 13356 ;; Auto vars:     Size  Location     Type
 13357 ;;		None
 13358 ;; Return value:  Size  Location     Type
 13359 ;;		None               void
 13360 ;; Registers used:
 13361 ;;		wreg, status,2, status,0
 13362 ;; Tracked objects:
 13363 ;;		On entry : 0/0
 13364 ;;		On exit  : 0/0
 13365 ;;		Unchanged: 0/0
 13366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13367 ;;      Params:         2       0       0       0       0       0       0
 13368 ;;      Locals:         0       0       0       0       0       0       0
 13369 ;;      Temps:          2       0       0       0       0       0       0
 13370 ;;      Totals:         4       0       0       0       0       0       0
 13371 ;;Total ram usage:        4 bytes
 13372 ;; Hardware stack levels used:    1
 13373 ;; This function calls:
 13374 ;;		Nothing
 13375 ;; This function is called by:
 13376 ;;		_ADC_ISR
 13377 ;;		_Temp_Read
 13378 ;; This function uses a non-reentrant model
 13379 ;;
 13380                           
 13381                           	psect	text69
 13382  003A04                     __ptext69:
 13383                           	opt stack 0
 13384  003A04                     _Set_4051:
 13385                           	opt stack 21
 13386                           
 13387                           ;Functions.c: 17: if (Channel & 0x01)
 13388                           
 13389                           ;incstack = 0
 13390  003A04  B001               	btfsc	Set_4051@Channel,0,c
 13391                           
 13392                           ;Functions.c: 18: {
 13393                           ;Functions.c: 19: do { LATA6 = ~LATA6; } while(0);
 13394  003A06  7C89               	btg	3977,6,c	;volatile
 13395                           
 13396                           ;Functions.c: 20: }
 13397                           ;Functions.c: 21: if ((Channel>>1) & 0x01)
 13398  003A08  3402               	rlcf	Set_4051@Channel+1,w,c
 13399  003A0A  3002               	rrcf	Set_4051@Channel+1,w,c
 13400  003A0C  6E04               	movwf	(??_Set_4051+1)& (0+255),c
 13401  003A0E  3001               	rrcf	Set_4051@Channel,w,c
 13402  003A10  6E03               	movwf	??_Set_4051& (0+255),c
 13403  003A12  B003               	btfsc	??_Set_4051,0,c
 13404                           
 13405                           ;Functions.c: 22: {
 13406                           ;Functions.c: 23: do { LATC0 = ~LATC0; } while(0);
 13407  003A14  708B               	btg	3979,0,c	;volatile
 13408                           
 13409                           ;Functions.c: 24: }
 13410                           ;Functions.c: 25: if ((Channel>>2) & 0x01)
 13411  003A16  C001  F003         	movff	Set_4051@Channel,??_Set_4051
 13412  003A1A  C002  F004         	movff	Set_4051@Channel+1,??_Set_4051+1
 13413  003A1E  3404               	rlcf	??_Set_4051+1,w,c
 13414  003A20  3204               	rrcf	??_Set_4051+1,f,c
 13415  003A22  3203               	rrcf	??_Set_4051,f,c
 13416  003A24  3404               	rlcf	??_Set_4051+1,w,c
 13417  003A26  3204               	rrcf	??_Set_4051+1,f,c
 13418  003A28  3203               	rrcf	??_Set_4051,f,c
 13419  003A2A  A003               	btfss	??_Set_4051,0,c
 13420  003A2C  0012               	return	
 13421                           
 13422                           ;Functions.c: 26: {
 13423                           ;Functions.c: 27: do { LATC1 = ~LATC1; } while(0);
 13424  003A2E  728B               	btg	3979,1,c	;volatile
 13425  003A30  0012               	return	
 13426  003A32                     __end_of_Set_4051:
 13427                           	opt stack 0
 13428                           tosu	equ	0xFFF
 13429                           tosh	equ	0xFFE
 13430                           tosl	equ	0xFFD
 13431                           pclatu	equ	0xFFB
 13432                           pclath	equ	0xFFA
 13433                           tblptru	equ	0xFF8
 13434                           tblptrh	equ	0xFF7
 13435                           tblptrl	equ	0xFF6
 13436                           tablat	equ	0xFF5
 13437                           prodh	equ	0xFF4
 13438                           prodl	equ	0xFF3
 13439                           intcon	equ	0xFF2
 13440                           intcon2	equ	0xFF1
 13441                           postinc0	equ	0xFEE
 13442                           fsr0h	equ	0xFEA
 13443                           fsr0l	equ	0xFE9
 13444                           wreg	equ	0xFE8
 13445                           postinc1	equ	0xFE6
 13446                           postdec1	equ	0xFE5
 13447                           fsr1h	equ	0xFE2
 13448                           fsr1l	equ	0xFE1
 13449                           indf2	equ	0xFDF
 13450                           postinc2	equ	0xFDE
 13451                           postdec2	equ	0xFDD
 13452                           fsr2h	equ	0xFDA
 13453                           fsr2l	equ	0xFD9
 13454                           status	equ	0xFD8
 13455                           
 13456 ;; *************** function _ADC_StartConversion *****************
 13457 ;; Defined at:
 13458 ;;		line 36 in file "mcc_generated_files/adc.c"
 13459 ;; Parameters:    Size  Location     Type
 13460 ;;  channel         1    wreg     enum E8837
 13461 ;; Auto vars:     Size  Location     Type
 13462 ;;  channel         1    1[COMRAM] enum E8837
 13463 ;; Return value:  Size  Location     Type
 13464 ;;		None               void
 13465 ;; Registers used:
 13466 ;;		wreg, status,2, status,0
 13467 ;; Tracked objects:
 13468 ;;		On entry : 0/0
 13469 ;;		On exit  : 0/0
 13470 ;;		Unchanged: 0/0
 13471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13472 ;;      Params:         0       0       0       0       0       0       0
 13473 ;;      Locals:         1       0       0       0       0       0       0
 13474 ;;      Temps:          1       0       0       0       0       0       0
 13475 ;;      Totals:         2       0       0       0       0       0       0
 13476 ;;Total ram usage:        2 bytes
 13477 ;; Hardware stack levels used:    1
 13478 ;; This function calls:
 13479 ;;		Nothing
 13480 ;; This function is called by:
 13481 ;;		_ADC_ISR
 13482 ;;		_Battery_Read
 13483 ;;		_Temp_Read
 13484 ;; This function uses a non-reentrant model
 13485 ;;
 13486                           
 13487                           	psect	text70
 13488  003C06                     __ptext70:
 13489                           	opt stack 0
 13490  003C06                     _ADC_StartConversion:
 13491                           	opt stack 21
 13492                           
 13493                           ;incstack = 0
 13494                           ;ADC_StartConversion@channel stored from wreg
 13495  003C06  6E02               	movwf	ADC_StartConversion@channel,c
 13496                           
 13497                           ;adc.c: 39: ADCON0bits.CHS = channel;
 13498  003C08  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
 13499  003C0C  4601               	rlncf	??_ADC_StartConversion,f,c
 13500  003C0E  4601               	rlncf	??_ADC_StartConversion,f,c
 13501  003C10  50C2               	movf	4034,w,c	;volatile
 13502  003C12  1801               	xorwf	??_ADC_StartConversion,w,c
 13503  003C14  0B83               	andlw	-125
 13504  003C16  1801               	xorwf	??_ADC_StartConversion,w,c
 13505  003C18  6EC2               	movwf	4034,c	;volatile
 13506                           
 13507                           ;adc.c: 42: ADCON0bits.ADON = 1;
 13508  003C1A  80C2               	bsf	4034,0,c	;volatile
 13509                           
 13510                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
 13511  003C1C  82C2               	bsf	4034,1,c	;volatile
 13512  003C1E  0012               	return	
 13513  003C20                     __end_of_ADC_StartConversion:
 13514                           	opt stack 0
 13515                           tosu	equ	0xFFF
 13516                           tosh	equ	0xFFE
 13517                           tosl	equ	0xFFD
 13518                           pclatu	equ	0xFFB
 13519                           pclath	equ	0xFFA
 13520                           tblptru	equ	0xFF8
 13521                           tblptrh	equ	0xFF7
 13522                           tblptrl	equ	0xFF6
 13523                           tablat	equ	0xFF5
 13524                           prodh	equ	0xFF4
 13525                           prodl	equ	0xFF3
 13526                           intcon	equ	0xFF2
 13527                           intcon2	equ	0xFF1
 13528                           postinc0	equ	0xFEE
 13529                           fsr0h	equ	0xFEA
 13530                           fsr0l	equ	0xFE9
 13531                           wreg	equ	0xFE8
 13532                           postinc1	equ	0xFE6
 13533                           postdec1	equ	0xFE5
 13534                           fsr1h	equ	0xFE2
 13535                           fsr1l	equ	0xFE1
 13536                           indf2	equ	0xFDF
 13537                           postinc2	equ	0xFDE
 13538                           postdec2	equ	0xFDD
 13539                           fsr2h	equ	0xFDA
 13540                           fsr2l	equ	0xFD9
 13541                           status	equ	0xFD8
 13542                           
 13543 ;; *************** function _ADC_GetConversionResult *****************
 13544 ;; Defined at:
 13545 ;;		line 55 in file "mcc_generated_files/adc.c"
 13546 ;; Parameters:    Size  Location     Type
 13547 ;;		None
 13548 ;; Auto vars:     Size  Location     Type
 13549 ;;		None
 13550 ;; Return value:  Size  Location     Type
 13551 ;;                  2    0[COMRAM] unsigned int 
 13552 ;; Registers used:
 13553 ;;		wreg, status,2, status,0
 13554 ;; Tracked objects:
 13555 ;;		On entry : 0/0
 13556 ;;		On exit  : 0/0
 13557 ;;		Unchanged: 0/0
 13558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13559 ;;      Params:         2       0       0       0       0       0       0
 13560 ;;      Locals:         0       0       0       0       0       0       0
 13561 ;;      Temps:          2       0       0       0       0       0       0
 13562 ;;      Totals:         4       0       0       0       0       0       0
 13563 ;;Total ram usage:        4 bytes
 13564 ;; Hardware stack levels used:    1
 13565 ;; This function calls:
 13566 ;;		Nothing
 13567 ;; This function is called by:
 13568 ;;		_ADC_ISR
 13569 ;; This function uses a non-reentrant model
 13570 ;;
 13571                           
 13572                           	psect	text71
 13573  003C7C                     __ptext71:
 13574                           	opt stack 0
 13575  003C7C                     _ADC_GetConversionResult:
 13576                           	opt stack 22
 13577                           
 13578                           ;adc.c: 58: return ((ADRESH << 8) + ADRESL);
 13579                           
 13580                           ;incstack = 0
 13581  003C7C  50C4               	movf	4036,w,c	;volatile
 13582  003C7E  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 13583  003C80  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
 13584  003C82  50C3               	movf	4035,w,c	;volatile
 13585  003C84  2403               	addwf	??_ADC_GetConversionResult,w,c
 13586  003C86  6E01               	movwf	?_ADC_GetConversionResult,c
 13587  003C88  0E00               	movlw	0
 13588  003C8A  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
 13589  003C8C  6E02               	movwf	?_ADC_GetConversionResult+1,c
 13590  003C8E  0012               	return	
 13591  003C90                     __end_of_ADC_GetConversionResult:
 13592                           	opt stack 0
 13593                           tosu	equ	0xFFF
 13594                           tosh	equ	0xFFE
 13595                           tosl	equ	0xFFD
 13596                           pclatu	equ	0xFFB
 13597                           pclath	equ	0xFFA
 13598                           tblptru	equ	0xFF8
 13599                           tblptrh	equ	0xFF7
 13600                           tblptrl	equ	0xFF6
 13601                           tablat	equ	0xFF5
 13602                           prodh	equ	0xFF4
 13603                           prodl	equ	0xFF3
 13604                           intcon	equ	0xFF2
 13605                           intcon2	equ	0xFF1
 13606                           postinc0	equ	0xFEE
 13607                           fsr0h	equ	0xFEA
 13608                           fsr0l	equ	0xFE9
 13609                           wreg	equ	0xFE8
 13610                           postinc1	equ	0xFE6
 13611                           postdec1	equ	0xFE5
 13612                           fsr1h	equ	0xFE2
 13613                           fsr1l	equ	0xFE1
 13614                           indf2	equ	0xFDF
 13615                           postinc2	equ	0xFDE
 13616                           postdec2	equ	0xFDD
 13617                           fsr2h	equ	0xFDA
 13618                           fsr2l	equ	0xFD9
 13619                           status	equ	0xFD8
 13620                           tosu	equ	0xFFF
 13621                           tosh	equ	0xFFE
 13622                           tosl	equ	0xFFD
 13623                           pclatu	equ	0xFFB
 13624                           pclath	equ	0xFFA
 13625                           tblptru	equ	0xFF8
 13626                           tblptrh	equ	0xFF7
 13627                           tblptrl	equ	0xFF6
 13628                           tablat	equ	0xFF5
 13629                           prodh	equ	0xFF4
 13630                           prodl	equ	0xFF3
 13631                           intcon	equ	0xFF2
 13632                           intcon2	equ	0xFF1
 13633                           postinc0	equ	0xFEE
 13634                           fsr0h	equ	0xFEA
 13635                           fsr0l	equ	0xFE9
 13636                           wreg	equ	0xFE8
 13637                           postinc1	equ	0xFE6
 13638                           postdec1	equ	0xFE5
 13639                           fsr1h	equ	0xFE2
 13640                           fsr1l	equ	0xFE1
 13641                           indf2	equ	0xFDF
 13642                           postinc2	equ	0xFDE
 13643                           postdec2	equ	0xFDD
 13644                           fsr2h	equ	0xFDA
 13645                           fsr2l	equ	0xFD9
 13646                           status	equ	0xFD8
 13647                           
 13648                           	psect	text72
 13649  000000                     __ptext72:
 13650                           	opt stack 0
 13651                           tosu	equ	0xFFF
 13652                           tosh	equ	0xFFE
 13653                           tosl	equ	0xFFD
 13654                           pclatu	equ	0xFFB
 13655                           pclath	equ	0xFFA
 13656                           tblptru	equ	0xFF8
 13657                           tblptrh	equ	0xFF7
 13658                           tblptrl	equ	0xFF6
 13659                           tablat	equ	0xFF5
 13660                           prodh	equ	0xFF4
 13661                           prodl	equ	0xFF3
 13662                           intcon	equ	0xFF2
 13663                           intcon2	equ	0xFF1
 13664                           postinc0	equ	0xFEE
 13665                           fsr0h	equ	0xFEA
 13666                           fsr0l	equ	0xFE9
 13667                           wreg	equ	0xFE8
 13668                           postinc1	equ	0xFE6
 13669                           postdec1	equ	0xFE5
 13670                           fsr1h	equ	0xFE2
 13671                           fsr1l	equ	0xFE1
 13672                           indf2	equ	0xFDF
 13673                           postinc2	equ	0xFDE
 13674                           postdec2	equ	0xFDD
 13675                           fsr2h	equ	0xFDA
 13676                           fsr2l	equ	0xFD9
 13677                           status	equ	0xFD8
 13678                           
 13679                           	psect	rparam
 13680  0000                     tosu	equ	0xFFF
 13681                           tosh	equ	0xFFE
 13682                           tosl	equ	0xFFD
 13683                           pclatu	equ	0xFFB
 13684                           pclath	equ	0xFFA
 13685                           tblptru	equ	0xFF8
 13686                           tblptrh	equ	0xFF7
 13687                           tblptrl	equ	0xFF6
 13688                           tablat	equ	0xFF5
 13689                           prodh	equ	0xFF4
 13690                           prodl	equ	0xFF3
 13691                           intcon	equ	0xFF2
 13692                           intcon2	equ	0xFF1
 13693                           postinc0	equ	0xFEE
 13694                           fsr0h	equ	0xFEA
 13695                           fsr0l	equ	0xFE9
 13696                           wreg	equ	0xFE8
 13697                           postinc1	equ	0xFE6
 13698                           postdec1	equ	0xFE5
 13699                           fsr1h	equ	0xFE2
 13700                           fsr1l	equ	0xFE1
 13701                           indf2	equ	0xFDF
 13702                           postinc2	equ	0xFDE
 13703                           postdec2	equ	0xFDD
 13704                           fsr2h	equ	0xFDA
 13705                           fsr2l	equ	0xFD9
 13706                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        43
    BSS         1051
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      69
    BANK0           160     51     160
    BANK1           256     24     166
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256      0     206

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK1[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK4[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1131(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK3[200]), ring_buffer(BANK2[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK2[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK1[40]), 


Critical Paths under _main in COMRAM

    _main->_Battery_Fault
    _main->_Temp_Fault
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Tempeture_Get->___wmul
    _Temp_Fault->___ftge
    ___awtoft->___awdiv
    ___awtoft->___ftpack
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___altoft
    ___ftdiv->___altoft
    ___altoft->___ftpack
    ___ftmul->___altoft

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _Temp_Read->_Set_4051
    _Battery_Read->_ADC_StartConversion
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc
    _ADC_ISR->_ADC_GetConversionResult
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _updateComms->_ToSend
    _receiveData->_CRCcheck
    ___fttol->___ftmul
    _ToSend->___fttol
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _SYSTEM_Initialize->_begin
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Temp_Convert
    _Temp_Convert->_log
    _log->_eval_poly

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  152809
                                             19 BANK1      5     0      5
                    _Battery_Convert
                      _Battery_Fault
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          4     4      0   33818
                                              0 BANK1      4     4      0
                        _Battery_Get
                              _Delay
                      _Tempeture_Get
                             _ToSend
                            ___ftmul
                            ___fttol
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (2) _sendData                                             5     5      0    5297
                                             38 COMRAM     5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (3) _crcBufS_put                                          7     2      5     564
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_flush                            4     0      4     910
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         16    16      0   10715
                                             38 COMRAM     4     4      0
                                              7 BANK0     12    12      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (3) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (4) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1148
                                             30 BANK0     15    11      4
                        _Battery_Get (ARG)
                      _Tempeture_Get (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ToSend                                               3     1      2    2752
                                             45 BANK0      3     1      2
                        _Battery_Get (ARG)
            _FastTransfer_buffer_put
                      _Tempeture_Get (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Tempeture_Get                                        3     0      3    3497
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Delay                                                9     5      4     238
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    4238
                                             41 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        11    11      0   71619
                                              8 BANK1     11    11      0
                        _Temp_Filter
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   29589
                                              3 BANK1      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   14796
                                             42 BANK0      9     2      7
                                              0 BANK1      3     3      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2780
                                             34 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5351
                                             42 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   14602
                                             42 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2747
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1925
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1061
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    5898
                                              0 BANK0      7     7      0
                        _Battery_Get
                          _SetBypass
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypass                                            6     2      4     649
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    4036
                                             32 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    4269
                                             41 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     968
                                             32 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   30220
                                             44 BANK0      4     4      0
                     _Battery_Filter
                           ___altoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3489
                                              0 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2774
                                             34 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   14534
                                             42 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3158
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    6135
                                             15 BANK0     15     9      6
                        _Battery_Get (ARG)
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5018
                                             30 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2493
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    2230
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             3     3      0     366
                                              4 COMRAM     3     3      0
                       _Battery_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (9) _Temp_Read                                            0     0      0     344
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (9) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              8     8      0     655
                                              4 COMRAM     8     8      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (10) _Set_4051                                            4     2      2     322
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _ADC_StartConversion                                 2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___altoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___wmul
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _RunBypas
     _Battery_Get
       ___wmul
     _SetBypass
     ___ftge
       ___wmul (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _begin
       ___awdiv
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___wmul
     _log
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Battery_Get (ARG)
               ___wmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
     ___wmul
   _updateComms
     _Battery_Get
       ___wmul
     _Delay
     _Tempeture_Get
       ___wmul
     _ToSend
       _Battery_Get (ARG)
         ___wmul
       _FastTransfer_buffer_put (ARG)
         _FastTransfer_buffer_modulo_inc
       _Tempeture_Get (ARG)
         ___wmul
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         _Battery_Get (ARG)
           ___wmul
         _Tempeture_Get (ARG)
           ___wmul
         ___ftmul (ARG)
           _Battery_Get (ARG)
             ___wmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
     ___ftmul
       _Battery_Get (ARG)
         ___wmul
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___fttol
       _Battery_Get (ARG)
         ___wmul
       _Tempeture_Get (ARG)
         ___wmul
       ___ftmul (ARG)
         _Battery_Get (ARG)
           ___wmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Temp_Read
       _ADC_StartConversion
       _Set_4051

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      CE      15       80.5%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100     18      A6       6       64.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     33      A0       4      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4BD       9        0.0%
DATA                 0      0     4BD      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Sep 23 00:22:24 2015

      __end_of_FastTransfer_buffer_flush 36F8                   i2_UART_buff_modulo_inc 3AB2  
                           ___altoft@exp 002B                             _rx_array_inx 0041  
                          ___altoft@sign 002C                             ___awdiv@sign 0020  
                    ___wmul@multiplicand 001D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                             ___ftadd@exp1 00EA  
                           ___ftadd@exp2 00E9                             ___ftadd@sign 00E8  
                                    l520 2B14                                      l513 2B04  
                                    l506 2AF4                                      l471 2AA4  
                                    l464 2A94                                      l456 2A84  
                                    l492 2AD4                                      l485 2AC4  
                                    l478 2AB4                                      l499 2AE4  
                                    l599 381A                                      l778 32FA  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0037                                      _log 2070  
                        __end_of_ADC_ISR 15F2     FastTransfer_buffer_flush@clearBuffer 0025  
                                    fsr2 000FD9                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                        ?_Battery_Filter 0001                             ___ftdiv@cntr 00CA  
                           ___ftdiv@sign 00CF                                     l1202 25C8  
                                   l1171 1698                                     l1173 16C0  
                                   l1182 17AA                                     l1191 17D4  
                                   l1167 165E                                     l3031 3A3C  
                                   l3035 3A4C                                     l5111 2520  
                                   l5105 24E6                                     l5131 2580  
                                   l5205 3116                                     l5221 3690  
                                   l4413 37EE                                     l5029 0AE4  
                                   l5207 311A                                     l3543 37CA  
                                   l5039 0AF0                                     l4521 166C  
                                   l5091 34EC                                     l5155 3452  
                                   l3539 37B0                                     l4419 3804  
                                   l4427 3820                                     l4451 2B7C  
                                   l4381 3130                                     l4533 16B6  
                                   l4613 1E6A                                     l5093 34F8  
                                   l5165 34AE                                     l4429 3824  
                                   l4357 3A7E                                     l5069 0C5C  
                                   l5077 0C68                                     l4551 1740  
                                   l4543 16F8                                     l4527 16A6  
                                   l4623 1EB4                                     l5159 3482  
                                   l5271 2EB0                                     l5255 1A80  
                                   l4439 3AA8                                     l4463 2C08  
                                   l4447 2B72                                     l4471 2D3C  
                                   l5343 3964                                     l5335 394E  
                                   l4393 317C                                     l4385 313E  
                                   l4561 178C                                     l4553 174C  
                                   l4609 1E4C                                     l5193 2D2C  
                                   l4721 322A                                     l4713 320C  
                                   l4369 32F6                                     l4633 21DE  
                                   l5329 393C                                     l4395 319A  
                                   l4387 3148                                     l4563 17A0  
                                   l4555 1758                                     l4619 1E96  
                                   l5275 2EE4                                     l4731 324A  
                                   l4723 322E                                     l4707 31EC  
                                   l4397 31A4                                     l4389 3166  
                                   l4549 172C                                     l4821 1B92  
                                   l3861 1C4E                                     l4661 233A  
                                   l4719 3222                                     l4735 3254  
                                   l4751 3854                                     l4479 2DCA  
                                   l4903 26AA                                     l4569 17FE  
                                   l4657 2316                                     l4665 2342  
                                   l4489 27D4                                     l4921 064C  
                   receiveData@crcHolder 00CE                                     l4579 184C  
                                   l4595 1DFE                                     l4739 3262  
                                   l4763 3328                                     l3891 1D4C  
                                   l3883 1D12                                     l4907 26D8  
                                   l4589 1DC4                                     l4861 2A78  
                                   l4845 20DE                                     l3893 1D52  
                                   l4941 0728                                     ?_log 0191  
                                   l4871 2AC8                                     l4863 2A88  
                                   l4839 20AC                                     l3879 1CF6  
                                   l4873 2AD8                                     l4865 2A98  
                                   l4777 29D2                                     l3897 1D78  
                                   l3889 1D34                                     l4945 0746  
                                   l4929 0682                                     l4953 0774  
                                   l4875 2AE8                                     l4867 2AA8  
                                   l4883 2B18                                     l4779 2A5E  
                                   l4877 2AF8                                     l4869 2AB8  
                                   l4981 0838                                     l4973 07DC  
                                   l4879 2B08                                     l4959 077E  
                                   l4977 0810                                     l4995 0946  
                                   l4997 094C                                     l4989 08A8  
                                   l4999 0960                                     _CRC8 37E8  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u5045 2088  
                                   u5208 2688                                     u5209 26A0  
                                   u3810 1C7A                                     u5218 26AE  
                                   u5219 26D4                                     u4461 160A  
                                   u5318 06A4                                     u5238 26F4  
                                   u4471 162A                                     u3815 1C70  
                                   u5319 06B8                                     u5239 270A  
                                   u5168 2620                                     u6057 37B6  
                                   u5169 2636                                     u5418 0782  
                                   u5338 06C2                                     u5258 0626  
                                   u5178 263A                                     u5419 0796  
                                   u5339 06D6                                     u5259 063A  
                                   u5179 2650                                     u5348 06DC  
                                   u5188 2654                                     u5349 06F0  
                                   u5189 266A                                     u5438 07AA  
                                   u5358 06F6                                     u5278 0656  
                                   u5198 266E                                     u4671 1DA2  
                                   u3791 1C26                                     u5439 07C4  
                                   u5359 070A                                     u5279 066A  
                                   u5199 2684                                     u5608 0A72  
                                   u5609 0A88                                     u4738 21E2  
                                   u5618 0A8C                                     u5458 07E0  
                                   u5378 072C                                     u5298 0686  
                                   u4691 1DDC                                     u4739 21F6  
                                   u5619 0AC8                                     u5459 07F4  
                                   u5379 0740                                     u5299 069A  
                                   u5708 0BEA                                     u5628 0ACC  
                                   u5548 09D6                                     u5468 0814  
                                   u5709 0C00                                     u5549 09EC  
                                   u5469 0828                                     u4758 220A  
                                   u5718 0C04                                     u5558 09F0  
                                   u5735 34D2                                     u5751 24C4  
                                   u4759 221E                                     u5719 0C40  
                                   u5559 0A06                                     u4960 3350  
                                   u4768 2226                                     u5728 0C44  
                                   u5648 0B4E                                     u5568 0A0A  
                                   u4769 223A                                     u5649 0B64  
                                   u5569 0A20                                     u4778 2242  
                                   u5658 0B68                                     u5578 0A24  
                                   u5771 24FE                                     u4779 2256  
                                   u5659 0B7E                                     u5579 0A3A  
                                   u4788 225E                                     u5668 0B82  
                                   u5588 0A3E                                     u4789 2272  
                                   u5669 0B98                                     u5589 0A54  
                                   u5678 0B9C                                     u5598 0A58  
                                   u5679 0BB2                                     u5599 0A6E  
                                   u4968 3352                                     u5688 0BB6  
                                   u5689 0BCC                                     u5698 0BD0  
                                   u5699 0BE6                                     _TMR1 000FCE  
                                   _WPUB 000F61                  Tempeture_Get@channelnum 0021  
                                   _main 3934                             ___ftpack@arg 001B  
                           ___ftpack@exp 001E                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                          __CFG_BORV$190 000000                                     log@x 0191  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 2070  
                                   start 00A8                            __CFG_IESO$OFF 000000  
                           ___ftmul@cntr 00DD                             ___ftmul@sign 00DE  
         i2UART_buff_modulo_inc@my_value 0005                        ADC_ISR@ADC_Result 000B  
                           ___fttol@exp1 00ED                                    ??_log 002D  
                           ___fttol@lval 00E9                                    ?_CRC8 001B  
                       __end_of_CRCcheck 234A                         ?_Battery_Convert 0001  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 3CC2  
                     crcBufS_put@address 001D                                    ?_main 01A1  
                        __end_of___awdiv 326C                          __end_of___ftadd 1872  
                        __end_of___ftdiv 2604                          _TMR1_StartTimer 3CDA  
                        __end_of___ftmul 1F00                          ___awdiv@divisor 001D  
                                  _T1CON 000FCD                          __end_of___ftsub 38F8  
                        __end_of___fttol 1D8A                                    _LATA0 007C48  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATC0 007C58                                    _LATA4 007C4C  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATA6 007C4E                                    _LATD1 007C61  
                                  _LATD2 007C62                                    _LATC4 007C5C  
                                  _LATD3 007C63                                    _LATC5 007C5D  
                                  _LATD5 007C65                           __CFG_DEBUG$OFF 000000  
                                  i2l211 0064                                    i2l215 006E  
                                  i2l207 004C                                    i2l209 0058  
                                  i2l809 3B96                                    i2l778 341E  
                        ___awdiv@counter 001F                                    _TMR1H 000FCF  
                                  _TMR1L 000FCE                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
       __size_of_ADC_GetConversionResult 0014                                    _Delay 379E  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 38F8                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR1_ISR 374C                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _begin 3542                           __CFG_EBTRB$OFF 000000  
                          ___awtoft@sign 0026                                    _frexp 32FE  
                                  _errno 0094                                    _group 0043  
                     __CFG_MCLRE$EXTMCLR 000000                            ___ftpack@sign 001F  
                         SetBypass@state 001D                  __end_of_TMR1_Initialize 3B8E  
                                  pclath 000FFA                              _Battery_Adc 0060  
                                  tablat 000FF5                              _Battery_Get 39D2  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00EA  
                         begin@stuffpeek 00CC                     __size_of_crcBufS_put 00D6  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                          RunBypas@cellbyp 00C1  
                        RunBypas@batvolt 00C3                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 3830                          CRCcheck@SentCRC 00C1  
                        __initialization 2FC2                              log@exponent 0194  
             __end_of_EUSART1_Initialize 38BC                             __end_of_main 396A  
                             ToSend@what 00EE                                   ??_CRC8 001E  
                       __end_of_Set_4051 3A32                                ??_ADC_ISR 0005  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 002D  
                          ___fttol@sign1 00E8                            __activetblptr 000002  
                       __end_of_Send_put 39A0               ADC_StartConversion@channel 0002  
              __size_ofi2_UART_buff_size 0016                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                       __end_of_RunBypas 2EEC                            ?_Receive_peek 0001  
                                 ?_begin 00C1                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_frexp 001B                         __end_of___altoft 3542  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                       ___awdiv@dividend 001B                         __end_of___awtoft 3878  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                         __end_of___ftpack 31C8  
                                 _T1GCON 000FCC                          i2_UART_buff_get 3390  
                                 _RC1STA 000FAB                    __size_of_Battery_Read 0018  
                        i2_UART_buff_put 2862                                   i2l4001 1372  
                                 i2l4021 14F8                                   i2l4013 145C  
                                 i2l4005 13C0                                   i2l4025 1546  
                                 i2l4017 14AA                                   i2l4009 140E  
                                 i2l4033 159E                                   i2l4035 15EC  
                                 i2l3405 3AD2                           __CFG_WDTEN$OFF 000000  
                                 i2l4055 392C              UART_buff_modulo_inc@modulus 001D  
                                 i2l3923 341A                                   i2l3909 28F6  
                                 i2l3941 3732                                   i2l3961 11A6  
                                 i2l3955 1170                                   i2l3973 1212  
                                 i2l3981 1246                                   i2l3967 11DC  
                                 i2l3983 1270                                   i2l3993 12D6  
                                 i2l3985 1274                                   i2l3997 1324  
                                 i2l3989 1288                                   _RCREG1 000FAE  
                          ??_Temp_Filter 002D                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                               _Temp_Fault 362C  
                         __CFG_XINST$OFF 000000                                   _ToSend 3B4A  
                    __end_of_Receive_get 3CB4                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                    __end_of_Tempeture_Get 39D2  
                                 ___ftge 3422                            _output_buffer 0500  
                       crcBufS_get@space 001E                  __end_of_TMR1_StartTimer 3CDE  
                     __size_of_SetBypass 00F2                                   ___wmul 3ADC  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                              ??___ftadd 00E5                           __CFG_STVREN$ON 000000  
                              ??___ftdiv 00C7                                ??___ftmul 00D6  
                              ??___ftsub 002D                                ??___fttol 00E3  
                                 _memset 3A32                                   clear_0 2FC8  
                                 clear_1 2FD4                                   clear_2 2FE0  
                                 clear_3 2FEC                                   clear_4 2FF8  
                                 clear_5 3004                                   clear_6 3010  
                       ___awdiv@quotient 0021                       __size_of_Temp_Read 0024  
                                 _rx_len 0042                         __end_of_sendData 2740  
                  ___ftmul@f3_as_product 00DA                             __pdataCOMRAM 0045  
                           _Battery_Read 3C38                            Send_put@_data 0026  
                           _Battery_Volt 0170                             __mediumconst 0000  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0170             __end_of_UART_buff_modulo_inc 3A88  
          __size_of_INTERRUPT_Initialize 000C                         ?_TMR1_Initialize 0001  
                      _SYSTEM_Initialize 35BC                         __end_oflog@coeff 061C  
                             __accesstop 0060                  __end_of__initialization 3068  
                             ___altoft@c 0023                                ?_CRCcheck 0001  
                             ___ftadd@f1 00DF                               ___ftadd@f2 00E2  
                             ___ftge@ff1 0021                               ___ftge@ff2 0024  
                     ?_SYSTEM_Initialize 0001                             eval_poly@res 018E  
                             ___ftdiv@f1 00C1                               ___ftdiv@f2 00C4  
                             ___ftdiv@f3 00CB                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                               ___awtoft@c 0023  
                          __end_of_Delay 37E8                               ___ftmul@f1 00D0  
                             ___ftmul@f2 00D3                               ___ftsub@f1 00EB  
                             ___ftsub@f2 00EE                      __end_of_Temp_Filter 1C0E  
                             ___fttol@f1 00DF             __size_of_ADC_StartConversion 001A  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 2D32  
                           __pidataBANK0 3CC2                             __pidataBANK1 3BB0  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 35BC                                ?_TMR1_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 3AB2  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 3A88                            __end_of_frexp 3390  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00F0  
                     UART_buff_get@_this 0021                      ?_crcBufS_status_put 001B  
                  Battery_Get@channelnum 0021                    __end_of_UART_buff_get 32FE  
                 ??_EUSART1_Transmit_ISR 000C                  _ADC_GetConversionResult 3C7C  
                  __end_of_UART_buff_put 2862                         ??_Battery_Filter 002D  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 3422  
                __end_ofi2_UART_buff_put 2984              __end_of_EUSART1_Receive_ISR 3BB0  
              _FastTransfer_buffer_flush 3696                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                            ?_Temp_Convert 0001  
                                ??_frexp 0020                __end_of_SYSTEM_Initialize 362C  
                 receiveData@holder_1131 00CB                        __end_of_SetBypass 2B68  
                    _addressErrorCounter 008C                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                             __pbssBANK5 0500                       __size_of_eval_poly 00F2  
                        __CFG_PLLCFG$OFF 000000                        __end_of_Temp_Read 3B4A  
                            _Receive_get 3CA2                                ?_Set_4051 0001  
                             ??_CRCcheck 0027                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 3ADC                        begin@givenAddress 00C4  
                  Temp_Convert@steinhart 019E                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0024                              ?_Temp_Fault 0001  
                __size_of_UART_buff_size 0016                                ?_Send_put 0001  
                   __size_of_receiveData 064E                                  ?_ToSend 00EE  
                     __CFG_CCP2MX$PORTC1 000000                              Temp_Fault@i 002B  
                                ?___ftge 0021                                ?_RunBypas 0001  
                                ?___wmul 001B                         ?_TMR1_StartTimer 0001  
                             ??_TMR1_ISR 0005                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                ?___altoft 0023  
                                _ADC_ISR 1152                                  ?_memset 001B  
                             _crc_buffer 009C                                ?___awtoft 0023  
                              ?___ftpack 001B                  __size_of_ADC_Initialize 0018  
                          Temp_Convert@x 019C                   __size_of_Battery_Fault 00AE  
                        Temp_Fault@fault 002A                       UART_buff_put@_this 0021  
                       i2_UART_buff_size 3C66              i2UART_buff_modulo_inc@value 0001  
                         Battery_Fault@i 002B                                  _OSCCON2 000FD2  
                         ??_Temp_Convert 0196                        _Receive_available 3BEC  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 0028                      _receiveArrayAddress 0096  
                     ?_Receive_available 001D                               begin@error 00C5  
                           ?_Battery_Get 0021                               ??_Set_4051 0003  
                            _Temp_Filter 1A86                              _Temp_Aquire 003A  
                    ??_Receive_available 001F                                ?_sendData 0001  
                      _alignErrorCounter 008E                          __CFG_PWRTEN$OFF 000000  
                             ??_Send_put 0026                                  __Hparam 0000  
                                __Lparam 0000                          __size_of_ToSend 0022  
                   __end_of_Receive_peek 3CA2                                _AKNAKsend 0039  
                             ??_RunBypas 002A                          __size_of___ftge 0090  
                                ___awdiv 31C8                                  ___ftadd 15F2  
                   _UART_buff_modulo_inc 3A5E                                  ___ftdiv 24AC  
                        __size_of___wmul 0026                                  ___ftmul 1D8A  
                                ___ftsub 38BC                                  ___fttol 1C0E  
                                _calc_CS 003C                             __psmallconst 0600  
                             ??___altoft 0027                ??_ADC_GetConversionResult 0003  
                                __pcinit 2FC2                               ??___awtoft 0026  
                             ??___ftpack 0020                        __end_of_eval_poly 2A76  
                        __size_of_memset 002C                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 3934  
                                __ptext1 0C6C                                  __ptext2 2604  
                                __ptext3 2EEC                                  __ptext4 3696  
                                __ptext5 061E                                  __ptext6 396A  
                                __ptext7 2740                                  __ptext8 3C90  
                                __ptext9 3B02                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 3CB4  
              __end_of_Receive_available 3C06                             __size_of_log 016E  
                _FastTransfer_buffer_put 1F00                      __size_of_Temp_Fault 006A  
                  CRCcheck@calculatedCRC 00C2                       _EUSART1_Initialize 3878  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 001B  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
               __size_of_Battery_Convert 00E0                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 0070  
                   end_of_initialization 3068                                Delay@wait 0020  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                            _Battery_Fault 3072  
                             ??_sendData 0027                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 04E6                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc1 000FE6                                  postinc2 000FDE  
                       Battery_Convert@x 00EF                         begin@stufftosend 00C6  
                    CRCcheck@arrayHolder 00C3                     ??_EUSART1_Initialize 0025  
                 _dataAdressErrorCounter 0092                               _rx_address 0040  
                              _TRISCbits 000F94                      _ADC_StartConversion 3C06  
                            _Volt_Aquire 003B                             begin@maxSize 00C3  
                         ?_Battery_Fault 0001       __size_of_FastTransfer_buffer_flush 0062  
                            ___ftdiv@exp 00CE                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 3BCE                           _UART_buff_peek 3B02  
                         _UART_buff_size 3C50                      __end_of_crcBufS_get 2C52  
                    __end_of_crcBufS_put 2FC2                             SetBypass@pin 001B  
                      __size_of_CRCcheck 016C                             Delay@d_lenth 001B  
                            ___ftmul@exp 00D9                     ?_ADC_StartConversion 0001  
                          _moduleAddress 003E                     __end_of_Temp_Convert 1A86  
                             CRCcheck@rt 00C6                           __end_of_ToSend 3B6C  
           __end_of_INTERRUPT_Initialize 3CDA                           __end_of___ftge 34B2  
                        _crcErrorCounter 0090                           __end_of___wmul 3B02  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 3CDE  
                      __size_of_TMR1_ISR 0054                           _ADC_Initialize 3C20  
              ??_FastTransfer_buffer_put 0026                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 3A5E                        crcBufS_put@status 001F  
                           receiveData@r 00D2               __size_of_Receive_available 001A  
                           receiveData@u 00D0                      start_initialization 2FC2  
                             eval_poly@d 00EE                               eval_poly@n 00F0  
                             eval_poly@x 00EB          __size_of_PIN_MANAGER_Initialize 0052  
                  crcBufS_get@wantedTime 0025                              __end_of_log 21DE  
                 __size_of_Tempeture_Get 0032                   __end_of_UART_buff_init 3BEC  
                 __end_of_UART_buff_peek 3B26                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 3C66                               frexp@value 001B  
                           ?_Receive_get 0001                        ??_Battery_Convert 00ED  
                         UART_buff_put@c 0023                                _SetBypass 2A76  
                  __size_of_Receive_peek 0012                     __size_of_Battery_Get 0032  
                           ??_Temp_Fault 002A                 __end_ofi2_UART_buff_size 3C7C  
                      __size_of_Set_4051 002E                                _Temp_DegF 00F4  
                       _PrevBattery_Volt 0100                                _Temp_Done 0088  
                              _Temp_Read 3B26                    ??_ADC_StartConversion 0001  
                               ??_ToSend 002D                   ??_UART_buff_modulo_inc 001F  
               __size_of_TMR1_Initialize 0022                                 CRC8@data 001B  
                        crcBufS_get@time 001D                                 ??___ftge 0027  
                      __size_of_Send_put 0036                                 ??___wmul 001F  
                 __end_of_ADC_Initialize 3C38                              __pdataBANK0 00F4  
                            __pdataBANK1 0170                                RunBypas@i 00C6  
                               ?_ADC_ISR 0001                                 ??_memset 0021  
                      __size_of_RunBypas 00DC                        __size_of___altoft 0090  
                      __size_of___awtoft 0048                        __size_of___ftpack 00A8  
                              _Volt_Done 008A                              __pbssCOMRAM 002D  
          __size_of_EUSART1_Transmit_ISR 003C                            __pcstackBANK0 00C1  
                          __pcstackBANK1 018E                       __end_of_Temp_Fault 3696  
                           _Receive_peek 3C90                      UART_buff_init@_this 0023  
                          _PrevTemp_DegF 011E                              _crcBufS_get 2B68  
                    UART_buff_peek@_this 001B                              _crcBufS_put 2EEC  
                        ??_Battery_Fault 002A                          ?_UART_buff_init 0023  
                        ?_UART_buff_peek 001B                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 0022                             ?_Temp_Filter 0001  
                          ??_receiveData 0027                               ?_SetBypass 001B  
            __size_of_crcBufS_status_put 00DE                               sendData@CS 0029  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 0122  
                             ?_Temp_Read 0001                   _PIN_MANAGER_Initialize 374C  
                      __size_of_sendData 013C                        _Temp_Convert$2202 0198  
                      _Temp_Convert$2203 019A                                __pintcode 0008  
                          _Tempeture_Get 39A0                                 ?___awdiv 001B  
                               ?___ftadd 00DF                                 ?___ftdiv 00C1  
                               ?___ftmul 00D0                                 ?___ftsub 00EB  
                               ?___fttol 00DF                             Temp_Filter@x 00EB  
                        ?_ADC_Initialize 0001             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                                 _BAUD1CON 000FB8  
                            __smallconst 0600                 __size_of_TMR1_StartTimer 0004  
                              _eval_poly 2984                           __size_of_Delay 004A  
                         __size_of_begin 007A                           __size_of_frexp 0092  
                   _INTERRUPT_Initialize 3CCE                             _receiveArray 012A  
                __size_of_Battery_Filter 0162                                 _CRCcheck 21DE  
                         ___wmul@product 001F                                 _LATAbits 000F89  
                               _LATEbits 000F8D                    __size_of_Temp_Convert 0214  
                    UART_buff_size@_this 001B                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D      __size_of_INTERRUPT_InterruptManager 00A0  
                               _PIR1bits 000F9E                          Battery_Filter@x 00EB  
                    begin@stuffavailable 00CA                           ?_Tempeture_Get 0021  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0C6C                                 _TMR1_ISR 36F8  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0400  
                              _rx_buffer 0300                        ??_TMR1_Initialize 001B  
                       __size_of_ADC_ISR 04A0                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 001B                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 326C                            ?_Battery_Read 0001  
                          _UART_buff_put 2740                               ?_eval_poly 00EB  
               ??i2_UART_buff_modulo_inc 0005                             _Temp_Convert 1872  
                            _INTCON2bits 000FF1                                copy_data0 302A  
                              copy_data1 304A                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 0098                 __size_ofi2_UART_buff_get 0092  
                               _Set_4051 3A04                 __size_ofi2_UART_buff_put 0122  
                            ??_SetBypass 001F                                frexp@eptr 001E  
                          ??_updateComms 018E                     __size_of_Receive_get 0012  
                               __Hrparam 0000                              ??_Temp_Read 0005  
                               _Send_put 396A                                 _Temp_Adc 00B9  
                               __Lrparam 0000                 ?_ADC_GetConversionResult 0001  
                     __CFG_BOREN$SBORDIS 000000                                 _RunBypas 2E10  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                       __size_of___awdiv 00A4                         __size_of___ftadd 0280  
                       __size_of___ftdiv 0158                                 ___altoft 34B2  
                       __size_of___ftmul 0176                         __size_of___ftsub 003C  
                       __size_of___fttol 017C              __size_of_EUSART1_Initialize 0044  
                    begin@stufftoreceive 00C8                                 ___awtoft 3830  
                               ___ftpack 3120                           ?_UART_buff_get 0021  
                         ??_Battery_Read 0003                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 002A  
                        _Battery_Convert 2C52                       Battery_Fault@fault 002A  
               crcBufS_status_put@status 001E                                 __ptext10 21DE  
                               __ptext11 2D32                                 __ptext20 3B4A  
                               __ptext12 2B68                                 __ptext21 1F00  
                               __ptext13 3CA2                               _T1GCONbits 000FCC  
                               __ptext30 3830                                 __ptext22 3A88  
                               __ptext14 326C                                 __ptext31 38BC  
                               __ptext23 39A0                                 __ptext15 3A5E  
                               __ptext40 3CCE                                 __ptext32 1A86  
                               __ptext24 379E                                 __ptext16 3BEC  
                               __ptext41 3878                                 __ptext33 35BC  
                               __ptext25 362C                                 __ptext17 3C50  
                               __ptext50 2C52                                 __ptext42 3BCE  
                               __ptext34 3542                                 __ptext26 1872  
                               __ptext18 37E8                                 __ptext51 24AC  
                               __ptext43 3A32                                 __ptext35 31C8  
                               __ptext27 2070                                 __ptext19 1C0E  
                               __ptext60 3B26                                 __ptext52 34B2  
                               __ptext44 3C20                                 __ptext36 3B6C  
                               __ptext28 32FE                                 __ptext61 3C38  
                               __ptext53 234A                                 __ptext45 2E10  
                               __ptext37 3CDA                                 __ptext29 2984  
                               __ptext70 3C06                                 __ptext62 38F8  
                               __ptext54 3ADC                                 __ptext46 2A76  
                               __ptext38 374C                                 __ptext71 3C7C  
                               __ptext63 3C66                                 __ptext55 1D8A  
                               __ptext47 39D2                                 __ptext39 3CB4  
                               __ptext72 0000                                 __ptext64 3390  
                               __ptext56 15F2                                 __ptext48 3072  
                               __ptext65 3B8E                                 __ptext57 3120  
                               __ptext49 3422                                 __ptext66 2862  
                               __ptext67 3AB2                                 __ptext59 36F8  
                               __ptext68 1152                                 __ptext69 3A04  
                      ??_TMR1_StartTimer 001B                            __size_of_CRC8 0048  
                               begin@ptr 00C1                  EUSART1_Receive_ISR@data 000C  
                          _returnAddress 003F                            __size_of_main 0036  
                            _receiveData 061E                           _Transmit_stall 0045  
                               _sendData 2604                             _TmpTemp_DegF 00AD  
                   __size_of_Temp_Filter 0188                          ??_Tempeture_Get 0024  
                      ?i2_UART_buff_size 0001                               _RC1STAbits 000FAB  
                     ??i2_UART_buff_size 0003                             _serial_write 0035  
                    __end_of_updateComms 1152       __end_of_INTERRUPT_InterruptManager 00A8  
             _INTERRUPT_InterruptManager 0008                                 main@argc 01A1  
                               main@argv 01A3                      _EUSART1_Receive_ISR 3B8E  
                      receiveData@holder 00C8                                 log@coeff 0601  
                             _INTCONbits 000FF2                              ??_eval_poly 00F2  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                 ??_INTERRUPT_Initialize 001B                                 memset@p1 001B  
                       _serial_available 0031          __size_ofi2_UART_buff_modulo_inc 002A  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                          ??_Battery_Get 0024                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                           _Battery_Filter 234A  
                          _CountCallBack 002F                     ?_EUSART1_Receive_ISR 0001  
            __end_of_ADC_StartConversion 3C20   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                         _TempBattery_Volt 0152  
                ?_PIN_MANAGER_Initialize 0001          __end_of_ADC_GetConversionResult 3C90  
           __end_of_EUSART1_Transmit_ISR 3934                              _ring_buffer 0200  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 0023  
                      ??i2_UART_buff_get 0009                              _serial_peek 009A  
                            _serial_read 0033                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                __end_of_Battery_Convert 2D32                          ??_UART_buff_get 0023  
                        ??_UART_buff_put 0024    FastTransfer_buffer_modulo_inc@modulus 001D  
                 crcBufS_status_put@time 001D                receiveData@crcHolder_1132 00CF  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003D  
                 __end_of_Battery_Filter 24AC               __end_of_crcBufS_status_put 2E10  
                  ??_EUSART1_Receive_ISR 000C           __end_of_PIN_MANAGER_Initialize 379E  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                  __end_of_Battery_Fault 3120                        __CFG_FOSC$INTIO67 000000  
                   __end_of_Battery_Read 3C50                          _TMR1_Initialize 3B6C  
                            _updateComms 0C6C                         _ADC_Buffer_Point 002D  
                    __end_of_Battery_Get 3A04                          Set_4051@Channel 0001  
